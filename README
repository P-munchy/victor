****************************
Webots simulator setup
****************************


Dependencies
======================

* Matlab

Most of the vision processing, at least in the beginning, will be done with Matlab. To run simulations that process camera images you will need Matlab. 




License
======================

A license is required to run the Webots simulator. Ask Hanns to buy you one or add you to an existing license. 



Setup
======================

Once Webots is installed, test it out by trying opening world/cozmoFocalLengthTest.wbt.

1) If you see errors regarding now being able to start Matlab you may need to add a simlink to your path:

sudo ln -s /Applications/MATLAB_R2013a.app/bin/matlab /usr/bin/matlab


2) Go to the menu item Webots->Preferences. Select OpenGL and check the 'Disable shadows' box. Shadows can particularly interfere with the downward facing camera. We can assume this area will be actively lit on the robot.

3) Add WEBOTS_HOME environment variable by adding the following line to your .bashrc or .bash_profile

export WEBOTS_HOME=/Applications/Webots

This is necessary to build controller or supervisor projects from the command line, which seems necessary when you have more than one controller or supervisor in your world.




Troubleshooting
======================



Insufficient shared memory
-----------------------------

At times, I have seen error messages to the effect of 'cannot allocate sufficient shared memory'.  There appears to be a memory leak of some kind in Webots and you may need to clear them out manually.

Use the command line tool ipcs to view what shared memory segments are currently allocated in the system. Run

  ipcs -p

to view the shared memory segments. Verify that these segments are not associated with a running process by making sure that the associated process IDs do not refer to an existing  process. You can do this with the command

  ps -ax | grep <CPID or LPID>


Once you have verified these are orphaned shared memory segments, you can remove them with the command 

  ipcrm  -m <shared memory ID>   (The shared memory ID is under the ID column of the ipcs output)


