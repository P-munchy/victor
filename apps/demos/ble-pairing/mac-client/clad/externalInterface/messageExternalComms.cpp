// Autogenerated C++ message buffer code.
// Source: clad/externalInterface/messageExternalComms.clad
// Full command line: victor-sdk-clad/tools/message-buffers/emitters/CPP_emitter.py --output-union-helper-constructors -C sdk -I victor-sdk-clad/clad/sdk -o generated/clad clad/externalInterface/messageExternalComms.clad

#include "messageExternalComms.h"

namespace Anki {

namespace Victor {

namespace ExternalComms {

const char* EnumToString(const RtsMode m)
{
  switch(m) {
    case RtsMode::RAW:
      return "RAW";
    case RtsMode::CLAD:
      return "CLAD";
    case RtsMode::CLAD_ENCRYPTED:
      return "CLAD_ENCRYPTED";
    default: return nullptr;
  }
  return nullptr;
}

const char* RtsModeVersionHashStr = "0cc19ea3a020184dd8f6276941138952";

const uint8_t RtsModeVersionHash[16] = { 
    0xc, 0xc1, 0x9e, 0xa3, 0xa0, 0x20, 0x18, 0x4d, 0xd8, 0xf6, 0x27, 0x69, 0x41, 0x13, 0x89, 0x52 
};

const char* EnumToString(const RtsConnType m)
{
  switch(m) {
    case RtsConnType::FirstTimePair:
      return "FirstTimePair";
    case RtsConnType::Reconnection:
      return "Reconnection";
    default: return nullptr;
  }
  return nullptr;
}

const char* RtsConnTypeVersionHashStr = "1044b7670becdc70f8b09cef2e0d2044";

const uint8_t RtsConnTypeVersionHash[16] = { 
    0x10, 0x44, 0xb7, 0x67, 0xb, 0xec, 0xdc, 0x70, 0xf8, 0xb0, 0x9c, 0xef, 0x2e, 0xd, 0x20, 0x44 
};

// MESSAGE RtsWifiScanResult

RtsWifiScanResult::RtsWifiScanResult(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsWifiScanResult::RtsWifiScanResult(const uint8_t* buff, size_t len)
: RtsWifiScanResult::RtsWifiScanResult({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsWifiScanResult::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsWifiScanResult::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->authType);
  buffer.Write(this->signalStrength);
  buffer.WritePString<uint8_t>(this->ssid);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsWifiScanResult::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsWifiScanResult::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->authType);
  buffer.Read(this->signalStrength);
  buffer.ReadPString<uint8_t>(this->ssid);
  return buffer.GetBytesRead();
}

size_t RtsWifiScanResult::Size() const
{
  size_t result = 0;
  // authType
  result += 1; // uint_8
  // signalStrength
  result += 1; // uint_8
  // ssid
  result += 1; // uint_8 (string length)
  result += this->ssid.length(); // uint_8
  return result;
}

bool RtsWifiScanResult::operator==(const RtsWifiScanResult& other) const
{
  return (this->authType == other.authType &&
    this->signalStrength == other.signalStrength &&
    this->ssid == other.ssid);
}

bool RtsWifiScanResult::operator!=(const RtsWifiScanResult& other) const
{
  return !(operator==(other));
}


const char* RtsWifiScanResultVersionHashStr = "5caca4950c67e8640c07af04d852e7cc";

const uint8_t RtsWifiScanResultVersionHash[16] = { 
    0x5c, 0xac, 0xa4, 0x95, 0xc, 0x67, 0xe8, 0x64, 0xc, 0x7, 0xaf, 0x4, 0xd8, 0x52, 0xe7, 0xcc 
};

// MESSAGE RtsConnRequest

RtsConnRequest::RtsConnRequest(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsConnRequest::RtsConnRequest(const uint8_t* buff, size_t len)
: RtsConnRequest::RtsConnRequest({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsConnRequest::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsConnRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.WriteFArray<uint8_t, 32>(this->publicKey);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsConnRequest::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsConnRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.ReadFArray<uint8_t, 32>(this->publicKey);
  return buffer.GetBytesRead();
}

size_t RtsConnRequest::Size() const
{
  size_t result = 0;
  // publicKey
  result += 1 * 32; // uint_8 * 32
  return result;
}

bool RtsConnRequest::operator==(const RtsConnRequest& other) const
{
  return (this->publicKey == other.publicKey);
}

bool RtsConnRequest::operator!=(const RtsConnRequest& other) const
{
  return !(operator==(other));
}


const char* RtsConnRequestVersionHashStr = "ac9db960e0ef1d2b1de1162fe4545ff0";

const uint8_t RtsConnRequestVersionHash[16] = { 
    0xac, 0x9d, 0xb9, 0x60, 0xe0, 0xef, 0x1d, 0x2b, 0x1d, 0xe1, 0x16, 0x2f, 0xe4, 0x54, 0x5f, 0xf0 
};

// MESSAGE RtsConnResponse

RtsConnResponse::RtsConnResponse(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsConnResponse::RtsConnResponse(const uint8_t* buff, size_t len)
: RtsConnResponse::RtsConnResponse({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsConnResponse::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsConnResponse::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->connectionType);
  buffer.WriteFArray<uint8_t, 32>(this->publicKey);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsConnResponse::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsConnResponse::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->connectionType);
  buffer.ReadFArray<uint8_t, 32>(this->publicKey);
  return buffer.GetBytesRead();
}

size_t RtsConnResponse::Size() const
{
  size_t result = 0;
  // connectionType
  result += 1; // RtsConnType
  // publicKey
  result += 1 * 32; // uint_8 * 32
  return result;
}

bool RtsConnResponse::operator==(const RtsConnResponse& other) const
{
  return (this->connectionType == other.connectionType &&
    this->publicKey == other.publicKey);
}

bool RtsConnResponse::operator!=(const RtsConnResponse& other) const
{
  return !(operator==(other));
}


const char* RtsConnResponseVersionHashStr = "fbec058b14b46c9b5cdf5f66619eb996";

const uint8_t RtsConnResponseVersionHash[16] = { 
    0xfb, 0xec, 0x5, 0x8b, 0x14, 0xb4, 0x6c, 0x9b, 0x5c, 0xdf, 0x5f, 0x66, 0x61, 0x9e, 0xb9, 0x96 
};

// MESSAGE RtsNonceMessage

RtsNonceMessage::RtsNonceMessage(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsNonceMessage::RtsNonceMessage(const uint8_t* buff, size_t len)
: RtsNonceMessage::RtsNonceMessage({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsNonceMessage::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsNonceMessage::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.WriteFArray<uint8_t, 24>(this->toRobotNonce);
  buffer.WriteFArray<uint8_t, 24>(this->toDeviceNonce);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsNonceMessage::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsNonceMessage::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.ReadFArray<uint8_t, 24>(this->toRobotNonce);
  buffer.ReadFArray<uint8_t, 24>(this->toDeviceNonce);
  return buffer.GetBytesRead();
}

size_t RtsNonceMessage::Size() const
{
  size_t result = 0;
  // toRobotNonce
  result += 1 * 24; // uint_8 * 24
  // toDeviceNonce
  result += 1 * 24; // uint_8 * 24
  return result;
}

bool RtsNonceMessage::operator==(const RtsNonceMessage& other) const
{
  return (this->toRobotNonce == other.toRobotNonce &&
    this->toDeviceNonce == other.toDeviceNonce);
}

bool RtsNonceMessage::operator!=(const RtsNonceMessage& other) const
{
  return !(operator==(other));
}


const char* RtsNonceMessageVersionHashStr = "cb42948e43bdd6385450ae851e493e2a";

const uint8_t RtsNonceMessageVersionHash[16] = { 
    0xcb, 0x42, 0x94, 0x8e, 0x43, 0xbd, 0xd6, 0x38, 0x54, 0x50, 0xae, 0x85, 0x1e, 0x49, 0x3e, 0x2a 
};

// MESSAGE RtsAck

RtsAck::RtsAck(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsAck::RtsAck(const uint8_t* buff, size_t len)
: RtsAck::RtsAck({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsAck::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsAck::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->rtsConnectionTag);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsAck::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsAck::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->rtsConnectionTag);
  return buffer.GetBytesRead();
}

size_t RtsAck::Size() const
{
  size_t result = 0;
  // rtsConnectionTag
  result += 1; // uint_8
  return result;
}

bool RtsAck::operator==(const RtsAck& other) const
{
  return (this->rtsConnectionTag == other.rtsConnectionTag);
}

bool RtsAck::operator!=(const RtsAck& other) const
{
  return !(operator==(other));
}


const char* RtsAckVersionHashStr = "a698708629f981ab20fa45c13ae27013";

const uint8_t RtsAckVersionHash[16] = { 
    0xa6, 0x98, 0x70, 0x86, 0x29, 0xf9, 0x81, 0xab, 0x20, 0xfa, 0x45, 0xc1, 0x3a, 0xe2, 0x70, 0x13 
};

// MESSAGE RtsChallengeMessage

RtsChallengeMessage::RtsChallengeMessage(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsChallengeMessage::RtsChallengeMessage(const uint8_t* buff, size_t len)
: RtsChallengeMessage::RtsChallengeMessage({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsChallengeMessage::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsChallengeMessage::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->number);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsChallengeMessage::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsChallengeMessage::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->number);
  return buffer.GetBytesRead();
}

size_t RtsChallengeMessage::Size() const
{
  size_t result = 0;
  // number
  result += 4; // uint_32
  return result;
}

bool RtsChallengeMessage::operator==(const RtsChallengeMessage& other) const
{
  return (this->number == other.number);
}

bool RtsChallengeMessage::operator!=(const RtsChallengeMessage& other) const
{
  return !(operator==(other));
}


const char* RtsChallengeMessageVersionHashStr = "b3123d5e4f25183b02c3dad41afdea7f";

const uint8_t RtsChallengeMessageVersionHash[16] = { 
    0xb3, 0x12, 0x3d, 0x5e, 0x4f, 0x25, 0x18, 0x3b, 0x2, 0xc3, 0xda, 0xd4, 0x1a, 0xfd, 0xea, 0x7f 
};

// MESSAGE RtsChallengeSuccessMessage

RtsChallengeSuccessMessage::RtsChallengeSuccessMessage(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsChallengeSuccessMessage::RtsChallengeSuccessMessage(const uint8_t* buff, size_t len)
: RtsChallengeSuccessMessage::RtsChallengeSuccessMessage({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsChallengeSuccessMessage::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsChallengeSuccessMessage::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsChallengeSuccessMessage::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsChallengeSuccessMessage::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t RtsChallengeSuccessMessage::Size() const
{
  size_t result = 0;
  return result;
}

bool RtsChallengeSuccessMessage::operator==(const RtsChallengeSuccessMessage& other) const
{
return true;
}

bool RtsChallengeSuccessMessage::operator!=(const RtsChallengeSuccessMessage& other) const
{
  return !(operator==(other));
}


const char* RtsChallengeSuccessMessageVersionHashStr = "43871b16e2aab82c58c86c02e17cf31b";

const uint8_t RtsChallengeSuccessMessageVersionHash[16] = { 
    0x43, 0x87, 0x1b, 0x16, 0xe2, 0xaa, 0xb8, 0x2c, 0x58, 0xc8, 0x6c, 0x2, 0xe1, 0x7c, 0xf3, 0x1b 
};

// MESSAGE RtsWifiConnectRequest

RtsWifiConnectRequest::RtsWifiConnectRequest(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsWifiConnectRequest::RtsWifiConnectRequest(const uint8_t* buff, size_t len)
: RtsWifiConnectRequest::RtsWifiConnectRequest({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsWifiConnectRequest::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsWifiConnectRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.WritePString<uint8_t>(this->ssid);
  buffer.WritePString<uint8_t>(this->password);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsWifiConnectRequest::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsWifiConnectRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.ReadPString<uint8_t>(this->ssid);
  buffer.ReadPString<uint8_t>(this->password);
  return buffer.GetBytesRead();
}

size_t RtsWifiConnectRequest::Size() const
{
  size_t result = 0;
  // ssid
  result += 1; // uint_8 (string length)
  result += this->ssid.length(); // uint_8
  // password
  result += 1; // uint_8 (string length)
  result += this->password.length(); // uint_8
  return result;
}

bool RtsWifiConnectRequest::operator==(const RtsWifiConnectRequest& other) const
{
  return (this->ssid == other.ssid &&
    this->password == other.password);
}

bool RtsWifiConnectRequest::operator!=(const RtsWifiConnectRequest& other) const
{
  return !(operator==(other));
}


const char* RtsWifiConnectRequestVersionHashStr = "62b9cf7b3dcc996b7fc09be89c05aa5a";

const uint8_t RtsWifiConnectRequestVersionHash[16] = { 
    0x62, 0xb9, 0xcf, 0x7b, 0x3d, 0xcc, 0x99, 0x6b, 0x7f, 0xc0, 0x9b, 0xe8, 0x9c, 0x5, 0xaa, 0x5a 
};

// MESSAGE RtsWifiConnectResponse

RtsWifiConnectResponse::RtsWifiConnectResponse(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsWifiConnectResponse::RtsWifiConnectResponse(const uint8_t* buff, size_t len)
: RtsWifiConnectResponse::RtsWifiConnectResponse({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsWifiConnectResponse::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsWifiConnectResponse::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->statusCode);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsWifiConnectResponse::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsWifiConnectResponse::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->statusCode);
  return buffer.GetBytesRead();
}

size_t RtsWifiConnectResponse::Size() const
{
  size_t result = 0;
  // statusCode
  result += 1; // uint_8
  return result;
}

bool RtsWifiConnectResponse::operator==(const RtsWifiConnectResponse& other) const
{
  return (this->statusCode == other.statusCode);
}

bool RtsWifiConnectResponse::operator!=(const RtsWifiConnectResponse& other) const
{
  return !(operator==(other));
}


const char* RtsWifiConnectResponseVersionHashStr = "95e87374ead10e62f14d0491fa0c8046";

const uint8_t RtsWifiConnectResponseVersionHash[16] = { 
    0x95, 0xe8, 0x73, 0x74, 0xea, 0xd1, 0xe, 0x62, 0xf1, 0x4d, 0x4, 0x91, 0xfa, 0xc, 0x80, 0x46 
};

// MESSAGE RtsWifiIpRequest

RtsWifiIpRequest::RtsWifiIpRequest(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsWifiIpRequest::RtsWifiIpRequest(const uint8_t* buff, size_t len)
: RtsWifiIpRequest::RtsWifiIpRequest({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsWifiIpRequest::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsWifiIpRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsWifiIpRequest::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsWifiIpRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t RtsWifiIpRequest::Size() const
{
  size_t result = 0;
  return result;
}

bool RtsWifiIpRequest::operator==(const RtsWifiIpRequest& other) const
{
return true;
}

bool RtsWifiIpRequest::operator!=(const RtsWifiIpRequest& other) const
{
  return !(operator==(other));
}


const char* RtsWifiIpRequestVersionHashStr = "f2a7949d69fc5ede6f9b228b71e7db4f";

const uint8_t RtsWifiIpRequestVersionHash[16] = { 
    0xf2, 0xa7, 0x94, 0x9d, 0x69, 0xfc, 0x5e, 0xde, 0x6f, 0x9b, 0x22, 0x8b, 0x71, 0xe7, 0xdb, 0x4f 
};

// MESSAGE RtsWifiIpResponse

RtsWifiIpResponse::RtsWifiIpResponse(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsWifiIpResponse::RtsWifiIpResponse(const uint8_t* buff, size_t len)
: RtsWifiIpResponse::RtsWifiIpResponse({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsWifiIpResponse::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsWifiIpResponse::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->hasIpV4);
  buffer.Write(this->hasIpV6);
  buffer.WriteFArray<uint8_t, 4>(this->ipV4);
  buffer.WriteFArray<uint8_t, 16>(this->ipV6);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsWifiIpResponse::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsWifiIpResponse::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->hasIpV4);
  buffer.Read(this->hasIpV6);
  buffer.ReadFArray<uint8_t, 4>(this->ipV4);
  buffer.ReadFArray<uint8_t, 16>(this->ipV6);
  return buffer.GetBytesRead();
}

size_t RtsWifiIpResponse::Size() const
{
  size_t result = 0;
  // hasIpV4
  result += 1; // uint_8
  // hasIpV6
  result += 1; // uint_8
  // ipV4
  result += 1 * 4; // uint_8 * 4
  // ipV6
  result += 1 * 16; // uint_8 * 16
  return result;
}

bool RtsWifiIpResponse::operator==(const RtsWifiIpResponse& other) const
{
  return (this->hasIpV4 == other.hasIpV4 &&
    this->hasIpV6 == other.hasIpV6 &&
    this->ipV4 == other.ipV4 &&
    this->ipV6 == other.ipV6);
}

bool RtsWifiIpResponse::operator!=(const RtsWifiIpResponse& other) const
{
  return !(operator==(other));
}


const char* RtsWifiIpResponseVersionHashStr = "3b861607666953e477618c3cbee1f00d";

const uint8_t RtsWifiIpResponseVersionHash[16] = { 
    0x3b, 0x86, 0x16, 0x7, 0x66, 0x69, 0x53, 0xe4, 0x77, 0x61, 0x8c, 0x3c, 0xbe, 0xe1, 0xf0, 0xd 
};

// MESSAGE RtsStatusRequest

RtsStatusRequest::RtsStatusRequest(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsStatusRequest::RtsStatusRequest(const uint8_t* buff, size_t len)
: RtsStatusRequest::RtsStatusRequest({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsStatusRequest::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsStatusRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsStatusRequest::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsStatusRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t RtsStatusRequest::Size() const
{
  size_t result = 0;
  return result;
}

bool RtsStatusRequest::operator==(const RtsStatusRequest& other) const
{
return true;
}

bool RtsStatusRequest::operator!=(const RtsStatusRequest& other) const
{
  return !(operator==(other));
}


const char* RtsStatusRequestVersionHashStr = "d9b435055989dbae131f04619f984d1f";

const uint8_t RtsStatusRequestVersionHash[16] = { 
    0xd9, 0xb4, 0x35, 0x5, 0x59, 0x89, 0xdb, 0xae, 0x13, 0x1f, 0x4, 0x61, 0x9f, 0x98, 0x4d, 0x1f 
};

// MESSAGE RtsStatusResponse

RtsStatusResponse::RtsStatusResponse(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsStatusResponse::RtsStatusResponse(const uint8_t* buff, size_t len)
: RtsStatusResponse::RtsStatusResponse({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsStatusResponse::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsStatusResponse::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.WritePString<uint8_t>(this->wifiSsid);
  buffer.Write(this->wifiState);
  buffer.Write(this->bleState);
  buffer.Write(this->batteryState);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsStatusResponse::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsStatusResponse::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.ReadPString<uint8_t>(this->wifiSsid);
  buffer.Read(this->wifiState);
  buffer.Read(this->bleState);
  buffer.Read(this->batteryState);
  return buffer.GetBytesRead();
}

size_t RtsStatusResponse::Size() const
{
  size_t result = 0;
  // wifiSsid
  result += 1; // uint_8 (string length)
  result += this->wifiSsid.length(); // uint_8
  // wifiState
  result += 1; // uint_8
  // bleState
  result += 1; // uint_8
  // batteryState
  result += 1; // uint_8
  return result;
}

bool RtsStatusResponse::operator==(const RtsStatusResponse& other) const
{
  return (this->wifiSsid == other.wifiSsid &&
    this->wifiState == other.wifiState &&
    this->bleState == other.bleState &&
    this->batteryState == other.batteryState);
}

bool RtsStatusResponse::operator!=(const RtsStatusResponse& other) const
{
  return !(operator==(other));
}


const char* RtsStatusResponseVersionHashStr = "e75cd3daeede788c0351804c5f9be032";

const uint8_t RtsStatusResponseVersionHash[16] = { 
    0xe7, 0x5c, 0xd3, 0xda, 0xee, 0xde, 0x78, 0x8c, 0x3, 0x51, 0x80, 0x4c, 0x5f, 0x9b, 0xe0, 0x32 
};

// MESSAGE RtsWifiScanRequest

RtsWifiScanRequest::RtsWifiScanRequest(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsWifiScanRequest::RtsWifiScanRequest(const uint8_t* buff, size_t len)
: RtsWifiScanRequest::RtsWifiScanRequest({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsWifiScanRequest::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsWifiScanRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsWifiScanRequest::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsWifiScanRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t RtsWifiScanRequest::Size() const
{
  size_t result = 0;
  return result;
}

bool RtsWifiScanRequest::operator==(const RtsWifiScanRequest& other) const
{
return true;
}

bool RtsWifiScanRequest::operator!=(const RtsWifiScanRequest& other) const
{
  return !(operator==(other));
}


const char* RtsWifiScanRequestVersionHashStr = "0eb26b336f95f3f6e58b752fac76b729";

const uint8_t RtsWifiScanRequestVersionHash[16] = { 
    0xe, 0xb2, 0x6b, 0x33, 0x6f, 0x95, 0xf3, 0xf6, 0xe5, 0x8b, 0x75, 0x2f, 0xac, 0x76, 0xb7, 0x29 
};

// MESSAGE RtsWifiScanResponse

RtsWifiScanResponse::RtsWifiScanResponse(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsWifiScanResponse::RtsWifiScanResponse(const uint8_t* buff, size_t len)
: RtsWifiScanResponse::RtsWifiScanResponse({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsWifiScanResponse::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsWifiScanResponse::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->statusCode);
  buffer.Write(static_cast<uint8_t>(scanResult.size()));
  for (const Anki::Victor::ExternalComms::RtsWifiScanResult& m : scanResult) {
    m.Pack(buffer);
  }
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsWifiScanResponse::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsWifiScanResponse::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->statusCode);
  buffer.ReadCompoundTypeVArray<Anki::Victor::ExternalComms::RtsWifiScanResult, uint8_t>(this->scanResult);
  return buffer.GetBytesRead();
}

size_t RtsWifiScanResponse::Size() const
{
  size_t result = 0;
  // statusCode
  result += 1; // uint_8
  // scanResult
  result += 1; // uint_8 (array length)
  for (const Anki::Victor::ExternalComms::RtsWifiScanResult& m : this->scanResult) {
    result += m.Size();
  }
  return result;
}

bool RtsWifiScanResponse::operator==(const RtsWifiScanResponse& other) const
{
  return (this->statusCode == other.statusCode &&
    this->scanResult == other.scanResult);
}

bool RtsWifiScanResponse::operator!=(const RtsWifiScanResponse& other) const
{
  return !(operator==(other));
}


const char* RtsWifiScanResponseVersionHashStr = "ab3dab446cbe21302e1b1f76fc17c330";

const uint8_t RtsWifiScanResponseVersionHash[16] = { 
    0xab, 0x3d, 0xab, 0x44, 0x6c, 0xbe, 0x21, 0x30, 0x2e, 0x1b, 0x1f, 0x76, 0xfc, 0x17, 0xc3, 0x30 
};

// MESSAGE RtsOtaUpdateRequest

RtsOtaUpdateRequest::RtsOtaUpdateRequest(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsOtaUpdateRequest::RtsOtaUpdateRequest(const uint8_t* buff, size_t len)
: RtsOtaUpdateRequest::RtsOtaUpdateRequest({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsOtaUpdateRequest::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsOtaUpdateRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.WritePString<uint8_t>(this->url);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsOtaUpdateRequest::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsOtaUpdateRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.ReadPString<uint8_t>(this->url);
  return buffer.GetBytesRead();
}

size_t RtsOtaUpdateRequest::Size() const
{
  size_t result = 0;
  // url
  result += 1; // uint_8 (string length)
  result += this->url.length(); // uint_8
  return result;
}

bool RtsOtaUpdateRequest::operator==(const RtsOtaUpdateRequest& other) const
{
  return (this->url == other.url);
}

bool RtsOtaUpdateRequest::operator!=(const RtsOtaUpdateRequest& other) const
{
  return !(operator==(other));
}


const char* RtsOtaUpdateRequestVersionHashStr = "34abeee2b5da4911bdec8d7e0a7ca1c6";

const uint8_t RtsOtaUpdateRequestVersionHash[16] = { 
    0x34, 0xab, 0xee, 0xe2, 0xb5, 0xda, 0x49, 0x11, 0xbd, 0xec, 0x8d, 0x7e, 0xa, 0x7c, 0xa1, 0xc6 
};

// MESSAGE RtsOtaUpdateResponse

RtsOtaUpdateResponse::RtsOtaUpdateResponse(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsOtaUpdateResponse::RtsOtaUpdateResponse(const uint8_t* buff, size_t len)
: RtsOtaUpdateResponse::RtsOtaUpdateResponse({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsOtaUpdateResponse::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsOtaUpdateResponse::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->status);
  buffer.Write(this->progress);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsOtaUpdateResponse::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsOtaUpdateResponse::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->status);
  buffer.Read(this->progress);
  return buffer.GetBytesRead();
}

size_t RtsOtaUpdateResponse::Size() const
{
  size_t result = 0;
  // status
  result += 1; // uint_8
  // progress
  result += 1; // uint_8
  return result;
}

bool RtsOtaUpdateResponse::operator==(const RtsOtaUpdateResponse& other) const
{
  return (this->status == other.status &&
    this->progress == other.progress);
}

bool RtsOtaUpdateResponse::operator!=(const RtsOtaUpdateResponse& other) const
{
  return !(operator==(other));
}


const char* RtsOtaUpdateResponseVersionHashStr = "9dcff449014c85b0adf3b712ba742a92";

const uint8_t RtsOtaUpdateResponseVersionHash[16] = { 
    0x9d, 0xcf, 0xf4, 0x49, 0x1, 0x4c, 0x85, 0xb0, 0xad, 0xf3, 0xb7, 0x12, 0xba, 0x74, 0x2a, 0x92 
};

// MESSAGE RtsWifiAccessPointRequest

RtsWifiAccessPointRequest::RtsWifiAccessPointRequest(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsWifiAccessPointRequest::RtsWifiAccessPointRequest(const uint8_t* buff, size_t len)
: RtsWifiAccessPointRequest::RtsWifiAccessPointRequest({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsWifiAccessPointRequest::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsWifiAccessPointRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->enable);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsWifiAccessPointRequest::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsWifiAccessPointRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->enable);
  return buffer.GetBytesRead();
}

size_t RtsWifiAccessPointRequest::Size() const
{
  size_t result = 0;
  // enable
  result += 1; // bool
  return result;
}

bool RtsWifiAccessPointRequest::operator==(const RtsWifiAccessPointRequest& other) const
{
  return (this->enable == other.enable);
}

bool RtsWifiAccessPointRequest::operator!=(const RtsWifiAccessPointRequest& other) const
{
  return !(operator==(other));
}


const char* RtsWifiAccessPointRequestVersionHashStr = "3c3da793135710edb20ccf6cdb219090";

const uint8_t RtsWifiAccessPointRequestVersionHash[16] = { 
    0x3c, 0x3d, 0xa7, 0x93, 0x13, 0x57, 0x10, 0xed, 0xb2, 0xc, 0xcf, 0x6c, 0xdb, 0x21, 0x90, 0x90 
};

// MESSAGE RtsWifiAccessPointResponse

RtsWifiAccessPointResponse::RtsWifiAccessPointResponse(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsWifiAccessPointResponse::RtsWifiAccessPointResponse(const uint8_t* buff, size_t len)
: RtsWifiAccessPointResponse::RtsWifiAccessPointResponse({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsWifiAccessPointResponse::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsWifiAccessPointResponse::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->enabled);
  buffer.WritePString<uint8_t>(this->ssid);
  buffer.WritePString<uint8_t>(this->pw);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsWifiAccessPointResponse::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsWifiAccessPointResponse::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->enabled);
  buffer.ReadPString<uint8_t>(this->ssid);
  buffer.ReadPString<uint8_t>(this->pw);
  return buffer.GetBytesRead();
}

size_t RtsWifiAccessPointResponse::Size() const
{
  size_t result = 0;
  // enabled
  result += 1; // bool
  // ssid
  result += 1; // uint_8 (string length)
  result += this->ssid.length(); // uint_8
  // pw
  result += 1; // uint_8 (string length)
  result += this->pw.length(); // uint_8
  return result;
}

bool RtsWifiAccessPointResponse::operator==(const RtsWifiAccessPointResponse& other) const
{
  return (this->enabled == other.enabled &&
    this->ssid == other.ssid &&
    this->pw == other.pw);
}

bool RtsWifiAccessPointResponse::operator!=(const RtsWifiAccessPointResponse& other) const
{
  return !(operator==(other));
}


const char* RtsWifiAccessPointResponseVersionHashStr = "cab459d3822b11ff3ea01fc4d25794a7";

const uint8_t RtsWifiAccessPointResponseVersionHash[16] = { 
    0xca, 0xb4, 0x59, 0xd3, 0x82, 0x2b, 0x11, 0xff, 0x3e, 0xa0, 0x1f, 0xc4, 0xd2, 0x57, 0x94, 0xa7 
};

// MESSAGE RtsCancelPairing

RtsCancelPairing::RtsCancelPairing(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsCancelPairing::RtsCancelPairing(const uint8_t* buff, size_t len)
: RtsCancelPairing::RtsCancelPairing({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsCancelPairing::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsCancelPairing::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsCancelPairing::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsCancelPairing::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t RtsCancelPairing::Size() const
{
  size_t result = 0;
  return result;
}

bool RtsCancelPairing::operator==(const RtsCancelPairing& other) const
{
return true;
}

bool RtsCancelPairing::operator!=(const RtsCancelPairing& other) const
{
  return !(operator==(other));
}


const char* RtsCancelPairingVersionHashStr = "cf52ef5bad5f23b246dba4529b0785a4";

const uint8_t RtsCancelPairingVersionHash[16] = { 
    0xcf, 0x52, 0xef, 0x5b, 0xad, 0x5f, 0x23, 0xb2, 0x46, 0xdb, 0xa4, 0x52, 0x9b, 0x7, 0x85, 0xa4 
};

// MESSAGE RtsForceDisconnect

RtsForceDisconnect::RtsForceDisconnect(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RtsForceDisconnect::RtsForceDisconnect(const uint8_t* buff, size_t len)
: RtsForceDisconnect::RtsForceDisconnect({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RtsForceDisconnect::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsForceDisconnect::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RtsForceDisconnect::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsForceDisconnect::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t RtsForceDisconnect::Size() const
{
  size_t result = 0;
  return result;
}

bool RtsForceDisconnect::operator==(const RtsForceDisconnect& other) const
{
return true;
}

bool RtsForceDisconnect::operator!=(const RtsForceDisconnect& other) const
{
  return !(operator==(other));
}


const char* RtsForceDisconnectVersionHashStr = "3687f5bfb7d68b2835d9c94d6ae5a37c";

const uint8_t RtsForceDisconnectVersionHash[16] = { 
    0x36, 0x87, 0xf5, 0xbf, 0xb7, 0xd6, 0x8b, 0x28, 0x35, 0xd9, 0xc9, 0x4d, 0x6a, 0xe5, 0xa3, 0x7c 
};

// MESSAGE Error

Error::Error(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

Error::Error(const uint8_t* buff, size_t len)
: Error::Error({const_cast<uint8_t*>(buff), len, false})
{
}

size_t Error::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t Error::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t Error::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t Error::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t Error::Size() const
{
  size_t result = 0;
  return result;
}

bool Error::operator==(const Error& other) const
{
return true;
}

bool Error::operator!=(const Error& other) const
{
  return !(operator==(other));
}


const char* ErrorVersionHashStr = "3c4b79921f0eb7bee2f0f2ecd5224457";

const uint8_t ErrorVersionHash[16] = { 
    0x3c, 0x4b, 0x79, 0x92, 0x1f, 0xe, 0xb7, 0xbe, 0xe2, 0xf0, 0xf2, 0xec, 0xd5, 0x22, 0x44, 0x57 
};

// UNION RtsConnection

RtsConnection::RtsConnection(const CLAD::SafeMessageBuffer& buff)
: _tag(Tag::INVALID)
{
  Unpack(buff);
}

RtsConnection::RtsConnection(const uint8_t* buffer, size_t length)
: _tag(Tag::INVALID)
{
  CLAD::SafeMessageBuffer buff(const_cast<uint8_t*>(buffer), length);
  Unpack(buff);
}

RtsConnection::RtsConnection(const RtsConnection& other)
: _tag(other._tag)
{
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(other._Error);
    break;
  case Tag::RtsConnRequest:
    new(&(this->_RtsConnRequest)) Anki::Victor::ExternalComms::RtsConnRequest(other._RtsConnRequest);
    break;
  case Tag::RtsConnResponse:
    new(&(this->_RtsConnResponse)) Anki::Victor::ExternalComms::RtsConnResponse(other._RtsConnResponse);
    break;
  case Tag::RtsNonceMessage:
    new(&(this->_RtsNonceMessage)) Anki::Victor::ExternalComms::RtsNonceMessage(other._RtsNonceMessage);
    break;
  case Tag::RtsChallengeMessage:
    new(&(this->_RtsChallengeMessage)) Anki::Victor::ExternalComms::RtsChallengeMessage(other._RtsChallengeMessage);
    break;
  case Tag::RtsChallengeSuccessMessage:
    new(&(this->_RtsChallengeSuccessMessage)) Anki::Victor::ExternalComms::RtsChallengeSuccessMessage(other._RtsChallengeSuccessMessage);
    break;
  case Tag::RtsWifiConnectRequest:
    new(&(this->_RtsWifiConnectRequest)) Anki::Victor::ExternalComms::RtsWifiConnectRequest(other._RtsWifiConnectRequest);
    break;
  case Tag::RtsWifiConnectResponse:
    new(&(this->_RtsWifiConnectResponse)) Anki::Victor::ExternalComms::RtsWifiConnectResponse(other._RtsWifiConnectResponse);
    break;
  case Tag::RtsWifiIpRequest:
    new(&(this->_RtsWifiIpRequest)) Anki::Victor::ExternalComms::RtsWifiIpRequest(other._RtsWifiIpRequest);
    break;
  case Tag::RtsWifiIpResponse:
    new(&(this->_RtsWifiIpResponse)) Anki::Victor::ExternalComms::RtsWifiIpResponse(other._RtsWifiIpResponse);
    break;
  case Tag::RtsStatusRequest:
    new(&(this->_RtsStatusRequest)) Anki::Victor::ExternalComms::RtsStatusRequest(other._RtsStatusRequest);
    break;
  case Tag::RtsStatusResponse:
    new(&(this->_RtsStatusResponse)) Anki::Victor::ExternalComms::RtsStatusResponse(other._RtsStatusResponse);
    break;
  case Tag::RtsWifiScanRequest:
    new(&(this->_RtsWifiScanRequest)) Anki::Victor::ExternalComms::RtsWifiScanRequest(other._RtsWifiScanRequest);
    break;
  case Tag::RtsWifiScanResponse:
    new(&(this->_RtsWifiScanResponse)) Anki::Victor::ExternalComms::RtsWifiScanResponse(other._RtsWifiScanResponse);
    break;
  case Tag::RtsOtaUpdateRequest:
    new(&(this->_RtsOtaUpdateRequest)) Anki::Victor::ExternalComms::RtsOtaUpdateRequest(other._RtsOtaUpdateRequest);
    break;
  case Tag::RtsOtaUpdateResponse:
    new(&(this->_RtsOtaUpdateResponse)) Anki::Victor::ExternalComms::RtsOtaUpdateResponse(other._RtsOtaUpdateResponse);
    break;
  case Tag::RtsCancelPairing:
    new(&(this->_RtsCancelPairing)) Anki::Victor::ExternalComms::RtsCancelPairing(other._RtsCancelPairing);
    break;
  case Tag::RtsForceDisconnect:
    new(&(this->_RtsForceDisconnect)) Anki::Victor::ExternalComms::RtsForceDisconnect(other._RtsForceDisconnect);
    break;
  case Tag::RtsAck:
    new(&(this->_RtsAck)) Anki::Victor::ExternalComms::RtsAck(other._RtsAck);
    break;
  case Tag::RtsWifiAccessPointRequest:
    new(&(this->_RtsWifiAccessPointRequest)) Anki::Victor::ExternalComms::RtsWifiAccessPointRequest(other._RtsWifiAccessPointRequest);
    break;
  case Tag::RtsWifiAccessPointResponse:
    new(&(this->_RtsWifiAccessPointResponse)) Anki::Victor::ExternalComms::RtsWifiAccessPointResponse(other._RtsWifiAccessPointResponse);
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
}

RtsConnection::RtsConnection(RtsConnection&& other) noexcept
: _tag(other._tag)
{
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(std::move(other._Error));
    break;
  case Tag::RtsConnRequest:
    new(&(this->_RtsConnRequest)) Anki::Victor::ExternalComms::RtsConnRequest(std::move(other._RtsConnRequest));
    break;
  case Tag::RtsConnResponse:
    new(&(this->_RtsConnResponse)) Anki::Victor::ExternalComms::RtsConnResponse(std::move(other._RtsConnResponse));
    break;
  case Tag::RtsNonceMessage:
    new(&(this->_RtsNonceMessage)) Anki::Victor::ExternalComms::RtsNonceMessage(std::move(other._RtsNonceMessage));
    break;
  case Tag::RtsChallengeMessage:
    new(&(this->_RtsChallengeMessage)) Anki::Victor::ExternalComms::RtsChallengeMessage(std::move(other._RtsChallengeMessage));
    break;
  case Tag::RtsChallengeSuccessMessage:
    new(&(this->_RtsChallengeSuccessMessage)) Anki::Victor::ExternalComms::RtsChallengeSuccessMessage(std::move(other._RtsChallengeSuccessMessage));
    break;
  case Tag::RtsWifiConnectRequest:
    new(&(this->_RtsWifiConnectRequest)) Anki::Victor::ExternalComms::RtsWifiConnectRequest(std::move(other._RtsWifiConnectRequest));
    break;
  case Tag::RtsWifiConnectResponse:
    new(&(this->_RtsWifiConnectResponse)) Anki::Victor::ExternalComms::RtsWifiConnectResponse(std::move(other._RtsWifiConnectResponse));
    break;
  case Tag::RtsWifiIpRequest:
    new(&(this->_RtsWifiIpRequest)) Anki::Victor::ExternalComms::RtsWifiIpRequest(std::move(other._RtsWifiIpRequest));
    break;
  case Tag::RtsWifiIpResponse:
    new(&(this->_RtsWifiIpResponse)) Anki::Victor::ExternalComms::RtsWifiIpResponse(std::move(other._RtsWifiIpResponse));
    break;
  case Tag::RtsStatusRequest:
    new(&(this->_RtsStatusRequest)) Anki::Victor::ExternalComms::RtsStatusRequest(std::move(other._RtsStatusRequest));
    break;
  case Tag::RtsStatusResponse:
    new(&(this->_RtsStatusResponse)) Anki::Victor::ExternalComms::RtsStatusResponse(std::move(other._RtsStatusResponse));
    break;
  case Tag::RtsWifiScanRequest:
    new(&(this->_RtsWifiScanRequest)) Anki::Victor::ExternalComms::RtsWifiScanRequest(std::move(other._RtsWifiScanRequest));
    break;
  case Tag::RtsWifiScanResponse:
    new(&(this->_RtsWifiScanResponse)) Anki::Victor::ExternalComms::RtsWifiScanResponse(std::move(other._RtsWifiScanResponse));
    break;
  case Tag::RtsOtaUpdateRequest:
    new(&(this->_RtsOtaUpdateRequest)) Anki::Victor::ExternalComms::RtsOtaUpdateRequest(std::move(other._RtsOtaUpdateRequest));
    break;
  case Tag::RtsOtaUpdateResponse:
    new(&(this->_RtsOtaUpdateResponse)) Anki::Victor::ExternalComms::RtsOtaUpdateResponse(std::move(other._RtsOtaUpdateResponse));
    break;
  case Tag::RtsCancelPairing:
    new(&(this->_RtsCancelPairing)) Anki::Victor::ExternalComms::RtsCancelPairing(std::move(other._RtsCancelPairing));
    break;
  case Tag::RtsForceDisconnect:
    new(&(this->_RtsForceDisconnect)) Anki::Victor::ExternalComms::RtsForceDisconnect(std::move(other._RtsForceDisconnect));
    break;
  case Tag::RtsAck:
    new(&(this->_RtsAck)) Anki::Victor::ExternalComms::RtsAck(std::move(other._RtsAck));
    break;
  case Tag::RtsWifiAccessPointRequest:
    new(&(this->_RtsWifiAccessPointRequest)) Anki::Victor::ExternalComms::RtsWifiAccessPointRequest(std::move(other._RtsWifiAccessPointRequest));
    break;
  case Tag::RtsWifiAccessPointResponse:
    new(&(this->_RtsWifiAccessPointResponse)) Anki::Victor::ExternalComms::RtsWifiAccessPointResponse(std::move(other._RtsWifiAccessPointResponse));
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  other.ClearCurrent();
}

RtsConnection& RtsConnection::operator=(const RtsConnection& other)
{
  if(this == &other) { return *this; }
  ClearCurrent();
  _tag = other._tag;
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(other._Error);
    break;
  case Tag::RtsConnRequest:
    new(&(this->_RtsConnRequest)) Anki::Victor::ExternalComms::RtsConnRequest(other._RtsConnRequest);
    break;
  case Tag::RtsConnResponse:
    new(&(this->_RtsConnResponse)) Anki::Victor::ExternalComms::RtsConnResponse(other._RtsConnResponse);
    break;
  case Tag::RtsNonceMessage:
    new(&(this->_RtsNonceMessage)) Anki::Victor::ExternalComms::RtsNonceMessage(other._RtsNonceMessage);
    break;
  case Tag::RtsChallengeMessage:
    new(&(this->_RtsChallengeMessage)) Anki::Victor::ExternalComms::RtsChallengeMessage(other._RtsChallengeMessage);
    break;
  case Tag::RtsChallengeSuccessMessage:
    new(&(this->_RtsChallengeSuccessMessage)) Anki::Victor::ExternalComms::RtsChallengeSuccessMessage(other._RtsChallengeSuccessMessage);
    break;
  case Tag::RtsWifiConnectRequest:
    new(&(this->_RtsWifiConnectRequest)) Anki::Victor::ExternalComms::RtsWifiConnectRequest(other._RtsWifiConnectRequest);
    break;
  case Tag::RtsWifiConnectResponse:
    new(&(this->_RtsWifiConnectResponse)) Anki::Victor::ExternalComms::RtsWifiConnectResponse(other._RtsWifiConnectResponse);
    break;
  case Tag::RtsWifiIpRequest:
    new(&(this->_RtsWifiIpRequest)) Anki::Victor::ExternalComms::RtsWifiIpRequest(other._RtsWifiIpRequest);
    break;
  case Tag::RtsWifiIpResponse:
    new(&(this->_RtsWifiIpResponse)) Anki::Victor::ExternalComms::RtsWifiIpResponse(other._RtsWifiIpResponse);
    break;
  case Tag::RtsStatusRequest:
    new(&(this->_RtsStatusRequest)) Anki::Victor::ExternalComms::RtsStatusRequest(other._RtsStatusRequest);
    break;
  case Tag::RtsStatusResponse:
    new(&(this->_RtsStatusResponse)) Anki::Victor::ExternalComms::RtsStatusResponse(other._RtsStatusResponse);
    break;
  case Tag::RtsWifiScanRequest:
    new(&(this->_RtsWifiScanRequest)) Anki::Victor::ExternalComms::RtsWifiScanRequest(other._RtsWifiScanRequest);
    break;
  case Tag::RtsWifiScanResponse:
    new(&(this->_RtsWifiScanResponse)) Anki::Victor::ExternalComms::RtsWifiScanResponse(other._RtsWifiScanResponse);
    break;
  case Tag::RtsOtaUpdateRequest:
    new(&(this->_RtsOtaUpdateRequest)) Anki::Victor::ExternalComms::RtsOtaUpdateRequest(other._RtsOtaUpdateRequest);
    break;
  case Tag::RtsOtaUpdateResponse:
    new(&(this->_RtsOtaUpdateResponse)) Anki::Victor::ExternalComms::RtsOtaUpdateResponse(other._RtsOtaUpdateResponse);
    break;
  case Tag::RtsCancelPairing:
    new(&(this->_RtsCancelPairing)) Anki::Victor::ExternalComms::RtsCancelPairing(other._RtsCancelPairing);
    break;
  case Tag::RtsForceDisconnect:
    new(&(this->_RtsForceDisconnect)) Anki::Victor::ExternalComms::RtsForceDisconnect(other._RtsForceDisconnect);
    break;
  case Tag::RtsAck:
    new(&(this->_RtsAck)) Anki::Victor::ExternalComms::RtsAck(other._RtsAck);
    break;
  case Tag::RtsWifiAccessPointRequest:
    new(&(this->_RtsWifiAccessPointRequest)) Anki::Victor::ExternalComms::RtsWifiAccessPointRequest(other._RtsWifiAccessPointRequest);
    break;
  case Tag::RtsWifiAccessPointResponse:
    new(&(this->_RtsWifiAccessPointResponse)) Anki::Victor::ExternalComms::RtsWifiAccessPointResponse(other._RtsWifiAccessPointResponse);
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  return *this;
}

RtsConnection& RtsConnection::operator=(RtsConnection&& other) noexcept
{
  if(this == &other) { return *this; }
  ClearCurrent();
  _tag = other._tag;
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(std::move(other._Error));
    break;
  case Tag::RtsConnRequest:
    new(&(this->_RtsConnRequest)) Anki::Victor::ExternalComms::RtsConnRequest(std::move(other._RtsConnRequest));
    break;
  case Tag::RtsConnResponse:
    new(&(this->_RtsConnResponse)) Anki::Victor::ExternalComms::RtsConnResponse(std::move(other._RtsConnResponse));
    break;
  case Tag::RtsNonceMessage:
    new(&(this->_RtsNonceMessage)) Anki::Victor::ExternalComms::RtsNonceMessage(std::move(other._RtsNonceMessage));
    break;
  case Tag::RtsChallengeMessage:
    new(&(this->_RtsChallengeMessage)) Anki::Victor::ExternalComms::RtsChallengeMessage(std::move(other._RtsChallengeMessage));
    break;
  case Tag::RtsChallengeSuccessMessage:
    new(&(this->_RtsChallengeSuccessMessage)) Anki::Victor::ExternalComms::RtsChallengeSuccessMessage(std::move(other._RtsChallengeSuccessMessage));
    break;
  case Tag::RtsWifiConnectRequest:
    new(&(this->_RtsWifiConnectRequest)) Anki::Victor::ExternalComms::RtsWifiConnectRequest(std::move(other._RtsWifiConnectRequest));
    break;
  case Tag::RtsWifiConnectResponse:
    new(&(this->_RtsWifiConnectResponse)) Anki::Victor::ExternalComms::RtsWifiConnectResponse(std::move(other._RtsWifiConnectResponse));
    break;
  case Tag::RtsWifiIpRequest:
    new(&(this->_RtsWifiIpRequest)) Anki::Victor::ExternalComms::RtsWifiIpRequest(std::move(other._RtsWifiIpRequest));
    break;
  case Tag::RtsWifiIpResponse:
    new(&(this->_RtsWifiIpResponse)) Anki::Victor::ExternalComms::RtsWifiIpResponse(std::move(other._RtsWifiIpResponse));
    break;
  case Tag::RtsStatusRequest:
    new(&(this->_RtsStatusRequest)) Anki::Victor::ExternalComms::RtsStatusRequest(std::move(other._RtsStatusRequest));
    break;
  case Tag::RtsStatusResponse:
    new(&(this->_RtsStatusResponse)) Anki::Victor::ExternalComms::RtsStatusResponse(std::move(other._RtsStatusResponse));
    break;
  case Tag::RtsWifiScanRequest:
    new(&(this->_RtsWifiScanRequest)) Anki::Victor::ExternalComms::RtsWifiScanRequest(std::move(other._RtsWifiScanRequest));
    break;
  case Tag::RtsWifiScanResponse:
    new(&(this->_RtsWifiScanResponse)) Anki::Victor::ExternalComms::RtsWifiScanResponse(std::move(other._RtsWifiScanResponse));
    break;
  case Tag::RtsOtaUpdateRequest:
    new(&(this->_RtsOtaUpdateRequest)) Anki::Victor::ExternalComms::RtsOtaUpdateRequest(std::move(other._RtsOtaUpdateRequest));
    break;
  case Tag::RtsOtaUpdateResponse:
    new(&(this->_RtsOtaUpdateResponse)) Anki::Victor::ExternalComms::RtsOtaUpdateResponse(std::move(other._RtsOtaUpdateResponse));
    break;
  case Tag::RtsCancelPairing:
    new(&(this->_RtsCancelPairing)) Anki::Victor::ExternalComms::RtsCancelPairing(std::move(other._RtsCancelPairing));
    break;
  case Tag::RtsForceDisconnect:
    new(&(this->_RtsForceDisconnect)) Anki::Victor::ExternalComms::RtsForceDisconnect(std::move(other._RtsForceDisconnect));
    break;
  case Tag::RtsAck:
    new(&(this->_RtsAck)) Anki::Victor::ExternalComms::RtsAck(std::move(other._RtsAck));
    break;
  case Tag::RtsWifiAccessPointRequest:
    new(&(this->_RtsWifiAccessPointRequest)) Anki::Victor::ExternalComms::RtsWifiAccessPointRequest(std::move(other._RtsWifiAccessPointRequest));
    break;
  case Tag::RtsWifiAccessPointResponse:
    new(&(this->_RtsWifiAccessPointResponse)) Anki::Victor::ExternalComms::RtsWifiAccessPointResponse(std::move(other._RtsWifiAccessPointResponse));
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  other.ClearCurrent();
  return *this;
}

RtsConnection RtsConnection::CreateError(Anki::Victor::ExternalComms::Error&& new_Error)
{
  RtsConnection m;
  m.Set_Error(new_Error);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::Error&& new_Error)
{
  new(&this->_Error) Anki::Victor::ExternalComms::Error(std::move(new_Error));
  _tag = Tag::Error;
}

const Anki::Victor::ExternalComms::Error& RtsConnection::Get_Error() const
{
  assert(_tag == Tag::Error);
  return this->_Error;
}

void RtsConnection::Set_Error(const Anki::Victor::ExternalComms::Error& new_Error)
{
  if(this->_tag == Tag::Error) {
    this->_Error = new_Error;
  }
  else {
    ClearCurrent();
    new(&this->_Error) Anki::Victor::ExternalComms::Error(new_Error);
    _tag = Tag::Error;
  }
}

template<>
const Anki::Victor::ExternalComms::Error& RtsConnection::Get_<RtsConnection::Tag::Error>() const
{
  assert(_tag == Tag::Error);
  return this->_Error;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::Error>(Anki::Victor::ExternalComms::Error member)
{
  return CreateError(std::move(member));
}

void RtsConnection::Set_Error(Anki::Victor::ExternalComms::Error&& new_Error)
{
  if (this->_tag == Tag::Error) {
    this->_Error = std::move(new_Error);
  }
  else {
    ClearCurrent();
    new(&this->_Error) Anki::Victor::ExternalComms::Error(std::move(new_Error));
    _tag = Tag::Error;
  }
}

RtsConnection RtsConnection::CreateRtsConnRequest(Anki::Victor::ExternalComms::RtsConnRequest&& new_RtsConnRequest)
{
  RtsConnection m;
  m.Set_RtsConnRequest(new_RtsConnRequest);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsConnRequest&& new_RtsConnRequest)
{
  new(&this->_RtsConnRequest) Anki::Victor::ExternalComms::RtsConnRequest(std::move(new_RtsConnRequest));
  _tag = Tag::RtsConnRequest;
}

const Anki::Victor::ExternalComms::RtsConnRequest& RtsConnection::Get_RtsConnRequest() const
{
  assert(_tag == Tag::RtsConnRequest);
  return this->_RtsConnRequest;
}

void RtsConnection::Set_RtsConnRequest(const Anki::Victor::ExternalComms::RtsConnRequest& new_RtsConnRequest)
{
  if(this->_tag == Tag::RtsConnRequest) {
    this->_RtsConnRequest = new_RtsConnRequest;
  }
  else {
    ClearCurrent();
    new(&this->_RtsConnRequest) Anki::Victor::ExternalComms::RtsConnRequest(new_RtsConnRequest);
    _tag = Tag::RtsConnRequest;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsConnRequest& RtsConnection::Get_<RtsConnection::Tag::RtsConnRequest>() const
{
  assert(_tag == Tag::RtsConnRequest);
  return this->_RtsConnRequest;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsConnRequest>(Anki::Victor::ExternalComms::RtsConnRequest member)
{
  return CreateRtsConnRequest(std::move(member));
}

void RtsConnection::Set_RtsConnRequest(Anki::Victor::ExternalComms::RtsConnRequest&& new_RtsConnRequest)
{
  if (this->_tag == Tag::RtsConnRequest) {
    this->_RtsConnRequest = std::move(new_RtsConnRequest);
  }
  else {
    ClearCurrent();
    new(&this->_RtsConnRequest) Anki::Victor::ExternalComms::RtsConnRequest(std::move(new_RtsConnRequest));
    _tag = Tag::RtsConnRequest;
  }
}

RtsConnection RtsConnection::CreateRtsConnResponse(Anki::Victor::ExternalComms::RtsConnResponse&& new_RtsConnResponse)
{
  RtsConnection m;
  m.Set_RtsConnResponse(new_RtsConnResponse);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsConnResponse&& new_RtsConnResponse)
{
  new(&this->_RtsConnResponse) Anki::Victor::ExternalComms::RtsConnResponse(std::move(new_RtsConnResponse));
  _tag = Tag::RtsConnResponse;
}

const Anki::Victor::ExternalComms::RtsConnResponse& RtsConnection::Get_RtsConnResponse() const
{
  assert(_tag == Tag::RtsConnResponse);
  return this->_RtsConnResponse;
}

void RtsConnection::Set_RtsConnResponse(const Anki::Victor::ExternalComms::RtsConnResponse& new_RtsConnResponse)
{
  if(this->_tag == Tag::RtsConnResponse) {
    this->_RtsConnResponse = new_RtsConnResponse;
  }
  else {
    ClearCurrent();
    new(&this->_RtsConnResponse) Anki::Victor::ExternalComms::RtsConnResponse(new_RtsConnResponse);
    _tag = Tag::RtsConnResponse;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsConnResponse& RtsConnection::Get_<RtsConnection::Tag::RtsConnResponse>() const
{
  assert(_tag == Tag::RtsConnResponse);
  return this->_RtsConnResponse;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsConnResponse>(Anki::Victor::ExternalComms::RtsConnResponse member)
{
  return CreateRtsConnResponse(std::move(member));
}

void RtsConnection::Set_RtsConnResponse(Anki::Victor::ExternalComms::RtsConnResponse&& new_RtsConnResponse)
{
  if (this->_tag == Tag::RtsConnResponse) {
    this->_RtsConnResponse = std::move(new_RtsConnResponse);
  }
  else {
    ClearCurrent();
    new(&this->_RtsConnResponse) Anki::Victor::ExternalComms::RtsConnResponse(std::move(new_RtsConnResponse));
    _tag = Tag::RtsConnResponse;
  }
}

RtsConnection RtsConnection::CreateRtsNonceMessage(Anki::Victor::ExternalComms::RtsNonceMessage&& new_RtsNonceMessage)
{
  RtsConnection m;
  m.Set_RtsNonceMessage(new_RtsNonceMessage);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsNonceMessage&& new_RtsNonceMessage)
{
  new(&this->_RtsNonceMessage) Anki::Victor::ExternalComms::RtsNonceMessage(std::move(new_RtsNonceMessage));
  _tag = Tag::RtsNonceMessage;
}

const Anki::Victor::ExternalComms::RtsNonceMessage& RtsConnection::Get_RtsNonceMessage() const
{
  assert(_tag == Tag::RtsNonceMessage);
  return this->_RtsNonceMessage;
}

void RtsConnection::Set_RtsNonceMessage(const Anki::Victor::ExternalComms::RtsNonceMessage& new_RtsNonceMessage)
{
  if(this->_tag == Tag::RtsNonceMessage) {
    this->_RtsNonceMessage = new_RtsNonceMessage;
  }
  else {
    ClearCurrent();
    new(&this->_RtsNonceMessage) Anki::Victor::ExternalComms::RtsNonceMessage(new_RtsNonceMessage);
    _tag = Tag::RtsNonceMessage;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsNonceMessage& RtsConnection::Get_<RtsConnection::Tag::RtsNonceMessage>() const
{
  assert(_tag == Tag::RtsNonceMessage);
  return this->_RtsNonceMessage;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsNonceMessage>(Anki::Victor::ExternalComms::RtsNonceMessage member)
{
  return CreateRtsNonceMessage(std::move(member));
}

void RtsConnection::Set_RtsNonceMessage(Anki::Victor::ExternalComms::RtsNonceMessage&& new_RtsNonceMessage)
{
  if (this->_tag == Tag::RtsNonceMessage) {
    this->_RtsNonceMessage = std::move(new_RtsNonceMessage);
  }
  else {
    ClearCurrent();
    new(&this->_RtsNonceMessage) Anki::Victor::ExternalComms::RtsNonceMessage(std::move(new_RtsNonceMessage));
    _tag = Tag::RtsNonceMessage;
  }
}

RtsConnection RtsConnection::CreateRtsChallengeMessage(Anki::Victor::ExternalComms::RtsChallengeMessage&& new_RtsChallengeMessage)
{
  RtsConnection m;
  m.Set_RtsChallengeMessage(new_RtsChallengeMessage);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsChallengeMessage&& new_RtsChallengeMessage)
{
  new(&this->_RtsChallengeMessage) Anki::Victor::ExternalComms::RtsChallengeMessage(std::move(new_RtsChallengeMessage));
  _tag = Tag::RtsChallengeMessage;
}

const Anki::Victor::ExternalComms::RtsChallengeMessage& RtsConnection::Get_RtsChallengeMessage() const
{
  assert(_tag == Tag::RtsChallengeMessage);
  return this->_RtsChallengeMessage;
}

void RtsConnection::Set_RtsChallengeMessage(const Anki::Victor::ExternalComms::RtsChallengeMessage& new_RtsChallengeMessage)
{
  if(this->_tag == Tag::RtsChallengeMessage) {
    this->_RtsChallengeMessage = new_RtsChallengeMessage;
  }
  else {
    ClearCurrent();
    new(&this->_RtsChallengeMessage) Anki::Victor::ExternalComms::RtsChallengeMessage(new_RtsChallengeMessage);
    _tag = Tag::RtsChallengeMessage;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsChallengeMessage& RtsConnection::Get_<RtsConnection::Tag::RtsChallengeMessage>() const
{
  assert(_tag == Tag::RtsChallengeMessage);
  return this->_RtsChallengeMessage;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsChallengeMessage>(Anki::Victor::ExternalComms::RtsChallengeMessage member)
{
  return CreateRtsChallengeMessage(std::move(member));
}

void RtsConnection::Set_RtsChallengeMessage(Anki::Victor::ExternalComms::RtsChallengeMessage&& new_RtsChallengeMessage)
{
  if (this->_tag == Tag::RtsChallengeMessage) {
    this->_RtsChallengeMessage = std::move(new_RtsChallengeMessage);
  }
  else {
    ClearCurrent();
    new(&this->_RtsChallengeMessage) Anki::Victor::ExternalComms::RtsChallengeMessage(std::move(new_RtsChallengeMessage));
    _tag = Tag::RtsChallengeMessage;
  }
}

RtsConnection RtsConnection::CreateRtsChallengeSuccessMessage(Anki::Victor::ExternalComms::RtsChallengeSuccessMessage&& new_RtsChallengeSuccessMessage)
{
  RtsConnection m;
  m.Set_RtsChallengeSuccessMessage(new_RtsChallengeSuccessMessage);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsChallengeSuccessMessage&& new_RtsChallengeSuccessMessage)
{
  new(&this->_RtsChallengeSuccessMessage) Anki::Victor::ExternalComms::RtsChallengeSuccessMessage(std::move(new_RtsChallengeSuccessMessage));
  _tag = Tag::RtsChallengeSuccessMessage;
}

const Anki::Victor::ExternalComms::RtsChallengeSuccessMessage& RtsConnection::Get_RtsChallengeSuccessMessage() const
{
  assert(_tag == Tag::RtsChallengeSuccessMessage);
  return this->_RtsChallengeSuccessMessage;
}

void RtsConnection::Set_RtsChallengeSuccessMessage(const Anki::Victor::ExternalComms::RtsChallengeSuccessMessage& new_RtsChallengeSuccessMessage)
{
  if(this->_tag == Tag::RtsChallengeSuccessMessage) {
    this->_RtsChallengeSuccessMessage = new_RtsChallengeSuccessMessage;
  }
  else {
    ClearCurrent();
    new(&this->_RtsChallengeSuccessMessage) Anki::Victor::ExternalComms::RtsChallengeSuccessMessage(new_RtsChallengeSuccessMessage);
    _tag = Tag::RtsChallengeSuccessMessage;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsChallengeSuccessMessage& RtsConnection::Get_<RtsConnection::Tag::RtsChallengeSuccessMessage>() const
{
  assert(_tag == Tag::RtsChallengeSuccessMessage);
  return this->_RtsChallengeSuccessMessage;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsChallengeSuccessMessage>(Anki::Victor::ExternalComms::RtsChallengeSuccessMessage member)
{
  return CreateRtsChallengeSuccessMessage(std::move(member));
}

void RtsConnection::Set_RtsChallengeSuccessMessage(Anki::Victor::ExternalComms::RtsChallengeSuccessMessage&& new_RtsChallengeSuccessMessage)
{
  if (this->_tag == Tag::RtsChallengeSuccessMessage) {
    this->_RtsChallengeSuccessMessage = std::move(new_RtsChallengeSuccessMessage);
  }
  else {
    ClearCurrent();
    new(&this->_RtsChallengeSuccessMessage) Anki::Victor::ExternalComms::RtsChallengeSuccessMessage(std::move(new_RtsChallengeSuccessMessage));
    _tag = Tag::RtsChallengeSuccessMessage;
  }
}

RtsConnection RtsConnection::CreateRtsWifiConnectRequest(Anki::Victor::ExternalComms::RtsWifiConnectRequest&& new_RtsWifiConnectRequest)
{
  RtsConnection m;
  m.Set_RtsWifiConnectRequest(new_RtsWifiConnectRequest);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsWifiConnectRequest&& new_RtsWifiConnectRequest)
{
  new(&this->_RtsWifiConnectRequest) Anki::Victor::ExternalComms::RtsWifiConnectRequest(std::move(new_RtsWifiConnectRequest));
  _tag = Tag::RtsWifiConnectRequest;
}

const Anki::Victor::ExternalComms::RtsWifiConnectRequest& RtsConnection::Get_RtsWifiConnectRequest() const
{
  assert(_tag == Tag::RtsWifiConnectRequest);
  return this->_RtsWifiConnectRequest;
}

void RtsConnection::Set_RtsWifiConnectRequest(const Anki::Victor::ExternalComms::RtsWifiConnectRequest& new_RtsWifiConnectRequest)
{
  if(this->_tag == Tag::RtsWifiConnectRequest) {
    this->_RtsWifiConnectRequest = new_RtsWifiConnectRequest;
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiConnectRequest) Anki::Victor::ExternalComms::RtsWifiConnectRequest(new_RtsWifiConnectRequest);
    _tag = Tag::RtsWifiConnectRequest;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsWifiConnectRequest& RtsConnection::Get_<RtsConnection::Tag::RtsWifiConnectRequest>() const
{
  assert(_tag == Tag::RtsWifiConnectRequest);
  return this->_RtsWifiConnectRequest;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsWifiConnectRequest>(Anki::Victor::ExternalComms::RtsWifiConnectRequest member)
{
  return CreateRtsWifiConnectRequest(std::move(member));
}

void RtsConnection::Set_RtsWifiConnectRequest(Anki::Victor::ExternalComms::RtsWifiConnectRequest&& new_RtsWifiConnectRequest)
{
  if (this->_tag == Tag::RtsWifiConnectRequest) {
    this->_RtsWifiConnectRequest = std::move(new_RtsWifiConnectRequest);
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiConnectRequest) Anki::Victor::ExternalComms::RtsWifiConnectRequest(std::move(new_RtsWifiConnectRequest));
    _tag = Tag::RtsWifiConnectRequest;
  }
}

RtsConnection RtsConnection::CreateRtsWifiConnectResponse(Anki::Victor::ExternalComms::RtsWifiConnectResponse&& new_RtsWifiConnectResponse)
{
  RtsConnection m;
  m.Set_RtsWifiConnectResponse(new_RtsWifiConnectResponse);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsWifiConnectResponse&& new_RtsWifiConnectResponse)
{
  new(&this->_RtsWifiConnectResponse) Anki::Victor::ExternalComms::RtsWifiConnectResponse(std::move(new_RtsWifiConnectResponse));
  _tag = Tag::RtsWifiConnectResponse;
}

const Anki::Victor::ExternalComms::RtsWifiConnectResponse& RtsConnection::Get_RtsWifiConnectResponse() const
{
  assert(_tag == Tag::RtsWifiConnectResponse);
  return this->_RtsWifiConnectResponse;
}

void RtsConnection::Set_RtsWifiConnectResponse(const Anki::Victor::ExternalComms::RtsWifiConnectResponse& new_RtsWifiConnectResponse)
{
  if(this->_tag == Tag::RtsWifiConnectResponse) {
    this->_RtsWifiConnectResponse = new_RtsWifiConnectResponse;
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiConnectResponse) Anki::Victor::ExternalComms::RtsWifiConnectResponse(new_RtsWifiConnectResponse);
    _tag = Tag::RtsWifiConnectResponse;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsWifiConnectResponse& RtsConnection::Get_<RtsConnection::Tag::RtsWifiConnectResponse>() const
{
  assert(_tag == Tag::RtsWifiConnectResponse);
  return this->_RtsWifiConnectResponse;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsWifiConnectResponse>(Anki::Victor::ExternalComms::RtsWifiConnectResponse member)
{
  return CreateRtsWifiConnectResponse(std::move(member));
}

void RtsConnection::Set_RtsWifiConnectResponse(Anki::Victor::ExternalComms::RtsWifiConnectResponse&& new_RtsWifiConnectResponse)
{
  if (this->_tag == Tag::RtsWifiConnectResponse) {
    this->_RtsWifiConnectResponse = std::move(new_RtsWifiConnectResponse);
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiConnectResponse) Anki::Victor::ExternalComms::RtsWifiConnectResponse(std::move(new_RtsWifiConnectResponse));
    _tag = Tag::RtsWifiConnectResponse;
  }
}

RtsConnection RtsConnection::CreateRtsWifiIpRequest(Anki::Victor::ExternalComms::RtsWifiIpRequest&& new_RtsWifiIpRequest)
{
  RtsConnection m;
  m.Set_RtsWifiIpRequest(new_RtsWifiIpRequest);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsWifiIpRequest&& new_RtsWifiIpRequest)
{
  new(&this->_RtsWifiIpRequest) Anki::Victor::ExternalComms::RtsWifiIpRequest(std::move(new_RtsWifiIpRequest));
  _tag = Tag::RtsWifiIpRequest;
}

const Anki::Victor::ExternalComms::RtsWifiIpRequest& RtsConnection::Get_RtsWifiIpRequest() const
{
  assert(_tag == Tag::RtsWifiIpRequest);
  return this->_RtsWifiIpRequest;
}

void RtsConnection::Set_RtsWifiIpRequest(const Anki::Victor::ExternalComms::RtsWifiIpRequest& new_RtsWifiIpRequest)
{
  if(this->_tag == Tag::RtsWifiIpRequest) {
    this->_RtsWifiIpRequest = new_RtsWifiIpRequest;
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiIpRequest) Anki::Victor::ExternalComms::RtsWifiIpRequest(new_RtsWifiIpRequest);
    _tag = Tag::RtsWifiIpRequest;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsWifiIpRequest& RtsConnection::Get_<RtsConnection::Tag::RtsWifiIpRequest>() const
{
  assert(_tag == Tag::RtsWifiIpRequest);
  return this->_RtsWifiIpRequest;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsWifiIpRequest>(Anki::Victor::ExternalComms::RtsWifiIpRequest member)
{
  return CreateRtsWifiIpRequest(std::move(member));
}

void RtsConnection::Set_RtsWifiIpRequest(Anki::Victor::ExternalComms::RtsWifiIpRequest&& new_RtsWifiIpRequest)
{
  if (this->_tag == Tag::RtsWifiIpRequest) {
    this->_RtsWifiIpRequest = std::move(new_RtsWifiIpRequest);
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiIpRequest) Anki::Victor::ExternalComms::RtsWifiIpRequest(std::move(new_RtsWifiIpRequest));
    _tag = Tag::RtsWifiIpRequest;
  }
}

RtsConnection RtsConnection::CreateRtsWifiIpResponse(Anki::Victor::ExternalComms::RtsWifiIpResponse&& new_RtsWifiIpResponse)
{
  RtsConnection m;
  m.Set_RtsWifiIpResponse(new_RtsWifiIpResponse);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsWifiIpResponse&& new_RtsWifiIpResponse)
{
  new(&this->_RtsWifiIpResponse) Anki::Victor::ExternalComms::RtsWifiIpResponse(std::move(new_RtsWifiIpResponse));
  _tag = Tag::RtsWifiIpResponse;
}

const Anki::Victor::ExternalComms::RtsWifiIpResponse& RtsConnection::Get_RtsWifiIpResponse() const
{
  assert(_tag == Tag::RtsWifiIpResponse);
  return this->_RtsWifiIpResponse;
}

void RtsConnection::Set_RtsWifiIpResponse(const Anki::Victor::ExternalComms::RtsWifiIpResponse& new_RtsWifiIpResponse)
{
  if(this->_tag == Tag::RtsWifiIpResponse) {
    this->_RtsWifiIpResponse = new_RtsWifiIpResponse;
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiIpResponse) Anki::Victor::ExternalComms::RtsWifiIpResponse(new_RtsWifiIpResponse);
    _tag = Tag::RtsWifiIpResponse;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsWifiIpResponse& RtsConnection::Get_<RtsConnection::Tag::RtsWifiIpResponse>() const
{
  assert(_tag == Tag::RtsWifiIpResponse);
  return this->_RtsWifiIpResponse;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsWifiIpResponse>(Anki::Victor::ExternalComms::RtsWifiIpResponse member)
{
  return CreateRtsWifiIpResponse(std::move(member));
}

void RtsConnection::Set_RtsWifiIpResponse(Anki::Victor::ExternalComms::RtsWifiIpResponse&& new_RtsWifiIpResponse)
{
  if (this->_tag == Tag::RtsWifiIpResponse) {
    this->_RtsWifiIpResponse = std::move(new_RtsWifiIpResponse);
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiIpResponse) Anki::Victor::ExternalComms::RtsWifiIpResponse(std::move(new_RtsWifiIpResponse));
    _tag = Tag::RtsWifiIpResponse;
  }
}

RtsConnection RtsConnection::CreateRtsStatusRequest(Anki::Victor::ExternalComms::RtsStatusRequest&& new_RtsStatusRequest)
{
  RtsConnection m;
  m.Set_RtsStatusRequest(new_RtsStatusRequest);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsStatusRequest&& new_RtsStatusRequest)
{
  new(&this->_RtsStatusRequest) Anki::Victor::ExternalComms::RtsStatusRequest(std::move(new_RtsStatusRequest));
  _tag = Tag::RtsStatusRequest;
}

const Anki::Victor::ExternalComms::RtsStatusRequest& RtsConnection::Get_RtsStatusRequest() const
{
  assert(_tag == Tag::RtsStatusRequest);
  return this->_RtsStatusRequest;
}

void RtsConnection::Set_RtsStatusRequest(const Anki::Victor::ExternalComms::RtsStatusRequest& new_RtsStatusRequest)
{
  if(this->_tag == Tag::RtsStatusRequest) {
    this->_RtsStatusRequest = new_RtsStatusRequest;
  }
  else {
    ClearCurrent();
    new(&this->_RtsStatusRequest) Anki::Victor::ExternalComms::RtsStatusRequest(new_RtsStatusRequest);
    _tag = Tag::RtsStatusRequest;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsStatusRequest& RtsConnection::Get_<RtsConnection::Tag::RtsStatusRequest>() const
{
  assert(_tag == Tag::RtsStatusRequest);
  return this->_RtsStatusRequest;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsStatusRequest>(Anki::Victor::ExternalComms::RtsStatusRequest member)
{
  return CreateRtsStatusRequest(std::move(member));
}

void RtsConnection::Set_RtsStatusRequest(Anki::Victor::ExternalComms::RtsStatusRequest&& new_RtsStatusRequest)
{
  if (this->_tag == Tag::RtsStatusRequest) {
    this->_RtsStatusRequest = std::move(new_RtsStatusRequest);
  }
  else {
    ClearCurrent();
    new(&this->_RtsStatusRequest) Anki::Victor::ExternalComms::RtsStatusRequest(std::move(new_RtsStatusRequest));
    _tag = Tag::RtsStatusRequest;
  }
}

RtsConnection RtsConnection::CreateRtsStatusResponse(Anki::Victor::ExternalComms::RtsStatusResponse&& new_RtsStatusResponse)
{
  RtsConnection m;
  m.Set_RtsStatusResponse(new_RtsStatusResponse);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsStatusResponse&& new_RtsStatusResponse)
{
  new(&this->_RtsStatusResponse) Anki::Victor::ExternalComms::RtsStatusResponse(std::move(new_RtsStatusResponse));
  _tag = Tag::RtsStatusResponse;
}

const Anki::Victor::ExternalComms::RtsStatusResponse& RtsConnection::Get_RtsStatusResponse() const
{
  assert(_tag == Tag::RtsStatusResponse);
  return this->_RtsStatusResponse;
}

void RtsConnection::Set_RtsStatusResponse(const Anki::Victor::ExternalComms::RtsStatusResponse& new_RtsStatusResponse)
{
  if(this->_tag == Tag::RtsStatusResponse) {
    this->_RtsStatusResponse = new_RtsStatusResponse;
  }
  else {
    ClearCurrent();
    new(&this->_RtsStatusResponse) Anki::Victor::ExternalComms::RtsStatusResponse(new_RtsStatusResponse);
    _tag = Tag::RtsStatusResponse;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsStatusResponse& RtsConnection::Get_<RtsConnection::Tag::RtsStatusResponse>() const
{
  assert(_tag == Tag::RtsStatusResponse);
  return this->_RtsStatusResponse;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsStatusResponse>(Anki::Victor::ExternalComms::RtsStatusResponse member)
{
  return CreateRtsStatusResponse(std::move(member));
}

void RtsConnection::Set_RtsStatusResponse(Anki::Victor::ExternalComms::RtsStatusResponse&& new_RtsStatusResponse)
{
  if (this->_tag == Tag::RtsStatusResponse) {
    this->_RtsStatusResponse = std::move(new_RtsStatusResponse);
  }
  else {
    ClearCurrent();
    new(&this->_RtsStatusResponse) Anki::Victor::ExternalComms::RtsStatusResponse(std::move(new_RtsStatusResponse));
    _tag = Tag::RtsStatusResponse;
  }
}

RtsConnection RtsConnection::CreateRtsWifiScanRequest(Anki::Victor::ExternalComms::RtsWifiScanRequest&& new_RtsWifiScanRequest)
{
  RtsConnection m;
  m.Set_RtsWifiScanRequest(new_RtsWifiScanRequest);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsWifiScanRequest&& new_RtsWifiScanRequest)
{
  new(&this->_RtsWifiScanRequest) Anki::Victor::ExternalComms::RtsWifiScanRequest(std::move(new_RtsWifiScanRequest));
  _tag = Tag::RtsWifiScanRequest;
}

const Anki::Victor::ExternalComms::RtsWifiScanRequest& RtsConnection::Get_RtsWifiScanRequest() const
{
  assert(_tag == Tag::RtsWifiScanRequest);
  return this->_RtsWifiScanRequest;
}

void RtsConnection::Set_RtsWifiScanRequest(const Anki::Victor::ExternalComms::RtsWifiScanRequest& new_RtsWifiScanRequest)
{
  if(this->_tag == Tag::RtsWifiScanRequest) {
    this->_RtsWifiScanRequest = new_RtsWifiScanRequest;
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiScanRequest) Anki::Victor::ExternalComms::RtsWifiScanRequest(new_RtsWifiScanRequest);
    _tag = Tag::RtsWifiScanRequest;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsWifiScanRequest& RtsConnection::Get_<RtsConnection::Tag::RtsWifiScanRequest>() const
{
  assert(_tag == Tag::RtsWifiScanRequest);
  return this->_RtsWifiScanRequest;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsWifiScanRequest>(Anki::Victor::ExternalComms::RtsWifiScanRequest member)
{
  return CreateRtsWifiScanRequest(std::move(member));
}

void RtsConnection::Set_RtsWifiScanRequest(Anki::Victor::ExternalComms::RtsWifiScanRequest&& new_RtsWifiScanRequest)
{
  if (this->_tag == Tag::RtsWifiScanRequest) {
    this->_RtsWifiScanRequest = std::move(new_RtsWifiScanRequest);
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiScanRequest) Anki::Victor::ExternalComms::RtsWifiScanRequest(std::move(new_RtsWifiScanRequest));
    _tag = Tag::RtsWifiScanRequest;
  }
}

RtsConnection RtsConnection::CreateRtsWifiScanResponse(Anki::Victor::ExternalComms::RtsWifiScanResponse&& new_RtsWifiScanResponse)
{
  RtsConnection m;
  m.Set_RtsWifiScanResponse(new_RtsWifiScanResponse);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsWifiScanResponse&& new_RtsWifiScanResponse)
{
  new(&this->_RtsWifiScanResponse) Anki::Victor::ExternalComms::RtsWifiScanResponse(std::move(new_RtsWifiScanResponse));
  _tag = Tag::RtsWifiScanResponse;
}

const Anki::Victor::ExternalComms::RtsWifiScanResponse& RtsConnection::Get_RtsWifiScanResponse() const
{
  assert(_tag == Tag::RtsWifiScanResponse);
  return this->_RtsWifiScanResponse;
}

void RtsConnection::Set_RtsWifiScanResponse(const Anki::Victor::ExternalComms::RtsWifiScanResponse& new_RtsWifiScanResponse)
{
  if(this->_tag == Tag::RtsWifiScanResponse) {
    this->_RtsWifiScanResponse = new_RtsWifiScanResponse;
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiScanResponse) Anki::Victor::ExternalComms::RtsWifiScanResponse(new_RtsWifiScanResponse);
    _tag = Tag::RtsWifiScanResponse;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsWifiScanResponse& RtsConnection::Get_<RtsConnection::Tag::RtsWifiScanResponse>() const
{
  assert(_tag == Tag::RtsWifiScanResponse);
  return this->_RtsWifiScanResponse;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsWifiScanResponse>(Anki::Victor::ExternalComms::RtsWifiScanResponse member)
{
  return CreateRtsWifiScanResponse(std::move(member));
}

void RtsConnection::Set_RtsWifiScanResponse(Anki::Victor::ExternalComms::RtsWifiScanResponse&& new_RtsWifiScanResponse)
{
  if (this->_tag == Tag::RtsWifiScanResponse) {
    this->_RtsWifiScanResponse = std::move(new_RtsWifiScanResponse);
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiScanResponse) Anki::Victor::ExternalComms::RtsWifiScanResponse(std::move(new_RtsWifiScanResponse));
    _tag = Tag::RtsWifiScanResponse;
  }
}

RtsConnection RtsConnection::CreateRtsOtaUpdateRequest(Anki::Victor::ExternalComms::RtsOtaUpdateRequest&& new_RtsOtaUpdateRequest)
{
  RtsConnection m;
  m.Set_RtsOtaUpdateRequest(new_RtsOtaUpdateRequest);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsOtaUpdateRequest&& new_RtsOtaUpdateRequest)
{
  new(&this->_RtsOtaUpdateRequest) Anki::Victor::ExternalComms::RtsOtaUpdateRequest(std::move(new_RtsOtaUpdateRequest));
  _tag = Tag::RtsOtaUpdateRequest;
}

const Anki::Victor::ExternalComms::RtsOtaUpdateRequest& RtsConnection::Get_RtsOtaUpdateRequest() const
{
  assert(_tag == Tag::RtsOtaUpdateRequest);
  return this->_RtsOtaUpdateRequest;
}

void RtsConnection::Set_RtsOtaUpdateRequest(const Anki::Victor::ExternalComms::RtsOtaUpdateRequest& new_RtsOtaUpdateRequest)
{
  if(this->_tag == Tag::RtsOtaUpdateRequest) {
    this->_RtsOtaUpdateRequest = new_RtsOtaUpdateRequest;
  }
  else {
    ClearCurrent();
    new(&this->_RtsOtaUpdateRequest) Anki::Victor::ExternalComms::RtsOtaUpdateRequest(new_RtsOtaUpdateRequest);
    _tag = Tag::RtsOtaUpdateRequest;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsOtaUpdateRequest& RtsConnection::Get_<RtsConnection::Tag::RtsOtaUpdateRequest>() const
{
  assert(_tag == Tag::RtsOtaUpdateRequest);
  return this->_RtsOtaUpdateRequest;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsOtaUpdateRequest>(Anki::Victor::ExternalComms::RtsOtaUpdateRequest member)
{
  return CreateRtsOtaUpdateRequest(std::move(member));
}

void RtsConnection::Set_RtsOtaUpdateRequest(Anki::Victor::ExternalComms::RtsOtaUpdateRequest&& new_RtsOtaUpdateRequest)
{
  if (this->_tag == Tag::RtsOtaUpdateRequest) {
    this->_RtsOtaUpdateRequest = std::move(new_RtsOtaUpdateRequest);
  }
  else {
    ClearCurrent();
    new(&this->_RtsOtaUpdateRequest) Anki::Victor::ExternalComms::RtsOtaUpdateRequest(std::move(new_RtsOtaUpdateRequest));
    _tag = Tag::RtsOtaUpdateRequest;
  }
}

RtsConnection RtsConnection::CreateRtsOtaUpdateResponse(Anki::Victor::ExternalComms::RtsOtaUpdateResponse&& new_RtsOtaUpdateResponse)
{
  RtsConnection m;
  m.Set_RtsOtaUpdateResponse(new_RtsOtaUpdateResponse);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsOtaUpdateResponse&& new_RtsOtaUpdateResponse)
{
  new(&this->_RtsOtaUpdateResponse) Anki::Victor::ExternalComms::RtsOtaUpdateResponse(std::move(new_RtsOtaUpdateResponse));
  _tag = Tag::RtsOtaUpdateResponse;
}

const Anki::Victor::ExternalComms::RtsOtaUpdateResponse& RtsConnection::Get_RtsOtaUpdateResponse() const
{
  assert(_tag == Tag::RtsOtaUpdateResponse);
  return this->_RtsOtaUpdateResponse;
}

void RtsConnection::Set_RtsOtaUpdateResponse(const Anki::Victor::ExternalComms::RtsOtaUpdateResponse& new_RtsOtaUpdateResponse)
{
  if(this->_tag == Tag::RtsOtaUpdateResponse) {
    this->_RtsOtaUpdateResponse = new_RtsOtaUpdateResponse;
  }
  else {
    ClearCurrent();
    new(&this->_RtsOtaUpdateResponse) Anki::Victor::ExternalComms::RtsOtaUpdateResponse(new_RtsOtaUpdateResponse);
    _tag = Tag::RtsOtaUpdateResponse;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsOtaUpdateResponse& RtsConnection::Get_<RtsConnection::Tag::RtsOtaUpdateResponse>() const
{
  assert(_tag == Tag::RtsOtaUpdateResponse);
  return this->_RtsOtaUpdateResponse;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsOtaUpdateResponse>(Anki::Victor::ExternalComms::RtsOtaUpdateResponse member)
{
  return CreateRtsOtaUpdateResponse(std::move(member));
}

void RtsConnection::Set_RtsOtaUpdateResponse(Anki::Victor::ExternalComms::RtsOtaUpdateResponse&& new_RtsOtaUpdateResponse)
{
  if (this->_tag == Tag::RtsOtaUpdateResponse) {
    this->_RtsOtaUpdateResponse = std::move(new_RtsOtaUpdateResponse);
  }
  else {
    ClearCurrent();
    new(&this->_RtsOtaUpdateResponse) Anki::Victor::ExternalComms::RtsOtaUpdateResponse(std::move(new_RtsOtaUpdateResponse));
    _tag = Tag::RtsOtaUpdateResponse;
  }
}

RtsConnection RtsConnection::CreateRtsCancelPairing(Anki::Victor::ExternalComms::RtsCancelPairing&& new_RtsCancelPairing)
{
  RtsConnection m;
  m.Set_RtsCancelPairing(new_RtsCancelPairing);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsCancelPairing&& new_RtsCancelPairing)
{
  new(&this->_RtsCancelPairing) Anki::Victor::ExternalComms::RtsCancelPairing(std::move(new_RtsCancelPairing));
  _tag = Tag::RtsCancelPairing;
}

const Anki::Victor::ExternalComms::RtsCancelPairing& RtsConnection::Get_RtsCancelPairing() const
{
  assert(_tag == Tag::RtsCancelPairing);
  return this->_RtsCancelPairing;
}

void RtsConnection::Set_RtsCancelPairing(const Anki::Victor::ExternalComms::RtsCancelPairing& new_RtsCancelPairing)
{
  if(this->_tag == Tag::RtsCancelPairing) {
    this->_RtsCancelPairing = new_RtsCancelPairing;
  }
  else {
    ClearCurrent();
    new(&this->_RtsCancelPairing) Anki::Victor::ExternalComms::RtsCancelPairing(new_RtsCancelPairing);
    _tag = Tag::RtsCancelPairing;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsCancelPairing& RtsConnection::Get_<RtsConnection::Tag::RtsCancelPairing>() const
{
  assert(_tag == Tag::RtsCancelPairing);
  return this->_RtsCancelPairing;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsCancelPairing>(Anki::Victor::ExternalComms::RtsCancelPairing member)
{
  return CreateRtsCancelPairing(std::move(member));
}

void RtsConnection::Set_RtsCancelPairing(Anki::Victor::ExternalComms::RtsCancelPairing&& new_RtsCancelPairing)
{
  if (this->_tag == Tag::RtsCancelPairing) {
    this->_RtsCancelPairing = std::move(new_RtsCancelPairing);
  }
  else {
    ClearCurrent();
    new(&this->_RtsCancelPairing) Anki::Victor::ExternalComms::RtsCancelPairing(std::move(new_RtsCancelPairing));
    _tag = Tag::RtsCancelPairing;
  }
}

RtsConnection RtsConnection::CreateRtsForceDisconnect(Anki::Victor::ExternalComms::RtsForceDisconnect&& new_RtsForceDisconnect)
{
  RtsConnection m;
  m.Set_RtsForceDisconnect(new_RtsForceDisconnect);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsForceDisconnect&& new_RtsForceDisconnect)
{
  new(&this->_RtsForceDisconnect) Anki::Victor::ExternalComms::RtsForceDisconnect(std::move(new_RtsForceDisconnect));
  _tag = Tag::RtsForceDisconnect;
}

const Anki::Victor::ExternalComms::RtsForceDisconnect& RtsConnection::Get_RtsForceDisconnect() const
{
  assert(_tag == Tag::RtsForceDisconnect);
  return this->_RtsForceDisconnect;
}

void RtsConnection::Set_RtsForceDisconnect(const Anki::Victor::ExternalComms::RtsForceDisconnect& new_RtsForceDisconnect)
{
  if(this->_tag == Tag::RtsForceDisconnect) {
    this->_RtsForceDisconnect = new_RtsForceDisconnect;
  }
  else {
    ClearCurrent();
    new(&this->_RtsForceDisconnect) Anki::Victor::ExternalComms::RtsForceDisconnect(new_RtsForceDisconnect);
    _tag = Tag::RtsForceDisconnect;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsForceDisconnect& RtsConnection::Get_<RtsConnection::Tag::RtsForceDisconnect>() const
{
  assert(_tag == Tag::RtsForceDisconnect);
  return this->_RtsForceDisconnect;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsForceDisconnect>(Anki::Victor::ExternalComms::RtsForceDisconnect member)
{
  return CreateRtsForceDisconnect(std::move(member));
}

void RtsConnection::Set_RtsForceDisconnect(Anki::Victor::ExternalComms::RtsForceDisconnect&& new_RtsForceDisconnect)
{
  if (this->_tag == Tag::RtsForceDisconnect) {
    this->_RtsForceDisconnect = std::move(new_RtsForceDisconnect);
  }
  else {
    ClearCurrent();
    new(&this->_RtsForceDisconnect) Anki::Victor::ExternalComms::RtsForceDisconnect(std::move(new_RtsForceDisconnect));
    _tag = Tag::RtsForceDisconnect;
  }
}

RtsConnection RtsConnection::CreateRtsAck(Anki::Victor::ExternalComms::RtsAck&& new_RtsAck)
{
  RtsConnection m;
  m.Set_RtsAck(new_RtsAck);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsAck&& new_RtsAck)
{
  new(&this->_RtsAck) Anki::Victor::ExternalComms::RtsAck(std::move(new_RtsAck));
  _tag = Tag::RtsAck;
}

const Anki::Victor::ExternalComms::RtsAck& RtsConnection::Get_RtsAck() const
{
  assert(_tag == Tag::RtsAck);
  return this->_RtsAck;
}

void RtsConnection::Set_RtsAck(const Anki::Victor::ExternalComms::RtsAck& new_RtsAck)
{
  if(this->_tag == Tag::RtsAck) {
    this->_RtsAck = new_RtsAck;
  }
  else {
    ClearCurrent();
    new(&this->_RtsAck) Anki::Victor::ExternalComms::RtsAck(new_RtsAck);
    _tag = Tag::RtsAck;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsAck& RtsConnection::Get_<RtsConnection::Tag::RtsAck>() const
{
  assert(_tag == Tag::RtsAck);
  return this->_RtsAck;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsAck>(Anki::Victor::ExternalComms::RtsAck member)
{
  return CreateRtsAck(std::move(member));
}

void RtsConnection::Set_RtsAck(Anki::Victor::ExternalComms::RtsAck&& new_RtsAck)
{
  if (this->_tag == Tag::RtsAck) {
    this->_RtsAck = std::move(new_RtsAck);
  }
  else {
    ClearCurrent();
    new(&this->_RtsAck) Anki::Victor::ExternalComms::RtsAck(std::move(new_RtsAck));
    _tag = Tag::RtsAck;
  }
}

RtsConnection RtsConnection::CreateRtsWifiAccessPointRequest(Anki::Victor::ExternalComms::RtsWifiAccessPointRequest&& new_RtsWifiAccessPointRequest)
{
  RtsConnection m;
  m.Set_RtsWifiAccessPointRequest(new_RtsWifiAccessPointRequest);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsWifiAccessPointRequest&& new_RtsWifiAccessPointRequest)
{
  new(&this->_RtsWifiAccessPointRequest) Anki::Victor::ExternalComms::RtsWifiAccessPointRequest(std::move(new_RtsWifiAccessPointRequest));
  _tag = Tag::RtsWifiAccessPointRequest;
}

const Anki::Victor::ExternalComms::RtsWifiAccessPointRequest& RtsConnection::Get_RtsWifiAccessPointRequest() const
{
  assert(_tag == Tag::RtsWifiAccessPointRequest);
  return this->_RtsWifiAccessPointRequest;
}

void RtsConnection::Set_RtsWifiAccessPointRequest(const Anki::Victor::ExternalComms::RtsWifiAccessPointRequest& new_RtsWifiAccessPointRequest)
{
  if(this->_tag == Tag::RtsWifiAccessPointRequest) {
    this->_RtsWifiAccessPointRequest = new_RtsWifiAccessPointRequest;
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiAccessPointRequest) Anki::Victor::ExternalComms::RtsWifiAccessPointRequest(new_RtsWifiAccessPointRequest);
    _tag = Tag::RtsWifiAccessPointRequest;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsWifiAccessPointRequest& RtsConnection::Get_<RtsConnection::Tag::RtsWifiAccessPointRequest>() const
{
  assert(_tag == Tag::RtsWifiAccessPointRequest);
  return this->_RtsWifiAccessPointRequest;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsWifiAccessPointRequest>(Anki::Victor::ExternalComms::RtsWifiAccessPointRequest member)
{
  return CreateRtsWifiAccessPointRequest(std::move(member));
}

void RtsConnection::Set_RtsWifiAccessPointRequest(Anki::Victor::ExternalComms::RtsWifiAccessPointRequest&& new_RtsWifiAccessPointRequest)
{
  if (this->_tag == Tag::RtsWifiAccessPointRequest) {
    this->_RtsWifiAccessPointRequest = std::move(new_RtsWifiAccessPointRequest);
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiAccessPointRequest) Anki::Victor::ExternalComms::RtsWifiAccessPointRequest(std::move(new_RtsWifiAccessPointRequest));
    _tag = Tag::RtsWifiAccessPointRequest;
  }
}

RtsConnection RtsConnection::CreateRtsWifiAccessPointResponse(Anki::Victor::ExternalComms::RtsWifiAccessPointResponse&& new_RtsWifiAccessPointResponse)
{
  RtsConnection m;
  m.Set_RtsWifiAccessPointResponse(new_RtsWifiAccessPointResponse);
  return m;
}

RtsConnection::RtsConnection(Anki::Victor::ExternalComms::RtsWifiAccessPointResponse&& new_RtsWifiAccessPointResponse)
{
  new(&this->_RtsWifiAccessPointResponse) Anki::Victor::ExternalComms::RtsWifiAccessPointResponse(std::move(new_RtsWifiAccessPointResponse));
  _tag = Tag::RtsWifiAccessPointResponse;
}

const Anki::Victor::ExternalComms::RtsWifiAccessPointResponse& RtsConnection::Get_RtsWifiAccessPointResponse() const
{
  assert(_tag == Tag::RtsWifiAccessPointResponse);
  return this->_RtsWifiAccessPointResponse;
}

void RtsConnection::Set_RtsWifiAccessPointResponse(const Anki::Victor::ExternalComms::RtsWifiAccessPointResponse& new_RtsWifiAccessPointResponse)
{
  if(this->_tag == Tag::RtsWifiAccessPointResponse) {
    this->_RtsWifiAccessPointResponse = new_RtsWifiAccessPointResponse;
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiAccessPointResponse) Anki::Victor::ExternalComms::RtsWifiAccessPointResponse(new_RtsWifiAccessPointResponse);
    _tag = Tag::RtsWifiAccessPointResponse;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsWifiAccessPointResponse& RtsConnection::Get_<RtsConnection::Tag::RtsWifiAccessPointResponse>() const
{
  assert(_tag == Tag::RtsWifiAccessPointResponse);
  return this->_RtsWifiAccessPointResponse;
}

template<>
RtsConnection RtsConnection::Create_<RtsConnection::Tag::RtsWifiAccessPointResponse>(Anki::Victor::ExternalComms::RtsWifiAccessPointResponse member)
{
  return CreateRtsWifiAccessPointResponse(std::move(member));
}

void RtsConnection::Set_RtsWifiAccessPointResponse(Anki::Victor::ExternalComms::RtsWifiAccessPointResponse&& new_RtsWifiAccessPointResponse)
{
  if (this->_tag == Tag::RtsWifiAccessPointResponse) {
    this->_RtsWifiAccessPointResponse = std::move(new_RtsWifiAccessPointResponse);
  }
  else {
    ClearCurrent();
    new(&this->_RtsWifiAccessPointResponse) Anki::Victor::ExternalComms::RtsWifiAccessPointResponse(std::move(new_RtsWifiAccessPointResponse));
    _tag = Tag::RtsWifiAccessPointResponse;
  }
}

size_t RtsConnection::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RtsConnection::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  Tag newTag {Tag::INVALID};
  const Tag oldTag {GetTag()};
  buffer.Read(newTag);
  if (newTag != oldTag) {
    ClearCurrent();
  }
  switch(newTag) {
  case Tag::Error:
    if (newTag != oldTag) {
      new(&(this->_Error)) Anki::Victor::ExternalComms::Error(buffer);
    }
    else {
      this->_Error.Unpack(buffer);
    }
    break;
  case Tag::RtsConnRequest:
    if (newTag != oldTag) {
      new(&(this->_RtsConnRequest)) Anki::Victor::ExternalComms::RtsConnRequest(buffer);
    }
    else {
      this->_RtsConnRequest.Unpack(buffer);
    }
    break;
  case Tag::RtsConnResponse:
    if (newTag != oldTag) {
      new(&(this->_RtsConnResponse)) Anki::Victor::ExternalComms::RtsConnResponse(buffer);
    }
    else {
      this->_RtsConnResponse.Unpack(buffer);
    }
    break;
  case Tag::RtsNonceMessage:
    if (newTag != oldTag) {
      new(&(this->_RtsNonceMessage)) Anki::Victor::ExternalComms::RtsNonceMessage(buffer);
    }
    else {
      this->_RtsNonceMessage.Unpack(buffer);
    }
    break;
  case Tag::RtsChallengeMessage:
    if (newTag != oldTag) {
      new(&(this->_RtsChallengeMessage)) Anki::Victor::ExternalComms::RtsChallengeMessage(buffer);
    }
    else {
      this->_RtsChallengeMessage.Unpack(buffer);
    }
    break;
  case Tag::RtsChallengeSuccessMessage:
    if (newTag != oldTag) {
      new(&(this->_RtsChallengeSuccessMessage)) Anki::Victor::ExternalComms::RtsChallengeSuccessMessage(buffer);
    }
    else {
      this->_RtsChallengeSuccessMessage.Unpack(buffer);
    }
    break;
  case Tag::RtsWifiConnectRequest:
    if (newTag != oldTag) {
      new(&(this->_RtsWifiConnectRequest)) Anki::Victor::ExternalComms::RtsWifiConnectRequest(buffer);
    }
    else {
      this->_RtsWifiConnectRequest.Unpack(buffer);
    }
    break;
  case Tag::RtsWifiConnectResponse:
    if (newTag != oldTag) {
      new(&(this->_RtsWifiConnectResponse)) Anki::Victor::ExternalComms::RtsWifiConnectResponse(buffer);
    }
    else {
      this->_RtsWifiConnectResponse.Unpack(buffer);
    }
    break;
  case Tag::RtsWifiIpRequest:
    if (newTag != oldTag) {
      new(&(this->_RtsWifiIpRequest)) Anki::Victor::ExternalComms::RtsWifiIpRequest(buffer);
    }
    else {
      this->_RtsWifiIpRequest.Unpack(buffer);
    }
    break;
  case Tag::RtsWifiIpResponse:
    if (newTag != oldTag) {
      new(&(this->_RtsWifiIpResponse)) Anki::Victor::ExternalComms::RtsWifiIpResponse(buffer);
    }
    else {
      this->_RtsWifiIpResponse.Unpack(buffer);
    }
    break;
  case Tag::RtsStatusRequest:
    if (newTag != oldTag) {
      new(&(this->_RtsStatusRequest)) Anki::Victor::ExternalComms::RtsStatusRequest(buffer);
    }
    else {
      this->_RtsStatusRequest.Unpack(buffer);
    }
    break;
  case Tag::RtsStatusResponse:
    if (newTag != oldTag) {
      new(&(this->_RtsStatusResponse)) Anki::Victor::ExternalComms::RtsStatusResponse(buffer);
    }
    else {
      this->_RtsStatusResponse.Unpack(buffer);
    }
    break;
  case Tag::RtsWifiScanRequest:
    if (newTag != oldTag) {
      new(&(this->_RtsWifiScanRequest)) Anki::Victor::ExternalComms::RtsWifiScanRequest(buffer);
    }
    else {
      this->_RtsWifiScanRequest.Unpack(buffer);
    }
    break;
  case Tag::RtsWifiScanResponse:
    if (newTag != oldTag) {
      new(&(this->_RtsWifiScanResponse)) Anki::Victor::ExternalComms::RtsWifiScanResponse(buffer);
    }
    else {
      this->_RtsWifiScanResponse.Unpack(buffer);
    }
    break;
  case Tag::RtsOtaUpdateRequest:
    if (newTag != oldTag) {
      new(&(this->_RtsOtaUpdateRequest)) Anki::Victor::ExternalComms::RtsOtaUpdateRequest(buffer);
    }
    else {
      this->_RtsOtaUpdateRequest.Unpack(buffer);
    }
    break;
  case Tag::RtsOtaUpdateResponse:
    if (newTag != oldTag) {
      new(&(this->_RtsOtaUpdateResponse)) Anki::Victor::ExternalComms::RtsOtaUpdateResponse(buffer);
    }
    else {
      this->_RtsOtaUpdateResponse.Unpack(buffer);
    }
    break;
  case Tag::RtsCancelPairing:
    if (newTag != oldTag) {
      new(&(this->_RtsCancelPairing)) Anki::Victor::ExternalComms::RtsCancelPairing(buffer);
    }
    else {
      this->_RtsCancelPairing.Unpack(buffer);
    }
    break;
  case Tag::RtsForceDisconnect:
    if (newTag != oldTag) {
      new(&(this->_RtsForceDisconnect)) Anki::Victor::ExternalComms::RtsForceDisconnect(buffer);
    }
    else {
      this->_RtsForceDisconnect.Unpack(buffer);
    }
    break;
  case Tag::RtsAck:
    if (newTag != oldTag) {
      new(&(this->_RtsAck)) Anki::Victor::ExternalComms::RtsAck(buffer);
    }
    else {
      this->_RtsAck.Unpack(buffer);
    }
    break;
  case Tag::RtsWifiAccessPointRequest:
    if (newTag != oldTag) {
      new(&(this->_RtsWifiAccessPointRequest)) Anki::Victor::ExternalComms::RtsWifiAccessPointRequest(buffer);
    }
    else {
      this->_RtsWifiAccessPointRequest.Unpack(buffer);
    }
    break;
  case Tag::RtsWifiAccessPointResponse:
    if (newTag != oldTag) {
      new(&(this->_RtsWifiAccessPointResponse)) Anki::Victor::ExternalComms::RtsWifiAccessPointResponse(buffer);
    }
    else {
      this->_RtsWifiAccessPointResponse.Unpack(buffer);
    }
    break;
  default:
    break;
  }
  _tag = newTag;
  return buffer.GetBytesRead();
}

size_t RtsConnection::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RtsConnection::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(_tag);
  switch(GetTag()) {
  case Tag::Error:
    this->_Error.Pack(buffer);
    break;
  case Tag::RtsConnRequest:
    this->_RtsConnRequest.Pack(buffer);
    break;
  case Tag::RtsConnResponse:
    this->_RtsConnResponse.Pack(buffer);
    break;
  case Tag::RtsNonceMessage:
    this->_RtsNonceMessage.Pack(buffer);
    break;
  case Tag::RtsChallengeMessage:
    this->_RtsChallengeMessage.Pack(buffer);
    break;
  case Tag::RtsChallengeSuccessMessage:
    this->_RtsChallengeSuccessMessage.Pack(buffer);
    break;
  case Tag::RtsWifiConnectRequest:
    this->_RtsWifiConnectRequest.Pack(buffer);
    break;
  case Tag::RtsWifiConnectResponse:
    this->_RtsWifiConnectResponse.Pack(buffer);
    break;
  case Tag::RtsWifiIpRequest:
    this->_RtsWifiIpRequest.Pack(buffer);
    break;
  case Tag::RtsWifiIpResponse:
    this->_RtsWifiIpResponse.Pack(buffer);
    break;
  case Tag::RtsStatusRequest:
    this->_RtsStatusRequest.Pack(buffer);
    break;
  case Tag::RtsStatusResponse:
    this->_RtsStatusResponse.Pack(buffer);
    break;
  case Tag::RtsWifiScanRequest:
    this->_RtsWifiScanRequest.Pack(buffer);
    break;
  case Tag::RtsWifiScanResponse:
    this->_RtsWifiScanResponse.Pack(buffer);
    break;
  case Tag::RtsOtaUpdateRequest:
    this->_RtsOtaUpdateRequest.Pack(buffer);
    break;
  case Tag::RtsOtaUpdateResponse:
    this->_RtsOtaUpdateResponse.Pack(buffer);
    break;
  case Tag::RtsCancelPairing:
    this->_RtsCancelPairing.Pack(buffer);
    break;
  case Tag::RtsForceDisconnect:
    this->_RtsForceDisconnect.Pack(buffer);
    break;
  case Tag::RtsAck:
    this->_RtsAck.Pack(buffer);
    break;
  case Tag::RtsWifiAccessPointRequest:
    this->_RtsWifiAccessPointRequest.Pack(buffer);
    break;
  case Tag::RtsWifiAccessPointResponse:
    this->_RtsWifiAccessPointResponse.Pack(buffer);
    break;
  default:
    break;
  }
  return buffer.GetBytesWritten();
}

size_t RtsConnection::Size() const
{
  size_t result {1}; // tag = uint_8
  switch(GetTag()) {
  case Tag::Error:
    result += this->_Error.Size(); // Error
    break;
  case Tag::RtsConnRequest:
    result += this->_RtsConnRequest.Size(); // RtsConnRequest
    break;
  case Tag::RtsConnResponse:
    result += this->_RtsConnResponse.Size(); // RtsConnResponse
    break;
  case Tag::RtsNonceMessage:
    result += this->_RtsNonceMessage.Size(); // RtsNonceMessage
    break;
  case Tag::RtsChallengeMessage:
    result += this->_RtsChallengeMessage.Size(); // RtsChallengeMessage
    break;
  case Tag::RtsChallengeSuccessMessage:
    result += this->_RtsChallengeSuccessMessage.Size(); // RtsChallengeSuccessMessage
    break;
  case Tag::RtsWifiConnectRequest:
    result += this->_RtsWifiConnectRequest.Size(); // RtsWifiConnectRequest
    break;
  case Tag::RtsWifiConnectResponse:
    result += this->_RtsWifiConnectResponse.Size(); // RtsWifiConnectResponse
    break;
  case Tag::RtsWifiIpRequest:
    result += this->_RtsWifiIpRequest.Size(); // RtsWifiIpRequest
    break;
  case Tag::RtsWifiIpResponse:
    result += this->_RtsWifiIpResponse.Size(); // RtsWifiIpResponse
    break;
  case Tag::RtsStatusRequest:
    result += this->_RtsStatusRequest.Size(); // RtsStatusRequest
    break;
  case Tag::RtsStatusResponse:
    result += this->_RtsStatusResponse.Size(); // RtsStatusResponse
    break;
  case Tag::RtsWifiScanRequest:
    result += this->_RtsWifiScanRequest.Size(); // RtsWifiScanRequest
    break;
  case Tag::RtsWifiScanResponse:
    result += this->_RtsWifiScanResponse.Size(); // RtsWifiScanResponse
    break;
  case Tag::RtsOtaUpdateRequest:
    result += this->_RtsOtaUpdateRequest.Size(); // RtsOtaUpdateRequest
    break;
  case Tag::RtsOtaUpdateResponse:
    result += this->_RtsOtaUpdateResponse.Size(); // RtsOtaUpdateResponse
    break;
  case Tag::RtsCancelPairing:
    result += this->_RtsCancelPairing.Size(); // RtsCancelPairing
    break;
  case Tag::RtsForceDisconnect:
    result += this->_RtsForceDisconnect.Size(); // RtsForceDisconnect
    break;
  case Tag::RtsAck:
    result += this->_RtsAck.Size(); // RtsAck
    break;
  case Tag::RtsWifiAccessPointRequest:
    result += this->_RtsWifiAccessPointRequest.Size(); // RtsWifiAccessPointRequest
    break;
  case Tag::RtsWifiAccessPointResponse:
    result += this->_RtsWifiAccessPointResponse.Size(); // RtsWifiAccessPointResponse
    break;
  default:
    break;
  }
  return result;
}

bool RtsConnection::operator==(const RtsConnection& other) const
{
  if (this->_tag != other._tag) {
    return false;
  }
  switch(GetTag()) {
  case Tag::Error:
    return this->_Error == other._Error;
  case Tag::RtsConnRequest:
    return this->_RtsConnRequest == other._RtsConnRequest;
  case Tag::RtsConnResponse:
    return this->_RtsConnResponse == other._RtsConnResponse;
  case Tag::RtsNonceMessage:
    return this->_RtsNonceMessage == other._RtsNonceMessage;
  case Tag::RtsChallengeMessage:
    return this->_RtsChallengeMessage == other._RtsChallengeMessage;
  case Tag::RtsChallengeSuccessMessage:
    return this->_RtsChallengeSuccessMessage == other._RtsChallengeSuccessMessage;
  case Tag::RtsWifiConnectRequest:
    return this->_RtsWifiConnectRequest == other._RtsWifiConnectRequest;
  case Tag::RtsWifiConnectResponse:
    return this->_RtsWifiConnectResponse == other._RtsWifiConnectResponse;
  case Tag::RtsWifiIpRequest:
    return this->_RtsWifiIpRequest == other._RtsWifiIpRequest;
  case Tag::RtsWifiIpResponse:
    return this->_RtsWifiIpResponse == other._RtsWifiIpResponse;
  case Tag::RtsStatusRequest:
    return this->_RtsStatusRequest == other._RtsStatusRequest;
  case Tag::RtsStatusResponse:
    return this->_RtsStatusResponse == other._RtsStatusResponse;
  case Tag::RtsWifiScanRequest:
    return this->_RtsWifiScanRequest == other._RtsWifiScanRequest;
  case Tag::RtsWifiScanResponse:
    return this->_RtsWifiScanResponse == other._RtsWifiScanResponse;
  case Tag::RtsOtaUpdateRequest:
    return this->_RtsOtaUpdateRequest == other._RtsOtaUpdateRequest;
  case Tag::RtsOtaUpdateResponse:
    return this->_RtsOtaUpdateResponse == other._RtsOtaUpdateResponse;
  case Tag::RtsCancelPairing:
    return this->_RtsCancelPairing == other._RtsCancelPairing;
  case Tag::RtsForceDisconnect:
    return this->_RtsForceDisconnect == other._RtsForceDisconnect;
  case Tag::RtsAck:
    return this->_RtsAck == other._RtsAck;
  case Tag::RtsWifiAccessPointRequest:
    return this->_RtsWifiAccessPointRequest == other._RtsWifiAccessPointRequest;
  case Tag::RtsWifiAccessPointResponse:
    return this->_RtsWifiAccessPointResponse == other._RtsWifiAccessPointResponse;
  default:
    return true;
  }
}

bool RtsConnection::operator!=(const RtsConnection& other) const
{
  return !(operator==(other));
}

void RtsConnection::ClearCurrent()
{
  switch(GetTag()) {
  case Tag::Error:
    _Error.~Error();
    break;
  case Tag::RtsConnRequest:
    _RtsConnRequest.~RtsConnRequest();
    break;
  case Tag::RtsConnResponse:
    _RtsConnResponse.~RtsConnResponse();
    break;
  case Tag::RtsNonceMessage:
    _RtsNonceMessage.~RtsNonceMessage();
    break;
  case Tag::RtsChallengeMessage:
    _RtsChallengeMessage.~RtsChallengeMessage();
    break;
  case Tag::RtsChallengeSuccessMessage:
    _RtsChallengeSuccessMessage.~RtsChallengeSuccessMessage();
    break;
  case Tag::RtsWifiConnectRequest:
    _RtsWifiConnectRequest.~RtsWifiConnectRequest();
    break;
  case Tag::RtsWifiConnectResponse:
    _RtsWifiConnectResponse.~RtsWifiConnectResponse();
    break;
  case Tag::RtsWifiIpRequest:
    _RtsWifiIpRequest.~RtsWifiIpRequest();
    break;
  case Tag::RtsWifiIpResponse:
    _RtsWifiIpResponse.~RtsWifiIpResponse();
    break;
  case Tag::RtsStatusRequest:
    _RtsStatusRequest.~RtsStatusRequest();
    break;
  case Tag::RtsStatusResponse:
    _RtsStatusResponse.~RtsStatusResponse();
    break;
  case Tag::RtsWifiScanRequest:
    _RtsWifiScanRequest.~RtsWifiScanRequest();
    break;
  case Tag::RtsWifiScanResponse:
    _RtsWifiScanResponse.~RtsWifiScanResponse();
    break;
  case Tag::RtsOtaUpdateRequest:
    _RtsOtaUpdateRequest.~RtsOtaUpdateRequest();
    break;
  case Tag::RtsOtaUpdateResponse:
    _RtsOtaUpdateResponse.~RtsOtaUpdateResponse();
    break;
  case Tag::RtsCancelPairing:
    _RtsCancelPairing.~RtsCancelPairing();
    break;
  case Tag::RtsForceDisconnect:
    _RtsForceDisconnect.~RtsForceDisconnect();
    break;
  case Tag::RtsAck:
    _RtsAck.~RtsAck();
    break;
  case Tag::RtsWifiAccessPointRequest:
    _RtsWifiAccessPointRequest.~RtsWifiAccessPointRequest();
    break;
  case Tag::RtsWifiAccessPointResponse:
    _RtsWifiAccessPointResponse.~RtsWifiAccessPointResponse();
    break;
  default:
    break;
  }
  _tag = Tag::INVALID;
}

const char* RtsConnectionTagToString(const RtsConnectionTag tag) {
  switch(tag) {
  case RtsConnectionTag::Error:
    return "Error";
  case RtsConnectionTag::RtsConnRequest:
    return "RtsConnRequest";
  case RtsConnectionTag::RtsConnResponse:
    return "RtsConnResponse";
  case RtsConnectionTag::RtsNonceMessage:
    return "RtsNonceMessage";
  case RtsConnectionTag::RtsChallengeMessage:
    return "RtsChallengeMessage";
  case RtsConnectionTag::RtsChallengeSuccessMessage:
    return "RtsChallengeSuccessMessage";
  case RtsConnectionTag::RtsWifiConnectRequest:
    return "RtsWifiConnectRequest";
  case RtsConnectionTag::RtsWifiConnectResponse:
    return "RtsWifiConnectResponse";
  case RtsConnectionTag::RtsWifiIpRequest:
    return "RtsWifiIpRequest";
  case RtsConnectionTag::RtsWifiIpResponse:
    return "RtsWifiIpResponse";
  case RtsConnectionTag::RtsStatusRequest:
    return "RtsStatusRequest";
  case RtsConnectionTag::RtsStatusResponse:
    return "RtsStatusResponse";
  case RtsConnectionTag::RtsWifiScanRequest:
    return "RtsWifiScanRequest";
  case RtsConnectionTag::RtsWifiScanResponse:
    return "RtsWifiScanResponse";
  case RtsConnectionTag::RtsOtaUpdateRequest:
    return "RtsOtaUpdateRequest";
  case RtsConnectionTag::RtsOtaUpdateResponse:
    return "RtsOtaUpdateResponse";
  case RtsConnectionTag::RtsCancelPairing:
    return "RtsCancelPairing";
  case RtsConnectionTag::RtsForceDisconnect:
    return "RtsForceDisconnect";
  case RtsConnectionTag::RtsAck:
    return "RtsAck";
  case RtsConnectionTag::RtsWifiAccessPointRequest:
    return "RtsWifiAccessPointRequest";
  case RtsConnectionTag::RtsWifiAccessPointResponse:
    return "RtsWifiAccessPointResponse";
  default:
    return "INVALID";
  }
}

const char* RtsConnectionVersionHashStr = "73760b8fb1ab7309580640f379fdf295";

const uint8_t RtsConnectionVersionHash[16] = { 
    0x73, 0x76, 0xb, 0x8f, 0xb1, 0xab, 0x73, 0x9, 0x58, 0x6, 0x40, 0xf3, 0x79, 0xfd, 0xf2, 0x95 
};

const char* EnumToString(const RobotStatus m)
{
  switch(m) {
    case RobotStatus::Exploring:
      return "Exploring";
    default: return nullptr;
  }
  return nullptr;
}

const char* RobotStatusVersionHashStr = "8a243e4679d7b35a9add296b8e81af6b";

const uint8_t RobotStatusVersionHash[16] = { 
    0x8a, 0x24, 0x3e, 0x46, 0x79, 0xd7, 0xb3, 0x5a, 0x9a, 0xdd, 0x29, 0x6b, 0x8e, 0x81, 0xaf, 0x6b 
};

// MESSAGE RobotStatusRequest

RobotStatusRequest::RobotStatusRequest(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RobotStatusRequest::RobotStatusRequest(const uint8_t* buff, size_t len)
: RobotStatusRequest::RobotStatusRequest({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RobotStatusRequest::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RobotStatusRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RobotStatusRequest::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RobotStatusRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t RobotStatusRequest::Size() const
{
  size_t result = 0;
  return result;
}

bool RobotStatusRequest::operator==(const RobotStatusRequest& other) const
{
return true;
}

bool RobotStatusRequest::operator!=(const RobotStatusRequest& other) const
{
  return !(operator==(other));
}


const char* RobotStatusRequestVersionHashStr = "186d0fb002640102bd18a9ea4356e327";

const uint8_t RobotStatusRequestVersionHash[16] = { 
    0x18, 0x6d, 0xf, 0xb0, 0x2, 0x64, 0x1, 0x2, 0xbd, 0x18, 0xa9, 0xea, 0x43, 0x56, 0xe3, 0x27 
};

// MESSAGE RobotStatusResponse

RobotStatusResponse::RobotStatusResponse(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RobotStatusResponse::RobotStatusResponse(const uint8_t* buff, size_t len)
: RobotStatusResponse::RobotStatusResponse({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RobotStatusResponse::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RobotStatusResponse::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->response);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RobotStatusResponse::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RobotStatusResponse::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->response);
  return buffer.GetBytesRead();
}

size_t RobotStatusResponse::Size() const
{
  size_t result = 0;
  // response
  result += 2; // RobotStatus
  return result;
}

bool RobotStatusResponse::operator==(const RobotStatusResponse& other) const
{
  return (this->response == other.response);
}

bool RobotStatusResponse::operator!=(const RobotStatusResponse& other) const
{
  return !(operator==(other));
}


const char* RobotStatusResponseVersionHashStr = "d8abdaacb349941a777213c23f314f73";

const uint8_t RobotStatusResponseVersionHash[16] = { 
    0xd8, 0xab, 0xda, 0xac, 0xb3, 0x49, 0x94, 0x1a, 0x77, 0x72, 0x13, 0xc2, 0x3f, 0x31, 0x4f, 0x73 
};

// UNION AppGeneral

AppGeneral::AppGeneral(const CLAD::SafeMessageBuffer& buff)
: _tag(Tag::INVALID)
{
  Unpack(buff);
}

AppGeneral::AppGeneral(const uint8_t* buffer, size_t length)
: _tag(Tag::INVALID)
{
  CLAD::SafeMessageBuffer buff(const_cast<uint8_t*>(buffer), length);
  Unpack(buff);
}

AppGeneral::AppGeneral(const AppGeneral& other)
: _tag(other._tag)
{
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(other._Error);
    break;
  case Tag::RobotStatusRequest:
    new(&(this->_RobotStatusRequest)) Anki::Victor::ExternalComms::RobotStatusRequest(other._RobotStatusRequest);
    break;
  case Tag::RobotStatusResponse:
    new(&(this->_RobotStatusResponse)) Anki::Victor::ExternalComms::RobotStatusResponse(other._RobotStatusResponse);
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
}

AppGeneral::AppGeneral(AppGeneral&& other) noexcept
: _tag(other._tag)
{
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(std::move(other._Error));
    break;
  case Tag::RobotStatusRequest:
    new(&(this->_RobotStatusRequest)) Anki::Victor::ExternalComms::RobotStatusRequest(std::move(other._RobotStatusRequest));
    break;
  case Tag::RobotStatusResponse:
    new(&(this->_RobotStatusResponse)) Anki::Victor::ExternalComms::RobotStatusResponse(std::move(other._RobotStatusResponse));
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  other.ClearCurrent();
}

AppGeneral& AppGeneral::operator=(const AppGeneral& other)
{
  if(this == &other) { return *this; }
  ClearCurrent();
  _tag = other._tag;
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(other._Error);
    break;
  case Tag::RobotStatusRequest:
    new(&(this->_RobotStatusRequest)) Anki::Victor::ExternalComms::RobotStatusRequest(other._RobotStatusRequest);
    break;
  case Tag::RobotStatusResponse:
    new(&(this->_RobotStatusResponse)) Anki::Victor::ExternalComms::RobotStatusResponse(other._RobotStatusResponse);
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  return *this;
}

AppGeneral& AppGeneral::operator=(AppGeneral&& other) noexcept
{
  if(this == &other) { return *this; }
  ClearCurrent();
  _tag = other._tag;
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(std::move(other._Error));
    break;
  case Tag::RobotStatusRequest:
    new(&(this->_RobotStatusRequest)) Anki::Victor::ExternalComms::RobotStatusRequest(std::move(other._RobotStatusRequest));
    break;
  case Tag::RobotStatusResponse:
    new(&(this->_RobotStatusResponse)) Anki::Victor::ExternalComms::RobotStatusResponse(std::move(other._RobotStatusResponse));
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  other.ClearCurrent();
  return *this;
}

AppGeneral AppGeneral::CreateError(Anki::Victor::ExternalComms::Error&& new_Error)
{
  AppGeneral m;
  m.Set_Error(new_Error);
  return m;
}

AppGeneral::AppGeneral(Anki::Victor::ExternalComms::Error&& new_Error)
{
  new(&this->_Error) Anki::Victor::ExternalComms::Error(std::move(new_Error));
  _tag = Tag::Error;
}

const Anki::Victor::ExternalComms::Error& AppGeneral::Get_Error() const
{
  assert(_tag == Tag::Error);
  return this->_Error;
}

void AppGeneral::Set_Error(const Anki::Victor::ExternalComms::Error& new_Error)
{
  if(this->_tag == Tag::Error) {
    this->_Error = new_Error;
  }
  else {
    ClearCurrent();
    new(&this->_Error) Anki::Victor::ExternalComms::Error(new_Error);
    _tag = Tag::Error;
  }
}

template<>
const Anki::Victor::ExternalComms::Error& AppGeneral::Get_<AppGeneral::Tag::Error>() const
{
  assert(_tag == Tag::Error);
  return this->_Error;
}

template<>
AppGeneral AppGeneral::Create_<AppGeneral::Tag::Error>(Anki::Victor::ExternalComms::Error member)
{
  return CreateError(std::move(member));
}

void AppGeneral::Set_Error(Anki::Victor::ExternalComms::Error&& new_Error)
{
  if (this->_tag == Tag::Error) {
    this->_Error = std::move(new_Error);
  }
  else {
    ClearCurrent();
    new(&this->_Error) Anki::Victor::ExternalComms::Error(std::move(new_Error));
    _tag = Tag::Error;
  }
}

AppGeneral AppGeneral::CreateRobotStatusRequest(Anki::Victor::ExternalComms::RobotStatusRequest&& new_RobotStatusRequest)
{
  AppGeneral m;
  m.Set_RobotStatusRequest(new_RobotStatusRequest);
  return m;
}

AppGeneral::AppGeneral(Anki::Victor::ExternalComms::RobotStatusRequest&& new_RobotStatusRequest)
{
  new(&this->_RobotStatusRequest) Anki::Victor::ExternalComms::RobotStatusRequest(std::move(new_RobotStatusRequest));
  _tag = Tag::RobotStatusRequest;
}

const Anki::Victor::ExternalComms::RobotStatusRequest& AppGeneral::Get_RobotStatusRequest() const
{
  assert(_tag == Tag::RobotStatusRequest);
  return this->_RobotStatusRequest;
}

void AppGeneral::Set_RobotStatusRequest(const Anki::Victor::ExternalComms::RobotStatusRequest& new_RobotStatusRequest)
{
  if(this->_tag == Tag::RobotStatusRequest) {
    this->_RobotStatusRequest = new_RobotStatusRequest;
  }
  else {
    ClearCurrent();
    new(&this->_RobotStatusRequest) Anki::Victor::ExternalComms::RobotStatusRequest(new_RobotStatusRequest);
    _tag = Tag::RobotStatusRequest;
  }
}

template<>
const Anki::Victor::ExternalComms::RobotStatusRequest& AppGeneral::Get_<AppGeneral::Tag::RobotStatusRequest>() const
{
  assert(_tag == Tag::RobotStatusRequest);
  return this->_RobotStatusRequest;
}

template<>
AppGeneral AppGeneral::Create_<AppGeneral::Tag::RobotStatusRequest>(Anki::Victor::ExternalComms::RobotStatusRequest member)
{
  return CreateRobotStatusRequest(std::move(member));
}

void AppGeneral::Set_RobotStatusRequest(Anki::Victor::ExternalComms::RobotStatusRequest&& new_RobotStatusRequest)
{
  if (this->_tag == Tag::RobotStatusRequest) {
    this->_RobotStatusRequest = std::move(new_RobotStatusRequest);
  }
  else {
    ClearCurrent();
    new(&this->_RobotStatusRequest) Anki::Victor::ExternalComms::RobotStatusRequest(std::move(new_RobotStatusRequest));
    _tag = Tag::RobotStatusRequest;
  }
}

AppGeneral AppGeneral::CreateRobotStatusResponse(Anki::Victor::ExternalComms::RobotStatusResponse&& new_RobotStatusResponse)
{
  AppGeneral m;
  m.Set_RobotStatusResponse(new_RobotStatusResponse);
  return m;
}

AppGeneral::AppGeneral(Anki::Victor::ExternalComms::RobotStatusResponse&& new_RobotStatusResponse)
{
  new(&this->_RobotStatusResponse) Anki::Victor::ExternalComms::RobotStatusResponse(std::move(new_RobotStatusResponse));
  _tag = Tag::RobotStatusResponse;
}

const Anki::Victor::ExternalComms::RobotStatusResponse& AppGeneral::Get_RobotStatusResponse() const
{
  assert(_tag == Tag::RobotStatusResponse);
  return this->_RobotStatusResponse;
}

void AppGeneral::Set_RobotStatusResponse(const Anki::Victor::ExternalComms::RobotStatusResponse& new_RobotStatusResponse)
{
  if(this->_tag == Tag::RobotStatusResponse) {
    this->_RobotStatusResponse = new_RobotStatusResponse;
  }
  else {
    ClearCurrent();
    new(&this->_RobotStatusResponse) Anki::Victor::ExternalComms::RobotStatusResponse(new_RobotStatusResponse);
    _tag = Tag::RobotStatusResponse;
  }
}

template<>
const Anki::Victor::ExternalComms::RobotStatusResponse& AppGeneral::Get_<AppGeneral::Tag::RobotStatusResponse>() const
{
  assert(_tag == Tag::RobotStatusResponse);
  return this->_RobotStatusResponse;
}

template<>
AppGeneral AppGeneral::Create_<AppGeneral::Tag::RobotStatusResponse>(Anki::Victor::ExternalComms::RobotStatusResponse member)
{
  return CreateRobotStatusResponse(std::move(member));
}

void AppGeneral::Set_RobotStatusResponse(Anki::Victor::ExternalComms::RobotStatusResponse&& new_RobotStatusResponse)
{
  if (this->_tag == Tag::RobotStatusResponse) {
    this->_RobotStatusResponse = std::move(new_RobotStatusResponse);
  }
  else {
    ClearCurrent();
    new(&this->_RobotStatusResponse) Anki::Victor::ExternalComms::RobotStatusResponse(std::move(new_RobotStatusResponse));
    _tag = Tag::RobotStatusResponse;
  }
}

size_t AppGeneral::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t AppGeneral::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  Tag newTag {Tag::INVALID};
  const Tag oldTag {GetTag()};
  buffer.Read(newTag);
  if (newTag != oldTag) {
    ClearCurrent();
  }
  switch(newTag) {
  case Tag::Error:
    if (newTag != oldTag) {
      new(&(this->_Error)) Anki::Victor::ExternalComms::Error(buffer);
    }
    else {
      this->_Error.Unpack(buffer);
    }
    break;
  case Tag::RobotStatusRequest:
    if (newTag != oldTag) {
      new(&(this->_RobotStatusRequest)) Anki::Victor::ExternalComms::RobotStatusRequest(buffer);
    }
    else {
      this->_RobotStatusRequest.Unpack(buffer);
    }
    break;
  case Tag::RobotStatusResponse:
    if (newTag != oldTag) {
      new(&(this->_RobotStatusResponse)) Anki::Victor::ExternalComms::RobotStatusResponse(buffer);
    }
    else {
      this->_RobotStatusResponse.Unpack(buffer);
    }
    break;
  default:
    break;
  }
  _tag = newTag;
  return buffer.GetBytesRead();
}

size_t AppGeneral::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t AppGeneral::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(_tag);
  switch(GetTag()) {
  case Tag::Error:
    this->_Error.Pack(buffer);
    break;
  case Tag::RobotStatusRequest:
    this->_RobotStatusRequest.Pack(buffer);
    break;
  case Tag::RobotStatusResponse:
    this->_RobotStatusResponse.Pack(buffer);
    break;
  default:
    break;
  }
  return buffer.GetBytesWritten();
}

size_t AppGeneral::Size() const
{
  size_t result {1}; // tag = uint_8
  switch(GetTag()) {
  case Tag::Error:
    result += this->_Error.Size(); // Error
    break;
  case Tag::RobotStatusRequest:
    result += this->_RobotStatusRequest.Size(); // RobotStatusRequest
    break;
  case Tag::RobotStatusResponse:
    result += this->_RobotStatusResponse.Size(); // RobotStatusResponse
    break;
  default:
    break;
  }
  return result;
}

bool AppGeneral::operator==(const AppGeneral& other) const
{
  if (this->_tag != other._tag) {
    return false;
  }
  switch(GetTag()) {
  case Tag::Error:
    return this->_Error == other._Error;
  case Tag::RobotStatusRequest:
    return this->_RobotStatusRequest == other._RobotStatusRequest;
  case Tag::RobotStatusResponse:
    return this->_RobotStatusResponse == other._RobotStatusResponse;
  default:
    return true;
  }
}

bool AppGeneral::operator!=(const AppGeneral& other) const
{
  return !(operator==(other));
}

void AppGeneral::ClearCurrent()
{
  switch(GetTag()) {
  case Tag::Error:
    _Error.~Error();
    break;
  case Tag::RobotStatusRequest:
    _RobotStatusRequest.~RobotStatusRequest();
    break;
  case Tag::RobotStatusResponse:
    _RobotStatusResponse.~RobotStatusResponse();
    break;
  default:
    break;
  }
  _tag = Tag::INVALID;
}

const char* AppGeneralTagToString(const AppGeneralTag tag) {
  switch(tag) {
  case AppGeneralTag::Error:
    return "Error";
  case AppGeneralTag::RobotStatusRequest:
    return "RobotStatusRequest";
  case AppGeneralTag::RobotStatusResponse:
    return "RobotStatusResponse";
  default:
    return "INVALID";
  }
}

const char* AppGeneralVersionHashStr = "d44e1a9f3399efa1da51bcf4f5b90706";

const uint8_t AppGeneralVersionHash[16] = { 
    0xd4, 0x4e, 0x1a, 0x9f, 0x33, 0x99, 0xef, 0xa1, 0xda, 0x51, 0xbc, 0xf4, 0xf5, 0xb9, 0x7, 0x6 
};

// MESSAGE MeetVictorRequest

MeetVictorRequest::MeetVictorRequest(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

MeetVictorRequest::MeetVictorRequest(const uint8_t* buff, size_t len)
: MeetVictorRequest::MeetVictorRequest({const_cast<uint8_t*>(buff), len, false})
{
}

size_t MeetVictorRequest::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t MeetVictorRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t MeetVictorRequest::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t MeetVictorRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t MeetVictorRequest::Size() const
{
  size_t result = 0;
  return result;
}

bool MeetVictorRequest::operator==(const MeetVictorRequest& other) const
{
return true;
}

bool MeetVictorRequest::operator!=(const MeetVictorRequest& other) const
{
  return !(operator==(other));
}


const char* MeetVictorRequestVersionHashStr = "e8f4856627cb8d063e57663d7f95a64e";

const uint8_t MeetVictorRequestVersionHash[16] = { 
    0xe8, 0xf4, 0x85, 0x66, 0x27, 0xcb, 0x8d, 0x6, 0x3e, 0x57, 0x66, 0x3d, 0x7f, 0x95, 0xa6, 0x4e 
};

// MESSAGE MeetVictorReadyResponse

MeetVictorReadyResponse::MeetVictorReadyResponse(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

MeetVictorReadyResponse::MeetVictorReadyResponse(const uint8_t* buff, size_t len)
: MeetVictorReadyResponse::MeetVictorReadyResponse({const_cast<uint8_t*>(buff), len, false})
{
}

size_t MeetVictorReadyResponse::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t MeetVictorReadyResponse::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.WritePString<uint8_t>(this->faceID);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t MeetVictorReadyResponse::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t MeetVictorReadyResponse::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.ReadPString<uint8_t>(this->faceID);
  return buffer.GetBytesRead();
}

size_t MeetVictorReadyResponse::Size() const
{
  size_t result = 0;
  // faceID
  result += 1; // uint_8 (string length)
  result += this->faceID.length(); // uint_8
  return result;
}

bool MeetVictorReadyResponse::operator==(const MeetVictorReadyResponse& other) const
{
  return (this->faceID == other.faceID);
}

bool MeetVictorReadyResponse::operator!=(const MeetVictorReadyResponse& other) const
{
  return !(operator==(other));
}


const char* MeetVictorReadyResponseVersionHashStr = "09d5e4de68ed983c00063766b737e84f";

const uint8_t MeetVictorReadyResponseVersionHash[16] = { 
    0x9, 0xd5, 0xe4, 0xde, 0x68, 0xed, 0x98, 0x3c, 0x0, 0x6, 0x37, 0x66, 0xb7, 0x37, 0xe8, 0x4f 
};

// MESSAGE MeetVictorFaceScanStarted

MeetVictorFaceScanStarted::MeetVictorFaceScanStarted(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

MeetVictorFaceScanStarted::MeetVictorFaceScanStarted(const uint8_t* buff, size_t len)
: MeetVictorFaceScanStarted::MeetVictorFaceScanStarted({const_cast<uint8_t*>(buff), len, false})
{
}

size_t MeetVictorFaceScanStarted::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t MeetVictorFaceScanStarted::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t MeetVictorFaceScanStarted::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t MeetVictorFaceScanStarted::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t MeetVictorFaceScanStarted::Size() const
{
  size_t result = 0;
  return result;
}

bool MeetVictorFaceScanStarted::operator==(const MeetVictorFaceScanStarted& other) const
{
return true;
}

bool MeetVictorFaceScanStarted::operator!=(const MeetVictorFaceScanStarted& other) const
{
  return !(operator==(other));
}


const char* MeetVictorFaceScanStartedVersionHashStr = "ee6bfd1e0b74af63175d1cc2378d6dc1";

const uint8_t MeetVictorFaceScanStartedVersionHash[16] = { 
    0xee, 0x6b, 0xfd, 0x1e, 0xb, 0x74, 0xaf, 0x63, 0x17, 0x5d, 0x1c, 0xc2, 0x37, 0x8d, 0x6d, 0xc1 
};

// MESSAGE MeetVictorFaceScanComplete

MeetVictorFaceScanComplete::MeetVictorFaceScanComplete(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

MeetVictorFaceScanComplete::MeetVictorFaceScanComplete(const uint8_t* buff, size_t len)
: MeetVictorFaceScanComplete::MeetVictorFaceScanComplete({const_cast<uint8_t*>(buff), len, false})
{
}

size_t MeetVictorFaceScanComplete::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t MeetVictorFaceScanComplete::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t MeetVictorFaceScanComplete::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t MeetVictorFaceScanComplete::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  return buffer.GetBytesRead();
}

size_t MeetVictorFaceScanComplete::Size() const
{
  size_t result = 0;
  return result;
}

bool MeetVictorFaceScanComplete::operator==(const MeetVictorFaceScanComplete& other) const
{
return true;
}

bool MeetVictorFaceScanComplete::operator!=(const MeetVictorFaceScanComplete& other) const
{
  return !(operator==(other));
}


const char* MeetVictorFaceScanCompleteVersionHashStr = "60ec24ff66256faf271d19a28777c1fa";

const uint8_t MeetVictorFaceScanCompleteVersionHash[16] = { 
    0x60, 0xec, 0x24, 0xff, 0x66, 0x25, 0x6f, 0xaf, 0x27, 0x1d, 0x19, 0xa2, 0x87, 0x77, 0xc1, 0xfa 
};

// MESSAGE MeetVictorSetUserName

MeetVictorSetUserName::MeetVictorSetUserName(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

MeetVictorSetUserName::MeetVictorSetUserName(const uint8_t* buff, size_t len)
: MeetVictorSetUserName::MeetVictorSetUserName({const_cast<uint8_t*>(buff), len, false})
{
}

size_t MeetVictorSetUserName::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t MeetVictorSetUserName::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.WritePString<uint8_t>(this->faceID);
  buffer.WritePString<uint8_t>(this->name);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t MeetVictorSetUserName::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t MeetVictorSetUserName::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.ReadPString<uint8_t>(this->faceID);
  buffer.ReadPString<uint8_t>(this->name);
  return buffer.GetBytesRead();
}

size_t MeetVictorSetUserName::Size() const
{
  size_t result = 0;
  // faceID
  result += 1; // uint_8 (string length)
  result += this->faceID.length(); // uint_8
  // name
  result += 1; // uint_8 (string length)
  result += this->name.length(); // uint_8
  return result;
}

bool MeetVictorSetUserName::operator==(const MeetVictorSetUserName& other) const
{
  return (this->faceID == other.faceID &&
    this->name == other.name);
}

bool MeetVictorSetUserName::operator!=(const MeetVictorSetUserName& other) const
{
  return !(operator==(other));
}


const char* MeetVictorSetUserNameVersionHashStr = "cea6cab1691434ae93a457009e7a301c";

const uint8_t MeetVictorSetUserNameVersionHash[16] = { 
    0xce, 0xa6, 0xca, 0xb1, 0x69, 0x14, 0x34, 0xae, 0x93, 0xa4, 0x57, 0x0, 0x9e, 0x7a, 0x30, 0x1c 
};

// MESSAGE MeetVictorComplete

MeetVictorComplete::MeetVictorComplete(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

MeetVictorComplete::MeetVictorComplete(const uint8_t* buff, size_t len)
: MeetVictorComplete::MeetVictorComplete({const_cast<uint8_t*>(buff), len, false})
{
}

size_t MeetVictorComplete::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t MeetVictorComplete::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->success);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t MeetVictorComplete::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t MeetVictorComplete::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->success);
  return buffer.GetBytesRead();
}

size_t MeetVictorComplete::Size() const
{
  size_t result = 0;
  // success
  result += 1; // bool
  return result;
}

bool MeetVictorComplete::operator==(const MeetVictorComplete& other) const
{
  return (this->success == other.success);
}

bool MeetVictorComplete::operator!=(const MeetVictorComplete& other) const
{
  return !(operator==(other));
}


const char* MeetVictorCompleteVersionHashStr = "bc39acc3c355f8a5134c5fff4b12ec53";

const uint8_t MeetVictorCompleteVersionHash[16] = { 
    0xbc, 0x39, 0xac, 0xc3, 0xc3, 0x55, 0xf8, 0xa5, 0x13, 0x4c, 0x5f, 0xff, 0x4b, 0x12, 0xec, 0x53 
};

// MESSAGE MeetVictorError

MeetVictorError::MeetVictorError(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

MeetVictorError::MeetVictorError(const uint8_t* buff, size_t len)
: MeetVictorError::MeetVictorError({const_cast<uint8_t*>(buff), len, false})
{
}

size_t MeetVictorError::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t MeetVictorError::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.WritePString<uint8_t>(this->errorString);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t MeetVictorError::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t MeetVictorError::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.ReadPString<uint8_t>(this->errorString);
  return buffer.GetBytesRead();
}

size_t MeetVictorError::Size() const
{
  size_t result = 0;
  // errorString
  result += 1; // uint_8 (string length)
  result += this->errorString.length(); // uint_8
  return result;
}

bool MeetVictorError::operator==(const MeetVictorError& other) const
{
  return (this->errorString == other.errorString);
}

bool MeetVictorError::operator!=(const MeetVictorError& other) const
{
  return !(operator==(other));
}


const char* MeetVictorErrorVersionHashStr = "9635476095f1452ef8a6644c91cb4806";

const uint8_t MeetVictorErrorVersionHash[16] = { 
    0x96, 0x35, 0x47, 0x60, 0x95, 0xf1, 0x45, 0x2e, 0xf8, 0xa6, 0x64, 0x4c, 0x91, 0xcb, 0x48, 0x6 
};

// UNION MeetVictor

MeetVictor::MeetVictor(const CLAD::SafeMessageBuffer& buff)
: _tag(Tag::INVALID)
{
  Unpack(buff);
}

MeetVictor::MeetVictor(const uint8_t* buffer, size_t length)
: _tag(Tag::INVALID)
{
  CLAD::SafeMessageBuffer buff(const_cast<uint8_t*>(buffer), length);
  Unpack(buff);
}

MeetVictor::MeetVictor(const MeetVictor& other)
: _tag(other._tag)
{
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(other._Error);
    break;
  case Tag::MeetVictorRequest:
    new(&(this->_MeetVictorRequest)) Anki::Victor::ExternalComms::MeetVictorRequest(other._MeetVictorRequest);
    break;
  case Tag::MeetVictorReadyResponse:
    new(&(this->_MeetVictorReadyResponse)) Anki::Victor::ExternalComms::MeetVictorReadyResponse(other._MeetVictorReadyResponse);
    break;
  case Tag::MeetVictorFaceScanStarted:
    new(&(this->_MeetVictorFaceScanStarted)) Anki::Victor::ExternalComms::MeetVictorFaceScanStarted(other._MeetVictorFaceScanStarted);
    break;
  case Tag::MeetVictorFaceScanComplete:
    new(&(this->_MeetVictorFaceScanComplete)) Anki::Victor::ExternalComms::MeetVictorFaceScanComplete(other._MeetVictorFaceScanComplete);
    break;
  case Tag::MeetVictorSetUserName:
    new(&(this->_MeetVictorSetUserName)) Anki::Victor::ExternalComms::MeetVictorSetUserName(other._MeetVictorSetUserName);
    break;
  case Tag::MeetVictorComplete:
    new(&(this->_MeetVictorComplete)) Anki::Victor::ExternalComms::MeetVictorComplete(other._MeetVictorComplete);
    break;
  case Tag::MeetVictorError:
    new(&(this->_MeetVictorError)) Anki::Victor::ExternalComms::MeetVictorError(other._MeetVictorError);
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
}

MeetVictor::MeetVictor(MeetVictor&& other) noexcept
: _tag(other._tag)
{
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(std::move(other._Error));
    break;
  case Tag::MeetVictorRequest:
    new(&(this->_MeetVictorRequest)) Anki::Victor::ExternalComms::MeetVictorRequest(std::move(other._MeetVictorRequest));
    break;
  case Tag::MeetVictorReadyResponse:
    new(&(this->_MeetVictorReadyResponse)) Anki::Victor::ExternalComms::MeetVictorReadyResponse(std::move(other._MeetVictorReadyResponse));
    break;
  case Tag::MeetVictorFaceScanStarted:
    new(&(this->_MeetVictorFaceScanStarted)) Anki::Victor::ExternalComms::MeetVictorFaceScanStarted(std::move(other._MeetVictorFaceScanStarted));
    break;
  case Tag::MeetVictorFaceScanComplete:
    new(&(this->_MeetVictorFaceScanComplete)) Anki::Victor::ExternalComms::MeetVictorFaceScanComplete(std::move(other._MeetVictorFaceScanComplete));
    break;
  case Tag::MeetVictorSetUserName:
    new(&(this->_MeetVictorSetUserName)) Anki::Victor::ExternalComms::MeetVictorSetUserName(std::move(other._MeetVictorSetUserName));
    break;
  case Tag::MeetVictorComplete:
    new(&(this->_MeetVictorComplete)) Anki::Victor::ExternalComms::MeetVictorComplete(std::move(other._MeetVictorComplete));
    break;
  case Tag::MeetVictorError:
    new(&(this->_MeetVictorError)) Anki::Victor::ExternalComms::MeetVictorError(std::move(other._MeetVictorError));
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  other.ClearCurrent();
}

MeetVictor& MeetVictor::operator=(const MeetVictor& other)
{
  if(this == &other) { return *this; }
  ClearCurrent();
  _tag = other._tag;
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(other._Error);
    break;
  case Tag::MeetVictorRequest:
    new(&(this->_MeetVictorRequest)) Anki::Victor::ExternalComms::MeetVictorRequest(other._MeetVictorRequest);
    break;
  case Tag::MeetVictorReadyResponse:
    new(&(this->_MeetVictorReadyResponse)) Anki::Victor::ExternalComms::MeetVictorReadyResponse(other._MeetVictorReadyResponse);
    break;
  case Tag::MeetVictorFaceScanStarted:
    new(&(this->_MeetVictorFaceScanStarted)) Anki::Victor::ExternalComms::MeetVictorFaceScanStarted(other._MeetVictorFaceScanStarted);
    break;
  case Tag::MeetVictorFaceScanComplete:
    new(&(this->_MeetVictorFaceScanComplete)) Anki::Victor::ExternalComms::MeetVictorFaceScanComplete(other._MeetVictorFaceScanComplete);
    break;
  case Tag::MeetVictorSetUserName:
    new(&(this->_MeetVictorSetUserName)) Anki::Victor::ExternalComms::MeetVictorSetUserName(other._MeetVictorSetUserName);
    break;
  case Tag::MeetVictorComplete:
    new(&(this->_MeetVictorComplete)) Anki::Victor::ExternalComms::MeetVictorComplete(other._MeetVictorComplete);
    break;
  case Tag::MeetVictorError:
    new(&(this->_MeetVictorError)) Anki::Victor::ExternalComms::MeetVictorError(other._MeetVictorError);
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  return *this;
}

MeetVictor& MeetVictor::operator=(MeetVictor&& other) noexcept
{
  if(this == &other) { return *this; }
  ClearCurrent();
  _tag = other._tag;
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(std::move(other._Error));
    break;
  case Tag::MeetVictorRequest:
    new(&(this->_MeetVictorRequest)) Anki::Victor::ExternalComms::MeetVictorRequest(std::move(other._MeetVictorRequest));
    break;
  case Tag::MeetVictorReadyResponse:
    new(&(this->_MeetVictorReadyResponse)) Anki::Victor::ExternalComms::MeetVictorReadyResponse(std::move(other._MeetVictorReadyResponse));
    break;
  case Tag::MeetVictorFaceScanStarted:
    new(&(this->_MeetVictorFaceScanStarted)) Anki::Victor::ExternalComms::MeetVictorFaceScanStarted(std::move(other._MeetVictorFaceScanStarted));
    break;
  case Tag::MeetVictorFaceScanComplete:
    new(&(this->_MeetVictorFaceScanComplete)) Anki::Victor::ExternalComms::MeetVictorFaceScanComplete(std::move(other._MeetVictorFaceScanComplete));
    break;
  case Tag::MeetVictorSetUserName:
    new(&(this->_MeetVictorSetUserName)) Anki::Victor::ExternalComms::MeetVictorSetUserName(std::move(other._MeetVictorSetUserName));
    break;
  case Tag::MeetVictorComplete:
    new(&(this->_MeetVictorComplete)) Anki::Victor::ExternalComms::MeetVictorComplete(std::move(other._MeetVictorComplete));
    break;
  case Tag::MeetVictorError:
    new(&(this->_MeetVictorError)) Anki::Victor::ExternalComms::MeetVictorError(std::move(other._MeetVictorError));
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  other.ClearCurrent();
  return *this;
}

MeetVictor MeetVictor::CreateError(Anki::Victor::ExternalComms::Error&& new_Error)
{
  MeetVictor m;
  m.Set_Error(new_Error);
  return m;
}

MeetVictor::MeetVictor(Anki::Victor::ExternalComms::Error&& new_Error)
{
  new(&this->_Error) Anki::Victor::ExternalComms::Error(std::move(new_Error));
  _tag = Tag::Error;
}

const Anki::Victor::ExternalComms::Error& MeetVictor::Get_Error() const
{
  assert(_tag == Tag::Error);
  return this->_Error;
}

void MeetVictor::Set_Error(const Anki::Victor::ExternalComms::Error& new_Error)
{
  if(this->_tag == Tag::Error) {
    this->_Error = new_Error;
  }
  else {
    ClearCurrent();
    new(&this->_Error) Anki::Victor::ExternalComms::Error(new_Error);
    _tag = Tag::Error;
  }
}

template<>
const Anki::Victor::ExternalComms::Error& MeetVictor::Get_<MeetVictor::Tag::Error>() const
{
  assert(_tag == Tag::Error);
  return this->_Error;
}

template<>
MeetVictor MeetVictor::Create_<MeetVictor::Tag::Error>(Anki::Victor::ExternalComms::Error member)
{
  return CreateError(std::move(member));
}

void MeetVictor::Set_Error(Anki::Victor::ExternalComms::Error&& new_Error)
{
  if (this->_tag == Tag::Error) {
    this->_Error = std::move(new_Error);
  }
  else {
    ClearCurrent();
    new(&this->_Error) Anki::Victor::ExternalComms::Error(std::move(new_Error));
    _tag = Tag::Error;
  }
}

MeetVictor MeetVictor::CreateMeetVictorRequest(Anki::Victor::ExternalComms::MeetVictorRequest&& new_MeetVictorRequest)
{
  MeetVictor m;
  m.Set_MeetVictorRequest(new_MeetVictorRequest);
  return m;
}

MeetVictor::MeetVictor(Anki::Victor::ExternalComms::MeetVictorRequest&& new_MeetVictorRequest)
{
  new(&this->_MeetVictorRequest) Anki::Victor::ExternalComms::MeetVictorRequest(std::move(new_MeetVictorRequest));
  _tag = Tag::MeetVictorRequest;
}

const Anki::Victor::ExternalComms::MeetVictorRequest& MeetVictor::Get_MeetVictorRequest() const
{
  assert(_tag == Tag::MeetVictorRequest);
  return this->_MeetVictorRequest;
}

void MeetVictor::Set_MeetVictorRequest(const Anki::Victor::ExternalComms::MeetVictorRequest& new_MeetVictorRequest)
{
  if(this->_tag == Tag::MeetVictorRequest) {
    this->_MeetVictorRequest = new_MeetVictorRequest;
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorRequest) Anki::Victor::ExternalComms::MeetVictorRequest(new_MeetVictorRequest);
    _tag = Tag::MeetVictorRequest;
  }
}

template<>
const Anki::Victor::ExternalComms::MeetVictorRequest& MeetVictor::Get_<MeetVictor::Tag::MeetVictorRequest>() const
{
  assert(_tag == Tag::MeetVictorRequest);
  return this->_MeetVictorRequest;
}

template<>
MeetVictor MeetVictor::Create_<MeetVictor::Tag::MeetVictorRequest>(Anki::Victor::ExternalComms::MeetVictorRequest member)
{
  return CreateMeetVictorRequest(std::move(member));
}

void MeetVictor::Set_MeetVictorRequest(Anki::Victor::ExternalComms::MeetVictorRequest&& new_MeetVictorRequest)
{
  if (this->_tag == Tag::MeetVictorRequest) {
    this->_MeetVictorRequest = std::move(new_MeetVictorRequest);
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorRequest) Anki::Victor::ExternalComms::MeetVictorRequest(std::move(new_MeetVictorRequest));
    _tag = Tag::MeetVictorRequest;
  }
}

MeetVictor MeetVictor::CreateMeetVictorReadyResponse(Anki::Victor::ExternalComms::MeetVictorReadyResponse&& new_MeetVictorReadyResponse)
{
  MeetVictor m;
  m.Set_MeetVictorReadyResponse(new_MeetVictorReadyResponse);
  return m;
}

MeetVictor::MeetVictor(Anki::Victor::ExternalComms::MeetVictorReadyResponse&& new_MeetVictorReadyResponse)
{
  new(&this->_MeetVictorReadyResponse) Anki::Victor::ExternalComms::MeetVictorReadyResponse(std::move(new_MeetVictorReadyResponse));
  _tag = Tag::MeetVictorReadyResponse;
}

const Anki::Victor::ExternalComms::MeetVictorReadyResponse& MeetVictor::Get_MeetVictorReadyResponse() const
{
  assert(_tag == Tag::MeetVictorReadyResponse);
  return this->_MeetVictorReadyResponse;
}

void MeetVictor::Set_MeetVictorReadyResponse(const Anki::Victor::ExternalComms::MeetVictorReadyResponse& new_MeetVictorReadyResponse)
{
  if(this->_tag == Tag::MeetVictorReadyResponse) {
    this->_MeetVictorReadyResponse = new_MeetVictorReadyResponse;
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorReadyResponse) Anki::Victor::ExternalComms::MeetVictorReadyResponse(new_MeetVictorReadyResponse);
    _tag = Tag::MeetVictorReadyResponse;
  }
}

template<>
const Anki::Victor::ExternalComms::MeetVictorReadyResponse& MeetVictor::Get_<MeetVictor::Tag::MeetVictorReadyResponse>() const
{
  assert(_tag == Tag::MeetVictorReadyResponse);
  return this->_MeetVictorReadyResponse;
}

template<>
MeetVictor MeetVictor::Create_<MeetVictor::Tag::MeetVictorReadyResponse>(Anki::Victor::ExternalComms::MeetVictorReadyResponse member)
{
  return CreateMeetVictorReadyResponse(std::move(member));
}

void MeetVictor::Set_MeetVictorReadyResponse(Anki::Victor::ExternalComms::MeetVictorReadyResponse&& new_MeetVictorReadyResponse)
{
  if (this->_tag == Tag::MeetVictorReadyResponse) {
    this->_MeetVictorReadyResponse = std::move(new_MeetVictorReadyResponse);
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorReadyResponse) Anki::Victor::ExternalComms::MeetVictorReadyResponse(std::move(new_MeetVictorReadyResponse));
    _tag = Tag::MeetVictorReadyResponse;
  }
}

MeetVictor MeetVictor::CreateMeetVictorFaceScanStarted(Anki::Victor::ExternalComms::MeetVictorFaceScanStarted&& new_MeetVictorFaceScanStarted)
{
  MeetVictor m;
  m.Set_MeetVictorFaceScanStarted(new_MeetVictorFaceScanStarted);
  return m;
}

MeetVictor::MeetVictor(Anki::Victor::ExternalComms::MeetVictorFaceScanStarted&& new_MeetVictorFaceScanStarted)
{
  new(&this->_MeetVictorFaceScanStarted) Anki::Victor::ExternalComms::MeetVictorFaceScanStarted(std::move(new_MeetVictorFaceScanStarted));
  _tag = Tag::MeetVictorFaceScanStarted;
}

const Anki::Victor::ExternalComms::MeetVictorFaceScanStarted& MeetVictor::Get_MeetVictorFaceScanStarted() const
{
  assert(_tag == Tag::MeetVictorFaceScanStarted);
  return this->_MeetVictorFaceScanStarted;
}

void MeetVictor::Set_MeetVictorFaceScanStarted(const Anki::Victor::ExternalComms::MeetVictorFaceScanStarted& new_MeetVictorFaceScanStarted)
{
  if(this->_tag == Tag::MeetVictorFaceScanStarted) {
    this->_MeetVictorFaceScanStarted = new_MeetVictorFaceScanStarted;
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorFaceScanStarted) Anki::Victor::ExternalComms::MeetVictorFaceScanStarted(new_MeetVictorFaceScanStarted);
    _tag = Tag::MeetVictorFaceScanStarted;
  }
}

template<>
const Anki::Victor::ExternalComms::MeetVictorFaceScanStarted& MeetVictor::Get_<MeetVictor::Tag::MeetVictorFaceScanStarted>() const
{
  assert(_tag == Tag::MeetVictorFaceScanStarted);
  return this->_MeetVictorFaceScanStarted;
}

template<>
MeetVictor MeetVictor::Create_<MeetVictor::Tag::MeetVictorFaceScanStarted>(Anki::Victor::ExternalComms::MeetVictorFaceScanStarted member)
{
  return CreateMeetVictorFaceScanStarted(std::move(member));
}

void MeetVictor::Set_MeetVictorFaceScanStarted(Anki::Victor::ExternalComms::MeetVictorFaceScanStarted&& new_MeetVictorFaceScanStarted)
{
  if (this->_tag == Tag::MeetVictorFaceScanStarted) {
    this->_MeetVictorFaceScanStarted = std::move(new_MeetVictorFaceScanStarted);
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorFaceScanStarted) Anki::Victor::ExternalComms::MeetVictorFaceScanStarted(std::move(new_MeetVictorFaceScanStarted));
    _tag = Tag::MeetVictorFaceScanStarted;
  }
}

MeetVictor MeetVictor::CreateMeetVictorFaceScanComplete(Anki::Victor::ExternalComms::MeetVictorFaceScanComplete&& new_MeetVictorFaceScanComplete)
{
  MeetVictor m;
  m.Set_MeetVictorFaceScanComplete(new_MeetVictorFaceScanComplete);
  return m;
}

MeetVictor::MeetVictor(Anki::Victor::ExternalComms::MeetVictorFaceScanComplete&& new_MeetVictorFaceScanComplete)
{
  new(&this->_MeetVictorFaceScanComplete) Anki::Victor::ExternalComms::MeetVictorFaceScanComplete(std::move(new_MeetVictorFaceScanComplete));
  _tag = Tag::MeetVictorFaceScanComplete;
}

const Anki::Victor::ExternalComms::MeetVictorFaceScanComplete& MeetVictor::Get_MeetVictorFaceScanComplete() const
{
  assert(_tag == Tag::MeetVictorFaceScanComplete);
  return this->_MeetVictorFaceScanComplete;
}

void MeetVictor::Set_MeetVictorFaceScanComplete(const Anki::Victor::ExternalComms::MeetVictorFaceScanComplete& new_MeetVictorFaceScanComplete)
{
  if(this->_tag == Tag::MeetVictorFaceScanComplete) {
    this->_MeetVictorFaceScanComplete = new_MeetVictorFaceScanComplete;
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorFaceScanComplete) Anki::Victor::ExternalComms::MeetVictorFaceScanComplete(new_MeetVictorFaceScanComplete);
    _tag = Tag::MeetVictorFaceScanComplete;
  }
}

template<>
const Anki::Victor::ExternalComms::MeetVictorFaceScanComplete& MeetVictor::Get_<MeetVictor::Tag::MeetVictorFaceScanComplete>() const
{
  assert(_tag == Tag::MeetVictorFaceScanComplete);
  return this->_MeetVictorFaceScanComplete;
}

template<>
MeetVictor MeetVictor::Create_<MeetVictor::Tag::MeetVictorFaceScanComplete>(Anki::Victor::ExternalComms::MeetVictorFaceScanComplete member)
{
  return CreateMeetVictorFaceScanComplete(std::move(member));
}

void MeetVictor::Set_MeetVictorFaceScanComplete(Anki::Victor::ExternalComms::MeetVictorFaceScanComplete&& new_MeetVictorFaceScanComplete)
{
  if (this->_tag == Tag::MeetVictorFaceScanComplete) {
    this->_MeetVictorFaceScanComplete = std::move(new_MeetVictorFaceScanComplete);
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorFaceScanComplete) Anki::Victor::ExternalComms::MeetVictorFaceScanComplete(std::move(new_MeetVictorFaceScanComplete));
    _tag = Tag::MeetVictorFaceScanComplete;
  }
}

MeetVictor MeetVictor::CreateMeetVictorSetUserName(Anki::Victor::ExternalComms::MeetVictorSetUserName&& new_MeetVictorSetUserName)
{
  MeetVictor m;
  m.Set_MeetVictorSetUserName(new_MeetVictorSetUserName);
  return m;
}

MeetVictor::MeetVictor(Anki::Victor::ExternalComms::MeetVictorSetUserName&& new_MeetVictorSetUserName)
{
  new(&this->_MeetVictorSetUserName) Anki::Victor::ExternalComms::MeetVictorSetUserName(std::move(new_MeetVictorSetUserName));
  _tag = Tag::MeetVictorSetUserName;
}

const Anki::Victor::ExternalComms::MeetVictorSetUserName& MeetVictor::Get_MeetVictorSetUserName() const
{
  assert(_tag == Tag::MeetVictorSetUserName);
  return this->_MeetVictorSetUserName;
}

void MeetVictor::Set_MeetVictorSetUserName(const Anki::Victor::ExternalComms::MeetVictorSetUserName& new_MeetVictorSetUserName)
{
  if(this->_tag == Tag::MeetVictorSetUserName) {
    this->_MeetVictorSetUserName = new_MeetVictorSetUserName;
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorSetUserName) Anki::Victor::ExternalComms::MeetVictorSetUserName(new_MeetVictorSetUserName);
    _tag = Tag::MeetVictorSetUserName;
  }
}

template<>
const Anki::Victor::ExternalComms::MeetVictorSetUserName& MeetVictor::Get_<MeetVictor::Tag::MeetVictorSetUserName>() const
{
  assert(_tag == Tag::MeetVictorSetUserName);
  return this->_MeetVictorSetUserName;
}

template<>
MeetVictor MeetVictor::Create_<MeetVictor::Tag::MeetVictorSetUserName>(Anki::Victor::ExternalComms::MeetVictorSetUserName member)
{
  return CreateMeetVictorSetUserName(std::move(member));
}

void MeetVictor::Set_MeetVictorSetUserName(Anki::Victor::ExternalComms::MeetVictorSetUserName&& new_MeetVictorSetUserName)
{
  if (this->_tag == Tag::MeetVictorSetUserName) {
    this->_MeetVictorSetUserName = std::move(new_MeetVictorSetUserName);
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorSetUserName) Anki::Victor::ExternalComms::MeetVictorSetUserName(std::move(new_MeetVictorSetUserName));
    _tag = Tag::MeetVictorSetUserName;
  }
}

MeetVictor MeetVictor::CreateMeetVictorComplete(Anki::Victor::ExternalComms::MeetVictorComplete&& new_MeetVictorComplete)
{
  MeetVictor m;
  m.Set_MeetVictorComplete(new_MeetVictorComplete);
  return m;
}

MeetVictor::MeetVictor(Anki::Victor::ExternalComms::MeetVictorComplete&& new_MeetVictorComplete)
{
  new(&this->_MeetVictorComplete) Anki::Victor::ExternalComms::MeetVictorComplete(std::move(new_MeetVictorComplete));
  _tag = Tag::MeetVictorComplete;
}

const Anki::Victor::ExternalComms::MeetVictorComplete& MeetVictor::Get_MeetVictorComplete() const
{
  assert(_tag == Tag::MeetVictorComplete);
  return this->_MeetVictorComplete;
}

void MeetVictor::Set_MeetVictorComplete(const Anki::Victor::ExternalComms::MeetVictorComplete& new_MeetVictorComplete)
{
  if(this->_tag == Tag::MeetVictorComplete) {
    this->_MeetVictorComplete = new_MeetVictorComplete;
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorComplete) Anki::Victor::ExternalComms::MeetVictorComplete(new_MeetVictorComplete);
    _tag = Tag::MeetVictorComplete;
  }
}

template<>
const Anki::Victor::ExternalComms::MeetVictorComplete& MeetVictor::Get_<MeetVictor::Tag::MeetVictorComplete>() const
{
  assert(_tag == Tag::MeetVictorComplete);
  return this->_MeetVictorComplete;
}

template<>
MeetVictor MeetVictor::Create_<MeetVictor::Tag::MeetVictorComplete>(Anki::Victor::ExternalComms::MeetVictorComplete member)
{
  return CreateMeetVictorComplete(std::move(member));
}

void MeetVictor::Set_MeetVictorComplete(Anki::Victor::ExternalComms::MeetVictorComplete&& new_MeetVictorComplete)
{
  if (this->_tag == Tag::MeetVictorComplete) {
    this->_MeetVictorComplete = std::move(new_MeetVictorComplete);
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorComplete) Anki::Victor::ExternalComms::MeetVictorComplete(std::move(new_MeetVictorComplete));
    _tag = Tag::MeetVictorComplete;
  }
}

MeetVictor MeetVictor::CreateMeetVictorError(Anki::Victor::ExternalComms::MeetVictorError&& new_MeetVictorError)
{
  MeetVictor m;
  m.Set_MeetVictorError(new_MeetVictorError);
  return m;
}

MeetVictor::MeetVictor(Anki::Victor::ExternalComms::MeetVictorError&& new_MeetVictorError)
{
  new(&this->_MeetVictorError) Anki::Victor::ExternalComms::MeetVictorError(std::move(new_MeetVictorError));
  _tag = Tag::MeetVictorError;
}

const Anki::Victor::ExternalComms::MeetVictorError& MeetVictor::Get_MeetVictorError() const
{
  assert(_tag == Tag::MeetVictorError);
  return this->_MeetVictorError;
}

void MeetVictor::Set_MeetVictorError(const Anki::Victor::ExternalComms::MeetVictorError& new_MeetVictorError)
{
  if(this->_tag == Tag::MeetVictorError) {
    this->_MeetVictorError = new_MeetVictorError;
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorError) Anki::Victor::ExternalComms::MeetVictorError(new_MeetVictorError);
    _tag = Tag::MeetVictorError;
  }
}

template<>
const Anki::Victor::ExternalComms::MeetVictorError& MeetVictor::Get_<MeetVictor::Tag::MeetVictorError>() const
{
  assert(_tag == Tag::MeetVictorError);
  return this->_MeetVictorError;
}

template<>
MeetVictor MeetVictor::Create_<MeetVictor::Tag::MeetVictorError>(Anki::Victor::ExternalComms::MeetVictorError member)
{
  return CreateMeetVictorError(std::move(member));
}

void MeetVictor::Set_MeetVictorError(Anki::Victor::ExternalComms::MeetVictorError&& new_MeetVictorError)
{
  if (this->_tag == Tag::MeetVictorError) {
    this->_MeetVictorError = std::move(new_MeetVictorError);
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictorError) Anki::Victor::ExternalComms::MeetVictorError(std::move(new_MeetVictorError));
    _tag = Tag::MeetVictorError;
  }
}

size_t MeetVictor::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t MeetVictor::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  Tag newTag {Tag::INVALID};
  const Tag oldTag {GetTag()};
  buffer.Read(newTag);
  if (newTag != oldTag) {
    ClearCurrent();
  }
  switch(newTag) {
  case Tag::Error:
    if (newTag != oldTag) {
      new(&(this->_Error)) Anki::Victor::ExternalComms::Error(buffer);
    }
    else {
      this->_Error.Unpack(buffer);
    }
    break;
  case Tag::MeetVictorRequest:
    if (newTag != oldTag) {
      new(&(this->_MeetVictorRequest)) Anki::Victor::ExternalComms::MeetVictorRequest(buffer);
    }
    else {
      this->_MeetVictorRequest.Unpack(buffer);
    }
    break;
  case Tag::MeetVictorReadyResponse:
    if (newTag != oldTag) {
      new(&(this->_MeetVictorReadyResponse)) Anki::Victor::ExternalComms::MeetVictorReadyResponse(buffer);
    }
    else {
      this->_MeetVictorReadyResponse.Unpack(buffer);
    }
    break;
  case Tag::MeetVictorFaceScanStarted:
    if (newTag != oldTag) {
      new(&(this->_MeetVictorFaceScanStarted)) Anki::Victor::ExternalComms::MeetVictorFaceScanStarted(buffer);
    }
    else {
      this->_MeetVictorFaceScanStarted.Unpack(buffer);
    }
    break;
  case Tag::MeetVictorFaceScanComplete:
    if (newTag != oldTag) {
      new(&(this->_MeetVictorFaceScanComplete)) Anki::Victor::ExternalComms::MeetVictorFaceScanComplete(buffer);
    }
    else {
      this->_MeetVictorFaceScanComplete.Unpack(buffer);
    }
    break;
  case Tag::MeetVictorSetUserName:
    if (newTag != oldTag) {
      new(&(this->_MeetVictorSetUserName)) Anki::Victor::ExternalComms::MeetVictorSetUserName(buffer);
    }
    else {
      this->_MeetVictorSetUserName.Unpack(buffer);
    }
    break;
  case Tag::MeetVictorComplete:
    if (newTag != oldTag) {
      new(&(this->_MeetVictorComplete)) Anki::Victor::ExternalComms::MeetVictorComplete(buffer);
    }
    else {
      this->_MeetVictorComplete.Unpack(buffer);
    }
    break;
  case Tag::MeetVictorError:
    if (newTag != oldTag) {
      new(&(this->_MeetVictorError)) Anki::Victor::ExternalComms::MeetVictorError(buffer);
    }
    else {
      this->_MeetVictorError.Unpack(buffer);
    }
    break;
  default:
    break;
  }
  _tag = newTag;
  return buffer.GetBytesRead();
}

size_t MeetVictor::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t MeetVictor::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(_tag);
  switch(GetTag()) {
  case Tag::Error:
    this->_Error.Pack(buffer);
    break;
  case Tag::MeetVictorRequest:
    this->_MeetVictorRequest.Pack(buffer);
    break;
  case Tag::MeetVictorReadyResponse:
    this->_MeetVictorReadyResponse.Pack(buffer);
    break;
  case Tag::MeetVictorFaceScanStarted:
    this->_MeetVictorFaceScanStarted.Pack(buffer);
    break;
  case Tag::MeetVictorFaceScanComplete:
    this->_MeetVictorFaceScanComplete.Pack(buffer);
    break;
  case Tag::MeetVictorSetUserName:
    this->_MeetVictorSetUserName.Pack(buffer);
    break;
  case Tag::MeetVictorComplete:
    this->_MeetVictorComplete.Pack(buffer);
    break;
  case Tag::MeetVictorError:
    this->_MeetVictorError.Pack(buffer);
    break;
  default:
    break;
  }
  return buffer.GetBytesWritten();
}

size_t MeetVictor::Size() const
{
  size_t result {1}; // tag = uint_8
  switch(GetTag()) {
  case Tag::Error:
    result += this->_Error.Size(); // Error
    break;
  case Tag::MeetVictorRequest:
    result += this->_MeetVictorRequest.Size(); // MeetVictorRequest
    break;
  case Tag::MeetVictorReadyResponse:
    result += this->_MeetVictorReadyResponse.Size(); // MeetVictorReadyResponse
    break;
  case Tag::MeetVictorFaceScanStarted:
    result += this->_MeetVictorFaceScanStarted.Size(); // MeetVictorFaceScanStarted
    break;
  case Tag::MeetVictorFaceScanComplete:
    result += this->_MeetVictorFaceScanComplete.Size(); // MeetVictorFaceScanComplete
    break;
  case Tag::MeetVictorSetUserName:
    result += this->_MeetVictorSetUserName.Size(); // MeetVictorSetUserName
    break;
  case Tag::MeetVictorComplete:
    result += this->_MeetVictorComplete.Size(); // MeetVictorComplete
    break;
  case Tag::MeetVictorError:
    result += this->_MeetVictorError.Size(); // MeetVictorError
    break;
  default:
    break;
  }
  return result;
}

bool MeetVictor::operator==(const MeetVictor& other) const
{
  if (this->_tag != other._tag) {
    return false;
  }
  switch(GetTag()) {
  case Tag::Error:
    return this->_Error == other._Error;
  case Tag::MeetVictorRequest:
    return this->_MeetVictorRequest == other._MeetVictorRequest;
  case Tag::MeetVictorReadyResponse:
    return this->_MeetVictorReadyResponse == other._MeetVictorReadyResponse;
  case Tag::MeetVictorFaceScanStarted:
    return this->_MeetVictorFaceScanStarted == other._MeetVictorFaceScanStarted;
  case Tag::MeetVictorFaceScanComplete:
    return this->_MeetVictorFaceScanComplete == other._MeetVictorFaceScanComplete;
  case Tag::MeetVictorSetUserName:
    return this->_MeetVictorSetUserName == other._MeetVictorSetUserName;
  case Tag::MeetVictorComplete:
    return this->_MeetVictorComplete == other._MeetVictorComplete;
  case Tag::MeetVictorError:
    return this->_MeetVictorError == other._MeetVictorError;
  default:
    return true;
  }
}

bool MeetVictor::operator!=(const MeetVictor& other) const
{
  return !(operator==(other));
}

void MeetVictor::ClearCurrent()
{
  switch(GetTag()) {
  case Tag::Error:
    _Error.~Error();
    break;
  case Tag::MeetVictorRequest:
    _MeetVictorRequest.~MeetVictorRequest();
    break;
  case Tag::MeetVictorReadyResponse:
    _MeetVictorReadyResponse.~MeetVictorReadyResponse();
    break;
  case Tag::MeetVictorFaceScanStarted:
    _MeetVictorFaceScanStarted.~MeetVictorFaceScanStarted();
    break;
  case Tag::MeetVictorFaceScanComplete:
    _MeetVictorFaceScanComplete.~MeetVictorFaceScanComplete();
    break;
  case Tag::MeetVictorSetUserName:
    _MeetVictorSetUserName.~MeetVictorSetUserName();
    break;
  case Tag::MeetVictorComplete:
    _MeetVictorComplete.~MeetVictorComplete();
    break;
  case Tag::MeetVictorError:
    _MeetVictorError.~MeetVictorError();
    break;
  default:
    break;
  }
  _tag = Tag::INVALID;
}

const char* MeetVictorTagToString(const MeetVictorTag tag) {
  switch(tag) {
  case MeetVictorTag::Error:
    return "Error";
  case MeetVictorTag::MeetVictorRequest:
    return "MeetVictorRequest";
  case MeetVictorTag::MeetVictorReadyResponse:
    return "MeetVictorReadyResponse";
  case MeetVictorTag::MeetVictorFaceScanStarted:
    return "MeetVictorFaceScanStarted";
  case MeetVictorTag::MeetVictorFaceScanComplete:
    return "MeetVictorFaceScanComplete";
  case MeetVictorTag::MeetVictorSetUserName:
    return "MeetVictorSetUserName";
  case MeetVictorTag::MeetVictorComplete:
    return "MeetVictorComplete";
  case MeetVictorTag::MeetVictorError:
    return "MeetVictorError";
  default:
    return "INVALID";
  }
}

const char* MeetVictorVersionHashStr = "74547ddf819771da36cfce92bf117b2f";

const uint8_t MeetVictorVersionHash[16] = { 
    0x74, 0x54, 0x7d, 0xdf, 0x81, 0x97, 0x71, 0xda, 0x36, 0xcf, 0xce, 0x92, 0xbf, 0x11, 0x7b, 0x2f 
};

// UNION ExternalComms

ExternalComms::ExternalComms(const CLAD::SafeMessageBuffer& buff)
: _tag(Tag::INVALID)
{
  Unpack(buff);
}

ExternalComms::ExternalComms(const uint8_t* buffer, size_t length)
: _tag(Tag::INVALID)
{
  CLAD::SafeMessageBuffer buff(const_cast<uint8_t*>(buffer), length);
  Unpack(buff);
}

ExternalComms::ExternalComms(const ExternalComms& other)
: _tag(other._tag)
{
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(other._Error);
    break;
  case Tag::RtsConnection:
    new(&(this->_RtsConnection)) Anki::Victor::ExternalComms::RtsConnection(other._RtsConnection);
    break;
  case Tag::AppGeneral:
    new(&(this->_AppGeneral)) Anki::Victor::ExternalComms::AppGeneral(other._AppGeneral);
    break;
  case Tag::MeetVictor:
    new(&(this->_MeetVictor)) Anki::Victor::ExternalComms::MeetVictor(other._MeetVictor);
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
}

ExternalComms::ExternalComms(ExternalComms&& other) noexcept
: _tag(other._tag)
{
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(std::move(other._Error));
    break;
  case Tag::RtsConnection:
    new(&(this->_RtsConnection)) Anki::Victor::ExternalComms::RtsConnection(std::move(other._RtsConnection));
    break;
  case Tag::AppGeneral:
    new(&(this->_AppGeneral)) Anki::Victor::ExternalComms::AppGeneral(std::move(other._AppGeneral));
    break;
  case Tag::MeetVictor:
    new(&(this->_MeetVictor)) Anki::Victor::ExternalComms::MeetVictor(std::move(other._MeetVictor));
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  other.ClearCurrent();
}

ExternalComms& ExternalComms::operator=(const ExternalComms& other)
{
  if(this == &other) { return *this; }
  ClearCurrent();
  _tag = other._tag;
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(other._Error);
    break;
  case Tag::RtsConnection:
    new(&(this->_RtsConnection)) Anki::Victor::ExternalComms::RtsConnection(other._RtsConnection);
    break;
  case Tag::AppGeneral:
    new(&(this->_AppGeneral)) Anki::Victor::ExternalComms::AppGeneral(other._AppGeneral);
    break;
  case Tag::MeetVictor:
    new(&(this->_MeetVictor)) Anki::Victor::ExternalComms::MeetVictor(other._MeetVictor);
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  return *this;
}

ExternalComms& ExternalComms::operator=(ExternalComms&& other) noexcept
{
  if(this == &other) { return *this; }
  ClearCurrent();
  _tag = other._tag;
  switch(GetTag()) {
  case Tag::Error:
    new(&(this->_Error)) Anki::Victor::ExternalComms::Error(std::move(other._Error));
    break;
  case Tag::RtsConnection:
    new(&(this->_RtsConnection)) Anki::Victor::ExternalComms::RtsConnection(std::move(other._RtsConnection));
    break;
  case Tag::AppGeneral:
    new(&(this->_AppGeneral)) Anki::Victor::ExternalComms::AppGeneral(std::move(other._AppGeneral));
    break;
  case Tag::MeetVictor:
    new(&(this->_MeetVictor)) Anki::Victor::ExternalComms::MeetVictor(std::move(other._MeetVictor));
    break;
  default:
    _tag = Tag::INVALID;
    break;
  }
  other.ClearCurrent();
  return *this;
}

ExternalComms ExternalComms::CreateError(Anki::Victor::ExternalComms::Error&& new_Error)
{
  ExternalComms m;
  m.Set_Error(new_Error);
  return m;
}

ExternalComms::ExternalComms(Anki::Victor::ExternalComms::Error&& new_Error)
{
  new(&this->_Error) Anki::Victor::ExternalComms::Error(std::move(new_Error));
  _tag = Tag::Error;
}

const Anki::Victor::ExternalComms::Error& ExternalComms::Get_Error() const
{
  assert(_tag == Tag::Error);
  return this->_Error;
}

void ExternalComms::Set_Error(const Anki::Victor::ExternalComms::Error& new_Error)
{
  if(this->_tag == Tag::Error) {
    this->_Error = new_Error;
  }
  else {
    ClearCurrent();
    new(&this->_Error) Anki::Victor::ExternalComms::Error(new_Error);
    _tag = Tag::Error;
  }
}

template<>
const Anki::Victor::ExternalComms::Error& ExternalComms::Get_<ExternalComms::Tag::Error>() const
{
  assert(_tag == Tag::Error);
  return this->_Error;
}

template<>
ExternalComms ExternalComms::Create_<ExternalComms::Tag::Error>(Anki::Victor::ExternalComms::Error member)
{
  return CreateError(std::move(member));
}

void ExternalComms::Set_Error(Anki::Victor::ExternalComms::Error&& new_Error)
{
  if (this->_tag == Tag::Error) {
    this->_Error = std::move(new_Error);
  }
  else {
    ClearCurrent();
    new(&this->_Error) Anki::Victor::ExternalComms::Error(std::move(new_Error));
    _tag = Tag::Error;
  }
}

ExternalComms ExternalComms::CreateRtsConnection(Anki::Victor::ExternalComms::RtsConnection&& new_RtsConnection)
{
  ExternalComms m;
  m.Set_RtsConnection(new_RtsConnection);
  return m;
}

ExternalComms::ExternalComms(Anki::Victor::ExternalComms::RtsConnection&& new_RtsConnection)
{
  new(&this->_RtsConnection) Anki::Victor::ExternalComms::RtsConnection(std::move(new_RtsConnection));
  _tag = Tag::RtsConnection;
}

const Anki::Victor::ExternalComms::RtsConnection& ExternalComms::Get_RtsConnection() const
{
  assert(_tag == Tag::RtsConnection);
  return this->_RtsConnection;
}

void ExternalComms::Set_RtsConnection(const Anki::Victor::ExternalComms::RtsConnection& new_RtsConnection)
{
  if(this->_tag == Tag::RtsConnection) {
    this->_RtsConnection = new_RtsConnection;
  }
  else {
    ClearCurrent();
    new(&this->_RtsConnection) Anki::Victor::ExternalComms::RtsConnection(new_RtsConnection);
    _tag = Tag::RtsConnection;
  }
}

template<>
const Anki::Victor::ExternalComms::RtsConnection& ExternalComms::Get_<ExternalComms::Tag::RtsConnection>() const
{
  assert(_tag == Tag::RtsConnection);
  return this->_RtsConnection;
}

template<>
ExternalComms ExternalComms::Create_<ExternalComms::Tag::RtsConnection>(Anki::Victor::ExternalComms::RtsConnection member)
{
  return CreateRtsConnection(std::move(member));
}

void ExternalComms::Set_RtsConnection(Anki::Victor::ExternalComms::RtsConnection&& new_RtsConnection)
{
  if (this->_tag == Tag::RtsConnection) {
    this->_RtsConnection = std::move(new_RtsConnection);
  }
  else {
    ClearCurrent();
    new(&this->_RtsConnection) Anki::Victor::ExternalComms::RtsConnection(std::move(new_RtsConnection));
    _tag = Tag::RtsConnection;
  }
}

ExternalComms ExternalComms::CreateAppGeneral(Anki::Victor::ExternalComms::AppGeneral&& new_AppGeneral)
{
  ExternalComms m;
  m.Set_AppGeneral(new_AppGeneral);
  return m;
}

ExternalComms::ExternalComms(Anki::Victor::ExternalComms::AppGeneral&& new_AppGeneral)
{
  new(&this->_AppGeneral) Anki::Victor::ExternalComms::AppGeneral(std::move(new_AppGeneral));
  _tag = Tag::AppGeneral;
}

const Anki::Victor::ExternalComms::AppGeneral& ExternalComms::Get_AppGeneral() const
{
  assert(_tag == Tag::AppGeneral);
  return this->_AppGeneral;
}

void ExternalComms::Set_AppGeneral(const Anki::Victor::ExternalComms::AppGeneral& new_AppGeneral)
{
  if(this->_tag == Tag::AppGeneral) {
    this->_AppGeneral = new_AppGeneral;
  }
  else {
    ClearCurrent();
    new(&this->_AppGeneral) Anki::Victor::ExternalComms::AppGeneral(new_AppGeneral);
    _tag = Tag::AppGeneral;
  }
}

template<>
const Anki::Victor::ExternalComms::AppGeneral& ExternalComms::Get_<ExternalComms::Tag::AppGeneral>() const
{
  assert(_tag == Tag::AppGeneral);
  return this->_AppGeneral;
}

template<>
ExternalComms ExternalComms::Create_<ExternalComms::Tag::AppGeneral>(Anki::Victor::ExternalComms::AppGeneral member)
{
  return CreateAppGeneral(std::move(member));
}

void ExternalComms::Set_AppGeneral(Anki::Victor::ExternalComms::AppGeneral&& new_AppGeneral)
{
  if (this->_tag == Tag::AppGeneral) {
    this->_AppGeneral = std::move(new_AppGeneral);
  }
  else {
    ClearCurrent();
    new(&this->_AppGeneral) Anki::Victor::ExternalComms::AppGeneral(std::move(new_AppGeneral));
    _tag = Tag::AppGeneral;
  }
}

ExternalComms ExternalComms::CreateMeetVictor(Anki::Victor::ExternalComms::MeetVictor&& new_MeetVictor)
{
  ExternalComms m;
  m.Set_MeetVictor(new_MeetVictor);
  return m;
}

ExternalComms::ExternalComms(Anki::Victor::ExternalComms::MeetVictor&& new_MeetVictor)
{
  new(&this->_MeetVictor) Anki::Victor::ExternalComms::MeetVictor(std::move(new_MeetVictor));
  _tag = Tag::MeetVictor;
}

const Anki::Victor::ExternalComms::MeetVictor& ExternalComms::Get_MeetVictor() const
{
  assert(_tag == Tag::MeetVictor);
  return this->_MeetVictor;
}

void ExternalComms::Set_MeetVictor(const Anki::Victor::ExternalComms::MeetVictor& new_MeetVictor)
{
  if(this->_tag == Tag::MeetVictor) {
    this->_MeetVictor = new_MeetVictor;
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictor) Anki::Victor::ExternalComms::MeetVictor(new_MeetVictor);
    _tag = Tag::MeetVictor;
  }
}

template<>
const Anki::Victor::ExternalComms::MeetVictor& ExternalComms::Get_<ExternalComms::Tag::MeetVictor>() const
{
  assert(_tag == Tag::MeetVictor);
  return this->_MeetVictor;
}

template<>
ExternalComms ExternalComms::Create_<ExternalComms::Tag::MeetVictor>(Anki::Victor::ExternalComms::MeetVictor member)
{
  return CreateMeetVictor(std::move(member));
}

void ExternalComms::Set_MeetVictor(Anki::Victor::ExternalComms::MeetVictor&& new_MeetVictor)
{
  if (this->_tag == Tag::MeetVictor) {
    this->_MeetVictor = std::move(new_MeetVictor);
  }
  else {
    ClearCurrent();
    new(&this->_MeetVictor) Anki::Victor::ExternalComms::MeetVictor(std::move(new_MeetVictor));
    _tag = Tag::MeetVictor;
  }
}

size_t ExternalComms::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t ExternalComms::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  Tag newTag {Tag::INVALID};
  const Tag oldTag {GetTag()};
  buffer.Read(newTag);
  if (newTag != oldTag) {
    ClearCurrent();
  }
  switch(newTag) {
  case Tag::Error:
    if (newTag != oldTag) {
      new(&(this->_Error)) Anki::Victor::ExternalComms::Error(buffer);
    }
    else {
      this->_Error.Unpack(buffer);
    }
    break;
  case Tag::RtsConnection:
    if (newTag != oldTag) {
      new(&(this->_RtsConnection)) Anki::Victor::ExternalComms::RtsConnection(buffer);
    }
    else {
      this->_RtsConnection.Unpack(buffer);
    }
    break;
  case Tag::AppGeneral:
    if (newTag != oldTag) {
      new(&(this->_AppGeneral)) Anki::Victor::ExternalComms::AppGeneral(buffer);
    }
    else {
      this->_AppGeneral.Unpack(buffer);
    }
    break;
  case Tag::MeetVictor:
    if (newTag != oldTag) {
      new(&(this->_MeetVictor)) Anki::Victor::ExternalComms::MeetVictor(buffer);
    }
    else {
      this->_MeetVictor.Unpack(buffer);
    }
    break;
  default:
    break;
  }
  _tag = newTag;
  return buffer.GetBytesRead();
}

size_t ExternalComms::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t ExternalComms::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(_tag);
  switch(GetTag()) {
  case Tag::Error:
    this->_Error.Pack(buffer);
    break;
  case Tag::RtsConnection:
    this->_RtsConnection.Pack(buffer);
    break;
  case Tag::AppGeneral:
    this->_AppGeneral.Pack(buffer);
    break;
  case Tag::MeetVictor:
    this->_MeetVictor.Pack(buffer);
    break;
  default:
    break;
  }
  return buffer.GetBytesWritten();
}

size_t ExternalComms::Size() const
{
  size_t result {1}; // tag = uint_8
  switch(GetTag()) {
  case Tag::Error:
    result += this->_Error.Size(); // Error
    break;
  case Tag::RtsConnection:
    result += this->_RtsConnection.Size(); // RtsConnection
    break;
  case Tag::AppGeneral:
    result += this->_AppGeneral.Size(); // AppGeneral
    break;
  case Tag::MeetVictor:
    result += this->_MeetVictor.Size(); // MeetVictor
    break;
  default:
    break;
  }
  return result;
}

bool ExternalComms::operator==(const ExternalComms& other) const
{
  if (this->_tag != other._tag) {
    return false;
  }
  switch(GetTag()) {
  case Tag::Error:
    return this->_Error == other._Error;
  case Tag::RtsConnection:
    return this->_RtsConnection == other._RtsConnection;
  case Tag::AppGeneral:
    return this->_AppGeneral == other._AppGeneral;
  case Tag::MeetVictor:
    return this->_MeetVictor == other._MeetVictor;
  default:
    return true;
  }
}

bool ExternalComms::operator!=(const ExternalComms& other) const
{
  return !(operator==(other));
}

void ExternalComms::ClearCurrent()
{
  switch(GetTag()) {
  case Tag::Error:
    _Error.~Error();
    break;
  case Tag::RtsConnection:
    _RtsConnection.~RtsConnection();
    break;
  case Tag::AppGeneral:
    _AppGeneral.~AppGeneral();
    break;
  case Tag::MeetVictor:
    _MeetVictor.~MeetVictor();
    break;
  default:
    break;
  }
  _tag = Tag::INVALID;
}

const char* ExternalCommsTagToString(const ExternalCommsTag tag) {
  switch(tag) {
  case ExternalCommsTag::Error:
    return "Error";
  case ExternalCommsTag::RtsConnection:
    return "RtsConnection";
  case ExternalCommsTag::AppGeneral:
    return "AppGeneral";
  case ExternalCommsTag::MeetVictor:
    return "MeetVictor";
  default:
    return "INVALID";
  }
}

const char* ExternalCommsVersionHashStr = "ba501d08e5daa0d229ebbfde10af495f";

const uint8_t ExternalCommsVersionHash[16] = { 
    0xba, 0x50, 0x1d, 0x8, 0xe5, 0xda, 0xa0, 0xd2, 0x29, 0xeb, 0xbf, 0xde, 0x10, 0xaf, 0x49, 0x5f 
};

} // namespace ExternalComms

} // namespace Victor

} // namespace Anki

