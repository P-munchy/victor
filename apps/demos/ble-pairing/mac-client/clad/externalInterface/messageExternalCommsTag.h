// Autogenerated C++ message buffer code.
// Source: clad/externalInterface/messageExternalComms.clad
// Full command line: victor-sdk-clad/tools/message-buffers/emitters/CPP_emitter.py --output-union-helper-constructors -C sdk -I victor-sdk-clad/clad/sdk -o generated/clad clad/externalInterface/messageExternalComms.clad

#ifndef __CLAD_EXTERNAL_INTERFACE_MESSAGE_EXTERNAL_COMMS_TAG_H__
#define __CLAD_EXTERNAL_INTERFACE_MESSAGE_EXTERNAL_COMMS_TAG_H__

#include <functional>

namespace Anki {

namespace Victor {

namespace ExternalComms {

enum class RtsConnectionTag : uint8_t {
  Error                      = 0x0,  // 0
  RtsConnRequest             = 0x1,  // 1
  RtsConnResponse            = 0x2,  // 2
  RtsNonceMessage            = 0x3,  // 3
  RtsChallengeMessage        = 0x4,  // 4
  RtsChallengeSuccessMessage = 0x5,  // 5
  RtsWifiConnectRequest      = 0x6,  // 6
  RtsWifiConnectResponse     = 0x7,  // 7
  RtsWifiIpRequest           = 0x8,  // 8
  RtsWifiIpResponse          = 0x9,  // 9
  RtsStatusRequest           = 0xa,  // 10
  RtsStatusResponse          = 0xb,  // 11
  RtsWifiScanRequest         = 0xc,  // 12
  RtsWifiScanResponse        = 0xd,  // 13
  RtsOtaUpdateRequest        = 0xe,  // 14
  RtsOtaUpdateResponse       = 0xf,  // 15
  RtsCancelPairing           = 0x10, // 16
  RtsForceDisconnect         = 0x11, // 17
  RtsAck                     = 0x12, // 18
  RtsWifiAccessPointRequest  = 0x13, // 19
  RtsWifiAccessPointResponse = 0x14, // 20
  INVALID                    = 255
};

const char* RtsConnectionTagToString(const RtsConnectionTag tag);

enum class AppGeneralTag : uint8_t {
  Error               = 0x0, // 0
  RobotStatusRequest  = 0x1, // 1
  RobotStatusResponse = 0x2, // 2
  INVALID             = 255
};

const char* AppGeneralTagToString(const AppGeneralTag tag);

enum class MeetVictorTag : uint8_t {
  Error                      = 0x0, // 0
  MeetVictorRequest          = 0x1, // 1
  MeetVictorReadyResponse    = 0x2, // 2
  MeetVictorFaceScanStarted  = 0x3, // 3
  MeetVictorFaceScanComplete = 0x4, // 4
  MeetVictorSetUserName      = 0x5, // 5
  MeetVictorComplete         = 0x6, // 6
  MeetVictorError            = 0x7, // 7
  INVALID                    = 255
};

const char* MeetVictorTagToString(const MeetVictorTag tag);

enum class ExternalCommsTag : uint8_t {
  Error         = 0x0, // 0
  RtsConnection = 0x1, // 1
  AppGeneral    = 0x2, // 2
  MeetVictor    = 0x3, // 3
  INVALID       = 255
};

const char* ExternalCommsTagToString(const ExternalCommsTag tag);

} // namespace ExternalComms

} // namespace Victor

} // namespace Anki

template<>
struct std::hash<Anki::Victor::ExternalComms::RtsConnectionTag>
{
  size_t operator()(Anki::Victor::ExternalComms::RtsConnectionTag t) const
  {
    return static_cast<std::underlying_type<Anki::Victor::ExternalComms::RtsConnectionTag>::type>(t);
  }
};

template<>
struct std::hash<Anki::Victor::ExternalComms::AppGeneralTag>
{
  size_t operator()(Anki::Victor::ExternalComms::AppGeneralTag t) const
  {
    return static_cast<std::underlying_type<Anki::Victor::ExternalComms::AppGeneralTag>::type>(t);
  }
};

template<>
struct std::hash<Anki::Victor::ExternalComms::MeetVictorTag>
{
  size_t operator()(Anki::Victor::ExternalComms::MeetVictorTag t) const
  {
    return static_cast<std::underlying_type<Anki::Victor::ExternalComms::MeetVictorTag>::type>(t);
  }
};

template<>
struct std::hash<Anki::Victor::ExternalComms::ExternalCommsTag>
{
  size_t operator()(Anki::Victor::ExternalComms::ExternalCommsTag t) const
  {
    return static_cast<std::underlying_type<Anki::Victor::ExternalComms::ExternalCommsTag>::type>(t);
  }
};

#endif // __CLAD_EXTERNAL_INTERFACE_MESSAGE_EXTERNAL_COMMS_TAG_H__
