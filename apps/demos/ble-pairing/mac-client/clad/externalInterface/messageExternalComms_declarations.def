// Autogenerated C++ message buffer code.
// Source: clad/externalInterface/messageExternalComms.clad
// Full command line: victor-clad/victorEmitters/cozmo_CPP_declarations_emitter.py -C sdk -I victor-clad/clad/sdk -o generated/clad clad/externalInterface/messageExternalComms.clad

void Process_Error(const Anki::Victor::ExternalComms::Error& msg);
void Process_RtsConnRequest(const Anki::Victor::ExternalComms::RtsConnRequest& msg);
void Process_RtsConnResponse(const Anki::Victor::ExternalComms::RtsConnResponse& msg);
void Process_RtsNonceMessage(const Anki::Victor::ExternalComms::RtsNonceMessage& msg);
void Process_RtsChallengeMessage(const Anki::Victor::ExternalComms::RtsChallengeMessage& msg);
void Process_RtsChallengeSuccessMessage(const Anki::Victor::ExternalComms::RtsChallengeSuccessMessage& msg);
void Process_RtsWifiConnectRequest(const Anki::Victor::ExternalComms::RtsWifiConnectRequest& msg);
void Process_RtsWifiConnectResponse(const Anki::Victor::ExternalComms::RtsWifiConnectResponse& msg);
void Process_RtsWifiIpRequest(const Anki::Victor::ExternalComms::RtsWifiIpRequest& msg);
void Process_RtsWifiIpResponse(const Anki::Victor::ExternalComms::RtsWifiIpResponse& msg);
void Process_RtsStatusRequest(const Anki::Victor::ExternalComms::RtsStatusRequest& msg);
void Process_RtsStatusResponse_2(const Anki::Victor::ExternalComms::RtsStatusResponse_2& msg);
void Process_RtsWifiScanRequest(const Anki::Victor::ExternalComms::RtsWifiScanRequest& msg);
void Process_RtsWifiScanResponse(const Anki::Victor::ExternalComms::RtsWifiScanResponse& msg);
void Process_RtsOtaUpdateRequest(const Anki::Victor::ExternalComms::RtsOtaUpdateRequest& msg);
void Process_RtsOtaUpdateResponse(const Anki::Victor::ExternalComms::RtsOtaUpdateResponse& msg);
void Process_RtsCancelPairing(const Anki::Victor::ExternalComms::RtsCancelPairing& msg);
void Process_RtsForceDisconnect(const Anki::Victor::ExternalComms::RtsForceDisconnect& msg);
void Process_RtsAck(const Anki::Victor::ExternalComms::RtsAck& msg);
void Process_RtsWifiAccessPointRequest(const Anki::Victor::ExternalComms::RtsWifiAccessPointRequest& msg);
void Process_RtsWifiAccessPointResponse(const Anki::Victor::ExternalComms::RtsWifiAccessPointResponse& msg);
void Process_RtsSshRequest(const Anki::Victor::ExternalComms::RtsSshRequest& msg);
void Process_RtsSshResponse(const Anki::Victor::ExternalComms::RtsSshResponse& msg);
void Process_RtsOtaCancelRequest(const Anki::Victor::ExternalComms::RtsOtaCancelRequest& msg);
void Process_Error(const Anki::Victor::ExternalComms::Error& msg);
void Process_RtsConnection_2(const Anki::Victor::ExternalComms::RtsConnection_2& msg);
void Process_Error(const Anki::Victor::ExternalComms::Error& msg);
void Process_RtsConnRequest(const Anki::Victor::ExternalComms::RtsConnRequest& msg);
void Process_RtsConnResponse(const Anki::Victor::ExternalComms::RtsConnResponse& msg);
void Process_RtsNonceMessage(const Anki::Victor::ExternalComms::RtsNonceMessage& msg);
void Process_RtsChallengeMessage(const Anki::Victor::ExternalComms::RtsChallengeMessage& msg);
void Process_RtsChallengeSuccessMessage(const Anki::Victor::ExternalComms::RtsChallengeSuccessMessage& msg);
void Process_RtsWifiConnectRequest(const Anki::Victor::ExternalComms::RtsWifiConnectRequest& msg);
void Process_RtsWifiConnectResponse(const Anki::Victor::ExternalComms::RtsWifiConnectResponse& msg);
void Process_RtsWifiIpRequest(const Anki::Victor::ExternalComms::RtsWifiIpRequest& msg);
void Process_RtsWifiIpResponse(const Anki::Victor::ExternalComms::RtsWifiIpResponse& msg);
void Process_RtsStatusRequest(const Anki::Victor::ExternalComms::RtsStatusRequest& msg);
void Process_RtsStatusResponse(const Anki::Victor::ExternalComms::RtsStatusResponse& msg);
void Process_RtsWifiScanRequest(const Anki::Victor::ExternalComms::RtsWifiScanRequest& msg);
void Process_RtsWifiScanResponse(const Anki::Victor::ExternalComms::RtsWifiScanResponse& msg);
void Process_RtsOtaUpdateRequest(const Anki::Victor::ExternalComms::RtsOtaUpdateRequest& msg);
void Process_RtsOtaUpdateResponse(const Anki::Victor::ExternalComms::RtsOtaUpdateResponse& msg);
void Process_RtsCancelPairing(const Anki::Victor::ExternalComms::RtsCancelPairing& msg);
void Process_RtsForceDisconnect(const Anki::Victor::ExternalComms::RtsForceDisconnect& msg);
void Process_RtsAck(const Anki::Victor::ExternalComms::RtsAck& msg);
void Process_RtsWifiAccessPointRequest(const Anki::Victor::ExternalComms::RtsWifiAccessPointRequest& msg);
void Process_RtsWifiAccessPointResponse(const Anki::Victor::ExternalComms::RtsWifiAccessPointResponse& msg);
void Process_RtsSshRequest(const Anki::Victor::ExternalComms::RtsSshRequest& msg);
void Process_RtsSshResponse(const Anki::Victor::ExternalComms::RtsSshResponse& msg);
void Process_Error(const Anki::Victor::ExternalComms::Error& msg);
void Process_RobotStatusRequest(const Anki::Victor::ExternalComms::RobotStatusRequest& msg);
void Process_RobotStatusResponse(const Anki::Victor::ExternalComms::RobotStatusResponse& msg);
void Process_Error(const Anki::Victor::ExternalComms::Error& msg);
void Process_MeetVictorRequest(const Anki::Victor::ExternalComms::MeetVictorRequest& msg);
void Process_MeetVictorReadyResponse(const Anki::Victor::ExternalComms::MeetVictorReadyResponse& msg);
void Process_MeetVictorFaceScanStarted(const Anki::Victor::ExternalComms::MeetVictorFaceScanStarted& msg);
void Process_MeetVictorFaceScanComplete(const Anki::Victor::ExternalComms::MeetVictorFaceScanComplete& msg);
void Process_MeetVictorSetUserName(const Anki::Victor::ExternalComms::MeetVictorSetUserName& msg);
void Process_MeetVictorComplete(const Anki::Victor::ExternalComms::MeetVictorComplete& msg);
void Process_MeetVictorError(const Anki::Victor::ExternalComms::MeetVictorError& msg);
void Process_Error(const Anki::Victor::ExternalComms::Error& msg);
void Process_RtsConnection_1(const Anki::Victor::ExternalComms::RtsConnection_1& msg);
void Process_RtsConnection(const Anki::Victor::ExternalComms::RtsConnection& msg);
void Process_AppGeneral(const Anki::Victor::ExternalComms::AppGeneral& msg);
void Process_MeetVictor(const Anki::Victor::ExternalComms::MeetVictor& msg);
