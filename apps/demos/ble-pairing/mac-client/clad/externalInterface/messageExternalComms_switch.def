// Autogenerated C++ message buffer code.
// Source: clad/externalInterface/messageExternalComms.clad
// Full command line: victor-clad/victorEmitters/cozmo_CPP_switch_emitter.py -C sdk -I victor-clad/clad/sdk -o generated/clad clad/externalInterface/messageExternalComms.clad

switch(msg.GetTag()) {
default:
  ProcessBadTag_RtsConnection(msg.GetTag());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::Error:
  Process_Error(msg.Get_Error());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsConnRequest:
  Process_RtsConnRequest(msg.Get_RtsConnRequest());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsConnResponse:
  Process_RtsConnResponse(msg.Get_RtsConnResponse());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsNonceMessage:
  Process_RtsNonceMessage(msg.Get_RtsNonceMessage());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsChallengeMessage:
  Process_RtsChallengeMessage(msg.Get_RtsChallengeMessage());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsChallengeSuccessMessage:
  Process_RtsChallengeSuccessMessage(msg.Get_RtsChallengeSuccessMessage());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsWifiConnectRequest:
  Process_RtsWifiConnectRequest(msg.Get_RtsWifiConnectRequest());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsWifiConnectResponse:
  Process_RtsWifiConnectResponse(msg.Get_RtsWifiConnectResponse());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsWifiIpRequest:
  Process_RtsWifiIpRequest(msg.Get_RtsWifiIpRequest());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsWifiIpResponse:
  Process_RtsWifiIpResponse(msg.Get_RtsWifiIpResponse());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsStatusRequest:
  Process_RtsStatusRequest(msg.Get_RtsStatusRequest());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsStatusResponse:
  Process_RtsStatusResponse(msg.Get_RtsStatusResponse());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsWifiScanRequest:
  Process_RtsWifiScanRequest(msg.Get_RtsWifiScanRequest());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsWifiScanResponse:
  Process_RtsWifiScanResponse(msg.Get_RtsWifiScanResponse());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsOtaUpdateRequest:
  Process_RtsOtaUpdateRequest(msg.Get_RtsOtaUpdateRequest());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsOtaUpdateResponse:
  Process_RtsOtaUpdateResponse(msg.Get_RtsOtaUpdateResponse());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsCancelPairing:
  Process_RtsCancelPairing(msg.Get_RtsCancelPairing());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsForceDisconnect:
  Process_RtsForceDisconnect(msg.Get_RtsForceDisconnect());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsAck:
  Process_RtsAck(msg.Get_RtsAck());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsWifiAccessPointRequest:
  Process_RtsWifiAccessPointRequest(msg.Get_RtsWifiAccessPointRequest());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsWifiAccessPointResponse:
  Process_RtsWifiAccessPointResponse(msg.Get_RtsWifiAccessPointResponse());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsSshRequest:
  Process_RtsSshRequest(msg.Get_RtsSshRequest());
  break;
case Anki::Victor::ExternalComms::RtsConnection::Tag::RtsSshResponse:
  Process_RtsSshResponse(msg.Get_RtsSshResponse());
  break;
}
switch(msg.GetTag()) {
default:
  ProcessBadTag_AppGeneral(msg.GetTag());
  break;
case Anki::Victor::ExternalComms::AppGeneral::Tag::Error:
  Process_Error(msg.Get_Error());
  break;
case Anki::Victor::ExternalComms::AppGeneral::Tag::RobotStatusRequest:
  Process_RobotStatusRequest(msg.Get_RobotStatusRequest());
  break;
case Anki::Victor::ExternalComms::AppGeneral::Tag::RobotStatusResponse:
  Process_RobotStatusResponse(msg.Get_RobotStatusResponse());
  break;
}
switch(msg.GetTag()) {
default:
  ProcessBadTag_MeetVictor(msg.GetTag());
  break;
case Anki::Victor::ExternalComms::MeetVictor::Tag::Error:
  Process_Error(msg.Get_Error());
  break;
case Anki::Victor::ExternalComms::MeetVictor::Tag::MeetVictorRequest:
  Process_MeetVictorRequest(msg.Get_MeetVictorRequest());
  break;
case Anki::Victor::ExternalComms::MeetVictor::Tag::MeetVictorReadyResponse:
  Process_MeetVictorReadyResponse(msg.Get_MeetVictorReadyResponse());
  break;
case Anki::Victor::ExternalComms::MeetVictor::Tag::MeetVictorFaceScanStarted:
  Process_MeetVictorFaceScanStarted(msg.Get_MeetVictorFaceScanStarted());
  break;
case Anki::Victor::ExternalComms::MeetVictor::Tag::MeetVictorFaceScanComplete:
  Process_MeetVictorFaceScanComplete(msg.Get_MeetVictorFaceScanComplete());
  break;
case Anki::Victor::ExternalComms::MeetVictor::Tag::MeetVictorSetUserName:
  Process_MeetVictorSetUserName(msg.Get_MeetVictorSetUserName());
  break;
case Anki::Victor::ExternalComms::MeetVictor::Tag::MeetVictorComplete:
  Process_MeetVictorComplete(msg.Get_MeetVictorComplete());
  break;
case Anki::Victor::ExternalComms::MeetVictor::Tag::MeetVictorError:
  Process_MeetVictorError(msg.Get_MeetVictorError());
  break;
}
switch(msg.GetTag()) {
default:
  ProcessBadTag_ExternalComms(msg.GetTag());
  break;
case Anki::Victor::ExternalComms::ExternalComms::Tag::Error:
  Process_Error(msg.Get_Error());
  break;
case Anki::Victor::ExternalComms::ExternalComms::Tag::RtsConnection:
  Process_RtsConnection(msg.Get_RtsConnection());
  break;
case Anki::Victor::ExternalComms::ExternalComms::Tag::AppGeneral:
  Process_AppGeneral(msg.Get_AppGeneral());
  break;
case Anki::Victor::ExternalComms::ExternalComms::Tag::MeetVictor:
  Process_MeetVictor(msg.Get_MeetVictor());
  break;
}
