// Autogenerated JS message buffer code.
// Source: /Users/paul/dev/victor/victor-clad/clad/sdk/clad/externalInterface/messageExternalComms.clad
// Full command line: ./victor-clad/tools/message-buffers/emitters/JS_emitter.py -o . messageExternalComms.clad

const { Clad, CladBuffer } = require('./cladConfig.js');

if(Anki === undefined) {
  var Anki = {};
}
if(Anki.Vector === undefined) {
  Anki.Vector = {};
}
if(Anki.Vector.ExternalComms === undefined) {
  Anki.Vector.ExternalComms = {};
}
// ENUM RtsMode
Anki.Vector.ExternalComms.RtsMode = Object.freeze({
  RAW:0x0,          
  CLAD:0x1,         
  CLAD_ENCRYPTED:0x2
});

// ENUM RtsConnType
Anki.Vector.ExternalComms.RtsConnType = Object.freeze({
  FirstTimePair:0x0,
  Reconnection:0x1  
});

// ENUM RtsResponseCode
Anki.Vector.ExternalComms.RtsResponseCode = Object.freeze({
  NotCloudAuthorized:0x0
});

// ENUM RtsCloudStatus
Anki.Vector.ExternalComms.RtsCloudStatus = Object.freeze({
  UnknownError:0x0,         
  ConnectionError:0x1,      
  WrongAccount:0x2,         
  InvalidSessionToken:0x3,  
  AuthorizedAsPrimary:0x4,  
  AuthorizedAsSecondary:0x5,
  Reauthorized:0x6          
});

// MESSAGE RtsWifiScanResult
Anki.Vector.ExternalComms.RtsWifiScanResult = class extends Clad {
  constructor(authType, signalStrength, wifiSsidHex) {
    super();
    this.authType = authType;
    this.signalStrength = signalStrength;
    this.wifiSsidHex = wifiSsidHex;
  }
  
  type() {
    return "RtsWifiScanResult";
  }
  
  get size() {
    let result = 0;
    result += 1; // authType uint_8
    result += 1; // signalStrength uint_8
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.authType = cladBuffer.readUint8();
    this.signalStrength = cladBuffer.readUint8();
    this.wifiSsidHex = cladBuffer.readString(1);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.authType);
      cladBuffer.writeUint8(this.signalStrength);
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiScanResult_2
Anki.Vector.ExternalComms.RtsWifiScanResult_2 = class extends Clad {
  constructor(authType, signalStrength, wifiSsidHex, hidden) {
    super();
    this.authType = authType;
    this.signalStrength = signalStrength;
    this.wifiSsidHex = wifiSsidHex;
    this.hidden = hidden;
  }
  
  type() {
    return "RtsWifiScanResult_2";
  }
  
  get size() {
    let result = 0;
    result += 1; // authType uint_8
    result += 1; // signalStrength uint_8
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // hidden bool
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.authType = cladBuffer.readUint8();
    this.signalStrength = cladBuffer.readUint8();
    this.wifiSsidHex = cladBuffer.readString(1);
    this.hidden = cladBuffer.readBool();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.authType);
      cladBuffer.writeUint8(this.signalStrength);
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      cladBuffer.writeBool(this.hidden);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiScanResult_3
Anki.Vector.ExternalComms.RtsWifiScanResult_3 = class extends Clad {
  constructor(authType, signalStrength, wifiSsidHex, hidden, provisioned) {
    super();
    this.authType = authType;
    this.signalStrength = signalStrength;
    this.wifiSsidHex = wifiSsidHex;
    this.hidden = hidden;
    this.provisioned = provisioned;
  }
  
  type() {
    return "RtsWifiScanResult_3";
  }
  
  get size() {
    let result = 0;
    result += 1; // authType uint_8
    result += 1; // signalStrength uint_8
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // hidden bool
    result += 1; // provisioned bool
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.authType = cladBuffer.readUint8();
    this.signalStrength = cladBuffer.readUint8();
    this.wifiSsidHex = cladBuffer.readString(1);
    this.hidden = cladBuffer.readBool();
    this.provisioned = cladBuffer.readBool();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.authType);
      cladBuffer.writeUint8(this.signalStrength);
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      cladBuffer.writeBool(this.hidden);
      cladBuffer.writeBool(this.provisioned);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsConnRequest
Anki.Vector.ExternalComms.RtsConnRequest = class extends Clad {
  constructor(publicKey) {
    super();
    this.publicKey = publicKey;
  }
  
  type() {
    return "RtsConnRequest";
  }
  
  get size() {
    let result = 0;
    result += 32; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.publicKey = cladBuffer.readFArray(false, 1, 32, false);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeFArray(this.publicKey);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsConnResponse
Anki.Vector.ExternalComms.RtsConnResponse = class extends Clad {
  constructor(connectionType, publicKey) {
    super();
    this.connectionType = connectionType;
    this.publicKey = publicKey;
  }
  
  type() {
    return "RtsConnResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // connectionType RtsConnType
    result += 32; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.connectionType = cladBuffer.readUint8();
    this.publicKey = cladBuffer.readFArray(false, 1, 32, false);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.connectionType);
      cladBuffer.writeFArray(this.publicKey);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsNonceMessage
Anki.Vector.ExternalComms.RtsNonceMessage = class extends Clad {
  constructor(toRobotNonce, toDeviceNonce) {
    super();
    this.toRobotNonce = toRobotNonce;
    this.toDeviceNonce = toDeviceNonce;
  }
  
  type() {
    return "RtsNonceMessage";
  }
  
  get size() {
    let result = 0;
    result += 24; // uint_8 array
    result += 24; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.toRobotNonce = cladBuffer.readFArray(false, 1, 24, false);
    this.toDeviceNonce = cladBuffer.readFArray(false, 1, 24, false);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeFArray(this.toRobotNonce);
      cladBuffer.writeFArray(this.toDeviceNonce);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsAck
Anki.Vector.ExternalComms.RtsAck = class extends Clad {
  constructor(rtsConnectionTag) {
    super();
    this.rtsConnectionTag = rtsConnectionTag;
  }
  
  type() {
    return "RtsAck";
  }
  
  get size() {
    let result = 0;
    result += 1; // rtsConnectionTag uint_8
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.rtsConnectionTag = cladBuffer.readUint8();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.rtsConnectionTag);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsChallengeMessage
Anki.Vector.ExternalComms.RtsChallengeMessage = class extends Clad {
  constructor(number) {
    super();
    this.number = number;
  }
  
  type() {
    return "RtsChallengeMessage";
  }
  
  get size() {
    let result = 0;
    result += 4; // number uint_32
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.number = cladBuffer.readUint32();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint32(this.number);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsChallengeSuccessMessage
Anki.Vector.ExternalComms.RtsChallengeSuccessMessage = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "RtsChallengeSuccessMessage";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// MESSAGE RtsWifiForgetRequest
Anki.Vector.ExternalComms.RtsWifiForgetRequest = class extends Clad {
  constructor(deleteAll, wifiSsidHex) {
    super();
    this.deleteAll = deleteAll;
    this.wifiSsidHex = wifiSsidHex;
  }
  
  type() {
    return "RtsWifiForgetRequest";
  }
  
  get size() {
    let result = 0;
    result += 1; // deleteAll bool
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.deleteAll = cladBuffer.readBool();
    this.wifiSsidHex = cladBuffer.readString(1);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeBool(this.deleteAll);
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiForgetResponse
Anki.Vector.ExternalComms.RtsWifiForgetResponse = class extends Clad {
  constructor(didDelete, wifiSsidHex) {
    super();
    this.didDelete = didDelete;
    this.wifiSsidHex = wifiSsidHex;
  }
  
  type() {
    return "RtsWifiForgetResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // didDelete bool
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.didDelete = cladBuffer.readBool();
    this.wifiSsidHex = cladBuffer.readString(1);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeBool(this.didDelete);
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiConnectRequest
Anki.Vector.ExternalComms.RtsWifiConnectRequest = class extends Clad {
  constructor(wifiSsidHex, password, timeout, authType, hidden) {
    super();
    this.wifiSsidHex = wifiSsidHex;
    this.password = password;
    this.timeout = timeout;
    this.authType = authType;
    this.hidden = hidden;
  }
  
  type() {
    return "RtsWifiConnectRequest";
  }
  
  get size() {
    let result = 0;
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // password length (uint_8)
    result += this.password.length; // uint_8 array
    result += 1; // timeout uint_8
    result += 1; // authType uint_8
    result += 1; // hidden bool
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.wifiSsidHex = cladBuffer.readString(1);
    this.password = cladBuffer.readString(1);
    this.timeout = cladBuffer.readUint8();
    this.authType = cladBuffer.readUint8();
    this.hidden = cladBuffer.readBool();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      if(this.password.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.password, 1);
      cladBuffer.writeUint8(this.timeout);
      cladBuffer.writeUint8(this.authType);
      cladBuffer.writeBool(this.hidden);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiConnectResponse
Anki.Vector.ExternalComms.RtsWifiConnectResponse = class extends Clad {
  constructor(wifiSsidHex, wifiState) {
    super();
    this.wifiSsidHex = wifiSsidHex;
    this.wifiState = wifiState;
  }
  
  type() {
    return "RtsWifiConnectResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // wifiState uint_8
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.wifiSsidHex = cladBuffer.readString(1);
    this.wifiState = cladBuffer.readUint8();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      cladBuffer.writeUint8(this.wifiState);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiConnectResponse_3
Anki.Vector.ExternalComms.RtsWifiConnectResponse_3 = class extends Clad {
  constructor(wifiSsidHex, wifiState, connectResult) {
    super();
    this.wifiSsidHex = wifiSsidHex;
    this.wifiState = wifiState;
    this.connectResult = connectResult;
  }
  
  type() {
    return "RtsWifiConnectResponse_3";
  }
  
  get size() {
    let result = 0;
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // wifiState uint_8
    result += 1; // connectResult uint_8
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.wifiSsidHex = cladBuffer.readString(1);
    this.wifiState = cladBuffer.readUint8();
    this.connectResult = cladBuffer.readUint8();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      cladBuffer.writeUint8(this.wifiState);
      cladBuffer.writeUint8(this.connectResult);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiIpRequest
Anki.Vector.ExternalComms.RtsWifiIpRequest = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "RtsWifiIpRequest";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// MESSAGE RtsWifiIpResponse
Anki.Vector.ExternalComms.RtsWifiIpResponse = class extends Clad {
  constructor(hasIpV4, hasIpV6, ipV4, ipV6) {
    super();
    this.hasIpV4 = hasIpV4;
    this.hasIpV6 = hasIpV6;
    this.ipV4 = ipV4;
    this.ipV6 = ipV6;
  }
  
  type() {
    return "RtsWifiIpResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // hasIpV4 uint_8
    result += 1; // hasIpV6 uint_8
    result += 4; // uint_8 array
    result += 16; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.hasIpV4 = cladBuffer.readUint8();
    this.hasIpV6 = cladBuffer.readUint8();
    this.ipV4 = cladBuffer.readFArray(false, 1, 4, false);
    this.ipV6 = cladBuffer.readFArray(false, 1, 16, false);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.hasIpV4);
      cladBuffer.writeUint8(this.hasIpV6);
      cladBuffer.writeFArray(this.ipV4);
      cladBuffer.writeFArray(this.ipV6);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsStatusRequest
Anki.Vector.ExternalComms.RtsStatusRequest = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "RtsStatusRequest";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// MESSAGE RtsStatusResponse
Anki.Vector.ExternalComms.RtsStatusResponse = class extends Clad {
  constructor(wifiSsidHex, wifiState, accessPoint, bleState, batteryState) {
    super();
    this.wifiSsidHex = wifiSsidHex;
    this.wifiState = wifiState;
    this.accessPoint = accessPoint;
    this.bleState = bleState;
    this.batteryState = batteryState;
  }
  
  type() {
    return "RtsStatusResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // wifiState uint_8
    result += 1; // accessPoint bool
    result += 1; // bleState uint_8
    result += 1; // batteryState uint_8
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.wifiSsidHex = cladBuffer.readString(1);
    this.wifiState = cladBuffer.readUint8();
    this.accessPoint = cladBuffer.readBool();
    this.bleState = cladBuffer.readUint8();
    this.batteryState = cladBuffer.readUint8();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      cladBuffer.writeUint8(this.wifiState);
      cladBuffer.writeBool(this.accessPoint);
      cladBuffer.writeUint8(this.bleState);
      cladBuffer.writeUint8(this.batteryState);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsStatusResponse_2
Anki.Vector.ExternalComms.RtsStatusResponse_2 = class extends Clad {
  constructor(wifiSsidHex, wifiState, accessPoint, bleState, batteryState, version, otaInProgress) {
    super();
    this.wifiSsidHex = wifiSsidHex;
    this.wifiState = wifiState;
    this.accessPoint = accessPoint;
    this.bleState = bleState;
    this.batteryState = batteryState;
    this.version = version;
    this.otaInProgress = otaInProgress;
  }
  
  type() {
    return "RtsStatusResponse_2";
  }
  
  get size() {
    let result = 0;
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // wifiState uint_8
    result += 1; // accessPoint bool
    result += 1; // bleState uint_8
    result += 1; // batteryState uint_8
    result += 1; // version length (uint_8)
    result += this.version.length; // uint_8 array
    result += 1; // otaInProgress bool
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.wifiSsidHex = cladBuffer.readString(1);
    this.wifiState = cladBuffer.readUint8();
    this.accessPoint = cladBuffer.readBool();
    this.bleState = cladBuffer.readUint8();
    this.batteryState = cladBuffer.readUint8();
    this.version = cladBuffer.readString(1);
    this.otaInProgress = cladBuffer.readBool();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      cladBuffer.writeUint8(this.wifiState);
      cladBuffer.writeBool(this.accessPoint);
      cladBuffer.writeUint8(this.bleState);
      cladBuffer.writeUint8(this.batteryState);
      if(this.version.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.version, 1);
      cladBuffer.writeBool(this.otaInProgress);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsStatusResponse_3
Anki.Vector.ExternalComms.RtsStatusResponse_3 = class extends Clad {
  constructor(wifiSsidHex, wifiState, accessPoint, bleState, batteryState, version, otaInProgress, hasOwner) {
    super();
    this.wifiSsidHex = wifiSsidHex;
    this.wifiState = wifiState;
    this.accessPoint = accessPoint;
    this.bleState = bleState;
    this.batteryState = batteryState;
    this.version = version;
    this.otaInProgress = otaInProgress;
    this.hasOwner = hasOwner;
  }
  
  type() {
    return "RtsStatusResponse_3";
  }
  
  get size() {
    let result = 0;
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // wifiState uint_8
    result += 1; // accessPoint bool
    result += 1; // bleState uint_8
    result += 1; // batteryState uint_8
    result += 1; // version length (uint_8)
    result += this.version.length; // uint_8 array
    result += 1; // otaInProgress bool
    result += 1; // hasOwner bool
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.wifiSsidHex = cladBuffer.readString(1);
    this.wifiState = cladBuffer.readUint8();
    this.accessPoint = cladBuffer.readBool();
    this.bleState = cladBuffer.readUint8();
    this.batteryState = cladBuffer.readUint8();
    this.version = cladBuffer.readString(1);
    this.otaInProgress = cladBuffer.readBool();
    this.hasOwner = cladBuffer.readBool();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      cladBuffer.writeUint8(this.wifiState);
      cladBuffer.writeBool(this.accessPoint);
      cladBuffer.writeUint8(this.bleState);
      cladBuffer.writeUint8(this.batteryState);
      if(this.version.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.version, 1);
      cladBuffer.writeBool(this.otaInProgress);
      cladBuffer.writeBool(this.hasOwner);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsStatusResponse_4
Anki.Vector.ExternalComms.RtsStatusResponse_4 = class extends Clad {
  constructor(wifiSsidHex, wifiState, accessPoint, bleState, batteryState, version, esn, otaInProgress, hasOwner) {
    super();
    this.wifiSsidHex = wifiSsidHex;
    this.wifiState = wifiState;
    this.accessPoint = accessPoint;
    this.bleState = bleState;
    this.batteryState = batteryState;
    this.version = version;
    this.esn = esn;
    this.otaInProgress = otaInProgress;
    this.hasOwner = hasOwner;
  }
  
  type() {
    return "RtsStatusResponse_4";
  }
  
  get size() {
    let result = 0;
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // wifiState uint_8
    result += 1; // accessPoint bool
    result += 1; // bleState uint_8
    result += 1; // batteryState uint_8
    result += 1; // version length (uint_8)
    result += this.version.length; // uint_8 array
    result += 1; // esn length (uint_8)
    result += this.esn.length; // uint_8 array
    result += 1; // otaInProgress bool
    result += 1; // hasOwner bool
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.wifiSsidHex = cladBuffer.readString(1);
    this.wifiState = cladBuffer.readUint8();
    this.accessPoint = cladBuffer.readBool();
    this.bleState = cladBuffer.readUint8();
    this.batteryState = cladBuffer.readUint8();
    this.version = cladBuffer.readString(1);
    this.esn = cladBuffer.readString(1);
    this.otaInProgress = cladBuffer.readBool();
    this.hasOwner = cladBuffer.readBool();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      cladBuffer.writeUint8(this.wifiState);
      cladBuffer.writeBool(this.accessPoint);
      cladBuffer.writeUint8(this.bleState);
      cladBuffer.writeUint8(this.batteryState);
      if(this.version.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.version, 1);
      if(this.esn.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.esn, 1);
      cladBuffer.writeBool(this.otaInProgress);
      cladBuffer.writeBool(this.hasOwner);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsStatusResponse_5
Anki.Vector.ExternalComms.RtsStatusResponse_5 = class extends Clad {
  constructor(wifiSsidHex, wifiState, accessPoint, bleState, batteryState, version, esn, otaInProgress, hasOwner, isCloudAuthed) {
    super();
    this.wifiSsidHex = wifiSsidHex;
    this.wifiState = wifiState;
    this.accessPoint = accessPoint;
    this.bleState = bleState;
    this.batteryState = batteryState;
    this.version = version;
    this.esn = esn;
    this.otaInProgress = otaInProgress;
    this.hasOwner = hasOwner;
    this.isCloudAuthed = isCloudAuthed;
  }
  
  type() {
    return "RtsStatusResponse_5";
  }
  
  get size() {
    let result = 0;
    result += 1; // wifiSsidHex length (uint_8)
    result += this.wifiSsidHex.length; // uint_8 array
    result += 1; // wifiState uint_8
    result += 1; // accessPoint bool
    result += 1; // bleState uint_8
    result += 1; // batteryState uint_8
    result += 1; // version length (uint_8)
    result += this.version.length; // uint_8 array
    result += 1; // esn length (uint_8)
    result += this.esn.length; // uint_8 array
    result += 1; // otaInProgress bool
    result += 1; // hasOwner bool
    result += 1; // isCloudAuthed bool
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.wifiSsidHex = cladBuffer.readString(1);
    this.wifiState = cladBuffer.readUint8();
    this.accessPoint = cladBuffer.readBool();
    this.bleState = cladBuffer.readUint8();
    this.batteryState = cladBuffer.readUint8();
    this.version = cladBuffer.readString(1);
    this.esn = cladBuffer.readString(1);
    this.otaInProgress = cladBuffer.readBool();
    this.hasOwner = cladBuffer.readBool();
    this.isCloudAuthed = cladBuffer.readBool();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.wifiSsidHex.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.wifiSsidHex, 1);
      cladBuffer.writeUint8(this.wifiState);
      cladBuffer.writeBool(this.accessPoint);
      cladBuffer.writeUint8(this.bleState);
      cladBuffer.writeUint8(this.batteryState);
      if(this.version.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.version, 1);
      if(this.esn.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.esn, 1);
      cladBuffer.writeBool(this.otaInProgress);
      cladBuffer.writeBool(this.hasOwner);
      cladBuffer.writeBool(this.isCloudAuthed);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiScanRequest
Anki.Vector.ExternalComms.RtsWifiScanRequest = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "RtsWifiScanRequest";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// MESSAGE RtsWifiScanResponse
Anki.Vector.ExternalComms.RtsWifiScanResponse = class extends Clad {
  constructor(statusCode, scanResult) {
    super();
    this.statusCode = statusCode;
    this.scanResult = scanResult;
  }
  
  type() {
    return "RtsWifiScanResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // statusCode uint_8
    result += 1; // scanResult length (uint_8)
    for(let i = 0; i < this.scanResult.length; i++) {
      result += this.scanResult[i].size;
    }
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.statusCode = cladBuffer.readUint8();
    let scanResultLength = cladBuffer.readUint8();
    this.scanResult = [];
    for(let i = 0; i < scanResultLength; i++) {
      let scanResultNew = new Anki.Vector.ExternalComms.RtsWifiScanResult(null);
      scanResultNew.unpackFromClad(cladBuffer);
      this.scanResult.push(scanResultNew);
    }
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.statusCode);
      cladBuffer.writeUint8(this.scanResult.length);
      for(let i = 0; i < this.scanResult.length; i++) {
        cladBuffer.write(this.scanResult[i].pack());
      }
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiScanResponse_2
Anki.Vector.ExternalComms.RtsWifiScanResponse_2 = class extends Clad {
  constructor(statusCode, scanResult) {
    super();
    this.statusCode = statusCode;
    this.scanResult = scanResult;
  }
  
  type() {
    return "RtsWifiScanResponse_2";
  }
  
  get size() {
    let result = 0;
    result += 1; // statusCode uint_8
    result += 1; // scanResult length (uint_8)
    for(let i = 0; i < this.scanResult.length; i++) {
      result += this.scanResult[i].size;
    }
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.statusCode = cladBuffer.readUint8();
    let scanResultLength = cladBuffer.readUint8();
    this.scanResult = [];
    for(let i = 0; i < scanResultLength; i++) {
      let scanResultNew = new Anki.Vector.ExternalComms.RtsWifiScanResult_2(null);
      scanResultNew.unpackFromClad(cladBuffer);
      this.scanResult.push(scanResultNew);
    }
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.statusCode);
      cladBuffer.writeUint8(this.scanResult.length);
      for(let i = 0; i < this.scanResult.length; i++) {
        cladBuffer.write(this.scanResult[i].pack());
      }
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiScanResponse_3
Anki.Vector.ExternalComms.RtsWifiScanResponse_3 = class extends Clad {
  constructor(statusCode, scanResult) {
    super();
    this.statusCode = statusCode;
    this.scanResult = scanResult;
  }
  
  type() {
    return "RtsWifiScanResponse_3";
  }
  
  get size() {
    let result = 0;
    result += 1; // statusCode uint_8
    result += 1; // scanResult length (uint_8)
    for(let i = 0; i < this.scanResult.length; i++) {
      result += this.scanResult[i].size;
    }
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.statusCode = cladBuffer.readUint8();
    let scanResultLength = cladBuffer.readUint8();
    this.scanResult = [];
    for(let i = 0; i < scanResultLength; i++) {
      let scanResultNew = new Anki.Vector.ExternalComms.RtsWifiScanResult_3(null);
      scanResultNew.unpackFromClad(cladBuffer);
      this.scanResult.push(scanResultNew);
    }
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.statusCode);
      cladBuffer.writeUint8(this.scanResult.length);
      for(let i = 0; i < this.scanResult.length; i++) {
        cladBuffer.write(this.scanResult[i].pack());
      }
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsOtaUpdateRequest
Anki.Vector.ExternalComms.RtsOtaUpdateRequest = class extends Clad {
  constructor(url) {
    super();
    this.url = url;
  }
  
  type() {
    return "RtsOtaUpdateRequest";
  }
  
  get size() {
    let result = 0;
    result += 1; // url length (uint_8)
    result += this.url.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.url = cladBuffer.readString(1);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.url.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.url, 1);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsOtaCancelRequest
Anki.Vector.ExternalComms.RtsOtaCancelRequest = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "RtsOtaCancelRequest";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// MESSAGE RtsOtaUpdateResponse
Anki.Vector.ExternalComms.RtsOtaUpdateResponse = class extends Clad {
  constructor(status, current, expected) {
    super();
    this.status = status;
    this.current = current;
    this.expected = expected;
  }
  
  type() {
    return "RtsOtaUpdateResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // status uint_8
    result += 8; // current uint_64
    result += 8; // expected uint_64
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.status = cladBuffer.readUint8();
    this.current = cladBuffer.readBigUint64();
    this.expected = cladBuffer.readBigUint64();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.status);
      cladBuffer.writeBigUint64(this.current);
      cladBuffer.writeBigUint64(this.expected);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiAccessPointRequest
Anki.Vector.ExternalComms.RtsWifiAccessPointRequest = class extends Clad {
  constructor(enable) {
    super();
    this.enable = enable;
  }
  
  type() {
    return "RtsWifiAccessPointRequest";
  }
  
  get size() {
    let result = 0;
    result += 1; // enable bool
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.enable = cladBuffer.readBool();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeBool(this.enable);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsWifiAccessPointResponse
Anki.Vector.ExternalComms.RtsWifiAccessPointResponse = class extends Clad {
  constructor(enabled, ssid, password) {
    super();
    this.enabled = enabled;
    this.ssid = ssid;
    this.password = password;
  }
  
  type() {
    return "RtsWifiAccessPointResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // enabled bool
    result += 1; // ssid length (uint_8)
    result += this.ssid.length; // uint_8 array
    result += 1; // password length (uint_8)
    result += this.password.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.enabled = cladBuffer.readBool();
    this.ssid = cladBuffer.readString(1);
    this.password = cladBuffer.readString(1);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeBool(this.enabled);
      if(this.ssid.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.ssid, 1);
      if(this.password.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.password, 1);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsCancelPairing
Anki.Vector.ExternalComms.RtsCancelPairing = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "RtsCancelPairing";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// MESSAGE RtsForceDisconnect
Anki.Vector.ExternalComms.RtsForceDisconnect = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "RtsForceDisconnect";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// MESSAGE RtsSshRequest
Anki.Vector.ExternalComms.RtsSshRequest = class extends Clad {
  constructor(sshAuthorizedKeyBytes) {
    super();
    this.sshAuthorizedKeyBytes = sshAuthorizedKeyBytes;
  }
  
  type() {
    return "RtsSshRequest";
  }
  
  get size() {
    let result = 0;
    result += 2; // sshAuthorizedKeyBytes length (uint_16)
    for(let i = 0; i < this.sshAuthorizedKeyBytes.length; i++) {
      result += 1; // sshAuthorizedKeyBytes[i] length (uint_8)
      result += this.sshAuthorizedKeyBytes[i].length; // uint_8 array
    }
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.sshAuthorizedKeyBytes = cladBuffer.readStringVArray(false, 1, 2);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeStringVArray(this.sshAuthorizedKeyBytes, 2, 1);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsSshResponse
Anki.Vector.ExternalComms.RtsSshResponse = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "RtsSshResponse";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// MESSAGE RtsLogRequest
Anki.Vector.ExternalComms.RtsLogRequest = class extends Clad {
  constructor(mode, filter) {
    super();
    this.mode = mode;
    this.filter = filter;
  }
  
  type() {
    return "RtsLogRequest";
  }
  
  get size() {
    let result = 0;
    result += 1; // mode uint_8
    result += 2; // filter length (uint_16)
    for(let i = 0; i < this.filter.length; i++) {
      result += 1; // filter[i] length (uint_8)
      result += this.filter[i].length; // uint_8 array
    }
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.mode = cladBuffer.readUint8();
    this.filter = cladBuffer.readStringVArray(false, 1, 2);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.mode);
      cladBuffer.writeStringVArray(this.filter, 2, 1);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsLogResponse
Anki.Vector.ExternalComms.RtsLogResponse = class extends Clad {
  constructor(exitCode, fileId) {
    super();
    this.exitCode = exitCode;
    this.fileId = fileId;
  }
  
  type() {
    return "RtsLogResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // exitCode uint_8
    result += 4; // fileId uint_32
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.exitCode = cladBuffer.readUint8();
    this.fileId = cladBuffer.readUint32();
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.exitCode);
      cladBuffer.writeUint32(this.fileId);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsFileDownload
Anki.Vector.ExternalComms.RtsFileDownload = class extends Clad {
  constructor(status, fileId, packetNumber, packetTotal, fileChunk) {
    super();
    this.status = status;
    this.fileId = fileId;
    this.packetNumber = packetNumber;
    this.packetTotal = packetTotal;
    this.fileChunk = fileChunk;
  }
  
  type() {
    return "RtsFileDownload";
  }
  
  get size() {
    let result = 0;
    result += 1; // status uint_8
    result += 4; // fileId uint_32
    result += 4; // packetNumber uint_32
    result += 4; // packetTotal uint_32
    result += 2; // fileChunk length (uint_16)
    result += this.fileChunk.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.status = cladBuffer.readUint8();
    this.fileId = cladBuffer.readUint32();
    this.packetNumber = cladBuffer.readUint32();
    this.packetTotal = cladBuffer.readUint32();
    this.fileChunk = cladBuffer.readVArray(false, 1, 2, false);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint8(this.status);
      cladBuffer.writeUint32(this.fileId);
      cladBuffer.writeUint32(this.packetNumber);
      cladBuffer.writeUint32(this.packetTotal);
      cladBuffer.writeVArray(this.fileChunk, 2);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsCloudSessionRequest
Anki.Vector.ExternalComms.RtsCloudSessionRequest = class extends Clad {
  constructor(sessionToken) {
    super();
    this.sessionToken = sessionToken;
  }
  
  type() {
    return "RtsCloudSessionRequest";
  }
  
  get size() {
    let result = 0;
    result += 2; // sessionToken length (uint_16)
    result += this.sessionToken.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.sessionToken = cladBuffer.readString(2);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.sessionToken.length > 65535) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.sessionToken, 2);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsCloudSessionRequest_5
Anki.Vector.ExternalComms.RtsCloudSessionRequest_5 = class extends Clad {
  constructor(sessionToken, clientName, appId) {
    super();
    this.sessionToken = sessionToken;
    this.clientName = clientName;
    this.appId = appId;
  }
  
  type() {
    return "RtsCloudSessionRequest_5";
  }
  
  get size() {
    let result = 0;
    result += 2; // sessionToken length (uint_16)
    result += this.sessionToken.length; // uint_8 array
    result += 1; // clientName length (uint_8)
    result += this.clientName.length; // uint_8 array
    result += 1; // appId length (uint_8)
    result += this.appId.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.sessionToken = cladBuffer.readString(2);
    this.clientName = cladBuffer.readString(1);
    this.appId = cladBuffer.readString(1);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.sessionToken.length > 65535) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.sessionToken, 2);
      if(this.clientName.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.clientName, 1);
      if(this.appId.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.appId, 1);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsCloudSessionResponse
Anki.Vector.ExternalComms.RtsCloudSessionResponse = class extends Clad {
  constructor(success, statusCode, clientTokenGuid) {
    super();
    this.success = success;
    this.statusCode = statusCode;
    this.clientTokenGuid = clientTokenGuid;
  }
  
  type() {
    return "RtsCloudSessionResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // success bool
    result += 1; // statusCode RtsCloudStatus
    result += 2; // clientTokenGuid length (uint_16)
    result += this.clientTokenGuid.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.success = cladBuffer.readBool();
    this.statusCode = cladBuffer.readUint8();
    this.clientTokenGuid = cladBuffer.readString(2);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeBool(this.success);
      cladBuffer.writeUint8(this.statusCode);
      if(this.clientTokenGuid.length > 65535) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.clientTokenGuid, 2);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsAppConnectionIdRequest
Anki.Vector.ExternalComms.RtsAppConnectionIdRequest = class extends Clad {
  constructor(connectionId) {
    super();
    this.connectionId = connectionId;
  }
  
  type() {
    return "RtsAppConnectionIdRequest";
  }
  
  get size() {
    let result = 0;
    result += 2; // connectionId length (uint_16)
    result += this.connectionId.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.connectionId = cladBuffer.readString(2);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.connectionId.length > 65535) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.connectionId, 2);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsAppConnectionIdResponse
Anki.Vector.ExternalComms.RtsAppConnectionIdResponse = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "RtsAppConnectionIdResponse";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// MESSAGE RtsResponse
Anki.Vector.ExternalComms.RtsResponse = class extends Clad {
  constructor(code, responseMessage) {
    super();
    this.code = code;
    this.responseMessage = responseMessage;
  }
  
  type() {
    return "RtsResponse";
  }
  
  get size() {
    let result = 0;
    result += 2; // code RtsResponseCode
    result += 2; // responseMessage length (uint_16)
    result += this.responseMessage.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.code = cladBuffer.readUint16();
    this.responseMessage = cladBuffer.readString(2);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      cladBuffer.writeUint16(this.code);
      if(this.responseMessage.length > 65535) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.responseMessage, 2);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsSdkProxyRequest
Anki.Vector.ExternalComms.RtsSdkProxyRequest = class extends Clad {
  constructor(clientGuid, messageId, urlPath, json) {
    super();
    this.clientGuid = clientGuid;
    this.messageId = messageId;
    this.urlPath = urlPath;
    this.json = json;
  }
  
  type() {
    return "RtsSdkProxyRequest";
  }
  
  get size() {
    let result = 0;
    result += 1; // clientGuid length (uint_8)
    result += this.clientGuid.length; // uint_8 array
    result += 1; // messageId length (uint_8)
    result += this.messageId.length; // uint_8 array
    result += 1; // urlPath length (uint_8)
    result += this.urlPath.length; // uint_8 array
    result += 2; // json length (uint_16)
    result += this.json.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.clientGuid = cladBuffer.readString(1);
    this.messageId = cladBuffer.readString(1);
    this.urlPath = cladBuffer.readString(1);
    this.json = cladBuffer.readString(2);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.clientGuid.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.clientGuid, 1);
      if(this.messageId.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.messageId, 1);
      if(this.urlPath.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.urlPath, 1);
      if(this.json.length > 65535) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.json, 2);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE RtsSdkProxyResponse
Anki.Vector.ExternalComms.RtsSdkProxyResponse = class extends Clad {
  constructor(messageId, statusCode, responseType, responseBody) {
    super();
    this.messageId = messageId;
    this.statusCode = statusCode;
    this.responseType = responseType;
    this.responseBody = responseBody;
  }
  
  type() {
    return "RtsSdkProxyResponse";
  }
  
  get size() {
    let result = 0;
    result += 1; // messageId length (uint_8)
    result += this.messageId.length; // uint_8 array
    result += 2; // statusCode uint_16
    result += 1; // responseType length (uint_8)
    result += this.responseType.length; // uint_8 array
    result += 2; // responseBody length (uint_16)
    result += this.responseBody.length; // uint_8 array
    return result;
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
    this.messageId = cladBuffer.readString(1);
    this.statusCode = cladBuffer.readUint16();
    this.responseType = cladBuffer.readString(1);
    this.responseBody = cladBuffer.readString(2);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
      if(this.messageId.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.messageId, 1);
      cladBuffer.writeUint16(this.statusCode);
      if(this.responseType.length > 255) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.responseType, 1);
      if(this.responseBody.length > 65535) {
        buffer = null;
        return;
      }
      cladBuffer.writeString(this.responseBody, 2);
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return JSON.stringify(this);
  }
}


// MESSAGE Error
Anki.Vector.ExternalComms.Error = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "Error";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// UNION RtsConnection_2
Anki.Vector.ExternalComms.RtsConnection_2Tag = Object.freeze({
  Error:0x0,                      
  RtsConnRequest:0x1,             
  RtsConnResponse:0x2,            
  RtsNonceMessage:0x3,            
  RtsChallengeMessage:0x4,        
  RtsChallengeSuccessMessage:0x5, 
  RtsWifiConnectRequest:0x6,      
  RtsWifiConnectResponse:0x7,     
  RtsWifiIpRequest:0x8,           
  RtsWifiIpResponse:0x9,          
  RtsStatusRequest:0xa,           
  RtsStatusResponse_2:0xb,        
  RtsWifiScanRequest:0xc,         
  RtsWifiScanResponse_2:0xd,      
  RtsOtaUpdateRequest:0xe,        
  RtsOtaUpdateResponse:0xf,       
  RtsCancelPairing:0x10,          
  RtsForceDisconnect:0x11,        
  RtsAck:0x12,                    
  RtsWifiAccessPointRequest:0x13, 
  RtsWifiAccessPointResponse:0x14,
  RtsSshRequest:0x15,             
  RtsSshResponse:0x16,            
  RtsOtaCancelRequest:0x17,       
  RtsLogRequest:0x18,             
  RtsLogResponse:0x19,            
  RtsFileDownload:0x1a,           
  INVALID:0xFF                    
});

Anki.Vector.ExternalComms.RtsConnection_2 = class extends Clad {
  constructor() {
    super();
    this._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.INVALID;
  }
  
  get tag() {
    if(this._tag == null) {
      return Anki.Vector.ExternalComms.RtsConnection_2Tag.INVALID;
    }
    return this._tag;
  }
  
  get size() {
    if(this._tag == null || this._tag == Anki.Vector.ExternalComms.RtsConnection_2Tag.INVALID) {
      return 1;
    }
    return 1 + this.value.size;
  }
  
  pack() {
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_2Tag.INVALID) {
      return null;
    }
    let buffer = new Uint8Array(this.size);
    // add tag
    buffer.set([this._tag], 0);
    // add message
    buffer.set(this.value.pack(), 1);
    return buffer;
  }
  
  unpackStructure(tag, buffer) {
    let ret = null;
    switch(tag) {
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.Error:
      ret = new Anki.Vector.ExternalComms.Error();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsConnRequest:
      ret = new Anki.Vector.ExternalComms.RtsConnRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsConnResponse:
      ret = new Anki.Vector.ExternalComms.RtsConnResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsNonceMessage:
      ret = new Anki.Vector.ExternalComms.RtsNonceMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsChallengeMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsChallengeSuccessMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeSuccessMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiConnectRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiConnectResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiIpRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiIpResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsStatusRequest:
      ret = new Anki.Vector.ExternalComms.RtsStatusRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsStatusResponse_2:
      ret = new Anki.Vector.ExternalComms.RtsStatusResponse_2();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiScanRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiScanResponse_2:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanResponse_2();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsOtaUpdateRequest:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsOtaUpdateResponse:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsCancelPairing:
      ret = new Anki.Vector.ExternalComms.RtsCancelPairing();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsForceDisconnect:
      ret = new Anki.Vector.ExternalComms.RtsForceDisconnect();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsAck:
      ret = new Anki.Vector.ExternalComms.RtsAck();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiAccessPointRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiAccessPointResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsSshRequest:
      ret = new Anki.Vector.ExternalComms.RtsSshRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsSshResponse:
      ret = new Anki.Vector.ExternalComms.RtsSshResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsOtaCancelRequest:
      ret = new Anki.Vector.ExternalComms.RtsOtaCancelRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsLogRequest:
      ret = new Anki.Vector.ExternalComms.RtsLogRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsLogResponse:
      ret = new Anki.Vector.ExternalComms.RtsLogResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsFileDownload:
      ret = new Anki.Vector.ExternalComms.RtsFileDownload();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    default:
      return ret;
    }
  }
  
  unpack(buffer) {
    this._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.INVALID;
    if(buffer.length == 0) {
      // error case
      return null;
    }
    this._tag = buffer[0];
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_2Tag.INVALID) {
      return null;
    }
    return this.unpackStructure(this._tag, buffer.slice(1));
  }
  
  string() {
    if(this._tag == null) {
      return "null";
    }
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_2Tag.INVALID) {
      return "INVALID";
    }
    return JSON.stringify(this);
  }
  
  getError() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.Error) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithError(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.Error;
    m.value = value;
    return m;
  }
  
  getRtsConnRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsConnRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsConnRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsConnRequest;
    m.value = value;
    return m;
  }
  
  getRtsConnResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsConnResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsConnResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsConnResponse;
    m.value = value;
    return m;
  }
  
  getRtsNonceMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsNonceMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsNonceMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsNonceMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsChallengeMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsChallengeMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsChallengeMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeSuccessMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsChallengeSuccessMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsChallengeSuccessMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsChallengeSuccessMessage;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiConnectRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsWifiConnectRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiConnectRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiConnectResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsWifiConnectResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiConnectResponse;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiIpRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsWifiIpRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiIpRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiIpResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsWifiIpResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiIpResponse;
    m.value = value;
    return m;
  }
  
  getRtsStatusRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsStatusRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsStatusRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsStatusRequest;
    m.value = value;
    return m;
  }
  
  getRtsStatusResponse_2() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsStatusResponse_2) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsStatusResponse_2(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsStatusResponse_2;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiScanRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsWifiScanRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiScanRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanResponse_2() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiScanResponse_2) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsWifiScanResponse_2(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiScanResponse_2;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsOtaUpdateRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsOtaUpdateRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsOtaUpdateRequest;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsOtaUpdateResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsOtaUpdateResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsOtaUpdateResponse;
    m.value = value;
    return m;
  }
  
  getRtsCancelPairing() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsCancelPairing) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsCancelPairing(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsCancelPairing;
    m.value = value;
    return m;
  }
  
  getRtsForceDisconnect() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsForceDisconnect) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsForceDisconnect(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsForceDisconnect;
    m.value = value;
    return m;
  }
  
  getRtsAck() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsAck) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsAck(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsAck;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiAccessPointRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsWifiAccessPointRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiAccessPointRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiAccessPointResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsWifiAccessPointResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsWifiAccessPointResponse;
    m.value = value;
    return m;
  }
  
  getRtsSshRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsSshRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsSshRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsSshRequest;
    m.value = value;
    return m;
  }
  
  getRtsSshResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsSshResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsSshResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsSshResponse;
    m.value = value;
    return m;
  }
  
  getRtsOtaCancelRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsOtaCancelRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsOtaCancelRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsOtaCancelRequest;
    m.value = value;
    return m;
  }
  
  getRtsLogRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsLogRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsLogRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsLogRequest;
    m.value = value;
    return m;
  }
  
  getRtsLogResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsLogResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsLogResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsLogResponse;
    m.value = value;
    return m;
  }
  
  getRtsFileDownload() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsFileDownload) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_2WithRtsFileDownload(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_2();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_2Tag.RtsFileDownload;
    m.value = value;
    return m;
  }
  
}


// UNION RtsConnection_3
Anki.Vector.ExternalComms.RtsConnection_3Tag = Object.freeze({
  Error:0x0,                      
  RtsConnRequest:0x1,             
  RtsConnResponse:0x2,            
  RtsNonceMessage:0x3,            
  RtsChallengeMessage:0x4,        
  RtsChallengeSuccessMessage:0x5, 
  RtsWifiConnectRequest:0x6,      
  RtsWifiConnectResponse_3:0x7,   
  RtsWifiIpRequest:0x8,           
  RtsWifiIpResponse:0x9,          
  RtsStatusRequest:0xa,           
  RtsStatusResponse_3:0xb,        
  RtsWifiScanRequest:0xc,         
  RtsWifiScanResponse_3:0xd,      
  RtsOtaUpdateRequest:0xe,        
  RtsOtaUpdateResponse:0xf,       
  RtsCancelPairing:0x10,          
  RtsForceDisconnect:0x11,        
  RtsAck:0x12,                    
  RtsWifiAccessPointRequest:0x13, 
  RtsWifiAccessPointResponse:0x14,
  RtsSshRequest:0x15,             
  RtsSshResponse:0x16,            
  RtsOtaCancelRequest:0x17,       
  RtsLogRequest:0x18,             
  RtsLogResponse:0x19,            
  RtsFileDownload:0x1a,           
  RtsWifiForgetRequest:0x1b,      
  RtsWifiForgetResponse:0x1c,     
  RtsCloudSessionRequest:0x1d,    
  RtsCloudSessionResponse:0x1e,   
  INVALID:0xFF                    
});

Anki.Vector.ExternalComms.RtsConnection_3 = class extends Clad {
  constructor() {
    super();
    this._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.INVALID;
  }
  
  get tag() {
    if(this._tag == null) {
      return Anki.Vector.ExternalComms.RtsConnection_3Tag.INVALID;
    }
    return this._tag;
  }
  
  get size() {
    if(this._tag == null || this._tag == Anki.Vector.ExternalComms.RtsConnection_3Tag.INVALID) {
      return 1;
    }
    return 1 + this.value.size;
  }
  
  pack() {
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_3Tag.INVALID) {
      return null;
    }
    let buffer = new Uint8Array(this.size);
    // add tag
    buffer.set([this._tag], 0);
    // add message
    buffer.set(this.value.pack(), 1);
    return buffer;
  }
  
  unpackStructure(tag, buffer) {
    let ret = null;
    switch(tag) {
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.Error:
      ret = new Anki.Vector.ExternalComms.Error();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsConnRequest:
      ret = new Anki.Vector.ExternalComms.RtsConnRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsConnResponse:
      ret = new Anki.Vector.ExternalComms.RtsConnResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsNonceMessage:
      ret = new Anki.Vector.ExternalComms.RtsNonceMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsChallengeMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsChallengeSuccessMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeSuccessMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiConnectRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiConnectResponse_3:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectResponse_3();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiIpRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiIpResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsStatusRequest:
      ret = new Anki.Vector.ExternalComms.RtsStatusRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsStatusResponse_3:
      ret = new Anki.Vector.ExternalComms.RtsStatusResponse_3();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiScanRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiScanResponse_3:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanResponse_3();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsOtaUpdateRequest:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsOtaUpdateResponse:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsCancelPairing:
      ret = new Anki.Vector.ExternalComms.RtsCancelPairing();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsForceDisconnect:
      ret = new Anki.Vector.ExternalComms.RtsForceDisconnect();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsAck:
      ret = new Anki.Vector.ExternalComms.RtsAck();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiAccessPointRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiAccessPointResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsSshRequest:
      ret = new Anki.Vector.ExternalComms.RtsSshRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsSshResponse:
      ret = new Anki.Vector.ExternalComms.RtsSshResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsOtaCancelRequest:
      ret = new Anki.Vector.ExternalComms.RtsOtaCancelRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsLogRequest:
      ret = new Anki.Vector.ExternalComms.RtsLogRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsLogResponse:
      ret = new Anki.Vector.ExternalComms.RtsLogResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsFileDownload:
      ret = new Anki.Vector.ExternalComms.RtsFileDownload();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiForgetRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiForgetRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiForgetResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiForgetResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsCloudSessionRequest:
      ret = new Anki.Vector.ExternalComms.RtsCloudSessionRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsCloudSessionResponse:
      ret = new Anki.Vector.ExternalComms.RtsCloudSessionResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    default:
      return ret;
    }
  }
  
  unpack(buffer) {
    this._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.INVALID;
    if(buffer.length == 0) {
      // error case
      return null;
    }
    this._tag = buffer[0];
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_3Tag.INVALID) {
      return null;
    }
    return this.unpackStructure(this._tag, buffer.slice(1));
  }
  
  string() {
    if(this._tag == null) {
      return "null";
    }
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_3Tag.INVALID) {
      return "INVALID";
    }
    return JSON.stringify(this);
  }
  
  getError() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.Error) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithError(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.Error;
    m.value = value;
    return m;
  }
  
  getRtsConnRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsConnRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsConnRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsConnRequest;
    m.value = value;
    return m;
  }
  
  getRtsConnResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsConnResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsConnResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsConnResponse;
    m.value = value;
    return m;
  }
  
  getRtsNonceMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsNonceMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsNonceMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsNonceMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsChallengeMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsChallengeMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsChallengeMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeSuccessMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsChallengeSuccessMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsChallengeSuccessMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsChallengeSuccessMessage;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiConnectRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiConnectRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiConnectRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectResponse_3() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiConnectResponse_3) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiConnectResponse_3(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiConnectResponse_3;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiIpRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiIpRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiIpRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiIpResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiIpResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiIpResponse;
    m.value = value;
    return m;
  }
  
  getRtsStatusRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsStatusRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsStatusRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsStatusRequest;
    m.value = value;
    return m;
  }
  
  getRtsStatusResponse_3() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsStatusResponse_3) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsStatusResponse_3(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsStatusResponse_3;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiScanRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiScanRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiScanRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanResponse_3() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiScanResponse_3) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiScanResponse_3(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiScanResponse_3;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsOtaUpdateRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsOtaUpdateRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsOtaUpdateRequest;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsOtaUpdateResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsOtaUpdateResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsOtaUpdateResponse;
    m.value = value;
    return m;
  }
  
  getRtsCancelPairing() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsCancelPairing) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsCancelPairing(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsCancelPairing;
    m.value = value;
    return m;
  }
  
  getRtsForceDisconnect() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsForceDisconnect) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsForceDisconnect(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsForceDisconnect;
    m.value = value;
    return m;
  }
  
  getRtsAck() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsAck) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsAck(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsAck;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiAccessPointRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiAccessPointRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiAccessPointRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiAccessPointResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiAccessPointResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiAccessPointResponse;
    m.value = value;
    return m;
  }
  
  getRtsSshRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsSshRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsSshRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsSshRequest;
    m.value = value;
    return m;
  }
  
  getRtsSshResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsSshResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsSshResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsSshResponse;
    m.value = value;
    return m;
  }
  
  getRtsOtaCancelRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsOtaCancelRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsOtaCancelRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsOtaCancelRequest;
    m.value = value;
    return m;
  }
  
  getRtsLogRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsLogRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsLogRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsLogRequest;
    m.value = value;
    return m;
  }
  
  getRtsLogResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsLogResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsLogResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsLogResponse;
    m.value = value;
    return m;
  }
  
  getRtsFileDownload() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsFileDownload) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsFileDownload(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsFileDownload;
    m.value = value;
    return m;
  }
  
  getRtsWifiForgetRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiForgetRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiForgetRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiForgetRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiForgetResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiForgetResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsWifiForgetResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsWifiForgetResponse;
    m.value = value;
    return m;
  }
  
  getRtsCloudSessionRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsCloudSessionRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsCloudSessionRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsCloudSessionRequest;
    m.value = value;
    return m;
  }
  
  getRtsCloudSessionResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsCloudSessionResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_3WithRtsCloudSessionResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_3();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_3Tag.RtsCloudSessionResponse;
    m.value = value;
    return m;
  }
  
}


// UNION RtsConnection_4
Anki.Vector.ExternalComms.RtsConnection_4Tag = Object.freeze({
  Error:0x0,                      
  RtsConnRequest:0x1,             
  RtsConnResponse:0x2,            
  RtsNonceMessage:0x3,            
  RtsChallengeMessage:0x4,        
  RtsChallengeSuccessMessage:0x5, 
  RtsWifiConnectRequest:0x6,      
  RtsWifiConnectResponse_3:0x7,   
  RtsWifiIpRequest:0x8,           
  RtsWifiIpResponse:0x9,          
  RtsStatusRequest:0xa,           
  RtsStatusResponse_4:0xb,        
  RtsWifiScanRequest:0xc,         
  RtsWifiScanResponse_3:0xd,      
  RtsOtaUpdateRequest:0xe,        
  RtsOtaUpdateResponse:0xf,       
  RtsCancelPairing:0x10,          
  RtsForceDisconnect:0x11,        
  RtsAck:0x12,                    
  RtsWifiAccessPointRequest:0x13, 
  RtsWifiAccessPointResponse:0x14,
  RtsSshRequest:0x15,             
  RtsSshResponse:0x16,            
  RtsOtaCancelRequest:0x17,       
  RtsLogRequest:0x18,             
  RtsLogResponse:0x19,            
  RtsFileDownload:0x1a,           
  RtsWifiForgetRequest:0x1b,      
  RtsWifiForgetResponse:0x1c,     
  RtsCloudSessionRequest:0x1d,    
  RtsCloudSessionResponse:0x1e,   
  RtsAppConnectionIdRequest:0x1f, 
  RtsAppConnectionIdResponse:0x20,
  RtsResponse:0x21,               
  INVALID:0xFF                    
});

Anki.Vector.ExternalComms.RtsConnection_4 = class extends Clad {
  constructor() {
    super();
    this._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.INVALID;
  }
  
  get tag() {
    if(this._tag == null) {
      return Anki.Vector.ExternalComms.RtsConnection_4Tag.INVALID;
    }
    return this._tag;
  }
  
  get size() {
    if(this._tag == null || this._tag == Anki.Vector.ExternalComms.RtsConnection_4Tag.INVALID) {
      return 1;
    }
    return 1 + this.value.size;
  }
  
  pack() {
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_4Tag.INVALID) {
      return null;
    }
    let buffer = new Uint8Array(this.size);
    // add tag
    buffer.set([this._tag], 0);
    // add message
    buffer.set(this.value.pack(), 1);
    return buffer;
  }
  
  unpackStructure(tag, buffer) {
    let ret = null;
    switch(tag) {
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.Error:
      ret = new Anki.Vector.ExternalComms.Error();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsConnRequest:
      ret = new Anki.Vector.ExternalComms.RtsConnRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsConnResponse:
      ret = new Anki.Vector.ExternalComms.RtsConnResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsNonceMessage:
      ret = new Anki.Vector.ExternalComms.RtsNonceMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsChallengeMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsChallengeSuccessMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeSuccessMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiConnectRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiConnectResponse_3:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectResponse_3();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiIpRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiIpResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsStatusRequest:
      ret = new Anki.Vector.ExternalComms.RtsStatusRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsStatusResponse_4:
      ret = new Anki.Vector.ExternalComms.RtsStatusResponse_4();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiScanRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiScanResponse_3:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanResponse_3();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsOtaUpdateRequest:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsOtaUpdateResponse:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsCancelPairing:
      ret = new Anki.Vector.ExternalComms.RtsCancelPairing();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsForceDisconnect:
      ret = new Anki.Vector.ExternalComms.RtsForceDisconnect();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsAck:
      ret = new Anki.Vector.ExternalComms.RtsAck();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiAccessPointRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiAccessPointResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsSshRequest:
      ret = new Anki.Vector.ExternalComms.RtsSshRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsSshResponse:
      ret = new Anki.Vector.ExternalComms.RtsSshResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsOtaCancelRequest:
      ret = new Anki.Vector.ExternalComms.RtsOtaCancelRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsLogRequest:
      ret = new Anki.Vector.ExternalComms.RtsLogRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsLogResponse:
      ret = new Anki.Vector.ExternalComms.RtsLogResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsFileDownload:
      ret = new Anki.Vector.ExternalComms.RtsFileDownload();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiForgetRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiForgetRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiForgetResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiForgetResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsCloudSessionRequest:
      ret = new Anki.Vector.ExternalComms.RtsCloudSessionRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsCloudSessionResponse:
      ret = new Anki.Vector.ExternalComms.RtsCloudSessionResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsAppConnectionIdRequest:
      ret = new Anki.Vector.ExternalComms.RtsAppConnectionIdRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsAppConnectionIdResponse:
      ret = new Anki.Vector.ExternalComms.RtsAppConnectionIdResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsResponse:
      ret = new Anki.Vector.ExternalComms.RtsResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    default:
      return ret;
    }
  }
  
  unpack(buffer) {
    this._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.INVALID;
    if(buffer.length == 0) {
      // error case
      return null;
    }
    this._tag = buffer[0];
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_4Tag.INVALID) {
      return null;
    }
    return this.unpackStructure(this._tag, buffer.slice(1));
  }
  
  string() {
    if(this._tag == null) {
      return "null";
    }
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_4Tag.INVALID) {
      return "INVALID";
    }
    return JSON.stringify(this);
  }
  
  getError() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.Error) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithError(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.Error;
    m.value = value;
    return m;
  }
  
  getRtsConnRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsConnRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsConnRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsConnRequest;
    m.value = value;
    return m;
  }
  
  getRtsConnResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsConnResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsConnResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsConnResponse;
    m.value = value;
    return m;
  }
  
  getRtsNonceMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsNonceMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsNonceMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsNonceMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsChallengeMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsChallengeMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsChallengeMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeSuccessMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsChallengeSuccessMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsChallengeSuccessMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsChallengeSuccessMessage;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiConnectRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiConnectRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiConnectRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectResponse_3() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiConnectResponse_3) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiConnectResponse_3(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiConnectResponse_3;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiIpRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiIpRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiIpRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiIpResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiIpResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiIpResponse;
    m.value = value;
    return m;
  }
  
  getRtsStatusRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsStatusRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsStatusRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsStatusRequest;
    m.value = value;
    return m;
  }
  
  getRtsStatusResponse_4() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsStatusResponse_4) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsStatusResponse_4(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsStatusResponse_4;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiScanRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiScanRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiScanRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanResponse_3() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiScanResponse_3) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiScanResponse_3(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiScanResponse_3;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsOtaUpdateRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsOtaUpdateRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsOtaUpdateRequest;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsOtaUpdateResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsOtaUpdateResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsOtaUpdateResponse;
    m.value = value;
    return m;
  }
  
  getRtsCancelPairing() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsCancelPairing) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsCancelPairing(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsCancelPairing;
    m.value = value;
    return m;
  }
  
  getRtsForceDisconnect() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsForceDisconnect) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsForceDisconnect(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsForceDisconnect;
    m.value = value;
    return m;
  }
  
  getRtsAck() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsAck) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsAck(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsAck;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiAccessPointRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiAccessPointRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiAccessPointRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiAccessPointResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiAccessPointResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiAccessPointResponse;
    m.value = value;
    return m;
  }
  
  getRtsSshRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsSshRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsSshRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsSshRequest;
    m.value = value;
    return m;
  }
  
  getRtsSshResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsSshResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsSshResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsSshResponse;
    m.value = value;
    return m;
  }
  
  getRtsOtaCancelRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsOtaCancelRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsOtaCancelRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsOtaCancelRequest;
    m.value = value;
    return m;
  }
  
  getRtsLogRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsLogRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsLogRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsLogRequest;
    m.value = value;
    return m;
  }
  
  getRtsLogResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsLogResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsLogResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsLogResponse;
    m.value = value;
    return m;
  }
  
  getRtsFileDownload() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsFileDownload) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsFileDownload(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsFileDownload;
    m.value = value;
    return m;
  }
  
  getRtsWifiForgetRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiForgetRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiForgetRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiForgetRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiForgetResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiForgetResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsWifiForgetResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsWifiForgetResponse;
    m.value = value;
    return m;
  }
  
  getRtsCloudSessionRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsCloudSessionRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsCloudSessionRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsCloudSessionRequest;
    m.value = value;
    return m;
  }
  
  getRtsCloudSessionResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsCloudSessionResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsCloudSessionResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsCloudSessionResponse;
    m.value = value;
    return m;
  }
  
  getRtsAppConnectionIdRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsAppConnectionIdRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsAppConnectionIdRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsAppConnectionIdRequest;
    m.value = value;
    return m;
  }
  
  getRtsAppConnectionIdResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsAppConnectionIdResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsAppConnectionIdResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsAppConnectionIdResponse;
    m.value = value;
    return m;
  }
  
  getRtsResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_4WithRtsResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_4();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_4Tag.RtsResponse;
    m.value = value;
    return m;
  }
  
}


// UNION RtsConnection_5
Anki.Vector.ExternalComms.RtsConnection_5Tag = Object.freeze({
  Error:0x0,                      
  RtsConnRequest:0x1,             
  RtsConnResponse:0x2,            
  RtsNonceMessage:0x3,            
  RtsChallengeMessage:0x4,        
  RtsChallengeSuccessMessage:0x5, 
  RtsWifiConnectRequest:0x6,      
  RtsWifiConnectResponse_3:0x7,   
  RtsWifiIpRequest:0x8,           
  RtsWifiIpResponse:0x9,          
  RtsStatusRequest:0xa,           
  RtsStatusResponse_5:0xb,        
  RtsWifiScanRequest:0xc,         
  RtsWifiScanResponse_3:0xd,      
  RtsOtaUpdateRequest:0xe,        
  RtsOtaUpdateResponse:0xf,       
  RtsCancelPairing:0x10,          
  RtsForceDisconnect:0x11,        
  RtsAck:0x12,                    
  RtsWifiAccessPointRequest:0x13, 
  RtsWifiAccessPointResponse:0x14,
  RtsSshRequest:0x15,             
  RtsSshResponse:0x16,            
  RtsOtaCancelRequest:0x17,       
  RtsLogRequest:0x18,             
  RtsLogResponse:0x19,            
  RtsFileDownload:0x1a,           
  RtsWifiForgetRequest:0x1b,      
  RtsWifiForgetResponse:0x1c,     
  RtsCloudSessionRequest_5:0x1d,  
  RtsCloudSessionResponse:0x1e,   
  RtsAppConnectionIdRequest:0x1f, 
  RtsAppConnectionIdResponse:0x20,
  RtsResponse:0x21,               
  RtsSdkProxyRequest:0x22,        
  RtsSdkProxyResponse:0x23,       
  INVALID:0xFF                    
});

Anki.Vector.ExternalComms.RtsConnection_5 = class extends Clad {
  constructor() {
    super();
    this._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.INVALID;
  }
  
  get tag() {
    if(this._tag == null) {
      return Anki.Vector.ExternalComms.RtsConnection_5Tag.INVALID;
    }
    return this._tag;
  }
  
  get size() {
    if(this._tag == null || this._tag == Anki.Vector.ExternalComms.RtsConnection_5Tag.INVALID) {
      return 1;
    }
    return 1 + this.value.size;
  }
  
  pack() {
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_5Tag.INVALID) {
      return null;
    }
    let buffer = new Uint8Array(this.size);
    // add tag
    buffer.set([this._tag], 0);
    // add message
    buffer.set(this.value.pack(), 1);
    return buffer;
  }
  
  unpackStructure(tag, buffer) {
    let ret = null;
    switch(tag) {
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.Error:
      ret = new Anki.Vector.ExternalComms.Error();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsConnRequest:
      ret = new Anki.Vector.ExternalComms.RtsConnRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsConnResponse:
      ret = new Anki.Vector.ExternalComms.RtsConnResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsNonceMessage:
      ret = new Anki.Vector.ExternalComms.RtsNonceMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsChallengeMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsChallengeSuccessMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeSuccessMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiConnectRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiConnectResponse_3:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectResponse_3();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiIpRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiIpResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsStatusRequest:
      ret = new Anki.Vector.ExternalComms.RtsStatusRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsStatusResponse_5:
      ret = new Anki.Vector.ExternalComms.RtsStatusResponse_5();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiScanRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiScanResponse_3:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanResponse_3();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsOtaUpdateRequest:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsOtaUpdateResponse:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsCancelPairing:
      ret = new Anki.Vector.ExternalComms.RtsCancelPairing();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsForceDisconnect:
      ret = new Anki.Vector.ExternalComms.RtsForceDisconnect();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsAck:
      ret = new Anki.Vector.ExternalComms.RtsAck();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiAccessPointRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiAccessPointResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSshRequest:
      ret = new Anki.Vector.ExternalComms.RtsSshRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSshResponse:
      ret = new Anki.Vector.ExternalComms.RtsSshResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsOtaCancelRequest:
      ret = new Anki.Vector.ExternalComms.RtsOtaCancelRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsLogRequest:
      ret = new Anki.Vector.ExternalComms.RtsLogRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsLogResponse:
      ret = new Anki.Vector.ExternalComms.RtsLogResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsFileDownload:
      ret = new Anki.Vector.ExternalComms.RtsFileDownload();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiForgetRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiForgetRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiForgetResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiForgetResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsCloudSessionRequest_5:
      ret = new Anki.Vector.ExternalComms.RtsCloudSessionRequest_5();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsCloudSessionResponse:
      ret = new Anki.Vector.ExternalComms.RtsCloudSessionResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsAppConnectionIdRequest:
      ret = new Anki.Vector.ExternalComms.RtsAppConnectionIdRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsAppConnectionIdResponse:
      ret = new Anki.Vector.ExternalComms.RtsAppConnectionIdResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsResponse:
      ret = new Anki.Vector.ExternalComms.RtsResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSdkProxyRequest:
      ret = new Anki.Vector.ExternalComms.RtsSdkProxyRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSdkProxyResponse:
      ret = new Anki.Vector.ExternalComms.RtsSdkProxyResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    default:
      return ret;
    }
  }
  
  unpack(buffer) {
    this._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.INVALID;
    if(buffer.length == 0) {
      // error case
      return null;
    }
    this._tag = buffer[0];
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_5Tag.INVALID) {
      return null;
    }
    return this.unpackStructure(this._tag, buffer.slice(1));
  }
  
  string() {
    if(this._tag == null) {
      return "null";
    }
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_5Tag.INVALID) {
      return "INVALID";
    }
    return JSON.stringify(this);
  }
  
  getError() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.Error) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithError(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.Error;
    m.value = value;
    return m;
  }
  
  getRtsConnRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsConnRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsConnRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsConnRequest;
    m.value = value;
    return m;
  }
  
  getRtsConnResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsConnResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsConnResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsConnResponse;
    m.value = value;
    return m;
  }
  
  getRtsNonceMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsNonceMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsNonceMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsNonceMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsChallengeMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsChallengeMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsChallengeMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeSuccessMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsChallengeSuccessMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsChallengeSuccessMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsChallengeSuccessMessage;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiConnectRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiConnectRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiConnectRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectResponse_3() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiConnectResponse_3) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiConnectResponse_3(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiConnectResponse_3;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiIpRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiIpRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiIpRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiIpResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiIpResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiIpResponse;
    m.value = value;
    return m;
  }
  
  getRtsStatusRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsStatusRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsStatusRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsStatusRequest;
    m.value = value;
    return m;
  }
  
  getRtsStatusResponse_5() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsStatusResponse_5) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsStatusResponse_5(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsStatusResponse_5;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiScanRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiScanRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiScanRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanResponse_3() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiScanResponse_3) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiScanResponse_3(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiScanResponse_3;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsOtaUpdateRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsOtaUpdateRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsOtaUpdateRequest;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsOtaUpdateResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsOtaUpdateResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsOtaUpdateResponse;
    m.value = value;
    return m;
  }
  
  getRtsCancelPairing() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsCancelPairing) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsCancelPairing(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsCancelPairing;
    m.value = value;
    return m;
  }
  
  getRtsForceDisconnect() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsForceDisconnect) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsForceDisconnect(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsForceDisconnect;
    m.value = value;
    return m;
  }
  
  getRtsAck() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsAck) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsAck(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsAck;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiAccessPointRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiAccessPointRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiAccessPointRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiAccessPointResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiAccessPointResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiAccessPointResponse;
    m.value = value;
    return m;
  }
  
  getRtsSshRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSshRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsSshRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSshRequest;
    m.value = value;
    return m;
  }
  
  getRtsSshResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSshResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsSshResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSshResponse;
    m.value = value;
    return m;
  }
  
  getRtsOtaCancelRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsOtaCancelRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsOtaCancelRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsOtaCancelRequest;
    m.value = value;
    return m;
  }
  
  getRtsLogRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsLogRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsLogRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsLogRequest;
    m.value = value;
    return m;
  }
  
  getRtsLogResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsLogResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsLogResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsLogResponse;
    m.value = value;
    return m;
  }
  
  getRtsFileDownload() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsFileDownload) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsFileDownload(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsFileDownload;
    m.value = value;
    return m;
  }
  
  getRtsWifiForgetRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiForgetRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiForgetRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiForgetRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiForgetResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiForgetResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsWifiForgetResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsWifiForgetResponse;
    m.value = value;
    return m;
  }
  
  getRtsCloudSessionRequest_5() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsCloudSessionRequest_5) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsCloudSessionRequest_5(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsCloudSessionRequest_5;
    m.value = value;
    return m;
  }
  
  getRtsCloudSessionResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsCloudSessionResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsCloudSessionResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsCloudSessionResponse;
    m.value = value;
    return m;
  }
  
  getRtsAppConnectionIdRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsAppConnectionIdRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsAppConnectionIdRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsAppConnectionIdRequest;
    m.value = value;
    return m;
  }
  
  getRtsAppConnectionIdResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsAppConnectionIdResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsAppConnectionIdResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsAppConnectionIdResponse;
    m.value = value;
    return m;
  }
  
  getRtsResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsResponse;
    m.value = value;
    return m;
  }
  
  getRtsSdkProxyRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSdkProxyRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsSdkProxyRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSdkProxyRequest;
    m.value = value;
    return m;
  }
  
  getRtsSdkProxyResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSdkProxyResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_5WithRtsSdkProxyResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_5();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_5Tag.RtsSdkProxyResponse;
    m.value = value;
    return m;
  }
  
}


// UNION RtsConnection_1
Anki.Vector.ExternalComms.RtsConnection_1Tag = Object.freeze({
  Error:0x0,                      
  RtsConnRequest:0x1,             
  RtsConnResponse:0x2,            
  RtsNonceMessage:0x3,            
  RtsChallengeMessage:0x4,        
  RtsChallengeSuccessMessage:0x5, 
  RtsWifiConnectRequest:0x6,      
  RtsWifiConnectResponse:0x7,     
  RtsWifiIpRequest:0x8,           
  RtsWifiIpResponse:0x9,          
  RtsStatusRequest:0xa,           
  RtsStatusResponse:0xb,          
  RtsWifiScanRequest:0xc,         
  RtsWifiScanResponse:0xd,        
  RtsOtaUpdateRequest:0xe,        
  RtsOtaUpdateResponse:0xf,       
  RtsCancelPairing:0x10,          
  RtsForceDisconnect:0x11,        
  RtsAck:0x12,                    
  RtsWifiAccessPointRequest:0x13, 
  RtsWifiAccessPointResponse:0x14,
  RtsSshRequest:0x15,             
  RtsSshResponse:0x16,            
  INVALID:0xFF                    
});

Anki.Vector.ExternalComms.RtsConnection_1 = class extends Clad {
  constructor() {
    super();
    this._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.INVALID;
  }
  
  get tag() {
    if(this._tag == null) {
      return Anki.Vector.ExternalComms.RtsConnection_1Tag.INVALID;
    }
    return this._tag;
  }
  
  get size() {
    if(this._tag == null || this._tag == Anki.Vector.ExternalComms.RtsConnection_1Tag.INVALID) {
      return 1;
    }
    return 1 + this.value.size;
  }
  
  pack() {
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_1Tag.INVALID) {
      return null;
    }
    let buffer = new Uint8Array(this.size);
    // add tag
    buffer.set([this._tag], 0);
    // add message
    buffer.set(this.value.pack(), 1);
    return buffer;
  }
  
  unpackStructure(tag, buffer) {
    let ret = null;
    switch(tag) {
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.Error:
      ret = new Anki.Vector.ExternalComms.Error();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsConnRequest:
      ret = new Anki.Vector.ExternalComms.RtsConnRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsConnResponse:
      ret = new Anki.Vector.ExternalComms.RtsConnResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsNonceMessage:
      ret = new Anki.Vector.ExternalComms.RtsNonceMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsChallengeMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsChallengeSuccessMessage:
      ret = new Anki.Vector.ExternalComms.RtsChallengeSuccessMessage();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiConnectRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiConnectResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiConnectResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiIpRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiIpResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiIpResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsStatusRequest:
      ret = new Anki.Vector.ExternalComms.RtsStatusRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsStatusResponse:
      ret = new Anki.Vector.ExternalComms.RtsStatusResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiScanRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiScanResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiScanResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsOtaUpdateRequest:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsOtaUpdateResponse:
      ret = new Anki.Vector.ExternalComms.RtsOtaUpdateResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsCancelPairing:
      ret = new Anki.Vector.ExternalComms.RtsCancelPairing();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsForceDisconnect:
      ret = new Anki.Vector.ExternalComms.RtsForceDisconnect();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsAck:
      ret = new Anki.Vector.ExternalComms.RtsAck();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiAccessPointRequest:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiAccessPointResponse:
      ret = new Anki.Vector.ExternalComms.RtsWifiAccessPointResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsSshRequest:
      ret = new Anki.Vector.ExternalComms.RtsSshRequest();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsSshResponse:
      ret = new Anki.Vector.ExternalComms.RtsSshResponse();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    default:
      return ret;
    }
  }
  
  unpack(buffer) {
    this._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.INVALID;
    if(buffer.length == 0) {
      // error case
      return null;
    }
    this._tag = buffer[0];
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_1Tag.INVALID) {
      return null;
    }
    return this.unpackStructure(this._tag, buffer.slice(1));
  }
  
  string() {
    if(this._tag == null) {
      return "null";
    }
    if(this._tag == Anki.Vector.ExternalComms.RtsConnection_1Tag.INVALID) {
      return "INVALID";
    }
    return JSON.stringify(this);
  }
  
  getError() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.Error) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithError(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.Error;
    m.value = value;
    return m;
  }
  
  getRtsConnRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsConnRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsConnRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsConnRequest;
    m.value = value;
    return m;
  }
  
  getRtsConnResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsConnResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsConnResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsConnResponse;
    m.value = value;
    return m;
  }
  
  getRtsNonceMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsNonceMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsNonceMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsNonceMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsChallengeMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsChallengeMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsChallengeMessage;
    m.value = value;
    return m;
  }
  
  getRtsChallengeSuccessMessage() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsChallengeSuccessMessage) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsChallengeSuccessMessage(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsChallengeSuccessMessage;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiConnectRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsWifiConnectRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiConnectRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiConnectResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiConnectResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsWifiConnectResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiConnectResponse;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiIpRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsWifiIpRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiIpRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiIpResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiIpResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsWifiIpResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiIpResponse;
    m.value = value;
    return m;
  }
  
  getRtsStatusRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsStatusRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsStatusRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsStatusRequest;
    m.value = value;
    return m;
  }
  
  getRtsStatusResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsStatusResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsStatusResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsStatusResponse;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiScanRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsWifiScanRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiScanRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiScanResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiScanResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsWifiScanResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiScanResponse;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsOtaUpdateRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsOtaUpdateRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsOtaUpdateRequest;
    m.value = value;
    return m;
  }
  
  getRtsOtaUpdateResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsOtaUpdateResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsOtaUpdateResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsOtaUpdateResponse;
    m.value = value;
    return m;
  }
  
  getRtsCancelPairing() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsCancelPairing) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsCancelPairing(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsCancelPairing;
    m.value = value;
    return m;
  }
  
  getRtsForceDisconnect() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsForceDisconnect) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsForceDisconnect(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsForceDisconnect;
    m.value = value;
    return m;
  }
  
  getRtsAck() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsAck) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsAck(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsAck;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiAccessPointRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsWifiAccessPointRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiAccessPointRequest;
    m.value = value;
    return m;
  }
  
  getRtsWifiAccessPointResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiAccessPointResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsWifiAccessPointResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsWifiAccessPointResponse;
    m.value = value;
    return m;
  }
  
  getRtsSshRequest() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsSshRequest) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsSshRequest(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsSshRequest;
    m.value = value;
    return m;
  }
  
  getRtsSshResponse() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsSshResponse) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnection_1WithRtsSshResponse(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection_1();
    m._tag = Anki.Vector.ExternalComms.RtsConnection_1Tag.RtsSshResponse;
    m.value = value;
    return m;
  }
  
}


// UNION RtsConnection
Anki.Vector.ExternalComms.RtsConnectionTag = Object.freeze({
  Error:0x0,          
  RtsConnection_2:0x2,
  RtsConnection_3:0x3,
  RtsConnection_4:0x4,
  RtsConnection_5:0x5,
  INVALID:0xFF        
});

Anki.Vector.ExternalComms.RtsConnection = class extends Clad {
  constructor() {
    super();
    this._tag = Anki.Vector.ExternalComms.RtsConnectionTag.INVALID;
  }
  
  get tag() {
    if(this._tag == null) {
      return Anki.Vector.ExternalComms.RtsConnectionTag.INVALID;
    }
    return this._tag;
  }
  
  get size() {
    if(this._tag == null || this._tag == Anki.Vector.ExternalComms.RtsConnectionTag.INVALID) {
      return 1;
    }
    return 1 + this.value.size;
  }
  
  pack() {
    if(this._tag == Anki.Vector.ExternalComms.RtsConnectionTag.INVALID) {
      return null;
    }
    let buffer = new Uint8Array(this.size);
    // add tag
    buffer.set([this._tag], 0);
    // add message
    buffer.set(this.value.pack(), 1);
    return buffer;
  }
  
  unpackStructure(tag, buffer) {
    let ret = null;
    switch(tag) {
    case Anki.Vector.ExternalComms.RtsConnectionTag.Error:
      ret = new Anki.Vector.ExternalComms.Error();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_2:
      ret = new Anki.Vector.ExternalComms.RtsConnection_2();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_3:
      ret = new Anki.Vector.ExternalComms.RtsConnection_3();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_4:
      ret = new Anki.Vector.ExternalComms.RtsConnection_4();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_5:
      ret = new Anki.Vector.ExternalComms.RtsConnection_5();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    default:
      return ret;
    }
  }
  
  unpack(buffer) {
    this._tag = Anki.Vector.ExternalComms.RtsConnectionTag.INVALID;
    if(buffer.length == 0) {
      // error case
      return null;
    }
    this._tag = buffer[0];
    if(this._tag == Anki.Vector.ExternalComms.RtsConnectionTag.INVALID) {
      return null;
    }
    return this.unpackStructure(this._tag, buffer.slice(1));
  }
  
  string() {
    if(this._tag == null) {
      return "null";
    }
    if(this._tag == Anki.Vector.ExternalComms.RtsConnectionTag.INVALID) {
      return "INVALID";
    }
    return JSON.stringify(this);
  }
  
  getError() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnectionTag.Error) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnectionWithError(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection();
    m._tag = Anki.Vector.ExternalComms.RtsConnectionTag.Error;
    m.value = value;
    return m;
  }
  
  getRtsConnection_2() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_2) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnectionWithRtsConnection_2(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection();
    m._tag = Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_2;
    m.value = value;
    return m;
  }
  
  getRtsConnection_3() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_3) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnectionWithRtsConnection_3(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection();
    m._tag = Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_3;
    m.value = value;
    return m;
  }
  
  getRtsConnection_4() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_4) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnectionWithRtsConnection_4(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection();
    m._tag = Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_4;
    m.value = value;
    return m;
  }
  
  getRtsConnection_5() {
    if(this.tag != Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_5) {
      return null;
    }
    return this.value;
  }
  
  static NewRtsConnectionWithRtsConnection_5(value) {
    let m = new Anki.Vector.ExternalComms.RtsConnection();
    m._tag = Anki.Vector.ExternalComms.RtsConnectionTag.RtsConnection_5;
    m.value = value;
    return m;
  }
  
}


// MESSAGE DeprecatedAndReserved
Anki.Vector.ExternalComms.DeprecatedAndReserved = class extends Clad {
  constructor() {
    super();
  }
  
  type() {
    return "DeprecatedAndReserved";
  }
  
  get size() {
    return 0
  }
  
  unpack(buffer) {
    let cladBuffer = new CladBuffer(buffer);
  }
  
  pack() {
    let buffer = new Uint8Array(this.size);
    let cladBuffer = new CladBuffer(buffer);
    
    try {
    }
    catch {
      return null;
    }
    return cladBuffer.buffer;
  }
  
  string() {
    return ""
  }
}


// UNION ExternalComms
Anki.Vector.ExternalComms.ExternalCommsTag = Object.freeze({
  Error:0x0,          
  RtsConnection_1:0x1,
  RtsConnection:0x4,  
  INVALID:0xFF        
});

Anki.Vector.ExternalComms.ExternalComms = class extends Clad {
  constructor() {
    super();
    this._tag = Anki.Vector.ExternalComms.ExternalCommsTag.INVALID;
  }
  
  get tag() {
    if(this._tag == null) {
      return Anki.Vector.ExternalComms.ExternalCommsTag.INVALID;
    }
    return this._tag;
  }
  
  get size() {
    if(this._tag == null || this._tag == Anki.Vector.ExternalComms.ExternalCommsTag.INVALID) {
      return 1;
    }
    return 1 + this.value.size;
  }
  
  pack() {
    if(this._tag == Anki.Vector.ExternalComms.ExternalCommsTag.INVALID) {
      return null;
    }
    let buffer = new Uint8Array(this.size);
    // add tag
    buffer.set([this._tag], 0);
    // add message
    buffer.set(this.value.pack(), 1);
    return buffer;
  }
  
  unpackStructure(tag, buffer) {
    let ret = null;
    switch(tag) {
    case Anki.Vector.ExternalComms.ExternalCommsTag.Error:
      ret = new Anki.Vector.ExternalComms.Error();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.ExternalCommsTag.RtsConnection_1:
      ret = new Anki.Vector.ExternalComms.RtsConnection_1();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    case Anki.Vector.ExternalComms.ExternalCommsTag.RtsConnection:
      ret = new Anki.Vector.ExternalComms.RtsConnection();
      ret.unpack(buffer);
      this.value = ret;
      return ret;
    default:
      return ret;
    }
  }
  
  unpack(buffer) {
    this._tag = Anki.Vector.ExternalComms.ExternalCommsTag.INVALID;
    if(buffer.length == 0) {
      // error case
      return null;
    }
    this._tag = buffer[0];
    if(this._tag == Anki.Vector.ExternalComms.ExternalCommsTag.INVALID) {
      return null;
    }
    return this.unpackStructure(this._tag, buffer.slice(1));
  }
  
  string() {
    if(this._tag == null) {
      return "null";
    }
    if(this._tag == Anki.Vector.ExternalComms.ExternalCommsTag.INVALID) {
      return "INVALID";
    }
    return JSON.stringify(this);
  }
  
  getError() {
    if(this.tag != Anki.Vector.ExternalComms.ExternalCommsTag.Error) {
      return null;
    }
    return this.value;
  }
  
  static NewExternalCommsWithError(value) {
    let m = new Anki.Vector.ExternalComms.ExternalComms();
    m._tag = Anki.Vector.ExternalComms.ExternalCommsTag.Error;
    m.value = value;
    return m;
  }
  
  getRtsConnection_1() {
    if(this.tag != Anki.Vector.ExternalComms.ExternalCommsTag.RtsConnection_1) {
      return null;
    }
    return this.value;
  }
  
  static NewExternalCommsWithRtsConnection_1(value) {
    let m = new Anki.Vector.ExternalComms.ExternalComms();
    m._tag = Anki.Vector.ExternalComms.ExternalCommsTag.RtsConnection_1;
    m.value = value;
    return m;
  }
  
  getRtsConnection() {
    if(this.tag != Anki.Vector.ExternalComms.ExternalCommsTag.RtsConnection) {
      return null;
    }
    return this.value;
  }
  
  static NewExternalCommsWithRtsConnection(value) {
    let m = new Anki.Vector.ExternalComms.ExternalComms();
    m._tag = Anki.Vector.ExternalComms.ExternalCommsTag.RtsConnection;
    m.value = value;
    return m;
  }
  
}


module.exports = { Anki };

