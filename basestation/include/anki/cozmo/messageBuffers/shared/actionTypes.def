// Autogenerated C++ message buffer code.
// Source: anki/cozmo/messageBuffers/shared/actionTypes.clad
// Full command line: ../tools/anki-util/tools/message-buffers/emitters/CPP_emitter.py -C src -r ../basestation/include -o ../basestation/src --header-output-extension .def anki/cozmo/messageBuffers/shared/actionTypes.clad

#ifndef __ANKI_COZMO_MESSAGE_BUFFERS_SHARED_ACTION_TYPES_DEF__
#define __ANKI_COZMO_MESSAGE_BUFFERS_SHARED_ACTION_TYPES_DEF__

#include <CLAD/SafeMessageBuffer.h>
#include <array>
#include <cassert>
#include <cstdint>
#include <string>
#include <vector>

namespace Anki {

namespace Cozmo {

// ENUM RobotActionType
enum class RobotActionType : int32_t {
	COMPOUND = -2,	// -2
	UNKNOWN = -1,	// -1
	DRIVE_TO_POSE,	// 0
	DRIVE_TO_OBJECT,	// 1
	DRIVE_TO_PLACE_CARRIED_OBJECT,	// 2
	TURN_IN_PLACE,	// 3
	MOVE_HEAD_TO_ANGLE,	// 4
	PICKUP_OBJECT_LOW,	// 5
	PICKUP_OBJECT_HIGH,	// 6
	PLACE_OBJECT_LOW,	// 7
	PLACE_OBJECT_HIGH,	// 8
	ROLL_OBJECT_LOW,	// 9
	PICK_AND_PLACE_INCOMPLETE,	// 10
	CROSS_BRIDGE,	// 11
	ASCEND_OR_DESCEND_RAMP,	// 12
	MOUNT_CHARGER,	// 13
	TRAVERSE_OBJECT,	// 14
	DRIVE_TO_AND_TRAVERSE_OBJECT,	// 15
	FACE_OBJECT,	// 16
	VISUALLY_VERIFY_OBJECT,	// 17
	PLAY_ANIMATION,	// 18
	PLAY_SOUND,	// 19
	WAIT,	// 20
	MOVE_LIFT_TO_HEIGHT	// 21
};

const char* RobotActionTypeToString(const RobotActionType m);
// ENUM ActionResult
enum class ActionResult : int32_t {
	SUCCESS = 0,	// 0
	RUNNING,	// 1
	FAILURE_TIMEOUT,	// 2
	FAILURE_PROCEED,	// 3
	FAILURE_RETRY,	// 4
	FAILURE_ABORT,	// 5
	CANCELLED	// 6
};

const char* ActionResultToString(const ActionResult m);
// STRUCTURE ActionCompletedStruct
struct ActionCompletedStruct
{
	std::array<int32_t, 5> objectIDs;
	uint8_t numObjects;
	std::string animName;
	
	/**** Constructors ****/
	ActionCompletedStruct() = default;
	ActionCompletedStruct(const ActionCompletedStruct& other) = default;
	ActionCompletedStruct(ActionCompletedStruct& other) = default;
	ActionCompletedStruct(ActionCompletedStruct&& other) noexcept = default;
	ActionCompletedStruct& operator=(const ActionCompletedStruct& other) = default;
	ActionCompletedStruct& operator=(ActionCompletedStruct&& other) noexcept = default;
	
	explicit ActionCompletedStruct(const std::array<int32_t, 5>& objectIDs
		,uint8_t numObjects
		,const std::string& animName)
	:objectIDs(objectIDs)
	,numObjects(numObjects)
	,animName(animName)
	{}

	explicit ActionCompletedStruct(const uint8_t* buff, size_t len);
	explicit ActionCompletedStruct(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ActionCompletedStruct& other) const;
	bool operator!=(const ActionCompletedStruct& other) const;
};

} // namespace Cozmo

} // namespace Anki

#endif // __ANKI_COZMO_MESSAGE_BUFFERS_SHARED_ACTION_TYPES_DEF__
