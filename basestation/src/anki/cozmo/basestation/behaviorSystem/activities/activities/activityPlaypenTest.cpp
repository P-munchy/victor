/**
 * File: activityPlaypenTest.cpp
 *
 * Author: Al Chaussee
 * Created: 07/25/17
 *
 * Description:
 *
 * Copyright: Anki, Inc. 2017
 *
 **/

#include "anki/cozmo/basestation/behaviorSystem/activities/activities/activityPlaypenTest.h"

#include "anki/cozmo/basestation/behaviorSystem/behaviorManager.h"
#include "anki/cozmo/basestation/behaviorSystem/behaviors/devBehaviors/playpen/iBehaviorPlaypen.h"
#include "anki/cozmo/basestation/cozmoContext.h"
#include "anki/cozmo/basestation/robot.h"
#include "anki/cozmo/basestation/robotManager.h"

namespace Anki {
namespace Cozmo {

namespace {

}

ActivityPlaypenTest::ActivityPlaypenTest(Robot& robot, const Json::Value& config)
: IActivity(robot, config)
{
  const auto& BM = robot.GetBehaviorManager();
  
  IBehaviorPtr cameraCalibBehavior = BM.FindBehaviorByID(BehaviorID::PlaypenCameraCalibration);
  DEV_ASSERT(cameraCalibBehavior != nullptr &&
             cameraCalibBehavior->GetClass() == BehaviorClass::PlaypenCameraCalibration,
             "ActivityPlaypenTest.ImproperClassRetrievedForName");
  
  _playpenBehaviors.push_back(std::static_pointer_cast<IBehaviorPlaypen>(cameraCalibBehavior));


  _currentPlaypenBehaviorIter = _playpenBehaviors.begin();
}

void ActivityPlaypenTest::OnSelectedInternal(Robot& robot)
{
  // Disable all reactions, we will handle them ourselves
  SmartDisableReactionsWithLock(robot, GetIDStr(), ReactionTriggerHelpers::kAffectAllArray);
}

Result ActivityPlaypenTest::Update(Robot& robot)
{
  if(_currentBehavior != nullptr)
  {
    if(_currentBehavior->GetResults() == BehaviorStatus::Failure)
    {
      PRINT_NAMED_INFO("", "Behavior %s failed", _currentBehavior->GetIDStr().c_str());
      HandleFailure(robot);
      return RESULT_FAIL;
    }
  }
  return RESULT_OK;
}

IBehaviorPtr ActivityPlaypenTest::ChooseNextBehaviorInternal(Robot& robot, IBehaviorPtr currentRunningBehavior)
{
  if(_currentBehavior == currentRunningBehavior)
  {
    return _currentBehavior;
  }
  
  if(currentRunningBehavior == nullptr)
  {
    // Once motor calibration completes start running through our list of playpen behaviors
    if(_motorCalibBehavior->GetResults() == BehaviorStatus::Complete)
    {
      if(_currentPlaypenBehaviorIter != _playpenBehaviors.end())
      {
        return *_currentPlaypenBehaviorIter++;
      }
      // All playpen behaviors have run so success!
      else
      {
        HandleSuccess(robot);
        return nullptr;
      }
    }
    // Else motor calibration hasn't run so it should
    else
    {
      return _motorCalibBehavior;
    }
  }
  else
  {
    PRINT_NAMED_ERROR("", "Shouldn't be here");
    return nullptr;
  }
}

void ActivityPlaypenTest::HandleSuccess(Robot& robot)
{
  
}

void ActivityPlaypenTest::HandleFailure(Robot& robot)
{
  
}

}
}

