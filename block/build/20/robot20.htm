<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\20\robot20.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\20\robot20.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri May 30 15:45:51 2014
<BR><P>
<H3>Maximum Stack Usage =       5328 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Anki::Cozmo::Robot::step_LongExecution() &rArr; Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*) &rArr; std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[176]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">NMI_Handler</a><BR>
 <LI><a href="#[1f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">HardFault_Handler</a><BR>
 <LI><a href="#[20]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">MemManage_Handler</a><BR>
 <LI><a href="#[21]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">BusFault_Handler</a><BR>
 <LI><a href="#[22]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">UsageFault_Handler</a><BR>
 <LI><a href="#[23]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">SVC_Handler</a><BR>
 <LI><a href="#[24]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">DebugMon_Handler</a><BR>
 <LI><a href="#[25]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">PendSV_Handler</a><BR>
 <LI><a href="#[26]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">SysTick_Handler</a><BR>
 <LI><a href="#[39]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC_IRQHandler</a><BR>
 <LI><a href="#[127]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[127]">_sys_exit</a><BR>
 <LI><a href="#[3e7]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29a]">__rw::__rw_throw(int, ...)</a><BR>
 <LI><a href="#[36e]">__rw::__rw_allocate(unsigned, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29a]">__rw::__rw_throw(int, ...)</a><BR>
 <LI><a href="#[29b]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29a]">__rw::__rw_throw(int, ...)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a7]">&lang;Func5&rang;</a> from locale.o(i.<Func5>) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[39]">ADC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[21]">BusFault_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3b]">CAN1_RX0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3c]">CAN1_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3d]">CAN1_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3a]">CAN1_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[67]">CAN2_RX0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[68]">CAN2_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[69]">CAN2_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[66]">CAN2_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[76]">CRYP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[75]">DCMI_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream4_IRQHandler</a> from uart.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[56]">DMA1_Stream7_IRQHandler</a> from wifi.o(i.DMA1_Stream7_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[81]">DMA2D_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream1_IRQHandler</a> from frontcamera.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream2_IRQHandler</a> from spi.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[24]">DebugMon_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[64]">ETH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[65]">ETH_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2d]">EXTI0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4f]">EXTI15_10_IRQHandler</a> from wifi.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2e]">EXTI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2f]">EXTI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[30]">EXTI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[31]">EXTI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3e]">EXTI9_5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2b]">FLASH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[57]">FMC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[78]">FPU_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[77]">HASH_RNG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1f]">HardFault_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[47]">I2C1_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[46]">I2C1_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[49]">I2C2_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[48]">I2C2_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[70]">I2C3_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6f]">I2C3_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[80]">LTDC_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7f]">LTDC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[20]">MemManage_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1e]">NMI_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6a]">OTG_FS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[51]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[72]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[71]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[74]">OTG_HS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[28]">PVD_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[25]">PendSV_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2c]">RCC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[50]">RTC_Alarm_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2a]">RTC_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1d]">Reset_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7e]">SAI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[58]">SDIO_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4a]">SPI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4b]">SPI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5a]">SPI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7b]">SPI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7c]">SPI5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7d]">SPI6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[23]">SVC_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[26]">SysTick_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[82]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[29]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[42]">TIM1_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[41]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[40]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[43]">TIM2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[44]">TIM3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[45]">TIM4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[59]">TIM5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5d]">TIM6_DAC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5e]">TIM7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[52]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[55]">TIM8_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[54]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[53]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5b]">UART4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5c]">UART5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[79]">UART7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7a]">UART8_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4c]">USART1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4d]">USART2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4e]">USART3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6e]">USART6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[22]">UsageFault_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[27]">WWDG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[ac]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[8c]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[95]">Anki::Cozmo::TestModeController::IMUTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController13IMUTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[94]">Anki::Cozmo::TestModeController::HeadTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14HeadTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[92]">Anki::Cozmo::TestModeController::LiftTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14LiftTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[97]">Anki::Cozmo::TestModeController::StopTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14StopTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[91]">Anki::Cozmo::TestModeController::DriveTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController15DriveTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[96]">Anki::Cozmo::TestModeController::LightTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController15LightTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[8f]">Anki::Cozmo::TestModeController::DockPathTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18DockPathTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[98]">Anki::Cozmo::TestModeController::MaxPowerTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18MaxPowerTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[93]">Anki::Cozmo::TestModeController::LiftToggleTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController20LiftToggleTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[90]">Anki::Cozmo::TestModeController::PathFollowTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController20PathFollowTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[8e]">Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController22PickAndPlaceTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
 <LI><a href="#[1a]">Anki::Cozmo::HAL::UARTGetCharacter(unsigned)</a> from uart.o(i._ZN4Anki5Cozmo3HAL16UARTGetCharacterEj) referenced 2 times from uart.o(.data)
 <LI><a href="#[9a]">Anki::Cozmo::HAL::WifiGetCharacter(unsigned)</a> from wifi.o(i._ZN4Anki5Cozmo3HAL16WifiGetCharacterEj) referenced from wifi.o(i._ZN4Anki5Cozmo3HAL13WifiConfigureEv)
 <LI><a href="#[99]">Anki::Cozmo::HAL::WifiStateMachine()</a> from wifi.o(i._ZN4Anki5Cozmo3HAL16WifiStateMachineEv) referenced from wifi.o(i._ZN4Anki5Cozmo3HAL13WifiConfigureEv)
 <LI><a href="#[19]">Anki::Cozmo::HAL::UARTStartTransfer()</a> from uart.o(i._ZN4Anki5Cozmo3HAL17UARTStartTransferEv) referenced 2 times from uart.o(.data)
 <LI><a href="#[b5]">Anki::Cozmo::Messages::ProcessMoveHeadMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages22ProcessMoveHeadMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b4]">Anki::Cozmo::Messages::ProcessMoveLiftMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages22ProcessMoveLiftMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b9]">Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages23ProcessClearPathMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c8]">Anki::Cozmo::Messages::ProcessPrintTextMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages23ProcessPrintTextMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[cb]">Anki::Cozmo::Messages::ProcessImageChunkMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages24ProcessImageChunkMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b1]">Anki::Cozmo::Messages::ProcessRobotStateMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages24ProcessRobotStateMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b2]">Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages25ProcessDriveWheelsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[bc]">Anki::Cozmo::Messages::ProcessExecutePathMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages25ProcessExecutePathMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ce]">Anki::Cozmo::Messages::ProcessTrackerQuadMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages25ProcessTrackerQuadMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ca]">Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages26ProcessImageRequestMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b7]">Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages26ProcessSetHeadAngleMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[cd]">Anki::Cozmo::Messages::ProcessSetHeadlightMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages26ProcessSetHeadlightMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[be]">Anki::Cozmo::Messages::ProcessVisionMarkerMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages26ProcessVisionMarkerMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[bd]">Anki::Cozmo::Messages::ProcessDockWithBlockMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessDockWithBlockMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b6]">Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessSetLiftHeightMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[cc]">Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessStartTestModeMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b8]">Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessStopAllMotorsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c6]">Anki::Cozmo::Messages::ProcessRobotAvailableMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages28ProcessRobotAvailableMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c9]">Anki::Cozmo::Messages::ProcessHeadAngleUpdateMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages29ProcessHeadAngleUpdateMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c3]">Anki::Cozmo::Messages::ProcessRequestCamCalibMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages29ProcessRequestCamCalibMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c0]">Anki::Cozmo::Messages::ProcessMatMarkerObservedMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages31ProcessMatMarkerObservedMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c7]">Anki::Cozmo::Messages::ProcessRobotAddedToWorldMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages31ProcessRobotAddedToWorldMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c1]">Anki::Cozmo::Messages::ProcessDockingErrorSignalMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages32ProcessDockingErrorSignalMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[bf]">Anki::Cozmo::Messages::ProcessBlockMarkerObservedMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages33ProcessBlockMarkerObservedMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[bb]">Anki::Cozmo::Messages::ProcessAppendPathSegmentArcMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages34ProcessAppendPathSegmentArcMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b3]">Anki::Cozmo::Messages::ProcessDriveWheelsCurvatureMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages34ProcessDriveWheelsCurvatureMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c5]">Anki::Cozmo::Messages::ProcessMatCameraCalibrationMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages34ProcessMatCameraCalibrationMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c2]">Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAbsLocalizationUpdateMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ba]">Anki::Cozmo::Messages::ProcessAppendPathSegmentLineMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAppendPathSegmentLineMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c4]">Anki::Cozmo::Messages::ProcessHeadCameraCalibrationMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages35ProcessHeadCameraCalibrationMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[9b]">Anki::Cozmo::Messages::SendText(const char*, std::__va_list)</a> from messages.o(i._ZN4Anki5Cozmo8Messages8SendTextEPKcSt9__va_list) referenced from cozmobot.o(i._ZN4Anki5Cozmo5Robot4InitEv)
 <LI><a href="#[a0]">Anki::Cozmo::IMUFilter::StartLiftTest()</a> from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter13StartLiftTestEv) referenced from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
 <LI><a href="#[9c]">Anki::Cozmo::IMUFilter::ToggleHeadLights()</a> from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter16ToggleHeadLightsEv) referenced from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
 <LI><a href="#[9f]">Anki::Cozmo::IMUFilter::StartPathFollowTest()</a> from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter19StartPathFollowTestEv) referenced from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
 <LI><a href="#[9d]">Anki::Cozmo::IMUFilter::TurnOnIndicatorLight()</a> from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter20TurnOnIndicatorLightEv) referenced from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
 <LI><a href="#[9e]">Anki::Cozmo::IMUFilter::StartPickAndPlaceTest()</a> from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter21StartPickAndPlaceTestEv) referenced from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
 <LI><a href="#[a1]">Anki::Cozmo::IMUFilter::TurnOffIndicatorLight()</a> from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter21TurnOffIndicatorLightEv) referenced from imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
 <LI><a href="#[af]">Anki::Embedded::Array&lang;float&rang;::Array()</a> from perspectiveposeestimation.o(t._ZN4Anki8Embedded5ArrayIfEC1Ev) referenced from perspectiveposeestimation.o(t._ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_)
 <LI><a href="#[a4]">Anki::Embedded::Array&lang;unsigned char&rang;::Array()</a> from computecharacteristicscale.o(t._ZN4Anki8Embedded5ArrayIhEC1Ev) referenced from computecharacteristicscale.o(i._ZN4Anki8Embedded39ExtractComponentsViaCharacteristicScaleERKNS0_5ArrayIhEEiissRNS0_19ConnectedComponentsENS0_11MemoryStackES7_)
 <LI><a href="#[8d]">Anki::Embedded::Point&lang;float&rang;::Point()</a> from visionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev) referenced from visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem14LookForMarkersERKNS_8Embedded5ArrayIhEERKNS1_31DetectFiducialMarkersParametersERNS2_15FixedLengthListINS2_12VisionMarkerEEENS2_11MemoryStackESE_SE_)
 <LI><a href="#[8d]">Anki::Embedded::Point&lang;float&rang;::Point()</a> from visionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev) referenced from fiducialmarkers.o(i._ZN4Anki8Embedded12VisionMarker7ExtractERKNS0_5ArrayIhEERKNS0_13QuadrilateralIsEERKNS2_IfEEfiiNS0_11MemoryStackE)
 <LI><a href="#[8d]">Anki::Embedded::Point&lang;float&rang;::Point()</a> from visionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev) referenced from transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERNS0_11MemoryStackE)
 <LI><a href="#[8d]">Anki::Embedded::Point&lang;float&rang;::Point()</a> from visionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev) referenced from lucaskanade_general.o(i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18get_transformationEv)
 <LI><a href="#[8d]">Anki::Embedded::Point&lang;float&rang;::Point()</a> from visionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev) referenced from visionsystem.o(i.__sti___16_visionSystem_cpp)
 <LI><a href="#[8d]">Anki::Embedded::Point&lang;float&rang;::Point()</a> from visionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev) referenced from lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded13QuadrilateralIfEC1ERKNS0_5PointIfEES6_S6_S6_)
 <LI><a href="#[8d]">Anki::Embedded::Point&lang;float&rang;::Point()</a> from visionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev) referenced from transformations.o(t._ZN4Anki8Embedded13QuadrilateralIfEC1Ev)
 <LI><a href="#[a3]">Anki::Embedded::Point&lang;short&rang;::Point()</a> from computequadrilaterals.o(t._ZN4Anki8Embedded5PointIsEC1Ev) referenced from transformations.o(i._ZN4Anki8Embedded15Transformations25ComputeHomographyFromQuadERKNS0_13QuadrilateralIsEERNS0_5ArrayIfEENS0_11MemoryStackE)
 <LI><a href="#[a3]">Anki::Embedded::Point&lang;short&rang;::Point()</a> from computequadrilaterals.o(t._ZN4Anki8Embedded5PointIsEC1Ev) referenced from computequadrilaterals.o(i._ZN4Anki8Embedded44ComputeQuadrilateralsFromConnectedComponentsERKNS0_19ConnectedComponentsEiiiiiRNS0_15FixedLengthListINS0_13QuadrilateralIsEEEENS0_11MemoryStackE)
 <LI><a href="#[a3]">Anki::Embedded::Point&lang;short&rang;::Point()</a> from computequadrilaterals.o(t._ZN4Anki8Embedded5PointIsEC1Ev) referenced from computequadrilaterals.o(t._ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_)
 <LI><a href="#[a2]">Anki::Embedded::Point3&lang;float&rang;::Point3()</a> from visionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Ev) referenced from lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEifiifffffNS0_11MemoryStackERSD_SD_)
 <LI><a href="#[a2]">Anki::Embedded::Point3&lang;float&rang;::Point3()</a> from visionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Ev) referenced from visionsystem.o(i.__sti___16_visionSystem_cpp)
 <LI><a href="#[a2]">Anki::Embedded::Point3&lang;float&rang;::Point3()</a> from visionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Ev) referenced from perspectiveposeestimation.o(t._ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_)
 <LI><a href="#[a5]">Anki::Planning::PathSegment::PathSegment()</a> from path.o(i._ZN4Anki8Planning11PathSegmentC1Ev) referenced from path.o(i._ZN4Anki8Planning18GenerateDubinsPathERNS0_4PathEffffffffffffPf)
 <LI><a href="#[a5]">Anki::Planning::PathSegment::PathSegment()</a> from path.o(i._ZN4Anki8Planning11PathSegmentC1Ev) referenced from path.o(i._ZN4Anki8Planning4PathC1Ev)
 <LI><a href="#[d0]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[d0]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[b0]">__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj) referenced from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
 <LI><a href="#[ae]">__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</a> from rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev) referenced from rwcats.o(i.__sti___10_rwcats_cpp)
 <LI><a href="#[ab]">__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</a> from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev) referenced from messages.o(i._ZSt13__rw_get_catsv)
 <LI><a href="#[1c]">__rw::__rw_throw_exception_noex(int, char*)</a> from rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc) referenced 2 times from rwthrowproc_noex.o(.data)
 <LI><a href="#[d4]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[da]">std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[d9]">std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[a6]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[a6]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
 <LI><a href="#[d1]">std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</a> from char.o(i._ZNSt12ctype_bynameIcED0Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[d3]">std::__rw_exception::~__rw_exception()</a> from rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[a9]">std::__rw_open_cat_data::__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataC1Ev) referenced from messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale)
 <LI><a href="#[a8]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale)
 <LI><a href="#[a8]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
 <LI><a href="#[d2]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[d2]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[d6]">std::ctype&lang;char&rang;::~ctype__deallocating()</a> from char.o(i._ZNSt5ctypeIcED0Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[d5]">std::ctype&lang;char&rang;::~ctype()</a> from char.o(i._ZNSt5ctypeIcED1Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[cf]">std::locale::facet::~facet__deallocating()</a> from rwstdexcept.o(i._ZNSt6locale5facetD0Ev) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[aa]">std::locale::~locale()</a> from locale.o(i._ZNSt6localeD1Ev) referenced from locale.o(i._ZNSt6locale7classicEv)
 <LI><a href="#[d8]">std::messages&lang;char&rang;::~messages__deallocating()</a> from rwstdexcept.o(i._ZNSt8messagesIcED0Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[d7]">std::messages&lang;char&rang;::~messages()</a> from rwstdexcept.o(i._ZNSt8messagesIcED1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[ad]">operator delete[] (void*)</a> from array_del.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[ea]">__main</a> from __main.o(!!!main) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[e8]">__sti___10_locale_cpp</a> from locale.o(i.__sti___10_locale_cpp) referenced from locale.o(.init_array)
 <LI><a href="#[e9]">__sti___10_rwcats_cpp</a> from rwcats.o(i.__sti___10_rwcats_cpp) referenced from rwcats.o(.init_array)
 <LI><a href="#[df]">__sti___12_messages_cpp</a> from messages.o(i.__sti___12_messages_cpp) referenced from messages.o(.init_array)
 <LI><a href="#[e5]">__sti___13_trig_fast_cpp</a> from trig_fast.o(i.__sti___13_trig_fast_cpp) referenced from trig_fast.o(.init_array)
 <LI><a href="#[de]">__sti___16_localization_cpp</a> from localization.o(i.__sti___16_localization_cpp) referenced from localization.o(.init_array)
 <LI><a href="#[e0]">__sti___16_pathFollower_cpp</a> from pathfollower.o(i.__sti___16_pathFollower_cpp) referenced from pathfollower.o(.init_array)
 <LI><a href="#[e4]">__sti___16_visionSystem_cpp</a> from visionsystem.o(i.__sti___16_visionSystem_cpp) referenced from visionsystem.o(.init_array)
 <LI><a href="#[dc]">__sti___18_headController_cpp</a> from headcontroller.o(i.__sti___18_headController_cpp) referenced from headcontroller.o(.init_array)
 <LI><a href="#[dd]">__sti___18_liftController_cpp</a> from liftcontroller.o(i.__sti___18_liftController_cpp) referenced from liftcontroller.o(.init_array)
 <LI><a href="#[e6]">__sti___19_fiducialMarkers_cpp</a> from fiducialmarkers.o(i.__sti___19_fiducialMarkers_cpp) referenced from fiducialmarkers.o(.init_array)
 <LI><a href="#[db]">__sti___21_dockingController_cpp</a> from dockingcontroller.o(i.__sti___21_dockingController_cpp) referenced from dockingcontroller.o(.init_array)
 <LI><a href="#[e3]">__sti___21_visionDebugStream_cpp</a> from visiondebugstream.o(i.__sti___21_visionDebugStream_cpp) referenced from visiondebugstream.o(.init_array)
 <LI><a href="#[e2]">__sti___22_steeringController_cpp</a> from steeringcontroller.o(i.__sti___22_steeringController_cpp) referenced from steeringcontroller.o(.init_array)
 <LI><a href="#[e1]">__sti___26_pickAndPlaceController_cpp</a> from pickandplacecontroller.o(i.__sti___26_pickAndPlaceController_cpp) referenced from pickandplacecontroller.o(.init_array)
 <LI><a href="#[e7]">__sti___8_char_cpp</a> from char.o(i.__sti___8_char_cpp) referenced from char.o(.init_array)
 <LI><a href="#[89]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[85]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[88]">_sbackspace</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[8a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[87]">_sgetc</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[84]">_snputc</a> from _snputc.o(.text) referenced 2 times from c89vsnprintf.o(.text)
 <LI><a href="#[86]">fputc</a> from uart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[8b]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[1b]">vprintf</a> from vprintf.o(.text) referenced 2 times from utilities_shared.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ea]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ec]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ee]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3fe]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3ff]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[400]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[401]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[402]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ef]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[134]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f1]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[f3]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f5]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f6]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f7]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[403]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[f9]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fb]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fc]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ff]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[101]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[103]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[104]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[105]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[107]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[404]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[109]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[10b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[10d]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[10f]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[405]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[120]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[111]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[113]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[406]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[115]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[407]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[408]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[409]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[117]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[40a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[40b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[40c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[40d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[40e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[40f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[410]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[411]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[412]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[413]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[414]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[415]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[416]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[417]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[418]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[11b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[419]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[41a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[41b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[41c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[41d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[41e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[ed]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[41f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[11d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[420]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[121]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 5328 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Anki::Cozmo::Robot::step_LongExecution() &rArr; Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*) &rArr; std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[421]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[182]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[124]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[422]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[126]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[423]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[1e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[424]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilities_shared.o(.data)
</UL>
<P><STRONG><a name="[129]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[12c]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[fa]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[132]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[135]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::GetClosestSegment(float, float, float)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Height2Rad(float)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetLength() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
</UL>

<P><STRONG><a name="[286]"></a>strlcpy</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, strlcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[299]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
</UL>

<P><STRONG><a name="[288]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned, unsigned char*, unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace&lang;unsigned char*&rang;(char*, char*, T1, T1, const __rw::__rw_select&lang;(bool)0&rang;*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[137]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[426]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace&lang;unsigned char*&rang;(char*, char*, T1, T1, const __rw::__rw_select&lang;(bool)0&rang;*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[139]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[427]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[428]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiRxSpiReady1()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow&lang;unsigned char&rang;(const Anki::Embedded::Rectangle&lang;short&rang;&, int, int, int, Anki::Embedded::Array&lang;T1&rang;&) const
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[13c]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[42b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::SetZero()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[42c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[399]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[42e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[13e]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[140]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[142]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[143]"></a>fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
</UL>

<P><STRONG><a name="[144]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[12d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[12e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[12f]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[130]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[131]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[f0]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[12a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[12b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[84]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> c89vsnprintf.o(.text)
<LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[10a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[10c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[128]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>

<P><STRONG><a name="[147]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[102]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[14a]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[fe]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[106]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[14b]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[100]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[108]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[f2]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[14c]"></a>sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[136]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[37e]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
</UL>

<P><STRONG><a name="[372]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[39d]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[42f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[430]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[13b]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[431]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__aeabi_vec_delete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aeabi_vec_delete_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[153]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[13f]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3a5]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[432]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[156]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[114]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[159]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[149]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[436]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[162]"></a>_printf_fp_hex_real</STRONG> (Thumb, 760 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[163]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[10e]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[110]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[164]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[166]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[178]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[14d]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[87]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>_scanf_mbtowc</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[16a]"></a>_scanf_wctomb</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[16c]"></a>_scanf_wstring</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[16d]"></a>setlocale</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, locale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>

<P><STRONG><a name="[148]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[14f]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[14e]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[170]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[171]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[174]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[ac]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[437]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[438]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[116]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3a9]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[172]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[158]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[10]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[8b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[161]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[165]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[167]"></a>__vfscanf</STRONG> (Thumb, 876 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[17c]"></a>_scanf_really_real</STRONG> (Thumb, 672 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[16b]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[15b]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[16e]"></a>_setlocale_r</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>

<P><STRONG><a name="[169]"></a>_mbrtowc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, _mbrtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[123]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[16f]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[157]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[3aa]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>

<P><STRONG><a name="[173]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[439]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[43a]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>__cxa_rethrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_rethrow_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[184]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[185]"></a>_scanf_really_hex_real</STRONG> (Thumb, 776 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[3fd]"></a>_scanf_really_infnan</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[3a7]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ARM_vec_cleanup_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[43b]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[189]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[188]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[18c]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[18a]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[18b]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[15d]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[17b]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[15e]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[17a]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[18d]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[272]"></a>DCMI_CaptureCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_CaptureCmd))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
</UL>

<P><STRONG><a name="[271]"></a>DCMI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
</UL>

<P><STRONG><a name="[269]"></a>DCMI_Init</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, stm32f4xx_dcmi.o(i.DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DCMI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
</UL>

<P><STRONG><a name="[36]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Stream4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wifi.o(i.DMA1_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DMA1_Stream7_IRQHandler &rArr; Anki::Cozmo::HAL::WifiStateMachine() &rArr; Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*) &rArr; Anki::Cozmo::HAL::WifiRxSpiReady1() &rArr; Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, frontcamera.o(i.DMA2_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, spi.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; Anki::Cozmo::Robot::step_MainExecution() &rArr; Anki::Cozmo::DockingController::Update() &rArr; Anki::Cozmo::DockingController::SetRelDockPose(float, float, float) &rArr; Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[18f]"></a>DMA_ClearFlag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[270]"></a>DMA_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
</UL>

<P><STRONG><a name="[26c]"></a>DMA_DeInit</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[26e]"></a>DMA_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[26d]"></a>DMA_Init</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[4f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = EXTI15_10_IRQHandler &rArr; Anki::Cozmo::HAL::WifiStateMachine() &rArr; Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*) &rArr; Anki::Cozmo::HAL::WifiRxSpiReady1() &rArr; Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[28a]"></a>EXTI_Init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[197]"></a>GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[196]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAFBitmask
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[2e2]"></a>IsOdd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utilities_c.o(i.IsOdd))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::CorrectVignetting(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::FixedLengthList&lang;float&rang;&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[2df]"></a>Log2u32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utilities_c.o(i.Log2u32))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[26f]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[27c]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[28e]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
</UL>

<P><STRONG><a name="[27d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::TimerInit()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[194]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[282]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[193]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[199]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[284]"></a>SPI_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[289]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[192]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[275]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE)
</UL>

<P><STRONG><a name="[29f]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
</UL>

<P><STRONG><a name="[29e]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
</UL>

<P><STRONG><a name="[283]"></a>SPI_Init</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[28b]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[82]"></a>SystemInit</STRONG> (Thumb, 562 bytes, Stack size 40 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemInit &rArr; SetAFBitmask
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAFBitmask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[291]"></a>TIM_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::TimerInit()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
</UL>

<P><STRONG><a name="[292]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
</UL>

<P><STRONG><a name="[290]"></a>TIM_OC2Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
</UL>

<P><STRONG><a name="[28f]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::TimerInit()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
</UL>

<P><STRONG><a name="[27e]"></a>USART_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[27f]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[198]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[19a]"></a>_Anki_Log</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, errorhandling.o(i._Anki_Log))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetCamPoseWrtRobot&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;float&rang;::computeSize(float, float, float)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Reallocate(void*, int, int&)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::GetEulerAngles(const Anki::Embedded::Array&lang;float&rang;&, float&, float&, float&)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DecisionTree::DecisionTree(const void*, int, int, int, const unsigned short*, int)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::Classify(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::SetZero()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;int&rang;::Set(int)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;bool&rang;::Set(bool)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ConnectedComponents(unsigned short, unsigned short, Anki::Embedded::MemoryStack&)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Finalize()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ComputeComponentSizes(Anki::Embedded::FixedLengthList&lang;int&rang;&)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_rotationMatrix(Anki::Embedded::Array&lang;float&rang;&, bool) const
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, float, float, float, float&, Anki::Embedded::MemoryStack)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::CorrectVignetting(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::FixedLengthList&lang;float&rang;&)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, unsigned char, Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::InsertionSort&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;int&rang;&, int, bool, int, int)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::VisionMarker&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Transpose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, bool, bool&)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::MultiplyTranspose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::MakeSymmetric&lang;Anki::Embedded::Array&lang;float&rang;&rang;(T1&, bool)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Set(const Anki::Embedded::Array&lang;unsigned char&rang;&)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::get_size(int) const
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Linspace&lang;float&rang;(T1, T1, int)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::get_size(int) const
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1d&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedPointArray&lang;short&rang;::FixedPointArray(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::set_transformType(Anki::Embedded::Transformations::TransformType)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotDivide&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, T1, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateY1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateX1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Vectorize&lang;float, float&rang;(bool, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Max&lang;float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::Add&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotMultiply&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, unsigned char&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::ApproximateSelect(const Anki::Embedded::Array&lang;float&rang;&, int, int, int, int&, Anki::Embedded::Array&lang;int&rang;&)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySliceLimits_in2_out1&lang;int&rang;::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::TransformPointsStatic(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;float&rang;&, bool, bool, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&)
</UL>

<P><STRONG><a name="[19c]"></a>atan2_fast(float, float)</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, trig_fast.o(i._Z10atan2_fastff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = atan2_fast(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan_fast(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToLineSegment(float, float, float, float&, float&) const
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const
</UL>

<P><STRONG><a name="[19e]"></a>catgets(__rw::__rw_cat*, int, int, const char*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rwcats.o(i._Z7catgetsPN4__rw8__rw_catEiiPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = catgets(__rw::__rw_cat*, int, int, const char*) &rArr; __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
</UL>

<P><STRONG><a name="[1a0]"></a>catopen(const char*, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rwcats.o(i._Z7catopenPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = catopen(const char*, int) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[1a3]"></a>atan2_acc(float, float)</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, trig_fast.o(i._Z9atan2_accff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::GetEulerAngles(const Anki::Embedded::Array&lang;float&rang;&, float&, float&, float&)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool)
</UL>

<P><STRONG><a name="[19d]"></a>atan_fast(float)</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, trig_fast.o(i._Z9atan_fastf))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_fast(float, float)
</UL>

<P><STRONG><a name="[19b]"></a>Anki::CoreTechPrint(const char*, ...)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, utilities_shared.o(i._ZN4Anki13CoreTechPrintEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintPath() const
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckContinuity(float, short) const
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, unsigned char) const
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetLength() const
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::Print() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
</UL>

<P><STRONG><a name="[1a6]"></a>Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, velocityprofilegenerator.o(i._ZN4Anki24VelocityProfileGenerator12StartProfileEfffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
</UL>

<P><STRONG><a name="[229]"></a>Anki::VelocityProfileGenerator::Step(float&, float&)</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, velocityprofilegenerator.o(i._ZN4Anki24VelocityProfileGenerator4StepERfS1_))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePointTurn()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
</UL>

<P><STRONG><a name="[3bb]"></a>Anki::VelocityProfileGenerator::VelocityProfileGenerator()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, velocityprofilegenerator.o(i._ZN4Anki24VelocityProfileGeneratorC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_steeringController_cpp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_liftController_cpp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_headController_cpp
</UL>

<P><STRONG><a name="[43c]"></a>Anki::VelocityProfileGenerator::VelocityProfileGenerator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, velocityprofilegenerator.o(i._ZN4Anki24VelocityProfileGeneratorC1Ev), UNUSED)

<P><STRONG><a name="[2b1]"></a>Anki::SetCoreTechPrintFunctionPtr(int(*)(const char*, std::__va_list))</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities_shared.o(i._ZN4Anki27SetCoreTechPrintFunctionPtrEPFiPKcSt9__va_listE))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1ae]"></a>Anki::Cozmo::Localization::GetHistIdx(unsigned, unsigned char&)</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, localization.o(i._ZN4Anki5Cozmo12Localization10GetHistIdxEjRh), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[1a7]"></a>Anki::Cozmo::Localization::AddPoseToHist()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, localization.o(i._ZN4Anki5Cozmo12Localization13AddPoseToHistEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Cozmo::Localization::AddPoseToHist()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Update()
</UL>

<P><STRONG><a name="[2b2]"></a>Anki::Cozmo::Localization::GetPoseFrameId()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localization.o(i._ZN4Anki5Cozmo12Localization14GetPoseFrameIdEv))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
</UL>

<P><STRONG><a name="[1a9]"></a>Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, localization.o(i._ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
</UL>

<P><STRONG><a name="[1ab]"></a>Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, localization.o(i._ZN4Anki5Cozmo12Localization17SetCurrentMatPoseEffNS_7RadiansE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::GetRotation()
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>

<P><STRONG><a name="[1ad]"></a>Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)</STRONG> (Thumb, 896 bytes, Stack size 120 bytes, localization.o(i._ZN4Anki5Cozmo12Localization22UpdatePoseWithKeyframeEjjfff), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetHistIdx(unsigned, unsigned char&)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
</UL>

<P><STRONG><a name="[1b8]"></a>Anki::Cozmo::Localization::GetCurrentMatOrientation()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localization.o(i._ZN4Anki5Cozmo12Localization24GetCurrentMatOrientationEv))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(const Anki::Radians&)
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePointTurn()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
</UL>

<P><STRONG><a name="[1ba]"></a>Anki::Cozmo::Localization::Init()</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, localization.o(i._ZN4Anki5Cozmo12Localization4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::Localization::Init() &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::GetRotation()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1bd]"></a>Anki::Cozmo::Localization::Update()</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, localization.o(i._ZN4Anki5Cozmo12Localization6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Anki::Cozmo::Localization::Update() &rArr; Anki::Radians::operator +=(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator +=(float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::GetRotation()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::AddPoseToHist()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[24f]"></a>Anki::Cozmo::PathFollower::GetPathError(float&, float&)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower12GetPathErrorERfS2_))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
</UL>

<P><STRONG><a name="[248]"></a>Anki::Cozmo::PathFollower::IsTraversingPath()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower16IsTraversingPathEv))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1bf]"></a>Anki::Cozmo::PathFollower::GetClosestSegment(float, float, float)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower17GetClosestSegmentEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::GetClosestSegment(float, float, float) &rArr; Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const &rArr; Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const &rArr; Anki::operator -(const Anki::Radians&, float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
</UL>

<P><STRONG><a name="[1c1]"></a>Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower18GenerateDubinsPathEffffffffffffPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
</UL>

<P><STRONG><a name="[1c3]"></a>Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&)</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower18ProcessPathSegmentERfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&) &rArr; Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const &rArr; Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const &rArr; Anki::operator -(const Anki::Radians&, float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Update()
</UL>

<P><STRONG><a name="[1c5]"></a>Anki::Cozmo::PathFollower::StartPathTraversal()</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower18StartPathTraversalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::StartPathTraversal() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckContinuity(float, short) const
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::SetPathFollowMode()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDeceleration(unsigned short)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedAcceleration(unsigned short)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::GetClosestSegment(float, float, float)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessExecutePathMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1cb]"></a>Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower21AppendPathSegment_ArcEjffffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float) &rArr; Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float) &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAppendPathSegmentArcMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1cd]"></a>Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower22AppendPathSegment_LineEjfffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float) &rArr; Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float) &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAppendPathSegmentLineMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1cf]"></a>Anki::Cozmo::PathFollower::ProcessPathSegmentPointTurn(float&, float&)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower27ProcessPathSegmentPointTurnERfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::ProcessPathSegmentPointTurn(float&, float&) &rArr; Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float) &rArr; Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::GetMode()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Update()
</UL>

<P><STRONG><a name="[1d2]"></a>Anki::Cozmo::PathFollower::Init()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Cozmo::PathFollower::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1d4]"></a>Anki::Cozmo::PathFollower::Update()</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::Update() &rArr; Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&) &rArr; Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const &rArr; Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const &rArr; Anki::operator -(const Anki::Radians&, float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::ResetIntegralGainSums()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDeceleration(unsigned short)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedAcceleration(unsigned short)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ProcessPathSegmentPointTurn(float&, float&)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::IsBusy()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[1d7]"></a>Anki::Cozmo::PathFollower::ClearPath()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower9ClearPathEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Cozmo::PathFollower::ClearPath()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1d8]"></a>Anki::Cozmo::PathFollower::PrintPath()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower9PrintPathEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Anki::Cozmo::PathFollower::PrintPath() &rArr; Anki::Planning::Path::PrintPath() const &rArr; Anki::Planning::PathSegment::Print() const &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintPath() const
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
</UL>

<P><STRONG><a name="[211]"></a>Anki::Cozmo::VisionSystem::DebugStream::Initialize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, visiondebugstream.o(i._ZN4Anki5Cozmo12VisionSystem11DebugStream10InitializeEv))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[1ee]"></a>Anki::Cozmo::VisionSystem::DebugStream::SendTrackingUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, const Anki::Cozmo::VisionSystem::TrackerParameters&, unsigned char, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, visiondebugstream.o(i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendTrackingUpdateERKNS_8Embedded5ArrayIhEERKNS3_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERKNS1_17TrackerParametersEhfNS3_11MemoryStackESF_SF_))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1f5]"></a>Anki::Cozmo::VisionSystem::DebugStream::SendFiducialDetection(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, visiondebugstream.o(i._ZN4Anki5Cozmo12VisionSystem11DebugStream21SendFiducialDetectionERKNS_8Embedded5ArrayIhEERKNS3_15FixedLengthListINS3_12VisionMarkerEEENS3_11MemoryStackESD_SD_))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[23f]"></a>Anki::Cozmo::VisionSystem::StopTracking()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem12StopTrackingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Cozmo::VisionSystem::StopTracking()
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
</UL>

<P><STRONG><a name="[247]"></a>Anki::Cozmo::VisionSystem::GetVerticalFOV()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem14GetVerticalFOVEv))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
</UL>

<P><STRONG><a name="[2b5]"></a>Anki::Cozmo::VisionSystem::SetImageSendMode(Anki::Cozmo::ImageSendMode_t, Anki::Vision::CameraResolution)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem16SetImageSendModeENS0_15ImageSendMode_tENS_6Vision16CameraResolutionE))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1f9]"></a>Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem16SetMarkerToTrackERKNS_6Vision10MarkerTypeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float) &rArr; Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, float, float, float)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[1fa]"></a>Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, float)</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem16SetMarkerToTrackERKNS_6Vision10MarkerTypeEfRKNS_8Embedded5PointIfEEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::Point3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, unsigned char, float, float, float)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[210]"></a>Anki::Cozmo::VisionSystem::TrackerParameters::Initialize()</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem17TrackerParameters10InitializeEv))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[3ba]"></a>Anki::Cozmo::VisionSystem::TrackerParameters::TrackerParameters()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem17TrackerParametersC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_visionSystem_cpp
</UL>

<P><STRONG><a name="[43d]"></a>Anki::Cozmo::VisionSystem::TrackerParameters::TrackerParameters__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem17TrackerParametersC1Ev), UNUSED)

<P><STRONG><a name="[1fb]"></a>Anki::Cozmo::VisionSystem::GetWithRespectToRobot(const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::Point3&lang;float&rang;&)</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem21GetWithRespectToRobotERKNS_8Embedded6Point3IfEERS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Anki::Cozmo::VisionSystem::GetWithRespectToRobot(const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::Point3&lang;float&rang;&) &rArr; Anki::Cozmo::VisionSystem::GetCamPoseWrtRobot&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetCamPoseWrtRobot&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::Point3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
</UL>

<P><STRONG><a name="[1fd]"></a>Anki::Cozmo::VisionSystem::DownsampleAndSendImage(Anki::Embedded::Array&lang;unsigned char&rang;&)</STRONG> (Thumb, 224 bytes, Stack size 128 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem22DownsampleAndSendImageERNS_8Embedded5ArrayIhEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Anki::Cozmo::VisionSystem::DownsampleAndSendImage(Anki::Embedded::Array&lang;unsigned char&rang;&) &rArr; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[20f]"></a>Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::Initialize()</STRONG> (Thumb, 240 bytes, Stack size 4 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem31DetectFiducialMarkersParameters10InitializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::Initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[3b9]"></a>Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::DetectFiducialMarkersParameters()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem31DetectFiducialMarkersParametersC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_visionSystem_cpp
</UL>

<P><STRONG><a name="[43e]"></a>Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::DetectFiducialMarkersParameters__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem31DetectFiducialMarkersParametersC1Ev), UNUSED)

<P><STRONG><a name="[20c]"></a>Anki::Cozmo::VisionSystem::Init()</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::VisionSystem::Init() &rArr; Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetHeadCamInfo()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DebugStream::Initialize()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::Initialize()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::Initialize()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerParameters::Initialize()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[213]"></a>Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)</STRONG> (Thumb, 2796 bytes, Stack size 784 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem6UpdateENS0_8Messages10RobotStateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 5264 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*) &rArr; std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CameraSetParameters(float, bool)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CameraGetFrame(unsigned char*, Anki::Vision::CameraResolution, bool)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, float)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDockingErrorSignalMessage(const Anki::Cozmo::Messages::DockingErrorSignal&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformedCorners(Anki::Embedded::MemoryStack) const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::get_transformation() const
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::SendTrackInit(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, Anki::Embedded::MemoryStack)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IsValid() const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_translation() const
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_angleY() const
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, float, float, float, float&, Anki::Embedded::MemoryStack)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::CorrectVignetting(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::FixedLengthList&lang;float&rang;&)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DownsampleAndSendImage(Anki::Embedded::Array&lang;unsigned char&rang;&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_LongExecution()
</UL>

<P><STRONG><a name="[21d]"></a>Anki::Cozmo::HeadController::GetCamPose(float&, float&, float&)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController10GetCamPoseERfS2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Anki::Cozmo::HeadController::GetCamPose(float&, float&, float&) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
</UL>

<P><STRONG><a name="[246]"></a>Anki::Cozmo::HeadController::GetAngleRad()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController11GetAngleRadEv))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetCamPoseWrtRobot&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[21e]"></a>Anki::Cozmo::HeadController::SetAngleRad(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController11SetAngleRadEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::HeadController::SetAngleRad(float) &rArr; Anki::Radians::operator =(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessHeadAngleUpdateMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[2ae]"></a>Anki::Cozmo::HeadController::IsCalibrated()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController12IsCalibratedEv))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[265]"></a>Anki::Cozmo::HeadController::IsInPosition()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController12IsInPositionEv))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
</UL>

<P><STRONG><a name="[21f]"></a>Anki::Cozmo::HeadController::SetDesiredAngle(float)</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HeadController::SetDesiredAngle(float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator ==(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[2b6]"></a>Anki::Cozmo::HeadController::SetSpeedAndAccel(float, float)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController16SetSpeedAndAccelEff))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[221]"></a>Anki::Cozmo::HeadController::CalibrationUpdate()</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController17CalibrationUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HeadController::CalibrationUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
</UL>

<P><STRONG><a name="[224]"></a>Anki::Cozmo::HeadController::SetAngularVelocity(float)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController18SetAngularVelocityEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::HeadController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessMoveHeadMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[226]"></a>Anki::Cozmo::HeadController::StartCalibrationRoutine()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController23StartCalibrationRoutineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HeadController::StartCalibrationRoutine() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[227]"></a>Anki::Cozmo::HeadController::Update()</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HeadController::Update() &rArr; Anki::Cozmo::HeadController::CalibrationUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator -() const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator &lang;(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator &rang;=(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator ==(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator +=(float)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::Step(float&, float&)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::CalibrationUpdate()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[22d]"></a>Anki::Cozmo::LiftController::Height2Rad(float)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController10Height2RadEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::LiftController::Height2Rad(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Init()
</UL>

<P><STRONG><a name="[2b3]"></a>Anki::Cozmo::LiftController::GetAngleRad()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController11GetAngleRadEv))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
</UL>

<P><STRONG><a name="[22e]"></a>Anki::Cozmo::LiftController::GetHeightMM()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController11GetHeightMMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Anki::Cozmo::LiftController::GetHeightMM() &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
</UL>

<P><STRONG><a name="[2ad]"></a>Anki::Cozmo::LiftController::IsCalibrated()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController12IsCalibratedEv))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[258]"></a>Anki::Cozmo::LiftController::IsInPosition()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController12IsInPositionEv))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
</UL>

<P><STRONG><a name="[22f]"></a>Anki::Cozmo::LiftController::SetDesiredHeight(float)</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::LiftController::SetDesiredHeight(float) &rArr; Anki::Cozmo::LiftController::Height2Rad(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Height2Rad(float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestUpdate()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::StartCalibrationRoutine()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[2b9]"></a>Anki::Cozmo::LiftController::SetSpeedAndAccel(float, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController16SetSpeedAndAccelEff))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[230]"></a>Anki::Cozmo::LiftController::LimitDetectUpdate()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController17LimitDetectUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::LiftController::LimitDetectUpdate()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
</UL>

<P><STRONG><a name="[231]"></a>Anki::Cozmo::LiftController::SetAngularVelocity(float)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController18SetAngularVelocityEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::LiftController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessMoveLiftMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[232]"></a>Anki::Cozmo::LiftController::StartCalibrationRoutine()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController23StartCalibrationRoutineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::LiftController::StartCalibrationRoutine() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[233]"></a>Anki::Cozmo::LiftController::Init()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::LiftController::Init() &rArr; Anki::Cozmo::LiftController::Height2Rad(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Height2Rad(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[25f]"></a>Anki::Cozmo::LiftController::Enable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController6EnableEv))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>

<P><STRONG><a name="[234]"></a>Anki::Cozmo::LiftController::Update()</STRONG> (Thumb, 658 bytes, Stack size 80 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Anki::Cozmo::LiftController::Update() &rArr; Anki::Radians::operator +=(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::LimitDetectUpdate()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator -() const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator &lang;(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator &rang;=(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator ==(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator +=(float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::Step(float&, float&)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[261]"></a>Anki::Cozmo::LiftController::Disable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController7DisableEv))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>

<P><STRONG><a name="[235]"></a>Anki::Cozmo::SpeedController::IsVehicleStopped()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController16IsVehicleStoppedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::SpeedController::IsVehicleStopped()
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePointTurn()
</UL>

<P><STRONG><a name="[239]"></a>Anki::Cozmo::SpeedController::RunAccelerationUpdate()</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController21RunAccelerationUpdateEv))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::Manage()
</UL>

<P><STRONG><a name="[1c8]"></a>Anki::Cozmo::SpeedController::SetUserCommandedAcceleration(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController28SetUserCommandedAccelerationEt))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Update()
</UL>

<P><STRONG><a name="[1c9]"></a>Anki::Cozmo::SpeedController::SetUserCommandedDeceleration(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController28SetUserCommandedDecelerationEt))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Update()
</UL>

<P><STRONG><a name="[237]"></a>Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController30GetCurrentMeasuredVehicleSpeedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)
</UL>

<P><STRONG><a name="[253]"></a>Anki::Cozmo::SpeedController::GetControllerCommandedVehicleSpeed()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController34GetControllerCommandedVehicleSpeedEv))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)
</UL>

<P><STRONG><a name="[24d]"></a>Anki::Cozmo::SpeedController::GetUserCommandedDesiredVehicleSpeed()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController35GetUserCommandedDesiredVehicleSpeedEv))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
</UL>

<P><STRONG><a name="[1c7]"></a>Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Update()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[238]"></a>Anki::Cozmo::SpeedController::Manage()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController6ManageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Cozmo::SpeedController::Manage()
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::RunAccelerationUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[254]"></a>Anki::Cozmo::WheelController::SetCoastMode(bool)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController12SetCoastModeEb))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)
</UL>

<P><STRONG><a name="[2bf]"></a>Anki::Cozmo::WheelController::AreWheelsPowered()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController16AreWheelsPoweredEv))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::DetectMotion()
</UL>

<P><STRONG><a name="[251]"></a>Anki::Cozmo::WheelController::GetDesiredWheelSpeeds(float&, float&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController21GetDesiredWheelSpeedsERfS2_))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManageDirectDrive()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
</UL>

<P><STRONG><a name="[1d5]"></a>Anki::Cozmo::WheelController::ResetIntegralGainSums()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController21ResetIntegralGainSumsEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Update()
</UL>

<P><STRONG><a name="[24b]"></a>Anki::Cozmo::WheelController::SetDesiredWheelSpeeds(float, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController21SetDesiredWheelSpeedsEff))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManageDirectDrive()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePointTurn()
</UL>

<P><STRONG><a name="[236]"></a>Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController22GetFilteredWheelSpeedsERfS2_))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::IsVehicleStopped()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
</UL>

<P><STRONG><a name="[23a]"></a>Anki::Cozmo::WheelController::EncoderSpeedFilterIteration()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController27EncoderSpeedFilterIterationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Cozmo::WheelController::EncoderSpeedFilterIteration()
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Manage()
</UL>

<P><STRONG><a name="[23b]"></a>Anki::Cozmo::WheelController::Run()</STRONG> (Thumb, 638 bytes, Stack size 24 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController3RunEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Cozmo::WheelController::Run()
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Manage()
</UL>

<P><STRONG><a name="[23c]"></a>Anki::Cozmo::WheelController::Manage()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController6ManageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Cozmo::WheelController::Manage() &rArr; Anki::Cozmo::WheelController::Run()
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Run()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::EncoderSpeedFilterIteration()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[260]"></a>Anki::Cozmo::WheelController::Disable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController7DisableEv))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>

<P><STRONG><a name="[23d]"></a>Anki::Cozmo::DockingController::ResetDocker()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController11ResetDockerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::DockingController::ResetDocker() &rArr; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::StopTracking()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Reset()
</UL>

<P><STRONG><a name="[240]"></a>Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, unsigned char, float, float, float)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEfRKNS_8Embedded5PointIfEEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, unsigned char, float, float, float) &rArr; Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float) &rArr; Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, float)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
</UL>

<P><STRONG><a name="[241]"></a>Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, float, float, float)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, float, float, float) &rArr; Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float) &rArr; Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
</UL>

<P><STRONG><a name="[242]"></a>Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)</STRONG> (Thumb, 662 bytes, Stack size 96 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController14SetRelDockPoseEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::DockingController::SetRelDockPose(float, float, float) &rArr; Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator +(const Anki::Radians&, float)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::PrintPath()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DockPathTestUpdate()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
</UL>

<P><STRONG><a name="[266]"></a>Anki::Cozmo::DockingController::TrackCamWithLift(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController16TrackCamWithLiftEb))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
</UL>

<P><STRONG><a name="[267]"></a>Anki::Cozmo::DockingController::DidLastDockSucceed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController18DidLastDockSucceedEv))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
</UL>

<P><STRONG><a name="[1d6]"></a>Anki::Cozmo::DockingController::IsBusy()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController6IsBusyEv))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Update()
</UL>

<P><STRONG><a name="[244]"></a>Anki::Cozmo::DockingController::Update()</STRONG> (Thumb, 630 bytes, Stack size 112 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::DockingController::Update() &rArr; Anki::Cozmo::DockingController::SetRelDockPose(float, float, float) &rArr; Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::CheckMailbox(Anki::Cozmo::Messages::DockingErrorSignal&)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetAngleRad()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetCamPose(float&, float&, float&)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetWithRespectToRobot(const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::Point3&lang;float&rang;&)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetVerticalFOV()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::StopTracking()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::IsTraversingPath()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan_fast(float)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[249]"></a>Anki::Cozmo::SteeringController::ManagePointTurn()</STRONG> (Thumb, 248 bytes, Stack size 96 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController15ManagePointTurnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::SteeringController::ManagePointTurn() &rArr; Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float) &rArr; Anki::Cozmo::SteeringController::CheckWheelSpeedLimits(float&, float&) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::angularDistance(const Anki::Radians&, bool)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::SetDesiredWheelSpeeds(float, float)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::IsVehicleStopped()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::Step(float&, float&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatOrientation()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::Manage()
</UL>

<P><STRONG><a name="[1d1]"></a>Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController16ExecutePointTurnEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float) &rArr; Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::GetUserCommandedDesiredVehicleSpeed()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatOrientation()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ProcessPathSegmentPointTurn(float&, float&)
</UL>

<P><STRONG><a name="[24e]"></a>Anki::Cozmo::SteeringController::ManagePathFollow()</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController16ManagePathFollowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::SteeringController::ManagePathFollow() &rArr; Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float) &rArr; Anki::Cozmo::SteeringController::CheckWheelSpeedLimits(float&, float&) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::GetUserCommandedDesiredVehicleSpeed()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::IsTraversingPath()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::IsBusy()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::GetPathError(float&, float&)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::Manage()
</UL>

<P><STRONG><a name="[250]"></a>Anki::Cozmo::SteeringController::ManageDirectDrive()</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController17ManageDirectDriveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::SteeringController::ManageDirectDrive()
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::SetDesiredWheelSpeeds(float, float)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetDesiredWheelSpeeds(float&, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::Manage()
</UL>

<P><STRONG><a name="[1ca]"></a>Anki::Cozmo::SteeringController::SetPathFollowMode()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController17SetPathFollowModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
</UL>

<P><STRONG><a name="[23e]"></a>Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetDesiredWheelSpeeds(float&, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[252]"></a>Anki::Cozmo::SteeringController::CheckWheelSpeedLimits(float&, float&)</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController21CheckWheelSpeedLimitsERfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::SteeringController::CheckWheelSpeedLimits(float&, float&) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)
</UL>

<P><STRONG><a name="[24c]"></a>Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float)</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController25RunLineFollowControllerNLEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float) &rArr; Anki::Cozmo::SteeringController::CheckWheelSpeedLimits(float&, float&) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::SetDesiredWheelSpeeds(float, float)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::SetCoastMode(bool)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::CheckWheelSpeedLimits(float&, float&)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::GetControllerCommandedVehicleSpeed()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::IsVehicleStopped()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan_fast(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePointTurn()
</UL>

<P><STRONG><a name="[255]"></a>Anki::Cozmo::SteeringController::Manage()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController6ManageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::SteeringController::Manage() &rArr; Anki::Cozmo::SteeringController::ManagePointTurn() &rArr; Anki::Cozmo::SteeringController::RunLineFollowControllerNL(float, float) &rArr; Anki::Cozmo::SteeringController::CheckWheelSpeedLimits(float&, float&) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManageDirectDrive()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePointTurn()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[1d0]"></a>Anki::Cozmo::SteeringController::GetMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController7GetModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ProcessPathSegmentPointTurn(float&, float&)
</UL>

<P><STRONG><a name="[95]"></a>Anki::Cozmo::TestModeController::IMUTestUpdate()</STRONG> (Thumb, 218 bytes, Stack size 112 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController13IMUTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::IMUTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::GetMode()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::GetRotation()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[94]"></a>Anki::Cozmo::TestModeController::HeadTestUpdate()</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14HeadTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::HeadTestUpdate() &rArr; Anki::Cozmo::HeadController::SetDesiredAngle(float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetAngleRad()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[92]"></a>Anki::Cozmo::TestModeController::LiftTestUpdate()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14LiftTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::LiftTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[97]"></a>Anki::Cozmo::TestModeController::StopTestUpdate()</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14StopTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::StopTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[91]"></a>Anki::Cozmo::TestModeController::DriveTestUpdate()</STRONG> (Thumb, 340 bytes, Stack size 104 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController15DriveTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::DriveTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[96]"></a>Anki::Cozmo::TestModeController::LightTestUpdate()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController15LightTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::LightTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[8f]"></a>Anki::Cozmo::TestModeController::DockPathTestUpdate()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18DockPathTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::DockPathTestUpdate() &rArr; Anki::Cozmo::DockingController::SetRelDockPose(float, float, float) &rArr; Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[98]"></a>Anki::Cozmo::TestModeController::MaxPowerTestUpdate()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18MaxPowerTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::MaxPowerTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[93]"></a>Anki::Cozmo::TestModeController::LiftToggleTestUpdate()</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController20LiftToggleTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::LiftToggleTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::IsInPosition()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[90]"></a>Anki::Cozmo::TestModeController::PathFollowTestUpdate()</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController20PathFollowTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::PathFollowTestUpdate() &rArr; Anki::Cozmo::PathFollower::StartPathTraversal() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan_fast(float)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[8e]"></a>Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController22PickAndPlaceTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DidLastActionSucceed()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::PlaceOnGround()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::IsBusy()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, float, Anki::Cozmo::DockAction_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE)
</UL>
<P><STRONG><a name="[25d]"></a>Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Disable()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Reset()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Disable()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Enable()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::StartPickAndPlaceTest()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::TurnOnIndicatorLight()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::StartPathFollowTest()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::StartLiftTest()
</UL>

<P><STRONG><a name="[262]"></a>Anki::Cozmo::TestModeController::Update()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Cozmo::TestModeController::Update()
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::GetOperationMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[2bc]"></a>Anki::Cozmo::TestModeController::GetMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController7GetModeEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
</UL>

<P><STRONG><a name="[212]"></a>Anki::Cozmo::MatlabVisualization::Initialize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, matlabvisualization.o(i._ZN4Anki5Cozmo19MatlabVisualization10InitializeEv))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[1f8]"></a>Anki::Cozmo::MatlabVisualization::SendDrawNow()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, matlabvisualization.o(i._ZN4Anki5Cozmo19MatlabVisualization11SendDrawNowEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[21b]"></a>Anki::Cozmo::MatlabVisualization::SendTrackInit(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 40 bytes, Stack size 144 bytes, matlabvisualization.o(i._ZN4Anki5Cozmo19MatlabVisualization13SendTrackInitERKNS_8Embedded5ArrayIhEERKNS2_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofENS2_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Anki::Cozmo::MatlabVisualization::SendTrackInit(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformedCorners(Anki::Embedded::MemoryStack) const &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformedCorners(Anki::Embedded::MemoryStack) const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::get_transformation() const
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[1f7]"></a>Anki::Cozmo::MatlabVisualization::SendFiducialDetection(const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Vision::MarkerType&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, matlabvisualization.o(i._ZN4Anki5Cozmo19MatlabVisualization21SendFiducialDetectionERKNS_8Embedded13QuadrilateralIfEERKNS_6Vision10MarkerTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1f3]"></a>Anki::Cozmo::MatlabVisualization::ResetFiducialDetection(const Anki::Embedded::Array&lang;unsigned char&rang;&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, matlabvisualization.o(i._ZN4Anki5Cozmo19MatlabVisualization22ResetFiducialDetectionERKNS_8Embedded5ArrayIhEE))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[206]"></a>Anki::Cozmo::MatlabVisualization::SendTrackerPrediction_After(const Anki::Embedded::Quadrilateral&lang;float&rang;&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, matlabvisualization.o(i._ZN4Anki5Cozmo19MatlabVisualization27SendTrackerPrediction_AfterERKNS_8Embedded13QuadrilateralIfEE))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[202]"></a>Anki::Cozmo::MatlabVisualization::SendTrackerPrediction_Before(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, matlabvisualization.o(i._ZN4Anki5Cozmo19MatlabVisualization28SendTrackerPrediction_BeforeERKNS_8Embedded5ArrayIhEERKNS2_13QuadrilateralIfEE))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1ed]"></a>Anki::Cozmo::MatlabVisualization::SendTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, matlabvisualization.o(i._ZN4Anki5Cozmo19MatlabVisualization9SendTrackERKNS_8Embedded5ArrayIhEERKNS2_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofEbNS2_11MemoryStackE))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[259]"></a>Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, float, Anki::Cozmo::DockAction_t)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeEfNS0_12DockAction_tE))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDockWithBlockMessage(const Anki::Cozmo::Messages::DockWithBlock&)
</UL>

<P><STRONG><a name="[2b8]"></a>Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, float, const Anki::Embedded::Point&lang;float&rang;&, float, Anki::Cozmo::DockAction_t)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeEfRKNS_8Embedded5PointIfEEfNS0_12DockAction_tE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDockWithBlockMessage(const Anki::Cozmo::Messages::DockWithBlock&)
</UL>

<P><STRONG><a name="[25c]"></a>Anki::Cozmo::PickAndPlaceController::PlaceOnGround()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController13PlaceOnGroundEv))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
</UL>

<P><STRONG><a name="[2b4]"></a>Anki::Cozmo::PickAndPlaceController::IsCarryingBlock()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController15IsCarryingBlockEv))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
</UL>

<P><STRONG><a name="[25b]"></a>Anki::Cozmo::PickAndPlaceController::DidLastActionSucceed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController20DidLastActionSucceedEv))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
</UL>

<P><STRONG><a name="[25e]"></a>Anki::Cozmo::PickAndPlaceController::Reset()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::PickAndPlaceController::Reset() &rArr; Anki::Cozmo::DockingController::ResetDocker() &rArr; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>

<P><STRONG><a name="[25a]"></a>Anki::Cozmo::PickAndPlaceController::IsBusy()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController6IsBusyEv))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
</UL>

<P><STRONG><a name="[264]"></a>Anki::Cozmo::PickAndPlaceController::Update()</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PickAndPlaceController::Update() &rArr; Anki::Cozmo::HeadController::SetDesiredAngle(float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::IsInPosition()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::IsInPosition()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::IsBusy()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::DidLastDockSucceed()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::TrackCamWithLift(bool)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, float, float, float)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, unsigned char, float, float, float)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[268]"></a>Anki::Cozmo::HAL::OV7725Init()</STRONG> (Thumb, 214 bytes, Stack size 96 bytes, frontcamera.o(i._ZN4Anki5Cozmo3HAL10OV7725InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Anki::Cozmo::HAL::OV7725Init() &rArr; Anki::Cozmo::HAL::CamWrite(unsigned char, unsigned char) &rArr; Anki::Cozmo::HAL::Write(unsigned char) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CamWrite(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
</UL>

<P><STRONG><a name="[256]"></a>Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, imu.o(i._ZN4Anki5Cozmo3HAL11IMUReadDataERNS1_17IMU_DataStructureE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&) &rArr; Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
</UL>

<P><STRONG><a name="[297]"></a>Anki::Cozmo::HAL::UARTGetChar(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i._ZN4Anki5Cozmo3HAL11UARTGetCharEj))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
</UL>

<P><STRONG><a name="[276]"></a>Anki::Cozmo::HAL::UARTPutChar(int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart.o(i._ZN4Anki5Cozmo3HAL11UARTPutCharEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::HAL::UARTPutChar(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::BufPutChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a8]"></a>Anki::Cozmo::HAL::GetTimeStamp()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._ZN4Anki5Cozmo3HAL12GetTimeStampEv))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendRobotStateMsg()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRobotAddedToWorldMessage(const unsigned char*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRequestCamCalibMessage(const Anki::Cozmo::Messages::RequestCamCalib&)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::AddPoseToHist()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DownsampleAndSendImage(Anki::Embedded::Array&lang;unsigned char&rang;&)
</UL>

<P><STRONG><a name="[228]"></a>Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motors.o(i._ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::EncoderSpeedFilterIteration()
</UL>

<P><STRONG><a name="[223]"></a>Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, motors.o(i._ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::MaxPowerTestUpdate()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::CalibrationUpdate()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Run()
</UL>

<P><STRONG><a name="[27b]"></a>Anki::Cozmo::HAL::UARTConfigure()</STRONG> (Thumb, 356 bytes, Stack size 128 bytes, uart.o(i._ZN4Anki5Cozmo3HAL13UARTConfigureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Anki::Cozmo::HAL::UARTConfigure() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTInit()
</UL>

<P><STRONG><a name="[280]"></a>Anki::Cozmo::HAL::UARTPutString(const char*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(i._ZN4Anki5Cozmo3HAL13UARTPutStringEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::HAL::UARTPutString(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::BufPutChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[214]"></a>Anki::Cozmo::HAL::CameraGetFrame(unsigned char*, Anki::Vision::CameraResolution, bool)</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, frontcamera.o(i._ZN4Anki5Cozmo3HAL14CameraGetFrameEPhNS_6Vision16CameraResolutionEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::HAL::CameraGetFrame(unsigned char*, Anki::Vision::CameraResolution, bool) &rArr; Anki::Embedded::BeginBenchmark(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[20d]"></a>Anki::Cozmo::HAL::GetHeadCamInfo()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontcamera.o(i._ZN4Anki5Cozmo3HAL14GetHeadCamInfoEv))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRobotAddedToWorldMessage(const unsigned char*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRequestCamCalibMessage(const Anki::Cozmo::Messages::RequestCamCalib&)
</UL>

<P><STRONG><a name="[28c]"></a>Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, uart.o(i._ZN4Anki5Cozmo3HAL14UARTPutMessageEhjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::BufPutChar(unsigned char)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
</UL>

<P><STRONG><a name="[28d]"></a>Anki::Cozmo::HAL::FrontCameraInit()</STRONG> (Thumb, 464 bytes, Stack size 80 bytes, frontcamera.o(i._ZN4Anki5Cozmo3HAL15FrontCameraInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Anki::Cozmo::HAL::FrontCameraInit() &rArr; Anki::Cozmo::HAL::OV7725Init() &rArr; Anki::Cozmo::HAL::CamWrite(unsigned char, unsigned char) &rArr; Anki::Cozmo::HAL::Write(unsigned char) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>Anki::Cozmo::HAL::GetMicroCounter()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(i._ZN4Anki5Cozmo3HAL15GetMicroCounterEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTGetCharacter(unsigned)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiGetCharacter(unsigned)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::LimitDetectUpdate()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::CalibrationUpdate()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, float, float, float)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, unsigned char, float, float, float)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::UpdateEventDetection()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::DetectMotion()
</UL>

<P><STRONG><a name="[1bc]"></a>Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motors.o(i._ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::CalibrationUpdate()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Update()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
</UL>

<P><STRONG><a name="[2a8]"></a>Anki::Cozmo::HAL::RadioIsConnected()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_radio.o(i._ZN4Anki5Cozmo3HAL16RadioIsConnectedEv))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[1fe]"></a>Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_radio.o(i._ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned, unsigned char*, unsigned)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::GetSize(Anki::Cozmo::Messages::ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendRobotStateMsg()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRobotAddedToWorldMessage(const unsigned char*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRequestCamCalibMessage(const Anki::Cozmo::Messages::RequestCamCalib&)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DownsampleAndSendImage(Anki::Embedded::Array&lang;unsigned char&rang;&)
</UL>

<P><STRONG><a name="[294]"></a>Anki::Cozmo::HAL::UARTGetFreeSpace()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i._ZN4Anki5Cozmo3HAL16UARTGetFreeSpaceEv))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
</UL>

<P><STRONG><a name="[9a]"></a>Anki::Cozmo::HAL::WifiGetCharacter(unsigned)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wifi.o(i._ZN4Anki5Cozmo3HAL16WifiGetCharacterEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Cozmo::HAL::WifiGetCharacter(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi.o(i._ZN4Anki5Cozmo3HAL13WifiConfigureEv)
</UL>
<P><STRONG><a name="[222]"></a>Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motors.o(i._ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::CalibrationUpdate()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
</UL>

<P><STRONG><a name="[218]"></a>Anki::Cozmo::HAL::CameraSetParameters(float, bool)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, frontcamera.o(i._ZN4Anki5Cozmo3HAL19CameraSetParametersEfb))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Anki::Cozmo::HAL::CameraSetParameters(float, bool) &rArr; Anki::Cozmo::HAL::CamWrite(unsigned char, unsigned char) &rArr; Anki::Cozmo::HAL::Write(unsigned char) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CamWrite(unsigned char, unsigned char)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[296]"></a>Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)</STRONG> (Thumb, 634 bytes, Stack size 56 bytes, usb_radio.o(i._ZN4Anki5Cozmo3HAL19RadioGetNextMessageEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTGetChar(unsigned)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::GetSize(Anki::Cozmo::Messages::ID)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace&lang;unsigned char*&rang;(char*, char*, T1, T1, const __rw::__rw_select&lang;(bool)0&rang;*)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessBTLEMessages()
</UL>

<P><STRONG><a name="[257]"></a>Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, lights.o(i._ZN4Anki5Cozmo3HAL6SetLEDENS1_5LEDIdENS1_8LEDColorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LightTestUpdate()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetHeadlightMessage(const unsigned char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::TurnOffIndicatorLight()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::StartPickAndPlaceTest()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::TurnOnIndicatorLight()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::StartPathFollowTest()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::ToggleHeadLights()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::StartLiftTest()
</UL>

<P><STRONG><a name="[2a1]"></a>Anki::Cozmo::HAL::IMUInit()</STRONG> (Thumb, 528 bytes, Stack size 64 bytes, imu.o(i._ZN4Anki5Cozmo3HAL7IMUInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HAL::IMUInit() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a2]"></a>Anki::Cozmo::HAL::SPIInit()</STRONG> (Thumb, 370 bytes, Stack size 96 bytes, spi.o(i._ZN4Anki5Cozmo3HAL7SPIInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Anki::Cozmo::HAL::SPIInit() &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bc]"></a>Anki::Cozmo::HAL::Startup()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(i._ZN4Anki5Cozmo3HAL7StartupEv))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a3]"></a>Anki::Cozmo::HAL::UARTInit()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(i._ZN4Anki5Cozmo3HAL8UARTInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Anki::Cozmo::HAL::UARTInit() &rArr; Anki::Cozmo::HAL::WifiInit() &rArr; Anki::Cozmo::HAL::WifiConfigure() &rArr; Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*) &rArr; Anki::Cozmo::HAL::WifiRxSpiReady1() &rArr; Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiInit()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a4]"></a>Anki::Cozmo::HAL::WifiInit()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, wifi.o(i._ZN4Anki5Cozmo3HAL8WifiInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Anki::Cozmo::HAL::WifiInit() &rArr; Anki::Cozmo::HAL::WifiConfigure() &rArr; Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*) &rArr; Anki::Cozmo::HAL::WifiRxSpiReady1() &rArr; Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTInit()
</UL>

<P><STRONG><a name="[26b]"></a>Anki::Cozmo::HAL::MicroWait(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, timer.o(i._ZN4Anki5Cozmo3HAL9MicroWaitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiInit()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CameraSetParameters(float, bool)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CamWrite(unsigned char, unsigned char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::Write(unsigned char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[2a5]"></a>Anki::Cozmo::HAL::TimerInit()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timer.o(i._ZN4Anki5Cozmo3HAL9TimerInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Anki::Cozmo::HAL::TimerInit() &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[263]"></a>Anki::Cozmo::Robot::GetOperationMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cozmobot.o(i._ZN4Anki5Cozmo5Robot16GetOperationModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Update()
</UL>

<P><STRONG><a name="[2a6]"></a>Anki::Cozmo::Robot::step_LongExecution()</STRONG> (Thumb, 30 bytes, Stack size 56 bytes, cozmobot.o(i._ZN4Anki5Cozmo5Robot18step_LongExecutionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 5320 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Robot::step_LongExecution() &rArr; Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*) &rArr; std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::GetRobotStateMsg()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[191]"></a>Anki::Cozmo::Robot::step_MainExecution()</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, cozmobot.o(i._ZN4Anki5Cozmo5Robot18step_MainExecutionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Robot::step_MainExecution() &rArr; Anki::Cozmo::DockingController::Update() &rArr; Anki::Cozmo::DockingController::SetRelDockPose(float, float, float) &rArr; Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioIsConnected()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Reset()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessBTLEMessages()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendRobotStateMsg()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Update()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::Manage()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Manage()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::Manage()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::IsCalibrated()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::IsCalibrated()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Update()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Update()
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[2b0]"></a>Anki::Cozmo::Robot::Init()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, cozmobot.o(i._ZN4Anki5Cozmo5Robot4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Robot::Init() &rArr; Anki::Cozmo::VisionSystem::Init() &rArr; Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Init()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::StartCalibrationRoutine()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::StartCalibrationRoutine()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Init()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::SetCoreTechPrintFunctionPtr(int(*)(const char*, std::__va_list))
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[245]"></a>Anki::Cozmo::Messages::CheckMailbox(Anki::Cozmo::Messages::DockingErrorSignal&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, messages.o(i._ZN4Anki5Cozmo8Messages12CheckMailboxERNS1_18DockingErrorSignalE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::Messages::CheckMailbox(Anki::Cozmo::Messages::DockingErrorSignal&)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
</UL>

<P><STRONG><a name="[2a7]"></a>Anki::Cozmo::Messages::GetRobotStateMsg()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages16GetRobotStateMsgEv))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_LongExecution()
</UL>

<P><STRONG><a name="[2ac]"></a>Anki::Cozmo::Messages::SendRobotStateMsg()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages17SendRobotStateMsgEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::Messages::SendRobotStateMsg() &rArr; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[2a9]"></a>Anki::Cozmo::Messages::ProcessBTLEMessages()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages19ProcessBTLEMessagesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessBTLEMessages() &rArr; Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[2ab]"></a>Anki::Cozmo::Messages::UpdateRobotStateMsg()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, messages.o(i._ZN4Anki5Cozmo8Messages19UpdateRobotStateMsgEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Anki::Cozmo::Messages::UpdateRobotStateMsg() &rArr; Anki::Cozmo::LiftController::GetHeightMM() &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::GetHeightMM()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::GetAngleRad()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetAngleRad()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::IsTraversingPath()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::IsBusy()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::IsCarryingBlock()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetPoseFrameId()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[b5]"></a>Anki::Cozmo::Messages::ProcessMoveHeadMessage(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages22ProcessMoveHeadMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::Messages::ProcessMoveHeadMessage(const unsigned char*) &rArr; Anki::Cozmo::HeadController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>Anki::Cozmo::Messages::ProcessMoveLiftMessage(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages22ProcessMoveLiftMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::Messages::ProcessMoveLiftMessage(const unsigned char*) &rArr; Anki::Cozmo::LiftController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages23ProcessClearPathMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*) &rArr; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>Anki::Cozmo::Messages::ProcessPrintTextMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages23ProcessPrintTextMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessPrintTextMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>Anki::Cozmo::Messages::ProcessImageChunkMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages24ProcessImageChunkMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessImageChunkMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>Anki::Cozmo::Messages::ProcessRobotStateMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages24ProcessRobotStateMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessRobotStateMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const unsigned char*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages25ProcessDriveWheelsMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const unsigned char*) &rArr; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::IsTraversingPath()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>Anki::Cozmo::Messages::ProcessExecutePathMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages25ProcessExecutePathMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessExecutePathMessage(const unsigned char*) &rArr; Anki::Cozmo::PathFollower::StartPathTraversal() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>Anki::Cozmo::Messages::ProcessTrackerQuadMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages25ProcessTrackerQuadMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessTrackerQuadMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessImageRequestMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetImageSendMode(Anki::Cozmo::ImageSendMode_t, Anki::Vision::CameraResolution)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessSetHeadAngleMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle(float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetSpeedAndAccel(float, float)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>Anki::Cozmo::Messages::ProcessSetHeadlightMessage(const unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessSetHeadlightMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Anki::Cozmo::Messages::ProcessSetHeadlightMessage(const unsigned char*) &rArr; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>Anki::Cozmo::Messages::ProcessVisionMarkerMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessVisionMarkerMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessVisionMarkerMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>Anki::Cozmo::Messages::ProcessDockWithBlockMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessDockWithBlockMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[2b7]"></a>Anki::Cozmo::Messages::ProcessDockWithBlockMessage(const Anki::Cozmo::Messages::DockWithBlock&)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessDockWithBlockMessageERKNS1_13DockWithBlockE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, float, const Anki::Embedded::Point&lang;float&rang;&, float, Anki::Cozmo::DockAction_t)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, float, Anki::Cozmo::DockAction_t)
</UL>

<P><STRONG><a name="[b6]"></a>Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessSetLiftHeightMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*) &rArr; Anki::Cozmo::LiftController::SetDesiredHeight(float) &rArr; Anki::Cozmo::LiftController::Height2Rad(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetSpeedAndAccel(float, float)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessStartTestModeMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*) &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessStopAllMotorsMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*) &rArr; Anki::Cozmo::LiftController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>Anki::Cozmo::Messages::ProcessRobotAvailableMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages28ProcessRobotAvailableMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessRobotAvailableMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>Anki::Cozmo::Messages::ProcessHeadAngleUpdateMessage(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages29ProcessHeadAngleUpdateMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::Messages::ProcessHeadAngleUpdateMessage(const unsigned char*) &rArr; Anki::Cozmo::HeadController::SetAngleRad(float) &rArr; Anki::Radians::operator =(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngleRad(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>Anki::Cozmo::Messages::ProcessRequestCamCalibMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages29ProcessRequestCamCalibMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[2ba]"></a>Anki::Cozmo::Messages::ProcessRequestCamCalibMessage(const Anki::Cozmo::Messages::RequestCamCalib&)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages29ProcessRequestCamCalibMessageERKNS1_15RequestCamCalibE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetHeadCamInfo()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[c0]"></a>Anki::Cozmo::Messages::ProcessMatMarkerObservedMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages31ProcessMatMarkerObservedMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessMatMarkerObservedMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>Anki::Cozmo::Messages::ProcessRobotAddedToWorldMessage(const unsigned char*)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages31ProcessRobotAddedToWorldMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessRobotAddedToWorldMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetHeadCamInfo()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>Anki::Cozmo::Messages::ProcessDockingErrorSignalMessage(const unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, messages.o(i._ZN4Anki5Cozmo8Messages32ProcessDockingErrorSignalMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Anki::Cozmo::Messages::ProcessDockingErrorSignalMessage(const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>Anki::Cozmo::Messages::ProcessDockingErrorSignalMessage(const Anki::Cozmo::Messages::DockingErrorSignal&)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, messages.o(i._ZN4Anki5Cozmo8Messages32ProcessDockingErrorSignalMessageERKNS1_18DockingErrorSignalE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Anki::Cozmo::Messages::ProcessDockingErrorSignalMessage(const Anki::Cozmo::Messages::DockingErrorSignal&)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[bf]"></a>Anki::Cozmo::Messages::ProcessBlockMarkerObservedMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages33ProcessBlockMarkerObservedMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessBlockMarkerObservedMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>Anki::Cozmo::Messages::ProcessAppendPathSegmentArcMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages34ProcessAppendPathSegmentArcMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Anki::Cozmo::Messages::ProcessAppendPathSegmentArcMessage(const unsigned char*) &rArr; Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float) &rArr; Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float) &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>Anki::Cozmo::Messages::ProcessDriveWheelsCurvatureMessage(const unsigned char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages34ProcessDriveWheelsCurvatureMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>Anki::Cozmo::Messages::ProcessMatCameraCalibrationMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages34ProcessMatCameraCalibrationMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessMatCameraCalibrationMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAbsLocalizationUpdateMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[2bb]"></a>Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAbsLocalizationUpdateMessageERKNS1_21AbsLocalizationUpdateE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::getDegrees() const
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::GetMode()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[ba]"></a>Anki::Cozmo::Messages::ProcessAppendPathSegmentLineMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAppendPathSegmentLineMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Cozmo::Messages::ProcessAppendPathSegmentLineMessage(const unsigned char*) &rArr; Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float) &rArr; Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float) &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>Anki::Cozmo::Messages::ProcessHeadCameraCalibrationMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages35ProcessHeadCameraCalibrationMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessHeadCameraCalibrationMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[293]"></a>Anki::Cozmo::Messages::GetSize(Anki::Cozmo::Messages::ID)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages7GetSizeENS1_2IDE))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
</UL>

<P><STRONG><a name="[9b]"></a>Anki::Cozmo::Messages::SendText(const char*, std::__va_list)</STRONG> (Thumb, 138 bytes, Stack size 584 bytes, messages.o(i._ZN4Anki5Cozmo8Messages8SendTextEPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*, unsigned)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRobotAddedToWorldMessage(const unsigned char*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRequestCamCalibMessage(const Anki::Cozmo::Messages::RequestCamCalib&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cozmobot.o(i._ZN4Anki5Cozmo5Robot4InitEv)
</UL>
<P><STRONG><a name="[1b7]"></a>Anki::Cozmo::Messages::SendText(const char*, ...)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, messages.o(i._ZN4Anki5Cozmo8Messages8SendTextEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::MaxPowerTestUpdate()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DockPathTestUpdate()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LightTestUpdate()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestUpdate()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::CheckWheelSpeedLimits(float&, float&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePointTurn()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::CalibrationUpdate()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessBTLEMessages()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Update()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::StartCalibrationRoutine()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::StartCalibrationRoutine()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessHeadCameraCalibrationMessage(const unsigned char*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessMatCameraCalibrationMessage(const unsigned char*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessBlockMarkerObservedMessage(const unsigned char*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessMatMarkerObservedMessage(const unsigned char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRobotAvailableMessage(const unsigned char*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessVisionMarkerMessage(const unsigned char*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessTrackerQuadMessage(const unsigned char*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessRobotStateMessage(const unsigned char*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessImageChunkMessage(const unsigned char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessPrintTextMessage(const unsigned char*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
</UL>

<P><STRONG><a name="[1ac]"></a>Anki::Cozmo::IMUFilter::GetRotation()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter11GetRotationEv))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Update()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
</UL>

<P><STRONG><a name="[2be]"></a>Anki::Cozmo::IMUFilter::DetectMotion()</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter12DetectMotionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Cozmo::IMUFilter::DetectMotion()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::AreWheelsPowered()
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
</UL>

<P><STRONG><a name="[a0]"></a>Anki::Cozmo::IMUFilter::StartLiftTest()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter13StartLiftTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::IMUFilter::StartLiftTest() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
</UL>
<P><STRONG><a name="[2c1]"></a>Anki::Cozmo::IMUFilter::DetectNsideDown()</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter15DetectNsideDownEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Cozmo::IMUFilter::DetectNsideDown()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::UpdateEventDetection()
</UL>

<P><STRONG><a name="[9c]"></a>Anki::Cozmo::IMUFilter::ToggleHeadLights()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter16ToggleHeadLightsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Anki::Cozmo::IMUFilter::ToggleHeadLights() &rArr; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
</UL>
<P><STRONG><a name="[9f]"></a>Anki::Cozmo::IMUFilter::StartPathFollowTest()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter19StartPathFollowTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::IMUFilter::StartPathFollowTest() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
</UL>
<P><STRONG><a name="[9d]"></a>Anki::Cozmo::IMUFilter::TurnOnIndicatorLight()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter20TurnOnIndicatorLightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::IMUFilter::TurnOnIndicatorLight() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
</UL>
<P><STRONG><a name="[2c0]"></a>Anki::Cozmo::IMUFilter::UpdateEventDetection()</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter20UpdateEventDetectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Anki::Cozmo::IMUFilter::UpdateEventDetection() &rArr; Anki::Cozmo::IMUFilter::DetectNsideDown()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::DetectNsideDown()
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
</UL>

<P><STRONG><a name="[9e]"></a>Anki::Cozmo::IMUFilter::StartPickAndPlaceTest()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter21StartPickAndPlaceTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::IMUFilter::StartPickAndPlaceTest() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
</UL>
<P><STRONG><a name="[a1]"></a>Anki::Cozmo::IMUFilter::TurnOffIndicatorLight()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter21TurnOffIndicatorLightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Anki::Cozmo::IMUFilter::TurnOffIndicatorLight() &rArr; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv)
</UL>
<P><STRONG><a name="[2af]"></a>Anki::Cozmo::IMUFilter::Reset()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter5ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[2aa]"></a>Anki::Cozmo::IMUFilter::Update()</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Anki::Cozmo::IMUFilter::Update() &rArr; Anki::Cozmo::IMUFilter::UpdateEventDetection() &rArr; Anki::Cozmo::IMUFilter::DetectNsideDown()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetAngleRad()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_fast(float, float)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::UpdateEventDetection()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::DetectMotion()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[24a]"></a>Anki::Radians::angularDistance(const Anki::Radians&, bool)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7Radians15angularDistanceERKS0_b))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePointTurn()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToPointTurnSegment(float, float, float, float&, float&) const
</UL>

<P><STRONG><a name="[2c4]"></a>Anki::Radians::rescale()</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, radians.o(i._ZN4Anki7Radians7rescaleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator -() const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator +=(float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator +(const Anki::Radians&, float)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator +(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, float)
</UL>

<P><STRONG><a name="[1b9]"></a>Anki::Radians::Radians(const Anki::Radians&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansC1ERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatOrientation()
</UL>

<P><STRONG><a name="[43f]"></a>Anki::Radians::Radians__sub_object(const Anki::Radians&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansC1ERKS0_), UNUSED)

<P><STRONG><a name="[1bb]"></a>Anki::Radians::Radians(float)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radians.o(i._ZN4Anki7RadiansC1Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_liftController_cpp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_headController_cpp
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_dockingController_cpp
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_localization_cpp
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToPointTurnSegment(float, float, float, float&, float&) const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToLineSegment(float, float, float, float&, float&) const
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const
</UL>

<P><STRONG><a name="[440]"></a>Anki::Radians::Radians__sub_object(float)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, radians.o(i._ZN4Anki7RadiansC1Ef), UNUSED)

<P><STRONG><a name="[1c4]"></a>Anki::Radians::Radians()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_steeringController_cpp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::UpdateRobotStateMsg()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[441]"></a>Anki::Radians::Radians__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansC1Ev), UNUSED)

<P><STRONG><a name="[1aa]"></a>Anki::Radians::operator =(const Anki::Radians&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansaSERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1b6]"></a>Anki::Radians::operator =(float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Radians::operator =(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::CalibrationUpdate()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngleRad(float)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Update()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[1be]"></a>Anki::Radians::operator +=(float)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, radians.o(i._ZN4Anki7RadianspLEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Anki::Radians::operator +=(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Update()
</UL>

<P><STRONG><a name="[2c6]"></a>Anki::Embedded::MemoryStack::Reallocate(void*, int, int&)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStack10ReallocateEPviRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::set_zeroAllocatedMemory(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)
</UL>

<P><STRONG><a name="[2ca]"></a>Anki::Embedded::MemoryStack::Allocate(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStack8AllocateEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Anki::Embedded::MemoryStack::Allocate(int) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2c9]"></a>Anki::Embedded::MemoryStack::Allocate(int, bool, int&)</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStack8AllocateEibRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Reallocate(void*, int, int&)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::VisionMarker&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)
</UL>

<P><STRONG><a name="[1dc]"></a>Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_localization_cpp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const
</UL>

<P><STRONG><a name="[442]"></a>Anki::Embedded::MemoryStack::MemoryStack__sub_object(void*, int, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[1b1]"></a>Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1ERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformedCorners(Anki::Embedded::MemoryStack) const
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::SendTrackInit(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateRotationAndTranslation(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[443]"></a>Anki::Embedded::MemoryStack::MemoryStack__sub_object(const Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1ERKS1_), UNUSED)

<P><STRONG><a name="[2cb]"></a>Anki::Embedded::MemoryStack::MemoryStack()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::MemoryStack::MemoryStack()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::SerializedBuffer::SerializedBuffer()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_visionSystem_cpp
</UL>

<P><STRONG><a name="[444]"></a>Anki::Embedded::MemoryStack::MemoryStack__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1Ev), UNUSED)

<P><STRONG><a name="[2cd]"></a>Anki::Embedded::DecisionTree::DecisionTree(const void*, int, int, int, const unsigned short*, int)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, decisiontree.o(i._ZN4Anki8Embedded12DecisionTreeC1EPKviiiPKti))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Anki::Embedded::DecisionTree::DecisionTree(const void*, int, int, int, const unsigned short*, int) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int)
</UL>

<P><STRONG><a name="[445]"></a>Anki::Embedded::DecisionTree::DecisionTree__sub_object(const void*, int, int, int, const unsigned short*, int)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, decisiontree.o(i._ZN4Anki8Embedded12DecisionTreeC1EPKviiiPKti), UNUSED)

<P><STRONG><a name="[355]"></a>Anki::Embedded::DecisionTree::DecisionTree()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, decisiontree.o(i._ZN4Anki8Embedded12DecisionTreeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree()
</UL>

<P><STRONG><a name="[446]"></a>Anki::Embedded::DecisionTree::DecisionTree__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, decisiontree.o(i._ZN4Anki8Embedded12DecisionTreeC1Ev), UNUSED)

<P><STRONG><a name="[1ec]"></a>Anki::Embedded::EndBenchmark(const char*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, benchmarking.o(i._ZN4Anki8Embedded12EndBenchmarkEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::EndBenchmark(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CameraGetFrame(unsigned char*, Anki::Vision::CameraResolution, bool)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[2ce]"></a>Anki::Embedded::VisionMarker::Initialize()</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, fiducialmarkers.o(i._ZN4Anki8Embedded12VisionMarker10InitializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Anki::Embedded::VisionMarker::Initialize() &rArr; Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int) &rArr; Anki::Embedded::DecisionTree::DecisionTree(const void*, int, int, int, const unsigned short*, int) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::ComputeBrightDarkValues(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, float&, float&, bool&)
</UL>

<P><STRONG><a name="[2d0]"></a>Anki::Embedded::VisionMarker::ComputeBrightDarkValues(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, float&, float&, bool&)</STRONG> (Thumb, 700 bytes, Stack size 152 bytes, fiducialmarkers.o(i._ZN4Anki8Embedded12VisionMarker23ComputeBrightDarkValuesERKNS0_5ArrayIhEERKNS2_IfEEfRfS9_Rb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Anki::Embedded::VisionMarker::ComputeBrightDarkValues(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, float&, float&, bool&) &rArr; Anki::Embedded::VisionMarker::Initialize() &rArr; Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int) &rArr; Anki::Embedded::DecisionTree::DecisionTree(const void*, int, int, int, const unsigned short*, int) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DecisionTree::get_numFractionalBits() const
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2d2]"></a>Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 858 bytes, Stack size 192 bytes, fiducialmarkers.o(i._ZN4Anki8Embedded12VisionMarker7ExtractERKNS0_5ArrayIhEERKNS0_13QuadrilateralIsEERKNS2_IfEEfiiNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotDivide&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, T1, Anki::Embedded::ArraySlice&lang;T3&rang;) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::Classify(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::Verify(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int, bool&) const
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::ComputeBrightDarkValues(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, float&, float&, bool&)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Initialize()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2d6]"></a>Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 706 bytes, Stack size 200 bytes, histogram.o(i._ZN4Anki8Embedded13IntegerCountsC1ERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiRNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::get_maximumSize() const
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, float, float, float, float&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[447]"></a>Anki::Embedded::IntegerCounts::IntegerCounts__sub_object(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 0 bytes, Stack size 200 bytes, histogram.o(i._ZN4Anki8Embedded13IntegerCountsC1ERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiRNS0_11MemoryStackE), UNUSED)

<P><STRONG><a name="[1e3]"></a>Anki::Embedded::BeginBenchmark(const char*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, benchmarking.o(i._ZN4Anki8Embedded14BeginBenchmarkEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::BeginBenchmark(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CameraGetFrame(unsigned char*, Anki::Vision::CameraResolution, bool)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[2da]"></a>Anki::Embedded::LinearSequence&lang;float&rang;::computeSize(float, float, float)</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, sequences.o(i._ZN4Anki8Embedded14LinearSequenceIfE11computeSizeEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::LinearSequence&lang;float&rang;::computeSize(float, float, float) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Linspace&lang;float&rang;(T1, T1, int)
</UL>

<P><STRONG><a name="[32e]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::operator =(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, connectedcomponents.o(i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentEEaSERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::operator =(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ConnectedComponents(unsigned short, unsigned short, Anki::Embedded::MemoryStack&)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
</UL>

<P><STRONG><a name="[20a]"></a>Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, unsigned char, Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 1604 bytes, Stack size 104 bytes, filtering.o(i._ZN4Anki8Embedded15ImageProcessing18BoxFilterNormalizeERKNS0_5ArrayIhEEihRS3_NS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, unsigned char, Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::IsValid() const
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3cb]"></a>Anki::Embedded::ImageProcessing::GetBitShiftDirectionAndMagnitude(int, int, int, int&, bool&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, filtering.o(i._ZN4Anki8Embedded15ImageProcessing32GetBitShiftDirectionAndMagnitudeEiiiRiRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::ImageProcessing::GetBitShiftDirectionAndMagnitude(int, int, int, int&, bool&)
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1d&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&)
</UL>

<P><STRONG><a name="[313]"></a>Anki::Embedded::TemplateTracker::ComputeTemplateSample(unsigned char, float, float, float, float, const Anki::Embedded::TemplateTracker::HomographyStruct&, const Anki::Embedded::TemplateTracker::dR_dtheta_Struct&, float, float, Anki::Embedded::Array&lang;float&rang;&)</STRONG> (Thumb, 448 bytes, Stack size 76 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker21ComputeTemplateSampleEhffffRKNS1_16HomographyStructERKNS1_16dR_dtheta_StructEffRNS0_5ArrayIfEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Anki::Embedded::TemplateTracker::ComputeTemplateSample(unsigned char, float, float, float, float, const Anki::Embedded::TemplateTracker::HomographyStruct&, const Anki::Embedded::TemplateTracker::dR_dtheta_Struct&, float, float, Anki::Embedded::Array&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2dc]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lucaskanade_general.o(i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType) &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32() &rArr; Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32()
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof()
</UL>

<P><STRONG><a name="[448]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic__sub_object(Anki::Embedded::Transformations::TransformType)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lucaskanade_general.o(i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeE), UNUSED)

<P><STRONG><a name="[2de]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 820 bytes, Stack size 168 bytes, lucaskanade_general.o(i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOdd
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Rectangle&lang;float&rang;::get_width() const
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Rectangle&lang;float&rang;::get_height() const
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log2u32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack&)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[449]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic__sub_object(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 0 bytes, Stack size 168 bytes, lucaskanade_general.o(i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE), UNUSED)

<P><STRONG><a name="[1e8]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 292 bytes, Stack size 232 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof11UpdateTrackERKNS0_5ArrayIhEEiffhRbRiS8_S8_NS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Set(const Anki::Embedded::Transformations::PlanarTransformation_f32&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifyTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2e9]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::ApproximateSelect(const Anki::Embedded::Array&lang;float&rang;&, int, int, int, int&, Anki::Embedded::Array&lang;int&rang;&)</STRONG> (Thumb, 676 bytes, Stack size 304 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof17ApproximateSelectERKNS0_5ArrayIfEEiiiRiRNS3_IiEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::ApproximateSelect(const Anki::Embedded::Array&lang;float&rang;&, int, int, int, int&, Anki::Embedded::Array&lang;int&rang;&) &rArr; Anki::Embedded::Matrix::Max&lang;float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::get_size(int) const
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IndexSequence&lang;int&rang;(T1, T1, T1, int)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Max&lang;float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2ee]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack)</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof20UpdateTransformationENS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_rotationMatrix(Anki::Embedded::Array&lang;float&rang;&, bool) const
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::set_homography(const Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateRotationAndTranslation(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2e7]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 430 bytes, Stack size 80 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof22IterativelyRefineTrackERKNS0_5ArrayIhEEiiffNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log2u32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2f3]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 568 bytes, Stack size 248 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof25CreateVerificationSamplesERKNS0_5ArrayIhEERKNS0_14LinearSequenceIfEESA_fRiNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateY1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateY1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateX1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Vectorize&lang;float, float&rang;(bool, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[205]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateRotationAndTranslation(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof28UpdateRotationAndTranslationERKNS0_5ArrayIfEERKNS0_6Point3IfEENS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateRotationAndTranslation(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::GetEulerAngles(const Anki::Embedded::Array&lang;float&rang;&, float&, float&, float&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2f1]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 1732 bytes, Stack size 400 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiiffRbNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, bool, bool&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::MakeSymmetric&lang;Anki::Embedded::Array&lang;float&rang;&rang;(T1&, bool)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2f2]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 1412 bytes, Stack size 264 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, bool, bool&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::MakeSymmetric&lang;Anki::Embedded::Array&lang;float&rang;&rang;(T1&, bool)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[219]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 11642 bytes, Stack size 1680 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEifiifffffNS0_11MemoryStackERSD_SD_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*) &rArr; std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::GetEulerAngles(const Anki::Embedded::Array&lang;float&rang;&, float&, float&, float&)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;::set_size(int)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::MakeSymmetric&lang;Anki::Embedded::Array&lang;float&rang;&rang;(T1&, bool)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IndexSequence&lang;int&rang;(T1, T1, T1, int)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Linspace&lang;float&rang;(T1, T1, int)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::set_initialPointsAreZeroCentered(bool)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateY1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateX1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreValid&lang;Anki::Embedded::Array&lang;unsigned char&rang;, Anki::Embedded::Array&lang;float&rang;&rang;(const T1&, const T2&)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Vectorize&lang;float, float&rang;(bool, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::Add&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotMultiply&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConstArraySliceExpression&lang;float&rang;::ConstArraySliceExpression(Anki::Embedded::Array&lang;float&rang;, bool)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, unsigned char&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::set_size(int)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::set_size(int)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::set_size(int)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral(const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;float&rang;::ArraySlice(Anki::Embedded::Array&lang;float&rang;)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::ApproximateSelect(const Anki::Embedded::Array&lang;float&rang;&, int, int, int, int&, Anki::Embedded::Array&lang;int&rang;&)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::ComputeTemplateSample(unsigned char, float, float, float, float, const Anki::Embedded::TemplateTracker::HomographyStruct&, const Anki::Embedded::TemplateTracker::dR_dtheta_Struct&, float, float, Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[44a]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof__sub_object(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 0 bytes, Stack size 1680 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEifiifffffNS0_11MemoryStackERSD_SD_), UNUSED)

<P><STRONG><a name="[314]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof()</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof() &rArr; Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList() &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;::set_size(int)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::set_size(int)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::set_size(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_visionSystem_cpp
</UL>

<P><STRONG><a name="[44b]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofC1Ev), UNUSED)

<P><STRONG><a name="[2ef]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::set_homography(const Anki::Embedded::Array&lang;float&rang;&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f3214set_homographyERKNS0_5ArrayIfEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::set_homography(const Anki::Embedded::Array&lang;float&rang;&) &rArr; Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[316]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::set_transformType(Anki::Embedded::Transformations::TransformType)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f3217set_transformTypeENS1_13TransformTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::set_transformType(Anki::Embedded::Transformations::TransformType) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Set(const Anki::Embedded::Transformations::PlanarTransformation_f32&)
</UL>

<P><STRONG><a name="[317]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::TransformPointsStatic(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;float&rang;&, bool, bool, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&)</STRONG> (Thumb, 1736 bytes, Stack size 88 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f3221TransformPointsStaticERKNS0_5ArrayIfEES6_fRKNS0_5PointIfEENS1_13TransformTypeES6_bbRS4_SC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::TransformPointsStatic(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;float&rang;&, bool, bool, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const
</UL>

<P><STRONG><a name="[306]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::set_initialPointsAreZeroCentered(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f3232set_initialPointsAreZeroCenteredEb))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2e6]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::Set(const Anki::Embedded::Transformations::PlanarTransformation_f32&)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f323SetERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::Set(const Anki::Embedded::Transformations::PlanarTransformation_f32&) &rArr; Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::set_transformType(Anki::Embedded::Transformations::TransformType)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[318]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 354 bytes, Stack size 88 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f324InitENS1_13TransformTypeERKNS0_13QuadrilateralIfEERKNS0_5ArrayIfEERKNS0_5PointIfEERNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[305]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERKNS0_13QuadrilateralIfEERKNS0_5ArrayIfEERKNS0_5PointIfEERNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[44c]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32__sub_object(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERKNS0_13QuadrilateralIfEERKNS0_5ArrayIfEERKNS0_5PointIfEERNS0_11MemoryStackE), UNUSED)

<P><STRONG><a name="[2e3]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERKNS0_13QuadrilateralIfEERNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeCenter&lang;float&rang;() const
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[44d]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32__sub_object(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERKNS0_13QuadrilateralIfEERNS0_11MemoryStackE), UNUSED)

<P><STRONG><a name="[2e5]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 280 bytes, Stack size 128 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeCenter&lang;float&rang;() const
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[44e]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32__sub_object(Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 0 bytes, Stack size 128 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERNS0_11MemoryStackE), UNUSED)

<P><STRONG><a name="[2dd]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32() &rArr; Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral()
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType)
</UL>

<P><STRONG><a name="[44f]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1Ev), UNUSED)

<P><STRONG><a name="[31b]"></a>Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 422 bytes, Stack size 216 bytes, transformations.o(i._ZN4Anki8Embedded15Transformations25ComputeHomographyFromQuadERKNS0_13QuadrilateralIsEERNS0_5ArrayIfEENS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::PushBack(const Anki::Embedded::Point&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[31f]"></a>Anki::Embedded::SerializedBuffer::SerializedBuffer()</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, serialize.o(i._ZN4Anki8Embedded16SerializedBufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Embedded::SerializedBuffer::SerializedBuffer() &rArr; Anki::Embedded::MemoryStack::MemoryStack()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack()
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_visionDebugStream_cpp
</UL>

<P><STRONG><a name="[450]"></a>Anki::Embedded::SerializedBuffer::SerializedBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, serialize.o(i._ZN4Anki8Embedded16SerializedBufferC1Ev), UNUSED)

<P><STRONG><a name="[320]"></a>Anki::Embedded::ecvcs_filterRows(const Anki::Embedded::ScrollingIntegralImage_u8_s32&, int, int, int, Anki::Embedded::Array&lang;unsigned char&rang;*)</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, computecharacteristicscale.o(i._ZN4Anki8Embedded16ecvcs_filterRowsERKNS0_29ScrollingIntegralImage_u8_s32EiiiPNS0_5ArrayIhEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Anki::Embedded::ecvcs_filterRows(const Anki::Embedded::ScrollingIntegralImage_u8_s32&, int, int, int, Anki::Embedded::Array&lang;unsigned char&rang;*) &rArr; Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow&lang;unsigned char&rang;(const Anki::Embedded::Rectangle&lang;short&rang;&, int, int, int, Anki::Embedded::Array&lang;T1&rang;&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow&lang;unsigned char&rang;(const Anki::Embedded::Rectangle&lang;short&rang;&, int, int, int, Anki::Embedded::Array&lang;T1&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[216]"></a>Anki::Embedded::CorrectVignetting(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::FixedLengthList&lang;float&rang;&)</STRONG> (Thumb, 546 bytes, Stack size 80 bytes, cameraimagingpipeline.o(i._ZN4Anki8Embedded17CorrectVignettingERNS0_5ArrayIhEERKNS0_15FixedLengthListIfEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::CorrectVignetting(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::FixedLengthList&lang;float&rang;&) &rArr; Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOdd
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[32b]"></a>Anki::Embedded::ConnectedComponents::FindMaximumId()</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents13FindMaximumIdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Embedded::ConnectedComponents::FindMaximumId()
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Finalize()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[322]"></a>Anki::Embedded::ConnectedComponents::Extract1dComponents(const unsigned char*, short, short, short, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents19Extract1dComponentsEPKhsssRNS0_15FixedLengthListINS0_25ConnectedComponentSegmentEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Anki::Embedded::ConnectedComponents::Extract1dComponents(const unsigned char*, short, short, short, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&) &rArr; Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::get_maximumSize() const
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
</UL>

<P><STRONG><a name="[326]"></a>Anki::Embedded::ConnectedComponents::ComputeComponentSizes(Anki::Embedded::FixedLengthList&lang;int&rang;&)</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents21ComputeComponentSizesERNS0_15FixedLengthListIiEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Anki::Embedded::ConnectedComponents::ComputeComponentSizes(Anki::Embedded::FixedLengthList&lang;int&rang;&) &rArr; Anki::Embedded::FixedLengthList&lang;int&rang;::SetZero() &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::set_size(int)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::IsValid() const
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::SetZero()
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[32a]"></a>Anki::Embedded::ConnectedComponents::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Anki::Embedded::ConnectedComponents::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::MemoryStack::Allocate(int) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::FindMaximumId()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[32c]"></a>Anki::Embedded::ConnectedComponents::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 462 bytes, Stack size 64 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Anki::Embedded::ConnectedComponents::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::MemoryStack::Allocate(int) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::FindMaximumId()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[32d]"></a>Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)</STRONG> (Thumb, 582 bytes, Stack size 112 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents34Extract2dComponents_PerRow_NextRowEPKhisss))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short) &rArr; Anki::Embedded::ConnectedComponents::Extract1dComponents(const unsigned char*, short, short, short, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&) &rArr; Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::get_maximumSize() const
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract1dComponents(const unsigned char*, short, short, short, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::operator =(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[32f]"></a>Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)</STRONG> (Thumb, 332 bytes, Stack size 168 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents34SortConnectedComponentSegmentsByIdENS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::IsValid() const
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[332]"></a>Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Finalize()</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents35Extract2dComponents_PerRow_FinalizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Finalize() &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::FindMaximumId()
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[333]"></a>Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents36CompressConnectedComponentSegmentIdsENS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::MemoryStack::Allocate(int) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::FindMaximumId()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[334]"></a>Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 282 bytes, Stack size 152 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::get_maximumSize() const
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::operator =(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[335]"></a>Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 524 bytes, Stack size 432 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponents43InvalidateFilledCenterComponents_hollowRowsEfNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::FixedLengthList&lang;bool&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;bool&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;int&rang;::Set(int)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;bool&rang;::Set(bool)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ComputeComponentSizes(Anki::Embedded::FixedLengthList&lang;int&rang;&)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::FindMaximumId()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[33a]"></a>Anki::Embedded::ConnectedComponents::ConnectedComponents(unsigned short, unsigned short, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 258 bytes, Stack size 160 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponentsC1EttRNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Anki::Embedded::ConnectedComponents::ConnectedComponents(unsigned short, unsigned short, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::operator =(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[451]"></a>Anki::Embedded::ConnectedComponents::ConnectedComponents__sub_object(unsigned short, unsigned short, Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 0 bytes, Stack size 160 bytes, connectedcomponents.o(i._ZN4Anki8Embedded19ConnectedComponentsC1EttRNS0_11MemoryStackE), UNUSED)

<P><STRONG><a name="[2d3]"></a>Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 5934 bytes, Stack size 864 bytes, quadrefinement.o(i._ZN4Anki8Embedded19RefineQuadrilateralERKNS0_13QuadrilateralIsEERKNS0_5ArrayIfEERKNS5_IhEEfiffiRNS1_IfEERS6_NS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotDivide&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, T1, Anki::Embedded::ArraySlice&lang;T3&rang;) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point&lang;short&rang;::Length() const
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotDivide&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, T1, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConstArraySlice&lang;float&rang;::ConstArraySlice(const Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1f4]"></a>Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 2004 bytes, Stack size 608 bytes, detectfiducialmarkers.o(i._ZN4Anki8Embedded21DetectFiducialMarkersERKNS0_5ArrayIhEERNS0_15FixedLengthListINS0_12VisionMarkerEEERNS5_INS1_IfEEEEiissiiiifiiiftiiibNS0_11MemoryStackESC_SC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool) &rArr; Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::get_totalBytes() const
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::IsValid() const
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ConnectedComponents(unsigned short, unsigned short, Anki::Embedded::MemoryStack&)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::set_size(int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::set_size(int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[346]"></a>Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 2034 bytes, Stack size 424 bytes, laplacianpeaks.o(i._ZN4Anki8Embedded21ExtractLaplacianPeaksERKNS0_15FixedLengthListINS0_5PointIsEEEERS4_NS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool) &rArr; Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::set_size(int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::get_size(int) const
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::IsValid() const
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::get_maximumSize() const
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1d&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedPointArray&lang;short&rang;::FixedPointArray(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::PushBack(const int&)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[35d]"></a>Anki::Embedded::ecvcs_computeBinaryImage(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;*, int, int, int, int, unsigned char*)</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, computecharacteristicscale.o(i._ZN4Anki8Embedded24ecvcs_computeBinaryImageERKNS0_5ArrayIhEEPS3_iiiiPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Embedded::ecvcs_computeBinaryImage(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;*, int, int, int, int, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[350]"></a>Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 2276 bytes, Stack size 88 bytes, traceboundary.o(i._ZN4Anki8Embedded25TraceNextExteriorBoundaryERKNS0_19ConnectedComponentsEiRNS0_15FixedLengthListINS0_5PointIsEEEERiNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::MemoryStack::Allocate(int) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::get_size() const
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::IsValid() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::get_isSortedInId() const
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::get_maximumSize() const
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::PushBack(const Anki::Embedded::Point&lang;short&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2cf]"></a>Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int)</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, decisiontree_vision.o(i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1EPKviiiPKsS5_iPKti))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int) &rArr; Anki::Embedded::DecisionTree::DecisionTree(const void*, int, int, int, const unsigned short*, int) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DecisionTree::DecisionTree(const void*, int, int, int, const unsigned short*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Initialize()
</UL>

<P><STRONG><a name="[452]"></a>Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree__sub_object(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, decisiontree_vision.o(i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1EPKviiiPKsS5_iPKti), UNUSED)

<P><STRONG><a name="[354]"></a>Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, decisiontree_vision.o(i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree()
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DecisionTree::DecisionTree()
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_fiducialMarkers_cpp
</UL>

<P><STRONG><a name="[453]"></a>Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, decisiontree_vision.o(i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1Ev), UNUSED)

<P><STRONG><a name="[217]"></a>Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, float, float, float, float&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 308 bytes, Stack size 120 bytes, cameraimagingpipeline.o(i._ZN4Anki8Embedded27ComputeBestCameraParametersERKNS0_5ArrayIhEERKNS0_9RectangleIiEEifffRfNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, float, float, float, float&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::ComputePercentile(float) const
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::get_numElements() const
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::get_counts() const
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[359]"></a>Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 790 bytes, Stack size 88 bytes, integralimage.o(i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3210ScrollDownERKNS0_5ArrayIhEEiNS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::get_size(int) const
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::PadImageRow(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::Array&lang;unsigned char&rang;&)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[35a]"></a>Anki::Embedded::ScrollingIntegralImage_u8_s32::PadImageRow(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::Array&lang;unsigned char&rang;&)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, integralimage.o(i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3211PadImageRowERKNS0_5ArrayIhEEiRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Embedded::ScrollingIntegralImage_u8_s32::PadImageRow(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::Array&lang;unsigned char&rang;&) &rArr; Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[35b]"></a>Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, integralimage.o(i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[454]"></a>Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32__sub_object(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, integralimage.o(i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[35e]"></a>Anki::Embedded::ecvcs_computeBinaryImage_numPyramids3(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;*, int, int, int, int, unsigned char*)</STRONG> (Thumb, 152 bytes, Stack size 36 bytes, computecharacteristicscale.o(i._ZN4Anki8Embedded37ecvcs_computeBinaryImage_numPyramids3ERKNS0_5ArrayIhEEPS3_iiiiPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Anki::Embedded::ecvcs_computeBinaryImage_numPyramids3(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;*, int, int, int, int, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[342]"></a>Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 844 bytes, Stack size 368 bytes, computecharacteristicscale.o(i._ZN4Anki8Embedded39ExtractComponentsViaCharacteristicScaleERKNS0_5ArrayIhEEiissRNS0_19ConnectedComponentsENS0_11MemoryStackES7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&) &rArr; Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::get_buffer() const
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ecvcs_computeBinaryImage_numPyramids3_thresholdMultiplier1(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;*, int, int, int, unsigned char*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ecvcs_computeBinaryImage_numPyramids3(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;*, int, int, int, int, unsigned char*)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ecvcs_computeBinaryImage(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;*, int, int, int, int, unsigned char*)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ecvcs_filterRows(const Anki::Embedded::ScrollingIntegralImage_u8_s32&, int, int, int, Anki::Embedded::Array&lang;unsigned char&rang;*)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::IsValid() const
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Finalize()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::get_maxRow(int) const
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[345]"></a>Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 886 bytes, Stack size 312 bytes, computequadrilaterals.o(i._ZN4Anki8Embedded44ComputeQuadrilateralsFromConnectedComponentsERKNS0_19ConnectedComponentsEiiiiiRNS0_15FixedLengthListINS0_13QuadrilateralIsEEEENS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool) &rArr; Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;short&rang;::Quadrilateral(const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::IsValid() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::get_isSortedInId() const
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::get_maximumId() const
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[360]"></a>Anki::Embedded::ecvcs_computeBinaryImage_numPyramids3_thresholdMultiplier1(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;*, int, int, int, unsigned char*)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, computecharacteristicscale.o(i._ZN4Anki8Embedded58ecvcs_computeBinaryImage_numPyramids3_thresholdMultiplier1ERKNS0_5ArrayIhEEPS3_iiiPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Embedded::ecvcs_computeBinaryImage_numPyramids3_thresholdMultiplier1(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;*, int, int, int, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2c8]"></a>Anki::Embedded::Flags::Buffer::set_zeroAllocatedMemory(bool)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, flags.o(i._ZN4Anki8Embedded5Flags6Buffer23set_zeroAllocatedMemoryEb))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Reallocate(void*, int, int&)
</UL>

<P><STRONG><a name="[1db]"></a>Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, flags.o(i._ZN4Anki8Embedded5Flags6BufferC1Ebbb))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_localization_cpp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ConnectedComponents(unsigned short, unsigned short, Anki::Embedded::MemoryStack&)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, unsigned char, Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[455]"></a>Anki::Embedded::Flags::Buffer::Buffer__sub_object(bool, bool, bool)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, flags.o(i._ZN4Anki8Embedded5Flags6BufferC1Ebbb), UNUSED)

<P><STRONG><a name="[2cc]"></a>Anki::Embedded::Flags::Buffer::Buffer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flags.o(i._ZN4Anki8Embedded5Flags6BufferC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_visionSystem_cpp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::VisionMarker&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[456]"></a>Anki::Embedded::Flags::Buffer::Buffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, flags.o(i._ZN4Anki8Embedded5Flags6BufferC1Ev), UNUSED)

<P><STRONG><a name="[3ce]"></a>Anki::Embedded::Round&lang;int&rang;(float)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, benchmarking.o(i._ZN4Anki8Embedded5RoundIiEET_f))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, unsigned char&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
</UL>

<P><STRONG><a name="[2fb]"></a>Anki::Embedded::Matrix::GetEulerAngles(const Anki::Embedded::Array&lang;float&rang;&, float&, float&, float&)</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, matrix.o(i._ZN4Anki8Embedded6Matrix14GetEulerAnglesERKNS0_5ArrayIfEERfS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Anki::Embedded::Matrix::GetEulerAngles(const Anki::Embedded::Array&lang;float&rang;&, float&, float&, float&) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateRotationAndTranslation(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[364]"></a>Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, path.o(i._ZN4Anki8Planning11GetArcAngleEffffffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[368]"></a>Anki::Planning::PathSegment::DefineLine(float, float, float, float, float, float, float)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning11PathSegment10DefineLineEfffffff))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[366]"></a>Anki::Planning::PathSegment::DefineArc(float, float, float, float, float, float, float, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning11PathSegment9DefineArcEffffffff))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[a5]"></a>Anki::Planning::PathSegment::PathSegment()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning11PathSegmentC1Ev))
<BR>[Address Reference Count : 2]<UL><LI> path.o(i._ZN4Anki8Planning4PathC1Ev)
<LI> path.o(i._ZN4Anki8Planning18GenerateDubinsPathERNS0_4PathEffffffffffffPf)
</UL>
<P><STRONG><a name="[457]"></a>Anki::Planning::PathSegment::PathSegment__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning11PathSegmentC1Ev), UNUSED)

<P><STRONG><a name="[365]"></a>Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)</STRONG> (Thumb, 780 bytes, Stack size 144 bytes, path.o(i._ZN4Anki8Planning16GenerateCSCCurveEfffffffffffNS0_14DubinsPathTypeEPNS0_11PathSegmentERf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetLength() const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineArc(float, float, float, float, float, float, float, float)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineLine(float, float, float, float, float, float, float)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
</UL>

<P><STRONG><a name="[1c2]"></a>Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)</STRONG> (Thumb, 428 bytes, Stack size 528 bytes, path.o(i._ZN4Anki8Planning18GenerateDubinsPathERNS0_4PathEffffffffffffPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineLine(float, float, float, float, float, float, float)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*)
</UL>

<P><STRONG><a name="[1ce]"></a>Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4Path10AppendLineEjfffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float) &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineLine(float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1d3]"></a>Anki::Planning::Path::Clear()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning4Path5ClearEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Init()
</UL>

<P><STRONG><a name="[1cc]"></a>Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 664 bytes, Stack size 136 bytes, path.o(i._ZN4Anki8Planning4Path9AppendArcEjffffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float) &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator &lang;(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator &rang;=(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator ==(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(const Anki::Radians&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator !=(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineArc(float, float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[36a]"></a>Anki::Planning::Path::Path()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4PathC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Planning::Path::Path() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_pathFollower_cpp
</UL>

<P><STRONG><a name="[458]"></a>Anki::Planning::Path::Path__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4PathC1Ev), UNUSED)

<P><STRONG><a name="[220]"></a>Anki::operator ==(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkieqERKNS_7RadiansES2_))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
</UL>

<P><STRONG><a name="[22b]"></a>Anki::operator &rang;=(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkigeERKNS_7RadiansES2_))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
</UL>

<P><STRONG><a name="[22a]"></a>Anki::operator &lang;(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkiltERKNS_7RadiansES2_))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
</UL>

<P><STRONG><a name="[203]"></a>Anki::operator -(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkimiERKNS_7RadiansES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::operator -(const Anki::Radians&, const Anki::Radians&) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const
</UL>

<P><STRONG><a name="[1e9]"></a>Anki::operator -(const Anki::Radians&, float)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, radians.o(i._ZN4AnkimiERKNS_7RadiansEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::operator -(const Anki::Radians&, float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToLineSegment(float, float, float, float&, float&) const
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const
</UL>

<P><STRONG><a name="[369]"></a>Anki::operator !=(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkineERKNS_7RadiansES2_))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[36b]"></a>Anki::operator +(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkiplERKNS_7RadiansES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::operator +(const Anki::Radians&, const Anki::Radians&) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const
</UL>

<P><STRONG><a name="[243]"></a>Anki::operator +(const Anki::Radians&, float)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, radians.o(i._ZN4AnkiplERKNS_7RadiansEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::operator +(const Anki::Radians&, float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
</UL>

<P><STRONG><a name="[29a]"></a>__rw::__rw_throw(int, ...)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rwstdexcept.o(i._ZN4__rw10__rw_throwEiz))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace&lang;unsigned char*&rang;(char*, char*, T1, T1, const __rw::__rw_select&lang;(bool)0&rang;*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[36e]"></a>__rw::__rw_allocate(unsigned, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rwalloc.o(i._ZN4__rw13__rw_allocateEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = __rw::__rw_allocate(unsigned, int) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>

<P><STRONG><a name="[377]"></a>__rw::__rw_deallocate(void*, unsigned, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwalloc.o(i._ZN4__rw15__rw_deallocateEPvji))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>

<P><STRONG><a name="[d0]"></a>__rw::__rw_facet_base::_C_initfacet(const std::locale&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale))
<BR>[Address Reference Count : 2]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
<LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[378]"></a>__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[459]"></a>__rw::__rw_locale_imp::__rw_locale_imp__sub_object(const char*, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj), UNUSED)

<P><STRONG><a name="[37b]"></a>__rw::__rw_locale_imp::~__rw_locale_imp()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>

<P><STRONG><a name="[45a]"></a>__rw::__rw_locale_imp::~__rw_locale_imp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev), UNUSED)

<P><STRONG><a name="[37d]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[45b]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale__sub_object(const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci), UNUSED)

<P><STRONG><a name="[37f]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale() &rArr; setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[45c]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev), UNUSED)

<P><STRONG><a name="[1c]"></a>__rw::__rw_throw_exception_noex(int, char*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw_exception_noex(int, char*) &rArr; fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_noex.o(.data)
</UL>
<P><STRONG><a name="[19f]"></a>__rw::__catfind(__rw::__rw_cat*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rwcats.o(i._ZN4__rw9__catfindEPNS_8__rw_catE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
</UL>

<P><STRONG><a name="[2bd]"></a>Anki::Radians::getDegrees() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radians.o(i._ZNK4Anki7Radians10getDegreesEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
</UL>

<P><STRONG><a name="[22c]"></a>Anki::Radians::operator -() const</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, radians.o(i._ZNK4Anki7RadiansngEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Radians::operator -() const &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
</UL>

<P><STRONG><a name="[35c]"></a>Anki::Embedded::MemoryStack::get_buffer() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memory.o(i._ZNK4Anki8Embedded11MemoryStack10get_bufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[340]"></a>Anki::Embedded::MemoryStack::get_totalBytes() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memory.o(i._ZNK4Anki8Embedded11MemoryStack14get_totalBytesEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1dd]"></a>Anki::Embedded::MemoryStack::IsValid() const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, memory.o(i._ZNK4Anki8Embedded11MemoryStack7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::MemoryStack::IsValid() const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2d1]"></a>Anki::Embedded::DecisionTree::get_numFractionalBits() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decisiontree.o(i._ZNK4Anki8Embedded12DecisionTree21get_numFractionalBitsEv))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::ComputeBrightDarkValues(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, float&, float&, bool&)
</UL>

<P><STRONG><a name="[383]"></a>Anki::Embedded::DecisionTree::IsValid() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, decisiontree.o(i._ZNK4Anki8Embedded12DecisionTree7IsValidEv))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const
</UL>

<P><STRONG><a name="[357]"></a>Anki::Embedded::IntegerCounts::get_counts() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, histogram.o(i._ZNK4Anki8Embedded13IntegerCounts10get_countsEv))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, float, float, float, float&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[356]"></a>Anki::Embedded::IntegerCounts::get_numElements() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, histogram.o(i._ZNK4Anki8Embedded13IntegerCounts15get_numElementsEv))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, float, float, float, float&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[358]"></a>Anki::Embedded::IntegerCounts::ComputePercentile(float) const</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, histogram.o(i._ZNK4Anki8Embedded13IntegerCounts17ComputePercentileEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Embedded::IntegerCounts::ComputePercentile(float) const
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, float, float, float, float&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[200]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::get_transformation() const</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lucaskanade_general.o(i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18get_transformationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::get_transformation() const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::SendTrackInit(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2f0]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lucaskanade_general.o(i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::IsValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IsValid() const
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1e4]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_angleX() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lucaskanade_sampledplanar6dof.o(i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof10get_angleXEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1e5]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_angleY() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lucaskanade_sampledplanar6dof.o(i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof10get_angleYEv))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1e6]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_angleZ() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lucaskanade_sampledplanar6dof.o(i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof10get_angleZEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1e7]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_translation() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lucaskanade_sampledplanar6dof.o(i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof15get_translationEv))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[204]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_rotationMatrix(Anki::Embedded::Array&lang;float&rang;&, bool) const</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, lucaskanade_sampledplanar6dof.o(i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof18get_rotationMatrixERNS0_5ArrayIfEEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_rotationMatrix(Anki::Embedded::Array&lang;float&rang;&, bool) const &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2e8]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifyTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, lucaskanade_sampledplanar6dof.o(i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifyTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const &rArr; Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[21a]"></a>Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IsValid() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lucaskanade_sampledplanar6dof.o(i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IsValid() const &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::IsValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[2f5]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transformations.o(i._ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifyTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2f4]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, transformations.o(i._ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Set(const Anki::Embedded::Transformations::PlanarTransformation_f32&)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifyTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2e4]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transformations.o(i._ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[201]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformedCorners(Anki::Embedded::MemoryStack) const</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, transformations.o(i._ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3222get_transformedCornersENS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformedCorners(Anki::Embedded::MemoryStack) const &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::SendTrackInit(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[380]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::IsValid() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, transformations.o(i._ZNK4Anki8Embedded15Transformations24PlanarTransformation_f327IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::IsValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const
</UL>

<P><STRONG><a name="[381]"></a>Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const</STRONG> (Thumb, 310 bytes, Stack size 152 bytes, transformations.o(i._ZNK4Anki8Embedded15Transformations24PlanarTransformation_f329TransformERKNS0_13QuadrilateralIfEENS0_11MemoryStackEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::TransformPointsStatic(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;float&rang;&, bool, bool, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformedCorners(Anki::Embedded::MemoryStack) const
</UL>

<P><STRONG><a name="[362]"></a>Anki::Embedded::ConnectedComponents::get_maximumId() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connectedcomponents.o(i._ZNK4Anki8Embedded19ConnectedComponents13get_maximumIdEv))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[352]"></a>Anki::Embedded::ConnectedComponents::get_isSortedInId() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connectedcomponents.o(i._ZNK4Anki8Embedded19ConnectedComponents16get_isSortedInIdEv))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[341]"></a>Anki::Embedded::ConnectedComponents::IsValid() const</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, connectedcomponents.o(i._ZNK4Anki8Embedded19ConnectedComponents7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Embedded::ConnectedComponents::IsValid() const &rArr; Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::IsValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[351]"></a>Anki::Embedded::ConnectedComponents::get_size() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, connectedcomponents.o(i._ZNK4Anki8Embedded19ConnectedComponents8get_sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2d5]"></a>Anki::Embedded::FiducialMarkerDecisionTree::Verify(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int, bool&) const</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, decisiontree_vision.o(i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree6VerifyERKNS0_5ArrayIhEERKNS2_IfEEhiRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Anki::Embedded::FiducialMarkerDecisionTree::Verify(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int, bool&) const &rArr; Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2d4]"></a>Anki::Embedded::FiducialMarkerDecisionTree::Classify(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, decisiontree_vision.o(i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree8ClassifyERKNS0_5ArrayIhEERKNS2_IfEEhRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Anki::Embedded::FiducialMarkerDecisionTree::Classify(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const &rArr; Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[382]"></a>Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const</STRONG> (Thumb, 564 bytes, Stack size 128 bytes, decisiontree_vision.o(i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree8FindLeafERKNS0_5ArrayIhEERKNS2_IfEEhRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DecisionTree::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::Classify(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int&) const
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::Verify(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, unsigned char, int, bool&) const
</UL>

<P><STRONG><a name="[35f]"></a>Anki::Embedded::ScrollingIntegralImage_u8_s32::get_maxRow(int) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, integralimage.o(i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3210get_maxRowEi))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3e3]"></a>Anki::Embedded::ScrollingIntegralImage_u8_s32::get_imageWidth() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, integralimage.o(i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3214get_imageWidthEv))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow&lang;unsigned char&rang;(const Anki::Embedded::Rectangle&lang;short&rang;&, int, int, int, Anki::Embedded::Array&lang;T1&rang;&) const
</UL>

<P><STRONG><a name="[1e0]"></a>Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flags.o(i._ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;bool&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[2c7]"></a>Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flags.o(i._ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Reallocate(void*, int, int&)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::VisionMarker&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)
</UL>

<P><STRONG><a name="[312]"></a>Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flags.o(i._ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::VisionMarker&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[2e1]"></a>Anki::Embedded::Rectangle&lang;float&rang;::get_height() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, geometry.o(i._ZNK4Anki8Embedded9RectangleIfE10get_heightEv))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[2e0]"></a>Anki::Embedded::Rectangle&lang;float&rang;::get_width() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, geometry.o(i._ZNK4Anki8Embedded9RectangleIfE9get_widthEv))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[384]"></a>Anki::Planning::PathSegment::GetEndPoint(float&, float&) const</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, path.o(i._ZNK4Anki8Planning11PathSegment11GetEndPointERfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::PathSegment::GetEndPoint(float&, float&) const &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, unsigned char) const
</UL>

<P><STRONG><a name="[385]"></a>Anki::Planning::PathSegment::GetStartPoint(float&, float&) const</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, path.o(i._ZNK4Anki8Planning11PathSegment13GetStartPointERfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::PathSegment::GetStartPoint(float&, float&) const &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, unsigned char) const
</UL>

<P><STRONG><a name="[1c0]"></a>Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, path.o(i._ZNK4Anki8Planning11PathSegment16GetDistToSegmentEfffRfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const &rArr; Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const &rArr; Anki::operator -(const Anki::Radians&, float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToPointTurnSegment(float, float, float, float&, float&) const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToLineSegment(float, float, float, float&, float&) const
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::GetClosestSegment(float, float, float)
</UL>

<P><STRONG><a name="[387]"></a>Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const</STRONG> (Thumb, 848 bytes, Stack size 112 bytes, path.o(i._ZNK4Anki8Planning11PathSegment19GetDistToArcSegmentEfffRfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const &rArr; Anki::operator -(const Anki::Radians&, float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator +(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_fast(float, float)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, float)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const
</UL>

<P><STRONG><a name="[386]"></a>Anki::Planning::PathSegment::GetDistToLineSegment(float, float, float, float&, float&) const</STRONG> (Thumb, 696 bytes, Stack size 72 bytes, path.o(i._ZNK4Anki8Planning11PathSegment20GetDistToLineSegmentEfffRfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Anki::Planning::PathSegment::GetDistToLineSegment(float, float, float, float&, float&) const &rArr; Anki::operator -(const Anki::Radians&, float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_fast(float, float)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, float)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const
</UL>

<P><STRONG><a name="[388]"></a>Anki::Planning::PathSegment::GetDistToPointTurnSegment(float, float, float, float&, float&) const</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, path.o(i._ZNK4Anki8Planning11PathSegment25GetDistToPointTurnSegmentEfffRfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Planning::PathSegment::GetDistToPointTurnSegment(float, float, float, float&, float&) const &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::angularDistance(const Anki::Radians&, bool)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const
</UL>

<P><STRONG><a name="[389]"></a>Anki::Planning::PathSegment::Print() const</STRONG> (Thumb, 314 bytes, Stack size 128 bytes, path.o(i._ZNK4Anki8Planning11PathSegment5PrintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Anki::Planning::PathSegment::Print() const &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintPath() const
</UL>

<P><STRONG><a name="[367]"></a>Anki::Planning::PathSegment::GetLength() const</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, path.o(i._ZNK4Anki8Planning11PathSegment9GetLengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::PathSegment::GetLength() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[1c6]"></a>Anki::Planning::Path::CheckContinuity(float, short) const</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, path.o(i._ZNK4Anki8Planning4Path15CheckContinuityEfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::CheckContinuity(float, short) const &rArr; Anki::Planning::Path::CheckSegmentContinuity(float, unsigned char) const &rArr; Anki::Planning::PathSegment::GetStartPoint(float&, float&) const &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal()
</UL>

<P><STRONG><a name="[38a]"></a>Anki::Planning::Path::CheckSegmentContinuity(float, unsigned char) const</STRONG> (Thumb, 202 bytes, Stack size 88 bytes, path.o(i._ZNK4Anki8Planning4Path22CheckSegmentContinuityEfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::CheckSegmentContinuity(float, unsigned char) const &rArr; Anki::Planning::PathSegment::GetStartPoint(float&, float&) const &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckContinuity(float, short) const
</UL>

<P><STRONG><a name="[1d9]"></a>Anki::Planning::Path::PrintPath() const</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, path.o(i._ZNK4Anki8Planning4Path9PrintPathEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Anki::Planning::Path::PrintPath() const &rArr; Anki::Planning::PathSegment::Print() const &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::Print() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::PrintPath()
</UL>

<P><STRONG><a name="[d4]"></a>std::__rw_exception::what() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[38b]"></a>std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[38f]"></a>std::__rw_messages_base::_C_get_locale(int) const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, messages.o(i._ZNKSt18__rw_messages_base13_C_get_localeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = std::__rw_messages_base::_C_get_locale(int) const &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[391]"></a>std::__rw_messages_base::_C_get_message(int, int, int) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, messages.o(i._ZNKSt18__rw_messages_base14_C_get_messageEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::__rw_messages_base::_C_get_message(int, int, int) const &rArr; std::__rw_get_cats() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[39c]"></a>std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(i._ZNKSt5ctypeIcE2isENSt10ctype_base4maskEc))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>

<P><STRONG><a name="[392]"></a>std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, locale.o(i._ZNKSt6locale13_C_make_facetERKNS_2idEbiPFPN4__rw15__rw_facet_baseEiPKcjE))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[395]"></a>std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale16_C_install_facetEPN4__rw15__rw_facet_baseERKNS_2idE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const &rArr; __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[396]"></a>std::locale::name() const</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale4nameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>

<P><STRONG><a name="[397]"></a>std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(i._ZNSt11char_traitsIcE4copyEPcPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[398]"></a>std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, char.o(i._ZNSt12ctype_bynameIcE17_C_get_mask_tableEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>

<P><STRONG><a name="[39a]"></a>std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[45d]"></a>std::ctype_byname&lang;char&rang;::ctype_byname__sub_object(const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj), UNUSED)

<P><STRONG><a name="[d1]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[36d]"></a>std::__rw_exception::_C_vformat(int, std::__va_list)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rwstdexcept.o(i._ZNSt14__rw_exception10_C_vformatEiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[36c]"></a>std::__rw_exception::__rw_exception()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__rw_exception::__rw_exception()
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[45e]"></a>std::__rw_exception::__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev), UNUSED)

<P><STRONG><a name="[d3]"></a>std::__rw_exception::~__rw_exception()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[45f]"></a>std::__rw_exception::~__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev), UNUSED)

<P><STRONG><a name="[a9]"></a>std::__rw_open_cat_data::__rw_open_cat_data()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale)
</UL>
<P><STRONG><a name="[460]"></a>std::__rw_open_cat_data::__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev), UNUSED)

<P><STRONG><a name="[a8]"></a>std::__rw_open_cat_data::~__rw_open_cat_data()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__rw_open_cat_data::~__rw_open_cat_data() &rArr; std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
<LI> messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale)
</UL>
<P><STRONG><a name="[461]"></a>std::__rw_open_cat_data::~__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev), UNUSED)

<P><STRONG><a name="[38d]"></a>std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&) &rArr; std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[d2]"></a>std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = std::ctype&lang;char&rang;::_C_initfacet(const std::locale&) &rArr; std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[39b]"></a>std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[462]"></a>std::ctype&lang;char&rang;::ctype__sub_object(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj), UNUSED)

<P><STRONG><a name="[d6]"></a>std::ctype&lang;char&rang;::~ctype__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::ctype&lang;char&rang;::~ctype__deallocating() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[d5]"></a>std::ctype&lang;char&rang;::~ctype()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[463]"></a>std::ctype&lang;char&rang;::~ctype__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev), UNUSED)

<P><STRONG><a name="[cf]"></a>std::locale::facet::~facet__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwstdexcept.o(i._ZNSt6locale5facetD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::locale::facet::~facet__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[3a0]"></a>std::locale::_C_init()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, locale.o(i._ZNSt6locale7_C_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[390]"></a>std::locale::classic()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, locale.o(i._ZNSt6locale7classicEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[394]"></a>std::locale::locale(__rw::__rw_locale_imp*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[464]"></a>std::locale::locale__sub_object(__rw::__rw_locale_imp*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE), UNUSED)

<P><STRONG><a name="[39f]"></a>std::locale::locale(const std::locale&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[465]"></a>std::locale::locale__sub_object(const std::locale&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_), UNUSED)

<P><STRONG><a name="[375]"></a>std::locale::locale()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[466]"></a>std::locale::locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev), UNUSED)

<P><STRONG><a name="[aa]"></a>std::locale::~locale()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZNSt6locale7classicEv)
</UL>
<P><STRONG><a name="[467]"></a>std::locale::~locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev), UNUSED)

<P><STRONG><a name="[38e]"></a>std::locale::operator =(const std::locale&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, locale.o(i._ZNSt6localeaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
</UL>

<P><STRONG><a name="[d8]"></a>std::messages&lang;char&rang;::~messages__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::messages&lang;char&rang;::~messages__deallocating() &rArr; std::messages&lang;char&rang;::~messages() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[d7]"></a>std::messages&lang;char&rang;::~messages()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::messages&lang;char&rang;::~messages() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[468]"></a>std::messages&lang;char&rang;::~messages__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev), UNUSED)

<P><STRONG><a name="[39e]"></a>std::exception::exception()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
</UL>

<P><STRONG><a name="[469]"></a>std::exception::exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev), UNUSED)

<P><STRONG><a name="[38c]"></a>std::__rw_get_cats()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, messages.o(i._ZSt13__rw_get_catsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::__rw_get_cats() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[3a4]"></a>std::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, perspectiveposeestimation.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt&lang;float&rang;(const std::complex&lang;T1&rang;&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::MakeUnitLength()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[ad]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[1a2]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::facet::~facet__deallocating()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
</UL>

<P><STRONG><a name="[370]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp
</UL>

<P><STRONG><a name="[1a1]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
</UL>

<P><STRONG><a name="[3a6]"></a>__ARM_array_new_general</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[325]"></a>__ARM_common_memcpy4_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, connectedcomponents.o(i.__ARM_common_memcpy4_8))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract1dComponents(const unsigned char*, short, short, short, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)
</UL>

<P><STRONG><a name="[160]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3ad]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[3a3]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Path()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::get_transformation() const
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_visionSystem_cpp
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;short&rang;::Quadrilateral(const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral(const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral()
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_vec_dtor_cookie</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_vec_dtor_cookie.o(i.__aeabi_vec_dtor_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>

<P><STRONG><a name="[379]"></a>__aeabi_vec_new_cookie</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aeabi_vec_new_cookie.o(i.__aeabi_vec_new_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[11c]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[3a2]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[3ab]"></a>__cxa_vec_new</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>

<P><STRONG><a name="[1b5]"></a>__hardfp_acosf</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[1a5]"></a>__hardfp_asinf</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Height2Rad(float)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::GetEulerAngles(const Anki::Embedded::Array&lang;float&rang;&, float&, float&, float&)
</UL>

<P><STRONG><a name="[2c3]"></a>__hardfp_atan2f</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::arg&lang;float&rang;(const std::complex&lang;T1&rang;&)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const
</UL>

<P><STRONG><a name="[20e]"></a>__hardfp_atanf</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, atanf.o(i.__hardfp_atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atanf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[2c5]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, unsigned char&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[46a]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[1b0]"></a>__hardfp_cosf</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetCamPose(float&, float&, float&)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Update()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetCamPoseWrtRobot&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::GetEulerAngles(const Anki::Embedded::Array&lang;float&rang;&, float&, float&, float&)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_rotationMatrix(Anki::Embedded::Array&lang;float&rang;&, bool) const
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt&lang;float&rang;(const std::complex&lang;T1&rang;&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)
</UL>

<P><STRONG><a name="[34c]"></a>__hardfp_expf</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)
</UL>

<P><STRONG><a name="[46b]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[295]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CameraSetParameters(float, bool)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;float&rang;::computeSize(float, float, float)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, unsigned char&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3b0]"></a>__hardfp_ldexp</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[3b5]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)
</UL>

<P><STRONG><a name="[46c]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[34b]"></a>__hardfp_powf</STRONG> (Thumb, 1550 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)
</UL>

<P><STRONG><a name="[46d]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[1af]"></a>__hardfp_sinf</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::GetHeightMM()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetCamPose(float&, float&, float&)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::Update()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Update()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetCamPoseWrtRobot&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_rotationMatrix(Anki::Embedded::Array&lang;float&rang;&, bool) const
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt&lang;float&rang;(const std::complex&lang;T1&rang;&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)
</UL>

<P><STRONG><a name="[1a4]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetLength() const
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToPointTurnSegment(float, float, float, float&, float&) const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToLineSegment(float, float, float, float&, float&) const
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToArcSegment(float, float, float, float&, float&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, bool, bool&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point&lang;short&rang;::Length() const
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const
</UL>

<P><STRONG><a name="[2c2]"></a>__hardfp_tanf</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::Update()
</UL>

<P><STRONG><a name="[3b3]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[3ae]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[17f]"></a>__mathlib_narrow</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __mathlib_narrow &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3af]"></a>__mathlib_rredf2</STRONG> (Thumb, 296 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[187]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[133]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[127]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[183]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[146]"></a>ferror</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[86]"></a>fputc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; Anki::Cozmo::HAL::UARTPutChar(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutChar(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[3b7]"></a>frexp</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[122]"></a>main</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 5328 + Unknown Stack Size
<LI>Call Chain = main &rArr; Anki::Cozmo::Robot::step_LongExecution() &rArr; Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*) &rArr; std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_LongExecution()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::TimerInit()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTInit()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::Startup()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPIInit()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutString(const char*)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FrontCameraInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3ac]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[89]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[339]"></a>Anki::Embedded::ArraySlice&lang;bool&rang;::Set(bool)</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, connectedcomponents.o(t._ZN4Anki8Embedded10ArraySliceIbE3SetEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Embedded::ArraySlice&lang;bool&rang;::Set(bool) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[30f]"></a>Anki::Embedded::ArraySlice&lang;float&rang;::ArraySlice(Anki::Embedded::Array&lang;float&rang;)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Embedded::ArraySlice&lang;float&rang;::ArraySlice(Anki::Embedded::Array&lang;float&rang;) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateY1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateX1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
</UL>

<P><STRONG><a name="[46e]"></a>Anki::Embedded::ArraySlice&lang;float&rang;::ArraySlice__sub_object(Anki::Embedded::Array&lang;float&rang;)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE), UNUSED)

<P><STRONG><a name="[337]"></a>Anki::Embedded::ArraySlice&lang;int&rang;::Set(int)</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, connectedcomponents.o(t._ZN4Anki8Embedded10ArraySliceIiE3SetEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Embedded::ArraySlice&lang;int&rang;::Set(int) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3bd]"></a>Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool)</STRONG> (Thumb, 548 bytes, Stack size 264 bytes, laplacianpeaks.o(t._ZN4Anki8Embedded10ArraySliceIsE3SetERKNS0_25ConstArraySliceExpressionIsEEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool) &rArr; Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::IsValid() const
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3bf]"></a>Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, transformations.o(t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIfEEEEbiiRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Transpose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::MultiplyTranspose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3d9]"></a>Anki::Embedded::CrossProduct&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, perspectiveposeestimation.o(t._ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::createIntermediateCameraFrameHelper&lang;float&rang;(Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[2ec]"></a>Anki::Embedded::IndexSequence&lang;int&rang;(T1, T1, T1, int)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, filtering.o(t._ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::IndexSequence&lang;int&rang;(T1, T1, T1, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::operator ()(int, int, int, int) const
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::operator ()(int, int, int, int)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::ApproximateSelect(const Anki::Embedded::Array&lang;float&rang;&, int, int, int, int&, Anki::Embedded::Array&lang;int&rang;&)
</UL>

<P><STRONG><a name="[303]"></a>Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral(const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded13QuadrilateralIfEC1ERKNS0_5PointIfEES6_S6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral(const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const
</UL>

<P><STRONG><a name="[46f]"></a>Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral__sub_object(const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded13QuadrilateralIfEC1ERKNS0_5PointIfEES6_S6_S6_), UNUSED)

<P><STRONG><a name="[319]"></a>Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, transformations.o(t._ZN4Anki8Embedded13QuadrilateralIfEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[470]"></a>Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, transformations.o(t._ZN4Anki8Embedded13QuadrilateralIfEC1Ev), UNUSED)

<P><STRONG><a name="[363]"></a>Anki::Embedded::Quadrilateral&lang;short&rang;::Quadrilateral(const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, computequadrilaterals.o(t._ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Anki::Embedded::Quadrilateral&lang;short&rang;::Quadrilateral(const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[471]"></a>Anki::Embedded::Quadrilateral&lang;short&rang;::Quadrilateral__sub_object(const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&, const Anki::Embedded::Point&lang;short&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, computequadrilaterals.o(t._ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_), UNUSED)

<P><STRONG><a name="[1df]"></a>Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, visionsystem.o(t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;bool&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConstArraySliceExpression&lang;float&rang;::ConstArraySliceExpression(Anki::Embedded::Array&lang;float&rang;, bool)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;float&rang;::ArraySlice(Anki::Embedded::Array&lang;float&rang;)
</UL>

<P><STRONG><a name="[472]"></a>Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence__sub_object(int, int)</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, visionsystem.o(t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii), UNUSED)

<P><STRONG><a name="[2fe]"></a>Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cascadeclassifier.o(t._ZN4Anki8Embedded14LinearSequenceIiEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList()
</UL>

<P><STRONG><a name="[473]"></a>Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cascadeclassifier.o(t._ZN4Anki8Embedded14LinearSequenceIiEC1Ev), UNUSED)

<P><STRONG><a name="[1b2]"></a>Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 570 bytes, Stack size 112 bytes, localization.o(t._ZN4Anki8Embedded15ComputePoseDiffIfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_6Point3IS4_EES7_SB_RS5_RS9_NS0_11MemoryStackE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[33e]"></a>Anki::Embedded::ConstArraySlice&lang;float&rang;::ConstArraySlice(const Anki::Embedded::Array&lang;float&rang;&)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, quadrefinement.o(t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Embedded::ConstArraySlice&lang;float&rang;::ConstArraySlice(const Anki::Embedded::Array&lang;float&rang;&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[474]"></a>Anki::Embedded::ConstArraySlice&lang;float&rang;::ConstArraySlice__sub_object(const Anki::Embedded::Array&lang;float&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, quadrefinement.o(t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE), UNUSED)

<P><STRONG><a name="[1e1]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, visionsystem.o(t._ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_visionSystem_cpp
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[344]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, detectfiducialmarkers.o(t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIsEEE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[301]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof12VerifySampleEE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[30b]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof14TemplateSampleEE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[323]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentEE8set_sizeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::get_maximumSize() const
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract1dComponents(const unsigned char*, short, short, short, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)
</UL>

<P><STRONG><a name="[331]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ConnectedComponents(unsigned short, unsigned short, Anki::Embedded::MemoryStack&)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[475]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[33b]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList() &rArr; Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ConnectedComponents(unsigned short, unsigned short, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[476]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentEEC1Ev), UNUSED)

<P><STRONG><a name="[1f1]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, visionsystem.o(t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[31d]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::PushBack(const Anki::Embedded::Point&lang;float&rang;&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, transformations.o(t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIfEEE8PushBackERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::PushBack(const Anki::Embedded::Point&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::get_maximumSize() const
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3c3]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, binarytracker.o(t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIfEEE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[31c]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, binarytracker.o(t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::set_size(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[477]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, binarytracker.o(t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[353]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::PushBack(const Anki::Embedded::Point&lang;short&rang;&)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, traceboundary.o(t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8PushBackERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::PushBack(const Anki::Embedded::Point&lang;short&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::get_maximumSize() const
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3c5]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, computequadrilaterals.o(t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[361]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, computequadrilaterals.o(t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::set_size(int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[478]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, computequadrilaterals.o(t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[2ff]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof14TemplateSampleEEEE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3c7]"></a>Anki::Embedded::FixedLengthList&lang;bool&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;bool&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[338]"></a>Anki::Embedded::FixedLengthList&lang;bool&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;bool&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;bool&rang;::set_size(int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[479]"></a>Anki::Embedded::FixedLengthList&lang;bool&rang;::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[215]"></a>Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 208 bytes, Stack size 112 bytes, visionsystem.o(t._ZN4Anki8Embedded15FixedLengthListIfEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[47a]"></a>Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, visionsystem.o(t._ZN4Anki8Embedded15FixedLengthListIfEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[300]"></a>Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded15FixedLengthListIfEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList() &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence()
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[47b]"></a>Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded15FixedLengthListIfEC1Ev), UNUSED)

<P><STRONG><a name="[328]"></a>Anki::Embedded::FixedLengthList&lang;int&rang;::SetZero()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;int&rang;::SetZero() &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ComputeComponentSizes(Anki::Embedded::FixedLengthList&lang;int&rang;&)
</UL>

<P><STRONG><a name="[34f]"></a>Anki::Embedded::FixedLengthList&lang;int&rang;::PushBack(const int&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, laplacianpeaks.o(t._ZN4Anki8Embedded15FixedLengthListIiE8PushBackERKi))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[329]"></a>Anki::Embedded::FixedLengthList&lang;int&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, benchmarking.o(t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ComputeComponentSizes(Anki::Embedded::FixedLengthList&lang;int&rang;&)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[336]"></a>Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, cascadeclassifier.o(t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::set_size(int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[47c]"></a>Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, cascadeclassifier.o(t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[2d7]"></a>Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, histogram.o(t._ZN4Anki8Embedded15FixedLengthListIiEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::get_maximumSize() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[47d]"></a>Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, histogram.o(t._ZN4Anki8Embedded15FixedLengthListIiEC1Ev), UNUSED)

<P><STRONG><a name="[3c9]"></a>Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::set_size(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[330]"></a>Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::set_size(int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[47e]"></a>Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[33c]"></a>Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListItEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::set_size(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ConnectedComponents(unsigned short, unsigned short, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[47f]"></a>Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, connectedcomponents.o(t._ZN4Anki8Embedded15FixedLengthListItEC1Ev), UNUSED)

<P><STRONG><a name="[348]"></a>Anki::Embedded::FixedPointArray&lang;short&rang;::FixedPointArray(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, laplacianpeaks.o(t._ZN4Anki8Embedded15FixedPointArrayIsEC1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Anki::Embedded::FixedPointArray&lang;short&rang;::FixedPointArray(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[480]"></a>Anki::Embedded::FixedPointArray&lang;short&rang;::FixedPointArray__sub_object(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, laplacianpeaks.o(t._ZN4Anki8Embedded15FixedPointArrayIsEC1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[34d]"></a>Anki::Embedded::ImageProcessing::Correlate1d&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&)</STRONG> (Thumb, 724 bytes, Stack size 80 bytes, laplacianpeaks.o(t._ZN4Anki8Embedded15ImageProcessing11Correlate1dIsisEENS_6ResultERKNS0_15FixedPointArrayIT_EES8_RNS4_IT1_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::ImageProcessing::Correlate1d&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&) &rArr; Anki::Embedded::Array&lang;short&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::GetBitShiftDirectionAndMagnitude(int, int, int, int&, bool&)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::get_size(int) const
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[34e]"></a>Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 1434 bytes, Stack size 480 bytes, laplacianpeaks.o(t._ZN4Anki8Embedded15ImageProcessing36Correlate1dCircularAndSameSizeOutputIsisEENS_6ResultERKNS0_15FixedPointArrayIT_EES8_RNS4_IT1_EENS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool) &rArr; Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::GetBitShiftDirectionAndMagnitude(int, int, int, int&, bool&)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::operator ()(int, int, int, int) const
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::get_size(int) const
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::IsValid() const
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;short&rang;::operator ()(int, int, int, int)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2f6]"></a>Anki::Embedded::Interp2_Projective&lang;unsigned char, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)</STRONG> (Thumb, 1168 bytes, Stack size 160 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded18Interp2_ProjectiveIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Anki::Embedded::Interp2_Projective&lang;unsigned char, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreValid&lang;Anki::Embedded::Array&lang;unsigned char&rang;, Anki::Embedded::Array&lang;float&rang;&rang;(const T1&, const T2&)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[30c]"></a>Anki::Embedded::Interp2_Projective&lang;unsigned char, unsigned char&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)</STRONG> (Thumb, 1156 bytes, Stack size 136 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded18Interp2_ProjectiveIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Anki::Embedded::Interp2_Projective&lang;unsigned char, unsigned char&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2) &rArr; Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Round&lang;int&rang;(float)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3cf]"></a>Anki::Embedded::ArraySliceSimpleLimits&lang;int&rang;::ArraySliceSimpleLimits(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded22ArraySliceSimpleLimitsIiEC1ERKNS0_14LinearSequenceIiEES6_))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySliceLimits_in2_out1&lang;int&rang;::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)
</UL>

<P><STRONG><a name="[481]"></a>Anki::Embedded::ArraySliceSimpleLimits&lang;int&rang;::ArraySliceSimpleLimits__sub_object(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded22ArraySliceSimpleLimitsIiEC1ERKNS0_14LinearSequenceIiEES6_), UNUSED)

<P><STRONG><a name="[3be]"></a>Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySliceSimpleLimits&lang;int&rang;::ArraySliceSimpleLimits(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool)
</UL>

<P><STRONG><a name="[482]"></a>Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1__sub_object(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_), UNUSED)

<P><STRONG><a name="[3d0]"></a>Anki::Embedded::ArraySliceLimits_in2_out1&lang;int&rang;::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)</STRONG> (Thumb, 404 bytes, Stack size 64 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Anki::Embedded::ArraySliceLimits_in2_out1&lang;int&rang;::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySliceSimpleLimits&lang;int&rang;::ArraySliceSimpleLimits(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::Add&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotMultiply&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)
</UL>

<P><STRONG><a name="[483]"></a>Anki::Embedded::ArraySliceLimits_in2_out1&lang;int&rang;::ArraySliceLimits_in2_out1__sub_object(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_), UNUSED)

<P><STRONG><a name="[30e]"></a>Anki::Embedded::ConstArraySliceExpression&lang;float&rang;::ConstArraySliceExpression(Anki::Embedded::Array&lang;float&rang;, bool)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded25ConstArraySliceExpressionIfEC1ENS0_5ArrayIfEEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Embedded::ConstArraySliceExpression&lang;float&rang;::ConstArraySliceExpression(Anki::Embedded::Array&lang;float&rang;, bool) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[484]"></a>Anki::Embedded::ConstArraySliceExpression&lang;float&rang;::ConstArraySliceExpression__sub_object(Anki::Embedded::Array&lang;float&rang;, bool)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded25ConstArraySliceExpressionIfEC1ENS0_5ArrayIfEEb), UNUSED)

<P><STRONG><a name="[304]"></a>Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)</STRONG> (Thumb, 1454 bytes, Stack size 888 bytes, perspectiveposeestimation.o(t._ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 2800<LI>Call Chain = Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*) &rArr; std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3d2]"></a>Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*)</STRONG> (Thumb, 1808 bytes, Stack size 456 bytes, perspectiveposeestimation.o(t._ZN4Anki8Embedded3P3P12solveQuarticIfEENS_6ResultEPKT_PS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*) &rArr; std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::operator +&lang;float&rang;(const T1&, const std::complex&lang;T1&rang;&)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::operator *&lang;float&rang;(const T1&, const std::complex&lang;T1&rang;&)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::operator /&lang;float&rang;(const T1&, const std::complex&lang;T1&rang;&)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt&lang;float&rang;(const std::complex&lang;T1&rang;&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[3d1]"></a>Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)</STRONG> (Thumb, 2642 bytes, Stack size 1296 bytes, perspectiveposeestimation.o(t._ZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*) &rArr; std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Transpose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::operator -(const Anki::Embedded::Point3&lang;float&rang;&) const
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::MakeUnitLength()
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::createIntermediateCameraFrameHelper&lang;float&rang;(Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::CrossProduct&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[3da]"></a>Anki::Embedded::P3P::createIntermediateCameraFrameHelper&lang;float&rang;(Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&)</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, perspectiveposeestimation.o(t._ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIfEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Embedded::P3P::createIntermediateCameraFrameHelper&lang;float&rang;(Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&) &rArr; Anki::Embedded::Point3&lang;float&rang;::MakeUnitLength() &rArr; std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::MakeUnitLength()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::CrossProduct&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[1de]"></a>Anki::Embedded::Array&lang;Anki::Embedded::VisionMarker&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, visionsystem.o(t._ZN4Anki8Embedded5ArrayINS0_12VisionMarkerEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;Anki::Embedded::VisionMarker&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
</UL>

<P><STRONG><a name="[485]"></a>Anki::Embedded::Array&lang;Anki::Embedded::VisionMarker&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, visionsystem.o(t._ZN4Anki8Embedded5ArrayINS0_12VisionMarkerEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[343]"></a>Anki::Embedded::Array&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, detectfiducialmarkers.o(t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[486]"></a>Anki::Embedded::Array&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, detectfiducialmarkers.o(t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[307]"></a>Anki::Embedded::Array&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[487]"></a>Anki::Embedded::Array&lang;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[308]"></a>Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof12VerifySampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[488]"></a>Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifySample&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof12VerifySampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[30a]"></a>Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[489]"></a>Anki::Embedded::Array&lang;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::TemplateSample&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dof14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[3c0]"></a>Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, connectedcomponents.o(t._ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[48a]"></a>Anki::Embedded::Array&lang;Anki::Embedded::ConnectedComponentSegment&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, connectedcomponents.o(t._ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[3c2]"></a>Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, binarytracker.o(t._ZN4Anki8Embedded5ArrayINS0_5PointIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[48b]"></a>Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;float&rang;&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, binarytracker.o(t._ZN4Anki8Embedded5ArrayINS0_5PointIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[3c4]"></a>Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, binarytracker.o(t._ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[48c]"></a>Anki::Embedded::Array&lang;Anki::Embedded::Point&lang;short&rang;&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, binarytracker.o(t._ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[1f0]"></a>Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, visionsystem.o(t._ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[48d]"></a>Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, visionsystem.o(t._ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[3c6]"></a>Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, connectedcomponents.o(t._ZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;bool&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;bool&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[48e]"></a>Anki::Embedded::Array&lang;bool&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, connectedcomponents.o(t._ZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[3dd]"></a>Anki::Embedded::Array&lang;float&rang;::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Anki::Embedded::Array&lang;float&rang;::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[3de]"></a>Anki::Embedded::Array&lang;float&rang;::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::Array&lang;float&rang;::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[3df]"></a>Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Reallocate(void*, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[315]"></a>Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, binarytracker.o(t._ZN4Anki8Embedded5ArrayIfE3SetERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreValid&lang;Anki::Embedded::Array&lang;float&rang;, Anki::Embedded::Array&lang;float&rang;&rang;(const T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Set(const Anki::Embedded::Transformations::PlanarTransformation_f32&)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::set_homography(const Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[1f2]"></a>Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_localization_cpp
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, int, int, Anki::Embedded::MemoryStack)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, unsigned char, Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateY1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateX1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[48f]"></a>Anki::Embedded::Array&lang;float&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lucaskanade_slow.o(t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[af]"></a>Anki::Embedded::Array&lang;float&rang;::Array()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, perspectiveposeestimation.o(t._ZN4Anki8Embedded5ArrayIfEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::Array&lang;float&rang;::Array()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> perspectiveposeestimation.o(t._ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_)
</UL>
<P><STRONG><a name="[490]"></a>Anki::Embedded::Array&lang;float&rang;::Array__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, perspectiveposeestimation.o(t._ZN4Anki8Embedded5ArrayIfEC1Ev), UNUSED)

<P><STRONG><a name="[20b]"></a>Anki::Embedded::Array&lang;unsigned char&rang;::Set(const Anki::Embedded::Array&lang;unsigned char&rang;&)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, binarytracker.o(t._ZN4Anki8Embedded5ArrayIhE3SetERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Embedded::Array&lang;unsigned char&rang;::Set(const Anki::Embedded::Array&lang;unsigned char&rang;&) &rArr; Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[209]"></a>Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, visionsystem.o(t._ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[491]"></a>Anki::Embedded::Array&lang;unsigned char&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, visionsystem.o(t._ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[a4]"></a>Anki::Embedded::Array&lang;unsigned char&rang;::Array()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, computecharacteristicscale.o(t._ZN4Anki8Embedded5ArrayIhEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::Array&lang;unsigned char&rang;::Array()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> computecharacteristicscale.o(i._ZN4Anki8Embedded39ExtractComponentsViaCharacteristicScaleERKNS0_5ArrayIhEEiissRNS0_19ConnectedComponentsENS0_11MemoryStackES7_)
</UL>
<P><STRONG><a name="[492]"></a>Anki::Embedded::Array&lang;unsigned char&rang;::Array__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, computecharacteristicscale.o(t._ZN4Anki8Embedded5ArrayIhEC1Ev), UNUSED)

<P><STRONG><a name="[2d8]"></a>Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, visionsystem.o(t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const
</UL>

<P><STRONG><a name="[493]"></a>Anki::Embedded::Array&lang;int&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, visionsystem.o(t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[3ca]"></a>Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, fiducialmarkers.o(t._ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedPointArray&lang;short&rang;::FixedPointArray(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[494]"></a>Anki::Embedded::Array&lang;short&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, fiducialmarkers.o(t._ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[3cd]"></a>Anki::Embedded::Array&lang;short&rang;::operator ()(int, int, int, int)</STRONG> (Thumb, 148 bytes, Stack size 144 bytes, laplacianpeaks.o(t._ZN4Anki8Embedded5ArrayIsEclEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Anki::Embedded::Array&lang;short&rang;::operator ()(int, int, int, int) &rArr; Anki::Embedded::IndexSequence&lang;int&rang;(T1, T1, T1, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IndexSequence&lang;int&rang;(T1, T1, T1, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3c8]"></a>Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, connectedcomponents.o(t._ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;unsigned short&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;unsigned short&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[495]"></a>Anki::Embedded::Array&lang;unsigned short&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, connectedcomponents.o(t._ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[8d]"></a>Anki::Embedded::Point&lang;float&rang;::Point()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, visionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev))
<BR>[Address Reference Count : 7]<UL><LI> visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem14LookForMarkersERKNS_8Embedded5ArrayIhEERKNS1_31DetectFiducialMarkersParametersERNS2_15FixedLengthListINS2_12VisionMarkerEEENS2_11MemoryStackESE_SE_)
<LI> fiducialmarkers.o(i._ZN4Anki8Embedded12VisionMarker7ExtractERKNS0_5ArrayIhEERKNS0_13QuadrilateralIsEERKNS2_IfEEfiiNS0_11MemoryStackE)
<LI> lucaskanade_general.o(i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18get_transformationEv)
<LI> visionsystem.o(i.__sti___16_visionSystem_cpp)
<LI> transformations.o(i._ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERNS0_11MemoryStackE)
<LI> lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded13QuadrilateralIfEC1ERKNS0_5PointIfEES6_S6_S6_)
<LI> transformations.o(t._ZN4Anki8Embedded13QuadrilateralIfEC1Ev)
</UL>
<P><STRONG><a name="[496]"></a>Anki::Embedded::Point&lang;float&rang;::Point__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, visionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev), UNUSED)

<P><STRONG><a name="[a3]"></a>Anki::Embedded::Point&lang;short&rang;::Point()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, computequadrilaterals.o(t._ZN4Anki8Embedded5PointIsEC1Ev))
<BR>[Address Reference Count : 3]<UL><LI> computequadrilaterals.o(i._ZN4Anki8Embedded44ComputeQuadrilateralsFromConnectedComponentsERKNS0_19ConnectedComponentsEiiiiiRNS0_15FixedLengthListINS0_13QuadrilateralIsEEEENS0_11MemoryStackE)
<LI> computequadrilaterals.o(t._ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_)
<LI> transformations.o(i._ZN4Anki8Embedded15Transformations25ComputeHomographyFromQuadERKNS0_13QuadrilateralIsEERNS0_5ArrayIfEENS0_11MemoryStackE)
</UL>
<P><STRONG><a name="[497]"></a>Anki::Embedded::Point&lang;short&rang;::Point__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, computequadrilaterals.o(t._ZN4Anki8Embedded5PointIsEC1Ev), UNUSED)

<P><STRONG><a name="[310]"></a>Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotMultiply&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)</STRONG> (Thumb, 770 bytes, Stack size 232 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotMultiply&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;) &rArr; Anki::Embedded::ArraySliceLimits_in2_out1&lang;int&rang;::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySliceLimits_in2_out1&lang;int&rang;::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[311]"></a>Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::Add&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)</STRONG> (Thumb, 770 bytes, Stack size 232 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::Add&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;) &rArr; Anki::Embedded::ArraySliceLimits_in2_out1&lang;int&rang;::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySliceLimits_in2_out1&lang;int&rang;::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[33f]"></a>Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotDivide&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, T1, Anki::Embedded::ArraySlice&lang;T3&rang;)</STRONG> (Thumb, 660 bytes, Stack size 176 bytes, quadrefinement.o(t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotDivide&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, T1, Anki::Embedded::ArraySlice&lang;T3&rang;) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3e1]"></a>Anki::Embedded::Matrix::InsertionSort&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;int&rang;&, int, bool, int, int)</STRONG> (Thumb, 1224 bytes, Stack size 48 bytes, visionsystem.o(t._ZN4Anki8Embedded6Matrix13InsertionSortIfEENS_6ResultERNS0_5ArrayIT_EERNS4_IiEEibii))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Anki::Embedded::Matrix::InsertionSort&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;int&rang;&, int, bool, int, int) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const
</UL>

<P><STRONG><a name="[2fc]"></a>Anki::Embedded::Matrix::MakeSymmetric&lang;Anki::Embedded::Array&lang;float&rang;&rang;(T1&, bool)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, binarytracker.o(t._ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Embedded::Matrix::MakeSymmetric&lang;Anki::Embedded::Array&lang;float&rang;&rang;(T1&, bool) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3e2]"></a>Anki::Embedded::Matrix::MultiplyTranspose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, binarytracker.o(t._ZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Anki::Embedded::Matrix::MultiplyTranspose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&) &rArr; Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[31e]"></a>Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 844 bytes, Stack size 184 bytes, transformations.o(t._ZN4Anki8Embedded6Matrix18EstimateHomographyIfEENS_6ResultERKNS0_15FixedLengthListINS0_5PointIT_EEEESA_RNS0_5ArrayIS6_EENS0_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Transpose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, bool, bool&)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::MultiplyTranspose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::get_maximumSize() const
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2fd]"></a>Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, bool, bool&)</STRONG> (Thumb, 640 bytes, Stack size 72 bytes, binarytracker.o(t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, bool, bool&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreValid&lang;Anki::Embedded::Array&lang;float&rang;, Anki::Embedded::Array&lang;float&rang;&rang;(const T1&, const T2&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2ed]"></a>Anki::Embedded::Matrix::Max&lang;float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&)</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded6Matrix3MaxIfEET_RKNS0_25ConstArraySliceExpressionIS3_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Anki::Embedded::Matrix::Max&lang;float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::ApproximateSelect(const Anki::Embedded::Array&lang;float&rang;&, int, int, int, int&, Anki::Embedded::Array&lang;int&rang;&)
</UL>

<P><STRONG><a name="[1b3]"></a>Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, transformations.o(t._ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&) &rArr; Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3dc]"></a>Anki::Embedded::Matrix::Transpose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, binarytracker.o(t._ZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Anki::Embedded::Matrix::Transpose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&) &rArr; Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreValid&lang;Anki::Embedded::Array&lang;float&rang;, Anki::Embedded::Array&lang;float&rang;&rang;(const T1&, const T2&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2f7]"></a>Anki::Embedded::Matrix::Vectorize&lang;float, float&rang;(bool, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Embedded::Matrix::Vectorize&lang;float, float&rang;(bool, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3db]"></a>Anki::Embedded::Point3&lang;float&rang;::MakeUnitLength()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, perspectiveposeestimation.o(t._ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Embedded::Point3&lang;float&rang;::MakeUnitLength() &rArr; std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::createIntermediateCameraFrameHelper&lang;float&rang;(Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[1ea]"></a>Anki::Embedded::Point3&lang;float&rang;::Point3(float, float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, visionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Efff))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetWithRespectToRobot(const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::Point3&lang;float&rang;&)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point&lang;float&rang;&, float)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[498]"></a>Anki::Embedded::Point3&lang;float&rang;::Point3__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, visionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Efff), UNUSED)

<P><STRONG><a name="[a2]"></a>Anki::Embedded::Point3&lang;float&rang;::Point3()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, visionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Ev))
<BR>[Address Reference Count : 3]<UL><LI> visionsystem.o(i.__sti___16_visionSystem_cpp)
<LI> lucaskanade_sampledplanar6dof.o(i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEifiifffffNS0_11MemoryStackERSD_SD_)
<LI> perspectiveposeestimation.o(t._ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_)
</UL>
<P><STRONG><a name="[499]"></a>Anki::Embedded::Point3&lang;float&rang;::Point3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, visionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Ev), UNUSED)

<P><STRONG><a name="[3e0]"></a>Anki::Embedded::AreValid&lang;Anki::Embedded::Array&lang;float&rang;, Anki::Embedded::Array&lang;float&rang;&rang;(const T1&, const T2&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, binarytracker.o(t._ZN4Anki8Embedded8AreValidINS0_5ArrayIfEES3_EEbRKT_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Transpose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, bool, bool&)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&)
</UL>

<P><STRONG><a name="[30d]"></a>Anki::Embedded::AreValid&lang;Anki::Embedded::Array&lang;unsigned char&rang;, Anki::Embedded::Array&lang;float&rang;&rang;(const T1&, const T2&)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lucaskanade_sampledplanar6dof.o(t._ZN4Anki8Embedded8AreValidINS0_5ArrayIhEENS2_IfEEEEbRKT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::AreValid&lang;Anki::Embedded::Array&lang;unsigned char&rang;, Anki::Embedded::Array&lang;float&rang;&rang;(const T1&, const T2&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
</UL>

<P><STRONG><a name="[309]"></a>Anki::Embedded::Linspace&lang;float&rang;(T1, T1, int)</STRONG> (Thumb, 354 bytes, Stack size 80 bytes, lucaskanade_affine.o(t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Linspace&lang;float&rang;(T1, T1, int) &rArr; Anki::Embedded::LinearSequence&lang;float&rang;::computeSize(float, float, float) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;float&rang;::computeSize(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[1b4]"></a>Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, visionsystem.o(t._ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::Point3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetWithRespectToRobot(const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::Point3&lang;float&rang;&)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::createIntermediateCameraFrameHelper&lang;float&rang;(Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[3e8]"></a>__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(t._ZN4__rw12__string_refIcSt11char_traitsIcESaIcEE10_C_inc_refEv))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[b0]"></a>__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
</UL>
<P><STRONG><a name="[393]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEE6resizeEjRKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>

<P><STRONG><a name="[37c]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[49a]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev), UNUSED)

<P><STRONG><a name="[ae]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(i.__sti___10_rwcats_cpp)
</UL>
<P><STRONG><a name="[49b]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev), UNUSED)

<P><STRONG><a name="[376]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[49c]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev), UNUSED)

<P><STRONG><a name="[ab]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(i._ZSt13__rw_get_catsv)
</UL>
<P><STRONG><a name="[49d]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev), UNUSED)

<P><STRONG><a name="[31a]"></a>Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeCenter&lang;float&rang;() const</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, transformations.o(t._ZNK4Anki8Embedded13QuadrilateralIfE13ComputeCenterIfEENS0_5PointIT_EEv))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
</UL>

<P><STRONG><a name="[302]"></a>Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const</STRONG> (Thumb, 444 bytes, Stack size 296 bytes, lucaskanade_sampledplanar6dof.o(t._ZNK4Anki8Embedded13QuadrilateralIfE23ComputeClockwiseCornersIfEENS1_IT_EEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Anki::Embedded::Quadrilateral&lang;float&rang;::ComputeClockwiseCorners&lang;float&rang;() const &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::InsertionSort&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;int&rang;&, int, bool, int, int)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;int&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Quadrilateral&lang;float&rang;::Quadrilateral(const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[324]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::get_maximumSize() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, connectedcomponents.o(t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentEE15get_maximumSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::IsValid() const
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::set_size(int)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::Extract1dComponents(const unsigned char*, short, short, short, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;&)
</UL>

<P><STRONG><a name="[327]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::IsValid() const</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, connectedcomponents.o(t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentEE7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::IsValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::ConnectedComponentSegment&rang;::get_maximumSize() const
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::IsValid() const
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConnectedComponents::ComputeComponentSizes(Anki::Embedded::FixedLengthList&lang;int&rang;&)
</UL>

<P><STRONG><a name="[3c1]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::get_maximumSize() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transformations.o(t._ZNK4Anki8Embedded15FixedLengthListINS0_5PointIfEEE15get_maximumSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;float&rang;&rang;::PushBack(const Anki::Embedded::Point&lang;float&rang;&)
</UL>

<P><STRONG><a name="[347]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::get_maximumSize() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, laplacianpeaks.o(t._ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;::PushBack(const Anki::Embedded::Point&lang;short&rang;&)
</UL>

<P><STRONG><a name="[2d9]"></a>Anki::Embedded::FixedLengthList&lang;int&rang;::get_maximumSize() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cascadeclassifier.o(t._ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, int, Anki::Embedded::MemoryStack&)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;int&rang;::FixedLengthList()
</UL>

<P><STRONG><a name="[321]"></a>Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow&lang;unsigned char&rang;(const Anki::Embedded::Rectangle&lang;short&rang;&, int, int, int, Anki::Embedded::Array&lang;T1&rang;&) const</STRONG> (Thumb, 754 bytes, Stack size 64 bytes, computecharacteristicscale.o(t._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIhEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow&lang;unsigned char&rang;(const Anki::Embedded::Rectangle&lang;short&rang;&, int, int, int, Anki::Embedded::Array&lang;T1&rang;&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::get_imageWidth() const
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ecvcs_filterRows(const Anki::Embedded::ScrollingIntegralImage_u8_s32&, int, int, int, Anki::Embedded::Array&lang;unsigned char&rang;*)
</UL>

<P><STRONG><a name="[2fa]"></a>Anki::Embedded::Array&lang;float&rang;::IsValid() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lucaskanade_sampledplanar6dof.o(t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral&lang;short&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_rotationMatrix(Anki::Embedded::Array&lang;float&rang;&, bool) const
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::IsValid() const
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotDivide&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, T1, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateY1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateX1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreValid&lang;Anki::Embedded::Array&lang;unsigned char&rang;, Anki::Embedded::Array&lang;float&rang;&rang;(const T1&, const T2&)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Max&lang;float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::Add&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Elementwise::ApplyOperation&lang;float, Anki::Embedded::Matrix::Elementwise::DotMultiply&lang;float, float, float&rang;, float&rang;(const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, const Anki::Embedded::ConstArraySliceExpression&lang;T1&rang;&, Anki::Embedded::ArraySlice&lang;T3&rang;)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::EstimateHomography&lang;float&rang;(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;T1&rang;&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::TransformPointsStatic(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;float&rang;&, bool, bool, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&)
</UL>

<P><STRONG><a name="[2ea]"></a>Anki::Embedded::Array&lang;float&rang;::get_size(int) const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, localization.o(t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetCamPoseWrtRobot&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_rotationMatrix(Anki::Embedded::Array&lang;float&rang;&, bool) const
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePose&lang;float&rang;(const Anki::Embedded::Quadrilateral&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, float, float, float, float, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::InsertionSort&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;int&rang;&, int, bool, int, int)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Transpose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, bool, bool&)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::MultiplyTranspose&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::MakeSymmetric&lang;Anki::Embedded::Array&lang;float&rang;&rang;(T1&, bool)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Set(const Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConstArraySlice&lang;float&rang;::ConstArraySlice(const Anki::Embedded::Array&lang;float&rang;&)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Vectorize&lang;float, float&rang;(bool, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ConstArraySliceExpression&lang;float&rang;::ConstArraySliceExpression(Anki::Embedded::Array&lang;float&rang;, bool)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;float&rang;::ArraySlice(Anki::Embedded::Array&lang;float&rang;)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::ApproximateSelect(const Anki::Embedded::Array&lang;float&rang;&, int, int, int, int&, Anki::Embedded::Array&lang;int&rang;&)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::AreEqualSize&lang;Anki::Embedded::Array&lang;float&rang;&rang;(int, int, const T1&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::Init(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::MemoryStack&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::TransformPointsStatic(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;float&rang;&, bool, bool, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&)
</UL>

<P><STRONG><a name="[2db]"></a>Anki::Embedded::Array&lang;unsigned char&rang;::IsValid() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, binarytracker.o(t._ZNK4Anki8Embedded5ArrayIhE7IsValidEv))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, unsigned char, Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Set(const Anki::Embedded::Array&lang;unsigned char&rang;&)
</UL>

<P><STRONG><a name="[208]"></a>Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, visionsystem.o(t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Rectangle&lang;int&rang;&, int, float, float, float, float&, Anki::Embedded::MemoryStack)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::CorrectVignetting(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::FixedLengthList&lang;float&rang;&)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, unsigned char, Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Set(const Anki::Embedded::Array&lang;unsigned char&rang;&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::PadImageRow(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::Array&lang;unsigned char&rang;&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::VisionMarker::ComputeBrightDarkValues(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Array&lang;float&rang;&, float, float&, float&, bool&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, unsigned char&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Interp2_Projective&lang;unsigned char, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Meshgrid&lang;float&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point&lang;float&rang;&, Anki::Embedded::Array&lang;T2&rang;&, Anki::Embedded::InterpolationType, T2)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::VerifyTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Translation(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2eb]"></a>Anki::Embedded::Array&lang;int&rang;::get_size(int) const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, integralimage.o(t._ZNK4Anki8Embedded5ArrayIiE8get_sizeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::Array&lang;int&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, Anki::Embedded::MemoryStack)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::ApproximateSelect(const Anki::Embedded::Array&lang;float&rang;&, int, int, int, int&, Anki::Embedded::Array&lang;int&rang;&)
</UL>

<P><STRONG><a name="[349]"></a>Anki::Embedded::Array&lang;short&rang;::IsValid() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, laplacianpeaks.o(t._ZNK4Anki8Embedded5ArrayIsE7IsValidEv))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1d&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool)
</UL>

<P><STRONG><a name="[34a]"></a>Anki::Embedded::Array&lang;short&rang;::get_size(int) const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, laplacianpeaks.o(t._ZNK4Anki8Embedded5ArrayIsE8get_sizeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::Array&lang;short&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1d&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&)
</UL>

<P><STRONG><a name="[3cc]"></a>Anki::Embedded::Array&lang;short&rang;::operator ()(int, int, int, int) const</STRONG> (Thumb, 130 bytes, Stack size 120 bytes, laplacianpeaks.o(t._ZNK4Anki8Embedded5ArrayIsEclEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Anki::Embedded::Array&lang;short&rang;::operator ()(int, int, int, int) const &rArr; Anki::Embedded::IndexSequence&lang;int&rang;(T1, T1, T1, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::IndexSequence&lang;int&rang;(T1, T1, T1, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[33d]"></a>Anki::Embedded::Point&lang;short&rang;::Length() const</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, quadrefinement.o(t._ZNK4Anki8Embedded5PointIsE6LengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Embedded::Point&lang;short&rang;::Length() const &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral&lang;short&rang;&, const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Array&lang;unsigned char&rang;&, float, int, float, float, int, Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::Array&lang;float&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[3d8]"></a>Anki::Embedded::Point3&lang;float&rang;::operator -(const Anki::Embedded::Point3&lang;float&rang;&) const</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, perspectiveposeestimation.o(t._ZNK4Anki8Embedded6Point3IfEmiERKS2_))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::computePossiblePoses&lang;float&rang;(const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[2f9]"></a>Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateX1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const</STRONG> (Thumb, 292 bytes, Stack size 184 bytes, lucaskanade_sampledplanar6dof.o(t._ZNK4Anki8Embedded8MeshgridIfE10EvaluateX1EbRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateX1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;float&rang;::ArraySlice(Anki::Embedded::Array&lang;float&rang;)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[2f8]"></a>Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateY1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const</STRONG> (Thumb, 292 bytes, Stack size 184 bytes, lucaskanade_sampledplanar6dof.o(t._ZNK4Anki8Embedded8MeshgridIfE10EvaluateY1EbRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Anki::Embedded::Meshgrid&lang;float&rang;::EvaluateY1(bool, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ArraySlice&lang;float&rang;::ArraySlice(Anki::Embedded::Array&lang;float&rang;)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, int, Anki::Embedded::Transformations::TransformType, int, float, int, int, float, float, float, float, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::CreateVerificationSamples(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, const Anki::Embedded::LinearSequence&lang;float&rang;&, float, int&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[da]"></a>std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[d9]"></a>std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[3e4]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, locale.o(t._ZNSs11_C_allocateEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>

<P><STRONG><a name="[3e6]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, locale.o(t._ZNSs7replaceEjjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
</UL>

<P><STRONG><a name="[3e7]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, char.o(t._ZNSs7replaceEjjPKcjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[298]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace&lang;unsigned char*&rang;(char*, char*, T1, T1, const __rw::__rw_select&lang;(bool)0&rang;*)</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, usb_radio.o(t._ZNSs7replaceIPhEERSsPcS2_T_S3_PKN4__rw11__rw_selectILb0EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace&lang;unsigned char*&rang;(char*, char*, T1, T1, const __rw::__rw_select&lang;(bool)0&rang;*) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
</UL>

<P><STRONG><a name="[29b]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, char.o(t._ZNSs9_C_getRepEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace&lang;unsigned char*&rang;(char*, char*, T1, T1, const __rw::__rw_select&lang;(bool)0&rang;*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[29c]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, char.o(t._ZNSs9_C_unlinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace&lang;unsigned char*&rang;(char*, char*, T1, T1, const __rw::__rw_select&lang;(bool)0&rang;*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[373]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
</UL>

<P><STRONG><a name="[49e]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE), UNUSED)

<P><STRONG><a name="[18e]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func5&rang;
</UL>

<P><STRONG><a name="[49f]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE), UNUSED)

<P><STRONG><a name="[374]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[4a0]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs), UNUSED)

<P><STRONG><a name="[a6]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
<LI> locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
</UL>
<P><STRONG><a name="[4a1]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev), UNUSED)

<P><STRONG><a name="[3a1]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[37a]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3e9]"></a>std::arg&lang;float&rang;(const std::complex&lang;T1&rang;&)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, perspectiveposeestimation.o(t._ZSt3argIfET_RKSt7complexIS0_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::arg&lang;float&rang;(const std::complex&lang;T1&rang;&) &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt&lang;float&rang;(const std::complex&lang;T1&rang;&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)
</UL>

<P><STRONG><a name="[3e5]"></a>std::max&lang;unsigned&rang;(const T1&, const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(t._ZSt3maxIjERKT_S2_S2_))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3d3]"></a>std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)</STRONG> (Thumb, 474 bytes, Stack size 96 bytes, perspectiveposeestimation.o(t._ZSt3powIfESt7complexIT_ERKS2_RKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&) &rArr; __hardfp_powf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::operator *&lang;float&rang;(const T1&, const std::complex&lang;T1&rang;&)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::arg&lang;float&rang;(const std::complex&lang;T1&rang;&)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*)
</UL>

<P><STRONG><a name="[3d4]"></a>std::sqrt&lang;float&rang;(const std::complex&lang;T1&rang;&)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, perspectiveposeestimation.o(t._ZSt4sqrtIfESt7complexIT_ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = std::sqrt&lang;float&rang;(const std::complex&lang;T1&rang;&) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::arg&lang;float&rang;(const std::complex&lang;T1&rang;&)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*)
</UL>

<P><STRONG><a name="[3d7]"></a>std::operator /&lang;float&rang;(const T1&, const std::complex&lang;T1&rang;&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, perspectiveposeestimation.o(t._ZStdvIfESt7complexIT_ERKS1_RKS2_))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*)
</UL>

<P><STRONG><a name="[3d5]"></a>std::operator *&lang;float&rang;(const T1&, const std::complex&lang;T1&rang;&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, perspectiveposeestimation.o(t._ZStmlIfESt7complexIT_ERKS1_RKS2_))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow&lang;float&rang;(const std::complex&lang;T1&rang;&, const T1&)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*)
</UL>

<P><STRONG><a name="[3d6]"></a>std::operator +&lang;float&rang;(const T1&, const std::complex&lang;T1&rang;&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, perspectiveposeestimation.o(t._ZStplIfESt7complexIT_ERKS1_RKS2_))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::P3P::solveQuartic&lang;float&rang;(const T1*, T1*)
</UL>

<P><STRONG><a name="[225]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetDistToLineSegment(float, float, float, float&, float&) const
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3ea]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4a2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[3ed]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3f0]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[3f3]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[3b1]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3f2]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[4a3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[3f4]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[3f7]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[3b4]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[3f5]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3ec]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[3ef]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[3b8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3f6]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[3b6]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[3f8]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1eb]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::MaxPowerTestUpdate()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::CheckWheelSpeedLimits(float&, float&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePathFollow()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ManagePointTurn()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Update()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Update()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, unsigned char) const
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::Print() const
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[3fa]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[3fb]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[112]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[4a4]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4a5]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3eb]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[f4]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[f8]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[3f1]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[3b2]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[177]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[17e]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[17d]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3fc]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a0]"></a>Anki::Cozmo::HAL::Write(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, frontcamera.o(i._ZN4Anki5Cozmo3HAL5WriteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Anki::Cozmo::HAL::Write(unsigned char) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CamWrite(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[26a]"></a>Anki::Cozmo::HAL::CamWrite(unsigned char, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, frontcamera.o(i._ZN4Anki5Cozmo3HAL8CamWriteEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Anki::Cozmo::HAL::CamWrite(unsigned char, unsigned char) &rArr; Anki::Cozmo::HAL::Write(unsigned char) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::Write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::CameraSetParameters(float, bool)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::OV7725Init()
</UL>

<P><STRONG><a name="[273]"></a>Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, imu.o(i._ZN4Anki5Cozmo3HAL15IMUSelectDeviceE10IMU_DEVICE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
</UL>

<P><STRONG><a name="[274]"></a>Anki::Cozmo::HAL::IMUWriteReadPipelined(short)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, imu.o(i._ZN4Anki5Cozmo3HAL21IMUWriteReadPipelinedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUInit()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
</UL>

<P><STRONG><a name="[277]"></a>Anki::Cozmo::HAL::BufPutChar(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(i._ZN4Anki5Cozmo3HAL10BufPutCharEh))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned, unsigned char*, unsigned)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutChar(int)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutString(const char*)
</UL>

<P><STRONG><a name="[1a]"></a>Anki::Cozmo::HAL::UARTGetCharacter(unsigned)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, uart.o(i._ZN4Anki5Cozmo3HAL16UARTGetCharacterEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Cozmo::HAL::UARTGetCharacter(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>Anki::Cozmo::HAL::UARTStartTransfer()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uart.o(i._ZN4Anki5Cozmo3HAL17UARTStartTransferEv))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.data)
</UL>
<P><STRONG><a name="[278]"></a>Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*)</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, wifi.o(i._ZN4Anki5Cozmo3HAL11WifiCommandENS1_19WifiTransmitCommandEtPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*) &rArr; Anki::Cozmo::HAL::WifiRxSpiReady1() &rArr; Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiRxSpiReady1()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
</UL>

<P><STRONG><a name="[281]"></a>Anki::Cozmo::HAL::WifiConfigure()</STRONG> (Thumb, 1172 bytes, Stack size 200 bytes, wifi.o(i._ZN4Anki5Cozmo3HAL13WifiConfigureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Anki::Cozmo::HAL::WifiConfigure() &rArr; Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*) &rArr; Anki::Cozmo::HAL::WifiRxSpiReady1() &rArr; Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiInit()
</UL>

<P><STRONG><a name="[279]"></a>Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*)</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, wifi.o(i._ZN4Anki5Cozmo3HAL15SPI_SendReceiveEjPKhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiStateMachine()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiRxSpiReady1()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiConfigure()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*)
</UL>

<P><STRONG><a name="[27a]"></a>Anki::Cozmo::HAL::WifiRxSpiReady1()</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wifi.o(i._ZN4Anki5Cozmo3HAL15WifiRxSpiReady1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Anki::Cozmo::HAL::WifiRxSpiReady1() &rArr; Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*)
</UL>

<P><STRONG><a name="[99]"></a>Anki::Cozmo::HAL::WifiStateMachine()</STRONG> (Thumb, 1220 bytes, Stack size 56 bytes, wifi.o(i._ZN4Anki5Cozmo3HAL16WifiStateMachineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Anki::Cozmo::HAL::WifiStateMachine() &rArr; Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*) &rArr; Anki::Cozmo::HAL::WifiRxSpiReady1() &rArr; Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*) &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTGetFreeSpace()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::HAL::LEDId, Anki::Cozmo::HAL::LEDColor)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SPI_SendReceive(unsigned, const unsigned char*, unsigned char*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::WifiCommand(Anki::Cozmo::HAL::WifiTransmitCommand, unsigned short, const unsigned char*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi.o(i._ZN4Anki5Cozmo3HAL13WifiConfigureEv)
</UL>
<P><STRONG><a name="[195]"></a>SetAFBitmask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, system_stm32f4xx.o(i.SetAFBitmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetAFBitmask
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[db]"></a>__sti___21_dockingController_cpp</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dockingcontroller.o(i.__sti___21_dockingController_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___21_dockingController_cpp &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dockingcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[dc]"></a>__sti___18_headController_cpp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, headcontroller.o(i.__sti___18_headController_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___18_headController_cpp &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::VelocityProfileGenerator()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> headcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[dd]"></a>__sti___18_liftController_cpp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, liftcontroller.o(i.__sti___18_liftController_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___18_liftController_cpp &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::VelocityProfileGenerator()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liftcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[de]"></a>__sti___16_localization_cpp</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, localization.o(i.__sti___16_localization_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __sti___16_localization_cpp &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> localization.o(.init_array)
</UL>
<P><STRONG><a name="[df]"></a>__sti___12_messages_cpp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i.__sti___12_messages_cpp))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.init_array)
</UL>
<P><STRONG><a name="[e0]"></a>__sti___16_pathFollower_cpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pathfollower.o(i.__sti___16_pathFollower_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___16_pathFollower_cpp &rArr; Anki::Planning::Path::Path() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Path()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pathfollower.o(.init_array)
</UL>
<P><STRONG><a name="[e1]"></a>__sti___26_pickAndPlaceController_cpp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pickandplacecontroller.o(i.__sti___26_pickAndPlaceController_cpp))
<BR>[Address Reference Count : 1]<UL><LI> pickandplacecontroller.o(.init_array)
</UL>
<P><STRONG><a name="[e2]"></a>__sti___22_steeringController_cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, steeringcontroller.o(i.__sti___22_steeringController_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___22_steeringController_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::VelocityProfileGenerator()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steeringcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[e3]"></a>__sti___21_visionDebugStream_cpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, visiondebugstream.o(i.__sti___21_visionDebugStream_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __sti___21_visionDebugStream_cpp &rArr; Anki::Embedded::SerializedBuffer::SerializedBuffer() &rArr; Anki::Embedded::MemoryStack::MemoryStack()
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::SerializedBuffer::SerializedBuffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> visiondebugstream.o(.init_array)
</UL>
<P><STRONG><a name="[1da]"></a>Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()</STRONG> (Thumb, 388 bytes, Stack size 192 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem12VisionMemory12ResetBuffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::VisionMarker&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::set_size(int)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[1e2]"></a>Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 842 bytes, Stack size 232 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem13TrackTemplateERKNS_8Embedded5ArrayIhEERKNS2_13QuadrilateralIfEERKNS1_17TrackerParametersERNS2_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERbNS2_11MemoryStackESI_SI_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::VisionSystem::TrackTemplate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::IterativelyRefineTrack_Projective(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, int, float, float, bool&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTransformation(Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DebugStream::SendTrackingUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, const Anki::Cozmo::VisionSystem::TrackerParameters&, unsigned char, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan_fast(float)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::SendTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, bool, Anki::Embedded::MemoryStack)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_translation() const
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_angleZ() const
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_angleY() const
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_angleX() const
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, float)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateTrack(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, float, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::Point3(float, float, float)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[1ef]"></a>Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 548 bytes, Stack size 272 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem14LookForMarkersERKNS_8Embedded5ArrayIhEERKNS1_31DetectFiducialMarkersParametersERNS2_15FixedLengthListINS2_12VisionMarkerEEENS2_11MemoryStackESE_SE_))
<BR><BR>[Stack]<UL><LI>Max Depth = 2432<LI>Call Chain = Anki::Cozmo::VisionSystem::LookForMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Quadrilateral&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Point&lang;short&rang;&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ImageProcessing::Correlate1dCircularAndSameSizeOutput&lang;short, int, short&rang;(const Anki::Embedded::FixedPointArray&lang;T1&rang;&, const Anki::Embedded::FixedPointArray&lang;T1&rang;&, Anki::Embedded::FixedPointArray&lang;T3&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ArraySlice&lang;short&rang;::Set(const Anki::Embedded::ConstArraySliceExpression&lang;short&rang;&, bool) &rArr; Anki::Embedded::ArraySliceLimits_in1_out1&lang;int&rang;::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&, bool, const Anki::Embedded::LinearSequence&lang;int&rang;&, const Anki::Embedded::LinearSequence&lang;int&rang;&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DebugStream::SendFiducialDetection(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::ResetFiducialDetection(const Anki::Embedded::Array&lang;unsigned char&rang;&)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::SendFiducialDetection(const Anki::Embedded::Quadrilateral&lang;float&rang;&, const Anki::Vision::MarkerType&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::SendDrawNow()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;&, Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;&, int, int, short, short, int, int, int, int, float, int, int, int, float, unsigned short, int, int, int, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;Anki::Embedded::Array&lang;float&rang;&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::Array&lang;float&rang;&rang;::set_size(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::set_size(int)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[1ff]"></a>Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 860 bytes, Stack size 376 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem23TrackerPredictionUpdateERKNS_8Embedded5ArrayIhEENS2_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = Anki::Cozmo::VisionSystem::TrackerPredictionUpdate(const Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformedCorners(Anki::Embedded::MemoryStack) const &rArr; Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral&lang;float&rang;&, Anki::Embedded::MemoryStack, float) const &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformedCorners(Anki::Embedded::MemoryStack) const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::get_transformation() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::SendTrackerPrediction_Before(const Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::MatlabVisualization::SendTrackerPrediction_After(const Anki::Embedded::Quadrilateral&lang;float&rang;&)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_rotationMatrix(Anki::Embedded::Array&lang;float&rang;&, bool) const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::get_translation() const
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::UpdateRotationAndTranslation(const Anki::Embedded::Array&lang;float&rang;&, const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::Point3(float, float, float)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[207]"></a>Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 252 bytes, Stack size 104 bytes, visionsystem.o(i._ZN4Anki5Cozmo12VisionSystem24BrightnessNormalizeImageERNS_8Embedded5ArrayIhEERKNS2_13QuadrilateralIfEEfNS2_11MemoryStackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Anki::Cozmo::VisionSystem::BrightnessNormalizeImage(Anki::Embedded::Array&lang;unsigned char&rang;&, const Anki::Embedded::Quadrilateral&lang;float&rang;&, float, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, unsigned char, Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack) &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::Array&lang;float&rang;::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool) &rArr; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::BeginBenchmark(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::EndBenchmark(const char*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array&lang;unsigned char&rang;&, int, unsigned char, Anki::Embedded::Array&lang;unsigned char&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::get_size(int) const
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;unsigned char&rang;::Set(const Anki::Embedded::Array&lang;unsigned char&rang;&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
</UL>

<P><STRONG><a name="[e4]"></a>__sti___16_visionSystem_cpp</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, visionsystem.o(i.__sti___16_visionSystem_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __sti___16_visionSystem_cpp &rArr; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof() &rArr; Anki::Embedded::FixedLengthList&lang;float&rang;::FixedLengthList() &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::DetectFiducialMarkersParameters()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerParameters::TrackerParameters()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof::LucasKanadeTracker_SampledPlanar6dof()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::set_size(int)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> visionsystem.o(.init_array)
</UL>
<P><STRONG><a name="[1fc]"></a>Anki::Cozmo::VisionSystem::GetCamPoseWrtRobot&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&)</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, visionsystem.o(t._ZN4Anki5Cozmo12VisionSystem18GetCamPoseWrtRobotIfEENS_6ResultERNS_8Embedded5ArrayIT_EERNS4_6Point3IS6_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Cozmo::VisionSystem::GetCamPoseWrtRobot&lang;float&rang;(Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&) &rArr; Anki::Embedded::Array&lang;float&rang;::get_size(int) const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetAngleRad()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetWithRespectToRobot(const Anki::Embedded::Point3&lang;float&rang;&, Anki::Embedded::Point3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[e5]"></a>__sti___13_trig_fast_cpp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, trig_fast.o(i.__sti___13_trig_fast_cpp))
<BR>[Address Reference Count : 1]<UL><LI> trig_fast.o(.init_array)
</UL>
<P><STRONG><a name="[e6]"></a>__sti___19_fiducialMarkers_cpp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fiducialmarkers.o(i.__sti___19_fiducialMarkers_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___19_fiducialMarkers_cpp &rArr; Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree()
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fiducialmarkers.o(.init_array)
</UL>
<P><STRONG><a name="[36f]"></a>__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rwstdexcept.o(i._ZN4__rw13__rw_vfmatstrEPcjPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list) &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[371]"></a>__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)</STRONG> (Thumb, 330 bytes, Stack size 88 bytes, rwstdexcept.o(i._ZN4__rw13__rw_vfmatstrEPcjiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[3f9]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[3ee]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[85]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>__sti___8_char_cpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(i.__sti___8_char_cpp))
<BR>[Address Reference Count : 1]<UL><LI> char.o(.init_array)
</UL>
<P><STRONG><a name="[a7]"></a>&lang;Func5&rang;</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, locale.o(i.<Func5>))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = &lang;Func5&rang; &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
</UL>
<P><STRONG><a name="[e8]"></a>__sti___10_locale_cpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locale.o(i.__sti___10_locale_cpp))
<BR>[Address Reference Count : 1]<UL><LI> locale.o(.init_array)
</UL>
<P><STRONG><a name="[15a]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[8a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>__sti___10_rwcats_cpp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwcats.o(i.__sti___10_rwcats_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___10_rwcats_cpp &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(.init_array)
</UL>
<P><STRONG><a name="[8c]"></a>__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>_fp_value</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[180]"></a>_locale_name</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[181]"></a>_set_locale_byname</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
