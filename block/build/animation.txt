; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\animation.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\animation.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\animation.crf supervisor\src\animation.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo9Animation11AddKeyFrameERKNS0_8KeyFrameE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9Animation11AddKeyFrameERKNS0_8KeyFrameE PROC ; Anki::Cozmo::Animation::AddKeyFrame(const Anki::Cozmo::KeyFrame&)
;;;328      
;;;329      Result Animation::AddKeyFrame(const KeyFrame& keyframe)
000000  b530              PUSH     {r4,r5,lr}
;;;330      {
;;;331        AnkiConditionalErrorAndReturnValue(_totalNumFrames < Animation::MAX_KEYFRAMES,
000002  f8d0328c          LDR      r3,[r0,#0x28c]
000006  b083              SUB      sp,sp,#0xc            ;330
000008  2b20              CMP      r3,#0x20
00000a  db0d              BLT      |L1.40|
00000c  f240114b          MOV      r1,#0x14b
000010  480e              LDR      r0,|L1.76|
000012  e9cd0100          STRD     r0,r1,[sp,#0]
000016  a30e              ADR      r3,|L1.80|
000018  a215              ADR      r2,|L1.112|
00001a  a125              ADR      r1,|L1.176|
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;332                                           RESULT_FAIL,
;;;333                                           "Animation.AddKeyFrame.TooManyFrames",
;;;334                                           "No more space to add given keyframe to specified animation.\n");
;;;335    
;;;336        
;;;337        _frames[_totalNumFrames++] = keyframe;
;;;338        _framesSorted = false; // trigger a re-sort on next Init() now that we've got a new frame
;;;339        
;;;340    #   if DEBUG_ANIMATIONS
;;;341        PRINT("Added frame %d to animation %d\n",
;;;342              _totalNumFrames, _ID);
;;;343    #   endif
;;;344        
;;;345        /*
;;;346        const TrackType whichTrack = Animation::GetTrack(keyframe.type);
;;;347        
;;;348        Animation::Track& track = _tracks[whichTrack];
;;;349        
;;;350        AnkiConditionalErrorAndReturnValue(track.numFrames < Animation::MAX_KEYFRAMES,
;;;351                                           RESULT_FAIL,
;;;352                                           "Animation.AddKeyFrame.TooManyFrames",
;;;353                                           "No more space to add given keyframe to specified animation track.\n");
;;;354        
;;;355        track.frames[track.numFrames++] = keyframe;
;;;356        
;;;357    #   if DEBUG_ANIMATIONS
;;;358        PRINT("Added frame %d to track %d of animation %d\n",
;;;359              track.numFrames, whichTrack, _ID);
;;;360    #   endif
;;;361        */
;;;362        
;;;363        return RESULT_OK;
;;;364      }
000022  b003              ADD      sp,sp,#0xc
000024  2001              MOVS     r0,#1                 ;331
000026  bd30              POP      {r4,r5,pc}
                  |L1.40|
000028  eb030283          ADD      r2,r3,r3,LSL #2       ;337
00002c  1c5b              ADDS     r3,r3,#1              ;337
00002e  f8c0328c          STR      r3,[r0,#0x28c]        ;337
000032  e891103a          LDM      r1,{r1,r3-r5,r12}     ;337
000036  eb000282          ADD      r2,r0,r2,LSL #2       ;337
00003a  320c              ADDS     r2,r2,#0xc            ;337
00003c  e882103a          STM      r2,{r1,r3-r5,r12}     ;337
000040  2100              MOVS     r1,#0                 ;338
000042  f8801290          STRB     r1,[r0,#0x290]        ;338
000046  b003              ADD      sp,sp,#0xc
000048  4608              MOV      r0,r1                 ;363
00004a  bd30              POP      {r4,r5,pc}
;;;365      
                          ENDP

                  |L1.76|
                          DCD      ||.constdata||
                  |L1.80|
000050  73757065          DCB      "supervisor\\src\\animation.cpp",0
000054  72766973
000058  6f725c73
00005c  72635c61
000060  6e696d61
000064  74696f6e
000068  2e637070
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L1.112|
000070  4e6f206d          DCB      "No more space to add given keyframe to specified animat"
000074  6f726520
000078  73706163
00007c  6520746f
000080  20616464
000084  20676976
000088  656e206b
00008c  65796672
000090  616d6520
000094  746f2073
000098  70656369
00009c  66696564
0000a0  20616e69
0000a4  6d6174  
0000a7  696f6e2e          DCB      "ion.\n",0
0000ab  0a00    
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L1.176|
0000b0  416e696d          DCB      "Animation.AddKeyFrame.TooManyFrames",0
0000b4  6174696f
0000b8  6e2e4164
0000bc  644b6579
0000c0  4672616d
0000c4  652e546f
0000c8  6f4d616e
0000cc  79467261
0000d0  6d657300

                          AREA ||i._ZN4Anki5Cozmo9Animation13SortKeyFramesEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9Animation13SortKeyFramesEv PROC ; Anki::Cozmo::Animation::SortKeyFrames()
;;;365      
;;;366      Result Animation::SortKeyFrames()
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;367      {
000004  4605              MOV      r5,r0
;;;368        if(!_framesSorted)
000006  f8900290          LDRB     r0,[r0,#0x290]
00000a  f5ad7d20          SUB      sp,sp,#0x280          ;367
00000e  2800              CMP      r0,#0
000010  d15e              BNE      |L2.208|
;;;369        {
;;;370          KeyFrame buffer[MAX_KEYFRAMES];
;;;371          
;;;372          // Copy the frames into the temp buffer, and then copy them back into the
;;;373          // _frames array, in order. The algorithm below is certainly not optimal
;;;374          // in terms of efficiency (we loop over the frames list NUM_TRACKS times,
;;;375          // re-checking the type of every frame every time. But given the small
;;;376          // number of tracks (5) and number of frames (~20-30), this seems like
;;;377          // it's probably good enough for now.
;;;378      
;;;379          memcpy(buffer, _frames, _totalNumFrames*sizeof(KeyFrame));
000012  f8d5028c          LDR      r0,[r5,#0x28c]
000016  f105010c          ADD      r1,r5,#0xc
00001a  eb000080          ADD      r0,r0,r0,LSL #2
00001e  0082              LSLS     r2,r0,#2
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       __aeabi_memcpy4
;;;380          
;;;381    #     if DEBUG_ANIMATIONS
;;;382          bool sanityCheck[MAX_KEYFRAMES];
;;;383          memset(sanityCheck, 0, sizeof(bool)*MAX_KEYFRAMES);
;;;384    #     endif
;;;385          
;;;386          s32 curStartOffset = 0;
000026  2700              MOVS     r7,#0
;;;387          for(s32 iTrack=0; iTrack<NUM_TRACKS; ++iTrack) {
000028  463e              MOV      r6,r7
00002a  46e9              MOV      r9,sp                 ;370
                  |L2.44|
;;;388            _tracks[iTrack].startOffset = curStartOffset;
00002c  eb051006          ADD      r0,r5,r6,LSL #4
;;;389            
;;;390            const TrackType curTrackType = static_cast<TrackType>(iTrack);
;;;391            for(s32 iFrame=0; iFrame<_totalNumFrames; ++iFrame) {
000030  2400              MOVS     r4,#0
000032  f8c07298          STR      r7,[r0,#0x298]
000036  f8d5028c          LDR      r0,[r5,#0x28c]
00003a  f00608ff          AND      r8,r6,#0xff           ;390
00003e  2800              CMP      r0,#0
000040  dd40              BLE      |L2.196|
                  |L2.66|
;;;392              // If this frame should be in the current track
;;;393              if(Animation::GetTrack(buffer[iFrame].type) == curTrackType) {
000042  eb040084          ADD      r0,r4,r4,LSL #2
000046  f8191020          LDRB     r1,[r9,r0,LSL #2]
00004a  2917              CMP      r1,#0x17
00004c  d219              BCS      |L2.130|
00004e  e8dff001          TBB      [pc,r1]
000052  0c0c              DCB      0x0c,0x0c
000054  0c0c0e0e          DCB      0x0c,0x0c,0x0e,0x0e
000058  10101010          DCB      0x10,0x10,0x10,0x10
00005c  10101414          DCB      0x10,0x10,0x14,0x14
000060  14121212          DCB      0x14,0x12,0x12,0x12
000064  12120e0e          DCB      0x12,0x12,0x0e,0x0e
000068  1600              DCB      0x16,0x00
00006a  2100              MOVS     r1,#0
00006c  e00d              B        |L2.138|
00006e  2101              MOVS     r1,#1
000070  e00b              B        |L2.138|
000072  2102              MOVS     r1,#2
000074  e009              B        |L2.138|
000076  2104              MOVS     r1,#4
000078  e007              B        |L2.138|
00007a  2103              MOVS     r1,#3
00007c  e005              B        |L2.138|
00007e  2105              MOVS     r1,#5
000080  e003              B        |L2.138|
                  |L2.130|
000082  4816              LDR      r0,|L2.220|
000084  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
000088  2106              MOVS     r1,#6
                  |L2.138|
00008a  4541              CMP      r1,r8
00008c  d115              BNE      |L2.186|
;;;394                _frames[_tracks[iTrack].startOffset + _tracks[iTrack].numFrames++] = buffer[iFrame];
00008e  eb051006          ADD      r0,r5,r6,LSL #4
000092  e9d012a6          LDRD     r1,r2,[r0,#0x298]
000096  4411              ADD      r1,r1,r2
000098  1c52              ADDS     r2,r2,#1
00009a  f8c0229c          STR      r2,[r0,#0x29c]
00009e  eb040084          ADD      r0,r4,r4,LSL #2
0000a2  eb090080          ADD      r0,r9,r0,LSL #2
0000a6  eb010181          ADD      r1,r1,r1,LSL #2
0000aa  e890140d          LDM      r0,{r0,r2,r3,r10,r12}
0000ae  eb050181          ADD      r1,r5,r1,LSL #2
0000b2  310c              ADDS     r1,r1,#0xc
0000b4  1c7f              ADDS     r7,r7,#1
0000b6  e881140d          STM      r1,{r0,r2,r3,r10,r12}
                  |L2.186|
0000ba  f8d5028c          LDR      r0,[r5,#0x28c]        ;391
0000be  1c64              ADDS     r4,r4,#1              ;391
0000c0  42a0              CMP      r0,r4                 ;391
0000c2  dcbe              BGT      |L2.66|
                  |L2.196|
0000c4  1c76              ADDS     r6,r6,#1              ;391
0000c6  2e06              CMP      r6,#6                 ;387
0000c8  dbb0              BLT      |L2.44|
;;;395                ++curStartOffset;
;;;396                
;;;397    #           if DEBUG_ANIMATIONS
;;;398                // Make sure each frame is used only once
;;;399                AnkiConditionalWarn(!sanityCheck[iFrame],
;;;400                                    "Animation.SortKeyFrames.ReusingFrame",
;;;401                                    "Frame %d is being added to multiple tracks.\n", iFrame);
;;;402                sanityCheck[iFrame] = true;
;;;403    #           endif
;;;404              }
;;;405            } // for each frame
;;;406            
;;;407          } // for each track
;;;408          
;;;409          _framesSorted = true;
0000ca  2001              MOVS     r0,#1
0000cc  f8850290          STRB     r0,[r5,#0x290]
                  |L2.208|
;;;410          
;;;411    #     if DEBUG_ANIMATIONS
;;;412          for(s32 iTrack=0; iTrack<NUM_TRACKS; ++iTrack) {
;;;413            PRINT("Track %d of animation %d has %d frames starting at offset %d.\n",
;;;414                  iTrack, _ID, _tracks[iTrack].numFrames, _tracks[iTrack].startOffset);
;;;415          }
;;;416    #     endif
;;;417          
;;;418        } // if(!_framesSorted)
;;;419        
;;;420        return RESULT_OK;
;;;421      }
0000d0  f50d7d20          ADD      sp,sp,#0x280
0000d4  2000              MOVS     r0,#0                 ;420
0000d6  e8bd87f0          POP      {r4-r10,pc}
;;;422      
                          ENDP

0000da  0000              DCW      0x0000
                  |L2.220|
                          DCD      ||i._ZN4Anki5Cozmo9Animation8GetTrackENS0_8KeyFrame4TypeE||+0x48

                          AREA ||i._ZN4Anki5Cozmo9Animation19CheckTrackReadinessEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9Animation19CheckTrackReadinessEv PROC ; Anki::Cozmo::Animation::CheckTrackReadiness()
;;;102      
;;;103      bool Animation::CheckTrackReadiness()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;104      {
000004  4604              MOV      r4,r0
;;;105        if(!_allTracksReady)
000006  f89002f4          LDRB     r0,[r0,#0x2f4]
00000a  bb50              CBNZ     r0,|L3.98|
;;;106        {
;;;107          // Mark as true for now, and let the loop below unset it
;;;108          _allTracksReady = true;
00000c  2701              MOVS     r7,#1
00000e  f88472f4          STRB     r7,[r4,#0x2f4]
;;;109          
;;;110          for(s32 iTrack=0; iTrack<NUM_TRACKS; ++iTrack) {
000012  2600              MOVS     r6,#0
                  |L3.20|
;;;111            
;;;112            Animation::Track& track = _tracks[iTrack];
000014  eb041506          ADD      r5,r4,r6,LSL #4
;;;113            
;;;114            // If this track isn't marked as ready yet, check it now
;;;115            if(!track.isReady) {
000018  f8950294          LDRB     r0,[r5,#0x294]
00001c  f5057525          ADD      r5,r5,#0x294
000020  b318              CBZ      r0,|L3.106|
                  |L3.34|
000022  1c76              ADDS     r6,r6,#1
000024  2e06              CMP      r6,#6                 ;110
000026  dbf5              BLT      |L3.20|
;;;116              if(track.numFrames == 0) {
;;;117                // Track with no keyframes is always ready
;;;118                track.isReady = true;
;;;119              } else if(_frames[track.startOffset].relTime_ms > 0) {
;;;120                // Tracks with first keyframe at time > 0 are always ready
;;;121                track.isReady = true;
;;;122              } else {
;;;123                // Check whether the first keyframe is "in position"
;;;124                track.isReady = _frames[track.startOffset].IsInPosition();
;;;125              }
;;;126              
;;;127              // In case this track just became ready:
;;;128              _allTracksReady &= track.isReady;
;;;129              
;;;130            } // if(!track.isReady)
;;;131            
;;;132          } // for each track
;;;133          
;;;134          if(_allTracksReady) {
000028  f89402f4          LDRB     r0,[r4,#0x2f4]
00002c  b1c8              CBZ      r0,|L3.98|
;;;135            // If all track just became ready, update the start time for this
;;;136            // animation to now and call TransitionInto for keyframes that are
;;;137            // first for their track but do _not_ have relTime==0
;;;138            _startTime_ms = HAL::GetTimeStamp();
00002e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;139            
;;;140            for(s32 iTrack=0; iTrack<NUM_TRACKS; ++iTrack)
000032  2500              MOVS     r5,#0
000034  6060              STR      r0,[r4,#4]
                  |L3.54|
;;;141            {
;;;142              if(_tracks[iTrack].numFrames > 0 &&
000036  eb041005          ADD      r0,r4,r5,LSL #4
00003a  f8d0129c          LDR      r1,[r0,#0x29c]
00003e  2900              CMP      r1,#0
000040  dd0c              BLE      |L3.92|
;;;143                 _frames[_tracks[iTrack].startOffset].relTime_ms > 0)
000042  f8d00298          LDR      r0,[r0,#0x298]
000046  eb000080          ADD      r0,r0,r0,LSL #2
00004a  eb040080          ADD      r0,r4,r0,LSL #2
00004e  89c1              LDRH     r1,[r0,#0xe]
000050  b121              CBZ      r1,|L3.92|
;;;144              {
;;;145                Unlock(static_cast<TrackType>(iTrack));
;;;146                _frames[_tracks[iTrack].startOffset].TransitionInto(_startTime_ms);
000052  2200              MOVS     r2,#0
000054  300c              ADDS     r0,r0,#0xc
000056  6861              LDR      r1,[r4,#4]
000058  f7fffffe          BL       _ZNK4Anki5Cozmo8KeyFrame14TransitionIntoEjh ; Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
                  |L3.92|
00005c  1c6d              ADDS     r5,r5,#1
00005e  2d06              CMP      r5,#6                 ;140
000060  dbe9              BLT      |L3.54|
                  |L3.98|
;;;147                Lock(static_cast<TrackType>(iTrack));
;;;148              }
;;;149            } // for each track
;;;150            
;;;151          } // if(_allTracksReady)
;;;152          
;;;153        } // if (!_allTracksReady)
;;;154        
;;;155        return _allTracksReady;
000062  f89402f4          LDRB     r0,[r4,#0x2f4]
;;;156          
;;;157      } // CheckTrackReadiness()
000066  e8bd81f0          POP      {r4-r8,pc}
                  |L3.106|
00006a  68a8              LDR      r0,[r5,#8]            ;116
00006c  b130              CBZ      r0,|L3.124|
00006e  6868              LDR      r0,[r5,#4]            ;119
000070  eb000080          ADD      r0,r0,r0,LSL #2       ;119
000074  eb040080          ADD      r0,r4,r0,LSL #2       ;119
000078  89c1              LDRH     r1,[r0,#0xe]          ;119
00007a  b109              CBZ      r1,|L3.128|
                  |L3.124|
00007c  702f              STRB     r7,[r5,#0]            ;121
00007e  e003              B        |L3.136|
                  |L3.128|
000080  300c              ADDS     r0,r0,#0xc            ;121
000082  f7fffffe          BL       _ZN4Anki5Cozmo8KeyFrame12IsInPositionEv ; Anki::Cozmo::KeyFrame::IsInPosition()
000086  7028              STRB     r0,[r5,#0]            ;124
                  |L3.136|
000088  f89402f4          LDRB     r0,[r4,#0x2f4]        ;128
00008c  7829              LDRB     r1,[r5,#0]            ;128
00008e  4008              ANDS     r0,r0,r1              ;128
000090  bf18              IT       NE                    ;128
000092  2001              MOVNE    r0,#1                 ;128
000094  f88402f4          STRB     r0,[r4,#0x2f4]        ;128
000098  e7c3              B        |L3.34|
;;;158      
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9Animation4InitEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9Animation4InitEv PROC ; Anki::Cozmo::Animation::Init()
;;;52       
;;;53       void Animation::Init()
000000  b570              PUSH     {r4-r6,lr}
;;;54       {
000002  4604              MOV      r4,r0
;;;55     #   if DEBUG_ANIMATIONS
;;;56         PRINT("Init Animation %d\n", _ID);
;;;57     #   endif
;;;58         
;;;59         SortKeyFrames();
000004  f7fffffe          BL       _ZN4Anki5Cozmo9Animation13SortKeyFramesEv ; Anki::Cozmo::Animation::SortKeyFrames()
;;;60         
;;;61         _startTime_ms = HAL::GetTimeStamp();
000008  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;62         
;;;63         _allTracksReady = false;
00000c  2600              MOVS     r6,#0
00000e  6060              STR      r0,[r4,#4]
000010  f88462f4          STRB     r6,[r4,#0x2f4]
;;;64         
;;;65         _isPlaying = true;
000014  2001              MOVS     r0,#1
000016  7220              STRB     r0,[r4,#8]
;;;66         
;;;67         /*
;;;68         _returnToOrigState = returnToOrigStateWhenDone;
;;;69         
;;;70         if(_returnToOrigState) {
;;;71           _origHeadAngle  = HeadController::GetAngleRad();
;;;72           _origLiftHeight = LiftController::GetHeightMM();
;;;73           
;;;74           // TODO: Need HAL::GetLED() method to store original LED state
;;;75          
;;;76            for(s32 iLED=0; iLED < HAL::NUM_LEDS; ++iLED) {
;;;77            origLEDcolors[iLED] = HAL::
;;;78            }
;;;79          
;;;80         }
;;;81          */
;;;82         
;;;83         // Reset each track and call TransitionInto for any initial keyframes
;;;84         // that have a relative start time of 0
;;;85         for(s32 iTrack=0; iTrack<NUM_TRACKS; ++iTrack) {
000018  4635              MOV      r5,r6
                  |L4.26|
;;;86           _tracks[iTrack].currFrame = 0;
00001a  eb041005          ADD      r0,r4,r5,LSL #4
;;;87           _tracks[iTrack].isReady   = false;
00001e  f8c062a0          STR      r6,[r0,#0x2a0]
000022  f8806294          STRB     r6,[r0,#0x294]
;;;88           
;;;89           if(_tracks[iTrack].numFrames > 0) {
000026  f8d0129c          LDR      r1,[r0,#0x29c]
00002a  2900              CMP      r1,#0
00002c  dd0c              BLE      |L4.72|
;;;90             
;;;91             Lock(static_cast<TrackType>(iTrack));
;;;92             
;;;93             if(_frames[_tracks[iTrack].startOffset].relTime_ms == 0)
00002e  f8d00298          LDR      r0,[r0,#0x298]
000032  eb000080          ADD      r0,r0,r0,LSL #2
000036  eb040080          ADD      r0,r4,r0,LSL #2
00003a  89c1              LDRH     r1,[r0,#0xe]
00003c  b921              CBNZ     r1,|L4.72|
;;;94             {
;;;95               _frames[_tracks[iTrack].startOffset].TransitionInto(_startTime_ms);
00003e  2200              MOVS     r2,#0
000040  300c              ADDS     r0,r0,#0xc
000042  6861              LDR      r1,[r4,#4]
000044  f7fffffe          BL       _ZNK4Anki5Cozmo8KeyFrame14TransitionIntoEjh ; Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
                  |L4.72|
000048  1c6d              ADDS     r5,r5,#1
00004a  2d06              CMP      r5,#6                 ;85
00004c  dbe5              BLT      |L4.26|
;;;96             }
;;;97           }
;;;98         }
;;;99         
;;;100      } // Init()
00004e  bd70              POP      {r4-r6,pc}
;;;101      
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9Animation4LockENS1_9TrackTypeE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9Animation4LockENS1_9TrackTypeE PROC ; Anki::Cozmo::Animation::Lock(Anki::Cozmo::Animation::TrackType)
;;;422      
;;;423      void Animation::Lock(TrackType whichTrack)
000000  4770              BX       lr
;;;424      {
;;;425    #   if ENABLE_LOCK_AND_UNLOCK
;;;426        switch(whichTrack)
;;;427        {
;;;428          case HEAD:
;;;429            HeadController::Disable();
;;;430            break;
;;;431            
;;;432          case LIFT:
;;;433            LiftController::Disable();
;;;434            break;
;;;435            
;;;436          case LIGHTS:
;;;437            EyeController::Disable();
;;;438            break;
;;;439            
;;;440          default:
;;;441            // Nothing to do?
;;;442            break;
;;;443        }
;;;444    #   endif
;;;445      } // Lock()
;;;446    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9Animation4StopEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9Animation4StopEv PROC ; Anki::Cozmo::Animation::Stop()
;;;240      
;;;241      void Animation::Stop()
000000  b5f0              PUSH     {r4-r7,lr}
000002  4f23              LDR      r7,|L6.144|
;;;242      {
000004  4605              MOV      r5,r0
000006  ed2d8b02          VPUSH    {d8}
00000a  b085              SUB      sp,sp,#0x14
00000c  ed9f8a1f          VLDR     s16,|L6.140|
;;;243        // Stop any subsystems this animation was using:
;;;244        for(s32 iTrack=0; iTrack < NUM_TRACKS; ++iTrack) {
000010  2400              MOVS     r4,#0
000012  f24016fb          MOV      r6,#0x1fb
                  |L6.22|
;;;245          StopTrack(static_cast<TrackType>(iTrack));
000016  b2e1              UXTB     r1,r4
000018  eb051001          ADD      r0,r5,r1,LSL #4
00001c  f8d0029c          LDR      r0,[r0,#0x29c]
000020  2800              CMP      r0,#0
000022  dd2a              BLE      |L6.122|
000024  2906              CMP      r1,#6
000026  d21d              BCS      |L6.100|
000028  e8dff001          TBB      [pc,r1]
00002c  03060c17          DCB      0x03,0x06,0x0c,0x17
000030  0927              DCB      0x09,0x27
000032  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController4StopEv ; Anki::Cozmo::HeadController::Stop()
000036  e020              B        |L6.122|
000038  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController4StopEv ; Anki::Cozmo::LiftController::Stop()
00003c  e01d              B        |L6.122|
00003e  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController13StopAnimatingEv ; Anki::Cozmo::EyeController::StopAnimating()
000042  e01a              B        |L6.122|
000044  eeb00a48          VMOV.F32 s0,s16
000048  eef01a40          VMOV.F32 s3,s0
00004c  eeb01a40          VMOV.F32 s2,s0
000050  eef00a40          VMOV.F32 s1,s0
000054  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
000058  e00f              B        |L6.122|
00005a  a903              ADD      r1,sp,#0xc
00005c  204d              MOVS     r0,#0x4d
00005e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000062  e00a              B        |L6.122|
                  |L6.100|
000064  9700              STR      r7,[sp,#0]
000066  4b0b              LDR      r3,|L6.148|
000068  e9cd6101          STRD     r6,r1,[sp,#4]
00006c  f1030220          ADD      r2,r3,#0x20
000070  f1020124          ADD      r1,r2,#0x24
000074  2005              MOVS     r0,#5
000076  f7fffffe          BL       _Anki_Log
                  |L6.122|
00007a  1c64              ADDS     r4,r4,#1
00007c  2c06              CMP      r4,#6                 ;244
00007e  dbca              BLT      |L6.22|
;;;246        }
;;;247        
;;;248        _isPlaying = false;
000080  2000              MOVS     r0,#0
000082  7228              STRB     r0,[r5,#8]
;;;249        
;;;250    #   if DEBUG_ANIMATIONS
;;;251        PRINT("Stopped playing animation %d.\n", _ID);
;;;252    #   endif
;;;253      }
000084  b005              ADD      sp,sp,#0x14
000086  ecbd8b02          VPOP     {d8}
00008a  bdf0              POP      {r4-r7,pc}
;;;254      
                          ENDP

                  |L6.140|
00008c  00000000          DCFS     0x00000000 ; 0
                  |L6.144|
                          DCD      ||.constdata||+0x50
                  |L6.148|
                          DCD      ||i._ZN4Anki5Cozmo9Animation9StopTrackENS1_9TrackTypeE||+0x84

                          AREA ||i._ZN4Anki5Cozmo9Animation5ClearEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9Animation5ClearEv PROC ; Anki::Cozmo::Animation::Clear()
;;;261      
;;;262      void Animation::Clear()
000000  b510              PUSH     {r4,lr}
;;;263      {
000002  4604              MOV      r4,r0
;;;264        if(_isPlaying) {
000004  7a00              LDRB     r0,[r0,#8]
000006  2800              CMP      r0,#0
;;;265          Stop();
000008  bf1c              ITT      NE
00000a  4620              MOVNE    r0,r4
00000c  f7fffffe          BLNE     _ZN4Anki5Cozmo9Animation4StopEv ; Anki::Cozmo::Animation::Stop()
;;;266        }
;;;267        
;;;268        _totalNumFrames = 0;
000010  2000              MOVS     r0,#0
;;;269        _framesSorted = false;
000012  f8c4028c          STR      r0,[r4,#0x28c]
000016  f8840290          STRB     r0,[r4,#0x290]
;;;270        
;;;271        for(s32 iTrack = 0; iTrack < NUM_TRACKS; ++iTrack)
00001a  4601              MOV      r1,r0
                  |L7.28|
;;;272        {
;;;273          // TODO: Make a Clear() method in KeyFrame and call that here:
;;;274          _tracks[iTrack].currFrame = 0;
00001c  eb041201          ADD      r2,r4,r1,LSL #4
;;;275          _tracks[iTrack].numFrames = 0;
000020  1c49              ADDS     r1,r1,#1
000022  f8c202a0          STR      r0,[r2,#0x2a0]
000026  f8c2029c          STR      r0,[r2,#0x29c]        ;271
00002a  2906              CMP      r1,#6                 ;271
00002c  dbf6              BLT      |L7.28|
;;;276        }
;;;277      }
00002e  bd10              POP      {r4,pc}
;;;278      
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9Animation5TrackC1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9Animation5TrackC2Ev                  ; Alternate entry point ; Anki::Cozmo::Animation::Track::Track__sub_object()
                  _ZN4Anki5Cozmo9Animation5TrackC1Ev PROC ; Anki::Cozmo::Animation::Track::Track()
;;;43       
;;;44       Animation::Track::Track()
;;;45       : isReady(false)
;;;46       , numFrames(0)
;;;47       , currFrame(0)
;;;48       {
;;;49         
;;;50       }
;;;51       
000000  2100              MOVS     r1,#0
000002  7001              STRB     r1,[r0,#0]
000004  6081              STR      r1,[r0,#8]
000006  60c1              STR      r1,[r0,#0xc]
000008  4770              BX       lr
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9Animation6UnlockENS1_9TrackTypeE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9Animation6UnlockENS1_9TrackTypeE PROC ; Anki::Cozmo::Animation::Unlock(Anki::Cozmo::Animation::TrackType)
;;;447      
;;;448      void Animation::Unlock(TrackType whichTrack)
000000  4770              BX       lr
;;;449      {
;;;450    #   if ENABLE_LOCK_AND_UNLOCK
;;;451        switch(whichTrack)
;;;452        {
;;;453          case HEAD:
;;;454            HeadController::Enable();
;;;455            break;
;;;456            
;;;457          case LIFT:
;;;458            LiftController::Enable();
;;;459            break;
;;;460            
;;;461          case LIGHTS:
;;;462            EyeController::Enable();
;;;463            break;
;;;464            
;;;465          default:
;;;466            // Nothing to do?
;;;467            break;
;;;468        }
;;;469    #   endif
;;;470      } // Unlock()
;;;471    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9Animation6UpdateEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9Animation6UpdateEv PROC ; Anki::Cozmo::Animation::Update()
;;;159      
;;;160      void Animation::Update()
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;161      {
000004  b083              SUB      sp,sp,#0xc
000006  4605              MOV      r5,r0
;;;162        if(CheckTrackReadiness() == false) {
000008  f7fffffe          BL       _ZN4Anki5Cozmo9Animation19CheckTrackReadinessEv ; Anki::Cozmo::Animation::CheckTrackReadiness()
00000c  2800              CMP      r0,#0
;;;163          // Wait for all tracks to be ready
;;;164          //PRINT("Waiting for all tracks to be ready to start animation...\n");
;;;165          return;
;;;166        }
;;;167    
;;;168        bool trackPlaying[NUM_TRACKS];
;;;169        
;;;170        for(s32 iTrack=0; iTrack<NUM_TRACKS; ++iTrack)
;;;171        {
;;;172          // Get a reference to the current track, for convenience
;;;173          Animation::Track& track = _tracks[iTrack];
;;;174    
;;;175          if(track.numFrames == 0 || track.currFrame >= track.numFrames) {
;;;176            // Skip empty or already-finished tracks
;;;177            trackPlaying[iTrack] = false;
;;;178            
;;;179          } else {
;;;180            // TODO: "Lock" controller for this track
;;;181            
;;;182            trackPlaying[iTrack] = true;
;;;183            
;;;184            // Get a reference to the current frame of the current track, for convenience
;;;185            KeyFrame& currKeyFrame = _frames[track.startOffset + track.currFrame];
;;;186            
;;;187            // Has the current keyframe's time now passed?
;;;188            const u32 absFrameTime_ms = currKeyFrame.relTime_ms + _startTime_ms;
;;;189            if(HAL::GetTimeStamp() >= absFrameTime_ms)
;;;190            {
;;;191              const u8 nextTransitionIn = (track.currFrame+1 < track.numFrames ?
;;;192                                           _frames[track.startOffset + track.currFrame + 1].transitionIn : 0);
;;;193              
;;;194              // We are transitioning out of this keyframe and into the next
;;;195              // one in the list (if there is one).
;;;196              Unlock(static_cast<TrackType>(iTrack));
;;;197              currKeyFrame.TransitionOutOf(_startTime_ms, nextTransitionIn);
;;;198              Lock(static_cast<TrackType>(iTrack));
;;;199              
;;;200              ++track.currFrame;
;;;201              
;;;202              if(track.currFrame < track.numFrames) {
;;;203    #           if DEBUG_ANIMATIONS
;;;204                PRINT("Moving to keyframe %d of %d in track %d\n", track.currFrame+1, track.numFrames, iTrack);
;;;205    #           endif
;;;206                KeyFrame& nextKeyFrame = _frames[track.startOffset + track.currFrame];
;;;207                Unlock(static_cast<TrackType>(iTrack));
;;;208                nextKeyFrame.TransitionInto(_startTime_ms);
;;;209                Lock(static_cast<TrackType>(iTrack));
;;;210              } else {
;;;211    #           if DEBUG_ANIMATIONS
;;;212                PRINT("Track %d finished all %d of its frames\n", iTrack, track.numFrames);
;;;213    #           endif
;;;214                trackPlaying[iTrack] = false;
;;;215              }
;;;216              
;;;217            } // if GetTimeStamp() >= absFrameTime_ms
;;;218          } // if/else track.numFrames == 0
;;;219          
;;;220        } // for each track
;;;221        
;;;222        bool wasPlaying = _isPlaying;
;;;223        
;;;224        // isPlaying should be true after this loop if any of the tracks are still
;;;225        // playing. False otherwise.
;;;226        _isPlaying = false;
;;;227        for(s32 iTrack=0; iTrack<NUM_TRACKS; ++iTrack) {
;;;228          _isPlaying |= trackPlaying[iTrack];
;;;229        }
;;;230        
;;;231        if(wasPlaying && !_isPlaying) {
;;;232    #if   DEBUG_ANIMATIONS
;;;233          PRINT("No tracks in animation %d still playing. Stopping.\n", _ID);
;;;234    #     endif
;;;235          Stop();
;;;236        }
;;;237        
;;;238      } // Update
00000e  bf04              ITT      EQ
000010  b003              ADDEQ    sp,sp,#0xc
000012  e8bd8ff0          POPEQ    {r4-r11,pc}
000016  2600              MOVS     r6,#0                 ;170
000018  f04f0b01          MOV      r11,#1                ;182
00001c  46b2              MOV      r10,r6                ;182
00001e  46e9              MOV      r9,sp                 ;168
                  |L10.32|
000020  eb051006          ADD      r0,r5,r6,LSL #4       ;173
000024  f5007425          ADD      r4,r0,#0x294          ;173
000028  f8d0129c          LDR      r1,[r0,#0x29c]        ;175
00002c  2900              CMP      r1,#0                 ;175
00002e  bf1c              ITT      NE                    ;175
000030  68e0              LDRNE    r0,[r4,#0xc]          ;175
000032  4288              CMPNE    r0,r1                 ;175
000034  da36              BGE      |L10.164|
000036  f809b006          STRB     r11,[r9,r6]           ;182
00003a  6861              LDR      r1,[r4,#4]            ;185
00003c  4408              ADD      r0,r0,r1              ;185
00003e  eb000080          ADD      r0,r0,r0,LSL #2       ;185
000042  eb050080          ADD      r0,r5,r0,LSL #2       ;185
000046  f100070c          ADD      r7,r0,#0xc            ;185
00004a  89c0              LDRH     r0,[r0,#0xe]          ;188
00004c  6869              LDR      r1,[r5,#4]            ;188
00004e  eb000801          ADD      r8,r0,r1              ;188
000052  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
000056  4540              CMP      r0,r8                 ;189
000058  d326              BCC      |L10.168|
00005a  68e0              LDR      r0,[r4,#0xc]          ;191
00005c  68a2              LDR      r2,[r4,#8]            ;191
00005e  1c41              ADDS     r1,r0,#1              ;191
000060  4291              CMP      r1,r2                 ;191
000062  bfa8              IT       GE                    ;192
000064  2200              MOVGE    r2,#0                 ;192
000066  da07              BGE      |L10.120|
000068  6861              LDR      r1,[r4,#4]            ;192
00006a  4408              ADD      r0,r0,r1              ;192
00006c  eb000080          ADD      r0,r0,r0,LSL #2       ;192
000070  eb050080          ADD      r0,r5,r0,LSL #2       ;192
000074  f8902024          LDRB     r2,[r0,#0x24]         ;192
                  |L10.120|
000078  4638              MOV      r0,r7                 ;197
00007a  6869              LDR      r1,[r5,#4]            ;197
00007c  f7fffffe          BL       _ZNK4Anki5Cozmo8KeyFrame15TransitionOutOfEjh ; Anki::Cozmo::KeyFrame::TransitionOutOf(unsigned, unsigned char) const
000080  68e0              LDR      r0,[r4,#0xc]          ;200
000082  1c40              ADDS     r0,r0,#1              ;200
000084  60e0              STR      r0,[r4,#0xc]          ;202
000086  68a1              LDR      r1,[r4,#8]            ;202
000088  4288              CMP      r0,r1                 ;202
00008a  da0b              BGE      |L10.164|
00008c  6861              LDR      r1,[r4,#4]            ;206
00008e  2200              MOVS     r2,#0                 ;208
000090  4408              ADD      r0,r0,r1              ;206
000092  eb000080          ADD      r0,r0,r0,LSL #2       ;206
000096  eb050080          ADD      r0,r5,r0,LSL #2       ;206
00009a  300c              ADDS     r0,r0,#0xc            ;208
00009c  6869              LDR      r1,[r5,#4]            ;208
00009e  f7fffffe          BL       _ZNK4Anki5Cozmo8KeyFrame14TransitionIntoEjh ; Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
0000a2  e001              B        |L10.168|
                  |L10.164|
0000a4  f809a006          STRB     r10,[r9,r6]           ;214
                  |L10.168|
0000a8  1c76              ADDS     r6,r6,#1              ;214
0000aa  2e06              CMP      r6,#6                 ;170
0000ac  dbb8              BLT      |L10.32|
0000ae  7a2a              LDRB     r2,[r5,#8]            ;222
0000b0  f885a008          STRB     r10,[r5,#8]           ;226
0000b4  2000              MOVS     r0,#0                 ;227
                  |L10.182|
0000b6  7a29              LDRB     r1,[r5,#8]            ;228
0000b8  f8193000          LDRB     r3,[r9,r0]            ;228
0000bc  4319              ORRS     r1,r1,r3              ;228
0000be  bf18              IT       NE                    ;228
0000c0  2101              MOVNE    r1,#1                 ;228
0000c2  7229              STRB     r1,[r5,#8]            ;228
0000c4  1c40              ADDS     r0,r0,#1              ;228
0000c6  2806              CMP      r0,#6                 ;227
0000c8  dbf5              BLT      |L10.182|
0000ca  2a00              CMP      r2,#0                 ;231
0000cc  bf04              ITT      EQ
0000ce  b003              ADDEQ    sp,sp,#0xc
0000d0  e8bd8ff0          POPEQ    {r4-r11,pc}
0000d4  f0110fff          TST      r1,#0xff              ;231
0000d8  bf04              ITT      EQ                    ;235
0000da  4628              MOVEQ    r0,r5                 ;235
0000dc  f7fffffe          BLEQ     _ZN4Anki5Cozmo9Animation4StopEv ; Anki::Cozmo::Animation::Stop()
0000e0  b003              ADD      sp,sp,#0xc
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;239      
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9Animation8GetTrackENS0_8KeyFrame4TypeE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9Animation8GetTrackENS0_8KeyFrame4TypeE PROC ; Anki::Cozmo::Animation::GetTrack(Anki::Cozmo::KeyFrame::Type)
;;;278      
;;;279      Animation::TrackType Animation::GetTrack(const KeyFrame::Type kfType)
000000  b510              PUSH     {r4,lr}
;;;280      {
;;;281        switch(kfType)
000002  2817              CMP      r0,#0x17
000004  d219              BCS      |L11.58|
000006  e8dff000          TBB      [pc,r0]
00000a  0c0c              DCB      0x0c,0x0c
00000c  0c0c0e0e          DCB      0x0c,0x0c,0x0e,0x0e
000010  10101010          DCB      0x10,0x10,0x10,0x10
000014  10101414          DCB      0x10,0x10,0x14,0x14
000018  14121212          DCB      0x14,0x12,0x12,0x12
00001c  12120e0e          DCB      0x12,0x12,0x0e,0x0e
000020  1600              DCB      0x16,0x00
;;;282        {
;;;283          case KeyFrame::HEAD_ANGLE:
;;;284          case KeyFrame::HOLD_HEAD_ANGLE:
;;;285          case KeyFrame::START_HEAD_NOD:
;;;286          case KeyFrame::STOP_HEAD_NOD:
;;;287            return HEAD;
000022  2000              MOVS     r0,#0
;;;288            
;;;289          case KeyFrame::LIFT_HEIGHT:
;;;290          case KeyFrame::HOLD_LIFT_HEIGHT:
;;;291          case KeyFrame::START_LIFT_NOD:
;;;292          case KeyFrame::STOP_LIFT_NOD:
;;;293            return LIFT;
;;;294            
;;;295          case KeyFrame::DRIVE_LINE_SEGMENT:
;;;296          case KeyFrame::DRIVE_ARC:
;;;297          case KeyFrame::BACK_AND_FORTH:
;;;298          case KeyFrame::START_WIGGLE:
;;;299          case KeyFrame::POINT_TURN:
;;;300          case KeyFrame::HOLD_POSE:
;;;301          //case KeyFrame::STOP_WIGGLE:
;;;302            return POSE;
;;;303            
;;;304          case KeyFrame::BLINK_EYES:
;;;305          case KeyFrame::SET_EYE:
;;;306          case KeyFrame::FLASH_EYES:
;;;307          case KeyFrame::SPIN_EYES:
;;;308          case KeyFrame::STOP_EYES:
;;;309            return LIGHTS;
;;;310            
;;;311          case KeyFrame::PLAY_SOUND:
;;;312          case KeyFrame::WAIT_FOR_SOUND:
;;;313          case KeyFrame::STOP_SOUND:
;;;314            return SOUND;
;;;315            
;;;316          case KeyFrame::TRIGGER_ANIMATION:
;;;317            return SPECIAL;
;;;318            
;;;319          default:
;;;320            PRINT("Unknown track for KeyFrame type %d.\n", kfType);
;;;321            return NUM_TRACKS;
;;;322            
;;;323        } // switch(kfType)
;;;324        
;;;325      } // GetTrack()
000024  bd10              POP      {r4,pc}
000026  2001              MOVS     r0,#1                 ;293
000028  bd10              POP      {r4,pc}
00002a  2002              MOVS     r0,#2                 ;302
00002c  bd10              POP      {r4,pc}
00002e  2004              MOVS     r0,#4                 ;309
000030  bd10              POP      {r4,pc}
000032  2003              MOVS     r0,#3                 ;314
000034  bd10              POP      {r4,pc}
000036  2005              MOVS     r0,#5                 ;317
000038  bd10              POP      {r4,pc}
                  |L11.58|
00003a  4601              MOV      r1,r0                 ;320
00003c  a002              ADR      r0,|L11.72|
00003e  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
000042  2006              MOVS     r0,#6                 ;321
000044  bd10              POP      {r4,pc}
;;;326      
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
000048  556e6b6e          DCB      "Unknown track for KeyFrame type %d.\n",0
00004c  6f776e20
000050  74726163
000054  6b20666f
000058  72204b65
00005c  79467261
000060  6d652074
000064  79706520
000068  25642e0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i._ZN4Anki5Cozmo9Animation9IsDefinedEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9Animation9IsDefinedEv PROC ; Anki::Cozmo::Animation::IsDefined()
;;;255      
;;;256      bool Animation::IsDefined()
000000  f8d0028c          LDR      r0,[r0,#0x28c]
;;;257      {
;;;258        return _totalNumFrames > 0;
000004  2800              CMP      r0,#0
000006  bfcc              ITE      GT
000008  2001              MOVGT    r0,#1
00000a  2000              MOVLE    r0,#0
;;;259      }
00000c  4770              BX       lr
;;;260      
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9Animation9StopTrackENS1_9TrackTypeE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9Animation9StopTrackENS1_9TrackTypeE PROC ; Anki::Cozmo::Animation::StopTrack(Anki::Cozmo::Animation::TrackType)
;;;472      
;;;473      void Animation::StopTrack(TrackType whichTrack)
000000  b500              PUSH     {lr}
;;;474      {
;;;475        if(_tracks[whichTrack].numFrames > 0)
000002  eb001001          ADD      r0,r0,r1,LSL #4
000006  b085              SUB      sp,sp,#0x14           ;474
000008  f8d0029c          LDR      r0,[r0,#0x29c]
00000c  2800              CMP      r0,#0
;;;476        {
;;;477          Unlock(whichTrack);
;;;478          
;;;479          switch(whichTrack)
;;;480          {
;;;481            case HEAD:
;;;482              HeadController::Stop();
;;;483              break;
;;;484              
;;;485            case LIFT:
;;;486              LiftController::Stop();
;;;487              break;
;;;488              
;;;489            case LIGHTS:
;;;490              EyeController::StopAnimating();
;;;491              break;
;;;492              
;;;493            case POSE:
;;;494              SteeringController::ExecuteDirectDrive(0, 0);
;;;495              break;
;;;496              
;;;497            case SOUND:
;;;498              Messages::StopSoundOnBaseStation msg;
;;;499              HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::StopSoundOnBaseStation), &msg);
;;;500              break;
;;;501              
;;;502            case SPECIAL:
;;;503              // Nothing to do here
;;;504              break;
;;;505              
;;;506            default:
;;;507              AnkiError("Animation.StopTrack.UnknownTrack", "Asked to stop unknkown track %d.\n", whichTrack);
;;;508              break;
;;;509          } // switch(whichTrack)
;;;510        } // if track not empty
;;;511      } // StopTrack()
00000e  bfdc              ITT      LE
000010  b005              ADDLE    sp,sp,#0x14
000012  bd00              POPLE    {pc}
000014  2906              CMP      r1,#6                 ;479
000016  d222              BCS      |L13.94|
000018  e8dff001          TBB      [pc,r1]               ;479
00001c  03070f1b          DCB      0x03,0x07,0x0f,0x1b
000020  0b05              DCB      0x0b,0x05
000022  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController4StopEv ; Anki::Cozmo::HeadController::Stop()
000026  b005              ADD      sp,sp,#0x14
000028  bd00              POP      {pc}
00002a  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController4StopEv ; Anki::Cozmo::LiftController::Stop()
00002e  b005              ADD      sp,sp,#0x14
000030  bd00              POP      {pc}
000032  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController13StopAnimatingEv ; Anki::Cozmo::EyeController::StopAnimating()
000036  b005              ADD      sp,sp,#0x14
000038  bd00              POP      {pc}
00003a  ed9f0a10          VLDR     s0,|L13.124|
00003e  eef01a40          VMOV.F32 s3,s0                 ;494
000042  eeb01a40          VMOV.F32 s2,s0                 ;494
000046  eef00a40          VMOV.F32 s1,s0                 ;494
00004a  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
00004e  b005              ADD      sp,sp,#0x14
000050  bd00              POP      {pc}
000052  a903              ADD      r1,sp,#0xc            ;499
000054  204d              MOVS     r0,#0x4d              ;499
000056  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
00005a  b005              ADD      sp,sp,#0x14
00005c  bd00              POP      {pc}
                  |L13.94|
00005e  f24010fb          MOV      r0,#0x1fb             ;507
000062  4a07              LDR      r2,|L13.128|
000064  e9cd2000          STRD     r2,r0,[sp,#0]         ;507
000068  9102              STR      r1,[sp,#8]            ;507
00006a  a306              ADR      r3,|L13.132|
00006c  a20d              ADR      r2,|L13.164|
00006e  a116              ADR      r1,|L13.200|
000070  2005              MOVS     r0,#5                 ;507
000072  f7fffffe          BL       _Anki_Log
000076  b005              ADD      sp,sp,#0x14
000078  bd00              POP      {pc}
;;;512    
                          ENDP

00007a  0000              DCW      0x0000
                  |L13.124|
00007c  00000000          DCFS     0x00000000 ; 0
                  |L13.128|
                          DCD      ||.constdata||+0x50
                  |L13.132|
000084  73757065          DCB      "supervisor\\src\\animation.cpp",0
000088  72766973
00008c  6f725c73
000090  72635c61
000094  6e696d61
000098  74696f6e
00009c  2e637070
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L13.164|
0000a4  41736b65          DCB      "Asked to stop unknkown track %d.\n",0
0000a8  6420746f
0000ac  2073746f
0000b0  7020756e
0000b4  6b6e6b6f
0000b8  776e2074
0000bc  7261636b
0000c0  2025642e
0000c4  0a00    
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L13.200|
0000c8  416e696d          DCB      "Animation.StopTrack.UnknownTrack",0
0000cc  6174696f
0000d0  6e2e5374
0000d4  6f705472
0000d8  61636b2e
0000dc  556e6b6e
0000e0  6f776e54
0000e4  7261636b
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0

                          AREA ||i._ZN4Anki5Cozmo9AnimationC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9AnimationC2Ev                  ; Alternate entry point ; Anki::Cozmo::Animation::Animation__sub_object()
                  _ZN4Anki5Cozmo9AnimationC1Ev PROC ; Anki::Cozmo::Animation::Animation()
;;;33       
;;;34       Animation::Animation()
;;;35       : _ID(0)
;;;36       , _startTime_ms(0)
;;;37       , _isPlaying(false)
;;;38       , _allTracksReady(false)
;;;39       {
;;;40     
;;;41       }
;;;42       
000000  b510              PUSH     {r4,lr}
000002  2400              MOVS     r4,#0
000004  6004              STR      r4,[r0,#0]
000006  6044              STR      r4,[r0,#4]
000008  7204              STRB     r4,[r0,#8]
00000a  2306              MOVS     r3,#6
00000c  2210              MOVS     r2,#0x10
00000e  4905              LDR      r1,|L14.36|
000010  f5007025          ADD      r0,r0,#0x294
000014  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000018  f8804060          STRB     r4,[r0,#0x60]
00001c  f5a07025          SUB      r0,r0,#0x294
000020  bd10              POP      {r4,pc}
                          ENDP

000022  0000              DCW      0x0000
                  |L14.36|
                          DCD      _ZN4Anki5Cozmo9Animation5TrackC1Ev ; Anki::Cozmo::Animation::Track::Track()

                          AREA ||i.__sti___13_animation_cpp_38b7b398||, CODE, READONLY, ALIGN=2

                  __sti___13_animation_cpp_38b7b398 PROC
000000  4803              LDR      r0,|L15.16|
000002  ed9f0a02          VLDR     s0,|L15.12|
000006  ed800a00          VSTR     s0,[r0,#0]
00000a  4770              BX       lr
                          ENDP

                  |L15.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L15.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo9Animation5TrackC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation5TrackC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki5Cozmo9AnimationC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9AnimationC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki5Cozmo9Animation4LockENS1_9TrackTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation4LockENS1_9TrackTypeE||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki5Cozmo9Animation8GetTrackENS0_8KeyFrame4TypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation8GetTrackENS0_8KeyFrame4TypeE||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki5Cozmo9Animation13SortKeyFramesEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation13SortKeyFramesEv||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN4Anki5Cozmo9Animation4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation4InitEv||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki5Cozmo9Animation6UnlockENS1_9TrackTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation6UnlockENS1_9TrackTypeE||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki5Cozmo9Animation9StopTrackENS1_9TrackTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation9StopTrackENS1_9TrackTypeE||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki5Cozmo9Animation4StopEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation4StopEv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki5Cozmo9Animation19CheckTrackReadinessEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation19CheckTrackReadinessEv||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN4Anki5Cozmo9Animation6UpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation6UpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN4Anki5Cozmo9Animation9IsDefinedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation9IsDefinedEv||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN4Anki5Cozmo9Animation5ClearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation5ClearEv||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN4Anki5Cozmo9Animation11AddKeyFrameERKNS0_8KeyFrameE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9Animation11AddKeyFrameERKNS0_8KeyFrameE||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i.__sti___13_animation_cpp_38b7b398||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___13_animation_cpp_38b7b398||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a43          DCB      0x69,0x3a,0x3a,0x43
000014  6f7a6d6f          DCB      0x6f,0x7a,0x6d,0x6f
000018  3a3a416e          DCB      0x3a,0x3a,0x41,0x6e
00001c  696d6174          DCB      0x69,0x6d,0x61,0x74
000020  696f6e3a          DCB      0x69,0x6f,0x6e,0x3a
000024  3a416464          DCB      0x3a,0x41,0x64,0x64
000028  4b657946          DCB      0x4b,0x65,0x79,0x46
00002c  72616d65          DCB      0x72,0x61,0x6d,0x65
000030  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000034  73742041          DCB      0x73,0x74,0x20,0x41
000038  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00003c  3a436f7a          DCB      0x3a,0x43,0x6f,0x7a
000040  6d6f3a3a          DCB      0x6d,0x6f,0x3a,0x3a
000044  4b657946          DCB      0x4b,0x65,0x79,0x46
000048  72616d65          DCB      0x72,0x61,0x6d,0x65
00004c  20262900          DCB      0x20,0x26,0x29,0x00
                  |symbol_number.52|
000050  766f6964          DCB      0x76,0x6f,0x69,0x64
000054  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000058  693a3a43          DCB      0x69,0x3a,0x3a,0x43
00005c  6f7a6d6f          DCB      0x6f,0x7a,0x6d,0x6f
000060  3a3a416e          DCB      0x3a,0x3a,0x41,0x6e
000064  696d6174          DCB      0x69,0x6d,0x61,0x74
000068  696f6e3a          DCB      0x69,0x6f,0x6e,0x3a
00006c  3a53746f          DCB      0x3a,0x53,0x74,0x6f
000070  70547261          DCB      0x70,0x54,0x72,0x61
000074  636b2841          DCB      0x63,0x6b,0x28,0x41
000078  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00007c  3a436f7a          DCB      0x3a,0x43,0x6f,0x7a
000080  6d6f3a3a          DCB      0x6d,0x6f,0x3a,0x3a
000084  416e696d          DCB      0x41,0x6e,0x69,0x6d
000088  6174696f          DCB      0x61,0x74,0x69,0x6f
00008c  6e3a3a54          DCB      0x6e,0x3a,0x3a,0x54
000090  7261636b          DCB      0x72,0x61,0x63,0x6b
000094  54797065          DCB      0x54,0x79,0x70,0x65
000098  2900              DCB      0x29,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___13_animation_cpp_38b7b398
