; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\array2d.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\array2d.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\array2d.crf ..\coretech\common\robot\src\array2d.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded27LoadBinaryArray_UnknownTypeEPKcPNS0_11MemoryStackES4_PviRtRbS7_S7_S7_S7_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27LoadBinaryArray_UnknownTypeEPKcPNS0_11MemoryStackES4_PviRtRbS7_S7_S7_S7_ PROC ; Anki::Embedded::LoadBinaryArray_UnknownType(const char*, Anki::Embedded::MemoryStack*, Anki::Embedded::MemoryStack*, void*, int, unsigned short&, bool&, bool&, bool&, bool&, bool&)
;;;148    
;;;149        Array<u8> LoadBinaryArray_UnknownType(
000000  b510              PUSH     {r4,lr}
;;;150          const char * filename,
;;;151          MemoryStack *scratch,
;;;152          MemoryStack *memory,
;;;153          void * allocatedBuffer,
;;;154          const s32 allocatedBufferLength,
;;;155          u16  &basicType_sizeOfType,
;;;156          bool &basicType_isBasicType,
;;;157          bool &basicType_isInteger,
;;;158          bool &basicType_isSigned,
;;;159          bool &basicType_isFloat,
;;;160          bool &basicType_isString
;;;161          )
;;;162        {
000002  b082              SUB      sp,sp,#8
;;;163    #if defined(__EDG__)
;;;164          AnkiError("Array<Type>::LoadBinaryArray_Generic", "Cannot load files on embedded");
000004  22a4              MOVS     r2,#0xa4
000006  490c              LDR      r1,|L1.56|
000008  e9cd1200          STRD     r1,r2,[sp,#0]
00000c  4604              MOV      r4,r0                 ;162
00000e  a30b              ADR      r3,|L1.60|
000010  a215              ADR      r2,|L1.104|
000012  a11d              ADR      r1,|L1.136|
000014  2005              MOVS     r0,#5
000016  f7fffffe          BL       _Anki_Log
00001a  f104000c          ADD      r0,r4,#0xc
00001e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000022  f04f31ff          MOV      r1,#0xffffffff
000026  f8401d0c          STR      r1,[r0,#-0xc]!
00002a  6041              STR      r1,[r0,#4]
00002c  6081              STR      r1,[r0,#8]
00002e  2100              MOVS     r1,#0
000030  6101              STR      r1,[r0,#0x10]
;;;165          return Array<u8>();
;;;166    #else     
;;;167          Array<u8> newArray = Array<u8>();
;;;168    
;;;169          MemoryStack scratch_local;
;;;170    
;;;171          bool useMalloc;
;;;172          if(!scratch) {
;;;173    #if ANKICORETECH_EMBEDDED_USE_MALLOC
;;;174            AnkiAssert(!memory && allocatedBuffer && allocatedBufferLength > 0);
;;;175            useMalloc = true;
;;;176    #else
;;;177            AnkiError("Array<Type>::LoadBinaryArray_Generic", "malloc is not enabled");
;;;178            return newArray;
;;;179    #endif
;;;180          } else {
;;;181            AnkiAssert(memory && !allocatedBuffer && allocatedBufferLength < 0);
;;;182            useMalloc = false;
;;;183    
;;;184            AnkiConditionalErrorAndReturnValue(NotAliased(*scratch, *memory) && AreValid(*scratch, *memory),
;;;185              newArray, "Array<Type>::LoadBinaryArray_Generic", "scratch and memory must be different");
;;;186    
;;;187            scratch_local = MemoryStack(*scratch);
;;;188          }
;;;189    
;;;190          AnkiConditionalErrorAndReturnValue(filename,
;;;191            newArray, "Array<Type>::LoadBinaryArray_Generic", "Invalid inputs");
;;;192    
;;;193          FILE *fp = fopen(filename, "rb");
;;;194    
;;;195          AnkiConditionalErrorAndReturnValue(fp,
;;;196            newArray, "Array<Type>::LoadBinaryArray_Generic", "Could not open file %s", filename);
;;;197    
;;;198          fseek(fp, 0, SEEK_END);
;;;199          s32 tmpBufferLength = static_cast<s32>( ftell(fp) - ARRAY_FILE_HEADER_LENGTH );
;;;200          fseek(fp, 0, SEEK_SET);
;;;201    
;;;202          void * tmpBuffer = NULL;
;;;203    
;;;204    #if ANKICORETECH_EMBEDDED_USE_MALLOC
;;;205          void * tmpBufferStart;
;;;206    #endif
;;;207    
;;;208          if(useMalloc) {
;;;209    #if ANKICORETECH_EMBEDDED_USE_MALLOC
;;;210            tmpBufferStart = calloc(tmpBufferLength + 2*MEMORY_ALIGNMENT + 64, 1);
;;;211            tmpBuffer = tmpBufferStart;
;;;212    #else
;;;213            AnkiAssert(false);
;;;214    #endif
;;;215          } else {
;;;216            tmpBuffer = scratch_local.Allocate(tmpBufferLength + MEMORY_ALIGNMENT + 64);
;;;217          }
;;;218    
;;;219          // Align tmpBuffer to MEMORY_ALIGNMENT - MemoryStack::HEADER_LENGTH
;;;220          tmpBuffer = reinterpret_cast<void*>( RoundUp<size_t>(reinterpret_cast<size_t>(tmpBuffer) + MEMORY_ALIGNMENT - MemoryStack::HEADER_LENGTH, MEMORY_ALIGNMENT) - MemoryStack::HEADER_LENGTH);
;;;221    
;;;222    #if ANKICORETECH_EMBEDDED_USE_ZLIB
;;;223          void * uncompressedBufferStart = NULL;
;;;224    #endif
;;;225    
;;;226          // First, read the text header
;;;227          const size_t bytesRead1 = fread(tmpBuffer, 1, ARRAY_FILE_HEADER_LENGTH, fp);
;;;228    
;;;229          AnkiConditionalErrorAndReturnValue(bytesRead1 == ARRAY_FILE_HEADER_LENGTH && strncmp(reinterpret_cast<const char*>(tmpBuffer), ARRAY_FILE_HEADER, ARRAY_FILE_HEADER_VALID_LENGTH) == 0,
;;;230            newArray, "Array<Type>::LoadBinaryArray_Generic", "File is not an Anki Embedded Array");
;;;231    
;;;232          bool isCompressed = false;
;;;233          if(reinterpret_cast<const char*>(tmpBuffer)[ARRAY_FILE_HEADER_VALID_LENGTH+1] == 'z') {
;;;234    #if ANKICORETECH_EMBEDDED_USE_ZLIB
;;;235            isCompressed = true;
;;;236    #else
;;;237            AnkiError("Array<Type>::LoadBinaryArray_Generic", "zlib is not enabled");
;;;238            return newArray;
;;;239    #endif
;;;240          }
;;;241    
;;;242          // Next, read the actual payload
;;;243          const size_t bytesRead2 = fread(tmpBuffer, 1, tmpBufferLength, fp);
;;;244    
;;;245          fclose(fp);
;;;246    
;;;247          AnkiConditionalErrorAndReturnValue(bytesRead2 > 0,
;;;248            newArray, "Array<Type>::LoadBinaryArray_Generic", "File is not an Anki Embedded Array");
;;;249    
;;;250          // Decompress the payload, if it is compressed
;;;251          if(isCompressed) {
;;;252    #if ANKICORETECH_EMBEDDED_USE_ZLIB
;;;253            uLongf originalLength = static_cast<uLongf>( reinterpret_cast<s32*>(tmpBuffer)[0] );
;;;254            const s32 compressedLength = reinterpret_cast<s32*>(tmpBuffer)[1];
;;;255    
;;;256            uncompressedBufferStart = calloc(originalLength + MEMORY_ALIGNMENT + 64, 1);
;;;257            void * uncompressedBuffer = reinterpret_cast<void*>( RoundUp<size_t>(reinterpret_cast<size_t>(uncompressedBufferStart) + MEMORY_ALIGNMENT - MemoryStack::HEADER_LENGTH, MEMORY_ALIGNMENT) - MemoryStack::HEADER_LENGTH);
;;;258    
;;;259            uncompress(reinterpret_cast<Bytef*>(uncompressedBuffer), &originalLength, reinterpret_cast<Bytef*>(tmpBuffer) + 2*sizeof(s32), compressedLength);
;;;260    
;;;261            tmpBuffer = uncompressedBuffer;
;;;262            tmpBufferLength = static_cast<s32>(originalLength);
;;;263    #endif
;;;264          }
;;;265    
;;;266          SerializedBuffer serializedBuffer(tmpBuffer, tmpBufferLength, Anki::Embedded::Flags::Buffer(false, true, true));
;;;267    
;;;268          SerializedBufferReconstructingIterator iterator(serializedBuffer);
;;;269    
;;;270          const char * typeName = NULL;
;;;271          const char * objectName = NULL;
;;;272          s32 dataLength;
;;;273          bool isReportedSegmentLengthCorrect;
;;;274          void * nextItem = iterator.GetNext(&typeName, &objectName, dataLength, isReportedSegmentLengthCorrect);
;;;275    
;;;276          if(!nextItem && strcmp(typeName, "Array") != 0) {
;;;277    #if ANKICORETECH_EMBEDDED_USE_MALLOC
;;;278            if(useMalloc) {
;;;279              free(tmpBufferStart);
;;;280            }
;;;281    #endif
;;;282    
;;;283    #if ANKICORETECH_EMBEDDED_USE_ZLIB
;;;284            if(isCompressed) {
;;;285              free(uncompressedBufferStart);
;;;286            }
;;;287    #endif
;;;288    
;;;289            AnkiError("Array<Type>::LoadBinaryArray_Generic", "Could not parse data");
;;;290            return newArray;
;;;291          }
;;;292    
;;;293          char arrayName[128];
;;;294    
;;;295          {
;;;296            char localTypeName[128];
;;;297            char localObjectName[128];
;;;298            void * nextItemTmp = nextItem;
;;;299            s32 dataLengthTmp = dataLength;
;;;300            SerializedBuffer::DeserializeDescriptionStrings(localTypeName, localObjectName, &nextItemTmp, dataLengthTmp);
;;;301    
;;;302            s32 height;
;;;303            s32 width;
;;;304            s32 stride;
;;;305            Flags::Buffer flags;
;;;306    
;;;307            s32 basicType_numElements;
;;;308            SerializedBuffer::EncodedArray::Deserialize(false, height, width, stride, flags, basicType_sizeOfType, basicType_isBasicType, basicType_isInteger, basicType_isSigned, basicType_isFloat, basicType_isString, basicType_numElements, &nextItemTmp, dataLengthTmp);
;;;309          }
;;;310    
;;;311          if(!(basicType_isBasicType || basicType_isString)) {
;;;312    #if ANKICORETECH_EMBEDDED_USE_MALLOC
;;;313            if(useMalloc) {
;;;314              free(tmpBufferStart);
;;;315            }
;;;316    #endif
;;;317    
;;;318    #if ANKICORETECH_EMBEDDED_USE_ZLIB
;;;319            if(isCompressed) {
;;;320              free(uncompressedBufferStart);
;;;321            }
;;;322    #endif
;;;323    
;;;324            AnkiError("Load", "can only load a basic type or string");
;;;325            return newArray;
;;;326          }
;;;327    
;;;328          MemoryStack allocater_data;
;;;329          MemoryStack *allocater = &allocater_data;
;;;330          if(useMalloc) {
;;;331    #if ANKICORETECH_EMBEDDED_USE_MALLOC
;;;332            *allocater = MemoryStack(allocatedBuffer, allocatedBufferLength);
;;;333    #endif
;;;334          } else {
;;;335            allocater = memory;
;;;336          }
;;;337    
;;;338          if(basicType_isString) {
;;;339            Array<const char *> array = SerializedBuffer::DeserializeRawArray<const char *>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;340            newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;341          } else { // if(basicType_isString)
;;;342            if(basicType_isFloat) {
;;;343              if(basicType_sizeOfType == 4) {
;;;344                Array<f32> array = SerializedBuffer::DeserializeRawArray<f32>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;345                newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;346              } else if(basicType_sizeOfType == 8) {
;;;347                Array<f64> array = SerializedBuffer::DeserializeRawArray<f64>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;348                newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;349              }
;;;350            } else { // if(basicType_isFloat)
;;;351              if(basicType_isSigned) {
;;;352                if(basicType_sizeOfType == 1) {
;;;353                  Array<s8> array = SerializedBuffer::DeserializeRawArray<s8>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;354                  newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;355                } else if(basicType_sizeOfType == 2) {
;;;356                  Array<s16> array = SerializedBuffer::DeserializeRawArray<s16>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;357                  newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;358                } else if(basicType_sizeOfType == 4) {
;;;359                  Array<s32> array = SerializedBuffer::DeserializeRawArray<s32>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;360                  newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;361                } else if(basicType_sizeOfType == 8) {
;;;362                  Array<s64> array = SerializedBuffer::DeserializeRawArray<s64>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;363                  newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;364                }
;;;365              } else { // if(basicType_isSigned)
;;;366                if(basicType_sizeOfType == 1) {
;;;367                  Array<u8> array = SerializedBuffer::DeserializeRawArray<u8>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;368                  newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;369                } else if(basicType_sizeOfType == 2) {
;;;370                  Array<u16> array = SerializedBuffer::DeserializeRawArray<u16>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;371                  newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;372                } else if(basicType_sizeOfType == 4) {
;;;373                  Array<u32> array = SerializedBuffer::DeserializeRawArray<u32>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;374                  newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;375                } else if(basicType_sizeOfType == 8) {
;;;376                  Array<u64> array = SerializedBuffer::DeserializeRawArray<u64>(&arrayName[0], &nextItem, dataLength, *allocater);
;;;377                  newArray = *reinterpret_cast<Array<u8>*>(&array);
;;;378                }
;;;379              } // if(basicType_isSigned) ... else
;;;380            } // if(basicType_isFloat) ... else
;;;381          } // if(basicType_isString) ... else
;;;382    
;;;383    #if ANKICORETECH_EMBEDDED_USE_MALLOC
;;;384          if(useMalloc) {
;;;385            free(tmpBufferStart);
;;;386          }
;;;387    #endif
;;;388    
;;;389    #if ANKICORETECH_EMBEDDED_USE_ZLIB
;;;390          if(isCompressed) {
;;;391            free(uncompressedBufferStart);
;;;392          }
;;;393    #endif
;;;394    
;;;395          return newArray;
;;;396    #endif // #if defined(__EDG__) ... #else
;;;397        } // LoadBinaryArray_UnknownType()
000032  b002              ADD      sp,sp,#8
000034  bd10              POP      {r4,pc}
;;;398      } // namespace Embedded
                          ENDP

000036  0000              DCW      0x0000
                  |L1.56|
                          DCD      ||.constdata||+0xf9
                  |L1.60|
00003c  2e2e5c63          DCB      "..\\coretech\\common\\robot\\src\\array2d.cpp",0
000040  6f726574
000044  6563685c
000048  636f6d6d
00004c  6f6e5c72
000050  6f626f74
000054  5c737263
000058  5c617272
00005c  61793264
000060  2e637070
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L1.104|
000068  43616e6e          DCB      "Cannot load files on embedded",0
00006c  6f74206c
000070  6f616420
000074  66696c65
000078  73206f6e
00007c  20656d62
000080  65646465
000084  6400    
000086  00                DCB      0
000087  00                DCB      0
                  |L1.136|
000088  41727261          DCB      "Array<Type>::LoadBinaryArray_Generic",0
00008c  793c5479
000090  70653e3a
000094  3a4c6f61
000098  6442696e
00009c  61727941
0000a0  72726179
0000a4  5f47656e
0000a8  65726963
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded5ArrayIhE7SetCastIiEEiPKT_i||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIhE7SetCastIiEEiPKT_i PROC ; Anki::Embedded::Array<unsigned char>::SetCast<int>(const T1*, int)
;;;94     
;;;95         template<> template<> s32 Array<u8>::SetCast(const s32 * const values, const s32 numValues)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;96         {
000004  4604              MOV      r4,r0
000006  6900              LDR      r0,[r0,#0x10]
000008  b082              SUB      sp,sp,#8
00000a  4690              MOV      r8,r2
00000c  460f              MOV      r7,r1
00000e  b150              CBZ      r0,|L2.38|
000010  6820              LDR      r0,[r4,#0]
000012  2800              CMP      r0,#0
000014  bfa4              ITT      GE
000016  6861              LDRGE    r1,[r4,#4]
000018  2900              CMPGE    r1,#0
00001a  db04              BLT      |L2.38|
;;;97           AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;98             0, "Array<Type>::SetCast", "Array<Type> is not valid");
;;;99     
;;;100          s32 numValuesSet = 0;
00001c  2600              MOVS     r6,#0
;;;101    
;;;102          for(s32 y=0; y<size[0]; y++) {
00001e  4635              MOV      r5,r6
000020  2800              CMP      r0,#0
000022  dd46              BLE      |L2.178|
000024  e00d              B        |L2.66|
                  |L2.38|
000026  2161              MOVS     r1,#0x61              ;97
000028  4824              LDR      r0,|L2.188|
00002a  e9cd0100          STRD     r0,r1,[sp,#0]         ;97
00002e  a324              ADR      r3,|L2.192|
000030  a22e              ADR      r2,|L2.236|
000032  a135              ADR      r1,|L2.264|
000034  2005              MOVS     r0,#5                 ;97
000036  f7fffffe          BL       _Anki_Log
;;;103            u8 * restrict pThisData = Pointer(y, 0);
;;;104    
;;;105            const s32 numValuesThisRow = MAX(0, MIN(numValues - y*size[1], size[1]));
;;;106    
;;;107            if(numValuesThisRow > 0) {
;;;108              for(s32 x=0; x<numValuesThisRow; x++) {
;;;109                pThisData[x] = saturate_cast<u8>( (values+y*size[1])[x] );
;;;110              }
;;;111              numValuesSet += numValuesThisRow;
;;;112            }
;;;113    
;;;114            if(numValuesThisRow < size[1]) {
;;;115              memset(pThisData+numValuesThisRow*sizeof(u8), 0, (size[1]-numValuesThisRow)*sizeof(u8));
;;;116            }
;;;117          }
;;;118    
;;;119          return numValuesSet;
;;;120        }
00003a  b002              ADD      sp,sp,#8
00003c  2000              MOVS     r0,#0                 ;97
00003e  e8bd81f0          POP      {r4-r8,pc}
                  |L2.66|
000042  68a1              LDR      r1,[r4,#8]
000044  6920              LDR      r0,[r4,#0x10]
000046  fb050201          MLA      r2,r5,r1,r0
00004a  6860              LDR      r0,[r4,#4]            ;105
00004c  fb058110          MLS      r1,r5,r0,r8           ;105
000050  4281              CMP      r1,r0                 ;105
000052  bfb4              ITE      LT                    ;105
000054  460b              MOVLT    r3,r1                 ;105
000056  4603              MOVGE    r3,r0                 ;105
000058  2b00              CMP      r3,#0                 ;105
00005a  bfb8              IT       LT                    ;105
00005c  2000              MOVLT    r0,#0                 ;105
00005e  db02              BLT      |L2.102|
000060  4281              CMP      r1,r0                 ;105
000062  bfb8              IT       LT                    ;105
000064  4608              MOVLT    r0,r1                 ;105
                  |L2.102|
000066  2800              CMP      r0,#0                 ;107
000068  bfc8              IT       GT                    ;108
00006a  2300              MOVGT    r3,#0                 ;108
00006c  dd16              BLE      |L2.156|
                  |L2.110|
00006e  6861              LDR      r1,[r4,#4]            ;109
000070  4369              MULS     r1,r5,r1              ;109
000072  eb070181          ADD      r1,r7,r1,LSL #2       ;109
000076  f851c023          LDR      r12,[r1,r3,LSL #2]    ;109
00007a  f1bc0f00          CMP      r12,#0                ;109
00007e  bfb8              IT       LT                    ;109
000080  f04f0c00          MOVLT    r12,#0                ;109
000084  db04              BLT      |L2.144|
000086  f1bc0fff          CMP      r12,#0xff             ;109
00008a  bfc8              IT       GT                    ;109
00008c  f04f0cff          MOVGT    r12,#0xff             ;109
                  |L2.144|
000090  f802c003          STRB     r12,[r2,r3]           ;109
000094  1c5b              ADDS     r3,r3,#1              ;109
000096  4283              CMP      r3,r0                 ;108
000098  dbe9              BLT      |L2.110|
00009a  4406              ADD      r6,r6,r0              ;111
                  |L2.156|
00009c  6861              LDR      r1,[r4,#4]            ;114
00009e  4288              CMP      r0,r1                 ;114
0000a0  da03              BGE      |L2.170|
0000a2  1a09              SUBS     r1,r1,r0              ;115
0000a4  4410              ADD      r0,r0,r2              ;115
0000a6  f7fffffe          BL       __aeabi_memclr
                  |L2.170|
0000aa  6820              LDR      r0,[r4,#0]            ;102
0000ac  1c6d              ADDS     r5,r5,#1              ;102
0000ae  42a8              CMP      r0,r5                 ;102
0000b0  dcc7              BGT      |L2.66|
                  |L2.178|
0000b2  b002              ADD      sp,sp,#8
0000b4  4630              MOV      r0,r6                 ;119
0000b6  e8bd81f0          POP      {r4-r8,pc}
;;;121    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L2.188|
                          DCD      ||.constdata||
                  |L2.192|
0000c0  2e2e5c63          DCB      "..\\coretech\\common\\robot\\src\\array2d.cpp",0
0000c4  6f726574
0000c8  6563685c
0000cc  636f6d6d
0000d0  6f6e5c72
0000d4  6f626f74
0000d8  5c737263
0000dc  5c617272
0000e0  61793264
0000e4  2e637070
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L2.236|
0000ec  41727261          DCB      "Array<Type> is not valid",0
0000f0  793c5479
0000f4  70653e20
0000f8  6973206e
0000fc  6f742076
000100  616c6964
000104  00      
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0
                  |L2.264|
000108  41727261          DCB      "Array<Type>::SetCast",0
00010c  793c5479
000110  70653e3a
000114  3a536574
000118  43617374
00011c  00      
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded5ArrayIsE7SetCastIiEEiPKT_i||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIsE7SetCastIiEEiPKT_i PROC ; Anki::Embedded::Array<short>::SetCast<int>(const T1*, int)
;;;121    
;;;122        template<> template<> s32 Array<s16>::SetCast(const s32 * const values, const s32 numValues)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;123        {
000004  4604              MOV      r4,r0
000006  6900              LDR      r0,[r0,#0x10]
000008  b083              SUB      sp,sp,#0xc
00000a  4690              MOV      r8,r2
00000c  460f              MOV      r7,r1
00000e  2800              CMP      r0,#0
000010  d048              BEQ      |L3.164|
000012  6820              LDR      r0,[r4,#0]
000014  2800              CMP      r0,#0
000016  bfa4              ITT      GE
000018  6861              LDRGE    r1,[r4,#4]
00001a  2900              CMPGE    r1,#0
00001c  db42              BLT      |L3.164|
;;;124          AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;125            0, "Array<Type>::SetCast", "Array<Type> is not valid");
;;;126    
;;;127          s32 numValuesSet = 0;
00001e  2600              MOVS     r6,#0
;;;128    
;;;129          for(s32 y=0; y<size[0]; y++) {
000020  4635              MOV      r5,r6
000022  2800              CMP      r0,#0
000024  bfc8              IT       GT
000026  f8df9098          LDRGT    r9,|L3.192|
00002a  dd37              BLE      |L3.156|
                  |L3.44|
00002c  68a1              LDR      r1,[r4,#8]
00002e  6920              LDR      r0,[r4,#0x10]
000030  fb050201          MLA      r2,r5,r1,r0
;;;130            s16 * restrict pThisData = Pointer(y, 0);
;;;131    
;;;132            const s32 numValuesThisRow = MAX(0, MIN(numValues - y*size[1], size[1]));
000034  6860              LDR      r0,[r4,#4]
000036  fb058110          MLS      r1,r5,r0,r8
00003a  4281              CMP      r1,r0
00003c  bfb4              ITE      LT
00003e  460b              MOVLT    r3,r1
000040  4603              MOVGE    r3,r0
000042  2b00              CMP      r3,#0
000044  bfb8              IT       LT
000046  2000              MOVLT    r0,#0
000048  db02              BLT      |L3.80|
00004a  4281              CMP      r1,r0
00004c  bfb8              IT       LT
00004e  4608              MOVLT    r0,r1
                  |L3.80|
;;;133    
;;;134            if(numValuesThisRow > 0) {
000050  2800              CMP      r0,#0
;;;135              for(s32 x=0; x<numValuesThisRow; x++) {
000052  bfc8              IT       GT
000054  2300              MOVGT    r3,#0
000056  dd15              BLE      |L3.132|
                  |L3.88|
;;;136                pThisData[x] = saturate_cast<s16>( (values+y*size[1])[x] );
000058  6861              LDR      r1,[r4,#4]
00005a  4369              MULS     r1,r5,r1
00005c  eb070181          ADD      r1,r7,r1,LSL #2
000060  f8511023          LDR      r1,[r1,r3,LSL #2]
000064  f5114f00          CMN      r1,#0x8000
000068  bfb8              IT       LT
00006a  4649              MOVLT    r1,r9
00006c  db04              BLT      |L3.120|
00006e  f5b14f00          CMP      r1,#0x8000
000072  bfa8              IT       GE
000074  f64771ff          MOVGE    r1,#0x7fff
                  |L3.120|
000078  f8221013          STRH     r1,[r2,r3,LSL #1]
00007c  1c5b              ADDS     r3,r3,#1
00007e  4283              CMP      r3,r0                 ;135
000080  dbea              BLT      |L3.88|
;;;137              }
;;;138              numValuesSet += numValuesThisRow;
000082  4406              ADD      r6,r6,r0
                  |L3.132|
;;;139            }
;;;140    
;;;141            if(numValuesThisRow < size[1]) {
000084  6861              LDR      r1,[r4,#4]
000086  4288              CMP      r0,r1
000088  da04              BGE      |L3.148|
;;;142              memset(pThisData+numValuesThisRow*sizeof(u8), 0, (size[1]-numValuesThisRow)*sizeof(u8));
00008a  1a09              SUBS     r1,r1,r0
00008c  eb020040          ADD      r0,r2,r0,LSL #1
000090  f7fffffe          BL       __aeabi_memclr
                  |L3.148|
000094  6820              LDR      r0,[r4,#0]            ;129
000096  1c6d              ADDS     r5,r5,#1              ;129
000098  42a8              CMP      r0,r5                 ;129
00009a  dcc7              BGT      |L3.44|
                  |L3.156|
;;;143            }
;;;144          }
;;;145    
;;;146          return numValuesSet;
;;;147        }
00009c  b003              ADD      sp,sp,#0xc
00009e  4630              MOV      r0,r6                 ;146
0000a0  e8bd83f0          POP      {r4-r9,pc}
                  |L3.164|
0000a4  217c              MOVS     r1,#0x7c              ;124
0000a6  4807              LDR      r0,|L3.196|
0000a8  e9cd0100          STRD     r0,r1,[sp,#0]         ;124
0000ac  a306              ADR      r3,|L3.200|
0000ae  a211              ADR      r2,|L3.244|
0000b0  a117              ADR      r1,|L3.272|
0000b2  2005              MOVS     r0,#5                 ;124
0000b4  f7fffffe          BL       _Anki_Log
0000b8  b003              ADD      sp,sp,#0xc
0000ba  2000              MOVS     r0,#0                 ;124
0000bc  e8bd83f0          POP      {r4-r9,pc}
;;;148    
                          ENDP

                  |L3.192|
                          DCD      0xffff8000
                  |L3.196|
                          DCD      ||.constdata||+0x7d
                  |L3.200|
0000c8  2e2e5c63          DCB      "..\\coretech\\common\\robot\\src\\array2d.cpp",0
0000cc  6f726574
0000d0  6563685c
0000d4  636f6d6d
0000d8  6f6e5c72
0000dc  6f626f74
0000e0  5c737263
0000e4  5c617272
0000e8  61793264
0000ec  2e637070
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L3.244|
0000f4  41727261          DCB      "Array<Type> is not valid",0
0000f8  793c5479
0000fc  70653e20
000100  6973206e
000104  6f742076
000108  616c6964
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
                  |L3.272|
000110  41727261          DCB      "Array<Type>::SetCast",0
000114  793c5479
000118  70653e3a
00011c  3a536574
000120  43617374
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded5ArrayIPKcE5PrintES3_iiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIPKcE5PrintES3_iiii PROC ; Anki::Embedded::Array<const char*>::Print(const char*, int, int, int, int) const
;;;79     
;;;80         template<> Result Array<const char *>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;81         {
000004  4606              MOV      r6,r0
000006  b082              SUB      sp,sp,#8
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00a          LDRD     r10,r0,[sp,#0x28]
000010  f1bc0f00          CMP      r12,#0
000014  d03b              BEQ      |L4.142|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db33              BLT      |L4.142|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  481b              LDR      r0,|L4.184|
00004c  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000050  454d              CMP      r5,r9
000052  da15              BGE      |L4.128|
                  |L4.84|
000054  68b1              LDR      r1,[r6,#8]
000056  6930              LDR      r0,[r6,#0x10]
000058  4654              MOV      r4,r10
00005a  fb050801          MLA      r8,r5,r1,r0
00005e  45ba              CMP      r10,r7
000060  da08              BGE      |L4.116|
                  |L4.98|
000062  f8581024          LDR      r1,[r8,r4,LSL #2]
000066  b311              CBZ      r1,|L4.174|
000068  4814              LDR      r0,|L4.188|
00006a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
                  |L4.110|
00006e  1c64              ADDS     r4,r4,#1
000070  42bc              CMP      r4,r7
000072  dbf6              BLT      |L4.98|
                  |L4.116|
000074  4812              LDR      r0,|L4.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c6d              ADDS     r5,r5,#1
00007c  454d              CMP      r5,r9
00007e  dbe9              BLT      |L4.84|
                  |L4.128|
000080  480f              LDR      r0,|L4.192|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;82           return PrintString(variableName, 1, minY, maxY, minX, maxX);
;;;83         }
000086  b002              ADD      sp,sp,#8
000088  2000              MOVS     r0,#0
00008a  e8bd87f0          POP      {r4-r10,pc}
                  |L4.142|
00008e  f2403172          MOV      r1,#0x372
000092  480c              LDR      r0,|L4.196|
000094  e9cd0100          STRD     r0,r1,[sp,#0]
000098  4b0b              LDR      r3,|L4.200|
00009a  4a0c              LDR      r2,|L4.204|
00009c  490c              LDR      r1,|L4.208|
00009e  2005              MOVS     r0,#5
0000a0  f7fffffe          BL       _Anki_Log
0000a4  b002              ADD      sp,sp,#8
0000a6  f04f6080          MOV      r0,#0x4000000
0000aa  e8bd87f0          POP      {r4-r10,pc}
                  |L4.174|
0000ae  4809              LDR      r0,|L4.212|
0000b0  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
0000b4  e7db              B        |L4.110|
;;;84     
                          ENDP

0000b6  0000              DCW      0x0000
                  |L4.184|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_2 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 4)
                  |L4.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_4 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 6)
                  |L4.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_5 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 7)
                  |L4.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L4.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_1 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 3)
                  |L4.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_0 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 2)
                  |L4.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string
                  |L4.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_3 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 5)

                          AREA ||i._ZNK4Anki8Embedded5ArrayIPcE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIPcE5PrintEPKciiii PROC ; Anki::Embedded::Array<char*>::Print(const char*, int, int, int, int) const
;;;74     
;;;75         template<> Result Array<char *>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;76         {
000004  4606              MOV      r6,r0
000006  b082              SUB      sp,sp,#8
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00a          LDRD     r10,r0,[sp,#0x28]
000010  f1bc0f00          CMP      r12,#0
000014  d03b              BEQ      |L5.142|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db33              BLT      |L5.142|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  481b              LDR      r0,|L5.184|
00004c  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000050  454d              CMP      r5,r9
000052  da15              BGE      |L5.128|
                  |L5.84|
000054  68b1              LDR      r1,[r6,#8]
000056  6930              LDR      r0,[r6,#0x10]
000058  4654              MOV      r4,r10
00005a  fb050801          MLA      r8,r5,r1,r0
00005e  45ba              CMP      r10,r7
000060  da08              BGE      |L5.116|
                  |L5.98|
000062  f8581024          LDR      r1,[r8,r4,LSL #2]
000066  b311              CBZ      r1,|L5.174|
000068  4814              LDR      r0,|L5.188|
00006a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
                  |L5.110|
00006e  1c64              ADDS     r4,r4,#1
000070  42bc              CMP      r4,r7
000072  dbf6              BLT      |L5.98|
                  |L5.116|
000074  4812              LDR      r0,|L5.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c6d              ADDS     r5,r5,#1
00007c  454d              CMP      r5,r9
00007e  dbe9              BLT      |L5.84|
                  |L5.128|
000080  480f              LDR      r0,|L5.192|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;77           return PrintString(variableName, 1, minY, maxY, minX, maxX);
;;;78         }
000086  b002              ADD      sp,sp,#8
000088  2000              MOVS     r0,#0
00008a  e8bd87f0          POP      {r4-r10,pc}
                  |L5.142|
00008e  f2403172          MOV      r1,#0x372
000092  480c              LDR      r0,|L5.196|
000094  e9cd0100          STRD     r0,r1,[sp,#0]
000098  4b0b              LDR      r3,|L5.200|
00009a  4a0c              LDR      r2,|L5.204|
00009c  490c              LDR      r1,|L5.208|
00009e  2005              MOVS     r0,#5
0000a0  f7fffffe          BL       _Anki_Log
0000a4  b002              ADD      sp,sp,#8
0000a6  f04f6080          MOV      r0,#0x4000000
0000aa  e8bd87f0          POP      {r4-r10,pc}
                  |L5.174|
0000ae  4809              LDR      r0,|L5.212|
0000b0  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
0000b4  e7db              B        |L5.110|
;;;79     
                          ENDP

0000b6  0000              DCW      0x0000
                  |L5.184|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_2 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 4)
                  |L5.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_4 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 6)
                  |L5.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_5 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 7)
                  |L5.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L5.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_1 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 3)
                  |L5.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_0 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 2)
                  |L5.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string
                  |L5.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_3 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 5)

                          AREA ||i._ZNK4Anki8Embedded5ArrayIaE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIaE5PrintEPKciiii PROC ; Anki::Embedded::Array<signed char>::Print(const char*, int, int, int, int) const
;;;29     
;;;30         template<> Result Array<s8>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;31         {
000004  4606              MOV      r6,r0
000006  b083              SUB      sp,sp,#0xc
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00c          LDRD     r10,r0,[sp,#0x30]
000010  f1bc0f00          CMP      r12,#0
000014  d041              BEQ      |L6.154|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db39              BLT      |L6.154|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  2001              MOVS     r0,#1
00004c  f04f0b00          MOV      r11,#0
000050  e9cdb000          STRD     r11,r0,[sp,#0]
000054  4603              MOV      r3,r0
000056  4602              MOV      r2,r0
000058  4818              LDR      r0,|L6.188|
00005a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00005e  454d              CMP      r5,r9
000060  da14              BGE      |L6.140|
                  |L6.98|
000062  68b1              LDR      r1,[r6,#8]
000064  6930              LDR      r0,[r6,#0x10]
000066  4654              MOV      r4,r10
000068  fb050801          MLA      r8,r5,r1,r0
00006c  45ba              CMP      r10,r7
00006e  da07              BGE      |L6.128|
                  |L6.112|
000070  f9181004          LDRSB    r1,[r8,r4]
000074  4812              LDR      r0,|L6.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c64              ADDS     r4,r4,#1
00007c  42bc              CMP      r4,r7
00007e  dbf7              BLT      |L6.112|
                  |L6.128|
000080  4810              LDR      r0,|L6.196|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000086  1c6d              ADDS     r5,r5,#1
000088  454d              CMP      r5,r9
00008a  dbea              BLT      |L6.98|
                  |L6.140|
00008c  480d              LDR      r0,|L6.196|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;32           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
;;;33         }
000092  b003              ADD      sp,sp,#0xc
000094  4658              MOV      r0,r11
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.154|
00009a  f240314e          MOV      r1,#0x34e
00009e  480a              LDR      r0,|L6.200|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  4b09              LDR      r3,|L6.204|
0000a6  4a0a              LDR      r2,|L6.208|
0000a8  490a              LDR      r1,|L6.212|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b003              ADD      sp,sp,#0xc
0000b2  f04f6080          MOV      r0,#0x4000000
0000b6  e8bd8ff0          POP      {r4-r11,pc}
;;;34     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L6.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L6.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
                  |L6.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L6.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L6.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L6.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L6.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string

                          AREA ||i._ZNK4Anki8Embedded5ArrayIbE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIbE5PrintEPKciiii PROC ; Anki::Embedded::Array<bool>::Print(const char*, int, int, int, int) const
;;;19       {
;;;20         template<> Result Array<bool>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;21         {
000004  4606              MOV      r6,r0
000006  b083              SUB      sp,sp,#0xc
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00c          LDRD     r10,r0,[sp,#0x30]
000010  f1bc0f00          CMP      r12,#0
000014  d041              BEQ      |L7.154|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db39              BLT      |L7.154|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  2001              MOVS     r0,#1
00004c  f04f0b00          MOV      r11,#0
000050  e9cdb000          STRD     r11,r0,[sp,#0]
000054  4602              MOV      r2,r0
000056  465b              MOV      r3,r11
000058  4818              LDR      r0,|L7.188|
00005a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00005e  454d              CMP      r5,r9
000060  da14              BGE      |L7.140|
                  |L7.98|
000062  68b1              LDR      r1,[r6,#8]
000064  6930              LDR      r0,[r6,#0x10]
000066  4654              MOV      r4,r10
000068  fb050801          MLA      r8,r5,r1,r0
00006c  45ba              CMP      r10,r7
00006e  da07              BGE      |L7.128|
                  |L7.112|
000070  f8181004          LDRB     r1,[r8,r4]
000074  4812              LDR      r0,|L7.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c64              ADDS     r4,r4,#1
00007c  42bc              CMP      r4,r7
00007e  dbf7              BLT      |L7.112|
                  |L7.128|
000080  4810              LDR      r0,|L7.196|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000086  1c6d              ADDS     r5,r5,#1
000088  454d              CMP      r5,r9
00008a  dbea              BLT      |L7.98|
                  |L7.140|
00008c  480d              LDR      r0,|L7.196|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;22           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
;;;23         }
000092  b003              ADD      sp,sp,#0xc
000094  4658              MOV      r0,r11
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.154|
00009a  f240314e          MOV      r1,#0x34e
00009e  480a              LDR      r0,|L7.200|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  4b09              LDR      r3,|L7.204|
0000a6  4a0a              LDR      r2,|L7.208|
0000a8  490a              LDR      r1,|L7.212|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b003              ADD      sp,sp,#0xc
0000b2  f04f6080          MOV      r0,#0x4000000
0000b6  e8bd8ff0          POP      {r4-r11,pc}
;;;24     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L7.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L7.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
                  |L7.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L7.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L7.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L7.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L7.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string

                          AREA ||i._ZNK4Anki8Embedded5ArrayIdE14PrintAlternateEPKciiiii||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIdE14PrintAlternateEPKciiiii PROC ; Anki::Embedded::Array<double>::PrintAlternate(const char*, int, int, int, int, int) const
;;;89     
;;;90         template<> Result Array<f64>::PrintAlternate(const char * const variableName, const s32 version, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  b530              PUSH     {r4,r5,lr}
;;;91         {
000002  b083              SUB      sp,sp,#0xc
000004  e9dd4506          LDRD     r4,r5,[sp,#0x18]
;;;92           return PrintBasicType(variableName, version, minY, maxY, minX, maxX);
000008  f8ddc020          LDR      r12,[sp,#0x20]
00000c  9400              STR      r4,[sp,#0]
00000e  e9cd5c01          STRD     r5,r12,[sp,#4]
000012  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiii ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const
;;;93         }
000016  b003              ADD      sp,sp,#0xc
000018  bd30              POP      {r4,r5,pc}
;;;94     
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded5ArrayIdE5PrintEPKciiii||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIdE5PrintEPKciiii PROC ; Anki::Embedded::Array<double>::Print(const char*, int, int, int, int) const
;;;69     
;;;70         template<> Result Array<f64>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  b510              PUSH     {r4,lr}
;;;71         {
000002  b084              SUB      sp,sp,#0x10
000004  461c              MOV      r4,r3
000006  e9dd3c06          LDRD     r3,r12,[sp,#0x18]
;;;72           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
00000a  e9cd4300          STRD     r4,r3,[sp,#0]
00000e  4613              MOV      r3,r2
000010  f8cdc008          STR      r12,[sp,#8]
000014  2201              MOVS     r2,#1
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiii ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const
;;;73         }
00001a  b004              ADD      sp,sp,#0x10
00001c  bd10              POP      {r4,pc}
;;;74     
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded5ArrayIfE14PrintAlternateEPKciiiii||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIfE14PrintAlternateEPKciiiii PROC ; Anki::Embedded::Array<float>::PrintAlternate(const char*, int, int, int, int, int) const
;;;84     
;;;85         template<> Result Array<f32>::PrintAlternate(const char * const variableName, const s32 version, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  b530              PUSH     {r4,r5,lr}
;;;86         {
000002  b083              SUB      sp,sp,#0xc
000004  e9dd4506          LDRD     r4,r5,[sp,#0x18]
;;;87           return PrintBasicType(variableName, version, minY, maxY, minX, maxX);
000008  f8ddc020          LDR      r12,[sp,#0x20]
00000c  9400              STR      r4,[sp,#0]
00000e  e9cd5c01          STRD     r5,r12,[sp,#4]
000012  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiii ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const
;;;88         }
000016  b003              ADD      sp,sp,#0xc
000018  bd30              POP      {r4,r5,pc}
;;;89     
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded5ArrayIfE5PrintEPKciiii||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIfE5PrintEPKciiii PROC ; Anki::Embedded::Array<float>::Print(const char*, int, int, int, int) const
;;;64     
;;;65         template<> Result Array<f32>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  b510              PUSH     {r4,lr}
;;;66         {
000002  b084              SUB      sp,sp,#0x10
000004  461c              MOV      r4,r3
000006  e9dd3c06          LDRD     r3,r12,[sp,#0x18]
;;;67           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
00000a  e9cd4300          STRD     r4,r3,[sp,#0]
00000e  4613              MOV      r3,r2
000010  f8cdc008          STR      r12,[sp,#8]
000014  2201              MOVS     r2,#1
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiii ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const
;;;68         }
00001a  b004              ADD      sp,sp,#0x10
00001c  bd10              POP      {r4,pc}
;;;69     
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded5ArrayIhE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE5PrintEPKciiii PROC ; Anki::Embedded::Array<unsigned char>::Print(const char*, int, int, int, int) const
;;;24     
;;;25         template<> Result Array<u8>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;26         {
000004  4606              MOV      r6,r0
000006  b083              SUB      sp,sp,#0xc
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00c          LDRD     r10,r0,[sp,#0x30]
000010  f1bc0f00          CMP      r12,#0
000014  d041              BEQ      |L12.154|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db39              BLT      |L12.154|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  2001              MOVS     r0,#1
00004c  f04f0b00          MOV      r11,#0
000050  e9cdb000          STRD     r11,r0,[sp,#0]
000054  4602              MOV      r2,r0
000056  465b              MOV      r3,r11
000058  4818              LDR      r0,|L12.188|
00005a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00005e  454d              CMP      r5,r9
000060  da14              BGE      |L12.140|
                  |L12.98|
000062  68b1              LDR      r1,[r6,#8]
000064  6930              LDR      r0,[r6,#0x10]
000066  4654              MOV      r4,r10
000068  fb050801          MLA      r8,r5,r1,r0
00006c  45ba              CMP      r10,r7
00006e  da07              BGE      |L12.128|
                  |L12.112|
000070  f8181004          LDRB     r1,[r8,r4]
000074  4812              LDR      r0,|L12.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c64              ADDS     r4,r4,#1
00007c  42bc              CMP      r4,r7
00007e  dbf7              BLT      |L12.112|
                  |L12.128|
000080  4810              LDR      r0,|L12.196|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000086  1c6d              ADDS     r5,r5,#1
000088  454d              CMP      r5,r9
00008a  dbea              BLT      |L12.98|
                  |L12.140|
00008c  480d              LDR      r0,|L12.196|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;27           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
;;;28         }
000092  b003              ADD      sp,sp,#0xc
000094  4658              MOV      r0,r11
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.154|
00009a  f240314e          MOV      r1,#0x34e
00009e  480a              LDR      r0,|L12.200|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  4b09              LDR      r3,|L12.204|
0000a6  4a0a              LDR      r2,|L12.208|
0000a8  490a              LDR      r1,|L12.212|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b003              ADD      sp,sp,#0xc
0000b2  f04f6080          MOV      r0,#0x4000000
0000b6  e8bd8ff0          POP      {r4-r11,pc}
;;;29     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L12.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L12.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
                  |L12.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L12.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L12.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L12.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L12.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string

                          AREA ||i._ZNK4Anki8Embedded5ArrayIiE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIiE5PrintEPKciiii PROC ; Anki::Embedded::Array<int>::Print(const char*, int, int, int, int) const
;;;49     
;;;50         template<> Result Array<s32>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;51         {
000004  4606              MOV      r6,r0
000006  b083              SUB      sp,sp,#0xc
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00c          LDRD     r10,r0,[sp,#0x30]
000010  f1bc0f00          CMP      r12,#0
000014  d041              BEQ      |L13.154|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db39              BLT      |L13.154|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  2004              MOVS     r0,#4
00004c  f04f0b00          MOV      r11,#0
000050  e9cdb000          STRD     r11,r0,[sp,#0]
000054  2301              MOVS     r3,#1
000056  461a              MOV      r2,r3
000058  4818              LDR      r0,|L13.188|
00005a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00005e  454d              CMP      r5,r9
000060  da14              BGE      |L13.140|
                  |L13.98|
000062  68b1              LDR      r1,[r6,#8]
000064  6930              LDR      r0,[r6,#0x10]
000066  4654              MOV      r4,r10
000068  fb050801          MLA      r8,r5,r1,r0
00006c  45ba              CMP      r10,r7
00006e  da07              BGE      |L13.128|
                  |L13.112|
000070  f8581024          LDR      r1,[r8,r4,LSL #2]
000074  4812              LDR      r0,|L13.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c64              ADDS     r4,r4,#1
00007c  42bc              CMP      r4,r7
00007e  dbf7              BLT      |L13.112|
                  |L13.128|
000080  4810              LDR      r0,|L13.196|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000086  1c6d              ADDS     r5,r5,#1
000088  454d              CMP      r5,r9
00008a  dbea              BLT      |L13.98|
                  |L13.140|
00008c  480d              LDR      r0,|L13.196|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;52           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
;;;53         }
000092  b003              ADD      sp,sp,#0xc
000094  4658              MOV      r0,r11
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L13.154|
00009a  f240314e          MOV      r1,#0x34e
00009e  480a              LDR      r0,|L13.200|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  4b09              LDR      r3,|L13.204|
0000a6  4a0a              LDR      r2,|L13.208|
0000a8  490a              LDR      r1,|L13.212|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b003              ADD      sp,sp,#0xc
0000b2  f04f6080          MOV      r0,#0x4000000
0000b6  e8bd8ff0          POP      {r4-r11,pc}
;;;54     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L13.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L13.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
                  |L13.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L13.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L13.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L13.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L13.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string

                          AREA ||i._ZNK4Anki8Embedded5ArrayIjE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIjE5PrintEPKciiii PROC ; Anki::Embedded::Array<unsigned>::Print(const char*, int, int, int, int) const
;;;44     
;;;45         template<> Result Array<u32>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;46         {
000004  4606              MOV      r6,r0
000006  b083              SUB      sp,sp,#0xc
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00c          LDRD     r10,r0,[sp,#0x30]
000010  f1bc0f00          CMP      r12,#0
000014  d041              BEQ      |L14.154|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db39              BLT      |L14.154|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  2004              MOVS     r0,#4
00004c  f04f0b00          MOV      r11,#0
000050  e9cdb000          STRD     r11,r0,[sp,#0]
000054  465b              MOV      r3,r11
000056  2201              MOVS     r2,#1
000058  4818              LDR      r0,|L14.188|
00005a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00005e  454d              CMP      r5,r9
000060  da14              BGE      |L14.140|
                  |L14.98|
000062  68b1              LDR      r1,[r6,#8]
000064  6930              LDR      r0,[r6,#0x10]
000066  4654              MOV      r4,r10
000068  fb050801          MLA      r8,r5,r1,r0
00006c  45ba              CMP      r10,r7
00006e  da07              BGE      |L14.128|
                  |L14.112|
000070  f8581024          LDR      r1,[r8,r4,LSL #2]
000074  4812              LDR      r0,|L14.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c64              ADDS     r4,r4,#1
00007c  42bc              CMP      r4,r7
00007e  dbf7              BLT      |L14.112|
                  |L14.128|
000080  4810              LDR      r0,|L14.196|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000086  1c6d              ADDS     r5,r5,#1
000088  454d              CMP      r5,r9
00008a  dbea              BLT      |L14.98|
                  |L14.140|
00008c  480d              LDR      r0,|L14.196|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;47           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
;;;48         }
000092  b003              ADD      sp,sp,#0xc
000094  4658              MOV      r0,r11
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.154|
00009a  f240314e          MOV      r1,#0x34e
00009e  480a              LDR      r0,|L14.200|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  4b09              LDR      r3,|L14.204|
0000a6  4a0a              LDR      r2,|L14.208|
0000a8  490a              LDR      r1,|L14.212|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b003              ADD      sp,sp,#0xc
0000b2  f04f6080          MOV      r0,#0x4000000
0000b6  e8bd8ff0          POP      {r4-r11,pc}
;;;49     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L14.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L14.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
                  |L14.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L14.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L14.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L14.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L14.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string

                          AREA ||i._ZNK4Anki8Embedded5ArrayIsE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIsE5PrintEPKciiii PROC ; Anki::Embedded::Array<short>::Print(const char*, int, int, int, int) const
;;;39     
;;;40         template<> Result Array<s16>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;41         {
000004  4606              MOV      r6,r0
000006  b083              SUB      sp,sp,#0xc
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00c          LDRD     r10,r0,[sp,#0x30]
000010  f1bc0f00          CMP      r12,#0
000014  d041              BEQ      |L15.154|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db39              BLT      |L15.154|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  2002              MOVS     r0,#2
00004c  f04f0b00          MOV      r11,#0
000050  e9cdb000          STRD     r11,r0,[sp,#0]
000054  2301              MOVS     r3,#1
000056  461a              MOV      r2,r3
000058  4818              LDR      r0,|L15.188|
00005a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00005e  454d              CMP      r5,r9
000060  da14              BGE      |L15.140|
                  |L15.98|
000062  68b1              LDR      r1,[r6,#8]
000064  6930              LDR      r0,[r6,#0x10]
000066  4654              MOV      r4,r10
000068  fb050801          MLA      r8,r5,r1,r0
00006c  45ba              CMP      r10,r7
00006e  da07              BGE      |L15.128|
                  |L15.112|
000070  f9381014          LDRSH    r1,[r8,r4,LSL #1]
000074  4812              LDR      r0,|L15.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c64              ADDS     r4,r4,#1
00007c  42bc              CMP      r4,r7
00007e  dbf7              BLT      |L15.112|
                  |L15.128|
000080  4810              LDR      r0,|L15.196|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000086  1c6d              ADDS     r5,r5,#1
000088  454d              CMP      r5,r9
00008a  dbea              BLT      |L15.98|
                  |L15.140|
00008c  480d              LDR      r0,|L15.196|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;42           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
;;;43         }
000092  b003              ADD      sp,sp,#0xc
000094  4658              MOV      r0,r11
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L15.154|
00009a  f240314e          MOV      r1,#0x34e
00009e  480a              LDR      r0,|L15.200|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  4b09              LDR      r3,|L15.204|
0000a6  4a0a              LDR      r2,|L15.208|
0000a8  490a              LDR      r1,|L15.212|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b003              ADD      sp,sp,#0xc
0000b2  f04f6080          MOV      r0,#0x4000000
0000b6  e8bd8ff0          POP      {r4-r11,pc}
;;;44     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L15.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L15.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
                  |L15.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L15.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L15.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L15.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L15.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string

                          AREA ||i._ZNK4Anki8Embedded5ArrayItE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayItE5PrintEPKciiii PROC ; Anki::Embedded::Array<unsigned short>::Print(const char*, int, int, int, int) const
;;;34     
;;;35         template<> Result Array<u16>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;36         {
000004  4606              MOV      r6,r0
000006  b083              SUB      sp,sp,#0xc
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00c          LDRD     r10,r0,[sp,#0x30]
000010  f1bc0f00          CMP      r12,#0
000014  d041              BEQ      |L16.154|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db39              BLT      |L16.154|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  2002              MOVS     r0,#2
00004c  f04f0b00          MOV      r11,#0
000050  e9cdb000          STRD     r11,r0,[sp,#0]
000054  465b              MOV      r3,r11
000056  2201              MOVS     r2,#1
000058  4818              LDR      r0,|L16.188|
00005a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00005e  454d              CMP      r5,r9
000060  da14              BGE      |L16.140|
                  |L16.98|
000062  68b1              LDR      r1,[r6,#8]
000064  6930              LDR      r0,[r6,#0x10]
000066  4654              MOV      r4,r10
000068  fb050801          MLA      r8,r5,r1,r0
00006c  45ba              CMP      r10,r7
00006e  da07              BGE      |L16.128|
                  |L16.112|
000070  f8381014          LDRH     r1,[r8,r4,LSL #1]
000074  4812              LDR      r0,|L16.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c64              ADDS     r4,r4,#1
00007c  42bc              CMP      r4,r7
00007e  dbf7              BLT      |L16.112|
                  |L16.128|
000080  4810              LDR      r0,|L16.196|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000086  1c6d              ADDS     r5,r5,#1
000088  454d              CMP      r5,r9
00008a  dbea              BLT      |L16.98|
                  |L16.140|
00008c  480d              LDR      r0,|L16.196|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;37           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
;;;38         }
000092  b003              ADD      sp,sp,#0xc
000094  4658              MOV      r0,r11
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.154|
00009a  f240314e          MOV      r1,#0x34e
00009e  480a              LDR      r0,|L16.200|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  4b09              LDR      r3,|L16.204|
0000a6  4a0a              LDR      r2,|L16.208|
0000a8  490a              LDR      r1,|L16.212|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b003              ADD      sp,sp,#0xc
0000b2  f04f6080          MOV      r0,#0x4000000
0000b6  e8bd8ff0          POP      {r4-r11,pc}
;;;39     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L16.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L16.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
                  |L16.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L16.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L16.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L16.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L16.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string

                          AREA ||i._ZNK4Anki8Embedded5ArrayIxE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIxE5PrintEPKciiii PROC ; Anki::Embedded::Array<long long>::Print(const char*, int, int, int, int) const
;;;59     
;;;60         template<> Result Array<s64>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;61         {
000004  4606              MOV      r6,r0
000006  b083              SUB      sp,sp,#0xc
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00c          LDRD     r10,r0,[sp,#0x30]
000010  f1bc0f00          CMP      r12,#0
000014  d041              BEQ      |L17.154|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db39              BLT      |L17.154|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  2008              MOVS     r0,#8
00004c  f04f0b00          MOV      r11,#0
000050  e9cdb000          STRD     r11,r0,[sp,#0]
000054  2301              MOVS     r3,#1
000056  461a              MOV      r2,r3
000058  4818              LDR      r0,|L17.188|
00005a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00005e  454d              CMP      r5,r9
000060  da14              BGE      |L17.140|
                  |L17.98|
000062  68b1              LDR      r1,[r6,#8]
000064  6930              LDR      r0,[r6,#0x10]
000066  4654              MOV      r4,r10
000068  fb050801          MLA      r8,r5,r1,r0
00006c  45ba              CMP      r10,r7
00006e  da07              BGE      |L17.128|
                  |L17.112|
000070  f8581034          LDR      r1,[r8,r4,LSL #3]
000074  4812              LDR      r0,|L17.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c64              ADDS     r4,r4,#1
00007c  42bc              CMP      r4,r7
00007e  dbf7              BLT      |L17.112|
                  |L17.128|
000080  4810              LDR      r0,|L17.196|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000086  1c6d              ADDS     r5,r5,#1
000088  454d              CMP      r5,r9
00008a  dbea              BLT      |L17.98|
                  |L17.140|
00008c  480d              LDR      r0,|L17.196|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;62           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
;;;63         }
000092  b003              ADD      sp,sp,#0xc
000094  4658              MOV      r0,r11
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L17.154|
00009a  f240314e          MOV      r1,#0x34e
00009e  480a              LDR      r0,|L17.200|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  4b09              LDR      r3,|L17.204|
0000a6  4a0a              LDR      r2,|L17.208|
0000a8  490a              LDR      r1,|L17.212|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b003              ADD      sp,sp,#0xc
0000b2  f04f6080          MOV      r0,#0x4000000
0000b6  e8bd8ff0          POP      {r4-r11,pc}
;;;64     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L17.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L17.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
                  |L17.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L17.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L17.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L17.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L17.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string

                          AREA ||i._ZNK4Anki8Embedded5ArrayIyE5PrintEPKciiii||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIyE5PrintEPKciiii PROC ; Anki::Embedded::Array<unsigned long long>::Print(const char*, int, int, int, int) const
;;;54     
;;;55         template<> Result Array<u64>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;56         {
000004  4606              MOV      r6,r0
000006  b083              SUB      sp,sp,#0xc
000008  f8d6c010          LDR      r12,[r6,#0x10]
00000c  e9dda00c          LDRD     r10,r0,[sp,#0x30]
000010  f1bc0f00          CMP      r12,#0
000014  d041              BEQ      |L18.154|
000016  f8d69000          LDR      r9,[r6,#0]
00001a  f1b90f00          CMP      r9,#0
00001e  bfa4              ITT      GE
000020  6877              LDRGE    r7,[r6,#4]
000022  2f00              CMPGE    r7,#0
000024  db39              BLT      |L18.154|
000026  f1ba0f00          CMP      r10,#0
00002a  bfb8              IT       LT
00002c  f04f0a00          MOVLT    r10,#0
000030  f1000c01          ADD      r12,r0,#1
000034  4567              CMP      r7,r12
000036  bfc8              IT       GT
000038  4667              MOVGT    r7,r12
00003a  2a00              CMP      r2,#0
00003c  bfb8              IT       LT
00003e  2200              MOVLT    r2,#0
000040  4615              MOV      r5,r2
000042  1c58              ADDS     r0,r3,#1
000044  4581              CMP      r9,r0
000046  bfc8              IT       GT
000048  4681              MOVGT    r9,r0
00004a  2008              MOVS     r0,#8
00004c  f04f0b00          MOV      r11,#0
000050  e9cdb000          STRD     r11,r0,[sp,#0]
000054  465b              MOV      r3,r11
000056  2201              MOVS     r2,#1
000058  4818              LDR      r0,|L18.188|
00005a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00005e  454d              CMP      r5,r9
000060  da14              BGE      |L18.140|
                  |L18.98|
000062  68b1              LDR      r1,[r6,#8]
000064  6930              LDR      r0,[r6,#0x10]
000066  4654              MOV      r4,r10
000068  fb050801          MLA      r8,r5,r1,r0
00006c  45ba              CMP      r10,r7
00006e  da07              BGE      |L18.128|
                  |L18.112|
000070  f8581034          LDR      r1,[r8,r4,LSL #3]
000074  4812              LDR      r0,|L18.192|
000076  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00007a  1c64              ADDS     r4,r4,#1
00007c  42bc              CMP      r4,r7
00007e  dbf7              BLT      |L18.112|
                  |L18.128|
000080  4810              LDR      r0,|L18.196|
000082  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000086  1c6d              ADDS     r5,r5,#1
000088  454d              CMP      r5,r9
00008a  dbea              BLT      |L18.98|
                  |L18.140|
00008c  480d              LDR      r0,|L18.196|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;57           return PrintBasicType(variableName, 1, minY, maxY, minX, maxX);
;;;58         }
000092  b003              ADD      sp,sp,#0xc
000094  4658              MOV      r0,r11
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L18.154|
00009a  f240314e          MOV      r1,#0x34e
00009e  480a              LDR      r0,|L18.200|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  4b09              LDR      r3,|L18.204|
0000a6  4a0a              LDR      r2,|L18.208|
0000a8  490a              LDR      r1,|L18.212|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b003              ADD      sp,sp,#0xc
0000b2  f04f6080          MOV      r0,#0x4000000
0000b6  e8bd8ff0          POP      {r4-r11,pc}
;;;59     
                          ENDP

0000ba  0000              DCW      0x0000
                  |L18.188|
                          DCD      _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L18.192|
                          DCD      _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
                  |L18.196|
                          DCD      _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L18.200|
                          DCD      _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L18.204|
                          DCD      _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L18.208|
                          DCD      _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L18.212|
                          DCD      _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIiE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIiE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIfE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIfE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIfE14PrintAlternateEPKciiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIfE14PrintAlternateEPKciiiii||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIhE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIhE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki8Embedded5ArrayIhE7SetCastIiEEiPKT_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded5ArrayIhE7SetCastIiEEiPKT_i||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIbE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIbE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIaE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIaE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayItE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayItE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIsE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIsE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN4Anki8Embedded5ArrayIsE7SetCastIiEEiPKT_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded5ArrayIsE7SetCastIiEEiPKT_i||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIjE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIjE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIyE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIyE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIxE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIxE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIdE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIdE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIdE14PrintAlternateEPKciiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIdE14PrintAlternateEPKciiiii||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIPKcE5PrintES3_iiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIPKcE5PrintES3_iiii||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._ZNK4Anki8Embedded5ArrayIPcE5PrintEPKciiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5ArrayIPcE5PrintEPKciiii||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN4Anki8Embedded27LoadBinaryArray_UnknownTypeEPKcPNS0_11MemoryStackES4_PviRtRbS7_S7_S7_S7_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded27LoadBinaryArray_UnknownTypeEPKcPNS0_11MemoryStackES4_PviRtRbS7_S7_S7_S7_||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  53657443          DCB      0x53,0x65,0x74,0x43
00002c  61737428          DCB      0x61,0x73,0x74,0x28
000030  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000034  7420496e          DCB      0x74,0x20,0x49,0x6e
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  202a2c20          DCB      0x20,0x2a,0x2c,0x20
000040  7369676e          DCB      0x73,0x69,0x67,0x6e
000044  65642069          DCB      0x65,0x64,0x20,0x69
000048  6e742920          DCB      0x6e,0x74,0x29,0x20
00004c  5b776974          DCB      0x5b,0x77,0x69,0x74
000050  6820496e          DCB      0x68,0x20,0x49,0x6e
000054  54797065          DCB      0x54,0x79,0x70,0x65
000058  203d2073          DCB      0x20,0x3d,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2054          DCB      0x74,0x2c,0x20,0x54
000068  79706520          DCB      0x79,0x70,0x65,0x20
00006c  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000070  7369676e          DCB      0x73,0x69,0x67,0x6e
000074  65642063          DCB      0x65,0x64,0x20,0x63
000078  6861725d          DCB      0x68,0x61,0x72,0x5d
00007c  00                DCB      0x00
                  |symbol_number.187|
00007d  736967            DCB      0x73,0x69,0x67
000080  6e656420          DCB      0x6e,0x65,0x64,0x20
000084  696e7420          DCB      0x69,0x6e,0x74,0x20
000088  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00008c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000090  62656464          DCB      0x62,0x65,0x64,0x64
000094  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000098  41727261          DCB      0x41,0x72,0x72,0x61
00009c  793c5479          DCB      0x79,0x3c,0x54,0x79
0000a0  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0000a4  3a536574          DCB      0x3a,0x53,0x65,0x74
0000a8  43617374          DCB      0x43,0x61,0x73,0x74
0000ac  28636f6e          DCB      0x28,0x63,0x6f,0x6e
0000b0  73742049          DCB      0x73,0x74,0x20,0x49
0000b4  6e547970          DCB      0x6e,0x54,0x79,0x70
0000b8  65202a2c          DCB      0x65,0x20,0x2a,0x2c
0000bc  20736967          DCB      0x20,0x73,0x69,0x67
0000c0  6e656420          DCB      0x6e,0x65,0x64,0x20
0000c4  696e7429          DCB      0x69,0x6e,0x74,0x29
0000c8  205b7769          DCB      0x20,0x5b,0x77,0x69
0000cc  74682049          DCB      0x74,0x68,0x20,0x49
0000d0  6e547970          DCB      0x6e,0x54,0x79,0x70
0000d4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000d8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000dc  65642069          DCB      0x65,0x64,0x20,0x69
0000e0  6e742c20          DCB      0x6e,0x74,0x2c,0x20
0000e4  54797065          DCB      0x54,0x79,0x70,0x65
0000e8  203d2073          DCB      0x20,0x3d,0x20,0x73
0000ec  69676e65          DCB      0x69,0x67,0x6e,0x65
0000f0  64207368          DCB      0x64,0x20,0x73,0x68
0000f4  6f72745d          DCB      0x6f,0x72,0x74,0x5d
0000f8  00                DCB      0x00
                  |symbol_number.188|
0000f9  416e6b            DCB      0x41,0x6e,0x6b
0000fc  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000100  6d626564          DCB      0x6d,0x62,0x65,0x64
000104  6465643a          DCB      0x64,0x65,0x64,0x3a
000108  3a417272          DCB      0x3a,0x41,0x72,0x72
00010c  61793c75          DCB      0x61,0x79,0x3c,0x75
000110  6e736967          DCB      0x6e,0x73,0x69,0x67
000114  6e656420          DCB      0x6e,0x65,0x64,0x20
000118  63686172          DCB      0x63,0x68,0x61,0x72
00011c  3e20416e          DCB      0x3e,0x20,0x41,0x6e
000120  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000124  456d6265          DCB      0x45,0x6d,0x62,0x65
000128  64646564          DCB      0x64,0x64,0x65,0x64
00012c  3a3a4c6f          DCB      0x3a,0x3a,0x4c,0x6f
000130  61644269          DCB      0x61,0x64,0x42,0x69
000134  6e617279          DCB      0x6e,0x61,0x72,0x79
000138  41727261          DCB      0x41,0x72,0x72,0x61
00013c  795f556e          DCB      0x79,0x5f,0x55,0x6e
000140  6b6e6f77          DCB      0x6b,0x6e,0x6f,0x77
000144  6e547970          DCB      0x6e,0x54,0x79,0x70
000148  6528636f          DCB      0x65,0x28,0x63,0x6f
00014c  6e737420          DCB      0x6e,0x73,0x74,0x20
000150  63686172          DCB      0x63,0x68,0x61,0x72
000154  202a2c20          DCB      0x20,0x2a,0x2c,0x20
000158  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00015c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000160  62656464          DCB      0x62,0x65,0x64,0x64
000164  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000168  4d656d6f          DCB      0x4d,0x65,0x6d,0x6f
00016c  72795374          DCB      0x72,0x79,0x53,0x74
000170  61636b20          DCB      0x61,0x63,0x6b,0x20
000174  2a2c2041          DCB      0x2a,0x2c,0x20,0x41
000178  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00017c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000180  65646465          DCB      0x65,0x64,0x64,0x65
000184  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000188  656d6f72          DCB      0x65,0x6d,0x6f,0x72
00018c  79537461          DCB      0x79,0x53,0x74,0x61
000190  636b202a          DCB      0x63,0x6b,0x20,0x2a
000194  2c20766f          DCB      0x2c,0x20,0x76,0x6f
000198  6964202a          DCB      0x69,0x64,0x20,0x2a
00019c  2c207369          DCB      0x2c,0x20,0x73,0x69
0001a0  676e6564          DCB      0x67,0x6e,0x65,0x64
0001a4  20696e74          DCB      0x20,0x69,0x6e,0x74
0001a8  2c20756e          DCB      0x2c,0x20,0x75,0x6e
0001ac  7369676e          DCB      0x73,0x69,0x67,0x6e
0001b0  65642073          DCB      0x65,0x64,0x20,0x73
0001b4  686f7274          DCB      0x68,0x6f,0x72,0x74
0001b8  20262c20          DCB      0x20,0x26,0x2c,0x20
0001bc  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
0001c0  20262c20          DCB      0x20,0x26,0x2c,0x20
0001c4  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
0001c8  20262c20          DCB      0x20,0x26,0x2c,0x20
0001cc  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
0001d0  20262c20          DCB      0x20,0x26,0x2c,0x20
0001d4  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
0001d8  20262c20          DCB      0x20,0x26,0x2c,0x20
0001dc  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
0001e0  20262900          DCB      0x20,0x26,0x29,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
000000  25732074          DCB      0x25,0x73,0x20,0x74
000004  79706528          DCB      0x79,0x70,0x65,0x28
000008  696e743a          DCB      0x69,0x6e,0x74,0x3a
00000c  25642c73          DCB      0x25,0x64,0x2c,0x73
000010  69676e65          DCB      0x69,0x67,0x6e,0x65
000014  643a2564          DCB      0x64,0x3a,0x25,0x64
000018  2c666c6f          DCB      0x2c,0x66,0x6c,0x6f
00001c  61743a25          DCB      0x61,0x74,0x3a,0x25
000020  642c7369          DCB      0x64,0x2c,0x73,0x69
000024  7a656f66          DCB      0x7a,0x65,0x6f,0x66
000028  3a256429          DCB      0x3a,0x25,0x64,0x29
00002c  3a0a00            DCB      0x3a,0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_3 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 5)
000000  25642000          DCB      0x25,0x64,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)
000000  25662000          DCB      0x25,0x66,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
000000  25652000          DCB      0x25,0x65,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_6||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_6, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_6 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 8)
000000  212000            DCB      0x21,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_7||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_7, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e745374          DCB      0x6e,0x74,0x53,0x74
000014  72696e67          DCB      0x72,0x69,0x6e,0x67
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_0 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_1 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_2 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 4)
000000  25733a0a          DCB      0x25,0x73,0x3a,0x0a
000004  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_3 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 5)
000000  4e554c4c          DCB      0x4e,0x55,0x4c,0x4c
000004  2c2000            DCB      0x2c,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_4 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 6)
000000  22257322          DCB      0x22,0x25,0x73,0x22
000004  2c2000            DCB      0x2c,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiEs_5 ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 7)
000000  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a507269          DCB      0x3a,0x50,0x72,0x69
000010  6e745374          DCB      0x6e,0x74,0x53,0x74
000014  72696e67          DCB      0x72,0x69,0x6e,0x67
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_0 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 2)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e20          DCB      0x70,0x65,0x3e,0x20
00000c  6973206e          DCB      0x69,0x73,0x20,0x6e
000010  6f742076          DCB      0x6f,0x74,0x20,0x76
000014  616c6964          DCB      0x61,0x6c,0x69,0x64
000018  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_1 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_2||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_2, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_2 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 4)
000000  25733a0a          DCB      0x25,0x73,0x3a,0x0a
000004  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_3||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_3, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_3 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 5)
000000  4e554c4c          DCB      0x4e,0x55,0x4c,0x4c
000004  2c2000            DCB      0x2c,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_4||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_4, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_4 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 6)
000000  22257322          DCB      0x22,0x25,0x73,0x22
000004  2c2000            DCB      0x2c,0x20,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_5||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_5, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiEs_5 ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::string (instance 7)
000000  0a00              DCB      0x0a,0x00

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiii||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiii, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiii PROC ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const
;;;843    
;;;844        template<typename Type> Result Array<Type>::PrintBasicType(const char * const variableName, const s32 version, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX)  const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;845        {
000004  b083              SUB      sp,sp,#0xc
000006  4607              MOV      r7,r0
000008  4691              MOV      r9,r2
00000a  e9dd0b0c          LDRD     r0,r11,[sp,#0x30]
00000e  f8d7c010          LDR      r12,[r7,#0x10]
000012  9a0e              LDR      r2,[sp,#0x38]
000014  f1bc0f00          CMP      r12,#0
000018  d04b              BEQ      |L342.178|
00001a  f8d7a000          LDR      r10,[r7,#0]
00001e  f1ba0f00          CMP      r10,#0
000022  bfa4              ITT      GE
000024  f8d78004          LDRGE    r8,[r7,#4]
000028  f1b80f00          CMPGE    r8,#0
00002c  db41              BLT      |L342.178|
;;;846          AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;847            RESULT_FAIL_INVALID_OBJECT, "Array<Type>::Print", "Array<Type> is not valid");
;;;848    
;;;849          const s32 realMinX = MAX(0,minX);
00002e  f1bb0f00          CMP      r11,#0
000032  bfb8              IT       LT
000034  f04f0b00          MOVLT    r11,#0
;;;850          const s32 realMaxX = MIN(maxX+1,size[1]);
000038  f1020c01          ADD      r12,r2,#1
00003c  45e0              CMP      r8,r12
00003e  bfc8              IT       GT
000040  46e0              MOVGT    r8,r12
;;;851          const s32 realMinY = MAX(0,minY);
000042  2b00              CMP      r3,#0
000044  bfb8              IT       LT
000046  2300              MOVLT    r3,#0
000048  461d              MOV      r5,r3
;;;852          const s32 realMaxY = MIN(maxY+1,size[0]);
00004a  1c42              ADDS     r2,r0,#1
00004c  4592              CMP      r10,r2
00004e  bfc8              IT       GT
000050  4692              MOVGT    r10,r2
;;;853    
;;;854          CoreTechPrint("%s type(int:%d,signed:%d,float:%d,sizeof:%d):\n", variableName, Flags::TypeCharacteristics<Type>::isInteger, Flags::TypeCharacteristics<Type>::isSigned, Flags::TypeCharacteristics<Type>::isFloat, sizeof(Type));
000052  2204              MOVS     r2,#4
000054  2001              MOVS     r0,#1
000056  e9cd0200          STRD     r0,r2,[sp,#0]
00005a  4603              MOV      r3,r0
00005c  2200              MOVS     r2,#0
00005e  4821              LDR      r0,|L342.228|
000060  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;855    
;;;856          for(s32 y=realMinY; y<realMaxY; y++) {
000064  4555              CMP      r5,r10
000066  da1d              BGE      |L342.164|
                  |L342.104|
000068  68b9              LDR      r1,[r7,#8]
00006a  6938              LDR      r0,[r7,#0x10]
;;;857            const Type * const pThisData = this->Pointer(y, 0);
;;;858            for(s32 x=realMinX; x<realMaxX; x++) {
00006c  465c              MOV      r4,r11
00006e  fb050601          MLA      r6,r5,r1,r0
000072  45c3              CMP      r11,r8
000074  da10              BGE      |L342.152|
                  |L342.118|
;;;859              if(Flags::TypeCharacteristics<Type>::isBasicType) {
;;;860                if(Flags::TypeCharacteristics<Type>::isInteger) {
;;;861                  CoreTechPrint("%d ", static_cast<s32>(pThisData[x]));
;;;862                } else {
;;;863                  if(version==1) {
;;;864                    CoreTechPrint("%f ", (float)pThisData[x]);
;;;865                  } else {
;;;866                    CoreTechPrint("%e ", (float)pThisData[x]);
000076  f8560024          LDR      r0,[r6,r4,LSL #2]
00007a  f1b90f01          CMP      r9,#1                 ;863
00007e  d028              BEQ      |L342.210|
000080  f7fffffe          BL       __aeabi_f2d
000084  ec410b10          VMOV     d0,r0,r1
000088  4817              LDR      r0,|L342.232|
00008a  ec532b10          VMOV     r2,r3,d0
                  |L342.142|
00008e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000092  1c64              ADDS     r4,r4,#1
000094  4544              CMP      r4,r8                 ;858
000096  dbee              BLT      |L342.118|
                  |L342.152|
;;;867                  }
;;;868                }
;;;869              } else {
;;;870                CoreTechPrint("! ");
;;;871              }
;;;872            }
;;;873            CoreTechPrint("\n");
000098  4814              LDR      r0,|L342.236|
00009a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00009e  1c6d              ADDS     r5,r5,#1
0000a0  4555              CMP      r5,r10                ;856
0000a2  dbe1              BLT      |L342.104|
                  |L342.164|
;;;874          }
;;;875          CoreTechPrint("\n");
0000a4  4811              LDR      r0,|L342.236|
0000a6  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;876    
;;;877          return RESULT_OK;
;;;878        }
0000aa  b003              ADD      sp,sp,#0xc
0000ac  2000              MOVS     r0,#0                 ;877
0000ae  e8bd8ff0          POP      {r4-r11,pc}
                  |L342.178|
0000b2  f240314e          MOV      r1,#0x34e             ;846
0000b6  480e              LDR      r0,|L342.240|
0000b8  e9cd0100          STRD     r0,r1,[sp,#0]         ;846
0000bc  4b0d              LDR      r3,|L342.244|
0000be  4a0e              LDR      r2,|L342.248|
0000c0  490e              LDR      r1,|L342.252|
0000c2  2005              MOVS     r0,#5                 ;846
0000c4  f7fffffe          BL       _Anki_Log
0000c8  b003              ADD      sp,sp,#0xc
0000ca  f04f6080          MOV      r0,#0x4000000         ;846
0000ce  e8bd8ff0          POP      {r4-r11,pc}
                  |L342.210|
0000d2  f7fffffe          BL       __aeabi_f2d
0000d6  ec410b10          VMOV     d0,r0,r1              ;864
0000da  4809              LDR      r0,|L342.256|
0000dc  ec532b10          VMOV     r2,r3,d0              ;864
0000e0  e7d5              B        |L342.142|
;;;879    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L342.228|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L342.232|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
                  |L342.236|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L342.240|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L342.244|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L342.248|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L342.252|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string
                  |L342.256|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)

                          AREA ||area_number.343||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiii, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.343||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiii||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiii||, COMGROUP=_ZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiii, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiii PROC ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const
;;;843    
;;;844        template<typename Type> Result Array<Type>::PrintBasicType(const char * const variableName, const s32 version, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX)  const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;845        {
000004  b083              SUB      sp,sp,#0xc
000006  4607              MOV      r7,r0
000008  4691              MOV      r9,r2
00000a  e9dd0b0c          LDRD     r0,r11,[sp,#0x30]
00000e  f8d7c010          LDR      r12,[r7,#0x10]
000012  9a0e              LDR      r2,[sp,#0x38]
000014  f1bc0f00          CMP      r12,#0
000018  d051              BEQ      |L349.190|
00001a  f8d7a000          LDR      r10,[r7,#0]
00001e  f1ba0f00          CMP      r10,#0
000022  bfa4              ITT      GE
000024  f8d78004          LDRGE    r8,[r7,#4]
000028  f1b80f00          CMPGE    r8,#0
00002c  db47              BLT      |L349.190|
;;;846          AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;847            RESULT_FAIL_INVALID_OBJECT, "Array<Type>::Print", "Array<Type> is not valid");
;;;848    
;;;849          const s32 realMinX = MAX(0,minX);
00002e  f1bb0f00          CMP      r11,#0
000032  bfb8              IT       LT
000034  f04f0b00          MOVLT    r11,#0
;;;850          const s32 realMaxX = MIN(maxX+1,size[1]);
000038  f1020c01          ADD      r12,r2,#1
00003c  45e0              CMP      r8,r12
00003e  bfc8              IT       GT
000040  46e0              MOVGT    r8,r12
;;;851          const s32 realMinY = MAX(0,minY);
000042  2b00              CMP      r3,#0
000044  bfb8              IT       LT
000046  2300              MOVLT    r3,#0
000048  461d              MOV      r5,r3
;;;852          const s32 realMaxY = MIN(maxY+1,size[0]);
00004a  1c42              ADDS     r2,r0,#1
00004c  4592              CMP      r10,r2
00004e  bfc8              IT       GT
000050  4692              MOVGT    r10,r2
;;;853    
;;;854          CoreTechPrint("%s type(int:%d,signed:%d,float:%d,sizeof:%d):\n", variableName, Flags::TypeCharacteristics<Type>::isInteger, Flags::TypeCharacteristics<Type>::isSigned, Flags::TypeCharacteristics<Type>::isFloat, sizeof(Type));
000052  2208              MOVS     r2,#8
000054  2001              MOVS     r0,#1
000056  e9cd0200          STRD     r0,r2,[sp,#0]
00005a  4603              MOV      r3,r0
00005c  2200              MOVS     r2,#0
00005e  4825              LDR      r0,|L349.244|
000060  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;855    
;;;856          for(s32 y=realMinY; y<realMaxY; y++) {
000064  4555              CMP      r5,r10
000066  da23              BGE      |L349.176|
                  |L349.104|
000068  68b9              LDR      r1,[r7,#8]
00006a  6938              LDR      r0,[r7,#0x10]
;;;857            const Type * const pThisData = this->Pointer(y, 0);
;;;858            for(s32 x=realMinX; x<realMaxX; x++) {
00006c  465c              MOV      r4,r11
00006e  fb050601          MLA      r6,r5,r1,r0
000072  45c3              CMP      r11,r8
000074  da16              BGE      |L349.164|
                  |L349.118|
;;;859              if(Flags::TypeCharacteristics<Type>::isBasicType) {
;;;860                if(Flags::TypeCharacteristics<Type>::isInteger) {
;;;861                  CoreTechPrint("%d ", static_cast<s32>(pThisData[x]));
;;;862                } else {
;;;863                  if(version==1) {
;;;864                    CoreTechPrint("%f ", (float)pThisData[x]);
;;;865                  } else {
;;;866                    CoreTechPrint("%e ", (float)pThisData[x]);
000076  eb0600c4          ADD      r0,r6,r4,LSL #3
00007a  f1b90f01          CMP      r9,#1                 ;863
00007e  ed900b00          VLDR     d0,[r0,#0]
000082  ec510b10          VMOV     r0,r1,d0
000086  d02a              BEQ      |L349.222|
000088  f7fffffe          BL       __aeabi_d2f
00008c  f7fffffe          BL       __aeabi_f2d
000090  ec410b10          VMOV     d0,r0,r1
000094  4818              LDR      r0,|L349.248|
000096  ec532b10          VMOV     r2,r3,d0
                  |L349.154|
00009a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00009e  1c64              ADDS     r4,r4,#1
0000a0  4544              CMP      r4,r8                 ;858
0000a2  dbe8              BLT      |L349.118|
                  |L349.164|
;;;867                  }
;;;868                }
;;;869              } else {
;;;870                CoreTechPrint("! ");
;;;871              }
;;;872            }
;;;873            CoreTechPrint("\n");
0000a4  4815              LDR      r0,|L349.252|
0000a6  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
0000aa  1c6d              ADDS     r5,r5,#1
0000ac  4555              CMP      r5,r10                ;856
0000ae  dbdb              BLT      |L349.104|
                  |L349.176|
;;;874          }
;;;875          CoreTechPrint("\n");
0000b0  4812              LDR      r0,|L349.252|
0000b2  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;876    
;;;877          return RESULT_OK;
;;;878        }
0000b6  b003              ADD      sp,sp,#0xc
0000b8  2000              MOVS     r0,#0                 ;877
0000ba  e8bd8ff0          POP      {r4-r11,pc}
                  |L349.190|
0000be  f240314e          MOV      r1,#0x34e             ;846
0000c2  480f              LDR      r0,|L349.256|
0000c4  e9cd0100          STRD     r0,r1,[sp,#0]         ;846
0000c8  4b0e              LDR      r3,|L349.260|
0000ca  4a0f              LDR      r2,|L349.264|
0000cc  490f              LDR      r1,|L349.268|
0000ce  2005              MOVS     r0,#5                 ;846
0000d0  f7fffffe          BL       _Anki_Log
0000d4  b003              ADD      sp,sp,#0xc
0000d6  f04f6080          MOV      r0,#0x4000000         ;846
0000da  e8bd8ff0          POP      {r4-r11,pc}
                  |L349.222|
0000de  f7fffffe          BL       __aeabi_d2f
0000e2  f7fffffe          BL       __aeabi_f2d
0000e6  ec410b10          VMOV     d0,r0,r1              ;864
0000ea  4809              LDR      r0,|L349.272|
0000ec  ec532b10          VMOV     r2,r3,d0              ;864
0000f0  e7d3              B        |L349.154|
;;;879    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L349.244|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_2 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 4)
                  |L349.248|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_5 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 7)
                  |L349.252|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_7 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 9)
                  |L349.256|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L349.260|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_1 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 3)
                  |L349.264|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_0 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 2)
                  |L349.268|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string
                  |L349.272|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiEs_4 ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::string (instance 6)

                          AREA ||area_number.350||, COMGROUP=_ZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiii, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.350||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiii||
                          DCD      0x00000001

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d207369          DCB      0x3d,0x20,0x73,0x69
000098  676e6564          DCB      0x67,0x6e,0x65,0x64
00009c  20696e74          DCB      0x20,0x69,0x6e,0x74
0000a0  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000098  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00009c  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000098  7369676e          DCB      0x73,0x69,0x67,0x6e
00009c  65642063          DCB      0x65,0x64,0x20,0x63
0000a0  6861725d          DCB      0x68,0x61,0x72,0x5d
0000a4  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIbE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<bool>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20626f          DCB      0x3d,0x20,0x62,0x6f
000098  6f6c5d00          DCB      0x6f,0x6c,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<signed char>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d207369          DCB      0x3d,0x20,0x73,0x69
000098  676e6564          DCB      0x67,0x6e,0x65,0x64
00009c  20636861          DCB      0x20,0x63,0x68,0x61
0000a0  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayItE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000098  7369676e          DCB      0x73,0x69,0x67,0x6e
00009c  65642073          DCB      0x65,0x64,0x20,0x73
0000a0  686f7274          DCB      0x68,0x6f,0x72,0x74
0000a4  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIsE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d207369          DCB      0x3d,0x20,0x73,0x69
000098  676e6564          DCB      0x67,0x6e,0x65,0x64
00009c  2073686f          DCB      0x20,0x73,0x68,0x6f
0000a0  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000098  7369676e          DCB      0x73,0x69,0x67,0x6e
00009c  65642069          DCB      0x65,0x64,0x20,0x69
0000a0  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIyE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned long long>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000098  7369676e          DCB      0x73,0x69,0x67,0x6e
00009c  6564206c          DCB      0x65,0x64,0x20,0x6c
0000a0  6f6e6720          DCB      0x6f,0x6e,0x67,0x20
0000a4  6c6f6e67          DCB      0x6c,0x6f,0x6e,0x67
0000a8  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIxE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<long long>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d207369          DCB      0x3d,0x20,0x73,0x69
000098  676e6564          DCB      0x67,0x6e,0x65,0x64
00009c  206c6f6e          DCB      0x20,0x6c,0x6f,0x6e
0000a0  67206c6f          DCB      0x67,0x20,0x6c,0x6f
0000a4  6e675d00          DCB      0x6e,0x67,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE14PrintBasicTypeEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::PrintBasicType(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7442          DCB      0x69,0x6e,0x74,0x42
000030  61736963          DCB      0x61,0x73,0x69,0x63
000034  54797065          DCB      0x54,0x79,0x70,0x65
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742063          DCB      0x73,0x74,0x20,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  74292063          DCB      0x74,0x29,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  205b7769          DCB      0x20,0x5b,0x77,0x69
00008c  74682054          DCB      0x74,0x68,0x20,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20646f          DCB      0x3d,0x20,0x64,0x6f
000098  75626c65          DCB      0x75,0x62,0x6c,0x65
00009c  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPKcE11PrintStringES3_iiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<const char*>::PrintString(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7453          DCB      0x69,0x6e,0x74,0x53
000030  7472696e          DCB      0x74,0x72,0x69,0x6e
000034  6728636f          DCB      0x67,0x28,0x63,0x6f
000038  6e737420          DCB      0x6e,0x73,0x74,0x20
00003c  63686172          DCB      0x63,0x68,0x61,0x72
000040  202a2c20          DCB      0x20,0x2a,0x2c,0x20
000044  7369676e          DCB      0x73,0x69,0x67,0x6e
000048  65642069          DCB      0x65,0x64,0x20,0x69
00004c  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000050  7369676e          DCB      0x73,0x69,0x67,0x6e
000054  65642069          DCB      0x65,0x64,0x20,0x69
000058  6e742c20          DCB      0x6e,0x74,0x2c,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000068  7369676e          DCB      0x73,0x69,0x67,0x6e
00006c  65642069          DCB      0x65,0x64,0x20,0x69
000070  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000074  7369676e          DCB      0x73,0x69,0x67,0x6e
000078  65642069          DCB      0x65,0x64,0x20,0x69
00007c  6e742920          DCB      0x6e,0x74,0x29,0x20
000080  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000084  74205b77          DCB      0x74,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2063          DCB      0x20,0x3d,0x20,0x63
000094  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000098  20636861          DCB      0x20,0x63,0x68,0x61
00009c  72202a5d          DCB      0x72,0x20,0x2a,0x5d
0000a0  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIPcE11PrintStringEPKciiiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<char*>::PrintString(const char*, int, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7453          DCB      0x69,0x6e,0x74,0x53
000030  7472696e          DCB      0x74,0x72,0x69,0x6e
000034  6728636f          DCB      0x67,0x28,0x63,0x6f
000038  6e737420          DCB      0x6e,0x73,0x74,0x20
00003c  63686172          DCB      0x63,0x68,0x61,0x72
000040  202a2c20          DCB      0x20,0x2a,0x2c,0x20
000044  7369676e          DCB      0x73,0x69,0x67,0x6e
000048  65642069          DCB      0x65,0x64,0x20,0x69
00004c  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000050  7369676e          DCB      0x73,0x69,0x67,0x6e
000054  65642069          DCB      0x65,0x64,0x20,0x69
000058  6e742c20          DCB      0x6e,0x74,0x2c,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000068  7369676e          DCB      0x73,0x69,0x67,0x6e
00006c  65642069          DCB      0x65,0x64,0x20,0x69
000070  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000074  7369676e          DCB      0x73,0x69,0x67,0x6e
000078  65642069          DCB      0x65,0x64,0x20,0x69
00007c  6e742920          DCB      0x6e,0x74,0x29,0x20
000080  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000084  74205b77          DCB      0x74,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2063          DCB      0x20,0x3d,0x20,0x63
000094  68617220          DCB      0x68,0x61,0x72,0x20
000098  2a5d00            DCB      0x2a,0x5d,0x00
