; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\audio.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\audio.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\audio.crf diag\audio.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo3HAL5SweepEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL5SweepEv PROC ; Anki::Cozmo::HAL::Sweep()
;;;139    
;;;140          void Sweep() // 3 second sweep
000000  b570              PUSH     {r4-r6,lr}
;;;141          {
;;;142            //while(1)
;;;143            {
;;;144              for(int32_t i = 0; i < 132300; i++) // 3 seconds at 44.1k
;;;145              {
;;;146                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;147                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
000002  4d2c              LDR      r5,|L1.180|
000004  4e2f              LDR      r6,|L1.196|
000006  2400              MOVS     r4,#0                 ;144
000008  ed2d8b04          VPUSH    {d8-d9}               ;141
;;;148                {
;;;149                }
;;;150                SPI_I2S_SendData(SPI2, (int)(30000*sin(0.00000010769f*i*i+0.0047492f*i)) & 0xFFFF);
00000c  ed9f8a2a          VLDR     s16,|L1.184|
000010  ed9f9a2a          VLDR     s18,|L1.188|
000014  eddf8a2a          VLDR     s17,|L1.192|
                  |L1.24|
000018  2102              MOVS     r1,#2                 ;147
00001a  4628              MOV      r0,r5                 ;147
00001c  f7fffffe          BL       SPI_I2S_GetFlagStatus
000020  2800              CMP      r0,#0                 ;147
000022  d0f9              BEQ      |L1.24|
000024  ee004a10          VMOV     s0,r4
000028  eeb80ac0          VCVT.F32.S32 s0,s0
00002c  ee600a08          VMUL.F32 s1,s0,s16
000030  ee004a10          VMOV     s0,r4
000034  eeb80ac0          VCVT.F32.S32 s0,s0
000038  ee200a80          VMUL.F32 s0,s1,s0
00003c  ee004a90          VMOV     s1,r4
000040  eef80ae0          VCVT.F32.S32 s1,s1
000044  ee000a89          VMLA.F32 s0,s1,s18
000048  f7fffffe          BL       __hardfp_sinf
00004c  ee200a28          VMUL.F32 s0,s0,s17
000050  eebd0ac0          VCVT.S32.F32 s0,s0
000054  ee100a10          VMOV     r0,s0
000058  b281              UXTH     r1,r0
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       SPI_I2S_SendData
                  |L1.96|
;;;151                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;152                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
000060  2102              MOVS     r1,#2
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       SPI_I2S_GetFlagStatus
000068  2800              CMP      r0,#0
00006a  d0f9              BEQ      |L1.96|
;;;153                {
;;;154                }
;;;155                SPI_I2S_SendData(SPI2, (int)(30000*sin(0.00000010769f*i*i+0.0047492f*i)) & 0xFFFF);
00006c  ee004a10          VMOV     s0,r4
000070  eeb80ac0          VCVT.F32.S32 s0,s0
000074  ee600a08          VMUL.F32 s1,s0,s16
000078  ee004a10          VMOV     s0,r4
00007c  eeb80ac0          VCVT.F32.S32 s0,s0
000080  ee200a80          VMUL.F32 s0,s1,s0
000084  ee004a90          VMOV     s1,r4
000088  eef80ae0          VCVT.F32.S32 s1,s1
00008c  ee000a89          VMLA.F32 s0,s1,s18
000090  f7fffffe          BL       __hardfp_sinf
000094  ee200a28          VMUL.F32 s0,s0,s17
000098  eebd0ac0          VCVT.S32.F32 s0,s0
00009c  ee100a10          VMOV     r0,s0
0000a0  b281              UXTH     r1,r0
0000a2  4628              MOV      r0,r5
0000a4  f7fffffe          BL       SPI_I2S_SendData
0000a8  1c64              ADDS     r4,r4,#1              ;144
0000aa  42b4              CMP      r4,r6                 ;144
0000ac  dbb4              BLT      |L1.24|
;;;156              }
;;;157            }
;;;158          }
0000ae  ecbd8b04          VPOP     {d8-d9}
0000b2  bd70              POP      {r4-r6,pc}
;;;159    
                          ENDP

                  |L1.180|
                          DCD      0x40003800
                  |L1.184|
0000b8  33e74334          DCFS     0x33e74334 ; 1.0768999914034794e-07
                  |L1.188|
0000bc  3b9b9f2d          DCFS     0x3b9b9f2d ; 0.0047491998411715031
                  |L1.192|
0000c0  46ea6000          DCFS     0x46ea6000 ; 30000
                  |L1.196|
                          DCD      0x000204cc

                          AREA ||i._ZN4Anki5Cozmo3HAL7SineLowEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL7SineLowEv PROC ; Anki::Cozmo::HAL::SineLow()
;;;181          
;;;182          void SineLow() // one period, 200 Hz
000000  b570              PUSH     {r4-r6,lr}
;;;183          {
;;;184    
;;;185              for(int32_t i = 0; i < 221; i++) // 3 seconds at 44.1k
;;;186              {
;;;187                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;188                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
000002  4d21              LDR      r5,|L2.136|
000004  2400              MOVS     r4,#0                 ;185
000006  ed2d8b04          VPUSH    {d8-d9}               ;183
;;;189                {
;;;190                }
;;;191                SPI_I2S_SendData(SPI2, (int)(30000*sin(0.028430702f*i)) & 0xFFFF);
00000a  eddf8a1e          VLDR     s17,|L2.132|
00000e  ed9f8a1f          VLDR     s16,|L2.140|
;;;192                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;193                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
;;;194                {
;;;195                }
;;;196                SPI_I2S_SendData(SPI2, (int)(20000*sin(0.028430702f*i)) & 0xFFFF);
000012  ed9f9a1f          VLDR     s18,|L2.144|
                  |L2.22|
000016  2102              MOVS     r1,#2                 ;188
000018  4628              MOV      r0,r5                 ;188
00001a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00001e  2800              CMP      r0,#0                 ;188
000020  d0f9              BEQ      |L2.22|
000022  ee004a10          VMOV     s0,r4                 ;191
000026  eeb80ac0          VCVT.F32.S32 s0,s0                 ;191
00002a  ee200a08          VMUL.F32 s0,s0,s16             ;191
00002e  f7fffffe          BL       __hardfp_sinf
000032  ee200a28          VMUL.F32 s0,s0,s17             ;191
000036  eebd0ac0          VCVT.S32.F32 s0,s0                 ;191
00003a  ee100a10          VMOV     r0,s0                 ;191
00003e  b281              UXTH     r1,r0                 ;191
000040  4628              MOV      r0,r5                 ;191
000042  f7fffffe          BL       SPI_I2S_SendData
                  |L2.70|
000046  2102              MOVS     r1,#2                 ;193
000048  4628              MOV      r0,r5                 ;193
00004a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00004e  2800              CMP      r0,#0                 ;193
000050  d0f9              BEQ      |L2.70|
000052  ee004a10          VMOV     s0,r4
000056  eeb80ac0          VCVT.F32.S32 s0,s0
00005a  ee200a08          VMUL.F32 s0,s0,s16
00005e  f7fffffe          BL       __hardfp_sinf
000062  ee200a09          VMUL.F32 s0,s0,s18
000066  eebd0ac0          VCVT.S32.F32 s0,s0
00006a  ee100a10          VMOV     r0,s0
00006e  b281              UXTH     r1,r0
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       SPI_I2S_SendData
000076  1c64              ADDS     r4,r4,#1              ;185
000078  2cdd              CMP      r4,#0xdd              ;185
00007a  dbcc              BLT      |L2.22|
;;;197              }
;;;198    
;;;199          }
00007c  ecbd8b04          VPOP     {d8-d9}
000080  bd70              POP      {r4-r6,pc}
;;;200    
                          ENDP

000082  0000              DCW      0x0000
                  |L2.132|
000084  46ea6000          DCFS     0x46ea6000 ; 30000
                  |L2.136|
                          DCD      0x40003800
                  |L2.140|
00008c  3ce8e781          DCFS     0x3ce8e781 ; 0.028430702164769173
                  |L2.144|
000090  469c4000          DCFS     0x469c4000 ; 20000

                          AREA ||i._ZN4Anki5Cozmo3HAL8SineHighEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL8SineHighEv PROC ; Anki::Cozmo::HAL::SineHigh()
;;;160    
;;;161          void SineHigh() // one period, 1000 Hz
000000  b570              PUSH     {r4-r6,lr}
;;;162          {
;;;163           // while(1)
;;;164            {
;;;165              for(int32_t i = 0; i < 44; i++) // 3 seconds at 44.1k
;;;166              {
;;;167                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;168                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
000002  4d1f              LDR      r5,|L3.128|
000004  2400              MOVS     r4,#0                 ;165
000006  ed2d8b02          VPUSH    {d8}                  ;162
;;;169                {
;;;170                }
;;;171                SPI_I2S_SendData(SPI2, (int)(5000*sin(0.142799666f*i)) & 0xFFFF);
00000a  ed9f8a1e          VLDR     s16,|L3.132|
00000e  eddf8a1e          VLDR     s17,|L3.136|
                  |L3.18|
000012  2102              MOVS     r1,#2                 ;168
000014  4628              MOV      r0,r5                 ;168
000016  f7fffffe          BL       SPI_I2S_GetFlagStatus
00001a  2800              CMP      r0,#0                 ;168
00001c  d0f9              BEQ      |L3.18|
00001e  ee004a10          VMOV     s0,r4
000022  eeb80ac0          VCVT.F32.S32 s0,s0
000026  ee200a08          VMUL.F32 s0,s0,s16
00002a  f7fffffe          BL       __hardfp_sinf
00002e  ee200a28          VMUL.F32 s0,s0,s17
000032  eebd0ac0          VCVT.S32.F32 s0,s0
000036  ee100a10          VMOV     r0,s0
00003a  b281              UXTH     r1,r0
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       SPI_I2S_SendData
                  |L3.66|
;;;172                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;173                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
000042  2102              MOVS     r1,#2
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       SPI_I2S_GetFlagStatus
00004a  2800              CMP      r0,#0
00004c  d0f9              BEQ      |L3.66|
;;;174                {
;;;175                }
;;;176                SPI_I2S_SendData(SPI2, (int)(5000*sin(0.142799666f*i)) & 0xFFFF);
00004e  ee004a10          VMOV     s0,r4
000052  eeb80ac0          VCVT.F32.S32 s0,s0
000056  ee200a08          VMUL.F32 s0,s0,s16
00005a  f7fffffe          BL       __hardfp_sinf
00005e  ee200a28          VMUL.F32 s0,s0,s17
000062  eebd0ac0          VCVT.S32.F32 s0,s0
000066  ee100a10          VMOV     r0,s0
00006a  b281              UXTH     r1,r0
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       SPI_I2S_SendData
000072  1c64              ADDS     r4,r4,#1              ;165
000074  2c2c              CMP      r4,#0x2c              ;165
000076  dbcc              BLT      |L3.18|
;;;177              }
;;;178            }
;;;179          }
000078  ecbd8b02          VPOP     {d8}
00007c  bd70              POP      {r4-r6,pc}
;;;180          
                          ENDP

00007e  0000              DCW      0x0000
                  |L3.128|
                          DCD      0x40003800
                  |L3.132|
000084  3e123a13          DCFS     0x3e123a13 ; 0.14279966056346893
                  |L3.136|
000088  459c4000          DCFS     0x459c4000 ; 5000

                          AREA ||i._ZN4Anki5Cozmo3HAL9AudioInitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL9AudioInitEv PROC ; Anki::Cozmo::HAL::AudioInit()
;;;77           // Initialize I2S (I2S2)
;;;78           void AudioInit()
000000  b530              PUSH     {r4,r5,lr}
;;;79           {
;;;80             // Enable peripheral clock
;;;81             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b087              SUB      sp,sp,#0x1c           ;79
000006  0388              LSLS     r0,r1,#14
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;82             
;;;83             // Enable  GPIO clocks
;;;84             RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);  
00000c  2101              MOVS     r1,#1
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;85             #ifdef  TESTPOINT
;;;86             RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);    // test points
;;;87             #endif
;;;88             // Peripherals alternate function
;;;89             GPIO_PinAFConfig(GPIO_AUDIO_CK, SOURCE_AUDIO_CK, GPIO_AF_SPI2);
000014  4d21              LDR      r5,|L4.156|
000016  2205              MOVS     r2,#5
000018  210d              MOVS     r1,#0xd
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       GPIO_PinAFConfig
;;;90             GPIO_PinAFConfig(GPIO_AUDIO_WS, SOURCE_AUDIO_WS, GPIO_AF_SPI2);
000020  2205              MOVS     r2,#5
000022  210c              MOVS     r1,#0xc
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       GPIO_PinAFConfig
;;;91             GPIO_PinAFConfig(GPIO_AUDIO_SD, SOURCE_AUDIO_SD, GPIO_AF_SPI2);
00002a  2205              MOVS     r2,#5
00002c  210f              MOVS     r1,#0xf
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_PinAFConfig
;;;92     
;;;93             // Initalize Pins
;;;94             GPIO_InitTypeDef GPIO_InitStructure;
;;;95             // Set SPI alternate function pins
;;;96             
;;;97             #ifndef  TESTPOINT
;;;98             GPIO_InitStructure.GPIO_Pin = PIN_AUDIO_WS | PIN_AUDIO_CK | PIN_AUDIO_SD;
000034  f44f4130          MOV      r1,#0xb000
;;;99             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000038  9104              STR      r1,[sp,#0x10]
00003a  2102              MOVS     r1,#2
00003c  f88d1014          STRB     r1,[sp,#0x14]
;;;100            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000040  f88d1015          STRB     r1,[sp,#0x15]
;;;101            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000044  2400              MOVS     r4,#0
000046  f88d4016          STRB     r4,[sp,#0x16]
;;;102            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
00004a  f88d4017          STRB     r4,[sp,#0x17]
;;;103            GPIO_Init(GPIO_AUDIO_CK, &GPIO_InitStructure);  // GPIOB
00004e  a904              ADD      r1,sp,#0x10
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       GPIO_Init
;;;104            #else 
;;;105            GPIO_InitStructure.GPIO_Pin = PIN_AUDIO_WS;
;;;106            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;107            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;108            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;109            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
;;;110            GPIO_Init(GPIO_AUDIO_WS, &GPIO_InitStructure);  // GPIOB
;;;111            
;;;112            GPIO_InitStructure.GPIO_Pin = PIN_AUDIO_CK | PIN_AUDIO_SD;
;;;113            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;114            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;115            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;116            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
;;;117            GPIO_Init(GPIO_AUDIO_CK, &GPIO_InitStructure);  // GPIOI
;;;118            #endif
;;;119    
;;;120            I2S_InitTypeDef I2S_InitStructure;
;;;121            I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
000056  1568              ASRS     r0,r5,#21
000058  f8ad0000          STRH     r0,[sp,#0]
;;;122            I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
;;;123            I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_32b;
00005c  2005              MOVS     r0,#5
00005e  f8ad0004          STRH     r0,[sp,#4]
000062  f8ad4002          STRH     r4,[sp,#2]            ;122
;;;124            I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000066  f8ad4006          STRH     r4,[sp,#6]
;;;125            I2S_InitStructure.I2S_AudioFreq = ((uint32_t)68000); // 44.1k XXX (something is wrong here. clock isn't right)
;;;126            I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
00006a  f8ad400c          STRH     r4,[sp,#0xc]
00006e  480c              LDR      r0,|L4.160|
;;;127    
;;;128            I2S_Init(SPI2, &I2S_InitStructure);
000070  4c0c              LDR      r4,|L4.164|
000072  9002              STR      r0,[sp,#8]            ;126
000074  4669              MOV      r1,sp
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       I2S_Init
;;;129            
;;;130            RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S);
00007c  2000              MOVS     r0,#0
00007e  f7fffffe          BL       RCC_I2SCLKConfig
;;;131            RCC_PLLI2SCmd(ENABLE);
000082  2001              MOVS     r0,#1
000084  f7fffffe          BL       RCC_PLLI2SCmd
;;;132            RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY);
000088  203b              MOVS     r0,#0x3b
00008a  f7fffffe          BL       RCC_GetFlagStatus
;;;133            
;;;134            
;;;135            // Enable the SPI
;;;136            I2S_Cmd(SPI2, ENABLE);
00008e  2101              MOVS     r1,#1
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       I2S_Cmd
;;;137          }
000096  b007              ADD      sp,sp,#0x1c
000098  bd30              POP      {r4,r5,pc}
;;;138    
                          ENDP

00009a  0000              DCW      0x0000
                  |L4.156|
                          DCD      0x40020400
                  |L4.160|
                          DCD      0x000109a0
                  |L4.164|
                          DCD      0x40003800

                          AREA ||i._ZN4Anki5Cozmo3HAL9MakeNoiseEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL9MakeNoiseEv PROC ; Anki::Cozmo::HAL::MakeNoise()
;;;201    
;;;202          void MakeNoise()  // obsolete test code
000000  ed2d8b04          VPUSH    {d8-d9}
;;;203          {
;;;204            uint16_t freq1, freq2;
;;;205            freq1 = 100;
;;;206            freq2 = 1000;
;;;207            while(1)
;;;208            {
;;;209              for(int32_t i = 0; i < 132300; i++) // 3 seconds at 44.1k
;;;210              {
;;;211                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;212                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
000004  4d2a              LDR      r5,|L5.176|
;;;213                {
;;;214                }
;;;215                //SPI_I2S_SendData(SPI2, (int)(VOLUME*sin(2*3.14159256f*i*((freq2-freq1)*i/132300+freq1))) & 0xFFFF);
;;;216                SPI_I2S_SendData(SPI2, (int)(10000*sin(0.00000010769f*i*i+0.0047492f*i)) & 0xFFFF);
000006  ed9f9a2b          VLDR     s18,|L5.180|
00000a  ed9f8a2b          VLDR     s16,|L5.184|
00000e  eddf8a2b          VLDR     s17,|L5.188|
000012  4e2b              LDR      r6,|L5.192|
                  |L5.20|
000014  2400              MOVS     r4,#0                 ;209
                  |L5.22|
000016  2102              MOVS     r1,#2                 ;212
000018  4628              MOV      r0,r5                 ;212
00001a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00001e  2800              CMP      r0,#0                 ;212
000020  d0f9              BEQ      |L5.22|
000022  ee004a10          VMOV     s0,r4
000026  eeb80ac0          VCVT.F32.S32 s0,s0
00002a  ee600a09          VMUL.F32 s1,s0,s18
00002e  ee004a10          VMOV     s0,r4
000032  eeb80ac0          VCVT.F32.S32 s0,s0
000036  ee200a80          VMUL.F32 s0,s1,s0
00003a  ee004a90          VMOV     s1,r4
00003e  eef80ae0          VCVT.F32.S32 s1,s1
000042  ee000a88          VMLA.F32 s0,s1,s16
000046  f7fffffe          BL       __hardfp_sinf
00004a  ee200a28          VMUL.F32 s0,s0,s17
00004e  eebd0ac0          VCVT.S32.F32 s0,s0
000052  ee100a10          VMOV     r0,s0
000056  b281              UXTH     r1,r0
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       SPI_I2S_SendData
                  |L5.94|
;;;217                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;218                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
00005e  2102              MOVS     r1,#2
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       SPI_I2S_GetFlagStatus
000066  2800              CMP      r0,#0
000068  d0f9              BEQ      |L5.94|
;;;219                {
;;;220                }
;;;221                SPI_I2S_SendData(SPI2, (int)(10000*sin(0.00000010769f*i*i+0.0047492f*i)) & 0xFFFF);
00006a  ee004a10          VMOV     s0,r4
00006e  eeb80ac0          VCVT.F32.S32 s0,s0
000072  ee600a09          VMUL.F32 s1,s0,s18
000076  ee004a10          VMOV     s0,r4
00007a  eeb80ac0          VCVT.F32.S32 s0,s0
00007e  ee200a80          VMUL.F32 s0,s1,s0
000082  ee004a90          VMOV     s1,r4
000086  eef80ae0          VCVT.F32.S32 s1,s1
00008a  ee000a88          VMLA.F32 s0,s1,s16
00008e  f7fffffe          BL       __hardfp_sinf
000092  ee200a28          VMUL.F32 s0,s0,s17
000096  eebd0ac0          VCVT.S32.F32 s0,s0
00009a  ee100a10          VMOV     r0,s0
00009e  b281              UXTH     r1,r0
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       SPI_I2S_SendData
0000a6  1c64              ADDS     r4,r4,#1              ;209
0000a8  42b4              CMP      r4,r6                 ;209
0000aa  dbb4              BLT      |L5.22|
0000ac  e7b2              B        |L5.20|
;;;222                //printf("%x ",  (int)(VOLUME*(s16)sin((float)((0.0427428f*i)+628.32f))) & 0xFFFF);
;;;223                //printf("%d ", (int)(2000*sin(((0.0427428f*i)+628.32f))));
;;;224              }
;;;225              
;;;226            /* // working
;;;227              for(uint16_t i = 0; i <512; i++)
;;;228              {
;;;229                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;230                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
;;;231                {
;;;232                }
;;;233                SPI_I2S_SendData(SPI2, (int)(VOLUME*(s16)sine[i]) & 0xFFFF);
;;;234             */ //working
;;;235                /*
;;;236                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;237                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
;;;238                {
;;;239                }
;;;240                SPI_I2S_SendData(SPI2, (int)(VOLUME*(s16)sine[i]) & 0xFFFF);
;;;241                            // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;242                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
;;;243                {
;;;244                }
;;;245                SPI_I2S_SendData(SPI2, (int)(VOLUME*(s16)sine[i]) & 0xFFFF);
;;;246                            // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;247                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
;;;248                {
;;;249                }
;;;250                SPI_I2S_SendData(SPI2, (int)(VOLUME*(s16)sine[i]) & 0xFFFF);
;;;251                */
;;;252              
;;;253                /*
;;;254                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;255                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
;;;256                {
;;;257                }
;;;258                SPI_I2S_SendData(SPI2, 0x000);
;;;259                
;;;260                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;261                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
;;;262                {
;;;263                }
;;;264                SPI_I2S_SendData(SPI2, 0x000);
;;;265                
;;;266                // Wait until TXE = 1 (wait until transmit buffer is empty)
;;;267                while(!(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)))
;;;268                {
;;;269                }
;;;270                SPI_I2S_SendData(SPI2, 0x000);
;;;271                */
;;;272    
;;;273    
;;;274    
;;;275                //printf("%x ", (int)(VOLUME*(s16)sine[i]) & 0xFFFF);
;;;276                /* //working
;;;277              }
;;;278              */ // working
;;;279            }
;;;280          }
;;;281          
                          ENDP

0000ae  0000              DCW      0x0000
                  |L5.176|
                          DCD      0x40003800
                  |L5.180|
0000b4  33e74334          DCFS     0x33e74334 ; 1.0768999914034794e-07
                  |L5.184|
0000b8  3b9b9f2d          DCFS     0x3b9b9f2d ; 0.0047491998411715031
                  |L5.188|
0000bc  461c4000          DCFS     0x461c4000 ; 10000
                  |L5.192|
                          DCD      0x000204cc

                          AREA ||i.__sti___9_audio_cpp||, CODE, READONLY, ALIGN=2

                  __sti___9_audio_cpp PROC
000000  4803              LDR      r0,|L6.16|
000002  ed9f0a02          VLDR     s0,|L6.12|
000006  ed800a00          VSTR     s0,[r0,#0]
00000a  4770              BX       lr
                          ENDP

                  |L6.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L6.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo3HAL9AudioInitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL9AudioInitEv||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4Anki5Cozmo3HAL5SweepEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL5SweepEv||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN4Anki5Cozmo3HAL8SineHighEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL8SineHighEv||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN4Anki5Cozmo3HAL7SineLowEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL7SineLowEv||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN4Anki5Cozmo3HAL9MakeNoiseEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL9MakeNoiseEv||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i.__sti___9_audio_cpp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___9_audio_cpp||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___9_audio_cpp

;*** Start embedded assembler ***

#line 1 "diag\\audio.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_audio_cpp_1cede1c4___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___9_audio_cpp_1cede1c4___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_audio_cpp_1cede1c4___Z7__REVSHi|
#line 144
|__asm___9_audio_cpp_1cede1c4___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
