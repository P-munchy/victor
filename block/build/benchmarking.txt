; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\benchmarking.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\benchmarking.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\benchmarking.crf ..\coretech\common\robot\src\benchmarking.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded12EndBenchmarkEPKc||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded12EndBenchmarkEPKc PROC ; Anki::Embedded::EndBenchmark(const char*)
;;;150    
;;;151        void EndBenchmark(const char *name)
000000  b570              PUSH     {r4-r6,lr}
;;;152        {
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000008  4d0b              LDR      r5,|L1.56|
00000a  4603              MOV      r3,r0
00000c  480b              LDR      r0,|L1.60|
00000e  6829              LDR      r1,[r5,#0]  ; g_numBenchmarkEvents
;;;153          AddBenchmarkEvent(name, GetBenchmarkTime(), BENCHMARK_EVENT_END);
000010  f04f0c01          MOV      r12,#1
000014  eb010241          ADD      r2,r1,r1,LSL #1
000018  f8404022          STR      r4,[r0,r2,LSL #2]
00001c  eb000082          ADD      r0,r0,r2,LSL #2
000020  6043              STR      r3,[r0,#4]
000022  f880c008          STRB     r12,[r0,#8]
000026  1c48              ADDS     r0,r1,#1
000028  6028              STR      r0,[r5,#0]  ; g_numBenchmarkEvents
00002a  f5b05f7a          CMP      r0,#0x3e80
00002e  bfa4              ITT      GE
000030  f643607f          MOVGE    r0,#0x3e7f
000034  6028              STRGE    r0,[r5,#0]  ; g_numBenchmarkEvents
;;;154        } // void endBenchmark(const char *name)
000036  bd70              POP      {r4-r6,pc}
;;;155    
                          ENDP

                  |L1.56|
                          DCD      ||.data||
                  |L1.60|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki8Embedded12GetNameIndexEPKcRKNS0_15FixedLengthListINS0_16BenchmarkElementEEE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded12GetNameIndexEPKcRKNS0_15FixedLengthListINS0_16BenchmarkElementEEE PROC ; Anki::Embedded::GetNameIndex(const char*, const Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>&)
;;;798    
;;;799        s32 GetNameIndex(const char * name, const FixedLengthList<BenchmarkElement> &outputResults)
000000  b570              PUSH     {r4-r6,lr}
;;;800        {
000002  4606              MOV      r6,r0
000004  68c8              LDR      r0,[r1,#0xc]
000006  6b0d              LDR      r5,[r1,#0x30]
000008  1e44              SUBS     r4,r0,#1
00000a  d40d              BMI      |L2.40|
                  |L2.12|
00000c  eb0400c4          ADD      r0,r4,r4,LSL #3
000010  eb001004          ADD      r0,r0,r4,LSL #4
000014  eb050080          ADD      r0,r5,r0,LSL #2
000018  f1000124          ADD      r1,r0,#0x24
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       strcmp
000022  b120              CBZ      r0,|L2.46|
000024  1e64              SUBS     r4,r4,#1
000026  d5f1              BPL      |L2.12|
                  |L2.40|
000028  f04f30ff          MOV      r0,#0xffffffff
;;;801          return CompileBenchmarkResults::GetNameIndex(name, outputResults);
;;;802        }
00002c  bd70              POP      {r4-r6,pc}
                  |L2.46|
00002e  4620              MOV      r0,r4
000030  bd70              POP      {r4-r6,pc}
;;;803    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded14BeginBenchmarkEPKc||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14BeginBenchmarkEPKc PROC ; Anki::Embedded::BeginBenchmark(const char*)
;;;145    
;;;146        void BeginBenchmark(const char *name)
000000  b570              PUSH     {r4-r6,lr}
;;;147        {
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000008  4d0b              LDR      r5,|L3.56|
00000a  4603              MOV      r3,r0
00000c  480b              LDR      r0,|L3.60|
00000e  6829              LDR      r1,[r5,#0]  ; g_numBenchmarkEvents
;;;148          AddBenchmarkEvent(name, GetBenchmarkTime(), BENCHMARK_EVENT_BEGIN);
000010  f04f0c00          MOV      r12,#0
000014  eb010241          ADD      r2,r1,r1,LSL #1
000018  f8404022          STR      r4,[r0,r2,LSL #2]
00001c  eb000082          ADD      r0,r0,r2,LSL #2
000020  6043              STR      r3,[r0,#4]
000022  f880c008          STRB     r12,[r0,#8]
000026  1c48              ADDS     r0,r1,#1
000028  6028              STR      r0,[r5,#0]  ; g_numBenchmarkEvents
00002a  f5b05f7a          CMP      r0,#0x3e80
00002e  bfa4              ITT      GE
000030  f643607f          MOVGE    r0,#0x3e7f
000034  6028              STRGE    r0,[r5,#0]  ; g_numBenchmarkEvents
;;;149        } // void startBenchmark(const char *name)
000036  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

                  |L3.56|
                          DCD      ||.data||
                  |L3.60|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki8Embedded14SnprintElementEPciPKciS3_i||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i PROC ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
;;;161    
;;;162        s32 SnprintElement(char * buffer, const s32 bufferLength, const char * prefix, const s32 number, const char * suffix, const s32 minNumberCharacterToPrint)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;163        {
000004  b0a2              SUB      sp,sp,#0x88
000006  4690              MOV      r8,r2
000008  e9dd4528          LDRD     r4,r5,[sp,#0xa0]
00000c  460f              MOV      r7,r1
00000e  4606              MOV      r6,r0
;;;164          const s32 internalBufferLength = 128;
;;;165          char numberBuffer[internalBufferLength];
;;;166    
;;;167          SnprintfCommasS32(numberBuffer, internalBufferLength, number);
000010  461a              MOV      r2,r3
000012  2180              MOVS     r1,#0x80
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       SnprintfCommasS32
;;;168    
;;;169          s32 numPrinted = 0;
;;;170    
;;;171          numPrinted += snprintf(buffer, bufferLength, "%s%s%s", prefix, numberBuffer, suffix);
00001a  a802              ADD      r0,sp,#8
00001c  e9cd0400          STRD     r0,r4,[sp,#0]
000020  4643              MOV      r3,r8
000022  a20d              ADR      r2,|L4.88|
000024  4639              MOV      r1,r7
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       __2snprintf
00002c  4604              MOV      r4,r0
;;;172    
;;;173          const s32 numNumberCharactersPrinted = static_cast<s32>(strlen(numberBuffer));
00002e  a802              ADD      r0,sp,#8
000030  f7fffffe          BL       strlen
;;;174    
;;;175          for(s32 i=numNumberCharactersPrinted;  i<minNumberCharacterToPrint; i++) {
000034  42a8              CMP      r0,r5
;;;176            if(numPrinted < (bufferLength-1)) {
000036  bfbc              ITT      LT
000038  1e79              SUBLT    r1,r7,#1
;;;177              buffer[numPrinted] = ' ';
00003a  2220              MOVLT    r2,#0x20
00003c  da06              BGE      |L4.76|
                  |L4.62|
00003e  428c              CMP      r4,r1                 ;176
000040  bfbc              ITT      LT
000042  5532              STRBLT   r2,[r6,r4]
000044  1c64              ADDLT    r4,r4,#1
000046  1c40              ADDS     r0,r0,#1
000048  42a8              CMP      r0,r5                 ;175
00004a  dbf8              BLT      |L4.62|
                  |L4.76|
;;;178              numPrinted++;
;;;179            }
;;;180          }
;;;181    
;;;182          buffer[numPrinted] = '\0';
00004c  2000              MOVS     r0,#0
00004e  5530              STRB     r0,[r6,r4]
;;;183    
;;;184          return numPrinted;
;;;185        }
000050  b022              ADD      sp,sp,#0x88
000052  4620              MOV      r0,r4                 ;184
000054  e8bd81f0          POP      {r4-r8,pc}
;;;186    
                          ENDP

                  |L4.88|
000058  25732573          DCB      "%s%s%s",0
00005c  257300  
00005f  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded16BenchmarkElementC1EPKc||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  _ZN4Anki8Embedded16BenchmarkElementC2EPKc                  ; Alternate entry point ; Anki::Embedded::BenchmarkElement::BenchmarkElement__sub_object(const char*)
                  _ZN4Anki8Embedded16BenchmarkElementC1EPKc PROC ; Anki::Embedded::BenchmarkElement::BenchmarkElement(const char*)
;;;155    
;;;156        BenchmarkElement::BenchmarkElement(const char * name)
;;;157          : inclusive_mean(0), inclusive_min(u32_MAX), inclusive_max(0), inclusive_total(0), exclusive_mean(0), exclusive_min(u32_MAX), exclusive_max(0), exclusive_total(0), numEvents(0)
;;;158        {
;;;159          snprintf(this->name, BenchmarkElement::NAME_LENGTH, "%s", name);
;;;160        }
;;;161    
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2000              MOVS     r0,#0
000006  1e42              SUBS     r2,r0,#1
000008  e9c40200          STRD     r0,r2,[r4,#0]
00000c  60a0              STR      r0,[r4,#8]
00000e  60e0              STR      r0,[r4,#0xc]
000010  e9c40204          STRD     r0,r2,[r4,#0x10]
000014  61a0              STR      r0,[r4,#0x18]
000016  61e0              STR      r0,[r4,#0x1c]
000018  460b              MOV      r3,r1
00001a  6220              STR      r0,[r4,#0x20]
00001c  a203              ADR      r2,|L5.44|
00001e  2140              MOVS     r1,#0x40
000020  f1040024          ADD      r0,r4,#0x24
000024  f7fffffe          BL       __2snprintf
000028  4620              MOV      r0,r4
00002a  bd10              POP      {r4,pc}
                          ENDP

                  |L5.44|
00002c  257300            DCB      "%s",0
00002f  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded16InitBenchmarkingEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded16InitBenchmarkingEv PROC ; Anki::Embedded::InitBenchmarking()
;;;140    
;;;141        void InitBenchmarking()
000000  4901              LDR      r1,|L6.8|
;;;142        {
;;;143          g_numBenchmarkEvents = 0;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]  ; g_numBenchmarkEvents
;;;144        }
000006  4770              BX       lr
;;;145    
                          ENDP

                  |L6.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki8Embedded20ShowBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEERKNS1_INS0_23ShowBenchmarkParametersEEEfii||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded20ShowBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEERKNS1_INS0_23ShowBenchmarkParametersEEEfii PROC ; Anki::Embedded::ShowBenchmarkResults(const Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::ShowBenchmarkParameters>&, float, int, int)
;;;525    
;;;526        Result ShowBenchmarkResults(
000000  2001              MOVS     r0,#1
;;;527          const FixedLengthList<BenchmarkElement> &results,
;;;528          const FixedLengthList<ShowBenchmarkParameters> &namesToDisplay,
;;;529          const f32 pixelsPerMillisecond,
;;;530          const s32 imageHeight,
;;;531          const s32 imageWidth)
;;;532        {
;;;533    #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;534          static cv::Mat toShowImage;
;;;535          static s32 toShowImageColumn;
;;;536          static bool blinkOn = true;
;;;537    
;;;538          const s32 blackWidth = 10;
;;;539          //const s32 displayGridEveryNMilliseconds = 50;
;;;540          const s32 blinkerWidth = 7;
;;;541    
;;;542          const s32 totalTimeIndex = CompileBenchmarkResults::GetNameIndex("TotalTime", results);
;;;543    
;;;544          AnkiConditionalErrorAndReturnValue(totalTimeIndex >= 0,
;;;545            RESULT_FAIL, "ShowBenchmarkResults", "Requires a \"TotalTime\" benchmark event");
;;;546    
;;;547          AnkiConditionalErrorAndReturnValue(namesToDisplay.get_size() > 0,
;;;548            RESULT_FAIL_INVALID_PARAMETER, "ShowBenchmarkResults", "namesToDisplay must be have 1 or more names");
;;;549    
;;;550          if(toShowImage.rows != imageHeight || toShowImage.cols != imageWidth) {
;;;551            toShowImage = cv::Mat(imageHeight, imageWidth, CV_8UC3);
;;;552            toShowImage.setTo(0);
;;;553            toShowImageColumn = 0;
;;;554          }
;;;555    
;;;556          for(s32 iX=0; iX<blackWidth; iX++) {
;;;557            //const s32 x = MIN((toShowImageColumn + iX), imageWidth-1);
;;;558            //cv::rectangle(toShowImage, cv::Rect(x1,0,blackWidth,imageHeight-1), cv::Scalar(0,0,0), CV_FILLED);
;;;559    
;;;560            const s32 x = (toShowImageColumn + iX) % imageWidth;
;;;561            cv::line(
;;;562              toShowImage,
;;;563              cv::Point(x, 0),
;;;564              cv::Point(x, imageHeight - 1),
;;;565              cv::Scalar(0,0,0),
;;;566              1,
;;;567              4);
;;;568          }
;;;569    
;;;570          // Draw the total time as gray
;;;571          const s32 numPixelsTotal = Round<s32>(pixelsPerMillisecond * results[totalTimeIndex].inclusive_total / 1000.0f);
;;;572          cv::line(
;;;573            toShowImage,
;;;574            cv::Point(toShowImageColumn, imageHeight - 1),
;;;575            cv::Point(toShowImageColumn, MAX(0, imageHeight - numPixelsTotal)),
;;;576            cv::Scalar(128, 128, 128),
;;;577            1,
;;;578            4);
;;;579    
;;;580          // Draw the specific benchmarks as colors
;;;581          s32 curY = imageHeight - 1;
;;;582          for(s32 iName=0; iName<namesToDisplay.get_size(); iName++) {
;;;583            const s32 index = CompileBenchmarkResults::GetNameIndex(namesToDisplay[iName].name, results);
;;;584    
;;;585            if(index < 0)
;;;586              continue;
;;;587    
;;;588            const u32 timeElapsed = namesToDisplay[iName].showExclusiveTime ? results[index].exclusive_total : results[index].inclusive_total;
;;;589    
;;;590            const s32 numPixels = Round<s32>(pixelsPerMillisecond * timeElapsed / 1000.0f);
;;;591    
;;;592            cv::line(
;;;593              toShowImage,
;;;594              cv::Point(toShowImageColumn, curY),
;;;595              cv::Point(toShowImageColumn, MAX(0, curY-numPixels+1)),
;;;596              cv::Scalar(namesToDisplay[iName].blue, namesToDisplay[iName].green, namesToDisplay[iName].red),
;;;597              1,
;;;598              4);
;;;599    
;;;600            curY -= numPixels;
;;;601          } // for(s32 iName=0; iName<namesToDisplay.get_size(); iName++)
;;;602    
;;;603          const s32 numGridlines = static_cast<s32>( floor(imageHeight / (50.0f * pixelsPerMillisecond)) ) + 1;
;;;604          for(s32 i=0; i<numGridlines; i++) {
;;;605            const s32 curY = imageHeight - 1 - Round<s32>(50.0f * pixelsPerMillisecond * i);
;;;606            cv::line(
;;;607              toShowImage,
;;;608              cv::Point(0, curY),
;;;609              cv::Point(imageWidth-1, curY),
;;;610              cv::Scalar(196,196,196),
;;;611              1,
;;;612              4);
;;;613          }
;;;614    
;;;615          cv::imshow("Benchmarks", toShowImage);
;;;616          cv::moveWindow("Benchmarks", 150, 0);
;;;617    
;;;618          toShowImageColumn++;
;;;619    
;;;620          if(toShowImageColumn >= imageWidth)
;;;621            toShowImageColumn = 0;
;;;622    
;;;623          // Display all the benchmarks ( copied from Print() )
;;;624          {
;;;625            const s32 textHeightInPixels = 20;
;;;626            const f32 textFontSize = 1.0f;
;;;627            const bool microseconds = false;
;;;628            const bool verbose = false;
;;;629    
;;;630            const s32 textImageHeight = (results.get_size()+1)*textHeightInPixels + 10;
;;;631            const s32 textImageWidth = 1400;
;;;632            cv::Mat textImage(textImageHeight, textImageWidth, CV_8UC3);
;;;633            textImage.setTo(0);
;;;634    
;;;635            if(blinkOn) {
;;;636              //Draw a blinky rectangle at the upper right
;;;637    
;;;638              for(s32 y=0; y<blinkerWidth; y++) {
;;;639                for(s32 x=textImageWidth-blinkerWidth; x<textImageWidth; x++) {
;;;640                  textImage.at<u8>(y,x*3) = 0;
;;;641                  textImage.at<u8>(y,x*3+1) = 0;
;;;642                  textImage.at<u8>(y,x*3+2) = 0;
;;;643                }
;;;644              }
;;;645    
;;;646              for(s32 y=1; y<blinkerWidth-1; y++) {
;;;647                for(s32 x=textImageWidth+1-blinkerWidth; x<(textImageWidth-1); x++) {
;;;648                  textImage.at<u8>(y,x*3) = 255;
;;;649                  textImage.at<u8>(y,x*3+1) = 255;
;;;650                  textImage.at<u8>(y,x*3+2) = 255;
;;;651                }
;;;652              }
;;;653            } else { // if(blinkOn)
;;;654              for(s32 y=0; y<blinkerWidth; y++) {
;;;655                for(s32 x=textImageWidth-blinkerWidth; x<textImageWidth; x++) {
;;;656                  textImage.at<u8>(y,x*3) = 0;
;;;657                  textImage.at<u8>(y,x*3+1) = 0;
;;;658                  textImage.at<u8>(y,x*3+2) = 0;
;;;659                }
;;;660              }
;;;661            } // if(blinkOn) ... else
;;;662    
;;;663            s32 curY = 15;
;;;664    
;;;665            const s32 stringBufferLength = 256;
;;;666            char stringBuffer[stringBufferLength];
;;;667    
;;;668            const s32 scratchBufferLength = 128;
;;;669            char scratchBuffer[scratchBufferLength];
;;;670    
;;;671            MemoryStack scratch(scratchBuffer, scratchBufferLength);
;;;672    
;;;673            AnkiConditionalErrorAndReturnValue(scratch.IsValid(),
;;;674              RESULT_FAIL_OUT_OF_MEMORY, "ShowBenchmarkResults", "Out of memory");
;;;675    
;;;676            FixedLengthList<s32> minCharacterToPrint(10, scratch, Flags::Buffer(true, false, true));
;;;677    
;;;678            AnkiConditionalErrorAndReturnValue(minCharacterToPrint.IsValid(),
;;;679              RESULT_FAIL_OUT_OF_MEMORY, "ShowBenchmarkResults", "Out of memory");
;;;680    
;;;681            snprintf(stringBuffer, stringBufferLength, "Benchmark Results: (Exc=Exclusive Inc=Inclusive Tot=Total N=NumberOf)\n");
;;;682            cv::putText(textImage, stringBuffer, cv::Point(5,curY), cv::FONT_HERSHEY_PLAIN, textFontSize, cv::Scalar(255, 255, 255));
;;;683            curY += textHeightInPixels;
;;;684    
;;;685            const s32 numResults = results.get_size();
;;;686            const BenchmarkElement * const pResults = results.Pointer(0);
;;;687    
;;;688            f32 multiplier;
;;;689            if(microseconds) {
;;;690              multiplier = 1.0f;
;;;691            } else {
;;;692              multiplier = 1.0f / 1000.0f;
;;;693            }
;;;694    
;;;695            for(s32 x=0; x<numResults; x++) {
;;;696              const s32 values[] = {
;;;697                Round<s32>(pResults[x].exclusive_total*multiplier),
;;;698                Round<s32>(pResults[x].inclusive_total*multiplier),
;;;699                static_cast<s32>(pResults[x].numEvents),
;;;700                Round<s32>(pResults[x].exclusive_mean*multiplier),
;;;701                Round<s32>(pResults[x].exclusive_min*multiplier),
;;;702                Round<s32>(pResults[x].exclusive_max*multiplier),
;;;703                Round<s32>(pResults[x].inclusive_mean*multiplier),
;;;704                Round<s32>(pResults[x].inclusive_min*multiplier),
;;;705                Round<s32>(pResults[x].inclusive_max*multiplier)};
;;;706    
;;;707              minCharacterToPrint[0] = MAX(minCharacterToPrint[0], static_cast<s32>(strlen(pResults[x].name)));
;;;708    
;;;709              for(s32 iVal=0; iVal<=8; iVal++) {
;;;710                SnprintfCommasS32(stringBuffer, stringBufferLength, values[iVal]);
;;;711                minCharacterToPrint[iVal+1] = MAX(minCharacterToPrint[iVal+1], static_cast<s32>(strlen(stringBuffer)));
;;;712              }
;;;713            }
;;;714    
;;;715            for(s32 x=0; x<numResults; x++) {
;;;716              pResults[x].Snprint(stringBuffer, stringBufferLength, verbose, microseconds, &minCharacterToPrint);
;;;717              CvPutTextFixedWidth(textImage, stringBuffer, cv::Point(5,curY), cv::FONT_HERSHEY_PLAIN, textFontSize, cv::Scalar(255, 255, 255));
;;;718              curY += textHeightInPixels;
;;;719            }
;;;720    
;;;721            cv::imshow("All Benchmarks", textImage);
;;;722            //cv::moveWindow("All Benchmarks", 850, 675);
;;;723          }
;;;724    
;;;725          // Display the key
;;;726          {
;;;727            const s32 textHeightInPixels = 20;
;;;728            const f32 textFontSize = 1.0f;
;;;729    
;;;730            const s32 keyImageHeight = (namesToDisplay.get_size()+1)*textHeightInPixels;
;;;731            const s32 keyImageWidth = 640;
;;;732            cv::Mat keyImage(keyImageHeight, keyImageWidth, CV_8UC3);
;;;733            keyImage.setTo(0);
;;;734    
;;;735            if(blinkOn) {
;;;736              //Draw a blinky rectangle at the upper right
;;;737    
;;;738              for(s32 y=0; y<blinkerWidth; y++) {
;;;739                for(s32 x=keyImageWidth-blinkerWidth; x<keyImageWidth; x++) {
;;;740                  keyImage.at<u8>(y,x*3) = 0;
;;;741                  keyImage.at<u8>(y,x*3+1) = 0;
;;;742                  keyImage.at<u8>(y,x*3+2) = 0;
;;;743                }
;;;744              }
;;;745    
;;;746              for(s32 y=1; y<blinkerWidth-1; y++) {
;;;747                for(s32 x=keyImageWidth+1-blinkerWidth; x<(keyImageWidth-1); x++) {
;;;748                  keyImage.at<u8>(y,x*3) = 255;
;;;749                  keyImage.at<u8>(y,x*3+1) = 255;
;;;750                  keyImage.at<u8>(y,x*3+2) = 255;
;;;751                }
;;;752              }
;;;753            } else { // if(blinkOn)
;;;754              for(s32 y=0; y<blinkerWidth; y++) {
;;;755                for(s32 x=keyImageWidth-blinkerWidth; x<keyImageWidth; x++) {
;;;756                  keyImage.at<u8>(y,x*3) = 0;
;;;757                  keyImage.at<u8>(y,x*3+1) = 0;
;;;758                  keyImage.at<u8>(y,x*3+2) = 0;
;;;759                }
;;;760              }
;;;761            } // if(blinkOn) ... else
;;;762    
;;;763            s32 curY = 15;
;;;764    
;;;765            const s32 textBufferLength = 256;
;;;766            char textBuffer[textBufferLength];
;;;767    
;;;768            snprintf(textBuffer, textBufferLength, "Total: %dms", Round<s32>(results[totalTimeIndex].inclusive_total / 1000.0f));
;;;769            cv::putText(keyImage, textBuffer, cv::Point(5,curY), cv::FONT_HERSHEY_PLAIN, textFontSize, cv::Scalar(128, 128, 128));
;;;770            curY += textHeightInPixels;
;;;771    
;;;772            for(s32 iKey=namesToDisplay.get_size() - 1; iKey>=0; iKey--) {
;;;773              const s32 index = CompileBenchmarkResults::GetNameIndex(namesToDisplay[iKey].name, results);
;;;774    
;;;775              u32 time;
;;;776              if(index == -1) {
;;;777                time = 0;
;;;778              } else {
;;;779                time = namesToDisplay[iKey].showExclusiveTime ? results[index].exclusive_total : results[index].inclusive_total;
;;;780              }
;;;781    
;;;782              snprintf(textBuffer, textBufferLength,  "%s: %dms", namesToDisplay[iKey].name, Round<s32>(time/1000.0f));
;;;783              cv::putText(keyImage, textBuffer, cv::Point(5,curY), cv::FONT_HERSHEY_PLAIN, textFontSize, cv::Scalar(namesToDisplay[iKey].blue, namesToDisplay[iKey].green, namesToDisplay[iKey].red));
;;;784              curY += textHeightInPixels;
;;;785            }
;;;786    
;;;787            cv::imshow("Benchmarks Key", keyImage);
;;;788            cv::moveWindow("Benchmarks Key", 850, 540);
;;;789          }
;;;790    
;;;791          blinkOn = !blinkOn;
;;;792    
;;;793          return RESULT_OK;
;;;794    #else // #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;795          return RESULT_FAIL;
;;;796    #endif // #if ANKICORETECH_EMBEDDED_USE_OPENCV ... #else
;;;797        }
000002  4770              BX       lr
;;;798    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded21PrintBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEEbb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded21PrintBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEEbb PROC ; Anki::Embedded::PrintBenchmarkResults(const Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>&, bool, bool)
;;;448    
;;;449        Result PrintBenchmarkResults(const FixedLengthList<BenchmarkElement> &results, const bool verbose, const bool microseconds)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;450        {
000004  4604              MOV      r4,r0
000006  ed2d8b02          VPUSH    {d8}
00000a  f2ad5d5c          SUB      sp,sp,#0x55c
00000e  68c0              LDR      r0,[r0,#0xc]
000010  4690              MOV      r8,r2
000012  4689              MOV      r9,r1
;;;451          if(results.get_size() == 0) {
000014  2800              CMP      r0,#0
;;;452            return RESULT_OK;
;;;453          }
;;;454    
;;;455          const s32 scratchBufferLength = 128;
;;;456          char scratchBuffer[scratchBufferLength];
;;;457    
;;;458          const s32 stringBufferLength = 128;
;;;459          char stringBuffer[stringBufferLength];
;;;460    
;;;461          AnkiConditionalErrorAndReturnValue(AreValid(results),
;;;462            RESULT_FAIL_OUT_OF_MEMORY, "PrintBenchmarkResults", "Invalid objects");
;;;463    
;;;464          MemoryStack scratch(scratchBuffer, scratchBufferLength);
;;;465    
;;;466          AnkiConditionalErrorAndReturnValue(scratch.IsValid(),
;;;467            RESULT_FAIL_OUT_OF_MEMORY, "PrintBenchmarkResults", "Out of memory");
;;;468    
;;;469          FixedLengthList<s32> minCharacterToPrint(10, scratch, Flags::Buffer(true, false, true));
;;;470    
;;;471          AnkiConditionalErrorAndReturnValue(minCharacterToPrint.IsValid(),
;;;472            RESULT_FAIL_OUT_OF_MEMORY, "PrintBenchmarkResults", "Out of memory");
;;;473    
;;;474          CoreTechPrint("Benchmark Results: (Exc=Exclusive Inc=Inclusive Tot=Total N=NumberOf)\n");
;;;475    
;;;476          const s32 numResults = results.get_size();
;;;477          const BenchmarkElement * const pResults = results.Pointer(0);
;;;478    
;;;479          f32 multiplier;
;;;480          if(microseconds) {
;;;481            multiplier = 1.0f;
;;;482          } else {
;;;483            multiplier = 1.0f / 1000.0f;
;;;484          }
;;;485    
;;;486          for(s32 x=0; x<numResults; x++) {
;;;487            const s32 values[] = {
;;;488              Round<s32>(pResults[x].exclusive_total*multiplier),
;;;489              Round<s32>(pResults[x].inclusive_total*multiplier),
;;;490              static_cast<s32>(pResults[x].numEvents),
;;;491              Round<s32>(pResults[x].exclusive_mean*multiplier),
;;;492              Round<s32>(pResults[x].exclusive_min*multiplier),
;;;493              Round<s32>(pResults[x].exclusive_max*multiplier),
;;;494              Round<s32>(pResults[x].inclusive_mean*multiplier),
;;;495              Round<s32>(pResults[x].inclusive_min*multiplier),
;;;496              Round<s32>(pResults[x].inclusive_max*multiplier)};
;;;497    
;;;498            minCharacterToPrint[0] = MAX(minCharacterToPrint[0], static_cast<s32>(strlen(pResults[x].name)));
;;;499    
;;;500            for(s32 iVal=0; iVal<=8; iVal++) {
;;;501              SnprintfCommasS32(stringBuffer, stringBufferLength, values[iVal]);
;;;502              minCharacterToPrint[iVal+1] = MAX(minCharacterToPrint[iVal+1], static_cast<s32>(strlen(stringBuffer)));
;;;503            }
;;;504          }
;;;505    
;;;506          for(s32 x=0; x<numResults; x++) {
;;;507            pResults[x].Print(verbose, microseconds, &minCharacterToPrint);
;;;508            CoreTechPrint("\n");
;;;509          }
;;;510    
;;;511          CoreTechPrint("\n");
;;;512    
;;;513          return RESULT_OK;
;;;514        }
000016  bf02              ITTT     EQ
000018  f20d5d5c          ADDEQ    sp,sp,#0x55c
00001c  ecbd8b02          VPOPEQ   {d8}
000020  e8bd8ff0          POPEQ    {r4-r11,pc}
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::IsValid() const
00002a  4dbd              LDR      r5,|L8.800|
00002c  4ebd              LDR      r6,|L8.804|
00002e  2800              CMP      r0,#0                 ;461
000030  d04c              BEQ      |L8.204|
000032  2201              MOVS     r2,#1                 ;464
000034  2300              MOVS     r3,#0                 ;464
000036  4611              MOV      r1,r2                 ;464
000038  f20d40bc          ADD      r0,sp,#0x4bc          ;464
00003c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000040  6803              LDR      r3,[r0,#0]            ;464
000042  2280              MOVS     r2,#0x80              ;464
000044  f50d6198          ADD      r1,sp,#0x4c0          ;464
000048  f50d60a8          ADD      r0,sp,#0x540          ;464
00004c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE ; Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
000050  f50d60a8          ADD      r0,sp,#0x540          ;466
000054  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000058  2800              CMP      r0,#0                 ;466
00005a  d048              BEQ      |L8.238|
00005c  2301              MOVS     r3,#1                 ;469
00005e  2200              MOVS     r2,#0                 ;469
000060  4619              MOV      r1,r3                 ;469
000062  f20d40bc          ADD      r0,sp,#0x4bc          ;469
000066  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00006a  6803              LDR      r3,[r0,#0]            ;469
00006c  f50d62a8          ADD      r2,sp,#0x540          ;469
000070  210a              MOVS     r1,#0xa               ;469
000072  f50d6091          ADD      r0,sp,#0x488          ;469
000076  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00007a  f8dd1494          LDR      r1,[sp,#0x494]        ;469
00007e  f8dd04a4          LDR      r0,[sp,#0x4a4]        ;469
000082  4281              CMP      r1,r0                 ;469
000084  dc3f              BGT      |L8.262|
000086  f8dd04b0          LDR      r0,[sp,#0x4b0]        ;469
00008a  b140              CBZ      r0,|L8.158|
00008c  f8dd04a0          LDR      r0,[sp,#0x4a0]        ;469
000090  2800              CMP      r0,#0                 ;469
000092  bfa3              ITTTE    GE                    ;469
000094  f8dd04a4          LDRGE    r0,[sp,#0x4a4]        ;469
000098  2800              CMPGE    r0,#0                 ;469
00009a  2001              MOVGE    r0,#1                 ;469
00009c  2000              MOVLT    r0,#0                 ;469
                  |L8.158|
00009e  2800              CMP      r0,#0                 ;471
0000a0  d031              BEQ      |L8.262|
0000a2  48a1              LDR      r0,|L8.808|
0000a4  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
0000a8  68e7              LDR      r7,[r4,#0xc]          ;480
0000aa  6b26              LDR      r6,[r4,#0x30]         ;480
0000ac  f1b80f00          CMP      r8,#0                 ;480
0000b0  bf0c              ITE      EQ                    ;483
0000b2  ed9f8a9e          VLDREQ   s16,|L8.812|
0000b6  eeb78a00          VMOVNE.F32 s16,#1.00000000       ;481
0000ba  2500              MOVS     r5,#0                 ;486
0000bc  2f00              CMP      r7,#0                 ;486
0000be  bfc4              ITT      GT                    ;486
0000c0  eef68a00          VMOVGT.F32 s17,#0.50000000       ;486
0000c4  46ea              MOVGT    r10,sp                ;487
0000c6  dc2a              BGT      |L8.286|
0000c8  f000b908          B.W      |L8.732|
                  |L8.204|
0000cc  f24010cd          MOV      r0,#0x1cd             ;461
0000d0  e9cd5000          STRD     r5,r0,[sp,#0]         ;461
0000d4  a396              ADR      r3,|L8.816|
0000d6  a2a2              ADR      r2,|L8.864|
0000d8  a1a5              ADR      r1,|L8.880|
0000da  2005              MOVS     r0,#5                 ;461
0000dc  f7fffffe          BL       _Anki_Log
0000e0  4630              MOV      r0,r6                 ;461
                  |L8.226|
0000e2  f20d5d5c          ADD      sp,sp,#0x55c
0000e6  ecbd8b02          VPOP     {d8}
0000ea  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.238|
0000ee  f44f70e9          MOV      r0,#0x1d2             ;466
0000f2  e9cd5000          STRD     r5,r0,[sp,#0]         ;466
0000f6  a38e              ADR      r3,|L8.816|
0000f8  a2a3              ADR      r2,|L8.904|
0000fa  a19d              ADR      r1,|L8.880|
0000fc  2005              MOVS     r0,#5                 ;466
0000fe  f7fffffe          BL       _Anki_Log
000102  4630              MOV      r0,r6                 ;466
000104  e7ed              B        |L8.226|
                  |L8.262|
000106  f24010d7          MOV      r0,#0x1d7             ;471
00010a  e9cd5000          STRD     r5,r0,[sp,#0]         ;471
00010e  a388              ADR      r3,|L8.816|
000110  a29d              ADR      r2,|L8.904|
000112  a197              ADR      r1,|L8.880|
000114  2005              MOVS     r0,#5                 ;471
000116  f7fffffe          BL       _Anki_Log
00011a  4630              MOV      r0,r6                 ;471
00011c  e7e1              B        |L8.226|
                  |L8.286|
00011e  eb0500c5          ADD      r0,r5,r5,LSL #3       ;487
000122  eb001005          ADD      r0,r0,r5,LSL #4       ;487
000126  eb060480          ADD      r4,r6,r0,LSL #2       ;487
00012a  ed940a07          VLDR     s0,[r4,#0x1c]         ;487
00012e  eeb80a40          VCVT.F32.U32 s0,s0                 ;487
000132  ee200a08          VMUL.F32 s0,s0,s16             ;487
000136  eeb50ac0          VCMPE.F32 s0,#0.0               ;487
00013a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;487
00013e  bfcc              ITE      GT                    ;487
000140  ee300a28          VADDGT.F32 s0,s0,s17             ;487
000144  ee300a68          VSUBLE.F32 s0,s0,s17             ;487
000148  eebd0ac0          VCVT.S32.F32 s0,s0                 ;487
00014c  ed8d0a00          VSTR     s0,[sp,#0]            ;487
000150  ed940a03          VLDR     s0,[r4,#0xc]          ;487
000154  eeb80a40          VCVT.F32.U32 s0,s0                 ;487
000158  ee200a08          VMUL.F32 s0,s0,s16             ;487
00015c  eeb50ac0          VCMPE.F32 s0,#0.0               ;487
000160  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;487
000164  bfcc              ITE      GT                    ;487
000166  ee300a28          VADDGT.F32 s0,s0,s17             ;487
00016a  ee300a68          VSUBLE.F32 s0,s0,s17             ;487
00016e  eebd0ac0          VCVT.S32.F32 s0,s0                 ;487
000172  ed8d0a01          VSTR     s0,[sp,#4]            ;487
000176  6a21              LDR      r1,[r4,#0x20]         ;487
000178  9102              STR      r1,[sp,#8]            ;487
00017a  ed940a04          VLDR     s0,[r4,#0x10]         ;487
00017e  eeb80a40          VCVT.F32.U32 s0,s0                 ;487
000182  ee200a08          VMUL.F32 s0,s0,s16             ;487
000186  eeb50ac0          VCMPE.F32 s0,#0.0               ;487
00018a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;487
00018e  bfcc              ITE      GT                    ;487
000190  ee300a28          VADDGT.F32 s0,s0,s17             ;487
000194  ee300a68          VSUBLE.F32 s0,s0,s17             ;487
000198  eebd0ac0          VCVT.S32.F32 s0,s0                 ;487
00019c  ed8d0a03          VSTR     s0,[sp,#0xc]          ;487
0001a0  ed940a05          VLDR     s0,[r4,#0x14]         ;487
0001a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;487
0001a8  ee200a08          VMUL.F32 s0,s0,s16             ;487
0001ac  eeb50ac0          VCMPE.F32 s0,#0.0               ;487
0001b0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;487
0001b4  bfcc              ITE      GT                    ;487
0001b6  ee300a28          VADDGT.F32 s0,s0,s17             ;487
0001ba  ee300a68          VSUBLE.F32 s0,s0,s17             ;487
0001be  eebd0ac0          VCVT.S32.F32 s0,s0                 ;487
0001c2  ed8d0a04          VSTR     s0,[sp,#0x10]         ;487
0001c6  ed940a06          VLDR     s0,[r4,#0x18]         ;487
0001ca  eeb80a40          VCVT.F32.U32 s0,s0                 ;487
0001ce  ee200a08          VMUL.F32 s0,s0,s16             ;487
0001d2  eeb50ac0          VCMPE.F32 s0,#0.0               ;487
0001d6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;487
0001da  bfcc              ITE      GT                    ;487
0001dc  ee300a28          VADDGT.F32 s0,s0,s17             ;487
0001e0  ee300a68          VSUBLE.F32 s0,s0,s17             ;487
0001e4  eebd0ac0          VCVT.S32.F32 s0,s0                 ;487
0001e8  ed8d0a05          VSTR     s0,[sp,#0x14]         ;487
0001ec  f8560020          LDR      r0,[r6,r0,LSL #2]     ;487
0001f0  ee000a10          VMOV     s0,r0                 ;487
0001f4  eeb80a40          VCVT.F32.U32 s0,s0                 ;487
0001f8  ee200a08          VMUL.F32 s0,s0,s16             ;487
0001fc  eeb50ac0          VCMPE.F32 s0,#0.0               ;487
000200  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;487
000204  bfcc              ITE      GT                    ;487
000206  ee300a28          VADDGT.F32 s0,s0,s17             ;487
00020a  ee300a68          VSUBLE.F32 s0,s0,s17             ;487
00020e  eebd0ac0          VCVT.S32.F32 s0,s0                 ;487
000212  ed8d0a06          VSTR     s0,[sp,#0x18]         ;487
000216  ed940a01          VLDR     s0,[r4,#4]            ;487
00021a  eeb80a40          VCVT.F32.U32 s0,s0                 ;487
00021e  ee200a08          VMUL.F32 s0,s0,s16             ;487
000222  eeb50ac0          VCMPE.F32 s0,#0.0               ;487
000226  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;487
00022a  bfcc              ITE      GT                    ;487
00022c  ee300a28          VADDGT.F32 s0,s0,s17             ;487
000230  ee300a68          VSUBLE.F32 s0,s0,s17             ;487
000234  eebd0ac0          VCVT.S32.F32 s0,s0                 ;487
000238  ed8d0a07          VSTR     s0,[sp,#0x1c]         ;487
00023c  ed940a02          VLDR     s0,[r4,#8]            ;487
000240  eeb80a40          VCVT.F32.U32 s0,s0                 ;487
000244  ee200a08          VMUL.F32 s0,s0,s16             ;487
000248  eeb50ac0          VCMPE.F32 s0,#0.0               ;487
00024c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;487
000250  bfcc              ITE      GT                    ;487
000252  ee300a28          VADDGT.F32 s0,s0,s17             ;487
000256  ee300a68          VSUBLE.F32 s0,s0,s17             ;487
00025a  eebd0ac0          VCVT.S32.F32 s0,s0                 ;487
00025e  ed8d0a08          VSTR     s0,[sp,#0x20]         ;487
000262  f8dd04b8          LDR      r0,[sp,#0x4b8]        ;498
000266  f8d0b000          LDR      r11,[r0,#0]           ;498
00026a  f1040024          ADD      r0,r4,#0x24           ;498
00026e  f7fffffe          BL       strlen
000272  4583              CMP      r11,r0                ;498
000274  bfd3              ITEET    LE                    ;498
000276  f1040024          ADDLE    r0,r4,#0x24           ;498
00027a  f8dd04b8          LDRGT    r0,[sp,#0x4b8]        ;498
00027e  6800              LDRGT    r0,[r0,#0]            ;498
000280  f7fffffe          BLLE     strlen
000284  f8dd14b8          LDR      r1,[sp,#0x4b8]        ;498
000288  2400              MOVS     r4,#0                 ;500
00028a  6008              STR      r0,[r1,#0]            ;500
                  |L8.652|
00028c  f85a2024          LDR      r2,[r10,r4,LSL #2]    ;501
000290  2180              MOVS     r1,#0x80              ;501
000292  f50d6081          ADD      r0,sp,#0x408          ;501
000296  f7fffffe          BL       SnprintfCommasS32
00029a  f8dd14b8          LDR      r1,[sp,#0x4b8]        ;502
00029e  1c60              ADDS     r0,r4,#1              ;502
0002a0  f851b020          LDR      r11,[r1,r0,LSL #2]    ;502
0002a4  f50d6081          ADD      r0,sp,#0x408          ;502
0002a8  f7fffffe          BL       strlen
0002ac  4583              CMP      r11,r0                ;502
0002ae  dd05              BLE      |L8.700|
0002b0  f8dd14b8          LDR      r1,[sp,#0x4b8]        ;502
0002b4  1c60              ADDS     r0,r4,#1              ;502
0002b6  f8510020          LDR      r0,[r1,r0,LSL #2]     ;502
0002ba  e003              B        |L8.708|
                  |L8.700|
0002bc  f50d6081          ADD      r0,sp,#0x408          ;502
0002c0  f7fffffe          BL       strlen
                  |L8.708|
0002c4  1c61              ADDS     r1,r4,#1              ;502
0002c6  f8dd24b8          LDR      r2,[sp,#0x4b8]        ;502
0002ca  1c64              ADDS     r4,r4,#1              ;502
0002cc  2c08              CMP      r4,#8                 ;500
0002ce  f8420021          STR      r0,[r2,r1,LSL #2]     ;502
0002d2  dddb              BLE      |L8.652|
0002d4  1c6d              ADDS     r5,r5,#1              ;500
0002d6  42af              CMP      r7,r5                 ;486
0002d8  f73faf21          BGT      |L8.286|
                  |L8.732|
0002dc  2400              MOVS     r4,#0                 ;506
0002de  2f00              CMP      r7,#0                 ;506
0002e0  dd18              BLE      |L8.788|
                  |L8.738|
0002e2  f50d6191          ADD      r1,sp,#0x488          ;507
0002e6  e9cd8100          STRD     r8,r1,[sp,#0]         ;507
0002ea  eb0400c4          ADD      r0,r4,r4,LSL #3       ;507
0002ee  eb001004          ADD      r0,r0,r4,LSL #4       ;507
0002f2  eb060080          ADD      r0,r6,r0,LSL #2       ;507
0002f6  464b              MOV      r3,r9                 ;507
0002f8  f44f6280          MOV      r2,#0x400             ;507
0002fc  a902              ADD      r1,sp,#8              ;507
0002fe  f7fffffe          BL       _ZNK4Anki8Embedded16BenchmarkElement7SnprintEPcibbPKNS0_15FixedLengthListIiEE ; Anki::Embedded::BenchmarkElement::Snprint(char*, int, bool, bool, const Anki::Embedded::FixedLengthList<int>*) const
000302  a802              ADD      r0,sp,#8              ;507
000304  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000308  a023              ADR      r0,|L8.920|
00030a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00030e  1c64              ADDS     r4,r4,#1              ;508
000310  42a7              CMP      r7,r4                 ;506
000312  dce6              BGT      |L8.738|
                  |L8.788|
000314  a020              ADR      r0,|L8.920|
000316  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00031a  2000              MOVS     r0,#0                 ;513
00031c  e6e1              B        |L8.226|
;;;515    
                          ENDP

00031e  0000              DCW      0x0000
                  |L8.800|
                          DCD      ||.constdata||
                  |L8.804|
                          DCD      0x01000001
                  |L8.808|
                          DCD      ||.conststring||
                  |L8.812|
00032c  3a83126f          DCFS     0x3a83126f ; 0.0010000000474974513
                  |L8.816|
000330  2e2e5c63          DCB      "..\\coretech\\common\\robot\\src\\benchmarking.cpp",0
000334  6f726574
000338  6563685c
00033c  636f6d6d
000340  6f6e5c72
000344  6f626f74
000348  5c737263
00034c  5c62656e
000350  63686d61
000354  726b696e
000358  672e6370
00035c  7000    
00035e  00                DCB      0
00035f  00                DCB      0
                  |L8.864|
000360  496e7661          DCB      "Invalid objects",0
000364  6c696420
000368  6f626a65
00036c  63747300
                  |L8.880|
000370  5072696e          DCB      "PrintBenchmarkResults",0
000374  7442656e
000378  63686d61
00037c  726b5265
000380  73756c74
000384  7300    
000386  00                DCB      0
000387  00                DCB      0
                  |L8.904|
000388  4f757420          DCB      "Out of memory",0
00038c  6f66206d
000390  656d6f72
000394  7900    
000396  00                DCB      0
000397  00                DCB      0
                  |L8.920|
000398  0a00              DCB      "\n",0
00039a  00                DCB      0
00039b  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded23ComputeBenchmarkResultsERNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded23ComputeBenchmarkResultsERNS0_11MemoryStackE PROC ; Anki::Embedded::ComputeBenchmarkResults(Anki::Embedded::MemoryStack&)
;;;443    
;;;444        FixedLengthList<BenchmarkElement> ComputeBenchmarkResults(MemoryStack &memory)
000000  460b              MOV      r3,r1
;;;445        {
;;;446          return CompileBenchmarkResults::ComputeBenchmarkResults(g_numBenchmarkEvents, g_benchmarkEvents, memory);
000002  4903              LDR      r1,|L9.16|
000004  4a01              LDR      r2,|L9.12|
000006  6809              LDR      r1,[r1,#0]  ; g_numBenchmarkEvents
000008  f7ffbffe          B.W      _ZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackE ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)
;;;447        } // FixedLengthList<BenchmarkElement> ComputeBenchmarkResults(MemoryStack &memory)
;;;448    
                          ENDP

                  |L9.12|
                          DCD      ||.bss||
                  |L9.16|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki8Embedded23ShowBenchmarkParametersC1EPKcbPKh||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded23ShowBenchmarkParametersC2EPKcbPKh                  ; Alternate entry point ; Anki::Embedded::ShowBenchmarkParameters::ShowBenchmarkParameters__sub_object(const char*, bool, const unsigned char*)
                  _ZN4Anki8Embedded23ShowBenchmarkParametersC1EPKcbPKh PROC ; Anki::Embedded::ShowBenchmarkParameters::ShowBenchmarkParameters(const char*, bool, const unsigned char*)
;;;131      {
;;;132        ShowBenchmarkParameters::ShowBenchmarkParameters(const char * name, const bool showExclusiveTime, const u8 *color)
;;;133        {
;;;134          strncpy(this->name, name, BenchmarkElement::NAME_LENGTH);
;;;135          this->showExclusiveTime = showExclusiveTime;
;;;136          this->red = color[0];
;;;137          this->green = color[1];
;;;138          this->blue = color[2];
;;;139        }
;;;140    
000000  b570              PUSH     {r4-r6,lr}
000002  4616              MOV      r6,r2
000004  461d              MOV      r5,r3
000006  4604              MOV      r4,r0
000008  2240              MOVS     r2,#0x40
00000a  f7fffffe          BL       strncpy
00000e  f8846040          STRB     r6,[r4,#0x40]
000012  7828              LDRB     r0,[r5,#0]
000014  f8840041          STRB     r0,[r4,#0x41]
000018  7868              LDRB     r0,[r5,#1]
00001a  f8840042          STRB     r0,[r4,#0x42]
00001e  78a8              LDRB     r0,[r5,#2]
000020  f8840043          STRB     r0,[r4,#0x43]
000024  4620              MOV      r0,r4
000026  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i._ZN4Anki8Embedded24PrintPercentileBenchmarkERKNS0_15FixedLengthListINS1_INS0_16BenchmarkElementEEEEEifNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded24PrintPercentileBenchmarkERKNS0_15FixedLengthListINS1_INS0_16BenchmarkElementEEEEEifNS0_11MemoryStackE PROC ; Anki::Embedded::PrintPercentileBenchmark(const Anki::Embedded::FixedLengthList<Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>>&, int, float, Anki::Embedded::MemoryStack)
;;;803    
;;;804        Result PrintPercentileBenchmark(const FixedLengthList<FixedLengthList<BenchmarkElement> > &benchmarkElements, const s32 numRuns, const f32 elementPercentile, MemoryStack scratch)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;805        {
000004  4605              MOV      r5,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  460c              MOV      r4,r1
;;;806          // Check that all the lists have the same number and type of benchmarks
;;;807          const s32 numElements = benchmarkElements[0].get_size();
;;;808          for(s32 iRun=1; iRun<numRuns; iRun++) {
;;;809            if(benchmarkElements[0].get_size() != benchmarkElements[iRun].get_size()) { AnkiError("PrintPercentileBenchmark", "number failure %d!=%d", benchmarkElements[0].get_size(), benchmarkElements[iRun].get_size()); return RESULT_FAIL; }
00000c  f8df83fc          LDR      r8,|L11.1036|
000010  f04f0901          MOV      r9,#1                 ;808
000014  ed2d8b02          VPUSH    {d8}                  ;805
000018  b09a              SUB      sp,sp,#0x68           ;805
00001a  6b00              LDR      r0,[r0,#0x30]         ;805
00001c  eeb08a40          VMOV.F32 s16,s0                ;805
000020  2901              CMP      r1,#1                 ;808
000022  68c6              LDR      r6,[r0,#0xc]          ;808
000024  f340808e          BLE.W    |L11.324|
                  |L11.40|
000028  6b28              LDR      r0,[r5,#0x30]         ;805
00002a  eb090289          ADD      r2,r9,r9,LSL #2       ;805
00002e  eb020bc9          ADD      r11,r2,r9,LSL #3      ;805
000032  68c1              LDR      r1,[r0,#0xc]          ;805
000034  eb00008b          ADD      r0,r0,r11,LSL #2      ;805
000038  68c0              LDR      r0,[r0,#0xc]          ;805
00003a  4281              CMP      r1,r0
00003c  d017              BEQ      |L11.110|
00003e  eb090189          ADD      r1,r9,r9,LSL #2
000042  6b28              LDR      r0,[r5,#0x30]
000044  eb0101c9          ADD      r1,r1,r9,LSL #3
000048  eb000181          ADD      r1,r0,r1,LSL #2
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  68c9              LDR      r1,[r1,#0xc]
000050  9103              STR      r1,[sp,#0xc]
000052  f2403229          MOV      r2,#0x329
000056  f8cd8000          STR      r8,[sp,#0]
00005a  e9cd2001          STRD     r2,r0,[sp,#4]
00005e  a3ec              ADR      r3,|L11.1040|
000060  a2f7              ADR      r2,|L11.1088|
000062  a1fd              ADR      r1,|L11.1112|
000064  2005              MOVS     r0,#5
000066  f7fffffe          BL       _Anki_Log
00006a  f000bb67          B.W      |L11.1852|
                  |L11.110|
;;;810            for(s32 i=0; i<numElements; i++) {
00006e  2700              MOVS     r7,#0
000070  2e00              CMP      r6,#0
000072  dd62              BLE      |L11.314|
                  |L11.116|
000074  6b28              LDR      r0,[r5,#0x30]
000076  eb0702c7          ADD      r2,r7,r7,LSL #3
00007a  eb021a07          ADD      r10,r2,r7,LSL #4
00007e  6b01              LDR      r1,[r0,#0x30]
000080  eb01028a          ADD      r2,r1,r10,LSL #2
000084  eb00018b          ADD      r1,r0,r11,LSL #2
000088  6a13              LDR      r3,[r2,#0x20]
00008a  6b09              LDR      r1,[r1,#0x30]
00008c  eb01018a          ADD      r1,r1,r10,LSL #2
;;;811              if(benchmarkElements[0][i].numEvents != benchmarkElements[iRun][i].numEvents) { AnkiError("PrintPercentileBenchmark", "number failure %d!=%d (%s,%s)", benchmarkElements[0][i].numEvents, benchmarkElements[iRun][i].numEvents, benchmarkElements[0][i].name, benchmarkElements[iRun][i].name); return RESULT_FAIL; }
000090  f8d1c020          LDR      r12,[r1,#0x20]
000094  4563              CMP      r3,r12
000096  d024              BEQ      |L11.226|
000098  eb090c89          ADD      r12,r9,r9,LSL #2
00009c  eb0c0cc9          ADD      r12,r12,r9,LSL #3
0000a0  eb00038c          ADD      r3,r0,r12,LSL #2
0000a4  eb070cc7          ADD      r12,r7,r7,LSL #3
0000a8  6b1b              LDR      r3,[r3,#0x30]
0000aa  eb0c1c07          ADD      r12,r12,r7,LSL #4
0000ae  6b00              LDR      r0,[r0,#0x30]
0000b0  eb03038c          ADD      r3,r3,r12,LSL #2
0000b4  6a09              LDR      r1,[r1,#0x20]
0000b6  6a12              LDR      r2,[r2,#0x20]
0000b8  3324              ADDS     r3,r3,#0x24
0000ba  eb00008a          ADD      r0,r0,r10,LSL #2
0000be  9305              STR      r3,[sp,#0x14]
0000c0  3024              ADDS     r0,r0,#0x24
0000c2  e9cd1003          STRD     r1,r0,[sp,#0xc]
0000c6  f240302b          MOV      r0,#0x32b
0000ca  f8cd8000          STR      r8,[sp,#0]
0000ce  e9cd0201          STRD     r0,r2,[sp,#4]
0000d2  a3cf              ADR      r3,|L11.1040|
0000d4  a2e7              ADR      r2,|L11.1140|
0000d6  a1e0              ADR      r1,|L11.1112|
0000d8  2005              MOVS     r0,#5
0000da  f7fffffe          BL       _Anki_Log
0000de  f000bb2d          B.W      |L11.1852|
                  |L11.226|
;;;812              if(strcmp(benchmarkElements[0][i].name, benchmarkElements[iRun][i].name) != 0) { AnkiError("PrintPercentileBenchmark", "name failure %s!=%s", benchmarkElements[0][i].name, benchmarkElements[iRun][i].name); return RESULT_FAIL; }
0000e2  f1020024          ADD      r0,r2,#0x24
0000e6  3124              ADDS     r1,r1,#0x24
0000e8  f7fffffe          BL       strcmp
0000ec  2800              CMP      r0,#0
0000ee  d021              BEQ      |L11.308|
0000f0  eb090189          ADD      r1,r9,r9,LSL #2
0000f4  6b28              LDR      r0,[r5,#0x30]
0000f6  eb0101c9          ADD      r1,r1,r9,LSL #3
0000fa  eb000181          ADD      r1,r0,r1,LSL #2
0000fe  eb0702c7          ADD      r2,r7,r7,LSL #3
000102  6b09              LDR      r1,[r1,#0x30]
000104  eb021207          ADD      r2,r2,r7,LSL #4
000108  6b00              LDR      r0,[r0,#0x30]
00010a  eb010182          ADD      r1,r1,r2,LSL #2
00010e  3124              ADDS     r1,r1,#0x24
000110  eb00008a          ADD      r0,r0,r10,LSL #2
000114  9103              STR      r1,[sp,#0xc]
000116  f44f724b          MOV      r2,#0x32c
00011a  3024              ADDS     r0,r0,#0x24
00011c  f8cd8000          STR      r8,[sp,#0]
000120  e9cd2001          STRD     r2,r0,[sp,#4]
000124  a3ba              ADR      r3,|L11.1040|
000126  a2db              ADR      r2,|L11.1172|
000128  a1cb              ADR      r1,|L11.1112|
00012a  2005              MOVS     r0,#5
00012c  f7fffffe          BL       _Anki_Log
000130  f000bb04          B.W      |L11.1852|
                  |L11.308|
000134  1c7f              ADDS     r7,r7,#1
000136  42b7              CMP      r7,r6                 ;810
000138  db9c              BLT      |L11.116|
                  |L11.314|
00013a  f1090901          ADD      r9,r9,#1              ;810
00013e  45a1              CMP      r9,r4                 ;808
000140  f6ffaf72          BLT      |L11.40|
                  |L11.324|
;;;813            }
;;;814          }
;;;815    
;;;816          // Compute the medians
;;;817          FixedLengthList<BenchmarkElement> medianBenchmarkElements(benchmarkElements[0].get_size(), scratch, Flags::Buffer(true, false, true));
000144  2301              MOVS     r3,#1
000146  2200              MOVS     r2,#0
000148  4619              MOV      r1,r3
00014a  a818              ADD      r0,sp,#0x60
00014c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000150  4601              MOV      r1,r0
000152  6b28              LDR      r0,[r5,#0x30]
000154  680b              LDR      r3,[r1,#0]
000156  f04f0900          MOV      r9,#0
00015a  68c0              LDR      r0,[r0,#0xc]
00015c  9a20              LDR      r2,[sp,#0x80]
00015e  4601              MOV      r1,r0
000160  a80b              ADD      r0,sp,#0x2c
000162  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;818          Array<u32> sortedElements(1, numRuns, scratch);
000166  f04f0b01          MOV      r11,#1
00016a  2300              MOVS     r3,#0
00016c  af06              ADD      r7,sp,#0x18
00016e  461a              MOV      r2,r3
000170  4659              MOV      r1,r11
000172  a819              ADD      r0,sp,#0x64
000174  f8dda080          LDR      r10,[sp,#0x80]
000178  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00017c  6800              LDR      r0,[r0,#0]
00017e  9002              STR      r0,[sp,#8]
000180  f107000c          ADD      r0,r7,#0xc
000184  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000188  f1a0070c          SUB      r7,r0,#0xc
00018c  f04f30ff          MOV      r0,#0xffffffff
000190  6038              STR      r0,[r7,#0]
000192  6078              STR      r0,[r7,#4]
000194  f8c79010          STR      r9,[r7,#0x10]
000198  60b8              STR      r0,[r7,#8]
00019a  2c00              CMP      r4,#0
00019c  da0a              BGE      |L11.436|
00019e  217d              MOVS     r1,#0x7d
0001a0  48c1              LDR      r0,|L11.1192|
0001a2  e9cd0100          STRD     r0,r1,[sp,#0]
0001a6  4bc1              LDR      r3,|L11.1196|
0001a8  4ac1              LDR      r2,|L11.1200|
0001aa  49c2              LDR      r1,|L11.1204|
0001ac  2005              MOVS     r0,#5
0001ae  f7fffffe          BL       _Anki_Log
0001b2  e04f              B        |L11.596|
                  |L11.436|
0001b4  2000              MOVS     r0,#0
0001b6  9003              STR      r0,[sp,#0xc]
0001b8  4620              MOV      r0,r4
0001ba  2c01              CMP      r4,#1
0001bc  bfd8              IT       LE
0001be  2001              MOVLE    r0,#1
0001c0  0080              LSLS     r0,r0,#2
0001c2  300f              ADDS     r0,r0,#0xf
0001c4  f020090f          BIC      r9,r0,#0xf
0001c8  a803              ADD      r0,sp,#0xc
0001ca  9005              STR      r0,[sp,#0x14]
0001cc  9802              LDR      r0,[sp,#8]
0001ce  9004              STR      r0,[sp,#0x10]
0001d0  f1b90f00          CMP      r9,#0
0001d4  dc0a              BGT      |L11.492|
0001d6  f240310b          MOV      r1,#0x30b
0001da  48b7              LDR      r0,|L11.1208|
0001dc  e9cd0100          STRD     r0,r1,[sp,#0]
0001e0  4bb6              LDR      r3,|L11.1212|
0001e2  4ab7              LDR      r2,|L11.1216|
0001e4  49b7              LDR      r1,|L11.1220|
0001e6  2005              MOVS     r0,#5
0001e8  f7fffffe          BL       _Anki_Log
                  |L11.492|
0001ec  a804              ADD      r0,sp,#0x10
0001ee  f8c79008          STR      r9,[r7,#8]
0001f2  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0001f6  4602              MOV      r2,r0
0001f8  4649              MOV      r1,r9
0001fa  4650              MOV      r0,r10
0001fc  9b05              LDR      r3,[sp,#0x14]
0001fe  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
000202  ea5f0900          MOVS     r9,r0
000206  9803              LDR      r0,[sp,#0xc]
000208  9000              STR      r0,[sp,#0]
00020a  9802              LDR      r0,[sp,#8]
00020c  46a2              MOV      r10,r4
00020e  9004              STR      r0,[sp,#0x10]
000210  d00e              BEQ      |L11.560|
000212  9800              LDR      r0,[sp,#0]
000214  2810              CMP      r0,#0x10
000216  d273              BCS      |L11.768|
000218  f2403123          MOV      r1,#0x323
00021c  48aa              LDR      r0,|L11.1224|
00021e  e9cd0100          STRD     r0,r1,[sp,#0]
000222  4baa              LDR      r3,|L11.1228|
000224  4aaa              LDR      r2,|L11.1232|
000226  49ab              LDR      r1,|L11.1236|
000228  2005              MOVS     r0,#5
00022a  f7fffffe          BL       _Anki_Log
00022e  e011              B        |L11.596|
                  |L11.560|
000230  f240311e          MOV      r1,#0x31e
000234  48a4              LDR      r0,|L11.1224|
000236  e9cd0100          STRD     r0,r1,[sp,#0]
00023a  4ba4              LDR      r3,|L11.1228|
00023c  4aa6              LDR      r2,|L11.1240|
00023e  49a7              LDR      r1,|L11.1244|
000240  2005              MOVS     r0,#5
000242  f7fffffe          BL       _Anki_Log
000246  f04f30ff          MOV      r0,#0xffffffff
00024a  6038              STR      r0,[r7,#0]
00024c  6078              STR      r0,[r7,#4]
00024e  60b8              STR      r0,[r7,#8]
000250  2000              MOVS     r0,#0
                  |L11.594|
000252  6138              STR      r0,[r7,#0x10]
                  |L11.596|
;;;819          u32 * pSortedElements = sortedElements.Pointer(0,0);
000254  2000              MOVS     r0,#0
000256  9a08              LDR      r2,[sp,#0x20]
000258  990a              LDR      r1,[sp,#0x28]
;;;820          for(s32 i=0; i<numElements; i++) {
00025a  4682              MOV      r10,r0
00025c  fb001902          MLA      r9,r0,r2,r1
000260  2e00              CMP      r6,#0
;;;821            strncpy(medianBenchmarkElements[i].name, benchmarkElements[0][i].name, BenchmarkElement::NAME_LENGTH - 1);
;;;822            medianBenchmarkElements[i].numEvents = benchmarkElements[0][i].numEvents;
;;;823    
;;;824            for(s32 iRun=0; iRun<numRuns; iRun++) { pSortedElements[iRun] = benchmarkElements[iRun][i].inclusive_mean; }
;;;825            if(Matrix::InsertionSort<u32>(sortedElements, 1) != RESULT_OK) { AnkiError("PrintPercentileBenchmark", "sort failure"); return RESULT_FAIL; }
000262  bfc4              ITT      GT
000264  f8dfb278          LDRGT    r11,|L11.1248|
000268  eddf8a9e          VLDRGT   s17,|L11.1252|
00026c  f3408318          BLE.W    |L11.2208|
                  |L11.624|
000270  6b28              LDR      r0,[r5,#0x30]         ;820
000272  eb0a01ca          ADD      r1,r10,r10,LSL #3     ;820
000276  eb01170a          ADD      r7,r1,r10,LSL #4      ;820
00027a  6b00              LDR      r0,[r0,#0x30]         ;820
00027c  223f              MOVS     r2,#0x3f              ;821
00027e  eb000087          ADD      r0,r0,r7,LSL #2       ;821
000282  f1000124          ADD      r1,r0,#0x24           ;821
000286  9817              LDR      r0,[sp,#0x5c]         ;821
000288  eb000087          ADD      r0,r0,r7,LSL #2       ;821
00028c  3024              ADDS     r0,r0,#0x24           ;821
00028e  f7fffffe          BL       strncpy
000292  6b28              LDR      r0,[r5,#0x30]         ;821
000294  6b00              LDR      r0,[r0,#0x30]         ;821
000296  eb000087          ADD      r0,r0,r7,LSL #2       ;821
00029a  6a01              LDR      r1,[r0,#0x20]         ;821
00029c  9817              LDR      r0,[sp,#0x5c]         ;821
00029e  eb000087          ADD      r0,r0,r7,LSL #2       ;821
0002a2  6201              STR      r1,[r0,#0x20]         ;824
0002a4  2000              MOVS     r0,#0                 ;824
0002a6  2c00              CMP      r4,#0                 ;824
0002a8  dd0e              BLE      |L11.712|
                  |L11.682|
0002aa  eb000280          ADD      r2,r0,r0,LSL #2       ;824
0002ae  6b29              LDR      r1,[r5,#0x30]         ;824
0002b0  eb0202c0          ADD      r2,r2,r0,LSL #3       ;824
0002b4  eb010182          ADD      r1,r1,r2,LSL #2       ;824
0002b8  6b09              LDR      r1,[r1,#0x30]         ;824
0002ba  f8511027          LDR      r1,[r1,r7,LSL #2]     ;824
0002be  f8491020          STR      r1,[r9,r0,LSL #2]     ;824
0002c2  1c40              ADDS     r0,r0,#1              ;824
0002c4  4284              CMP      r4,r0                 ;824
0002c6  dcf0              BGT      |L11.682|
                  |L11.712|
0002c8  2201              MOVS     r2,#1
0002ca  2300              MOVS     r3,#0
0002cc  4611              MOV      r1,r2
0002ce  a806              ADD      r0,sp,#0x18
0002d0  f8cdb000          STR      r11,[sp,#0]
0002d4  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)
0002d8  2800              CMP      r0,#0
0002da  d052              BEQ      |L11.898|
0002dc  f2403039          MOV      r0,#0x339
0002e0  e9cd8000          STRD     r8,r0,[sp,#0]
0002e4  a34a              ADR      r3,|L11.1040|
0002e6  a280              ADR      r2,|L11.1256|
0002e8  a15b              ADR      r1,|L11.1112|
0002ea  2005              MOVS     r0,#5
0002ec  f7fffffe          BL       _Anki_Log
0002f0  2001              MOVS     r0,#1
                  |L11.754|
;;;826            medianBenchmarkElements[i].inclusive_mean = pSortedElements[saturate_cast<s32>(numRuns*elementPercentile)];
;;;827    
;;;828            for(s32 iRun=0; iRun<numRuns; iRun++) { pSortedElements[iRun] = benchmarkElements[iRun][i].inclusive_min; }
;;;829            if(Matrix::InsertionSort<u32>(sortedElements, 1) != RESULT_OK) { AnkiError("PrintPercentileBenchmark", "sort failure"); return RESULT_FAIL; }
;;;830            medianBenchmarkElements[i].inclusive_min = pSortedElements[saturate_cast<s32>(numRuns*elementPercentile)];
;;;831    
;;;832            for(s32 iRun=0; iRun<numRuns; iRun++) { pSortedElements[iRun] = benchmarkElements[iRun][i].inclusive_max; }
;;;833            if(Matrix::InsertionSort<u32>(sortedElements, 1) != RESULT_OK) { AnkiError("PrintPercentileBenchmark", "sort failure"); return RESULT_FAIL; }
;;;834            medianBenchmarkElements[i].inclusive_max = pSortedElements[saturate_cast<s32>(numRuns*elementPercentile)];
;;;835    
;;;836            for(s32 iRun=0; iRun<numRuns; iRun++) { pSortedElements[iRun] = benchmarkElements[iRun][i].inclusive_total; }
;;;837            if(Matrix::InsertionSort<u32>(sortedElements, 1) != RESULT_OK) { AnkiError("PrintPercentileBenchmark", "sort failure"); return RESULT_FAIL; }
;;;838            medianBenchmarkElements[i].inclusive_total = pSortedElements[saturate_cast<s32>(numRuns*elementPercentile)];
;;;839    
;;;840            for(s32 iRun=0; iRun<numRuns; iRun++) { pSortedElements[iRun] = benchmarkElements[iRun][i].exclusive_mean; }
;;;841            if(Matrix::InsertionSort<u32>(sortedElements, 1) != RESULT_OK) { AnkiError("PrintPercentileBenchmark", "sort failure"); return RESULT_FAIL; }
;;;842            medianBenchmarkElements[i].exclusive_mean = pSortedElements[saturate_cast<s32>(numRuns*elementPercentile)];
;;;843    
;;;844            for(s32 iRun=0; iRun<numRuns; iRun++) { pSortedElements[iRun] = benchmarkElements[iRun][i].exclusive_min; }
;;;845            if(Matrix::InsertionSort<u32>(sortedElements, 1) != RESULT_OK) { AnkiError("PrintPercentileBenchmark", "sort failure"); return RESULT_FAIL; }
;;;846            medianBenchmarkElements[i].exclusive_min = pSortedElements[saturate_cast<s32>(numRuns*elementPercentile)];
;;;847    
;;;848            for(s32 iRun=0; iRun<numRuns; iRun++) { pSortedElements[iRun] = benchmarkElements[iRun][i].exclusive_max; }
;;;849            if(Matrix::InsertionSort<u32>(sortedElements, 1) != RESULT_OK) { AnkiError("PrintPercentileBenchmark", "sort failure"); return RESULT_FAIL; }
;;;850            medianBenchmarkElements[i].exclusive_max = pSortedElements[saturate_cast<s32>(numRuns*elementPercentile)];
;;;851    
;;;852            for(s32 iRun=0; iRun<numRuns; iRun++) { pSortedElements[iRun] = benchmarkElements[iRun][i].exclusive_total; }
;;;853            if(Matrix::InsertionSort<u32>(sortedElements, 1) != RESULT_OK) { AnkiError("PrintPercentileBenchmark", "sort failure"); return RESULT_FAIL; }
;;;854            medianBenchmarkElements[i].exclusive_total = pSortedElements[saturate_cast<s32>(numRuns*elementPercentile)];
;;;855          } // for(s32 i=0; i<numElements; i++)
;;;856    
;;;857          PrintBenchmarkResults(medianBenchmarkElements, true, true);
;;;858    
;;;859          return RESULT_OK;
;;;860        } // CompueMedianBenchmark()
0002f2  b01a              ADD      sp,sp,#0x68
0002f4  ecbd8b02          VPOP     {d8}
0002f8  b005              ADD      sp,sp,#0x14
0002fa  e8bd8ff0          POP      {r4-r11,pc}
0002fe  e7ff              B        |L11.768|
                  |L11.768|
000300  a804              ADD      r0,sp,#0x10
000302  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000306  b158              CBZ      r0,|L11.800|
000308  f2403126          MOV      r1,#0x326
00030c  486e              LDR      r0,|L11.1224|
00030e  e9cd0100          STRD     r0,r1,[sp,#0]
000312  4b6e              LDR      r3,|L11.1228|
000314  4a78              LDR      r2,|L11.1272|
000316  496f              LDR      r1,|L11.1236|
000318  2005              MOVS     r0,#5
00031a  f7fffffe          BL       _Anki_Log
00031e  e799              B        |L11.596|
                  |L11.800|
000320  9804              LDR      r0,[sp,#0x10]
000322  e9c70903          STRD     r0,r9,[r7,#0xc]
000326  f109000f          ADD      r0,r9,#0xf
00032a  e9c7ba00          STRD     r11,r10,[r7,#0]
00032e  f020000f          BIC      r0,r0,#0xf
000332  eba00009          SUB      r0,r0,r9
000336  f1ba0f01          CMP      r10,#1
00033a  bfd8              IT       LE
00033c  f04f0a01          MOVLE    r10,#1
000340  ea4f018a          LSL      r1,r10,#2
000344  310f              ADDS     r1,r1,#0xf
000346  f021010f          BIC      r1,r1,#0xf
00034a  fb01010b          MLA      r1,r1,r11,r0
00034e  9a00              LDR      r2,[sp,#0]
000350  4291              CMP      r1,r2
000352  bfd8              IT       LE
000354  4448              ADDLE    r0,r0,r9
000356  f77faf7c          BLE      |L11.594|
00035a  f2403235          MOV      r2,#0x335
00035e  485a              LDR      r0,|L11.1224|
000360  e9cd0200          STRD     r0,r2,[sp,#0]
000364  9102              STR      r1,[sp,#8]
000366  4b59              LDR      r3,|L11.1228|
000368  4a64              LDR      r2,|L11.1276|
00036a  495c              LDR      r1,|L11.1244|
00036c  2005              MOVS     r0,#5
00036e  f7fffffe          BL       _Anki_Log
000372  f04f30ff          MOV      r0,#0xffffffff
000376  6038              STR      r0,[r7,#0]
000378  6078              STR      r0,[r7,#4]
00037a  60b8              STR      r0,[r7,#8]
00037c  2000              MOVS     r0,#0
00037e  6138              STR      r0,[r7,#0x10]
000380  e768              B        |L11.596|
                  |L11.898|
000382  ee004a10          VMOV     s0,r4                 ;826
000386  eeb80ac0          VCVT.F32.S32 s0,s0                 ;826
00038a  ee200a08          VMUL.F32 s0,s0,s16             ;826
00038e  ee100a10          VMOV     r0,s0                 ;826
000392  f1b04f9e          CMP      r0,#0x4f000000        ;826
000396  bfa8              IT       GE                    ;826
000398  f06f4000          MVNGE    r0,#0x80000000        ;826
00039c  da08              BGE      |L11.944|
00039e  ee100a10          VMOV     r0,s0                 ;826
0003a2  f1b04f4f          CMP      r0,#0xcf000000        ;826
0003a6  bf88              IT       HI                    ;826
0003a8  eeb00a68          VMOVHI.F32 s0,s17                ;826
0003ac  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
                  |L11.944|
0003b0  f8591020          LDR      r1,[r9,r0,LSL #2]     ;826
0003b4  9817              LDR      r0,[sp,#0x5c]         ;826
0003b6  f8401027          STR      r1,[r0,r7,LSL #2]     ;826
0003ba  2000              MOVS     r0,#0                 ;828
0003bc  2c00              CMP      r4,#0                 ;828
0003be  dd0f              BLE      |L11.992|
                  |L11.960|
0003c0  eb000280          ADD      r2,r0,r0,LSL #2       ;828
0003c4  6b29              LDR      r1,[r5,#0x30]         ;828
0003c6  eb0202c0          ADD      r2,r2,r0,LSL #3       ;828
0003ca  eb010182          ADD      r1,r1,r2,LSL #2       ;828
0003ce  6b09              LDR      r1,[r1,#0x30]         ;828
0003d0  eb010187          ADD      r1,r1,r7,LSL #2       ;828
0003d4  6849              LDR      r1,[r1,#4]            ;828
0003d6  f8491020          STR      r1,[r9,r0,LSL #2]     ;828
0003da  1c40              ADDS     r0,r0,#1              ;828
0003dc  4284              CMP      r4,r0                 ;828
0003de  dcef              BGT      |L11.960|
                  |L11.992|
0003e0  2201              MOVS     r2,#1                 ;829
0003e2  2300              MOVS     r3,#0                 ;829
0003e4  4611              MOV      r1,r2                 ;829
0003e6  a806              ADD      r0,sp,#0x18           ;829
0003e8  f8cdb000          STR      r11,[sp,#0]           ;829
0003ec  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)
0003f0  b158              CBZ      r0,|L11.1034|
0003f2  f240303d          MOV      r0,#0x33d             ;829
0003f6  e9cd8000          STRD     r8,r0,[sp,#0]         ;829
0003fa  a305              ADR      r3,|L11.1040|
0003fc  a23a              ADR      r2,|L11.1256|
0003fe  a116              ADR      r1,|L11.1112|
000400  2005              MOVS     r0,#5                 ;829
000402  f7fffffe          BL       _Anki_Log
000406  2001              MOVS     r0,#1                 ;829
000408  e773              B        |L11.754|
                  |L11.1034|
00040a  e079              B        |L11.1280|
                  |L11.1036|
                          DCD      ||.constdata||+0xf0
                  |L11.1040|
000410  2e2e5c63          DCB      "..\\coretech\\common\\robot\\src\\benchmarking.cpp",0
000414  6f726574
000418  6563685c
00041c  636f6d6d
000420  6f6e5c72
000424  6f626f74
000428  5c737263
00042c  5c62656e
000430  63686d61
000434  726b696e
000438  672e6370
00043c  7000    
00043e  00                DCB      0
00043f  00                DCB      0
                  |L11.1088|
000440  6e756d62          DCB      "number failure %d!=%d",0
000444  65722066
000448  61696c75
00044c  72652025
000450  64213d25
000454  6400    
000456  00                DCB      0
000457  00                DCB      0
                  |L11.1112|
000458  5072696e          DCB      "PrintPercentileBenchmark",0
00045c  74506572
000460  63656e74
000464  696c6542
000468  656e6368
00046c  6d61726b
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L11.1140|
000474  6e756d62          DCB      "number failure %d!=%d (%s,%s)",0
000478  65722066
00047c  61696c75
000480  72652025
000484  64213d25
000488  64202825
00048c  732c2573
000490  2900    
000492  00                DCB      0
000493  00                DCB      0
                  |L11.1172|
000494  6e616d65          DCB      "name failure %s!=%s",0
000498  20666169
00049c  6c757265
0004a0  20257321
0004a4  3d257300
                  |L11.1192|
                          DCD      _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L11.1196|
                          DCD      _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L11.1200|
                          DCD      _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L11.1204|
                          DCD      _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
                  |L11.1208|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L11.1212|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
                  |L11.1216|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
                  |L11.1220|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
                  |L11.1224|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L11.1228|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L11.1232|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
                  |L11.1236|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
                  |L11.1240|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L11.1244|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
                  |L11.1248|
                          DCD      0x07fffffe
                  |L11.1252|
0004e4  cf000000          DCFS     0xcf000000 ; -2147483648
                  |L11.1256|
0004e8  736f7274          DCB      "sort failure",0
0004ec  20666169
0004f0  6c757265
0004f4  00      
0004f5  00                DCB      0
0004f6  00                DCB      0
0004f7  00                DCB      0
                  |L11.1272|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
                  |L11.1276|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
                  |L11.1280|
000500  ee004a10          VMOV     s0,r4                 ;830
000504  eeb80ac0          VCVT.F32.S32 s0,s0                 ;830
000508  ee200a08          VMUL.F32 s0,s0,s16             ;830
00050c  ee100a10          VMOV     r0,s0                 ;830
000510  f1b04f9e          CMP      r0,#0x4f000000        ;830
000514  bfa8              IT       GE                    ;830
000516  f06f4000          MVNGE    r0,#0x80000000        ;830
00051a  da08              BGE      |L11.1326|
00051c  ee100a10          VMOV     r0,s0                 ;830
000520  f1b04f4f          CMP      r0,#0xcf000000        ;830
000524  bf88              IT       HI                    ;830
000526  eeb00a68          VMOVHI.F32 s0,s17                ;830
00052a  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
                  |L11.1326|
00052e  f8591020          LDR      r1,[r9,r0,LSL #2]     ;830
000532  9817              LDR      r0,[sp,#0x5c]         ;830
000534  eb000087          ADD      r0,r0,r7,LSL #2       ;830
000538  6041              STR      r1,[r0,#4]            ;832
00053a  2000              MOVS     r0,#0                 ;832
00053c  2c00              CMP      r4,#0                 ;832
00053e  dd0f              BLE      |L11.1376|
                  |L11.1344|
000540  eb000280          ADD      r2,r0,r0,LSL #2       ;832
000544  6b29              LDR      r1,[r5,#0x30]         ;832
000546  eb0202c0          ADD      r2,r2,r0,LSL #3       ;832
00054a  eb010182          ADD      r1,r1,r2,LSL #2       ;832
00054e  6b09              LDR      r1,[r1,#0x30]         ;832
000550  eb010187          ADD      r1,r1,r7,LSL #2       ;832
000554  6889              LDR      r1,[r1,#8]            ;832
000556  f8491020          STR      r1,[r9,r0,LSL #2]     ;832
00055a  1c40              ADDS     r0,r0,#1              ;832
00055c  4284              CMP      r4,r0                 ;832
00055e  dcef              BGT      |L11.1344|
                  |L11.1376|
000560  2201              MOVS     r2,#1                 ;833
000562  2300              MOVS     r3,#0                 ;833
000564  4611              MOV      r1,r2                 ;833
000566  a806              ADD      r0,sp,#0x18           ;833
000568  f8cdb000          STR      r11,[sp,#0]           ;833
00056c  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)
000570  b170              CBZ      r0,|L11.1424|
000572  f2403041          MOV      r0,#0x341             ;833
000576  f2af1368          ADR      r3,|L11.1040|
00057a  f2af0294          ADR      r2,|L11.1256|
00057e  f2af1128          ADR      r1,|L11.1112|
000582  e9cd8000          STRD     r8,r0,[sp,#0]         ;833
000586  2005              MOVS     r0,#5                 ;833
000588  f7fffffe          BL       _Anki_Log
00058c  2001              MOVS     r0,#1                 ;833
00058e  e6b0              B        |L11.754|
                  |L11.1424|
000590  ee004a10          VMOV     s0,r4                 ;834
000594  eeb80ac0          VCVT.F32.S32 s0,s0                 ;834
000598  ee200a08          VMUL.F32 s0,s0,s16             ;834
00059c  ee100a10          VMOV     r0,s0                 ;834
0005a0  f1b04f9e          CMP      r0,#0x4f000000        ;834
0005a4  bfa8              IT       GE                    ;834
0005a6  f06f4000          MVNGE    r0,#0x80000000        ;834
0005aa  da08              BGE      |L11.1470|
0005ac  ee100a10          VMOV     r0,s0                 ;834
0005b0  f1b04f4f          CMP      r0,#0xcf000000        ;834
0005b4  bf88              IT       HI                    ;834
0005b6  eeb00a68          VMOVHI.F32 s0,s17                ;834
0005ba  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
                  |L11.1470|
0005be  f8591020          LDR      r1,[r9,r0,LSL #2]     ;834
0005c2  9817              LDR      r0,[sp,#0x5c]         ;834
0005c4  eb000087          ADD      r0,r0,r7,LSL #2       ;834
0005c8  6081              STR      r1,[r0,#8]            ;836
0005ca  2000              MOVS     r0,#0                 ;836
0005cc  2c00              CMP      r4,#0                 ;836
0005ce  dd0f              BLE      |L11.1520|
                  |L11.1488|
0005d0  eb000280          ADD      r2,r0,r0,LSL #2       ;836
0005d4  6b29              LDR      r1,[r5,#0x30]         ;836
0005d6  eb0202c0          ADD      r2,r2,r0,LSL #3       ;836
0005da  eb010182          ADD      r1,r1,r2,LSL #2       ;836
0005de  6b09              LDR      r1,[r1,#0x30]         ;836
0005e0  eb010187          ADD      r1,r1,r7,LSL #2       ;836
0005e4  68c9              LDR      r1,[r1,#0xc]          ;836
0005e6  f8491020          STR      r1,[r9,r0,LSL #2]     ;836
0005ea  1c40              ADDS     r0,r0,#1              ;836
0005ec  4284              CMP      r4,r0                 ;836
0005ee  dcef              BGT      |L11.1488|
                  |L11.1520|
0005f0  2201              MOVS     r2,#1                 ;837
0005f2  2300              MOVS     r3,#0                 ;837
0005f4  4611              MOV      r1,r2                 ;837
0005f6  a806              ADD      r0,sp,#0x18           ;837
0005f8  f8cdb000          STR      r11,[sp,#0]           ;837
0005fc  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)
000600  b170              CBZ      r0,|L11.1568|
000602  f2403045          MOV      r0,#0x345             ;837
000606  f2af13f8          ADR      r3,|L11.1040|
00060a  f2af1224          ADR      r2,|L11.1256|
00060e  f2af11b8          ADR      r1,|L11.1112|
000612  e9cd8000          STRD     r8,r0,[sp,#0]         ;837
000616  2005              MOVS     r0,#5                 ;837
000618  f7fffffe          BL       _Anki_Log
00061c  2001              MOVS     r0,#1                 ;837
00061e  e668              B        |L11.754|
                  |L11.1568|
000620  ee004a10          VMOV     s0,r4                 ;838
000624  eeb80ac0          VCVT.F32.S32 s0,s0                 ;838
000628  ee200a08          VMUL.F32 s0,s0,s16             ;838
00062c  ee100a10          VMOV     r0,s0                 ;838
000630  f1b04f9e          CMP      r0,#0x4f000000        ;838
000634  bfa8              IT       GE                    ;838
000636  f06f4000          MVNGE    r0,#0x80000000        ;838
00063a  da08              BGE      |L11.1614|
00063c  ee100a10          VMOV     r0,s0                 ;838
000640  f1b04f4f          CMP      r0,#0xcf000000        ;838
000644  bf88              IT       HI                    ;838
000646  eeb00a68          VMOVHI.F32 s0,s17                ;838
00064a  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
                  |L11.1614|
00064e  f8591020          LDR      r1,[r9,r0,LSL #2]     ;838
000652  9817              LDR      r0,[sp,#0x5c]         ;838
000654  eb000087          ADD      r0,r0,r7,LSL #2       ;838
000658  60c1              STR      r1,[r0,#0xc]          ;840
00065a  2000              MOVS     r0,#0                 ;840
00065c  2c00              CMP      r4,#0                 ;840
00065e  dd0f              BLE      |L11.1664|
                  |L11.1632|
000660  eb000280          ADD      r2,r0,r0,LSL #2       ;840
000664  6b29              LDR      r1,[r5,#0x30]         ;840
000666  eb0202c0          ADD      r2,r2,r0,LSL #3       ;840
00066a  eb010182          ADD      r1,r1,r2,LSL #2       ;840
00066e  6b09              LDR      r1,[r1,#0x30]         ;840
000670  eb010187          ADD      r1,r1,r7,LSL #2       ;840
000674  6909              LDR      r1,[r1,#0x10]         ;840
000676  f8491020          STR      r1,[r9,r0,LSL #2]     ;840
00067a  1c40              ADDS     r0,r0,#1              ;840
00067c  4284              CMP      r4,r0                 ;840
00067e  dcef              BGT      |L11.1632|
                  |L11.1664|
000680  2201              MOVS     r2,#1                 ;841
000682  2300              MOVS     r3,#0                 ;841
000684  4611              MOV      r1,r2                 ;841
000686  a806              ADD      r0,sp,#0x18           ;841
000688  f8cdb000          STR      r11,[sp,#0]           ;841
00068c  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)
000690  b170              CBZ      r0,|L11.1712|
000692  f2403049          MOV      r0,#0x349             ;841
000696  f2af2388          ADR      r3,|L11.1040|
00069a  f2af12b4          ADR      r2,|L11.1256|
00069e  f2af2148          ADR      r1,|L11.1112|
0006a2  e9cd8000          STRD     r8,r0,[sp,#0]         ;841
0006a6  2005              MOVS     r0,#5                 ;841
0006a8  f7fffffe          BL       _Anki_Log
0006ac  2001              MOVS     r0,#1                 ;841
0006ae  e620              B        |L11.754|
                  |L11.1712|
0006b0  ee004a10          VMOV     s0,r4                 ;842
0006b4  eeb80ac0          VCVT.F32.S32 s0,s0                 ;842
0006b8  ee200a08          VMUL.F32 s0,s0,s16             ;842
0006bc  ee100a10          VMOV     r0,s0                 ;842
0006c0  f1b04f9e          CMP      r0,#0x4f000000        ;842
0006c4  bfa8              IT       GE                    ;842
0006c6  f06f4000          MVNGE    r0,#0x80000000        ;842
0006ca  da08              BGE      |L11.1758|
0006cc  ee100a10          VMOV     r0,s0                 ;842
0006d0  f1b04f4f          CMP      r0,#0xcf000000        ;842
0006d4  bf88              IT       HI                    ;842
0006d6  eeb00a68          VMOVHI.F32 s0,s17                ;842
0006da  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
                  |L11.1758|
0006de  f8591020          LDR      r1,[r9,r0,LSL #2]     ;842
0006e2  9817              LDR      r0,[sp,#0x5c]         ;842
0006e4  eb000087          ADD      r0,r0,r7,LSL #2       ;842
0006e8  6101              STR      r1,[r0,#0x10]         ;844
0006ea  2000              MOVS     r0,#0                 ;844
0006ec  2c00              CMP      r4,#0                 ;844
0006ee  dd0f              BLE      |L11.1808|
                  |L11.1776|
0006f0  eb000280          ADD      r2,r0,r0,LSL #2       ;844
0006f4  6b29              LDR      r1,[r5,#0x30]         ;844
0006f6  eb0202c0          ADD      r2,r2,r0,LSL #3       ;844
0006fa  eb010182          ADD      r1,r1,r2,LSL #2       ;844
0006fe  6b09              LDR      r1,[r1,#0x30]         ;844
000700  eb010187          ADD      r1,r1,r7,LSL #2       ;844
000704  6949              LDR      r1,[r1,#0x14]         ;844
000706  f8491020          STR      r1,[r9,r0,LSL #2]     ;844
00070a  1c40              ADDS     r0,r0,#1              ;844
00070c  4284              CMP      r4,r0                 ;844
00070e  dcef              BGT      |L11.1776|
                  |L11.1808|
000710  2201              MOVS     r2,#1                 ;845
000712  2300              MOVS     r3,#0                 ;845
000714  4611              MOV      r1,r2                 ;845
000716  a806              ADD      r0,sp,#0x18           ;845
000718  f8cdb000          STR      r11,[sp,#0]           ;845
00071c  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)
000720  b170              CBZ      r0,|L11.1856|
000722  f240304d          MOV      r0,#0x34d             ;845
000726  f2af3318          ADR      r3,|L11.1040|
00072a  f2af2244          ADR      r2,|L11.1256|
00072e  f2af21d8          ADR      r1,|L11.1112|
000732  e9cd8000          STRD     r8,r0,[sp,#0]         ;845
000736  2005              MOVS     r0,#5                 ;845
000738  f7fffffe          BL       _Anki_Log
                  |L11.1852|
00073c  2001              MOVS     r0,#1                 ;845
00073e  e5d8              B        |L11.754|
                  |L11.1856|
000740  ee004a10          VMOV     s0,r4                 ;846
000744  eeb80ac0          VCVT.F32.S32 s0,s0                 ;846
000748  ee200a08          VMUL.F32 s0,s0,s16             ;846
00074c  ee100a10          VMOV     r0,s0                 ;846
000750  f1b04f9e          CMP      r0,#0x4f000000        ;846
000754  bfa8              IT       GE                    ;846
000756  f06f4000          MVNGE    r0,#0x80000000        ;846
00075a  da08              BGE      |L11.1902|
00075c  ee100a10          VMOV     r0,s0                 ;846
000760  f1b04f4f          CMP      r0,#0xcf000000        ;846
000764  bf88              IT       HI                    ;846
000766  eeb00a68          VMOVHI.F32 s0,s17                ;846
00076a  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
                  |L11.1902|
00076e  f8591020          LDR      r1,[r9,r0,LSL #2]     ;846
000772  9817              LDR      r0,[sp,#0x5c]         ;846
000774  eb000087          ADD      r0,r0,r7,LSL #2       ;846
000778  6141              STR      r1,[r0,#0x14]         ;848
00077a  2000              MOVS     r0,#0                 ;848
00077c  2c00              CMP      r4,#0                 ;848
00077e  dd0f              BLE      |L11.1952|
                  |L11.1920|
000780  eb000280          ADD      r2,r0,r0,LSL #2       ;848
000784  6b29              LDR      r1,[r5,#0x30]         ;848
000786  eb0202c0          ADD      r2,r2,r0,LSL #3       ;848
00078a  eb010182          ADD      r1,r1,r2,LSL #2       ;848
00078e  6b09              LDR      r1,[r1,#0x30]         ;848
000790  eb010187          ADD      r1,r1,r7,LSL #2       ;848
000794  6989              LDR      r1,[r1,#0x18]         ;848
000796  f8491020          STR      r1,[r9,r0,LSL #2]     ;848
00079a  1c40              ADDS     r0,r0,#1              ;848
00079c  4284              CMP      r4,r0                 ;848
00079e  dcef              BGT      |L11.1920|
                  |L11.1952|
0007a0  2201              MOVS     r2,#1                 ;849
0007a2  2300              MOVS     r3,#0                 ;849
0007a4  4611              MOV      r1,r2                 ;849
0007a6  a806              ADD      r0,sp,#0x18           ;849
0007a8  f8cdb000          STR      r11,[sp,#0]           ;849
0007ac  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)
0007b0  b168              CBZ      r0,|L11.1998|
0007b2  f2403051          MOV      r0,#0x351             ;849
0007b6  f2af33a8          ADR      r3,|L11.1040|
0007ba  f2af22d4          ADR      r2,|L11.1256|
0007be  f2af3168          ADR      r1,|L11.1112|
0007c2  e9cd8000          STRD     r8,r0,[sp,#0]         ;849
0007c6  2005              MOVS     r0,#5                 ;849
0007c8  f7fffffe          BL       _Anki_Log
0007cc  e7b6              B        |L11.1852|
                  |L11.1998|
0007ce  ee004a10          VMOV     s0,r4                 ;850
0007d2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;850
0007d6  ee200a08          VMUL.F32 s0,s0,s16             ;850
0007da  ee100a10          VMOV     r0,s0                 ;850
0007de  f1b04f9e          CMP      r0,#0x4f000000        ;850
0007e2  bfa8              IT       GE                    ;850
0007e4  f06f4000          MVNGE    r0,#0x80000000        ;850
0007e8  da08              BGE      |L11.2044|
0007ea  ee100a10          VMOV     r0,s0                 ;850
0007ee  f1b04f4f          CMP      r0,#0xcf000000        ;850
0007f2  bf88              IT       HI                    ;850
0007f4  eeb00a68          VMOVHI.F32 s0,s17                ;850
0007f8  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
                  |L11.2044|
0007fc  f8591020          LDR      r1,[r9,r0,LSL #2]     ;850
000800  9817              LDR      r0,[sp,#0x5c]         ;850
000802  eb000087          ADD      r0,r0,r7,LSL #2       ;850
000806  6181              STR      r1,[r0,#0x18]         ;852
000808  2000              MOVS     r0,#0                 ;852
00080a  2c00              CMP      r4,#0                 ;852
00080c  dd0f              BLE      |L11.2094|
                  |L11.2062|
00080e  eb000280          ADD      r2,r0,r0,LSL #2       ;852
000812  6b29              LDR      r1,[r5,#0x30]         ;852
000814  eb0202c0          ADD      r2,r2,r0,LSL #3       ;852
000818  eb010182          ADD      r1,r1,r2,LSL #2       ;852
00081c  6b09              LDR      r1,[r1,#0x30]         ;852
00081e  eb010187          ADD      r1,r1,r7,LSL #2       ;852
000822  69c9              LDR      r1,[r1,#0x1c]         ;852
000824  f8491020          STR      r1,[r9,r0,LSL #2]     ;852
000828  1c40              ADDS     r0,r0,#1              ;852
00082a  4284              CMP      r4,r0                 ;852
00082c  dcef              BGT      |L11.2062|
                  |L11.2094|
00082e  2201              MOVS     r2,#1                 ;853
000830  2300              MOVS     r3,#0                 ;853
000832  4611              MOV      r1,r2                 ;853
000834  a806              ADD      r0,sp,#0x18           ;853
000836  f8cdb000          STR      r11,[sp,#0]           ;853
00083a  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)
00083e  b168              CBZ      r0,|L11.2140|
000840  f2403055          MOV      r0,#0x355             ;853
000844  f2af4338          ADR      r3,|L11.1040|
000848  f2af3264          ADR      r2,|L11.1256|
00084c  f2af31f8          ADR      r1,|L11.1112|
000850  e9cd8000          STRD     r8,r0,[sp,#0]         ;853
000854  2005              MOVS     r0,#5                 ;853
000856  f7fffffe          BL       _Anki_Log
00085a  e76f              B        |L11.1852|
                  |L11.2140|
00085c  ee004a10          VMOV     s0,r4                 ;854
000860  eeb80ac0          VCVT.F32.S32 s0,s0                 ;854
000864  ee200a08          VMUL.F32 s0,s0,s16             ;854
000868  ee100a10          VMOV     r0,s0                 ;854
00086c  f1b04f9e          CMP      r0,#0x4f000000        ;854
000870  bfa8              IT       GE                    ;854
000872  f06f4000          MVNGE    r0,#0x80000000        ;854
000876  da08              BGE      |L11.2186|
000878  ee100a10          VMOV     r0,s0                 ;854
00087c  f1b04f4f          CMP      r0,#0xcf000000        ;854
000880  bf88              IT       HI                    ;854
000882  eeb00a68          VMOVHI.F32 s0,s17                ;854
000886  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
                  |L11.2186|
00088a  f8591020          LDR      r1,[r9,r0,LSL #2]     ;854
00088e  9817              LDR      r0,[sp,#0x5c]         ;854
000890  f10a0a01          ADD      r10,r10,#1            ;854
000894  eb000087          ADD      r0,r0,r7,LSL #2       ;854
000898  45b2              CMP      r10,r6                ;820
00089a  61c1              STR      r1,[r0,#0x1c]         ;820
00089c  f6fface8          BLT      |L11.624|
                  |L11.2208|
0008a0  2201              MOVS     r2,#1                 ;857
0008a2  4611              MOV      r1,r2                 ;857
0008a4  a80b              ADD      r0,sp,#0x2c           ;857
0008a6  f7fffffe          BL       _ZN4Anki8Embedded21PrintBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEEbb ; Anki::Embedded::PrintBenchmarkResults(const Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>&, bool, bool)
0008aa  2000              MOVS     r0,#0                 ;859
0008ac  e521              B        |L11.754|
;;;861      } // namespace Embedded
                          ENDP


                          AREA ||i._ZN4Anki8Embedded31ComputeAndPrintBenchmarkResultsEbbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded31ComputeAndPrintBenchmarkResultsEbbNS0_11MemoryStackE PROC ; Anki::Embedded::ComputeAndPrintBenchmarkResults(bool, bool, Anki::Embedded::MemoryStack)
;;;515    
;;;516        Result ComputeAndPrintBenchmarkResults(const bool verbose, const bool microseconds, MemoryStack scratch)
000000  b5f0              PUSH     {r4-r7,lr}
;;;517        {
000002  460e              MOV      r6,r1
000004  4915              LDR      r1,|L12.92|
000006  b08f              SUB      sp,sp,#0x3c
000008  4607              MOV      r7,r0
00000a  4614              MOV      r4,r2
00000c  4613              MOV      r3,r2
;;;518          FixedLengthList<BenchmarkElement> results = ComputeBenchmarkResults(scratch);
00000e  a802              ADD      r0,sp,#8
000010  4a11              LDR      r2,|L12.88|
000012  6809              LDR      r1,[r1,#0]  ; g_numBenchmarkEvents
000014  f7fffffe          BL       _ZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackE ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)
;;;519    
;;;520          AnkiConditionalErrorAndReturnValue(AreValid(scratch, results),
000018  ad02              ADD      r5,sp,#8
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000020  b150              CBZ      r0,|L12.56|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::IsValid() const
000028  b130              CBZ      r0,|L12.56|
;;;521            RESULT_FAIL_INVALID_OBJECT, "PrintBenchmarkResults", "Invalid objects");
;;;522    
;;;523          return PrintBenchmarkResults(results, verbose, microseconds);
00002a  4632              MOV      r2,r6
00002c  4639              MOV      r1,r7
00002e  a802              ADD      r0,sp,#8
000030  f7fffffe          BL       _ZN4Anki8Embedded21PrintBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEEbb ; Anki::Embedded::PrintBenchmarkResults(const Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>&, bool, bool)
;;;524        }
000034  b00f              ADD      sp,sp,#0x3c
000036  bdf0              POP      {r4-r7,pc}
                  |L12.56|
000038  f44f7102          MOV      r1,#0x208             ;520
00003c  4808              LDR      r0,|L12.96|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]         ;520
000042  a308              ADR      r3,|L12.100|
000044  a213              ADR      r2,|L12.148|
000046  a117              ADR      r1,|L12.164|
000048  2005              MOVS     r0,#5                 ;520
00004a  f7fffffe          BL       _Anki_Log
00004e  b00f              ADD      sp,sp,#0x3c
000050  f04f6080          MOV      r0,#0x4000000         ;520
000054  bdf0              POP      {r4-r7,pc}
;;;525    
                          ENDP

000056  0000              DCW      0x0000
                  |L12.88|
                          DCD      ||.bss||
                  |L12.92|
                          DCD      ||.data||
                  |L12.96|
                          DCD      ||.constdata||+0x8a
                  |L12.100|
000064  2e2e5c63          DCB      "..\\coretech\\common\\robot\\src\\benchmarking.cpp",0
000068  6f726574
00006c  6563685c
000070  636f6d6d
000074  6f6e5c72
000078  6f626f74
00007c  5c737263
000080  5c62656e
000084  63686d61
000088  726b696e
00008c  672e6370
000090  7000    
000092  00                DCB      0
000093  00                DCB      0
                  |L12.148|
000094  496e7661          DCB      "Invalid objects",0
000098  6c696420
00009c  6f626a65
0000a0  63747300
                  |L12.164|
0000a4  5072696e          DCB      "PrintBenchmarkResults",0
0000a8  7442656e
0000ac  63686d61
0000b0  726b5265
0000b4  73756c74
0000b8  7300    
0000ba  00                DCB      0
0000bb  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded16BenchmarkElement5PrintEbbPKNS0_15FixedLengthListIiEE||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded16BenchmarkElement5PrintEbbPKNS0_15FixedLengthListIiEE PROC ; Anki::Embedded::BenchmarkElement::Print(bool, bool, const Anki::Embedded::FixedLengthList<int>*) const
;;;225    
;;;226        void BenchmarkElement::Print(const bool verbose, const bool microseconds, const FixedLengthList<s32> * minCharacterToPrint) const
000000  b500              PUSH     {lr}
;;;227        {
000002  f2ad4d0c          SUB      sp,sp,#0x40c
000006  e9cd2300          STRD     r2,r3,[sp,#0]
;;;228          const s32 bufferLength = 1024;
;;;229          char buffer[bufferLength];
;;;230    
;;;231          Snprint(buffer, bufferLength, verbose, microseconds, minCharacterToPrint);
00000a  460b              MOV      r3,r1
00000c  f44f6280          MOV      r2,#0x400
000010  a902              ADD      r1,sp,#8
000012  f7fffffe          BL       _ZNK4Anki8Embedded16BenchmarkElement7SnprintEPcibbPKNS0_15FixedLengthListIiEE ; Anki::Embedded::BenchmarkElement::Snprint(char*, int, bool, bool, const Anki::Embedded::FixedLengthList<int>*) const
;;;232    
;;;233          CoreTechPrint(buffer);
000016  a802              ADD      r0,sp,#8
000018  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;234        }
00001c  f20d4d0c          ADD      sp,sp,#0x40c
000020  bd00              POP      {pc}
;;;235    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded16BenchmarkElement7SnprintEPcibbPKNS0_15FixedLengthListIiEE||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  _ZNK4Anki8Embedded16BenchmarkElement7SnprintEPcibbPKNS0_15FixedLengthListIiEE PROC ; Anki::Embedded::BenchmarkElement::Snprint(char*, int, bool, bool, const Anki::Embedded::FixedLengthList<int>*) const
;;;186    
;;;187        s32 BenchmarkElement::Snprint(char * buffer, const s32 bufferLength, const bool verbose, const bool microseconds, const FixedLengthList<s32> * minCharacterToPrint) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;188        {
000004  ed2d8b02          VPUSH    {d8}
000008  b083              SUB      sp,sp,#0xc
00000a  469a              MOV      r10,r3
00000c  4616              MOV      r6,r2
00000e  460d              MOV      r5,r1
000010  e9dd840e          LDRD     r8,r4,[sp,#0x38]
000014  4607              MOV      r7,r0
;;;189          s32 numPrintedTotal = 0;
;;;190          numPrintedTotal += snprintf(buffer + numPrintedTotal, bufferLength - numPrintedTotal, "%s: ", this->name);
000016  f1000324          ADD      r3,r0,#0x24
00001a  a27c              ADR      r2,|L14.524|
00001c  4631              MOV      r1,r6
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       __2snprintf
000024  4681              MOV      r9,r0
;;;191    
;;;192          if(minCharacterToPrint && minCharacterToPrint->get_size() > 0) {
000026  2c00              CMP      r4,#0
000028  bf1c              ITT      NE
00002a  68e0              LDRNE    r0,[r4,#0xc]
00002c  2800              CMPNE    r0,#0
00002e  dd13              BLE      |L14.88|
;;;193            const s32 numPrinted = static_cast<s32>(strlen(buffer));
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       strlen
;;;194            for(s32 i=numPrinted;  i<((*minCharacterToPrint)[0]+2); i++) {
000036  6b21              LDR      r1,[r4,#0x30]
000038  6809              LDR      r1,[r1,#0]
00003a  1c89              ADDS     r1,r1,#2
00003c  4281              CMP      r1,r0
;;;195              buffer[numPrintedTotal] = ' ';
00003e  bfc8              IT       GT
000040  2220              MOVGT    r2,#0x20
000042  dd09              BLE      |L14.88|
                  |L14.68|
000044  f8052009          STRB     r2,[r5,r9]
000048  6b21              LDR      r1,[r4,#0x30]         ;194
00004a  1c40              ADDS     r0,r0,#1              ;194
00004c  f1090901          ADD      r9,r9,#1              ;194
000050  6809              LDR      r1,[r1,#0]            ;194
000052  1c89              ADDS     r1,r1,#2              ;194
000054  4281              CMP      r1,r0                 ;194
000056  dcf5              BGT      |L14.68|
                  |L14.88|
;;;196              numPrintedTotal++;
;;;197            }
;;;198          }
;;;199    
;;;200          const char * suffix;
;;;201          f32 multiplier;
;;;202          if(microseconds) {
000058  f1b80f00          CMP      r8,#0
;;;203            suffix = "us ";
00005c  bf19              ITTEE    NE
00005e  f20f18b4          ADRNE    r8,|L14.532|
;;;204            multiplier = 1.0f;
000062  eeb78a00          VMOVNE.F32 s16,#1.00000000
;;;205          } else {
;;;206            suffix = "ms ";
000066  f20f18b0          ADREQ    r8,|L14.536|
;;;207            multiplier = 1.0f / 1000.0f;
00006a  ed9f8a6c          VLDREQ   s16,|L14.540|
;;;208          }
;;;209    
;;;210          numPrintedTotal += SnprintElement(&buffer[numPrintedTotal], bufferLength - numPrintedTotal, "ExcTot:", Round<s32>(this->exclusive_total*multiplier), suffix, (*minCharacterToPrint)[1]);
00006e  6b20              LDR      r0,[r4,#0x30]
000070  f8d0b004          LDR      r11,[r0,#4]
000074  ed970a07          VLDR     s0,[r7,#0x1c]
000078  eeb80a40          VCVT.F32.U32 s0,s0
00007c  ee200a08          VMUL.F32 s0,s0,s16
000080  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
000084  e9cd8b00          STRD     r8,r11,[sp,#0]
000088  eb050c09          ADD      r12,r5,r9
00008c  4603              MOV      r3,r0
00008e  eba60109          SUB      r1,r6,r9
000092  a263              ADR      r2,|L14.544|
000094  4660              MOV      r0,r12
000096  f7fffffe          BL       _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
;;;211          numPrintedTotal += SnprintElement(&buffer[numPrintedTotal], bufferLength - numPrintedTotal, "IncTot:", Round<s32>(this->inclusive_total*multiplier), suffix, (*minCharacterToPrint)[2]);
00009a  ed970a03          VLDR     s0,[r7,#0xc]
00009e  4481              ADD      r9,r9,r0              ;210
0000a0  6b20              LDR      r0,[r4,#0x30]
0000a2  eeb80a40          VCVT.F32.U32 s0,s0
0000a6  f8d0b008          LDR      r11,[r0,#8]
0000aa  ee200a08          VMUL.F32 s0,s0,s16
0000ae  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
0000b2  e9cd8b00          STRD     r8,r11,[sp,#0]
0000b6  eb050c09          ADD      r12,r5,r9
0000ba  4603              MOV      r3,r0
0000bc  eba60109          SUB      r1,r6,r9
0000c0  a259              ADR      r2,|L14.552|
0000c2  4660              MOV      r0,r12
0000c4  f7fffffe          BL       _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
;;;212          numPrintedTotal += SnprintElement(&buffer[numPrintedTotal], bufferLength - numPrintedTotal, "NEvents:", static_cast<s32>(this->numEvents), " ", (*minCharacterToPrint)[3]);
0000c8  6b21              LDR      r1,[r4,#0x30]
0000ca  4481              ADD      r9,r9,r0              ;211
0000cc  a058              ADR      r0,|L14.560|
0000ce  68c9              LDR      r1,[r1,#0xc]
0000d0  a258              ADR      r2,|L14.564|
0000d2  e9cd0100          STRD     r0,r1,[sp,#0]
0000d6  eba60109          SUB      r1,r6,r9
0000da  eb050009          ADD      r0,r5,r9
0000de  6a3b              LDR      r3,[r7,#0x20]
0000e0  f7fffffe          BL       _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
0000e4  4481              ADD      r9,r9,r0
;;;213    
;;;214          if(verbose) {
0000e6  f1ba0f00          CMP      r10,#0
0000ea  d07d              BEQ      |L14.488|
;;;215            numPrintedTotal += SnprintElement(&buffer[numPrintedTotal], bufferLength - numPrintedTotal, "ExcMean:", Round<s32>(this->exclusive_mean*multiplier), suffix, (*minCharacterToPrint)[4]);
0000ec  ed970a04          VLDR     s0,[r7,#0x10]
0000f0  6b20              LDR      r0,[r4,#0x30]
0000f2  eeb80a40          VCVT.F32.U32 s0,s0
0000f6  f8d0a010          LDR      r10,[r0,#0x10]
0000fa  ee200a08          VMUL.F32 s0,s0,s16
0000fe  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
000102  e9cd8a00          STRD     r8,r10,[sp,#0]
000106  eb050c09          ADD      r12,r5,r9
00010a  4603              MOV      r3,r0
00010c  eba60109          SUB      r1,r6,r9
000110  a24b              ADR      r2,|L14.576|
000112  4660              MOV      r0,r12
000114  f7fffffe          BL       _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
;;;216            numPrintedTotal += SnprintElement(&buffer[numPrintedTotal], bufferLength - numPrintedTotal, "ExcMin:", Round<s32>(this->exclusive_min*multiplier), suffix, (*minCharacterToPrint)[5]);
000118  ed970a05          VLDR     s0,[r7,#0x14]
00011c  4481              ADD      r9,r9,r0              ;215
00011e  6b20              LDR      r0,[r4,#0x30]
000120  eeb80a40          VCVT.F32.U32 s0,s0
000124  f8d0a014          LDR      r10,[r0,#0x14]
000128  ee200a08          VMUL.F32 s0,s0,s16
00012c  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
000130  e9cd8a00          STRD     r8,r10,[sp,#0]
000134  eb050c09          ADD      r12,r5,r9
000138  4603              MOV      r3,r0
00013a  eba60109          SUB      r1,r6,r9
00013e  a243              ADR      r2,|L14.588|
000140  4660              MOV      r0,r12
000142  f7fffffe          BL       _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
;;;217            numPrintedTotal += SnprintElement(&buffer[numPrintedTotal], bufferLength - numPrintedTotal, "ExcMax:", Round<s32>(this->exclusive_max*multiplier), suffix, (*minCharacterToPrint)[6]);
000146  ed970a06          VLDR     s0,[r7,#0x18]
00014a  4481              ADD      r9,r9,r0              ;216
00014c  6b20              LDR      r0,[r4,#0x30]
00014e  eeb80a40          VCVT.F32.U32 s0,s0
000152  f8d0a018          LDR      r10,[r0,#0x18]
000156  ee200a08          VMUL.F32 s0,s0,s16
00015a  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
00015e  e9cd8a00          STRD     r8,r10,[sp,#0]
000162  4603              MOV      r3,r0
000164  eba60109          SUB      r1,r6,r9
000168  eb050009          ADD      r0,r5,r9
00016c  a239              ADR      r2,|L14.596|
00016e  f7fffffe          BL       _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
;;;218            numPrintedTotal += SnprintElement(&buffer[numPrintedTotal], bufferLength - numPrintedTotal, "IncMean:", Round<s32>(this->inclusive_mean*multiplier), suffix, (*minCharacterToPrint)[7]);
000172  ed970a00          VLDR     s0,[r7,#0]
000176  4481              ADD      r9,r9,r0              ;217
000178  6b20              LDR      r0,[r4,#0x30]
00017a  eeb80a40          VCVT.F32.U32 s0,s0
00017e  f8d0a01c          LDR      r10,[r0,#0x1c]
000182  ee200a08          VMUL.F32 s0,s0,s16
000186  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
00018a  e9cd8a00          STRD     r8,r10,[sp,#0]
00018e  eb050c09          ADD      r12,r5,r9
000192  4603              MOV      r3,r0
000194  eba60109          SUB      r1,r6,r9
000198  a230              ADR      r2,|L14.604|
00019a  4660              MOV      r0,r12
00019c  f7fffffe          BL       _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
;;;219            numPrintedTotal += SnprintElement(&buffer[numPrintedTotal], bufferLength - numPrintedTotal, "IncMin:", Round<s32>(this->inclusive_min*multiplier), suffix, (*minCharacterToPrint)[8]);
0001a0  ed970a01          VLDR     s0,[r7,#4]
0001a4  4481              ADD      r9,r9,r0              ;218
0001a6  6b20              LDR      r0,[r4,#0x30]
0001a8  eeb80a40          VCVT.F32.U32 s0,s0
0001ac  f8d0a020          LDR      r10,[r0,#0x20]
0001b0  ee200a08          VMUL.F32 s0,s0,s16
0001b4  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
0001b8  e9cd8a00          STRD     r8,r10,[sp,#0]
0001bc  eb050c09          ADD      r12,r5,r9
0001c0  4603              MOV      r3,r0
0001c2  eba60109          SUB      r1,r6,r9
0001c6  a228              ADR      r2,|L14.616|
0001c8  4660              MOV      r0,r12
0001ca  f7fffffe          BL       _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
;;;220            numPrintedTotal += SnprintElement(&buffer[numPrintedTotal], bufferLength - numPrintedTotal, "IncMax:", Round<s32>(this->inclusive_max*multiplier), suffix, (*minCharacterToPrint)[9]);
0001ce  ed970a02          VLDR     s0,[r7,#8]
0001d2  4481              ADD      r9,r9,r0              ;219
0001d4  6b20              LDR      r0,[r4,#0x30]
0001d6  eeb80a40          VCVT.F32.U32 s0,s0
0001da  6a44              LDR      r4,[r0,#0x24]
0001dc  ee200a08          VMUL.F32 s0,s0,s16
0001e0  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
0001e4  4603              MOV      r3,r0
0001e6  e000              B        |L14.490|
                  |L14.488|
0001e8  e009              B        |L14.510|
                  |L14.490|
0001ea  e9cd8400          STRD     r8,r4,[sp,#0]
0001ee  eba60109          SUB      r1,r6,r9
0001f2  eb050009          ADD      r0,r5,r9
0001f6  a21e              ADR      r2,|L14.624|
0001f8  f7fffffe          BL       _ZN4Anki8Embedded14SnprintElementEPciPKciS3_i ; Anki::Embedded::SnprintElement(char*, int, const char*, int, const char*, int)
0001fc  4481              ADD      r9,r9,r0
                  |L14.510|
;;;221          }
;;;222    
;;;223          return numPrintedTotal;
;;;224        }
0001fe  b003              ADD      sp,sp,#0xc
000200  4648              MOV      r0,r9                 ;223
000202  ecbd8b02          VPOP     {d8}
000206  e8bd8ff0          POP      {r4-r11,pc}
;;;225    
                          ENDP

00020a  0000              DCW      0x0000
                  |L14.524|
00020c  25733a20          DCB      "%s: ",0
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L14.532|
000214  75732000          DCB      "us ",0
                  |L14.536|
000218  6d732000          DCB      "ms ",0
                  |L14.540|
00021c  3a83126f          DCFS     0x3a83126f ; 0.0010000000474974513
                  |L14.544|
000220  45786354          DCB      "ExcTot:",0
000224  6f743a00
                  |L14.552|
000228  496e6354          DCB      "IncTot:",0
00022c  6f743a00
                  |L14.560|
000230  2000              DCB      " ",0
000232  00                DCB      0
000233  00                DCB      0
                  |L14.564|
000234  4e457665          DCB      "NEvents:",0
000238  6e74733a
00023c  00      
00023d  00                DCB      0
00023e  00                DCB      0
00023f  00                DCB      0
                  |L14.576|
000240  4578634d          DCB      "ExcMean:",0
000244  65616e3a
000248  00      
000249  00                DCB      0
00024a  00                DCB      0
00024b  00                DCB      0
                  |L14.588|
00024c  4578634d          DCB      "ExcMin:",0
000250  696e3a00
                  |L14.596|
000254  4578634d          DCB      "ExcMax:",0
000258  61783a00
                  |L14.604|
00025c  496e634d          DCB      "IncMean:",0
000260  65616e3a
000264  00      
000265  00                DCB      0
000266  00                DCB      0
000267  00                DCB      0
                  |L14.616|
000268  496e634d          DCB      "IncMin:",0
00026c  696e3a00
                  |L14.624|
000270  496e634d          DCB      "IncMax:",0
000274  61783a00

                          AREA ||i.__sti___16_benchmarking_cpp_4a8bcdb9||, CODE, READONLY, ALIGN=2

                  __sti___16_benchmarking_cpp_4a8bcdb9 PROC
000000  4803              LDR      r0,|L15.16|
000002  ed9f0a02          VLDR     s0,|L15.12|
000006  ed800a01          VSTR     s0,[r0,#4]
00000a  4770              BX       lr
                          ENDP

                  |L15.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L15.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded16BenchmarkElementC1EPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded16BenchmarkElementC1EPKc||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki8Embedded14SnprintElementEPciPKciS3_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded14SnprintElementEPciPKciS3_i||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZNK4Anki8Embedded16BenchmarkElement7SnprintEPcibbPKNS0_15FixedLengthListIiEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded16BenchmarkElement7SnprintEPcibbPKNS0_15FixedLengthListIiEE||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZNK4Anki8Embedded16BenchmarkElement5PrintEbbPKNS0_15FixedLengthListIiEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded16BenchmarkElement5PrintEbbPKNS0_15FixedLengthListIiEE||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki8Embedded23ShowBenchmarkParametersC1EPKcbPKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded23ShowBenchmarkParametersC1EPKcbPKh||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN4Anki8Embedded16InitBenchmarkingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded16InitBenchmarkingEv||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki8Embedded14BeginBenchmarkEPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded14BeginBenchmarkEPKc||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki8Embedded12EndBenchmarkEPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded12EndBenchmarkEPKc||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki8Embedded23ComputeBenchmarkResultsERNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded23ComputeBenchmarkResultsERNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki8Embedded21PrintBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEEbb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded21PrintBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEEbb||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN4Anki8Embedded31ComputeAndPrintBenchmarkResultsEbbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded31ComputeAndPrintBenchmarkResultsEbbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN4Anki8Embedded20ShowBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEERKNS1_INS0_23ShowBenchmarkParametersEEEfii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded20ShowBenchmarkResultsERKNS0_15FixedLengthListINS0_16BenchmarkElementEEERKNS1_INS0_23ShowBenchmarkParametersEEEfii||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN4Anki8Embedded12GetNameIndexEPKcRKNS0_15FixedLengthListINS0_16BenchmarkElementEEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded12GetNameIndexEPKcRKNS0_15FixedLengthListINS0_16BenchmarkElementEEE||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN4Anki8Embedded24PrintPercentileBenchmarkERKNS0_15FixedLengthListINS1_INS0_16BenchmarkElementEEEEEifNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded24PrintPercentileBenchmarkERKNS0_15FixedLengthListINS1_INS0_16BenchmarkElementEEEEEifNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i.__sti___16_benchmarking_cpp_4a8bcdb9||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___16_benchmarking_cpp_4a8bcdb9||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_benchmarkEvents
                          %        192000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a507269          DCB      0x3a,0x50,0x72,0x69
000020  6e744265          DCB      0x6e,0x74,0x42,0x65
000024  6e63686d          DCB      0x6e,0x63,0x68,0x6d
000028  61726b52          DCB      0x61,0x72,0x6b,0x52
00002c  6573756c          DCB      0x65,0x73,0x75,0x6c
000030  74732863          DCB      0x74,0x73,0x28,0x63
000034  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000038  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00003c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000040  6d626564          DCB      0x6d,0x62,0x65,0x64
000044  6465643a          DCB      0x64,0x65,0x64,0x3a
000048  3a466978          DCB      0x3a,0x46,0x69,0x78
00004c  65644c65          DCB      0x65,0x64,0x4c,0x65
000050  6e677468          DCB      0x6e,0x67,0x74,0x68
000054  4c697374          DCB      0x4c,0x69,0x73,0x74
000058  3c416e6b          DCB      0x3c,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a42656e          DCB      0x3a,0x42,0x65,0x6e
00006c  63686d61          DCB      0x63,0x68,0x6d,0x61
000070  726b456c          DCB      0x72,0x6b,0x45,0x6c
000074  656d656e          DCB      0x65,0x6d,0x65,0x6e
000078  743e2026          DCB      0x74,0x3e,0x20,0x26
00007c  2c20626f          DCB      0x2c,0x20,0x62,0x6f
000080  6f6c2c20          DCB      0x6f,0x6c,0x2c,0x20
000084  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
000088  2900              DCB      0x29,0x00
                  |symbol_number.226|
00008a  416e              DCB      0x41,0x6e
00008c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000090  52657375          DCB      0x52,0x65,0x73,0x75
000094  6c742041          DCB      0x6c,0x74,0x20,0x41
000098  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00009c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000a0  65646465          DCB      0x65,0x64,0x64,0x65
0000a4  643a3a43          DCB      0x64,0x3a,0x3a,0x43
0000a8  6f6d7075          DCB      0x6f,0x6d,0x70,0x75
0000ac  7465416e          DCB      0x74,0x65,0x41,0x6e
0000b0  64507269          DCB      0x64,0x50,0x72,0x69
0000b4  6e744265          DCB      0x6e,0x74,0x42,0x65
0000b8  6e63686d          DCB      0x6e,0x63,0x68,0x6d
0000bc  61726b52          DCB      0x61,0x72,0x6b,0x52
0000c0  6573756c          DCB      0x65,0x73,0x75,0x6c
0000c4  74732862          DCB      0x74,0x73,0x28,0x62
0000c8  6f6f6c2c          DCB      0x6f,0x6f,0x6c,0x2c
0000cc  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000d0  6c2c2041          DCB      0x6c,0x2c,0x20,0x41
0000d4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000d8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000dc  65646465          DCB      0x65,0x64,0x64,0x65
0000e0  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
0000e4  656d6f72          DCB      0x65,0x6d,0x6f,0x72
0000e8  79537461          DCB      0x79,0x53,0x74,0x61
0000ec  636b2900          DCB      0x63,0x6b,0x29,0x00
                  |symbol_number.227|
0000f0  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000f4  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
0000f8  73756c74          DCB      0x73,0x75,0x6c,0x74
0000fc  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000100  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000104  6d626564          DCB      0x6d,0x62,0x65,0x64
000108  6465643a          DCB      0x64,0x65,0x64,0x3a
00010c  3a507269          DCB      0x3a,0x50,0x72,0x69
000110  6e745065          DCB      0x6e,0x74,0x50,0x65
000114  7263656e          DCB      0x72,0x63,0x65,0x6e
000118  74696c65          DCB      0x74,0x69,0x6c,0x65
00011c  42656e63          DCB      0x42,0x65,0x6e,0x63
000120  686d6172          DCB      0x68,0x6d,0x61,0x72
000124  6b28636f          DCB      0x6b,0x28,0x63,0x6f
000128  6e737420          DCB      0x6e,0x73,0x74,0x20
00012c  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000130  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000134  62656464          DCB      0x62,0x65,0x64,0x64
000138  65643a3a          DCB      0x65,0x64,0x3a,0x3a
00013c  46697865          DCB      0x46,0x69,0x78,0x65
000140  644c656e          DCB      0x64,0x4c,0x65,0x6e
000144  6774684c          DCB      0x67,0x74,0x68,0x4c
000148  6973743c          DCB      0x69,0x73,0x74,0x3c
00014c  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000150  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000154  62656464          DCB      0x62,0x65,0x64,0x64
000158  65643a3a          DCB      0x65,0x64,0x3a,0x3a
00015c  46697865          DCB      0x46,0x69,0x78,0x65
000160  644c656e          DCB      0x64,0x4c,0x65,0x6e
000164  6774684c          DCB      0x67,0x74,0x68,0x4c
000168  6973743c          DCB      0x69,0x73,0x74,0x3c
00016c  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000170  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000174  62656464          DCB      0x62,0x65,0x64,0x64
000178  65643a3a          DCB      0x65,0x64,0x3a,0x3a
00017c  42656e63          DCB      0x42,0x65,0x6e,0x63
000180  686d6172          DCB      0x68,0x6d,0x61,0x72
000184  6b456c65          DCB      0x6b,0x45,0x6c,0x65
000188  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00018c  3e3e2026          DCB      0x3e,0x3e,0x20,0x26
000190  2c207369          DCB      0x2c,0x20,0x73,0x69
000194  676e6564          DCB      0x67,0x6e,0x65,0x64
000198  20696e74          DCB      0x20,0x69,0x6e,0x74
00019c  2c20666c          DCB      0x2c,0x20,0x66,0x6c
0001a0  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0001a4  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0001a8  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0001ac  6d626564          DCB      0x6d,0x62,0x65,0x64
0001b0  6465643a          DCB      0x64,0x65,0x64,0x3a
0001b4  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
0001b8  6f727953          DCB      0x6f,0x72,0x79,0x53
0001bc  7461636b          DCB      0x74,0x61,0x63,0x6b
0001c0  2900              DCB      0x29,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  42656e63          DCB      "Benchmark Results: (Exc=Exclusive Inc=Inclusive Tot=Tot"
000004  686d6172
000008  6b205265
00000c  73756c74
000010  733a2028
000014  4578633d
000018  4578636c
00001c  75736976
000020  6520496e
000024  633d496e
000028  636c7573
00002c  69766520
000030  546f743d
000034  546f74  
000037  616c204e          DCB      "al N=NumberOf)\n",0
00003b  3d4e756d
00003f  6265724f
000043  66290a00

                          AREA ||.data||, DATA, ALIGN=2

                  g_numBenchmarkEvents
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___16_benchmarking_cpp_4a8bcdb9

                          AREA ||.data__ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs||, COMGROUP=_ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string
000000  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000004  75746542          DCB      0x75,0x74,0x65,0x42
000008  656e6368          DCB      0x65,0x6e,0x63,0x68
00000c  6d61726b          DCB      0x6d,0x61,0x72,0x6b
000010  52657375          DCB      0x52,0x65,0x73,0x75
000014  6c747300          DCB      0x6c,0x74,0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_0||, COMGROUP=_ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_0 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  6e756d42          DCB      0x6e,0x75,0x6d,0x42
00000c  656e6368          DCB      0x65,0x6e,0x63,0x68
000010  6d61726b          DCB      0x6d,0x61,0x72,0x6b
000014  4576656e          DCB      0x45,0x76,0x65,0x6e
000018  747300            DCB      0x74,0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_1||, COMGROUP=_ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_1 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c72          DCB      0x6f,0x6e,0x5c,0x72
000014  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000018  5c737263          DCB      0x5c,0x73,0x72,0x63
00001c  5c62656e          DCB      0x5c,0x62,0x65,0x6e
000020  63686d61          DCB      0x63,0x68,0x6d,0x61
000024  726b696e          DCB      0x72,0x6b,0x69,0x6e
000028  672e6370          DCB      0x67,0x2e,0x63,0x70
00002c  7000              DCB      0x70,0x00

                          AREA ||.data__ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_2||, COMGROUP=_ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_2 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 4)
000000  4f757420          DCB      0x4f,0x75,0x74,0x20
000004  6f66206d          DCB      0x6f,0x66,0x20,0x6d
000008  656d6f72          DCB      0x65,0x6d,0x6f,0x72
00000c  7900              DCB      0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_3||, COMGROUP=_ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_3 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 5)
000000  42656e63          DCB      0x42,0x65,0x6e,0x63
000004  686d6172          DCB      0x68,0x6d,0x61,0x72
000008  6b207061          DCB      0x6b,0x20,0x70,0x61
00000c  72736520          DCB      0x72,0x73,0x65,0x20
000010  6572726f          DCB      0x65,0x72,0x72,0x6f
000014  723a2050          DCB      0x72,0x3a,0x20,0x50
000018  65726861          DCB      0x65,0x72,0x68,0x61
00001c  70732042          DCB      0x70,0x73,0x20,0x42
000020  6567696e          DCB      0x65,0x67,0x69,0x6e
000024  42656e63          DCB      0x42,0x65,0x6e,0x63
000028  686d6172          DCB      0x68,0x6d,0x61,0x72
00002c  6b282920          DCB      0x6b,0x28,0x29,0x20
000030  616e6420          DCB      0x61,0x6e,0x64,0x20
000034  456e6442          DCB      0x45,0x6e,0x64,0x42
000038  656e6368          DCB      0x65,0x6e,0x63,0x68
00003c  6d61726b          DCB      0x6d,0x61,0x72,0x6b
000040  28292077          DCB      0x28,0x29,0x20,0x77
000044  65726520          DCB      0x65,0x72,0x65,0x20
000048  6e657374          DCB      0x6e,0x65,0x73,0x74
00004c  65642c20          DCB      0x65,0x64,0x2c,0x20
000050  6f722074          DCB      0x6f,0x72,0x20,0x74
000054  68657265          DCB      0x68,0x65,0x72,0x65
000058  20776572          DCB      0x20,0x77,0x65,0x72
00005c  65206d6f          DCB      0x65,0x20,0x6d,0x6f
000060  72652074          DCB      0x72,0x65,0x20,0x74
000064  68616e20          DCB      0x68,0x61,0x6e,0x20
000068  25642062          DCB      0x25,0x64,0x20,0x62
00006c  656e6368          DCB      0x65,0x6e,0x63,0x68
000070  6d61726b          DCB      0x6d,0x61,0x72,0x6b
000074  20657665          DCB      0x20,0x65,0x76,0x65
000078  6e74732c          DCB      0x6e,0x74,0x73,0x2c
00007c  206f7220          DCB      0x20,0x6f,0x72,0x20
000080  496e6974          DCB      0x49,0x6e,0x69,0x74
000084  42656e63          DCB      0x42,0x65,0x6e,0x63
000088  686d6172          DCB      0x68,0x6d,0x61,0x72
00008c  6b696e67          DCB      0x6b,0x69,0x6e,0x67
000090  28292077          DCB      0x28,0x29,0x20,0x77
000094  61732063          DCB      0x61,0x73,0x20,0x63
000098  616c6c65          DCB      0x61,0x6c,0x6c,0x65
00009c  6420696e          DCB      0x64,0x20,0x69,0x6e
0000a0  20626574          DCB      0x20,0x62,0x65,0x74
0000a4  7765656e          DCB      0x77,0x65,0x65,0x6e
0000a8  20612053          DCB      0x20,0x61,0x20,0x53
0000ac  74617274          DCB      0x74,0x61,0x72,0x74
0000b0  42656e63          DCB      0x42,0x65,0x6e,0x63
0000b4  686d6172          DCB      0x68,0x6d,0x61,0x72
0000b8  6b696e67          DCB      0x6b,0x69,0x6e,0x67
0000bc  28292061          DCB      0x28,0x29,0x20,0x61
0000c0  6e642045          DCB      0x6e,0x64,0x20,0x45
0000c4  6e644265          DCB      0x6e,0x64,0x42,0x65
0000c8  6e63686d          DCB      0x6e,0x63,0x68,0x6d
0000cc  61726b69          DCB      0x61,0x72,0x6b,0x69
0000d0  6e672829          DCB      0x6e,0x67,0x28,0x29
0000d4  20706169          DCB      0x20,0x70,0x61,0x69
0000d8  722c206f          DCB      0x72,0x2c,0x20,0x6f
0000dc  7220736f          DCB      0x72,0x20,0x73,0x6f
0000e0  6d65206f          DCB      0x6d,0x65,0x20,0x6f
0000e4  74686572          DCB      0x74,0x68,0x65,0x72
0000e8  206e6f6e          DCB      0x20,0x6e,0x6f,0x6e
0000ec  2d737570          DCB      0x2d,0x73,0x75,0x70
0000f0  706f7274          DCB      0x70,0x6f,0x72,0x74
0000f4  65642074          DCB      0x65,0x64,0x20,0x74
0000f8  68696e67          DCB      0x68,0x69,0x6e,0x67
0000fc  206c6973          DCB      0x20,0x6c,0x69,0x73
000100  74656420          DCB      0x74,0x65,0x64,0x20
000104  696e2074          DCB      0x69,0x6e,0x20,0x74
000108  68652063          DCB      0x68,0x65,0x20,0x63
00010c  6f6d6d65          DCB      0x6f,0x6d,0x6d,0x65
000110  6e74732e          DCB      0x6e,0x74,0x73,0x2e
000114  0a00              DCB      0x0a,0x00

                          AREA ||.data__ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_4||, COMGROUP=_ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_4 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 6)
000000  257300            DCB      0x25,0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a416c6c          DCB      0x3a,0x41,0x6c,0x6c
000010  6f636174          DCB      0x6f,0x63,0x61,0x74
000014  65427566          DCB      0x65,0x42,0x75,0x66
000018  66657246          DCB      0x66,0x65,0x72,0x46
00001c  726f6d4d          DCB      0x72,0x6f,0x6d,0x4d
000020  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000024  79537461          DCB      0x79,0x53,0x74,0x61
000028  636b00            DCB      0x63,0x6b,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs ; Anki::Embedded::Array<unsigned>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000010  70757465          DCB      0x70,0x75,0x74,0x65
000014  52657175          DCB      0x52,0x65,0x71,0x75
000018  69726564          DCB      0x69,0x72,0x65,0x64
00001c  53747269          DCB      0x53,0x74,0x72,0x69
000020  646500            DCB      0x64,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<unsigned>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<unsigned>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  2e417272          DCB      0x2e,0x41,0x72,0x72
000008  61793264          DCB      0x61,0x79,0x32,0x64
00000c  2e696e69          DCB      0x2e,0x69,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  696e7075          DCB      0x69,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  204e554c          DCB      0x20,0x4e,0x55,0x4c
000018  4c00              DCB      0x4c,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a496e69          DCB      0x3a,0x49,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6542          DCB      0x69,0x7a,0x65,0x42
000018  75666665          DCB      0x75,0x66,0x66,0x65
00001c  7200              DCB      0x72,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
000000  46696c6c          DCB      0x46,0x69,0x6c,0x6c
000004  20706174          DCB      0x20,0x70,0x61,0x74
000008  7465726e          DCB      0x74,0x65,0x72,0x6e
00000c  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000010  74207375          DCB      0x74,0x20,0x73,0x75
000014  70706f72          DCB      0x70,0x70,0x6f,0x72
000018  74656420          DCB      0x74,0x65,0x64,0x20
00001c  666f7220          DCB      0x66,0x6f,0x72,0x20
000020  41727261          DCB      0x41,0x72,0x72,0x61
000024  7900              DCB      0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  206e6f74          DCB      0x20,0x6e,0x6f,0x74
000018  206c6172          DCB      0x20,0x6c,0x61,0x72
00001c  67652065          DCB      0x67,0x65,0x20,0x65
000020  6e6f7567          DCB      0x6e,0x6f,0x75,0x67
000024  682e2025          DCB      0x68,0x2e,0x20,0x25
000028  64206279          DCB      0x64,0x20,0x62,0x79
00002c  74657320          DCB      0x74,0x65,0x73,0x20
000030  69732072          DCB      0x69,0x73,0x20,0x72
000034  65717569          DCB      0x65,0x71,0x75,0x69
000038  7265642e          DCB      0x72,0x65,0x64,0x2e
00003c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a417272          DCB      0x3a,0x41,0x72,0x72
000010  617900            DCB      0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a416c6c          DCB      0x3a,0x41,0x6c,0x6c
000010  6f636174          DCB      0x6f,0x63,0x61,0x74
000014  65427566          DCB      0x65,0x42,0x75,0x66
000018  66657246          DCB      0x66,0x65,0x72,0x46
00001c  726f6d4d          DCB      0x72,0x6f,0x6d,0x4d
000020  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000024  79537461          DCB      0x79,0x53,0x74,0x61
000028  636b00            DCB      0x63,0x6b,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs ; Anki::Embedded::Array<int>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000010  70757465          DCB      0x70,0x75,0x74,0x65
000014  52657175          DCB      0x52,0x65,0x71,0x75
000018  69726564          DCB      0x69,0x72,0x65,0x64
00001c  53747269          DCB      0x53,0x74,0x72,0x69
000020  646500            DCB      0x64,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<int>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<int>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  2e417272          DCB      0x2e,0x41,0x72,0x72
000008  61793264          DCB      0x61,0x79,0x32,0x64
00000c  2e696e69          DCB      0x2e,0x69,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  696e7075          DCB      0x69,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  204e554c          DCB      0x20,0x4e,0x55,0x4c
000018  4c00              DCB      0x4c,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a496e69          DCB      0x3a,0x49,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6542          DCB      0x69,0x7a,0x65,0x42
000018  75666665          DCB      0x75,0x66,0x66,0x65
00001c  7200              DCB      0x72,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
000000  46696c6c          DCB      0x46,0x69,0x6c,0x6c
000004  20706174          DCB      0x20,0x70,0x61,0x74
000008  7465726e          DCB      0x74,0x65,0x72,0x6e
00000c  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000010  74207375          DCB      0x74,0x20,0x73,0x75
000014  70706f72          DCB      0x70,0x70,0x6f,0x72
000018  74656420          DCB      0x74,0x65,0x64,0x20
00001c  666f7220          DCB      0x66,0x6f,0x72,0x20
000020  41727261          DCB      0x41,0x72,0x72,0x61
000024  7900              DCB      0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  206e6f74          DCB      0x20,0x6e,0x6f,0x74
000018  206c6172          DCB      0x20,0x6c,0x61,0x72
00001c  67652065          DCB      0x67,0x65,0x20,0x65
000020  6e6f7567          DCB      0x6e,0x6f,0x75,0x67
000024  682e2025          DCB      0x68,0x2e,0x20,0x25
000028  64206279          DCB      0x64,0x20,0x62,0x79
00002c  74657320          DCB      0x74,0x65,0x73,0x20
000030  69732072          DCB      0x69,0x73,0x20,0x72
000034  65717569          DCB      0x65,0x71,0x75,0x69
000038  7265642e          DCB      0x72,0x65,0x64,0x2e
00003c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a417272          DCB      0x3a,0x41,0x72,0x72
000010  617900            DCB      0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string
000000  4c696e65          DCB      0x4c,0x69,0x6e,0x65
000004  61725365          DCB      0x61,0x72,0x53,0x65
000008  7175656e          DCB      0x71,0x75,0x65,0x6e
00000c  63653c54          DCB      0x63,0x65,0x3c,0x54
000010  7970653e          DCB      0x79,0x70,0x65,0x3e
000014  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000018  6d707574          DCB      0x6d,0x70,0x75,0x74
00001c  6553697a          DCB      0x65,0x53,0x69,0x7a
000020  6500              DCB      0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_0||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_0 ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string (instance 2)
000000  73697a65          DCB      0x73,0x69,0x7a,0x65
000004  20657374          DCB      0x20,0x65,0x73,0x74
000008  696d6174          DCB      0x69,0x6d,0x61,0x74
00000c  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000010  6661696c          DCB      0x66,0x61,0x69,0x6c
000014  656400            DCB      0x65,0x64,0x00

                          AREA ||.data__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_1||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_1 ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f736571          DCB      0x2f,0x73,0x65,0x71
000030  75656e63          DCB      0x75,0x65,0x6e,0x63
000034  65732e68          DCB      0x65,0x73,0x2e,0x68
000038  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiEs ; Anki::Embedded::Array<int>::get_size(int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  6500              DCB      0x65,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiEs_0 ; Anki::Embedded::Array<int>::get_size(int) const::string (instance 2)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiEs_1 ; Anki::Embedded::Array<int>::get_size(int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a416c6c          DCB      0x3a,0x41,0x6c,0x6c
000010  6f636174          DCB      0x6f,0x63,0x61,0x74
000014  65427566          DCB      0x65,0x42,0x75,0x66
000018  66657246          DCB      0x66,0x65,0x72,0x46
00001c  726f6d4d          DCB      0x72,0x6f,0x6d,0x4d
000020  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000024  79537461          DCB      0x79,0x53,0x74,0x61
000028  636b00            DCB      0x63,0x6b,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000010  70757465          DCB      0x70,0x75,0x74,0x65
000014  52657175          DCB      0x52,0x65,0x71,0x75
000018  69726564          DCB      0x69,0x72,0x65,0x64
00001c  53747269          DCB      0x53,0x74,0x72,0x69
000020  646500            DCB      0x64,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  2e417272          DCB      0x2e,0x41,0x72,0x72
000008  61793264          DCB      0x61,0x79,0x32,0x64
00000c  2e696e69          DCB      0x2e,0x69,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  696e7075          DCB      0x69,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  204e554c          DCB      0x20,0x4e,0x55,0x4c
000018  4c00              DCB      0x4c,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a496e69          DCB      0x3a,0x49,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6542          DCB      0x69,0x7a,0x65,0x42
000018  75666665          DCB      0x75,0x66,0x66,0x65
00001c  7200              DCB      0x72,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
000000  46696c6c          DCB      0x46,0x69,0x6c,0x6c
000004  20706174          DCB      0x20,0x70,0x61,0x74
000008  7465726e          DCB      0x74,0x65,0x72,0x6e
00000c  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000010  74207375          DCB      0x74,0x20,0x73,0x75
000014  70706f72          DCB      0x70,0x70,0x6f,0x72
000018  74656420          DCB      0x74,0x65,0x64,0x20
00001c  666f7220          DCB      0x66,0x6f,0x72,0x20
000020  41727261          DCB      0x41,0x72,0x72,0x61
000024  7900              DCB      0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  206e6f74          DCB      0x20,0x6e,0x6f,0x74
000018  206c6172          DCB      0x20,0x6c,0x61,0x72
00001c  67652065          DCB      0x67,0x65,0x20,0x65
000020  6e6f7567          DCB      0x6e,0x6f,0x75,0x67
000024  682e2025          DCB      0x68,0x2e,0x20,0x25
000028  64206279          DCB      0x64,0x20,0x62,0x79
00002c  74657320          DCB      0x74,0x65,0x73,0x20
000030  69732072          DCB      0x69,0x73,0x20,0x72
000034  65717569          DCB      0x65,0x71,0x75,0x69
000038  7265642e          DCB      0x72,0x65,0x64,0x2e
00003c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a417272          DCB      0x3a,0x41,0x72,0x72
000010  617900            DCB      0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Resize(int, int, Anki::Embedded::MemoryStack&)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a526573          DCB      0x3a,0x52,0x65,0x73
000010  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Resize(int, int, Anki::Embedded::MemoryStack&)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Resize(int, int, Anki::Embedded::MemoryStack&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayINS0_16BenchmarkElementEE8get_sizeEiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayINS0_16BenchmarkElementEE8get_sizeEiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayINS0_16BenchmarkElementEE8get_sizeEiEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::get_size(int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  6500              DCB      0x65,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayINS0_16BenchmarkElementEE8get_sizeEiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayINS0_16BenchmarkElementEE8get_sizeEiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayINS0_16BenchmarkElementEE8get_sizeEiEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::get_size(int) const::string (instance 2)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayINS0_16BenchmarkElementEE8get_sizeEiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayINS0_16BenchmarkElementEE8get_sizeEiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayINS0_16BenchmarkElementEE8get_sizeEiEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::get_size(int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<BasicBenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a416c6c          DCB      0x3a,0x41,0x6c,0x6c
000010  6f636174          DCB      0x6f,0x63,0x61,0x74
000014  65427566          DCB      0x65,0x42,0x75,0x66
000018  66657246          DCB      0x66,0x65,0x72,0x46
00001c  726f6d4d          DCB      0x72,0x6f,0x6d,0x4d
000020  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000024  79537461          DCB      0x79,0x53,0x74,0x61
000028  636b00            DCB      0x63,0x6b,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<BasicBenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<BasicBenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs ; Anki::Embedded::Array<BasicBenchmarkElement>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000010  70757465          DCB      0x70,0x75,0x74,0x65
000014  52657175          DCB      0x52,0x65,0x71,0x75
000018  69726564          DCB      0x69,0x72,0x65,0x64
00001c  53747269          DCB      0x53,0x74,0x72,0x69
000020  646500            DCB      0x64,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<BasicBenchmarkElement>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<BasicBenchmarkElement>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  2e417272          DCB      0x2e,0x41,0x72,0x72
000008  61793264          DCB      0x61,0x79,0x32,0x64
00000c  2e696e69          DCB      0x2e,0x69,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  696e7075          DCB      0x69,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  204e554c          DCB      0x20,0x4e,0x55,0x4c
000018  4c00              DCB      0x4c,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a496e69          DCB      0x3a,0x49,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6542          DCB      0x69,0x7a,0x65,0x42
000018  75666665          DCB      0x75,0x66,0x66,0x65
00001c  7200              DCB      0x72,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
000000  46696c6c          DCB      0x46,0x69,0x6c,0x6c
000004  20706174          DCB      0x20,0x70,0x61,0x74
000008  7465726e          DCB      0x74,0x65,0x72,0x6e
00000c  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000010  74207375          DCB      0x74,0x20,0x73,0x75
000014  70706f72          DCB      0x70,0x70,0x6f,0x72
000018  74656420          DCB      0x74,0x65,0x64,0x20
00001c  666f7220          DCB      0x66,0x6f,0x72,0x20
000020  41727261          DCB      0x41,0x72,0x72,0x61
000024  7900              DCB      0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  206e6f74          DCB      0x20,0x6e,0x6f,0x74
000018  206c6172          DCB      0x20,0x6c,0x61,0x72
00001c  67652065          DCB      0x67,0x65,0x20,0x65
000020  6e6f7567          DCB      0x6e,0x6f,0x75,0x67
000024  682e2025          DCB      0x68,0x2e,0x20,0x25
000028  64206279          DCB      0x64,0x20,0x62,0x79
00002c  74657320          DCB      0x74,0x65,0x73,0x20
000030  69732072          DCB      0x69,0x73,0x20,0x72
000034  65717569          DCB      0x65,0x71,0x75,0x69
000038  7265642e          DCB      0x72,0x65,0x64,0x2e
00003c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<BasicBenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a417272          DCB      0x3a,0x41,0x72,0x72
000010  617900            DCB      0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<BasicBenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<BasicBenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayI21BasicBenchmarkElementE8get_sizeEiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayI21BasicBenchmarkElementE8get_sizeEiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayI21BasicBenchmarkElementE8get_sizeEiEs ; Anki::Embedded::Array<BasicBenchmarkElement>::get_size(int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  6500              DCB      0x65,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayI21BasicBenchmarkElementE8get_sizeEiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayI21BasicBenchmarkElementE8get_sizeEiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayI21BasicBenchmarkElementE8get_sizeEiEs_0 ; Anki::Embedded::Array<BasicBenchmarkElement>::get_size(int) const::string (instance 2)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayI21BasicBenchmarkElementE8get_sizeEiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayI21BasicBenchmarkElementE8get_sizeEiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayI21BasicBenchmarkElementE8get_sizeEiEs_1 ; Anki::Embedded::Array<BasicBenchmarkElement>::get_size(int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a416c6c          DCB      0x3a,0x41,0x6c,0x6c
000010  6f636174          DCB      0x6f,0x63,0x61,0x74
000014  65427566          DCB      0x65,0x42,0x75,0x66
000018  66657246          DCB      0x66,0x65,0x72,0x46
00001c  726f6d4d          DCB      0x72,0x6f,0x6d,0x4d
000020  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000024  79537461          DCB      0x79,0x53,0x74,0x61
000028  636b00            DCB      0x63,0x6b,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000010  70757465          DCB      0x70,0x75,0x74,0x65
000014  52657175          DCB      0x52,0x65,0x71,0x75
000018  69726564          DCB      0x69,0x72,0x65,0x64
00001c  53747269          DCB      0x53,0x74,0x72,0x69
000020  646500            DCB      0x64,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  2e417272          DCB      0x2e,0x41,0x72,0x72
000008  61793264          DCB      0x61,0x79,0x32,0x64
00000c  2e696e69          DCB      0x2e,0x69,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  696e7075          DCB      0x69,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  204e554c          DCB      0x20,0x4e,0x55,0x4c
000018  4c00              DCB      0x4c,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a496e69          DCB      0x3a,0x49,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6542          DCB      0x69,0x7a,0x65,0x42
000018  75666665          DCB      0x75,0x66,0x66,0x65
00001c  7200              DCB      0x72,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
000000  46696c6c          DCB      0x46,0x69,0x6c,0x6c
000004  20706174          DCB      0x20,0x70,0x61,0x74
000008  7465726e          DCB      0x74,0x65,0x72,0x6e
00000c  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000010  74207375          DCB      0x74,0x20,0x73,0x75
000014  70706f72          DCB      0x70,0x70,0x6f,0x72
000018  74656420          DCB      0x74,0x65,0x64,0x20
00001c  666f7220          DCB      0x66,0x6f,0x72,0x20
000020  41727261          DCB      0x41,0x72,0x72,0x61
000024  7900              DCB      0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  206e6f74          DCB      0x20,0x6e,0x6f,0x74
000018  206c6172          DCB      0x20,0x6c,0x61,0x72
00001c  67652065          DCB      0x67,0x65,0x20,0x65
000020  6e6f7567          DCB      0x6e,0x6f,0x75,0x67
000024  682e2025          DCB      0x68,0x2e,0x20,0x25
000028  64206279          DCB      0x64,0x20,0x62,0x79
00002c  74657320          DCB      0x74,0x65,0x73,0x20
000030  69732072          DCB      0x69,0x73,0x20,0x72
000034  65717569          DCB      0x65,0x71,0x75,0x69
000038  7265642e          DCB      0x72,0x65,0x64,0x2e
00003c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a417272          DCB      0x3a,0x41,0x72,0x72
000010  617900            DCB      0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8get_sizeEiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8get_sizeEiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8get_sizeEiEs ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::get_size(int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  6500              DCB      0x65,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8get_sizeEiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8get_sizeEiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8get_sizeEiEs_0 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::get_size(int) const::string (instance 2)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8get_sizeEiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8get_sizeEiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8get_sizeEiEs_1 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::get_size(int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs ; Anki::Embedded::Array<unsigned>::get_size(int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  6500              DCB      0x65,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs_0 ; Anki::Embedded::Array<unsigned>::get_size(int) const::string (instance 2)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs_1 ; Anki::Embedded::Array<unsigned>::get_size(int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs||, COMGROUP=_ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::string
000000  536f7274          DCB      0x53,0x6f,0x72,0x74
000004  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_0||, COMGROUP=_ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_0 ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::string (instance 2)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206172          DCB      0x74,0x20,0x61,0x72
000008  72617920          DCB      0x72,0x61,0x79,0x20
00000c  69732069          DCB      0x69,0x73,0x20,0x69
000010  6e76616c          DCB      0x6e,0x76,0x61,0x6c
000014  696400            DCB      0x69,0x64,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_1||, COMGROUP=_ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_1 ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f6d6174          DCB      0x2f,0x6d,0x61,0x74
000030  7269782e          DCB      0x72,0x69,0x78,0x2e
000034  6800              DCB      0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_2||, COMGROUP=_ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_2 ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::string (instance 4)
000000  736f7274          DCB      0x73,0x6f,0x72,0x74
000004  57686963          DCB      0x57,0x68,0x69,0x63
000008  6844696d          DCB      0x68,0x44,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e206d          DCB      0x6f,0x6e,0x20,0x6d
000014  75737420          DCB      0x75,0x73,0x74,0x20
000018  6265207a          DCB      0x62,0x65,0x20,0x7a
00001c  65726f20          DCB      0x65,0x72,0x6f,0x20
000020  6f72206f          DCB      0x6f,0x72,0x20,0x6f
000024  6e6500            DCB      0x6e,0x65,0x00

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d017              BEQ      |L322.64|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L322.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L322.30|
                  |L322.26|
00001a  462b              MOV      r3,r5
00001c  e010              B        |L322.64|
                  |L322.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0a              BGE      |L322.64|
00002a  2185              MOVS     r1,#0x85
00002c  4806              LDR      r0,|L322.72|
00002e  e9cd0100          STRD     r0,r1,[sp,#0]
000032  4b06              LDR      r3,|L322.76|
000034  4a06              LDR      r2,|L322.80|
000036  4907              LDR      r1,|L322.84|
000038  2005              MOVS     r0,#5
00003a  f7fffffe          BL       _Anki_Log
00003e  462b              MOV      r3,r5
                  |L322.64|
000040  6023              STR      r3,[r4,#0]
000042  b003              ADD      sp,sp,#0xc
000044  4620              MOV      r0,r4
000046  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L322.72|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L322.76|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_1 ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string (instance 3)
                  |L322.80|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_0 ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string (instance 2)
                  |L322.84|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string

                          AREA ||area_number.323||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.323||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)
;;;794    
;;;795        template<typename Type> Result Array<Type>::InitializeBuffer(const s32 numRows, const s32 numCols, void * const rawData, const s32 dataLength, const Flags::Buffer flags)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;796        {
000004  b083              SUB      sp,sp,#0xc
;;;797          if(!rawData) {
;;;798            AnkiError("Anki.Array2d.initialize", "input data buffer is NULL");
000006  f8df9100          LDR      r9,|L329.264|
00000a  f8dd8030          LDR      r8,[sp,#0x30]         ;796
00000e  001d              MOVS     r5,r3                 ;796
000010  4616              MOV      r6,r2                 ;796
000012  460f              MOV      r7,r1                 ;796
000014  4604              MOV      r4,r0                 ;796
000016  f04f3aff          MOV      r10,#0xffffffff       ;796
00001a  f04f0b00          MOV      r11,#0                ;796
00001e  d015              BEQ      |L329.76|
;;;799            InvalidateArray();
;;;800            return RESULT_FAIL_UNINITIALIZED_MEMORY;
;;;801          }
;;;802    
;;;803          AnkiConditionalErrorAndReturnValue(numCols >= 0 && numRows >= 0 && dataLength >= MEMORY_ALIGNMENT,
000020  2e00              CMP      r6,#0
000022  bfa8              IT       GE
000024  2f00              CMPGE    r7,#0
000026  db02              BLT      |L329.46|
000028  f1b80f10          CMP      r8,#0x10
00002c  d224              BCS      |L329.120|
                  |L329.46|
00002e  f2403023          MOV      r0,#0x323
000032  e9cd9000          STRD     r9,r0,[sp,#0]
000036  4b35              LDR      r3,|L329.268|
000038  4a35              LDR      r2,|L329.272|
00003a  4936              LDR      r1,|L329.276|
00003c  2005              MOVS     r0,#5
00003e  f7fffffe          BL       _Anki_Log
;;;804            RESULT_FAIL_INVALID_SIZE, "Array<Type>::InitializeBuffer", "Negative dimension");
;;;805    
;;;806          AnkiConditionalErrorAndReturnValue(!flags.get_useBoundaryFillPatterns(),
;;;807            RESULT_FAIL_INVALID_PARAMETER, "Array<Type>::InitializeBuffer", "Fill patterns not supported for Array");
;;;808    
;;;809          this->flags = flags;
;;;810          this->size[0] = numRows;
;;;811          this->size[1] = numCols;
;;;812    
;;;813          // Initialize an empty array.
;;;814    
;;;815          this->data = reinterpret_cast<Type*>(rawData);
;;;816    
;;;817          const s32 extraAlignmentBytes = static_cast<s32>(RoundUp<size_t>(reinterpret_cast<size_t>(rawData), MEMORY_ALIGNMENT) - reinterpret_cast<size_t>(rawData));
;;;818          const s32 requiredBytes = ComputeRequiredStride(numCols,flags)*numRows + extraAlignmentBytes;
;;;819    
;;;820          if(requiredBytes > dataLength) {
;;;821            AnkiError("Anki.Array2d.initialize", "Input data buffer is not large enough. %d bytes is required.", requiredBytes);
;;;822            InvalidateArray();
;;;823            return RESULT_FAIL_OUT_OF_MEMORY;
;;;824          }
;;;825    
;;;826          this->data = reinterpret_cast<Type*>( reinterpret_cast<char*>(rawData) + extraAlignmentBytes );
;;;827    
;;;828          //#if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;829          //      this->UpdateCvMatMirror(*this);
;;;830          //#endif // #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;831    
;;;832          return RESULT_OK;
;;;833        } // Array<Type>::InitializeBuffer()
000042  b003              ADD      sp,sp,#0xc
000044  f04f60a0          MOV      r0,#0x5000000         ;803
000048  e8bd8ff0          POP      {r4-r11,pc}
                  |L329.76|
00004c  f240301e          MOV      r0,#0x31e             ;798
000050  e9cd9000          STRD     r9,r0,[sp,#0]         ;798
000054  4b2d              LDR      r3,|L329.268|
000056  4a30              LDR      r2,|L329.280|
000058  4930              LDR      r1,|L329.284|
00005a  2005              MOVS     r0,#5                 ;798
00005c  f7fffffe          BL       _Anki_Log
000060  f8c4a000          STR      r10,[r4,#0]           ;798
000064  f8c4a004          STR      r10,[r4,#4]           ;798
000068  f8c4b010          STR      r11,[r4,#0x10]        ;800
00006c  f8c4a008          STR      r10,[r4,#8]           ;800
000070  b003              ADD      sp,sp,#0xc
000072  482b              LDR      r0,|L329.288|
000074  e8bd8ff0          POP      {r4-r11,pc}
                  |L329.120|
000078  a80d              ADD      r0,sp,#0x34           ;806
00007a  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
00007e  b170              CBZ      r0,|L329.158|
000080  f2403026          MOV      r0,#0x326             ;806
000084  e9cd9000          STRD     r9,r0,[sp,#0]         ;806
000088  4b20              LDR      r3,|L329.268|
00008a  4a26              LDR      r2,|L329.292|
00008c  4921              LDR      r1,|L329.276|
00008e  2005              MOVS     r0,#5                 ;806
000090  f7fffffe          BL       _Anki_Log
000094  b003              ADD      sp,sp,#0xc
000096  f04f7040          MOV      r0,#0x3000000         ;806
00009a  e8bd8ff0          POP      {r4-r11,pc}
                  |L329.158|
00009e  980d              LDR      r0,[sp,#0x34]         ;809
0000a0  e9c40503          STRD     r0,r5,[r4,#0xc]       ;809
0000a4  f105000f          ADD      r0,r5,#0xf            ;809
0000a8  f020000f          BIC      r0,r0,#0xf            ;809
0000ac  e9c47600          STRD     r7,r6,[r4,#0]         ;809
0000b0  1b40              SUBS     r0,r0,r5              ;817
0000b2  2e01              CMP      r6,#1                 ;817
0000b4  bfd8              IT       LE                    ;817
0000b6  2601              MOVLE    r6,#1                 ;817
0000b8  2164              MOVS     r1,#0x64              ;817
0000ba  4371              MULS     r1,r6,r1              ;817
0000bc  310f              ADDS     r1,r1,#0xf            ;817
0000be  f021010f          BIC      r1,r1,#0xf            ;817
0000c2  fb010107          MLA      r1,r1,r7,r0           ;818
0000c6  4541              CMP      r1,r8                 ;820
0000c8  dd17              BLE      |L329.250|
0000ca  f2403035          MOV      r0,#0x335             ;821
0000ce  f8cd9000          STR      r9,[sp,#0]            ;821
0000d2  e9cd0101          STRD     r0,r1,[sp,#4]         ;821
0000d6  4b0d              LDR      r3,|L329.268|
0000d8  4a13              LDR      r2,|L329.296|
0000da  4910              LDR      r1,|L329.284|
0000dc  2005              MOVS     r0,#5                 ;821
0000de  f7fffffe          BL       _Anki_Log
0000e2  f8c4a000          STR      r10,[r4,#0]           ;821
0000e6  f8c4a004          STR      r10,[r4,#4]           ;821
0000ea  f8c4b010          STR      r11,[r4,#0x10]        ;823
0000ee  f8c4a008          STR      r10,[r4,#8]           ;823
0000f2  b003              ADD      sp,sp,#0xc
0000f4  480d              LDR      r0,|L329.300|
0000f6  e8bd8ff0          POP      {r4-r11,pc}
                  |L329.250|
0000fa  4428              ADD      r0,r0,r5              ;826
0000fc  6120              STR      r0,[r4,#0x10]         ;832
0000fe  b003              ADD      sp,sp,#0xc
000100  2000              MOVS     r0,#0                 ;832
000102  e8bd8ff0          POP      {r4-r11,pc}
;;;834    
                          ENDP

000106  0000              DCW      0x0000
                  |L329.264|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L329.268|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L329.272|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
                  |L329.276|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
                  |L329.280|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L329.284|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
                  |L329.288|
                          DCD      0x01000002
                  |L329.292|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
                  |L329.296|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
                  |L329.300|
                          DCD      0x01000001

                          AREA ||area_number.330||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.330||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L336.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L336.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.337||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.337||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b091              SUB      sp,sp,#0x44
000006  4605              MOV      r5,r0
000008  4691              MOV      r9,r2
00000a  a808              ADD      r0,sp,#0x20
00000c  f04f0801          MOV      r8,#1
000010  f8dda050          LDR      r10,[sp,#0x50]
000014  9f12              LDR      r7,[sp,#0x48]
000016  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
00001a  f1a0040c          SUB      r4,r0,#0xc
00001e  f04f30ff          MOV      r0,#0xffffffff
000022  6020              STR      r0,[r4,#0]
000024  6060              STR      r0,[r4,#4]
000026  f04f0b00          MOV      r11,#0
00002a  f8c4b010          STR      r11,[r4,#0x10]
00002e  60a0              STR      r0,[r4,#8]
000030  2f00              CMP      r7,#0
000032  da0a              BGE      |L343.74|
000034  217d              MOVS     r1,#0x7d
000036  487a              LDR      r0,|L343.544|
000038  e9cd0100          STRD     r0,r1,[sp,#0]
00003c  4b79              LDR      r3,|L343.548|
00003e  4a7a              LDR      r2,|L343.552|
000040  497a              LDR      r1,|L343.556|
000042  2005              MOVS     r0,#5
000044  f7fffffe          BL       _Anki_Log
000048  e089              B        |L343.350|
                  |L343.74|
00004a  f8cdb010          STR      r11,[sp,#0x10]
00004e  2f01              CMP      r7,#1
000050  bfd4              ITE      LE
000052  2001              MOVLE    r0,#1
000054  4638              MOVGT    r0,r7
000056  eb000080          ADD      r0,r0,r0,LSL #2
00005a  0080              LSLS     r0,r0,#2
00005c  300f              ADDS     r0,r0,#0xf
00005e  f020060f          BIC      r6,r0,#0xf
000062  a804              ADD      r0,sp,#0x10
000064  e9cd0a02          STRD     r0,r10,[sp,#8]
000068  2e00              CMP      r6,#0
00006a  dc0a              BGT      |L343.130|
00006c  f240310b          MOV      r1,#0x30b
000070  486f              LDR      r0,|L343.560|
000072  e9cd0100          STRD     r0,r1,[sp,#0]
000076  4b6f              LDR      r3,|L343.564|
000078  4a6f              LDR      r2,|L343.568|
00007a  4970              LDR      r1,|L343.572|
00007c  2005              MOVS     r0,#5
00007e  f7fffffe          BL       _Anki_Log
                  |L343.130|
000082  a803              ADD      r0,sp,#0xc
000084  60a6              STR      r6,[r4,#8]
000086  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00008a  4602              MOV      r2,r0
00008c  4631              MOV      r1,r6
00008e  4648              MOV      r0,r9
000090  9b02              LDR      r3,[sp,#8]
000092  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
000096  f8cda00c          STR      r10,[sp,#0xc]
00009a  f8dd9010          LDR      r9,[sp,#0x10]
00009e  f8dfa1a0          LDR      r10,|L343.576|
0000a2  0006              MOVS     r6,r0
0000a4  d00d              BEQ      |L343.194|
0000a6  f1b90f10          CMP      r9,#0x10
0000aa  d21c              BCS      |L343.230|
0000ac  f2403023          MOV      r0,#0x323
0000b0  e9cda000          STRD     r10,r0,[sp,#0]
0000b4  4b63              LDR      r3,|L343.580|
0000b6  4a64              LDR      r2,|L343.584|
0000b8  4964              LDR      r1,|L343.588|
0000ba  2005              MOVS     r0,#5
0000bc  f7fffffe          BL       _Anki_Log
0000c0  e04d              B        |L343.350|
                  |L343.194|
0000c2  f240301e          MOV      r0,#0x31e
0000c6  e9cda000          STRD     r10,r0,[sp,#0]
0000ca  4b5e              LDR      r3,|L343.580|
0000cc  4a60              LDR      r2,|L343.592|
0000ce  4961              LDR      r1,|L343.596|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f04f30ff          MOV      r0,#0xffffffff
0000da  6020              STR      r0,[r4,#0]
0000dc  6060              STR      r0,[r4,#4]
0000de  f8c4b010          STR      r11,[r4,#0x10]
0000e2  60a0              STR      r0,[r4,#8]
0000e4  e03b              B        |L343.350|
                  |L343.230|
0000e6  a803              ADD      r0,sp,#0xc
0000e8  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
0000ec  b150              CBZ      r0,|L343.260|
0000ee  f2403026          MOV      r0,#0x326
0000f2  e9cda000          STRD     r10,r0,[sp,#0]
0000f6  4b53              LDR      r3,|L343.580|
0000f8  4a57              LDR      r2,|L343.600|
0000fa  4954              LDR      r1,|L343.588|
0000fc  2005              MOVS     r0,#5
0000fe  f7fffffe          BL       _Anki_Log
000102  e02c              B        |L343.350|
                  |L343.260|
000104  9903              LDR      r1,[sp,#0xc]
000106  e9c41603          STRD     r1,r6,[r4,#0xc]
00010a  f106000f          ADD      r0,r6,#0xf
00010e  f020000f          BIC      r0,r0,#0xf
000112  e9c48700          STRD     r8,r7,[r4,#0]
000116  1b80              SUBS     r0,r0,r6
000118  2f01              CMP      r7,#1
00011a  bfd8              IT       LE
00011c  2701              MOVLE    r7,#1
00011e  eb070187          ADD      r1,r7,r7,LSL #2
000122  0089              LSLS     r1,r1,#2
000124  310f              ADDS     r1,r1,#0xf
000126  f021010f          BIC      r1,r1,#0xf
00012a  fb010108          MLA      r1,r1,r8,r0
00012e  4549              CMP      r1,r9
000130  bfdc              ITT      LE
000132  1831              ADDLE    r1,r6,r0
000134  6121              STRLE    r1,[r4,#0x10]
000136  dd12              BLE      |L343.350|
000138  f2403035          MOV      r0,#0x335
00013c  f8cda000          STR      r10,[sp,#0]
000140  e9cd0101          STRD     r0,r1,[sp,#4]
000144  4b3f              LDR      r3,|L343.580|
000146  4a45              LDR      r2,|L343.604|
000148  4942              LDR      r1,|L343.596|
00014a  2005              MOVS     r0,#5
00014c  f7fffffe          BL       _Anki_Log
000150  f04f30ff          MOV      r0,#0xffffffff
000154  6020              STR      r0,[r4,#0]
000156  6060              STR      r0,[r4,#4]
000158  f8c4b010          STR      r11,[r4,#0x10]
00015c  60a0              STR      r0,[r4,#8]
                  |L343.350|
00015e  e89403c0          LDM      r4,{r6-r9}
000162  2200              MOVS     r2,#0
000164  6924              LDR      r4,[r4,#0x10]
000166  4611              MOV      r1,r2
000168  a80a              ADD      r0,sp,#0x28
00016a  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00016e  4682              MOV      r10,r0
000170  2200              MOVS     r2,#0
000172  4611              MOV      r1,r2
000174  a80d              ADD      r0,sp,#0x34
000176  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00017a  e9da2300          LDRD     r2,r3,[r10,#0]
00017e  4601              MOV      r1,r0
000180  f8dac008          LDR      r12,[r10,#8]
000184  4628              MOV      r0,r5
000186  f8c5c008          STR      r12,[r5,#8]
00018a  e9c02300          STRD     r2,r3,[r0,#0]
00018e  e9d12300          LDRD     r2,r3,[r1,#0]
000192  6889              LDR      r1,[r1,#8]
000194  f1050a14          ADD      r10,r5,#0x14
000198  62ac              STR      r4,[r5,#0x28]
00019a  e88a03c2          STM      r10,{r1,r6-r9}
00019e  2e00              CMP      r6,#0
0001a0  e9c52303          STRD     r2,r3,[r5,#0xc]
0001a4  bfc8              IT       GT
0001a6  2f00              CMPGT    r7,#0
0001a8  dd28              BLE      |L343.508|
0001aa  fb06f107          MUL      r1,r6,r7
0001ae  b329              CBZ      r1,|L343.508|
0001b0  2100              MOVS     r1,#0
0001b2  fb014108          MLA      r1,r1,r8,r4
0001b6  62e9              STR      r1,[r5,#0x2c]
                  |L343.440|
0001b8  2e00              CMP      r6,#0
0001ba  bfc8              IT       GT
0001bc  2f00              CMPGT    r7,#0
0001be  dd20              BLE      |L343.514|
0001c0  fb06f007          MUL      r0,r6,r7
0001c4  b1e8              CBZ      r0,|L343.514|
0001c6  2000              MOVS     r0,#0
0001c8  fb004008          MLA      r0,r0,r8,r4
0001cc  6328              STR      r0,[r5,#0x30]
                  |L343.462|
0001ce  69a9              LDR      r1,[r5,#0x18]
0001d0  2900              CMP      r1,#0
0001d2  bfc4              ITT      GT
0001d4  69e8              LDRGT    r0,[r5,#0x1c]
0001d6  2800              CMPGT    r0,#0
0001d8  dd16              BLE      |L343.520|
0001da  4348              MULS     r0,r1,r0
0001dc  d014              BEQ      |L343.520|
0001de  6a2a              LDR      r2,[r5,#0x20]
0001e0  6aa9              LDR      r1,[r5,#0x28]
0001e2  2000              MOVS     r0,#0
0001e4  fb001002          MLA      r0,r0,r2,r1
0001e8  6328              STR      r0,[r5,#0x30]
                  |L343.490|
0001ea  a814              ADD      r0,sp,#0x50
0001ec  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0001f0  b168              CBZ      r0,|L343.526|
0001f2  4628              MOV      r0,r5
0001f4  9912              LDR      r1,[sp,#0x48]
0001f6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::set_size(int)
0001fa  e00c              B        |L343.534|
                  |L343.508|
0001fc  f8c5b02c          STR      r11,[r5,#0x2c]
000200  e7da              B        |L343.440|
                  |L343.514|
000202  f8c5b030          STR      r11,[r5,#0x30]
000206  e7e2              B        |L343.462|
                  |L343.520|
000208  f8c5b030          STR      r11,[r5,#0x30]
00020c  e7ed              B        |L343.490|
                  |L343.526|
00020e  2100              MOVS     r1,#0
000210  4628              MOV      r0,r5
000212  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::set_size(int)
                  |L343.534|
000216  b015              ADD      sp,sp,#0x54
000218  4628              MOV      r0,r5
00021a  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

00021e  0000              DCW      0x0000
                  |L343.544|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L343.548|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L343.552|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L343.556|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
                  |L343.560|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L343.564|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
                  |L343.568|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
                  |L343.572|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
                  |L343.576|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L343.580|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L343.584|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
                  |L343.588|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
                  |L343.592|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L343.596|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
                  |L343.600|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
                  |L343.604|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)

                          AREA ||area_number.344||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.344||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b091              SUB      sp,sp,#0x44
000006  468b              MOV      r11,r1
000008  4604              MOV      r4,r0
00000a  2101              MOVS     r1,#1
00000c  4617              MOV      r7,r2
00000e  a805              ADD      r0,sp,#0x14
000010  910e              STR      r1,[sp,#0x38]
000012  9e14              LDR      r6,[sp,#0x50]
000014  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000018  f1a0080c          SUB      r8,r0,#0xc
00001c  f04f30ff          MOV      r0,#0xffffffff
000020  f8c80000          STR      r0,[r8,#0]
000024  f8c80004          STR      r0,[r8,#4]
000028  f04f0900          MOV      r9,#0
00002c  f8c89010          STR      r9,[r8,#0x10]
000030  f8c80008          STR      r0,[r8,#8]
000034  f1bb0f00          CMP      r11,#0
000038  da0a              BGE      |L350.80|
00003a  217d              MOVS     r1,#0x7d
00003c  484c              LDR      r0,|L350.368|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  4b4c              LDR      r3,|L350.372|
000044  4a4c              LDR      r2,|L350.376|
000046  494d              LDR      r1,|L350.380|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  e02f              B        |L350.176|
                  |L350.80|
000050  4658              MOV      r0,r11
000052  f8cd901c          STR      r9,[sp,#0x1c]
000056  f1bb0f01          CMP      r11,#1
00005a  bfd8              IT       LE
00005c  2001              MOVLE    r0,#1
00005e  2164              MOVS     r1,#0x64
000060  4348              MULS     r0,r1,r0
000062  300f              ADDS     r0,r0,#0xf
000064  f020050f          BIC      r5,r0,#0xf
000068  f10d0a1c          ADD      r10,sp,#0x1c
00006c  960f              STR      r6,[sp,#0x3c]
00006e  2d00              CMP      r5,#0
000070  dc0a              BGT      |L350.136|
000072  f240310b          MOV      r1,#0x30b
000076  4842              LDR      r0,|L350.384|
000078  e9cd0100          STRD     r0,r1,[sp,#0]
00007c  4b41              LDR      r3,|L350.388|
00007e  4a42              LDR      r2,|L350.392|
000080  4942              LDR      r1,|L350.396|
000082  2005              MOVS     r0,#5
000084  f7fffffe          BL       _Anki_Log
                  |L350.136|
000088  a80f              ADD      r0,sp,#0x3c
00008a  f8c85008          STR      r5,[r8,#8]
00008e  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
000092  4602              MOV      r2,r0
000094  4653              MOV      r3,r10
000096  4629              MOV      r1,r5
000098  4638              MOV      r0,r7
00009a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
00009e  9907              LDR      r1,[sp,#0x1c]
0000a0  4603              MOV      r3,r0
0000a2  9100              STR      r1,[sp,#0]
0000a4  9601              STR      r6,[sp,#4]
0000a6  465a              MOV      r2,r11
0000a8  4640              MOV      r0,r8
0000aa  990e              LDR      r1,[sp,#0x38]
0000ac  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)
                  |L350.176|
0000b0  e89804e0          LDM      r8,{r5-r7,r10}
0000b4  2200              MOVS     r2,#0
0000b6  f8d88010          LDR      r8,[r8,#0x10]
0000ba  4611              MOV      r1,r2
0000bc  a808              ADD      r0,sp,#0x20
0000be  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
0000c2  2200              MOVS     r2,#0
0000c4  9000              STR      r0,[sp,#0]
0000c6  4611              MOV      r1,r2
0000c8  a80b              ADD      r0,sp,#0x2c
0000ca  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
0000ce  9900              LDR      r1,[sp,#0]
0000d0  4684              MOV      r12,r0
0000d2  4620              MOV      r0,r4
0000d4  e9d12300          LDRD     r2,r3,[r1,#0]
0000d8  6889              LDR      r1,[r1,#8]
0000da  6022              STR      r2,[r4,#0]
0000dc  e9c03101          STRD     r3,r1,[r0,#4]
0000e0  e9dc1200          LDRD     r1,r2,[r12,#0]
0000e4  f8dc3008          LDR      r3,[r12,#8]
0000e8  f104000c          ADD      r0,r4,#0xc
0000ec  f8c48028          STR      r8,[r4,#0x28]
0000f0  e88004ee          STM      r0,{r1-r3,r5-r7,r10}
0000f4  2d00              CMP      r5,#0
0000f6  bfc8              IT       GT
0000f8  2e00              CMPGT    r6,#0
0000fa  dd28              BLE      |L350.334|
0000fc  fb05f106          MUL      r1,r5,r6
000100  b329              CBZ      r1,|L350.334|
000102  2100              MOVS     r1,#0
000104  fb018107          MLA      r1,r1,r7,r8
000108  62e1              STR      r1,[r4,#0x2c]
                  |L350.266|
00010a  2d00              CMP      r5,#0
00010c  bfc8              IT       GT
00010e  2e00              CMPGT    r6,#0
000110  dd20              BLE      |L350.340|
000112  fb05f006          MUL      r0,r5,r6
000116  b1e8              CBZ      r0,|L350.340|
000118  2000              MOVS     r0,#0
00011a  fb008007          MLA      r0,r0,r7,r8
00011e  6320              STR      r0,[r4,#0x30]
                  |L350.288|
000120  69a0              LDR      r0,[r4,#0x18]
000122  2800              CMP      r0,#0
000124  bfc4              ITT      GT
000126  69e1              LDRGT    r1,[r4,#0x1c]
000128  2900              CMPGT    r1,#0
00012a  dd16              BLE      |L350.346|
00012c  4348              MULS     r0,r1,r0
00012e  d014              BEQ      |L350.346|
000130  6a22              LDR      r2,[r4,#0x20]
000132  6aa1              LDR      r1,[r4,#0x28]
000134  2000              MOVS     r0,#0
000136  fb001002          MLA      r0,r0,r2,r1
00013a  6320              STR      r0,[r4,#0x30]
                  |L350.316|
00013c  a814              ADD      r0,sp,#0x50
00013e  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
000142  b168              CBZ      r0,|L350.352|
000144  4659              MOV      r1,r11
000146  4620              MOV      r0,r4
000148  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::set_size(int)
00014c  e00c              B        |L350.360|
                  |L350.334|
00014e  f8c4902c          STR      r9,[r4,#0x2c]
000152  e7da              B        |L350.266|
                  |L350.340|
000154  f8c49030          STR      r9,[r4,#0x30]
000158  e7e2              B        |L350.288|
                  |L350.346|
00015a  f8c49030          STR      r9,[r4,#0x30]
00015e  e7ed              B        |L350.316|
                  |L350.352|
000160  2100              MOVS     r1,#0
000162  4620              MOV      r0,r4
000164  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::set_size(int)
                  |L350.360|
000168  b015              ADD      sp,sp,#0x54
00016a  4620              MOV      r0,r4
00016c  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L350.368|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L350.372|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L350.376|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L350.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
                  |L350.384|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L350.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
                  |L350.392|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
                  |L350.396|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string

                          AREA ||area_number.351||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.351||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackE||, COMGROUP=_ZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackE PROC ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)
;;;239    
;;;240          static FixedLengthList<BenchmarkElement> ComputeBenchmarkResults(const s32 numBenchmarkEvents, const BenchmarkEvent * benchmarkEvents, MemoryStack &memory)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;241          {
;;;242            if(numBenchmarkEvents == 0) {
;;;243              return FixedLengthList<BenchmarkElement>(0, memory, Flags::Buffer(false, false, false));
;;;244            }
;;;245    
;;;246            AnkiConditionalErrorAndReturnValue(numBenchmarkEvents > 0 && numBenchmarkEvents < MAX_BENCHMARK_EVENTS,
000004  f8df9408          LDR      r9,|L357.1040|
000008  b0d9              SUB      sp,sp,#0x164          ;241
00000a  4615              MOV      r5,r2                 ;241
00000c  f1b10800          SUBS     r8,r1,#0              ;241
000010  d012              BEQ      |L357.56|
000012  dd02              BLE      |L357.26|
000014  f5b85f7a          CMP      r8,#0x3e80
000018  db1d              BLT      |L357.86|
                  |L357.26|
00001a  20f6              MOVS     r0,#0xf6
00001c  e9cd9000          STRD     r9,r0,[sp,#0]
000020  4bfc              LDR      r3,|L357.1044|
000022  4afd              LDR      r2,|L357.1048|
000024  49fd              LDR      r1,|L357.1052|
000026  2005              MOVS     r0,#5
000028  f7fffffe          BL       _Anki_Log
00002c  9859              LDR      r0,[sp,#0x164]
00002e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::FixedLengthList()
;;;247              FixedLengthList<BenchmarkElement>(), "ComputeBenchmarkResults", "Invalid numBenchmarkEvents");
;;;248    
;;;249            FixedLengthList<BenchmarkElement> outputResults(numBenchmarkEvents/2, memory, Flags::Buffer(false, false, false));
;;;250    
;;;251    #if defined(_MSC_VER)
;;;252            LARGE_INTEGER frequency;
;;;253            f64 frequencyF64;
;;;254            QueryPerformanceFrequency(&frequency);
;;;255            frequencyF64 = (f64)(frequency.QuadPart);
;;;256    #endif
;;;257    
;;;258            {
;;;259              PUSH_MEMORY_STACK(memory);
;;;260    
;;;261              FixedLengthList<BasicBenchmarkElement> basicOutputResults(numBenchmarkEvents/2, memory, Flags::Buffer(false, false, false));
;;;262              FixedLengthList<BenchmarkInstance> fullList(numBenchmarkEvents/2, memory, Flags::Buffer(false, false, false));
;;;263              FixedLengthList<BenchmarkInstance> parseStack(numBenchmarkEvents/2, memory, Flags::Buffer(false, false, false));
;;;264    
;;;265              AnkiConditionalErrorAndReturnValue(AreValid(outputResults, basicOutputResults, fullList, parseStack),
;;;266                FixedLengthList<BenchmarkElement>(), "ComputeBenchmarkResults", "Out of memory");
;;;267    
;;;268              BenchmarkInstance * pParseStack = parseStack.Pointer(0);
;;;269    
;;;270              // First, parse each event individually, and add it to the fullList
;;;271              for(s32 iEvent=0; iEvent<numBenchmarkEvents; iEvent++) {
;;;272    #if defined(_MSC_VER)
;;;273                const u32 timeU32 = static_cast<u32>(1000000.0 * (static_cast<f64>(benchmarkEvents[iEvent].time) / frequencyF64));
;;;274    #elif defined(__APPLE_CC__)
;;;275                const u32 timeU32 = benchmarkEvents[iEvent].time;
;;;276    #elif defined(__EDG__)  // MDK-ARM
;;;277                const u32 timeU32 = benchmarkEvents[iEvent].time;
;;;278    #else
;;;279                const u32 timeU32 = benchmarkEvents[iEvent].time;
;;;280    #endif
;;;281    
;;;282                if(benchmarkEvents[iEvent].type == BENCHMARK_EVENT_BEGIN) {
;;;283                  const s32 startLevel = parseStack.get_size();
;;;284    
;;;285                  parseStack.PushBack(BenchmarkInstance(benchmarkEvents[iEvent].name, timeU32, 0, 0, startLevel));
;;;286                } else {
;;;287                  // BENCHMARK_EVENT_END
;;;288    
;;;289                  const BenchmarkInstance startInstance = parseStack.PopBack();
;;;290    
;;;291                  const s32 endLevel = parseStack.get_size();
;;;292    
;;;293                  AnkiConditionalErrorAndReturnValue(strcmp(startInstance.name, benchmarkEvents[iEvent].name) == 0 && startInstance.level == endLevel,
;;;294                    FixedLengthList<BenchmarkElement>(), "ComputeBenchmarkResults", "Benchmark parse error: Perhaps BeginBenchmark() and EndBenchmark() were nested, or there were more than %d benchmark events, or InitBenchmarking() was called in between a StartBenchmarking() and EndBenchmarking() pair, or some other non-supported thing listed in the comments.\n", MAX_BENCHMARK_EVENTS);
;;;295    
;;;296                  const u32 elapsedTime = timeU32 - startInstance.startTime;
;;;297    
;;;298                  // Remove the time for this event from the exclusive time for all other events on the stack
;;;299                  //const s32 numParents = endLevel;
;;;300                  if(endLevel > 0) {
;;;301                    pParseStack[endLevel-1].exclusiveTimeElapsed -= elapsedTime;
;;;302                  }
;;;303    
;;;304                  fullList.PushBack(BenchmarkInstance(benchmarkEvents[iEvent].name, startInstance.startTime, elapsedTime, elapsedTime + startInstance.exclusiveTimeElapsed, endLevel));
;;;305                }
;;;306              } // for(s32 iEvent=0; iEvent<numBenchmarkEvents; iEvent++)
;;;307    
;;;308              // Second, combine the events in fullList to create the total outputResults
;;;309              const s32 numFullList = fullList.get_size();
;;;310              const BenchmarkInstance * pFullList = fullList.Pointer(0);
;;;311              BasicBenchmarkElement * pBasicOutputResults = basicOutputResults.Pointer(0);
;;;312    
;;;313              //fullList.Print("fullList");
;;;314    
;;;315              for(s32 iInstance=0; iInstance<numFullList; iInstance++) {
;;;316                //for(s32 iInstance=numFullList-1; iInstance<numFullList; iInstance++) {
;;;317                const char * const curName = pFullList[iInstance].name;
;;;318                const u32 curInclusiveTimeElapsed = pFullList[iInstance].inclusiveTimeElapsed;
;;;319                const u32 curExclusiveTimeElapsed = pFullList[iInstance].exclusiveTimeElapsed;
;;;320    
;;;321                s32 index = CompileBenchmarkResults::GetNameIndex(curName, basicOutputResults);
;;;322    
;;;323                // If this name hasn't been used yet, add it
;;;324                //if(index < 0 && iInstance == (numFullList-1)) {
;;;325                if(index < 0) {
;;;326                  basicOutputResults.PushBack(curName);
;;;327                  index = basicOutputResults.get_size() - 1;
;;;328                  AnkiAssert(index == CompileBenchmarkResults::GetNameIndex(curName, basicOutputResults));
;;;329                }
;;;330    
;;;331                pBasicOutputResults[index].inclusive_min = MIN(pBasicOutputResults[index].inclusive_min, curInclusiveTimeElapsed);
;;;332                pBasicOutputResults[index].inclusive_max = MAX(pBasicOutputResults[index].inclusive_max, curInclusiveTimeElapsed);
;;;333                pBasicOutputResults[index].inclusive_total += curInclusiveTimeElapsed;
;;;334    
;;;335                pBasicOutputResults[index].exclusive_min = MIN(pBasicOutputResults[index].exclusive_min, curExclusiveTimeElapsed);
;;;336                pBasicOutputResults[index].exclusive_max = MAX(pBasicOutputResults[index].exclusive_max, curExclusiveTimeElapsed);
;;;337                pBasicOutputResults[index].exclusive_total += curExclusiveTimeElapsed;
;;;338    
;;;339                pBasicOutputResults[index].numEvents++;
;;;340              } // for(s32 iInstance=0; iInstance<numFullList; iInstance++)
;;;341    
;;;342              const s32 numEvents = basicOutputResults.get_size();
;;;343              outputResults.set_size(numEvents);
;;;344    
;;;345              BenchmarkElement * pOutputResults = outputResults.Pointer(0);
;;;346    
;;;347              for(s32 iEvent=0; iEvent<numEvents; iEvent++) {
;;;348                pOutputResults[iEvent].inclusive_min = pBasicOutputResults[iEvent].inclusive_min;
;;;349                pOutputResults[iEvent].inclusive_max = pBasicOutputResults[iEvent].inclusive_max;
;;;350                pOutputResults[iEvent].inclusive_total = pBasicOutputResults[iEvent].inclusive_total;
;;;351                pOutputResults[iEvent].exclusive_min = pBasicOutputResults[iEvent].exclusive_min;
;;;352                pOutputResults[iEvent].exclusive_max = pBasicOutputResults[iEvent].exclusive_max;
;;;353                pOutputResults[iEvent].exclusive_total = pBasicOutputResults[iEvent].exclusive_total;
;;;354                pOutputResults[iEvent].numEvents = pBasicOutputResults[iEvent].numEvents;
;;;355    
;;;356                snprintf(pOutputResults[iEvent].name, BenchmarkElement::NAME_LENGTH, "%s", pBasicOutputResults[iEvent].name);
;;;357    
;;;358                if(pOutputResults[iEvent].numEvents == 1) {
;;;359                  pOutputResults[iEvent].inclusive_mean = pOutputResults[iEvent].inclusive_total;
;;;360                  pOutputResults[iEvent].exclusive_mean = pOutputResults[iEvent].exclusive_total;
;;;361                } else {
;;;362                  pOutputResults[iEvent].inclusive_mean = pOutputResults[iEvent].inclusive_total / pOutputResults[iEvent].numEvents;
;;;363                  pOutputResults[iEvent].exclusive_mean = pOutputResults[iEvent].exclusive_total / pOutputResults[iEvent].numEvents;
;;;364                }
;;;365              } // for(s32 iEvent=0; iEvent<numEvents; iEvent++)
;;;366            } // PUSH_MEMORY_STACK(memory);
;;;367    
;;;368            outputResults.Resize(outputResults.get_size(), memory);
;;;369    
;;;370            return outputResults;
;;;371          } // ComputeBenchmarkResults()
000032  b05d              ADD      sp,sp,#0x174
000034  e8bd8ff0          POP      {r4-r11,pc}
                  |L357.56|
000038  2300              MOVS     r3,#0                 ;243
00003a  461a              MOV      r2,r3                 ;243
00003c  4619              MOV      r1,r3                 ;243
00003e  4668              MOV      r0,sp                 ;243
000040  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000044  6803              LDR      r3,[r0,#0]            ;243
000046  2100              MOVS     r1,#0                 ;243
000048  9a5c              LDR      r2,[sp,#0x170]        ;243
00004a  9859              LDR      r0,[sp,#0x164]        ;243
00004c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000050  b05d              ADD      sp,sp,#0x174
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L357.86|
000056  2300              MOVS     r3,#0                 ;249
000058  461a              MOV      r2,r3                 ;249
00005a  4619              MOV      r1,r3                 ;249
00005c  a855              ADD      r0,sp,#0x154          ;249
00005e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000062  eb0874d8          ADD      r4,r8,r8,LSR #31      ;249
000066  6803              LDR      r3,[r0,#0]            ;249
000068  1061              ASRS     r1,r4,#1              ;249
00006a  a806              ADD      r0,sp,#0x18           ;249
00006c  9a5c              LDR      r2,[sp,#0x170]        ;249
00006e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000072  a84e              ADD      r0,sp,#0x138          ;259
000074  995c              LDR      r1,[sp,#0x170]        ;259
000076  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00007a  a94e              ADD      r1,sp,#0x138          ;259
00007c  a842              ADD      r0,sp,#0x108          ;259
00007e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000082  2300              MOVS     r3,#0                 ;261
000084  461a              MOV      r2,r3                 ;261
000086  4619              MOV      r1,r3                 ;261
000088  a805              ADD      r0,sp,#0x14           ;261
00008a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00008e  6803              LDR      r3,[r0,#0]            ;261
000090  1061              ASRS     r1,r4,#1              ;261
000092  aa42              ADD      r2,sp,#0x108          ;261
000094  a820              ADD      r0,sp,#0x80           ;261
000096  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<BasicBenchmarkElement>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00009a  2300              MOVS     r3,#0                 ;262
00009c  461a              MOV      r2,r3                 ;262
00009e  4619              MOV      r1,r3                 ;262
0000a0  a856              ADD      r0,sp,#0x158          ;262
0000a2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000a6  6803              LDR      r3,[r0,#0]            ;262
0000a8  1061              ASRS     r1,r4,#1              ;262
0000aa  aa42              ADD      r2,sp,#0x108          ;262
0000ac  a82d              ADD      r0,sp,#0xb4           ;262
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000b2  2300              MOVS     r3,#0                 ;263
0000b4  461a              MOV      r2,r3                 ;263
0000b6  4619              MOV      r1,r3                 ;263
0000b8  a857              ADD      r0,sp,#0x15c          ;263
0000ba  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000be  6803              LDR      r3,[r0,#0]            ;263
0000c0  1061              ASRS     r1,r4,#1              ;263
0000c2  aa42              ADD      r2,sp,#0x108          ;263
0000c4  a813              ADD      r0,sp,#0x4c           ;263
0000c6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000ca  a806              ADD      r0,sp,#0x18           ;265
0000cc  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::IsValid() const
0000d0  2800              CMP      r0,#0                 ;265
0000d2  d07c              BEQ      |L357.462|
0000d4  9923              LDR      r1,[sp,#0x8c]         ;265
0000d6  9827              LDR      r0,[sp,#0x9c]         ;265
0000d8  4281              CMP      r1,r0                 ;265
0000da  dc7e              BGT      |L357.474|
0000dc  982a              LDR      r0,[sp,#0xa8]         ;265
0000de  b130              CBZ      r0,|L357.238|
0000e0  9826              LDR      r0,[sp,#0x98]         ;265
0000e2  2800              CMP      r0,#0                 ;265
0000e4  bfa3              ITTTE    GE                    ;265
0000e6  9827              LDRGE    r0,[sp,#0x9c]         ;265
0000e8  2800              CMPGE    r0,#0                 ;265
0000ea  2001              MOVGE    r0,#1                 ;265
0000ec  2000              MOVLT    r0,#0                 ;265
                  |L357.238|
0000ee  2800              CMP      r0,#0                 ;265
0000f0  d073              BEQ      |L357.474|
0000f2  9930              LDR      r1,[sp,#0xc0]         ;265
0000f4  9834              LDR      r0,[sp,#0xd0]         ;265
0000f6  4281              CMP      r1,r0                 ;265
0000f8  dc6f              BGT      |L357.474|
0000fa  9837              LDR      r0,[sp,#0xdc]         ;265
0000fc  b130              CBZ      r0,|L357.268|
0000fe  9833              LDR      r0,[sp,#0xcc]         ;265
000100  2800              CMP      r0,#0                 ;265
000102  bfa3              ITTTE    GE                    ;265
000104  9834              LDRGE    r0,[sp,#0xd0]         ;265
000106  2800              CMPGE    r0,#0                 ;265
000108  2001              MOVGE    r0,#1                 ;265
00010a  2000              MOVLT    r0,#0                 ;265
                  |L357.268|
00010c  2800              CMP      r0,#0                 ;265
00010e  d064              BEQ      |L357.474|
000110  9916              LDR      r1,[sp,#0x58]         ;265
000112  981a              LDR      r0,[sp,#0x68]         ;265
000114  4281              CMP      r1,r0                 ;265
000116  dc60              BGT      |L357.474|
000118  981d              LDR      r0,[sp,#0x74]         ;265
00011a  b130              CBZ      r0,|L357.298|
00011c  9819              LDR      r0,[sp,#0x64]         ;265
00011e  2800              CMP      r0,#0                 ;265
000120  bfa3              ITTTE    GE                    ;265
000122  981a              LDRGE    r0,[sp,#0x68]         ;265
000124  2800              CMPGE    r0,#0                 ;265
000126  2001              MOVGE    r0,#1                 ;265
000128  2000              MOVLT    r0,#0                 ;265
                  |L357.298|
00012a  2800              CMP      r0,#0                 ;265
00012c  bf1c              ITT      NE                    ;271
00012e  2400              MOVNE    r4,#0                 ;271
000130  f8dda07c          LDRNE    r10,[sp,#0x7c]        ;271
000134  d051              BEQ      |L357.474|
                  |L357.310|
000136  eb040644          ADD      r6,r4,r4,LSL #1       ;277
00013a  eb050086          ADD      r0,r5,r6,LSL #2       ;277
00013e  6847              LDR      r7,[r0,#4]            ;282
000140  7a00              LDRB     r0,[r0,#8]            ;282
000142  2800              CMP      r0,#0                 ;282
000144  9816              LDR      r0,[sp,#0x58]         ;282
000146  d058              BEQ      |L357.506|
000148  2800              CMP      r0,#0                 ;282
00014a  d072              BEQ      |L357.562|
00014c  1e41              SUBS     r1,r0,#1              ;282
00014e  9a1f              LDR      r2,[sp,#0x7c]         ;282
000150  eb010181          ADD      r1,r1,r1,LSL #2       ;282
000154  eb020b81          ADD      r11,r2,r1,LSL #2      ;282
000158  1e40              SUBS     r0,r0,#1              ;282
00015a  e89b180e          LDM      r11,{r1-r3,r11,r12}   ;282
00015e  f10d0ee8          ADD      lr,sp,#0xe8           ;282
000162  9016              STR      r0,[sp,#0x58]         ;282
000164  e88e180e          STM      lr,{r1-r3,r11,r12}    ;282
                  |L357.360|
000168  f8551026          LDR      r1,[r5,r6,LSL #2]     ;293
00016c  f8ddb058          LDR      r11,[sp,#0x58]        ;293
000170  983e              LDR      r0,[sp,#0xf8]         ;293
000172  f7fffffe          BL       strcmp
000176  2800              CMP      r0,#0                 ;293
000178  bf04              ITT      EQ                    ;293
00017a  983d              LDREQ    r0,[sp,#0xf4]         ;293
00017c  4558              CMPEQ    r0,r11                ;293
00017e  d060              BEQ      |L357.578|
000180  f44f517a          MOV      r1,#0x3e80            ;293
000184  f2401025          MOV      r0,#0x125             ;293
000188  f8cd9000          STR      r9,[sp,#0]            ;293
00018c  e9cd0101          STRD     r0,r1,[sp,#4]         ;293
000190  4ba0              LDR      r3,|L357.1044|
000192  4aa3              LDR      r2,|L357.1056|
000194  49a1              LDR      r1,|L357.1052|
000196  2005              MOVS     r0,#5                 ;293
000198  f7fffffe          BL       _Anki_Log
00019c  9959              LDR      r1,[sp,#0x164]        ;293
00019e  f04f34ff          MOV      r4,#0xffffffff        ;293
0001a2  2500              MOVS     r5,#0
0001a4  600c              STR      r4,[r1,#0]
0001a6  604c              STR      r4,[r1,#4]
0001a8  608c              STR      r4,[r1,#8]
0001aa  60cc              STR      r4,[r1,#0xc]
0001ac  610c              STR      r4,[r1,#0x10]
0001ae  f1010024          ADD      r0,r1,#0x24
0001b2  614c              STR      r4,[r1,#0x14]
0001b4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
0001b8  f8404d0c          STR      r4,[r0,#-0xc]!
0001bc  2100              MOVS     r1,#0
0001be  6044              STR      r4,[r0,#4]
0001c0  6084              STR      r4,[r0,#8]
0001c2  f8405f10          STR      r5,[r0,#0x10]!
0001c6  6045              STR      r5,[r0,#4]
0001c8  6085              STR      r5,[r0,#8]
0001ca  3828              SUBS     r0,r0,#0x28
0001cc  e000              B        |L357.464|
                  |L357.462|
0001ce  e004              B        |L357.474|
                  |L357.464|
0001d0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::set_size(int)
0001d4  b05d              ADD      sp,sp,#0x174
0001d6  e8bd8ff0          POP      {r4-r11,pc}
                  |L357.474|
0001da  f2401009          MOV      r0,#0x109             ;265
0001de  e9cd9000          STRD     r9,r0,[sp,#0]         ;265
0001e2  4b8c              LDR      r3,|L357.1044|
0001e4  4a8f              LDR      r2,|L357.1060|
0001e6  498d              LDR      r1,|L357.1052|
0001e8  2005              MOVS     r0,#5                 ;265
0001ea  f7fffffe          BL       _Anki_Log
0001ee  9859              LDR      r0,[sp,#0x164]        ;265
0001f0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::FixedLengthList()
0001f4  b05d              ADD      sp,sp,#0x174
0001f6  e8bd8ff0          POP      {r4-r11,pc}
                  |L357.506|
0001fa  f8551026          LDR      r1,[r5,r6,LSL #2]     ;285
0001fe  9700              STR      r7,[sp,#0]            ;285
000200  2300              MOVS     r3,#0                 ;285
000202  e9cd0103          STRD     r0,r1,[sp,#0xc]       ;285
000206  e9cd3301          STRD     r3,r3,[sp,#4]         ;285
00020a  9916              LDR      r1,[sp,#0x58]         ;285
00020c  981a              LDR      r0,[sp,#0x68]         ;285
00020e  4288              CMP      r0,r1                 ;285
000210  dd42              BLE      |L357.664|
000212  981f              LDR      r0,[sp,#0x7c]         ;285
000214  eb010281          ADD      r2,r1,r1,LSL #2       ;285
000218  eb000082          ADD      r0,r0,r2,LSL #2       ;285
00021c  463a              MOV      r2,r7                 ;285
00021e  e9dd6702          LDRD     r6,r7,[sp,#8]         ;285
000222  f8ddc010          LDR      r12,[sp,#0x10]        ;285
000226  e88010cc          STM      r0,{r2,r3,r6,r7,r12}  ;285
00022a  1c48              ADDS     r0,r1,#1              ;285
00022c  9016              STR      r0,[sp,#0x58]         ;285
00022e  e033              B        |L357.664|
000230  e7ff              B        |L357.562|
                  |L357.562|
000232  981f              LDR      r0,[sp,#0x7c]         ;285
000234  f10d0be8          ADD      r11,sp,#0xe8          ;285
000238  e890100f          LDM      r0,{r0-r3,r12}        ;285
00023c  e88b100f          STM      r11,{r0-r3,r12}       ;285
000240  e792              B        |L357.360|
                  |L357.578|
000242  983a              LDR      r0,[sp,#0xe8]         ;296
000244  1a38              SUBS     r0,r7,r0              ;296
000246  f1bb0f00          CMP      r11,#0                ;300
00024a  dd08              BLE      |L357.606|
00024c  eb0b018b          ADD      r1,r11,r11,LSL #2     ;301
000250  eb0a0181          ADD      r1,r10,r1,LSL #2      ;301
000254  f8512c0c          LDR      r2,[r1,#-0xc]         ;301
000258  1a12              SUBS     r2,r2,r0              ;301
00025a  f8412c0c          STR      r2,[r1,#-0xc]         ;301
                  |L357.606|
00025e  9b3c              LDR      r3,[sp,#0xf0]         ;304
000260  f8552026          LDR      r2,[r5,r6,LSL #2]     ;304
000264  4403              ADD      r3,r3,r0              ;304
000266  993a              LDR      r1,[sp,#0xe8]         ;304
000268  934b              STR      r3,[sp,#0x12c]        ;304
00026a  e9cd1049          STRD     r1,r0,[sp,#0x124]     ;304
00026e  e9cdb24c          STRD     r11,r2,[sp,#0x130]    ;304
000272  9930              LDR      r1,[sp,#0xc0]         ;304
000274  9834              LDR      r0,[sp,#0xd0]         ;304
000276  4288              CMP      r0,r1                 ;304
000278  dd0e              BLE      |L357.664|
00027a  9839              LDR      r0,[sp,#0xe4]         ;304
00027c  eb010281          ADD      r2,r1,r1,LSL #2       ;304
000280  eb000082          ADD      r0,r0,r2,LSL #2       ;304
000284  e9dd2349          LDRD     r2,r3,[sp,#0x124]     ;304
000288  465f              MOV      r7,r11                ;304
00028a  f8ddc134          LDR      r12,[sp,#0x134]       ;304
00028e  9e4b              LDR      r6,[sp,#0x12c]        ;304
000290  e88010cc          STM      r0,{r2,r3,r6,r7,r12}  ;304
000294  1c48              ADDS     r0,r1,#1              ;304
000296  9030              STR      r0,[sp,#0xc0]         ;304
                  |L357.664|
000298  1c64              ADDS     r4,r4,#1              ;304
00029a  45a0              CMP      r8,r4                 ;271
00029c  f73faf4b          BGT      |L357.310|
0002a0  9830              LDR      r0,[sp,#0xc0]         ;309
0002a2  9000              STR      r0,[sp,#0]            ;309
0002a4  9839              LDR      r0,[sp,#0xe4]         ;310
0002a6  9001              STR      r0,[sp,#4]            ;310
0002a8  9800              LDR      r0,[sp,#0]            ;315
0002aa  2300              MOVS     r3,#0                 ;315
0002ac  9f2c              LDR      r7,[sp,#0xb0]         ;315
0002ae  2800              CMP      r0,#0                 ;315
0002b0  dd61              BLE      |L357.886|
                  |L357.690|
0002b2  9801              LDR      r0,[sp,#4]            ;317
0002b4  eb030183          ADD      r1,r3,r3,LSL #2       ;317
0002b8  eb000081          ADD      r0,r0,r1,LSL #2       ;317
0002bc  9c2c              LDR      r4,[sp,#0xb0]         ;317
0002be  e9d02101          LDRD     r2,r1,[r0,#4]         ;317
0002c2  6906              LDR      r6,[r0,#0x10]         ;321
0002c4  9823              LDR      r0,[sp,#0x8c]         ;321
0002c6  46b4              MOV      r12,r6                ;321
0002c8  1e40              SUBS     r0,r0,#1              ;321
0002ca  d406              BMI      |L357.730|
                  |L357.716|
0002cc  eb041540          ADD      r5,r4,r0,LSL #5       ;321
0002d0  69ed              LDR      r5,[r5,#0x1c]         ;321
0002d2  4565              CMP      r5,r12                ;321
0002d4  d003              BEQ      |L357.734|
0002d6  1e40              SUBS     r0,r0,#1              ;321
0002d8  d5f8              BPL      |L357.716|
                  |L357.730|
0002da  f04f30ff          MOV      r0,#0xffffffff        ;321
                  |L357.734|
0002de  2800              CMP      r0,#0                 ;325
0002e0  da21              BGE      |L357.806|
0002e2  2000              MOVS     r0,#0                 ;325
0002e4  f04f3cff          MOV      r12,#0xffffffff       ;325
0002e8  e9cd0c3a          STRD     r0,r12,[sp,#0xe8]     ;325
0002ec  903c              STR      r0,[sp,#0xf0]         ;325
0002ee  e9cd0c3d          STRD     r0,r12,[sp,#0xf4]     ;325
0002f2  e9cd0640          STRD     r0,r6,[sp,#0x100]     ;325
0002f6  903f              STR      r0,[sp,#0xfc]         ;325
0002f8  f8ddc08c          LDR      r12,[sp,#0x8c]        ;325
0002fc  9827              LDR      r0,[sp,#0x9c]         ;325
0002fe  4584              CMP      r12,r0                ;325
000300  bfa8              IT       GE                    ;325
000302  4660              MOVGE    r0,r12                ;325
000304  da0e              BGE      |L357.804|
000306  eb04104c          ADD      r0,r4,r12,LSL #5      ;325
00030a  e9dd453a          LDRD     r4,r5,[sp,#0xe8]      ;325
00030e  e9dd683c          LDRD     r6,r8,[sp,#0xf0]      ;325
000312  e9dd9a3e          LDRD     r9,r10,[sp,#0xf8]     ;325
000316  e9ddbe40          LDRD     r11,lr,[sp,#0x100]    ;325
00031a  e8804f70          STM      r0,{r4-r6,r8-r11,lr}  ;325
00031e  f10c0001          ADD      r0,r12,#1             ;325
000322  9023              STR      r0,[sp,#0x8c]         ;325
                  |L357.804|
000324  1e40              SUBS     r0,r0,#1              ;325
                  |L357.806|
000326  eb071040          ADD      r0,r7,r0,LSL #5       ;331
00032a  f8d0c004          LDR      r12,[r0,#4]           ;331
00032e  4594              CMP      r12,r2                ;331
000330  bf28              IT       CS                    ;331
000332  4694              MOVCS    r12,r2                ;331
000334  f8c0c004          STR      r12,[r0,#4]           ;332
000338  f8d0c008          LDR      r12,[r0,#8]           ;332
00033c  4594              CMP      r12,r2                ;332
00033e  bf98              IT       LS                    ;332
000340  4694              MOVLS    r12,r2                ;332
000342  f8c0c008          STR      r12,[r0,#8]           ;333
000346  f8d0c000          LDR      r12,[r0,#0]           ;333
00034a  4462              ADD      r2,r2,r12             ;333
00034c  6002              STR      r2,[r0,#0]            ;335
00034e  6902              LDR      r2,[r0,#0x10]         ;335
000350  428a              CMP      r2,r1                 ;335
000352  bf28              IT       CS                    ;335
000354  460a              MOVCS    r2,r1                 ;335
000356  6102              STR      r2,[r0,#0x10]         ;336
000358  6942              LDR      r2,[r0,#0x14]         ;336
00035a  428a              CMP      r2,r1                 ;336
00035c  bf98              IT       LS                    ;336
00035e  460a              MOVLS    r2,r1                 ;336
000360  6142              STR      r2,[r0,#0x14]         ;337
000362  68c2              LDR      r2,[r0,#0xc]          ;337
000364  1c5b              ADDS     r3,r3,#1              ;315
000366  4411              ADD      r1,r1,r2              ;337
000368  60c1              STR      r1,[r0,#0xc]          ;339
00036a  6981              LDR      r1,[r0,#0x18]         ;339
00036c  1c49              ADDS     r1,r1,#1              ;339
00036e  6181              STR      r1,[r0,#0x18]         ;315
000370  9800              LDR      r0,[sp,#0]            ;315
000372  4283              CMP      r3,r0                 ;315
000374  db9d              BLT      |L357.690|
                  |L357.886|
000376  f8dda08c          LDR      r10,[sp,#0x8c]        ;343
00037a  a806              ADD      r0,sp,#0x18           ;343
00037c  4651              MOV      r1,r10                ;343
00037e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::set_size(int)
000382  f04f0900          MOV      r9,#0                 ;343
000386  9e12              LDR      r6,[sp,#0x48]         ;347
000388  464d              MOV      r5,r9                 ;347
00038a  f1ba0f00          CMP      r10,#0                ;347
00038e  dd2b              BLE      |L357.1000|
                  |L357.912|
000390  eb0502c5          ADD      r2,r5,r5,LSL #3       ;348
000394  eb071045          ADD      r0,r7,r5,LSL #5       ;348
000398  eb021805          ADD      r8,r2,r5,LSL #4       ;348
00039c  eb060488          ADD      r4,r6,r8,LSL #2       ;348
0003a0  6841              LDR      r1,[r0,#4]            ;348
0003a2  6061              STR      r1,[r4,#4]            ;349
0003a4  6881              LDR      r1,[r0,#8]            ;349
0003a6  60a1              STR      r1,[r4,#8]            ;350
0003a8  6801              LDR      r1,[r0,#0]            ;350
0003aa  60e1              STR      r1,[r4,#0xc]          ;351
0003ac  6901              LDR      r1,[r0,#0x10]         ;351
0003ae  6161              STR      r1,[r4,#0x14]         ;352
0003b0  6941              LDR      r1,[r0,#0x14]         ;352
0003b2  61a1              STR      r1,[r4,#0x18]         ;353
0003b4  68c1              LDR      r1,[r0,#0xc]          ;353
0003b6  61e1              STR      r1,[r4,#0x1c]         ;354
0003b8  6981              LDR      r1,[r0,#0x18]         ;354
0003ba  6221              STR      r1,[r4,#0x20]         ;356
0003bc  69c3              LDR      r3,[r0,#0x1c]         ;356
0003be  f1040024          ADD      r0,r4,#0x24           ;356
0003c2  4a19              LDR      r2,|L357.1064|
0003c4  2140              MOVS     r1,#0x40              ;356
0003c6  f7fffffe          BL       __c89snprintf
0003ca  6a20              LDR      r0,[r4,#0x20]         ;358
0003cc  2801              CMP      r0,#1                 ;358
0003ce  d038              BEQ      |L357.1090|
0003d0  68e1              LDR      r1,[r4,#0xc]          ;362
0003d2  fbb1f1f0          UDIV     r1,r1,r0              ;362
0003d6  f8461028          STR      r1,[r6,r8,LSL #2]     ;362
0003da  69e1              LDR      r1,[r4,#0x1c]         ;363
0003dc  fbb1f0f0          UDIV     r0,r1,r0              ;363
                  |L357.992|
0003e0  1c6d              ADDS     r5,r5,#1              ;363
0003e2  6120              STR      r0,[r4,#0x10]         ;347
0003e4  4555              CMP      r5,r10                ;347
0003e6  dbd3              BLT      |L357.912|
                  |L357.1000|
0003e8  9c09              LDR      r4,[sp,#0x24]         ;347
0003ea  9f5c              LDR      r7,[sp,#0x170]        ;347
0003ec  ad0c              ADD      r5,sp,#0x30           ;347
0003ee  f04f0801          MOV      r8,#1                 ;347
0003f2  2c00              CMP      r4,#0                 ;347
0003f4  dc2a              BGT      |L357.1100|
0003f6  f240215e          MOV      r1,#0x25e             ;368
0003fa  480c              LDR      r0,|L357.1068|
0003fc  e9cd0100          STRD     r0,r1,[sp,#0]         ;368
000400  4b0b              LDR      r3,|L357.1072|
000402  4a0c              LDR      r2,|L357.1076|
000404  490c              LDR      r1,|L357.1080|
000406  2005              MOVS     r0,#5                 ;368
000408  f7fffffe          BL       _Anki_Log
00040c  e016              B        |L357.1084|
00040e  0000              DCW      0x0000
                  |L357.1040|
                          DCD      _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
                  |L357.1044|
                          DCD      _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_1 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 3)
                  |L357.1048|
                          DCD      _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_0 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 2)
                  |L357.1052|
                          DCD      _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string
                  |L357.1056|
                          DCD      _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_3 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 5)
                  |L357.1060|
                          DCD      _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_2 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 4)
                  |L357.1064|
                          DCD      _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEEs_4 ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::string (instance 6)
                  |L357.1068|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Resize(int, int, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
                  |L357.1072|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Resize(int, int, Anki::Embedded::MemoryStack&)::string (instance 3)
                  |L357.1076|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Resize(int, int, Anki::Embedded::MemoryStack&)::string (instance 2)
                  |L357.1080|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Resize(int, int, Anki::Embedded::MemoryStack&)::string
                  |L357.1084|
00043c  f04f60a0          MOV      r0,#0x5000000         ;368
000440  e041              B        |L357.1222|
                  |L357.1090|
000442  68e0              LDR      r0,[r4,#0xc]          ;359
000444  f8460028          STR      r0,[r6,r8,LSL #2]     ;359
000448  69e0              LDR      r0,[r4,#0x1c]         ;360
00044a  e7c9              B        |L357.992|
                  |L357.1100|
00044c  4620              MOV      r0,r4                 ;360
00044e  f8cd9014          STR      r9,[sp,#0x14]         ;360
000452  2c01              CMP      r4,#1                 ;360
000454  bfd8              IT       LE                    ;360
000456  2001              MOVLE    r0,#1                 ;360
000458  2164              MOVS     r1,#0x64              ;360
00045a  4348              MULS     r0,r1,r0              ;360
00045c  300f              ADDS     r0,r0,#0xf            ;360
00045e  f020060f          BIC      r6,r0,#0xf            ;360
000462  f10d0914          ADD      r9,sp,#0x14           ;360
000466  2e00              CMP      r6,#0                 ;360
000468  dc0a              BGT      |L357.1152|
00046a  f240310b          MOV      r1,#0x30b             ;360
00046e  4825              LDR      r0,|L357.1284|
000470  e9cd0100          STRD     r0,r1,[sp,#0]         ;360
000474  4b24              LDR      r3,|L357.1288|
000476  4a25              LDR      r2,|L357.1292|
000478  4925              LDR      r1,|L357.1296|
00047a  2005              MOVS     r0,#5                 ;360
00047c  f7fffffe          BL       _Anki_Log
                  |L357.1152|
000480  4632              MOV      r2,r6                 ;360
000482  960e              STR      r6,[sp,#0x38]         ;360
000484  464b              MOV      r3,r9                 ;360
000486  4638              MOV      r0,r7                 ;360
000488  9910              LDR      r1,[sp,#0x40]         ;360
00048a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack10ReallocateEPviRi ; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&)
00048e  9010              STR      r0,[sp,#0x40]         ;360
000490  f105000c          ADD      r0,r5,#0xc            ;360
000494  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
000498  4607              MOV      r7,r0                 ;360
00049a  2100              MOVS     r1,#0                 ;360
00049c  f105000c          ADD      r0,r5,#0xc            ;360
0004a0  f7fffffe          BL       _ZN4Anki8Embedded5Flags6Buffer23set_zeroAllocatedMemoryEb ; Anki::Embedded::Flags::Buffer::set_zeroAllocatedMemory(bool)
0004a4  980f              LDR      r0,[sp,#0x3c]         ;360
0004a6  9001              STR      r0,[sp,#4]            ;360
0004a8  9805              LDR      r0,[sp,#0x14]         ;360
0004aa  9000              STR      r0,[sp,#0]            ;360
0004ac  4622              MOV      r2,r4                 ;360
0004ae  4641              MOV      r1,r8                 ;360
0004b0  4628              MOV      r0,r5                 ;360
0004b2  9b10              LDR      r3,[sp,#0x40]         ;360
0004b4  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)
0004b8  4606              MOV      r6,r0                 ;360
0004ba  4639              MOV      r1,r7                 ;360
0004bc  f105000c          ADD      r0,r5,#0xc            ;360
0004c0  f7fffffe          BL       _ZN4Anki8Embedded5Flags6Buffer23set_zeroAllocatedMemoryEb ; Anki::Embedded::Flags::Buffer::set_zeroAllocatedMemory(bool)
0004c4  4630              MOV      r0,r6                 ;360
                  |L357.1222|
0004c6  b170              CBZ      r0,|L357.1254|
                  |L357.1224|
0004c8  f10d0818          ADD      r8,sp,#0x18           ;370
0004cc  9859              LDR      r0,[sp,#0x164]        ;370
0004ce  e89810fe          LDM      r8,{r1-r7,r12}        ;370
0004d2  e8a010fe          STM      r0!,{r1-r7,r12}       ;370
0004d6  ad0e              ADD      r5,sp,#0x38           ;370
0004d8  e895101e          LDM      r5,{r1-r4,r12}        ;370
0004dc  e880101e          STM      r0,{r1-r4,r12}        ;370
0004e0  b05d              ADD      sp,sp,#0x174
0004e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L357.1254|
0004e6  9a09              LDR      r2,[sp,#0x24]
0004e8  2100              MOVS     r1,#0
0004ea  2001              MOVS     r0,#1
0004ec  42a2              CMP      r2,r4
0004ee  bfb8              IT       LT
0004f0  4614              MOVLT    r4,r2
0004f2  9402              STR      r4,[sp,#8]
0004f4  e9cd1003          STRD     r1,r0,[sp,#0xc]
0004f8  9a04              LDR      r2,[sp,#0x10]
0004fa  9409              STR      r4,[sp,#0x24]
0004fc  e9cd120a          STRD     r1,r2,[sp,#0x28]
000500  e7e2              B        |L357.1224|
;;;372    
                          ENDP

000502  0000              DCW      0x0000
                  |L357.1284|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L357.1288|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
                  |L357.1292|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
                  |L357.1296|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string

                          AREA ||area_number.358||, COMGROUP=_ZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackE, LINKORDER=||i._ZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.358||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii||, COMGROUP=_ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii PROC ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)
;;;1605   
;;;1606         template<typename Type> Result InsertionSort(Array<Type> &arr, const s32 sortWhichDimension, const bool sortAscending, const s32 minIndex, const s32 maxIndex)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1607         {
000004  b083              SUB      sp,sp,#0xc
000006  460f              MOV      r7,r1
000008  4604              MOV      r4,r0
;;;1608           // const s32 arrHeight = arr.get_size(0);
;;;1609           // const s32 arrWidth = arr.get_size(1);
;;;1610   
;;;1611           AnkiConditionalErrorAndReturnValue(arr.IsValid(),
00000a  6901              LDR      r1,[r0,#0x10]
00000c  9d0a              LDR      r5,[sp,#0x28]
00000e  488a              LDR      r0,|L364.568|
000010  461e              MOV      r6,r3                 ;1607
000012  4690              MOV      r8,r2                 ;1607
000014  b1c1              CBZ      r1,|L364.72|
000016  6821              LDR      r1,[r4,#0]            ;1607
000018  2900              CMP      r1,#0                 ;1607
00001a  bfa4              ITT      GE                    ;1607
00001c  6861              LDRGE    r1,[r4,#4]            ;1607
00001e  2900              CMPGE    r1,#0                 ;1607
000020  db12              BLT      |L364.72|
;;;1612             RESULT_FAIL_INVALID_OBJECT, "Sort", "Input array is invalid");
;;;1613   
;;;1614           AnkiConditionalErrorAndReturnValue(sortWhichDimension==0 || sortWhichDimension==1,
000022  2f00              CMP      r7,#0
000024  bf18              IT       NE
000026  2f01              CMPNE    r7,#1
000028  d01d              BEQ      |L364.102|
00002a  f240614e          MOV      r1,#0x64e
00002e  e9cd0100          STRD     r0,r1,[sp,#0]
000032  4b82              LDR      r3,|L364.572|
000034  4a82              LDR      r2,|L364.576|
000036  4983              LDR      r1,|L364.580|
000038  2005              MOVS     r0,#5
00003a  f7fffffe          BL       _Anki_Log
;;;1615             RESULT_FAIL_INVALID_PARAMETER, "Sort", "sortWhichDimension must be zero or one");
;;;1616   
;;;1617           const s32 trueMinIndex = CLIP(minIndex, 0, arr.get_size(sortWhichDimension) - 1);
;;;1618           const s32 trueMaxIndex = CLIP(maxIndex, 0, arr.get_size(sortWhichDimension) - 1);
;;;1619   
;;;1620           if(sortWhichDimension == 0) {
;;;1621             // TODO: This columnwise sorting could be sped up, with smarter array indexing.
;;;1622             if(sortAscending) {
;;;1623               InsertionSort_sortAscendingDimension0(arr, trueMinIndex, trueMaxIndex);
;;;1624             } else { // if(sortAscending)
;;;1625               InsertionSort_sortDescendingDimension0(arr, trueMinIndex, trueMaxIndex);
;;;1626             } // if(sortAscending) ... else
;;;1627           } else { // sortWhichDimension == 1
;;;1628             if(sortAscending) {
;;;1629               InsertionSort_sortAscendingDimension1(arr, trueMinIndex, trueMaxIndex);
;;;1630             } else { // if(sortAscending)
;;;1631               InsertionSort_sortDescendingDimension1(arr, trueMinIndex, trueMaxIndex);
;;;1632             } // if(sortAscending) ... else
;;;1633           } // if(sortWhichDimension == 0) ... else
;;;1634   
;;;1635           return RESULT_OK;
;;;1636         } // InsertionSort()
00003e  b003              ADD      sp,sp,#0xc
000040  f04f7040          MOV      r0,#0x3000000         ;1614
000044  e8bd83f0          POP      {r4-r9,pc}
                  |L364.72|
000048  f240614b          MOV      r1,#0x64b             ;1611
00004c  e9cd0100          STRD     r0,r1,[sp,#0]         ;1611
000050  4b7a              LDR      r3,|L364.572|
000052  4a7d              LDR      r2,|L364.584|
000054  497b              LDR      r1,|L364.580|
000056  2005              MOVS     r0,#5                 ;1611
000058  f7fffffe          BL       _Anki_Log
00005c  b003              ADD      sp,sp,#0xc
00005e  f04f6080          MOV      r0,#0x4000000         ;1611
000062  e8bd83f0          POP      {r4-r9,pc}
                  |L364.102|
000066  4639              MOV      r1,r7                 ;1617
000068  4620              MOV      r0,r4                 ;1617
00006a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIjE8get_sizeEi ; Anki::Embedded::Array<unsigned>::get_size(int) const
00006e  1e41              SUBS     r1,r0,#1              ;1617
000070  2e00              CMP      r6,#0                 ;1617
000072  bfcc              ITE      GT                    ;1617
000074  4630              MOVGT    r0,r6                 ;1617
000076  2000              MOVLE    r0,#0                 ;1617
000078  4281              CMP      r1,r0                 ;1617
00007a  dd03              BLE      |L364.132|
00007c  2e00              CMP      r6,#0                 ;1617
00007e  bfd8              IT       LE                    ;1617
000080  2600              MOVLE    r6,#0                 ;1617
000082  e004              B        |L364.142|
                  |L364.132|
000084  4639              MOV      r1,r7                 ;1617
000086  4620              MOV      r0,r4                 ;1617
000088  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIjE8get_sizeEi ; Anki::Embedded::Array<unsigned>::get_size(int) const
00008c  1e46              SUBS     r6,r0,#1              ;1617
                  |L364.142|
00008e  4639              MOV      r1,r7                 ;1618
000090  4620              MOV      r0,r4                 ;1618
000092  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIjE8get_sizeEi ; Anki::Embedded::Array<unsigned>::get_size(int) const
000096  1e41              SUBS     r1,r0,#1              ;1618
000098  2d00              CMP      r5,#0                 ;1618
00009a  bfcc              ITE      GT                    ;1618
00009c  4628              MOVGT    r0,r5                 ;1618
00009e  2000              MOVLE    r0,#0                 ;1618
0000a0  4281              CMP      r1,r0                 ;1618
0000a2  dd03              BLE      |L364.172|
0000a4  2d00              CMP      r5,#0                 ;1618
0000a6  bfd8              IT       LE                    ;1618
0000a8  2500              MOVLE    r5,#0                 ;1618
0000aa  e004              B        |L364.182|
                  |L364.172|
0000ac  4639              MOV      r1,r7                 ;1618
0000ae  4620              MOV      r0,r4                 ;1618
0000b0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIjE8get_sizeEi ; Anki::Embedded::Array<unsigned>::get_size(int) const
0000b4  1e45              SUBS     r5,r0,#1              ;1618
                  |L364.182|
0000b6  b35f              CBZ      r7,|L364.272|
0000b8  f1b80f00          CMP      r8,#0                 ;1628
0000bc  f04f0100          MOV      r1,#0                 ;1628
0000c0  4620              MOV      r0,r4                 ;1628
0000c2  d06e              BEQ      |L364.418|
0000c4  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIjE8get_sizeEi ; Anki::Embedded::Array<unsigned>::get_size(int) const
0000c8  f1b00800          SUBS     r8,r0,#0              ;1628
0000cc  f04f0700          MOV      r7,#0                 ;1628
0000d0  dd54              BLE      |L364.380|
                  |L364.210|
0000d2  68a1              LDR      r1,[r4,#8]            ;1628
0000d4  6920              LDR      r0,[r4,#0x10]         ;1628
0000d6  fb070201          MLA      r2,r7,r1,r0           ;1628
0000da  1c70              ADDS     r0,r6,#1              ;1628
0000dc  42a8              CMP      r0,r5                 ;1628
0000de  dc13              BGT      |L364.264|
                  |L364.224|
0000e0  f852c020          LDR      r12,[r2,r0,LSL #2]    ;1628
0000e4  4601              MOV      r1,r0                 ;1628
                  |L364.230|
0000e6  42b1              CMP      r1,r6                 ;1628
0000e8  dd09              BLE      |L364.254|
0000ea  eb020381          ADD      r3,r2,r1,LSL #2       ;1628
0000ee  f8533c04          LDR      r3,[r3,#-4]           ;1628
0000f2  4563              CMP      r3,r12                ;1628
0000f4  bf84              ITT      HI                    ;1628
0000f6  f8423021          STRHI    r3,[r2,r1,LSL #2]     ;1628
0000fa  1e49              SUBHI    r1,r1,#1              ;1628
0000fc  d8f3              BHI      |L364.230|
                  |L364.254|
0000fe  1c40              ADDS     r0,r0,#1              ;1628
000100  f842c021          STR      r12,[r2,r1,LSL #2]    ;1628
000104  42a8              CMP      r0,r5                 ;1628
000106  ddeb              BLE      |L364.224|
                  |L364.264|
000108  1c7f              ADDS     r7,r7,#1              ;1628
00010a  4547              CMP      r7,r8                 ;1628
00010c  dbe1              BLT      |L364.210|
00010e  e08f              B        |L364.560|
                  |L364.272|
000110  f1b80f00          CMP      r8,#0                 ;1622
000114  f04f0101          MOV      r1,#1                 ;1622
000118  4620              MOV      r0,r4                 ;1622
00011a  d030              BEQ      |L364.382|
00011c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIjE8get_sizeEi ; Anki::Embedded::Array<unsigned>::get_size(int) const
000120  f1b00900          SUBS     r9,r0,#0              ;1622
000124  f04f0000          MOV      r0,#0                 ;1622
000128  dd28              BLE      |L364.380|
                  |L364.298|
00012a  1c72              ADDS     r2,r6,#1              ;1622
00012c  42aa              CMP      r2,r5                 ;1622
00012e  dc22              BGT      |L364.374|
                  |L364.304|
000130  68a3              LDR      r3,[r4,#8]            ;1622
000132  6921              LDR      r1,[r4,#0x10]         ;1622
000134  fb021103          MLA      r1,r2,r3,r1           ;1622
000138  f8518020          LDR      r8,[r1,r0,LSL #2]     ;1622
00013c  4611              MOV      r1,r2                 ;1622
00013e  e004              B        |L364.330|
                  |L364.320|
000140  fb01330c          MLA      r3,r1,r12,r3          ;1622
000144  1e49              SUBS     r1,r1,#1              ;1622
000146  f8437020          STR      r7,[r3,r0,LSL #2]     ;1622
                  |L364.330|
00014a  42b1              CMP      r1,r6                 ;1622
00014c  dd09              BLE      |L364.354|
00014e  f8d4c008          LDR      r12,[r4,#8]           ;1622
000152  6923              LDR      r3,[r4,#0x10]         ;1622
000154  1e4f              SUBS     r7,r1,#1              ;1622
000156  fb07370c          MLA      r7,r7,r12,r3          ;1622
00015a  f8577020          LDR      r7,[r7,r0,LSL #2]     ;1622
00015e  4547              CMP      r7,r8                 ;1622
000160  d8ee              BHI      |L364.320|
                  |L364.354|
000162  f8d4c008          LDR      r12,[r4,#8]           ;1622
000166  6923              LDR      r3,[r4,#0x10]         ;1622
000168  1c52              ADDS     r2,r2,#1              ;1622
00016a  fb01310c          MLA      r1,r1,r12,r3          ;1622
00016e  42aa              CMP      r2,r5                 ;1622
000170  f8418020          STR      r8,[r1,r0,LSL #2]     ;1622
000174  dddc              BLE      |L364.304|
                  |L364.374|
000176  1c40              ADDS     r0,r0,#1              ;1622
000178  4548              CMP      r0,r9                 ;1622
00017a  dbd6              BLT      |L364.298|
                  |L364.380|
00017c  e058              B        |L364.560|
                  |L364.382|
00017e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIjE8get_sizeEi ; Anki::Embedded::Array<unsigned>::get_size(int) const
000182  f1b00900          SUBS     r9,r0,#0              ;1622
000186  f04f0000          MOV      r0,#0                 ;1622
00018a  dd51              BLE      |L364.560|
                  |L364.396|
00018c  1c72              ADDS     r2,r6,#1              ;1622
00018e  42aa              CMP      r2,r5                 ;1622
000190  dc23              BGT      |L364.474|
                  |L364.402|
000192  68a3              LDR      r3,[r4,#8]            ;1622
000194  6921              LDR      r1,[r4,#0x10]         ;1622
000196  fb021103          MLA      r1,r2,r3,r1           ;1622
00019a  f8518020          LDR      r8,[r1,r0,LSL #2]     ;1622
00019e  4611              MOV      r1,r2                 ;1622
0001a0  e005              B        |L364.430|
                  |L364.418|
0001a2  e01e              B        |L364.482|
                  |L364.420|
0001a4  fb01330c          MLA      r3,r1,r12,r3          ;1622
0001a8  1e49              SUBS     r1,r1,#1              ;1622
0001aa  f8437020          STR      r7,[r3,r0,LSL #2]     ;1622
                  |L364.430|
0001ae  42b1              CMP      r1,r6                 ;1622
0001b0  dd09              BLE      |L364.454|
0001b2  f8d4c008          LDR      r12,[r4,#8]           ;1622
0001b6  6923              LDR      r3,[r4,#0x10]         ;1622
0001b8  1e4f              SUBS     r7,r1,#1              ;1622
0001ba  fb07370c          MLA      r7,r7,r12,r3          ;1622
0001be  f8577020          LDR      r7,[r7,r0,LSL #2]     ;1622
0001c2  4547              CMP      r7,r8                 ;1622
0001c4  d3ee              BCC      |L364.420|
                  |L364.454|
0001c6  f8d4c008          LDR      r12,[r4,#8]           ;1622
0001ca  6923              LDR      r3,[r4,#0x10]         ;1622
0001cc  1c52              ADDS     r2,r2,#1              ;1622
0001ce  fb01310c          MLA      r1,r1,r12,r3          ;1622
0001d2  42aa              CMP      r2,r5                 ;1622
0001d4  f8418020          STR      r8,[r1,r0,LSL #2]     ;1622
0001d8  dddb              BLE      |L364.402|
                  |L364.474|
0001da  1c40              ADDS     r0,r0,#1              ;1622
0001dc  4548              CMP      r0,r9                 ;1622
0001de  dbd5              BLT      |L364.396|
0001e0  e026              B        |L364.560|
                  |L364.482|
0001e2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIjE8get_sizeEi ; Anki::Embedded::Array<unsigned>::get_size(int) const
0001e6  f1b00800          SUBS     r8,r0,#0              ;1622
0001ea  f04f0700          MOV      r7,#0                 ;1622
0001ee  dd1f              BLE      |L364.560|
                  |L364.496|
0001f0  68a1              LDR      r1,[r4,#8]            ;1622
0001f2  6920              LDR      r0,[r4,#0x10]         ;1622
0001f4  f1060c01          ADD      r12,r6,#1             ;1622
0001f8  fb070201          MLA      r2,r7,r1,r0           ;1622
0001fc  45ac              CMP      r12,r5                ;1622
0001fe  dc14              BGT      |L364.554|
                  |L364.512|
000200  f852302c          LDR      r3,[r2,r12,LSL #2]    ;1622
000204  4661              MOV      r1,r12                ;1622
                  |L364.518|
000206  42b1              CMP      r1,r6                 ;1622
000208  dd09              BLE      |L364.542|
00020a  eb020081          ADD      r0,r2,r1,LSL #2       ;1622
00020e  f8500c04          LDR      r0,[r0,#-4]           ;1622
000212  4298              CMP      r0,r3                 ;1622
000214  bf3c              ITT      CC                    ;1622
000216  f8420021          STRCC    r0,[r2,r1,LSL #2]     ;1622
00021a  1e49              SUBCC    r1,r1,#1              ;1622
00021c  d3f3              BCC      |L364.518|
                  |L364.542|
00021e  f10c0c01          ADD      r12,r12,#1            ;1622
000222  f8423021          STR      r3,[r2,r1,LSL #2]     ;1622
000226  45ac              CMP      r12,r5                ;1622
000228  ddea              BLE      |L364.512|
                  |L364.554|
00022a  1c7f              ADDS     r7,r7,#1              ;1622
00022c  4547              CMP      r7,r8                 ;1622
00022e  dbdf              BLT      |L364.496|
                  |L364.560|
000230  b003              ADD      sp,sp,#0xc
000232  2000              MOVS     r0,#0                 ;1635
000234  e8bd83f0          POP      {r4-r9,pc}
;;;1637   
                          ENDP

                  |L364.568|
                          DCD      _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::__PRETTY_FUNCTION__
                  |L364.572|
                          DCD      _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_1 ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::string (instance 3)
                  |L364.576|
                          DCD      _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_2 ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::string (instance 4)
                  |L364.580|
                          DCD      _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::string
                  |L364.584|
                          DCD      _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiEs_0 ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::string (instance 2)

                          AREA ||area_number.365||, COMGROUP=_ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii, LINKORDER=||t._ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.365||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibii||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded5RoundIiEET_f||, COMGROUP=_ZN4Anki8Embedded5RoundIiEET_f, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5RoundIiEET_f PROC ; Anki::Embedded::Round<int>(float)
;;;222        template<> inline u64 Round<u64> (const f32 v) { return (v > 0) ? static_cast<u64>(v + 0.5f) : 0; }
;;;223        template<> inline s32 Round<s32> (const f32 v) { return (v > 0) ? static_cast<s32>(v + 0.5f) : static_cast<s32>(v - 0.5f); }
000000  eeb50ac0          VCMPE.F32 s0,#0.0
000004  eef60a00          VMOV.F32 s1,#0.50000000
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  dd06              BLE      |L371.28|
00000e  ee300a20          VADD.F32 s0,s0,s1
000012  eebd0ac0          VCVT.S32.F32 s0,s0
000016  ee100a10          VMOV     r0,s0
00001a  4770              BX       lr
                  |L371.28|
00001c  ee300a60          VSUB.F32 s0,s0,s1
000020  eebd0ac0          VCVT.S32.F32 s0,s0
000024  ee100a10          VMOV     r0,s0
000028  4770              BX       lr
;;;224        template<> inline s64 Round<s64> (const f32 v) { return (v > 0) ? static_cast<s64>(v + 0.5f) : static_cast<s64>(v - 0.5f); }
                          ENDP


                          AREA ||area_number.372||, COMGROUP=_ZN4Anki8Embedded5RoundIiEET_f, LINKORDER=||i._ZN4Anki8Embedded5RoundIiEET_f||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.372||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded5RoundIiEET_f||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIjE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIjE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIjE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0d              BGE      |L378.36|
000008  f24021e3          MOV      r1,#0x2e3
00000c  4809              LDR      r0,|L378.52|
00000e  e9cd0100          STRD     r0,r1,[sp,#0]
000012  4b09              LDR      r3,|L378.56|
000014  4a09              LDR      r2,|L378.60|
000016  490a              LDR      r1,|L378.64|
000018  2005              MOVS     r0,#5
00001a  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
00001e  b003              ADD      sp,sp,#0xc
000020  2000              MOVS     r0,#0                 ;739
000022  bd00              POP      {pc}
                  |L378.36|
000024  2902              CMP      r1,#2                 ;742
000026  bf2c              ITE      CS                    ;743
000028  2001              MOVCS    r0,#1                 ;743
00002a  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
00002e  b003              ADD      sp,sp,#0xc
000030  bd00              POP      {pc}
;;;747    
                          ENDP

000032  0000              DCW      0x0000
                  |L378.52|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::get_size(int) const::__PRETTY_FUNCTION__
                  |L378.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs_1 ; Anki::Embedded::Array<unsigned>::get_size(int) const::string (instance 3)
                  |L378.60|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs_0 ; Anki::Embedded::Array<unsigned>::get_size(int) const::string (instance 2)
                  |L378.64|
                          DCD      _ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiEs ; Anki::Embedded::Array<unsigned>::get_size(int) const::string

                          AREA ||area_number.379||, COMGROUP=_ZNK4Anki8Embedded5ArrayIjE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIjE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.379||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIjE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15FixedLengthListIiEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<int>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b091              SUB      sp,sp,#0x44
000006  4605              MOV      r5,r0
000008  4691              MOV      r9,r2
00000a  a808              ADD      r0,sp,#0x20
00000c  f04f0801          MOV      r8,#1
000010  f8dda050          LDR      r10,[sp,#0x50]
000014  9f12              LDR      r7,[sp,#0x48]
000016  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
00001a  f1a0040c          SUB      r4,r0,#0xc
00001e  f04f30ff          MOV      r0,#0xffffffff
000022  6020              STR      r0,[r4,#0]
000024  6060              STR      r0,[r4,#4]
000026  f04f0b00          MOV      r11,#0
00002a  f8c4b010          STR      r11,[r4,#0x10]
00002e  60a0              STR      r0,[r4,#8]
000030  2f00              CMP      r7,#0
000032  da0a              BGE      |L385.74|
000034  217d              MOVS     r1,#0x7d
000036  4878              LDR      r0,|L385.536|
000038  e9cd0100          STRD     r0,r1,[sp,#0]
00003c  4b77              LDR      r3,|L385.540|
00003e  4a78              LDR      r2,|L385.544|
000040  4978              LDR      r1,|L385.548|
000042  2005              MOVS     r0,#5
000044  f7fffffe          BL       _Anki_Log
000048  e085              B        |L385.342|
                  |L385.74|
00004a  f8cdb010          STR      r11,[sp,#0x10]
00004e  2f01              CMP      r7,#1
000050  bfd4              ITE      LE
000052  2001              MOVLE    r0,#1
000054  4638              MOVGT    r0,r7
000056  0080              LSLS     r0,r0,#2
000058  300f              ADDS     r0,r0,#0xf
00005a  f020060f          BIC      r6,r0,#0xf
00005e  a804              ADD      r0,sp,#0x10
000060  e9cd0a02          STRD     r0,r10,[sp,#8]
000064  2e00              CMP      r6,#0
000066  dc0a              BGT      |L385.126|
000068  f240310b          MOV      r1,#0x30b
00006c  486e              LDR      r0,|L385.552|
00006e  e9cd0100          STRD     r0,r1,[sp,#0]
000072  4b6e              LDR      r3,|L385.556|
000074  4a6e              LDR      r2,|L385.560|
000076  496f              LDR      r1,|L385.564|
000078  2005              MOVS     r0,#5
00007a  f7fffffe          BL       _Anki_Log
                  |L385.126|
00007e  a803              ADD      r0,sp,#0xc
000080  60a6              STR      r6,[r4,#8]
000082  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
000086  4602              MOV      r2,r0
000088  4631              MOV      r1,r6
00008a  4648              MOV      r0,r9
00008c  9b02              LDR      r3,[sp,#8]
00008e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
000092  f8cda00c          STR      r10,[sp,#0xc]
000096  f8dd9010          LDR      r9,[sp,#0x10]
00009a  f8dfa19c          LDR      r10,|L385.568|
00009e  0006              MOVS     r6,r0
0000a0  d00d              BEQ      |L385.190|
0000a2  f1b90f10          CMP      r9,#0x10
0000a6  d21c              BCS      |L385.226|
0000a8  f2403023          MOV      r0,#0x323
0000ac  e9cda000          STRD     r10,r0,[sp,#0]
0000b0  4b62              LDR      r3,|L385.572|
0000b2  4a63              LDR      r2,|L385.576|
0000b4  4963              LDR      r1,|L385.580|
0000b6  2005              MOVS     r0,#5
0000b8  f7fffffe          BL       _Anki_Log
0000bc  e04b              B        |L385.342|
                  |L385.190|
0000be  f240301e          MOV      r0,#0x31e
0000c2  e9cda000          STRD     r10,r0,[sp,#0]
0000c6  4b5d              LDR      r3,|L385.572|
0000c8  4a5f              LDR      r2,|L385.584|
0000ca  4960              LDR      r1,|L385.588|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f04f30ff          MOV      r0,#0xffffffff
0000d6  6020              STR      r0,[r4,#0]
0000d8  6060              STR      r0,[r4,#4]
0000da  f8c4b010          STR      r11,[r4,#0x10]
0000de  60a0              STR      r0,[r4,#8]
0000e0  e039              B        |L385.342|
                  |L385.226|
0000e2  a803              ADD      r0,sp,#0xc
0000e4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
0000e8  b150              CBZ      r0,|L385.256|
0000ea  f2403026          MOV      r0,#0x326
0000ee  e9cda000          STRD     r10,r0,[sp,#0]
0000f2  4b52              LDR      r3,|L385.572|
0000f4  4a56              LDR      r2,|L385.592|
0000f6  4953              LDR      r1,|L385.580|
0000f8  2005              MOVS     r0,#5
0000fa  f7fffffe          BL       _Anki_Log
0000fe  e02a              B        |L385.342|
                  |L385.256|
000100  9903              LDR      r1,[sp,#0xc]
000102  e9c41603          STRD     r1,r6,[r4,#0xc]
000106  f106000f          ADD      r0,r6,#0xf
00010a  f020000f          BIC      r0,r0,#0xf
00010e  e9c48700          STRD     r8,r7,[r4,#0]
000112  1b80              SUBS     r0,r0,r6
000114  2f01              CMP      r7,#1
000116  bfd8              IT       LE
000118  2701              MOVLE    r7,#1
00011a  00b9              LSLS     r1,r7,#2
00011c  310f              ADDS     r1,r1,#0xf
00011e  f021010f          BIC      r1,r1,#0xf
000122  fb010108          MLA      r1,r1,r8,r0
000126  4549              CMP      r1,r9
000128  bfdc              ITT      LE
00012a  1831              ADDLE    r1,r6,r0
00012c  6121              STRLE    r1,[r4,#0x10]
00012e  dd12              BLE      |L385.342|
000130  f2403035          MOV      r0,#0x335
000134  f8cda000          STR      r10,[sp,#0]
000138  e9cd0101          STRD     r0,r1,[sp,#4]
00013c  4b3f              LDR      r3,|L385.572|
00013e  4a45              LDR      r2,|L385.596|
000140  4942              LDR      r1,|L385.588|
000142  2005              MOVS     r0,#5
000144  f7fffffe          BL       _Anki_Log
000148  f04f30ff          MOV      r0,#0xffffffff
00014c  6020              STR      r0,[r4,#0]
00014e  6060              STR      r0,[r4,#4]
000150  f8c4b010          STR      r11,[r4,#0x10]
000154  60a0              STR      r0,[r4,#8]
                  |L385.342|
000156  e89403c0          LDM      r4,{r6-r9}
00015a  2200              MOVS     r2,#0
00015c  6924              LDR      r4,[r4,#0x10]
00015e  4611              MOV      r1,r2
000160  a80a              ADD      r0,sp,#0x28
000162  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000166  4682              MOV      r10,r0
000168  2200              MOVS     r2,#0
00016a  4611              MOV      r1,r2
00016c  a80d              ADD      r0,sp,#0x34
00016e  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000172  e9da2300          LDRD     r2,r3,[r10,#0]
000176  4601              MOV      r1,r0
000178  f8dac008          LDR      r12,[r10,#8]
00017c  4628              MOV      r0,r5
00017e  f8c5c008          STR      r12,[r5,#8]
000182  e9c02300          STRD     r2,r3,[r0,#0]
000186  e9d12300          LDRD     r2,r3,[r1,#0]
00018a  6889              LDR      r1,[r1,#8]
00018c  f1050a14          ADD      r10,r5,#0x14
000190  62ac              STR      r4,[r5,#0x28]
000192  e88a03c2          STM      r10,{r1,r6-r9}
000196  2e00              CMP      r6,#0
000198  e9c52303          STRD     r2,r3,[r5,#0xc]
00019c  bfc8              IT       GT
00019e  2f00              CMPGT    r7,#0
0001a0  dd28              BLE      |L385.500|
0001a2  fb06f107          MUL      r1,r6,r7
0001a6  b329              CBZ      r1,|L385.500|
0001a8  2100              MOVS     r1,#0
0001aa  fb014108          MLA      r1,r1,r8,r4
0001ae  62e9              STR      r1,[r5,#0x2c]
                  |L385.432|
0001b0  2e00              CMP      r6,#0
0001b2  bfc8              IT       GT
0001b4  2f00              CMPGT    r7,#0
0001b6  dd20              BLE      |L385.506|
0001b8  fb06f007          MUL      r0,r6,r7
0001bc  b1e8              CBZ      r0,|L385.506|
0001be  2000              MOVS     r0,#0
0001c0  fb004008          MLA      r0,r0,r8,r4
0001c4  6328              STR      r0,[r5,#0x30]
                  |L385.454|
0001c6  69a9              LDR      r1,[r5,#0x18]
0001c8  2900              CMP      r1,#0
0001ca  bfc4              ITT      GT
0001cc  69e8              LDRGT    r0,[r5,#0x1c]
0001ce  2800              CMPGT    r0,#0
0001d0  dd16              BLE      |L385.512|
0001d2  4348              MULS     r0,r1,r0
0001d4  d014              BEQ      |L385.512|
0001d6  6a2a              LDR      r2,[r5,#0x20]
0001d8  6aa9              LDR      r1,[r5,#0x28]
0001da  2000              MOVS     r0,#0
0001dc  fb001002          MLA      r0,r0,r2,r1
0001e0  6328              STR      r0,[r5,#0x30]
                  |L385.482|
0001e2  a814              ADD      r0,sp,#0x50
0001e4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0001e8  b168              CBZ      r0,|L385.518|
0001ea  4628              MOV      r0,r5
0001ec  9912              LDR      r1,[sp,#0x48]
0001ee  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
0001f2  e00c              B        |L385.526|
                  |L385.500|
0001f4  f8c5b02c          STR      r11,[r5,#0x2c]
0001f8  e7da              B        |L385.432|
                  |L385.506|
0001fa  f8c5b030          STR      r11,[r5,#0x30]
0001fe  e7e2              B        |L385.454|
                  |L385.512|
000200  f8c5b030          STR      r11,[r5,#0x30]
000204  e7ed              B        |L385.482|
                  |L385.518|
000206  2100              MOVS     r1,#0
000208  4628              MOV      r0,r5
00020a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
                  |L385.526|
00020e  b015              ADD      sp,sp,#0x54
000210  4628              MOV      r0,r5
000212  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

000216  0000              DCW      0x0000
                  |L385.536|
                          DCD      _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L385.540|
                          DCD      _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L385.544|
                          DCD      _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L385.548|
                          DCD      _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
                  |L385.552|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L385.556|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
                  |L385.560|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
                  |L385.564|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
                  |L385.568|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L385.572|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L385.576|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
                  |L385.580|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
                  |L385.584|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L385.588|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
                  |L385.592|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
                  |L385.596|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)

                          AREA ||area_number.386||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.386||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b570              PUSH     {r4-r6,lr}
000002  f04f34ff          MOV      r4,#0xffffffff
000006  6004              STR      r4,[r0,#0]
000008  6044              STR      r4,[r0,#4]
00000a  4601              MOV      r1,r0
00000c  6084              STR      r4,[r0,#8]
00000e  f8404f0c          STR      r4,[r0,#0xc]!
000012  2500              MOVS     r5,#0
000014  6044              STR      r4,[r0,#4]
000016  6084              STR      r4,[r0,#8]
000018  f1010024          ADD      r0,r1,#0x24
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000020  f8404d0c          STR      r4,[r0,#-0xc]!
000024  2100              MOVS     r1,#0
000026  6044              STR      r4,[r0,#4]
000028  6105              STR      r5,[r0,#0x10]
00002a  6084              STR      r4,[r0,#8]
00002c  6145              STR      r5,[r0,#0x14]
00002e  f1a00418          SUB      r4,r0,#0x18
000032  6185              STR      r5,[r0,#0x18]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::set_size(int)
00003a  4620              MOV      r0,r4
00003c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.393||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.393||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE7IsValidEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::BenchmarkElement>::IsValid() const
;;;91     
;;;92         template<typename Type> bool FixedLengthList<Type>::IsValid() const
000000  68c2              LDR      r2,[r0,#0xc]
;;;93         {
;;;94           if(this->get_size() > this->get_maximumSize()) {
000002  69c1              LDR      r1,[r0,#0x1c]
000004  428a              CMP      r2,r1
000006  dc07              BGT      |L399.24|
000008  6a82              LDR      r2,[r0,#0x28]         ;93
00000a  b12a              CBZ      r2,|L399.24|
00000c  6980              LDR      r0,[r0,#0x18]         ;93
00000e  2800              CMP      r0,#0                 ;93
000010  bfa2              ITTT     GE                    ;93
000012  2900              CMPGE    r1,#0                 ;93
000014  2001              MOVGE    r0,#1                 ;93
;;;95             return false;
;;;96           }
;;;97     
;;;98           return ArraySlice<Type>::IsValid();
;;;99         } // bool FixedLengthList<Type>::IsValid() const
000016  4770              BXGE     lr
                  |L399.24|
000018  2000              MOVS     r0,#0
00001a  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||area_number.400||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.400||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_16BenchmarkElementEE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L406.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L406.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.407||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.407||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_23CompileBenchmarkResults17BenchmarkInstanceEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<BasicBenchmarkElement>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<BasicBenchmarkElement>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b091              SUB      sp,sp,#0x44
000006  4605              MOV      r5,r0
000008  4691              MOV      r9,r2
00000a  a808              ADD      r0,sp,#0x20
00000c  f04f0801          MOV      r8,#1
000010  f8dda050          LDR      r10,[sp,#0x50]
000014  9f12              LDR      r7,[sp,#0x48]
000016  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
00001a  f1a0040c          SUB      r4,r0,#0xc
00001e  f04f30ff          MOV      r0,#0xffffffff
000022  6020              STR      r0,[r4,#0]
000024  6060              STR      r0,[r4,#4]
000026  f04f0b00          MOV      r11,#0
00002a  f8c4b010          STR      r11,[r4,#0x10]
00002e  60a0              STR      r0,[r4,#8]
000030  2f00              CMP      r7,#0
000032  da0a              BGE      |L413.74|
000034  217d              MOVS     r1,#0x7d
000036  4878              LDR      r0,|L413.536|
000038  e9cd0100          STRD     r0,r1,[sp,#0]
00003c  4b77              LDR      r3,|L413.540|
00003e  4a78              LDR      r2,|L413.544|
000040  4978              LDR      r1,|L413.548|
000042  2005              MOVS     r0,#5
000044  f7fffffe          BL       _Anki_Log
000048  e085              B        |L413.342|
                  |L413.74|
00004a  f8cdb010          STR      r11,[sp,#0x10]
00004e  2f01              CMP      r7,#1
000050  bfd4              ITE      LE
000052  2001              MOVLE    r0,#1
000054  4638              MOVGT    r0,r7
000056  0140              LSLS     r0,r0,#5
000058  300f              ADDS     r0,r0,#0xf
00005a  f020060f          BIC      r6,r0,#0xf
00005e  a804              ADD      r0,sp,#0x10
000060  e9cd0a02          STRD     r0,r10,[sp,#8]
000064  2e00              CMP      r6,#0
000066  dc0a              BGT      |L413.126|
000068  f240310b          MOV      r1,#0x30b
00006c  486e              LDR      r0,|L413.552|
00006e  e9cd0100          STRD     r0,r1,[sp,#0]
000072  4b6e              LDR      r3,|L413.556|
000074  4a6e              LDR      r2,|L413.560|
000076  496f              LDR      r1,|L413.564|
000078  2005              MOVS     r0,#5
00007a  f7fffffe          BL       _Anki_Log
                  |L413.126|
00007e  a803              ADD      r0,sp,#0xc
000080  60a6              STR      r6,[r4,#8]
000082  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
000086  4602              MOV      r2,r0
000088  4631              MOV      r1,r6
00008a  4648              MOV      r0,r9
00008c  9b02              LDR      r3,[sp,#8]
00008e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
000092  f8cda00c          STR      r10,[sp,#0xc]
000096  f8dd9010          LDR      r9,[sp,#0x10]
00009a  f8dfa19c          LDR      r10,|L413.568|
00009e  0006              MOVS     r6,r0
0000a0  d00d              BEQ      |L413.190|
0000a2  f1b90f10          CMP      r9,#0x10
0000a6  d21c              BCS      |L413.226|
0000a8  f2403023          MOV      r0,#0x323
0000ac  e9cda000          STRD     r10,r0,[sp,#0]
0000b0  4b62              LDR      r3,|L413.572|
0000b2  4a63              LDR      r2,|L413.576|
0000b4  4963              LDR      r1,|L413.580|
0000b6  2005              MOVS     r0,#5
0000b8  f7fffffe          BL       _Anki_Log
0000bc  e04b              B        |L413.342|
                  |L413.190|
0000be  f240301e          MOV      r0,#0x31e
0000c2  e9cda000          STRD     r10,r0,[sp,#0]
0000c6  4b5d              LDR      r3,|L413.572|
0000c8  4a5f              LDR      r2,|L413.584|
0000ca  4960              LDR      r1,|L413.588|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f04f30ff          MOV      r0,#0xffffffff
0000d6  6020              STR      r0,[r4,#0]
0000d8  6060              STR      r0,[r4,#4]
0000da  f8c4b010          STR      r11,[r4,#0x10]
0000de  60a0              STR      r0,[r4,#8]
0000e0  e039              B        |L413.342|
                  |L413.226|
0000e2  a803              ADD      r0,sp,#0xc
0000e4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
0000e8  b150              CBZ      r0,|L413.256|
0000ea  f2403026          MOV      r0,#0x326
0000ee  e9cda000          STRD     r10,r0,[sp,#0]
0000f2  4b52              LDR      r3,|L413.572|
0000f4  4a56              LDR      r2,|L413.592|
0000f6  4953              LDR      r1,|L413.580|
0000f8  2005              MOVS     r0,#5
0000fa  f7fffffe          BL       _Anki_Log
0000fe  e02a              B        |L413.342|
                  |L413.256|
000100  9903              LDR      r1,[sp,#0xc]
000102  e9c41603          STRD     r1,r6,[r4,#0xc]
000106  f106000f          ADD      r0,r6,#0xf
00010a  f020000f          BIC      r0,r0,#0xf
00010e  e9c48700          STRD     r8,r7,[r4,#0]
000112  1b80              SUBS     r0,r0,r6
000114  2f01              CMP      r7,#1
000116  bfd8              IT       LE
000118  2701              MOVLE    r7,#1
00011a  0179              LSLS     r1,r7,#5
00011c  310f              ADDS     r1,r1,#0xf
00011e  f021010f          BIC      r1,r1,#0xf
000122  fb010108          MLA      r1,r1,r8,r0
000126  4549              CMP      r1,r9
000128  bfdc              ITT      LE
00012a  1831              ADDLE    r1,r6,r0
00012c  6121              STRLE    r1,[r4,#0x10]
00012e  dd12              BLE      |L413.342|
000130  f2403035          MOV      r0,#0x335
000134  f8cda000          STR      r10,[sp,#0]
000138  e9cd0101          STRD     r0,r1,[sp,#4]
00013c  4b3f              LDR      r3,|L413.572|
00013e  4a45              LDR      r2,|L413.596|
000140  4942              LDR      r1,|L413.588|
000142  2005              MOVS     r0,#5
000144  f7fffffe          BL       _Anki_Log
000148  f04f30ff          MOV      r0,#0xffffffff
00014c  6020              STR      r0,[r4,#0]
00014e  6060              STR      r0,[r4,#4]
000150  f8c4b010          STR      r11,[r4,#0x10]
000154  60a0              STR      r0,[r4,#8]
                  |L413.342|
000156  e89403c0          LDM      r4,{r6-r9}
00015a  2200              MOVS     r2,#0
00015c  6924              LDR      r4,[r4,#0x10]
00015e  4611              MOV      r1,r2
000160  a80a              ADD      r0,sp,#0x28
000162  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000166  4682              MOV      r10,r0
000168  2200              MOVS     r2,#0
00016a  4611              MOV      r1,r2
00016c  a80d              ADD      r0,sp,#0x34
00016e  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000172  e9da2300          LDRD     r2,r3,[r10,#0]
000176  4601              MOV      r1,r0
000178  f8dac008          LDR      r12,[r10,#8]
00017c  4628              MOV      r0,r5
00017e  f8c5c008          STR      r12,[r5,#8]
000182  e9c02300          STRD     r2,r3,[r0,#0]
000186  e9d12300          LDRD     r2,r3,[r1,#0]
00018a  6889              LDR      r1,[r1,#8]
00018c  f1050a14          ADD      r10,r5,#0x14
000190  62ac              STR      r4,[r5,#0x28]
000192  e88a03c2          STM      r10,{r1,r6-r9}
000196  2e00              CMP      r6,#0
000198  e9c52303          STRD     r2,r3,[r5,#0xc]
00019c  bfc8              IT       GT
00019e  2f00              CMPGT    r7,#0
0001a0  dd28              BLE      |L413.500|
0001a2  fb06f107          MUL      r1,r6,r7
0001a6  b329              CBZ      r1,|L413.500|
0001a8  2100              MOVS     r1,#0
0001aa  fb014108          MLA      r1,r1,r8,r4
0001ae  62e9              STR      r1,[r5,#0x2c]
                  |L413.432|
0001b0  2e00              CMP      r6,#0
0001b2  bfc8              IT       GT
0001b4  2f00              CMPGT    r7,#0
0001b6  dd20              BLE      |L413.506|
0001b8  fb06f007          MUL      r0,r6,r7
0001bc  b1e8              CBZ      r0,|L413.506|
0001be  2000              MOVS     r0,#0
0001c0  fb004008          MLA      r0,r0,r8,r4
0001c4  6328              STR      r0,[r5,#0x30]
                  |L413.454|
0001c6  69a9              LDR      r1,[r5,#0x18]
0001c8  2900              CMP      r1,#0
0001ca  bfc4              ITT      GT
0001cc  69e8              LDRGT    r0,[r5,#0x1c]
0001ce  2800              CMPGT    r0,#0
0001d0  dd16              BLE      |L413.512|
0001d2  4348              MULS     r0,r1,r0
0001d4  d014              BEQ      |L413.512|
0001d6  6a2a              LDR      r2,[r5,#0x20]
0001d8  6aa9              LDR      r1,[r5,#0x28]
0001da  2000              MOVS     r0,#0
0001dc  fb001002          MLA      r0,r0,r2,r1
0001e0  6328              STR      r0,[r5,#0x30]
                  |L413.482|
0001e2  a814              ADD      r0,sp,#0x50
0001e4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0001e8  b168              CBZ      r0,|L413.518|
0001ea  4628              MOV      r0,r5
0001ec  9912              LDR      r1,[sp,#0x48]
0001ee  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementE8set_sizeEi ; Anki::Embedded::FixedLengthList<BasicBenchmarkElement>::set_size(int)
0001f2  e00c              B        |L413.526|
                  |L413.500|
0001f4  f8c5b02c          STR      r11,[r5,#0x2c]
0001f8  e7da              B        |L413.432|
                  |L413.506|
0001fa  f8c5b030          STR      r11,[r5,#0x30]
0001fe  e7e2              B        |L413.454|
                  |L413.512|
000200  f8c5b030          STR      r11,[r5,#0x30]
000204  e7ed              B        |L413.482|
                  |L413.518|
000206  2100              MOVS     r1,#0
000208  4628              MOV      r0,r5
00020a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementE8set_sizeEi ; Anki::Embedded::FixedLengthList<BasicBenchmarkElement>::set_size(int)
                  |L413.526|
00020e  b015              ADD      sp,sp,#0x54
000210  4628              MOV      r0,r5
000212  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

000216  0000              DCW      0x0000
                  |L413.536|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<BasicBenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L413.540|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<BasicBenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L413.544|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<BasicBenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L413.548|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<BasicBenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
                  |L413.552|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<BasicBenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L413.556|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<BasicBenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
                  |L413.560|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<BasicBenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
                  |L413.564|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<BasicBenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
                  |L413.568|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L413.572|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L413.576|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
                  |L413.580|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
                  |L413.584|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L413.588|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
                  |L413.592|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
                  |L413.596|
                          DCD      _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)

                          AREA ||area_number.414||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.414||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<int>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L420.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L420.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.421||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.421||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<BasicBenchmarkElement>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L427.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L427.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.428||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.428||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListI21BasicBenchmarkElementE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d207369          DCB      0x3d,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  20696e74          DCB      0x20,0x69,0x6e,0x74
000090  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000bc  65642069          DCB      0x65,0x64,0x20,0x69
0000c0  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2073          DCB      0x20,0x3d,0x20,0x73
000094  69676e65          DCB      0x69,0x67,0x6e,0x65
000098  6420696e          DCB      0x64,0x20,0x69,0x6e
00009c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642069          DCB      0x65,0x64,0x20,0x69
000090  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIjE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20696e74          DCB      0x20,0x69,0x6e,0x74
00005c  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  20696e74          DCB      0x20,0x69,0x6e,0x74
0000c4  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  696e745d          DCB      0x69,0x6e,0x74,0x5d
0000a0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded23CompileBenchmarkResults23ComputeBenchmarkResultsEiPK14BenchmarkEventRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::CompileBenchmarkResults::ComputeBenchmarkResults(int, const BenchmarkEvent*, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  46697865          DCB      0x46,0x69,0x78,0x65
000014  644c656e          DCB      0x64,0x4c,0x65,0x6e
000018  6774684c          DCB      0x67,0x74,0x68,0x4c
00001c  6973743c          DCB      0x69,0x73,0x74,0x3c
000020  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000024  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000028  62656464          DCB      0x62,0x65,0x64,0x64
00002c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000030  42656e63          DCB      0x42,0x65,0x6e,0x63
000034  686d6172          DCB      0x68,0x6d,0x61,0x72
000038  6b456c65          DCB      0x6b,0x45,0x6c,0x65
00003c  6d656e74          DCB      0x6d,0x65,0x6e,0x74
000040  3e20416e          DCB      0x3e,0x20,0x41,0x6e
000044  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000048  456d6265          DCB      0x45,0x6d,0x62,0x65
00004c  64646564          DCB      0x64,0x64,0x65,0x64
000050  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000054  6d70696c          DCB      0x6d,0x70,0x69,0x6c
000058  6542656e          DCB      0x65,0x42,0x65,0x6e
00005c  63686d61          DCB      0x63,0x68,0x6d,0x61
000060  726b5265          DCB      0x72,0x6b,0x52,0x65
000064  73756c74          DCB      0x73,0x75,0x6c,0x74
000068  733a3a43          DCB      0x73,0x3a,0x3a,0x43
00006c  6f6d7075          DCB      0x6f,0x6d,0x70,0x75
000070  74654265          DCB      0x74,0x65,0x42,0x65
000074  6e63686d          DCB      0x6e,0x63,0x68,0x6d
000078  61726b52          DCB      0x61,0x72,0x6b,0x52
00007c  6573756c          DCB      0x65,0x73,0x75,0x6c
000080  74732873          DCB      0x74,0x73,0x28,0x73
000084  69676e65          DCB      0x69,0x67,0x6e,0x65
000088  6420696e          DCB      0x64,0x20,0x69,0x6e
00008c  742c2063          DCB      0x74,0x2c,0x20,0x63
000090  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000094  2042656e          DCB      0x20,0x42,0x65,0x6e
000098  63686d61          DCB      0x63,0x68,0x6d,0x61
00009c  726b4576          DCB      0x72,0x6b,0x45,0x76
0000a0  656e7420          DCB      0x65,0x6e,0x74,0x20
0000a4  2a2c2041          DCB      0x2a,0x2c,0x20,0x41
0000a8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000ac  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000b0  65646465          DCB      0x65,0x64,0x64,0x65
0000b4  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
0000b8  656d6f72          DCB      0x65,0x6d,0x6f,0x72
0000bc  79537461          DCB      0x79,0x53,0x74,0x61
0000c0  636b2026          DCB      0x63,0x6b,0x20,0x26
0000c4  2900              DCB      0x29,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4265          DCB      0x3a,0x3a,0x42,0x65
000098  6e63686d          DCB      0x6e,0x63,0x68,0x6d
00009c  61726b45          DCB      0x61,0x72,0x6b,0x45
0000a0  6c656d65          DCB      0x6c,0x65,0x6d,0x65
0000a4  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE6ResizeEiiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::Resize(int, int, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e742c          DCB      0x69,0x6e,0x74,0x2c
00003c  20736967          DCB      0x20,0x73,0x69,0x67
000040  6e656420          DCB      0x6e,0x65,0x64,0x20
000044  696e742c          DCB      0x69,0x6e,0x74,0x2c
000048  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00004c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000050  6d626564          DCB      0x6d,0x62,0x65,0x64
000054  6465643a          DCB      0x64,0x65,0x64,0x3a
000058  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00005c  6f727953          DCB      0x6f,0x72,0x79,0x53
000060  7461636b          DCB      0x74,0x61,0x63,0x6b
000064  20262920          DCB      0x20,0x26,0x29,0x20
000068  5b776974          DCB      0x5b,0x77,0x69,0x74
00006c  68205479          DCB      0x68,0x20,0x54,0x79
000070  7065203d          DCB      0x70,0x65,0x20,0x3d
000074  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000078  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00007c  6d626564          DCB      0x6d,0x62,0x65,0x64
000080  6465643a          DCB      0x64,0x65,0x64,0x3a
000084  3a42656e          DCB      0x3a,0x42,0x65,0x6e
000088  63686d61          DCB      0x63,0x68,0x6d,0x61
00008c  726b456c          DCB      0x72,0x6b,0x45,0x6c
000090  656d656e          DCB      0x65,0x6d,0x65,0x6e
000094  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  42656e63          DCB      0x42,0x65,0x6e,0x63
0000cc  686d6172          DCB      0x68,0x6d,0x61,0x72
0000d0  6b456c65          DCB      0x6b,0x45,0x6c,0x65
0000d4  6d656e74          DCB      0x6d,0x65,0x6e,0x74
0000d8  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_16BenchmarkElementEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::BenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a42          DCB      0x64,0x3a,0x3a,0x42
0000a4  656e6368          DCB      0x65,0x6e,0x63,0x68
0000a8  6d61726b          DCB      0x6d,0x61,0x72,0x6b
0000ac  456c656d          DCB      0x45,0x6c,0x65,0x6d
0000b0  656e745d          DCB      0x65,0x6e,0x74,0x5d
0000b4  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<BasicBenchmarkElement>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d204261          DCB      0x3d,0x20,0x42,0x61
000088  73696342          DCB      0x73,0x69,0x63,0x42
00008c  656e6368          DCB      0x65,0x6e,0x63,0x68
000090  6d61726b          DCB      0x6d,0x61,0x72,0x6b
000094  456c656d          DCB      0x45,0x6c,0x65,0x6d
000098  656e745d          DCB      0x65,0x6e,0x74,0x5d
00009c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<BasicBenchmarkElement>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  42617369          DCB      0x42,0x61,0x73,0x69
0000bc  6342656e          DCB      0x63,0x42,0x65,0x6e
0000c0  63686d61          DCB      0x63,0x68,0x6d,0x61
0000c4  726b456c          DCB      0x72,0x6b,0x45,0x6c
0000c8  656d656e          DCB      0x65,0x6d,0x65,0x6e
0000cc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayI21BasicBenchmarkElementE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<BasicBenchmarkElement>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2042          DCB      0x20,0x3d,0x20,0x42
000094  61736963          DCB      0x61,0x73,0x69,0x63
000098  42656e63          DCB      0x42,0x65,0x6e,0x63
00009c  686d6172          DCB      0x68,0x6d,0x61,0x72
0000a0  6b456c65          DCB      0x6b,0x45,0x6c,0x65
0000a4  6d656e74          DCB      0x6d,0x65,0x6e,0x74
0000a8  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000098  6d70696c          DCB      0x6d,0x70,0x69,0x6c
00009c  6542656e          DCB      0x65,0x42,0x65,0x6e
0000a0  63686d61          DCB      0x63,0x68,0x6d,0x61
0000a4  726b5265          DCB      0x72,0x6b,0x52,0x65
0000a8  73756c74          DCB      0x73,0x75,0x6c,0x74
0000ac  733a3a42          DCB      0x73,0x3a,0x3a,0x42
0000b0  656e6368          DCB      0x65,0x6e,0x63,0x68
0000b4  6d61726b          DCB      0x6d,0x61,0x72,0x6b
0000b8  496e7374          DCB      0x49,0x6e,0x73,0x74
0000bc  616e6365          DCB      0x61,0x6e,0x63,0x65
0000c0  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  436f6d70          DCB      0x43,0x6f,0x6d,0x70
0000cc  696c6542          DCB      0x69,0x6c,0x65,0x42
0000d0  656e6368          DCB      0x65,0x6e,0x63,0x68
0000d4  6d61726b          DCB      0x6d,0x61,0x72,0x6b
0000d8  52657375          DCB      0x52,0x65,0x73,0x75
0000dc  6c74733a          DCB      0x6c,0x74,0x73,0x3a
0000e0  3a42656e          DCB      0x3a,0x42,0x65,0x6e
0000e4  63686d61          DCB      0x63,0x68,0x6d,0x61
0000e8  726b496e          DCB      0x72,0x6b,0x49,0x6e
0000ec  7374616e          DCB      0x73,0x74,0x61,0x6e
0000f0  63655d00          DCB      0x63,0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_23CompileBenchmarkResults17BenchmarkInstanceEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::CompileBenchmarkResults::BenchmarkInstance>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a43          DCB      0x64,0x3a,0x3a,0x43
0000a4  6f6d7069          DCB      0x6f,0x6d,0x70,0x69
0000a8  6c654265          DCB      0x6c,0x65,0x42,0x65
0000ac  6e63686d          DCB      0x6e,0x63,0x68,0x6d
0000b0  61726b52          DCB      0x61,0x72,0x6b,0x52
0000b4  6573756c          DCB      0x65,0x73,0x75,0x6c
0000b8  74733a3a          DCB      0x74,0x73,0x3a,0x3a
0000bc  42656e63          DCB      0x42,0x65,0x6e,0x63
0000c0  686d6172          DCB      0x68,0x6d,0x61,0x72
0000c4  6b496e73          DCB      0x6b,0x49,0x6e,0x73
0000c8  74616e63          DCB      0x74,0x61,0x6e,0x63
0000cc  655d00            DCB      0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix13InsertionSortIjEENS_6ResultERNS0_5ArrayIT_EEibiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::InsertionSort<unsigned>(Anki::Embedded::Array<T1>&, int, bool, int, int)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a496e73          DCB      0x3a,0x49,0x6e,0x73
000028  65727469          DCB      0x65,0x72,0x74,0x69
00002c  6f6e536f          DCB      0x6f,0x6e,0x53,0x6f
000030  72742841          DCB      0x72,0x74,0x28,0x41
000034  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000038  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00003c  65646465          DCB      0x65,0x64,0x64,0x65
000040  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000044  72726179          DCB      0x72,0x72,0x61,0x79
000048  3c547970          DCB      0x3c,0x54,0x79,0x70
00004c  653e2026          DCB      0x65,0x3e,0x20,0x26
000050  2c207369          DCB      0x2c,0x20,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20696e74          DCB      0x20,0x69,0x6e,0x74
00005c  2c20626f          DCB      0x2c,0x20,0x62,0x6f
000060  6f6c2c20          DCB      0x6f,0x6c,0x2c,0x20
000064  7369676e          DCB      0x73,0x69,0x67,0x6e
000068  65642069          DCB      0x65,0x64,0x20,0x69
00006c  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000070  7369676e          DCB      0x73,0x69,0x67,0x6e
000074  65642069          DCB      0x65,0x64,0x20,0x69
000078  6e742920          DCB      0x6e,0x74,0x29,0x20
00007c  5b776974          DCB      0x5b,0x77,0x69,0x74
000080  68205479          DCB      0x68,0x20,0x54,0x79
000084  7065203d          DCB      0x70,0x65,0x20,0x3d
000088  20756e73          DCB      0x20,0x75,0x6e,0x73
00008c  69676e65          DCB      0x69,0x67,0x6e,0x65
000090  6420696e          DCB      0x64,0x20,0x69,0x6e
000094  745d00            DCB      0x74,0x5d,0x00
