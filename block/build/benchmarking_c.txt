; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\benchmarking_c.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\benchmarking_c.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DANKICORETECH_EMBEDDED_USE_HEATSHRINK -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\benchmarking_c.crf ..\coretech\common\robot\src\benchmarking_c.c]
                          THUMB

                          AREA ||i.BeginBenchmark||, CODE, READONLY, ALIGN=2

                  BeginBenchmark PROC
;;;94     
;;;95     void BeginBenchmark(const char *name)
000000  b570              PUSH     {r4-r6,lr}
;;;96     {
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       XXX_HACK_FOR_PETE
000008  f8dfc034          LDR      r12,|L1.64|
00000c  4d0d              LDR      r5,|L1.68|
00000e  2300              MOVS     r3,#0
000010  f8dc1000          LDR      r1,[r12,#0]  ; numBenchmarkEvents
000014  eb010241          ADD      r2,r1,r1,LSL #1
000018  f8454032          STR      r4,[r5,r2,LSL #3]
00001c  eb0502c2          ADD      r2,r5,r2,LSL #3
000020  e9c20302          STRD     r0,r3,[r2,#8]
000024  1c48              ADDS     r0,r1,#1
000026  7413              STRB     r3,[r2,#0x10]
000028  f64071ff          MOV      r1,#0xfff
00002c  f8cc0000          STR      r0,[r12,#0]  ; numBenchmarkEvents
000030  4288              CMP      r0,r1
000032  bfa4              ITT      GE
000034  f64070fe          MOVGE    r0,#0xffe
000038  f8cc0000          STRGE    r0,[r12,#0]  ; numBenchmarkEvents
;;;97       AddBenchmarkEvent(name, GetBenchmarkTime(), BENCHMARK_EVENT_BEGIN);
;;;98     } // void startBenchmark(const char *name)
00003c  bd70              POP      {r4-r6,pc}
;;;99     
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      ||.data||
                  |L1.68|
                          DCD      OFFCHIP

                          AREA ||i.EndBenchmark||, CODE, READONLY, ALIGN=2

                  EndBenchmark PROC
;;;99     
;;;100    void EndBenchmark(const char *name)
000000  b570              PUSH     {r4-r6,lr}
;;;101    {
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       XXX_HACK_FOR_PETE
000008  4d0c              LDR      r5,|L2.60|
00000a  4e0d              LDR      r6,|L2.64|
00000c  2300              MOVS     r3,#0
00000e  6829              LDR      r1,[r5,#0]  ; numBenchmarkEvents
;;;102      AddBenchmarkEvent(name, GetBenchmarkTime(), BENCHMARK_EVENT_END);
000010  f04f0c01          MOV      r12,#1
000014  eb010241          ADD      r2,r1,r1,LSL #1
000018  f8464032          STR      r4,[r6,r2,LSL #3]
00001c  eb0602c2          ADD      r2,r6,r2,LSL #3
000020  e9c20302          STRD     r0,r3,[r2,#8]
000024  1c48              ADDS     r0,r1,#1
000026  f882c010          STRB     r12,[r2,#0x10]
00002a  f64071ff          MOV      r1,#0xfff
00002e  6028              STR      r0,[r5,#0]  ; numBenchmarkEvents
000030  4288              CMP      r0,r1
000032  bfa4              ITT      GE
000034  f64070fe          MOVGE    r0,#0xffe
000038  6028              STRGE    r0,[r5,#0]  ; numBenchmarkEvents
;;;103    } // void endBenchmark(const char *name)
00003a  bd70              POP      {r4-r6,pc}
;;;104    
                          ENDP

                  |L2.60|
                          DCD      ||.data||
                  |L2.64|
                          DCD      OFFCHIP

                          AREA ||i.InitBenchmarking||, CODE, READONLY, ALIGN=2

                  InitBenchmarking PROC
;;;58     
;;;59     void InitBenchmarking(void)
000000  4901              LDR      r1,|L3.8|
;;;60     {
;;;61       numBenchmarkEvents = 0;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]  ; numBenchmarkEvents
;;;62     }
000006  4770              BX       lr
;;;63     
                          ENDP

                  |L3.8|
                          DCD      ||.data||

                          AREA ||i.PrintBenchmarkResults||, CODE, READONLY, ALIGN=3

                  PrintBenchmarkResults PROC
;;;141    
;;;142    static void PrintBenchmarkResults(const BenchmarkPrintType printType)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;143    {
;;;144      int i;
;;;145    
;;;146    #if defined(_MSC_VER)
;;;147      LARGE_INTEGER frequency;
;;;148      double freqencyDouble;
;;;149      QueryPerformanceFrequency(&frequency);
;;;150      freqencyDouble = (double)(frequency.QuadPart);
;;;151    #endif
;;;152    
;;;153      numEventNames = 0;
000004  f8df8400          LDR      r8,|L4.1032|
000008  f04f0c00          MOV      r12,#0
00000c  ed2d8b0c          VPUSH    {d8-d13}              ;143
000010  b085              SUB      sp,sp,#0x14           ;143
000012  4607              MOV      r7,r0                 ;143
000014  f8c8c004          STR      r12,[r8,#4]  ; numEventNames
;;;154    
;;;155      for(i=0; i<MAX_BENCHMARK_EVENTS; i++) {
000018  4660              MOV      r0,r12
;;;156        totalTimes[i] = 0.0;
;;;157        minTimes[i] = (double)(0x7FFFFFFFFFFFFFFFLL);
00001a  ed9f0bfd          VLDR     d0,|L4.1040|
;;;158        maxTimes[i] = (double)(-0x7FFFFFFFFFFFFFFFLL);
00001e  ed9f1bfe          VLDR     d1,|L4.1048|
000022  f64072ff          MOV      r2,#0xfff             ;155
;;;159        numEvents[i] = 0;
;;;160        lastBeginIndex[i] = -1;
000026  f04f31ff          MOV      r1,#0xffffffff
00002a  4bfd              LDR      r3,|L4.1056|
00002c  eba30a82          SUB      r10,r3,r2,LSL #2      ;159
000030  ed9fabfd          VLDR     d10,|L4.1064|
000034  f8dfb3f8          LDR      r11,|L4.1072|
                  |L4.56|
000038  4dfe              LDR      r5,|L4.1076|
00003a  eb0b06c0          ADD      r6,r11,r0,LSL #3      ;156
00003e  4cfe              LDR      r4,|L4.1080|
000040  ed86ab00          VSTR     d10,[r6,#0]           ;156
000044  eb0506c0          ADD      r6,r5,r0,LSL #3       ;157
000048  ed860b00          VSTR     d0,[r6,#0]            ;157
00004c  eb0406c0          ADD      r6,r4,r0,LSL #3       ;158
000050  ed861b00          VSTR     d1,[r6,#0]            ;158
000054  f84ac020          STR      r12,[r10,r0,LSL #2]   ;159
000058  f8431020          STR      r1,[r3,r0,LSL #2]
00005c  1c40              ADDS     r0,r0,#1              ;155
00005e  4282              CMP      r2,r0                 ;155
000060  dcea              BGT      |L4.56|
;;;161      }
;;;162    
;;;163      for(i=0; i<numBenchmarkEvents; i++) {
000062  2500              MOVS     r5,#0
;;;164        const unsigned int index = AddName(benchmarkEvents[i].name);
;;;165        if(benchmarkEvents[i].type == BENCHMARK_EVENT_BEGIN) {
;;;166          lastBeginIndex[index] = i;
;;;167        } else { // BENCHMARK_EVENT_END
;;;168          if(lastBeginIndex[index] < 0) {
;;;169            printf("Benchmark parse error: Perhaps BeginBenchmark() and EndBenchmark() were nested, or there were more than %d benchmark events.\n", MAX_BENCHMARK_EVENTS);
;;;170            continue;
;;;171          }
;;;172    
;;;173          {
;;;174            const unsigned long long rawElapsedTime = benchmarkEvents[i].time - benchmarkEvents[lastBeginIndex[index]].time;
;;;175            //#pragma unused (rawElapsedTime) // may or may not get used depending on #ifs below
;;;176    
;;;177    #if defined(_MSC_VER)
;;;178            const double elapsedTime = (double)rawElapsedTime / freqencyDouble;
;;;179    #elif defined(__APPLE_CC__)
;;;180            const double elapsedTime = 0.0;
;;;181    #elif defined(__EDG__)  // MDK-ARM
;;;182            const double elapsedTime = (double)rawElapsedTime / 1000000.0;
000064  ed9f9bf6          VLDR     d9,|L4.1088|
000068  f8d80000          LDR      r0,[r8,#0]            ;163  ; numBenchmarkEvents
00006c  2800              CMP      r0,#0                 ;163
00006e  dd3d              BLE      |L4.236|
                  |L4.112|
000070  48f5              LDR      r0,|L4.1096|
000072  eb050945          ADD      r9,r5,r5,LSL #1       ;164
000076  2400              MOVS     r4,#0                 ;164
000078  f8506039          LDR      r6,[r0,r9,LSL #3]     ;164
00007c  f8d80004          LDR      r0,[r8,#4]            ;164  ; numEventNames
000080  4284              CMP      r4,r0                 ;164
000082  da0b              BGE      |L4.156|
                  |L4.132|
000084  48f1              LDR      r0,|L4.1100|
000086  f8501024          LDR      r1,[r0,r4,LSL #2]     ;164
00008a  4630              MOV      r0,r6                 ;164
00008c  f7fffffe          BL       strcmp
000090  b180              CBZ      r0,|L4.180|
000092  f8d80004          LDR      r0,[r8,#4]            ;164  ; numEventNames
000096  1c64              ADDS     r4,r4,#1              ;164
000098  4284              CMP      r4,r0                 ;164
00009a  dbf3              BLT      |L4.132|
                  |L4.156|
00009c  f8d80004          LDR      r0,[r8,#4]            ;164  ; numEventNames
0000a0  49ea              LDR      r1,|L4.1100|
0000a2  eb010180          ADD      r1,r1,r0,LSL #2       ;164
0000a6  1c40              ADDS     r0,r0,#1              ;164
0000a8  f8c80004          STR      r0,[r8,#4]            ;164  ; numEventNames
0000ac  600e              STR      r6,[r1,#0]            ;164
0000ae  f8d80004          LDR      r0,[r8,#4]            ;164  ; numEventNames
0000b2  1e44              SUBS     r4,r0,#1              ;164
                  |L4.180|
0000b4  4ae4              LDR      r2,|L4.1096|
0000b6  eb0203c9          ADD      r3,r2,r9,LSL #3       ;165
0000ba  7c18              LDRB     r0,[r3,#0x10]         ;165
0000bc  2800              CMP      r0,#0                 ;165
0000be  bf04              ITT      EQ                    ;166
0000c0  48d7              LDREQ    r0,|L4.1056|
0000c2  f8405024          STREQ    r5,[r0,r4,LSL #2]     ;166
0000c6  d00c              BEQ      |L4.226|
0000c8  f8df9354          LDR      r9,|L4.1056|
0000cc  f8590024          LDR      r0,[r9,r4,LSL #2]     ;168
0000d0  2800              CMP      r0,#0                 ;168
0000d2  da18              BGE      |L4.262|
0000d4  2100              MOVS     r1,#0                 ;169
0000d6  f64073ff          MOV      r3,#0xfff             ;169
0000da  4add              LDR      r2,|L4.1104|
0000dc  4608              MOV      r0,r1                 ;169
0000de  f7fffffe          BL       explicitPrintf
                  |L4.226|
0000e2  f8d80000          LDR      r0,[r8,#0]            ;163  ; numBenchmarkEvents
0000e6  1c6d              ADDS     r5,r5,#1              ;163
0000e8  4285              CMP      r5,r0                 ;163
0000ea  dbc1              BLT      |L4.112|
                  |L4.236|
;;;183    #else
;;;184            const double elapsedTime = (double)rawElapsedTime / 1000000000.0;
;;;185    #endif
;;;186    
;;;187            minTimes[index] = MIN(minTimes[index], elapsedTime);
;;;188            maxTimes[index] = MAX(maxTimes[index], elapsedTime);
;;;189    
;;;190            totalTimes[index] += elapsedTime;
;;;191    
;;;192            numEvents[index]++;
;;;193    
;;;194            lastBeginIndex[index] = -1;
;;;195          }
;;;196        }
;;;197      } // for(i=0; i<numBenchmarkEvents; i++)
;;;198    
;;;199      for(i=0; i<numEventNames; i++) {
0000ec  f8d80004          LDR      r0,[r8,#4]  ; numEventNames
0000f0  2400              MOVS     r4,#0
0000f2  4284              CMP      r4,r0
;;;200        printf("Event ");
;;;201        printf(eventNames[i]);
;;;202        if(printType == BENCHMARK_PRINT_ALL) {
;;;203          printf(": Mean:%dus Min:%dus Max:%dus Total:%dus NumEvents:%d\n",
0000f4  bfb8              IT       LT
0000f6  ed9f8bd8          VLDRLT   d8,|L4.1112|
0000fa  db5c              BLT      |L4.438|
                  |L4.252|
;;;204            (s32)DBL_ROUND(1000000*totalTimes[i]/(double)numEvents[i]), (s32)DBL_ROUND(1000000*minTimes[i]), (s32)DBL_ROUND(1000000*maxTimes[i]), (s32)DBL_ROUND(1000000*totalTimes[i]), (s32)numEvents[i]);
;;;205        } else if (printType == BENCHMARK_PRINT_TOTALS) {
;;;206          printf(": Total:%dus\n",
;;;207            (s32)DBL_ROUND(1000000*totalTimes[i]));
;;;208        }
;;;209      } // for(i=0; i<numEventNames; i++)
;;;210    } // void PrintBenchmarkResults()
0000fc  b005              ADD      sp,sp,#0x14
0000fe  ecbd8b0c          VPOP     {d8-d13}
000102  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.262|
000106  eb000040          ADD      r0,r0,r0,LSL #1       ;174
00010a  eb0200c0          ADD      r0,r2,r0,LSL #3       ;174
00010e  e9d31302          LDRD     r1,r3,[r3,#8]
000112  e9d02002          LDRD     r2,r0,[r0,#8]         ;174
000116  1a8a              SUBS     r2,r1,r2              ;174
000118  eb630100          SBC      r1,r3,r0              ;174
00011c  4610              MOV      r0,r2                 ;174
00011e  f7fffffe          BL       __aeabi_ul2d
000122  eeb01a49          VMOV.F32 s2,s18                ;182
000126  eef01a69          VMOV.F32 s3,s19                ;182
00012a  ec532b11          VMOV     r2,r3,d1              ;182
00012e  f7fffffe          BL       __aeabi_ddiv
000132  ec410b18          VMOV     d8,r0,r1              ;182
000136  48bf              LDR      r0,|L4.1076|
000138  ec532b18          VMOV     r2,r3,d8              ;187
00013c  eb0006c4          ADD      r6,r0,r4,LSL #3       ;187
000140  ed960b00          VLDR     d0,[r6,#0]            ;187
000144  ec510b10          VMOV     r0,r1,d0              ;187
000148  f7fffffe          BL       __aeabi_cdcmple
00014c  bf26              ITTE     CS                    ;187
00014e  eeb00a48          VMOVCS.F32 s0,s16                ;187
000152  eef00a68          VMOVCS.F32 s1,s17                ;187
000156  ed960b00          VLDRCC   d0,[r6,#0]            ;187
00015a  ed860b00          VSTR     d0,[r6,#0]            ;187
00015e  48b6              LDR      r0,|L4.1080|
000160  ec532b18          VMOV     r2,r3,d8              ;188
000164  eb0006c4          ADD      r6,r0,r4,LSL #3       ;188
000168  ed960b00          VLDR     d0,[r6,#0]            ;188
00016c  ec510b10          VMOV     r0,r1,d0              ;188
000170  f7fffffe          BL       __aeabi_cdrcmple
000174  bf26              ITTE     CS                    ;188
000176  eeb00a48          VMOVCS.F32 s0,s16                ;188
00017a  eef00a68          VMOVCS.F32 s1,s17                ;188
00017e  ed960b00          VLDRCC   d0,[r6,#0]            ;188
000182  ed860b00          VSTR     d0,[r6,#0]            ;188
000186  eb0b06c4          ADD      r6,r11,r4,LSL #3      ;190
00018a  ec532b18          VMOV     r2,r3,d8              ;190
00018e  ed960b00          VLDR     d0,[r6,#0]            ;190
000192  ec510b10          VMOV     r0,r1,d0              ;190
000196  f7fffffe          BL       __aeabi_dadd
00019a  ec410b10          VMOV     d0,r0,r1              ;190
00019e  ed860b00          VSTR     d0,[r6,#0]            ;190
0001a2  f85a0024          LDR      r0,[r10,r4,LSL #2]    ;192
0001a6  1c40              ADDS     r0,r0,#1              ;192
0001a8  f84a0024          STR      r0,[r10,r4,LSL #2]    ;192
0001ac  f04f30ff          MOV      r0,#0xffffffff        ;194
0001b0  f8490024          STR      r0,[r9,r4,LSL #2]     ;194
0001b4  e795              B        |L4.226|
                  |L4.438|
0001b6  2100              MOVS     r1,#0                 ;200
0001b8  a2a9              ADR      r2,|L4.1120|
0001ba  4608              MOV      r0,r1                 ;200
0001bc  f7fffffe          BL       explicitPrintf
0001c0  48a2              LDR      r0,|L4.1100|
0001c2  2100              MOVS     r1,#0                 ;201
0001c4  f8502024          LDR      r2,[r0,r4,LSL #2]     ;201
0001c8  4608              MOV      r0,r1                 ;201
0001ca  f7fffffe          BL       explicitPrintf
0001ce  b127              CBZ      r7,|L4.474|
0001d0  2f01              CMP      r7,#1                 ;205
0001d2  f00080fc          BEQ.W    |L4.974|
0001d6  f000b980          B.W      |L4.1242|
                  |L4.474|
0001da  eb0b05c4          ADD      r5,r11,r4,LSL #3      ;203
0001de  ec532b19          VMOV     r2,r3,d9              ;203
0001e2  ed950b00          VLDR     d0,[r5,#0]            ;203
0001e6  ec510b10          VMOV     r0,r1,d0              ;203
0001ea  f7fffffe          BL       __aeabi_dmul
0001ee  ec532b1a          VMOV     r2,r3,d10             ;203
0001f2  f7fffffe          BL       __aeabi_cdrcmple
0001f6  ed950b00          VLDR     d0,[r5,#0]            ;203
0001fa  eeb01a49          VMOV.F32 s2,s18                ;203
0001fe  eef01a69          VMOV.F32 s3,s19                ;203
000202  ec532b11          VMOV     r2,r3,d1              ;203
000206  ec510b10          VMOV     r0,r1,d0              ;203
00020a  d20a              BCS      |L4.546|
00020c  f7fffffe          BL       __aeabi_dmul
000210  ec532b18          VMOV     r2,r3,d8              ;203
000214  f7fffffe          BL       __aeabi_dadd
000218  ec410b10          VMOV     d0,r0,r1              ;203
00021c  f7fffffe          BL       __hardfp_floor
000220  e009              B        |L4.566|
                  |L4.546|
000222  f7fffffe          BL       __aeabi_dmul
000226  ec532b18          VMOV     r2,r3,d8              ;203
00022a  f7fffffe          BL       __aeabi_dsub
00022e  ec410b10          VMOV     d0,r0,r1              ;203
000232  f7fffffe          BL       __hardfp_ceil
                  |L4.566|
000236  ec510b10          VMOV     r0,r1,d0              ;203
00023a  f7fffffe          BL       __aeabi_d2iz
00023e  4680              MOV      r8,r0                 ;203
000240  487d              LDR      r0,|L4.1080|
000242  eeb0ba49          VMOV.F32 s22,s18               ;203
000246  eb0006c4          ADD      r6,r0,r4,LSL #3       ;203
00024a  eef0ba69          VMOV.F32 s23,s19               ;203
00024e  ed960b00          VLDR     d0,[r6,#0]            ;203
000252  ec532b1b          VMOV     r2,r3,d11             ;203
000256  ec510b10          VMOV     r0,r1,d0              ;203
00025a  f7fffffe          BL       __aeabi_dmul
00025e  eeb0ca4a          VMOV.F32 s24,s20               ;203
000262  eef0ca6a          VMOV.F32 s25,s21               ;203
000266  ec532b1c          VMOV     r2,r3,d12             ;203
00026a  f7fffffe          BL       __aeabi_cdrcmple
00026e  ed960b00          VLDR     d0,[r6,#0]            ;203
000272  ec532b1b          VMOV     r2,r3,d11             ;203
000276  ec510b10          VMOV     r0,r1,d0              ;203
00027a  d20a              BCS      |L4.658|
00027c  f7fffffe          BL       __aeabi_dmul
000280  ec532b18          VMOV     r2,r3,d8              ;203
000284  f7fffffe          BL       __aeabi_dadd
000288  ec410b10          VMOV     d0,r0,r1              ;203
00028c  f7fffffe          BL       __hardfp_floor
000290  e009              B        |L4.678|
                  |L4.658|
000292  f7fffffe          BL       __aeabi_dmul
000296  ec532b18          VMOV     r2,r3,d8              ;203
00029a  f7fffffe          BL       __aeabi_dsub
00029e  ec410b10          VMOV     d0,r0,r1              ;203
0002a2  f7fffffe          BL       __hardfp_ceil
                  |L4.678|
0002a6  ec510b10          VMOV     r0,r1,d0              ;203
0002aa  f7fffffe          BL       __aeabi_d2iz
0002ae  4681              MOV      r9,r0                 ;203
0002b0  4860              LDR      r0,|L4.1076|
0002b2  ec532b1b          VMOV     r2,r3,d11             ;203
0002b6  eb0006c4          ADD      r6,r0,r4,LSL #3       ;203
0002ba  ed960b00          VLDR     d0,[r6,#0]            ;203
0002be  ec510b10          VMOV     r0,r1,d0              ;203
0002c2  f7fffffe          BL       __aeabi_dmul
0002c6  eeb0da4c          VMOV.F32 s26,s24               ;203
0002ca  eef0da6c          VMOV.F32 s27,s25               ;203
0002ce  ec532b1d          VMOV     r2,r3,d13             ;203
0002d2  f7fffffe          BL       __aeabi_cdrcmple
0002d6  ed960b00          VLDR     d0,[r6,#0]            ;203
0002da  ec532b1b          VMOV     r2,r3,d11             ;203
0002de  ec510b10          VMOV     r0,r1,d0              ;203
0002e2  d20a              BCS      |L4.762|
0002e4  f7fffffe          BL       __aeabi_dmul
0002e8  ec532b18          VMOV     r2,r3,d8              ;203
0002ec  f7fffffe          BL       __aeabi_dadd
0002f0  ec410b10          VMOV     d0,r0,r1              ;203
0002f4  f7fffffe          BL       __hardfp_floor
0002f8  e009              B        |L4.782|
                  |L4.762|
0002fa  f7fffffe          BL       __aeabi_dmul
0002fe  ec532b18          VMOV     r2,r3,d8              ;203
000302  f7fffffe          BL       __aeabi_dsub
000306  ec410b10          VMOV     d0,r0,r1              ;203
00030a  f7fffffe          BL       __hardfp_ceil
                  |L4.782|
00030e  ec510b10          VMOV     r0,r1,d0              ;203
000312  f7fffffe          BL       __aeabi_d2iz
000316  4606              MOV      r6,r0                 ;203
000318  f85a0024          LDR      r0,[r10,r4,LSL #2]    ;203
00031c  f7fffffe          BL       __aeabi_ui2d
000320  ed950b00          VLDR     d0,[r5,#0]            ;203
000324  ec410b1c          VMOV     d12,r0,r1             ;203
000328  ec532b1b          VMOV     r2,r3,d11             ;203
00032c  ec510b10          VMOV     r0,r1,d0              ;203
000330  f7fffffe          BL       __aeabi_dmul
000334  ec532b1c          VMOV     r2,r3,d12             ;203
000338  f7fffffe          BL       __aeabi_ddiv
00033c  ec532b1d          VMOV     r2,r3,d13             ;203
000340  f7fffffe          BL       __aeabi_cdrcmple
000344  f85a0024          LDR      r0,[r10,r4,LSL #2]    ;203
000348  d218              BCS      |L4.892|
00034a  f7fffffe          BL       __aeabi_ui2d
00034e  ed950b00          VLDR     d0,[r5,#0]            ;203
000352  ec410b1c          VMOV     d12,r0,r1             ;203
000356  ec532b1b          VMOV     r2,r3,d11             ;203
00035a  ec510b10          VMOV     r0,r1,d0              ;203
00035e  f7fffffe          BL       __aeabi_dmul
000362  ec532b1c          VMOV     r2,r3,d12             ;203
000366  f7fffffe          BL       __aeabi_ddiv
00036a  ec532b18          VMOV     r2,r3,d8              ;203
00036e  f7fffffe          BL       __aeabi_dadd
000372  ec410b10          VMOV     d0,r0,r1              ;203
000376  f7fffffe          BL       __hardfp_floor
00037a  e017              B        |L4.940|
                  |L4.892|
00037c  f7fffffe          BL       __aeabi_ui2d
000380  ed950b00          VLDR     d0,[r5,#0]            ;203
000384  ec410b1c          VMOV     d12,r0,r1             ;203
000388  ec532b1b          VMOV     r2,r3,d11             ;203
00038c  ec510b10          VMOV     r0,r1,d0              ;203
000390  f7fffffe          BL       __aeabi_dmul
000394  ec532b1c          VMOV     r2,r3,d12             ;203
000398  f7fffffe          BL       __aeabi_ddiv
00039c  ec532b18          VMOV     r2,r3,d8              ;203
0003a0  f7fffffe          BL       __aeabi_dsub
0003a4  ec410b10          VMOV     d0,r0,r1              ;203
0003a8  f7fffffe          BL       __hardfp_ceil
                  |L4.940|
0003ac  ec510b10          VMOV     r0,r1,d0              ;203
0003b0  f7fffffe          BL       __aeabi_d2iz
0003b4  f85a1024          LDR      r1,[r10,r4,LSL #2]    ;203
0003b8  e9cd6900          STRD     r6,r9,[sp,#0]         ;203
0003bc  e9cd8102          STRD     r8,r1,[sp,#8]         ;203
0003c0  4603              MOV      r3,r0                 ;203
0003c2  2100              MOVS     r1,#0                 ;203
0003c4  a228              ADR      r2,|L4.1128|
0003c6  4608              MOV      r0,r1                 ;203
0003c8  f7fffffe          BL       explicitPrintf
0003cc  e085              B        |L4.1242|
                  |L4.974|
0003ce  eb0b05c4          ADD      r5,r11,r4,LSL #3      ;206
0003d2  ec532b19          VMOV     r2,r3,d9              ;206
0003d6  ed950b00          VLDR     d0,[r5,#0]            ;206
0003da  ec510b10          VMOV     r0,r1,d0              ;206
0003de  f7fffffe          BL       __aeabi_dmul
0003e2  ec532b1a          VMOV     r2,r3,d10             ;206
0003e6  f7fffffe          BL       __aeabi_cdrcmple
0003ea  ed950b00          VLDR     d0,[r5,#0]            ;206
0003ee  eeb01a49          VMOV.F32 s2,s18                ;206
0003f2  eef01a69          VMOV.F32 s3,s19                ;206
0003f6  ec532b11          VMOV     r2,r3,d1              ;206
0003fa  ec510b10          VMOV     r0,r1,d0              ;206
0003fe  d258              BCS      |L4.1202|
000400  f7fffffe          BL       __aeabi_dmul
000404  e04c              B        |L4.1184|
000406  0000              DCW      0x0000
                  |L4.1032|
                          DCD      ||.data||
                          DCD      0x00000000
                  |L4.1040|
000410  00000000          DCFD     0x43e0000000000000 ; 9223372036854775800
000414  43e00000
                  |L4.1048|
000418  00000000          DCFD     0xc3e0000000000000 ; -9223372036854775800
00041c  c3e00000
                  |L4.1056|
                          DCD      OFFCHIP+0x37fcc
                          DCD      0x00000000
                  |L4.1064|
000428  00000000          DCFD     0x0000000000000000 ; 0
00042c  00000000
                  |L4.1072|
                          DCD      OFFCHIP+0x1bfe8
                  |L4.1076|
                          DCD      OFFCHIP+0x23fe0
                  |L4.1080|
                          DCD      OFFCHIP+0x2bfd8
                          DCD      0x00000000
                  |L4.1088|
000440  00000000          DCFD     0x412e848000000000 ; 1000000
000444  412e8480
                  |L4.1096|
                          DCD      OFFCHIP
                  |L4.1100|
                          DCD      OFFCHIP+0x17fe8
                  |L4.1104|
                          DCD      ||.constdata||
                          DCD      0x00000000
                  |L4.1112|
000458  00000000          DCFD     0x3fe0000000000000 ; 0.5
00045c  3fe00000
                  |L4.1120|
000460  4576656e          DCB      "Event ",0
000464  742000  
000467  00                DCB      0
                  |L4.1128|
000468  3a204d65          DCB      ": Mean:%dus Min:%dus Max:%dus Total:%dus NumEvents:%d\n"
00046c  616e3a25
000470  64757320
000474  4d696e3a
000478  25647573
00047c  204d6178
000480  3a256475
000484  7320546f
000488  74616c3a
00048c  25647573
000490  204e756d
000494  4576656e
000498  74733a25
00049c  640a    
00049e  00                DCB      0
00049f  00                DCB      0
                  |L4.1184|
0004a0  ec532b18          VMOV     r2,r3,d8              ;206
0004a4  f7fffffe          BL       __aeabi_dadd
0004a8  ec410b10          VMOV     d0,r0,r1              ;206
0004ac  f7fffffe          BL       __hardfp_floor
0004b0  e009              B        |L4.1222|
                  |L4.1202|
0004b2  f7fffffe          BL       __aeabi_dmul
0004b6  ec532b18          VMOV     r2,r3,d8              ;206
0004ba  f7fffffe          BL       __aeabi_dsub
0004be  ec410b10          VMOV     d0,r0,r1              ;206
0004c2  f7fffffe          BL       __hardfp_ceil
                  |L4.1222|
0004c6  ec510b10          VMOV     r0,r1,d0              ;206
0004ca  f7fffffe          BL       __aeabi_d2iz
0004ce  4603              MOV      r3,r0                 ;206
0004d0  2100              MOVS     r1,#0                 ;206
0004d2  a205              ADR      r2,|L4.1256|
0004d4  4608              MOV      r0,r1                 ;206
0004d6  f7fffffe          BL       explicitPrintf
                  |L4.1242|
0004da  4807              LDR      r0,|L4.1272|
0004dc  1c64              ADDS     r4,r4,#1              ;199
0004de  6840              LDR      r0,[r0,#4]            ;199  ; numEventNames
0004e0  4284              CMP      r4,r0                 ;199
0004e2  f6ffae68          BLT      |L4.438|
0004e6  e609              B        |L4.252|
                          ENDP

                  |L4.1256|
0004e8  3a20546f          DCB      ": Total:%dus\n",0
0004ec  74616c3a
0004f0  25647573
0004f4  0a00    
0004f6  00                DCB      0
0004f7  00                DCB      0
                  |L4.1272|
                          DCD      ||.data||

                          AREA ||i.PrintBenchmarkResults_All||, CODE, READONLY, ALIGN=1

                  PrintBenchmarkResults_All PROC
;;;131    
;;;132    void PrintBenchmarkResults_All(void)
000000  2000              MOVS     r0,#0
;;;133    {
;;;134      PrintBenchmarkResults(BENCHMARK_PRINT_ALL);
000002  f7ffbffe          B.W      PrintBenchmarkResults
;;;135    }
;;;136    
                          ENDP


                          AREA ||i.PrintBenchmarkResults_OnlyTotals||, CODE, READONLY, ALIGN=1

                  PrintBenchmarkResults_OnlyTotals PROC
;;;136    
;;;137    void PrintBenchmarkResults_OnlyTotals(void)
000000  2001              MOVS     r0,#1
;;;138    {
;;;139      PrintBenchmarkResults(BENCHMARK_PRINT_TOTALS);
000002  f7ffbffe          B.W      PrintBenchmarkResults
;;;140    }
;;;141    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  42656e63          DCB      0x42,0x65,0x6e,0x63
000004  686d6172          DCB      0x68,0x6d,0x61,0x72
000008  6b207061          DCB      0x6b,0x20,0x70,0x61
00000c  72736520          DCB      0x72,0x73,0x65,0x20
000010  6572726f          DCB      0x65,0x72,0x72,0x6f
000014  723a2050          DCB      0x72,0x3a,0x20,0x50
000018  65726861          DCB      0x65,0x72,0x68,0x61
00001c  70732042          DCB      0x70,0x73,0x20,0x42
000020  6567696e          DCB      0x65,0x67,0x69,0x6e
000024  42656e63          DCB      0x42,0x65,0x6e,0x63
000028  686d6172          DCB      0x68,0x6d,0x61,0x72
00002c  6b282920          DCB      0x6b,0x28,0x29,0x20
000030  616e6420          DCB      0x61,0x6e,0x64,0x20
000034  456e6442          DCB      0x45,0x6e,0x64,0x42
000038  656e6368          DCB      0x65,0x6e,0x63,0x68
00003c  6d61726b          DCB      0x6d,0x61,0x72,0x6b
000040  28292077          DCB      0x28,0x29,0x20,0x77
000044  65726520          DCB      0x65,0x72,0x65,0x20
000048  6e657374          DCB      0x6e,0x65,0x73,0x74
00004c  65642c20          DCB      0x65,0x64,0x2c,0x20
000050  6f722074          DCB      0x6f,0x72,0x20,0x74
000054  68657265          DCB      0x68,0x65,0x72,0x65
000058  20776572          DCB      0x20,0x77,0x65,0x72
00005c  65206d6f          DCB      0x65,0x20,0x6d,0x6f
000060  72652074          DCB      0x72,0x65,0x20,0x74
000064  68616e20          DCB      0x68,0x61,0x6e,0x20
000068  25642062          DCB      0x25,0x64,0x20,0x62
00006c  656e6368          DCB      0x65,0x6e,0x63,0x68
000070  6d61726b          DCB      0x6d,0x61,0x72,0x6b
000074  20657665          DCB      0x20,0x65,0x76,0x65
000078  6e74732e          DCB      0x6e,0x74,0x73,0x2e
00007c  0a00              DCB      0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  numBenchmarkEvents
                          DCD      0x00000000
                  numEventNames
                          DCD      0x00000000

                          AREA OFFCHIP, DATA, ALIGN=3

                  benchmarkEvents
                          %        98280
                  eventNames
                          %        16380
                          DCD      0x00000000
                  totalTimes
                          %        32760
                  minTimes
                          %        32760
                  maxTimes
                          %        32760
                  numEvents
                          %        16380
                  lastBeginIndex
                          %        16380
