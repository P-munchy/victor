; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\cameraimagingpipeline.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\cameraimagingpipeline.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\cameraimagingpipeline.crf ..\coretech\vision\robot\src\cameraImagingPipeline.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded17CorrectVignettingERNS0_5ArrayIhEERKNS0_15FixedLengthListIfEE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded17CorrectVignettingERNS0_5ArrayIhEERKNS0_15FixedLengthListIfEE PROC ; Anki::Embedded::CorrectVignetting(Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::FixedLengthList<float>&)
;;;82     
;;;83         Result CorrectVignetting(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;84           Array<u8> &image,
;;;85           const FixedLengthList<f32> &polynomialParameters)
;;;86         {
000004  4607              MOV      r7,r0
000006  ed2d8b08          VPUSH    {d8-d11}
00000a  b083              SUB      sp,sp,#0xc
00000c  460d              MOV      r5,r1
00000e  6800              LDR      r0,[r0,#0]
000010  9000              STR      r0,[sp,#0]
000012  687c              LDR      r4,[r7,#4]
;;;87           // Matlab equivalent: x = repmat(1:2:16,[2,1]); x = x(:)'; y = 1; min(255,floor(128*(1 + .01*x + .03*y + .01*x.^2 - .01*y.^2)))
;;;88     
;;;89           const s32 imageHeight = image.get_size(0);
;;;90           const s32 imageWidth = image.get_size(1);
;;;91     
;;;92           AnkiConditionalErrorAndReturnValue(IsOdd(polynomialParameters.get_size()) && polynomialParameters.get_size() == 5,
000014  68c8              LDR      r0,[r1,#0xc]
000016  f7fffffe          BL       IsOdd
00001a  0001              MOVS     r1,r0
00001c  487e              LDR      r0,|L1.536|
00001e  d002              BEQ      |L1.38|
000020  68e9              LDR      r1,[r5,#0xc]
000022  2905              CMP      r1,#5
000024  d00f              BEQ      |L1.70|
                  |L1.38|
000026  215c              MOVS     r1,#0x5c
000028  e9cd0100          STRD     r0,r1,[sp,#0]
00002c  a37b              ADR      r3,|L1.540|
00002e  4a89              LDR      r2,|L1.596|
000030  a189              ADR      r1,|L1.600|
000032  2005              MOVS     r0,#5
000034  f7fffffe          BL       _Anki_Log
000038  f04f7040          MOV      r0,#0x3000000
                  |L1.60|
;;;93             RESULT_FAIL_INVALID_PARAMETER, "CorrectVignetting", "only 5 polynomialParameters currently supported (2nd order polynomial)");
;;;94     
;;;95           AnkiConditionalErrorAndReturnValue((imageWidth%4 == 0) && imageWidth >= 4 && (imageHeight%4 == 0) && imageHeight >= 4,
;;;96             RESULT_FAIL_INVALID_SIZE, "CorrectVignetting", "Image width and height must be divisible by 4");
;;;97     
;;;98           //const s32 polynomialDegree = (polynomialParameters.get_size() - 1) / 2;
;;;99     
;;;100          const s32 imageWidth4 = imageWidth / 4;
;;;101    
;;;102          const f32 model0 = polynomialParameters[0];
;;;103          const f32 model1 = polynomialParameters[1];
;;;104          const f32 model2 = polynomialParameters[2];
;;;105          const f32 model3 = polynomialParameters[3];
;;;106          const f32 model4 = polynomialParameters[4];
;;;107    
;;;108          // Computes one scale for every 2x2 block of pixels
;;;109    
;;;110          f32 yF32 = 1.0f;
;;;111          for(s32 y=0; y<imageHeight; y+=2) {
;;;112            u32 * restrict pImage_y0 = reinterpret_cast<u32*>(image.Pointer(y,0));
;;;113            u32 * restrict pImage_y1 = reinterpret_cast<u32*>(image.Pointer(y+1,0));
;;;114    
;;;115            const f32 yScaleComponent = model0 + model2 * yF32 + model4 * yF32 * yF32;
;;;116    
;;;117            // Unrolled to compute two 2x2 blocks at a time
;;;118            f32 xF32 = 1.0f;
;;;119            for(s32 x=0; x<imageWidth4; x++) {
;;;120              const u32 curPixels_y0 = pImage_y0[x];
;;;121              const u32 curPixels_y1 = pImage_y1[x];
;;;122    
;;;123              const f32 curPixel_y0_x0 = static_cast<f32>( curPixels_y0 & 0xFF);
;;;124              const f32 curPixel_y0_x1 = static_cast<f32>((curPixels_y0 & 0xFF00) >> 8);
;;;125              const f32 curPixel_y0_x2 = static_cast<f32>((curPixels_y0 & 0xFF0000) >> 16);
;;;126              const f32 curPixel_y0_x3 = static_cast<f32>((curPixels_y0 & 0xFF000000) >> 24);
;;;127    
;;;128              const f32 curPixel_y1_x0 = static_cast<f32>( curPixels_y1 & 0xFF);
;;;129              const f32 curPixel_y1_x1 = static_cast<f32>((curPixels_y1 & 0xFF00) >> 8);
;;;130              const f32 curPixel_y1_x2 = static_cast<f32>((curPixels_y1 & 0xFF0000) >> 16);
;;;131              const f32 curPixel_y1_x3 = static_cast<f32>((curPixels_y1 & 0xFF000000) >> 24);
;;;132    
;;;133              const f32 xF32_left  = xF32;
;;;134              const f32 xF32_right = xF32 + 2.0f;
;;;135    
;;;136              const f32 scale_left  = yScaleComponent + model1 * xF32_left + model3 * xF32_left * xF32_left;
;;;137              const f32 scale_right = yScaleComponent + model1 * xF32_right + model3 * xF32_right * xF32_right;
;;;138    
;;;139              const f32 curScaledPixelF32_y0_x0 = scale_left * curPixel_y0_x0;
;;;140              const f32 curScaledPixelF32_y0_x1 = scale_left * curPixel_y0_x1;
;;;141    
;;;142              const f32 curScaledPixelF32_y1_x0 = scale_left * curPixel_y1_x0;
;;;143              const f32 curScaledPixelF32_y1_x1 = scale_left * curPixel_y1_x1;
;;;144    
;;;145              const f32 curScaledPixelF32_y0_x2 = scale_right * curPixel_y0_x2;
;;;146              const f32 curScaledPixelF32_y0_x3 = scale_right * curPixel_y0_x3;
;;;147    
;;;148              const f32 curScaledPixelF32_y1_x2 = scale_right * curPixel_y1_x2;
;;;149              const f32 curScaledPixelF32_y1_x3 = scale_right * curPixel_y1_x3;
;;;150    
;;;151              const u32 curScaledPixelU32_y0_x0 = static_cast<u32>(curScaledPixelF32_y0_x0);
;;;152              const u32 curScaledPixelU32_y0_x1 = static_cast<u32>(curScaledPixelF32_y0_x1);
;;;153              const u32 curScaledPixelU32_y0_x2 = static_cast<u32>(curScaledPixelF32_y0_x2);
;;;154              const u32 curScaledPixelU32_y0_x3 = static_cast<u32>(curScaledPixelF32_y0_x3);
;;;155    
;;;156              const u32 curScaledPixelU32_y1_x0 = static_cast<u32>(curScaledPixelF32_y1_x0);
;;;157              const u32 curScaledPixelU32_y1_x1 = static_cast<u32>(curScaledPixelF32_y1_x1);
;;;158              const u32 curScaledPixelU32_y1_x2 = static_cast<u32>(curScaledPixelF32_y1_x2);
;;;159              const u32 curScaledPixelU32_y1_x3 = static_cast<u32>(curScaledPixelF32_y1_x3);
;;;160    
;;;161    #if !defined(USE_ARM_ACCELERATION) // natural C
;;;162              const u8 outPixel_y0_x0 = static_cast<u8>(MIN(255, curScaledPixelU32_y0_x0));
;;;163              const u8 outPixel_y0_x1 = static_cast<u8>(MIN(255, curScaledPixelU32_y0_x1));
;;;164              const u8 outPixel_y0_x2 = static_cast<u8>(MIN(255, curScaledPixelU32_y0_x2));
;;;165              const u8 outPixel_y0_x3 = static_cast<u8>(MIN(255, curScaledPixelU32_y0_x3));
;;;166    
;;;167              const u8 outPixel_y1_x0 = static_cast<u8>(MIN(255, curScaledPixelU32_y1_x0));
;;;168              const u8 outPixel_y1_x1 = static_cast<u8>(MIN(255, curScaledPixelU32_y1_x1));
;;;169              const u8 outPixel_y1_x2 = static_cast<u8>(MIN(255, curScaledPixelU32_y1_x2));
;;;170              const u8 outPixel_y1_x3 = static_cast<u8>(MIN(255, curScaledPixelU32_y1_x3));
;;;171    #else // ARM optimized
;;;172              const u8 outPixel_y0_x0 = __USAT(curScaledPixelU32_y0_x0, 8);
;;;173              const u8 outPixel_y0_x1 = __USAT(curScaledPixelU32_y0_x1, 8);
;;;174              const u8 outPixel_y0_x2 = __USAT(curScaledPixelU32_y0_x2, 8);
;;;175              const u8 outPixel_y0_x3 = __USAT(curScaledPixelU32_y0_x3, 8);
;;;176    
;;;177              const u8 outPixel_y1_x0 = __USAT(curScaledPixelU32_y1_x0, 8);
;;;178              const u8 outPixel_y1_x1 = __USAT(curScaledPixelU32_y1_x1, 8);
;;;179              const u8 outPixel_y1_x2 = __USAT(curScaledPixelU32_y1_x2, 8);
;;;180              const u8 outPixel_y1_x3 = __USAT(curScaledPixelU32_y1_x3, 8);
;;;181    #endif // #if !defined(USE_ARM_ACCELERATION) ... #else
;;;182    
;;;183              const u32 outPixel_y0 = outPixel_y0_x0 | (outPixel_y0_x1<<8) | (outPixel_y0_x2<<16) | (outPixel_y0_x3<<24);
;;;184              const u32 outPixel_y1 = outPixel_y1_x0 | (outPixel_y1_x1<<8) | (outPixel_y1_x2<<16) | (outPixel_y1_x3<<24);
;;;185    
;;;186              pImage_y0[x] = outPixel_y0;
;;;187              pImage_y1[x] = outPixel_y1;
;;;188    
;;;189              xF32 += 4.0f;
;;;190            }
;;;191    
;;;192            yF32 += 2.0f;
;;;193          }
;;;194    
;;;195          return RESULT_OK;
;;;196        } // CorrectVignetting()
00003c  b003              ADD      sp,sp,#0xc
00003e  ecbd8b08          VPOP     {d8-d11}
000042  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.70|
000046  f0140f03          TST      r4,#3                 ;95
00004a  d108              BNE      |L1.94|
00004c  2c04              CMP      r4,#4                 ;95
00004e  db06              BLT      |L1.94|
000050  9900              LDR      r1,[sp,#0]            ;95
000052  f0110f03          TST      r1,#3                 ;95
000056  d102              BNE      |L1.94|
000058  9900              LDR      r1,[sp,#0]            ;95
00005a  2904              CMP      r1,#4                 ;95
00005c  da0b              BGE      |L1.118|
                  |L1.94|
00005e  215f              MOVS     r1,#0x5f              ;95
000060  e9cd0100          STRD     r0,r1,[sp,#0]         ;95
000064  a36d              ADR      r3,|L1.540|
000066  a281              ADR      r2,|L1.620|
000068  a17b              ADR      r1,|L1.600|
00006a  2005              MOVS     r0,#5                 ;95
00006c  f7fffffe          BL       _Anki_Log
000070  f04f60a0          MOV      r0,#0x5000000         ;95
000074  e7e2              B        |L1.60|
                  |L1.118|
000076  17e0              ASRS     r0,r4,#31             ;100
000078  eb047090          ADD      r0,r4,r0,LSR #30      ;100
00007c  ea4f0ba0          ASR      r11,r0,#2             ;100
000080  6b28              LDR      r0,[r5,#0x30]         ;102
000082  eeb72a00          VMOV.F32 s4,#1.00000000        ;110
000086  2200              MOVS     r2,#0                 ;111
000088  ed909a00          VLDR     s18,[r0,#0]           ;102
00008c  edd03a01          VLDR     s7,[r0,#4]            ;103
000090  ed90aa02          VLDR     s20,[r0,#8]           ;104
000094  ed903a03          VLDR     s6,[r0,#0xc]          ;105
000098  edd09a04          VLDR     s19,[r0,#0x10]        ;106
00009c  eef0aa42          VMOV.F32 s21,s4                ;110
0000a0  eef18a00          VMOV.F32 s17,#4.00000000       ;189
0000a4  eeb08a00          VMOV.F32 s16,#2.00000000       ;134
                  |L1.168|
0000a8  eef02a49          VMOV.F32 s5,s18                ;115
0000ac  ee290a82          VMUL.F32 s0,s19,s4             ;115
0000b0  ee4a2a02          VMLA.F32 s5,s20,s4             ;115
0000b4  68b9              LDR      r1,[r7,#8]            ;115
0000b6  6938              LDR      r0,[r7,#0x10]         ;115
0000b8  1c53              ADDS     r3,r2,#1              ;113
0000ba  fb020c01          MLA      r12,r2,r1,r0          ;113
0000be  ee402a02          VMLA.F32 s5,s0,s4              ;115
0000c2  fb030301          MLA      r3,r3,r1,r0           ;115
0000c6  2100              MOVS     r1,#0                 ;119
0000c8  eeb01a6a          VMOV.F32 s2,s21                ;118
0000cc  f1bb0f00          CMP      r11,#0                ;119
0000d0  dd7e              BLE      |L1.464|
                  |L1.210|
0000d2  f85c4021          LDR      r4,[r12,r1,LSL #2]    ;120
0000d6  f8530021          LDR      r0,[r3,r1,LSL #2]     ;121
0000da  b2e5              UXTB     r5,r4                 ;123
0000dc  ee005a10          VMOV     s0,r5                 ;123
0000e0  f3c42507          UBFX     r5,r4,#8,#8           ;124
0000e4  eef00a62          VMOV.F32 s1,s5                 ;136
0000e8  eef87a40          VCVT.F32.U32 s15,s0                ;123
0000ec  ee005a10          VMOV     s0,r5                 ;124
0000f0  f3c44507          UBFX     r5,r4,#16,#8          ;125
0000f4  0e24              LSRS     r4,r4,#24             ;126
0000f6  eeb87a40          VCVT.F32.U32 s14,s0                ;124
0000fa  ee005a10          VMOV     s0,r5                 ;125
0000fe  ee430a81          VMLA.F32 s1,s7,s2              ;136
000102  ee711a08          VADD.F32 s3,s2,s16             ;134
000106  eef85a40          VCVT.F32.U32 s11,s0                ;125
00010a  ee004a10          VMOV     s0,r4                 ;126
00010e  b2c4              UXTB     r4,r0                 ;128
000110  ee23ba21          VMUL.F32 s22,s6,s3             ;137
000114  eef86a40          VCVT.F32.U32 s13,s0                ;126
000118  ee004a10          VMOV     s0,r4                 ;128
00011c  f3c02407          UBFX     r4,r0,#8,#8           ;129
000120  eeb86a40          VCVT.F32.U32 s12,s0                ;128
000124  ee004a10          VMOV     s0,r4                 ;129
000128  f3c04407          UBFX     r4,r0,#16,#8          ;130
00012c  0e00              LSRS     r0,r0,#24             ;131
00012e  eeb85a40          VCVT.F32.U32 s10,s0                ;129
000132  ee004a10          VMOV     s0,r4                 ;130
000136  eef84a40          VCVT.F32.U32 s9,s0                 ;130
00013a  ee000a10          VMOV     s0,r0                 ;131
00013e  eeb84a40          VCVT.F32.U32 s8,s0                 ;131
000142  ee230a01          VMUL.F32 s0,s6,s2              ;136
000146  ee400a01          VMLA.F32 s1,s0,s2              ;136
00014a  eeb00a62          VMOV.F32 s0,s5                 ;137
00014e  ee030aa1          VMLA.F32 s0,s7,s3              ;137
000152  ee207a87          VMUL.F32 s14,s1,s14            ;140
000156  ee206a86          VMUL.F32 s12,s1,s12            ;142
00015a  ee0b0a21          VMLA.F32 s0,s22,s3             ;137
00015e  ee601aa7          VMUL.F32 s3,s1,s15             ;139
000162  ee600a85          VMUL.F32 s1,s1,s10             ;143
000166  eefc1ae1          VCVT.U32.F32 s3,s3                 ;151
00016a  ee205a25          VMUL.F32 s10,s0,s11            ;145
00016e  ee605a26          VMUL.F32 s11,s0,s13            ;146
000172  ee11ea90          VMOV     lr,s3                 ;151
000176  eefc1ac7          VCVT.U32.F32 s3,s14                ;152
00017a  ee604a24          VMUL.F32 s9,s0,s9              ;148
00017e  ee200a04          VMUL.F32 s0,s0,s8              ;149
000182  ee11aa90          VMOV     r10,s3                ;152
000186  eefc1ac5          VCVT.U32.F32 s3,s10                ;153
00018a  eefc0ae0          VCVT.U32.F32 s1,s1                 ;157
00018e  eebc0ac0          VCVT.U32.F32 s0,s0                 ;159
000192  ee119a90          VMOV     r9,s3                 ;153
000196  eefc1ae5          VCVT.U32.F32 s3,s11                ;154
00019a  ee106a90          VMOV     r6,s1                 ;157
00019e  eefc0ae4          VCVT.U32.F32 s1,s9                 ;158
0001a2  ee118a90          VMOV     r8,s3                 ;154
0001a6  eefc1ac6          VCVT.U32.F32 s3,s12                ;156
0001aa  ee105a90          VMOV     r5,s1                 ;158
0001ae  ee104a10          VMOV     r4,s0                 ;159
0001b2  ee110a90          VMOV     r0,s3                 ;156
0001b6  f38e0e08          USAT     lr,#8,lr              ;172
0001ba  f38a0a08          USAT     r10,#8,r10            ;173
0001be  f3890908          USAT     r9,#8,r9              ;174
0001c2  f3880808          USAT     r8,#8,r8              ;175
0001c6  f3800008          USAT     r0,#8,r0              ;177
0001ca  f3860608          USAT     r6,#8,r6              ;178
0001ce  e000              B        |L1.466|
                  |L1.464|
0001d0  e019              B        |L1.518|
                  |L1.466|
0001d2  ea4e2a0a          ORR      r10,lr,r10,LSL #8     ;183
0001d6  f3850508          USAT     r5,#8,r5              ;179
0001da  ea4a4909          ORR      r9,r10,r9,LSL #16     ;183
0001de  ea402006          ORR      r0,r0,r6,LSL #8       ;184
0001e2  f3840408          USAT     r4,#8,r4              ;180
0001e6  ea496808          ORR      r8,r9,r8,LSL #24      ;183
0001ea  ea404005          ORR      r0,r0,r5,LSL #16      ;184
0001ee  ea406004          ORR      r0,r0,r4,LSL #24      ;184
0001f2  f84c8021          STR      r8,[r12,r1,LSL #2]    ;186
0001f6  f8430021          STR      r0,[r3,r1,LSL #2]     ;187
0001fa  ee311a28          VADD.F32 s2,s2,s17             ;189
0001fe  1c49              ADDS     r1,r1,#1              ;119
000200  458b              CMP      r11,r1                ;119
000202  f73faf66          BGT      |L1.210|
                  |L1.518|
000206  ee322a08          VADD.F32 s4,s4,s16             ;192
00020a  9800              LDR      r0,[sp,#0]            ;111
00020c  1c92              ADDS     r2,r2,#2              ;111
00020e  4282              CMP      r2,r0                 ;111
000210  f6ffaf4a          BLT      |L1.168|
000214  2000              MOVS     r0,#0                 ;195
000216  e711              B        |L1.60|
;;;197      } // namespace Embedded
                          ENDP

                  |L1.536|
                          DCD      ||.constdata||+0xf3
                  |L1.540|
00021c  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\cameraImagingPipeline"
000220  6f726574
000224  6563685c
000228  76697369
00022c  6f6e5c72
000230  6f626f74
000234  5c737263
000238  5c63616d
00023c  65726149
000240  6d616769
000244  6e675069
000248  70656c69
00024c  6e65    
00024e  2e637070          DCB      ".cpp",0
000252  00      
000253  00                DCB      0
                  |L1.596|
                          DCD      ||.constdata||+0x1e0
                  |L1.600|
000258  436f7272          DCB      "CorrectVignetting",0
00025c  65637456
000260  69676e65
000264  7474696e
000268  6700    
00026a  00                DCB      0
00026b  00                DCB      0
                  |L1.620|
00026c  496d6167          DCB      "Image width and height must be divisible by 4",0
000270  65207769
000274  64746820
000278  616e6420
00027c  68656967
000280  6874206d
000284  75737420
000288  62652064
00028c  69766973
000290  69626c65
000294  20627920
000298  3400    
00029a  00                DCB      0
00029b  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded27ComputeBestCameraParametersERKNS0_5ArrayIhEERKNS0_9RectangleIiEEihffffRfNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ComputeBestCameraParametersERKNS0_5ArrayIhEERKNS0_9RectangleIiEEihffffRfNS0_11MemoryStackE PROC ; Anki::Embedded::ComputeBestCameraParameters(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, unsigned char, float, float, float, float, float&, Anki::Embedded::MemoryStack)
;;;25       {
;;;26         Result ComputeBestCameraParameters(
000000  b5f0              PUSH     {r4-r7,lr}
;;;27           const Array<u8> &image,
;;;28           const Rectangle<s32> &imageRegionOfInterest,
;;;29           const s32 integerCountsIncrement, // Can be any value >= 1. Higher values skip more pixels, so are faster and less accurate. 3 is a good value.
;;;30           const u8 highValue, // Values equal-to or greater than highValue are considered high. 250 is a good value.
;;;31           const f32 percentileToMakeHigh, // What percentile of brightness should be set to highValue? Can be in the range [0.0, 1.0]. 0.95 is a good value
;;;32           const f32 minExposure, // What is the minimum exposure time to clip the output to? 0.03 is a good value.
;;;33           const f32 maxExposure, // What is the maximum exposure time to clip the output to? 0.97 is a good value.
;;;34           const f32 tooHighPercentMultiplier, // If the exposure is too high, what is the maximum percent reduction in exposure time? Higher values mean the exposure will adapt more slowly. Can be in the range [0.0, 1.0]. 0.8 is a good value
;;;35           f32 &exposureTime, //< Input the value used to capture "Array<u8> &image", and outputs the value to set next
;;;36           MemoryStack scratch)
;;;37         {
000002  460c              MOV      r4,r1
000004  ed2d8b06          VPUSH    {d8-d10}
000008  b091              SUB      sp,sp,#0x44
00000a  eeb0aa61          VMOV.F32 s20,s3
00000e  eef09a41          VMOV.F32 s19,s2
000012  e9dd511c          LDRD     r5,r1,[sp,#0x70]
000016  eeb08a60          VMOV.F32 s16,s1
00001a  eeb09a40          VMOV.F32 s18,s0
00001e  461f              MOV      r7,r3
;;;38           //const s32 imageHeight = image.get_size(0);
;;;39           //const s32 imageWidth  = image.get_size(1);
;;;40     
;;;41           AnkiConditionalErrorAndReturnValue(integerCountsIncrement > 0 && exposureTime > 0.0f && percentileToMakeHigh >= 0.01f && percentileToMakeHigh <= 1.0f && minExposure >= 0.01f,
000020  2a00              CMP      r2,#0
000022  dd13              BLE      |L2.76|
000024  ed950a00          VLDR     s0,[r5,#0]
000028  eeb50ac0          VCMPE.F32 s0,#0.0
00002c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000030  d90c              BLS      |L2.76|
000032  ee19ca10          VMOV     r12,s18
000036  4b4a              LDR      r3,|L2.352|
000038  4563              CMP      r3,r12
00003a  bfdf              ITTTT    LE
00003c  ee19ca10          VMOVLE   r12,s18
000040  f1bc5f7e          CMPLE    r12,#0x3f800000
000044  ee18ca10          VMOVLE   r12,s16
000048  4563              CMPLE    r3,r12
00004a  dd0f              BLE      |L2.108|
                  |L2.76|
00004c  2129              MOVS     r1,#0x29
00004e  4845              LDR      r0,|L2.356|
000050  e9cd0100          STRD     r0,r1,[sp,#0]
000054  a344              ADR      r3,|L2.360|
000056  a252              ADR      r2,|L2.416|
000058  a156              ADR      r1,|L2.436|
00005a  2005              MOVS     r0,#5
00005c  f7fffffe          BL       _Anki_Log
;;;42             RESULT_FAIL_INVALID_PARAMETER, "ComputeBestCameraParameters", "Invalid parameters");
;;;43     
;;;44           IntegerCounts counts(image, imageRegionOfInterest, integerCountsIncrement, integerCountsIncrement, scratch);
;;;45     
;;;46           const f32 oldExposureMilliseconds = exposureTime;
;;;47     
;;;48           s32 numCurrentlyHighS32 = 0;
;;;49     
;;;50           for(s32 i=highValue; i<=255; i++) {
;;;51             numCurrentlyHighS32 += counts.get_counts()[i];
;;;52           }
;;;53     
;;;54           const f32 numElements = static_cast<f32>(counts.get_numElements());
;;;55           const f32 numCurrentlyHighF32 = static_cast<f32>(numCurrentlyHighS32);
;;;56           const f32 percentCurrentlyHigh = numCurrentlyHighF32 / numElements;
;;;57     
;;;58           if(percentCurrentlyHigh >= (1.0f - percentileToMakeHigh)) {
;;;59             // If the brightness is too high, we have to guess at the correct brightness
;;;60     
;;;61             // Option 1. If we assume a underlying uniform distribution of true irradience,
;;;62             // then the ratio of high to low pixels tells us how to change the threshold
;;;63             const f32 newExposureMilliseconds = oldExposureMilliseconds * ((1.0f - percentileToMakeHigh) / percentCurrentlyHigh);
;;;64     
;;;65             // Option 2. Take the max of
;;;66             // 1. n percent of the current exposure,
;;;67             // 2. The option1 estimate
;;;68             exposureTime = MAX(newExposureMilliseconds, oldExposureMilliseconds * tooHighPercentMultiplier);
;;;69     
;;;70             //exposureTime = newExposureMilliseconds;
;;;71           } else {
;;;72             // If the brightness is too low, compute the new brightness exactly
;;;73             const f32 curBrightPixelValue = static_cast<f32>( MAX(1, counts.ComputePercentile(percentileToMakeHigh)) );
;;;74     
;;;75             exposureTime = oldExposureMilliseconds * (static_cast<f32>(highValue) / curBrightPixelValue);
;;;76           }
;;;77     
;;;78           exposureTime = CLIP(exposureTime, minExposure, maxExposure);
;;;79     
;;;80           return RESULT_OK;
;;;81         }
000060  b011              ADD      sp,sp,#0x44
000062  f04f7040          MOV      r0,#0x3000000         ;41
000066  ecbd8b06          VPOP     {d8-d10}
00006a  bdf0              POP      {r4-r7,pc}
                  |L2.108|
00006c  e9cd2100          STRD     r2,r1,[sp,#0]
000070  4613              MOV      r3,r2                 ;44
000072  4601              MOV      r1,r0                 ;44
000074  4622              MOV      r2,r4                 ;44
000076  a802              ADD      r0,sp,#8              ;44
000078  f7fffffe          BL       _ZN4Anki8Embedded13IntegerCountsC1ERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiRNS0_11MemoryStackE ; Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, int, Anki::Embedded::MemoryStack&)
00007c  edd58a00          VLDR     s17,[r5,#0]           ;46
000080  2600              MOVS     r6,#0                 ;48
000082  463c              MOV      r4,r7                 ;50
000084  2fff              CMP      r7,#0xff              ;50
000086  dc09              BGT      |L2.156|
                  |L2.136|
000088  a802              ADD      r0,sp,#8              ;51
00008a  f7fffffe          BL       _ZNK4Anki8Embedded13IntegerCounts10get_countsEv ; Anki::Embedded::IntegerCounts::get_counts() const
00008e  6b00              LDR      r0,[r0,#0x30]         ;51
000090  f8500024          LDR      r0,[r0,r4,LSL #2]     ;51
000094  1c64              ADDS     r4,r4,#1              ;50
000096  4406              ADD      r6,r6,r0              ;51
000098  2cff              CMP      r4,#0xff              ;50
00009a  ddf5              BLE      |L2.136|
                  |L2.156|
00009c  a802              ADD      r0,sp,#8              ;54
00009e  f7fffffe          BL       _ZNK4Anki8Embedded13IntegerCounts15get_numElementsEv ; Anki::Embedded::IntegerCounts::get_numElements() const
0000a2  ee000a10          VMOV     s0,r0                 ;54
0000a6  eeb81ac0          VCVT.F32.S32 s2,s0                 ;54
0000aa  ee006a10          VMOV     s0,r6                 ;55
0000ae  eef80ac0          VCVT.F32.S32 s1,s0                 ;55
0000b2  ee800a81          VDIV.F32 s0,s1,s2              ;56
0000b6  eef70a00          VMOV.F32 s1,#1.00000000        ;58
0000ba  ee700ac9          VSUB.F32 s1,s1,s18             ;58
0000be  eef40ac0          VCMPE.F32 s1,s0                 ;58
0000c2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;58
0000c6  d80f              BHI      |L2.232|
0000c8  ee801a80          VDIV.F32 s2,s1,s0              ;63
0000cc  ee680a8a          VMUL.F32 s1,s17,s20            ;68
0000d0  ee210a28          VMUL.F32 s0,s2,s17             ;63
0000d4  eeb40ae0          VCMPE.F32 s0,s1                 ;68
0000d8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;68
0000dc  bfd8              IT       LE                    ;68
0000de  eeb00a60          VMOVLE.F32 s0,s1                 ;68
0000e2  ed850a00          VSTR     s0,[r5,#0]            ;68
0000e6  e01b              B        |L2.288|
                  |L2.232|
0000e8  eeb00a49          VMOV.F32 s0,s18                ;73
0000ec  a802              ADD      r0,sp,#8              ;73
0000ee  f7fffffe          BL       _ZNK4Anki8Embedded13IntegerCounts17ComputePercentileEf ; Anki::Embedded::IntegerCounts::ComputePercentile(float) const
0000f2  2801              CMP      r0,#1                 ;73
0000f4  bfb8              IT       LT                    ;73
0000f6  2001              MOVLT    r0,#1                 ;73
0000f8  db04              BLT      |L2.260|
0000fa  eeb00a49          VMOV.F32 s0,s18                ;73
0000fe  a802              ADD      r0,sp,#8              ;73
000100  f7fffffe          BL       _ZNK4Anki8Embedded13IntegerCounts17ComputePercentileEf ; Anki::Embedded::IntegerCounts::ComputePercentile(float) const
                  |L2.260|
000104  ee000a10          VMOV     s0,r0                 ;73
000108  ee007a90          VMOV     s1,r7                 ;75
00010c  eeb80ac0          VCVT.F32.S32 s0,s0                 ;73
000110  eef80a60          VCVT.F32.U32 s1,s1                 ;75
000114  ee801a80          VDIV.F32 s2,s1,s0              ;75
000118  ee210a28          VMUL.F32 s0,s2,s17             ;75
00011c  ed850a00          VSTR     s0,[r5,#0]            ;75
                  |L2.288|
000120  eeb40ac8          VCMPE.F32 s0,s16                ;78
000124  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;78
000128  bfcc              ITE      GT                    ;78
00012a  eef00a40          VMOVGT.F32 s1,s0                 ;78
00012e  eef00a48          VMOVLE.F32 s1,s16                ;78
000132  eef40ae9          VCMPE.F32 s1,s19                ;78
000136  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;78
00013a  bf28              IT       CS                    ;78
00013c  eeb08a69          VMOVCS.F32 s16,s19               ;78
000140  d206              BCS      |L2.336|
000142  eeb40ac8          VCMPE.F32 s0,s16                ;78
000146  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;78
00014a  bfc8              IT       GT                    ;78
00014c  eeb08a40          VMOVGT.F32 s16,s0                ;78
                  |L2.336|
000150  ed858a00          VSTR     s16,[r5,#0]           ;78
000154  b011              ADD      sp,sp,#0x44
000156  2000              MOVS     r0,#0                 ;80
000158  ecbd8b06          VPOP     {d8-d10}
00015c  bdf0              POP      {r4-r7,pc}
;;;82     
                          ENDP

00015e  0000              DCW      0x0000
                  |L2.352|
                          DCD      0x3c23d70a
                  |L2.356|
                          DCD      ||.constdata||
                  |L2.360|
000168  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\cameraImagingPipeline"
00016c  6f726574
000170  6563685c
000174  76697369
000178  6f6e5c72
00017c  6f626f74
000180  5c737263
000184  5c63616d
000188  65726149
00018c  6d616769
000190  6e675069
000194  70656c69
000198  6e65    
00019a  2e637070          DCB      ".cpp",0
00019e  00      
00019f  00                DCB      0
                  |L2.416|
0001a0  496e7661          DCB      "Invalid parameters",0
0001a4  6c696420
0001a8  70617261
0001ac  6d657465
0001b0  727300  
0001b3  00                DCB      0
                  |L2.436|
0001b4  436f6d70          DCB      "ComputeBestCameraParameters",0
0001b8  75746542
0001bc  65737443
0001c0  616d6572
0001c4  61506172
0001c8  616d6574
0001cc  65727300

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded27ComputeBestCameraParametersERKNS0_5ArrayIhEERKNS0_9RectangleIiEEihffffRfNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded27ComputeBestCameraParametersERKNS0_5ArrayIhEERKNS0_9RectangleIiEEihffffRfNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.4||, LINKORDER=||i._ZN4Anki8Embedded17CorrectVignettingERNS0_5ArrayIhEERKNS0_15FixedLengthListIfEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded17CorrectVignettingERNS0_5ArrayIhEERKNS0_15FixedLengthListIfEE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000020  70757465          DCB      0x70,0x75,0x74,0x65
000024  42657374          DCB      0x42,0x65,0x73,0x74
000028  43616d65          DCB      0x43,0x61,0x6d,0x65
00002c  72615061          DCB      0x72,0x61,0x50,0x61
000030  72616d65          DCB      0x72,0x61,0x6d,0x65
000034  74657273          DCB      0x74,0x65,0x72,0x73
000038  28636f6e          DCB      0x28,0x63,0x6f,0x6e
00003c  73742041          DCB      0x73,0x74,0x20,0x41
000040  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000044  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000048  65646465          DCB      0x65,0x64,0x64,0x65
00004c  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000050  72726179          DCB      0x72,0x72,0x61,0x79
000054  3c756e73          DCB      0x3c,0x75,0x6e,0x73
000058  69676e65          DCB      0x69,0x67,0x6e,0x65
00005c  64206368          DCB      0x64,0x20,0x63,0x68
000060  61723e20          DCB      0x61,0x72,0x3e,0x20
000064  262c2063          DCB      0x26,0x2c,0x20,0x63
000068  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00006c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000070  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000074  6d626564          DCB      0x6d,0x62,0x65,0x64
000078  6465643a          DCB      0x64,0x65,0x64,0x3a
00007c  3a526563          DCB      0x3a,0x52,0x65,0x63
000080  74616e67          DCB      0x74,0x61,0x6e,0x67
000084  6c653c73          DCB      0x6c,0x65,0x3c,0x73
000088  69676e65          DCB      0x69,0x67,0x6e,0x65
00008c  6420696e          DCB      0x64,0x20,0x69,0x6e
000090  743e2026          DCB      0x74,0x3e,0x20,0x26
000094  2c207369          DCB      0x2c,0x20,0x73,0x69
000098  676e6564          DCB      0x67,0x6e,0x65,0x64
00009c  20696e74          DCB      0x20,0x69,0x6e,0x74
0000a0  2c20756e          DCB      0x2c,0x20,0x75,0x6e
0000a4  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a8  65642063          DCB      0x65,0x64,0x20,0x63
0000ac  6861722c          DCB      0x68,0x61,0x72,0x2c
0000b0  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0000b4  61742c20          DCB      0x61,0x74,0x2c,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  742c2066          DCB      0x74,0x2c,0x20,0x66
0000c0  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000c4  2c20666c          DCB      0x2c,0x20,0x66,0x6c
0000c8  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000cc  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0000d0  61742026          DCB      0x61,0x74,0x20,0x26
0000d4  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0000d8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000dc  456d6265          DCB      0x45,0x6d,0x62,0x65
0000e0  64646564          DCB      0x64,0x64,0x65,0x64
0000e4  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
0000e8  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
0000ec  53746163          DCB      0x53,0x74,0x61,0x63
0000f0  6b2900            DCB      0x6b,0x29,0x00
                  |symbol_number.11|
0000f3  41                DCB      0x41
0000f4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000f8  3a526573          DCB      0x3a,0x52,0x65,0x73
0000fc  756c7420          DCB      0x75,0x6c,0x74,0x20
000100  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000104  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000108  62656464          DCB      0x62,0x65,0x64,0x64
00010c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000110  436f7272          DCB      0x43,0x6f,0x72,0x72
000114  65637456          DCB      0x65,0x63,0x74,0x56
000118  69676e65          DCB      0x69,0x67,0x6e,0x65
00011c  7474696e          DCB      0x74,0x74,0x69,0x6e
000120  6728416e          DCB      0x67,0x28,0x41,0x6e
000124  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000128  456d6265          DCB      0x45,0x6d,0x62,0x65
00012c  64646564          DCB      0x64,0x64,0x65,0x64
000130  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000134  7261793c          DCB      0x72,0x61,0x79,0x3c
000138  756e7369          DCB      0x75,0x6e,0x73,0x69
00013c  676e6564          DCB      0x67,0x6e,0x65,0x64
000140  20636861          DCB      0x20,0x63,0x68,0x61
000144  723e2026          DCB      0x72,0x3e,0x20,0x26
000148  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00014c  6e737420          DCB      0x6e,0x73,0x74,0x20
000150  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000154  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000158  62656464          DCB      0x62,0x65,0x64,0x64
00015c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000160  46697865          DCB      0x46,0x69,0x78,0x65
000164  644c656e          DCB      0x64,0x4c,0x65,0x6e
000168  6774684c          DCB      0x67,0x74,0x68,0x4c
00016c  6973743c          DCB      0x69,0x73,0x74,0x3c
000170  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000174  743e2026          DCB      0x74,0x3e,0x20,0x26
000178  29000000          DCB      0x29,0x00,0x00,0x00
00017c  41727261          DCB      0x41,0x72,0x72,0x61
000180  793c5479          DCB      0x79,0x3c,0x54,0x79
000184  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000188  3a676574          DCB      0x3a,0x67,0x65,0x74
00018c  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000190  65000000          DCB      0x65,0x00,0x00,0x00
000194  4e656761          DCB      0x4e,0x65,0x67,0x61
000198  74697665          DCB      0x74,0x69,0x76,0x65
00019c  2064696d          DCB      0x20,0x64,0x69,0x6d
0001a0  656e7369          DCB      0x65,0x6e,0x73,0x69
0001a4  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
0001a8  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0001ac  6f726574          DCB      0x6f,0x72,0x65,0x74
0001b0  6563685c          DCB      0x65,0x63,0x68,0x5c
0001b4  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001b8  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0001bc  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0001c0  64655c61          DCB      0x64,0x65,0x5c,0x61
0001c4  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0001c8  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001cc  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0001d0  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0001d4  2f617272          DCB      0x2f,0x61,0x72,0x72
0001d8  61793264          DCB      0x61,0x79,0x32,0x64
0001dc  2e680000          DCB      0x2e,0x68,0x00,0x00
0001e0  6f6e6c79          DCB      0x6f,0x6e,0x6c,0x79
0001e4  20352070          DCB      0x20,0x35,0x20,0x70
0001e8  6f6c796e          DCB      0x6f,0x6c,0x79,0x6e
0001ec  6f6d6961          DCB      0x6f,0x6d,0x69,0x61
0001f0  6c506172          DCB      0x6c,0x50,0x61,0x72
0001f4  616d6574          DCB      0x61,0x6d,0x65,0x74
0001f8  65727320          DCB      0x65,0x72,0x73,0x20
0001fc  63757272          DCB      0x63,0x75,0x72,0x72
000200  656e746c          DCB      0x65,0x6e,0x74,0x6c
000204  79207375          DCB      0x79,0x20,0x73,0x75
000208  70706f72          DCB      0x70,0x70,0x6f,0x72
00020c  74656420          DCB      0x74,0x65,0x64,0x20
000210  28326e64          DCB      0x28,0x32,0x6e,0x64
000214  206f7264          DCB      0x20,0x6f,0x72,0x64
000218  65722070          DCB      0x65,0x72,0x20,0x70
00021c  6f6c796e          DCB      0x6f,0x6c,0x79,0x6e
000220  6f6d6961          DCB      0x6f,0x6d,0x69,0x61
000224  6c2900            DCB      0x6c,0x29,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\cameraImagingPipeline.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___25_cameraImagingPipeline_cpp_84872995___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___25_cameraImagingPipeline_cpp_84872995___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___25_cameraImagingPipeline_cpp_84872995___Z7__REVSHi|
#line 144
|__asm___25_cameraImagingPipeline_cpp_84872995___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
