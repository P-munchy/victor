; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\cascadeclassifier.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\cascadeclassifier.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\cascadeclassifier.crf ..\coretech\vision\robot\src\cascadeClassifier.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifNS0_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifNS0_11MemoryStackE PROC ; Anki::Embedded::Classifier::GroupRectangles(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, int, float, Anki::Embedded::MemoryStack)
;;;118    
;;;119          void GroupRectangles(FixedLengthList<Rectangle<s32> >& rectList, const s32 groupThreshold, const f32 eps, MemoryStack scratch)
000000  b530              PUSH     {r4,r5,lr}
;;;120          {
000002  460c              MOV      r4,r1
000004  ed2d8b02          VPUSH    {d8}
000008  b089              SUB      sp,sp,#0x24
00000a  4605              MOV      r5,r0
00000c  eeb08a40          VMOV.F32 s16,s0
;;;121            GroupRectangles(rectList, groupThreshold, eps, NULL, NULL, scratch);
000010  4611              MOV      r1,r2
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000018  2300              MOVS     r3,#0
00001a  9000              STR      r0,[sp,#0]
00001c  461a              MOV      r2,r3
00001e  eeb00a48          VMOV.F32 s0,s16
000022  4621              MOV      r1,r4
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       _ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifPNS2_IiEEPNS2_IfEENS0_11MemoryStackE ; Anki::Embedded::Classifier::GroupRectangles(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, int, float, Anki::Embedded::FixedLengthList<int>*, Anki::Embedded::FixedLengthList<float>*, Anki::Embedded::MemoryStack)
;;;122          } // void GroupRectangles(FixedLengthList<Rectangle<s32> >& rectList, const s32 groupThreshold, const f32 eps)
00002a  b009              ADD      sp,sp,#0x24
00002c  ecbd8b02          VPOP     {d8}
000030  bd30              POP      {r4,r5,pc}
;;;123    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifPNS2_IiEEPNS2_IfEENS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifPNS2_IiEEPNS2_IfEENS0_11MemoryStackE PROC ; Anki::Embedded::Classifier::GroupRectangles(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, int, float, Anki::Embedded::FixedLengthList<int>*, Anki::Embedded::FixedLengthList<float>*, Anki::Embedded::MemoryStack)
;;;123    
;;;124          void GroupRectangles(FixedLengthList<Rectangle<s32> >& rectList, const s32 groupThreshold, const f32 eps, FixedLengthList<s32>* weights, FixedLengthList<f32>* levelWeights, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;125          {
000004  4606              MOV      r6,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  4698              MOV      r8,r3
00000c  4617              MOV      r7,r2
00000e  ed2d8b04          VPUSH    {d8-d9}
000012  b0e7              SUB      sp,sp,#0x19c
000014  eeb08a40          VMOV.F32 s16,s0
;;;126            if( groupThreshold <= 0 || rectList.get_size()==0 )
000018  986e              LDR      r0,[sp,#0x1b8]
00001a  2800              CMP      r0,#0
00001c  f3408100          BLE.W    |L2.544|
000020  68f0              LDR      r0,[r6,#0xc]
000022  2800              CMP      r0,#0
000024  f00080fc          BEQ.W    |L2.544|
;;;127            {
;;;128              if( weights )
;;;129              {
;;;130                s32 sz = rectList.get_size();
;;;131                weights->set_size(sz);
;;;132                for(s32 i = 0; i < sz; i++ )
;;;133                  (*weights)[i] = 1;
;;;134              }
;;;135              return;
;;;136            }
;;;137    
;;;138            FixedLengthList<int> labels(rectList.get_size(), scratch, Flags::Buffer(true, false, true));
000028  2301              MOVS     r3,#1
00002a  2200              MOVS     r2,#0
00002c  4619              MOV      r1,r3
00002e  a863              ADD      r0,sp,#0x18c
000030  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000034  6803              LDR      r3,[r0,#0]
000036  68f1              LDR      r1,[r6,#0xc]
000038  a80f              ADD      r0,sp,#0x3c
00003a  9a7a              LDR      r2,[sp,#0x1e8]
00003c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;139    
;;;140            const int nclasses = Partition(rectList, labels, SimilarRects(eps), scratch);
000040  a80f              ADD      r0,sp,#0x3c
000042  901f              STR      r0,[sp,#0x7c]
000044  ed8d8a62          VSTR     s16,[sp,#0x188]
000048  eeb09a48          VMOV.F32 s18,s16
00004c  a85b              ADD      r0,sp,#0x16c
00004e  997a              LDR      r1,[sp,#0x1e8]
000050  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000054  4604              MOV      r4,r0
000056  68f5              LDR      r5,[r6,#0xc]
000058  6b30              LDR      r0,[r6,#0x30]
00005a  2300              MOVS     r3,#0
00005c  901e              STR      r0,[sp,#0x78]
00005e  461a              MOV      r2,r3
000060  2101              MOVS     r1,#1
000062  a830              ADD      r0,sp,#0xc0
000064  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000068  6803              LDR      r3,[r0,#0]
00006a  0069              LSLS     r1,r5,#1
00006c  4622              MOV      r2,r4
00006e  a84e              ADD      r0,sp,#0x138
000070  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000074  2000              MOVS     r0,#0
000076  9c5a              LDR      r4,[sp,#0x168]
000078  2d00              CMP      r5,#0
00007a  bfc4              ITT      GT
00007c  f04f32ff          MOVGT    r2,#0xffffffff
000080  2100              MOVGT    r1,#0
000082  dd07              BLE      |L2.148|
                  |L2.132|
000084  f8442030          STR      r2,[r4,r0,LSL #3]
000088  eb0403c0          ADD      r3,r4,r0,LSL #3
00008c  1c40              ADDS     r0,r0,#1
00008e  6059              STR      r1,[r3,#4]
000090  4285              CMP      r5,r0
000092  dcf7              BGT      |L2.132|
                  |L2.148|
000094  2200              MOVS     r2,#0
000096  eef68a00          VMOV.F32 s17,#0.50000000
00009a  2d00              CMP      r5,#0
00009c  f3408111          BLE.W    |L2.706|
                  |L2.160|
0000a0  4610              MOV      r0,r2
0000a2  f8541030          LDR      r1,[r4,r0,LSL #3]
0000a6  2900              CMP      r1,#0
0000a8  db04              BLT      |L2.180|
                  |L2.170|
0000aa  4608              MOV      r0,r1
0000ac  f8541030          LDR      r1,[r4,r0,LSL #3]
0000b0  2900              CMP      r1,#0
0000b2  dafa              BGE      |L2.170|
                  |L2.180|
0000b4  2100              MOVS     r1,#0
0000b6  2d00              CMP      r5,#0
0000b8  f34080ff          BLE.W    |L2.698|
0000bc  9b1e              LDR      r3,[sp,#0x78]
0000be  eb031302          ADD      r3,r3,r2,LSL #4
0000c2  9322              STR      r3,[sp,#0x88]
                  |L2.196|
0000c4  428a              CMP      r2,r1
0000c6  f00080f4          BEQ.W    |L2.690|
0000ca  f8ddc088          LDR      r12,[sp,#0x88]
0000ce  9b1e              LDR      r3,[sp,#0x78]
0000d0  f8dc9004          LDR      r9,[r12,#4]
0000d4  f8cd9004          STR      r9,[sp,#4]
0000d8  f8dca000          LDR      r10,[r12,#0]
0000dc  eb031301          ADD      r3,r3,r1,LSL #4
0000e0  f8cda074          STR      r10,[sp,#0x74]
0000e4  eba90a0a          SUB      r10,r9,r10
0000e8  f8d39004          LDR      r9,[r3,#4]
0000ec  f8cd9000          STR      r9,[sp,#0]
0000f0  f8d3b000          LDR      r11,[r3,#0]
0000f4  f8cdb070          STR      r11,[sp,#0x70]
0000f8  eba9090b          SUB      r9,r9,r11
0000fc  f8dcb00c          LDR      r11,[r12,#0xc]
000100  f8cdb084          STR      r11,[sp,#0x84]
000104  f8dcc008          LDR      r12,[r12,#8]
000108  f8cdc080          STR      r12,[sp,#0x80]
00010c  ebab0c0c          SUB      r12,r11,r12
000110  e9d3be02          LDRD     r11,lr,[r3,#8]
000114  ebae030b          SUB      r3,lr,r11
000118  45ca              CMP      r10,r9
00011a  bfb8              IT       LT
00011c  46d1              MOVLT    r9,r10
00011e  459c              CMP      r12,r3
000120  bfb8              IT       LT
000122  4663              MOVLT    r3,r12
000124  444b              ADD      r3,r3,r9
000126  ee003a10          VMOV     s0,r3
00012a  e9ddc31c          LDRD     r12,r3,[sp,#0x70]
00012e  eeb80ac0          VCVT.F32.S32 s0,s0
000132  eba3030c          SUB      r3,r3,r12
000136  2b00              CMP      r3,#0
000138  ee200a09          VMUL.F32 s0,s0,s18
00013c  ee600a28          VMUL.F32 s1,s0,s17
000140  bfbc              ITT      LT
000142  9b1d              LDRLT    r3,[sp,#0x74]
000144  ebac0303          SUBLT    r3,r12,r3
000148  ee003a10          VMOV     s0,r3
00014c  eeb80ac0          VCVT.F32.S32 s0,s0
000150  eeb40ae0          VCMPE.F32 s0,s1
000154  eef1fa10          VMRS     APSR_nzcv,FPSCR
000158  d879              BHI      |L2.590|
00015a  9b20              LDR      r3,[sp,#0x80]
00015c  eba3030b          SUB      r3,r3,r11
000160  2b00              CMP      r3,#0
000162  bfbc              ITT      LT
000164  9b20              LDRLT    r3,[sp,#0x80]
000166  ebab0303          SUBLT    r3,r11,r3
00016a  ee003a10          VMOV     s0,r3
00016e  eeb80ac0          VCVT.F32.S32 s0,s0
000172  eeb40ae0          VCMPE.F32 s0,s1
000176  eef1fa10          VMRS     APSR_nzcv,FPSCR
00017a  d868              BHI      |L2.590|
00017c  e9ddc300          LDRD     r12,r3,[sp,#0]
000180  ebb3030c          SUBS     r3,r3,r12
000184  d504              BPL      |L2.400|
000186  4663              MOV      r3,r12
000188  f8ddc004          LDR      r12,[sp,#4]
00018c  eba3030c          SUB      r3,r3,r12
                  |L2.400|
000190  ee003a10          VMOV     s0,r3
000194  eeb80ac0          VCVT.F32.S32 s0,s0
000198  eeb40ae0          VCMPE.F32 s0,s1
00019c  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001a0  d855              BHI      |L2.590|
0001a2  9b21              LDR      r3,[sp,#0x84]
0001a4  eba3030e          SUB      r3,r3,lr
0001a8  2b00              CMP      r3,#0
0001aa  bfbc              ITT      LT
0001ac  9b21              LDRLT    r3,[sp,#0x84]
0001ae  ebae0303          SUBLT    r3,lr,r3
0001b2  ee003a10          VMOV     s0,r3
0001b6  eeb80ac0          VCVT.F32.S32 s0,s0
0001ba  eeb40ae0          VCMPE.F32 s0,s1
0001be  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001c2  d876              BHI      |L2.690|
0001c4  460b              MOV      r3,r1
0001c6  f854c033          LDR      r12,[r4,r3,LSL #3]
0001ca  f1bc0f00          CMP      r12,#0
0001ce  db05              BLT      |L2.476|
                  |L2.464|
0001d0  4663              MOV      r3,r12
0001d2  f854c033          LDR      r12,[r4,r3,LSL #3]
0001d6  f1bc0f00          CMP      r12,#0
0001da  daf9              BGE      |L2.464|
                  |L2.476|
0001dc  4283              CMP      r3,r0
0001de  d068              BEQ      |L2.690|
0001e0  eb040cc0          ADD      r12,r4,r0,LSL #3
0001e4  f8dc9004          LDR      r9,[r12,#4]
0001e8  eb040cc3          ADD      r12,r4,r3,LSL #3
0001ec  f8dca004          LDR      r10,[r12,#4]
0001f0  45d1              CMP      r9,r10
0001f2  bfdc              ITT      LE
0001f4  f8443030          STRLE    r3,[r4,r0,LSL #3]
0001f8  f8dc9004          LDRLE    r9,[r12,#4]
0001fc  bfb8              IT       LT
0001fe  2000              MOVLT    r0,#0
000200  bf08              IT       EQ
000202  2001              MOVEQ    r0,#1
000204  bfc8              IT       GT
000206  f8440033          STRGT    r0,[r4,r3,LSL #3]
00020a  dc03              BGT      |L2.532|
00020c  4448              ADD      r0,r0,r9
00020e  f8cc0004          STR      r0,[r12,#4]
000212  4618              MOV      r0,r3
                  |L2.532|
000214  f8543030          LDR      r3,[r4,r0,LSL #3]
000218  2b00              CMP      r3,#0
00021a  db2e              BLT      |L2.634|
00021c  f7fffffe          BL       abort
                  |L2.544|
000220  2f00              CMP      r7,#0                 ;128
;;;141    
;;;142            FixedLengthList<Rectangle<s32> > rrects(nclasses, scratch, Flags::Buffer(true, false, true));
;;;143    
;;;144            FixedLengthList<int> rweights(nclasses, scratch, Flags::Buffer(true, false, true));
;;;145    
;;;146            FixedLengthList<int> rejectLevels(nclasses, scratch, Flags::Buffer(true, false, true));
;;;147    
;;;148            FixedLengthList<f32> rejectWeights(nclasses, scratch, Flags::Buffer(false, false, true));
;;;149            rejectWeights.Set(FLT_MAX);
;;;150    
;;;151            const int nlabels = (int)labels.get_size();
;;;152    
;;;153            for(s32 i = 0; i < nlabels; i++ )
;;;154            {
;;;155              const int cls = labels[i];
;;;156              rrects[cls].left += rectList[i].left;
;;;157              rrects[cls].right += rectList[i].right;
;;;158              rrects[cls].top += rectList[i].top;
;;;159              rrects[cls].bottom += rectList[i].bottom;
;;;160              rweights[cls]++;
;;;161            }
;;;162    
;;;163            if ( levelWeights && weights && weights->get_size()!=0 && levelWeights->get_size()!=0 )
;;;164            {
;;;165              for(s32 i = 0; i < nlabels; i++ )
;;;166              {
;;;167                const int cls = labels[i];
;;;168    
;;;169                if( (*weights)[i] > rejectLevels[cls] )
;;;170                {
;;;171                  rejectLevels[cls] = (*weights)[i];
;;;172                  rejectWeights[cls] = (*levelWeights)[i];
;;;173                }
;;;174                else if( ( (*weights)[i] == rejectLevels[cls] ) && ( (*levelWeights)[i] > rejectWeights[cls] ) )
;;;175                  rejectWeights[cls] = (*levelWeights)[i];
;;;176              }
;;;177            }
;;;178    
;;;179            for(s32 i = 0; i < nclasses; i++ )
;;;180            {
;;;181              const Rectangle<s32> r = rrects[i];
;;;182              const f32 s = 1.f/rweights[i];
;;;183    
;;;184              rrects[i] = Rectangle<s32>(
;;;185                Round<s32>(r.left*s),
;;;186                Round<s32>(r.right*s),
;;;187                Round<s32>(r.top*s),
;;;188                Round<s32>(r.bottom*s));
;;;189            }
;;;190    
;;;191            rectList.Clear();
;;;192    
;;;193            if( weights )
;;;194              weights->Clear();
;;;195    
;;;196            if( levelWeights )
;;;197              levelWeights->Clear();
;;;198    
;;;199            for(s32 i = 0; i < nclasses; i++ )
;;;200            {
;;;201              const Rectangle<s32> r1 = rrects[i];
;;;202              const int n1 = levelWeights ? rejectLevels[i] : rweights[i];
;;;203              const f32 w1 = rejectWeights[i];
;;;204    
;;;205              if( n1 <= groupThreshold )
;;;206                continue;
;;;207    
;;;208              s32 j;
;;;209    
;;;210              // filter out small face rectangles inside large rectangles
;;;211              for(j = 0; j < nclasses; j++ )
;;;212              {
;;;213                const int n2 = rweights[j];
;;;214    
;;;215                if( j == i || n2 <= groupThreshold )
;;;216                  continue;
;;;217    
;;;218                const Rectangle<s32> r2 = rrects[j];
;;;219    
;;;220                //const s32 width1 = r1.right - r1.left;
;;;221                const s32 width2 = r2.right - r2.left;
;;;222    
;;;223                //const s32 height1 = r1.bottom - r1.top;
;;;224                const s32 height2 = r2.bottom - r2.top;
;;;225    
;;;226                int dx = Round<s32>( width2 * eps );
;;;227                int dy = Round<s32>( height2 * eps );
;;;228    
;;;229                if( i != j &&
;;;230                  r1.left >= r2.left - dx &&
;;;231                  r1.top >= r2.top - dy &&
;;;232                  r1.right <= r2.right + dx &&
;;;233                  r1.bottom <= r2.bottom + dy &&
;;;234                  (n2 > MAX(3, n1) || n1 < 3) )
;;;235                  break;
;;;236              }
;;;237    
;;;238              if( j == nclasses )
;;;239              {
;;;240                rectList.PushBack(r1);
;;;241    
;;;242                if( weights )
;;;243                  weights->PushBack(n1);
;;;244    
;;;245                if( levelWeights )
;;;246                  levelWeights->PushBack(w1);
;;;247              }
;;;248            }
;;;249          } // void GroupRectangles(FixedLengthList<Rectangle<s32> >& rectList, const s32 groupThreshold, const f32 eps, FixedLengthList<s32>* weights, FixedLengthList<f32>* levelWeights)
000222  bf01              ITTTT    EQ
000224  b067              ADDEQ    sp,sp,#0x19c
000226  ecbd8b04          VPOPEQ   {d8-d9}
00022a  b006              ADDEQ    sp,sp,#0x18
00022c  e8bd8ff0          POPEQ    {r4-r11,pc}
000230  4610              MOV      r0,r2
000232  68f4              LDR      r4,[r6,#0xc]
000234  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
000238  4601              MOV      r1,r0
00023a  2c00              CMP      r4,#0
00023c  bfac              ITE      GE
00023e  4620              MOVGE    r0,r4
000240  2000              MOVLT    r0,#0
000242  4288              CMP      r0,r1
000244  dd04              BLE      |L2.592|
000246  4638              MOV      r0,r7
000248  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
00024c  e003              B        |L2.598|
                  |L2.590|
00024e  e030              B        |L2.690|
                  |L2.592|
000250  1e20              SUBS     r0,r4,#0
000252  bfb8              IT       LT
000254  2000              MOVLT    r0,#0
                  |L2.598|
000256  60f8              STR      r0,[r7,#0xc]          ;132
000258  2000              MOVS     r0,#0                 ;132
00025a  2c00              CMP      r4,#0                 ;132
00025c  bfc8              IT       GT                    ;133
00025e  2101              MOVGT    r1,#1                 ;133
000260  dd05              BLE      |L2.622|
                  |L2.610|
000262  6b3a              LDR      r2,[r7,#0x30]         ;133
000264  f8421020          STR      r1,[r2,r0,LSL #2]     ;133
000268  1c40              ADDS     r0,r0,#1              ;132
00026a  42a0              CMP      r0,r4                 ;132
00026c  dbf9              BLT      |L2.610|
                  |L2.622|
00026e  b067              ADD      sp,sp,#0x19c
000270  ecbd8b04          VPOP     {d8-d9}
000274  b006              ADD      sp,sp,#0x18
000276  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.634|
00027a  f854c031          LDR      r12,[r4,r1,LSL #3]
00027e  460b              MOV      r3,r1
000280  f1bc0f00          CMP      r12,#0
000284  db07              BLT      |L2.662|
                  |L2.646|
000286  f8440033          STR      r0,[r4,r3,LSL #3]
00028a  4663              MOV      r3,r12
00028c  f854c033          LDR      r12,[r4,r3,LSL #3]
000290  f1bc0f00          CMP      r12,#0
000294  daf7              BGE      |L2.646|
                  |L2.662|
000296  4613              MOV      r3,r2
000298  f854c033          LDR      r12,[r4,r3,LSL #3]
00029c  f1bc0f00          CMP      r12,#0
0002a0  db07              BLT      |L2.690|
                  |L2.674|
0002a2  f8440033          STR      r0,[r4,r3,LSL #3]
0002a6  4663              MOV      r3,r12
0002a8  f854c033          LDR      r12,[r4,r3,LSL #3]
0002ac  f1bc0f00          CMP      r12,#0
0002b0  daf7              BGE      |L2.674|
                  |L2.690|
0002b2  1c49              ADDS     r1,r1,#1
0002b4  42a9              CMP      r1,r5
0002b6  f6ffaf05          BLT      |L2.196|
                  |L2.698|
0002ba  1c52              ADDS     r2,r2,#1
0002bc  42aa              CMP      r2,r5
0002be  f6ffaeef          BLT      |L2.160|
                  |L2.706|
0002c2  f8dd907c          LDR      r9,[sp,#0x7c]
0002c6  4648              MOV      r0,r9
0002c8  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
0002cc  4601              MOV      r1,r0
0002ce  2d00              CMP      r5,#0
0002d0  bfb4              ITE      LT
0002d2  2000              MOVLT    r0,#0
0002d4  4628              MOVGE    r0,r5
0002d6  4288              CMP      r0,r1
0002d8  dd03              BLE      |L2.738|
0002da  4648              MOV      r0,r9
0002dc  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
0002e0  e002              B        |L2.744|
                  |L2.738|
0002e2  1e28              SUBS     r0,r5,#0
0002e4  bfb8              IT       LT
0002e6  2000              MOVLT    r0,#0
                  |L2.744|
0002e8  f8c9000c          STR      r0,[r9,#0xc]
0002ec  f04f0900          MOV      r9,#0
0002f0  4649              MOV      r1,r9
0002f2  2d00              CMP      r5,#0
0002f4  dd1c              BLE      |L2.816|
                  |L2.758|
0002f6  4608              MOV      r0,r1
0002f8  f8542030          LDR      r2,[r4,r0,LSL #3]
0002fc  2a00              CMP      r2,#0
0002fe  db04              BLT      |L2.778|
                  |L2.768|
000300  4610              MOV      r0,r2
000302  f8542030          LDR      r2,[r4,r0,LSL #3]
000306  2a00              CMP      r2,#0
000308  dafa              BGE      |L2.768|
                  |L2.778|
00030a  eb0400c0          ADD      r0,r4,r0,LSL #3
00030e  6842              LDR      r2,[r0,#4]
000310  2a00              CMP      r2,#0
000312  db04              BLT      |L2.798|
000314  ea6f0209          MVN      r2,r9
000318  f1090901          ADD      r9,r9,#1
00031c  6042              STR      r2,[r0,#4]
                  |L2.798|
00031e  9a1f              LDR      r2,[sp,#0x7c]
000320  6840              LDR      r0,[r0,#4]
000322  6b12              LDR      r2,[r2,#0x30]
000324  43c0              MVNS     r0,r0
000326  f8420021          STR      r0,[r2,r1,LSL #2]
00032a  1c49              ADDS     r1,r1,#1
00032c  42a9              CMP      r1,r5
00032e  dbe2              BLT      |L2.758|
                  |L2.816|
000330  2301              MOVS     r3,#1                 ;142
000332  2200              MOVS     r2,#0                 ;142
000334  4619              MOV      r1,r3                 ;142
000336  a863              ADD      r0,sp,#0x18c          ;142
000338  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00033c  6803              LDR      r3,[r0,#0]            ;142
00033e  4649              MOV      r1,r9                 ;142
000340  a823              ADD      r0,sp,#0x8c           ;142
000342  9a7a              LDR      r2,[sp,#0x1e8]        ;142
000344  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000348  2301              MOVS     r3,#1                 ;144
00034a  2200              MOVS     r2,#0                 ;144
00034c  4619              MOV      r1,r3                 ;144
00034e  a864              ADD      r0,sp,#0x190          ;144
000350  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000354  6803              LDR      r3,[r0,#0]            ;144
000356  4649              MOV      r1,r9                 ;144
000358  a834              ADD      r0,sp,#0xd0           ;144
00035a  9a7a              LDR      r2,[sp,#0x1e8]        ;144
00035c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000360  2301              MOVS     r3,#1                 ;146
000362  2200              MOVS     r2,#0                 ;146
000364  4619              MOV      r1,r3                 ;146
000366  a865              ADD      r0,sp,#0x194          ;146
000368  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00036c  6803              LDR      r3,[r0,#0]            ;146
00036e  4649              MOV      r1,r9                 ;146
000370  a841              ADD      r0,sp,#0x104          ;146
000372  9a7a              LDR      r2,[sp,#0x1e8]        ;146
000374  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000378  a802              ADD      r0,sp,#8              ;148
00037a  9001              STR      r0,[sp,#4]            ;148
00037c  2200              MOVS     r2,#0                 ;148
00037e  2301              MOVS     r3,#1                 ;148
000380  4611              MOV      r1,r2                 ;148
000382  a866              ADD      r0,sp,#0x198          ;148
000384  9c7a              LDR      r4,[sp,#0x1e8]        ;148
000386  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00038a  6800              LDR      r0,[r0,#0]            ;148
00038c  9021              STR      r0,[sp,#0x84]         ;148
00038e  9000              STR      r0,[sp,#0]            ;148
000390  4623              MOV      r3,r4                 ;148
000392  464a              MOV      r2,r9                 ;148
000394  2101              MOVS     r1,#1                 ;148
000396  a81c              ADD      r0,sp,#0x70           ;148
000398  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00039c  4602              MOV      r2,r0                 ;148
00039e  f8d0b010          LDR      r11,[r0,#0x10]        ;148
0003a2  e9d2a002          LDRD     r10,r0,[r2,#8]        ;148
0003a6  e9d24500          LDRD     r4,r5,[r2,#0]         ;148
0003aa  2200              MOVS     r2,#0                 ;148
0003ac  9000              STR      r0,[sp,#0]            ;148
0003ae  4611              MOV      r1,r2                 ;148
0003b0  a830              ADD      r0,sp,#0xc0           ;148
0003b2  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
0003b6  2200              MOVS     r2,#0                 ;148
0003b8  9022              STR      r0,[sp,#0x88]         ;148
0003ba  4611              MOV      r1,r2                 ;148
0003bc  a84e              ADD      r0,sp,#0x138          ;148
0003be  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
0003c2  9b22              LDR      r3,[sp,#0x88]         ;148
0003c4  4684              MOV      r12,r0                ;148
0003c6  2c00              CMP      r4,#0                 ;148
0003c8  e9d30200          LDRD     r0,r2,[r3,#0]         ;148
0003cc  689b              LDR      r3,[r3,#8]            ;148
0003ce  e9cd0202          STRD     r0,r2,[sp,#8]         ;148
0003d2  9304              STR      r3,[sp,#0x10]         ;148
0003d4  e9dc0200          LDRD     r0,r2,[r12,#0]        ;148
0003d8  f8dc3008          LDR      r3,[r12,#8]           ;148
0003dc  9307              STR      r3,[sp,#0x1c]         ;148
0003de  e9cd0205          STRD     r0,r2,[sp,#0x14]      ;148
0003e2  9800              LDR      r0,[sp,#0]            ;148
0003e4  f8cdb030          STR      r11,[sp,#0x30]        ;148
0003e8  e9cda00a          STRD     r10,r0,[sp,#0x28]     ;148
0003ec  e9cd4508          STRD     r4,r5,[sp,#0x20]      ;148
0003f0  bfc8              IT       GT                    ;148
0003f2  2d00              CMPGT    r5,#0                 ;148
0003f4  dd33              BLE      |L2.1118|
0003f6  fb04f005          MUL      r0,r4,r5              ;148
0003fa  2800              CMP      r0,#0                 ;148
0003fc  bf1c              ITT      NE                    ;148
0003fe  2000              MOVNE    r0,#0                 ;148
000400  fb00b00a          MLANE    r0,r0,r10,r11         ;148
000404  d02b              BEQ      |L2.1118|
                  |L2.1030|
000406  900d              STR      r0,[sp,#0x34]         ;148
000408  2c00              CMP      r4,#0                 ;148
00040a  bfc8              IT       GT                    ;148
00040c  2d00              CMPGT    r5,#0                 ;148
00040e  dd28              BLE      |L2.1122|
000410  fb04f005          MUL      r0,r4,r5              ;148
000414  2800              CMP      r0,#0                 ;148
000416  bf1c              ITT      NE                    ;148
000418  2000              MOVNE    r0,#0                 ;148
00041a  fb00b00a          MLANE    r0,r0,r10,r11         ;148
00041e  d020              BEQ      |L2.1122|
                  |L2.1056|
000420  900e              STR      r0,[sp,#0x38]         ;148
000422  2c00              CMP      r4,#0                 ;148
000424  bfc8              IT       GT                    ;148
000426  2d00              CMPGT    r5,#0                 ;148
000428  dd1d              BLE      |L2.1126|
00042a  fb04f005          MUL      r0,r4,r5              ;148
00042e  2800              CMP      r0,#0                 ;148
000430  bf1c              ITT      NE                    ;148
000432  2000              MOVNE    r0,#0                 ;148
000434  fb00b00a          MLANE    r0,r0,r10,r11         ;148
000438  d015              BEQ      |L2.1126|
                  |L2.1082|
00043a  900e              STR      r0,[sp,#0x38]         ;148
00043c  a821              ADD      r0,sp,#0x84           ;148
00043e  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
000442  9d01              LDR      r5,[sp,#4]            ;148
000444  b1d0              CBZ      r0,|L2.1148|
000446  464c              MOV      r4,r9                 ;148
000448  4628              MOV      r0,r5                 ;148
00044a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
00044e  4601              MOV      r1,r0                 ;148
000450  2c00              CMP      r4,#0                 ;148
000452  bfac              ITE      GE                    ;148
000454  4620              MOVGE    r0,r4                 ;148
000456  2000              MOVLT    r0,#0                 ;148
000458  4288              CMP      r0,r1                 ;148
00045a  dc06              BGT      |L2.1130|
00045c  e00a              B        |L2.1140|
                  |L2.1118|
00045e  2000              MOVS     r0,#0                 ;148
000460  e7d1              B        |L2.1030|
                  |L2.1122|
000462  2000              MOVS     r0,#0                 ;148
000464  e7dc              B        |L2.1056|
                  |L2.1126|
000466  2000              MOVS     r0,#0                 ;148
000468  e7e7              B        |L2.1082|
                  |L2.1130|
00046a  4628              MOV      r0,r5                 ;148
00046c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
000470  4604              MOV      r4,r0                 ;148
000472  e009              B        |L2.1160|
                  |L2.1140|
000474  2c00              CMP      r4,#0                 ;148
000476  bfb8              IT       LT                    ;148
000478  2400              MOVLT    r4,#0                 ;148
00047a  e005              B        |L2.1160|
                  |L2.1148|
00047c  2400              MOVS     r4,#0                 ;148
00047e  4628              MOV      r0,r5                 ;148
000480  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
000484  42a0              CMP      r0,r4                 ;148
000486  dbf0              BLT      |L2.1130|
                  |L2.1160|
000488  ed9f0af8          VLDR     s0,|L2.2156|
00048c  980c              LDR      r0,[sp,#0x30]         ;149
00048e  f10d0c20          ADD      r12,sp,#0x20          ;149
000492  9405              STR      r4,[sp,#0x14]         ;149
000494  b1b8              CBZ      r0,|L2.1222|
000496  9808              LDR      r0,[sp,#0x20]         ;149
000498  2800              CMP      r0,#0                 ;149
00049a  bfa4              ITT      GE                    ;149
00049c  9809              LDRGE    r0,[sp,#0x24]         ;149
00049e  2800              CMPGE    r0,#0                 ;149
0004a0  db11              BLT      |L2.1222|
0004a2  2001              MOVS     r0,#1                 ;149
0004a4  f88d0070          STRB     r0,[sp,#0x70]         ;149
0004a8  9806              LDR      r0,[sp,#0x18]         ;149
0004aa  901d              STR      r0,[sp,#0x74]         ;149
0004ac  9807              LDR      r0,[sp,#0x1c]         ;149
0004ae  e9cd041e          STRD     r0,r4,[sp,#0x78]      ;149
0004b2  9803              LDR      r0,[sp,#0xc]          ;149
0004b4  9020              STR      r0,[sp,#0x80]         ;149
0004b6  9804              LDR      r0,[sp,#0x10]         ;149
0004b8  9021              STR      r0,[sp,#0x84]         ;149
0004ba  9802              LDR      r0,[sp,#8]            ;149
0004bc  2100              MOVS     r1,#0                 ;149
0004be  9022              STR      r0,[sp,#0x88]         ;149
0004c0  2800              CMP      r0,#0                 ;149
0004c2  dd29              BLE      |L2.1304|
0004c4  e00a              B        |L2.1244|
                  |L2.1222|
0004c6  2172              MOVS     r1,#0x72              ;149
0004c8  48e9              LDR      r0,|L2.2160|
0004ca  e9cd0100          STRD     r0,r1,[sp,#0]         ;149
0004ce  a3e9              ADR      r3,|L2.2164|
0004d0  a2f7              ADR      r2,|L2.2224|
0004d2  a1fe              ADR      r1,|L2.2252|
0004d4  2005              MOVS     r0,#5                 ;149
0004d6  f7fffffe          BL       _Anki_Log
0004da  e01d              B        |L2.1304|
                  |L2.1244|
0004dc  e9dd0220          LDRD     r0,r2,[sp,#0x80]      ;149
0004e0  fb010002          MLA      r0,r1,r2,r0           ;149
0004e4  f8dc3008          LDR      r3,[r12,#8]           ;149
0004e8  f8dc2010          LDR      r2,[r12,#0x10]        ;149
0004ec  fb002303          MLA      r3,r0,r3,r2           ;149
0004f0  9a1f              LDR      r2,[sp,#0x7c]         ;149
0004f2  2000              MOVS     r0,#0                 ;149
0004f4  2a00              CMP      r2,#0                 ;149
0004f6  dd0b              BLE      |L2.1296|
                  |L2.1272|
0004f8  e9dd241d          LDRD     r2,r4,[sp,#0x74]      ;149
0004fc  fb002204          MLA      r2,r0,r4,r2           ;149
000500  eb030282          ADD      r2,r3,r2,LSL #2       ;149
000504  1c40              ADDS     r0,r0,#1              ;149
000506  ed820a00          VSTR     s0,[r2,#0]            ;149
00050a  9a1f              LDR      r2,[sp,#0x7c]         ;149
00050c  4282              CMP      r2,r0                 ;149
00050e  dcf3              BGT      |L2.1272|
                  |L2.1296|
000510  9822              LDR      r0,[sp,#0x88]         ;149
000512  1c49              ADDS     r1,r1,#1              ;149
000514  4288              CMP      r0,r1                 ;149
000516  dce1              BGT      |L2.1244|
                  |L2.1304|
000518  9a12              LDR      r2,[sp,#0x48]         ;153
00051a  2000              MOVS     r0,#0                 ;153
00051c  2a00              CMP      r2,#0                 ;153
00051e  dd3f              BLE      |L2.1440|
                  |L2.1312|
000520  991b              LDR      r1,[sp,#0x6c]         ;155
000522  9b2f              LDR      r3,[sp,#0xbc]         ;155
000524  f8d6c030          LDR      r12,[r6,#0x30]        ;155
000528  f8511020          LDR      r1,[r1,r0,LSL #2]     ;155
00052c  eb0c1c00          ADD      r12,r12,r0,LSL #4     ;155
000530  eb031301          ADD      r3,r3,r1,LSL #4       ;155
000534  f8dcc000          LDR      r12,[r12,#0]          ;156
000538  681c              LDR      r4,[r3,#0]            ;156
00053a  44a4              ADD      r12,r12,r4            ;156
00053c  f8c3c000          STR      r12,[r3,#0]           ;156
000540  9b2f              LDR      r3,[sp,#0xbc]         ;156
000542  f8d6c030          LDR      r12,[r6,#0x30]        ;156
000546  eb031301          ADD      r3,r3,r1,LSL #4       ;156
00054a  eb0c1c00          ADD      r12,r12,r0,LSL #4     ;156
00054e  685c              LDR      r4,[r3,#4]            ;157
000550  f8dcc004          LDR      r12,[r12,#4]          ;157
000554  44a4              ADD      r12,r12,r4            ;157
000556  f8c3c004          STR      r12,[r3,#4]           ;157
00055a  9b2f              LDR      r3,[sp,#0xbc]         ;157
00055c  f8d6c030          LDR      r12,[r6,#0x30]        ;157
000560  eb031301          ADD      r3,r3,r1,LSL #4       ;157
000564  eb0c1c00          ADD      r12,r12,r0,LSL #4     ;157
000568  689c              LDR      r4,[r3,#8]            ;158
00056a  f8dcc008          LDR      r12,[r12,#8]          ;158
00056e  44a4              ADD      r12,r12,r4            ;158
000570  f8c3c008          STR      r12,[r3,#8]           ;158
000574  9b2f              LDR      r3,[sp,#0xbc]         ;158
000576  f8d6c030          LDR      r12,[r6,#0x30]        ;158
00057a  eb031301          ADD      r3,r3,r1,LSL #4       ;158
00057e  eb0c1c00          ADD      r12,r12,r0,LSL #4     ;158
000582  68dc              LDR      r4,[r3,#0xc]          ;159
000584  f8dcc00c          LDR      r12,[r12,#0xc]        ;159
000588  1c40              ADDS     r0,r0,#1              ;153
00058a  44a4              ADD      r12,r12,r4            ;159
00058c  f8c3c00c          STR      r12,[r3,#0xc]         ;159
000590  9b40              LDR      r3,[sp,#0x100]        ;159
000592  eb030181          ADD      r1,r3,r1,LSL #2       ;159
000596  680b              LDR      r3,[r1,#0]            ;160
000598  1c5b              ADDS     r3,r3,#1              ;160
00059a  600b              STR      r3,[r1,#0]            ;153
00059c  4282              CMP      r2,r0                 ;153
00059e  dcbf              BGT      |L2.1312|
                  |L2.1440|
0005a0  f1b80f00          CMP      r8,#0                 ;163
0005a4  bf18              IT       NE                    ;163
0005a6  2f00              CMPNE    r7,#0                 ;163
0005a8  d038              BEQ      |L2.1564|
0005aa  68f8              LDR      r0,[r7,#0xc]          ;163
0005ac  2800              CMP      r0,#0                 ;163
0005ae  bf1f              ITTTT    NE                    ;163
0005b0  f8d8000c          LDRNE    r0,[r8,#0xc]          ;163
0005b4  2800              CMPNE    r0,#0                 ;163
0005b6  2000              MOVNE    r0,#0                 ;165
0005b8  2a00              CMPNE    r2,#0                 ;165
0005ba  dd2f              BLE      |L2.1564|
                  |L2.1468|
0005bc  6b3b              LDR      r3,[r7,#0x30]         ;169
0005be  991b              LDR      r1,[sp,#0x6c]         ;167
0005c0  f853c020          LDR      r12,[r3,r0,LSL #2]    ;169
0005c4  f8511020          LDR      r1,[r1,r0,LSL #2]     ;167
0005c8  9b4d              LDR      r3,[sp,#0x134]        ;167
0005ca  eb030381          ADD      r3,r3,r1,LSL #2       ;167
0005ce  681c              LDR      r4,[r3,#0]            ;169
0005d0  45a4              CMP      r12,r4                ;169
0005d2  dd0d              BLE      |L2.1520|
0005d4  f8c3c000          STR      r12,[r3,#0]           ;169
0005d8  f8d83030          LDR      r3,[r8,#0x30]         ;169
0005dc  eb030380          ADD      r3,r3,r0,LSL #2       ;169
0005e0  ed930a00          VLDR     s0,[r3,#0]            ;172
0005e4  9b0e              LDR      r3,[sp,#0x38]         ;172
0005e6  eb030181          ADD      r1,r3,r1,LSL #2       ;172
0005ea  ed810a00          VSTR     s0,[r1,#0]            ;172
0005ee  e012              B        |L2.1558|
                  |L2.1520|
0005f0  d111              BNE      |L2.1558|
0005f2  f8d83030          LDR      r3,[r8,#0x30]         ;174
0005f6  eb030380          ADD      r3,r3,r0,LSL #2       ;174
0005fa  ed930a00          VLDR     s0,[r3,#0]            ;174
0005fe  9b0e              LDR      r3,[sp,#0x38]         ;174
000600  eb030181          ADD      r1,r3,r1,LSL #2       ;174
000604  edd10a00          VLDR     s1,[r1,#0]            ;174
000608  eeb40ae0          VCMPE.F32 s0,s1                 ;174
00060c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;174
000610  bfc8              IT       GT                    ;175
000612  ed810a00          VSTRGT   s0,[r1,#0]            ;175
                  |L2.1558|
000616  1c40              ADDS     r0,r0,#1              ;165
000618  4290              CMP      r0,r2                 ;165
00061a  dbcf              BLT      |L2.1468|
                  |L2.1564|
00061c  2000              MOVS     r0,#0                 ;179
00061e  f1b90f00          CMP      r9,#0                 ;179
000622  bfc8              IT       GT                    ;182
000624  eddf2aaf          VLDRGT   s5,|L2.2276|
000628  dd6a              BLE      |L2.1792|
                  |L2.1578|
00062a  992f              LDR      r1,[sp,#0xbc]         ;179
00062c  eb011100          ADD      r1,r1,r0,LSL #4       ;179
000630  680a              LDR      r2,[r1,#0]            ;179
000632  9230              STR      r2,[sp,#0xc0]         ;179
000634  684a              LDR      r2,[r1,#4]            ;179
000636  9231              STR      r2,[sp,#0xc4]         ;179
000638  688a              LDR      r2,[r1,#8]            ;179
00063a  9232              STR      r2,[sp,#0xc8]         ;179
00063c  68ca              LDR      r2,[r1,#0xc]          ;179
00063e  9233              STR      r2,[sp,#0xcc]         ;179
000640  9a40              LDR      r2,[sp,#0x100]        ;179
000642  eb020280          ADD      r2,r2,r0,LSL #2       ;179
000646  ed920a00          VLDR     s0,[r2,#0]            ;182
00064a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;182
00064e  eec20a80          VDIV.F32 s1,s5,s0              ;182
000652  ed9d0a30          VLDR     s0,[sp,#0xc0]         ;184
000656  eeb80ac0          VCVT.F32.S32 s0,s0                 ;184
00065a  ee200a20          VMUL.F32 s0,s0,s1              ;184
00065e  eeb50ac0          VCMPE.F32 s0,#0.0               ;184
000662  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;184
000666  bfcc              ITE      GT                    ;184
000668  ee300a28          VADDGT.F32 s0,s0,s17             ;184
00066c  ee300a68          VSUBLE.F32 s0,s0,s17             ;184
000670  eefd1ac0          VCVT.S32.F32 s3,s0                 ;184
000674  ed9d0a31          VLDR     s0,[sp,#0xc4]         ;184
000678  eeb80ac0          VCVT.F32.S32 s0,s0                 ;184
00067c  ee200a20          VMUL.F32 s0,s0,s1              ;184
000680  eeb50ac0          VCMPE.F32 s0,#0.0               ;184
000684  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;184
000688  bfcc              ITE      GT                    ;184
00068a  ee300a28          VADDGT.F32 s0,s0,s17             ;184
00068e  ee300a68          VSUBLE.F32 s0,s0,s17             ;184
000692  eebd1ac0          VCVT.S32.F32 s2,s0                 ;184
000696  ed9d0a32          VLDR     s0,[sp,#0xc8]         ;184
00069a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;184
00069e  ee200a20          VMUL.F32 s0,s0,s1              ;184
0006a2  eeb50ac0          VCMPE.F32 s0,#0.0               ;184
0006a6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;184
0006aa  bfcc              ITE      GT                    ;184
0006ac  ee300a28          VADDGT.F32 s0,s0,s17             ;184
0006b0  ee300a68          VSUBLE.F32 s0,s0,s17             ;184
0006b4  eebd2ac0          VCVT.S32.F32 s4,s0                 ;184
0006b8  ed9d0a33          VLDR     s0,[sp,#0xcc]         ;184
0006bc  eeb80ac0          VCVT.F32.S32 s0,s0                 ;184
0006c0  ee200a20          VMUL.F32 s0,s0,s1              ;184
0006c4  eeb50ac0          VCMPE.F32 s0,#0.0               ;184
0006c8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;184
0006cc  bfcc              ITE      GT                    ;184
0006ce  ee300a28          VADDGT.F32 s0,s0,s17             ;184
0006d2  ee300a68          VSUBLE.F32 s0,s0,s17             ;184
0006d6  eebd0ac0          VCVT.S32.F32 s0,s0                 ;184
0006da  edcd1a1c          VSTR     s3,[sp,#0x70]         ;184
0006de  ed8d1a1d          VSTR     s2,[sp,#0x74]         ;184
0006e2  ed8d2a1e          VSTR     s4,[sp,#0x78]         ;184
0006e6  ed8d0a1f          VSTR     s0,[sp,#0x7c]         ;184
0006ea  edc11a00          VSTR     s3,[r1,#0]            ;184
0006ee  9a1d              LDR      r2,[sp,#0x74]         ;184
0006f0  604a              STR      r2,[r1,#4]            ;184
0006f2  9a1e              LDR      r2,[sp,#0x78]         ;184
0006f4  608a              STR      r2,[r1,#8]            ;184
0006f6  9a1f              LDR      r2,[sp,#0x7c]         ;184
0006f8  1c40              ADDS     r0,r0,#1              ;179
0006fa  60ca              STR      r2,[r1,#0xc]          ;179
0006fc  4548              CMP      r0,r9                 ;179
0006fe  db94              BLT      |L2.1578|
                  |L2.1792|
000700  2400              MOVS     r4,#0                 ;179
000702  4630              MOV      r0,r6                 ;179
000704  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
000708  4284              CMP      r4,r0                 ;179
00070a  dd03              BLE      |L2.1812|
00070c  4630              MOV      r0,r6                 ;179
00070e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
000712  4604              MOV      r4,r0                 ;179
                  |L2.1812|
000714  60f4              STR      r4,[r6,#0xc]          ;193
000716  b157              CBZ      r7,|L2.1838|
000718  2400              MOVS     r4,#0                 ;193
00071a  4638              MOV      r0,r7                 ;193
00071c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
000720  42a0              CMP      r0,r4                 ;193
000722  da03              BGE      |L2.1836|
000724  4638              MOV      r0,r7                 ;193
000726  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
00072a  4604              MOV      r4,r0                 ;193
                  |L2.1836|
00072c  60fc              STR      r4,[r7,#0xc]          ;193
                  |L2.1838|
00072e  f1b80f00          CMP      r8,#0                 ;196
000732  d00b              BEQ      |L2.1868|
000734  2400              MOVS     r4,#0                 ;196
000736  4640              MOV      r0,r8                 ;196
000738  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
00073c  42a0              CMP      r0,r4                 ;196
00073e  da03              BGE      |L2.1864|
000740  4640              MOV      r0,r8                 ;196
000742  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
000746  4604              MOV      r4,r0                 ;196
                  |L2.1864|
000748  f8c8400c          STR      r4,[r8,#0xc]          ;196
                  |L2.1868|
00074c  2400              MOVS     r4,#0                 ;199
00074e  f1b90f00          CMP      r9,#0                 ;199
000752  f77fad8c          BLE      |L2.622|
                  |L2.1878|
000756  982f              LDR      r0,[sp,#0xbc]         ;199
000758  f1b80f00          CMP      r8,#0                 ;202
00075c  eb001004          ADD      r0,r0,r4,LSL #4       ;202
000760  6801              LDR      r1,[r0,#0]            ;202
000762  911c              STR      r1,[sp,#0x70]         ;202
000764  6841              LDR      r1,[r0,#4]            ;202
000766  911d              STR      r1,[sp,#0x74]         ;202
000768  6881              LDR      r1,[r0,#8]            ;202
00076a  911e              STR      r1,[sp,#0x78]         ;202
00076c  68c0              LDR      r0,[r0,#0xc]          ;202
00076e  901f              STR      r0,[sp,#0x7c]         ;202
000770  bf14              ITE      NE                    ;202
000772  984d              LDRNE    r0,[sp,#0x134]        ;202
000774  9840              LDREQ    r0,[sp,#0x100]        ;202
000776  f8505024          LDR      r5,[r0,r4,LSL #2]     ;202
00077a  980e              LDR      r0,[sp,#0x38]         ;202
00077c  eb000084          ADD      r0,r0,r4,LSL #2       ;202
000780  ed909a00          VLDR     s18,[r0,#0]           ;203
000784  986e              LDR      r0,[sp,#0x1b8]        ;205
000786  4285              CMP      r5,r0                 ;205
000788  dd6e              BLE      |L2.2152|
00078a  2000              MOVS     r0,#0                 ;211
00078c  f1b90f00          CMP      r9,#0                 ;211
000790  dd69              BLE      |L2.2150|
                  |L2.1938|
000792  9940              LDR      r1,[sp,#0x100]        ;213
000794  42a0              CMP      r0,r4                 ;215
000796  f8513020          LDR      r3,[r1,r0,LSL #2]     ;213
00079a  bf1c              ITT      NE                    ;215
00079c  996e              LDRNE    r1,[sp,#0x1b8]        ;215
00079e  428b              CMPNE    r3,r1                 ;215
0007a0  dd5e              BLE      |L2.2144|
0007a2  992f              LDR      r1,[sp,#0xbc]         ;215
0007a4  eb011100          ADD      r1,r1,r0,LSL #4       ;215
0007a8  680a              LDR      r2,[r1,#0]            ;215
0007aa  9230              STR      r2,[sp,#0xc0]         ;215
0007ac  684a              LDR      r2,[r1,#4]            ;215
0007ae  9231              STR      r2,[sp,#0xc4]         ;215
0007b0  688a              LDR      r2,[r1,#8]            ;215
0007b2  9232              STR      r2,[sp,#0xc8]         ;215
0007b4  68c9              LDR      r1,[r1,#0xc]          ;215
0007b6  9133              STR      r1,[sp,#0xcc]         ;215
0007b8  e9dd2130          LDRD     r2,r1,[sp,#0xc0]      ;215
0007bc  1a8a              SUBS     r2,r1,r2              ;221
0007be  ee002a10          VMOV     s0,r2                 ;226
0007c2  e9ddc132          LDRD     r12,r1,[sp,#0xc8]     ;221
0007c6  eeb80ac0          VCVT.F32.S32 s0,s0                 ;226
0007ca  eba1010c          SUB      r1,r1,r12             ;224
0007ce  ee600a08          VMUL.F32 s1,s0,s16             ;226
0007d2  eef50ac0          VCMPE.F32 s1,#0.0               ;226
0007d6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;226
0007da  bfcc              ITE      GT                    ;226
0007dc  ee300aa8          VADDGT.F32 s0,s1,s17             ;226
0007e0  ee300ae8          VSUBLE.F32 s0,s1,s17             ;226
0007e4  eefd0ac0          VCVT.S32.F32 s1,s0                 ;226
0007e8  ee001a10          VMOV     s0,r1                 ;227
0007ec  ee102a90          VMOV     r2,s1                 ;227
0007f0  eeb80ac0          VCVT.F32.S32 s0,s0                 ;227
0007f4  ee600a08          VMUL.F32 s1,s0,s16             ;227
0007f8  eef50ac0          VCMPE.F32 s1,#0.0               ;227
0007fc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;227
000800  bfcc              ITE      GT                    ;227
000802  ee300aa8          VADDGT.F32 s0,s1,s17             ;227
000806  ee300ae8          VSUBLE.F32 s0,s1,s17             ;227
00080a  eefd0ac0          VCVT.S32.F32 s1,s0                 ;227
00080e  4284              CMP      r4,r0                 ;229
000810  ee101a90          VMOV     r1,s1                 ;229
000814  d024              BEQ      |L2.2144|
000816  f8dda0c0          LDR      r10,[sp,#0xc0]        ;230
00081a  f8ddc070          LDR      r12,[sp,#0x70]        ;230
00081e  ebaa0a02          SUB      r10,r10,r2            ;230
000822  45d4              CMP      r12,r10               ;230
000824  db1c              BLT      |L2.2144|
000826  f8dda0c8          LDR      r10,[sp,#0xc8]        ;231
00082a  f8ddc078          LDR      r12,[sp,#0x78]        ;231
00082e  ebaa0a01          SUB      r10,r10,r1            ;231
000832  45d4              CMP      r12,r10               ;231
000834  db14              BLT      |L2.2144|
000836  f8dda0c4          LDR      r10,[sp,#0xc4]        ;232
00083a  f8ddc074          LDR      r12,[sp,#0x74]        ;232
00083e  4452              ADD      r2,r2,r10             ;232
000840  4562              CMP      r2,r12                ;232
000842  db0d              BLT      |L2.2144|
000844  f8ddc0cc          LDR      r12,[sp,#0xcc]        ;233
000848  9a1f              LDR      r2,[sp,#0x7c]         ;233
00084a  4461              ADD      r1,r1,r12             ;233
00084c  428a              CMP      r2,r1                 ;233
00084e  dc07              BGT      |L2.2144|
000850  2d03              CMP      r5,#3                 ;234
000852  bfb4              ITE      LT                    ;234
000854  2103              MOVLT    r1,#3                 ;234
000856  4629              MOVGE    r1,r5                 ;234
000858  4299              CMP      r1,r3                 ;234
00085a  bfa8              IT       GE                    ;234
00085c  2d03              CMPGE    r5,#3                 ;234
00085e  db02              BLT      |L2.2150|
                  |L2.2144|
000860  1c40              ADDS     r0,r0,#1              ;211
000862  4548              CMP      r0,r9                 ;211
000864  db95              BLT      |L2.1938|
                  |L2.2150|
000866  e03f              B        |L2.2280|
                  |L2.2152|
000868  e076              B        |L2.2392|
00086a  0000              DCW      0x0000
                  |L2.2156|
00086c  7f7fffff          DCFS     0x7f7fffff ; 3.4028234663852886e+38
                  |L2.2160|
                          DCD      _ZZN4Anki8Embedded10ArraySliceIfE3SetEfE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<float>::Set(float)::__PRETTY_FUNCTION__
                  |L2.2164|
000874  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
000878  6f726574
00087c  6563685c
000880  636f6d6d
000884  6f6e5c69
000888  6e636c75
00088c  64655c61
000890  6e6b692f
000894  636f6d6d
000898  6f6e2f72
00089c  6f626f74
0008a0  2f617272
0008a4  617953  
0008a7  6c696365          DCB      "lices.h",0
0008ab  732e6800
0008af  00                DCB      0
                  |L2.2224|
0008b0  41727261          DCB      "Array<Type> is not valid",0
0008b4  793c5479
0008b8  70653e20
0008bc  6973206e
0008c0  6f742076
0008c4  616c6964
0008c8  00      
0008c9  00                DCB      0
0008ca  00                DCB      0
0008cb  00                DCB      0
                  |L2.2252|
0008cc  41727261          DCB      "ArraySlice<Type>::Set",0
0008d0  79536c69
0008d4  63653c54
0008d8  7970653e
0008dc  3a3a5365
0008e0  7400    
0008e2  00                DCB      0
0008e3  00                DCB      0
                  |L2.2276|
0008e4  3f800000          DCFS     0x3f800000 ; 1
                  |L2.2280|
0008e8  4548              CMP      r0,r9                 ;238
0008ea  d135              BNE      |L2.2392|
0008ec  4630              MOV      r0,r6                 ;238
0008ee  f8d6a00c          LDR      r10,[r6,#0xc]         ;238
0008f2  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
0008f6  4550              CMP      r0,r10                ;238
0008f8  dd0d              BLE      |L2.2326|
0008fa  6b30              LDR      r0,[r6,#0x30]         ;238
0008fc  991c              LDR      r1,[sp,#0x70]         ;238
0008fe  eb00100a          ADD      r0,r0,r10,LSL #4      ;238
000902  6001              STR      r1,[r0,#0]            ;238
000904  991d              LDR      r1,[sp,#0x74]         ;238
000906  6041              STR      r1,[r0,#4]            ;238
000908  991e              LDR      r1,[sp,#0x78]         ;238
00090a  6081              STR      r1,[r0,#8]            ;238
00090c  991f              LDR      r1,[sp,#0x7c]         ;238
00090e  60c1              STR      r1,[r0,#0xc]          ;238
000910  f10a0101          ADD      r1,r10,#1             ;238
000914  60f1              STR      r1,[r6,#0xc]          ;238
                  |L2.2326|
000916  b167              CBZ      r7,|L2.2354|
000918  4638              MOV      r0,r7                 ;242
00091a  f8d7a00c          LDR      r10,[r7,#0xc]         ;242
00091e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
000922  4550              CMP      r0,r10                ;242
000924  dd05              BLE      |L2.2354|
000926  6b38              LDR      r0,[r7,#0x30]         ;242
000928  f10a0101          ADD      r1,r10,#1             ;242
00092c  f840502a          STR      r5,[r0,r10,LSL #2]    ;242
000930  60f9              STR      r1,[r7,#0xc]          ;242
                  |L2.2354|
000932  f1b80f00          CMP      r8,#0                 ;245
000936  d00f              BEQ      |L2.2392|
000938  4640              MOV      r0,r8                 ;245
00093a  f8d8500c          LDR      r5,[r8,#0xc]          ;245
00093e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
000942  42a8              CMP      r0,r5                 ;245
000944  dd08              BLE      |L2.2392|
000946  f8d80030          LDR      r0,[r8,#0x30]         ;245
00094a  1c69              ADDS     r1,r5,#1              ;245
00094c  eb000085          ADD      r0,r0,r5,LSL #2       ;245
000950  ed809a00          VSTR     s18,[r0,#0]           ;245
000954  f8c8100c          STR      r1,[r8,#0xc]          ;245
                  |L2.2392|
000958  1c64              ADDS     r4,r4,#1              ;199
00095a  454c              CMP      r4,r9                 ;199
00095c  f6ffaefb          BLT      |L2.1878|
000960  e485              B        |L2.622|
;;;250    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded10Classifier17CascadeClassifierC1EbiiiiiRKNS0_15FixedLengthListINS2_5StageEEERKNS3_INS2_5DTreeEEERKNS3_INS2_9DTreeNodeEEERKNS3_IfEERKNS3_IiEE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10Classifier17CascadeClassifierC2EbiiiiiRKNS0_15FixedLengthListINS2_5StageEEERKNS3_INS2_5DTreeEEERKNS3_INS2_9DTreeNodeEEERKNS3_IfEERKNS3_IiEE                  ; Alternate entry point ; Anki::Embedded::Classifier::CascadeClassifier::CascadeClassifier__sub_object(bool, int, int, int, int, int, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>&, const Anki::Embedded::FixedLengthList<float>&, const Anki::Embedded::FixedLengthList<int>&)
                  _ZN4Anki8Embedded10Classifier17CascadeClassifierC1EbiiiiiRKNS0_15FixedLengthListINS2_5StageEEERKNS3_INS2_5DTreeEEERKNS3_INS2_9DTreeNodeEEERKNS3_IfEERKNS3_IiEE PROC ; Anki::Embedded::Classifier::CascadeClassifier::CascadeClassifier(bool, int, int, int, int, int, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>&, const Anki::Embedded::FixedLengthList<float>&, const Anki::Embedded::FixedLengthList<int>&)
;;;255    
;;;256          CascadeClassifier::CascadeClassifier(
;;;257            const bool isStumpBased,
;;;258            const s32 stageType,
;;;259            const s32 featureType,
;;;260            const s32 ncategories,
;;;261            const s32 origWinHeight,
;;;262            const s32 origWinWidth,
;;;263            const FixedLengthList<CascadeClassifier::Stage> &stages,
;;;264            const FixedLengthList<CascadeClassifier::DTree> &classifiers,
;;;265            const FixedLengthList<CascadeClassifier::DTreeNode> &nodes,
;;;266            const FixedLengthList<f32> &leaves,
;;;267            const FixedLengthList<s32> &subsets)
;;;268            : isValid(false)
;;;269          {
;;;270            AnkiConditionalErrorAndReturn(AreValid(stages, classifiers, nodes, leaves, subsets),
;;;271              "CascadeClassifier::CascadeClassifier", "Invalid objects");
;;;272    
;;;273            this->data.isStumpBased = isStumpBased;
;;;274            this->data.stageType = stageType;
;;;275            this->data.featureType = featureType;
;;;276            this->data.ncategories = ncategories;
;;;277            this->data.origWinHeight = origWinHeight;
;;;278            this->data.origWinWidth = origWinWidth;
;;;279    
;;;280            this->data.stages = stages;
;;;281            this->data.classifiers = classifiers;
;;;282            this->data.nodes = nodes;
;;;283            this->data.leaves = leaves;
;;;284            this->data.subsets = subsets;
;;;285    
;;;286            this->isValid = true;
;;;287          } // CascadeClassifier::CascadeClassifier()
;;;288    
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b083              SUB      sp,sp,#0xc
000006  2100              MOVS     r1,#0
000008  e9dd6516          LDRD     r6,r5,[sp,#0x58]
00000c  e9dd8714          LDRD     r8,r7,[sp,#0x50]
000010  e9dda912          LDRD     r10,r9,[sp,#0x48]
000014  f8ddb040          LDR      r11,[sp,#0x40]
000018  f8001b04          STRB     r1,[r0],#4
00001c  f7fffffe          BL       _ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC1Ev ; Anki::Embedded::Classifier::CascadeClassifier::Data::Data()
000020  1f04              SUBS     r4,r0,#4
000022  4633              MOV      r3,r6
000024  463a              MOV      r2,r7
000026  4641              MOV      r1,r8
000028  4648              MOV      r0,r9
00002a  9500              STR      r5,[sp,#0]
00002c  f7fffffe          BL       _ZN4Anki8Embedded8AreValidINS0_15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEEENS2_INS4_5DTreeEEENS2_INS4_9DTreeNodeEEENS2_IfEENS2_IiEEEEbRKT_RKT0_RKT1_RKT2_RKT3_ ; Anki::Embedded::AreValid<Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>, Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>, Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>, Anki::Embedded::FixedLengthList<float>, Anki::Embedded::FixedLengthList<int>>(const T1&, const T2&, const T3&, const T4&, const T5&)
000030  2800              CMP      r0,#0
000032  f00080bf          BEQ.W    |L3.436|
000036  9804              LDR      r0,[sp,#0x10]
000038  7120              STRB     r0,[r4,#4]
00003a  9805              LDR      r0,[sp,#0x14]
00003c  60a0              STR      r0,[r4,#8]
00003e  9806              LDR      r0,[sp,#0x18]
000040  e9c40b03          STRD     r0,r11,[r4,#0xc]
000044  9811              LDR      r0,[sp,#0x44]
000046  e9c40a05          STRD     r0,r10,[r4,#0x14]
00004a  e9d90200          LDRD     r0,r2,[r9,#0]
00004e  f104011c          ADD      r1,r4,#0x1c
000052  f8d93008          LDR      r3,[r9,#8]
000056  6263              STR      r3,[r4,#0x24]
000058  e9c10200          STRD     r0,r2,[r1,#0]
00005c  e9d90203          LDRD     r0,r2,[r9,#0xc]
000060  f8d93014          LDR      r3,[r9,#0x14]
000064  6323              STR      r3,[r4,#0x30]
000066  e9c10203          STRD     r0,r2,[r1,#0xc]
00006a  f8d92018          LDR      r2,[r9,#0x18]
00006e  6362              STR      r2,[r4,#0x34]
000070  f8d9201c          LDR      r2,[r9,#0x1c]
000074  63a2              STR      r2,[r4,#0x38]
000076  f8d92020          LDR      r2,[r9,#0x20]
00007a  63e2              STR      r2,[r4,#0x3c]
00007c  f8d92024          LDR      r2,[r9,#0x24]
000080  6422              STR      r2,[r4,#0x40]
000082  f8d92028          LDR      r2,[r9,#0x28]
000086  6462              STR      r2,[r4,#0x44]
000088  f8d9002c          LDR      r0,[r9,#0x2c]
00008c  62c8              STR      r0,[r1,#0x2c]
00008e  f8d90030          LDR      r0,[r9,#0x30]
000092  6308              STR      r0,[r1,#0x30]
000094  e9d80200          LDRD     r0,r2,[r8,#0]
000098  3134              ADDS     r1,r1,#0x34
00009a  f8d83008          LDR      r3,[r8,#8]
00009e  65a3              STR      r3,[r4,#0x58]
0000a0  e9c10200          STRD     r0,r2,[r1,#0]
0000a4  e9d80203          LDRD     r0,r2,[r8,#0xc]
0000a8  f8d83014          LDR      r3,[r8,#0x14]
0000ac  6663              STR      r3,[r4,#0x64]
0000ae  e9c10203          STRD     r0,r2,[r1,#0xc]
0000b2  f8d82018          LDR      r2,[r8,#0x18]
0000b6  66a2              STR      r2,[r4,#0x68]
0000b8  f8d8201c          LDR      r2,[r8,#0x1c]
0000bc  66e2              STR      r2,[r4,#0x6c]
0000be  f8d82020          LDR      r2,[r8,#0x20]
0000c2  6722              STR      r2,[r4,#0x70]
0000c4  f8d82024          LDR      r2,[r8,#0x24]
0000c8  6762              STR      r2,[r4,#0x74]
0000ca  f8d82028          LDR      r2,[r8,#0x28]
0000ce  67a2              STR      r2,[r4,#0x78]
0000d0  f8d8002c          LDR      r0,[r8,#0x2c]
0000d4  62c8              STR      r0,[r1,#0x2c]
0000d6  f8d80030          LDR      r0,[r8,#0x30]
0000da  6308              STR      r0,[r1,#0x30]
0000dc  e9d70200          LDRD     r0,r2,[r7,#0]
0000e0  3134              ADDS     r1,r1,#0x34
0000e2  68bb              LDR      r3,[r7,#8]
0000e4  f8c4308c          STR      r3,[r4,#0x8c]
0000e8  e9c10200          STRD     r0,r2,[r1,#0]
0000ec  e9d70203          LDRD     r0,r2,[r7,#0xc]
0000f0  697b              LDR      r3,[r7,#0x14]
0000f2  f8c43098          STR      r3,[r4,#0x98]
0000f6  e9c10203          STRD     r0,r2,[r1,#0xc]
0000fa  69ba              LDR      r2,[r7,#0x18]
0000fc  f8c4209c          STR      r2,[r4,#0x9c]
000100  69fa              LDR      r2,[r7,#0x1c]
000102  f8c420a0          STR      r2,[r4,#0xa0]
000106  6a3a              LDR      r2,[r7,#0x20]
000108  f8c420a4          STR      r2,[r4,#0xa4]
00010c  6a7a              LDR      r2,[r7,#0x24]
00010e  f8c420a8          STR      r2,[r4,#0xa8]
000112  6aba              LDR      r2,[r7,#0x28]
000114  f8c420ac          STR      r2,[r4,#0xac]
000118  6af8              LDR      r0,[r7,#0x2c]
00011a  62c8              STR      r0,[r1,#0x2c]
00011c  6b38              LDR      r0,[r7,#0x30]
00011e  6308              STR      r0,[r1,#0x30]
000120  e9d60200          LDRD     r0,r2,[r6,#0]
000124  3134              ADDS     r1,r1,#0x34
000126  68b3              LDR      r3,[r6,#8]
000128  f8c430c0          STR      r3,[r4,#0xc0]
00012c  e9c10200          STRD     r0,r2,[r1,#0]
000130  e9d60203          LDRD     r0,r2,[r6,#0xc]
000134  6973              LDR      r3,[r6,#0x14]
000136  f8c430cc          STR      r3,[r4,#0xcc]
00013a  e9c10203          STRD     r0,r2,[r1,#0xc]
00013e  69b2              LDR      r2,[r6,#0x18]
000140  f8c420d0          STR      r2,[r4,#0xd0]
000144  69f2              LDR      r2,[r6,#0x1c]
000146  f8c420d4          STR      r2,[r4,#0xd4]
00014a  6a32              LDR      r2,[r6,#0x20]
00014c  f8c420d8          STR      r2,[r4,#0xd8]
000150  6a72              LDR      r2,[r6,#0x24]
000152  f8c420dc          STR      r2,[r4,#0xdc]
000156  6ab2              LDR      r2,[r6,#0x28]
000158  f8c420e0          STR      r2,[r4,#0xe0]
00015c  6af0              LDR      r0,[r6,#0x2c]
00015e  62c8              STR      r0,[r1,#0x2c]
000160  6b30              LDR      r0,[r6,#0x30]
000162  6308              STR      r0,[r1,#0x30]
000164  e9d50200          LDRD     r0,r2,[r5,#0]
000168  3134              ADDS     r1,r1,#0x34
00016a  68ab              LDR      r3,[r5,#8]
00016c  f8c430f4          STR      r3,[r4,#0xf4]
000170  e9c10200          STRD     r0,r2,[r1,#0]
000174  e9d50203          LDRD     r0,r2,[r5,#0xc]
000178  696b              LDR      r3,[r5,#0x14]
00017a  f8c43100          STR      r3,[r4,#0x100]
00017e  e9c10203          STRD     r0,r2,[r1,#0xc]
000182  69aa              LDR      r2,[r5,#0x18]
000184  f8c42104          STR      r2,[r4,#0x104]
000188  69ea              LDR      r2,[r5,#0x1c]
00018a  f8c42108          STR      r2,[r4,#0x108]
00018e  6a2a              LDR      r2,[r5,#0x20]
000190  f8c4210c          STR      r2,[r4,#0x10c]
000194  6a6a              LDR      r2,[r5,#0x24]
000196  f8c42110          STR      r2,[r4,#0x110]
00019a  6aaa              LDR      r2,[r5,#0x28]
00019c  f8c42114          STR      r2,[r4,#0x114]
0001a0  6ae8              LDR      r0,[r5,#0x2c]
0001a2  62c8              STR      r0,[r1,#0x2c]
0001a4  6b28              LDR      r0,[r5,#0x30]
0001a6  6308              STR      r0,[r1,#0x30]
0001a8  2001              MOVS     r0,#1
0001aa  7020              STRB     r0,[r4,#0]
                  |L3.428|
0001ac  b007              ADD      sp,sp,#0x1c
0001ae  4620              MOV      r0,r4
0001b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.436|
0001b4  f44f7187          MOV      r1,#0x10e
0001b8  4804              LDR      r0,|L3.460|
0001ba  e9cd0100          STRD     r0,r1,[sp,#0]
0001be  a304              ADR      r3,|L3.464|
0001c0  a210              ADR      r2,|L3.516|
0001c2  a114              ADR      r1,|L3.532|
0001c4  2005              MOVS     r0,#5
0001c6  f7fffffe          BL       _Anki_Log
0001ca  e7ef              B        |L3.428|
                          ENDP

                  |L3.460|
                          DCD      ||.constdata||
                  |L3.464|
0001d0  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\cascadeClassifier.cpp"
0001d4  6f726574
0001d8  6563685c
0001dc  76697369
0001e0  6f6e5c72
0001e4  6f626f74
0001e8  5c737263
0001ec  5c636173
0001f0  63616465
0001f4  436c6173
0001f8  73696669
0001fc  65722e63
000200  7070    
000202  00                DCB      0
000203  00                DCB      0
                  |L3.516|
000204  496e7661          DCB      "Invalid objects",0
000208  6c696420
00020c  6f626a65
000210  63747300
                  |L3.532|
000214  43617363          DCB      "CascadeClassifier::CascadeClassifier",0
000218  61646543
00021c  6c617373
000220  69666965
000224  723a3a43
000228  61736361
00022c  6465436c
000230  61737369
000234  66696572
000238  00      
000239  00                DCB      0
00023a  00                DCB      0
00023b  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded10Classifier17CascadeClassifierC1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded10Classifier17CascadeClassifierC2Ev                  ; Alternate entry point ; Anki::Embedded::Classifier::CascadeClassifier::CascadeClassifier__sub_object()
                  _ZN4Anki8Embedded10Classifier17CascadeClassifierC1Ev PROC ; Anki::Embedded::Classifier::CascadeClassifier::CascadeClassifier()
;;;250    
;;;251          CascadeClassifier::CascadeClassifier()
;;;252            : isValid(false)
;;;253          {
;;;254          }
;;;255    
000000  b510              PUSH     {r4,lr}
000002  2100              MOVS     r1,#0
000004  f8001b04          STRB     r1,[r0],#4
000008  f7fffffe          BL       _ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC1Ev ; Anki::Embedded::Classifier::CascadeClassifier::Data::Data()
00000c  1f00              SUBS     r0,r0,#4
00000e  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP10LBPFeature10updatePtrsERKNS0_29ScrollingIntegralImage_u8_s32E||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP10LBPFeature10updatePtrsERKNS0_29ScrollingIntegralImage_u8_s32E PROC ; Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature::updatePtrs(const Anki::Embedded::ScrollingIntegralImage_u8_s32&)
;;;853    
;;;854          void CascadeClassifier_LBP::LBPFeature::updatePtrs(const ScrollingIntegralImage_u8_s32 &sum)
000000  b470              PUSH     {r4-r6}
000002  690b              LDR      r3,[r1,#0x10]
000004  6889              LDR      r1,[r1,#8]
;;;855          {
;;;856            const int* ptr = sum.Pointer(0,0);
000006  2200              MOVS     r2,#0
000008  fb023201          MLA      r2,r2,r1,r3
00000c  b085              SUB      sp,sp,#0x14           ;855
00000e  6803              LDR      r3,[r0,#0]            ;855
000010  9300              STR      r3,[sp,#0]            ;855
000012  6843              LDR      r3,[r0,#4]            ;855
000014  9301              STR      r3,[sp,#4]            ;855
000016  6883              LDR      r3,[r0,#8]            ;855
000018  9302              STR      r3,[sp,#8]            ;855
00001a  68c3              LDR      r3,[r0,#0xc]          ;855
00001c  9303              STR      r3,[sp,#0xc]          ;855
00001e  e9ddc300          LDRD     r12,r3,[sp,#0]        ;855
;;;857            const s32 step = sum.get_stride() / sizeof(s32);
;;;858            Rectangle<s32> tr = rect;
;;;859    
;;;860            const s32 width = tr.right - tr.left;
000022  eba30c0c          SUB      r12,r3,r12
000026  e9dd4302          LDRD     r4,r3,[sp,#8]
;;;861            const s32 height = tr.bottom - tr.top;
00002a  1b1c              SUBS     r4,r3,r4
;;;862    
;;;863            ANKI_SUM_PTRS( p[0], p[1], p[4], p[5], ptr, tr, step );
00002c  9b00              LDR      r3,[sp,#0]
00002e  9d02              LDR      r5,[sp,#8]
000030  0889              LSRS     r1,r1,#2              ;857
000032  eb020383          ADD      r3,r2,r3,LSL #2
000036  434d              MULS     r5,r1,r5
000038  eb030585          ADD      r5,r3,r5,LSL #2
00003c  6105              STR      r5,[r0,#0x10]
00003e  9d01              LDR      r5,[sp,#4]
000040  9e02              LDR      r6,[sp,#8]
000042  eb020585          ADD      r5,r2,r5,LSL #2
000046  434e              MULS     r6,r1,r6
000048  eb050586          ADD      r5,r5,r6,LSL #2
00004c  6145              STR      r5,[r0,#0x14]
00004e  9d03              LDR      r5,[sp,#0xc]
000050  434d              MULS     r5,r1,r5
000052  eb030385          ADD      r3,r3,r5,LSL #2
000056  6203              STR      r3,[r0,#0x20]
000058  9b01              LDR      r3,[sp,#4]
00005a  9d03              LDR      r5,[sp,#0xc]
00005c  eb020383          ADD      r3,r2,r3,LSL #2
000060  434d              MULS     r5,r1,r5
000062  eb030385          ADD      r3,r3,r5,LSL #2
;;;864            tr.left += 2*width;
000066  6243              STR      r3,[r0,#0x24]
000068  9b00              LDR      r3,[sp,#0]
;;;865            tr.right += 2*width;
;;;866    
;;;867            ANKI_SUM_PTRS( p[2], p[3], p[6], p[7], ptr, tr, step );
00006a  9d02              LDR      r5,[sp,#8]
00006c  eb03034c          ADD      r3,r3,r12,LSL #1      ;864
000070  9300              STR      r3,[sp,#0]            ;865
000072  9b01              LDR      r3,[sp,#4]            ;865
000074  434d              MULS     r5,r1,r5
000076  eb03034c          ADD      r3,r3,r12,LSL #1      ;865
00007a  9301              STR      r3,[sp,#4]
00007c  9b00              LDR      r3,[sp,#0]
00007e  eb020383          ADD      r3,r2,r3,LSL #2
000082  eb030585          ADD      r5,r3,r5,LSL #2
000086  6185              STR      r5,[r0,#0x18]
000088  9d01              LDR      r5,[sp,#4]
00008a  9e02              LDR      r6,[sp,#8]
00008c  eb020585          ADD      r5,r2,r5,LSL #2
000090  434e              MULS     r6,r1,r6
000092  eb050586          ADD      r5,r5,r6,LSL #2
000096  61c5              STR      r5,[r0,#0x1c]
000098  9d03              LDR      r5,[sp,#0xc]
00009a  434d              MULS     r5,r1,r5
00009c  eb030585          ADD      r5,r3,r5,LSL #2
0000a0  6285              STR      r5,[r0,#0x28]
0000a2  9d01              LDR      r5,[sp,#4]
0000a4  9e03              LDR      r6,[sp,#0xc]
0000a6  eb020585          ADD      r5,r2,r5,LSL #2
0000aa  434e              MULS     r6,r1,r6
0000ac  eb050586          ADD      r5,r5,r6,LSL #2
;;;868            tr.top += 2*height;
0000b0  62c5              STR      r5,[r0,#0x2c]
0000b2  9d02              LDR      r5,[sp,#8]
0000b4  eb050544          ADD      r5,r5,r4,LSL #1
;;;869            tr.bottom += 2*height;
0000b8  9502              STR      r5,[sp,#8]
0000ba  9d03              LDR      r5,[sp,#0xc]
0000bc  eb050444          ADD      r4,r5,r4,LSL #1
;;;870    
;;;871            ANKI_SUM_PTRS( p[10], p[11], p[14], p[15], ptr, tr, step );
0000c0  9403              STR      r4,[sp,#0xc]
0000c2  9c02              LDR      r4,[sp,#8]
0000c4  434c              MULS     r4,r1,r4
0000c6  eb030484          ADD      r4,r3,r4,LSL #2
0000ca  6384              STR      r4,[r0,#0x38]
0000cc  9c01              LDR      r4,[sp,#4]
0000ce  9d02              LDR      r5,[sp,#8]
0000d0  eb020484          ADD      r4,r2,r4,LSL #2
0000d4  434d              MULS     r5,r1,r5
0000d6  eb040485          ADD      r4,r4,r5,LSL #2
0000da  63c4              STR      r4,[r0,#0x3c]
0000dc  9c03              LDR      r4,[sp,#0xc]
0000de  434c              MULS     r4,r1,r4
0000e0  eb030384          ADD      r3,r3,r4,LSL #2
0000e4  6483              STR      r3,[r0,#0x48]
0000e6  9b01              LDR      r3,[sp,#4]
0000e8  9c03              LDR      r4,[sp,#0xc]
0000ea  eb020383          ADD      r3,r2,r3,LSL #2
0000ee  434c              MULS     r4,r1,r4
0000f0  eb030384          ADD      r3,r3,r4,LSL #2
;;;872            tr.left -= 2*width;
0000f4  64c3              STR      r3,[r0,#0x4c]
0000f6  9c00              LDR      r4,[sp,#0]
0000f8  f1cc0300          RSB      r3,r12,#0
0000fc  eb040c43          ADD      r12,r4,r3,LSL #1
;;;873            tr.right -= 2*width;
000100  f8cdc000          STR      r12,[sp,#0]
000104  f8ddc004          LDR      r12,[sp,#4]
000108  eb0c0343          ADD      r3,r12,r3,LSL #1
;;;874    
;;;875            ANKI_SUM_PTRS( p[8], p[9], p[12], p[13], ptr, tr, step );
00010c  9301              STR      r3,[sp,#4]
00010e  9b00              LDR      r3,[sp,#0]
000110  f8ddc008          LDR      r12,[sp,#8]
000114  eb020383          ADD      r3,r2,r3,LSL #2
000118  fb0cfc01          MUL      r12,r12,r1
00011c  eb030c8c          ADD      r12,r3,r12,LSL #2
000120  f8c0c030          STR      r12,[r0,#0x30]
000124  f8ddc004          LDR      r12,[sp,#4]
000128  9c02              LDR      r4,[sp,#8]
00012a  eb020c8c          ADD      r12,r2,r12,LSL #2
00012e  434c              MULS     r4,r1,r4
000130  eb0c0c84          ADD      r12,r12,r4,LSL #2
000134  f8c0c034          STR      r12,[r0,#0x34]
000138  f8ddc00c          LDR      r12,[sp,#0xc]
00013c  fb0cfc01          MUL      r12,r12,r1
000140  eb03038c          ADD      r3,r3,r12,LSL #2
000144  6403              STR      r3,[r0,#0x40]
000146  9b01              LDR      r3,[sp,#4]
000148  eb020283          ADD      r2,r2,r3,LSL #2
00014c  9b03              LDR      r3,[sp,#0xc]
00014e  4359              MULS     r1,r3,r1
000150  eb020181          ADD      r1,r2,r1,LSL #2
000154  6441              STR      r1,[r0,#0x44]
;;;876          }
000156  b005              ADD      sp,sp,#0x14
000158  bc70              POP      {r4-r6}
00015a  4770              BX       lr
;;;877    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP16DetectMultiScaleERKNS0_5ArrayIhEEfiiiiiRNS0_15FixedLengthListINS0_9RectangleIiEEEENS0_11MemoryStackESC_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP16DetectMultiScaleERKNS0_5ArrayIhEEfiiiiiRNS0_15FixedLengthListINS0_9RectangleIiEEEENS0_11MemoryStackESC_ PROC ; Anki::Embedded::Classifier::CascadeClassifier_LBP::DetectMultiScale(const Anki::Embedded::Array<unsigned char>&, float, int, int, int, int, int, Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
;;;642    
;;;643          Result CascadeClassifier_LBP::DetectMultiScale(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;644            const Array<u8> &image,
;;;645            const f32 scaleFactor,
;;;646            const s32 minNeighbors,
;;;647            const s32 minObjectHeight,
;;;648            const s32 minObjectWidth,
;;;649            const s32 maxObjectHeight,
;;;650            const s32 maxObjectWidth,
;;;651            FixedLengthList<Rectangle<s32> > &objects,
;;;652            MemoryStack fastScratch,
;;;653            MemoryStack slowScratch)
;;;654          {
000004  4682              MOV      r10,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  ed2d8b06          VPUSH    {d8-d10}
00000e  b0b7              SUB      sp,sp,#0xdc
000010  eeb09a40          VMOV.F32 s18,s0
;;;655            const f32 GROUP_EPS = 0.2f;
000014  eddfaafe          VLDR     s21,|L6.1040|
;;;656    
;;;657            const s32 imageHeight = image.get_size(0);
000018  2100              MOVS     r1,#0
00001a  9f4f              LDR      r7,[sp,#0x13c]
00001c  9d51              LDR      r5,[sp,#0x144]
00001e  9840              LDR      r0,[sp,#0x100]
000020  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000024  ee0a0a10          VMOV     s20,r0
;;;658            const s32 imageWidth = image.get_size(1);
000028  2101              MOVS     r1,#1
00002a  9840              LDR      r0,[sp,#0x100]
00002c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000030  ee090a90          VMOV     s19,r0
;;;659    
;;;660            AnkiConditionalErrorAndReturnValue(AreValid(*this, image, objects),
000034  463c              MOV      r4,r7
000036  4650              MOV      r0,r10
000038  f7fffffe          BL       _ZNK4Anki8Embedded10Classifier17CascadeClassifier7IsValidEv ; Anki::Embedded::Classifier::CascadeClassifier::IsValid() const
00003c  2800              CMP      r0,#0
00003e  f00080e3          BEQ.W    |L6.520|
000042  f50a7090          ADD      r0,r10,#0x120
000046  f8da612c          LDR      r6,[r10,#0x12c]
00004a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::get_maximumSize() const
00004e  4286              CMP      r6,r0
000050  f04080da          BNE.W    |L6.520|
000054  9840              LDR      r0,[sp,#0x100]
000056  6900              LDR      r0,[r0,#0x10]
000058  2800              CMP      r0,#0
00005a  f00080d5          BEQ.W    |L6.520|
00005e  9840              LDR      r0,[sp,#0x100]
000060  6800              LDR      r0,[r0,#0]
000062  2800              CMP      r0,#0
000064  f2c080d0          BLT.W    |L6.520|
000068  9840              LDR      r0,[sp,#0x100]
00006a  6840              LDR      r0,[r0,#4]
00006c  2800              CMP      r0,#0
00006e  f2c080cb          BLT.W    |L6.520|
000072  4620              MOV      r0,r4
000074  68e6              LDR      r6,[r4,#0xc]
000076  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
00007a  42b0              CMP      r0,r6
00007c  f2c080c4          BLT.W    |L6.520|
000080  6aa0              LDR      r0,[r4,#0x28]
000082  b130              CBZ      r0,|L6.146|
000084  69a0              LDR      r0,[r4,#0x18]
000086  2800              CMP      r0,#0
000088  bfa3              ITTTE    GE
00008a  69e0              LDRGE    r0,[r4,#0x1c]
00008c  2800              CMPGE    r0,#0
00008e  2001              MOVGE    r0,#1
000090  2000              MOVLT    r0,#0
                  |L6.146|
000092  2800              CMP      r0,#0
000094  f00080b8          BEQ.W    |L6.520|
;;;661              RESULT_FAIL_INVALID_OBJECT, "CascadeClassifier::DetectMultiScale", "Invalid objects");
;;;662    
;;;663            BeginBenchmark("CascadeClassifier_LBP::DetectMultiScale");
000098  a0de              ADR      r0,|L6.1044|
00009a  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00009e  2400              MOVS     r4,#0
0000a0  4638              MOV      r0,r7
0000a2  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
0000a6  42a0              CMP      r0,r4
0000a8  da03              BGE      |L6.178|
0000aa  4638              MOV      r0,r7
0000ac  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
0000b0  4604              MOV      r4,r0
                  |L6.178|
;;;664    
;;;665            objects.Clear();
;;;666    
;;;667            FixedLengthList<Rectangle<s32> > candidates(objects.get_maximumSize(), slowScratch);
0000b2  2300              MOVS     r3,#0
0000b4  461a              MOV      r2,r3
0000b6  2101              MOVS     r1,#1
0000b8  a835              ADD      r0,sp,#0xd4
0000ba  60fc              STR      r4,[r7,#0xc]
0000bc  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000c0  4604              MOV      r4,r0
0000c2  4638              MOV      r0,r7
0000c4  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
0000c8  4601              MOV      r1,r0
0000ca  462a              MOV      r2,r5
0000cc  a803              ADD      r0,sp,#0xc
0000ce  6823              LDR      r3,[r4,#0]
0000d0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;668    
;;;669            for(f32 factor = 1; ; factor *= scaleFactor) {
0000d4  eeb78a00          VMOV.F32 s16,#1.00000000
0000d8  eef68a00          VMOV.F32 s17,#0.50000000
                  |L6.220|
;;;670              PUSH_MEMORY_STACK(fastScratch);
0000dc  a823              ADD      r0,sp,#0x8c
0000de  9950              LDR      r1,[sp,#0x140]
0000e0  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0000e4  a923              ADD      r1,sp,#0x8c
0000e6  a810              ADD      r0,sp,#0x40
0000e8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
;;;671    
;;;672              BeginBenchmark("CascadeClassifier_LBP::DetectMultiScale main loop");
0000ec  a0d3              ADR      r0,|L6.1084|
0000ee  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;673    
;;;674              const s32 windowHeight = Round<s32>(this->data.origWinHeight*factor);
0000f2  f8da3014          LDR      r3,[r10,#0x14]
0000f6  ee003a10          VMOV     s0,r3
0000fa  eeb80ac0          VCVT.F32.S32 s0,s0
0000fe  ee200a08          VMUL.F32 s0,s0,s16
000102  eeb50ac0          VCMPE.F32 s0,#0.0
000106  eef1fa10          VMRS     APSR_nzcv,FPSCR
00010a  bfcc              ITE      GT
00010c  ee300a28          VADDGT.F32 s0,s0,s17
000110  ee300a68          VSUBLE.F32 s0,s0,s17
000114  eebd0ac0          VCVT.S32.F32 s0,s0
;;;675              const s32 windowWidth = Round<s32>(this->data.origWinWidth*factor);
000118  f8da2018          LDR      r2,[r10,#0x18]
00011c  ee101a10          VMOV     r1,s0
000120  ee002a10          VMOV     s0,r2
000124  eeb80ac0          VCVT.F32.S32 s0,s0
000128  ee200a08          VMUL.F32 s0,s0,s16
00012c  eeb50ac0          VCMPE.F32 s0,#0.0
000130  eef1fa10          VMRS     APSR_nzcv,FPSCR
000134  bfcc              ITE      GT
000136  ee300a28          VADDGT.F32 s0,s0,s17
00013a  ee300a68          VSUBLE.F32 s0,s0,s17
00013e  eebd0ac0          VCVT.S32.F32 s0,s0
;;;676    
;;;677              const s32 scaledImageHeight = Round<s32>(imageHeight / factor);
000142  eef80aca          VCVT.F32.S32 s1,s20
000146  ee100a10          VMOV     r0,s0
00014a  ee800a88          VDIV.F32 s0,s1,s16
00014e  eeb50ac0          VCMPE.F32 s0,#0.0
000152  eef1fa10          VMRS     APSR_nzcv,FPSCR
000156  bfcc              ITE      GT
000158  ee300a28          VADDGT.F32 s0,s0,s17
00015c  ee300a68          VSUBLE.F32 s0,s0,s17
000160  eebd0ac0          VCVT.S32.F32 s0,s0
;;;678              const s32 scaledImageWidth = Round<s32>(imageWidth / factor);
000164  eef80ae9          VCVT.F32.S32 s1,s19
000168  ee106a10          VMOV     r6,s0
00016c  ee800a88          VDIV.F32 s0,s1,s16
000170  eeb50ac0          VCMPE.F32 s0,#0.0
000174  eef1fa10          VMRS     APSR_nzcv,FPSCR
000178  bfcc              ITE      GT
00017a  ee300a28          VADDGT.F32 s0,s0,s17
00017e  ee300a68          VSUBLE.F32 s0,s0,s17
000182  eebd0ac0          VCVT.S32.F32 s0,s0
;;;679    
;;;680              const s32 processingRectHeight = scaledImageHeight - this->data.origWinHeight;
000186  1af3              SUBS     r3,r6,r3
000188  ee105a10          VMOV     r5,s0
;;;681              const s32 processingRectWidth = scaledImageWidth - this->data.origWinWidth;
00018c  1aaa              SUBS     r2,r5,r2
00018e  e9cd2331          STRD     r2,r3,[sp,#0xc4]
;;;682    
;;;683              if( processingRectWidth <= 0 || processingRectHeight <= 0 )
000192  2a00              CMP      r2,#0
000194  bfc8              IT       GT
000196  2b00              CMPGT    r3,#0
000198  f34080c8          BLE.W    |L6.812|
;;;684                break;
;;;685    
;;;686              if( windowWidth > maxObjectWidth || windowHeight > maxObjectHeight )
00019c  9a4e              LDR      r2,[sp,#0x138]
00019e  4290              CMP      r0,r2
0001a0  bfdc              ITT      LE
0001a2  9a4d              LDRLE    r2,[sp,#0x134]
0001a4  4291              CMPLE    r1,r2
0001a6  f30080c1          BGT.W    |L6.812|
;;;687                break;
;;;688    
;;;689              if( windowWidth < minObjectWidth || windowHeight < minObjectHeight )
0001aa  9a4c              LDR      r2,[sp,#0x130]
0001ac  4282              CMP      r2,r0
0001ae  bfdc              ITT      LE
0001b0  9842              LDRLE    r0,[sp,#0x108]
0001b2  4288              CMPLE    r0,r1
0001b4  f300810c          BGT.W    |L6.976|
;;;690                continue;
;;;691    
;;;692              Array<u8> scaledImage(scaledImageHeight, scaledImageWidth, fastScratch, Flags::Buffer(false, false, false));
0001b8  2300              MOVS     r3,#0
0001ba  ac17              ADD      r4,sp,#0x5c
0001bc  f10d0b40          ADD      r11,sp,#0x40
0001c0  461a              MOV      r2,r3
0001c2  4619              MOV      r1,r3
0001c4  a836              ADD      r0,sp,#0xd8
0001c6  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0001ca  f8d09000          LDR      r9,[r0,#0]
0001ce  f104000c          ADD      r0,r4,#0xc
0001d2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
0001d6  f1a0040c          SUB      r4,r0,#0xc
0001da  f04f30ff          MOV      r0,#0xffffffff
0001de  6020              STR      r0,[r4,#0]
0001e0  6060              STR      r0,[r4,#4]
0001e2  60a0              STR      r0,[r4,#8]
0001e4  2000              MOVS     r0,#0
0001e6  6120              STR      r0,[r4,#0x10]
0001e8  2d00              CMP      r5,#0
0001ea  bfa8              IT       GE
0001ec  2e00              CMPGE    r6,#0
0001ee  da1e              BGE      |L6.558|
0001f0  217d              MOVS     r1,#0x7d
0001f2  489f              LDR      r0,|L6.1136|
0001f4  e9cd0100          STRD     r0,r1,[sp,#0]
0001f8  a39e              ADR      r3,|L6.1140|
0001fa  a2ac              ADR      r2,|L6.1196|
0001fc  a1af              ADR      r1,|L6.1212|
0001fe  2005              MOVS     r0,#5
000200  f7fffffe          BL       _Anki_Log
000204  f000b867          B.W      |L6.726|
                  |L6.520|
000208  f44f7125          MOV      r1,#0x294             ;660
00020c  48b0              LDR      r0,|L6.1232|
00020e  e9cd0100          STRD     r0,r1,[sp,#0]         ;660
000212  a3b0              ADR      r3,|L6.1236|
000214  a2bc              ADR      r2,|L6.1288|
000216  a1c0              ADR      r1,|L6.1304|
000218  2005              MOVS     r0,#5                 ;660
00021a  f7fffffe          BL       _Anki_Log
00021e  f04f6080          MOV      r0,#0x4000000         ;660
                  |L6.546|
;;;693    
;;;694              BeginBenchmark("Resize");
;;;695              // OpenCV's resize grayvalues may be 1 or so different than Anki's
;;;696    #ifdef EXACTLY_MATCH_OPENCV
;;;697              {
;;;698                const cv::Size scaledImageSize = cv::Size(scaledImageWidth,scaledImageHeight);
;;;699    
;;;700                Array<u8> tmpImHack = image;
;;;701    
;;;702                cv::Mat_<u8> tmpImHack_cvMat;
;;;703                tmpImHack.ArrayToCvMat(&tmpImHack_cvMat);
;;;704    
;;;705                cv::Mat_<u8> scaledImage_cvMat;
;;;706                scaledImage.ArrayToCvMat(&scaledImage_cvMat);
;;;707    
;;;708                cv::resize(tmpImHack_cvMat, scaledImage_cvMat, scaledImageSize, 0, 0, CV_INTER_LINEAR);
;;;709              }
;;;710    #else
;;;711              //ImageProcessing::Resize(image, scaledImage);
;;;712              ImageProcessing::DownsampleBilinear(image, scaledImage, fastScratch);
;;;713              //scaledImage.Show("scaledImage", true);
;;;714    #endif
;;;715    
;;;716              EndBenchmark("Resize");
;;;717    
;;;718              const s32 xyIncrement = factor > 2.0f ? 1 : 2;
;;;719    
;;;720              BeginBenchmark("DetectSingleScale");
;;;721    
;;;722              if(DetectSingleScale(scaledImage, processingRectHeight, processingRectWidth, xyIncrement, factor, candidates, fastScratch) != RESULT_OK) {
;;;723                break;
;;;724              }
;;;725    
;;;726              EndBenchmark("DetectSingleScale");
;;;727    
;;;728              EndBenchmark("CascadeClassifier_LBP::DetectMultiScale main loop");
;;;729            } // for(f32 factor = 1; ; factor *= scaleFactor)
;;;730    
;;;731            objects.set_size(candidates.get_size());
;;;732            memcpy(objects.Pointer(0), candidates.Pointer(0), candidates.get_array().get_stride());
;;;733    
;;;734            GroupRectangles(objects, minNeighbors, GROUP_EPS, fastScratch);
;;;735    
;;;736            //EndBenchmark("CascadeClassifier_LBP::DetectMultiScale");
;;;737    
;;;738            return RESULT_OK;
;;;739          }
000222  b037              ADD      sp,sp,#0xdc
000224  ecbd8b06          VPOP     {d8-d10}
000228  b006              ADD      sp,sp,#0x18
00022a  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.558|
00022e  2000              MOVS     r0,#0
000230  9033              STR      r0,[sp,#0xcc]
000232  2d01              CMP      r5,#1
000234  bfcc              ITE      GT
000236  4628              MOVGT    r0,r5
000238  2001              MOVLE    r0,#1
00023a  300f              ADDS     r0,r0,#0xf
00023c  f020080f          BIC      r8,r0,#0xf
000240  a833              ADD      r0,sp,#0xcc
000242  f8cd9008          STR      r9,[sp,#8]
000246  9034              STR      r0,[sp,#0xd0]
000248  f1b80f00          CMP      r8,#0
00024c  dc0a              BGT      |L6.612|
00024e  f240310b          MOV      r1,#0x30b
000252  48ba              LDR      r0,|L6.1340|
000254  e9cd0100          STRD     r0,r1,[sp,#0]
000258  a386              ADR      r3,|L6.1140|
00025a  a294              ADR      r2,|L6.1196|
00025c  a1b8              ADR      r1,|L6.1344|
00025e  2005              MOVS     r0,#5
000260  f7fffffe          BL       _Anki_Log
                  |L6.612|
000264  4630              MOV      r0,r6
000266  2e01              CMP      r6,#1
000268  bfd8              IT       LE
00026a  2001              MOVLE    r0,#1
00026c  f8c48008          STR      r8,[r4,#8]
000270  fb08f800          MUL      r8,r8,r0
000274  a802              ADD      r0,sp,#8
000276  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00027a  4602              MOV      r2,r0
00027c  4641              MOV      r1,r8
00027e  4658              MOV      r0,r11
000280  9b34              LDR      r3,[sp,#0xd0]
000282  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
000286  f8ddb0cc          LDR      r11,[sp,#0xcc]
00028a  ea5f0800          MOVS     r8,r0
00028e  f8cd90d0          STR      r9,[sp,#0xd0]
000292  d00e              BEQ      |L6.690|
000294  f1bb0f10          CMP      r11,#0x10
000298  d258              BCS      |L6.844|
00029a  f2403123          MOV      r1,#0x323
00029e  48b3              LDR      r0,|L6.1388|
0002a0  e9cd0100          STRD     r0,r1,[sp,#0]
0002a4  a373              ADR      r3,|L6.1140|
0002a6  a2b2              ADR      r2,|L6.1392|
0002a8  a1b6              ADR      r1,|L6.1412|
0002aa  2005              MOVS     r0,#5
0002ac  f7fffffe          BL       _Anki_Log
0002b0  e011              B        |L6.726|
                  |L6.690|
0002b2  f240311e          MOV      r1,#0x31e
0002b6  48ad              LDR      r0,|L6.1388|
0002b8  e9cd0100          STRD     r0,r1,[sp,#0]
0002bc  a36d              ADR      r3,|L6.1140|
0002be  a2b9              ADR      r2,|L6.1444|
0002c0  a1bf              ADR      r1,|L6.1472|
0002c2  2005              MOVS     r0,#5
0002c4  f7fffffe          BL       _Anki_Log
0002c8  f04f30ff          MOV      r0,#0xffffffff
0002cc  6020              STR      r0,[r4,#0]
0002ce  6060              STR      r0,[r4,#4]
0002d0  60a0              STR      r0,[r4,#8]
0002d2  2000              MOVS     r0,#0
                  |L6.724|
0002d4  6120              STR      r0,[r4,#0x10]
                  |L6.726|
0002d6  a0c0              ADR      r0,|L6.1496|
0002d8  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0002dc  a910              ADD      r1,sp,#0x40           ;712
0002de  a81c              ADD      r0,sp,#0x70           ;712
0002e0  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0002e4  4602              MOV      r2,r0                 ;712
0002e6  a917              ADD      r1,sp,#0x5c           ;712
0002e8  9840              LDR      r0,[sp,#0x100]        ;712
0002ea  f7fffffe          BL       _ZN4Anki8Embedded15ImageProcessing18DownsampleBilinearERKNS0_5ArrayIhEERS3_NS0_11MemoryStackE ; Anki::Embedded::ImageProcessing::DownsampleBilinear(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::Array<unsigned char>&, Anki::Embedded::MemoryStack)
0002ee  a0ba              ADR      r0,|L6.1496|
0002f0  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0002f4  ee180a10          VMOV     r0,s16                ;718
0002f8  f1b04f80          CMP      r0,#0x40000000        ;718
0002fc  bfcc              ITE      GT                    ;718
0002fe  2401              MOVGT    r4,#1                 ;718
000300  2402              MOVLE    r4,#2                 ;718
000302  a0b7              ADR      r0,|L6.1504|
000304  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000308  a910              ADD      r1,sp,#0x40           ;722
00030a  a81c              ADD      r0,sp,#0x70           ;722
00030c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000310  a903              ADD      r1,sp,#0xc            ;722
000312  9400              STR      r4,[sp,#0]            ;722
000314  e9cd1001          STRD     r1,r0,[sp,#4]         ;722
000318  e9dd3231          LDRD     r3,r2,[sp,#0xc4]      ;722
00031c  eeb00a48          VMOV.F32 s0,s16                ;722
000320  a917              ADD      r1,sp,#0x5c           ;722
000322  4650              MOV      r0,r10                ;722
000324  f7fffffe          BL       _ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP17DetectSingleScaleERKNS0_5ArrayIhEEiiifRNS0_15FixedLengthListINS0_9RectangleIiEEEENS0_11MemoryStackE ; Anki::Embedded::Classifier::CascadeClassifier_LBP::DetectSingleScale(const Anki::Embedded::Array<unsigned char>&, int, int, int, float, Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, Anki::Embedded::MemoryStack)
000328  2800              CMP      r0,#0                 ;722
00032a  d04b              BEQ      |L6.964|
                  |L6.812|
00032c  4638              MOV      r0,r7                 ;718
00032e  9c06              LDR      r4,[sp,#0x18]         ;718
000330  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
000334  4601              MOV      r1,r0                 ;718
000336  2c00              CMP      r4,#0                 ;718
000338  bfb4              ITE      LT                    ;718
00033a  2000              MOVLT    r0,#0                 ;718
00033c  4620              MOVGE    r0,r4                 ;718
00033e  4288              CMP      r0,r1                 ;718
000340  dd49              BLE      |L6.982|
000342  4638              MOV      r0,r7                 ;718
000344  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
000348  4604              MOV      r4,r0                 ;718
00034a  e047              B        |L6.988|
                  |L6.844|
00034c  a834              ADD      r0,sp,#0xd0           ;718
00034e  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000352  b158              CBZ      r0,|L6.876|
000354  f2403126          MOV      r1,#0x326             ;718
000358  4884              LDR      r0,|L6.1388|
00035a  e9cd0100          STRD     r0,r1,[sp,#0]         ;718
00035e  a345              ADR      r3,|L6.1140|
000360  a2a4              ADR      r2,|L6.1524|
000362  a188              ADR      r1,|L6.1412|
000364  2005              MOVS     r0,#5                 ;718
000366  f7fffffe          BL       _Anki_Log
00036a  e7b4              B        |L6.726|
                  |L6.876|
00036c  9834              LDR      r0,[sp,#0xd0]         ;718
00036e  e9c40803          STRD     r0,r8,[r4,#0xc]       ;718
000372  f108000f          ADD      r0,r8,#0xf            ;718
000376  e9c46500          STRD     r6,r5,[r4,#0]         ;718
00037a  f020000f          BIC      r0,r0,#0xf            ;718
00037e  eba00008          SUB      r0,r0,r8              ;718
000382  2d01              CMP      r5,#1                 ;718
000384  bfd8              IT       LE                    ;718
000386  2501              MOVLE    r5,#1                 ;718
000388  f105010f          ADD      r1,r5,#0xf            ;718
00038c  f021010f          BIC      r1,r1,#0xf            ;718
000390  fb010106          MLA      r1,r1,r6,r0           ;718
000394  4559              CMP      r1,r11                ;718
000396  bfd8              IT       LE                    ;718
000398  4440              ADDLE    r0,r0,r8              ;718
00039a  dd9b              BLE      |L6.724|
00039c  f2403235          MOV      r2,#0x335             ;718
0003a0  4872              LDR      r0,|L6.1388|
0003a2  e9cd0200          STRD     r0,r2,[sp,#0]         ;718
0003a6  9102              STR      r1,[sp,#8]            ;718
0003a8  a332              ADR      r3,|L6.1140|
0003aa  a29c              ADR      r2,|L6.1564|
0003ac  a184              ADR      r1,|L6.1472|
0003ae  2005              MOVS     r0,#5                 ;718
0003b0  f7fffffe          BL       _Anki_Log
0003b4  f04f30ff          MOV      r0,#0xffffffff        ;718
0003b8  6020              STR      r0,[r4,#0]            ;718
0003ba  6060              STR      r0,[r4,#4]            ;718
0003bc  60a0              STR      r0,[r4,#8]            ;718
0003be  2000              MOVS     r0,#0                 ;718
0003c0  6120              STR      r0,[r4,#0x10]         ;718
0003c2  e788              B        |L6.726|
                  |L6.964|
0003c4  a086              ADR      r0,|L6.1504|
0003c6  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0003ca  a01c              ADR      r0,|L6.1084|
0003cc  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
                  |L6.976|
0003d0  ee288a09          VMUL.F32 s16,s16,s18           ;669
0003d4  e682              B        |L6.220|
                  |L6.982|
0003d6  2c00              CMP      r4,#0                 ;669
0003d8  bfb8              IT       LT                    ;669
0003da  2400              MOVLT    r4,#0                 ;669
                  |L6.988|
0003dc  60fc              STR      r4,[r7,#0xc]          ;669
0003de  9a0b              LDR      r2,[sp,#0x2c]         ;669
0003e0  990f              LDR      r1,[sp,#0x3c]         ;669
0003e2  6b38              LDR      r0,[r7,#0x30]         ;732
0003e4  f7fffffe          BL       __aeabi_memcpy4
0003e8  a82a              ADD      r0,sp,#0xa8           ;734
0003ea  9c41              LDR      r4,[sp,#0x104]        ;734
0003ec  9950              LDR      r1,[sp,#0x140]        ;734
0003ee  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0003f2  4601              MOV      r1,r0                 ;734
0003f4  a810              ADD      r0,sp,#0x40           ;734
0003f6  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0003fa  2300              MOVS     r3,#0                 ;734
0003fc  9000              STR      r0,[sp,#0]            ;734
0003fe  461a              MOV      r2,r3                 ;734
000400  eeb00a6a          VMOV.F32 s0,s21                ;734
000404  4621              MOV      r1,r4                 ;734
000406  4638              MOV      r0,r7                 ;734
000408  f7fffffe          BL       _ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifPNS2_IiEEPNS2_IfEENS0_11MemoryStackE ; Anki::Embedded::Classifier::GroupRectangles(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, int, float, Anki::Embedded::FixedLengthList<int>*, Anki::Embedded::FixedLengthList<float>*, Anki::Embedded::MemoryStack)
00040c  2000              MOVS     r0,#0                 ;738
00040e  e708              B        |L6.546|
                  |L6.1040|
000410  3e4ccccd          DCFS     0x3e4ccccd ; 0.20000000298023224
                  |L6.1044|
000414  43617363          DCB      "CascadeClassifier_LBP::DetectMultiScale",0
000418  61646543
00041c  6c617373
000420  69666965
000424  725f4c42
000428  503a3a44
00042c  65746563
000430  744d756c
000434  74695363
000438  616c6500
                  |L6.1084|
00043c  43617363          DCB      "CascadeClassifier_LBP::DetectMultiScale main loop",0
000440  61646543
000444  6c617373
000448  69666965
00044c  725f4c42
000450  503a3a44
000454  65746563
000458  744d756c
00045c  74695363
000460  616c6520
000464  6d61696e
000468  206c6f6f
00046c  7000    
00046e  00                DCB      0
00046f  00                DCB      0
                  |L6.1136|
                          DCD      _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L6.1140|
000474  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000478  6f726574
00047c  6563685c
000480  636f6d6d
000484  6f6e5c69
000488  6e636c75
00048c  64655c61
000490  6e6b692f
000494  636f6d6d
000498  6f6e2f72
00049c  6f626f74
0004a0  2f617272
0004a4  617932  
0004a7  642e6800          DCB      "d.h",0
0004ab  00                DCB      0
                  |L6.1196|
0004ac  496e7661          DCB      "Invalid size",0
0004b0  6c696420
0004b4  73697a65
0004b8  00      
0004b9  00                DCB      0
0004ba  00                DCB      0
0004bb  00                DCB      0
                  |L6.1212|
0004bc  41727261          DCB      "Array<Type>::Array",0
0004c0  793c5479
0004c4  70653e3a
0004c8  3a417272
0004cc  617900  
0004cf  00                DCB      0
                  |L6.1232|
                          DCD      ||.constdata||+0x489
                  |L6.1236|
0004d4  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\cascadeClassifier.cpp"
0004d8  6f726574
0004dc  6563685c
0004e0  76697369
0004e4  6f6e5c72
0004e8  6f626f74
0004ec  5c737263
0004f0  5c636173
0004f4  63616465
0004f8  436c6173
0004fc  73696669
000500  65722e63
000504  7070    
000506  00                DCB      0
000507  00                DCB      0
                  |L6.1288|
000508  496e7661          DCB      "Invalid objects",0
00050c  6c696420
000510  6f626a65
000514  63747300
                  |L6.1304|
000518  43617363          DCB      "CascadeClassifier::DetectMultiScale",0
00051c  61646543
000520  6c617373
000524  69666965
000528  723a3a44
00052c  65746563
000530  744d756c
000534  74695363
000538  616c6500
                  |L6.1340|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L6.1344|
000540  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
000544  793c5479
000548  70653e3a
00054c  3a416c6c
000550  6f636174
000554  65427566
000558  66657246
00055c  726f6d4d
000560  656d6f72
000564  79537461
000568  636b00  
00056b  00                DCB      0
                  |L6.1388|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L6.1392|
000570  4e656761          DCB      "Negative dimension",0
000574  74697665
000578  2064696d
00057c  656e7369
000580  6f6e00  
000583  00                DCB      0
                  |L6.1412|
000584  41727261          DCB      "Array<Type>::InitializeBuffer",0
000588  793c5479
00058c  70653e3a
000590  3a496e69
000594  7469616c
000598  697a6542
00059c  75666665
0005a0  7200    
0005a2  00                DCB      0
0005a3  00                DCB      0
                  |L6.1444|
0005a4  696e7075          DCB      "input data buffer is NULL",0
0005a8  74206461
0005ac  74612062
0005b0  75666665
0005b4  72206973
0005b8  204e554c
0005bc  4c00    
0005be  00                DCB      0
0005bf  00                DCB      0
                  |L6.1472|
0005c0  416e6b69          DCB      "Anki.Array2d.initialize",0
0005c4  2e417272
0005c8  61793264
0005cc  2e696e69
0005d0  7469616c
0005d4  697a6500
                  |L6.1496|
0005d8  52657369          DCB      "Resize",0
0005dc  7a6500  
0005df  00                DCB      0
                  |L6.1504|
0005e0  44657465          DCB      "DetectSingleScale",0
0005e4  63745369
0005e8  6e676c65
0005ec  5363616c
0005f0  6500    
0005f2  00                DCB      0
0005f3  00                DCB      0
                  |L6.1524|
0005f4  46696c6c          DCB      "Fill patterns not supported for Array",0
0005f8  20706174
0005fc  7465726e
000600  73206e6f
000604  74207375
000608  70706f72
00060c  74656420
000610  666f7220
000614  41727261
000618  7900    
00061a  00                DCB      0
00061b  00                DCB      0
                  |L6.1564|
00061c  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
000620  74206461
000624  74612062
000628  75666665
00062c  72206973
000630  206e6f74
000634  206c6172
000638  67652065
00063c  6e6f7567
000640  682e2025
000644  64206279
000648  74657320
00064c  69732072
000650  657175  
000653  69726564          DCB      "ired.",0
000657  2e00    
000659  00                DCB      0
00065a  00                DCB      0
00065b  00                DCB      0
                          ENDP


                          AREA ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP17DetectSingleScaleERKNS0_5ArrayIhEEiiifRNS0_15FixedLengthListINS0_9RectangleIiEEEENS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP17DetectSingleScaleERKNS0_5ArrayIhEEiiifRNS0_15FixedLengthListINS0_9RectangleIiEEEENS0_11MemoryStackE PROC ; Anki::Embedded::Classifier::CascadeClassifier_LBP::DetectSingleScale(const Anki::Embedded::Array<unsigned char>&, int, int, int, float, Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, Anki::Embedded::MemoryStack)
;;;740    
;;;741          Result CascadeClassifier_LBP::DetectSingleScale(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;742            const Array<u8> &image,
;;;743            const s32 processingRectHeight,
;;;744            const s32 processingRectWidth,
;;;745            const s32 xyIncrement, //< Same as openCV yStep
;;;746            const f32 scaleFactor,
;;;747            FixedLengthList<Rectangle<s32> > &candidates,
;;;748            MemoryStack scratch)
;;;749          {
000004  4681              MOV      r9,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  469a              MOV      r10,r3
;;;750            BeginBenchmark("CascadeClassifier_LBP::DetectSingleScale");
00000c  a075              ADR      r0,|L7.484|
00000e  ed2d8b02          VPUSH    {d8}                  ;749
000012  b09f              SUB      sp,sp,#0x7c           ;749
000014  eeb08a40          VMOV.F32 s16,s0                ;749
000018  e9dd8630          LDRD     r8,r6,[sp,#0xc0]      ;749
00001c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;751    
;;;752            BeginBenchmark("CascadeClassifier_LBP::DetectSingleScale init");
000020  a07b              ADR      r0,|L7.528|
000022  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;753    
;;;754            const s32 winHeight = Round<s32>(this->data.origWinHeight * scaleFactor);
000026  ed990a05          VLDR     s0,[r9,#0x14]
00002a  eeb80ac0          VCVT.F32.S32 s0,s0
00002e  ee200a08          VMUL.F32 s0,s0,s16
000032  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
;;;755            const s32 winWidth = Round<s32>(this->data.origWinWidth * scaleFactor);
000036  ed990a06          VLDR     s0,[r9,#0x18]
00003a  4683              MOV      r11,r0                ;754
00003c  eeb80ac0          VCVT.F32.S32 s0,s0
000040  ee200a08          VMUL.F32 s0,s0,s16
000044  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
000048  900b              STR      r0,[sp,#0x2c]
;;;756    
;;;757            const s32 nfeatures = this->features.get_size();
;;;758    
;;;759            const s32 scrollingIntegralImage_numScrollRows = 16;
;;;760            const s32 scrollingIntegralImage_bufferHeight = MIN(image.get_size(0)+2, winHeight + scrollingIntegralImage_numScrollRows + 2);
00004a  2100              MOVS     r1,#0
00004c  f8d9512c          LDR      r5,[r9,#0x12c]
000050  9824              LDR      r0,[sp,#0x90]
000052  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000056  1c80              ADDS     r0,r0,#2
000058  f10b0112          ADD      r1,r11,#0x12
00005c  4288              CMP      r0,r1
00005e  bfa8              IT       GE
000060  460c              MOVGE    r4,r1
000062  da04              BGE      |L7.110|
000064  2100              MOVS     r1,#0
000066  9824              LDR      r0,[sp,#0x90]
000068  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00006c  1c84              ADDS     r4,r0,#2
                  |L7.110|
;;;761    
;;;762            ScrollingIntegralImage_u8_s32 scrollingIntegralImage(scrollingIntegralImage_bufferHeight, image.get_size(1), 1, scratch);
00006e  2300              MOVS     r3,#0
000070  461a              MOV      r2,r3
000072  2101              MOVS     r1,#1
000074  a81e              ADD      r0,sp,#0x78
000076  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00007a  4607              MOV      r7,r0
00007c  2101              MOVS     r1,#1
00007e  9824              LDR      r0,[sp,#0x90]
000080  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000084  6839              LDR      r1,[r7,#0]
000086  9101              STR      r1,[sp,#4]
000088  9932              LDR      r1,[sp,#0xc8]
00008a  4602              MOV      r2,r0
00008c  9100              STR      r1,[sp,#0]
00008e  2301              MOVS     r3,#1
000090  4621              MOV      r1,r4
000092  a802              ADD      r0,sp,#8
000094  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;763    
;;;764            scrollingIntegralImage.ScrollDown(image, scrollingIntegralImage_bufferHeight, scratch);
000098  a810              ADD      r0,sp,#0x40
00009a  9932              LDR      r1,[sp,#0xc8]
00009c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0000a0  4603              MOV      r3,r0
0000a2  4622              MOV      r2,r4
0000a4  a802              ADD      r0,sp,#8
0000a6  9924              LDR      r1,[sp,#0x90]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3210ScrollDownERKNS0_5ArrayIhEEiNS0_11MemoryStackE ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array<unsigned char>&, int, Anki::Embedded::MemoryStack)
;;;765    
;;;766            //const IntegralImage_u8_s32 integralImage(image, scratch);
;;;767    
;;;768            for(s32 fi = 0; fi < nfeatures; fi++) {
0000ac  2400              MOVS     r4,#0
0000ae  2d00              CMP      r5,#0
0000b0  dd0b              BLE      |L7.202|
                  |L7.178|
0000b2  f8d90150          LDR      r0,[r9,#0x150]
0000b6  eb040184          ADD      r1,r4,r4,LSL #2
0000ba  eb001001          ADD      r0,r0,r1,LSL #4
;;;769              this->features[fi].updatePtrs(scrollingIntegralImage);
0000be  a902              ADD      r1,sp,#8
0000c0  f7fffffe          BL       _ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP10LBPFeature10updatePtrsERKNS0_29ScrollingIntegralImage_u8_s32E ; Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature::updatePtrs(const Anki::Embedded::ScrollingIntegralImage_u8_s32&)
0000c4  1c64              ADDS     r4,r4,#1              ;768
0000c6  42a5              CMP      r5,r4                 ;768
0000c8  dcf3              BGT      |L7.178|
                  |L7.202|
;;;770            }
;;;771    
;;;772            EndBenchmark("CascadeClassifier_LBP::DetectSingleScale init");
0000ca  a051              ADR      r0,|L7.528|
0000cc  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
;;;773    
;;;774            for(s32 y = 0; y < processingRectHeight; y += xyIncrement) {
0000d0  9825              LDR      r0,[sp,#0x94]
0000d2  2700              MOVS     r7,#0
0000d4  2800              CMP      r0,#0
0000d6  bfc8              IT       GT
0000d8  eddf8a59          VLDRGT   s17,|L7.576|
0000dc  dd78              BLE      |L7.464|
                  |L7.222|
;;;775              //BeginBenchmark("CascadeClassifier_LBP::DetectSingleScale scrollIntegralImage");
;;;776    
;;;777              if(scrollingIntegralImage.get_maxRow(this->data.origWinHeight+xyIncrement) < y) {
0000de  f8d90014          LDR      r0,[r9,#0x14]
0000e2  eb000108          ADD      r1,r0,r8
0000e6  a802              ADD      r0,sp,#8
0000e8  f7fffffe          BL       _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3210get_maxRowEi ; Anki::Embedded::ScrollingIntegralImage_u8_s32::get_maxRow(int) const
0000ec  42b8              CMP      r0,r7
0000ee  da11              BGE      |L7.276|
;;;778                const Result lastResult = scrollingIntegralImage.ScrollDown(image, scrollingIntegralImage_numScrollRows, scratch);
0000f0  a817              ADD      r0,sp,#0x5c
0000f2  9932              LDR      r1,[sp,#0xc8]
0000f4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0000f8  4603              MOV      r3,r0
0000fa  2210              MOVS     r2,#0x10
0000fc  a802              ADD      r0,sp,#8
0000fe  9924              LDR      r1,[sp,#0x90]
000100  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3210ScrollDownERKNS0_5ArrayIhEEiNS0_11MemoryStackE ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array<unsigned char>&, int, Anki::Embedded::MemoryStack)
;;;779    
;;;780                if(lastResult != RESULT_OK)
000104  2800              CMP      r0,#0
;;;781                  return lastResult;
;;;782              }
;;;783    
;;;784              //EndBenchmark("CascadeClassifier_LBP::DetectSingleScale scrollIntegralImage");
;;;785    
;;;786              //BeginBenchmark("CascadeClassifier_LBP::DetectSingleScale x loop");
;;;787              for(s32 x = 0; x < processingRectWidth; x += xyIncrement) {
;;;788                f32 gypWeight;
;;;789    
;;;790                const int result = this->PredictCategoricalStump(scrollingIntegralImage, Point<s16>(x,y), gypWeight);
;;;791    
;;;792                if( result > 0 ) {
;;;793                  const s32 x0 = Round<s32>(x*scaleFactor);
;;;794                  const s32 y0 = Round<s32>(y*scaleFactor);
;;;795    
;;;796                  // TODO: should be width/height minus one?
;;;797                  candidates.PushBack(Rectangle<s32>(
;;;798                    x0, x0 + winWidth,
;;;799                    y0, y0 + winHeight));
;;;800                }
;;;801    
;;;802                // TODO: should the xStep be twice the xyIncrement?
;;;803                if(result == 0)
;;;804                  x += xyIncrement;
;;;805              }
;;;806              //EndBenchmark("CascadeClassifier_LBP::DetectSingleScale x loop");
;;;807            }
;;;808    
;;;809            EndBenchmark("CascadeClassifier_LBP::DetectSingleScale");
;;;810    
;;;811            return RESULT_OK;
;;;812          }
000106  bf1f              ITTTT    NE
000108  b01f              ADDNE    sp,sp,#0x7c
00010a  ecbd8b02          VPOPNE   {d8}
00010e  b006              ADDNE    sp,sp,#0x18
000110  e8bd8ff0          POPNE    {r4-r11,pc}
                  |L7.276|
000114  2400              MOVS     r4,#0                 ;787
000116  f1ba0f00          CMP      r10,#0                ;787
00011a  bfc4              ITT      GT                    ;790
00011c  b238              SXTHGT   r0,r7                 ;790
00011e  9001              STRGT    r0,[sp,#4]            ;790
000120  dd52              BLE      |L7.456|
                  |L7.290|
000122  9801              LDR      r0,[sp,#4]            ;787
000124  f8ad4000          STRH     r4,[sp,#0]            ;787
000128  f8ad0002          STRH     r0,[sp,#2]            ;787
00012c  466a              MOV      r2,sp                 ;790
00012e  ab17              ADD      r3,sp,#0x5c           ;790
000130  a902              ADD      r1,sp,#8              ;790
000132  4648              MOV      r0,r9                 ;790
000134  f7fffffe          BL       _ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP23PredictCategoricalStumpERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_5PointIsEERf ; Anki::Embedded::Classifier::CascadeClassifier_LBP::PredictCategoricalStump(const Anki::Embedded::ScrollingIntegralImage_u8_s32&, const Anki::Embedded::Point<short>&, float&) const
000138  2800              CMP      r0,#0                 ;792
00013a  bf08              IT       EQ                    ;804
00013c  4444              ADDEQ    r4,r4,r8              ;804
00013e  dd40              BLE      |L7.450|
000140  ee004a10          VMOV     s0,r4                 ;793
000144  eeb80ac0          VCVT.F32.S32 s0,s0                 ;793
000148  ee600a08          VMUL.F32 s1,s0,s16             ;793
00014c  eef50ac0          VCMPE.F32 s1,#0.0               ;793
000150  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;793
000154  bfd4              ITE      LE                    ;793
000156  ee300ae8          VSUBLE.F32 s0,s1,s17             ;793
00015a  ee300aa8          VADDGT.F32 s0,s1,s17             ;793
00015e  eefd0ac0          VCVT.S32.F32 s1,s0                 ;793
000162  ee007a10          VMOV     s0,r7                 ;794
000166  ee100a90          VMOV     r0,s1                 ;794
00016a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;794
00016e  ee600a08          VMUL.F32 s1,s0,s16             ;794
000172  eef50ac0          VCMPE.F32 s1,#0.0               ;794
000176  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;794
00017a  bfcc              ITE      GT                    ;794
00017c  ee300aa8          VADDGT.F32 s0,s1,s17             ;794
000180  ee300ae8          VSUBLE.F32 s0,s1,s17             ;794
000184  eefd0ac0          VCVT.S32.F32 s1,s0                 ;794
000188  9a0b              LDR      r2,[sp,#0x2c]         ;797
00018a  ee101a90          VMOV     r1,s1                 ;797
00018e  4402              ADD      r2,r2,r0              ;797
000190  e9cd020c          STRD     r0,r2,[sp,#0x30]      ;797
000194  eb01030b          ADD      r3,r1,r11             ;797
000198  e9cd130e          STRD     r1,r3,[sp,#0x38]      ;797
00019c  4630              MOV      r0,r6                 ;797
00019e  68f5              LDR      r5,[r6,#0xc]          ;797
0001a0  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
0001a4  42a8              CMP      r0,r5                 ;797
0001a6  dd0c              BLE      |L7.450|
0001a8  6b30              LDR      r0,[r6,#0x30]         ;797
0001aa  990c              LDR      r1,[sp,#0x30]         ;797
0001ac  eb001005          ADD      r0,r0,r5,LSL #4       ;797
0001b0  6001              STR      r1,[r0,#0]            ;797
0001b2  990d              LDR      r1,[sp,#0x34]         ;797
0001b4  6041              STR      r1,[r0,#4]            ;797
0001b6  990e              LDR      r1,[sp,#0x38]         ;797
0001b8  6081              STR      r1,[r0,#8]            ;797
0001ba  990f              LDR      r1,[sp,#0x3c]         ;797
0001bc  60c1              STR      r1,[r0,#0xc]          ;797
0001be  1c69              ADDS     r1,r5,#1              ;797
0001c0  60f1              STR      r1,[r6,#0xc]          ;797
                  |L7.450|
0001c2  4444              ADD      r4,r4,r8              ;787
0001c4  45a2              CMP      r10,r4                ;787
0001c6  dcac              BGT      |L7.290|
                  |L7.456|
0001c8  9825              LDR      r0,[sp,#0x94]         ;774
0001ca  4447              ADD      r7,r7,r8              ;774
0001cc  42b8              CMP      r0,r7                 ;774
0001ce  dc86              BGT      |L7.222|
                  |L7.464|
0001d0  a004              ADR      r0,|L7.484|
0001d2  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0001d6  b01f              ADD      sp,sp,#0x7c
0001d8  2000              MOVS     r0,#0                 ;811
0001da  ecbd8b02          VPOP     {d8}
0001de  b006              ADD      sp,sp,#0x18
0001e0  e8bd8ff0          POP      {r4-r11,pc}
;;;813    
                          ENDP

                  |L7.484|
0001e4  43617363          DCB      "CascadeClassifier_LBP::DetectSingleScale",0
0001e8  61646543
0001ec  6c617373
0001f0  69666965
0001f4  725f4c42
0001f8  503a3a44
0001fc  65746563
000200  7453696e
000204  676c6553
000208  63616c65
00020c  00      
00020d  00                DCB      0
00020e  00                DCB      0
00020f  00                DCB      0
                  |L7.528|
000210  43617363          DCB      "CascadeClassifier_LBP::DetectSingleScale init",0
000214  61646543
000218  6c617373
00021c  69666965
000220  725f4c42
000224  503a3a44
000228  65746563
00022c  7453696e
000230  676c6553
000234  63616c65
000238  20696e69
00023c  7400    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L7.576|
000240  3f000000          DCFS     0x3f000000 ; 0.5

                          AREA ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC1EbiiiiiRKNS0_15FixedLengthListINS1_17CascadeClassifier5StageEEERKNS3_INS4_5DTreeEEERKNS3_INS4_9DTreeNodeEEERKNS3_IfEERKNS3_IiEERKNS3_INS0_9RectangleIiEEEERNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC2EbiiiiiRKNS0_15FixedLengthListINS1_17CascadeClassifier5StageEEERKNS3_INS4_5DTreeEEERKNS3_INS4_9DTreeNodeEEERKNS3_IfEERKNS3_IiEERKNS3_INS0_9RectangleIiEEEERNS0_11MemoryStackE                  ; Alternate entry point ; Anki::Embedded::Classifier::CascadeClassifier_LBP::CascadeClassifier_LBP__sub_object(bool, int, int, int, int, int, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>&, const Anki::Embedded::FixedLengthList<float>&, const Anki::Embedded::FixedLengthList<int>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, Anki::Embedded::MemoryStack&)
                  _ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC1EbiiiiiRKNS0_15FixedLengthListINS1_17CascadeClassifier5StageEEERKNS3_INS4_5DTreeEEERKNS3_INS4_9DTreeNodeEEERKNS3_IfEERKNS3_IiEERKNS3_INS0_9RectangleIiEEEERNS0_11MemoryStackE PROC ; Anki::Embedded::Classifier::CascadeClassifier_LBP::CascadeClassifier_LBP(bool, int, int, int, int, int, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>&, const Anki::Embedded::FixedLengthList<float>&, const Anki::Embedded::FixedLengthList<int>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, Anki::Embedded::MemoryStack&)
;;;607    
;;;608          CascadeClassifier_LBP::CascadeClassifier_LBP(
;;;609            const bool isStumpBased,
;;;610            const s32 stageType,
;;;611            const s32 featureType,
;;;612            const s32 ncategories,
;;;613            const s32 origWinHeight,
;;;614            const s32 origWinWidth,
;;;615            const FixedLengthList<CascadeClassifier::Stage> &stages,
;;;616            const FixedLengthList<CascadeClassifier::DTree> &classifiers,
;;;617            const FixedLengthList<CascadeClassifier::DTreeNode> &nodes,
;;;618            const FixedLengthList<f32> &leaves,
;;;619            const FixedLengthList<s32> &subsets,
;;;620            const FixedLengthList<Rectangle<s32> > &featureRectangles, //< Rectangles will be copied into this object's FixedLengthList<LBPFeature> features (which is allocated from memory)
;;;621            MemoryStack &memory)
;;;622            : CascadeClassifier(isStumpBased, stageType, featureType, ncategories, origWinHeight, origWinWidth, stages, classifiers, nodes, leaves, subsets)
;;;623          {
;;;624            this->isValid = false;
;;;625    
;;;626            this->features = FixedLengthList<LBPFeature>(featureRectangles.get_size(), memory, Flags::Buffer(true, false, true));
;;;627    
;;;628            AnkiConditionalErrorAndReturn(AreValid(featureRectangles, this->features),
;;;629              "CascadeClassifier_LBP::CascadeClassifier_LBP", "Invalid objects");
;;;630    
;;;631            const s32 numFeatures = featureRectangles.get_size();
;;;632    
;;;633            const Rectangle<s32> * restrict pFeatureRectangles = featureRectangles.Pointer(0);
;;;634            LBPFeature * restrict pFeatures = features.Pointer(0);
;;;635    
;;;636            for(s32 i=0; i<numFeatures; i++) {
;;;637              pFeatures[i].rect = pFeatureRectangles[i];
;;;638            }
;;;639    
;;;640            this->isValid = true;
;;;641          }
;;;642    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b09f              SUB      sp,sp,#0x7c
000006  4699              MOV      r9,r3
000008  e9dde72f          LDRD     lr,r7,[sp,#0xbc]
00000c  e9ddab2c          LDRD     r10,r11,[sp,#0xb0]
000010  e9dd682a          LDRD     r6,r8,[sp,#0xa8]
000014  e9dd3428          LDRD     r3,r4,[sp,#0xa0]
000018  f8ddc0b8          LDR      r12,[sp,#0xb8]
00001c  9d31              LDR      r5,[sp,#0xc4]
00001e  e88d5d58          STM      sp,{r3,r4,r6,r8,r10-r12,lr}
000022  464b              MOV      r3,r9
000024  f7fffffe          BL       _ZN4Anki8Embedded10Classifier17CascadeClassifierC1EbiiiiiRKNS0_15FixedLengthListINS2_5StageEEERKNS3_INS2_5DTreeEEERKNS3_INS2_9DTreeNodeEEERKNS3_IfEERKNS3_IiEE ; Anki::Embedded::Classifier::CascadeClassifier::CascadeClassifier(bool, int, int, int, int, int, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>&, const Anki::Embedded::FixedLengthList<float>&, const Anki::Embedded::FixedLengthList<int>&)
000028  f5007090          ADD      r0,r0,#0x120
00002c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::FixedLengthList()
000030  f5a07490          SUB      r4,r0,#0x120
000034  f04f0a00          MOV      r10,#0
000038  f884a000          STRB     r10,[r4,#0]
00003c  9007              STR      r0,[sp,#0x1c]
00003e  68f8              LDR      r0,[r7,#0xc]
000040  2301              MOVS     r3,#1
000042  9001              STR      r0,[sp,#4]
000044  f10d0920          ADD      r9,sp,#0x20
000048  4652              MOV      r2,r10
00004a  4619              MOV      r1,r3
00004c  a81d              ADD      r0,sp,#0x74
00004e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000052  6800              LDR      r0,[r0,#0]
000054  9015              STR      r0,[sp,#0x54]
000056  9000              STR      r0,[sp,#0]
000058  462b              MOV      r3,r5
00005a  2101              MOVS     r1,#1
00005c  a802              ADD      r0,sp,#8
00005e  9a01              LDR      r2,[sp,#4]
000060  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000064  e9d08102          LDRD     r8,r1,[r0,#8]
000068  e9d05600          LDRD     r5,r6,[r0,#0]
00006c  f8d0b010          LDR      r11,[r0,#0x10]
000070  2200              MOVS     r2,#0
000072  9100              STR      r1,[sp,#0]
000074  4611              MOV      r1,r2
000076  a816              ADD      r0,sp,#0x58
000078  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00007c  2200              MOVS     r2,#0
00007e  901c              STR      r0,[sp,#0x70]
000080  4611              MOV      r1,r2
000082  a819              ADD      r0,sp,#0x64
000084  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000088  4601              MOV      r1,r0
00008a  981c              LDR      r0,[sp,#0x70]
00008c  2d00              CMP      r5,#0
00008e  e9d02300          LDRD     r2,r3,[r0,#0]
000092  6880              LDR      r0,[r0,#8]
000094  9208              STR      r2,[sp,#0x20]
000096  e9cd3009          STRD     r3,r0,[sp,#0x24]
00009a  e9d10200          LDRD     r0,r2,[r1,#0]
00009e  6889              LDR      r1,[r1,#8]
0000a0  910d              STR      r1,[sp,#0x34]
0000a2  e9cd020b          STRD     r0,r2,[sp,#0x2c]
0000a6  9900              LDR      r1,[sp,#0]
0000a8  e9cd560e          STRD     r5,r6,[sp,#0x38]
0000ac  e9cd8110          STRD     r8,r1,[sp,#0x40]
0000b0  f8cdb048          STR      r11,[sp,#0x48]
0000b4  bfc8              IT       GT
0000b6  2e00              CMPGT    r6,#0
0000b8  dd2d              BLE      |L8.278|
0000ba  fb05f006          MUL      r0,r5,r6
0000be  2800              CMP      r0,#0
0000c0  d029              BEQ      |L8.278|
0000c2  2000              MOVS     r0,#0
0000c4  fb00b008          MLA      r0,r0,r8,r11
0000c8  9013              STR      r0,[sp,#0x4c]
                  |L8.202|
0000ca  2d00              CMP      r5,#0
0000cc  bfc8              IT       GT
0000ce  2e00              CMPGT    r6,#0
0000d0  dd24              BLE      |L8.284|
0000d2  fb05f006          MUL      r0,r5,r6
0000d6  b308              CBZ      r0,|L8.284|
0000d8  2000              MOVS     r0,#0
0000da  fb00b008          MLA      r0,r0,r8,r11
0000de  9014              STR      r0,[sp,#0x50]
                  |L8.224|
0000e0  2d00              CMP      r5,#0
0000e2  bfc8              IT       GT
0000e4  2e00              CMPGT    r6,#0
0000e6  dd1c              BLE      |L8.290|
0000e8  fb05f006          MUL      r0,r5,r6
0000ec  b1c8              CBZ      r0,|L8.290|
0000ee  2000              MOVS     r0,#0
0000f0  fb00b008          MLA      r0,r0,r8,r11
0000f4  9014              STR      r0,[sp,#0x50]
                  |L8.246|
0000f6  a815              ADD      r0,sp,#0x54
0000f8  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000fc  b1e8              CBZ      r0,|L8.314|
0000fe  4648              MOV      r0,r9
000100  9d01              LDR      r5,[sp,#4]
000102  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::get_maximumSize() const
000106  4601              MOV      r1,r0
000108  2d00              CMP      r5,#0
00010a  bfac              ITE      GE
00010c  4628              MOVGE    r0,r5
00010e  2000              MOVLT    r0,#0
000110  4288              CMP      r0,r1
000112  dc09              BGT      |L8.296|
000114  e00d              B        |L8.306|
                  |L8.278|
000116  f8cda04c          STR      r10,[sp,#0x4c]
00011a  e7d6              B        |L8.202|
                  |L8.284|
00011c  f8cda050          STR      r10,[sp,#0x50]
000120  e7de              B        |L8.224|
                  |L8.290|
000122  f8cda050          STR      r10,[sp,#0x50]
000126  e7e6              B        |L8.246|
                  |L8.296|
000128  4648              MOV      r0,r9
00012a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::get_maximumSize() const
00012e  4605              MOV      r5,r0
000130  e009              B        |L8.326|
                  |L8.306|
000132  2d00              CMP      r5,#0
000134  bfb8              IT       LT
000136  2500              MOVLT    r5,#0
000138  e005              B        |L8.326|
                  |L8.314|
00013a  2500              MOVS     r5,#0
00013c  4648              MOV      r0,r9
00013e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::get_maximumSize() const
000142  42a8              CMP      r0,r5
000144  dbf0              BLT      |L8.296|
                  |L8.326|
000146  950b              STR      r5,[sp,#0x2c]
000148  ad07              ADD      r5,sp,#0x1c
00014a  f5047690          ADD      r6,r4,#0x120
00014e  cd0f              LDM      r5!,{r0-r3}
000150  463d              MOV      r5,r7
000152  6083              STR      r3,[r0,#8]
000154  e9c01200          STRD     r1,r2,[r0,#0]
000158  e9dd120b          LDRD     r1,r2,[sp,#0x2c]
00015c  9b0d              LDR      r3,[sp,#0x34]
00015e  6143              STR      r3,[r0,#0x14]
000160  e9c01203          STRD     r1,r2,[r0,#0xc]
000164  9a0e              LDR      r2,[sp,#0x38]
000166  6182              STR      r2,[r0,#0x18]
000168  9a0f              LDR      r2,[sp,#0x3c]
00016a  61c2              STR      r2,[r0,#0x1c]
00016c  9a10              LDR      r2,[sp,#0x40]
00016e  6202              STR      r2,[r0,#0x20]
000170  9a11              LDR      r2,[sp,#0x44]
000172  6242              STR      r2,[r0,#0x24]
000174  9a12              LDR      r2,[sp,#0x48]
000176  6282              STR      r2,[r0,#0x28]
000178  9913              LDR      r1,[sp,#0x4c]
00017a  62c1              STR      r1,[r0,#0x2c]
00017c  9914              LDR      r1,[sp,#0x50]
00017e  6301              STR      r1,[r0,#0x30]
000180  4638              MOV      r0,r7
000182  f8d7800c          LDR      r8,[r7,#0xc]
000186  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
00018a  4580              CMP      r8,r0
00018c  dc38              BGT      |L8.512|
00018e  6aa8              LDR      r0,[r5,#0x28]
000190  b130              CBZ      r0,|L8.416|
000192  69a8              LDR      r0,[r5,#0x18]
000194  2800              CMP      r0,#0
000196  bfa3              ITTTE    GE
000198  69e8              LDRGE    r0,[r5,#0x1c]
00019a  2800              CMPGE    r0,#0
00019c  2001              MOVGE    r0,#1
00019e  2000              MOVLT    r0,#0
                  |L8.416|
0001a0  b370              CBZ      r0,|L8.512|
0001a2  4635              MOV      r5,r6
0001a4  68f6              LDR      r6,[r6,#0xc]
0001a6  4628              MOV      r0,r5
0001a8  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::get_maximumSize() const
0001ac  4286              CMP      r6,r0
0001ae  dc27              BGT      |L8.512|
0001b0  6aa8              LDR      r0,[r5,#0x28]
0001b2  b130              CBZ      r0,|L8.450|
0001b4  69a8              LDR      r0,[r5,#0x18]
0001b6  2800              CMP      r0,#0
0001b8  bfa3              ITTTE    GE
0001ba  69e8              LDRGE    r0,[r5,#0x1c]
0001bc  2800              CMPGE    r0,#0
0001be  2001              MOVGE    r0,#1
0001c0  2000              MOVLT    r0,#0
                  |L8.450|
0001c2  b1e8              CBZ      r0,|L8.512|
0001c4  6b3d              LDR      r5,[r7,#0x30]
0001c6  68f8              LDR      r0,[r7,#0xc]
0001c8  2100              MOVS     r1,#0
0001ca  f8d4c150          LDR      r12,[r4,#0x150]
0001ce  2800              CMP      r0,#0
0001d0  dd10              BLE      |L8.500|
                  |L8.466|
0001d2  eb010281          ADD      r2,r1,r1,LSL #2
0001d6  eb0c1302          ADD      r3,r12,r2,LSL #4
0001da  eb051201          ADD      r2,r5,r1,LSL #4
0001de  1c49              ADDS     r1,r1,#1
0001e0  6816              LDR      r6,[r2,#0]
0001e2  601e              STR      r6,[r3,#0]
0001e4  6856              LDR      r6,[r2,#4]
0001e6  605e              STR      r6,[r3,#4]
0001e8  6896              LDR      r6,[r2,#8]
0001ea  609e              STR      r6,[r3,#8]
0001ec  68d2              LDR      r2,[r2,#0xc]
0001ee  60da              STR      r2,[r3,#0xc]
0001f0  4288              CMP      r0,r1
0001f2  dcee              BGT      |L8.466|
                  |L8.500|
0001f4  2001              MOVS     r0,#1
0001f6  7020              STRB     r0,[r4,#0]
                  |L8.504|
0001f8  b01f              ADD      sp,sp,#0x7c
0001fa  4620              MOV      r0,r4
0001fc  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.512|
000200  f44f711d          MOV      r1,#0x274
000204  4804              LDR      r0,|L8.536|
000206  e9cd0100          STRD     r0,r1,[sp,#0]
00020a  a304              ADR      r3,|L8.540|
00020c  a210              ADR      r2,|L8.592|
00020e  a114              ADR      r1,|L8.608|
000210  2005              MOVS     r0,#5
000212  f7fffffe          BL       _Anki_Log
000216  e7ef              B        |L8.504|
                          ENDP

                  |L8.536|
                          DCD      ||.constdata||+0x209
                  |L8.540|
00021c  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\cascadeClassifier.cpp"
000220  6f726574
000224  6563685c
000228  76697369
00022c  6f6e5c72
000230  6f626f74
000234  5c737263
000238  5c636173
00023c  63616465
000240  436c6173
000244  73696669
000248  65722e63
00024c  7070    
00024e  00                DCB      0
00024f  00                DCB      0
                  |L8.592|
000250  496e7661          DCB      "Invalid objects",0
000254  6c696420
000258  6f626a65
00025c  63747300
                  |L8.608|
000260  43617363          DCB      "CascadeClassifier_LBP::CascadeClassifier_LBP",0
000264  61646543
000268  6c617373
00026c  69666965
000270  725f4c42
000274  503a3a43
000278  61736361
00027c  6465436c
000280  61737369
000284  66696572
000288  5f4c4250
00028c  00      
00028d  00                DCB      0
00028e  00                DCB      0
00028f  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC2Ev                  ; Alternate entry point ; Anki::Embedded::Classifier::CascadeClassifier_LBP::CascadeClassifier_LBP__sub_object()
                  _ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC1Ev PROC ; Anki::Embedded::Classifier::CascadeClassifier_LBP::CascadeClassifier_LBP()
;;;602    
;;;603          CascadeClassifier_LBP::CascadeClassifier_LBP()
;;;604            : CascadeClassifier()
;;;605          {
;;;606          }
;;;607    
000000  b510              PUSH     {r4,lr}
000002  2100              MOVS     r1,#0
000004  f8001b04          STRB     r1,[r0],#4
000008  f7fffffe          BL       _ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC1Ev ; Anki::Embedded::Classifier::CascadeClassifier::Data::Data()
00000c  f500708e          ADD      r0,r0,#0x11c
000010  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::FixedLengthList()
000014  f5a07090          SUB      r0,r0,#0x120
000018  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded10Classifier17CascadeClassifier7IsValidEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded10Classifier17CascadeClassifier7IsValidEv PROC ; Anki::Embedded::Classifier::CascadeClassifier::IsValid() const
;;;288    
;;;289          bool CascadeClassifier::IsValid() const
000000  b538              PUSH     {r3-r5,lr}
;;;290          {
000002  4604              MOV      r4,r0
;;;291            if(!isValid)
000004  7800              LDRB     r0,[r0,#0]
000006  2800              CMP      r0,#0                 ;290
;;;292              return false;
;;;293    
;;;294            if(!AreValid(data.stages, data.classifiers, data.nodes, data.leaves, data.subsets))
;;;295              return false;
;;;296    
;;;297            if(data.stages.get_size() != data.stages.get_maximumSize())
;;;298              return false;
;;;299    
;;;300            if(data.classifiers.get_size() != data.classifiers.get_maximumSize())
;;;301              return false;
;;;302    
;;;303            if(data.nodes.get_size() != data.nodes.get_maximumSize())
;;;304              return false;
;;;305    
;;;306            if(data.leaves.get_size() != data.leaves.get_maximumSize())
;;;307              return false;
;;;308    
;;;309            if(data.subsets.get_size() != data.subsets.get_maximumSize())
;;;310              return false;
;;;311    
;;;312            return true;
;;;313          } // bool CascadeClassifier::IsValid() const
000008  bf08              IT       EQ
00000a  bd38              POPEQ    {r3-r5,pc}
00000c  f10400ec          ADD      r0,r4,#0xec           ;294
000010  9000              STR      r0,[sp,#0]            ;294
000012  f10403b8          ADD      r3,r4,#0xb8           ;294
000016  f1040284          ADD      r2,r4,#0x84           ;294
00001a  f1040150          ADD      r1,r4,#0x50           ;294
00001e  38d0              SUBS     r0,r0,#0xd0           ;294
000020  f7fffffe          BL       _ZN4Anki8Embedded8AreValidINS0_15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEEENS2_INS4_5DTreeEEENS2_INS4_9DTreeNodeEEENS2_IfEENS2_IiEEEEbRKT_RKT0_RKT1_RKT2_RKT3_ ; Anki::Embedded::AreValid<Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>, Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>, Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>, Anki::Embedded::FixedLengthList<float>, Anki::Embedded::FixedLengthList<int>>(const T1&, const T2&, const T3&, const T4&, const T5&)
000024  2800              CMP      r0,#0                 ;294
000026  bf08              IT       EQ
000028  bd38              POPEQ    {r3-r5,pc}
00002a  f104001c          ADD      r0,r4,#0x1c           ;297
00002e  6aa5              LDR      r5,[r4,#0x28]         ;297
000030  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>::get_maximumSize() const
000034  4285              CMP      r5,r0                 ;297
000036  d120              BNE      |L10.122|
000038  f1040050          ADD      r0,r4,#0x50           ;300
00003c  6de5              LDR      r5,[r4,#0x5c]         ;300
00003e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>::get_maximumSize() const
000042  4285              CMP      r5,r0                 ;300
000044  d119              BNE      |L10.122|
000046  f1040084          ADD      r0,r4,#0x84           ;303
00004a  f8d45090          LDR      r5,[r4,#0x90]         ;303
00004e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>::get_maximumSize() const
000052  4285              CMP      r5,r0                 ;303
000054  d111              BNE      |L10.122|
000056  f10400b8          ADD      r0,r4,#0xb8           ;306
00005a  f8d450c4          LDR      r5,[r4,#0xc4]         ;306
00005e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
000062  4285              CMP      r5,r0                 ;306
000064  d109              BNE      |L10.122|
000066  f10400ec          ADD      r0,r4,#0xec           ;309
00006a  f8d450f8          LDR      r5,[r4,#0xf8]         ;309
00006e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
000072  4285              CMP      r5,r0                 ;309
000074  bf04              ITT      EQ                    ;312
000076  2001              MOVEQ    r0,#1                 ;312
000078  bd38              POPEQ    {r3-r5,pc}
                  |L10.122|
00007a  2000              MOVS     r0,#0                 ;310
00007c  bd38              POP      {r3-r5,pc}
;;;314    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP10LBPFeature5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP10LBPFeature5PrintEv PROC ; Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature::Print() const
;;;891    
;;;892          void CascadeClassifier_LBP::LBPFeature::Print() const
000000  b508              PUSH     {r3,lr}
000002  68c1              LDR      r1,[r0,#0xc]
000004  9100              STR      r1,[sp,#0]
000006  e9d01300          LDRD     r1,r3,[r0,#0]
00000a  6882              LDR      r2,[r0,#8]
00000c  a001              ADR      r0,|L11.20|
00000e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;893          {
;;;894            return this->rect.Print();
;;;895          }
000012  bd08              POP      {r3,pc}
;;;896        } // namespace Classifier
                          ENDP

                  |L11.20|
000014  2825642c          DCB      "(%d,%d)->(%d,%d) ",0
000018  2564292d
00001c  3e282564
000020  2c256429
000024  2000    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP23PredictCategoricalStumpERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_5PointIsEERf||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP23PredictCategoricalStumpERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_5PointIsEERf PROC ; Anki::Embedded::Classifier::CascadeClassifier_LBP::PredictCategoricalStump(const Anki::Embedded::ScrollingIntegralImage_u8_s32&, const Anki::Embedded::Point<short>&, float&) const
;;;813    
;;;814          s32 CascadeClassifier_LBP::PredictCategoricalStump(const ScrollingIntegralImage_u8_s32 &integralImage, const Point<s16> &location, f32& sum) const
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;815          {
000004  b08b              SUB      sp,sp,#0x2c
000006  461f              MOV      r7,r3
000008  980b              LDR      r0,[sp,#0x2c]
00000a  4616              MOV      r6,r2
;;;816            const int nstages = (int)this->data.stages.get_size();
;;;817            int nodeOfs = 0, leafOfs = 0;
00000c  2400              MOVS     r4,#0
00000e  6a80              LDR      r0,[r0,#0x28]
;;;818            const size_t subsetSize = (this->data.ncategories + 31)/32;
000010  9001              STR      r0,[sp,#4]
000012  980b              LDR      r0,[sp,#0x2c]
000014  4688              MOV      r8,r1                 ;815
000016  4625              MOV      r5,r4                 ;817
000018  6900              LDR      r0,[r0,#0x10]
00001a  f100031f          ADD      r3,r0,#0x1f
00001e  17d8              ASRS     r0,r3,#31
000020  eb0360d0          ADD      r0,r3,r0,LSR #27
000024  1140              ASRS     r0,r0,#5
000026  900a              STR      r0,[sp,#0x28]
000028  980b              LDR      r0,[sp,#0x2c]
00002a  f8d0011c          LDR      r0,[r0,#0x11c]
00002e  9009              STR      r0,[sp,#0x24]
000030  980b              LDR      r0,[sp,#0x2c]
000032  f8d000e8          LDR      r0,[r0,#0xe8]
000036  9008              STR      r0,[sp,#0x20]
000038  980b              LDR      r0,[sp,#0x2c]
00003a  f8d000b4          LDR      r0,[r0,#0xb4]
00003e  9007              STR      r0,[sp,#0x1c]
000040  980b              LDR      r0,[sp,#0x2c]
;;;819            const int* cascadeSubsets = &this->data.subsets[0];
;;;820            const f32* cascadeLeaves = &this->data.leaves[0];
;;;821            const CascadeClassifier::DTreeNode* cascadeNodes = &this->data.nodes[0];
;;;822            const CascadeClassifier::Stage* cascadeStages = &this->data.stages[0];
000042  6cc2              LDR      r2,[r0,#0x4c]
;;;823    
;;;824            const s32 offset = location.x + (location.y - integralImage.get_rowOffset() - 1) * (integralImage.get_stride() / sizeof(s32));
000044  4608              MOV      r0,r1
000046  9206              STR      r2,[sp,#0x18]
000048  f7fffffe          BL       _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3213get_rowOffsetEv ; Anki::Embedded::ScrollingIntegralImage_u8_s32::get_rowOffset() const
00004c  f9b61002          LDRSH    r1,[r6,#2]
000050  f9b62000          LDRSH    r2,[r6,#0]
000054  1a08              SUBS     r0,r1,r0
000056  1e41              SUBS     r1,r0,#1
000058  f8d80008          LDR      r0,[r8,#8]
00005c  0880              LSRS     r0,r0,#2
00005e  fb012000          MLA      r0,r1,r0,r2
;;;825    
;;;826            for( int si = 0; si < nstages; si++ )
000062  9005              STR      r0,[sp,#0x14]
000064  2000              MOVS     r0,#0
000066  9000              STR      r0,[sp,#0]
000068  9801              LDR      r0,[sp,#4]
00006a  2800              CMP      r0,#0
;;;827            {
;;;828              const CascadeClassifier::Stage& stage = cascadeStages[si];
;;;829              int wi, ntrees = stage.ntrees;
;;;830    
;;;831              sum = 0;
00006c  bfc8              IT       GT
00006e  ed9f1a7e          VLDRGT   s2,|L12.616|
000072  f34080f5          BLE.W    |L12.608|
                  |L12.118|
000076  9800              LDR      r0,[sp,#0]            ;828
;;;832    
;;;833              for( wi = 0; wi < ntrees; wi++ )
000078  f04f0800          MOV      r8,#0
00007c  eb000140          ADD      r1,r0,r0,LSL #1       ;828
000080  9806              LDR      r0,[sp,#0x18]         ;828
000082  eb000081          ADD      r0,r0,r1,LSL #2       ;828
000086  9003              STR      r0,[sp,#0xc]          ;829
000088  6840              LDR      r0,[r0,#4]            ;829
00008a  9002              STR      r0,[sp,#8]            ;831
00008c  ed871a00          VSTR     s2,[r7,#0]            ;831
000090  9802              LDR      r0,[sp,#8]
000092  2800              CMP      r0,#0
000094  f34080cf          BLE.W    |L12.566|
                  |L12.152|
;;;834              {
;;;835                const CascadeClassifier::DTreeNode& node = cascadeNodes[nodeOfs];
000098  9807              LDR      r0,[sp,#0x1c]
00009a  990b              LDR      r1,[sp,#0x2c]
00009c  eb001004          ADD      r0,r0,r4,LSL #4
;;;836    
;;;837                const int c = this->features[node.featureIdx].calc(offset);
0000a0  6800              LDR      r0,[r0,#0]
0000a2  f8d11150          LDR      r1,[r1,#0x150]
0000a6  eb000080          ADD      r0,r0,r0,LSL #2
0000aa  eb011100          ADD      r1,r1,r0,LSL #4
0000ae  9805              LDR      r0,[sp,#0x14]
0000b0  6a4a              LDR      r2,[r1,#0x24]
0000b2  f8d1a010          LDR      r10,[r1,#0x10]
0000b6  f8d1b014          LDR      r11,[r1,#0x14]
0000ba  f8d1c034          LDR      r12,[r1,#0x34]
0000be  f8529020          LDR      r9,[r2,r0,LSL #2]
0000c2  6a8a              LDR      r2,[r1,#0x28]
0000c4  f85aa020          LDR      r10,[r10,r0,LSL #2]
0000c8  f85be020          LDR      lr,[r11,r0,LSL #2]
0000cc  f85c6020          LDR      r6,[r12,r0,LSL #2]
0000d0  f8d1c038          LDR      r12,[r1,#0x38]
0000d4  ebaa0b0e          SUB      r11,r10,lr
0000d8  f8523020          LDR      r3,[r2,r0,LSL #2]
0000dc  f8d1a020          LDR      r10,[r1,#0x20]
0000e0  f85cc020          LDR      r12,[r12,r0,LSL #2]
0000e4  eba90203          SUB      r2,r9,r3
0000e8  f85aa020          LDR      r10,[r10,r0,LSL #2]
0000ec  f8cda010          STR      r10,[sp,#0x10]
0000f0  1b92              SUBS     r2,r2,r6
0000f2  ebab0a0a          SUB      r10,r11,r10
0000f6  4462              ADD      r2,r2,r12
0000f8  44ca              ADD      r10,r10,r9
0000fa  4592              CMP      r10,r2
0000fc  bfac              ITE      GE
0000fe  f04f0b80          MOVGE    r11,#0x80
000102  f04f0b00          MOVLT    r11,#0
000106  f8d1a018          LDR      r10,[r1,#0x18]
00010a  f85aa020          LDR      r10,[r10,r0,LSL #2]
00010e  ebae0e0a          SUB      lr,lr,r10
000112  ebae0e09          SUB      lr,lr,r9
000116  449e              ADD      lr,lr,r3
000118  4596              CMP      lr,r2
00011a  bfac              ITE      GE
00011c  f04f0e40          MOVGE    lr,#0x40
000120  f04f0e00          MOVLT    lr,#0
000124  ea4b0b0e          ORR      r11,r11,lr
000128  f8d1e01c          LDR      lr,[r1,#0x1c]
00012c  f85ee020          LDR      lr,[lr,r0,LSL #2]
000130  ebaa0a0e          SUB      r10,r10,lr
000134  ebaa0e03          SUB      lr,r10,r3
000138  f8d1a02c          LDR      r10,[r1,#0x2c]
00013c  f85aa020          LDR      r10,[r10,r0,LSL #2]
000140  44d6              ADD      lr,lr,r10
000142  4596              CMP      lr,r2
000144  bfac              ITE      GE
000146  f04f0e20          MOVGE    lr,#0x20
00014a  f04f0e00          MOVLT    lr,#0
00014e  ea4b0b0e          ORR      r11,r11,lr
000152  eba3030a          SUB      r3,r3,r10
000156  eba30a0c          SUB      r10,r3,r12
00015a  6bcb              LDR      r3,[r1,#0x3c]
00015c  f8533020          LDR      r3,[r3,r0,LSL #2]
000160  449a              ADD      r10,r10,r3
000162  4592              CMP      r10,r2
000164  bfac              ITE      GE
000166  f04f0a10          MOVGE    r10,#0x10
00016a  f04f0a00          MOVLT    r10,#0
00016e  ea4b0b0a          ORR      r11,r11,r10
000172  ebac0a03          SUB      r10,r12,r3
000176  6c8b              LDR      r3,[r1,#0x48]
000178  f8d1e04c          LDR      lr,[r1,#0x4c]
00017c  f8533020          LDR      r3,[r3,r0,LSL #2]
000180  f85ee020          LDR      lr,[lr,r0,LSL #2]
000184  ebaa0a03          SUB      r10,r10,r3
000188  44f2              ADD      r10,r10,lr
00018a  4592              CMP      r10,r2
00018c  bfac              ITE      GE
00018e  f04f0a08          MOVGE    r10,#8
000192  f04f0a00          MOVLT    r10,#0
000196  ea4b0a0a          ORR      r10,r11,r10
00019a  eba60b0c          SUB      r11,r6,r12
00019e  f8d1c044          LDR      r12,[r1,#0x44]
0001a2  f85cc020          LDR      r12,[r12,r0,LSL #2]
0001a6  ebab0b0c          SUB      r11,r11,r12
0001aa  445b              ADD      r3,r3,r11
0001ac  4293              CMP      r3,r2
0001ae  bfac              ITE      GE
0001b0  2304              MOVGE    r3,#4
0001b2  2300              MOVLT    r3,#0
0001b4  ea4a0a03          ORR      r10,r10,r3
0001b8  6b0b              LDR      r3,[r1,#0x30]
0001ba  6c09              LDR      r1,[r1,#0x40]
0001bc  f8533020          LDR      r3,[r3,r0,LSL #2]
0001c0  f8510020          LDR      r0,[r1,r0,LSL #2]
0001c4  eba30b06          SUB      r11,r3,r6
0001c8  ebab0000          SUB      r0,r11,r0
0001cc  4460              ADD      r0,r0,r12
0001ce  4290              CMP      r0,r2
0001d0  bfac              ITE      GE
0001d2  2002              MOVGE    r0,#2
0001d4  2000              MOVLT    r0,#0
0001d6  ea4a0100          ORR      r1,r10,r0
0001da  9804              LDR      r0,[sp,#0x10]
0001dc  eba00009          SUB      r0,r0,r9
0001e0  1ac0              SUBS     r0,r0,r3
0001e2  4430              ADD      r0,r0,r6
0001e4  4290              CMP      r0,r2
0001e6  bfac              ITE      GE
0001e8  2001              MOVGE    r0,#1
0001ea  2000              MOVLT    r0,#0
0001ec  4308              ORRS     r0,r0,r1
;;;838    
;;;839                const int* subset = &cascadeSubsets[nodeOfs*subsetSize];
0001ee  990a              LDR      r1,[sp,#0x28]
0001f0  fb04f201          MUL      r2,r4,r1
0001f4  9909              LDR      r1,[sp,#0x24]
0001f6  eb010182          ADD      r1,r1,r2,LSL #2
;;;840    
;;;841                sum += cascadeLeaves[ subset[c>>5] & (1 << (c & 31)) ? leafOfs : leafOfs+1];
0001fa  1142              ASRS     r2,r0,#5
0001fc  f8511022          LDR      r1,[r1,r2,LSL #2]
000200  f000021f          AND      r2,r0,#0x1f
000204  2001              MOVS     r0,#1
000206  4090              LSLS     r0,r0,r2
000208  4201              TST      r1,r0
00020a  bf14              ITE      NE
00020c  4628              MOVNE    r0,r5
00020e  1c68              ADDEQ    r0,r5,#1
000210  9908              LDR      r1,[sp,#0x20]
000212  edd70a00          VLDR     s1,[r7,#0]
000216  eb010080          ADD      r0,r1,r0,LSL #2
;;;842    
;;;843                nodeOfs++;
00021a  1c64              ADDS     r4,r4,#1
00021c  ed900a00          VLDR     s0,[r0,#0]            ;841
;;;844                leafOfs += 2;
000220  1cad              ADDS     r5,r5,#2
000222  f1080801          ADD      r8,r8,#1              ;833
000226  ee300a20          VADD.F32 s0,s0,s1              ;841
00022a  ed870a00          VSTR     s0,[r7,#0]            ;841
00022e  9802              LDR      r0,[sp,#8]            ;833
000230  4580              CMP      r8,r0                 ;833
000232  f6ffaf31          BLT      |L12.152|
                  |L12.566|
;;;845              }
;;;846    
;;;847              if( sum < stage.threshold )
000236  9803              LDR      r0,[sp,#0xc]
000238  ed970a00          VLDR     s0,[r7,#0]
00023c  edd00a02          VLDR     s1,[r0,#8]
000240  9800              LDR      r0,[sp,#0]
000242  eeb40ae0          VCMPE.F32 s0,s1
000246  eef1fa10          VMRS     APSR_nzcv,FPSCR
00024a  d203              BCS      |L12.596|
;;;848                return -si;
;;;849            }
;;;850    
;;;851            return 1;
;;;852          }
00024c  b00f              ADD      sp,sp,#0x3c
00024e  4240              RSBS     r0,r0,#0              ;848
000250  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.596|
000254  1c40              ADDS     r0,r0,#1              ;826
000256  9901              LDR      r1,[sp,#4]            ;826
000258  9000              STR      r0,[sp,#0]            ;826
00025a  4288              CMP      r0,r1                 ;826
00025c  f6ffaf0b          BLT      |L12.118|
                  |L12.608|
000260  b00f              ADD      sp,sp,#0x3c
000262  2001              MOVS     r0,#1                 ;851
000264  e8bd8ff0          POP      {r4-r11,pc}
;;;853    
                          ENDP

                  |L12.616|
000268  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP7IsValidEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP7IsValidEv PROC ; Anki::Embedded::Classifier::CascadeClassifier_LBP::IsValid() const
;;;314    
;;;315          bool CascadeClassifier_LBP::IsValid() const
000000  b570              PUSH     {r4-r6,lr}
;;;316          {
000002  4604              MOV      r4,r0
;;;317            if(!CascadeClassifier::IsValid())
000004  f7fffffe          BL       _ZNK4Anki8Embedded10Classifier17CascadeClassifier7IsValidEv ; Anki::Embedded::Classifier::CascadeClassifier::IsValid() const
000008  2800              CMP      r0,#0
;;;318              return false;
;;;319    
;;;320            if(features.get_size() != features.get_maximumSize())
;;;321              return false;
;;;322    
;;;323            return true;
;;;324          } // bool CascadeClassifier::IsValid() const
00000a  bf08              IT       EQ
00000c  bd70              POPEQ    {r4-r6,pc}
00000e  f5047090          ADD      r0,r4,#0x120          ;320
000012  f8d4512c          LDR      r5,[r4,#0x12c]        ;320
000016  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::get_maximumSize() const
00001a  4285              CMP      r5,r0                 ;320
00001c  bf0c              ITE      EQ                    ;323
00001e  2001              MOVEQ    r0,#1                 ;323
000020  2000              MOVNE    r0,#0                 ;321
000022  bd70              POP      {r4-r6,pc}
;;;325    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded10Classifier17CascadeClassifierC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier17CascadeClassifierC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN4Anki8Embedded10Classifier17CascadeClassifierC1EbiiiiiRKNS0_15FixedLengthListINS2_5StageEEERKNS3_INS2_5DTreeEEERKNS3_INS2_9DTreeNodeEEERKNS3_IfEERKNS3_IiEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier17CascadeClassifierC1EbiiiiiRKNS0_15FixedLengthListINS2_5StageEEERKNS3_INS2_5DTreeEEERKNS3_INS2_9DTreeNodeEEERKNS3_IfEERKNS3_IiEE||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZNK4Anki8Embedded10Classifier17CascadeClassifier7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded10Classifier17CascadeClassifier7IsValidEv||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC1EbiiiiiRKNS0_15FixedLengthListINS1_17CascadeClassifier5StageEEERKNS3_INS4_5DTreeEEERKNS3_INS4_9DTreeNodeEEERKNS3_IfEERKNS3_IiEERKNS3_INS0_9RectangleIiEEEERNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBPC1EbiiiiiRKNS0_15FixedLengthListINS1_17CascadeClassifier5StageEEERKNS3_INS4_5DTreeEEERKNS3_INS4_9DTreeNodeEEERKNS3_IfEERKNS3_IiEERKNS3_INS0_9RectangleIiEEEERNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifPNS2_IiEEPNS2_IfEENS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifPNS2_IiEEPNS2_IfEENS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier15GroupRectanglesERNS0_15FixedLengthListINS0_9RectangleIiEEEEifNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP23PredictCategoricalStumpERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_5PointIsEERf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP23PredictCategoricalStumpERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_5PointIsEERf||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP10LBPFeature10updatePtrsERKNS0_29ScrollingIntegralImage_u8_s32E||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP10LBPFeature10updatePtrsERKNS0_29ScrollingIntegralImage_u8_s32E||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP17DetectSingleScaleERKNS0_5ArrayIhEEiiifRNS0_15FixedLengthListINS0_9RectangleIiEEEENS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP17DetectSingleScaleERKNS0_5ArrayIhEEiiifRNS0_15FixedLengthListINS0_9RectangleIiEEEENS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP7IsValidEv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP16DetectMultiScaleERKNS0_5ArrayIhEEfiiiiiRNS0_15FixedLengthListINS0_9RectangleIiEEEENS0_11MemoryStackESC_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier21CascadeClassifier_LBP16DetectMultiScaleERKNS0_5ArrayIhEEfiiiiiRNS0_15FixedLengthListINS0_9RectangleIiEEEENS0_11MemoryStackESC_||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP10LBPFeature5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded10Classifier21CascadeClassifier_LBP10LBPFeature5PrintEv||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  436c6173          DCB      0x43,0x6c,0x61,0x73
000014  73696669          DCB      0x73,0x69,0x66,0x69
000018  65723a3a          DCB      0x65,0x72,0x3a,0x3a
00001c  43617363          DCB      0x43,0x61,0x73,0x63
000020  61646543          DCB      0x61,0x64,0x65,0x43
000024  6c617373          DCB      0x6c,0x61,0x73,0x73
000028  69666965          DCB      0x69,0x66,0x69,0x65
00002c  723a3a43          DCB      0x72,0x3a,0x3a,0x43
000030  61736361          DCB      0x61,0x73,0x63,0x61
000034  6465436c          DCB      0x64,0x65,0x43,0x6c
000038  61737369          DCB      0x61,0x73,0x73,0x69
00003c  66696572          DCB      0x66,0x69,0x65,0x72
000040  28626f6f          DCB      0x28,0x62,0x6f,0x6f
000044  6c2c2073          DCB      0x6c,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2073          DCB      0x74,0x2c,0x20,0x73
000054  69676e65          DCB      0x69,0x67,0x6e,0x65
000058  6420696e          DCB      0x64,0x20,0x69,0x6e
00005c  742c2073          DCB      0x74,0x2c,0x20,0x73
000060  69676e65          DCB      0x69,0x67,0x6e,0x65
000064  6420696e          DCB      0x64,0x20,0x69,0x6e
000068  742c2073          DCB      0x74,0x2c,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  742c2073          DCB      0x74,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  742c2063          DCB      0x74,0x2c,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00008c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000090  6d626564          DCB      0x6d,0x62,0x65,0x64
000094  6465643a          DCB      0x64,0x65,0x64,0x3a
000098  3a466978          DCB      0x3a,0x46,0x69,0x78
00009c  65644c65          DCB      0x65,0x64,0x4c,0x65
0000a0  6e677468          DCB      0x6e,0x67,0x74,0x68
0000a4  4c697374          DCB      0x4c,0x69,0x73,0x74
0000a8  3c416e6b          DCB      0x3c,0x41,0x6e,0x6b
0000ac  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000b0  6d626564          DCB      0x6d,0x62,0x65,0x64
0000b4  6465643a          DCB      0x64,0x65,0x64,0x3a
0000b8  3a436c61          DCB      0x3a,0x43,0x6c,0x61
0000bc  73736966          DCB      0x73,0x73,0x69,0x66
0000c0  6965723a          DCB      0x69,0x65,0x72,0x3a
0000c4  3a436173          DCB      0x3a,0x43,0x61,0x73
0000c8  63616465          DCB      0x63,0x61,0x64,0x65
0000cc  436c6173          DCB      0x43,0x6c,0x61,0x73
0000d0  73696669          DCB      0x73,0x69,0x66,0x69
0000d4  65723a3a          DCB      0x65,0x72,0x3a,0x3a
0000d8  53746167          DCB      0x53,0x74,0x61,0x67
0000dc  653e2026          DCB      0x65,0x3e,0x20,0x26
0000e0  2c20636f          DCB      0x2c,0x20,0x63,0x6f
0000e4  6e737420          DCB      0x6e,0x73,0x74,0x20
0000e8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000ec  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000f0  62656464          DCB      0x62,0x65,0x64,0x64
0000f4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000f8  46697865          DCB      0x46,0x69,0x78,0x65
0000fc  644c656e          DCB      0x64,0x4c,0x65,0x6e
000100  6774684c          DCB      0x67,0x74,0x68,0x4c
000104  6973743c          DCB      0x69,0x73,0x74,0x3c
000108  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00010c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000110  62656464          DCB      0x62,0x65,0x64,0x64
000114  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000118  436c6173          DCB      0x43,0x6c,0x61,0x73
00011c  73696669          DCB      0x73,0x69,0x66,0x69
000120  65723a3a          DCB      0x65,0x72,0x3a,0x3a
000124  43617363          DCB      0x43,0x61,0x73,0x63
000128  61646543          DCB      0x61,0x64,0x65,0x43
00012c  6c617373          DCB      0x6c,0x61,0x73,0x73
000130  69666965          DCB      0x69,0x66,0x69,0x65
000134  723a3a44          DCB      0x72,0x3a,0x3a,0x44
000138  54726565          DCB      0x54,0x72,0x65,0x65
00013c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000140  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000144  73742041          DCB      0x73,0x74,0x20,0x41
000148  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00014c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000150  65646465          DCB      0x65,0x64,0x64,0x65
000154  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000158  69786564          DCB      0x69,0x78,0x65,0x64
00015c  4c656e67          DCB      0x4c,0x65,0x6e,0x67
000160  74684c69          DCB      0x74,0x68,0x4c,0x69
000164  73743c41          DCB      0x73,0x74,0x3c,0x41
000168  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00016c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000170  65646465          DCB      0x65,0x64,0x64,0x65
000174  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000178  6c617373          DCB      0x6c,0x61,0x73,0x73
00017c  69666965          DCB      0x69,0x66,0x69,0x65
000180  723a3a43          DCB      0x72,0x3a,0x3a,0x43
000184  61736361          DCB      0x61,0x73,0x63,0x61
000188  6465436c          DCB      0x64,0x65,0x43,0x6c
00018c  61737369          DCB      0x61,0x73,0x73,0x69
000190  66696572          DCB      0x66,0x69,0x65,0x72
000194  3a3a4454          DCB      0x3a,0x3a,0x44,0x54
000198  7265654e          DCB      0x72,0x65,0x65,0x4e
00019c  6f64653e          DCB      0x6f,0x64,0x65,0x3e
0001a0  20262c20          DCB      0x20,0x26,0x2c,0x20
0001a4  636f6e73          DCB      0x63,0x6f,0x6e,0x73
0001a8  7420416e          DCB      0x74,0x20,0x41,0x6e
0001ac  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0001b0  456d6265          DCB      0x45,0x6d,0x62,0x65
0001b4  64646564          DCB      0x64,0x64,0x65,0x64
0001b8  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
0001bc  7865644c          DCB      0x78,0x65,0x64,0x4c
0001c0  656e6774          DCB      0x65,0x6e,0x67,0x74
0001c4  684c6973          DCB      0x68,0x4c,0x69,0x73
0001c8  743c666c          DCB      0x74,0x3c,0x66,0x6c
0001cc  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0001d0  20262c20          DCB      0x20,0x26,0x2c,0x20
0001d4  636f6e73          DCB      0x63,0x6f,0x6e,0x73
0001d8  7420416e          DCB      0x74,0x20,0x41,0x6e
0001dc  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0001e0  456d6265          DCB      0x45,0x6d,0x62,0x65
0001e4  64646564          DCB      0x64,0x64,0x65,0x64
0001e8  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
0001ec  7865644c          DCB      0x78,0x65,0x64,0x4c
0001f0  656e6774          DCB      0x65,0x6e,0x67,0x74
0001f4  684c6973          DCB      0x68,0x4c,0x69,0x73
0001f8  743c7369          DCB      0x74,0x3c,0x73,0x69
0001fc  676e6564          DCB      0x67,0x6e,0x65,0x64
000200  20696e74          DCB      0x20,0x69,0x6e,0x74
000204  3e202629          DCB      0x3e,0x20,0x26,0x29
000208  00                DCB      0x00
                  |symbol_number.103|
000209  416e6b            DCB      0x41,0x6e,0x6b
00020c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000210  6d626564          DCB      0x6d,0x62,0x65,0x64
000214  6465643a          DCB      0x64,0x65,0x64,0x3a
000218  3a436c61          DCB      0x3a,0x43,0x6c,0x61
00021c  73736966          DCB      0x73,0x73,0x69,0x66
000220  6965723a          DCB      0x69,0x65,0x72,0x3a
000224  3a436173          DCB      0x3a,0x43,0x61,0x73
000228  63616465          DCB      0x63,0x61,0x64,0x65
00022c  436c6173          DCB      0x43,0x6c,0x61,0x73
000230  73696669          DCB      0x73,0x69,0x66,0x69
000234  65725f4c          DCB      0x65,0x72,0x5f,0x4c
000238  42503a3a          DCB      0x42,0x50,0x3a,0x3a
00023c  43617363          DCB      0x43,0x61,0x73,0x63
000240  61646543          DCB      0x61,0x64,0x65,0x43
000244  6c617373          DCB      0x6c,0x61,0x73,0x73
000248  69666965          DCB      0x69,0x66,0x69,0x65
00024c  725f4c42          DCB      0x72,0x5f,0x4c,0x42
000250  5028626f          DCB      0x50,0x28,0x62,0x6f
000254  6f6c2c20          DCB      0x6f,0x6c,0x2c,0x20
000258  7369676e          DCB      0x73,0x69,0x67,0x6e
00025c  65642069          DCB      0x65,0x64,0x20,0x69
000260  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000264  7369676e          DCB      0x73,0x69,0x67,0x6e
000268  65642069          DCB      0x65,0x64,0x20,0x69
00026c  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000270  7369676e          DCB      0x73,0x69,0x67,0x6e
000274  65642069          DCB      0x65,0x64,0x20,0x69
000278  6e742c20          DCB      0x6e,0x74,0x2c,0x20
00027c  7369676e          DCB      0x73,0x69,0x67,0x6e
000280  65642069          DCB      0x65,0x64,0x20,0x69
000284  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000288  7369676e          DCB      0x73,0x69,0x67,0x6e
00028c  65642069          DCB      0x65,0x64,0x20,0x69
000290  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000294  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000298  7420416e          DCB      0x74,0x20,0x41,0x6e
00029c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0002a0  456d6265          DCB      0x45,0x6d,0x62,0x65
0002a4  64646564          DCB      0x64,0x64,0x65,0x64
0002a8  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
0002ac  7865644c          DCB      0x78,0x65,0x64,0x4c
0002b0  656e6774          DCB      0x65,0x6e,0x67,0x74
0002b4  684c6973          DCB      0x68,0x4c,0x69,0x73
0002b8  743c416e          DCB      0x74,0x3c,0x41,0x6e
0002bc  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0002c0  456d6265          DCB      0x45,0x6d,0x62,0x65
0002c4  64646564          DCB      0x64,0x64,0x65,0x64
0002c8  3a3a436c          DCB      0x3a,0x3a,0x43,0x6c
0002cc  61737369          DCB      0x61,0x73,0x73,0x69
0002d0  66696572          DCB      0x66,0x69,0x65,0x72
0002d4  3a3a4361          DCB      0x3a,0x3a,0x43,0x61
0002d8  73636164          DCB      0x73,0x63,0x61,0x64
0002dc  65436c61          DCB      0x65,0x43,0x6c,0x61
0002e0  73736966          DCB      0x73,0x73,0x69,0x66
0002e4  6965723a          DCB      0x69,0x65,0x72,0x3a
0002e8  3a537461          DCB      0x3a,0x53,0x74,0x61
0002ec  67653e20          DCB      0x67,0x65,0x3e,0x20
0002f0  262c2063          DCB      0x26,0x2c,0x20,0x63
0002f4  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
0002f8  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0002fc  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000300  6d626564          DCB      0x6d,0x62,0x65,0x64
000304  6465643a          DCB      0x64,0x65,0x64,0x3a
000308  3a466978          DCB      0x3a,0x46,0x69,0x78
00030c  65644c65          DCB      0x65,0x64,0x4c,0x65
000310  6e677468          DCB      0x6e,0x67,0x74,0x68
000314  4c697374          DCB      0x4c,0x69,0x73,0x74
000318  3c416e6b          DCB      0x3c,0x41,0x6e,0x6b
00031c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000320  6d626564          DCB      0x6d,0x62,0x65,0x64
000324  6465643a          DCB      0x64,0x65,0x64,0x3a
000328  3a436c61          DCB      0x3a,0x43,0x6c,0x61
00032c  73736966          DCB      0x73,0x73,0x69,0x66
000330  6965723a          DCB      0x69,0x65,0x72,0x3a
000334  3a436173          DCB      0x3a,0x43,0x61,0x73
000338  63616465          DCB      0x63,0x61,0x64,0x65
00033c  436c6173          DCB      0x43,0x6c,0x61,0x73
000340  73696669          DCB      0x73,0x69,0x66,0x69
000344  65723a3a          DCB      0x65,0x72,0x3a,0x3a
000348  44547265          DCB      0x44,0x54,0x72,0x65
00034c  653e2026          DCB      0x65,0x3e,0x20,0x26
000350  2c20636f          DCB      0x2c,0x20,0x63,0x6f
000354  6e737420          DCB      0x6e,0x73,0x74,0x20
000358  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00035c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000360  62656464          DCB      0x62,0x65,0x64,0x64
000364  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000368  46697865          DCB      0x46,0x69,0x78,0x65
00036c  644c656e          DCB      0x64,0x4c,0x65,0x6e
000370  6774684c          DCB      0x67,0x74,0x68,0x4c
000374  6973743c          DCB      0x69,0x73,0x74,0x3c
000378  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00037c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000380  62656464          DCB      0x62,0x65,0x64,0x64
000384  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000388  436c6173          DCB      0x43,0x6c,0x61,0x73
00038c  73696669          DCB      0x73,0x69,0x66,0x69
000390  65723a3a          DCB      0x65,0x72,0x3a,0x3a
000394  43617363          DCB      0x43,0x61,0x73,0x63
000398  61646543          DCB      0x61,0x64,0x65,0x43
00039c  6c617373          DCB      0x6c,0x61,0x73,0x73
0003a0  69666965          DCB      0x69,0x66,0x69,0x65
0003a4  723a3a44          DCB      0x72,0x3a,0x3a,0x44
0003a8  54726565          DCB      0x54,0x72,0x65,0x65
0003ac  4e6f6465          DCB      0x4e,0x6f,0x64,0x65
0003b0  3e20262c          DCB      0x3e,0x20,0x26,0x2c
0003b4  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0003b8  73742041          DCB      0x73,0x74,0x20,0x41
0003bc  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0003c0  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0003c4  65646465          DCB      0x65,0x64,0x64,0x65
0003c8  643a3a46          DCB      0x64,0x3a,0x3a,0x46
0003cc  69786564          DCB      0x69,0x78,0x65,0x64
0003d0  4c656e67          DCB      0x4c,0x65,0x6e,0x67
0003d4  74684c69          DCB      0x74,0x68,0x4c,0x69
0003d8  73743c66          DCB      0x73,0x74,0x3c,0x66
0003dc  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0003e0  3e20262c          DCB      0x3e,0x20,0x26,0x2c
0003e4  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0003e8  73742041          DCB      0x73,0x74,0x20,0x41
0003ec  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0003f0  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0003f4  65646465          DCB      0x65,0x64,0x64,0x65
0003f8  643a3a46          DCB      0x64,0x3a,0x3a,0x46
0003fc  69786564          DCB      0x69,0x78,0x65,0x64
000400  4c656e67          DCB      0x4c,0x65,0x6e,0x67
000404  74684c69          DCB      0x74,0x68,0x4c,0x69
000408  73743c73          DCB      0x73,0x74,0x3c,0x73
00040c  69676e65          DCB      0x69,0x67,0x6e,0x65
000410  6420696e          DCB      0x64,0x20,0x69,0x6e
000414  743e2026          DCB      0x74,0x3e,0x20,0x26
000418  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00041c  6e737420          DCB      0x6e,0x73,0x74,0x20
000420  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000424  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000428  62656464          DCB      0x62,0x65,0x64,0x64
00042c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000430  46697865          DCB      0x46,0x69,0x78,0x65
000434  644c656e          DCB      0x64,0x4c,0x65,0x6e
000438  6774684c          DCB      0x67,0x74,0x68,0x4c
00043c  6973743c          DCB      0x69,0x73,0x74,0x3c
000440  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000444  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000448  62656464          DCB      0x62,0x65,0x64,0x64
00044c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000450  52656374          DCB      0x52,0x65,0x63,0x74
000454  616e676c          DCB      0x61,0x6e,0x67,0x6c
000458  653c7369          DCB      0x65,0x3c,0x73,0x69
00045c  676e6564          DCB      0x67,0x6e,0x65,0x64
000460  20696e74          DCB      0x20,0x69,0x6e,0x74
000464  3e3e2026          DCB      0x3e,0x3e,0x20,0x26
000468  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00046c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000470  456d6265          DCB      0x45,0x6d,0x62,0x65
000474  64646564          DCB      0x64,0x64,0x65,0x64
000478  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
00047c  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
000480  53746163          DCB      0x53,0x74,0x61,0x63
000484  6b202629          DCB      0x6b,0x20,0x26,0x29
000488  00                DCB      0x00
                  |symbol_number.104|
000489  416e6b            DCB      0x41,0x6e,0x6b
00048c  693a3a52          DCB      0x69,0x3a,0x3a,0x52
000490  6573756c          DCB      0x65,0x73,0x75,0x6c
000494  7420416e          DCB      0x74,0x20,0x41,0x6e
000498  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00049c  456d6265          DCB      0x45,0x6d,0x62,0x65
0004a0  64646564          DCB      0x64,0x64,0x65,0x64
0004a4  3a3a436c          DCB      0x3a,0x3a,0x43,0x6c
0004a8  61737369          DCB      0x61,0x73,0x73,0x69
0004ac  66696572          DCB      0x66,0x69,0x65,0x72
0004b0  3a3a4361          DCB      0x3a,0x3a,0x43,0x61
0004b4  73636164          DCB      0x73,0x63,0x61,0x64
0004b8  65436c61          DCB      0x65,0x43,0x6c,0x61
0004bc  73736966          DCB      0x73,0x73,0x69,0x66
0004c0  6965725f          DCB      0x69,0x65,0x72,0x5f
0004c4  4c42503a          DCB      0x4c,0x42,0x50,0x3a
0004c8  3a446574          DCB      0x3a,0x44,0x65,0x74
0004cc  6563744d          DCB      0x65,0x63,0x74,0x4d
0004d0  756c7469          DCB      0x75,0x6c,0x74,0x69
0004d4  5363616c          DCB      0x53,0x63,0x61,0x6c
0004d8  6528636f          DCB      0x65,0x28,0x63,0x6f
0004dc  6e737420          DCB      0x6e,0x73,0x74,0x20
0004e0  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0004e4  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0004e8  62656464          DCB      0x62,0x65,0x64,0x64
0004ec  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0004f0  41727261          DCB      0x41,0x72,0x72,0x61
0004f4  793c756e          DCB      0x79,0x3c,0x75,0x6e
0004f8  7369676e          DCB      0x73,0x69,0x67,0x6e
0004fc  65642063          DCB      0x65,0x64,0x20,0x63
000500  6861723e          DCB      0x68,0x61,0x72,0x3e
000504  20262c20          DCB      0x20,0x26,0x2c,0x20
000508  666c6f61          DCB      0x66,0x6c,0x6f,0x61
00050c  742c2073          DCB      0x74,0x2c,0x20,0x73
000510  69676e65          DCB      0x69,0x67,0x6e,0x65
000514  6420696e          DCB      0x64,0x20,0x69,0x6e
000518  742c2073          DCB      0x74,0x2c,0x20,0x73
00051c  69676e65          DCB      0x69,0x67,0x6e,0x65
000520  6420696e          DCB      0x64,0x20,0x69,0x6e
000524  742c2073          DCB      0x74,0x2c,0x20,0x73
000528  69676e65          DCB      0x69,0x67,0x6e,0x65
00052c  6420696e          DCB      0x64,0x20,0x69,0x6e
000530  742c2073          DCB      0x74,0x2c,0x20,0x73
000534  69676e65          DCB      0x69,0x67,0x6e,0x65
000538  6420696e          DCB      0x64,0x20,0x69,0x6e
00053c  742c2073          DCB      0x74,0x2c,0x20,0x73
000540  69676e65          DCB      0x69,0x67,0x6e,0x65
000544  6420696e          DCB      0x64,0x20,0x69,0x6e
000548  742c2041          DCB      0x74,0x2c,0x20,0x41
00054c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000550  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000554  65646465          DCB      0x65,0x64,0x64,0x65
000558  643a3a46          DCB      0x64,0x3a,0x3a,0x46
00055c  69786564          DCB      0x69,0x78,0x65,0x64
000560  4c656e67          DCB      0x4c,0x65,0x6e,0x67
000564  74684c69          DCB      0x74,0x68,0x4c,0x69
000568  73743c41          DCB      0x73,0x74,0x3c,0x41
00056c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000570  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000574  65646465          DCB      0x65,0x64,0x64,0x65
000578  643a3a52          DCB      0x64,0x3a,0x3a,0x52
00057c  65637461          DCB      0x65,0x63,0x74,0x61
000580  6e676c65          DCB      0x6e,0x67,0x6c,0x65
000584  3c736967          DCB      0x3c,0x73,0x69,0x67
000588  6e656420          DCB      0x6e,0x65,0x64,0x20
00058c  696e743e          DCB      0x69,0x6e,0x74,0x3e
000590  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000594  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000598  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00059c  6d626564          DCB      0x6d,0x62,0x65,0x64
0005a0  6465643a          DCB      0x64,0x65,0x64,0x3a
0005a4  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
0005a8  6f727953          DCB      0x6f,0x72,0x79,0x53
0005ac  7461636b          DCB      0x74,0x61,0x63,0x6b
0005b0  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0005b4  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0005b8  456d6265          DCB      0x45,0x6d,0x62,0x65
0005bc  64646564          DCB      0x64,0x64,0x65,0x64
0005c0  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
0005c4  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
0005c8  53746163          DCB      0x53,0x74,0x61,0x63
0005cc  6b290000          DCB      0x6b,0x29,0x00,0x00
0005d0  41727261          DCB      0x41,0x72,0x72,0x61
0005d4  793c5479          DCB      0x79,0x3c,0x54,0x79
0005d8  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0005dc  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
0005e0  70757465          DCB      0x70,0x75,0x74,0x65
0005e4  52657175          DCB      0x52,0x65,0x71,0x75
0005e8  69726564          DCB      0x69,0x72,0x65,0x64
0005ec  53747269          DCB      0x53,0x74,0x72,0x69
0005f0  64650000          DCB      0x64,0x65,0x00,0x00
0005f4  496e7661          DCB      0x49,0x6e,0x76,0x61
0005f8  6c696420          DCB      0x6c,0x69,0x64,0x20
0005fc  73697a65          DCB      0x73,0x69,0x7a,0x65
000600  00000000          DCB      0x00,0x00,0x00,0x00
000604  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000608  6f726574          DCB      0x6f,0x72,0x65,0x74
00060c  6563685c          DCB      0x65,0x63,0x68,0x5c
000610  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000614  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000618  6e636c75          DCB      0x6e,0x63,0x6c,0x75
00061c  64655c61          DCB      0x64,0x65,0x5c,0x61
000620  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000624  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000628  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
00062c  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000630  2f617272          DCB      0x2f,0x61,0x72,0x72
000634  61793264          DCB      0x61,0x79,0x32,0x64
000638  2e680000          DCB      0x2e,0x68,0x00,0x00
00063c  41727261          DCB      0x41,0x72,0x72,0x61
000640  793c5479          DCB      0x79,0x3c,0x54,0x79
000644  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000648  3a676574          DCB      0x3a,0x67,0x65,0x74
00064c  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000650  65000000          DCB      0x65,0x00,0x00,0x00
000654  4e656761          DCB      0x4e,0x65,0x67,0x61
000658  74697665          DCB      0x74,0x69,0x76,0x65
00065c  2064696d          DCB      0x20,0x64,0x69,0x6d
000660  656e7369          DCB      0x65,0x6e,0x73,0x69
000664  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d017              BEQ      |L86.64|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L86.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L86.30|
                  |L86.26|
00001a  462b              MOV      r3,r5
00001c  e010              B        |L86.64|
                  |L86.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0a              BGE      |L86.64|
00002a  2185              MOVS     r1,#0x85
00002c  4806              LDR      r0,|L86.72|
00002e  e9cd0100          STRD     r0,r1,[sp,#0]
000032  a306              ADR      r3,|L86.76|
000034  a214              ADR      r2,|L86.136|
000036  a11a              ADR      r1,|L86.160|
000038  2005              MOVS     r0,#5
00003a  f7fffffe          BL       _Anki_Log
00003e  462b              MOV      r3,r5
                  |L86.64|
000040  6023              STR      r3,[r4,#0]
000042  b003              ADD      sp,sp,#0xc
000044  4620              MOV      r0,r4
000046  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L86.72|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L86.76|
00004c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/sequen"
000050  6f726574
000054  6563685c
000058  636f6d6d
00005c  6f6e5c69
000060  6e636c75
000064  64655c61
000068  6e6b692f
00006c  636f6d6d
000070  6f6e2f72
000074  6f626f74
000078  2f736571
00007c  75656e  
00007f  6365732e          DCB      "ces.h",0
000083  6800    
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L86.136|
000088  73697a65          DCB      "size estimation failed",0
00008c  20657374
000090  696d6174
000094  696f6e20
000098  6661696c
00009c  656400  
00009f  00                DCB      0
                  |L86.160|
0000a0  4c696e65          DCB      "LinearSequence<Type>::computeSize",0
0000a4  61725365
0000a8  7175656e
0000ac  63653c54
0000b0  7970653e
0000b4  3a3a636f
0000b8  6d707574
0000bc  6553697a
0000c0  6500    
0000c2  00                DCB      0
0000c3  00                DCB      0

                          AREA ||area_number.87||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.87||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468a              MOV      r10,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Rectangle<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4683              MOV      r11,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9db1200          LDRD     r1,r2,[r11,#0]
00003c  f8db3008          LDR      r3,[r11,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd31              BLE      |L93.204|
000068  fb05f006          MUL      r0,r5,r6
00006c  2800              CMP      r0,#0
00006e  d02d              BEQ      |L93.204|
000070  2000              MOVS     r0,#0
000072  fb008007          MLA      r0,r0,r7,r8
000076  62e0              STR      r0,[r4,#0x2c]
                  |L93.120|
000078  2d00              CMP      r5,#0
00007a  bfc8              IT       GT
00007c  2e00              CMPGT    r6,#0
00007e  dd27              BLE      |L93.208|
000080  fb05f006          MUL      r0,r5,r6
000084  b320              CBZ      r0,|L93.208|
000086  2000              MOVS     r0,#0
000088  fb008007          MLA      r0,r0,r7,r8
00008c  6320              STR      r0,[r4,#0x30]
                  |L93.142|
00008e  2d00              CMP      r5,#0
000090  bfc8              IT       GT
000092  2e00              CMPGT    r6,#0
000094  dd1e              BLE      |L93.212|
000096  fb05f006          MUL      r0,r5,r6
00009a  b1d8              CBZ      r0,|L93.212|
00009c  2000              MOVS     r0,#0
00009e  fb008007          MLA      r0,r0,r7,r8
0000a2  6320              STR      r0,[r4,#0x30]
                  |L93.164|
0000a4  a810              ADD      r0,sp,#0x40
0000a6  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000aa  b300              CBZ      r0,|L93.238|
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
0000b2  4601              MOV      r1,r0
0000b4  f1ba0f00          CMP      r10,#0
0000b8  bfac              ITE      GE
0000ba  4650              MOVGE    r0,r10
0000bc  2000              MOVLT    r0,#0
0000be  4288              CMP      r0,r1
0000c0  dd0a              BLE      |L93.216|
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
0000c8  4682              MOV      r10,r0
0000ca  e00a              B        |L93.226|
                  |L93.204|
0000cc  62e2              STR      r2,[r4,#0x2c]
0000ce  e7d3              B        |L93.120|
                  |L93.208|
0000d0  6322              STR      r2,[r4,#0x30]
0000d2  e7dc              B        |L93.142|
                  |L93.212|
0000d4  6322              STR      r2,[r4,#0x30]
0000d6  e7e5              B        |L93.164|
                  |L93.216|
0000d8  f1ba0f00          CMP      r10,#0
0000dc  bfb8              IT       LT
0000de  f04f0a00          MOVLT    r10,#0
                  |L93.226|
0000e2  4620              MOV      r0,r4
0000e4  f8c4a00c          STR      r10,[r4,#0xc]
0000e8  b011              ADD      sp,sp,#0x44
0000ea  e8bd8ff0          POP      {r4-r11,pc}
                  |L93.238|
0000ee  2500              MOVS     r5,#0
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
0000f6  42a8              CMP      r0,r5
0000f8  da03              BGE      |L93.258|
0000fa  4620              MOV      r0,r4
0000fc  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
000100  4605              MOV      r5,r0
                  |L93.258|
000102  60e5              STR      r5,[r4,#0xc]
000104  b011              ADD      sp,sp,#0x44
000106  4620              MOV      r0,r4
000108  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.94||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.94||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC1Ev||, COMGROUP=_ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC2Ev                  ; Alternate entry point ; Anki::Embedded::Classifier::CascadeClassifier::Data::Data__sub_object()
                  _ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC1Ev PROC ; Anki::Embedded::Classifier::CascadeClassifier::Data::Data()
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  3018              ADDS     r0,r0,#0x18
000006  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
00000a  300c              ADDS     r0,r0,#0xc
00000c  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000010  3018              ADDS     r0,r0,#0x18
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f36ff          MOV      r6,#0xffffffff
00001a  f8406d0c          STR      r6,[r0,#-0xc]!
00001e  2500              MOVS     r5,#0
000020  6046              STR      r6,[r0,#4]
000022  6105              STR      r5,[r0,#0x10]
000024  6145              STR      r5,[r0,#0x14]
000026  6086              STR      r6,[r0,#8]
000028  f1a00418          SUB      r4,r0,#0x18
00002c  6185              STR      r5,[r0,#0x18]
00002e  462f              MOV      r7,r5
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>::get_maximumSize() const
000036  42b8              CMP      r0,r7
000038  da03              BGE      |L100.66|
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>::get_maximumSize() const
000040  4607              MOV      r7,r0
                  |L100.66|
000042  f1040034          ADD      r0,r4,#0x34
000046  60e7              STR      r7,[r4,#0xc]
000048  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
00004c  300c              ADDS     r0,r0,#0xc
00004e  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000052  3018              ADDS     r0,r0,#0x18
000054  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000058  f8406d0c          STR      r6,[r0,#-0xc]!
00005c  f1a00418          SUB      r4,r0,#0x18
000060  6046              STR      r6,[r0,#4]
000062  6105              STR      r5,[r0,#0x10]
000064  6145              STR      r5,[r0,#0x14]
000066  6086              STR      r6,[r0,#8]
000068  6185              STR      r5,[r0,#0x18]
00006a  2700              MOVS     r7,#0
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>::get_maximumSize() const
000072  42b8              CMP      r0,r7
000074  da03              BGE      |L100.126|
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>::get_maximumSize() const
00007c  4607              MOV      r7,r0
                  |L100.126|
00007e  f1040034          ADD      r0,r4,#0x34
000082  60e7              STR      r7,[r4,#0xc]
000084  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000088  300c              ADDS     r0,r0,#0xc
00008a  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
00008e  3018              ADDS     r0,r0,#0x18
000090  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000094  f8406d0c          STR      r6,[r0,#-0xc]!
000098  f1a00418          SUB      r4,r0,#0x18
00009c  6046              STR      r6,[r0,#4]
00009e  6105              STR      r5,[r0,#0x10]
0000a0  6145              STR      r5,[r0,#0x14]
0000a2  6086              STR      r6,[r0,#8]
0000a4  6185              STR      r5,[r0,#0x18]
0000a6  2700              MOVS     r7,#0
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>::get_maximumSize() const
0000ae  42b8              CMP      r0,r7
0000b0  da03              BGE      |L100.186|
0000b2  4620              MOV      r0,r4
0000b4  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>::get_maximumSize() const
0000b8  4607              MOV      r7,r0
                  |L100.186|
0000ba  f1040034          ADD      r0,r4,#0x34
0000be  60e7              STR      r7,[r4,#0xc]
0000c0  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
0000c4  300c              ADDS     r0,r0,#0xc
0000c6  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
0000ca  3018              ADDS     r0,r0,#0x18
0000cc  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
0000d0  f8406d0c          STR      r6,[r0,#-0xc]!
0000d4  f1a00418          SUB      r4,r0,#0x18
0000d8  6046              STR      r6,[r0,#4]
0000da  6105              STR      r5,[r0,#0x10]
0000dc  6145              STR      r5,[r0,#0x14]
0000de  6086              STR      r6,[r0,#8]
0000e0  6185              STR      r5,[r0,#0x18]
0000e2  2700              MOVS     r7,#0
0000e4  4620              MOV      r0,r4
0000e6  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
0000ea  42b8              CMP      r0,r7
0000ec  da03              BGE      |L100.246|
0000ee  4620              MOV      r0,r4
0000f0  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
0000f4  4607              MOV      r7,r0
                  |L100.246|
0000f6  f1040034          ADD      r0,r4,#0x34
0000fa  60e7              STR      r7,[r4,#0xc]
0000fc  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000100  300c              ADDS     r0,r0,#0xc
000102  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000106  3018              ADDS     r0,r0,#0x18
000108  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
00010c  f8406d0c          STR      r6,[r0,#-0xc]!
000110  f1a00418          SUB      r4,r0,#0x18
000114  6046              STR      r6,[r0,#4]
000116  6105              STR      r5,[r0,#0x10]
000118  6145              STR      r5,[r0,#0x14]
00011a  6086              STR      r6,[r0,#8]
00011c  6185              STR      r5,[r0,#0x18]
00011e  2500              MOVS     r5,#0
000120  4620              MOV      r0,r4
000122  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
000126  42a8              CMP      r0,r5
000128  da03              BGE      |L100.306|
00012a  4620              MOV      r0,r4
00012c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
000130  4605              MOV      r5,r0
                  |L100.306|
000132  f1a400e8          SUB      r0,r4,#0xe8
000136  60e5              STR      r5,[r4,#0xc]
000138  e8bd81f0          POP      {r4-r8,pc}
                          ENDP


                          AREA ||area_number.101||, COMGROUP=_ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC1Ev, LINKORDER=||i._ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.101||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded10Classifier17CascadeClassifier4DataC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded8AreValidINS0_15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEEENS2_INS4_5DTreeEEENS2_INS4_9DTreeNodeEEENS2_IfEENS2_IiEEEEbRKT_RKT0_RKT1_RKT2_RKT3_||, COMGROUP=_ZN4Anki8Embedded8AreValidINS0_15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEEENS2_INS4_5DTreeEEENS2_INS4_9DTreeNodeEEENS2_IfEENS2_IiEEEEbRKT_RKT0_RKT1_RKT2_RKT3_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded8AreValidINS0_15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEEENS2_INS4_5DTreeEEENS2_INS4_9DTreeNodeEEENS2_IfEENS2_IiEEEEbRKT_RKT0_RKT1_RKT2_RKT3_ PROC ; Anki::Embedded::AreValid<Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>, Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>, Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>, Anki::Embedded::FixedLengthList<float>, Anki::Embedded::FixedLengthList<int>>(const T1&, const T2&, const T3&, const T4&, const T5&)
;;;104    
;;;105        template<typename Type1, typename Type2, typename Type3, typename Type4, typename Type5> bool AreValid(const Type1 &object1, const Type2 &object2, const Type3 &object3, const Type4 &object4, const Type5 &object5)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;106        {
000004  461e              MOV      r6,r3
000006  4617              MOV      r7,r2
000008  4688              MOV      r8,r1
;;;107          if(!object1.IsValid() || !object2.IsValid() || !object3.IsValid() || !object4.IsValid() || !object5.IsValid())
00000a  4604              MOV      r4,r0
00000c  9d08              LDR      r5,[sp,#0x20]
00000e  f8d0900c          LDR      r9,[r0,#0xc]
000012  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>::get_maximumSize() const
000016  4581              CMP      r9,r0
000018  dc55              BGT      |L104.198|
00001a  6aa0              LDR      r0,[r4,#0x28]
00001c  b130              CBZ      r0,|L104.44|
00001e  69a0              LDR      r0,[r4,#0x18]
000020  2800              CMP      r0,#0
000022  bfa3              ITTTE    GE
000024  69e0              LDRGE    r0,[r4,#0x1c]
000026  2800              CMPGE    r0,#0
000028  2001              MOVGE    r0,#1
00002a  2000              MOVLT    r0,#0
                  |L104.44|
00002c  2800              CMP      r0,#0
00002e  d04a              BEQ      |L104.198|
000030  4644              MOV      r4,r8
000032  f8d8800c          LDR      r8,[r8,#0xc]
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>::get_maximumSize() const
00003c  4580              CMP      r8,r0
00003e  dc42              BGT      |L104.198|
000040  6aa0              LDR      r0,[r4,#0x28]
000042  b130              CBZ      r0,|L104.82|
000044  69a0              LDR      r0,[r4,#0x18]
000046  2800              CMP      r0,#0
000048  bfa3              ITTTE    GE
00004a  69e0              LDRGE    r0,[r4,#0x1c]
00004c  2800              CMPGE    r0,#0
00004e  2001              MOVGE    r0,#1
000050  2000              MOVLT    r0,#0
                  |L104.82|
000052  2800              CMP      r0,#0
000054  d037              BEQ      |L104.198|
000056  463c              MOV      r4,r7
000058  68ff              LDR      r7,[r7,#0xc]
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>::get_maximumSize() const
000060  4287              CMP      r7,r0
000062  dc30              BGT      |L104.198|
000064  6aa0              LDR      r0,[r4,#0x28]
000066  b130              CBZ      r0,|L104.118|
000068  69a0              LDR      r0,[r4,#0x18]
00006a  2800              CMP      r0,#0
00006c  bfa3              ITTTE    GE
00006e  69e0              LDRGE    r0,[r4,#0x1c]
000070  2800              CMPGE    r0,#0
000072  2001              MOVGE    r0,#1
000074  2000              MOVLT    r0,#0
                  |L104.118|
000076  2800              CMP      r0,#0
000078  d025              BEQ      |L104.198|
00007a  4634              MOV      r4,r6
00007c  68f6              LDR      r6,[r6,#0xc]
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
000084  4286              CMP      r6,r0
000086  dc1e              BGT      |L104.198|
000088  6aa0              LDR      r0,[r4,#0x28]
00008a  b130              CBZ      r0,|L104.154|
00008c  69a0              LDR      r0,[r4,#0x18]
00008e  2800              CMP      r0,#0
000090  bfa3              ITTTE    GE
000092  69e0              LDRGE    r0,[r4,#0x1c]
000094  2800              CMPGE    r0,#0
000096  2001              MOVGE    r0,#1
000098  2000              MOVLT    r0,#0
                  |L104.154|
00009a  b1a0              CBZ      r0,|L104.198|
00009c  462c              MOV      r4,r5
00009e  68ed              LDR      r5,[r5,#0xc]
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
0000a6  4285              CMP      r5,r0
0000a8  dc0d              BGT      |L104.198|
0000aa  6aa0              LDR      r0,[r4,#0x28]
0000ac  b130              CBZ      r0,|L104.188|
0000ae  69a0              LDR      r0,[r4,#0x18]
0000b0  2800              CMP      r0,#0
0000b2  bfa3              ITTTE    GE
0000b4  69e0              LDRGE    r0,[r4,#0x1c]
0000b6  2800              CMPGE    r0,#0
0000b8  2001              MOVGE    r0,#1
0000ba  2000              MOVLT    r0,#0
                  |L104.188|
0000bc  2800              CMP      r0,#0
;;;108            return false;
;;;109    
;;;110          return true;
0000be  bf1c              ITT      NE
0000c0  2001              MOVNE    r0,#1
;;;111        }
0000c2  e8bd87f0          POPNE    {r4-r10,pc}
                  |L104.198|
0000c6  2000              MOVS     r0,#0                 ;108
0000c8  e8bd87f0          POP      {r4-r10,pc}
;;;112    
                          ENDP


                          AREA ||area_number.105||, COMGROUP=_ZN4Anki8Embedded8AreValidINS0_15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEEENS2_INS4_5DTreeEEENS2_INS4_9DTreeNodeEEENS2_IfEENS2_IiEEEEbRKT_RKT0_RKT1_RKT2_RKT3_, LINKORDER=||t._ZN4Anki8Embedded8AreValidINS0_15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEEENS2_INS4_5DTreeEEENS2_INS4_9DTreeNodeEEENS2_IfEENS2_IiEEEEbRKT_RKT0_RKT1_RKT2_RKT3_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.105||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded8AreValidINS0_15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEEENS2_INS4_5DTreeEEENS2_INS4_9DTreeNodeEEENS2_IfEENS2_IiEEEEbRKT_RKT0_RKT1_RKT2_RKT3_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIiEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<int>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468a              MOV      r10,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4683              MOV      r11,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9db1200          LDRD     r1,r2,[r11,#0]
00003c  f8db3008          LDR      r3,[r11,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd31              BLE      |L111.204|
000068  fb05f006          MUL      r0,r5,r6
00006c  2800              CMP      r0,#0
00006e  d02d              BEQ      |L111.204|
000070  2000              MOVS     r0,#0
000072  fb008007          MLA      r0,r0,r7,r8
000076  62e0              STR      r0,[r4,#0x2c]
                  |L111.120|
000078  2d00              CMP      r5,#0
00007a  bfc8              IT       GT
00007c  2e00              CMPGT    r6,#0
00007e  dd27              BLE      |L111.208|
000080  fb05f006          MUL      r0,r5,r6
000084  b320              CBZ      r0,|L111.208|
000086  2000              MOVS     r0,#0
000088  fb008007          MLA      r0,r0,r7,r8
00008c  6320              STR      r0,[r4,#0x30]
                  |L111.142|
00008e  2d00              CMP      r5,#0
000090  bfc8              IT       GT
000092  2e00              CMPGT    r6,#0
000094  dd1e              BLE      |L111.212|
000096  fb05f006          MUL      r0,r5,r6
00009a  b1d8              CBZ      r0,|L111.212|
00009c  2000              MOVS     r0,#0
00009e  fb008007          MLA      r0,r0,r7,r8
0000a2  6320              STR      r0,[r4,#0x30]
                  |L111.164|
0000a4  a810              ADD      r0,sp,#0x40
0000a6  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000aa  b300              CBZ      r0,|L111.238|
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
0000b2  4601              MOV      r1,r0
0000b4  f1ba0f00          CMP      r10,#0
0000b8  bfac              ITE      GE
0000ba  4650              MOVGE    r0,r10
0000bc  2000              MOVLT    r0,#0
0000be  4288              CMP      r0,r1
0000c0  dd0a              BLE      |L111.216|
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
0000c8  4682              MOV      r10,r0
0000ca  e00a              B        |L111.226|
                  |L111.204|
0000cc  62e2              STR      r2,[r4,#0x2c]
0000ce  e7d3              B        |L111.120|
                  |L111.208|
0000d0  6322              STR      r2,[r4,#0x30]
0000d2  e7dc              B        |L111.142|
                  |L111.212|
0000d4  6322              STR      r2,[r4,#0x30]
0000d6  e7e5              B        |L111.164|
                  |L111.216|
0000d8  f1ba0f00          CMP      r10,#0
0000dc  bfb8              IT       LT
0000de  f04f0a00          MOVLT    r10,#0
                  |L111.226|
0000e2  4620              MOV      r0,r4
0000e4  f8c4a00c          STR      r10,[r4,#0xc]
0000e8  b011              ADD      sp,sp,#0x44
0000ea  e8bd8ff0          POP      {r4-r11,pc}
                  |L111.238|
0000ee  2500              MOVS     r5,#0
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
0000f6  42a8              CMP      r0,r5
0000f8  da03              BGE      |L111.258|
0000fa  4620              MOV      r0,r4
0000fc  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
000100  4605              MOV      r5,r0
                  |L111.258|
000102  60e5              STR      r5,[r4,#0xc]
000104  b011              ADD      sp,sp,#0x44
000106  4620              MOV      r0,r4
000108  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.112||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.112||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Ev||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Ev                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object()
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Ev PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence()
;;;24     
;;;25         template<typename Type> LinearSequence<Type>::LinearSequence()
;;;26           : size(-1), start(-1), increment(static_cast<Type>(-1))
;;;27         {
;;;28           this->size = -1;
;;;29         }
;;;30     
000000  f04f31ff          MOV      r1,#0xffffffff
000004  6001              STR      r1,[r0,#0]
000006  6041              STR      r1,[r0,#4]
000008  6081              STR      r1,[r0,#8]
00000a  4770              BX       lr
                          ENDP


                          AREA ||area_number.119||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Ev, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.119||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIiEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<int>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L125.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L125.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L125.384|
000044  a25c              ADR      r2,|L125.440|
000046  a160              ADR      r1,|L125.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L125.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L125.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L125.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L125.384|
000080  a24d              ADR      r2,|L125.440|
000082  a157              ADR      r1,|L125.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L125.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L125.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L125.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L125.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L125.384|
0000c8  a251              ADR      r2,|L125.528|
0000ca  a156              ADR      r1,|L125.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L125.372|
                  |L125.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L125.384|
0000e0  a258              ADR      r2,|L125.580|
0000e2  a15f              ADR      r1,|L125.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L125.372|
                  |L125.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L125.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L125.384|
000110  a259              ADR      r2,|L125.632|
000112  a144              ADR      r1,|L125.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L125.372|
                  |L125.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L125.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L125.384|
00015a  a251              ADR      r2,|L125.672|
00015c  a140              ADR      r1,|L125.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L125.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L125.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L125.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L125.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L125.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L125.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L125.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L125.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L125.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L125.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L125.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L125.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L125.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L125.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.126||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.126||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L132.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L132.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L132.384|
000044  a25c              ADR      r2,|L132.440|
000046  a160              ADR      r1,|L132.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L132.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L132.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L132.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L132.384|
000080  a24d              ADR      r2,|L132.440|
000082  a157              ADR      r1,|L132.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L132.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L132.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L132.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L132.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L132.384|
0000c8  a251              ADR      r2,|L132.528|
0000ca  a156              ADR      r1,|L132.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L132.372|
                  |L132.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L132.384|
0000e0  a258              ADR      r2,|L132.580|
0000e2  a15f              ADR      r1,|L132.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L132.372|
                  |L132.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L132.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L132.384|
000110  a259              ADR      r2,|L132.632|
000112  a144              ADR      r1,|L132.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L132.372|
                  |L132.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L132.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L132.384|
00015a  a251              ADR      r2,|L132.672|
00015c  a140              ADR      r1,|L132.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L132.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L132.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L132.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L132.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L132.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L132.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L132.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L132.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L132.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L132.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L132.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L132.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L132.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L132.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.133||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.133||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L139.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L139.56|
00000e  4b0b              LDR      r3,|L139.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L139.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L139.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L139.60|
                          DCD      ||.constdata||+0x604

                          AREA ||area_number.140||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.140||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Rectangle<int>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Rectangle<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L146.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L146.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L146.384|
000044  a25c              ADR      r2,|L146.440|
000046  a160              ADR      r1,|L146.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L146.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0100              LSLS     r0,r0,#4
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L146.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L146.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L146.384|
000080  a24d              ADR      r2,|L146.440|
000082  a157              ADR      r1,|L146.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L146.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L146.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L146.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L146.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L146.384|
0000c8  a251              ADR      r2,|L146.528|
0000ca  a156              ADR      r1,|L146.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L146.372|
                  |L146.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L146.384|
0000e0  a258              ADR      r2,|L146.580|
0000e2  a15f              ADR      r1,|L146.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L146.372|
                  |L146.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L146.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L146.384|
000110  a259              ADR      r2,|L146.632|
000112  a144              ADR      r1,|L146.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L146.372|
                  |L146.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0131              LSLS     r1,r6,#4
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L146.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L146.384|
00015a  a251              ADR      r2,|L146.672|
00015c  a140              ADR      r1,|L146.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L146.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L146.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L146.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L146.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L146.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L146.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<int>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L146.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L146.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<int>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L146.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L146.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L146.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L146.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L146.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L146.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.147||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.147||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.154||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.154||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_9RectangleIiEEE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<int>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.161||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.161||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListIiE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<float>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.168||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.168||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListIfE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTreeNode>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.175||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.175||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier9DTreeNodeEE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::DTree>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.182||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.182||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5DTreeEE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier::Stage>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.189||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.189||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier17CascadeClassifier5StageEE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.196||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.196||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b570              PUSH     {r4-r6,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000006  300c              ADDS     r0,r0,#0xc
000008  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
00000c  3018              ADDS     r0,r0,#0x18
00000e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000012  f04f31ff          MOV      r1,#0xffffffff
000016  f8401d0c          STR      r1,[r0,#-0xc]!
00001a  f1a00418          SUB      r4,r0,#0x18
00001e  6041              STR      r1,[r0,#4]
000020  6081              STR      r1,[r0,#8]
000022  2100              MOVS     r1,#0
000024  6101              STR      r1,[r0,#0x10]
000026  6141              STR      r1,[r0,#0x14]
000028  6181              STR      r1,[r0,#0x18]
00002a  460d              MOV      r5,r1
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::get_maximumSize() const
000032  42a8              CMP      r0,r5
000034  da03              BGE      |L202.62|
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::get_maximumSize() const
00003c  4605              MOV      r5,r0
                  |L202.62|
00003e  4620              MOV      r0,r4
000040  60e5              STR      r5,[r4,#0xc]
000042  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.203||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.203||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L209.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L209.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L209.392|
000044  a25e              ADR      r2,|L209.448|
000046  a162              ADR      r1,|L209.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L209.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  0100              LSLS     r0,r0,#4
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L209.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L209.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L209.392|
000084  a24e              ADR      r2,|L209.448|
000086  a158              ADR      r1,|L209.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L209.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L209.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L209.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L209.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L209.392|
0000cc  a252              ADR      r2,|L209.536|
0000ce  a157              ADR      r1,|L209.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L209.380|
                  |L209.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L209.392|
0000e4  a259              ADR      r2,|L209.588|
0000e6  a160              ADR      r1,|L209.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L209.380|
                  |L209.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L209.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L209.392|
000114  a25a              ADR      r2,|L209.640|
000116  a145              ADR      r1,|L209.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L209.380|
                  |L209.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060186          ADD      r1,r6,r6,LSL #2
00013e  0109              LSLS     r1,r1,#4
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L209.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L209.392|
000162  a251              ADR      r2,|L209.680|
000164  a140              ADR      r1,|L209.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L209.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L209.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L209.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L209.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L209.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L209.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L209.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L209.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L209.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L209.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L209.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L209.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L209.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L209.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.210||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.210||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded5RoundIiEET_f||, COMGROUP=_ZN4Anki8Embedded5RoundIiEET_f, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5RoundIiEET_f PROC ; Anki::Embedded::Round<int>(float)
;;;222        template<> inline u64 Round<u64> (const f32 v) { return (v > 0) ? static_cast<u64>(v + 0.5f) : 0; }
;;;223        template<> inline s32 Round<s32> (const f32 v) { return (v > 0) ? static_cast<s32>(v + 0.5f) : static_cast<s32>(v - 0.5f); }
000000  eeb50ac0          VCMPE.F32 s0,#0.0
000004  eef60a00          VMOV.F32 s1,#0.50000000
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  dd06              BLE      |L216.28|
00000e  ee300a20          VADD.F32 s0,s0,s1
000012  eebd0ac0          VCVT.S32.F32 s0,s0
000016  ee100a10          VMOV     r0,s0
00001a  4770              BX       lr
                  |L216.28|
00001c  ee300a60          VSUB.F32 s0,s0,s1
000020  eebd0ac0          VCVT.S32.F32 s0,s0
000024  ee100a10          VMOV     r0,s0
000028  4770              BX       lr
;;;224        template<> inline s64 Round<s64> (const f32 v) { return (v > 0) ? static_cast<s64>(v + 0.5f) : static_cast<s64>(v - 0.5f); }
                          ENDP


                          AREA ||area_number.217||, COMGROUP=_ZN4Anki8Embedded5RoundIiEET_f, LINKORDER=||i._ZN4Anki8Embedded5RoundIiEET_f||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.217||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded5RoundIiEET_f||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d207369          DCB      0x3d,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  20696e74          DCB      0x20,0x69,0x6e,0x74
000090  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000bc  65642069          DCB      0x65,0x64,0x20,0x69
0000c0  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2073          DCB      0x20,0x3d,0x20,0x73
000094  69676e65          DCB      0x69,0x67,0x6e,0x65
000098  6420696e          DCB      0x64,0x20,0x69,0x6e
00009c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642063          DCB      0x65,0x64,0x20,0x63
000090  6861725d          DCB      0x68,0x61,0x72,0x5d
000094  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  20636861          DCB      0x20,0x63,0x68,0x61
0000c4  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  63686172          DCB      0x63,0x68,0x61,0x72
0000a0  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000098  6374616e          DCB      0x63,0x74,0x61,0x6e
00009c  676c653c          DCB      0x67,0x6c,0x65,0x3c
0000a0  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a4  65642069          DCB      0x65,0x64,0x20,0x69
0000a8  6e743e5d          DCB      0x6e,0x74,0x3e,0x5d
0000ac  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<int>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  52656374          DCB      0x52,0x65,0x63,0x74
0000cc  616e676c          DCB      0x61,0x6e,0x67,0x6c
0000d0  653c7369          DCB      0x65,0x3c,0x73,0x69
0000d4  676e6564          DCB      0x67,0x6e,0x65,0x64
0000d8  20696e74          DCB      0x20,0x69,0x6e,0x74
0000dc  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_9RectangleIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<int>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a52          DCB      0x64,0x3a,0x3a,0x52
0000a4  65637461          DCB      0x65,0x63,0x74,0x61
0000a8  6e676c65          DCB      0x6e,0x67,0x6c,0x65
0000ac  3c736967          DCB      0x3c,0x73,0x69,0x67
0000b0  6e656420          DCB      0x6e,0x65,0x64,0x20
0000b4  696e743e          DCB      0x69,0x6e,0x74,0x3e
0000b8  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded10ArraySliceIfE3SetEfE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded10ArraySliceIfE3SetEfE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded10ArraySliceIfE3SetEfE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<float>::Set(float)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  536c6963          DCB      0x53,0x6c,0x69,0x63
000024  653c5479          DCB      0x65,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a536574          DCB      0x3a,0x53,0x65,0x74
000030  28547970          DCB      0x28,0x54,0x79,0x70
000034  6529205b          DCB      0x65,0x29,0x20,0x5b
000038  77697468          DCB      0x77,0x69,0x74,0x68
00003c  20547970          DCB      0x20,0x54,0x79,0x70
000040  65203d20          DCB      0x65,0x20,0x3d,0x20
000044  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000048  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a436c          DCB      0x3a,0x3a,0x43,0x6c
000098  61737369          DCB      0x61,0x73,0x73,0x69
00009c  66696572          DCB      0x66,0x69,0x65,0x72
0000a0  3a3a4361          DCB      0x3a,0x3a,0x43,0x61
0000a4  73636164          DCB      0x73,0x63,0x61,0x64
0000a8  65436c61          DCB      0x65,0x43,0x6c,0x61
0000ac  73736966          DCB      0x73,0x73,0x69,0x66
0000b0  6965725f          DCB      0x69,0x65,0x72,0x5f
0000b4  4c42503a          DCB      0x4c,0x42,0x50,0x3a
0000b8  3a4c4250          DCB      0x3a,0x4c,0x42,0x50
0000bc  46656174          DCB      0x46,0x65,0x61,0x74
0000c0  7572655d          DCB      0x75,0x72,0x65,0x5d
0000c4  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  436c6173          DCB      0x43,0x6c,0x61,0x73
0000cc  73696669          DCB      0x73,0x69,0x66,0x69
0000d0  65723a3a          DCB      0x65,0x72,0x3a,0x3a
0000d4  43617363          DCB      0x43,0x61,0x73,0x63
0000d8  61646543          DCB      0x61,0x64,0x65,0x43
0000dc  6c617373          DCB      0x6c,0x61,0x73,0x73
0000e0  69666965          DCB      0x69,0x66,0x69,0x65
0000e4  725f4c42          DCB      0x72,0x5f,0x4c,0x42
0000e8  503a3a4c          DCB      0x50,0x3a,0x3a,0x4c
0000ec  42504665          DCB      0x42,0x50,0x46,0x65
0000f0  61747572          DCB      0x61,0x74,0x75,0x72
0000f4  655d00            DCB      0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_10Classifier21CascadeClassifier_LBP10LBPFeatureEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Classifier::CascadeClassifier_LBP::LBPFeature>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a43          DCB      0x64,0x3a,0x3a,0x43
0000a4  6c617373          DCB      0x6c,0x61,0x73,0x73
0000a8  69666965          DCB      0x69,0x66,0x69,0x65
0000ac  723a3a43          DCB      0x72,0x3a,0x3a,0x43
0000b0  61736361          DCB      0x61,0x73,0x63,0x61
0000b4  6465436c          DCB      0x64,0x65,0x43,0x6c
0000b8  61737369          DCB      0x61,0x73,0x73,0x69
0000bc  66696572          DCB      0x66,0x69,0x65,0x72
0000c0  5f4c4250          DCB      0x5f,0x4c,0x42,0x50
0000c4  3a3a4c42          DCB      0x3a,0x3a,0x4c,0x42
0000c8  50466561          DCB      0x50,0x46,0x65,0x61
0000cc  74757265          DCB      0x74,0x75,0x72,0x65
0000d0  5d00              DCB      0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\cascadeClassifier.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_cascadeClassifier_cpp_0f081e51___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___21_cascadeClassifier_cpp_0f081e51___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_cascadeClassifier_cpp_0f081e51___Z7__REVSHi|
#line 144
|__asm___21_cascadeClassifier_cpp_0f081e51___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
