; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\colorconversion.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\colorconversion.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\colorconversion.crf ..\coretech\vision\robot\src\colorConversion.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15ImageProcessing14YUVToGrayscaleERKNS0_5ArrayItEERNS2_IhEE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15ImageProcessing14YUVToGrayscaleERKNS0_5ArrayItEERNS2_IhEE PROC ; Anki::Embedded::ImageProcessing::YUVToGrayscale(const Anki::Embedded::Array<unsigned short>&, Anki::Embedded::Array<unsigned char>&)
;;;21         {
;;;22           Result YUVToGrayscale(const Array<u16> &yuvImage, Array<u8> &grayscaleImage)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;23           {
000004  460e              MOV      r6,r1
000006  4605              MOV      r5,r0
000008  b082              SUB      sp,sp,#8
;;;24             const s32 imageHeight = grayscaleImage.get_size(0);
00000a  2100              MOVS     r1,#0
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000012  4607              MOV      r7,r0
;;;25             const s32 imageWidth  = grayscaleImage.get_size(1);
000014  2101              MOVS     r1,#1
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00001c  4604              MOV      r4,r0
00001e  6928              LDR      r0,[r5,#0x10]
000020  b308              CBZ      r0,|L1.102|
000022  f8d58000          LDR      r8,[r5,#0]
000026  f1b80f00          CMP      r8,#0
00002a  bfa4              ITT      GE
00002c  6868              LDRGE    r0,[r5,#4]
00002e  2800              CMPGE    r0,#0
000030  db19              BLT      |L1.102|
000032  6930              LDR      r0,[r6,#0x10]
000034  b1b8              CBZ      r0,|L1.102|
000036  6830              LDR      r0,[r6,#0]
000038  2800              CMP      r0,#0
00003a  bfa4              ITT      GE
00003c  6870              LDRGE    r0,[r6,#4]
00003e  2800              CMPGE    r0,#0
000040  db11              BLT      |L1.102|
000042  2100              MOVS     r1,#0
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00004a  4580              CMP      r8,r0
00004c  d10b              BNE      |L1.102|
00004e  2101              MOVS     r1,#1
000050  4630              MOV      r0,r6
000052  f8d58004          LDR      r8,[r5,#4]
000056  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00005a  4580              CMP      r8,r0
00005c  d103              BNE      |L1.102|
;;;26     
;;;27             AnkiConditionalErrorAndReturnValue(AreEqualSize(yuvImage, grayscaleImage),
;;;28               RESULT_FAIL_INVALID_SIZE, "YUVToGrayscaleHelper", "inputs must be the same size");
;;;29     
;;;30             for(s32 y=0; y<imageHeight; y++) {
00005e  2200              MOVS     r2,#0
000060  2f00              CMP      r7,#0
000062  dc0f              BGT      |L1.132|
000064  e023              B        |L1.174|
                  |L1.102|
000066  211b              MOVS     r1,#0x1b              ;27
000068  4813              LDR      r0,|L1.184|
00006a  e9cd0100          STRD     r0,r1,[sp,#0]         ;27
00006e  a313              ADR      r3,|L1.188|
000070  a21f              ADR      r2,|L1.240|
000072  a127              ADR      r1,|L1.272|
000074  2005              MOVS     r0,#5                 ;27
000076  f7fffffe          BL       _Anki_Log
;;;31               const u16 * restrict pYuvFrame = yuvImage.Pointer(y,0);
;;;32               u8 * restrict pGrayscaleImage = grayscaleImage.Pointer(y,0);
;;;33     
;;;34               for(s32 x=0; x<imageWidth; x++) {
;;;35                 //pGrayscaleImage[x] = (pYuvFrame[x] & 0xFF00) >> 8;
;;;36                 pGrayscaleImage[x] = pYuvFrame[x] & 0xFF;
;;;37               }
;;;38             }
;;;39     
;;;40             return RESULT_OK;
;;;41           }
00007a  b002              ADD      sp,sp,#8
00007c  f04f60a0          MOV      r0,#0x5000000         ;27
000080  e8bd81f0          POP      {r4-r8,pc}
                  |L1.132|
000084  68a9              LDR      r1,[r5,#8]
000086  6928              LDR      r0,[r5,#0x10]
000088  fb020301          MLA      r3,r2,r1,r0
00008c  68b1              LDR      r1,[r6,#8]
00008e  6930              LDR      r0,[r6,#0x10]
000090  fb020c01          MLA      r12,r2,r1,r0
000094  2000              MOVS     r0,#0                 ;34
000096  2c00              CMP      r4,#0                 ;34
000098  dd06              BLE      |L1.168|
                  |L1.154|
00009a  f8131010          LDRB     r1,[r3,r0,LSL #1]     ;36
00009e  f80c1000          STRB     r1,[r12,r0]           ;36
0000a2  1c40              ADDS     r0,r0,#1              ;34
0000a4  4284              CMP      r4,r0                 ;34
0000a6  dcf8              BGT      |L1.154|
                  |L1.168|
0000a8  1c52              ADDS     r2,r2,#1              ;30
0000aa  42ba              CMP      r2,r7                 ;30
0000ac  dbea              BLT      |L1.132|
                  |L1.174|
0000ae  b002              ADD      sp,sp,#8
0000b0  2000              MOVS     r0,#0                 ;40
0000b2  e8bd81f0          POP      {r4-r8,pc}
;;;42         } // namespace ImageProcessing
                          ENDP

0000b6  0000              DCW      0x0000
                  |L1.184|
                          DCD      ||.constdata||
                  |L1.188|
0000bc  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\colorConversion.cpp",0
0000c0  6f726574
0000c4  6563685c
0000c8  76697369
0000cc  6f6e5c72
0000d0  6f626f74
0000d4  5c737263
0000d8  5c636f6c
0000dc  6f72436f
0000e0  6e766572
0000e4  73696f6e
0000e8  2e637070
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L1.240|
0000f0  696e7075          DCB      "inputs must be the same size",0
0000f4  7473206d
0000f8  75737420
0000fc  62652074
000100  68652073
000104  616d6520
000108  73697a65
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
                  |L1.272|
000110  59555654          DCB      "YUVToGrayscaleHelper",0
000114  6f477261
000118  79736361
00011c  6c654865
000120  6c706572
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15ImageProcessing14YUVToGrayscaleERKNS0_5ArrayItEERNS2_IhEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15ImageProcessing14YUVToGrayscaleERKNS0_5ArrayItEERNS2_IhEE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a5955          DCB      0x3a,0x3a,0x59,0x55
000030  56546f47          DCB      0x56,0x54,0x6f,0x47
000034  72617973          DCB      0x72,0x61,0x79,0x73
000038  63616c65          DCB      0x63,0x61,0x6c,0x65
00003c  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000040  73742041          DCB      0x73,0x74,0x20,0x41
000044  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000048  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00004c  65646465          DCB      0x65,0x64,0x64,0x65
000050  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000054  72726179          DCB      0x72,0x72,0x61,0x79
000058  3c756e73          DCB      0x3c,0x75,0x6e,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  64207368          DCB      0x64,0x20,0x73,0x68
000064  6f72743e          DCB      0x6f,0x72,0x74,0x3e
000068  20262c20          DCB      0x20,0x26,0x2c,0x20
00006c  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000070  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000074  62656464          DCB      0x62,0x65,0x64,0x64
000078  65643a3a          DCB      0x65,0x64,0x3a,0x3a
00007c  41727261          DCB      0x41,0x72,0x72,0x61
000080  793c756e          DCB      0x79,0x3c,0x75,0x6e
000084  7369676e          DCB      0x73,0x69,0x67,0x6e
000088  65642063          DCB      0x65,0x64,0x20,0x63
00008c  6861723e          DCB      0x68,0x61,0x72,0x3e
000090  20262900          DCB      0x20,0x26,0x29,0x00
000094  41727261          DCB      0x41,0x72,0x72,0x61
000098  793c5479          DCB      0x79,0x3c,0x54,0x79
00009c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0000a0  3a676574          DCB      0x3a,0x67,0x65,0x74
0000a4  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0000a8  65000000          DCB      0x65,0x00,0x00,0x00
0000ac  4e656761          DCB      0x4e,0x65,0x67,0x61
0000b0  74697665          DCB      0x74,0x69,0x76,0x65
0000b4  2064696d          DCB      0x20,0x64,0x69,0x6d
0000b8  656e7369          DCB      0x65,0x6e,0x73,0x69
0000bc  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
0000c0  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0000c4  6f726574          DCB      0x6f,0x72,0x65,0x74
0000c8  6563685c          DCB      0x65,0x63,0x68,0x5c
0000cc  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0000d0  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0000d4  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0000d8  64655c61          DCB      0x64,0x65,0x5c,0x61
0000dc  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0000e0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0000e4  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0000e8  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0000ec  2f617272          DCB      0x2f,0x61,0x72,0x72
0000f0  61793264          DCB      0x61,0x79,0x32,0x64
0000f4  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L14.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L14.56|
00000e  4b0b              LDR      r3,|L14.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L14.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L14.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L14.60|
                          DCD      ||.constdata||+0xc0

                          AREA ||area_number.15||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\colorConversion.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___19_colorConversion_cpp_e32193ff___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___19_colorConversion_cpp_e32193ff___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___19_colorConversion_cpp_e32193ff___Z7__REVSHi|
#line 144
|__asm___19_colorConversion_cpp_e32193ff___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
