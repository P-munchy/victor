; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\computecharacteristicscale.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\computecharacteristicscale.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\computecharacteristicscale.crf ..\coretech\vision\robot\src\computeCharacteristicScale.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded16ecvcs_filterRowsERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_15FixedLengthListIiEEiRNS4_INS0_5ArrayIhEEEE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded16ecvcs_filterRowsERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_15FixedLengthListIiEEiRNS4_INS0_5ArrayIhEEEE PROC ; Anki::Embedded::ecvcs_filterRows(const Anki::Embedded::ScrollingIntegralImage_u8_s32&, const Anki::Embedded::FixedLengthList<int>&, int, Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>&)
                  ||__tagsym$$noinline||
;;;58     
;;;59         NO_INLINE void ecvcs_filterRows(const ScrollingIntegralImage_u8_s32 &integralImage, const FixedLengthList<s32> &filterHalfWidths, const s32 imageY, FixedLengthList<Array<u8> > &filteredRows)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;60         {
000004  68cd              LDR      r5,[r1,#0xc]
000006  6b0f              LDR      r7,[r1,#0x30]
;;;61           const s32 numFilterHalfWidths = filterHalfWidths.get_size();
;;;62     
;;;63           AnkiAssert(numFilterHalfWidths == filteredRows.get_size());
;;;64     
;;;65           const s32 * restrict pFilterHalfWidths = filterHalfWidths.Pointer(0);
;;;66           Array<u8> * restrict pFilteredRows = filteredRows.Pointer(0);
;;;67     
;;;68           // For the given row of the image, compute the blurred version for each level of the pyramid
;;;69           for(s32 iHalfWidth=0; iHalfWidth<numFilterHalfWidths; iHalfWidth++) {
000008  2400              MOVS     r4,#0
00000a  6b1e              LDR      r6,[r3,#0x30]
00000c  b085              SUB      sp,sp,#0x14           ;60
00000e  4692              MOV      r10,r2                ;60
000010  4683              MOV      r11,r0                ;60
000012  2d00              CMP      r5,#0
;;;70             //BeginBenchmark("ecvcs_filterRows_init");
;;;71             const s32 filterHalfWidth = pFilterHalfWidths[iHalfWidth];
;;;72     
;;;73             const Rectangle<s16> filter(-filterHalfWidth, filterHalfWidth, -filterHalfWidth, filterHalfWidth);
;;;74     
;;;75             const s32 multiply = normalizationMultiply[filterHalfWidth];
000014  bfc7              ITTEE    GT
000016  f8df804c          LDRGT    r8,|L1.100|
;;;76             const s32 shift = normalizationBitShifts[filterHalfWidth];
00001a  f5087982          ADDGT    r9,r8,#0x104
;;;77     
;;;78             //EndBenchmark("ecvcs_filterRows_init");
;;;79     
;;;80             //BeginBenchmark("ecvcs_filterRows_filter&normalize");
;;;81     
;;;82             // Compute the sums using the integral image
;;;83             integralImage.FilterRow(filter, imageY, multiply, shift, pFilteredRows[iHalfWidth]);
;;;84     
;;;85             //EndBenchmark("ecvcs_filterRows_filter&normalize");
;;;86           } // for(s32 pyramidLevel=0; pyramidLevel<=numLevels; pyramidLevel++)
;;;87         } // staticInline ecvcs_filterRows()
00001e  b005              ADDLE    sp,sp,#0x14
000020  e8bd8ff0          POPLE    {r4-r11,pc}
                  |L1.36|
000024  f8570024          LDR      r0,[r7,r4,LSL #2]     ;71
000028  4652              MOV      r2,r10                ;83
00002a  4241              RSBS     r1,r0,#0              ;73
00002c  f8ad1008          STRH     r1,[sp,#8]            ;73
000030  f8ad100c          STRH     r1,[sp,#0xc]          ;73
000034  f8ad000a          STRH     r0,[sp,#0xa]          ;73
000038  f8ad000e          STRH     r0,[sp,#0xe]          ;73
00003c  f8583020          LDR      r3,[r8,r0,LSL #2]     ;75
000040  eb040184          ADD      r1,r4,r4,LSL #2       ;83
000044  f8590020          LDR      r0,[r9,r0,LSL #2]     ;76
000048  eb060181          ADD      r1,r6,r1,LSL #2       ;83
00004c  e9cd0100          STRD     r0,r1,[sp,#0]         ;83
000050  a902              ADD      r1,sp,#8              ;83
000052  4658              MOV      r0,r11                ;83
000054  f7fffffe          BL       _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIhEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE ; Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow<unsigned char>(const Anki::Embedded::Rectangle<short>&, int, int, int, Anki::Embedded::Array<T1>&) const
000058  1c64              ADDS     r4,r4,#1              ;69
00005a  42ac              CMP      r4,r5                 ;69
00005c  dbe2              BLT      |L1.36|
00005e  b005              ADD      sp,sp,#0x14
000060  e8bd8ff0          POP      {r4-r11,pc}
;;;88     
                          ENDP

                  |L1.100|
                          DCD      ||.constdata||

                          AREA ||i._ZN4Anki8Embedded24ecvcs_computeBinaryImageERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded24ecvcs_computeBinaryImageERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh PROC ; Anki::Embedded::ecvcs_computeBinaryImage(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>&, int, int, unsigned char*)
                  |symbol_number.70|
;;;242    
;;;243        NO_INLINE void ecvcs_computeBinaryImage(const Array<u8> &image, FixedLengthList<Array<u8> > &filteredRows, const s32 scaleImage_thresholdMultiplier, const s32 imageY, u8 * restrict pBinaryImageRow)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;244        {
000004  4690              MOV      r8,r2
000006  460c              MOV      r4,r1
000008  6882              LDR      r2,[r0,#8]
00000a  6901              LDR      r1,[r0,#0x10]
00000c  b0c1              SUB      sp,sp,#0x104
00000e  fb031702          MLA      r7,r3,r2,r1
000012  9e4a              LDR      r6,[sp,#0x128]
;;;245          const s32 thresholdMultiplier_numFractionalBits = 16;
;;;246    
;;;247          const u8 * restrict pImage = image[imageY];
;;;248    
;;;249          const s32 imageWidth = image.get_size(1);
000014  2101              MOVS     r1,#1
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;250    
;;;251          const s32 numFilteredRows = filteredRows.get_size();
;;;252    
;;;253          AnkiAssert(filteredRows.get_size() <= MAX_FILTER_HALF_WIDTH);
;;;254    
;;;255          const u8 * restrict pFilteredRows[MAX_FILTER_HALF_WIDTH+1];
;;;256          for(s32 i=0; i<numFilteredRows; i++) {
00001a  68e1              LDR      r1,[r4,#0xc]
00001c  2200              MOVS     r2,#0
00001e  46ea              MOV      r10,sp                ;255
000020  2900              CMP      r1,#0
000022  dd0f              BLE      |L2.68|
                  |L2.36|
000024  6b23              LDR      r3,[r4,#0x30]
000026  eb020c82          ADD      r12,r2,r2,LSL #2
00002a  eb03038c          ADD      r3,r3,r12,LSL #2
;;;257            pFilteredRows[i] = filteredRows[i][0];
00002e  f04f0c00          MOV      r12,#0
000032  691d              LDR      r5,[r3,#0x10]
000034  689b              LDR      r3,[r3,#8]
000036  fb0c5303          MLA      r3,r12,r3,r5
00003a  f84a3022          STR      r3,[r10,r2,LSL #2]
00003e  1c52              ADDS     r2,r2,#1              ;256
000040  4291              CMP      r1,r2                 ;256
000042  dcef              BGT      |L2.36|
                  |L2.68|
;;;258          }
;;;259    
;;;260          for(s32 x=0; x<imageWidth; x++) {
000044  2300              MOVS     r3,#0
000046  2800              CMP      r0,#0
;;;261            s32 scaleValue = -1;
;;;262            s32 dogMax = s32_MIN;
;;;263            for(s32 iHalfWidth=0; iHalfWidth<(numFilteredRows-1); iHalfWidth++) {
000048  bfc7              ITTEE    GT
00004a  f1a10b01          SUBGT    r11,r1,#1
00004e  f04f0e01          MOVGT    lr,#1                 ;249
;;;264              const s32 dog = ABS(static_cast<s32>(pFilteredRows[iHalfWidth+1][x]) - static_cast<s32>(pFilteredRows[iHalfWidth][x]));
;;;265    
;;;266              if(dog > dogMax) {
;;;267                dogMax = dog;
;;;268                scaleValue = pFilteredRows[iHalfWidth+1][x];
;;;269              } // if(dog > dogMax)
;;;270            } // for(s32 pyramidLevel=0; pyramidLevel<scaleImage_numPyramidLevels; scaleImage_numPyramidLevels++)
;;;271    
;;;272            const s32 thresholdValue = (scaleValue*scaleImage_thresholdMultiplier) >> thresholdMultiplier_numFractionalBits;
;;;273            if(pImage[x] < thresholdValue) {
;;;274              pBinaryImageRow[x] = 1;
;;;275            } else {
;;;276              pBinaryImageRow[x] = 0;
;;;277            }
;;;278          } // for(s32 x=0; x<imageWidth; x++)
;;;279        } // staticInline void ecvcs_computeBinaryImage()
000052  b041              ADDLE    sp,sp,#0x104
000054  e8bd8ff0          POPLE    {r4-r11,pc}
                  |L2.88|
000058  f04f39ff          MOV      r9,#0xffffffff        ;261
00005c  2100              MOVS     r1,#0                 ;263
00005e  f04f4200          MOV      r2,#0x80000000        ;262
000062  f1bb0f00          CMP      r11,#0                ;263
000066  dd17              BLE      |L2.152|
                  |L2.104|
000068  eb0a0c81          ADD      r12,r10,r1,LSL #2     ;264
00006c  f8dcc004          LDR      r12,[r12,#4]          ;264
000070  f81c4003          LDRB     r4,[r12,r3]           ;264
000074  f85ac021          LDR      r12,[r10,r1,LSL #2]   ;264
000078  f81c5003          LDRB     r5,[r12,r3]           ;264
00007c  eba40c05          SUB      r12,r4,r5             ;264
000080  f1bc0f00          CMP      r12,#0                ;264
000084  bfb8              IT       LT                    ;264
000086  eba50c04          SUBLT    r12,r5,r4             ;264
00008a  4594              CMP      r12,r2                ;266
00008c  bfc4              ITT      GT                    ;267
00008e  4662              MOVGT    r2,r12                ;267
000090  46a1              MOVGT    r9,r4                 ;268
000092  1c49              ADDS     r1,r1,#1              ;263
000094  4559              CMP      r1,r11                ;263
000096  dbe7              BLT      |L2.104|
                  |L2.152|
000098  fb09f108          MUL      r1,r9,r8              ;272
00009c  5cfa              LDRB     r2,[r7,r3]            ;273
00009e  1409              ASRS     r1,r1,#16             ;272
0000a0  428a              CMP      r2,r1                 ;273
0000a2  bfb2              ITEE     LT                    ;274
0000a4  f806e003          STRBLT   lr,[r6,r3]            ;274
0000a8  2100              MOVGE    r1,#0                 ;276
0000aa  54f1              STRBGE   r1,[r6,r3]            ;276
0000ac  1c5b              ADDS     r3,r3,#1              ;260
0000ae  4283              CMP      r3,r0                 ;260
0000b0  dbd2              BLT      |L2.88|
0000b2  b041              ADD      sp,sp,#0x104
0000b4  e8bd8ff0          POP      {r4-r11,pc}
;;;280    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded36ecvcs_computeBinaryImage_numFilters5ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded36ecvcs_computeBinaryImage_numFilters5ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh PROC ; Anki::Embedded::ecvcs_computeBinaryImage_numFilters5(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>&, int, int, unsigned char*)
                  |symbol_number.71|
;;;88     
;;;89         NO_INLINE void ecvcs_computeBinaryImage_numFilters5(const Array<u8> &image, FixedLengthList<Array<u8> > &filteredRows, const s32 scaleImage_thresholdMultiplier, const s32 imageY, u8 * restrict pBinaryImageRow)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;90         {
000004  4688              MOV      r8,r1
000006  6882              LDR      r2,[r0,#8]
000008  6901              LDR      r1,[r0,#0x10]
00000a  b0c5              SUB      sp,sp,#0x114
00000c  fb031102          MLA      r1,r3,r2,r1
000010  9144              STR      r1,[sp,#0x110]
000012  f8d82030          LDR      r2,[r8,#0x30]
000016  2700              MOVS     r7,#0
000018  9c52              LDR      r4,[sp,#0x148]
00001a  6893              LDR      r3,[r2,#8]
00001c  6911              LDR      r1,[r2,#0x10]
00001e  fb071103          MLA      r1,r7,r3,r1
000022  9143              STR      r1,[sp,#0x10c]
000024  6a53              LDR      r3,[r2,#0x24]
000026  69d1              LDR      r1,[r2,#0x1c]
000028  fb073101          MLA      r1,r7,r1,r3
00002c  9142              STR      r1,[sp,#0x108]
00002e  6b93              LDR      r3,[r2,#0x38]
000030  6b11              LDR      r1,[r2,#0x30]
000032  fb073101          MLA      r1,r7,r1,r3
000036  9141              STR      r1,[sp,#0x104]
000038  6cd3              LDR      r3,[r2,#0x4c]
00003a  6c51              LDR      r1,[r2,#0x44]
00003c  fb073601          MLA      r6,r7,r1,r3
000040  f1020150          ADD      r1,r2,#0x50
000044  6e12              LDR      r2,[r2,#0x60]
000046  6889              LDR      r1,[r1,#8]
000048  fb072501          MLA      r5,r7,r1,r2
;;;91           AnkiAssert(filteredRows.get_size() == 5);
;;;92     
;;;93           const s32 thresholdMultiplier_numFractionalBits = 16;
;;;94     
;;;95           const u8 * restrict pImage = image[imageY];
;;;96     
;;;97           const u8 * restrict pFilteredRows0 = filteredRows[0][0];
;;;98           const u8 * restrict pFilteredRows1 = filteredRows[1][0];
;;;99           const u8 * restrict pFilteredRows2 = filteredRows[2][0];
;;;100          const u8 * restrict pFilteredRows3 = filteredRows[3][0];
;;;101          const u8 * restrict pFilteredRows4 = filteredRows[4][0];
;;;102    
;;;103          const s32 imageWidth = image.get_size(1);
00004c  2101              MOVS     r1,#1
00004e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;104    
;;;105          const s32 numFilteredRows = filteredRows.get_size();
;;;106    
;;;107          AnkiAssert(filteredRows.get_size() <= MAX_FILTER_HALF_WIDTH);
;;;108    
;;;109          const u8 * restrict pFilteredRows[MAX_FILTER_HALF_WIDTH+1];
;;;110          for(s32 i=0; i<numFilteredRows; i++) {
000052  f8d8300c          LDR      r3,[r8,#0xc]
000056  2200              MOVS     r2,#0
000058  2b00              CMP      r3,#0
00005a  bfc4              ITT      GT                    ;109
00005c  46e9              MOVGT    r9,sp                 ;109
00005e  f8d88030          LDRGT    r8,[r8,#0x30]         ;109
000062  dd0f              BLE      |L3.132|
                  |L3.100|
000064  eb020182          ADD      r1,r2,r2,LSL #2
000068  eb080181          ADD      r1,r8,r1,LSL #2
;;;111            pFilteredRows[i] = filteredRows[i][0];
00006c  f04f0c00          MOV      r12,#0
000070  f8d1a010          LDR      r10,[r1,#0x10]
000074  6889              LDR      r1,[r1,#8]
000076  fb0ca101          MLA      r1,r12,r1,r10
00007a  f8491022          STR      r1,[r9,r2,LSL #2]
00007e  1c52              ADDS     r2,r2,#1              ;110
000080  4293              CMP      r3,r2                 ;110
000082  dcef              BGT      |L3.100|
                  |L3.132|
;;;112          }
;;;113    
;;;114          for(s32 x=0; x<imageWidth; x++) {
000084  2100              MOVS     r1,#0
000086  2800              CMP      r0,#0
;;;115            //for(s32 iHalfWidth=0; iHalfWidth<(numFilteredRows-1); iHalfWidth++) {
;;;116            const s32 dog0 = ABS(static_cast<s32>(pFilteredRows1[x]) - static_cast<s32>(pFilteredRows0[x]));
;;;117            const s32 dog1 = ABS(static_cast<s32>(pFilteredRows2[x]) - static_cast<s32>(pFilteredRows1[x]));
;;;118            const s32 dog2 = ABS(static_cast<s32>(pFilteredRows3[x]) - static_cast<s32>(pFilteredRows2[x]));
;;;119            const s32 dog3 = ABS(static_cast<s32>(pFilteredRows4[x]) - static_cast<s32>(pFilteredRows3[x]));
;;;120    
;;;121            const s32 maxValue = MAX(dog0, MAX(dog1, MAX(dog2, dog3)));
;;;122    
;;;123            s32 scaleValue;
;;;124    
;;;125            if(dog0 == maxValue) {
;;;126              scaleValue = pFilteredRows1[x];
;;;127            } else if(dog1 == maxValue) {
;;;128              scaleValue = pFilteredRows2[x];
;;;129            } else if(dog2 == maxValue) {
;;;130              scaleValue = pFilteredRows3[x];
;;;131            } else {
;;;132              scaleValue = pFilteredRows4[x];
;;;133            }
;;;134    
;;;135            //} // for(s32 pyramidLevel=0; pyramidLevel<scaleImage_numPyramidLevels; scaleImage_numPyramidLevels++)
;;;136    
;;;137            const s32 thresholdValue = (scaleValue*scaleImage_thresholdMultiplier) >> thresholdMultiplier_numFractionalBits;
;;;138            if(pImage[x] < thresholdValue) {
;;;139              pBinaryImageRow[x] = 1;
;;;140            } else {
;;;141              pBinaryImageRow[x] = 0;
;;;142            }
;;;143          } // for(s32 x=0; x<imageWidth; x++)
;;;144        } // staticInline void ecvcs_computeBinaryImage_numFilters5()
000088  bfdc              ITT      LE
00008a  b049              ADDLE    sp,sp,#0x124
00008c  e8bd8ff0          POPLE    {r4-r11,pc}
                  |L3.144|
000090  9a42              LDR      r2,[sp,#0x108]        ;116
000092  f8129001          LDRB     r9,[r2,r1]            ;116
000096  9a43              LDR      r2,[sp,#0x10c]        ;116
000098  5c52              LDRB     r2,[r2,r1]            ;116
00009a  eba90a02          SUB      r10,r9,r2             ;116
00009e  f1ba0f00          CMP      r10,#0                ;116
0000a2  bfb8              IT       LT                    ;116
0000a4  eba20a09          SUBLT    r10,r2,r9             ;116
0000a8  9a41              LDR      r2,[sp,#0x104]        ;117
0000aa  f8128001          LDRB     r8,[r2,r1]            ;117
0000ae  eba80c09          SUB      r12,r8,r9             ;117
0000b2  f1bc0f00          CMP      r12,#0                ;117
0000b6  bfb8              IT       LT                    ;117
0000b8  eba90c08          SUBLT    r12,r9,r8             ;117
0000bc  5c77              LDRB     r7,[r6,r1]            ;118
0000be  eba70208          SUB      r2,r7,r8              ;118
0000c2  2a00              CMP      r2,#0                 ;118
0000c4  bfb8              IT       LT                    ;118
0000c6  eba80207          SUBLT    r2,r8,r7              ;118
0000ca  f815b001          LDRB     r11,[r5,r1]           ;119
0000ce  ebab0307          SUB      r3,r11,r7             ;119
0000d2  2b00              CMP      r3,#0                 ;119
0000d4  bfb8              IT       LT                    ;119
0000d6  eba7030b          SUBLT    r3,r7,r11             ;119
0000da  429a              CMP      r2,r3                 ;121
0000dc  bfcc              ITE      GT                    ;121
0000de  4696              MOVGT    lr,r2                 ;121
0000e0  469e              MOVLE    lr,r3                 ;121
0000e2  45e6              CMP      lr,r12                ;121
0000e4  bfb8              IT       LT                    ;121
0000e6  46e6              MOVLT    lr,r12                ;121
0000e8  db03              BLT      |L3.242|
0000ea  4293              CMP      r3,r2                 ;121
0000ec  bfb4              ITE      LT                    ;121
0000ee  4696              MOVLT    lr,r2                 ;121
0000f0  469e              MOVGE    lr,r3                 ;121
                  |L3.242|
0000f2  45d6              CMP      lr,r10                ;121
0000f4  bfb8              IT       LT                    ;121
0000f6  4653              MOVLT    r3,r10                ;121
0000f8  db0a              BLT      |L3.272|
0000fa  4293              CMP      r3,r2                 ;121
0000fc  bfb4              ITE      LT                    ;121
0000fe  4696              MOVLT    lr,r2                 ;121
000100  469e              MOVGE    lr,r3                 ;121
000102  45e6              CMP      lr,r12                ;121
000104  bfb8              IT       LT                    ;121
000106  4663              MOVLT    r3,r12                ;121
000108  db02              BLT      |L3.272|
00010a  4293              CMP      r3,r2                 ;121
00010c  bfb8              IT       LT                    ;121
00010e  4613              MOVLT    r3,r2                 ;121
                  |L3.272|
000110  459a              CMP      r10,r3                ;125
000112  bf08              IT       EQ                    ;125
000114  464f              MOVEQ    r7,r9                 ;125
000116  d006              BEQ      |L3.294|
000118  459c              CMP      r12,r3                ;127
00011a  bf08              IT       EQ                    ;127
00011c  4647              MOVEQ    r7,r8                 ;127
00011e  d002              BEQ      |L3.294|
000120  429a              CMP      r2,r3                 ;129
000122  bf18              IT       NE                    ;129
000124  465f              MOVNE    r7,r11                ;129
                  |L3.294|
000126  9a47              LDR      r2,[sp,#0x11c]        ;137
000128  9b44              LDR      r3,[sp,#0x110]        ;138
00012a  437a              MULS     r2,r7,r2              ;137
00012c  1412              ASRS     r2,r2,#16             ;137
00012e  5c5b              LDRB     r3,[r3,r1]            ;138
000130  4293              CMP      r3,r2                 ;138
000132  bfb4              ITE      LT                    ;139
000134  2201              MOVLT    r2,#1                 ;139
000136  2200              MOVGE    r2,#0                 ;141
000138  5462              STRB     r2,[r4,r1]            ;141
00013a  1c49              ADDS     r1,r1,#1              ;114
00013c  4281              CMP      r1,r0                 ;114
00013e  dba7              BLT      |L3.144|
000140  b049              ADD      sp,sp,#0x124
000142  e8bd8ff0          POP      {r4-r11,pc}
;;;145    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded39ExtractComponentsViaCharacteristicScaleERKNS0_5ArrayIhEERKNS0_15FixedLengthListIiEEissRNS0_19ConnectedComponentsENS0_11MemoryStackESB_SB_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded39ExtractComponentsViaCharacteristicScaleERKNS0_5ArrayIhEERKNS0_15FixedLengthListIiEEissRNS0_19ConnectedComponentsENS0_11MemoryStackESB_SB_ PROC ; Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::FixedLengthList<int>&, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
;;;280    
;;;281        Result ExtractComponentsViaCharacteristicScale(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;282          const Array<u8> &image,
;;;283          const FixedLengthList<s32> &filterHalfWidths, const s32 scaleImage_thresholdMultiplier,
;;;284          const s16 component1d_minComponentWidth, const s16 component1d_maxSkipDistance,
;;;285          ConnectedComponents &components,
;;;286          MemoryStack fastScratch,
;;;287          MemoryStack slowerScratch,
;;;288          MemoryStack slowestScratch)
;;;289        {
000004  b0b7              SUB      sp,sp,#0xdc
;;;290          BeginBenchmark("ecvcs_init");
000006  a0fc              ADR      r0,|L4.1016|
000008  e9dd8946          LDRD     r8,r9,[sp,#0x118]     ;289
00000c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;291    
;;;292          const s32 imageHeight = image.get_size(0);
000010  2100              MOVS     r1,#0
000012  9837              LDR      r0,[sp,#0xdc]
000014  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;293          const s32 imageWidth = image.get_size(1);
000018  902f              STR      r0,[sp,#0xbc]
00001a  2101              MOVS     r1,#1
00001c  9837              LDR      r0,[sp,#0xdc]
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000022  901d              STR      r0,[sp,#0x74]
000024  9838              LDR      r0,[sp,#0xe0]
000026  9c48              LDR      r4,[sp,#0x120]
;;;294    
;;;295          const s32 numFilterHalfWidths = filterHalfWidths.get_size();
;;;296    
;;;297          AnkiConditionalErrorAndReturnValue(AreValid(fastScratch, slowerScratch, slowestScratch),
000028  68c6              LDR      r6,[r0,#0xc]
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000030  2800              CMP      r0,#0
000032  d077              BEQ      |L4.292|
000034  4648              MOV      r0,r9
000036  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
00003a  2800              CMP      r0,#0
00003c  d072              BEQ      |L4.292|
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000044  2800              CMP      r0,#0
000046  d06d              BEQ      |L4.292|
000048  4640              MOV      r0,r8
00004a  9c48              LDR      r4,[sp,#0x120]
00004c  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000050  2800              CMP      r0,#0
;;;298            RESULT_FAIL_INVALID_OBJECT, "ExtractComponentsViaCharacteristicScale", "scratch is not valid");
;;;299    
;;;300          AnkiConditionalErrorAndReturnValue(NotAliased(fastScratch, slowerScratch, slowestScratch),
000052  f0008077          BEQ.W    |L4.324|
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
00005c  2800              CMP      r0,#0
00005e  f0008071          BEQ.W    |L4.324|
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000068  2800              CMP      r0,#0
00006a  f000806b          BEQ.W    |L4.324|
00006e  4640              MOV      r0,r8
000070  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack10get_bufferEv ; Anki::Embedded::MemoryStack::get_buffer() const
000074  901e              STR      r0,[sp,#0x78]
000076  4648              MOV      r0,r9
000078  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack10get_bufferEv ; Anki::Embedded::MemoryStack::get_buffer() const
00007c  901f              STR      r0,[sp,#0x7c]
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack10get_bufferEv ; Anki::Embedded::MemoryStack::get_buffer() const
000084  2100              MOVS     r1,#0
000086  aa1e              ADD      r2,sp,#0x78
000088  9020              STR      r0,[sp,#0x80]
                  |L4.138|
00008a  1c48              ADDS     r0,r1,#1
00008c  2803              CMP      r0,#3
00008e  bfb8              IT       LT
000090  f8523021          LDRLT    r3,[r2,r1,LSL #2]
000094  da06              BGE      |L4.164|
                  |L4.150|
000096  f852c020          LDR      r12,[r2,r0,LSL #2]
00009a  4563              CMP      r3,r12
00009c  d052              BEQ      |L4.324|
00009e  1c40              ADDS     r0,r0,#1
0000a0  2803              CMP      r0,#3
0000a2  dbf8              BLT      |L4.150|
                  |L4.164|
0000a4  1c49              ADDS     r1,r1,#1
0000a6  2903              CMP      r1,#3
0000a8  dbef              BLT      |L4.138|
;;;301            RESULT_FAIL_ALIASED_MEMORY, "ExtractComponentsViaCharacteristicScale", "fast and slow scratch buffers cannot be the same object");
;;;302    
;;;303          AnkiConditionalErrorAndReturnValue(AreValid(image, filterHalfWidths, components),
0000aa  e9dd1037          LDRD     r1,r0,[sp,#0xdc]
0000ae  9a45              LDR      r2,[sp,#0x114]
0000b0  6909              LDR      r1,[r1,#0x10]
0000b2  2900              CMP      r1,#0
0000b4  f0008055          BEQ.W    |L4.354|
0000b8  9937              LDR      r1,[sp,#0xdc]
0000ba  6809              LDR      r1,[r1,#0]
0000bc  2900              CMP      r1,#0
0000be  f2c08050          BLT.W    |L4.354|
0000c2  9937              LDR      r1,[sp,#0xdc]
0000c4  6849              LDR      r1,[r1,#4]
0000c6  2900              CMP      r1,#0
0000c8  f2c0804b          BLT.W    |L4.354|
0000cc  68c3              LDR      r3,[r0,#0xc]
0000ce  69c1              LDR      r1,[r0,#0x1c]
0000d0  4299              CMP      r1,r3
0000d2  f2c08046          BLT.W    |L4.354|
0000d6  6a83              LDR      r3,[r0,#0x28]
0000d8  b12b              CBZ      r3,|L4.230|
0000da  6980              LDR      r0,[r0,#0x18]
0000dc  2800              CMP      r0,#0
0000de  bfa4              ITT      GE
0000e0  2900              CMPGE    r1,#0
0000e2  2001              MOVGE    r0,#1
0000e4  da00              BGE      |L4.232|
                  |L4.230|
0000e6  2000              MOVS     r0,#0
                  |L4.232|
0000e8  2800              CMP      r0,#0
0000ea  d03a              BEQ      |L4.354|
0000ec  4610              MOV      r0,r2
0000ee  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents7IsValidEv ; Anki::Embedded::ConnectedComponents::IsValid() const
0000f2  2800              CMP      r0,#0
0000f4  d035              BEQ      |L4.354|
;;;304            RESULT_FAIL_INVALID_OBJECT, "ExtractComponentsViaCharacteristicScale", "Invalid objects");
;;;305    
;;;306          AnkiConditionalErrorAndReturnValue(numFilterHalfWidths > 0 && numFilterHalfWidths <= MAX_FILTER_HALF_WIDTH,
0000f6  2e00              CMP      r6,#0
0000f8  dd02              BLE      |L4.256|
0000fa  2e40              CMP      r6,#0x40
0000fc  f3408041          BLE.W    |L4.386|
                  |L4.256|
000100  f44f7199          MOV      r1,#0x132
000104  48bf              LDR      r0,|L4.1028|
000106  e000              B        |L4.266|
000108  e00c              B        |L4.292|
                  |L4.266|
00010a  e9cd0100          STRD     r0,r1,[sp,#0]
00010e  a3be              ADR      r3,|L4.1032|
000110  a2cc              ADR      r2,|L4.1092|
000112  a1d3              ADR      r1,|L4.1120|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
;;;307            RESULT_FAIL_INVALID_PARAMETER, "ExtractComponentsViaCharacteristicScale", "invalid numFilterHalfWidths");
;;;308    
;;;309          Result lastResult;
;;;310    
;;;311          const s32 * restrict pFilterHalfWidths = filterHalfWidths.Pointer(0);
;;;312    
;;;313          // Integral image constants
;;;314          s32 numBorderPixels = -1;
;;;315          s32 integralImageHeight;
;;;316    
;;;317          for(s32 i=0; i<numFilterHalfWidths; i++) {
;;;318            AnkiAssert(pFilterHalfWidths[i] >= 0);
;;;319            AnkiAssert(pFilterHalfWidths[i] <= MAX_FILTER_HALF_WIDTH);
;;;320            numBorderPixels = MAX(numBorderPixels, pFilterHalfWidths[i] + 1);
;;;321          }
;;;322    
;;;323          // TODO: choose based on amount of free memory
;;;324          if(imageWidth <= 320) {
;;;325            integralImageHeight = MAX(2*numBorderPixels + 16, 64); // 96*(640+33*2)*4 = 271104, though with padding, it is 96*720*4 = 276480
;;;326          } else {
;;;327            // Note: These numbers are liable to be too big to fit on the M4 efficiently
;;;328            const s32 scaleFactor = static_cast<s32>(ceilf(static_cast<f32>(imageWidth) / 320.0f));
;;;329            integralImageHeight = MAX(2*numBorderPixels + 16*scaleFactor, 64*scaleFactor);
;;;330          }
;;;331    
;;;332          const s32 numRowsToScroll = integralImageHeight - 2*numBorderPixels;
;;;333    
;;;334          AnkiAssert(numRowsToScroll > 1);
;;;335    
;;;336          // Initialize the first integralImageHeight rows of the integralImage
;;;337          ScrollingIntegralImage_u8_s32 integralImage(integralImageHeight, imageWidth, numBorderPixels, slowerScratch);
;;;338          if((lastResult = integralImage.ScrollDown(image, integralImageHeight, fastScratch)) != RESULT_OK)
;;;339            return lastResult;
;;;340    
;;;341          // Prepare the memory for the filtered rows for each level of the pyramid
;;;342          FixedLengthList<Array<u8> > filteredRows(numFilterHalfWidths, fastScratch, Flags::Buffer(false,false,true));
;;;343    
;;;344          AnkiConditionalErrorAndReturnValue(filteredRows.IsValid(),
;;;345            RESULT_FAIL_OUT_OF_MEMORY, "ExtractComponentsViaCharacteristicScale", "filteredRows is not valid");
;;;346    
;;;347          for(s32 i=0; i<numFilterHalfWidths; i++) {
;;;348            filteredRows[i] = Array<u8>(1, imageWidth, fastScratch);
;;;349            AnkiConditionalErrorAndReturnValue(filteredRows[i].IsValid(),
;;;350              RESULT_FAIL_OUT_OF_MEMORY, "ExtractComponentsViaCharacteristicScale", "filteredRows is not valid");
;;;351          }
;;;352    
;;;353          Array<u8> binaryImageRow(1, imageWidth, fastScratch);
;;;354    
;;;355          AnkiConditionalErrorAndReturnValue(binaryImageRow.IsValid(),
;;;356            RESULT_FAIL_OUT_OF_MEMORY, "ExtractComponentsViaCharacteristicScale", "binaryImageRow is not valid");
;;;357    
;;;358          u8 * restrict pBinaryImageRow = binaryImageRow[0];
;;;359    
;;;360          if((lastResult = components.Extract2dComponents_PerRow_Initialize(fastScratch, slowerScratch, slowestScratch)) != RESULT_OK)
;;;361            return lastResult;
;;;362    
;;;363          s32 imageY = 0;
;;;364    
;;;365          EndBenchmark("ecvcs_init");
;;;366    
;;;367          BeginBenchmark("ecvcs_mainLoop");
;;;368          while(imageY < imageHeight) {
;;;369            BeginBenchmark("ecvcs_filterRows");
;;;370            ecvcs_filterRows(integralImage, filterHalfWidths, imageY, filteredRows);
;;;371            EndBenchmark("ecvcs_filterRows");
;;;372    
;;;373            BeginBenchmark("ecvcs_computeBinaryImage");
;;;374    
;;;375            if(numFilterHalfWidths != 5) {
;;;376              ecvcs_computeBinaryImage(image, filteredRows, scaleImage_thresholdMultiplier, imageY, pBinaryImageRow);
;;;377            } else {
;;;378              if(scaleImage_thresholdMultiplier == 65536) {
;;;379                ecvcs_computeBinaryImage_numFilters5_thresholdMultiplier1(image, filteredRows, scaleImage_thresholdMultiplier, imageY, pBinaryImageRow);
;;;380              } else {
;;;381                ecvcs_computeBinaryImage_numFilters5(image, filteredRows, scaleImage_thresholdMultiplier, imageY, pBinaryImageRow);
;;;382              }
;;;383            }
;;;384    
;;;385            EndBenchmark("ecvcs_computeBinaryImage");
;;;386    
;;;387            // Extract the next line of connected components
;;;388            BeginBenchmark("ecvcs_extractNextRowOfComponents");
;;;389            if((lastResult = components.Extract2dComponents_PerRow_NextRow(pBinaryImageRow, imageWidth, imageY, component1d_minComponentWidth, component1d_maxSkipDistance)) != RESULT_OK)
;;;390              return lastResult;
;;;391            EndBenchmark("ecvcs_extractNextRowOfComponents");
;;;392    
;;;393            BeginBenchmark("ecvcs_scrollIntegralImage");
;;;394    
;;;395            imageY++;
;;;396    
;;;397            // If we've reached the bottom of this integral image, scroll it up
;;;398            if(integralImage.get_maxRow(numBorderPixels-1) < imageY) {
;;;399              if((lastResult = integralImage.ScrollDown(image, numRowsToScroll, fastScratch)) != RESULT_OK)
;;;400                return lastResult;
;;;401            }
;;;402    
;;;403            EndBenchmark("ecvcs_scrollIntegralImage");
;;;404          } // while(imageY < size(image,1))
;;;405    
;;;406          EndBenchmark("ecvcs_mainLoop");
;;;407    
;;;408          BeginBenchmark("ecvcs_finalize");
;;;409          if((lastResult = components.Extract2dComponents_PerRow_Finalize()) != RESULT_OK)
;;;410            return lastResult;
;;;411          EndBenchmark("ecvcs_finalize");
;;;412    
;;;413          return RESULT_OK;
;;;414        } // ExtractComponentsViaCharacteristicScale
00011a  b03b              ADD      sp,sp,#0xec
00011c  f04f7040          MOV      r0,#0x3000000         ;306
000120  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.292|
000124  f2401129          MOV      r1,#0x129             ;297
000128  48b6              LDR      r0,|L4.1028|
00012a  e9cd0100          STRD     r0,r1,[sp,#0]         ;297
00012e  a3b6              ADR      r3,|L4.1032|
000130  a2d5              ADR      r2,|L4.1160|
000132  a1cb              ADR      r1,|L4.1120|
000134  2005              MOVS     r0,#5                 ;297
000136  f7fffffe          BL       _Anki_Log
00013a  b03b              ADD      sp,sp,#0xec
00013c  f04f6080          MOV      r0,#0x4000000         ;297
000140  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.324|
000144  f44f7196          MOV      r1,#0x12c             ;300
000148  48ae              LDR      r0,|L4.1028|
00014a  e9cd0100          STRD     r0,r1,[sp,#0]         ;300
00014e  a3ae              ADR      r3,|L4.1032|
000150  a2d3              ADR      r2,|L4.1184|
000152  a1c3              ADR      r1,|L4.1120|
000154  2005              MOVS     r0,#5                 ;300
000156  f7fffffe          BL       _Anki_Log
00015a  b03b              ADD      sp,sp,#0xec
00015c  48de              LDR      r0,|L4.1240|
00015e  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.354|
000162  f240112f          MOV      r1,#0x12f             ;303
000166  48a7              LDR      r0,|L4.1028|
000168  e9cd0100          STRD     r0,r1,[sp,#0]         ;303
00016c  a3a6              ADR      r3,|L4.1032|
00016e  a2db              ADR      r2,|L4.1244|
000170  a1bb              ADR      r1,|L4.1120|
000172  2005              MOVS     r0,#5                 ;303
000174  f7fffffe          BL       _Anki_Log
000178  b03b              ADD      sp,sp,#0xec
00017a  f04f6080          MOV      r0,#0x4000000         ;303
00017e  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.386|
000182  9838              LDR      r0,[sp,#0xe0]
000184  f04f34ff          MOV      r4,#0xffffffff        ;314
000188  6b02              LDR      r2,[r0,#0x30]         ;317
00018a  2000              MOVS     r0,#0                 ;317
                  |L4.396|
00018c  f8521020          LDR      r1,[r2,r0,LSL #2]     ;320
000190  1c4b              ADDS     r3,r1,#1              ;320
000192  42a3              CMP      r3,r4                 ;320
000194  bfa8              IT       GE                    ;320
000196  461c              MOVGE    r4,r3                 ;320
000198  1c40              ADDS     r0,r0,#1              ;317
00019a  42b0              CMP      r0,r6                 ;317
00019c  dbf6              BLT      |L4.396|
00019e  981d              LDR      r0,[sp,#0x74]         ;324
0001a0  f5b07fa0          CMP      r0,#0x140             ;324
0001a4  dc09              BGT      |L4.442|
0001a6  2010              MOVS     r0,#0x10              ;325
0001a8  eb000044          ADD      r0,r0,r4,LSL #1       ;325
0001ac  2840              CMP      r0,#0x40              ;325
0001ae  bfc6              ITTE     GT                    ;325
0001b0  0060              LSLGT    r0,r4,#1              ;325
0001b2  f1000510          ADDGT    r5,r0,#0x10           ;325
0001b6  2540              MOVLE    r5,#0x40              ;325
0001b8  e014              B        |L4.484|
                  |L4.442|
0001ba  ee000a10          VMOV     s0,r0                 ;328
0001be  eef80ac0          VCVT.F32.S32 s1,s0                 ;328
0001c2  ed9f1aca          VLDR     s2,|L4.1260|
0001c6  ee800a81          VDIV.F32 s0,s1,s2              ;328
0001ca  f7fffffe          BL       __hardfp_ceilf
0001ce  eebd0ac0          VCVT.S32.F32 s0,s0                 ;328
0001d2  0061              LSLS     r1,r4,#1              ;329
0001d4  ee100a10          VMOV     r0,s0                 ;328
0001d8  eb011500          ADD      r5,r1,r0,LSL #4       ;329
0001dc  ebb51f80          CMP      r5,r0,LSL #6          ;329
0001e0  bfd8              IT       LE                    ;329
0001e2  0185              LSLLE    r5,r0,#6              ;329
                  |L4.484|
0001e4  4260              RSBS     r0,r4,#0              ;332
0001e6  eb050040          ADD      r0,r5,r0,LSL #1       ;332
0001ea  2300              MOVS     r3,#0                 ;337
0001ec  901e              STR      r0,[sp,#0x78]         ;337
0001ee  461a              MOV      r2,r3                 ;337
0001f0  2101              MOVS     r1,#1                 ;337
0001f2  a830              ADD      r0,sp,#0xc0           ;337
0001f4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0001f8  6800              LDR      r0,[r0,#0]            ;337
0001fa  4623              MOV      r3,r4                 ;337
0001fc  e9cd9000          STRD     r9,r0,[sp,#0]         ;337
000200  4629              MOV      r1,r5                 ;337
000202  a80f              ADD      r0,sp,#0x3c           ;337
000204  9a1d              LDR      r2,[sp,#0x74]         ;337
000206  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00020a  4641              MOV      r1,r8                 ;338
00020c  a821              ADD      r0,sp,#0x84           ;338
00020e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000212  4603              MOV      r3,r0                 ;338
000214  462a              MOV      r2,r5                 ;338
000216  a80f              ADD      r0,sp,#0x3c           ;338
000218  9937              LDR      r1,[sp,#0xdc]         ;338
00021a  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3210ScrollDownERKNS0_5ArrayIhEEiNS0_11MemoryStackE ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array<unsigned char>&, int, Anki::Embedded::MemoryStack)
00021e  2800              CMP      r0,#0                 ;338
000220  bf1c              ITT      NE
000222  b03b              ADDNE    sp,sp,#0xec
000224  e8bd8ff0          POPNE    {r4-r11,pc}
000228  a802              ADD      r0,sp,#8              ;342
00022a  2200              MOVS     r2,#0                 ;342
00022c  9001              STR      r0,[sp,#4]            ;342
00022e  2301              MOVS     r3,#1                 ;342
000230  4611              MOV      r1,r2                 ;342
000232  a830              ADD      r0,sp,#0xc0           ;342
000234  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000238  6800              LDR      r0,[r0,#0]            ;342
00023a  901f              STR      r0,[sp,#0x7c]         ;342
00023c  9000              STR      r0,[sp,#0]            ;342
00023e  4643              MOV      r3,r8                 ;342
000240  4632              MOV      r2,r6                 ;342
000242  2101              MOVS     r1,#1                 ;342
000244  a828              ADD      r0,sp,#0xa0           ;342
000246  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00024a  e9d0a102          LDRD     r10,r1,[r0,#8]        ;342
00024e  e9d05700          LDRD     r5,r7,[r0,#0]         ;342
000252  f8d0b010          LDR      r11,[r0,#0x10]        ;342
000256  2200              MOVS     r2,#0                 ;342
000258  9100              STR      r1,[sp,#0]            ;342
00025a  4611              MOV      r1,r2                 ;342
00025c  a831              ADD      r0,sp,#0xc4           ;342
00025e  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000262  2200              MOVS     r2,#0                 ;342
000264  9020              STR      r0,[sp,#0x80]         ;342
000266  4611              MOV      r1,r2                 ;342
000268  a834              ADD      r0,sp,#0xd0           ;342
00026a  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00026e  4601              MOV      r1,r0                 ;342
000270  9820              LDR      r0,[sp,#0x80]         ;342
000272  2d00              CMP      r5,#0                 ;342
000274  e9d02300          LDRD     r2,r3,[r0,#0]         ;342
000278  6880              LDR      r0,[r0,#8]            ;342
00027a  9202              STR      r2,[sp,#8]            ;342
00027c  e9cd3003          STRD     r3,r0,[sp,#0xc]       ;342
000280  e9d10200          LDRD     r0,r2,[r1,#0]         ;342
000284  6889              LDR      r1,[r1,#8]            ;342
000286  9107              STR      r1,[sp,#0x1c]         ;342
000288  e9cd0205          STRD     r0,r2,[sp,#0x14]      ;342
00028c  9900              LDR      r1,[sp,#0]            ;342
00028e  e9cd5708          STRD     r5,r7,[sp,#0x20]      ;342
000292  e9cda10a          STRD     r10,r1,[sp,#0x28]     ;342
000296  f8cdb030          STR      r11,[sp,#0x30]        ;342
00029a  bfc8              IT       GT                    ;342
00029c  2f00              CMPGT    r7,#0                 ;342
00029e  dd2b              BLE      |L4.760|
0002a0  fb05f007          MUL      r0,r5,r7              ;342
0002a4  2800              CMP      r0,#0                 ;342
0002a6  bf1c              ITT      NE                    ;342
0002a8  2000              MOVNE    r0,#0                 ;342
0002aa  fb00b00a          MLANE    r0,r0,r10,r11         ;342
0002ae  d023              BEQ      |L4.760|
                  |L4.688|
0002b0  900d              STR      r0,[sp,#0x34]         ;342
0002b2  2d00              CMP      r5,#0                 ;342
0002b4  bfc8              IT       GT                    ;342
0002b6  2f00              CMPGT    r7,#0                 ;342
0002b8  dd20              BLE      |L4.764|
0002ba  fb05f007          MUL      r0,r5,r7              ;342
0002be  2800              CMP      r0,#0                 ;342
0002c0  bf1c              ITT      NE                    ;342
0002c2  2000              MOVNE    r0,#0                 ;342
0002c4  fb00b00a          MLANE    r0,r0,r10,r11         ;342
0002c8  d018              BEQ      |L4.764|
                  |L4.714|
0002ca  900e              STR      r0,[sp,#0x38]         ;342
0002cc  2d00              CMP      r5,#0                 ;342
0002ce  bfc8              IT       GT                    ;342
0002d0  2f00              CMPGT    r7,#0                 ;342
0002d2  dd15              BLE      |L4.768|
0002d4  fb05f007          MUL      r0,r5,r7              ;342
0002d8  2800              CMP      r0,#0                 ;342
0002da  bf1c              ITT      NE                    ;342
0002dc  2000              MOVNE    r0,#0                 ;342
0002de  fb00b00a          MLANE    r0,r0,r10,r11         ;342
0002e2  d00d              BEQ      |L4.768|
                  |L4.740|
0002e4  900e              STR      r0,[sp,#0x38]         ;342
0002e6  a81f              ADD      r0,sp,#0x7c           ;342
0002e8  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0002ec  b150              CBZ      r0,|L4.772|
0002ee  4631              MOV      r1,r6                 ;342
0002f0  9801              LDR      r0,[sp,#4]            ;342
0002f2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
0002f6  e009              B        |L4.780|
                  |L4.760|
0002f8  2000              MOVS     r0,#0                 ;342
0002fa  e7d9              B        |L4.688|
                  |L4.764|
0002fc  2000              MOVS     r0,#0                 ;342
0002fe  e7e4              B        |L4.714|
                  |L4.768|
000300  2000              MOVS     r0,#0                 ;342
000302  e7ef              B        |L4.740|
                  |L4.772|
000304  2100              MOVS     r1,#0                 ;342
000306  9801              LDR      r0,[sp,#4]            ;342
000308  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
                  |L4.780|
00030c  9905              LDR      r1,[sp,#0x14]         ;342
00030e  9809              LDR      r0,[sp,#0x24]         ;342
000310  f8dfb1dc          LDR      r11,|L4.1264|
000314  4281              CMP      r1,r0                 ;344
000316  dc6c              BGT      |L4.1010|
000318  980c              LDR      r0,[sp,#0x30]         ;344
00031a  b130              CBZ      r0,|L4.810|
00031c  9808              LDR      r0,[sp,#0x20]         ;344
00031e  2800              CMP      r0,#0                 ;344
000320  bfa3              ITTTE    GE                    ;344
000322  9809              LDRGE    r0,[sp,#0x24]         ;344
000324  2800              CMPGE    r0,#0                 ;344
000326  2001              MOVGE    r0,#1                 ;344
000328  2000              MOVLT    r0,#0                 ;344
                  |L4.810|
00032a  2800              CMP      r0,#0                 ;344
00032c  d061              BEQ      |L4.1010|
00032e  2700              MOVS     r7,#0                 ;347
000330  2e00              CMP      r6,#0                 ;347
000332  dd2b              BLE      |L4.908|
                  |L4.820|
000334  980e              LDR      r0,[sp,#0x38]         ;347
000336  eb070a87          ADD      r10,r7,r7,LSL #2      ;347
00033a  eb00058a          ADD      r5,r0,r10,LSL #2      ;347
00033e  2300              MOVS     r3,#0                 ;348
000340  461a              MOV      r2,r3                 ;348
000342  2101              MOVS     r1,#1                 ;348
000344  a81f              ADD      r0,sp,#0x7c           ;348
000346  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00034a  6800              LDR      r0,[r0,#0]            ;348
00034c  9000              STR      r0,[sp,#0]            ;348
00034e  4643              MOV      r3,r8                 ;348
000350  2101              MOVS     r1,#1                 ;348
000352  a828              ADD      r0,sp,#0xa0           ;348
000354  9a1d              LDR      r2,[sp,#0x74]         ;348
000356  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00035a  6801              LDR      r1,[r0,#0]            ;348
00035c  6029              STR      r1,[r5,#0]            ;348
00035e  6841              LDR      r1,[r0,#4]            ;348
000360  6069              STR      r1,[r5,#4]            ;348
000362  6881              LDR      r1,[r0,#8]            ;348
000364  60a9              STR      r1,[r5,#8]            ;348
000366  68c1              LDR      r1,[r0,#0xc]          ;348
000368  60e9              STR      r1,[r5,#0xc]          ;348
00036a  6900              LDR      r0,[r0,#0x10]         ;348
00036c  6128              STR      r0,[r5,#0x10]         ;348
00036e  980e              LDR      r0,[sp,#0x38]         ;348
000370  eb00008a          ADD      r0,r0,r10,LSL #2      ;348
000374  6901              LDR      r1,[r0,#0x10]         ;348
000376  2900              CMP      r1,#0                 ;348
000378  d03c              BEQ      |L4.1012|
00037a  6801              LDR      r1,[r0,#0]            ;348
00037c  2900              CMP      r1,#0                 ;348
00037e  bfa4              ITT      GE                    ;348
000380  6840              LDRGE    r0,[r0,#4]            ;348
000382  2800              CMPGE    r0,#0                 ;348
000384  db36              BLT      |L4.1012|
000386  1c7f              ADDS     r7,r7,#1              ;347
000388  42b7              CMP      r7,r6                 ;347
00038a  dbd3              BLT      |L4.820|
                  |L4.908|
00038c  2300              MOVS     r3,#0                 ;353
00038e  461a              MOV      r2,r3                 ;353
000390  2101              MOVS     r1,#1                 ;353
000392  a830              ADD      r0,sp,#0xc0           ;353
000394  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000398  6800              LDR      r0,[r0,#0]            ;353
00039a  9000              STR      r0,[sp,#0]            ;353
00039c  4643              MOV      r3,r8                 ;353
00039e  2101              MOVS     r1,#1                 ;353
0003a0  a818              ADD      r0,sp,#0x60           ;353
0003a2  9a1d              LDR      r2,[sp,#0x74]         ;353
0003a4  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0003a8  981c              LDR      r0,[sp,#0x70]         ;353
0003aa  2800              CMP      r0,#0                 ;353
0003ac  d023              BEQ      |L4.1014|
0003ae  9818              LDR      r0,[sp,#0x60]         ;353
0003b0  2800              CMP      r0,#0                 ;353
0003b2  bfa4              ITT      GE                    ;353
0003b4  9819              LDRGE    r0,[sp,#0x64]         ;353
0003b6  2800              CMPGE    r0,#0                 ;353
0003b8  db1d              BLT      |L4.1014|
0003ba  9a1a              LDR      r2,[sp,#0x68]         ;353
0003bc  991c              LDR      r1,[sp,#0x70]         ;353
0003be  2000              MOVS     r0,#0                 ;358
0003c0  fb001702          MLA      r7,r0,r2,r1           ;358
0003c4  464a              MOV      r2,r9                 ;360
0003c6  4641              MOV      r1,r8                 ;360
0003c8  9b48              LDR      r3,[sp,#0x120]        ;360
0003ca  9845              LDR      r0,[sp,#0x114]        ;360
0003cc  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES3_S3_ ; Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
0003d0  2800              CMP      r0,#0                 ;360
0003d2  bf1c              ITT      NE
0003d4  b03b              ADDNE    sp,sp,#0xec
0003d6  e8bd8ff0          POPNE    {r4-r11,pc}
0003da  2500              MOVS     r5,#0                 ;363
0003dc  a006              ADR      r0,|L4.1016|
0003de  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0003e2  a044              ADR      r0,|L4.1268|
0003e4  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0003e8  982f              LDR      r0,[sp,#0xbc]         ;368
0003ea  2800              CMP      r0,#0                 ;368
0003ec  f3408119          BLE.W    |L4.1570|
                  |L4.1008|
0003f0  e088              B        |L4.1284|
                  |L4.1010|
0003f2  e0a0              B        |L4.1334|
                  |L4.1012|
0003f4  e0b0              B        |L4.1368|
                  |L4.1014|
0003f6  e0c0              B        |L4.1402|
                  |L4.1016|
0003f8  65637663          DCB      "ecvcs_init",0
0003fc  735f696e
000400  697400  
000403  00                DCB      0
                  |L4.1028|
                          DCD      ||.constdata||+0x208
                  |L4.1032|
000408  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\computeCharacteristic"
00040c  6f726574
000410  6563685c
000414  76697369
000418  6f6e5c72
00041c  6f626f74
000420  5c737263
000424  5c636f6d
000428  70757465
00042c  43686172
000430  61637465
000434  72697374
000438  6963    
00043a  5363616c          DCB      "Scale.cpp",0
00043e  652e6370
000442  7000    
                  |L4.1092|
000444  696e7661          DCB      "invalid numFilterHalfWidths",0
000448  6c696420
00044c  6e756d46
000450  696c7465
000454  7248616c
000458  66576964
00045c  74687300
                  |L4.1120|
000460  45787472          DCB      "ExtractComponentsViaCharacteristicScale",0
000464  61637443
000468  6f6d706f
00046c  6e656e74
000470  73566961
000474  43686172
000478  61637465
00047c  72697374
000480  69635363
000484  616c6500
                  |L4.1160|
000488  73637261          DCB      "scratch is not valid",0
00048c  74636820
000490  6973206e
000494  6f742076
000498  616c6964
00049c  00      
00049d  00                DCB      0
00049e  00                DCB      0
00049f  00                DCB      0
                  |L4.1184|
0004a0  66617374          DCB      "fast and slow scratch buffers cannot be the same object"
0004a4  20616e64
0004a8  20736c6f
0004ac  77207363
0004b0  72617463
0004b4  68206275
0004b8  66666572
0004bc  73206361
0004c0  6e6e6f74
0004c4  20626520
0004c8  74686520
0004cc  73616d65
0004d0  206f626a
0004d4  656374  
0004d7  00                DCB      0
                  |L4.1240|
                          DCD      0x01000003
                  |L4.1244|
0004dc  496e7661          DCB      "Invalid objects",0
0004e0  6c696420
0004e4  6f626a65
0004e8  63747300
                  |L4.1260|
0004ec  43a00000          DCFS     0x43a00000 ; 320
                  |L4.1264|
                          DCD      0x01000001
                  |L4.1268|
0004f4  65637663          DCB      "ecvcs_mainLoop",0
0004f8  735f6d61
0004fc  696e4c6f
000500  6f7000  
000503  00                DCB      0
                  |L4.1284|
000504  a053              ADR      r0,|L4.1620|
000506  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00050a  ab02              ADD      r3,sp,#8              ;370
00050c  462a              MOV      r2,r5                 ;370
00050e  a80f              ADD      r0,sp,#0x3c           ;370
000510  9938              LDR      r1,[sp,#0xe0]         ;370
000512  f7fffffe          BL       _ZN4Anki8Embedded16ecvcs_filterRowsERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_15FixedLengthListIiEEiRNS4_INS0_5ArrayIhEEEE ; Anki::Embedded::ecvcs_filterRows(const Anki::Embedded::ScrollingIntegralImage_u8_s32&, const Anki::Embedded::FixedLengthList<int>&, int, Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>&)
000516  a04f              ADR      r0,|L4.1620|
000518  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00051c  a052              ADR      r0,|L4.1640|
00051e  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000522  2e05              CMP      r6,#5                 ;375
000524  d03a              BEQ      |L4.1436|
000526  9700              STR      r7,[sp,#0]            ;376
000528  462b              MOV      r3,r5                 ;376
00052a  a902              ADD      r1,sp,#8              ;376
00052c  9a39              LDR      r2,[sp,#0xe4]         ;376
00052e  9837              LDR      r0,[sp,#0xdc]         ;376
000530  f7fffffe          BL       _ZN4Anki8Embedded24ecvcs_computeBinaryImageERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh ; Anki::Embedded::ecvcs_computeBinaryImage(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>&, int, int, unsigned char*)
000534  e03d              B        |L4.1458|
                  |L4.1334|
000536  4853              LDR      r0,|L4.1668|
000538  f44f71ac          MOV      r1,#0x158             ;344
00053c  f2af1338          ADR      r3,|L4.1032|
000540  a251              ADR      r2,|L4.1672|
000542  e9cd0100          STRD     r0,r1,[sp,#0]         ;344
000546  f2af01e8          ADR      r1,|L4.1120|
00054a  2005              MOVS     r0,#5                 ;344
00054c  f7fffffe          BL       _Anki_Log
000550  b03b              ADD      sp,sp,#0xec
000552  4658              MOV      r0,r11                ;344
000554  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.1368|
000558  484a              LDR      r0,|L4.1668|
00055a  f240115d          MOV      r1,#0x15d             ;349
00055e  f2af1358          ADR      r3,|L4.1032|
000562  a249              ADR      r2,|L4.1672|
000564  e9cd0100          STRD     r0,r1,[sp,#0]         ;349
000568  f2af110c          ADR      r1,|L4.1120|
00056c  2005              MOVS     r0,#5                 ;349
00056e  f7fffffe          BL       _Anki_Log
000572  b03b              ADD      sp,sp,#0xec
000574  4658              MOV      r0,r11                ;349
000576  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.1402|
00057a  4842              LDR      r0,|L4.1668|
00057c  f2401163          MOV      r1,#0x163             ;355
000580  f2af137c          ADR      r3,|L4.1032|
000584  a247              ADR      r2,|L4.1700|
000586  e9cd0100          STRD     r0,r1,[sp,#0]         ;355
00058a  f2af112c          ADR      r1,|L4.1120|
00058e  2005              MOVS     r0,#5                 ;355
000590  f7fffffe          BL       _Anki_Log
000594  b03b              ADD      sp,sp,#0xec
000596  4658              MOV      r0,r11                ;355
000598  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.1436|
00059c  9839              LDR      r0,[sp,#0xe4]         ;378
00059e  9700              STR      r7,[sp,#0]            ;381
0005a0  f5b03f80          CMP      r0,#0x10000           ;378
0005a4  4602              MOV      r2,r0                 ;381
0005a6  9837              LDR      r0,[sp,#0xdc]         ;378
0005a8  462b              MOV      r3,r5                 ;381
0005aa  a902              ADD      r1,sp,#8              ;381
0005ac  d04f              BEQ      |L4.1614|
0005ae  f7fffffe          BL       _ZN4Anki8Embedded36ecvcs_computeBinaryImage_numFilters5ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh ; Anki::Embedded::ecvcs_computeBinaryImage_numFilters5(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>&, int, int, unsigned char*)
                  |L4.1458|
0005b2  a02d              ADR      r0,|L4.1640|
0005b4  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0005b8  a041              ADR      r0,|L4.1728|
0005ba  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0005be  9944              LDR      r1,[sp,#0x110]        ;389
0005c0  983a              LDR      r0,[sp,#0xe8]         ;389
0005c2  e9cd0100          STRD     r0,r1,[sp,#0]         ;389
0005c6  b22b              SXTH     r3,r5                 ;389
0005c8  4639              MOV      r1,r7                 ;389
0005ca  9a1d              LDR      r2,[sp,#0x74]         ;389
0005cc  9845              LDR      r0,[sp,#0x114]        ;389
0005ce  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents34Extract2dComponents_PerRow_NextRowEPKhisss ; Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
0005d2  2800              CMP      r0,#0                 ;389
0005d4  bf1c              ITT      NE
0005d6  b03b              ADDNE    sp,sp,#0xec
0005d8  e8bd8ff0          POPNE    {r4-r11,pc}
0005dc  a038              ADR      r0,|L4.1728|
0005de  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0005e2  a040              ADR      r0,|L4.1764|
0005e4  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0005e8  1c6d              ADDS     r5,r5,#1              ;395
0005ea  1e61              SUBS     r1,r4,#1              ;398
0005ec  a80f              ADD      r0,sp,#0x3c           ;398
0005ee  f7fffffe          BL       _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3210get_maxRowEi ; Anki::Embedded::ScrollingIntegralImage_u8_s32::get_maxRow(int) const
0005f2  42a8              CMP      r0,r5                 ;398
0005f4  da0e              BGE      |L4.1556|
0005f6  4641              MOV      r1,r8                 ;399
0005f8  a828              ADD      r0,sp,#0xa0           ;399
0005fa  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0005fe  4603              MOV      r3,r0                 ;399
000600  a80f              ADD      r0,sp,#0x3c           ;399
000602  9a1e              LDR      r2,[sp,#0x78]         ;399
000604  9937              LDR      r1,[sp,#0xdc]         ;399
000606  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3210ScrollDownERKNS0_5ArrayIhEEiNS0_11MemoryStackE ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array<unsigned char>&, int, Anki::Embedded::MemoryStack)
00060a  2800              CMP      r0,#0                 ;399
00060c  bf1c              ITT      NE
00060e  b03b              ADDNE    sp,sp,#0xec
000610  e8bd8ff0          POPNE    {r4-r11,pc}
                  |L4.1556|
000614  a033              ADR      r0,|L4.1764|
000616  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00061a  982f              LDR      r0,[sp,#0xbc]         ;368
00061c  4285              CMP      r5,r0                 ;368
00061e  f6ffaee7          BLT      |L4.1008|
                  |L4.1570|
000622  f2af1030          ADR      r0,|L4.1268|
000626  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00062a  a035              ADR      r0,|L4.1792|
00062c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000630  9845              LDR      r0,[sp,#0x114]        ;409
000632  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents35Extract2dComponents_PerRow_FinalizeEv ; Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Finalize()
000636  2800              CMP      r0,#0                 ;409
000638  bf1c              ITT      NE
00063a  b03b              ADDNE    sp,sp,#0xec
00063c  e8bd8ff0          POPNE    {r4-r11,pc}
000640  a02f              ADR      r0,|L4.1792|
000642  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000646  b03b              ADD      sp,sp,#0xec
000648  2000              MOVS     r0,#0                 ;413
00064a  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.1614|
00064e  f7fffffe          BL       _ZN4Anki8Embedded57ecvcs_computeBinaryImage_numFilters5_thresholdMultiplier1ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh ; Anki::Embedded::ecvcs_computeBinaryImage_numFilters5_thresholdMultiplier1(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>&, int, int, unsigned char*)
000652  e7ae              B        |L4.1458|
;;;415      } // namespace Embedded
                          ENDP

                  |L4.1620|
000654  65637663          DCB      "ecvcs_filterRows",0
000658  735f6669
00065c  6c746572
000660  526f7773
000664  00      
000665  00                DCB      0
000666  00                DCB      0
000667  00                DCB      0
                  |L4.1640|
000668  65637663          DCB      "ecvcs_computeBinaryImage",0
00066c  735f636f
000670  6d707574
000674  6542696e
000678  61727949
00067c  6d616765
000680  00      
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L4.1668|
                          DCD      ||.constdata||+0x208
                  |L4.1672|
000688  66696c74          DCB      "filteredRows is not valid",0
00068c  65726564
000690  526f7773
000694  20697320
000698  6e6f7420
00069c  76616c69
0006a0  6400    
0006a2  00                DCB      0
0006a3  00                DCB      0
                  |L4.1700|
0006a4  62696e61          DCB      "binaryImageRow is not valid",0
0006a8  7279496d
0006ac  61676552
0006b0  6f772069
0006b4  73206e6f
0006b8  74207661
0006bc  6c696400
                  |L4.1728|
0006c0  65637663          DCB      "ecvcs_extractNextRowOfComponents",0
0006c4  735f6578
0006c8  74726163
0006cc  744e6578
0006d0  74526f77
0006d4  4f66436f
0006d8  6d706f6e
0006dc  656e7473
0006e0  00      
0006e1  00                DCB      0
0006e2  00                DCB      0
0006e3  00                DCB      0
                  |L4.1764|
0006e4  65637663          DCB      "ecvcs_scrollIntegralImage",0
0006e8  735f7363
0006ec  726f6c6c
0006f0  496e7465
0006f4  6772616c
0006f8  496d6167
0006fc  6500    
0006fe  00                DCB      0
0006ff  00                DCB      0
                  |L4.1792|
000700  65637663          DCB      "ecvcs_finalize",0
000704  735f6669
000708  6e616c69
00070c  7a6500  
00070f  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded57ecvcs_computeBinaryImage_numFilters5_thresholdMultiplier1ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded57ecvcs_computeBinaryImage_numFilters5_thresholdMultiplier1ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh PROC ; Anki::Embedded::ecvcs_computeBinaryImage_numFilters5_thresholdMultiplier1(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>&, int, int, unsigned char*)
                  |symbol_number.72|
;;;145    
;;;146        NO_INLINE void ecvcs_computeBinaryImage_numFilters5_thresholdMultiplier1(const Array<u8> &image, FixedLengthList<Array<u8> > &filteredRows, const s32 scaleImage_thresholdMultiplier, const s32 imageY, u8 * restrict pBinaryImageRow)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;147        {
000004  4688              MOV      r8,r1
000006  6882              LDR      r2,[r0,#8]
000008  6901              LDR      r1,[r0,#0x10]
00000a  b0c5              SUB      sp,sp,#0x114
00000c  fb031102          MLA      r1,r3,r2,r1
000010  9c4e              LDR      r4,[sp,#0x138]
000012  9144              STR      r1,[sp,#0x110]
000014  f8d82030          LDR      r2,[r8,#0x30]
000018  2700              MOVS     r7,#0
00001a  6893              LDR      r3,[r2,#8]
00001c  6911              LDR      r1,[r2,#0x10]
00001e  fb071103          MLA      r1,r7,r3,r1
000022  9143              STR      r1,[sp,#0x10c]
000024  6a53              LDR      r3,[r2,#0x24]
000026  69d1              LDR      r1,[r2,#0x1c]
000028  fb073101          MLA      r1,r7,r1,r3
00002c  9142              STR      r1,[sp,#0x108]
00002e  6b93              LDR      r3,[r2,#0x38]
000030  6b11              LDR      r1,[r2,#0x30]
000032  fb073101          MLA      r1,r7,r1,r3
000036  9141              STR      r1,[sp,#0x104]
000038  6cd3              LDR      r3,[r2,#0x4c]
00003a  6c51              LDR      r1,[r2,#0x44]
00003c  fb073601          MLA      r6,r7,r1,r3
000040  f1020150          ADD      r1,r2,#0x50
000044  6e12              LDR      r2,[r2,#0x60]
000046  6889              LDR      r1,[r1,#8]
000048  fb072501          MLA      r5,r7,r1,r2
;;;148          AnkiAssert(filteredRows.get_size() == 5);
;;;149          AnkiAssert(scaleImage_thresholdMultiplier == 65536);
;;;150    
;;;151          const s32 thresholdMultiplier_numFractionalBits = 16;
;;;152    
;;;153          const u8 * restrict pImage = image[imageY];
;;;154    
;;;155          const u8 * restrict pFilteredRows0 = filteredRows[0][0];
;;;156          const u8 * restrict pFilteredRows1 = filteredRows[1][0];
;;;157          const u8 * restrict pFilteredRows2 = filteredRows[2][0];
;;;158          const u8 * restrict pFilteredRows3 = filteredRows[3][0];
;;;159          const u8 * restrict pFilteredRows4 = filteredRows[4][0];
;;;160    
;;;161          const s32 imageWidth = image.get_size(1);
00004c  2101              MOVS     r1,#1
00004e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;162    
;;;163          const s32 numFilteredRows = filteredRows.get_size();
;;;164    
;;;165          AnkiAssert(filteredRows.get_size() <= MAX_FILTER_HALF_WIDTH);
;;;166    
;;;167          const u8 * restrict pFilteredRows[MAX_FILTER_HALF_WIDTH+1];
;;;168          for(s32 i=0; i<numFilteredRows; i++) {
000052  f8d8300c          LDR      r3,[r8,#0xc]
000056  2200              MOVS     r2,#0
000058  2b00              CMP      r3,#0
00005a  bfc4              ITT      GT                    ;167
00005c  46e9              MOVGT    r9,sp                 ;167
00005e  f8d88030          LDRGT    r8,[r8,#0x30]         ;167
000062  dd0f              BLE      |L5.132|
                  |L5.100|
000064  eb020182          ADD      r1,r2,r2,LSL #2
000068  eb080181          ADD      r1,r8,r1,LSL #2
;;;169            pFilteredRows[i] = filteredRows[i][0];
00006c  f04f0c00          MOV      r12,#0
000070  f8d1a010          LDR      r10,[r1,#0x10]
000074  6889              LDR      r1,[r1,#8]
000076  fb0ca101          MLA      r1,r12,r1,r10
00007a  f8491022          STR      r1,[r9,r2,LSL #2]
00007e  1c52              ADDS     r2,r2,#1              ;168
000080  4293              CMP      r3,r2                 ;168
000082  dcef              BGT      |L5.100|
                  |L5.132|
;;;170          }
;;;171    
;;;172          s32 x=0;
000084  2100              MOVS     r1,#0
;;;173    
;;;174    #if ACCELERATION_TYPE == ACCELERATION_ARM_A7
;;;175          const uint8x16_t zeros8x16 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
;;;176          const uint8x16_t ones8x16  = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
;;;177    
;;;178          for(; x<(imageWidth-15); x+=16) {
;;;179            const uint8x16_t filteredRow0 = vld1q_u8(&pFilteredRows0[x]);
;;;180            const uint8x16_t filteredRow1 = vld1q_u8(&pFilteredRows1[x]);
;;;181            const uint8x16_t filteredRow2 = vld1q_u8(&pFilteredRows2[x]);
;;;182            const uint8x16_t filteredRow3 = vld1q_u8(&pFilteredRows3[x]);
;;;183            const uint8x16_t filteredRow4 = vld1q_u8(&pFilteredRows4[x]);
;;;184    
;;;185            const uint8x16_t imageRow = vld1q_u8(&pImage[x]);
;;;186    
;;;187            const uint8x16_t dog0 = vabdq_u8(filteredRow1, filteredRow0);
;;;188            const uint8x16_t dog1 = vabdq_u8(filteredRow2, filteredRow1);
;;;189            const uint8x16_t dog2 = vabdq_u8(filteredRow3, filteredRow2);
;;;190            const uint8x16_t dog3 = vabdq_u8(filteredRow4, filteredRow3);
;;;191    
;;;192            const uint8x16_t dogMax = vmaxq_u8(vmaxq_u8(dog0, dog1), vmaxq_u8(dog2, dog3));
;;;193    
;;;194            const uint8x16_t dog0IsMax = vceqq_u8(dogMax, dog0);
;;;195            const uint8x16_t dog1IsMax = vceqq_u8(dogMax, dog1);
;;;196            const uint8x16_t dog2IsMax = vceqq_u8(dogMax, dog2);
;;;197    
;;;198            // Backwards, so in cases of ties, the result matches the non-simd version
;;;199            uint8x16_t scaleValue = filteredRow4;
;;;200            scaleValue = vbslq_u8(dog2IsMax, filteredRow3, scaleValue);
;;;201            scaleValue = vbslq_u8(dog1IsMax, filteredRow2, scaleValue);
;;;202            scaleValue = vbslq_u8(dog0IsMax, filteredRow1, scaleValue);
;;;203    
;;;204            const uint8x16_t scaleValueIsLarger = vcltq_u8(imageRow, scaleValue);
;;;205            const uint8x16_t binaryVector = vbslq_u8(scaleValueIsLarger, ones8x16, zeros8x16);
;;;206    
;;;207            vst1q_u8(&pBinaryImageRow[x], binaryVector);
;;;208          } // for(s32 x=0; x<imageWidth; x++)
;;;209    #endif // #if ACCELERATION_TYPE == ACCELERATION_ARM_A7
;;;210    
;;;211          for(; x<imageWidth; x++) {
000086  2800              CMP      r0,#0
;;;212            //for(s32 iHalfWidth=0; iHalfWidth<(numFilteredRows-1); iHalfWidth++) {
;;;213            const s16 dog0 = ABS(static_cast<s16>(pFilteredRows1[x]) - static_cast<s16>(pFilteredRows0[x]));
;;;214            const s16 dog1 = ABS(static_cast<s16>(pFilteredRows2[x]) - static_cast<s16>(pFilteredRows1[x]));
;;;215            const s16 dog2 = ABS(static_cast<s16>(pFilteredRows3[x]) - static_cast<s16>(pFilteredRows2[x]));
;;;216            const s16 dog3 = ABS(static_cast<s16>(pFilteredRows4[x]) - static_cast<s16>(pFilteredRows3[x]));
;;;217    
;;;218            const s16 maxValue = MAX(dog0, MAX(dog1, MAX(dog2, dog3)));
;;;219    
;;;220            u8 scaleValue;
;;;221    
;;;222            if(dog0 == maxValue) {
;;;223              scaleValue = pFilteredRows1[x];
;;;224            } else if(dog1 == maxValue) {
;;;225              scaleValue = pFilteredRows2[x];
;;;226            } else if(dog2 == maxValue) {
;;;227              scaleValue = pFilteredRows3[x];
;;;228            } else {
;;;229              scaleValue = pFilteredRows4[x];
;;;230            }
;;;231    
;;;232            //} // for(s32 pyramidLevel=0; pyramidLevel<scaleImage_numPyramidLevels; scaleImage_numPyramidLevels++)
;;;233    
;;;234            const u8 thresholdValue = scaleValue;
;;;235            if(pImage[x] < thresholdValue) {
;;;236              pBinaryImageRow[x] = 1;
;;;237            } else {
;;;238              pBinaryImageRow[x] = 0;
;;;239            }
;;;240          } // for(s32 x=0; x<imageWidth; x++)
;;;241        } // staticInline void ecvcs_computeBinaryImage_numFilters5()
000088  bfdc              ITT      LE
00008a  b045              ADDLE    sp,sp,#0x114
00008c  e8bd8ff0          POPLE    {r4-r11,pc}
                  |L5.144|
000090  9a42              LDR      r2,[sp,#0x108]        ;213
000092  f8129001          LDRB     r9,[r2,r1]            ;213
000096  9a43              LDR      r2,[sp,#0x10c]        ;213
000098  5c52              LDRB     r2,[r2,r1]            ;213
00009a  eba90a02          SUB      r10,r9,r2             ;213
00009e  f1ba0f00          CMP      r10,#0                ;213
0000a2  bfb8              IT       LT                    ;213
0000a4  eba20a09          SUBLT    r10,r2,r9             ;213
0000a8  9a41              LDR      r2,[sp,#0x104]        ;214
0000aa  f8128001          LDRB     r8,[r2,r1]            ;214
0000ae  eba80c09          SUB      r12,r8,r9             ;214
0000b2  f1bc0f00          CMP      r12,#0                ;214
0000b6  bfb8              IT       LT                    ;214
0000b8  eba90c08          SUBLT    r12,r9,r8             ;214
0000bc  5c77              LDRB     r7,[r6,r1]            ;215
0000be  eba70208          SUB      r2,r7,r8              ;215
0000c2  2a00              CMP      r2,#0                 ;215
0000c4  bfb8              IT       LT                    ;215
0000c6  eba80207          SUBLT    r2,r8,r7              ;215
0000ca  f815b001          LDRB     r11,[r5,r1]           ;216
0000ce  ebab0307          SUB      r3,r11,r7             ;216
0000d2  2b00              CMP      r3,#0                 ;216
0000d4  bfb8              IT       LT                    ;216
0000d6  eba7030b          SUBLT    r3,r7,r11             ;216
0000da  429a              CMP      r2,r3                 ;218
0000dc  bfcc              ITE      GT                    ;218
0000de  4696              MOVGT    lr,r2                 ;218
0000e0  469e              MOVLE    lr,r3                 ;218
0000e2  45e6              CMP      lr,r12                ;218
0000e4  bfb8              IT       LT                    ;218
0000e6  46e6              MOVLT    lr,r12                ;218
0000e8  db03              BLT      |L5.242|
0000ea  4293              CMP      r3,r2                 ;218
0000ec  bfb4              ITE      LT                    ;218
0000ee  4696              MOVLT    lr,r2                 ;218
0000f0  469e              MOVGE    lr,r3                 ;218
                  |L5.242|
0000f2  45d6              CMP      lr,r10                ;218
0000f4  bfb8              IT       LT                    ;218
0000f6  4653              MOVLT    r3,r10                ;218
0000f8  db0a              BLT      |L5.272|
0000fa  4293              CMP      r3,r2                 ;218
0000fc  bfb4              ITE      LT                    ;218
0000fe  4696              MOVLT    lr,r2                 ;218
000100  469e              MOVGE    lr,r3                 ;218
000102  45e6              CMP      lr,r12                ;218
000104  bfb8              IT       LT                    ;218
000106  4663              MOVLT    r3,r12                ;218
000108  db02              BLT      |L5.272|
00010a  4293              CMP      r3,r2                 ;218
00010c  bfb8              IT       LT                    ;218
00010e  4613              MOVLT    r3,r2                 ;218
                  |L5.272|
000110  459a              CMP      r10,r3                ;222
000112  bf08              IT       EQ                    ;222
000114  464f              MOVEQ    r7,r9                 ;222
000116  d006              BEQ      |L5.294|
000118  459c              CMP      r12,r3                ;224
00011a  bf08              IT       EQ                    ;224
00011c  4647              MOVEQ    r7,r8                 ;224
00011e  d002              BEQ      |L5.294|
000120  429a              CMP      r2,r3                 ;226
000122  bf18              IT       NE                    ;226
000124  465f              MOVNE    r7,r11                ;226
                  |L5.294|
000126  9a44              LDR      r2,[sp,#0x110]        ;235
000128  5c52              LDRB     r2,[r2,r1]            ;235
00012a  42ba              CMP      r2,r7                 ;235
00012c  bf34              ITE      CC                    ;236
00012e  2201              MOVCC    r2,#1                 ;236
000130  2200              MOVCS    r2,#0                 ;238
000132  5462              STRB     r2,[r4,r1]            ;238
000134  1c49              ADDS     r1,r1,#1              ;211
000136  4281              CMP      r1,r0                 ;211
000138  dbaa              BLT      |L5.144|
00013a  b045              ADD      sp,sp,#0x114
00013c  e8bd8ff0          POP      {r4-r11,pc}
;;;242    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded16ecvcs_filterRowsERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_15FixedLengthListIiEEiRNS4_INS0_5ArrayIhEEEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded16ecvcs_filterRowsERKNS0_29ScrollingIntegralImage_u8_s32ERKNS0_15FixedLengthListIiEEiRNS4_INS0_5ArrayIhEEEE||
                          DCD      0x00000001

                          AREA ||area_number.7||, LINKORDER=||i._ZN4Anki8Embedded36ecvcs_computeBinaryImage_numFilters5ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded36ecvcs_computeBinaryImage_numFilters5ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4Anki8Embedded57ecvcs_computeBinaryImage_numFilters5_thresholdMultiplier1ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded57ecvcs_computeBinaryImage_numFilters5_thresholdMultiplier1ERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN4Anki8Embedded24ecvcs_computeBinaryImageERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded24ecvcs_computeBinaryImageERKNS0_5ArrayIhEERNS0_15FixedLengthListIS2_EEiiPh||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN4Anki8Embedded39ExtractComponentsViaCharacteristicScaleERKNS0_5ArrayIhEERKNS0_15FixedLengthListIiEEissRNS0_19ConnectedComponentsENS0_11MemoryStackESB_SB_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded39ExtractComponentsViaCharacteristicScaleERKNS0_5ArrayIhEERKNS0_15FixedLengthListIiEEissRNS0_19ConnectedComponentsENS0_11MemoryStackESB_SB_||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  normalizationMultiply
                          DCD      0x00000001
                          DCD      0x00000039
                          DCD      0x00000029
                          DCD      0x000000a7
                          DCD      0x00000065
                          DCD      0x00000087
                          DCD      0x00000061
                          DCD      0x00000049
                          DCD      0x000000e3
                          DCD      0x0000005b
                          DCD      0x00000095
                          DCD      0x0000001f
                          DCD      0x00000069
                          DCD      0x0000002d
                          DCD      0x00000027
                          DCD      0x00000011
                          DCD      0x000000f1
                          DCD      0x0000006b
                          DCD      0x000000bf
                          DCD      0x0000002b
                          DCD      0x00000027
                          DCD      0x00000047
                          DCD      0x00000081
                          DCD      0x000000ed
                          DCD      0x0000006d
                          DCD      0x00000065
                          DCD      0x000000bb
                          DCD      0x000000ad
                          DCD      0x000000a1
                          DCD      0x00000097
                          DCD      0x0000008d
                          DCD      0x00000021
                          DCD      0x0000001f
                          DCD      0x00000075
                          DCD      0x00000037
                          DCD      0x0000000d
                          DCD      0x000000c5
                          DCD      0x0000005d
                          DCD      0x000000b1
                          DCD      0x00000015
                          DCD      0x00000005
                          DCD      0x00000013
                          DCD      0x00000091
                          DCD      0x0000008b
                          DCD      0x00000021
                          DCD      0x000000fd
                          DCD      0x00000079
                          DCD      0x0000001d
                          DCD      0x000000df
                          DCD      0x0000006b
                          DCD      0x00000067
                          DCD      0x00000063
                          DCD      0x0000005f
                          DCD      0x000000b7
                          DCD      0x000000b1
                          DCD      0x00000055
                          DCD      0x00000029
                          DCD      0x0000009f
                          DCD      0x00000099
                          DCD      0x00000025
                          DCD      0x0000008f
                          DCD      0x0000008b
                          DCD      0x00000043
                          DCD      0x00000041
                          DCD      0x0000003f
                  normalizationBitShifts
                          DCD      0x00000000
                          DCD      0x00000009
                          DCD      0x0000000a
                          DCD      0x0000000d
                          DCD      0x0000000d
                          DCD      0x0000000e
                          DCD      0x0000000e
                          DCD      0x0000000e
                          DCD      0x00000010
                          DCD      0x0000000f
                          DCD      0x00000010
                          DCD      0x0000000e
                          DCD      0x00000010
                          DCD      0x0000000f
                          DCD      0x0000000f
                          DCD      0x0000000e
                          DCD      0x00000012
                          DCD      0x00000011
                          DCD      0x00000012
                          DCD      0x00000010
                          DCD      0x00000010
                          DCD      0x00000011
                          DCD      0x00000012
                          DCD      0x00000013
                          DCD      0x00000012
                          DCD      0x00000012
                          DCD      0x00000013
                          DCD      0x00000013
                          DCD      0x00000013
                          DCD      0x00000013
                          DCD      0x00000013
                          DCD      0x00000011
                          DCD      0x00000011
                          DCD      0x00000013
                          DCD      0x00000012
                          DCD      0x00000010
                          DCD      0x00000014
                          DCD      0x00000013
                          DCD      0x00000014
                          DCD      0x00000011
                          DCD      0x0000000f
                          DCD      0x00000011
                          DCD      0x00000014
                          DCD      0x00000014
                          DCD      0x00000012
                          DCD      0x00000015
                          DCD      0x00000014
                          DCD      0x00000012
                          DCD      0x00000015
                          DCD      0x00000014
                          DCD      0x00000014
                          DCD      0x00000014
                          DCD      0x00000014
                          DCD      0x00000015
                          DCD      0x00000015
                          DCD      0x00000014
                          DCD      0x00000013
                          DCD      0x00000015
                          DCD      0x00000015
                          DCD      0x00000013
                          DCD      0x00000015
                          DCD      0x00000015
                          DCD      0x00000014
                          DCD      0x00000014
                          DCD      0x00000014
                  __PRETTY_FUNCTION__
000208  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00020c  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000210  73756c74          DCB      0x73,0x75,0x6c,0x74
000214  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000218  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00021c  6d626564          DCB      0x6d,0x62,0x65,0x64
000220  6465643a          DCB      0x64,0x65,0x64,0x3a
000224  3a457874          DCB      0x3a,0x45,0x78,0x74
000228  72616374          DCB      0x72,0x61,0x63,0x74
00022c  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000230  6f6e656e          DCB      0x6f,0x6e,0x65,0x6e
000234  74735669          DCB      0x74,0x73,0x56,0x69
000238  61436861          DCB      0x61,0x43,0x68,0x61
00023c  72616374          DCB      0x72,0x61,0x63,0x74
000240  65726973          DCB      0x65,0x72,0x69,0x73
000244  74696353          DCB      0x74,0x69,0x63,0x53
000248  63616c65          DCB      0x63,0x61,0x6c,0x65
00024c  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000250  73742041          DCB      0x73,0x74,0x20,0x41
000254  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000258  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00025c  65646465          DCB      0x65,0x64,0x64,0x65
000260  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000264  72726179          DCB      0x72,0x72,0x61,0x79
000268  3c756e73          DCB      0x3c,0x75,0x6e,0x73
00026c  69676e65          DCB      0x69,0x67,0x6e,0x65
000270  64206368          DCB      0x64,0x20,0x63,0x68
000274  61723e20          DCB      0x61,0x72,0x3e,0x20
000278  262c2063          DCB      0x26,0x2c,0x20,0x63
00027c  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000280  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000284  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000288  6d626564          DCB      0x6d,0x62,0x65,0x64
00028c  6465643a          DCB      0x64,0x65,0x64,0x3a
000290  3a466978          DCB      0x3a,0x46,0x69,0x78
000294  65644c65          DCB      0x65,0x64,0x4c,0x65
000298  6e677468          DCB      0x6e,0x67,0x74,0x68
00029c  4c697374          DCB      0x4c,0x69,0x73,0x74
0002a0  3c736967          DCB      0x3c,0x73,0x69,0x67
0002a4  6e656420          DCB      0x6e,0x65,0x64,0x20
0002a8  696e743e          DCB      0x69,0x6e,0x74,0x3e
0002ac  20262c20          DCB      0x20,0x26,0x2c,0x20
0002b0  7369676e          DCB      0x73,0x69,0x67,0x6e
0002b4  65642069          DCB      0x65,0x64,0x20,0x69
0002b8  6e742c20          DCB      0x6e,0x74,0x2c,0x20
0002bc  7369676e          DCB      0x73,0x69,0x67,0x6e
0002c0  65642073          DCB      0x65,0x64,0x20,0x73
0002c4  686f7274          DCB      0x68,0x6f,0x72,0x74
0002c8  2c207369          DCB      0x2c,0x20,0x73,0x69
0002cc  676e6564          DCB      0x67,0x6e,0x65,0x64
0002d0  2073686f          DCB      0x20,0x73,0x68,0x6f
0002d4  72742c20          DCB      0x72,0x74,0x2c,0x20
0002d8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0002dc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0002e0  62656464          DCB      0x62,0x65,0x64,0x64
0002e4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0002e8  436f6e6e          DCB      0x43,0x6f,0x6e,0x6e
0002ec  65637465          DCB      0x65,0x63,0x74,0x65
0002f0  64436f6d          DCB      0x64,0x43,0x6f,0x6d
0002f4  706f6e65          DCB      0x70,0x6f,0x6e,0x65
0002f8  6e747320          DCB      0x6e,0x74,0x73,0x20
0002fc  262c2041          DCB      0x26,0x2c,0x20,0x41
000300  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000304  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000308  65646465          DCB      0x65,0x64,0x64,0x65
00030c  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000310  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000314  79537461          DCB      0x79,0x53,0x74,0x61
000318  636b2c20          DCB      0x63,0x6b,0x2c,0x20
00031c  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000320  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000324  62656464          DCB      0x62,0x65,0x64,0x64
000328  65643a3a          DCB      0x65,0x64,0x3a,0x3a
00032c  4d656d6f          DCB      0x4d,0x65,0x6d,0x6f
000330  72795374          DCB      0x72,0x79,0x53,0x74
000334  61636b2c          DCB      0x61,0x63,0x6b,0x2c
000338  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00033c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000340  6d626564          DCB      0x6d,0x62,0x65,0x64
000344  6465643a          DCB      0x64,0x65,0x64,0x3a
000348  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00034c  6f727953          DCB      0x6f,0x72,0x79,0x53
000350  7461636b          DCB      0x74,0x61,0x63,0x6b
000354  29000000          DCB      0x29,0x00,0x00,0x00
000358  4c696e65          DCB      0x4c,0x69,0x6e,0x65
00035c  61725365          DCB      0x61,0x72,0x53,0x65
000360  7175656e          DCB      0x71,0x75,0x65,0x6e
000364  63653c54          DCB      0x63,0x65,0x3c,0x54
000368  7970653e          DCB      0x79,0x70,0x65,0x3e
00036c  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000370  6d707574          DCB      0x6d,0x70,0x75,0x74
000374  6553697a          DCB      0x65,0x53,0x69,0x7a
000378  65000000          DCB      0x65,0x00,0x00,0x00
00037c  73697a65          DCB      0x73,0x69,0x7a,0x65
000380  20657374          DCB      0x20,0x65,0x73,0x74
000384  696d6174          DCB      0x69,0x6d,0x61,0x74
000388  696f6e20          DCB      0x69,0x6f,0x6e,0x20
00038c  6661696c          DCB      0x66,0x61,0x69,0x6c
000390  65640000          DCB      0x65,0x64,0x00,0x00
000394  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000398  6f726574          DCB      0x6f,0x72,0x65,0x74
00039c  6563685c          DCB      0x65,0x63,0x68,0x5c
0003a0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0003a4  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0003a8  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0003ac  64655c61          DCB      0x64,0x65,0x5c,0x61
0003b0  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0003b4  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0003b8  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0003bc  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0003c0  2f736571          DCB      0x2f,0x73,0x65,0x71
0003c4  75656e63          DCB      0x75,0x65,0x6e,0x63
0003c8  65732e68          DCB      0x65,0x73,0x2e,0x68
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  41727261          DCB      0x41,0x72,0x72,0x61
0003d4  793c5479          DCB      0x79,0x3c,0x54,0x79
0003d8  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0003dc  3a676574          DCB      0x3a,0x67,0x65,0x74
0003e0  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0003e4  65000000          DCB      0x65,0x00,0x00,0x00
0003e8  4e656761          DCB      0x4e,0x65,0x67,0x61
0003ec  74697665          DCB      0x74,0x69,0x76,0x65
0003f0  2064696d          DCB      0x20,0x64,0x69,0x6d
0003f4  656e7369          DCB      0x65,0x6e,0x73,0x69
0003f8  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
0003fc  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000400  6f726574          DCB      0x6f,0x72,0x65,0x74
000404  6563685c          DCB      0x65,0x63,0x68,0x5c
000408  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
00040c  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000410  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000414  64655c61          DCB      0x64,0x65,0x5c,0x61
000418  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
00041c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000420  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000424  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000428  2f617272          DCB      0x2f,0x61,0x72,0x72
00042c  61793264          DCB      0x61,0x79,0x32,0x64
000430  2e680000          DCB      0x2e,0x68,0x00,0x00
000434  41727261          DCB      0x41,0x72,0x72,0x61
000438  793c5479          DCB      0x79,0x3c,0x54,0x79
00043c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000440  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000444  70757465          DCB      0x70,0x75,0x74,0x65
000448  52657175          DCB      0x52,0x65,0x71,0x75
00044c  69726564          DCB      0x69,0x72,0x65,0x64
000450  53747269          DCB      0x53,0x74,0x72,0x69
000454  64650000          DCB      0x64,0x65,0x00,0x00
000458  496e7661          DCB      0x49,0x6e,0x76,0x61
00045c  6c696420          DCB      0x6c,0x69,0x64,0x20
000460  73697a65          DCB      0x73,0x69,0x7a,0x65
000464  00                DCB      0x00

                          AREA ||t._ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIhEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<unsigned char>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L39.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L39.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L39.384|
000044  a25c              ADR      r2,|L39.440|
000046  a160              ADR      r1,|L39.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L39.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  300f              ADDS     r0,r0,#0xf
000064  f020050f          BIC      r5,r0,#0xf
000068  a804              ADD      r0,sp,#0x10
00006a  e9cd0902          STRD     r0,r9,[sp,#8]
00006e  2d00              CMP      r5,#0
000070  dc0a              BGT      |L39.136|
000072  f240310b          MOV      r1,#0x30b
000076  4859              LDR      r0,|L39.476|
000078  e9cd0100          STRD     r0,r1,[sp,#0]
00007c  a340              ADR      r3,|L39.384|
00007e  a24e              ADR      r2,|L39.440|
000080  a157              ADR      r1,|L39.480|
000082  2005              MOVS     r0,#5
000084  f7fffffe          BL       _Anki_Log
                  |L39.136|
000088  4638              MOV      r0,r7
00008a  2f01              CMP      r7,#1
00008c  bfd8              IT       LE
00008e  2001              MOVLE    r0,#1
000090  60a5              STR      r5,[r4,#8]
000092  4345              MULS     r5,r0,r5
000094  a803              ADD      r0,sp,#0xc
000096  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009a  4602              MOV      r2,r0
00009c  4629              MOV      r1,r5
00009e  4640              MOV      r0,r8
0000a0  9b02              LDR      r3,[sp,#8]
0000a2  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a6  f8cd900c          STR      r9,[sp,#0xc]
0000aa  f8dd8010          LDR      r8,[sp,#0x10]
0000ae  f8df915c          LDR      r9,|L39.524|
0000b2  0005              MOVS     r5,r0
0000b4  d00e              BEQ      |L39.212|
0000b6  f1b80f10          CMP      r8,#0x10
0000ba  d21e              BCS      |L39.250|
0000bc  f2403023          MOV      r0,#0x323
0000c0  e9cd9000          STRD     r9,r0,[sp,#0]
0000c4  a32e              ADR      r3,|L39.384|
0000c6  a252              ADR      r2,|L39.528|
0000c8  a156              ADR      r1,|L39.548|
0000ca  2005              MOVS     r0,#5
0000cc  f7fffffe          BL       _Anki_Log
0000d0  f000b84f          B.W      |L39.370|
                  |L39.212|
0000d4  f240301e          MOV      r0,#0x31e
0000d8  e9cd9000          STRD     r9,r0,[sp,#0]
0000dc  a328              ADR      r3,|L39.384|
0000de  a259              ADR      r2,|L39.580|
0000e0  a15f              ADR      r1,|L39.608|
0000e2  2005              MOVS     r0,#5
0000e4  f7fffffe          BL       _Anki_Log
0000e8  f8c4b000          STR      r11,[r4,#0]
0000ec  f8c4b004          STR      r11,[r4,#4]
0000f0  f8c4b008          STR      r11,[r4,#8]
0000f4  f8c4a010          STR      r10,[r4,#0x10]
0000f8  e03b              B        |L39.370|
                  |L39.250|
0000fa  a803              ADD      r0,sp,#0xc
0000fc  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000100  2800              CMP      r0,#0
000102  d00a              BEQ      |L39.282|
000104  f2403026          MOV      r0,#0x326
000108  e9cd9000          STRD     r9,r0,[sp,#0]
00010c  a31c              ADR      r3,|L39.384|
00010e  a25a              ADR      r2,|L39.632|
000110  a144              ADR      r1,|L39.548|
000112  2005              MOVS     r0,#5
000114  f7fffffe          BL       _Anki_Log
000118  e02b              B        |L39.370|
                  |L39.282|
00011a  9903              LDR      r1,[sp,#0xc]
00011c  e9c41503          STRD     r1,r5,[r4,#0xc]
000120  f105000f          ADD      r0,r5,#0xf
000124  f020000f          BIC      r0,r0,#0xf
000128  e9c47600          STRD     r7,r6,[r4,#0]
00012c  1b40              SUBS     r0,r0,r5
00012e  2e01              CMP      r6,#1
000130  bfd8              IT       LE
000132  2601              MOVLE    r6,#1
000134  f106010f          ADD      r1,r6,#0xf
000138  f021010f          BIC      r1,r1,#0xf
00013c  fb010107          MLA      r1,r1,r7,r0
000140  4541              CMP      r1,r8
000142  bfdc              ITT      LE
000144  1829              ADDLE    r1,r5,r0
000146  6121              STRLE    r1,[r4,#0x10]
000148  dd13              BLE      |L39.370|
00014a  f2403035          MOV      r0,#0x335
00014e  f8cd9000          STR      r9,[sp,#0]
000152  e9cd0101          STRD     r0,r1,[sp,#4]
000156  a30a              ADR      r3,|L39.384|
000158  a251              ADR      r2,|L39.672|
00015a  a141              ADR      r1,|L39.608|
00015c  2005              MOVS     r0,#5
00015e  f7fffffe          BL       _Anki_Log
000162  f8c4b000          STR      r11,[r4,#0]
000166  f8c4b004          STR      r11,[r4,#4]
00016a  f8c4b008          STR      r11,[r4,#8]
00016e  f8c4a010          STR      r10,[r4,#0x10]
                  |L39.370|
000172  b005              ADD      sp,sp,#0x14
000174  4620              MOV      r0,r4
000176  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

00017a  0000              DCW      0x0000
                  |L39.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L39.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L39.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L39.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L39.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L39.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L39.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L39.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L39.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L39.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L39.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L39.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L39.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.40||, COMGROUP=_ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIhEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE||, COMGROUP=_ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIhEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIhEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow<unsigned char>(const Anki::Embedded::Rectangle<short>&, int, int, int, Anki::Embedded::Array<T1>&) const
                  |symbol_number.73|
;;;21       {
;;;22         template<typename OutType> NO_INLINE Result ScrollingIntegralImage_u8_s32::FilterRow(const Rectangle<s16> &filter, const s32 imageRow, const s32 outputMultiply, const s32 outputRightShift, Array<OutType> &output) const
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;23         {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
;;;24           AnkiAssert(AreValid(*this, output));
;;;25     
;;;26           // TODO: support these
;;;27           AnkiAssert(filter.left <= 0);
;;;28           AnkiAssert(filter.top <= 0);
;;;29           AnkiAssert(filter.right >= 0);
;;;30           AnkiAssert(filter.bottom >= 0);
;;;31     
;;;32           const bool insufficientBorderPixels_left = (-filter.left+1) > this->numBorderPixels;
000008  f9b1c000          LDRSH    r12,[r1,#0]
00000c  460d              MOV      r5,r1                 ;23
00000e  6a00              LDR      r0,[r0,#0x20]
000010  f1cc0101          RSB      r1,r12,#1
000014  9f13              LDR      r7,[sp,#0x4c]
000016  4691              MOV      r9,r2                 ;23
000018  4281              CMP      r1,r0
00001a  bfcc              ITE      GT
00001c  2301              MOVGT    r3,#1
00001e  2300              MOVLE    r3,#0
;;;33           const bool insufficientBorderPixels_right = (filter.right) > this->numBorderPixels;
000020  f9b52002          LDRSH    r2,[r5,#2]
000024  4282              CMP      r2,r0
000026  bfcc              ITE      GT
000028  2101              MOVGT    r1,#1
00002a  2100              MOVLE    r1,#0
;;;34     
;;;35           // These min and max coordinates are in the original image's coordinate frame
;;;36           const s32 minX = insufficientBorderPixels_left ? -(this->numBorderPixels + filter.left - 1) : 0;
00002c  2b00              CMP      r3,#0
00002e  bf1a              ITTE     NE
000030  eb00030c          ADDNE    r3,r0,r12
000034  f1c30801          RSBNE    r8,r3,#1
000038  f04f0800          MOVEQ    r8,#0
00003c  b121              CBZ      r1,|L46.72|
;;;37           const s32 maxX = insufficientBorderPixels_right ? (this->get_size(1) - 1 - filter.right + this->numBorderPixels) : (this->get_imageWidth()-1);
00003e  6861              LDR      r1,[r4,#4]
000040  1a89              SUBS     r1,r1,r2
000042  1e49              SUBS     r1,r1,#1
000044  180e              ADDS     r6,r1,r0
000046  e003              B        |L46.80|
                  |L46.72|
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3214get_imageWidthEv ; Anki::Embedded::ScrollingIntegralImage_u8_s32::get_imageWidth() const
00004e  1e46              SUBS     r6,r0,#1
                  |L46.80|
;;;38     
;;;39           // Get the four pointers to the corners of the filter in the integral image.
;;;40           // The x offset is added at the end, because it might be invalid for x==0.
;;;41           // The -1 terms are because the rectangular sums should be inclusive.
;;;42           const s32 topOffset = imageRow - this->rowOffset + filter.top - 1 ;
000050  69e0              LDR      r0,[r4,#0x1c]
000052  f9b51004          LDRSH    r1,[r5,#4]
000056  eba90000          SUB      r0,r9,r0
00005a  1e42              SUBS     r2,r0,#1
00005c  eb010902          ADD      r9,r1,r2
;;;43           const s32 bottomOffset = imageRow - this->rowOffset + filter.bottom;
000060  f9b51006          LDRSH    r1,[r5,#6]
;;;44           const s32 leftOffset = filter.left - 1 + this->numBorderPixels;
;;;45           const s32 rightOffset = filter.right + this->numBorderPixels;
000064  f9b52002          LDRSH    r2,[r5,#2]
000068  eb000c01          ADD      r12,r0,r1             ;43
00006c  f9b50000          LDRSH    r0,[r5,#0]            ;44
000070  6a21              LDR      r1,[r4,#0x20]         ;44
000072  68a3              LDR      r3,[r4,#8]            ;44
000074  4408              ADD      r0,r0,r1              ;44
000076  4411              ADD      r1,r1,r2
000078  6922              LDR      r2,[r4,#0x10]
00007a  1e40              SUBS     r0,r0,#1              ;44
00007c  fb092503          MLA      r5,r9,r3,r2           ;44
000080  fb0c2203          MLA      r2,r12,r3,r2          ;44
;;;46     
;;;47           const s32 * restrict pIntegralImage_00 = this->Pointer(topOffset, 0) + leftOffset;
000084  eb050980          ADD      r9,r5,r0,LSL #2
;;;48           const s32 * restrict pIntegralImage_01 = this->Pointer(topOffset, 0) + rightOffset;
;;;49           const s32 * restrict pIntegralImage_10 = this->Pointer(bottomOffset, 0) + leftOffset;
000088  eb020a80          ADD      r10,r2,r0,LSL #2
;;;50           const s32 * restrict pIntegralImage_11 = this->Pointer(bottomOffset, 0) + rightOffset;
00008c  eb020b81          ADD      r11,r2,r1,LSL #2
000090  eb050581          ADD      r5,r5,r1,LSL #2       ;48
;;;51     
;;;52           OutType * restrict pOutput = output.Pointer(0,0);
000094  2000              MOVS     r0,#0
000096  68ba              LDR      r2,[r7,#8]
000098  6939              LDR      r1,[r7,#0x10]
;;;53     
;;;54           if(minX > 0)
00009a  f1b80f00          CMP      r8,#0
00009e  fb001702          MLA      r7,r0,r2,r1
0000a2  dd03              BLE      |L46.172|
;;;55             memset(pOutput, 0, minX*sizeof(OutType));
0000a4  4641              MOV      r1,r8
0000a6  4638              MOV      r0,r7
0000a8  f7fffffe          BL       __aeabi_memclr
                  |L46.172|
;;;56     
;;;57           ScrollingIntegralImage_u8_s32::FilterRow_innerLoop(
0000ac  e9cd9500          STRD     r9,r5,[sp,#0]
0000b0  f8cda008          STR      r10,[sp,#8]
0000b4  e9cdb703          STRD     r11,r7,[sp,#0xc]
0000b8  4631              MOV      r1,r6
0000ba  4640              MOV      r0,r8
0000bc  9b12              LDR      r3,[sp,#0x48]
0000be  9a08              LDR      r2,[sp,#0x20]
0000c0  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3219FilterRow_innerLoopIhEEviiiiPKiS4_S4_S4_PT_ ; Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow_innerLoop<unsigned char>(int, int, int, int, const int*, const int*, const int*, const int*, T1*)
;;;58             minX, maxX,
;;;59             outputMultiply, outputRightShift,
;;;60             pIntegralImage_00, pIntegralImage_01, pIntegralImage_10, pIntegralImage_11,
;;;61             pOutput);
;;;62     
;;;63           if((maxX+1) < imageWidth)
0000c4  6960              LDR      r0,[r4,#0x14]
0000c6  1c71              ADDS     r1,r6,#1
0000c8  4288              CMP      r0,r1
0000ca  dd05              BLE      |L46.216|
;;;64             memset(pOutput+maxX+1, 0, (imageWidth - (maxX+1))*sizeof(OutType));
0000cc  1b80              SUBS     r0,r0,r6
0000ce  1e41              SUBS     r1,r0,#1
0000d0  19b8              ADDS     r0,r7,r6
0000d2  1c40              ADDS     r0,r0,#1
0000d4  f7fffffe          BL       __aeabi_memclr
                  |L46.216|
;;;65     
;;;66           return RESULT_OK;
;;;67         }
0000d8  b009              ADD      sp,sp,#0x24
0000da  2000              MOVS     r0,#0                 ;66
0000dc  e8bd8ff0          POP      {r4-r11,pc}
;;;68     
                          ENDP


                          AREA ||area_number.47||, COMGROUP=_ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIhEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE, LINKORDER=||t._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIhEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIhEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d019              BEQ      |L53.68|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L53.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L53.30|
                  |L53.26|
00001a  462b              MOV      r3,r5
00001c  e012              B        |L53.68|
                  |L53.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0c              BGE      |L53.68|
00002a  2185              MOVS     r1,#0x85
00002c  4807              LDR      r0,|L53.76|
00002e  4b08              LDR      r3,|L53.80|
000030  e9cd0100          STRD     r0,r1,[sp,#0]
000034  f1a30218          SUB      r2,r3,#0x18
000038  f1a20124          SUB      r1,r2,#0x24
00003c  2005              MOVS     r0,#5
00003e  f7fffffe          BL       _Anki_Log
000042  462b              MOV      r3,r5
                  |L53.68|
000044  6023              STR      r3,[r4,#0]
000046  b003              ADD      sp,sp,#0xc
000048  4620              MOV      r0,r4
00004a  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L53.76|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L53.80|
                          DCD      ||.constdata||+0x394

                          AREA ||area_number.54||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L60.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L60.56|
00000e  4b0b              LDR      r3,|L60.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L60.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L60.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L60.60|
                          DCD      ||.constdata||+0x3fc

                          AREA ||area_number.61||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.61||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS1_IhEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L67.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L67.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L67.392|
000044  a25e              ADR      r2,|L67.448|
000046  a162              ADR      r1,|L67.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L67.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  0080              LSLS     r0,r0,#2
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L67.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L67.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L67.392|
000084  a24e              ADR      r2,|L67.448|
000086  a158              ADR      r1,|L67.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L67.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L67.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L67.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L67.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L67.392|
0000cc  a252              ADR      r2,|L67.536|
0000ce  a157              ADR      r1,|L67.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L67.380|
                  |L67.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L67.392|
0000e4  a259              ADR      r2,|L67.588|
0000e6  a160              ADR      r1,|L67.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L67.380|
                  |L67.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L67.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L67.392|
000114  a25a              ADR      r2,|L67.640|
000116  a145              ADR      r1,|L67.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L67.380|
                  |L67.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060186          ADD      r1,r6,r6,LSL #2
00013e  0089              LSLS     r1,r1,#2
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L67.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L67.392|
000162  a251              ADR      r2,|L67.680|
000164  a140              ADR      r1,|L67.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L67.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L67.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L67.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L67.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L67.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L67.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L67.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L67.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L67.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L67.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L67.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L67.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L67.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L67.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.68||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.68||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L74.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L74.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.75||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.75||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642063          DCB      0x65,0x64,0x20,0x63
000090  6861725d          DCB      0x68,0x61,0x72,0x5d
000094  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  20636861          DCB      0x20,0x63,0x68,0x61
0000c4  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  63686172          DCB      0x63,0x68,0x61,0x72
0000a0  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000098  7261793c          DCB      0x72,0x61,0x79,0x3c
00009c  756e7369          DCB      0x75,0x6e,0x73,0x69
0000a0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a4  20636861          DCB      0x20,0x63,0x68,0x61
0000a8  723e5d00          DCB      0x72,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  41727261          DCB      0x41,0x72,0x72,0x61
0000cc  793c756e          DCB      0x79,0x3c,0x75,0x6e
0000d0  7369676e          DCB      0x73,0x69,0x67,0x6e
0000d4  65642063          DCB      0x65,0x64,0x20,0x63
0000d8  6861723e          DCB      0x68,0x61,0x72,0x3e
0000dc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000a4  72726179          DCB      0x72,0x72,0x61,0x79
0000a8  3c756e73          DCB      0x3c,0x75,0x6e,0x73
0000ac  69676e65          DCB      0x69,0x67,0x6e,0x65
0000b0  64206368          DCB      0x64,0x20,0x63,0x68
0000b4  61723e5d          DCB      0x61,0x72,0x3e,0x5d
0000b8  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\computeCharacteristicScale.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___30_computeCharacteristicScale_cpp_2886214b___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___30_computeCharacteristicScale_cpp_2886214b___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___30_computeCharacteristicScale_cpp_2886214b___Z7__REVSHi|
#line 144
|__asm___30_computeCharacteristicScale_cpp_2886214b___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
