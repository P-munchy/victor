; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\computequadrilaterals.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\computequadrilaterals.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\computequadrilaterals.crf ..\coretech\vision\robot\src\computeQuadrilaterals.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded25IsQuadrilateralReasonableERKNS0_13QuadrilateralIsEEiiiiiRb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded25IsQuadrilateralReasonableERKNS0_13QuadrilateralIsEEiiiiiRb PROC ; Anki::Embedded::IsQuadrilateralReasonable(const Anki::Embedded::Quadrilateral<short>&, int, int, int, int, int, bool&)
;;;30     
;;;31         bool IsQuadrilateralReasonable(const Quadrilateral<s16> &quad, const s32 minQuadArea, const s32 quadSymmetryThreshold, const s32 minDistanceFromImageEdge, const s32 imageHeight, const s32 imageWidth, bool &areCornersDisordered)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;32         {
000004  4616              MOV      r6,r2
000006  460a              MOV      r2,r1
000008  4607              MOV      r7,r0
00000a  f1000b04          ADD      r11,r0,#4
;;;33           const s32 numFractionalBits = 8;
;;;34     
;;;35           // Verify corners are in a clockwise direction, so we don't get an accidental projective
;;;36           // mirroring when we do the tranformation below to extract the image. Can look whether the z
;;;37           // direction of cross product of the two vectors forming the quadrilateral is positive or
;;;38           // negative.
;;;39     
;;;40           // cross product of vectors anchored at corner 0
;;;41           s32 detA = Determinant2x2(
00000e  f9b01004          LDRSH    r1,[r0,#4]
000012  f9b00000          LDRSH    r0,[r0,#0]
000016  461d              MOV      r5,r3                 ;32
000018  1a0b              SUBS     r3,r1,r0
00001a  f9b74008          LDRSH    r4,[r7,#8]
00001e  f9bbc002          LDRSH    r12,[r11,#2]
000022  f9b71002          LDRSH    r1,[r7,#2]
000026  1a20              SUBS     r0,r4,r0
000028  f9b7400a          LDRSH    r4,[r7,#0xa]
00002c  ebac0c01          SUB      r12,r12,r1
000030  1a61              SUBS     r1,r4,r1
000032  b08b              SUB      sp,sp,#0x2c           ;32
000034  4359              MULS     r1,r3,r1              ;32
000036  fb0c1410          MLS      r4,r12,r0,r1          ;32
;;;42             quad[1].x-quad[0].x, quad[1].y-quad[0].y,
;;;43             quad[2].x-quad[0].x, quad[2].y-quad[0].y);
;;;44     
;;;45           if(ABS(detA) < minQuadArea)
00003a  f8dd9058          LDR      r9,[sp,#0x58]
00003e  f1070808          ADD      r8,r7,#8
000042  2c00              CMP      r4,#0
000044  bfac              ITE      GE
000046  4620              MOVGE    r0,r4
000048  4260              RSBLT    r0,r4,#0
00004a  4290              CMP      r0,r2
00004c  f2c080c0          BLT.W    |L1.464|
000050  2304              MOVS     r3,#4                 ;32
;;;46             return false;
;;;47     
;;;48           // Swap the corners, as in the Matlab script
;;;49           Quadrilateral<s16> quadSwapped;
000052  a802              ADD      r0,sp,#8
000054  461a              MOV      r2,r3
000056  4964              LDR      r1,|L1.488|
000058  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00005c  4602              MOV      r2,r0
00005e  2000              MOVS     r0,#0
000060  4603              MOV      r3,r0
                  |L1.98|
000062  eb020180          ADD      r1,r2,r0,LSL #2
000066  f8ad3000          STRH     r3,[sp,#0]
00006a  f8ad3002          STRH     r3,[sp,#2]
00006e  800b              STRH     r3,[r1,#0]
000070  f8bdc002          LDRH     r12,[sp,#2]
000074  1c40              ADDS     r0,r0,#1
000076  f8a1c002          STRH     r12,[r1,#2]
00007a  2804              CMP      r0,#4
00007c  dbf1              BLT      |L1.98|
;;;50     
;;;51           if(detA > 0) {
00007e  2c00              CMP      r4,#0
;;;52             // corners([2 3],:) = corners([3 2],:);
;;;53             quadSwapped = Quadrilateral<s16>(quad[0], quad[2], quad[1], quad[3]);
;;;54             detA = -detA;
;;;55             areCornersDisordered = true;
;;;56           } else {
;;;57             quadSwapped = quad;
000080  bfdc              ITT      LE
000082  f10d0c08          ADDLE    r12,sp,#8
000086  2200              MOVLE    r2,#0
000088  dd1d              BLE      |L1.198|
00008a  f107000c          ADD      r0,r7,#0xc            ;51
00008e  9000              STR      r0,[sp,#0]            ;53
000090  f10d0a08          ADD      r10,sp,#8             ;53
000094  465b              MOV      r3,r11                ;53
000096  4642              MOV      r2,r8                 ;53
000098  4639              MOV      r1,r7                 ;53
00009a  a806              ADD      r0,sp,#0x18           ;53
00009c  f7fffffe          BL       _ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_ ; Anki::Embedded::Quadrilateral<short>::Quadrilateral(const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&)
0000a0  2100              MOVS     r1,#0                 ;53
                  |L1.162|
0000a2  eb000281          ADD      r2,r0,r1,LSL #2       ;53
0000a6  eb0a0381          ADD      r3,r10,r1,LSL #2      ;53
0000aa  f8b2c000          LDRH     r12,[r2,#0]           ;53
0000ae  f8a3c000          STRH     r12,[r3,#0]           ;53
0000b2  8852              LDRH     r2,[r2,#2]            ;53
0000b4  1c49              ADDS     r1,r1,#1              ;53
0000b6  805a              STRH     r2,[r3,#2]            ;53
0000b8  2904              CMP      r1,#4                 ;53
0000ba  dbf2              BLT      |L1.162|
0000bc  4264              RSBS     r4,r4,#0              ;54
0000be  2001              MOVS     r0,#1                 ;55
0000c0  f8890000          STRB     r0,[r9,#0]            ;55
0000c4  e00e              B        |L1.228|
                  |L1.198|
0000c6  eb070082          ADD      r0,r7,r2,LSL #2       ;56
0000ca  eb0c0182          ADD      r1,r12,r2,LSL #2      ;56
0000ce  f8b08000          LDRH     r8,[r0,#0]            ;56
0000d2  f8a18000          STRH     r8,[r1,#0]            ;56
0000d6  8840              LDRH     r0,[r0,#2]            ;56
0000d8  1c52              ADDS     r2,r2,#1              ;56
0000da  8048              STRH     r0,[r1,#2]            ;56
0000dc  2a04              CMP      r2,#4                 ;56
0000de  dbf2              BLT      |L1.198|
;;;58             areCornersDisordered = false;
0000e0  f8893000          STRB     r3,[r9,#0]
                  |L1.228|
;;;59           }
;;;60     
;;;61           // One last check: make sure we've got roughly a symmetric quadrilateral (a parallelogram?) by
;;;62           // seeing if the area computed using the cross product (via determinates) referenced to
;;;63           // opposite corners are similar (and the signs are in agreement, so that two of the sides
;;;64           // don't cross each other in the middle or form some sort of weird concave
;;;65           // shape) .
;;;66     
;;;67           // cross product of vectors anchored at corner 3
;;;68           s32 detB = Determinant2x2(
0000e4  f9bd1014          LDRSH    r1,[sp,#0x14]
0000e8  f9bd0016          LDRSH    r0,[sp,#0x16]
0000ec  f9bd8010          LDRSH    r8,[sp,#0x10]
0000f0  f9bd300e          LDRSH    r3,[sp,#0xe]
0000f4  eba80201          SUB      r2,r8,r1
0000f8  f9bdc00c          LDRSH    r12,[sp,#0xc]
0000fc  eba30b00          SUB      r11,r3,r0
000100  f9bd7012          LDRSH    r7,[sp,#0x12]
000104  fb02f20b          MUL      r2,r2,r11
000108  ebac0a01          SUB      r10,r12,r1
00010c  eba70900          SUB      r9,r7,r0
000110  fb09221a          MLS      r2,r9,r10,r2
;;;69             quadSwapped[2].x-quadSwapped[3].x, quadSwapped[2].y-quadSwapped[3].y,
;;;70             quadSwapped[1].x-quadSwapped[3].x, quadSwapped[1].y-quadSwapped[3].y);
;;;71     
;;;72           // cross product of vectors anchored at corner 2
;;;73           s32 detC = Determinant2x2(
000114  f9bde008          LDRSH    lr,[sp,#8]
000118  eba10b08          SUB      r11,r1,r8
00011c  ebae0908          SUB      r9,lr,r8
000120  eba00a07          SUB      r10,r0,r7
000124  f9bd800a          LDRSH    r8,[sp,#0xa]
;;;74             quadSwapped[3].x-quadSwapped[2].x, quadSwapped[3].y-quadSwapped[2].y,
;;;75             quadSwapped[0].x-quadSwapped[2].x, quadSwapped[0].y-quadSwapped[2].y);
;;;76     
;;;77           // cross product of vectors anchored at corner 1
;;;78           s32 detD = Determinant2x2(
000128  1ac0              SUBS     r0,r0,r3
00012a  eba80707          SUB      r7,r8,r7              ;73
00012e  fb0bf707          MUL      r7,r11,r7             ;73
000132  fb0a7719          MLS      r7,r10,r9,r7          ;73
000136  ebae090c          SUB      r9,lr,r12
00013a  eba80803          SUB      r8,r8,r3
00013e  eba1010c          SUB      r1,r1,r12
000142  fb09f000          MUL      r0,r9,r0
000146  fb080011          MLS      r0,r8,r1,r0
;;;79             quadSwapped[0].x-quadSwapped[1].x, quadSwapped[0].y-quadSwapped[1].y,
;;;80             quadSwapped[3].x-quadSwapped[1].x, quadSwapped[3].y-quadSwapped[1].y);
;;;81     
;;;82           if( !(SIGN(detA) == SIGN(detB) && SIGN(detC) == SIGN(detD)) )
00014a  17e1              ASRS     r1,r4,#31
00014c  ebb17fe2          CMP      r1,r2,ASR #31
000150  bf04              ITT      EQ
000152  17f9              ASREQ    r1,r7,#31
000154  ebb17fe0          CMPEQ    r1,r0,ASR #31
000158  d13a              BNE      |L1.464|
;;;83             return false;
;;;84     
;;;85           detA = abs(detA);
00015a  2c00              CMP      r4,#0
00015c  bfb8              IT       LT
00015e  4264              RSBLT    r4,r4,#0
;;;86           detB = abs(detB);
000160  2a00              CMP      r2,#0
000162  bfb8              IT       LT
000164  4252              RSBLT    r2,r2,#0
;;;87           detC = abs(detC);
000166  2f00              CMP      r7,#0
000168  bfb8              IT       LT
00016a  427f              RSBLT    r7,r7,#0
;;;88           detD = abs(detD);
00016c  2800              CMP      r0,#0
00016e  bfb8              IT       LT
000170  4240              RSBLT    r0,r0,#0
;;;89     
;;;90           const s32 maxDetAB = MAX(detA,detB);
000172  4294              CMP      r4,r2
000174  bfcc              ITE      GT
000176  4621              MOVGT    r1,r4
000178  4611              MOVLE    r1,r2
;;;91           const s32 minDetAB = MIN(detA,detB);
00017a  bfb8              IT       LT
00017c  4622              MOVLT    r2,r4
;;;92           const s32 maxDetCD = MAX(detC,detD);
00017e  4287              CMP      r7,r0
000180  bfcc              ITE      GT
000182  463b              MOVGT    r3,r7
000184  4603              MOVLE    r3,r0
;;;93           const s32 minDetCD = MIN(detC,detD);
000186  bfb8              IT       LT
000188  4638              MOVLT    r0,r7
;;;94     
;;;95           // Is either quad symmetry check above the threshold?
;;;96           const s32 ratio1Value_AB = maxDetAB << numFractionalBits;
00018a  ea4f2101          LSL      r1,r1,#8
;;;97           const s32 ratio2Value_AB = minDetAB*quadSymmetryThreshold;
00018e  fb02f206          MUL      r2,r2,r6
;;;98           const s32 ratio1Value_CD = maxDetCD << numFractionalBits;
000192  ea4f2303          LSL      r3,r3,#8
;;;99           const s32 ratio2Value_CD = minDetCD*quadSymmetryThreshold;
000196  fb00f006          MUL      r0,r0,r6
;;;100          if(ratio1Value_AB >= ratio2Value_AB && ratio1Value_CD >= ratio2Value_CD)
00019a  4291              CMP      r1,r2
00019c  bfa8              IT       GE
00019e  4283              CMPGE    r3,r0
0001a0  da16              BGE      |L1.464|
;;;101            return false;
;;;102    
;;;103          // Check if any of the corners are close to the edge of the image
;;;104          for(s32 i=0; i<4; i++) {
;;;105            if(quadSwapped[i].x < minDistanceFromImageEdge || quadSwapped[i].y < minDistanceFromImageEdge ||
;;;106              quadSwapped[i].x >= (imageWidth - minDistanceFromImageEdge - 1) || quadSwapped[i].y >= (imageHeight - minDistanceFromImageEdge - 1) ) {
0001a2  9915              LDR      r1,[sp,#0x54]
0001a4  2000              MOVS     r0,#0                 ;104
0001a6  1b49              SUBS     r1,r1,r5
0001a8  f1a10c01          SUB      r12,r1,#1
0001ac  9914              LDR      r1,[sp,#0x50]
0001ae  1b49              SUBS     r1,r1,r5
0001b0  1e4b              SUBS     r3,r1,#1
                  |L1.434|
0001b2  a902              ADD      r1,sp,#8              ;105
0001b4  eb010180          ADD      r1,r1,r0,LSL #2       ;105
0001b8  f9b12000          LDRSH    r2,[r1,#0]            ;105
0001bc  42aa              CMP      r2,r5                 ;105
0001be  bfa4              ITT      GE                    ;105
0001c0  f9b11002          LDRSHGE  r1,[r1,#2]            ;105
0001c4  42a9              CMPGE    r1,r5                 ;105
0001c6  db03              BLT      |L1.464|
0001c8  4594              CMP      r12,r2
0001ca  bfc8              IT       GT
0001cc  428b              CMPGT    r3,r1
0001ce  dc03              BGT      |L1.472|
                  |L1.464|
;;;107                return false;
;;;108            }
;;;109          }
;;;110    
;;;111          return true;
;;;112        }
0001d0  b00b              ADD      sp,sp,#0x2c
0001d2  2000              MOVS     r0,#0                 ;107
0001d4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.472|
0001d8  1c40              ADDS     r0,r0,#1              ;104
0001da  2804              CMP      r0,#4                 ;104
0001dc  dbe9              BLT      |L1.434|
0001de  b00b              ADD      sp,sp,#0x2c
0001e0  2001              MOVS     r0,#1                 ;111
0001e2  e8bd8ff0          POP      {r4-r11,pc}
;;;113    
                          ENDP

0001e6  0000              DCW      0x0000
                  |L1.488|
                          DCD      _ZN4Anki8Embedded5PointIsEC1Ev ; Anki::Embedded::Point<short>::Point()

                          AREA ||i._ZN4Anki8Embedded44ComputeQuadrilateralsFromConnectedComponentsERKNS0_19ConnectedComponentsEiiiiiRNS0_15FixedLengthListINS0_13QuadrilateralIsEEEENS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded44ComputeQuadrilateralsFromConnectedComponentsERKNS0_19ConnectedComponentsEiiiiiRNS0_15FixedLengthListINS0_13QuadrilateralIsEEEENS0_11MemoryStackE PROC ; Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<short>>&, Anki::Embedded::MemoryStack)
;;;121        // Required ??? bytes of scratch
;;;122        Result ComputeQuadrilateralsFromConnectedComponents(const ConnectedComponents &components, const s32 minQuadArea, const s32 quadSymmetryThreshold, const s32 minDistanceFromImageEdge, const s32 imageHeight, const s32 imageWidth, FixedLengthList<Quadrilateral<s16> > &extractedQuads, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;123        {
000004  b0bb              SUB      sp,sp,#0xec
;;;124          const s32 MAX_BOUNDARY_LENTH = 10000; // Probably significantly longer than would ever be needed
;;;125    
;;;126          Result lastResult;
;;;127    
;;;128          AnkiConditionalErrorAndReturnValue(components.IsValid(),
000006  f8dd8128          LDR      r8,[sp,#0x128]
00000a  983b              LDR      r0,[sp,#0xec]
00000c  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents7IsValidEv ; Anki::Embedded::ConnectedComponents::IsValid() const
000010  4c8b              LDR      r4,|L2.576|
000012  2800              CMP      r0,#0
000014  d059              BEQ      |L2.202|
;;;129            RESULT_FAIL_INVALID_OBJECT, "ComputeQuadrilateralsFromConnectedComponents", "components is not valid");
;;;130    
;;;131          AnkiConditionalErrorAndReturnValue(components.get_isSortedInId(),
000016  983b              LDR      r0,[sp,#0xec]
000018  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents16get_isSortedInIdEv ; Anki::Embedded::ConnectedComponents::get_isSortedInId() const
00001c  2800              CMP      r0,#0
00001e  d062              BEQ      |L2.230|
;;;132            RESULT_FAIL, "ComputeQuadrilateralsFromConnectedComponents", "components must be sorted in id");
;;;133    
;;;134          FixedLengthList<Point<s16> > extractedBoundary(MAX_BOUNDARY_LENTH, scratch, Flags::Buffer(false,false,false));
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  4619              MOV      r1,r3
000026  a838              ADD      r0,sp,#0xe0
000028  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00002c  6803              LDR      r3,[r0,#0]
00002e  f2427110          MOV      r1,#0x2710
000032  a803              ADD      r0,sp,#0xc
000034  9a4b              LDR      r2,[sp,#0x12c]
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;135          FixedLengthList<Point<s16> > peaks(4, scratch, Flags::Buffer(false,false,false));
00003a  2300              MOVS     r3,#0
00003c  461a              MOV      r2,r3
00003e  4619              MOV      r1,r3
000040  a839              ADD      r0,sp,#0xe4
000042  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000046  6803              LDR      r3,[r0,#0]
000048  2104              MOVS     r1,#4
00004a  a810              ADD      r0,sp,#0x40
00004c  9a4b              LDR      r2,[sp,#0x12c]
00004e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;136    
;;;137          s32 startComponentIndex = 0;
000052  2000              MOVS     r0,#0
;;;138    
;;;139          // Go throught the list of components, and for each id, extract a quadrilateral. If the
;;;140          // quadrilateral looks reasonable, add it to the list extractedQuads.
;;;141          for(s32 iComponent=0; iComponent<components.get_maximumId(); iComponent++) {
000054  4605              MOV      r5,r0
000056  902d              STR      r0,[sp,#0xb4]
000058  983b              LDR      r0,[sp,#0xec]
00005a  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents13get_maximumIdEv ; Anki::Embedded::ConnectedComponents::get_maximumId() const
00005e  2800              CMP      r0,#0
000060  f34080e9          BLE.W    |L2.566|
000064  a926              ADD      r1,sp,#0x98
000066  f10d0a94          ADD      r10,sp,#0x94
00006a  f10d099c          ADD      r9,sp,#0x9c
00006e  9136              STR      r1,[sp,#0xd8]
                  |L2.112|
;;;142            s32 endComponentIndex = -1;
000070  f04f30ff          MOV      r0,#0xffffffff
;;;143    
;;;144            // For each component (the list must be sorted):
;;;145            // 1. Trace the exterior boundary
;;;146            //BeginBenchmark("TraceNextExteriorBoundary");
;;;147            if((lastResult = TraceNextExteriorBoundary(components, startComponentIndex, extractedBoundary, endComponentIndex, scratch)) != RESULT_OK)
000074  902c              STR      r0,[sp,#0xb0]
000076  a81d              ADD      r0,sp,#0x74
000078  994b              LDR      r1,[sp,#0x12c]
00007a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00007e  9000              STR      r0,[sp,#0]
000080  ab2c              ADD      r3,sp,#0xb0
000082  aa03              ADD      r2,sp,#0xc
000084  992d              LDR      r1,[sp,#0xb4]
000086  983b              LDR      r0,[sp,#0xec]
000088  f7fffffe          BL       _ZN4Anki8Embedded25TraceNextExteriorBoundaryERKNS0_19ConnectedComponentsEiRNS0_15FixedLengthListINS0_5PointIsEEEERiNS0_11MemoryStackE ; Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&, int&, Anki::Embedded::MemoryStack)
00008c  2800              CMP      r0,#0
;;;148              return lastResult;
;;;149            //EndBenchmark("TraceNextExteriorBoundary");
;;;150    
;;;151            if(extractedBoundary.get_size() == 0)
;;;152              continue;
;;;153    
;;;154            startComponentIndex = endComponentIndex + 1;
;;;155    
;;;156            //BeginBenchmark("ExtractLaplacianPeaks");
;;;157            // 2. Compute the Laplacian peaks
;;;158            if((lastResult = ExtractLaplacianPeaks(extractedBoundary, peaks, scratch)) != RESULT_OK)
;;;159              return lastResult;
;;;160            //EndBenchmark("ExtractLaplacianPeaks");
;;;161    
;;;162            if(peaks.get_size() != 4)
;;;163              continue;
;;;164    
;;;165            Quadrilateral<s16> quad(peaks[0], peaks[1], peaks[2], peaks[3]);
;;;166            Quadrilateral<s16> quadSwapped;
;;;167    
;;;168            // 3. If the quadraleteral is reasonable, add the quad to the list of extractedQuads
;;;169            // IsQuadrilateralValidAndUpdateOrdering also changes the order of the points, into the non-rotated and corner-opposite format
;;;170            if(IsQuadrilateralValidAndUpdateOrdering(quad, minQuadArea, quadSymmetryThreshold, minDistanceFromImageEdge, imageHeight, imageWidth, quadSwapped)) {
;;;171              extractedQuads.PushBack(quadSwapped);
;;;172            }
;;;173          }
;;;174    
;;;175          return RESULT_OK;
;;;176        } // Result ComputeQuadrilateralsFromConnectedComponents(const ConnectedComponents &components, Quadrilateral<s32> &extractedQuads, MemoryStack scratch)
00008e  bf1c              ITT      NE
000090  b03f              ADDNE    sp,sp,#0xfc
000092  e8bd8ff0          POPNE    {r4-r11,pc}
000096  9806              LDR      r0,[sp,#0x18]         ;151
000098  2800              CMP      r0,#0                 ;151
00009a  f00080c5          BEQ.W    |L2.552|
00009e  982c              LDR      r0,[sp,#0xb0]         ;154
0000a0  1c40              ADDS     r0,r0,#1              ;154
0000a2  902d              STR      r0,[sp,#0xb4]         ;158
0000a4  a81d              ADD      r0,sp,#0x74           ;158
0000a6  994b              LDR      r1,[sp,#0x12c]        ;158
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0000ac  4602              MOV      r2,r0                 ;158
0000ae  a910              ADD      r1,sp,#0x40           ;158
0000b0  a803              ADD      r0,sp,#0xc            ;158
0000b2  f7fffffe          BL       _ZN4Anki8Embedded21ExtractLaplacianPeaksERKNS0_15FixedLengthListINS0_5PointIsEEEERS4_NS0_11MemoryStackE ; Anki::Embedded::ExtractLaplacianPeaks(const Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&, Anki::Embedded::MemoryStack)
0000b6  2800              CMP      r0,#0                 ;158
0000b8  bf1c              ITT      NE
0000ba  b03f              ADDNE    sp,sp,#0xfc
0000bc  e8bd8ff0          POPNE    {r4-r11,pc}
0000c0  9813              LDR      r0,[sp,#0x4c]         ;162
0000c2  2804              CMP      r0,#4                 ;162
0000c4  f04080b0          BNE.W    |L2.552|
0000c8  e01a              B        |L2.256|
                  |L2.202|
0000ca  2080              MOVS     r0,#0x80              ;128
0000cc  e9cd4000          STRD     r4,r0,[sp,#0]         ;128
0000d0  a35c              ADR      r3,|L2.580|
0000d2  a26a              ADR      r2,|L2.636|
0000d4  a16f              ADR      r1,|L2.660|
0000d6  2005              MOVS     r0,#5                 ;128
0000d8  f7fffffe          BL       _Anki_Log
0000dc  b03f              ADD      sp,sp,#0xfc
0000de  f04f6080          MOV      r0,#0x4000000         ;128
0000e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.230|
0000e6  2083              MOVS     r0,#0x83              ;131
0000e8  e9cd4000          STRD     r4,r0,[sp,#0]         ;131
0000ec  a355              ADR      r3,|L2.580|
0000ee  a275              ADR      r2,|L2.708|
0000f0  a168              ADR      r1,|L2.660|
0000f2  2005              MOVS     r0,#5                 ;131
0000f4  f7fffffe          BL       _Anki_Log
0000f8  b03f              ADD      sp,sp,#0xfc
0000fa  2001              MOVS     r0,#1                 ;131
0000fc  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.256|
000100  f8ddb070          LDR      r11,[sp,#0x70]
000104  2304              MOVS     r3,#4
000106  f10b0704          ADD      r7,r11,#4
00010a  1d3e              ADDS     r6,r7,#4
00010c  a824              ADD      r0,sp,#0x90           ;165
00010e  1d34              ADDS     r4,r6,#4              ;165
000110  461a              MOV      r2,r3                 ;165
000112  4974              LDR      r1,|L2.740|
000114  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000118  f8bb1000          LDRH     r1,[r11,#0]           ;165
00011c  8001              STRH     r1,[r0,#0]            ;165
00011e  f8bb1002          LDRH     r1,[r11,#2]           ;165
000122  8041              STRH     r1,[r0,#2]            ;165
000124  883a              LDRH     r2,[r7,#0]            ;165
000126  8082              STRH     r2,[r0,#4]            ;165
000128  887a              LDRH     r2,[r7,#2]            ;165
00012a  80c2              STRH     r2,[r0,#6]            ;165
00012c  8832              LDRH     r2,[r6,#0]            ;165
00012e  8102              STRH     r2,[r0,#8]            ;165
000130  8872              LDRH     r2,[r6,#2]            ;165
000132  8142              STRH     r2,[r0,#0xa]          ;165
000134  8821              LDRH     r1,[r4,#0]            ;165
000136  8181              STRH     r1,[r0,#0xc]          ;165
000138  8861              LDRH     r1,[r4,#2]            ;165
00013a  81c1              STRH     r1,[r0,#0xe]          ;165
00013c  2304              MOVS     r3,#4                 ;165
00013e  a828              ADD      r0,sp,#0xa0           ;166
000140  461a              MOV      r2,r3                 ;166
000142  4968              LDR      r1,|L2.740|
000144  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000148  2100              MOVS     r1,#0                 ;166
00014a  460b              MOV      r3,r1                 ;166
                  |L2.332|
00014c  eb000281          ADD      r2,r0,r1,LSL #2       ;166
000150  f8ad3000          STRH     r3,[sp,#0]            ;166
000154  f8ad3002          STRH     r3,[sp,#2]            ;166
000158  8013              STRH     r3,[r2,#0]            ;166
00015a  f8bdc002          LDRH     r12,[sp,#2]           ;166
00015e  1c49              ADDS     r1,r1,#1              ;166
000160  f8a2c002          STRH     r12,[r2,#2]           ;166
000164  2904              CMP      r1,#4                 ;166
000166  dbf1              BLT      |L2.332|
000168  983c              LDR      r0,[sp,#0xf0]         ;170
00016a  9033              STR      r0,[sp,#0xcc]         ;170
00016c  983d              LDR      r0,[sp,#0xf4]         ;170
00016e  9032              STR      r0,[sp,#0xc8]         ;170
000170  e9dd7648          LDRD     r7,r6,[sp,#0x120]     ;170
000174  9836              LDR      r0,[sp,#0xd8]         ;170
000176  9000              STR      r0,[sp,#0]            ;170
000178  a924              ADD      r1,sp,#0x90           ;170
00017a  ac28              ADD      r4,sp,#0xa0           ;170
00017c  4653              MOV      r3,r10                ;170
00017e  464a              MOV      r2,r9                 ;170
000180  f8ddb0f8          LDR      r11,[sp,#0xf8]        ;170
000184  a82e              ADD      r0,sp,#0xb8           ;170
000186  f7fffffe          BL       _ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_ ; Anki::Embedded::Quadrilateral<short>::Quadrilateral(const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&)
00018a  4684              MOV      r12,r0                ;170
00018c  2000              MOVS     r0,#0                 ;170
                  |L2.398|
00018e  eb0c0180          ADD      r1,r12,r0,LSL #2      ;170
000192  eb040280          ADD      r2,r4,r0,LSL #2       ;170
000196  880b              LDRH     r3,[r1,#0]            ;170
000198  8013              STRH     r3,[r2,#0]            ;170
00019a  8849              LDRH     r1,[r1,#2]            ;170
00019c  1c40              ADDS     r0,r0,#1              ;170
00019e  8051              STRH     r1,[r2,#2]            ;170
0001a0  2804              CMP      r0,#4                 ;170
0001a2  dbf4              BLT      |L2.398|
0001a4  a837              ADD      r0,sp,#0xdc           ;170
0001a6  9700              STR      r7,[sp,#0]            ;170
0001a8  e9cd6001          STRD     r6,r0,[sp,#4]         ;170
0001ac  e9dd2132          LDRD     r2,r1,[sp,#0xc8]      ;170
0001b0  465b              MOV      r3,r11                ;170
0001b2  4620              MOV      r0,r4                 ;170
0001b4  f7fffffe          BL       _ZN4Anki8Embedded25IsQuadrilateralReasonableERKNS0_13QuadrilateralIsEEiiiiiRb ; Anki::Embedded::IsQuadrilateralReasonable(const Anki::Embedded::Quadrilateral<short>&, int, int, int, int, int, bool&)
0001b8  4606              MOV      r6,r0                 ;170
0001ba  f89d00dc          LDRB     r0,[sp,#0xdc]         ;170
0001be  b1b8              CBZ      r0,|L2.496|
0001c0  f104000c          ADD      r0,r4,#0xc            ;170
0001c4  1f02              SUBS     r2,r0,#4              ;170
0001c6  9000              STR      r0,[sp,#0]            ;170
0001c8  1d23              ADDS     r3,r4,#4              ;170
0001ca  4621              MOV      r1,r4                 ;170
0001cc  a832              ADD      r0,sp,#0xc8           ;170
0001ce  f7fffffe          BL       _ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_ ; Anki::Embedded::Quadrilateral<short>::Quadrilateral(const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&)
0001d2  4603              MOV      r3,r0                 ;170
0001d4  2000              MOVS     r0,#0                 ;170
                  |L2.470|
0001d6  eb030280          ADD      r2,r3,r0,LSL #2       ;170
0001da  eb040180          ADD      r1,r4,r0,LSL #2       ;170
0001de  f8b2c000          LDRH     r12,[r2,#0]           ;170
0001e2  f8a1c000          STRH     r12,[r1,#0]           ;170
0001e6  8852              LDRH     r2,[r2,#2]            ;170
0001e8  1c40              ADDS     r0,r0,#1              ;170
0001ea  804a              STRH     r2,[r1,#2]            ;170
0001ec  2804              CMP      r0,#4                 ;170
0001ee  dbf2              BLT      |L2.470|
                  |L2.496|
0001f0  b1d6              CBZ      r6,|L2.552|
0001f2  f8d8300c          LDR      r3,[r8,#0xc]          ;170
0001f6  f8d8001c          LDR      r0,[r8,#0x1c]         ;170
0001fa  f10d0ca0          ADD      r12,sp,#0xa0          ;171
0001fe  4298              CMP      r0,r3                 ;171
000200  dd12              BLE      |L2.552|
000202  f8d80030          LDR      r0,[r8,#0x30]         ;171
000206  eb001403          ADD      r4,r0,r3,LSL #4       ;171
00020a  2000              MOVS     r0,#0                 ;171
                  |L2.524|
00020c  eb0c0180          ADD      r1,r12,r0,LSL #2      ;171
000210  eb040280          ADD      r2,r4,r0,LSL #2       ;171
000214  880e              LDRH     r6,[r1,#0]            ;171
000216  8016              STRH     r6,[r2,#0]            ;171
000218  8849              LDRH     r1,[r1,#2]            ;171
00021a  1c40              ADDS     r0,r0,#1              ;171
00021c  8051              STRH     r1,[r2,#2]            ;171
00021e  2804              CMP      r0,#4                 ;171
000220  dbf4              BLT      |L2.524|
000222  1c59              ADDS     r1,r3,#1              ;171
000224  f8c8100c          STR      r1,[r8,#0xc]          ;171
                  |L2.552|
000228  1c6d              ADDS     r5,r5,#1              ;141
00022a  983b              LDR      r0,[sp,#0xec]         ;141
00022c  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents13get_maximumIdEv ; Anki::Embedded::ConnectedComponents::get_maximumId() const
000230  42a8              CMP      r0,r5                 ;141
000232  f73faf1d          BGT      |L2.112|
                  |L2.566|
000236  b03f              ADD      sp,sp,#0xfc
000238  2000              MOVS     r0,#0                 ;175
00023a  e8bd8ff0          POP      {r4-r11,pc}
;;;177      } // namespace Embedded
                          ENDP

00023e  0000              DCW      0x0000
                  |L2.576|
                          DCD      ||.constdata||
                  |L2.580|
000244  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\computeQuadrilaterals"
000248  6f726574
00024c  6563685c
000250  76697369
000254  6f6e5c72
000258  6f626f74
00025c  5c737263
000260  5c636f6d
000264  70757465
000268  51756164
00026c  72696c61
000270  74657261
000274  6c73    
000276  2e637070          DCB      ".cpp",0
00027a  00      
00027b  00                DCB      0
                  |L2.636|
00027c  636f6d70          DCB      "components is not valid",0
000280  6f6e656e
000284  74732069
000288  73206e6f
00028c  74207661
000290  6c696400
                  |L2.660|
000294  436f6d70          DCB      "ComputeQuadrilateralsFromConnectedComponents",0
000298  75746551
00029c  75616472
0002a0  696c6174
0002a4  6572616c
0002a8  7346726f
0002ac  6d436f6e
0002b0  6e656374
0002b4  6564436f
0002b8  6d706f6e
0002bc  656e7473
0002c0  00      
0002c1  00                DCB      0
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L2.708|
0002c4  636f6d70          DCB      "components must be sorted in id",0
0002c8  6f6e656e
0002cc  7473206d
0002d0  75737420
0002d4  62652073
0002d8  6f727465
0002dc  6420696e
0002e0  20696400
                  |L2.740|
                          DCD      _ZN4Anki8Embedded5PointIsEC1Ev ; Anki::Embedded::Point<short>::Point()

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded25IsQuadrilateralReasonableERKNS0_13QuadrilateralIsEEiiiiiRb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded25IsQuadrilateralReasonableERKNS0_13QuadrilateralIsEEiiiiiRb||
                          DCD      0x00000001

                          AREA ||area_number.4||, LINKORDER=||i._ZN4Anki8Embedded44ComputeQuadrilateralsFromConnectedComponentsERKNS0_19ConnectedComponentsEiiiiiRNS0_15FixedLengthListINS0_13QuadrilateralIsEEEENS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded44ComputeQuadrilateralsFromConnectedComponentsERKNS0_19ConnectedComponentsEiiiiiRNS0_15FixedLengthListINS0_13QuadrilateralIsEEEENS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000020  70757465          DCB      0x70,0x75,0x74,0x65
000024  51756164          DCB      0x51,0x75,0x61,0x64
000028  72696c61          DCB      0x72,0x69,0x6c,0x61
00002c  74657261          DCB      0x74,0x65,0x72,0x61
000030  6c734672          DCB      0x6c,0x73,0x46,0x72
000034  6f6d436f          DCB      0x6f,0x6d,0x43,0x6f
000038  6e6e6563          DCB      0x6e,0x6e,0x65,0x63
00003c  74656443          DCB      0x74,0x65,0x64,0x43
000040  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
000044  6e656e74          DCB      0x6e,0x65,0x6e,0x74
000048  7328636f          DCB      0x73,0x28,0x63,0x6f
00004c  6e737420          DCB      0x6e,0x73,0x74,0x20
000050  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000054  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000058  62656464          DCB      0x62,0x65,0x64,0x64
00005c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000060  436f6e6e          DCB      0x43,0x6f,0x6e,0x6e
000064  65637465          DCB      0x65,0x63,0x74,0x65
000068  64436f6d          DCB      0x64,0x43,0x6f,0x6d
00006c  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000070  6e747320          DCB      0x6e,0x74,0x73,0x20
000074  262c2073          DCB      0x26,0x2c,0x20,0x73
000078  69676e65          DCB      0x69,0x67,0x6e,0x65
00007c  6420696e          DCB      0x64,0x20,0x69,0x6e
000080  742c2073          DCB      0x74,0x2c,0x20,0x73
000084  69676e65          DCB      0x69,0x67,0x6e,0x65
000088  6420696e          DCB      0x64,0x20,0x69,0x6e
00008c  742c2073          DCB      0x74,0x2c,0x20,0x73
000090  69676e65          DCB      0x69,0x67,0x6e,0x65
000094  6420696e          DCB      0x64,0x20,0x69,0x6e
000098  742c2073          DCB      0x74,0x2c,0x20,0x73
00009c  69676e65          DCB      0x69,0x67,0x6e,0x65
0000a0  6420696e          DCB      0x64,0x20,0x69,0x6e
0000a4  742c2073          DCB      0x74,0x2c,0x20,0x73
0000a8  69676e65          DCB      0x69,0x67,0x6e,0x65
0000ac  6420696e          DCB      0x64,0x20,0x69,0x6e
0000b0  742c2041          DCB      0x74,0x2c,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a46          DCB      0x64,0x3a,0x3a,0x46
0000c4  69786564          DCB      0x69,0x78,0x65,0x64
0000c8  4c656e67          DCB      0x4c,0x65,0x6e,0x67
0000cc  74684c69          DCB      0x74,0x68,0x4c,0x69
0000d0  73743c41          DCB      0x73,0x74,0x3c,0x41
0000d4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000d8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000dc  65646465          DCB      0x65,0x64,0x64,0x65
0000e0  643a3a51          DCB      0x64,0x3a,0x3a,0x51
0000e4  75616472          DCB      0x75,0x61,0x64,0x72
0000e8  696c6174          DCB      0x69,0x6c,0x61,0x74
0000ec  6572616c          DCB      0x65,0x72,0x61,0x6c
0000f0  3c736967          DCB      0x3c,0x73,0x69,0x67
0000f4  6e656420          DCB      0x6e,0x65,0x64,0x20
0000f8  73686f72          DCB      0x73,0x68,0x6f,0x72
0000fc  743e3e20          DCB      0x74,0x3e,0x3e,0x20
000100  262c2041          DCB      0x26,0x2c,0x20,0x41
000104  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000108  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00010c  65646465          DCB      0x65,0x64,0x64,0x65
000110  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000114  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000118  79537461          DCB      0x79,0x53,0x74,0x61
00011c  636b2900          DCB      0x63,0x6b,0x29,0x00
000120  4c696e65          DCB      0x4c,0x69,0x6e,0x65
000124  61725365          DCB      0x61,0x72,0x53,0x65
000128  7175656e          DCB      0x71,0x75,0x65,0x6e
00012c  63653c54          DCB      0x63,0x65,0x3c,0x54
000130  7970653e          DCB      0x79,0x70,0x65,0x3e
000134  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000138  6d707574          DCB      0x6d,0x70,0x75,0x74
00013c  6553697a          DCB      0x65,0x53,0x69,0x7a
000140  65000000          DCB      0x65,0x00,0x00,0x00
000144  73697a65          DCB      0x73,0x69,0x7a,0x65
000148  20657374          DCB      0x20,0x65,0x73,0x74
00014c  696d6174          DCB      0x69,0x6d,0x61,0x74
000150  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000154  6661696c          DCB      0x66,0x61,0x69,0x6c
000158  65640000          DCB      0x65,0x64,0x00,0x00
00015c  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000160  6f726574          DCB      0x6f,0x72,0x65,0x74
000164  6563685c          DCB      0x65,0x63,0x68,0x5c
000168  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
00016c  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000170  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000174  64655c61          DCB      0x64,0x65,0x5c,0x61
000178  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
00017c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000180  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000184  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000188  2f736571          DCB      0x2f,0x73,0x65,0x71
00018c  75656e63          DCB      0x75,0x65,0x6e,0x63
000190  65732e68          DCB      0x65,0x73,0x2e,0x68
000194  00000000          DCB      0x00,0x00,0x00,0x00
000198  41727261          DCB      0x41,0x72,0x72,0x61
00019c  793c5479          DCB      0x79,0x3c,0x54,0x79
0001a0  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0001a4  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
0001a8  70757465          DCB      0x70,0x75,0x74,0x65
0001ac  52657175          DCB      0x52,0x65,0x71,0x75
0001b0  69726564          DCB      0x69,0x72,0x65,0x64
0001b4  53747269          DCB      0x53,0x74,0x72,0x69
0001b8  64650000          DCB      0x64,0x65,0x00,0x00
0001bc  496e7661          DCB      0x49,0x6e,0x76,0x61
0001c0  6c696420          DCB      0x6c,0x69,0x64,0x20
0001c4  73697a65          DCB      0x73,0x69,0x7a,0x65
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
0001cc  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0001d0  6f726574          DCB      0x6f,0x72,0x65,0x74
0001d4  6563685c          DCB      0x65,0x63,0x68,0x5c
0001d8  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001dc  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0001e0  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0001e4  64655c61          DCB      0x64,0x65,0x5c,0x61
0001e8  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0001ec  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001f0  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0001f4  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0001f8  2f617272          DCB      0x2f,0x61,0x72,0x72
0001fc  61793264          DCB      0x61,0x79,0x32,0x64
000200  2e680000          DCB      0x2e,0x68,0x00,0x00
000204  41727261          DCB      0x41,0x72,0x72,0x61
000208  793c5479          DCB      0x79,0x3c,0x54,0x79
00020c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000210  3a676574          DCB      0x3a,0x67,0x65,0x74
000214  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000218  65000000          DCB      0x65,0x00,0x00,0x00
00021c  4e656761          DCB      0x4e,0x65,0x67,0x61
000220  74697665          DCB      0x74,0x69,0x76,0x65
000224  2064696d          DCB      0x20,0x64,0x69,0x6d
000228  656e7369          DCB      0x65,0x6e,0x73,0x69
00022c  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L20.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L20.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L20.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L20.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L20.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L20.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L20.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L20.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L20.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L20.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
0000b2  e009              B        |L20.200|
                  |L20.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L20.118|
                  |L20.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L20.140|
                  |L20.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L20.162|
                  |L20.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
                  |L20.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d019              BEQ      |L27.68|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L27.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L27.30|
                  |L27.26|
00001a  462b              MOV      r3,r5
00001c  e012              B        |L27.68|
                  |L27.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0c              BGE      |L27.68|
00002a  2185              MOVS     r1,#0x85
00002c  4807              LDR      r0,|L27.76|
00002e  4b08              LDR      r3,|L27.80|
000030  e9cd0100          STRD     r0,r1,[sp,#0]
000034  f1a30218          SUB      r2,r3,#0x18
000038  f1a20124          SUB      r1,r2,#0x24
00003c  2005              MOVS     r0,#5
00003e  f7fffffe          BL       _Anki_Log
000042  462b              MOV      r3,r5
                  |L27.68|
000044  6023              STR      r3,[r4,#0]
000046  b003              ADD      sp,sp,#0xc
000048  4620              MOV      r0,r4
00004a  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L27.76|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L27.80|
                          DCD      ||.constdata||+0x15c

                          AREA ||area_number.28||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5PointIsEC1Ev||, COMGROUP=_ZN4Anki8Embedded5PointIsEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5PointIsEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point<short>::Point__sub_object()
                  _ZN4Anki8Embedded5PointIsEC1Ev PROC ; Anki::Embedded::Point<short>::Point()
;;;28     #endif
;;;29         template<typename Type> Point<Type>::Point()
;;;30           : x(static_cast<Type>(0)), y(static_cast<Type>(0))
;;;31         {
;;;32         }
;;;33     
000000  2100              MOVS     r1,#0
000002  8001              STRH     r1,[r0,#0]
000004  8041              STRH     r1,[r0,#2]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.35||, COMGROUP=_ZN4Anki8Embedded5PointIsEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5PointIsEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5PointIsEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L41.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L41.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L41.384|
000044  a25c              ADR      r2,|L41.440|
000046  a160              ADR      r1,|L41.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L41.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L41.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L41.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L41.384|
000080  a24d              ADR      r2,|L41.440|
000082  a157              ADR      r1,|L41.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L41.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L41.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L41.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L41.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L41.384|
0000c8  a251              ADR      r2,|L41.528|
0000ca  a156              ADR      r1,|L41.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L41.372|
                  |L41.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L41.384|
0000e0  a258              ADR      r2,|L41.580|
0000e2  a15f              ADR      r1,|L41.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L41.372|
                  |L41.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L41.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L41.384|
000110  a259              ADR      r2,|L41.632|
000112  a144              ADR      r1,|L41.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L41.372|
                  |L41.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L41.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L41.384|
00015a  a251              ADR      r2,|L41.672|
00015c  a140              ADR      r1,|L41.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L41.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L41.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L41.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L41.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L41.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L41.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L41.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L41.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L41.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L41.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L41.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L41.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L41.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L41.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.42||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L48.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L48.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.49||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_||, COMGROUP=_ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded13QuadrilateralIsEC2ERKNS0_5PointIsEES6_S6_S6_                  ; Alternate entry point ; Anki::Embedded::Quadrilateral<short>::Quadrilateral__sub_object(const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&)
                  _ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_ PROC ; Anki::Embedded::Quadrilateral<short>::Quadrilateral(const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&, const Anki::Embedded::Point<short>&)
;;;412    
;;;413        template<typename Type> Quadrilateral<Type>::Quadrilateral(const Point<Type> &corner1, const Point<Type> &corner2, const Point<Type> &corner3, const Point<Type> &corner4)
;;;414        {
;;;415          corners[0] = corner1;
;;;416          corners[1] = corner2;
;;;417          corners[2] = corner3;
;;;418          corners[3] = corner4;
;;;419        }
;;;420    
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  461d              MOV      r5,r3
000006  4616              MOV      r6,r2
000008  460f              MOV      r7,r1
00000a  2304              MOVS     r3,#4
00000c  461a              MOV      r2,r3
00000e  490b              LDR      r1,|L55.60|
000010  9c06              LDR      r4,[sp,#0x18]
000012  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000016  8839              LDRH     r1,[r7,#0]
000018  8001              STRH     r1,[r0,#0]
00001a  8879              LDRH     r1,[r7,#2]
00001c  8041              STRH     r1,[r0,#2]
00001e  8831              LDRH     r1,[r6,#0]
000020  8081              STRH     r1,[r0,#4]
000022  8871              LDRH     r1,[r6,#2]
000024  80c1              STRH     r1,[r0,#6]
000026  8829              LDRH     r1,[r5,#0]
000028  8101              STRH     r1,[r0,#8]
00002a  8869              LDRH     r1,[r5,#2]
00002c  8141              STRH     r1,[r0,#0xa]
00002e  8821              LDRH     r1,[r4,#0]
000030  8181              STRH     r1,[r0,#0xc]
000032  8861              LDRH     r1,[r4,#2]
000034  81c1              STRH     r1,[r0,#0xe]
000036  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

00003a  0000              DCW      0x0000
                  |L55.60|
                          DCD      _ZN4Anki8Embedded5PointIsEC1Ev ; Anki::Embedded::Point<short>::Point()

                          AREA ||area_number.56||, COMGROUP=_ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_, LINKORDER=||t._ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded13QuadrilateralIsEC1ERKNS0_5PointIsEES6_S6_S6_||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
000098  696e743c          DCB      0x69,0x6e,0x74,0x3c
00009c  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a0  65642073          DCB      0x65,0x64,0x20,0x73
0000a4  686f7274          DCB      0x68,0x6f,0x72,0x74
0000a8  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  506f696e          DCB      0x50,0x6f,0x69,0x6e
0000cc  743c7369          DCB      0x74,0x3c,0x73,0x69
0000d0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000d4  2073686f          DCB      0x20,0x73,0x68,0x6f
0000d8  72743e5d          DCB      0x72,0x74,0x3e,0x5d
0000dc  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a50          DCB      0x64,0x3a,0x3a,0x50
0000a4  6f696e74          DCB      0x6f,0x69,0x6e,0x74
0000a8  3c736967          DCB      0x3c,0x73,0x69,0x67
0000ac  6e656420          DCB      0x6e,0x65,0x64,0x20
0000b0  73686f72          DCB      0x73,0x68,0x6f,0x72
0000b4  743e5d00          DCB      0x74,0x3e,0x5d,0x00
