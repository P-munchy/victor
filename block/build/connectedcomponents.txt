; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\connectedcomponents.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\connectedcomponents.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\connectedcomponents.crf ..\coretech\vision\robot\src\connectedComponents.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents17get_componentsS32Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents17get_componentsS32Ev PROC ; Anki::Embedded::ConnectedComponents::get_componentsS32()
;;;196    
;;;197        ConnectedComponentsTemplate<s32>* ConnectedComponents::get_componentsS32()
000000  7801              LDRB     r1,[r0,#0]
;;;198        {
;;;199          if(this->useU16) { return NULL; }
000002  2900              CMP      r1,#0
000004  bf14              ITE      NE
000006  2000              MOVNE    r0,#0
;;;200          else { return &this->componentsS32; }
000008  f500708c          ADDEQ    r0,r0,#0x118
;;;201        }
00000c  4770              BX       lr
;;;202      } // namespace Embedded
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents17get_componentsU16Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents17get_componentsU16Ev PROC ; Anki::Embedded::ConnectedComponents::get_componentsU16()
;;;190    
;;;191        ConnectedComponentsTemplate<u16>* ConnectedComponents::get_componentsU16()
000000  7801              LDRB     r1,[r0,#0]
;;;192        {
;;;193          if(this->useU16) { return &this->componentsU16; }
000002  2900              CMP      r1,#0
000004  bf14              ITE      NE
000006  1d00              ADDNE    r0,r0,#4
;;;194          else { return NULL; }
000008  2000              MOVEQ    r0,#0
;;;195        }
00000a  4770              BX       lr
;;;196    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents21ComputeComponentSizesERNS0_15FixedLengthListIiEE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents21ComputeComponentSizesERNS0_15FixedLengthListIiEE PROC ; Anki::Embedded::ConnectedComponents::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)
;;;83     
;;;84         Result ConnectedComponents::ComputeComponentSizes(FixedLengthList<s32> &componentSizes)
000000  7802              LDRB     r2,[r0,#0]
;;;85         {
000002  b112              CBZ      r2,|L3.10|
;;;86           if(this->useU16) { return this->componentsU16.ComputeComponentSizes(componentSizes); }
000004  1d00              ADDS     r0,r0,#4
000006  f7ffbffe          B.W      _ZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEE ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)
                  |L3.10|
;;;87           else { return this->componentsS32.ComputeComponentSizes(componentSizes); }
00000a  f500708c          ADD      r0,r0,#0x118
00000e  f7ffbffe          B.W      _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEE ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)
;;;88         }
;;;89     
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded19ConnectedComponents25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::ComputeComponentCentroids(Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&, Anki::Embedded::MemoryStack)
;;;89     
;;;90         Result ConnectedComponents::ComputeComponentCentroids(FixedLengthList<Point<s16> > &componentCentroids, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;91         {
000004  460e              MOV      r6,r1
;;;92           if(this->useU16) { return this->componentsU16.ComputeComponentCentroids(componentCentroids, scratch); }
000006  7801              LDRB     r1,[r0,#0]
000008  2400              MOVS     r4,#0
00000a  b0a5              SUB      sp,sp,#0x94           ;91
00000c  f44f7801          MOV      r8,#0x204             ;91
000010  f04f6780          MOV      r7,#0x4000000         ;91
000014  f2402905          MOV      r9,#0x205             ;91
000018  2900              CMP      r1,#0
00001a  d07d              BEQ      |L4.280|
00001c  1d05              ADDS     r5,r0,#4
00001e  4611              MOV      r1,r2
000020  a81c              ADD      r0,sp,#0x70
000022  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000026  4683              MOV      r11,r0
000028  68f1              LDR      r1,[r6,#0xc]
00002a  69f0              LDR      r0,[r6,#0x1c]
00002c  f8dfa2b0          LDR      r10,|L4.736|
000030  4281              CMP      r1,r0
000032  f300813c          BGT.W    |L4.686|
000036  6ab1              LDR      r1,[r6,#0x28]
000038  b129              CBZ      r1,|L4.70|
00003a  69b1              LDR      r1,[r6,#0x18]
00003c  2900              CMP      r1,#0
00003e  bfa4              ITT      GE
000040  2800              CMPGE    r0,#0
000042  2001              MOVGE    r0,#1
000044  da00              BGE      |L4.72|
                  |L4.70|
000046  2000              MOVS     r0,#0
                  |L4.72|
000048  2800              CMP      r0,#0
00004a  f0008130          BEQ.W    |L4.686|
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
000054  2800              CMP      r0,#0
000056  f0008136          BEQ.W    |L4.710|
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE7SetZeroEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::SetZero()
000060  f8b50108          LDRH     r0,[r5,#0x108]
000064  1c41              ADDS     r1,r0,#1
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
00006c  2300              MOVS     r3,#0
00006e  461a              MOV      r2,r3
000070  2101              MOVS     r1,#1
000072  a823              ADD      r0,sp,#0x8c
000074  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000078  f8b51108          LDRH     r1,[r5,#0x108]
00007c  6803              LDR      r3,[r0,#0]
00007e  1c49              ADDS     r1,r1,#1
000080  465a              MOV      r2,r11
000082  a802              ADD      r0,sp,#8
000084  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000088  f8b50108          LDRH     r0,[r5,#0x108]
00008c  1c41              ADDS     r1,r0,#1
00008e  a802              ADD      r0,sp,#8
000090  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::set_size(int)
000094  a802              ADD      r0,sp,#8
000096  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE7SetZeroEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::SetZero()
00009a  2300              MOVS     r3,#0
00009c  461a              MOV      r2,r3
00009e  2101              MOVS     r1,#1
0000a0  a823              ADD      r0,sp,#0x8c
0000a2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000a6  f8b51108          LDRH     r1,[r5,#0x108]
0000aa  6803              LDR      r3,[r0,#0]
0000ac  1c49              ADDS     r1,r1,#1
0000ae  465a              MOV      r2,r11
0000b0  a80f              ADD      r0,sp,#0x3c
0000b2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000b6  a90f              ADD      r1,sp,#0x3c
0000b8  4628              MOV      r0,r5
0000ba  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEE ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)
0000be  2800              CMP      r0,#0
;;;93           else { return this->componentsS32.ComputeComponentCentroids(componentCentroids, scratch); }
;;;94         }
0000c0  bf1c              ITT      NE
0000c2  b025              ADDNE    sp,sp,#0x94
0000c4  e8bd8ff0          POPNE    {r4-r11,pc}
0000c8  f8d5a030          LDR      r10,[r5,#0x30]
0000cc  f8d5b00c          LDR      r11,[r5,#0xc]
0000d0  9b0e              LDR      r3,[sp,#0x38]
0000d2  2200              MOVS     r2,#0
0000d4  f1bb0f00          CMP      r11,#0
0000d8  dd20              BLE      |L4.284|
                  |L4.218|
0000da  eb0a0cc2          ADD      r12,r10,r2,LSL #3
0000de  f93a0032          LDRSH    r0,[r10,r2,LSL #3]
0000e2  f9bc8002          LDRSH    r8,[r12,#2]
0000e6  f8bc1006          LDRH     r1,[r12,#6]
0000ea  f9bc9004          LDRSH    r9,[r12,#4]
0000ee  4580              CMP      r8,r0
0000f0  bfa8              IT       GE
0000f2  eb030cc1          ADDGE    r12,r3,r1,LSL #3
0000f6  db0c              BLT      |L4.274|
                  |L4.248|
0000f8  f8537031          LDR      r7,[r3,r1,LSL #3]
0000fc  4407              ADD      r7,r7,r0
0000fe  f8437031          STR      r7,[r3,r1,LSL #3]
000102  f8dc7004          LDR      r7,[r12,#4]
000106  1c40              ADDS     r0,r0,#1
000108  444f              ADD      r7,r7,r9
00010a  f8cc7004          STR      r7,[r12,#4]
00010e  4580              CMP      r8,r0
000110  daf2              BGE      |L4.248|
                  |L4.274|
000112  1c52              ADDS     r2,r2,#1
000114  455a              CMP      r2,r11
000116  e000              B        |L4.282|
                  |L4.280|
000118  e022              B        |L4.352|
                  |L4.282|
00011a  dbde              BLT      |L4.218|
                  |L4.284|
00011c  f8b51108          LDRH     r1,[r5,#0x108]
000120  9f1b              LDR      r7,[sp,#0x6c]
000122  9a0e              LDR      r2,[sp,#0x38]
000124  2000              MOVS     r0,#0
000126  6b33              LDR      r3,[r6,#0x30]
000128  2900              CMP      r1,#0
00012a  db7c              BLT      |L4.550|
                  |L4.300|
00012c  f8571020          LDR      r1,[r7,r0,LSL #2]
000130  2900              CMP      r1,#0
000132  dd0f              BLE      |L4.340|
000134  f852c030          LDR      r12,[r2,r0,LSL #3]
000138  fb9cfcf1          SDIV     r12,r12,r1
00013c  f823c020          STRH     r12,[r3,r0,LSL #2]
000140  eb020cc0          ADD      r12,r2,r0,LSL #3
000144  f8dcc004          LDR      r12,[r12,#4]
000148  fb9cf1f1          SDIV     r1,r12,r1
00014c  eb030c80          ADD      r12,r3,r0,LSL #2
000150  f8ac1002          STRH     r1,[r12,#2]
                  |L4.340|
000154  f8b51108          LDRH     r1,[r5,#0x108]
000158  1c40              ADDS     r0,r0,#1
00015a  4281              CMP      r1,r0
00015c  dae6              BGE      |L4.300|
00015e  e0a2              B        |L4.678|
                  |L4.352|
000160  f500758c          ADD      r5,r0,#0x118          ;93
000164  4611              MOV      r1,r2                 ;93
000166  a81c              ADD      r0,sp,#0x70           ;93
000168  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00016c  4683              MOV      r11,r0                ;93
00016e  68f1              LDR      r1,[r6,#0xc]          ;93
000170  69f0              LDR      r0,[r6,#0x1c]         ;93
000172  f8dfa170          LDR      r10,|L4.740|
000176  4281              CMP      r1,r0                 ;93
000178  dc7e              BGT      |L4.632|
00017a  6ab1              LDR      r1,[r6,#0x28]         ;93
00017c  b129              CBZ      r1,|L4.394|
00017e  69b1              LDR      r1,[r6,#0x18]         ;93
000180  2900              CMP      r1,#0                 ;93
000182  bfa4              ITT      GE                    ;93
000184  2800              CMPGE    r0,#0                 ;93
000186  2001              MOVGE    r0,#1                 ;93
000188  da00              BGE      |L4.396|
                  |L4.394|
00018a  2000              MOVS     r0,#0                 ;93
                  |L4.396|
00018c  2800              CMP      r0,#0                 ;93
00018e  d073              BEQ      |L4.632|
000190  4628              MOV      r0,r5                 ;93
000192  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
000196  2800              CMP      r0,#0                 ;93
000198  d06f              BEQ      |L4.634|
00019a  4630              MOV      r0,r6                 ;93
00019c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE7SetZeroEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::SetZero()
0001a0  f8d50108          LDR      r0,[r5,#0x108]        ;93
0001a4  1c41              ADDS     r1,r0,#1              ;93
0001a6  4630              MOV      r0,r6                 ;93
0001a8  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
0001ac  2300              MOVS     r3,#0                 ;93
0001ae  461a              MOV      r2,r3                 ;93
0001b0  2101              MOVS     r1,#1                 ;93
0001b2  a823              ADD      r0,sp,#0x8c           ;93
0001b4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0001b8  f8d51108          LDR      r1,[r5,#0x108]        ;93
0001bc  6803              LDR      r3,[r0,#0]            ;93
0001be  1c49              ADDS     r1,r1,#1              ;93
0001c0  465a              MOV      r2,r11                ;93
0001c2  a802              ADD      r0,sp,#8              ;93
0001c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0001c8  f8d50108          LDR      r0,[r5,#0x108]        ;93
0001cc  1c41              ADDS     r1,r0,#1              ;93
0001ce  a802              ADD      r0,sp,#8              ;93
0001d0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::set_size(int)
0001d4  a802              ADD      r0,sp,#8              ;93
0001d6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE7SetZeroEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::SetZero()
0001da  2300              MOVS     r3,#0                 ;93
0001dc  461a              MOV      r2,r3                 ;93
0001de  2101              MOVS     r1,#1                 ;93
0001e0  a823              ADD      r0,sp,#0x8c           ;93
0001e2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0001e6  f8d51108          LDR      r1,[r5,#0x108]        ;93
0001ea  6803              LDR      r3,[r0,#0]            ;93
0001ec  1c49              ADDS     r1,r1,#1              ;93
0001ee  465a              MOV      r2,r11                ;93
0001f0  a80f              ADD      r0,sp,#0x3c           ;93
0001f2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0001f6  a90f              ADD      r1,sp,#0x3c           ;93
0001f8  4628              MOV      r0,r5                 ;93
0001fa  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEE ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)
0001fe  2800              CMP      r0,#0                 ;93
000200  bf1c              ITT      NE
000202  b025              ADDNE    sp,sp,#0x94
000204  e8bd8ff0          POPNE    {r4-r11,pc}
000208  f8d5a030          LDR      r10,[r5,#0x30]
00020c  f8d5b00c          LDR      r11,[r5,#0xc]
000210  9a0e              LDR      r2,[sp,#0x38]
000212  f04f0c00          MOV      r12,#0
000216  f1bb0f00          CMP      r11,#0
00021a  dd20              BLE      |L4.606|
                  |L4.540|
00021c  eb0c004c          ADD      r0,r12,r12,LSL #1
000220  eb0a0380          ADD      r3,r10,r0,LSL #2
000224  e000              B        |L4.552|
                  |L4.550|
000226  e03e              B        |L4.678|
                  |L4.552|
000228  f93a0020          LDRSH    r0,[r10,r0,LSL #2]
00022c  f9b38002          LDRSH    r8,[r3,#2]
000230  f9b39004          LDRSH    r9,[r3,#4]
000234  6899              LDR      r1,[r3,#8]
000236  4580              CMP      r8,r0
000238  bfa8              IT       GE
00023a  eb0203c1          ADDGE    r3,r2,r1,LSL #3
00023e  db0a              BLT      |L4.598|
                  |L4.576|
000240  f8527031          LDR      r7,[r2,r1,LSL #3]
000244  4407              ADD      r7,r7,r0
000246  f8427031          STR      r7,[r2,r1,LSL #3]
00024a  685f              LDR      r7,[r3,#4]
00024c  1c40              ADDS     r0,r0,#1
00024e  444f              ADD      r7,r7,r9
000250  605f              STR      r7,[r3,#4]
000252  4580              CMP      r8,r0
000254  daf4              BGE      |L4.576|
                  |L4.598|
000256  f10c0c01          ADD      r12,r12,#1
00025a  45dc              CMP      r12,r11
00025c  dbde              BLT      |L4.540|
                  |L4.606|
00025e  f8d51108          LDR      r1,[r5,#0x108]
000262  9f1b              LDR      r7,[sp,#0x6c]
000264  9a0e              LDR      r2,[sp,#0x38]
000266  2000              MOVS     r0,#0
000268  6b33              LDR      r3,[r6,#0x30]
00026a  2900              CMP      r1,#0
00026c  db1b              BLT      |L4.678|
                  |L4.622|
00026e  f8571020          LDR      r1,[r7,r0,LSL #2]
000272  2900              CMP      r1,#0
000274  dd12              BLE      |L4.668|
000276  e001              B        |L4.636|
                  |L4.632|
000278  e019              B        |L4.686|
                  |L4.634|
00027a  e024              B        |L4.710|
                  |L4.636|
00027c  f852c030          LDR      r12,[r2,r0,LSL #3]
000280  fb9cfcf1          SDIV     r12,r12,r1
000284  f823c020          STRH     r12,[r3,r0,LSL #2]
000288  eb020cc0          ADD      r12,r2,r0,LSL #3
00028c  f8dcc004          LDR      r12,[r12,#4]
000290  fb9cf1f1          SDIV     r1,r12,r1
000294  eb030c80          ADD      r12,r3,r0,LSL #2
000298  f8ac1002          STRH     r1,[r12,#2]
                  |L4.668|
00029c  f8d51108          LDR      r1,[r5,#0x108]
0002a0  1c40              ADDS     r0,r0,#1
0002a2  4281              CMP      r1,r0
0002a4  dae3              BGE      |L4.622|
                  |L4.678|
0002a6  b025              ADD      sp,sp,#0x94
0002a8  4620              MOV      r0,r4
0002aa  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.686|
0002ae  e9cda800          STRD     r10,r8,[sp,#0]
0002b2  4b0d              LDR      r3,|L4.744|
0002b4  a20d              ADR      r2,|L4.748|
0002b6  a115              ADR      r1,|L4.780|
0002b8  2005              MOVS     r0,#5
0002ba  f7fffffe          BL       _Anki_Log
0002be  b025              ADD      sp,sp,#0x94
0002c0  4638              MOV      r0,r7
0002c2  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.710|
0002c6  e9cda900          STRD     r10,r9,[sp,#0]
0002ca  4b07              LDR      r3,|L4.744|
0002cc  a215              ADR      r2,|L4.804|
0002ce  a10f              ADR      r1,|L4.780|
0002d0  2005              MOVS     r0,#5
0002d2  f7fffffe          BL       _Anki_Log
0002d6  b025              ADD      sp,sp,#0x94
0002d8  4638              MOV      r0,r7
0002da  e8bd8ff0          POP      {r4-r11,pc}
;;;95     
                          ENDP

0002de  0000              DCW      0x0000
                  |L4.736|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentCentroids(Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
                  |L4.740|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentCentroids(Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
                  |L4.744|
                          DCD      ||.constdata||+0x98
                  |L4.748|
0002ec  636f6d70          DCB      "componentCentroids is not valid",0
0002f0  6f6e656e
0002f4  7443656e
0002f8  74726f69
0002fc  64732069
000300  73206e6f
000304  74207661
000308  6c696400
                  |L4.780|
00030c  436f6d70          DCB      "ComputeComponentSizes",0
000310  75746543
000314  6f6d706f
000318  6e656e74
00031c  53697a65
000320  7300    
000322  00                DCB      0
000323  00                DCB      0
                  |L4.804|
000324  636f6d70          DCB      "components is not valid",0
000328  6f6e656e
00032c  74732069
000330  73206e6f
000334  74207661
000338  6c696400

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE PROC ; Anki::Embedded::ConnectedComponents::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)
;;;95     
;;;96         Result ConnectedComponents::ComputeComponentBoundingBoxes(FixedLengthList<Rectangle<s16> > &componentBoundingBoxes)
000000  7802              LDRB     r2,[r0,#0]
;;;97         {
000002  b112              CBZ      r2,|L5.10|
;;;98           if(this->useU16) { return this->componentsU16.ComputeComponentBoundingBoxes(componentBoundingBoxes); }
000004  1d00              ADDS     r0,r0,#4
000006  f7ffbffe          B.W      _ZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)
                  |L5.10|
;;;99           else { return this->componentsS32.ComputeComponentBoundingBoxes(componentBoundingBoxes); }
00000a  f500708c          ADD      r0,r0,#0x118
00000e  f7ffbffe          B.W      _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)
;;;100        }
;;;101    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents29Extract2dComponents_FullImageERKNS0_5ArrayIhEEssNS0_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents29Extract2dComponents_FullImageERKNS0_5ArrayIhEEssNS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::Extract2dComponents_FullImage(const Anki::Embedded::Array<unsigned char>&, short, short, Anki::Embedded::MemoryStack)
;;;39     
;;;40         Result ConnectedComponents::Extract2dComponents_FullImage(const Array<u8> &binaryImage, const s16 minComponentWidth, const s16 maxSkipDistance, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;41         {
000004  b089              SUB      sp,sp,#0x24
;;;42           if(this->useU16)
000006  7804              LDRB     r4,[r0,#0]
000008  f8ddc048          LDR      r12,[sp,#0x48]
00000c  f04f0900          MOV      r9,#0
000010  2c00              CMP      r4,#0
000012  d03e              BEQ      |L6.146|
;;;43             return this->componentsU16.Extract2dComponents_FullImage(binaryImage, minComponentWidth, maxSkipDistance, scratch);
000014  f1000804          ADD      r8,r0,#4
000018  460d              MOV      r5,r1
00001a  4617              MOV      r7,r2
00001c  461e              MOV      r6,r3
00001e  4661              MOV      r1,r12
000020  a802              ADD      r0,sp,#8
000022  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000026  4604              MOV      r4,r0
000028  2100              MOVS     r1,#0
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000030  4682              MOV      r10,r0
000032  2101              MOVS     r1,#1
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00003a  4623              MOV      r3,r4
00003c  4683              MOV      r11,r0
00003e  461a              MOV      r2,r3
000040  4611              MOV      r1,r2
000042  4640              MOV      r0,r8
000044  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
000048  2800              CMP      r0,#0
;;;44           else
;;;45             return this->componentsS32.Extract2dComponents_FullImage(binaryImage, minComponentWidth, maxSkipDistance, scratch);
;;;46         }
00004a  bf1c              ITT      NE
00004c  b009              ADDNE    sp,sp,#0x24
00004e  e8bd8ff0          POPNE    {r4-r11,pc}
000052  2400              MOVS     r4,#0
000054  f1ba0f00          CMP      r10,#0
000058  dd12              BLE      |L6.128|
                  |L6.90|
00005a  68a9              LDR      r1,[r5,#8]
00005c  6928              LDR      r0,[r5,#0x10]
00005e  e9cd7600          STRD     r7,r6,[sp,#0]
000062  fb040101          MLA      r1,r4,r1,r0
000066  b223              SXTH     r3,r4
000068  465a              MOV      r2,r11
00006a  4640              MOV      r0,r8
00006c  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisss ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
000070  2800              CMP      r0,#0
000072  bf1c              ITT      NE
000074  b009              ADDNE    sp,sp,#0x24
000076  e8bd8ff0          POPNE    {r4-r11,pc}
00007a  1c64              ADDS     r4,r4,#1
00007c  4554              CMP      r4,r10
00007e  dbec              BLT      |L6.90|
                  |L6.128|
000080  4640              MOV      r0,r8
000082  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEv ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Finalize()
000086  2800              CMP      r0,#0
000088  bf1c              ITT      NE
00008a  b009              ADDNE    sp,sp,#0x24
00008c  e8bd8ff0          POPNE    {r4-r11,pc}
000090  e03d              B        |L6.270|
                  |L6.146|
000092  f5007a8c          ADD      r10,r0,#0x118         ;45
000096  460d              MOV      r5,r1                 ;45
000098  4617              MOV      r7,r2                 ;45
00009a  461e              MOV      r6,r3                 ;45
00009c  4661              MOV      r1,r12                ;45
00009e  a802              ADD      r0,sp,#8              ;45
0000a0  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0000a4  4604              MOV      r4,r0                 ;45
0000a6  2100              MOVS     r1,#0                 ;45
0000a8  4628              MOV      r0,r5                 ;45
0000aa  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000ae  4680              MOV      r8,r0                 ;45
0000b0  2101              MOVS     r1,#1                 ;45
0000b2  4628              MOV      r0,r5                 ;45
0000b4  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000b8  4623              MOV      r3,r4                 ;45
0000ba  4683              MOV      r11,r0                ;45
0000bc  461a              MOV      r2,r3                 ;45
0000be  4611              MOV      r1,r2                 ;45
0000c0  4650              MOV      r0,r10                ;45
0000c2  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_ ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
0000c6  2800              CMP      r0,#0                 ;45
0000c8  bf1c              ITT      NE
0000ca  b009              ADDNE    sp,sp,#0x24
0000cc  e8bd8ff0          POPNE    {r4-r11,pc}
0000d0  2400              MOVS     r4,#0
0000d2  f1b80f00          CMP      r8,#0
0000d6  dd12              BLE      |L6.254|
                  |L6.216|
0000d8  68a9              LDR      r1,[r5,#8]
0000da  6928              LDR      r0,[r5,#0x10]
0000dc  e9cd7600          STRD     r7,r6,[sp,#0]
0000e0  fb040101          MLA      r1,r4,r1,r0
0000e4  b223              SXTH     r3,r4
0000e6  465a              MOV      r2,r11
0000e8  4650              MOV      r0,r10
0000ea  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisss ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
0000ee  2800              CMP      r0,#0
0000f0  bf1c              ITT      NE
0000f2  b009              ADDNE    sp,sp,#0x24
0000f4  e8bd8ff0          POPNE    {r4-r11,pc}
0000f8  1c64              ADDS     r4,r4,#1
0000fa  4544              CMP      r4,r8
0000fc  dbec              BLT      |L6.216|
                  |L6.254|
0000fe  4650              MOV      r0,r10
000100  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEv ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Finalize()
000104  2800              CMP      r0,#0
000106  bf1c              ITT      NE
000108  b009              ADDNE    sp,sp,#0x24
00010a  e8bd8ff0          POPNE    {r4-r11,pc}
                  |L6.270|
00010e  4648              MOV      r0,r9
000110  b009              ADD      sp,sp,#0x24
000112  e8bd8ff0          POP      {r4-r11,pc}
;;;47     
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents30SortConnectedComponentSegmentsEv||, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded19ConnectedComponents30SortConnectedComponentSegmentsEv PROC ; Anki::Embedded::ConnectedComponents::SortConnectedComponentSegments()
;;;65     
;;;66         Result ConnectedComponents::SortConnectedComponentSegments()
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;67         {
000004  4607              MOV      r7,r0
000006  ed2d8b02          VPUSH    {d8}
00000a  b089              SUB      sp,sp,#0x24
;;;68           if(this->useU16) { return this->componentsU16.SortConnectedComponentSegments(); }
00000c  7800              LDRB     r0,[r0,#0]
00000e  ed9f8b88          VLDR     d8,|L7.560|
000012  2800              CMP      r0,#0
000014  d078              BEQ      |L7.264|
000016  6938              LDR      r0,[r7,#0x10]         ;67
000018  f8d79034          LDR      r9,[r7,#0x34]         ;67
00001c  f04f0801          MOV      r8,#1                 ;67
000020  9007              STR      r0,[sp,#0x1c]         ;67
000022  2801              CMP      r0,#1                 ;67
000024  dd68              BLE      |L7.248|
                  |L7.38|
000026  eb0901c8          ADD      r1,r9,r8,LSL #3       ;67
00002a  4668              MOV      r0,sp                 ;67
00002c  f7fffffe          BL       __ARM_common_memcpy4_8
000030  f8bd0006          LDRH     r0,[sp,#6]            ;67
000034  9006              STR      r0,[sp,#0x18]         ;67
000036  1e40              SUBS     r0,r0,#1              ;67
000038  9008              STR      r0,[sp,#0x20]         ;67
00003a  f9bd0004          LDRSH    r0,[sp,#4]            ;67
00003e  9005              STR      r0,[sp,#0x14]         ;67
000040  17c0              ASRS     r0,r0,#31             ;67
000042  9002              STR      r0,[sp,#8]            ;67
000044  f9bd0000          LDRSH    r0,[sp,#0]            ;67
000048  9003              STR      r0,[sp,#0xc]          ;67
00004a  17c0              ASRS     r0,r0,#31             ;67
00004c  4644              MOV      r4,r8                 ;67
00004e  9004              STR      r0,[sp,#0x10]         ;67
000050  e005              B        |L7.94|
                  |L7.82|
000052  f1a60108          SUB      r1,r6,#8              ;67
000056  4630              MOV      r0,r6                 ;67
000058  f7fffffe          BL       __ARM_common_memcpy4_8
00005c  1e64              SUBS     r4,r4,#1              ;67
                  |L7.94|
00005e  2c00              CMP      r4,#0                 ;67
000060  dd40              BLE      |L7.228|
000062  eb0906c4          ADD      r6,r9,r4,LSL #3       ;67
000066  9806              LDR      r0,[sp,#0x18]         ;67
000068  f836ac02          LDRH     r10,[r6,#-2]          ;67
00006c  f1a60508          SUB      r5,r6,#8              ;67
000070  2800              CMP      r0,#0                 ;67
000072  bf1c              ITT      NE                    ;67
000074  9808              LDRNE    r0,[sp,#0x20]         ;67
000076  fa1ffb80          UXTHNE   r11,r0                ;67
00007a  d046              BEQ      |L7.266|
                  |L7.124|
00007c  f1ba0f00          CMP      r10,#0                ;67
000080  bf07              ITTEE    EQ                    ;67
000082  eeb00a48          VMOVEQ.F32 s0,s16                ;67
000086  eef00a68          VMOVEQ.F32 s1,s17                ;67
00008a  f1aa0001          SUBNE    r0,r10,#1             ;67
00008e  b280              UXTHNE   r0,r0                 ;67
000090  bf08              IT       EQ                    ;67
000092  f7fffffe          BLEQ     _ZN4Anki8Embedded13saturate_castItEET_d ; Anki::Embedded::saturate_cast<unsigned short>(double)
000096  2100              MOVS     r1,#0                 ;67
000098  ebbb0000          SUBS     r0,r11,r0             ;67
00009c  eb610101          SBC      r1,r1,r1              ;67
0000a0  0789              LSLS     r1,r1,#30             ;67
0000a2  ea410290          ORR      r2,r1,r0,LSR #2       ;67
0000a6  ea4f7a80          LSL      r10,r0,#30            ;67
0000aa  f9b50004          LDRSH    r0,[r5,#4]            ;67
0000ae  9905              LDR      r1,[sp,#0x14]         ;67
0000b0  ea4f7ce0          ASR      r12,r0,#31            ;67
0000b4  9b02              LDR      r3,[sp,#8]            ;67
0000b6  1a08              SUBS     r0,r1,r0              ;67
0000b8  eb63010c          SBC      r1,r3,r12             ;67
0000bc  03c9              LSLS     r1,r1,#15             ;67
0000be  f9b53000          LDRSH    r3,[r5,#0]            ;67
0000c2  e9ddcb03          LDRD     r12,r11,[sp,#0xc]     ;67
0000c6  ea414150          ORR      r1,r1,r0,LSR #17      ;67
0000ca  03c0              LSLS     r0,r0,#15             ;67
0000cc  17dd              ASRS     r5,r3,#31             ;67
0000ce  ebbc0303          SUBS     r3,r12,r3             ;67
0000d2  eb6b0c05          SBC      r12,r11,r5            ;67
0000d6  eb1a0000          ADDS     r0,r10,r0             ;67
0000da  4151              ADCS     r1,r1,r2              ;67
0000dc  18c0              ADDS     r0,r0,r3              ;67
0000de  eb51000c          ADCS     r0,r1,r12             ;67
0000e2  d4b6              BMI      |L7.82|
                  |L7.228|
0000e4  eb0900c4          ADD      r0,r9,r4,LSL #3       ;67
0000e8  4669              MOV      r1,sp                 ;67
0000ea  f7fffffe          BL       __ARM_common_memcpy4_8
0000ee  9807              LDR      r0,[sp,#0x1c]         ;67
0000f0  f1080801          ADD      r8,r8,#1              ;67
0000f4  4580              CMP      r8,r0                 ;67
0000f6  db96              BLT      |L7.38|
                  |L7.248|
0000f8  2001              MOVS     r0,#1                 ;67
0000fa  f8870109          STRB     r0,[r7,#0x109]        ;67
0000fe  f887010a          STRB     r0,[r7,#0x10a]        ;67
000102  f887010b          STRB     r0,[r7,#0x10b]        ;67
000106  e08b              B        |L7.544|
                  |L7.264|
000108  e007              B        |L7.282|
                  |L7.266|
00010a  eeb00a48          VMOV.F32 s0,s16
00010e  eef00a68          VMOV.F32 s1,s17
000112  f7fffffe          BL       _ZN4Anki8Embedded13saturate_castItEET_d ; Anki::Embedded::saturate_cast<unsigned short>(double)
000116  4683              MOV      r11,r0
000118  e7b0              B        |L7.124|
                  |L7.282|
00011a  f8d70124          LDR      r0,[r7,#0x124]
00011e  f8d79148          LDR      r9,[r7,#0x148]
000122  f04f0801          MOV      r8,#1
000126  9007              STR      r0,[sp,#0x1c]
000128  2801              CMP      r0,#1
00012a  dd72              BLE      |L7.530|
                  |L7.300|
00012c  eb080048          ADD      r0,r8,r8,LSL #1
000130  eb090080          ADD      r0,r9,r0,LSL #2
000134  4644              MOV      r4,r8
000136  e9d01200          LDRD     r1,r2,[r0,#0]
00013a  f8d0a008          LDR      r10,[r0,#8]
00013e  b210              SXTH     r0,r2
000140  9002              STR      r0,[sp,#8]
000142  17c0              ASRS     r0,r0,#31
000144  9003              STR      r0,[sp,#0xc]
000146  e9cd1200          STRD     r1,r2,[sp,#0]
00014a  b208              SXTH     r0,r1
00014c  9004              STR      r0,[sp,#0x10]
00014e  17c0              ASRS     r0,r0,#31
000150  9005              STR      r0,[sp,#0x14]
000152  e007              B        |L7.356|
                  |L7.340|
000154  f8562c04          LDR      r2,[r6,#-4]
000158  e9560103          LDRD     r0,r1,[r6,#-0xc]
00015c  60b2              STR      r2,[r6,#8]
00015e  e9c60100          STRD     r0,r1,[r6,#0]
000162  1e64              SUBS     r4,r4,#1
                  |L7.356|
000164  2c00              CMP      r4,#0
000166  dd45              BLE      |L7.500|
000168  eb040044          ADD      r0,r4,r4,LSL #1
00016c  eb090680          ADD      r6,r9,r0,LSL #2
000170  f1a6050c          SUB      r5,r6,#0xc
000174  f856bc04          LDR      r11,[r6,#-4]
000178  f1ba0f00          CMP      r10,#0
00017c  bfdb              ITTET    LE
00017e  eeb00a48          VMOVLE.F32 s0,s16
000182  eef00a68          VMOVLE.F32 s1,s17
000186  f1aa0001          SUBGT    r0,r10,#1
00018a  f7fffffe          BLLE     _ZN4Anki8Embedded13saturate_castIiEET_d ; Anki::Embedded::saturate_cast<int>(double)
00018e  9006              STR      r0,[sp,#0x18]
000190  f1bb0f00          CMP      r11,#0
000194  bfdb              ITTET    LE
000196  eeb00a48          VMOVLE.F32 s0,s16
00019a  eef00a68          VMOVLE.F32 s1,s17
00019e  f1ab0001          SUBGT    r0,r11,#1
0001a2  f7fffffe          BLLE     _ZN4Anki8Embedded13saturate_castIiEET_d ; Anki::Embedded::saturate_cast<int>(double)
0001a6  9906              LDR      r1,[sp,#0x18]
0001a8  17c3              ASRS     r3,r0,#31
0001aa  17ca              ASRS     r2,r1,#31
0001ac  1a08              SUBS     r0,r1,r0
0001ae  eb620103          SBC      r1,r2,r3
0001b2  0789              LSLS     r1,r1,#30
0001b4  ea410e90          ORR      lr,r1,r0,LSR #2
0001b8  0783              LSLS     r3,r0,#30
0001ba  f9b50004          LDRSH    r0,[r5,#4]
0001be  e9dd1202          LDRD     r1,r2,[sp,#8]
0001c2  ea4f7ce0          ASR      r12,r0,#31
0001c6  1a08              SUBS     r0,r1,r0
0001c8  eb62010c          SBC      r1,r2,r12
0001cc  03c9              LSLS     r1,r1,#15
0001ce  f9b52000          LDRSH    r2,[r5,#0]
0001d2  e9ddcb04          LDRD     r12,r11,[sp,#0x10]
0001d6  ea414150          ORR      r1,r1,r0,LSR #17
0001da  03c0              LSLS     r0,r0,#15
0001dc  17d5              ASRS     r5,r2,#31
0001de  ebbc0202          SUBS     r2,r12,r2
0001e2  eb6b0c05          SBC      r12,r11,r5
0001e6  1818              ADDS     r0,r3,r0
0001e8  eb4e0101          ADC      r1,lr,r1
0001ec  1880              ADDS     r0,r0,r2
0001ee  eb51000c          ADCS     r0,r1,r12
0001f2  d4af              BMI      |L7.340|
                  |L7.500|
0001f4  eb040044          ADD      r0,r4,r4,LSL #1
0001f8  e9dd1200          LDRD     r1,r2,[sp,#0]
0001fc  eb090080          ADD      r0,r9,r0,LSL #2
000200  f1080801          ADD      r8,r8,#1
000204  f8c0a008          STR      r10,[r0,#8]
000208  e9c01200          STRD     r1,r2,[r0,#0]
00020c  9807              LDR      r0,[sp,#0x1c]
00020e  4580              CMP      r8,r0
000210  db8c              BLT      |L7.300|
                  |L7.530|
000212  2001              MOVS     r0,#1
000214  f887021d          STRB     r0,[r7,#0x21d]
000218  f887021e          STRB     r0,[r7,#0x21e]
00021c  f887021f          STRB     r0,[r7,#0x21f]
                  |L7.544|
;;;69           else { return this->componentsS32.SortConnectedComponentSegments(); }
;;;70         }
000220  b009              ADD      sp,sp,#0x24
000222  2000              MOVS     r0,#0
000224  ecbd8b02          VPOP     {d8}
000228  e8bd8ff0          POP      {r4-r11,pc}
;;;71     
                          ENDP

                          DCD      0x00000000
                  |L7.560|
000230  2594c37d          DCFD     0x54b249ad2594c37d ; 1e+100
000234  54b249ad

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded19ConnectedComponents32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)
;;;107    
;;;108        Result ConnectedComponents::InvalidateSmallOrLargeComponents(const s32 minimumNumPixels, const s32 maximumNumPixels, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;109        {
;;;110          if(this->useU16) { return this->componentsU16.InvalidateSmallOrLargeComponents(minimumNumPixels, maximumNumPixels, scratch); }
000004  f890c000          LDRB     r12,[r0,#0]
000008  b089              SUB      sp,sp,#0x24           ;109
00000a  f2402ba7          MOV      r11,#0x2a7            ;109
00000e  f04f0a00          MOV      r10,#0                ;109
000012  f1bc0f00          CMP      r12,#0
000016  d053              BEQ      |L8.192|
000018  1d04              ADDS     r4,r0,#4
00001a  4689              MOV      r9,r1
00001c  4690              MOV      r8,r2
00001e  4619              MOV      r1,r3
000020  a802              ADD      r0,sp,#8
000022  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000026  f8b41108          LDRH     r1,[r4,#0x108]
00002a  6b27              LDR      r7,[r4,#0x30]
00002c  0089              LSLS     r1,r1,#2
00002e  1d09              ADDS     r1,r1,#4
000030  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000034  68e5              LDR      r5,[r4,#0xc]
000036  0006              MOVS     r6,r0
000038  d035              BEQ      |L8.166|
00003a  f8b40108          LDRH     r0,[r4,#0x108]
00003e  0080              LSLS     r0,r0,#2
000040  1d01              ADDS     r1,r0,#4
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       __aeabi_memclr4
000048  2100              MOVS     r1,#0
00004a  2d00              CMP      r5,#0
00004c  dd10              BLE      |L8.112|
                  |L8.78|
00004e  eb0702c1          ADD      r2,r7,r1,LSL #3
000052  f8373031          LDRH     r3,[r7,r1,LSL #3]
000056  88d0              LDRH     r0,[r2,#6]
000058  8852              LDRH     r2,[r2,#2]
00005a  1c49              ADDS     r1,r1,#1
00005c  1ad2              SUBS     r2,r2,r3
00005e  1c52              ADDS     r2,r2,#1
000060  f8563020          LDR      r3,[r6,r0,LSL #2]
000064  b212              SXTH     r2,r2
000066  441a              ADD      r2,r2,r3
000068  f8462020          STR      r2,[r6,r0,LSL #2]
00006c  428d              CMP      r5,r1
00006e  dcee              BGT      |L8.78|
                  |L8.112|
000070  2000              MOVS     r0,#0
000072  6b23              LDR      r3,[r4,#0x30]
000074  2d00              CMP      r5,#0
000076  dd0d              BLE      |L8.148|
                  |L8.120|
000078  eb0301c0          ADD      r1,r3,r0,LSL #3
00007c  88ca              LDRH     r2,[r1,#6]
00007e  f8562022          LDR      r2,[r6,r2,LSL #2]
000082  454a              CMP      r2,r9
000084  db01              BLT      |L8.138|
000086  4542              CMP      r2,r8
000088  dd01              BLE      |L8.142|
                  |L8.138|
00008a  f8a1a006          STRH     r10,[r1,#6]
                  |L8.142|
00008e  1c40              ADDS     r0,r0,#1
000090  42a8              CMP      r0,r5
000092  dbf1              BLT      |L8.120|
                  |L8.148|
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::FindMaximumId()
00009a  f884a105          STRB     r10,[r4,#0x105]
;;;111          else { return this->componentsS32.InvalidateSmallOrLargeComponents(minimumNumPixels, maximumNumPixels, scratch); }
;;;112        }
00009e  b009              ADD      sp,sp,#0x24
0000a0  4650              MOV      r0,r10
0000a2  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.166|
0000a6  4833              LDR      r0,|L8.372|
0000a8  e9cd0b00          STRD     r0,r11,[sp,#0]
0000ac  4b32              LDR      r3,|L8.376|
0000ae  a233              ADR      r2,|L8.380|
0000b0  a13b              ADR      r1,|L8.416|
0000b2  2005              MOVS     r0,#5
0000b4  f7fffffe          BL       _Anki_Log
0000b8  b009              ADD      sp,sp,#0x24
0000ba  4842              LDR      r0,|L8.452|
0000bc  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.192|
0000c0  f500748c          ADD      r4,r0,#0x118          ;111
0000c4  4689              MOV      r9,r1                 ;111
0000c6  4690              MOV      r8,r2                 ;111
0000c8  4619              MOV      r1,r3                 ;111
0000ca  a802              ADD      r0,sp,#8              ;111
0000cc  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0000d0  f8d41108          LDR      r1,[r4,#0x108]        ;111
0000d4  6b27              LDR      r7,[r4,#0x30]         ;111
0000d6  0089              LSLS     r1,r1,#2              ;111
0000d8  1d09              ADDS     r1,r1,#4              ;111
0000da  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
0000de  68e5              LDR      r5,[r4,#0xc]          ;111
0000e0  0006              MOVS     r6,r0                 ;111
0000e2  d039              BEQ      |L8.344|
0000e4  f8d40108          LDR      r0,[r4,#0x108]        ;111
0000e8  0080              LSLS     r0,r0,#2              ;111
0000ea  1d01              ADDS     r1,r0,#4              ;111
0000ec  4630              MOV      r0,r6                 ;111
0000ee  f7fffffe          BL       __aeabi_memclr4
0000f2  2000              MOVS     r0,#0                 ;111
0000f4  2d00              CMP      r5,#0                 ;111
0000f6  dd12              BLE      |L8.286|
                  |L8.248|
0000f8  eb000240          ADD      r2,r0,r0,LSL #1       ;111
0000fc  eb070382          ADD      r3,r7,r2,LSL #2       ;111
000100  f8372022          LDRH     r2,[r7,r2,LSL #2]     ;111
000104  6899              LDR      r1,[r3,#8]            ;111
000106  885b              LDRH     r3,[r3,#2]            ;111
000108  1c40              ADDS     r0,r0,#1              ;111
00010a  1a9a              SUBS     r2,r3,r2              ;111
00010c  1c52              ADDS     r2,r2,#1              ;111
00010e  f8563021          LDR      r3,[r6,r1,LSL #2]     ;111
000112  b212              SXTH     r2,r2                 ;111
000114  441a              ADD      r2,r2,r3              ;111
000116  f8462021          STR      r2,[r6,r1,LSL #2]     ;111
00011a  4285              CMP      r5,r0                 ;111
00011c  dcec              BGT      |L8.248|
                  |L8.286|
00011e  2000              MOVS     r0,#0                 ;111
000120  6b23              LDR      r3,[r4,#0x30]         ;111
000122  2d00              CMP      r5,#0                 ;111
000124  dd0f              BLE      |L8.326|
                  |L8.294|
000126  eb000140          ADD      r1,r0,r0,LSL #1       ;111
00012a  eb030181          ADD      r1,r3,r1,LSL #2       ;111
00012e  688a              LDR      r2,[r1,#8]            ;111
000130  f8562022          LDR      r2,[r6,r2,LSL #2]     ;111
000134  454a              CMP      r2,r9                 ;111
000136  db01              BLT      |L8.316|
000138  4542              CMP      r2,r8                 ;111
00013a  dd01              BLE      |L8.320|
                  |L8.316|
00013c  f8c1a008          STR      r10,[r1,#8]           ;111
                  |L8.320|
000140  1c40              ADDS     r0,r0,#1              ;111
000142  42a8              CMP      r0,r5                 ;111
000144  dbef              BLT      |L8.294|
                  |L8.326|
000146  4620              MOV      r0,r4                 ;111
000148  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<int>::FindMaximumId()
00014c  f884a105          STRB     r10,[r4,#0x105]       ;111
000150  b009              ADD      sp,sp,#0x24
000152  4650              MOV      r0,r10
000154  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.344|
000158  481b              LDR      r0,|L8.456|
00015a  e9cd0b00          STRD     r0,r11,[sp,#0]
00015e  4b06              LDR      r3,|L8.376|
000160  a206              ADR      r2,|L8.380|
000162  a10f              ADR      r1,|L8.416|
000164  2005              MOVS     r0,#5
000166  f7fffffe          BL       _Anki_Log
00016a  b009              ADD      sp,sp,#0x24
00016c  4815              LDR      r0,|L8.452|
00016e  e8bd8ff0          POP      {r4-r11,pc}
;;;113    
                          ENDP

000172  0000              DCW      0x0000
                  |L8.372|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
                  |L8.376|
                          DCD      ||.constdata||+0x98
                  |L8.380|
00017c  436f756c          DCB      "Couldn't allocate componentSizes",0
000180  646e2774
000184  20616c6c
000188  6f636174
00018c  6520636f
000190  6d706f6e
000194  656e7453
000198  697a6573
00019c  00      
00019d  00                DCB      0
00019e  00                DCB      0
00019f  00                DCB      0
                  |L8.416|
0001a0  496e7661          DCB      "InvalidateSmallOrLargeComponents",0
0001a4  6c696461
0001a8  7465536d
0001ac  616c6c4f
0001b0  724c6172
0001b4  6765436f
0001b8  6d706f6e
0001bc  656e7473
0001c0  00      
0001c1  00                DCB      0
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L8.452|
                          DCD      0x01000001
                  |L8.456|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded19ConnectedComponents33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)
;;;113    
;;;114        Result ConnectedComponents::InvalidateSolidOrSparseComponents(const s32 sparseMultiplyThreshold, const s32 solidMultiplyThreshold, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;115        {
;;;116          if(this->useU16) { return this->componentsU16.InvalidateSolidOrSparseComponents(sparseMultiplyThreshold, solidMultiplyThreshold, scratch); }
000004  f890c000          LDRB     r12,[r0,#0]
000008  f8dfb3c0          LDR      r11,|L9.972|
00000c  b08b              SUB      sp,sp,#0x2c           ;115
00000e  f1bc0f00          CMP      r12,#0
000012  f00080ec          BEQ.W    |L9.494|
000016  e9cd1200          STRD     r1,r2,[sp,#0]
00001a  1d04              ADDS     r4,r0,#4
00001c  4619              MOV      r1,r3
00001e  a802              ADD      r0,sp,#8
000020  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000024  4681              MOV      r9,r0
000026  6b20              LDR      r0,[r4,#0x30]
000028  9009              STR      r0,[sp,#0x24]
00002a  f8b40108          LDRH     r0,[r4,#0x108]
00002e  f8d4a00c          LDR      r10,[r4,#0xc]
000032  0040              LSLS     r0,r0,#1
000034  1c81              ADDS     r1,r0,#2
000036  4648              MOV      r0,r9
000038  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
00003c  4605              MOV      r5,r0
00003e  f8b40108          LDRH     r0,[r4,#0x108]
000042  0040              LSLS     r0,r0,#1
000044  1c81              ADDS     r1,r0,#2
000046  4648              MOV      r0,r9
000048  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
00004c  4680              MOV      r8,r0
00004e  f8b40108          LDRH     r0,[r4,#0x108]
000052  0040              LSLS     r0,r0,#1
000054  1c81              ADDS     r1,r0,#2
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
00005c  4607              MOV      r7,r0
00005e  f8b40108          LDRH     r0,[r4,#0x108]
000062  0040              LSLS     r0,r0,#1
000064  1c81              ADDS     r1,r0,#2
000066  4648              MOV      r0,r9
000068  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
00006c  4606              MOV      r6,r0
00006e  f8b40108          LDRH     r0,[r4,#0x108]
000072  0080              LSLS     r0,r0,#2
000074  1d01              ADDS     r1,r0,#4
000076  4648              MOV      r0,r9
000078  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
00007c  4681              MOV      r9,r0
00007e  2d00              CMP      r5,#0
000080  bf18              IT       NE
000082  f1b80f00          CMPNE    r8,#0
000086  d07d              BEQ      |L9.388|
000088  2f00              CMP      r7,#0
00008a  bf1c              ITT      NE
00008c  2e00              CMPNE    r6,#0
00008e  f1b90f00          CMPNE    r9,#0
000092  d077              BEQ      |L9.388|
000094  f8b40108          LDRH     r0,[r4,#0x108]
000098  0080              LSLS     r0,r0,#2
00009a  1d01              ADDS     r1,r0,#4
00009c  4648              MOV      r0,r9
00009e  f7fffffe          BL       __aeabi_memclr4
0000a2  f8b41108          LDRH     r1,[r4,#0x108]
0000a6  2000              MOVS     r0,#0
0000a8  2900              CMP      r1,#0
0000aa  bfa4              ITT      GE
0000ac  f64771ff          MOVGE    r1,#0x7fff
0000b0  43ca              MVNGE    r2,r1
0000b2  db0c              BLT      |L9.206|
                  |L9.180|
0000b4  f8251010          STRH     r1,[r5,r0,LSL #1]
0000b8  f8282010          STRH     r2,[r8,r0,LSL #1]
0000bc  f8271010          STRH     r1,[r7,r0,LSL #1]
0000c0  f8262010          STRH     r2,[r6,r0,LSL #1]
0000c4  f8b43108          LDRH     r3,[r4,#0x108]
0000c8  1c40              ADDS     r0,r0,#1
0000ca  4283              CMP      r3,r0
0000cc  daf2              BGE      |L9.180|
                  |L9.206|
0000ce  2100              MOVS     r1,#0
0000d0  f1ba0f00          CMP      r10,#0
0000d4  dd35              BLE      |L9.322|
                  |L9.214|
0000d6  9809              LDR      r0,[sp,#0x24]
0000d8  f8ddc024          LDR      r12,[sp,#0x24]
0000dc  eb0003c1          ADD      r3,r0,r1,LSL #3
0000e0  88d8              LDRH     r0,[r3,#6]
0000e2  f9b32004          LDRSH    r2,[r3,#4]
0000e6  f93cc031          LDRSH    r12,[r12,r1,LSL #3]
0000ea  f9b33002          LDRSH    r3,[r3,#2]
0000ee  f859e020          LDR      lr,[r9,r0,LSL #2]
0000f2  eba30b0c          SUB      r11,r3,r12
0000f6  f10b0b01          ADD      r11,r11,#1
0000fa  fa0ffb8b          SXTH     r11,r11
0000fe  44f3              ADD      r11,r11,lr
000100  f849b020          STR      r11,[r9,r0,LSL #2]
000104  f935b010          LDRSH    r11,[r5,r0,LSL #1]
000108  45e3              CMP      r11,r12
00010a  bfb8              IT       LT
00010c  46dc              MOVLT    r12,r11
00010e  f825c010          STRH     r12,[r5,r0,LSL #1]
000112  f938c010          LDRSH    r12,[r8,r0,LSL #1]
000116  459c              CMP      r12,r3
000118  bfc8              IT       GT
00011a  4663              MOVGT    r3,r12
00011c  f8283010          STRH     r3,[r8,r0,LSL #1]
000120  f9373010          LDRSH    r3,[r7,r0,LSL #1]
000124  4293              CMP      r3,r2
000126  bfa8              IT       GE
000128  4613              MOVGE    r3,r2
00012a  f8273010          STRH     r3,[r7,r0,LSL #1]
00012e  f9363010          LDRSH    r3,[r6,r0,LSL #1]
000132  4293              CMP      r3,r2
000134  bfc8              IT       GT
000136  461a              MOVGT    r2,r3
000138  f8262010          STRH     r2,[r6,r0,LSL #1]
00013c  1c49              ADDS     r1,r1,#1
00013e  4551              CMP      r1,r10
000140  dbc9              BLT      |L9.214|
                  |L9.322|
000142  f8b41108          LDRH     r1,[r4,#0x108]
000146  2000              MOVS     r0,#0
000148  2900              CMP      r1,#0
00014a  bfa8              IT       GE
00014c  f8dfc280          LDRGE    r12,|L9.976|
000150  db22              BLT      |L9.408|
                  |L9.338|
000152  f9381010          LDRSH    r1,[r8,r0,LSL #1]
000156  f9352010          LDRSH    r2,[r5,r0,LSL #1]
00015a  f9373010          LDRSH    r3,[r7,r0,LSL #1]
00015e  1a89              SUBS     r1,r1,r2
000160  f9362010          LDRSH    r2,[r6,r0,LSL #1]
000164  1c49              ADDS     r1,r1,#1
000166  1ad2              SUBS     r2,r2,r3
000168  1c52              ADDS     r2,r2,#1
00016a  4351              MULS     r1,r2,r1
00016c  f8592020          LDR      r2,[r9,r0,LSL #2]
000170  9b00              LDR      r3,[sp,#0]
000172  f8ddb004          LDR      r11,[sp,#4]
000176  4353              MULS     r3,r2,r3
000178  0149              LSLS     r1,r1,#5
00017a  fb02f20b          MUL      r2,r2,r11
00017e  428b              CMP      r3,r1
000180  db03              BLT      |L9.394|
000182  e000              B        |L9.390|
                  |L9.388|
000184  e024              B        |L9.464|
                  |L9.390|
000186  428a              CMP      r2,r1
000188  dd01              BLE      |L9.398|
                  |L9.394|
00018a  f825c010          STRH     r12,[r5,r0,LSL #1]
                  |L9.398|
00018e  f8b41108          LDRH     r1,[r4,#0x108]
000192  1c40              ADDS     r0,r0,#1
000194  4281              CMP      r1,r0
000196  dadc              BGE      |L9.338|
                  |L9.408|
000198  2000              MOVS     r0,#0
00019a  f8d4c030          LDR      r12,[r4,#0x30]
00019e  f1ba0f00          CMP      r10,#0
0001a2  bfc8              IT       GT
0001a4  2300              MOVGT    r3,#0
0001a6  dd0a              BLE      |L9.446|
                  |L9.424|
0001a8  eb0c01c0          ADD      r1,r12,r0,LSL #3
0001ac  88ca              LDRH     r2,[r1,#6]
0001ae  f9352012          LDRSH    r2,[r5,r2,LSL #1]
0001b2  2a00              CMP      r2,#0
0001b4  bfb8              IT       LT
0001b6  80cb              STRHLT   r3,[r1,#6]
0001b8  1c40              ADDS     r0,r0,#1
0001ba  4550              CMP      r0,r10
0001bc  dbf4              BLT      |L9.424|
                  |L9.446|
0001be  4620              MOV      r0,r4
0001c0  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::FindMaximumId()
0001c4  2000              MOVS     r0,#0
0001c6  f8840105          STRB     r0,[r4,#0x105]
;;;117          else { return this->componentsS32.InvalidateSolidOrSparseComponents(sparseMultiplyThreshold, solidMultiplyThreshold, scratch); }
;;;118        }
0001ca  b00b              ADD      sp,sp,#0x2c
0001cc  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.464|
0001d0  f24021d2          MOV      r1,#0x2d2
0001d4  487f              LDR      r0,|L9.980|
0001d6  e9cd0100          STRD     r0,r1,[sp,#0]
0001da  4b7f              LDR      r3,|L9.984|
0001dc  a27f              ADR      r2,|L9.988|
0001de  a18e              ADR      r1,|L9.1048|
0001e0  2005              MOVS     r0,#5
0001e2  f7fffffe          BL       _Anki_Log
0001e6  b00b              ADD      sp,sp,#0x2c
0001e8  4658              MOV      r0,r11
0001ea  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.494|
0001ee  e9cd1200          STRD     r1,r2,[sp,#0]         ;117
0001f2  f500748c          ADD      r4,r0,#0x118          ;117
0001f6  4619              MOV      r1,r3                 ;117
0001f8  a802              ADD      r0,sp,#8              ;117
0001fa  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0001fe  4681              MOV      r9,r0                 ;117
000200  6b20              LDR      r0,[r4,#0x30]         ;117
000202  9009              STR      r0,[sp,#0x24]         ;117
000204  f8d40108          LDR      r0,[r4,#0x108]        ;117
000208  f8d4a00c          LDR      r10,[r4,#0xc]         ;117
00020c  0040              LSLS     r0,r0,#1              ;117
00020e  1c81              ADDS     r1,r0,#2              ;117
000210  4648              MOV      r0,r9                 ;117
000212  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000216  4605              MOV      r5,r0                 ;117
000218  f8d40108          LDR      r0,[r4,#0x108]        ;117
00021c  0040              LSLS     r0,r0,#1              ;117
00021e  1c81              ADDS     r1,r0,#2              ;117
000220  4648              MOV      r0,r9                 ;117
000222  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000226  4680              MOV      r8,r0                 ;117
000228  f8d40108          LDR      r0,[r4,#0x108]        ;117
00022c  0040              LSLS     r0,r0,#1              ;117
00022e  1c81              ADDS     r1,r0,#2              ;117
000230  4648              MOV      r0,r9                 ;117
000232  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000236  4607              MOV      r7,r0                 ;117
000238  f8d40108          LDR      r0,[r4,#0x108]        ;117
00023c  0040              LSLS     r0,r0,#1              ;117
00023e  1c81              ADDS     r1,r0,#2              ;117
000240  4648              MOV      r0,r9                 ;117
000242  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000246  4606              MOV      r6,r0                 ;117
000248  f8d40108          LDR      r0,[r4,#0x108]        ;117
00024c  0080              LSLS     r0,r0,#2              ;117
00024e  1d01              ADDS     r1,r0,#4              ;117
000250  4648              MOV      r0,r9                 ;117
000252  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000256  4681              MOV      r9,r0                 ;117
000258  2d00              CMP      r5,#0                 ;117
00025a  bf18              IT       NE                    ;117
00025c  f1b80f00          CMPNE    r8,#0                 ;117
000260  d07e              BEQ      |L9.864|
000262  2f00              CMP      r7,#0                 ;117
000264  bf1c              ITT      NE                    ;117
000266  2e00              CMPNE    r6,#0                 ;117
000268  f1b90f00          CMPNE    r9,#0                 ;117
00026c  d078              BEQ      |L9.864|
00026e  f8d40108          LDR      r0,[r4,#0x108]        ;117
000272  0080              LSLS     r0,r0,#2              ;117
000274  1d01              ADDS     r1,r0,#4              ;117
000276  4648              MOV      r0,r9                 ;117
000278  f7fffffe          BL       __aeabi_memclr4
00027c  f8d41108          LDR      r1,[r4,#0x108]        ;117
000280  2000              MOVS     r0,#0                 ;117
000282  2900              CMP      r1,#0                 ;117
000284  bfa4              ITT      GE                    ;117
000286  f64772ff          MOVGE    r2,#0x7fff            ;117
00028a  43d1              MVNGE    r1,r2                 ;117
00028c  db0c              BLT      |L9.680|
                  |L9.654|
00028e  f8252010          STRH     r2,[r5,r0,LSL #1]     ;117
000292  f8281010          STRH     r1,[r8,r0,LSL #1]     ;117
000296  f8272010          STRH     r2,[r7,r0,LSL #1]     ;117
00029a  f8261010          STRH     r1,[r6,r0,LSL #1]     ;117
00029e  f8d43108          LDR      r3,[r4,#0x108]        ;117
0002a2  1c40              ADDS     r0,r0,#1              ;117
0002a4  4283              CMP      r3,r0                 ;117
0002a6  daf2              BGE      |L9.654|
                  |L9.680|
0002a8  2200              MOVS     r2,#0                 ;117
0002aa  f1ba0f00          CMP      r10,#0                ;117
0002ae  dd38              BLE      |L9.802|
                  |L9.688|
0002b0  9809              LDR      r0,[sp,#0x24]         ;117
0002b2  eb020342          ADD      r3,r2,r2,LSL #1       ;117
0002b6  eb000c83          ADD      r12,r0,r3,LSL #2      ;117
0002ba  f8ddb024          LDR      r11,[sp,#0x24]        ;117
0002be  f8dc1008          LDR      r1,[r12,#8]           ;117
0002c2  f9bc0004          LDRSH    r0,[r12,#4]           ;117
0002c6  f93b3023          LDRSH    r3,[r11,r3,LSL #2]    ;117
0002ca  f9bcc002          LDRSH    r12,[r12,#2]          ;117
0002ce  f859e021          LDR      lr,[r9,r1,LSL #2]     ;117
0002d2  ebac0b03          SUB      r11,r12,r3            ;117
0002d6  f10b0b01          ADD      r11,r11,#1            ;117
0002da  fa0ffb8b          SXTH     r11,r11               ;117
0002de  44f3              ADD      r11,r11,lr            ;117
0002e0  f849b021          STR      r11,[r9,r1,LSL #2]    ;117
0002e4  f935b011          LDRSH    r11,[r5,r1,LSL #1]    ;117
0002e8  459b              CMP      r11,r3                ;117
0002ea  bfb8              IT       LT                    ;117
0002ec  465b              MOVLT    r3,r11                ;117
0002ee  f8253011          STRH     r3,[r5,r1,LSL #1]     ;117
0002f2  f9383011          LDRSH    r3,[r8,r1,LSL #1]     ;117
0002f6  4563              CMP      r3,r12                ;117
0002f8  bfc8              IT       GT                    ;117
0002fa  469c              MOVGT    r12,r3                ;117
0002fc  f828c011          STRH     r12,[r8,r1,LSL #1]    ;117
000300  f9373011          LDRSH    r3,[r7,r1,LSL #1]     ;117
000304  4283              CMP      r3,r0                 ;117
000306  bfa8              IT       GE                    ;117
000308  4603              MOVGE    r3,r0                 ;117
00030a  f8273011          STRH     r3,[r7,r1,LSL #1]     ;117
00030e  f9363011          LDRSH    r3,[r6,r1,LSL #1]     ;117
000312  4283              CMP      r3,r0                 ;117
000314  bfc8              IT       GT                    ;117
000316  4618              MOVGT    r0,r3                 ;117
000318  f8260011          STRH     r0,[r6,r1,LSL #1]     ;117
00031c  1c52              ADDS     r2,r2,#1              ;117
00031e  4552              CMP      r2,r10                ;117
000320  dbc6              BLT      |L9.688|
                  |L9.802|
000322  f8d41108          LDR      r1,[r4,#0x108]        ;117
000326  2000              MOVS     r0,#0                 ;117
000328  2900              CMP      r1,#0                 ;117
00032a  bfa8              IT       GE                    ;117
00032c  f8dfc0a0          LDRGE    r12,|L9.976|
000330  db22              BLT      |L9.888|
                  |L9.818|
000332  f9381010          LDRSH    r1,[r8,r0,LSL #1]     ;117
000336  f9352010          LDRSH    r2,[r5,r0,LSL #1]     ;117
00033a  f9373010          LDRSH    r3,[r7,r0,LSL #1]     ;117
00033e  1a89              SUBS     r1,r1,r2              ;117
000340  f9362010          LDRSH    r2,[r6,r0,LSL #1]     ;117
000344  1c49              ADDS     r1,r1,#1              ;117
000346  1ad2              SUBS     r2,r2,r3              ;117
000348  1c52              ADDS     r2,r2,#1              ;117
00034a  4351              MULS     r1,r2,r1              ;117
00034c  f8592020          LDR      r2,[r9,r0,LSL #2]     ;117
000350  9b00              LDR      r3,[sp,#0]            ;117
000352  0149              LSLS     r1,r1,#5              ;117
000354  f8ddb004          LDR      r11,[sp,#4]           ;117
000358  4353              MULS     r3,r2,r3              ;117
00035a  fb02f20b          MUL      r2,r2,r11             ;117
00035e  e000              B        |L9.866|
                  |L9.864|
000360  e028              B        |L9.948|
                  |L9.866|
000362  428b              CMP      r3,r1                 ;117
000364  db01              BLT      |L9.874|
000366  428a              CMP      r2,r1                 ;117
000368  dd01              BLE      |L9.878|
                  |L9.874|
00036a  f825c010          STRH     r12,[r5,r0,LSL #1]    ;117
                  |L9.878|
00036e  f8d41108          LDR      r1,[r4,#0x108]        ;117
000372  1c40              ADDS     r0,r0,#1              ;117
000374  4281              CMP      r1,r0                 ;117
000376  dadc              BGE      |L9.818|
                  |L9.888|
000378  f04f0b00          MOV      r11,#0                ;117
00037c  6b23              LDR      r3,[r4,#0x30]         ;117
00037e  4658              MOV      r0,r11                ;117
000380  f1ba0f00          CMP      r10,#0                ;117
000384  dd0d              BLE      |L9.930|
                  |L9.902|
000386  eb000140          ADD      r1,r0,r0,LSL #1       ;117
00038a  eb030181          ADD      r1,r3,r1,LSL #2       ;117
00038e  688a              LDR      r2,[r1,#8]            ;117
000390  f9352012          LDRSH    r2,[r5,r2,LSL #1]     ;117
000394  2a00              CMP      r2,#0                 ;117
000396  bfb8              IT       LT                    ;117
000398  f8c1b008          STRLT    r11,[r1,#8]           ;117
00039c  1c40              ADDS     r0,r0,#1              ;117
00039e  4550              CMP      r0,r10                ;117
0003a0  dbf1              BLT      |L9.902|
                  |L9.930|
0003a2  4620              MOV      r0,r4                 ;117
0003a4  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<int>::FindMaximumId()
0003a8  f884b105          STRB     r11,[r4,#0x105]       ;117
                  |L9.940|
0003ac  b00b              ADD      sp,sp,#0x2c
0003ae  4658              MOV      r0,r11                ;117
0003b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.948|
0003b4  f24021d2          MOV      r1,#0x2d2
0003b8  4820              LDR      r0,|L9.1084|
0003ba  e9cd0100          STRD     r0,r1,[sp,#0]
0003be  4b06              LDR      r3,|L9.984|
0003c0  a206              ADR      r2,|L9.988|
0003c2  a115              ADR      r1,|L9.1048|
0003c4  2005              MOVS     r0,#5
0003c6  f7fffffe          BL       _Anki_Log
0003ca  e7ef              B        |L9.940|
;;;119    
                          ENDP

                  |L9.972|
                          DCD      0x01000001
                  |L9.976|
                          DCD      0xffff8000
                  |L9.980|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
                  |L9.984|
                          DCD      ||.constdata||+0x98
                  |L9.988|
0003dc  436f756c          DCB      "Couldn't allocate minX, maxX, minY, maxY, or componentS"
0003e0  646e2774
0003e4  20616c6c
0003e8  6f636174
0003ec  65206d69
0003f0  6e582c20
0003f4  6d617858
0003f8  2c206d69
0003fc  6e592c20
000400  6d617859
000404  2c206f72
000408  20636f6d
00040c  706f6e65
000410  6e7453  
000413  697a6573          DCB      "izes",0
000417  00      
                  |L9.1048|
000418  496e7661          DCB      "InvalidateSolidOrSparseComponents",0
00041c  6c696461
000420  7465536f
000424  6c69644f
000428  72537061
00042c  72736543
000430  6f6d706f
000434  6e656e74
000438  7300    
00043a  00                DCB      0
00043b  00                DCB      0
                  |L9.1084|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents34Extract2dComponents_PerRow_NextRowEPKhisss||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents34Extract2dComponents_PerRow_NextRowEPKhisss PROC ; Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
;;;53     
;;;54         Result ConnectedComponents::Extract2dComponents_PerRow_NextRow(const u8 * restrict binaryImageRow, const s32 imageWidth, const s16 whichRow, const s16 minComponentWidth, const s16 maxSkipDistance)
000000  b530              PUSH     {r4,r5,lr}
;;;55         {
000002  b083              SUB      sp,sp,#0xc
;;;56           if(this->useU16) { return this->componentsU16.Extract2dComponents_PerRow_NextRow(binaryImageRow, imageWidth, whichRow, minComponentWidth, maxSkipDistance); }
000004  7805              LDRB     r5,[r0,#0]
000006  e9dd4c06          LDRD     r4,r12,[sp,#0x18]     ;55
00000a  b135              CBZ      r5,|L10.26|
00000c  e9cd4c00          STRD     r4,r12,[sp,#0]
000010  1d00              ADDS     r0,r0,#4
000012  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisss ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
;;;57           else { return this->componentsS32.Extract2dComponents_PerRow_NextRow(binaryImageRow, imageWidth, whichRow, minComponentWidth, maxSkipDistance); }
;;;58         }
000016  b003              ADD      sp,sp,#0xc
000018  bd30              POP      {r4,r5,pc}
                  |L10.26|
00001a  e9cd4c00          STRD     r4,r12,[sp,#0]        ;57
00001e  f500708c          ADD      r0,r0,#0x118          ;57
000022  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisss ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
000026  b003              ADD      sp,sp,#0xc
000028  bd30              POP      {r4,r5,pc}
;;;59     
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents34SortConnectedComponentSegmentsByIdENS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded19ConnectedComponents34SortConnectedComponentSegmentsByIdENS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
;;;71     
;;;72         Result ConnectedComponents::SortConnectedComponentSegmentsById(MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;73         {
;;;74           if(this->useU16) { return this->componentsU16.SortConnectedComponentSegmentsById(scratch); }
000004  7802              LDRB     r2,[r0,#0]
000006  f8df9270          LDR      r9,|L11.632|
00000a  b0a5              SUB      sp,sp,#0x94           ;73
00000c  2a00              CMP      r2,#0
00000e  f00080a6          BEQ.W    |L11.350|
000012  1d05              ADDS     r5,r0,#4
000014  a81c              ADD      r0,sp,#0x70
000016  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00001a  4607              MOV      r7,r0
00001c  2300              MOVS     r3,#0
00001e  461a              MOV      r2,r3
000020  2101              MOVS     r1,#1
000022  a823              ADD      r0,sp,#0x8c
000024  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000028  f8b51108          LDRH     r1,[r5,#0x108]
00002c  6803              LDR      r3,[r0,#0]
00002e  1c49              ADDS     r1,r1,#1
000030  463a              MOV      r2,r7
000032  a80f              ADD      r0,sp,#0x3c
000034  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000038  9819              LDR      r0,[sp,#0x64]
00003a  b180              CBZ      r0,|L11.94|
00003c  9815              LDR      r0,[sp,#0x54]
00003e  2800              CMP      r0,#0
000040  bfa4              ITT      GE
000042  9816              LDRGE    r0,[sp,#0x58]
000044  2800              CMPGE    r0,#0
000046  db0a              BLT      |L11.94|
000048  9917              LDR      r1,[sp,#0x5c]
00004a  9815              LDR      r0,[sp,#0x54]
00004c  9b17              LDR      r3,[sp,#0x5c]
00004e  4341              MULS     r1,r0,r1
000050  9a19              LDR      r2,[sp,#0x64]
000052  2000              MOVS     r0,#0
000054  fb002003          MLA      r0,r0,r3,r2
000058  f7fffffe          BL       __aeabi_memclr
00005c  e00a              B        |L11.116|
                  |L11.94|
00005e  f2402176          MOV      r1,#0x276
000062  4886              LDR      r0,|L11.636|
000064  e9cd0100          STRD     r0,r1,[sp,#0]
000068  a385              ADR      r3,|L11.640|
00006a  a293              ADR      r2,|L11.696|
00006c  a199              ADR      r1,|L11.724|
00006e  2005              MOVS     r0,#5
000070  f7fffffe          BL       _Anki_Log
                  |L11.116|
000074  2600              MOVS     r6,#0
000076  f8d5800c          LDR      r8,[r5,#0xc]
00007a  f8d5a030          LDR      r10,[r5,#0x30]
00007e  9c1b              LDR      r4,[sp,#0x6c]
000080  4630              MOV      r0,r6
000082  f1b80f00          CMP      r8,#0
000086  dd5f              BLE      |L11.328|
                  |L11.136|
000088  eb0a01c0          ADD      r1,r10,r0,LSL #3
00008c  88c9              LDRH     r1,[r1,#6]
00008e  b129              CBZ      r1,|L11.156|
000090  f8342011          LDRH     r2,[r4,r1,LSL #1]
000094  1c52              ADDS     r2,r2,#1
000096  f8242011          STRH     r2,[r4,r1,LSL #1]
00009a  1c76              ADDS     r6,r6,#1
                  |L11.156|
00009c  1c40              ADDS     r0,r0,#1
00009e  4540              CMP      r0,r8
0000a0  dbf2              BLT      |L11.136|
0000a2  2e00              CMP      r6,#0
0000a4  d050              BEQ      |L11.328|
0000a6  2300              MOVS     r3,#0
0000a8  461a              MOV      r2,r3
0000aa  2101              MOVS     r1,#1
0000ac  a823              ADD      r0,sp,#0x8c
0000ae  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000b2  6803              LDR      r3,[r0,#0]
0000b4  463a              MOV      r2,r7
0000b6  4631              MOV      r1,r6
0000b8  a802              ADD      r0,sp,#8
0000ba  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000be  a802              ADD      r0,sp,#8
0000c0  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
0000c4  2800              CMP      r0,#0
0000c6  bf02              ITTT     EQ
0000c8  4648              MOVEQ    r0,r9
;;;75           else { return this->componentsS32.SortConnectedComponentSegmentsById(scratch); }
;;;76         }
0000ca  b025              ADDEQ    sp,sp,#0x94
0000cc  e8bd8ff0          POPEQ    {r4-r11,pc}
0000d0  f04f0900          MOV      r9,#0
0000d4  f8b51108          LDRH     r1,[r5,#0x108]
0000d8  2001              MOVS     r0,#1
0000da  2901              CMP      r1,#1
0000dc  db0b              BLT      |L11.246|
                  |L11.222|
0000de  f8341010          LDRH     r1,[r4,r0,LSL #1]
0000e2  f8249010          STRH     r9,[r4,r0,LSL #1]
0000e6  4449              ADD      r1,r1,r9
0000e8  fa1ff981          UXTH     r9,r1
0000ec  f8b51108          LDRH     r1,[r5,#0x108]
0000f0  1c40              ADDS     r0,r0,#1
0000f2  4281              CMP      r1,r0
0000f4  daf3              BGE      |L11.222|
                  |L11.246|
0000f6  2700              MOVS     r7,#0
0000f8  f8ddb038          LDR      r11,[sp,#0x38]
0000fc  f1b80f00          CMP      r8,#0
000100  dd11              BLE      |L11.294|
                  |L11.258|
000102  eb0a01c7          ADD      r1,r10,r7,LSL #3
000106  88ce              LDRH     r6,[r1,#6]
000108  b156              CBZ      r6,|L11.288|
00010a  f8340016          LDRH     r0,[r4,r6,LSL #1]
00010e  eb0b00c0          ADD      r0,r11,r0,LSL #3
000112  f7fffffe          BL       __ARM_common_memcpy4_8
000116  f8340016          LDRH     r0,[r4,r6,LSL #1]
00011a  1c40              ADDS     r0,r0,#1
00011c  f8240016          STRH     r0,[r4,r6,LSL #1]
                  |L11.288|
000120  1c7f              ADDS     r7,r7,#1
000122  4547              CMP      r7,r8
000124  dbed              BLT      |L11.258|
                  |L11.294|
000126  990e              LDR      r1,[sp,#0x38]
000128  ea4f02c9          LSL      r2,r9,#3
00012c  6b28              LDR      r0,[r5,#0x30]
00012e  f7fffffe          BL       __aeabi_memcpy
000132  4649              MOV      r1,r9
000134  4628              MOV      r0,r5
000136  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::set_size(int)
00013a  2001              MOVS     r0,#1
00013c  f8850105          STRB     r0,[r5,#0x105]
000140  b025              ADD      sp,sp,#0x94
000142  2000              MOVS     r0,#0
000144  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.328|
000148  2100              MOVS     r1,#0
00014a  4628              MOV      r0,r5
00014c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::set_size(int)
000150  2001              MOVS     r0,#1
000152  f8850105          STRB     r0,[r5,#0x105]
000156  b025              ADD      sp,sp,#0x94
000158  2000              MOVS     r0,#0
00015a  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.350|
00015e  f500758c          ADD      r5,r0,#0x118          ;75
000162  a81a              ADD      r0,sp,#0x68           ;75
000164  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000168  4683              MOV      r11,r0                ;75
00016a  2300              MOVS     r3,#0                 ;75
00016c  461a              MOV      r2,r3                 ;75
00016e  2101              MOVS     r1,#1                 ;75
000170  a821              ADD      r0,sp,#0x84           ;75
000172  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000176  f8d51108          LDR      r1,[r5,#0x108]        ;75
00017a  6803              LDR      r3,[r0,#0]            ;75
00017c  1c49              ADDS     r1,r1,#1              ;75
00017e  465a              MOV      r2,r11                ;75
000180  a80d              ADD      r0,sp,#0x34           ;75
000182  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000186  a80d              ADD      r0,sp,#0x34           ;75
000188  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv ; Anki::Embedded::FixedLengthList<int>::SetZero()
00018c  f04f0a00          MOV      r10,#0                ;75
000190  68ee              LDR      r6,[r5,#0xc]          ;75
000192  f8d58030          LDR      r8,[r5,#0x30]         ;75
000196  9c19              LDR      r4,[sp,#0x64]         ;75
000198  4657              MOV      r7,r10                ;75
00019a  4650              MOV      r0,r10                ;75
00019c  2e00              CMP      r6,#0                 ;75
00019e  dd63              BLE      |L11.616|
                  |L11.416|
0001a0  eb000140          ADD      r1,r0,r0,LSL #1       ;75
0001a4  eb080181          ADD      r1,r8,r1,LSL #2       ;75
0001a8  6889              LDR      r1,[r1,#8]            ;75
0001aa  b129              CBZ      r1,|L11.440|
0001ac  f8542021          LDR      r2,[r4,r1,LSL #2]     ;75
0001b0  1c52              ADDS     r2,r2,#1              ;75
0001b2  f8442021          STR      r2,[r4,r1,LSL #2]     ;75
0001b6  1c7f              ADDS     r7,r7,#1              ;75
                  |L11.440|
0001b8  1c40              ADDS     r0,r0,#1              ;75
0001ba  42b0              CMP      r0,r6                 ;75
0001bc  dbf0              BLT      |L11.416|
0001be  2f00              CMP      r7,#0                 ;75
0001c0  d052              BEQ      |L11.616|
0001c2  2300              MOVS     r3,#0                 ;75
0001c4  461a              MOV      r2,r3                 ;75
0001c6  2101              MOVS     r1,#1                 ;75
0001c8  a821              ADD      r0,sp,#0x84           ;75
0001ca  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0001ce  6803              LDR      r3,[r0,#0]            ;75
0001d0  465a              MOV      r2,r11                ;75
0001d2  4639              MOV      r1,r7                 ;75
0001d4  4668              MOV      r0,sp                 ;75
0001d6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0001da  4668              MOV      r0,sp                 ;75
0001dc  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
0001e0  2800              CMP      r0,#0                 ;75
0001e2  bf08              IT       EQ                    ;75
0001e4  46ca              MOVEQ    r10,r9                ;75
0001e6  d03b              BEQ      |L11.608|
0001e8  f8d51108          LDR      r1,[r5,#0x108]        ;75
0001ec  2700              MOVS     r7,#0                 ;75
0001ee  2001              MOVS     r0,#1                 ;75
0001f0  2901              CMP      r1,#1                 ;75
0001f2  db09              BLT      |L11.520|
                  |L11.500|
0001f4  f8541020          LDR      r1,[r4,r0,LSL #2]     ;75
0001f8  f8447020          STR      r7,[r4,r0,LSL #2]     ;75
0001fc  440f              ADD      r7,r7,r1              ;75
0001fe  f8d51108          LDR      r1,[r5,#0x108]        ;75
000202  1c40              ADDS     r0,r0,#1              ;75
000204  4281              CMP      r1,r0                 ;75
000206  daf5              BGE      |L11.500|
                  |L11.520|
000208  2000              MOVS     r0,#0                 ;75
00020a  f8ddc030          LDR      r12,[sp,#0x30]        ;75
00020e  2e00              CMP      r6,#0                 ;75
000210  dd18              BLE      |L11.580|
                  |L11.530|
000212  eb000140          ADD      r1,r0,r0,LSL #1       ;75
000216  eb080981          ADD      r9,r8,r1,LSL #2       ;75
00021a  f8d91008          LDR      r1,[r9,#8]            ;75
00021e  b171              CBZ      r1,|L11.574|
000220  f8543021          LDR      r3,[r4,r1,LSL #2]     ;75
000224  e9d9b900          LDRD     r11,r9,[r9,#0]        ;75
000228  eb030243          ADD      r2,r3,r3,LSL #1       ;75
00022c  eb0c0282          ADD      r2,r12,r2,LSL #2      ;75
000230  f8c2b000          STR      r11,[r2,#0]           ;75
000234  e9c29101          STRD     r9,r1,[r2,#4]         ;75
000238  1c5a              ADDS     r2,r3,#1              ;75
00023a  f8442021          STR      r2,[r4,r1,LSL #2]     ;75
                  |L11.574|
00023e  1c40              ADDS     r0,r0,#1              ;75
000240  42b0              CMP      r0,r6                 ;75
000242  dbe6              BLT      |L11.530|
                  |L11.580|
000244  eb070247          ADD      r2,r7,r7,LSL #1       ;75
000248  990c              LDR      r1,[sp,#0x30]         ;75
00024a  0092              LSLS     r2,r2,#2              ;75
00024c  6b28              LDR      r0,[r5,#0x30]         ;75
00024e  f7fffffe          BL       __aeabi_memcpy4
000252  4639              MOV      r1,r7                 ;75
000254  4628              MOV      r0,r5                 ;75
000256  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::set_size(int)
00025a  2001              MOVS     r0,#1                 ;75
00025c  f8850105          STRB     r0,[r5,#0x105]        ;75
                  |L11.608|
000260  b025              ADD      sp,sp,#0x94
000262  4650              MOV      r0,r10                ;75
000264  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.616|
000268  2100              MOVS     r1,#0
00026a  4628              MOV      r0,r5
00026c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::set_size(int)
000270  2001              MOVS     r0,#1
000272  f8850105          STRB     r0,[r5,#0x105]
000276  e7f3              B        |L11.608|
;;;77     
                          ENDP

                  |L11.632|
                          DCD      0x01000001
                  |L11.636|
                          DCD      _ZZN4Anki8Embedded5ArrayItE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::SetZero()::__PRETTY_FUNCTION__
                  |L11.640|
000280  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000284  6f726574
000288  6563685c
00028c  636f6d6d
000290  6f6e5c69
000294  6e636c75
000298  64655c61
00029c  6e6b692f
0002a0  636f6d6d
0002a4  6f6e2f72
0002a8  6f626f74
0002ac  2f617272
0002b0  617932  
0002b3  642e6800          DCB      "d.h",0
0002b7  00                DCB      0
                  |L11.696|
0002b8  41727261          DCB      "Array<Type> is not valid",0
0002bc  793c5479
0002c0  70653e20
0002c4  6973206e
0002c8  6f742076
0002cc  616c6964
0002d0  00      
0002d1  00                DCB      0
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L11.724|
0002d4  41727261          DCB      "Array<Type>::SetZero",0
0002d8  793c5479
0002dc  70653e3a
0002e0  3a536574
0002e4  5a65726f
0002e8  00      
0002e9  00                DCB      0
0002ea  00                DCB      0
0002eb  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents35Extract2dComponents_PerRow_FinalizeEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents35Extract2dComponents_PerRow_FinalizeEv PROC ; Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Finalize()
;;;59     
;;;60         Result ConnectedComponents::Extract2dComponents_PerRow_Finalize()
000000  7801              LDRB     r1,[r0,#0]
;;;61         {
000002  b111              CBZ      r1,|L12.10|
;;;62           if(this->useU16) { return this->componentsU16.Extract2dComponents_PerRow_Finalize(); }
000004  1d00              ADDS     r0,r0,#4
000006  f7ffbffe          B.W      _ZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEv ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Finalize()
                  |L12.10|
;;;63           else { return this->componentsS32.Extract2dComponents_PerRow_Finalize(); }
00000a  f500708c          ADD      r0,r0,#0x118
00000e  f7ffbffe          B.W      _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEv ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Finalize()
;;;64         }
;;;65     
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents36CompressConnectedComponentSegmentIdsENS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded19ConnectedComponents36CompressConnectedComponentSegmentIdsENS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
;;;77     
;;;78         Result ConnectedComponents::CompressConnectedComponentSegmentIds(MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;79         {
;;;80           if(this->useU16) { return this->componentsU16.CompressConnectedComponentSegmentIds(scratch); }
000004  7802              LDRB     r2,[r0,#0]
000006  4f7c              LDR      r7,|L13.504|
000008  b089              SUB      sp,sp,#0x24           ;79
00000a  f2402879          MOV      r8,#0x279             ;79
00000e  f240297a          MOV      r9,#0x27a             ;79
000012  f04f0b00          MOV      r11,#0                ;79
000016  2a00              CMP      r2,#0
000018  d077              BEQ      |L13.266|
00001a  1d04              ADDS     r4,r0,#4
00001c  a802              ADD      r0,sp,#8
00001e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000022  9000              STR      r0,[sp,#0]
000024  f8b40108          LDRH     r0,[r4,#0x108]
000028  6b26              LDR      r6,[r4,#0x30]
00002a  1c41              ADDS     r1,r0,#1
00002c  9800              LDR      r0,[sp,#0]
00002e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000032  4605              MOV      r5,r0
000034  f8b40108          LDRH     r0,[r4,#0x108]
000038  0040              LSLS     r0,r0,#1
00003a  1c81              ADDS     r1,r0,#2
00003c  9800              LDR      r0,[sp,#0]
00003e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000042  496e              LDR      r1,|L13.508|
000044  4682              MOV      r10,r0
000046  2d00              CMP      r5,#0
000048  d046              BEQ      |L13.216|
00004a  f1ba0f00          CMP      r10,#0
00004e  d04f              BEQ      |L13.240|
000050  f8b40108          LDRH     r0,[r4,#0x108]
000054  1c41              ADDS     r1,r0,#1
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       __aeabi_memclr
00005c  68e1              LDR      r1,[r4,#0xc]
00005e  2000              MOVS     r0,#0
000060  2900              CMP      r1,#0
000062  bfc8              IT       GT
000064  2301              MOVGT    r3,#1
000066  dd06              BLE      |L13.118|
                  |L13.104|
000068  eb0602c0          ADD      r2,r6,r0,LSL #3
00006c  1c40              ADDS     r0,r0,#1
00006e  88d2              LDRH     r2,[r2,#6]
000070  4281              CMP      r1,r0
000072  54ab              STRB     r3,[r5,r2]
000074  dcf8              BGT      |L13.104|
                  |L13.118|
000076  f8b42108          LDRH     r2,[r4,#0x108]
00007a  2000              MOVS     r0,#0
00007c  2a00              CMP      r2,#0
00007e  db02              BLT      |L13.134|
                  |L13.128|
000080  1c40              ADDS     r0,r0,#1
000082  4282              CMP      r2,r0
000084  dafc              BGE      |L13.128|
                  |L13.134|
000086  f8aab000          STRH     r11,[r10,#0]
00008a  2201              MOVS     r2,#1
00008c  f8b43108          LDRH     r3,[r4,#0x108]
000090  4610              MOV      r0,r2
000092  2b01              CMP      r3,#1
000094  db0a              BLT      |L13.172|
                  |L13.150|
000096  5c2b              LDRB     r3,[r5,r0]
000098  b11b              CBZ      r3,|L13.162|
00009a  f82a2010          STRH     r2,[r10,r0,LSL #1]
00009e  1c52              ADDS     r2,r2,#1
0000a0  b292              UXTH     r2,r2
                  |L13.162|
0000a2  f8b43108          LDRH     r3,[r4,#0x108]
0000a6  1c40              ADDS     r0,r0,#1
0000a8  4283              CMP      r3,r0
0000aa  daf4              BGE      |L13.150|
                  |L13.172|
0000ac  2000              MOVS     r0,#0
0000ae  6b23              LDR      r3,[r4,#0x30]
0000b0  2900              CMP      r1,#0
0000b2  dd0a              BLE      |L13.202|
                  |L13.180|
0000b4  eb0302c0          ADD      r2,r3,r0,LSL #3
0000b8  1c40              ADDS     r0,r0,#1
0000ba  f8b2c006          LDRH     r12,[r2,#6]
0000be  4281              CMP      r1,r0
0000c0  f83ac01c          LDRH     r12,[r10,r12,LSL #1]
0000c4  f8a2c006          STRH     r12,[r2,#6]
0000c8  dcf4              BGT      |L13.180|
                  |L13.202|
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::FindMaximumId()
;;;81           else { return this->componentsS32.CompressConnectedComponentSegmentIds(scratch); }
;;;82         }
0000d0  b009              ADD      sp,sp,#0x24
0000d2  4658              MOV      r0,r11
0000d4  e8bd8ff0          POP      {r4-r11,pc}
                  |L13.216|
0000d8  e9cd1800          STRD     r1,r8,[sp,#0]
0000dc  4b48              LDR      r3,|L13.512|
0000de  a249              ADR      r2,|L13.516|
0000e0  a14f              ADR      r1,|L13.544|
0000e2  2005              MOVS     r0,#5
0000e4  f7fffffe          BL       _Anki_Log
0000e8  b009              ADD      sp,sp,#0x24
0000ea  4638              MOV      r0,r7
0000ec  e8bd8ff0          POP      {r4-r11,pc}
                  |L13.240|
0000f0  e9cd1900          STRD     r1,r9,[sp,#0]
0000f4  4b42              LDR      r3,|L13.512|
0000f6  a254              ADR      r2,|L13.584|
0000f8  a149              ADR      r1,|L13.544|
0000fa  2005              MOVS     r0,#5
0000fc  f7fffffe          BL       _Anki_Log
000100  b009              ADD      sp,sp,#0x24
000102  4638              MOV      r0,r7
000104  e8bd8ff0          POP      {r4-r11,pc}
000108  e7ff              B        |L13.266|
                  |L13.266|
00010a  f500748c          ADD      r4,r0,#0x118          ;81
00010e  a802              ADD      r0,sp,#8              ;81
000110  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000114  9000              STR      r0,[sp,#0]            ;81
000116  f8d40108          LDR      r0,[r4,#0x108]        ;81
00011a  6b26              LDR      r6,[r4,#0x30]         ;81
00011c  1c41              ADDS     r1,r0,#1              ;81
00011e  9800              LDR      r0,[sp,#0]            ;81
000120  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000124  4605              MOV      r5,r0                 ;81
000126  f8d40108          LDR      r0,[r4,#0x108]        ;81
00012a  0080              LSLS     r0,r0,#2              ;81
00012c  1d01              ADDS     r1,r0,#4              ;81
00012e  9800              LDR      r0,[sp,#0]            ;81
000130  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000134  494c              LDR      r1,|L13.616|
000136  4682              MOV      r10,r0                ;81
000138  2d00              CMP      r5,#0                 ;81
00013a  d04b              BEQ      |L13.468|
00013c  f1ba0f00          CMP      r10,#0                ;81
000140  d051              BEQ      |L13.486|
000142  f8d40108          LDR      r0,[r4,#0x108]        ;81
000146  1c41              ADDS     r1,r0,#1              ;81
000148  4628              MOV      r0,r5                 ;81
00014a  f7fffffe          BL       __aeabi_memclr
00014e  68e1              LDR      r1,[r4,#0xc]          ;81
000150  2000              MOVS     r0,#0                 ;81
000152  2900              CMP      r1,#0                 ;81
000154  bfc8              IT       GT                    ;81
000156  2301              MOVGT    r3,#1                 ;81
000158  dd08              BLE      |L13.364|
                  |L13.346|
00015a  eb000240          ADD      r2,r0,r0,LSL #1       ;81
00015e  eb060282          ADD      r2,r6,r2,LSL #2       ;81
000162  1c40              ADDS     r0,r0,#1              ;81
000164  6892              LDR      r2,[r2,#8]            ;81
000166  4281              CMP      r1,r0                 ;81
000168  54ab              STRB     r3,[r5,r2]            ;81
00016a  dcf6              BGT      |L13.346|
                  |L13.364|
00016c  f8d42108          LDR      r2,[r4,#0x108]        ;81
000170  2000              MOVS     r0,#0                 ;81
000172  2a00              CMP      r2,#0                 ;81
000174  db02              BLT      |L13.380|
                  |L13.374|
000176  1c40              ADDS     r0,r0,#1              ;81
000178  4282              CMP      r2,r0                 ;81
00017a  dafc              BGE      |L13.374|
                  |L13.380|
00017c  f8cab000          STR      r11,[r10,#0]          ;81
000180  2201              MOVS     r2,#1                 ;81
000182  f8d43108          LDR      r3,[r4,#0x108]        ;81
000186  465f              MOV      r7,r11                ;81
000188  4610              MOV      r0,r2                 ;81
00018a  2b01              CMP      r3,#1                 ;81
00018c  db0a              BLT      |L13.420|
                  |L13.398|
00018e  5c2b              LDRB     r3,[r5,r0]            ;81
000190  2b00              CMP      r3,#0                 ;81
000192  bf1c              ITT      NE                    ;81
000194  f84a2020          STRNE    r2,[r10,r0,LSL #2]    ;81
000198  1c52              ADDNE    r2,r2,#1              ;81
00019a  1c40              ADDS     r0,r0,#1              ;81
00019c  f8d43108          LDR      r3,[r4,#0x108]        ;81
0001a0  4283              CMP      r3,r0                 ;81
0001a2  daf4              BGE      |L13.398|
                  |L13.420|
0001a4  2000              MOVS     r0,#0                 ;81
0001a6  6b23              LDR      r3,[r4,#0x30]         ;81
0001a8  2900              CMP      r1,#0                 ;81
0001aa  dd0c              BLE      |L13.454|
                  |L13.428|
0001ac  eb000240          ADD      r2,r0,r0,LSL #1       ;81
0001b0  eb030282          ADD      r2,r3,r2,LSL #2       ;81
0001b4  1c40              ADDS     r0,r0,#1              ;81
0001b6  f8d2c008          LDR      r12,[r2,#8]           ;81
0001ba  4281              CMP      r1,r0                 ;81
0001bc  f85ac02c          LDR      r12,[r10,r12,LSL #2]  ;81
0001c0  f8c2c008          STR      r12,[r2,#8]           ;81
0001c4  dcf2              BGT      |L13.428|
                  |L13.454|
0001c6  4620              MOV      r0,r4                 ;81
0001c8  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<int>::FindMaximumId()
                  |L13.460|
0001cc  b009              ADD      sp,sp,#0x24
0001ce  4638              MOV      r0,r7                 ;81
0001d0  e8bd8ff0          POP      {r4-r11,pc}
                  |L13.468|
0001d4  e9cd1800          STRD     r1,r8,[sp,#0]
0001d8  4b09              LDR      r3,|L13.512|
0001da  a20a              ADR      r2,|L13.516|
0001dc  a110              ADR      r1,|L13.544|
0001de  2005              MOVS     r0,#5
0001e0  f7fffffe          BL       _Anki_Log
0001e4  e7f2              B        |L13.460|
                  |L13.486|
0001e6  e9cd1900          STRD     r1,r9,[sp,#0]
0001ea  4b05              LDR      r3,|L13.512|
0001ec  a216              ADR      r2,|L13.584|
0001ee  a10c              ADR      r1,|L13.544|
0001f0  2005              MOVS     r0,#5
0001f2  f7fffffe          BL       _Anki_Log
0001f6  e7e9              B        |L13.460|
;;;83     
                          ENDP

                  |L13.504|
                          DCD      0x01000001
                  |L13.508|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE36CompressConnectedComponentSegmentIdsENS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
                  |L13.512|
                          DCD      ||.constdata||+0x98
                  |L13.516|
000204  436f756c          DCB      "Couldn't allocate usedIds",0
000208  646e2774
00020c  20616c6c
000210  6f636174
000214  65207573
000218  65644964
00021c  7300    
00021e  00                DCB      0
00021f  00                DCB      0
                  |L13.544|
000220  436f6d70          DCB      "CompressConnectedComponentSegmentIds",0
000224  72657373
000228  436f6e6e
00022c  65637465
000230  64436f6d
000234  706f6e65
000238  6e745365
00023c  676d656e
000240  74496473
000244  00      
000245  00                DCB      0
000246  00                DCB      0
000247  00                DCB      0
                  |L13.584|
000248  436f756c          DCB      "Couldn't allocate idLookupTable",0
00024c  646e2774
000250  20616c6c
000254  6f636174
000258  65206964
00025c  4c6f6f6b
000260  75705461
000264  626c6500
                  |L13.616|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE36CompressConnectedComponentSegmentIdsENS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded19ConnectedComponents36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEE PROC ; Anki::Embedded::ConnectedComponents::ComputeNumComponentSegmentsForEachId(Anki::Embedded::FixedLengthList<int>&)
;;;101    
;;;102        Result ConnectedComponents::ComputeNumComponentSegmentsForEachId(FixedLengthList<s32> &numComponentSegments)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;103        {
;;;104          if(this->useU16) { return this->componentsU16.ComputeNumComponentSegmentsForEachId(numComponentSegments); }
000004  7802              LDRB     r2,[r0,#0]
000006  2400              MOVS     r4,#0
000008  b082              SUB      sp,sp,#8              ;103
00000a  f240275b          MOV      r7,#0x25b             ;103
00000e  f04f6680          MOV      r6,#0x4000000         ;103
000012  f44f7817          MOV      r8,#0x25c             ;103
000016  2a00              CMP      r2,#0
000018  d03d              BEQ      |L14.150|
00001a  1d05              ADDS     r5,r0,#4
00001c  4689              MOV      r9,r1
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv ; Anki::Embedded::FixedLengthList<int>::IsValid() const
000024  f8dfa0d0          LDR      r10,|L14.248|
000028  b308              CBZ      r0,|L14.110|
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
000030  2800              CMP      r0,#0
000032  d026              BEQ      |L14.130|
000034  4648              MOV      r0,r9
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv ; Anki::Embedded::FixedLengthList<int>::SetZero()
00003a  f8b50108          LDRH     r0,[r5,#0x108]
00003e  1c41              ADDS     r1,r0,#1
000040  4648              MOV      r0,r9
000042  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
000046  68eb              LDR      r3,[r5,#0xc]
000048  f8d5c030          LDR      r12,[r5,#0x30]
00004c  f8d92030          LDR      r2,[r9,#0x30]
000050  2000              MOVS     r0,#0
000052  2b00              CMP      r3,#0
000054  dd4c              BLE      |L14.240|
                  |L14.86|
000056  eb0c01c0          ADD      r1,r12,r0,LSL #3
00005a  1c40              ADDS     r0,r0,#1
00005c  88c9              LDRH     r1,[r1,#6]
00005e  f8525021          LDR      r5,[r2,r1,LSL #2]
000062  1c6d              ADDS     r5,r5,#1
000064  f8425021          STR      r5,[r2,r1,LSL #2]
000068  4283              CMP      r3,r0
00006a  dcf4              BGT      |L14.86|
00006c  e040              B        |L14.240|
                  |L14.110|
00006e  e9cda700          STRD     r10,r7,[sp,#0]
000072  4b22              LDR      r3,|L14.252|
000074  a222              ADR      r2,|L14.256|
000076  a12b              ADR      r1,|L14.292|
000078  2005              MOVS     r0,#5
00007a  f7fffffe          BL       _Anki_Log
00007e  4634              MOV      r4,r6
000080  e036              B        |L14.240|
                  |L14.130|
000082  e9cda800          STRD     r10,r8,[sp,#0]
000086  4b1d              LDR      r3,|L14.252|
000088  a22c              ADR      r2,|L14.316|
00008a  a126              ADR      r1,|L14.292|
00008c  2005              MOVS     r0,#5
00008e  f7fffffe          BL       _Anki_Log
000092  4634              MOV      r4,r6
000094  e02c              B        |L14.240|
                  |L14.150|
;;;105          else { return this->componentsS32.ComputeNumComponentSegmentsForEachId(numComponentSegments); }
000096  f500758c          ADD      r5,r0,#0x118
00009a  4689              MOV      r9,r1
00009c  4608              MOV      r0,r1
00009e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv ; Anki::Embedded::FixedLengthList<int>::IsValid() const
0000a2  f8dfa0b0          LDR      r10,|L14.340|
0000a6  2800              CMP      r0,#0
0000a8  d0e1              BEQ      |L14.110|
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
0000b0  2800              CMP      r0,#0
0000b2  d0e6              BEQ      |L14.130|
0000b4  4648              MOV      r0,r9
0000b6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv ; Anki::Embedded::FixedLengthList<int>::SetZero()
0000ba  f8d50108          LDR      r0,[r5,#0x108]
0000be  1c41              ADDS     r1,r0,#1
0000c0  4648              MOV      r0,r9
0000c2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
0000c6  68eb              LDR      r3,[r5,#0xc]
0000c8  f8d5c030          LDR      r12,[r5,#0x30]
0000cc  f8d92030          LDR      r2,[r9,#0x30]
0000d0  2000              MOVS     r0,#0
0000d2  2b00              CMP      r3,#0
0000d4  dd0c              BLE      |L14.240|
                  |L14.214|
0000d6  eb000140          ADD      r1,r0,r0,LSL #1
0000da  eb0c0181          ADD      r1,r12,r1,LSL #2
0000de  1c40              ADDS     r0,r0,#1
0000e0  6889              LDR      r1,[r1,#8]
0000e2  f8525021          LDR      r5,[r2,r1,LSL #2]
0000e6  1c6d              ADDS     r5,r5,#1
0000e8  f8425021          STR      r5,[r2,r1,LSL #2]
0000ec  4283              CMP      r3,r0
0000ee  dcf2              BGT      |L14.214|
                  |L14.240|
;;;106        }
0000f0  b002              ADD      sp,sp,#8
0000f2  4620              MOV      r0,r4                 ;105
0000f4  e8bd87f0          POP      {r4-r10,pc}
;;;107    
                          ENDP

                  |L14.248|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeNumComponentSegmentsForEachId(Anki::Embedded::FixedLengthList<int>&)::__PRETTY_FUNCTION__
                  |L14.252|
                          DCD      ||.constdata||+0x98
                  |L14.256|
000100  6e756d43          DCB      "numComponentSegments is not valid",0
000104  6f6d706f
000108  6e656e74
00010c  5365676d
000110  656e7473
000114  20697320
000118  6e6f7420
00011c  76616c69
000120  6400    
000122  00                DCB      0
000123  00                DCB      0
                  |L14.292|
000124  436f6d70          DCB      "ComputeComponentSizes",0
000128  75746543
00012c  6f6d706f
000130  6e656e74
000134  53697a65
000138  7300    
00013a  00                DCB      0
00013b  00                DCB      0
                  |L14.316|
00013c  636f6d70          DCB      "components is not valid",0
000140  6f6e656e
000144  74732069
000148  73206e6f
00014c  74207661
000150  6c696400
                  |L14.340|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeNumComponentSegmentsForEachId(Anki::Embedded::FixedLengthList<int>&)::__PRETTY_FUNCTION__

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES3_S3_||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES3_S3_ PROC ; Anki::Embedded::ConnectedComponents::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
;;;47     
;;;48         Result ConnectedComponents::Extract2dComponents_PerRow_Initialize(MemoryStack &fastMemory, MemoryStack &slowerMemory, MemoryStack &slowestMemory)
000000  f890c000          LDRB     r12,[r0,#0]
;;;49         {
;;;50           if(this->useU16) { return this->componentsU16.Extract2dComponents_PerRow_Initialize(fastMemory, slowerMemory, slowestMemory); }
000004  f1bc0f00          CMP      r12,#0
000008  d002              BEQ      |L15.16|
00000a  1d00              ADDS     r0,r0,#4
00000c  f7ffbffe          B.W      _ZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
                  |L15.16|
;;;51           else { return this->componentsS32.Extract2dComponents_PerRow_Initialize(fastMemory, slowerMemory, slowestMemory); }
000010  f500708c          ADD      r0,r0,#0x118
000014  f7ffbffe          B.W      _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_ ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
;;;52         }
;;;53     
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents43InvalidateFilledCenterComponents_hollowRowsEfNS0_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents43InvalidateFilledCenterComponents_hollowRowsEfNS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
;;;125    
;;;126        Result ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(const f32 minHollowRatio, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;127        {
000004  ed2d8b02          VPUSH    {d8}
000008  b0db              SUB      sp,sp,#0x16c
;;;128          if(this->useU16) { return this->componentsU16.InvalidateFilledCenterComponents_hollowRows(minHollowRatio, scratch); }
00000a  7802              LDRB     r2,[r0,#0]
00000c  2a00              CMP      r2,#0
00000e  f0008100          BEQ.W    |L16.530|
000012  1d04              ADDS     r4,r0,#4
000014  eeb08a40          VMOV.F32 s16,s0
000018  a850              ADD      r0,sp,#0x140
00001a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00001e  904f              STR      r0,[sp,#0x13c]
000020  2200              MOVS     r2,#0
000022  2301              MOVS     r3,#1
000024  4611              MOV      r1,r2
000026  a857              ADD      r0,sp,#0x15c
000028  f8d4900c          LDR      r9,[r4,#0xc]
00002c  f8d48030          LDR      r8,[r4,#0x30]
000030  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000034  f8b41108          LDRH     r1,[r4,#0x108]
000038  6803              LDR      r3,[r0,#0]
00003a  1c49              ADDS     r1,r1,#1
00003c  a82e              ADD      r0,sp,#0xb8
00003e  9a4f              LDR      r2,[sp,#0x13c]
000040  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000044  2100              MOVS     r1,#0
000046  a82e              ADD      r0,sp,#0xb8
000048  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
00004c  a848              ADD      r0,sp,#0x120
00004e  9e3a              LDR      r6,[sp,#0xe8]
000050  994f              LDR      r1,[sp,#0x13c]
000052  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000056  a948              ADD      r1,sp,#0x120
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00005e  2200              MOVS     r2,#0
000060  2301              MOVS     r3,#1
000062  4611              MOV      r1,r2
000064  a858              ADD      r0,sp,#0x160
000066  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00006a  f8b41108          LDRH     r1,[r4,#0x108]
00006e  6803              LDR      r3,[r0,#0]
000070  1c49              ADDS     r1,r1,#1
000072  466a              MOV      r2,sp
000074  a814              ADD      r0,sp,#0x50
000076  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00007a  2200              MOVS     r2,#0
00007c  2301              MOVS     r3,#1
00007e  4611              MOV      r1,r2
000080  a859              ADD      r0,sp,#0x164
000082  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000086  f8b41108          LDRH     r1,[r4,#0x108]
00008a  6803              LDR      r3,[r0,#0]
00008c  1c49              ADDS     r1,r1,#1
00008e  466a              MOV      r2,sp
000090  a83b              ADD      r0,sp,#0xec
000092  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000096  2200              MOVS     r2,#0
000098  2301              MOVS     r3,#1
00009a  4611              MOV      r1,r2
00009c  a85a              ADD      r0,sp,#0x168
00009e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000a2  f8b41108          LDRH     r1,[r4,#0x108]
0000a6  6803              LDR      r3,[r0,#0]
0000a8  1c49              ADDS     r1,r1,#1
0000aa  466a              MOV      r2,sp
0000ac  a821              ADD      r0,sp,#0x84
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000b2  f04f31ff          MOV      r1,#0xffffffff
0000b6  a814              ADD      r0,sp,#0x50
0000b8  f8dda080          LDR      r10,[sp,#0x80]
0000bc  9f47              LDR      r7,[sp,#0x11c]
0000be  9d2d              LDR      r5,[sp,#0xb4]
0000c0  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
0000c4  2100              MOVS     r1,#0
0000c6  a821              ADD      r0,sp,#0x84
0000c8  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
0000cc  2000              MOVS     r0,#0
0000ce  f1b90f00          CMP      r9,#0
0000d2  bfc8              IT       GT
0000d4  f04f0e00          MOVGT    lr,#0
0000d8  dd29              BLE      |L16.302|
                  |L16.218|
0000da  eb0802c0          ADD      r2,r8,r0,LSL #3
0000de  f938b030          LDRSH    r11,[r8,r0,LSL #3]
0000e2  88d1              LDRH     r1,[r2,#6]
0000e4  f9b23002          LDRSH    r3,[r2,#2]
0000e8  f9b22004          LDRSH    r2,[r2,#4]
0000ec  f85ac021          LDR      r12,[r10,r1,LSL #2]
0000f0  4562              CMP      r2,r12
0000f2  d10c              BNE      |L16.270|
0000f4  f8572021          LDR      r2,[r7,r1,LSL #2]
0000f8  f855c021          LDR      r12,[r5,r1,LSL #2]
0000fc  ebab0202          SUB      r2,r11,r2
000100  1e52              SUBS     r2,r2,#1
000102  4594              CMP      r12,r2
000104  bfc8              IT       GT
000106  4662              MOVGT    r2,r12
000108  f8452021          STR      r2,[r5,r1,LSL #2]
00010c  e00a              B        |L16.292|
                  |L16.270|
00010e  f856c021          LDR      r12,[r6,r1,LSL #2]
000112  f855b021          LDR      r11,[r5,r1,LSL #2]
000116  44dc              ADD      r12,r12,r11
000118  f846c021          STR      r12,[r6,r1,LSL #2]
00011c  f845e021          STR      lr,[r5,r1,LSL #2]
000120  f84a2021          STR      r2,[r10,r1,LSL #2]
                  |L16.292|
000124  1c40              ADDS     r0,r0,#1
000126  f8473021          STR      r3,[r7,r1,LSL #2]
00012a  4548              CMP      r0,r9
00012c  dbd5              BLT      |L16.218|
                  |L16.302|
00012e  f8b41108          LDRH     r1,[r4,#0x108]
000132  2001              MOVS     r0,#1
000134  2901              CMP      r1,#1
000136  db0b              BLT      |L16.336|
                  |L16.312|
000138  f8561020          LDR      r1,[r6,r0,LSL #2]
00013c  f8552020          LDR      r2,[r5,r0,LSL #2]
000140  4411              ADD      r1,r1,r2
000142  f8461020          STR      r1,[r6,r0,LSL #2]
000146  f8b41108          LDRH     r1,[r4,#0x108]
00014a  1c40              ADDS     r0,r0,#1
00014c  4281              CMP      r1,r0
00014e  daf3              BGE      |L16.312|
                  |L16.336|
000150  2200              MOVS     r2,#0
000152  2301              MOVS     r3,#1
000154  4611              MOV      r1,r2
000156  a857              ADD      r0,sp,#0x15c
000158  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00015c  f8b41108          LDRH     r1,[r4,#0x108]
000160  6803              LDR      r3,[r0,#0]
000162  1c49              ADDS     r1,r1,#1
000164  a807              ADD      r0,sp,#0x1c
000166  9a4f              LDR      r2,[sp,#0x13c]
000168  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<bool>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00016c  2101              MOVS     r1,#1
00016e  a807              ADD      r0,sp,#0x1c
000170  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIbE3SetEb ; Anki::Embedded::ArraySlice<bool>::Set(bool)
000174  2200              MOVS     r2,#0
000176  2301              MOVS     r3,#1
000178  4611              MOV      r1,r2
00017a  4668              MOV      r0,sp
00017c  9d13              LDR      r5,[sp,#0x4c]
00017e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000182  f8b41108          LDRH     r1,[r4,#0x108]
000186  6803              LDR      r3,[r0,#0]
000188  1c49              ADDS     r1,r1,#1
00018a  a814              ADD      r0,sp,#0x50
00018c  9a4f              LDR      r2,[sp,#0x13c]
00018e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000192  a914              ADD      r1,sp,#0x50
000194  4620              MOV      r0,r4
000196  9f20              LDR      r7,[sp,#0x80]
000198  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEE ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)
00019c  f8b41108          LDRH     r1,[r4,#0x108]
0001a0  2001              MOVS     r0,#1
0001a2  2901              CMP      r1,#1
0001a4  bfa8              IT       GE
0001a6  2100              MOVGE    r1,#0
0001a8  db18              BLT      |L16.476|
                  |L16.426|
0001aa  f8562020          LDR      r2,[r6,r0,LSL #2]
0001ae  ee002a90          VMOV     s1,r2
0001b2  f8572020          LDR      r2,[r7,r0,LSL #2]
0001b6  ee012a10          VMOV     s2,r2
0001ba  eef80ae0          VCVT.F32.S32 s1,s1
0001be  eeb81ac1          VCVT.F32.S32 s2,s2
0001c2  eec01a81          VDIV.F32 s3,s1,s2
0001c6  eef41ac8          VCMPE.F32 s3,s16
0001ca  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001ce  bf38              IT       CC
0001d0  5429              STRBCC   r1,[r5,r0]
0001d2  1c40              ADDS     r0,r0,#1
0001d4  f8b42108          LDRH     r2,[r4,#0x108]
0001d8  4282              CMP      r2,r0
0001da  dae6              BGE      |L16.426|
                  |L16.476|
0001dc  2000              MOVS     r0,#0
0001de  f1b90f00          CMP      r9,#0
0001e2  bfc8              IT       GT
0001e4  2300              MOVGT    r3,#0
0001e6  dd09              BLE      |L16.508|
                  |L16.488|
0001e8  eb0801c0          ADD      r1,r8,r0,LSL #3
0001ec  88ca              LDRH     r2,[r1,#6]
0001ee  5caa              LDRB     r2,[r5,r2]
0001f0  2a00              CMP      r2,#0
0001f2  bf08              IT       EQ
0001f4  80cb              STRHEQ   r3,[r1,#6]
0001f6  1c40              ADDS     r0,r0,#1
0001f8  4548              CMP      r0,r9
0001fa  dbf5              BLT      |L16.488|
                  |L16.508|
0001fc  4620              MOV      r0,r4
0001fe  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::FindMaximumId()
000202  2000              MOVS     r0,#0
000204  f8840105          STRB     r0,[r4,#0x105]
                  |L16.520|
;;;129          else { return this->componentsS32.InvalidateFilledCenterComponents_hollowRows(minHollowRatio, scratch); }
;;;130        }
000208  b05b              ADD      sp,sp,#0x16c
00020a  ecbd8b02          VPOP     {d8}
00020e  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.530|
000212  f500748c          ADD      r4,r0,#0x118          ;129
000216  eeb08a40          VMOV.F32 s16,s0                ;129
00021a  a850              ADD      r0,sp,#0x140          ;129
00021c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000220  904f              STR      r0,[sp,#0x13c]        ;129
000222  2200              MOVS     r2,#0                 ;129
000224  2301              MOVS     r3,#1                 ;129
000226  4611              MOV      r1,r2                 ;129
000228  a857              ADD      r0,sp,#0x15c          ;129
00022a  f8d4900c          LDR      r9,[r4,#0xc]          ;129
00022e  f8d48030          LDR      r8,[r4,#0x30]         ;129
000232  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000236  f8d41108          LDR      r1,[r4,#0x108]        ;129
00023a  6803              LDR      r3,[r0,#0]            ;129
00023c  1c49              ADDS     r1,r1,#1              ;129
00023e  a82e              ADD      r0,sp,#0xb8           ;129
000240  9a4f              LDR      r2,[sp,#0x13c]        ;129
000242  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000246  2100              MOVS     r1,#0                 ;129
000248  a82e              ADD      r0,sp,#0xb8           ;129
00024a  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
00024e  a848              ADD      r0,sp,#0x120          ;129
000250  9e3a              LDR      r6,[sp,#0xe8]         ;129
000252  994f              LDR      r1,[sp,#0x13c]        ;129
000254  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000258  a948              ADD      r1,sp,#0x120          ;129
00025a  4668              MOV      r0,sp                 ;129
00025c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000260  2200              MOVS     r2,#0                 ;129
000262  2301              MOVS     r3,#1                 ;129
000264  4611              MOV      r1,r2                 ;129
000266  a858              ADD      r0,sp,#0x160          ;129
000268  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00026c  f8d41108          LDR      r1,[r4,#0x108]        ;129
000270  6803              LDR      r3,[r0,#0]            ;129
000272  1c49              ADDS     r1,r1,#1              ;129
000274  466a              MOV      r2,sp                 ;129
000276  a814              ADD      r0,sp,#0x50           ;129
000278  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00027c  2200              MOVS     r2,#0                 ;129
00027e  2301              MOVS     r3,#1                 ;129
000280  4611              MOV      r1,r2                 ;129
000282  a859              ADD      r0,sp,#0x164          ;129
000284  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000288  f8d41108          LDR      r1,[r4,#0x108]        ;129
00028c  6803              LDR      r3,[r0,#0]            ;129
00028e  1c49              ADDS     r1,r1,#1              ;129
000290  466a              MOV      r2,sp                 ;129
000292  a83b              ADD      r0,sp,#0xec           ;129
000294  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000298  2200              MOVS     r2,#0                 ;129
00029a  2301              MOVS     r3,#1                 ;129
00029c  4611              MOV      r1,r2                 ;129
00029e  a85a              ADD      r0,sp,#0x168          ;129
0002a0  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0002a4  f8d41108          LDR      r1,[r4,#0x108]        ;129
0002a8  6803              LDR      r3,[r0,#0]            ;129
0002aa  1c49              ADDS     r1,r1,#1              ;129
0002ac  466a              MOV      r2,sp                 ;129
0002ae  a821              ADD      r0,sp,#0x84           ;129
0002b0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0002b4  f04f31ff          MOV      r1,#0xffffffff        ;129
0002b8  a814              ADD      r0,sp,#0x50           ;129
0002ba  f8dda080          LDR      r10,[sp,#0x80]        ;129
0002be  9f47              LDR      r7,[sp,#0x11c]        ;129
0002c0  9d2d              LDR      r5,[sp,#0xb4]         ;129
0002c2  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
0002c6  2100              MOVS     r1,#0                 ;129
0002c8  a821              ADD      r0,sp,#0x84           ;129
0002ca  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
0002ce  2000              MOVS     r0,#0                 ;129
0002d0  f1b90f00          CMP      r9,#0                 ;129
0002d4  bfc8              IT       GT                    ;129
0002d6  f04f0e00          MOVGT    lr,#0                 ;129
0002da  dd2b              BLE      |L16.820|
                  |L16.732|
0002dc  eb000340          ADD      r3,r0,r0,LSL #1       ;129
0002e0  eb080283          ADD      r2,r8,r3,LSL #2       ;129
0002e4  f938b023          LDRSH    r11,[r8,r3,LSL #2]    ;129
0002e8  6891              LDR      r1,[r2,#8]            ;129
0002ea  f9b23002          LDRSH    r3,[r2,#2]            ;129
0002ee  f9b22004          LDRSH    r2,[r2,#4]            ;129
0002f2  f85ac021          LDR      r12,[r10,r1,LSL #2]   ;129
0002f6  4562              CMP      r2,r12                ;129
0002f8  d10c              BNE      |L16.788|
0002fa  f8572021          LDR      r2,[r7,r1,LSL #2]     ;129
0002fe  f855c021          LDR      r12,[r5,r1,LSL #2]    ;129
000302  ebab0202          SUB      r2,r11,r2             ;129
000306  1e52              SUBS     r2,r2,#1              ;129
000308  4594              CMP      r12,r2                ;129
00030a  bfc8              IT       GT                    ;129
00030c  4662              MOVGT    r2,r12                ;129
00030e  f8452021          STR      r2,[r5,r1,LSL #2]     ;129
000312  e00a              B        |L16.810|
                  |L16.788|
000314  f856c021          LDR      r12,[r6,r1,LSL #2]    ;129
000318  f855b021          LDR      r11,[r5,r1,LSL #2]    ;129
00031c  44dc              ADD      r12,r12,r11           ;129
00031e  f846c021          STR      r12,[r6,r1,LSL #2]    ;129
000322  f845e021          STR      lr,[r5,r1,LSL #2]     ;129
000326  f84a2021          STR      r2,[r10,r1,LSL #2]    ;129
                  |L16.810|
00032a  1c40              ADDS     r0,r0,#1              ;129
00032c  f8473021          STR      r3,[r7,r1,LSL #2]     ;129
000330  4548              CMP      r0,r9                 ;129
000332  dbd3              BLT      |L16.732|
                  |L16.820|
000334  f8d41108          LDR      r1,[r4,#0x108]        ;129
000338  2001              MOVS     r0,#1                 ;129
00033a  2901              CMP      r1,#1                 ;129
00033c  db0b              BLT      |L16.854|
                  |L16.830|
00033e  f8561020          LDR      r1,[r6,r0,LSL #2]     ;129
000342  f8552020          LDR      r2,[r5,r0,LSL #2]     ;129
000346  4411              ADD      r1,r1,r2              ;129
000348  f8461020          STR      r1,[r6,r0,LSL #2]     ;129
00034c  f8d41108          LDR      r1,[r4,#0x108]        ;129
000350  1c40              ADDS     r0,r0,#1              ;129
000352  4281              CMP      r1,r0                 ;129
000354  daf3              BGE      |L16.830|
                  |L16.854|
000356  2200              MOVS     r2,#0                 ;129
000358  2301              MOVS     r3,#1                 ;129
00035a  4611              MOV      r1,r2                 ;129
00035c  a857              ADD      r0,sp,#0x15c          ;129
00035e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000362  f8d41108          LDR      r1,[r4,#0x108]        ;129
000366  6803              LDR      r3,[r0,#0]            ;129
000368  1c49              ADDS     r1,r1,#1              ;129
00036a  a807              ADD      r0,sp,#0x1c           ;129
00036c  9a4f              LDR      r2,[sp,#0x13c]        ;129
00036e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<bool>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000372  2101              MOVS     r1,#1                 ;129
000374  a807              ADD      r0,sp,#0x1c           ;129
000376  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIbE3SetEb ; Anki::Embedded::ArraySlice<bool>::Set(bool)
00037a  2200              MOVS     r2,#0                 ;129
00037c  2301              MOVS     r3,#1                 ;129
00037e  4611              MOV      r1,r2                 ;129
000380  4668              MOV      r0,sp                 ;129
000382  9d13              LDR      r5,[sp,#0x4c]         ;129
000384  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000388  f8d41108          LDR      r1,[r4,#0x108]        ;129
00038c  6803              LDR      r3,[r0,#0]            ;129
00038e  1c49              ADDS     r1,r1,#1              ;129
000390  a814              ADD      r0,sp,#0x50           ;129
000392  9a4f              LDR      r2,[sp,#0x13c]        ;129
000394  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000398  a914              ADD      r1,sp,#0x50           ;129
00039a  4620              MOV      r0,r4                 ;129
00039c  9f20              LDR      r7,[sp,#0x80]         ;129
00039e  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEE ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)
0003a2  f8d41108          LDR      r1,[r4,#0x108]        ;129
0003a6  2001              MOVS     r0,#1                 ;129
0003a8  2901              CMP      r1,#1                 ;129
0003aa  bfa8              IT       GE                    ;129
0003ac  2100              MOVGE    r1,#0                 ;129
0003ae  db18              BLT      |L16.994|
                  |L16.944|
0003b0  f8562020          LDR      r2,[r6,r0,LSL #2]     ;129
0003b4  ee002a90          VMOV     s1,r2                 ;129
0003b8  f8572020          LDR      r2,[r7,r0,LSL #2]     ;129
0003bc  eeb81ae0          VCVT.F32.S32 s2,s1                 ;129
0003c0  ee002a90          VMOV     s1,r2                 ;129
0003c4  eef80ae0          VCVT.F32.S32 s1,s1                 ;129
0003c8  eec11a20          VDIV.F32 s3,s2,s1              ;129
0003cc  eef41ac8          VCMPE.F32 s3,s16                ;129
0003d0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;129
0003d4  bf38              IT       CC                    ;129
0003d6  5429              STRBCC   r1,[r5,r0]            ;129
0003d8  1c40              ADDS     r0,r0,#1              ;129
0003da  f8d42108          LDR      r2,[r4,#0x108]        ;129
0003de  4282              CMP      r2,r0                 ;129
0003e0  dae6              BGE      |L16.944|
                  |L16.994|
0003e2  2000              MOVS     r0,#0                 ;129
0003e4  f1b90f00          CMP      r9,#0                 ;129
0003e8  bfc8              IT       GT                    ;129
0003ea  2300              MOVGT    r3,#0                 ;129
0003ec  dd0b              BLE      |L16.1030|
                  |L16.1006|
0003ee  eb000140          ADD      r1,r0,r0,LSL #1       ;129
0003f2  eb080181          ADD      r1,r8,r1,LSL #2       ;129
0003f6  688a              LDR      r2,[r1,#8]            ;129
0003f8  5caa              LDRB     r2,[r5,r2]            ;129
0003fa  2a00              CMP      r2,#0                 ;129
0003fc  bf08              IT       EQ                    ;129
0003fe  608b              STREQ    r3,[r1,#8]            ;129
000400  1c40              ADDS     r0,r0,#1              ;129
000402  4548              CMP      r0,r9                 ;129
000404  dbf3              BLT      |L16.1006|
                  |L16.1030|
000406  4620              MOV      r0,r4                 ;129
000408  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<int>::FindMaximumId()
00040c  2000              MOVS     r0,#0                 ;129
00040e  f8840105          STRB     r0,[r4,#0x105]        ;129
000412  e6f9              B        |L16.520|
;;;131    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponents48InvalidateFilledCenterComponents_shrunkRectangleEiiNS0_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponents48InvalidateFilledCenterComponents_shrunkRectangleEiiNS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_shrunkRectangle(int, int, Anki::Embedded::MemoryStack)
;;;119    
;;;120        Result ConnectedComponents::InvalidateFilledCenterComponents_shrunkRectangle(const s32 percentHorizontal, const s32 percentVertical, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;121        {
;;;122          if(this->useU16) { return this->componentsU16.InvalidateFilledCenterComponents_shrunkRectangle(percentHorizontal, percentVertical, scratch); }
000004  f890c000          LDRB     r12,[r0,#0]
000008  b0a3              SUB      sp,sp,#0x8c           ;121
00000a  f1bc0f00          CMP      r12,#0
00000e  d07c              BEQ      |L17.266|
000010  1d04              ADDS     r4,r0,#4
000012  460e              MOV      r6,r1
000014  4615              MOV      r5,r2
000016  4619              MOV      r1,r3
000018  a81a              ADD      r0,sp,#0x68
00001a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00001e  4607              MOV      r7,r0
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  2101              MOVS     r1,#1
000026  a821              ADD      r0,sp,#0x84
000028  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00002c  f8b41108          LDRH     r1,[r4,#0x108]
000030  6803              LDR      r3,[r0,#0]
000032  1c49              ADDS     r1,r1,#1
000034  463a              MOV      r2,r7
000036  a80d              ADD      r0,sp,#0x34
000038  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00003c  a90d              ADD      r1,sp,#0x34
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)
000044  2800              CMP      r0,#0
;;;123          else { return this->componentsS32.InvalidateFilledCenterComponents_shrunkRectangle(percentHorizontal, percentVertical, scratch); }
;;;124        }
000046  bf1c              ITT      NE
000048  b023              ADDNE    sp,sp,#0x8c
00004a  e8bd8ff0          POPNE    {r4-r11,pc}
00004e  2000              MOVS     r0,#0
000050  f8b41108          LDRH     r1,[r4,#0x108]
000054  f8dd9064          LDR      r9,[sp,#0x64]
000058  2900              CMP      r1,#0
00005a  db26              BLT      |L17.170|
                  |L17.92|
00005c  eb0901c0          ADD      r1,r9,r0,LSL #3
000060  f8b1c002          LDRH     r12,[r1,#2]
000064  f8b18000          LDRH     r8,[r1,#0]
000068  f8b1b006          LDRH     r11,[r1,#6]
00006c  ebac0208          SUB      r2,r12,r8
000070  b213              SXTH     r3,r2
000072  f8b1a004          LDRH     r10,[r1,#4]
000076  4373              MULS     r3,r6,r3
000078  f343234f          SBFX     r3,r3,#9,#16
00007c  ebab020a          SUB      r2,r11,r10
000080  4498              ADD      r8,r8,r3
000082  b212              SXTH     r2,r2
000084  436a              MULS     r2,r5,r2
000086  f8298030          STRH     r8,[r9,r0,LSL #3]
00008a  ebac0303          SUB      r3,r12,r3
00008e  f342224f          SBFX     r2,r2,#9,#16
000092  804b              STRH     r3,[r1,#2]
000094  eb0a0302          ADD      r3,r10,r2
000098  808b              STRH     r3,[r1,#4]
00009a  ebab0202          SUB      r2,r11,r2
00009e  80ca              STRH     r2,[r1,#6]
0000a0  f8b41108          LDRH     r1,[r4,#0x108]
0000a4  1c40              ADDS     r0,r0,#1
0000a6  4281              CMP      r1,r0
0000a8  dad8              BGE      |L17.92|
                  |L17.170|
0000aa  2300              MOVS     r3,#0
0000ac  461a              MOV      r2,r3
0000ae  2101              MOVS     r1,#1
0000b0  a821              ADD      r0,sp,#0x84
0000b2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000b6  f8b41108          LDRH     r1,[r4,#0x108]
0000ba  6803              LDR      r3,[r0,#0]
0000bc  1c49              ADDS     r1,r1,#1
0000be  463a              MOV      r2,r7
0000c0  4668              MOV      r0,sp
0000c2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<bool>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000c6  f8b40108          LDRH     r0,[r4,#0x108]
0000ca  1c41              ADDS     r1,r0,#1
0000cc  4668              MOV      r0,sp
0000ce  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi ; Anki::Embedded::FixedLengthList<bool>::set_size(int)
0000d2  2101              MOVS     r1,#1
0000d4  4668              MOV      r0,sp
0000d6  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIbE3SetEb ; Anki::Embedded::ArraySlice<bool>::Set(bool)
0000da  68e5              LDR      r5,[r4,#0xc]
0000dc  f8d4c030          LDR      r12,[r4,#0x30]
0000e0  f8dde030          LDR      lr,[sp,#0x30]
0000e4  9b19              LDR      r3,[sp,#0x64]
0000e6  2000              MOVS     r0,#0
0000e8  2d00              CMP      r5,#0
0000ea  dd25              BLE      |L17.312|
                  |L17.236|
0000ec  eb0c06c0          ADD      r6,r12,r0,LSL #3
0000f0  88f1              LDRH     r1,[r6,#6]
0000f2  b1f1              CBZ      r1,|L17.306|
0000f4  f9b62004          LDRSH    r2,[r6,#4]
0000f8  f9b6a002          LDRSH    r10,[r6,#2]
0000fc  f93cb030          LDRSH    r11,[r12,r0,LSL #3]
000100  f9339031          LDRSH    r9,[r3,r1,LSL #3]
000104  eb0306c1          ADD      r6,r3,r1,LSL #3
000108  e000              B        |L17.268|
                  |L17.266|
00010a  e02e              B        |L17.362|
                  |L17.268|
00010c  f9b68002          LDRSH    r8,[r6,#2]
000110  f9b67004          LDRSH    r7,[r6,#4]
000114  f9b66006          LDRSH    r6,[r6,#6]
000118  42ba              CMP      r2,r7
00011a  bfc4              ITT      GT
00011c  1e76              SUBGT    r6,r6,#1
00011e  4296              CMPGT    r6,r2
000120  dd07              BLE      |L17.306|
000122  45d1              CMP      r9,r10
000124  bfbf              ITTTT    LT
000126  f1a80201          SUBLT    r2,r8,#1
00012a  4593              CMPLT    r11,r2
00012c  2200              MOVLT    r2,#0
00012e  f80e2001          STRBLT   r2,[lr,r1]
                  |L17.306|
000132  1c40              ADDS     r0,r0,#1
000134  42a8              CMP      r0,r5
000136  dbd9              BLT      |L17.236|
                  |L17.312|
000138  68e2              LDR      r2,[r4,#0xc]
00013a  6b25              LDR      r5,[r4,#0x30]
00013c  f8ddc030          LDR      r12,[sp,#0x30]
000140  2000              MOVS     r0,#0
000142  2a00              CMP      r2,#0
000144  bfc8              IT       GT
000146  2600              MOVGT    r6,#0
000148  dd0a              BLE      |L17.352|
                  |L17.330|
00014a  eb0501c0          ADD      r1,r5,r0,LSL #3
00014e  88cb              LDRH     r3,[r1,#6]
000150  f81c3003          LDRB     r3,[r12,r3]
000154  2b00              CMP      r3,#0
000156  bf08              IT       EQ
000158  80ce              STRHEQ   r6,[r1,#6]
00015a  1c40              ADDS     r0,r0,#1
00015c  4290              CMP      r0,r2
00015e  dbf4              BLT      |L17.330|
                  |L17.352|
000160  4620              MOV      r0,r4
000162  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::FindMaximumId()
000166  2000              MOVS     r0,#0
000168  e0b0              B        |L17.716|
                  |L17.362|
00016a  f500748c          ADD      r4,r0,#0x118          ;123
00016e  460e              MOV      r6,r1                 ;123
000170  4615              MOV      r5,r2                 ;123
000172  4619              MOV      r1,r3                 ;123
000174  a81a              ADD      r0,sp,#0x68           ;123
000176  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00017a  4607              MOV      r7,r0                 ;123
00017c  2300              MOVS     r3,#0                 ;123
00017e  461a              MOV      r2,r3                 ;123
000180  2101              MOVS     r1,#1                 ;123
000182  a821              ADD      r0,sp,#0x84           ;123
000184  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000188  f8d41108          LDR      r1,[r4,#0x108]        ;123
00018c  6803              LDR      r3,[r0,#0]            ;123
00018e  1c49              ADDS     r1,r1,#1              ;123
000190  463a              MOV      r2,r7                 ;123
000192  a80d              ADD      r0,sp,#0x34           ;123
000194  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000198  a90d              ADD      r1,sp,#0x34           ;123
00019a  4620              MOV      r0,r4                 ;123
00019c  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)
0001a0  2800              CMP      r0,#0                 ;123
0001a2  bf1c              ITT      NE
0001a4  b023              ADDNE    sp,sp,#0x8c
0001a6  e8bd8ff0          POPNE    {r4-r11,pc}
0001aa  2000              MOVS     r0,#0
0001ac  f8d41108          LDR      r1,[r4,#0x108]
0001b0  f8dd9064          LDR      r9,[sp,#0x64]
0001b4  2900              CMP      r1,#0
0001b6  db26              BLT      |L17.518|
                  |L17.440|
0001b8  eb0901c0          ADD      r1,r9,r0,LSL #3
0001bc  f8b1c002          LDRH     r12,[r1,#2]
0001c0  f8b18000          LDRH     r8,[r1,#0]
0001c4  f8b1b006          LDRH     r11,[r1,#6]
0001c8  ebac0208          SUB      r2,r12,r8
0001cc  b213              SXTH     r3,r2
0001ce  f8b1a004          LDRH     r10,[r1,#4]
0001d2  4373              MULS     r3,r6,r3
0001d4  f343234f          SBFX     r3,r3,#9,#16
0001d8  ebab020a          SUB      r2,r11,r10
0001dc  4498              ADD      r8,r8,r3
0001de  b212              SXTH     r2,r2
0001e0  436a              MULS     r2,r5,r2
0001e2  f8298030          STRH     r8,[r9,r0,LSL #3]
0001e6  ebac0303          SUB      r3,r12,r3
0001ea  f342224f          SBFX     r2,r2,#9,#16
0001ee  804b              STRH     r3,[r1,#2]
0001f0  eb0a0302          ADD      r3,r10,r2
0001f4  808b              STRH     r3,[r1,#4]
0001f6  ebab0202          SUB      r2,r11,r2
0001fa  80ca              STRH     r2,[r1,#6]
0001fc  f8d41108          LDR      r1,[r4,#0x108]
000200  1c40              ADDS     r0,r0,#1
000202  4281              CMP      r1,r0
000204  dad8              BGE      |L17.440|
                  |L17.518|
000206  2300              MOVS     r3,#0
000208  461a              MOV      r2,r3
00020a  2101              MOVS     r1,#1
00020c  a821              ADD      r0,sp,#0x84
00020e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000212  f8d41108          LDR      r1,[r4,#0x108]
000216  6803              LDR      r3,[r0,#0]
000218  1c49              ADDS     r1,r1,#1
00021a  463a              MOV      r2,r7
00021c  4668              MOV      r0,sp
00021e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<bool>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000222  f8d40108          LDR      r0,[r4,#0x108]
000226  1c41              ADDS     r1,r0,#1
000228  4668              MOV      r0,sp
00022a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi ; Anki::Embedded::FixedLengthList<bool>::set_size(int)
00022e  2101              MOVS     r1,#1
000230  4668              MOV      r0,sp
000232  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIbE3SetEb ; Anki::Embedded::ArraySlice<bool>::Set(bool)
000236  68e5              LDR      r5,[r4,#0xc]
000238  f8d4c030          LDR      r12,[r4,#0x30]
00023c  f8dde030          LDR      lr,[sp,#0x30]
000240  9b19              LDR      r3,[sp,#0x64]
000242  2100              MOVS     r1,#0
000244  2d00              CMP      r5,#0
000246  dd26              BLE      |L17.662|
                  |L17.584|
000248  eb010741          ADD      r7,r1,r1,LSL #1
00024c  eb0c0687          ADD      r6,r12,r7,LSL #2
000250  68b0              LDR      r0,[r6,#8]
000252  2800              CMP      r0,#0
000254  dd1c              BLE      |L17.656|
000256  f9b62004          LDRSH    r2,[r6,#4]
00025a  f9b6a002          LDRSH    r10,[r6,#2]
00025e  eb0306c0          ADD      r6,r3,r0,LSL #3
000262  f93cb027          LDRSH    r11,[r12,r7,LSL #2]
000266  f9b68002          LDRSH    r8,[r6,#2]
00026a  f9b67004          LDRSH    r7,[r6,#4]
00026e  f9339030          LDRSH    r9,[r3,r0,LSL #3]
000272  f9b66006          LDRSH    r6,[r6,#6]
000276  42ba              CMP      r2,r7
000278  bfc4              ITT      GT
00027a  1e76              SUBGT    r6,r6,#1
00027c  4296              CMPGT    r6,r2
00027e  dd07              BLE      |L17.656|
000280  45d1              CMP      r9,r10
000282  bfbf              ITTTT    LT
000284  f1a80201          SUBLT    r2,r8,#1
000288  4593              CMPLT    r11,r2
00028a  2200              MOVLT    r2,#0
00028c  f80e2000          STRBLT   r2,[lr,r0]
                  |L17.656|
000290  1c49              ADDS     r1,r1,#1
000292  42a9              CMP      r1,r5
000294  dbd8              BLT      |L17.584|
                  |L17.662|
000296  68e2              LDR      r2,[r4,#0xc]
000298  f04f0800          MOV      r8,#0
00029c  6b25              LDR      r5,[r4,#0x30]
00029e  f8ddc030          LDR      r12,[sp,#0x30]
0002a2  4640              MOV      r0,r8
0002a4  2a00              CMP      r2,#0
0002a6  dd0d              BLE      |L17.708|
                  |L17.680|
0002a8  eb000140          ADD      r1,r0,r0,LSL #1
0002ac  eb050181          ADD      r1,r5,r1,LSL #2
0002b0  688b              LDR      r3,[r1,#8]
0002b2  f81c3003          LDRB     r3,[r12,r3]
0002b6  2b00              CMP      r3,#0
0002b8  bf08              IT       EQ
0002ba  f8c18008          STREQ    r8,[r1,#8]
0002be  1c40              ADDS     r0,r0,#1
0002c0  4290              CMP      r0,r2
0002c2  dbf1              BLT      |L17.680|
                  |L17.708|
0002c4  4620              MOV      r0,r4
0002c6  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<int>::FindMaximumId()
0002ca  4640              MOV      r0,r8
                  |L17.716|
0002cc  f8840105          STRB     r0,[r4,#0x105]
0002d0  b023              ADD      sp,sp,#0x8c
0002d2  e8bd8ff0          POP      {r4-r11,pc}
;;;125    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponentsC1EisRNS0_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponentsC2EisRNS0_11MemoryStackE                  ; Alternate entry point ; Anki::Embedded::ConnectedComponents::ConnectedComponents__sub_object(int, short, Anki::Embedded::MemoryStack&)
                  _ZN4Anki8Embedded19ConnectedComponentsC1EisRNS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::ConnectedComponents(int, short, Anki::Embedded::MemoryStack&)
;;;22     
;;;23         ConnectedComponents::ConnectedComponents(const s32 maxComponentSegments, const s16 maxImageWidth, MemoryStack &memory)
;;;24           : useU16(true), componentsU16(ConnectedComponentsTemplate<u16>(maxComponentSegments, maxImageWidth, memory)), componentsS32(ConnectedComponentsTemplate<s32>())
;;;25         {
;;;26         }
;;;27     
000000  b510              PUSH     {r4,lr}
000002  f04f0c01          MOV      r12,#1
000006  f800cb04          STRB     r12,[r0],#4
00000a  b289              UXTH     r1,r1
00000c  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackE ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate(unsigned short, short, Anki::Embedded::MemoryStack&)
000010  f500708a          ADD      r0,r0,#0x114
000014  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev ; Anki::Embedded::ConnectedComponentsTemplate<int>::ConnectedComponentsTemplate()
000018  f5a0708c          SUB      r0,r0,#0x118
00001c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZN4Anki8Embedded19ConnectedComponentsC1EisbRNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded19ConnectedComponentsC2EisbRNS0_11MemoryStackE                  ; Alternate entry point ; Anki::Embedded::ConnectedComponents::ConnectedComponents__sub_object(int, short, bool, Anki::Embedded::MemoryStack&)
                  _ZN4Anki8Embedded19ConnectedComponentsC1EisbRNS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponents::ConnectedComponents(int, short, bool, Anki::Embedded::MemoryStack&)
;;;27     
;;;28         ConnectedComponents::ConnectedComponents(const s32 maxComponentSegments, const s16 maxImageWidth, const bool useU16, MemoryStack &memory)
;;;29           : useU16(useU16)
;;;30         {
;;;31           if(useU16) {
;;;32             this->componentsU16 = ConnectedComponentsTemplate<u16>(maxComponentSegments, maxImageWidth, memory);
;;;33             this->componentsS32 = ConnectedComponentsTemplate<s32>();
;;;34           } else {
;;;35             this->componentsU16 = ConnectedComponentsTemplate<u16>();
;;;36             this->componentsS32 = ConnectedComponentsTemplate<s32>(maxComponentSegments, maxImageWidth, memory);
;;;37           }
;;;38         }
;;;39     
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  f5ad7d28          SUB      sp,sp,#0x2a0
000008  461c              MOV      r4,r3
00000a  f8dda2c0          LDR      r10,[sp,#0x2c0]
00000e  4617              MOV      r7,r2
000010  4688              MOV      r8,r1
000012  f8003b04          STRB     r3,[r0],#4
000016  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1Ev ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate()
00001a  f500708a          ADD      r0,r0,#0x114
00001e  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev ; Anki::Embedded::ConnectedComponentsTemplate<int>::ConnectedComponentsTemplate()
000022  2c00              CMP      r4,#0
000024  f5a0768c          SUB      r6,r0,#0x118
000028  f5a0748a          SUB      r4,r0,#0x114
00002c  d07e              BEQ      |L19.300|
00002e  fa1ff188          UXTH     r1,r8
000032  4653              MOV      r3,r10
000034  463a              MOV      r2,r7
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackE ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate(unsigned short, short, Anki::Embedded::MemoryStack&)
00003c  4605              MOV      r5,r0
00003e  4601              MOV      r1,r0
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000046  f1050134          ADD      r1,r5,#0x34
00004a  f1040034          ADD      r0,r4,#0x34
00004e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000052  f1050168          ADD      r1,r5,#0x68
000056  f1040068          ADD      r0,r4,#0x68
00005a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
00005e  f105019c          ADD      r1,r5,#0x9c
000062  f104009c          ADD      r0,r4,#0x9c
000066  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
00006a  f10501d0          ADD      r1,r5,#0xd0
00006e  f10400d0          ADD      r0,r4,#0xd0
000072  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEaSERKS2_ ; Anki::Embedded::FixedLengthList<unsigned short>::operator =(const Anki::Embedded::FixedLengthList<unsigned short>&)
000076  f8950104          LDRB     r0,[r5,#0x104]
00007a  f8840104          STRB     r0,[r4,#0x104]
00007e  f8950105          LDRB     r0,[r5,#0x105]
000082  f8840105          STRB     r0,[r4,#0x105]
000086  f8950106          LDRB     r0,[r5,#0x106]
00008a  f8840106          STRB     r0,[r4,#0x106]
00008e  f8950107          LDRB     r0,[r5,#0x107]
000092  f8840107          STRB     r0,[r4,#0x107]
000096  f8b50108          LDRH     r0,[r5,#0x108]
00009a  f8a40108          STRH     r0,[r4,#0x108]
00009e  f8d5010c          LDR      r0,[r5,#0x10c]
0000a2  f8c4010c          STR      r0,[r4,#0x10c]
0000a6  f8d50110          LDR      r0,[r5,#0x110]
0000aa  f8c40110          STR      r0,[r4,#0x110]
0000ae  f506748c          ADD      r4,r6,#0x118
0000b2  a845              ADD      r0,sp,#0x114
0000b4  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev ; Anki::Embedded::ConnectedComponentsTemplate<int>::ConnectedComponentsTemplate()
0000b8  4605              MOV      r5,r0
0000ba  4601              MOV      r1,r0
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
0000c2  f1050134          ADD      r1,r5,#0x34
0000c6  f1040034          ADD      r0,r4,#0x34
0000ca  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
0000ce  f1050168          ADD      r1,r5,#0x68
0000d2  f1040068          ADD      r0,r4,#0x68
0000d6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
0000da  f105019c          ADD      r1,r5,#0x9c
0000de  f104009c          ADD      r0,r4,#0x9c
0000e2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
0000e6  f10501d0          ADD      r1,r5,#0xd0
0000ea  f10400d0          ADD      r0,r4,#0xd0
0000ee  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_ ; Anki::Embedded::FixedLengthList<int>::operator =(const Anki::Embedded::FixedLengthList<int>&)
0000f2  f8950104          LDRB     r0,[r5,#0x104]
0000f6  f8840104          STRB     r0,[r4,#0x104]
0000fa  f8950105          LDRB     r0,[r5,#0x105]
0000fe  f8840105          STRB     r0,[r4,#0x105]
000102  f8950106          LDRB     r0,[r5,#0x106]
000106  f8840106          STRB     r0,[r4,#0x106]
00010a  f8950107          LDRB     r0,[r5,#0x107]
00010e  f8840107          STRB     r0,[r4,#0x107]
000112  f8d50108          LDR      r0,[r5,#0x108]
000116  f8c40108          STR      r0,[r4,#0x108]
00011a  f8d5010c          LDR      r0,[r5,#0x10c]
00011e  f8c4010c          STR      r0,[r4,#0x10c]
000122  f8d50110          LDR      r0,[r5,#0x110]
000126  f8c40110          STR      r0,[r4,#0x110]
00012a  e000              B        |L19.302|
                  |L19.300|
00012c  e001              B        |L19.306|
                  |L19.302|
00012e  f000b8d8          B.W      |L19.738|
                  |L19.306|
000132  a802              ADD      r0,sp,#8
000134  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1Ev ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate()
000138  4605              MOV      r5,r0
00013a  4601              MOV      r1,r0
00013c  4620              MOV      r0,r4
00013e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000142  f1050134          ADD      r1,r5,#0x34
000146  f1040034          ADD      r0,r4,#0x34
00014a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
00014e  f1050168          ADD      r1,r5,#0x68
000152  f1040068          ADD      r0,r4,#0x68
000156  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
00015a  f105019c          ADD      r1,r5,#0x9c
00015e  f104009c          ADD      r0,r4,#0x9c
000162  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000166  f10501d0          ADD      r1,r5,#0xd0
00016a  f10400d0          ADD      r0,r4,#0xd0
00016e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEaSERKS2_ ; Anki::Embedded::FixedLengthList<unsigned short>::operator =(const Anki::Embedded::FixedLengthList<unsigned short>&)
000172  f8950104          LDRB     r0,[r5,#0x104]
000176  f8840104          STRB     r0,[r4,#0x104]
00017a  f8950105          LDRB     r0,[r5,#0x105]
00017e  f8840105          STRB     r0,[r4,#0x105]
000182  f8950106          LDRB     r0,[r5,#0x106]
000186  f8840106          STRB     r0,[r4,#0x106]
00018a  f8950107          LDRB     r0,[r5,#0x107]
00018e  f8840107          STRB     r0,[r4,#0x107]
000192  f8b50108          LDRH     r0,[r5,#0x108]
000196  f8a40108          STRH     r0,[r4,#0x108]
00019a  f8d5010c          LDR      r0,[r5,#0x10c]
00019e  f8c4010c          STR      r0,[r4,#0x10c]
0001a2  f8d50110          LDR      r0,[r5,#0x110]
0001a6  f8c40110          STR      r0,[r4,#0x110]
0001aa  f506758c          ADD      r5,r6,#0x118
0001ae  a847              ADD      r0,sp,#0x11c
0001b0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
0001b4  3034              ADDS     r0,r0,#0x34
0001b6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
0001ba  3034              ADDS     r0,r0,#0x34
0001bc  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
0001c0  3034              ADDS     r0,r0,#0x34
0001c2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
0001c6  3034              ADDS     r0,r0,#0x34
0001c8  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1Ev ; Anki::Embedded::FixedLengthList<int>::FixedLengthList()
0001cc  f1a004d0          SUB      r4,r0,#0xd0
0001d0  2000              MOVS     r0,#0
0001d2  f8840104          STRB     r0,[r4,#0x104]
0001d6  f04f0901          MOV      r9,#1
0001da  f8849105          STRB     r9,[r4,#0x105]
0001de  f8849106          STRB     r9,[r4,#0x106]
0001e2  f8849107          STRB     r9,[r4,#0x107]
0001e6  f8c48110          STR      r8,[r4,#0x110]
0001ea  e9c40742          STRD     r0,r7,[r4,#0x108]
0001ee  2f00              CMP      r7,#0
0001f0  dd02              BLE      |L19.504|
0001f2  f5b74f00          CMP      r7,#0x8000
0001f6  db0a              BLT      |L19.526|
                  |L19.504|
0001f8  2198              MOVS     r1,#0x98
0001fa  483c              LDR      r0,|L19.748|
0001fc  e9cd0100          STRD     r0,r1,[sp,#0]
000200  4b3b              LDR      r3,|L19.752|
000202  a23c              ADR      r2,|L19.756|
000204  a145              ADR      r1,|L19.796|
000206  2005              MOVS     r0,#5
000208  f7fffffe          BL       _Anki_Log
00020c  e031              B        |L19.626|
                  |L19.526|
00020e  2300              MOVS     r3,#0
000210  461a              MOV      r2,r3
000212  2101              MOVS     r1,#1
000214  a8a6              ADD      r0,sp,#0x298
000216  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00021a  6803              LDR      r3,[r0,#0]
00021c  4652              MOV      r2,r10
00021e  4641              MOV      r1,r8
000220  a88c              ADD      r0,sp,#0x230
000222  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000226  4601              MOV      r1,r0
000228  4620              MOV      r0,r4
00022a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
00022e  a88c              ADD      r0,sp,#0x230
000230  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
000234  4601              MOV      r1,r0
000236  f1040068          ADD      r0,r4,#0x68
00023a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
00023e  a88c              ADD      r0,sp,#0x230
000240  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
000244  4601              MOV      r1,r0
000246  f1040034          ADD      r0,r4,#0x34
00024a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
00024e  a88c              ADD      r0,sp,#0x230
000250  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
000254  4601              MOV      r1,r0
000256  f104009c          ADD      r0,r4,#0x9c
00025a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
00025e  a899              ADD      r0,sp,#0x264
000260  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1Ev ; Anki::Embedded::FixedLengthList<int>::FixedLengthList()
000264  4601              MOV      r1,r0
000266  f10400d0          ADD      r0,r4,#0xd0
00026a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_ ; Anki::Embedded::FixedLengthList<int>::operator =(const Anki::Embedded::FixedLengthList<int>&)
00026e  f8849104          STRB     r9,[r4,#0x104]
                  |L19.626|
000272  4621              MOV      r1,r4
000274  4628              MOV      r0,r5
000276  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
00027a  f1040134          ADD      r1,r4,#0x34
00027e  f1050034          ADD      r0,r5,#0x34
000282  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
000286  f1040168          ADD      r1,r4,#0x68
00028a  f1050068          ADD      r0,r5,#0x68
00028e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
000292  f104019c          ADD      r1,r4,#0x9c
000296  f105009c          ADD      r0,r5,#0x9c
00029a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
00029e  f10401d0          ADD      r1,r4,#0xd0
0002a2  f10500d0          ADD      r0,r5,#0xd0
0002a6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_ ; Anki::Embedded::FixedLengthList<int>::operator =(const Anki::Embedded::FixedLengthList<int>&)
0002aa  f8940104          LDRB     r0,[r4,#0x104]
0002ae  f8850104          STRB     r0,[r5,#0x104]
0002b2  f8940105          LDRB     r0,[r4,#0x105]
0002b6  f8850105          STRB     r0,[r5,#0x105]
0002ba  f8940106          LDRB     r0,[r4,#0x106]
0002be  f8850106          STRB     r0,[r5,#0x106]
0002c2  f8940107          LDRB     r0,[r4,#0x107]
0002c6  f8850107          STRB     r0,[r5,#0x107]
0002ca  f8d40108          LDR      r0,[r4,#0x108]
0002ce  f8c50108          STR      r0,[r5,#0x108]
0002d2  f8d4010c          LDR      r0,[r4,#0x10c]
0002d6  f8c5010c          STR      r0,[r5,#0x10c]
0002da  f8d40110          LDR      r0,[r4,#0x110]
0002de  f8c50110          STR      r0,[r5,#0x110]
                  |L19.738|
0002e2  f50d7d28          ADD      sp,sp,#0x2a0
0002e6  4630              MOV      r0,r6
0002e8  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

                  |L19.748|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1EisRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ConnectedComponentsTemplate(int, short, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
                  |L19.752|
                          DCD      ||.constdata||+0x98
                  |L19.756|
0002f4  6d617849          DCB      "maxImageWidth must be less than 0x7FFF",0
0002f8  6d616765
0002fc  57696474
000300  68206d75
000304  73742062
000308  65206c65
00030c  73732074
000310  68616e20
000314  30783746
000318  464600  
00031b  00                DCB      0
                  |L19.796|
00031c  436f6e6e          DCB      "ConnectedComponentsTemplate<Type>::ConnectedComponents",0
000320  65637465
000324  64436f6d
000328  706f6e65
00032c  6e747354
000330  656d706c
000334  6174653c
000338  54797065
00033c  3e3a3a43
000340  6f6e6e65
000344  63746564
000348  436f6d70
00034c  6f6e656e
000350  747300  
000353  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponentsC1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponentsC2Ev                  ; Alternate entry point ; Anki::Embedded::ConnectedComponents::ConnectedComponents__sub_object()
                  _ZN4Anki8Embedded19ConnectedComponentsC1Ev PROC ; Anki::Embedded::ConnectedComponents::ConnectedComponents()
;;;17       {
;;;18         ConnectedComponents::ConnectedComponents()
;;;19           : useU16(true), componentsU16(ConnectedComponentsTemplate<u16>()), componentsS32(ConnectedComponentsTemplate<s32>())
;;;20         {
;;;21         }
;;;22     
000000  b510              PUSH     {r4,lr}
000002  2101              MOVS     r1,#1
000004  f8001b04          STRB     r1,[r0],#4
000008  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1Ev ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate()
00000c  f500708a          ADD      r0,r0,#0x114
000010  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev ; Anki::Embedded::ConnectedComponentsTemplate<int>::ConnectedComponentsTemplate()
000014  f5a0708c          SUB      r0,r0,#0x118
000018  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents10get_useU16Ev||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded19ConnectedComponents10get_useU16Ev PROC ; Anki::Embedded::ConnectedComponents::get_useU16() const
;;;155    
;;;156        bool ConnectedComponents::get_useU16() const
000000  7800              LDRB     r0,[r0,#0]
;;;157        {
;;;158          return this->useU16;
;;;159        }
000002  4770              BX       lr
;;;160    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents13get_maximumIdEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded19ConnectedComponents13get_maximumIdEv PROC ; Anki::Embedded::ConnectedComponents::get_maximumId() const
;;;143    
;;;144        s32 ConnectedComponents::get_maximumId() const
000000  7801              LDRB     r1,[r0,#0]
;;;145        {
;;;146          if(this->useU16) { return this->componentsU16.get_maximumId(); }
000002  2900              CMP      r1,#0
000004  bf14              ITE      NE
000006  f8b0010c          LDRHNE   r0,[r0,#0x10c]
00000a  f8d00220          LDREQ    r0,[r0,#0x220]
;;;147          else { return this->componentsS32.get_maximumId(); }
;;;148        }
00000e  4770              BX       lr
;;;149    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents15get_isSortedInXEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded19ConnectedComponents15get_isSortedInXEv PROC ; Anki::Embedded::ConnectedComponents::get_isSortedInX() const
;;;172    
;;;173        bool ConnectedComponents::get_isSortedInX() const
000000  7801              LDRB     r1,[r0,#0]
;;;174        {
;;;175          if(this->useU16) { return this->componentsU16.get_isSortedInX(); }
000002  2900              CMP      r1,#0
000004  bf14              ITE      NE
000006  f890010b          LDRBNE   r0,[r0,#0x10b]
00000a  f890021f          LDRBEQ   r0,[r0,#0x21f]
;;;176          else { return this->componentsS32.get_isSortedInX(); }
;;;177        }
00000e  4770              BX       lr
;;;178    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents15get_isSortedInYEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded19ConnectedComponents15get_isSortedInYEv PROC ; Anki::Embedded::ConnectedComponents::get_isSortedInY() const
;;;166    
;;;167        bool ConnectedComponents::get_isSortedInY() const
000000  7801              LDRB     r1,[r0,#0]
;;;168        {
;;;169          if(this->useU16) { return this->componentsU16.get_isSortedInY(); }
000002  2900              CMP      r1,#0
000004  bf14              ITE      NE
000006  f890010a          LDRBNE   r0,[r0,#0x10a]
00000a  f890021e          LDRBEQ   r0,[r0,#0x21e]
;;;170          else { return this->componentsS32.get_isSortedInY(); }
;;;171        }
00000e  4770              BX       lr
;;;172    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents16get_isSortedInIdEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded19ConnectedComponents16get_isSortedInIdEv PROC ; Anki::Embedded::ConnectedComponents::get_isSortedInId() const
;;;160    
;;;161        bool ConnectedComponents::get_isSortedInId() const
000000  7801              LDRB     r1,[r0,#0]
;;;162        {
;;;163          if(this->useU16) { return this->componentsU16.get_isSortedInId(); }
000002  2900              CMP      r1,#0
000004  bf14              ITE      NE
000006  f8900109          LDRBNE   r0,[r0,#0x109]
00000a  f890021d          LDRBEQ   r0,[r0,#0x21d]
;;;164          else { return this->componentsS32.get_isSortedInId(); }
;;;165        }
00000e  4770              BX       lr
;;;166    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents17get_componentsS32Ev||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded19ConnectedComponents17get_componentsS32Ev PROC ; Anki::Embedded::ConnectedComponents::get_componentsS32() const
;;;184    
;;;185        const ConnectedComponentsTemplate<s32>* ConnectedComponents::get_componentsS32() const
000000  7801              LDRB     r1,[r0,#0]
;;;186        {
;;;187          if(this->useU16) { return NULL; }
000002  2900              CMP      r1,#0
000004  bf14              ITE      NE
000006  2000              MOVNE    r0,#0
;;;188          else { return &this->componentsS32; }
000008  f500708c          ADDEQ    r0,r0,#0x118
;;;189        }
00000c  4770              BX       lr
;;;190    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents17get_componentsU16Ev||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded19ConnectedComponents17get_componentsU16Ev PROC ; Anki::Embedded::ConnectedComponents::get_componentsU16() const
;;;178    
;;;179        const ConnectedComponentsTemplate<u16>* ConnectedComponents::get_componentsU16() const
000000  7801              LDRB     r1,[r0,#0]
;;;180        {
;;;181          if(this->useU16) { return &this->componentsU16; }
000002  2900              CMP      r1,#0
000004  bf14              ITE      NE
000006  1d00              ADDNE    r0,r0,#4
;;;182          else { return NULL; }
000008  2000              MOVEQ    r0,#0
;;;183        }
00000a  4770              BX       lr
;;;184    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded19ConnectedComponents5PrintEv PROC ; Anki::Embedded::ConnectedComponents::Print() const
;;;137    
;;;138        Result ConnectedComponents::Print() const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;139        {
000004  4604              MOV      r4,r0
;;;140          if(this->useU16) { return this->componentsU16.Print(); }
000006  7800              LDRB     r0,[r0,#0]
000008  4f6e              LDR      r7,|L28.452|
00000a  b083              SUB      sp,sp,#0xc            ;139
00000c  f240211f          MOV      r1,#0x21f             ;139
000010  2800              CMP      r0,#0
000012  a26d              ADR      r2,|L28.456|
000014  d062              BEQ      |L28.220|
000016  6920              LDR      r0,[r4,#0x10]         ;139
000018  f04f0900          MOV      r9,#0                 ;139
00001c  1e43              SUBS     r3,r0,#1              ;139
00001e  464e              MOV      r6,r9                 ;139
000020  46ca              MOV      r10,r9                ;139
000022  42bb              CMP      r3,r7                 ;139
000024  bfd8              IT       LE                    ;139
000026  461f              MOVLE    r7,r3                 ;139
000028  6ae0              LDR      r0,[r4,#0x2c]         ;139
00002a  2800              CMP      r0,#0                 ;139
00002c  d027              BEQ      |L28.126|
00002e  69e0              LDR      r0,[r4,#0x1c]         ;139
000030  2800              CMP      r0,#0                 ;139
000032  bfa4              ITT      GE                    ;139
000034  6a20              LDRGE    r0,[r4,#0x20]         ;139
000036  2800              CMPGE    r0,#0                 ;139
000038  db21              BLT      |L28.126|
00003a  4610              MOV      r0,r2                 ;139
00003c  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000040  a065              ADR      r0,|L28.472|
000042  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000046  69e0              LDR      r0,[r4,#0x1c]         ;139
000048  2801              CMP      r0,#1                 ;139
00004a  bfc8              IT       GT                    ;139
00004c  2001              MOVGT    r0,#1                 ;139
00004e  42b0              CMP      r0,r6                 ;139
000050  f34080b0          BLE.W    |L28.436|
000054  f10a0001          ADD      r0,r10,#1             ;139
000058  f1070801          ADD      r8,r7,#1              ;139
00005c  9001              STR      r0,[sp,#4]            ;139
                  |L28.94|
00005e  6a61              LDR      r1,[r4,#0x24]         ;139
000060  6ae0              LDR      r0,[r4,#0x2c]         ;139
000062  f1b90f00          CMP      r9,#0                 ;139
000066  fb060b01          MLA      r11,r6,r1,r0          ;139
00006a  bfb4              ITE      LT                    ;139
00006c  2500              MOVLT    r5,#0                 ;139
00006e  464d              MOVGE    r5,r9                 ;139
000070  6a20              LDR      r0,[r4,#0x20]         ;139
000072  4540              CMP      r0,r8                 ;139
000074  bfc8              IT       GT                    ;139
000076  1c78              ADDGT    r0,r7,#1              ;139
000078  42a8              CMP      r0,r5                 ;139
00007a  dc0e              BGT      |L28.154|
00007c  e021              B        |L28.194|
                  |L28.126|
00007e  4857              LDR      r0,|L28.476|
000080  e9cd0100          STRD     r0,r1,[sp,#0]         ;139
000084  a356              ADR      r3,|L28.480|
000086  a264              ADR      r2,|L28.536|
000088  a16a              ADR      r1,|L28.564|
00008a  2005              MOVS     r0,#5                 ;139
00008c  f7fffffe          BL       _Anki_Log
;;;141          else { return this->componentsS32.Print(); }
;;;142        }
000090  b003              ADD      sp,sp,#0xc
000092  f04f6080          MOV      r0,#0x4000000
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L28.154|
00009a  eb0b00c5          ADD      r0,r11,r5,LSL #3
00009e  f9b01004          LDRSH    r1,[r0,#4]
0000a2  9100              STR      r1,[sp,#0]
0000a4  f9b03002          LDRSH    r3,[r0,#2]
0000a8  f9b02000          LDRSH    r2,[r0,#0]
0000ac  88c1              LDRH     r1,[r0,#6]
0000ae  a066              ADR      r0,|L28.584|
0000b0  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
0000b4  6a20              LDR      r0,[r4,#0x20]
0000b6  1c6d              ADDS     r5,r5,#1
0000b8  4540              CMP      r0,r8
0000ba  bfc8              IT       GT
0000bc  1c78              ADDGT    r0,r7,#1
0000be  42a8              CMP      r0,r5
0000c0  dceb              BGT      |L28.154|
                  |L28.194|
0000c2  a066              ADR      r0,|L28.604|
0000c4  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
0000c8  69e0              LDR      r0,[r4,#0x1c]
0000ca  9901              LDR      r1,[sp,#4]
0000cc  1c76              ADDS     r6,r6,#1
0000ce  4288              CMP      r0,r1
0000d0  bfc8              IT       GT
0000d2  f10a0001          ADDGT    r0,r10,#1
0000d6  42b0              CMP      r0,r6
0000d8  dcc1              BGT      |L28.94|
0000da  e06b              B        |L28.436|
                  |L28.220|
0000dc  f8d40124          LDR      r0,[r4,#0x124]
0000e0  f04f0a00          MOV      r10,#0
0000e4  1e43              SUBS     r3,r0,#1
0000e6  4656              MOV      r6,r10
0000e8  46d3              MOV      r11,r10
0000ea  42bb              CMP      r3,r7
0000ec  bfd8              IT       LE
0000ee  461f              MOVLE    r7,r3
0000f0  f8d40140          LDR      r0,[r4,#0x140]
0000f4  b360              CBZ      r0,|L28.336|
0000f6  f8d40130          LDR      r0,[r4,#0x130]
0000fa  2800              CMP      r0,#0
0000fc  bfa4              ITT      GE
0000fe  f8d40134          LDRGE    r0,[r4,#0x134]
000102  2800              CMPGE    r0,#0
000104  db24              BLT      |L28.336|
000106  4610              MOV      r0,r2
000108  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00010c  a032              ADR      r0,|L28.472|
00010e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
000112  f8d40130          LDR      r0,[r4,#0x130]
000116  2801              CMP      r0,#1
000118  bfc8              IT       GT
00011a  2001              MOVGT    r0,#1
00011c  42b0              CMP      r0,r6
00011e  dd49              BLE      |L28.436|
000120  f10b0001          ADD      r0,r11,#1
000124  f1070801          ADD      r8,r7,#1
000128  9001              STR      r0,[sp,#4]
                  |L28.298|
00012a  f8d41138          LDR      r1,[r4,#0x138]
00012e  f8d40140          LDR      r0,[r4,#0x140]
000132  f1ba0f00          CMP      r10,#0
000136  fb060901          MLA      r9,r6,r1,r0
00013a  bfb4              ITE      LT
00013c  2500              MOVLT    r5,#0
00013e  4655              MOVGE    r5,r10
000140  f8d40134          LDR      r0,[r4,#0x134]
000144  4540              CMP      r0,r8
000146  bfc8              IT       GT
000148  1c78              ADDGT    r0,r7,#1
00014a  42a8              CMP      r0,r5
00014c  dc0e              BGT      |L28.364|
00014e  e024              B        |L28.410|
                  |L28.336|
000150  4843              LDR      r0,|L28.608|
000152  e9cd0100          STRD     r0,r1,[sp,#0]
000156  a322              ADR      r3,|L28.480|
000158  a22f              ADR      r2,|L28.536|
00015a  a136              ADR      r1,|L28.564|
00015c  2005              MOVS     r0,#5
00015e  f7fffffe          BL       _Anki_Log
000162  b003              ADD      sp,sp,#0xc
000164  f04f6080          MOV      r0,#0x4000000
000168  e8bd8ff0          POP      {r4-r11,pc}
                  |L28.364|
00016c  eb050045          ADD      r0,r5,r5,LSL #1
000170  eb090080          ADD      r0,r9,r0,LSL #2
000174  f9b01004          LDRSH    r1,[r0,#4]
000178  9100              STR      r1,[sp,#0]
00017a  f9b03002          LDRSH    r3,[r0,#2]
00017e  f9b02000          LDRSH    r2,[r0,#0]
000182  6881              LDR      r1,[r0,#8]
000184  a030              ADR      r0,|L28.584|
000186  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
00018a  f8d40134          LDR      r0,[r4,#0x134]
00018e  1c6d              ADDS     r5,r5,#1
000190  4540              CMP      r0,r8
000192  bfc8              IT       GT
000194  1c78              ADDGT    r0,r7,#1
000196  42a8              CMP      r0,r5
000198  dce8              BGT      |L28.364|
                  |L28.410|
00019a  a030              ADR      r0,|L28.604|
00019c  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
0001a0  f8d40130          LDR      r0,[r4,#0x130]
0001a4  9901              LDR      r1,[sp,#4]
0001a6  1c76              ADDS     r6,r6,#1
0001a8  4288              CMP      r0,r1
0001aa  bfc8              IT       GT
0001ac  f10b0001          ADDGT    r0,r11,#1
0001b0  42b0              CMP      r0,r6
0001b2  dcba              BGT      |L28.298|
                  |L28.436|
0001b4  a029              ADR      r0,|L28.604|
0001b6  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
0001ba  b003              ADD      sp,sp,#0xc
0001bc  2000              MOVS     r0,#0
0001be  e8bd8ff0          POP      {r4-r11,pc}
;;;143    
                          ENDP

0001c2  0000              DCW      0x0000
                  |L28.452|
                          DCD      0x07fffffe
                  |L28.456|
0001c8  46697865          DCB      "FixedLengthList",0
0001cc  644c656e
0001d0  6774684c
0001d4  69737400
                  |L28.472|
0001d8  3a0a00            DCB      ":\n",0
0001db  00                DCB      0
                  |L28.476|
                          DCD      _ZZNK4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE5PrintEPKciiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::Print(const char*, int, int, int, int) const::__PRETTY_FUNCTION__
                  |L28.480|
0001e0  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
0001e4  6f726574
0001e8  6563685c
0001ec  636f6d6d
0001f0  6f6e5c69
0001f4  6e636c75
0001f8  64655c61
0001fc  6e6b692f
000200  636f6d6d
000204  6f6e2f72
000208  6f626f74
00020c  2f617272
000210  617932  
000213  642e6800          DCB      "d.h",0
000217  00                DCB      0
                  |L28.536|
000218  41727261          DCB      "Array<Type> is not valid",0
00021c  793c5479
000220  70653e20
000224  6973206e
000228  6f742076
00022c  616c6964
000230  00      
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
                  |L28.564|
000234  41727261          DCB      "Array<Type>::Print",0
000238  793c5479
00023c  70653e3a
000240  3a507269
000244  6e7400  
000247  00                DCB      0
                  |L28.584|
000248  5b25643a          DCB      "[%d: (%d->%d, %d)] ",0
00024c  20282564
000250  2d3e2564
000254  2c202564
000258  295d2000
                  |L28.604|
00025c  0a00              DCB      "\n",0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L28.608|
                          DCD      _ZZNK4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE5PrintEPKciiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::Print(const char*, int, int, int, int) const::__PRETTY_FUNCTION__

                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents7IsValidEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded19ConnectedComponents7IsValidEv PROC ; Anki::Embedded::ConnectedComponents::IsValid() const
;;;131    
;;;132        bool ConnectedComponents::IsValid() const
000000  b510              PUSH     {r4,lr}
;;;133        {
;;;134          if(this->useU16) { return this->componentsU16.IsValid(); }
000002  7801              LDRB     r1,[r0,#0]
000004  2900              CMP      r1,#0
000006  d038              BEQ      |L29.122|
000008  1d04              ADDS     r4,r0,#4
00000a  f8900108          LDRB     r0,[r0,#0x108]
00000e  2800              CMP      r0,#0
;;;135          else { return this->componentsS32.IsValid(); }
;;;136        }
000010  bf08              IT       EQ
000012  bd10              POPEQ    {r4,pc}
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
00001a  2800              CMP      r0,#0
00001c  bf08              IT       EQ
00001e  bd10              POPEQ    {r4,pc}
000020  f8940104          LDRB     r0,[r4,#0x104]
000024  2802              CMP      r0,#2
000026  d155              BNE      |L29.212|
000028  f1040034          ADD      r0,r4,#0x34
00002c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
000030  2800              CMP      r0,#0
000032  bf08              IT       EQ
000034  bd10              POPEQ    {r4,pc}
000036  f1040068          ADD      r0,r4,#0x68
00003a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
00003e  2800              CMP      r0,#0
000040  bf08              IT       EQ
000042  bd10              POPEQ    {r4,pc}
000044  f104009c          ADD      r0,r4,#0x9c
000048  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
00004c  2800              CMP      r0,#0
00004e  bf08              IT       EQ
000050  bd10              POPEQ    {r4,pc}
000052  f10400d0          ADD      r0,r4,#0xd0
000056  f8d420dc          LDR      r2,[r4,#0xdc]
00005a  f8d410ec          LDR      r1,[r4,#0xec]
00005e  428a              CMP      r2,r1
000060  dc09              BGT      |L29.118|
000062  6a82              LDR      r2,[r0,#0x28]
000064  b12a              CBZ      r2,|L29.114|
000066  6980              LDR      r0,[r0,#0x18]
000068  2800              CMP      r0,#0
00006a  bfa4              ITT      GE
00006c  2900              CMPGE    r1,#0
00006e  2001              MOVGE    r0,#1
000070  da00              BGE      |L29.116|
                  |L29.114|
000072  2000              MOVS     r0,#0
                  |L29.116|
000074  bb70              CBNZ     r0,|L29.212|
                  |L29.118|
000076  2000              MOVS     r0,#0
000078  bd10              POP      {r4,pc}
                  |L29.122|
00007a  f500748c          ADD      r4,r0,#0x118          ;135
00007e  f890021c          LDRB     r0,[r0,#0x21c]        ;135
000082  2800              CMP      r0,#0                 ;135
000084  bf08              IT       EQ
000086  bd10              POPEQ    {r4,pc}
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
00008e  2800              CMP      r0,#0
000090  bf08              IT       EQ
000092  bd10              POPEQ    {r4,pc}
000094  f8940104          LDRB     r0,[r4,#0x104]
000098  2802              CMP      r0,#2
00009a  d11b              BNE      |L29.212|
00009c  f1040034          ADD      r0,r4,#0x34
0000a0  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
0000a4  2800              CMP      r0,#0
0000a6  bf08              IT       EQ
0000a8  bd10              POPEQ    {r4,pc}
0000aa  f1040068          ADD      r0,r4,#0x68
0000ae  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
0000b2  2800              CMP      r0,#0
0000b4  bf08              IT       EQ
0000b6  bd10              POPEQ    {r4,pc}
0000b8  f104009c          ADD      r0,r4,#0x9c
0000bc  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
0000c0  2800              CMP      r0,#0
0000c2  bf08              IT       EQ
0000c4  bd10              POPEQ    {r4,pc}
0000c6  f10400d0          ADD      r0,r4,#0xd0
0000ca  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv ; Anki::Embedded::FixedLengthList<int>::IsValid() const
0000ce  2800              CMP      r0,#0
0000d0  bf08              IT       EQ
0000d2  bd10              POPEQ    {r4,pc}
                  |L29.212|
0000d4  2001              MOVS     r0,#1
0000d6  bd10              POP      {r4,pc}
;;;137    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded19ConnectedComponents8get_sizeEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded19ConnectedComponents8get_sizeEv PROC ; Anki::Embedded::ConnectedComponents::get_size() const
;;;149    
;;;150        s32 ConnectedComponents::get_size() const
000000  7801              LDRB     r1,[r0,#0]
;;;151        {
;;;152          if(this->useU16) { return this->componentsU16.get_size(); }
000002  2900              CMP      r1,#0
000004  bf14              ITE      NE
000006  6900              LDRNE    r0,[r0,#0x10]
000008  f8d00124          LDREQ    r0,[r0,#0x124]
;;;153          else { return this->componentsS32.get_size(); }
;;;154        }
00000c  4770              BX       lr
;;;155    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponentsC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponentsC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponentsC1EisRNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponentsC1EisRNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponentsC1EisbRNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponentsC1EisbRNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents29Extract2dComponents_FullImageERKNS0_5ArrayIhEEssNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents29Extract2dComponents_FullImageERKNS0_5ArrayIhEEssNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES3_S3_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES3_S3_||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents34Extract2dComponents_PerRow_NextRowEPKhisss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents34Extract2dComponents_PerRow_NextRowEPKhisss||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents35Extract2dComponents_PerRow_FinalizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents35Extract2dComponents_PerRow_FinalizeEv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents30SortConnectedComponentSegmentsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents30SortConnectedComponentSegmentsEv||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents34SortConnectedComponentSegmentsByIdENS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents34SortConnectedComponentSegmentsByIdENS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents36CompressConnectedComponentSegmentIdsENS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents36CompressConnectedComponentSegmentIdsENS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents21ComputeComponentSizesERNS0_15FixedLengthListIiEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents21ComputeComponentSizesERNS0_15FixedLengthListIiEE||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEE||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents48InvalidateFilledCenterComponents_shrunkRectangleEiiNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents48InvalidateFilledCenterComponents_shrunkRectangleEiiNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents43InvalidateFilledCenterComponents_hollowRowsEfNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents43InvalidateFilledCenterComponents_hollowRowsEfNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents7IsValidEv||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents5PrintEv||
                          DCD      0x00000001

                          AREA ||area_number.51||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents13get_maximumIdEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents13get_maximumIdEv||
                          DCD      0x00000001

                          AREA ||area_number.52||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents8get_sizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents8get_sizeEv||
                          DCD      0x00000001

                          AREA ||area_number.53||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents10get_useU16Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents10get_useU16Ev||
                          DCD      0x00000001

                          AREA ||area_number.54||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents16get_isSortedInIdEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents16get_isSortedInIdEv||
                          DCD      0x00000001

                          AREA ||area_number.55||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents15get_isSortedInYEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents15get_isSortedInYEv||
                          DCD      0x00000001

                          AREA ||area_number.56||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents15get_isSortedInXEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents15get_isSortedInXEv||
                          DCD      0x00000001

                          AREA ||area_number.57||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents17get_componentsU16Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents17get_componentsU16Ev||
                          DCD      0x00000001

                          AREA ||area_number.58||, LINKORDER=||i._ZNK4Anki8Embedded19ConnectedComponents17get_componentsS32Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded19ConnectedComponents17get_componentsS32Ev||
                          DCD      0x00000001

                          AREA ||area_number.59||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents17get_componentsU16Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents17get_componentsU16Ev||
                          DCD      0x00000001

                          AREA ||area_number.60||, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponents17get_componentsS32Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponents17get_componentsS32Ev||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  65000000          DCB      0x65,0x00,0x00,0x00
000018  4e656761          DCB      0x4e,0x65,0x67,0x61
00001c  74697665          DCB      0x74,0x69,0x76,0x65
000020  2064696d          DCB      0x20,0x64,0x69,0x6d
000024  656e7369          DCB      0x65,0x6e,0x73,0x69
000028  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
00002c  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000030  6f726574          DCB      0x6f,0x72,0x65,0x74
000034  6563685c          DCB      0x65,0x63,0x68,0x5c
000038  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
00003c  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000040  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000044  64655c61          DCB      0x64,0x65,0x5c,0x61
000048  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
00004c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000050  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000054  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000058  2f617272          DCB      0x2f,0x61,0x72,0x72
00005c  61793264          DCB      0x61,0x79,0x32,0x64
000060  2e680000          DCB      0x2e,0x68,0x00,0x00
000064  41727261          DCB      0x41,0x72,0x72,0x61
000068  793c5479          DCB      0x79,0x3c,0x54,0x79
00006c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000070  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000074  70757465          DCB      0x70,0x75,0x74,0x65
000078  52657175          DCB      0x52,0x65,0x71,0x75
00007c  69726564          DCB      0x69,0x72,0x65,0x64
000080  53747269          DCB      0x53,0x74,0x72,0x69
000084  64650000          DCB      0x64,0x65,0x00,0x00
000088  496e7661          DCB      0x49,0x6e,0x76,0x61
00008c  6c696420          DCB      0x6c,0x69,0x64,0x20
000090  73697a65          DCB      0x73,0x69,0x7a,0x65
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
00009c  6f726574          DCB      0x6f,0x72,0x65,0x74
0000a0  6563685c          DCB      0x65,0x63,0x68,0x5c
0000a4  76697369          DCB      0x76,0x69,0x73,0x69
0000a8  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0000ac  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0000b0  64655c61          DCB      0x64,0x65,0x5c,0x61
0000b4  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0000b8  76697369          DCB      0x76,0x69,0x73,0x69
0000bc  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0000c0  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0000c4  2f636f6e          DCB      0x2f,0x63,0x6f,0x6e
0000c8  6e656374          DCB      0x6e,0x65,0x63,0x74
0000cc  6564436f          DCB      0x65,0x64,0x43,0x6f
0000d0  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
0000d4  656e7473          DCB      0x65,0x6e,0x74,0x73
0000d8  2e680000          DCB      0x2e,0x68,0x00,0x00
0000dc  436f6e6e          DCB      0x43,0x6f,0x6e,0x6e
0000e0  65637465          DCB      0x65,0x63,0x74,0x65
0000e4  64436f6d          DCB      0x64,0x43,0x6f,0x6d
0000e8  706f6e65          DCB      0x70,0x6f,0x6e,0x65
0000ec  6e747354          DCB      0x6e,0x74,0x73,0x54
0000f0  656d706c          DCB      0x65,0x6d,0x70,0x6c
0000f4  6174653c          DCB      0x61,0x74,0x65,0x3c
0000f8  54797065          DCB      0x54,0x79,0x70,0x65
0000fc  3e3a3a45          DCB      0x3e,0x3a,0x3a,0x45
000100  78747261          DCB      0x78,0x74,0x72,0x61
000104  63743264          DCB      0x63,0x74,0x32,0x64
000108  436f6d70          DCB      0x43,0x6f,0x6d,0x70
00010c  6f6e656e          DCB      0x6f,0x6e,0x65,0x6e
000110  74735f50          DCB      0x74,0x73,0x5f,0x50
000114  6572526f          DCB      0x65,0x72,0x52,0x6f
000118  775f4e65          DCB      0x77,0x5f,0x4e,0x65
00011c  7874526f          DCB      0x78,0x74,0x52,0x6f
000120  77000000          DCB      0x77,0x00,0x00,0x00
000124  41727261          DCB      0x41,0x72,0x72,0x61
000128  793c5479          DCB      0x79,0x3c,0x54,0x79
00012c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000130  3a536574          DCB      0x3a,0x53,0x65,0x74
000134  5a65726f          DCB      0x5a,0x65,0x72,0x6f
000138  00000000          DCB      0x00,0x00,0x00,0x00
00013c  41727261          DCB      0x41,0x72,0x72,0x61
000140  793c5479          DCB      0x79,0x3c,0x54,0x79
000144  70653e20          DCB      0x70,0x65,0x3e,0x20
000148  6973206e          DCB      0x69,0x73,0x20,0x6e
00014c  6f742076          DCB      0x6f,0x74,0x20,0x76
000150  616c6964          DCB      0x61,0x6c,0x69,0x64
000154  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d017              BEQ      |L188.64|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L188.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L188.30|
                  |L188.26|
00001a  462b              MOV      r3,r5
00001c  e010              B        |L188.64|
                  |L188.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0a              BGE      |L188.64|
00002a  2185              MOVS     r1,#0x85
00002c  4806              LDR      r0,|L188.72|
00002e  e9cd0100          STRD     r0,r1,[sp,#0]
000032  a306              ADR      r3,|L188.76|
000034  a214              ADR      r2,|L188.136|
000036  a11a              ADR      r1,|L188.160|
000038  2005              MOVS     r0,#5
00003a  f7fffffe          BL       _Anki_Log
00003e  462b              MOV      r3,r5
                  |L188.64|
000040  6023              STR      r3,[r4,#0]
000042  b003              ADD      sp,sp,#0xc
000044  4620              MOV      r0,r4
000046  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L188.72|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L188.76|
00004c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/sequen"
000050  6f726574
000054  6563685c
000058  636f6d6d
00005c  6f6e5c69
000060  6e636c75
000064  64655c61
000068  6e6b692f
00006c  636f6d6d
000070  6f6e2f72
000074  6f626f74
000078  2f736571
00007c  75656e  
00007f  6365732e          DCB      "ces.h",0
000083  6800    
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L188.136|
000088  73697a65          DCB      "size estimation failed",0
00008c  20657374
000090  696d6174
000094  696f6e20
000098  6661696c
00009c  656400  
00009f  00                DCB      0
                  |L188.160|
0000a0  4c696e65          DCB      "LinearSequence<Type>::computeSize",0
0000a4  61725365
0000a8  7175656e
0000ac  63653c54
0000b0  7970653e
0000b4  3a3a636f
0000b8  6d707574
0000bc  6553697a
0000c0  6500    
0000c2  00                DCB      0
0000c3  00                DCB      0

                          AREA ||area_number.189||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.189||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<int>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L195.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L195.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.196||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.196||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000006  300c              ADDS     r0,r0,#0xc
000008  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
00000c  3018              ADDS     r0,r0,#0x18
00000e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000012  f04f31ff          MOV      r1,#0xffffffff
000016  f8401d0c          STR      r1,[r0,#-0xc]!
00001a  f1a00418          SUB      r4,r0,#0x18
00001e  6041              STR      r1,[r0,#4]
000020  6081              STR      r1,[r0,#8]
000022  2100              MOVS     r1,#0
000024  6101              STR      r1,[r0,#0x10]
000026  6141              STR      r1,[r0,#0x14]
000028  6181              STR      r1,[r0,#0x18]
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::set_size(int)
000030  4620              MOV      r0,r4
000032  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.203||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.203||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000006  300c              ADDS     r0,r0,#0xc
000008  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
00000c  3018              ADDS     r0,r0,#0x18
00000e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000012  f04f31ff          MOV      r1,#0xffffffff
000016  f8401d0c          STR      r1,[r0,#-0xc]!
00001a  f1a00418          SUB      r4,r0,#0x18
00001e  6041              STR      r1,[r0,#4]
000020  6081              STR      r1,[r0,#8]
000022  2100              MOVS     r1,#0
000024  6101              STR      r1,[r0,#0x10]
000026  6141              STR      r1,[r0,#0x14]
000028  6181              STR      r1,[r0,#0x18]
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::set_size(int)
000030  4620              MOV      r0,r4
000032  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.210||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.210||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000000  e9d12300          LDRD     r2,r3,[r1,#0]
000004  f8d1c008          LDR      r12,[r1,#8]
000008  f8c0c008          STR      r12,[r0,#8]
00000c  e9c02300          STRD     r2,r3,[r0,#0]
000010  e9d12303          LDRD     r2,r3,[r1,#0xc]
000014  f8d1c014          LDR      r12,[r1,#0x14]
000018  f8c0c014          STR      r12,[r0,#0x14]
00001c  e9c02303          STRD     r2,r3,[r0,#0xc]
000020  698b              LDR      r3,[r1,#0x18]
000022  6183              STR      r3,[r0,#0x18]
000024  69cb              LDR      r3,[r1,#0x1c]
000026  61c3              STR      r3,[r0,#0x1c]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  6203              STR      r3,[r0,#0x20]
00002c  6a4b              LDR      r3,[r1,#0x24]
00002e  6243              STR      r3,[r0,#0x24]
000030  6a8b              LDR      r3,[r1,#0x28]
000032  6283              STR      r3,[r0,#0x28]
000034  6aca              LDR      r2,[r1,#0x2c]
000036  62c2              STR      r2,[r0,#0x2c]
000038  6b09              LDR      r1,[r1,#0x30]
00003a  6301              STR      r1,[r0,#0x30]
00003c  4770              BX       lr
                          ENDP


                          AREA ||area_number.217||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_, LINKORDER=||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.217||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L220.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L220.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L220.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L220.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L220.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L220.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L220.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L220.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L220.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L220.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::set_size(int)
0000b2  e009              B        |L220.200|
                  |L220.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L220.118|
                  |L220.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L220.140|
                  |L220.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L220.162|
                  |L220.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::set_size(int)
                  |L220.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.221||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.221||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackE||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItEC2EtsRNS0_11MemoryStackE                  ; Alternate entry point ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate__sub_object(unsigned short, short, Anki::Embedded::MemoryStack&)
                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackE PROC ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate(unsigned short, short, Anki::Embedded::MemoryStack&)
;;;145    
;;;146        template<typename Type> ConnectedComponentsTemplate<Type>::ConnectedComponentsTemplate(const Type maxComponentSegments, const s16 maxImageWidth, MemoryStack &memory)
;;;147          : curState(STATE_INVALID), isSortedInId(true), isSortedInY(true), isSortedInX(true), maximumId(0), maxImageWidth(maxImageWidth), maxComponentSegments(maxComponentSegments)
;;;148        {
;;;149          //AnkiConditionalErrorAndReturn(maxComponentSegments > 0 && maxComponentSegments <= Type_MAX,
;;;150          //  "ConnectedComponentsTemplate<Type>::ConnectedComponents", "maxComponentSegments must be greater than zero and less than 0xFFFF");
;;;151    
;;;152          AnkiConditionalErrorAndReturn(maxImageWidth > 0 && maxImageWidth <= s16_MAX,
;;;153            "ConnectedComponentsTemplate<Type>::ConnectedComponents", "maxImageWidth must be less than 0x7FFF");
;;;154    
;;;155          this->components = FixedLengthList<ConnectedComponentSegment<Type> >(maxComponentSegments, memory);
;;;156    
;;;157          this->previousComponents1d = FixedLengthList<ConnectedComponentSegment<Type> >();
;;;158          this->currentComponents1d = FixedLengthList<ConnectedComponentSegment<Type> >();
;;;159          this->newPreviousComponents1d = FixedLengthList<ConnectedComponentSegment<Type> >();
;;;160          this->equivalentComponents = FixedLengthList<Type>();
;;;161    
;;;162          this->curState = STATE_CONSTRUCTED;
;;;163        } // ConnectedComponents(const s32 maxComponentSegments, MemoryStack &memory)
;;;164    
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b09e              SUB      sp,sp,#0x78
000006  461f              MOV      r7,r3
000008  4615              MOV      r5,r2
00000a  460e              MOV      r6,r1
00000c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
000010  3034              ADDS     r0,r0,#0x34
000012  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
000016  3034              ADDS     r0,r0,#0x34
000018  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
00001c  3034              ADDS     r0,r0,#0x34
00001e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
000022  3034              ADDS     r0,r0,#0x34
000024  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEC1Ev ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList()
000028  f1a004d0          SUB      r4,r0,#0xd0
00002c  2000              MOVS     r0,#0
00002e  f8840104          STRB     r0,[r4,#0x104]
000032  f04f0801          MOV      r8,#1
000036  f8848105          STRB     r8,[r4,#0x105]
00003a  f8848106          STRB     r8,[r4,#0x106]
00003e  f8848107          STRB     r8,[r4,#0x107]
000042  f8a40108          STRH     r0,[r4,#0x108]
000046  e9c45643          STRD     r5,r6,[r4,#0x10c]
00004a  2d00              CMP      r5,#0
00004c  dd02              BLE      |L227.84|
00004e  f5b54f00          CMP      r5,#0x8000
000052  db0a              BLT      |L227.106|
                  |L227.84|
000054  2198              MOVS     r1,#0x98
000056  4820              LDR      r0,|L227.216|
000058  e9cd0100          STRD     r0,r1,[sp,#0]
00005c  4b1f              LDR      r3,|L227.220|
00005e  a220              ADR      r2,|L227.224|
000060  a129              ADR      r1,|L227.264|
000062  2005              MOVS     r0,#5
000064  f7fffffe          BL       _Anki_Log
000068  e031              B        |L227.206|
                  |L227.106|
00006a  2300              MOVS     r3,#0
00006c  461a              MOV      r2,r3
00006e  2101              MOVS     r1,#1
000070  a81c              ADD      r0,sp,#0x70
000072  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000076  6803              LDR      r3,[r0,#0]
000078  463a              MOV      r2,r7
00007a  4631              MOV      r1,r6
00007c  a802              ADD      r0,sp,#8
00007e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000082  4601              MOV      r1,r0
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
00008a  a802              ADD      r0,sp,#8
00008c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
000090  4601              MOV      r1,r0
000092  f1040068          ADD      r0,r4,#0x68
000096  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
00009a  a802              ADD      r0,sp,#8
00009c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
0000a0  4601              MOV      r1,r0
0000a2  f1040034          ADD      r0,r4,#0x34
0000a6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
0000aa  a802              ADD      r0,sp,#8
0000ac  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
0000b0  4601              MOV      r1,r0
0000b2  f104009c          ADD      r0,r4,#0x9c
0000b6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
0000ba  a80f              ADD      r0,sp,#0x3c
0000bc  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEC1Ev ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList()
0000c0  4601              MOV      r1,r0
0000c2  f10400d0          ADD      r0,r4,#0xd0
0000c6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEaSERKS2_ ; Anki::Embedded::FixedLengthList<unsigned short>::operator =(const Anki::Embedded::FixedLengthList<unsigned short>&)
0000ca  f8848104          STRB     r8,[r4,#0x104]
                  |L227.206|
0000ce  b01e              ADD      sp,sp,#0x78
0000d0  4620              MOV      r0,r4
0000d2  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

0000d6  0000              DCW      0x0000
                  |L227.216|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate(unsigned short, short, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
                  |L227.220|
                          DCD      ||.constdata||+0x98
                  |L227.224|
0000e0  6d617849          DCB      "maxImageWidth must be less than 0x7FFF",0
0000e4  6d616765
0000e8  57696474
0000ec  68206d75
0000f0  73742062
0000f4  65206c65
0000f8  73732074
0000fc  68616e20
000100  30783746
000104  464600  
000107  00                DCB      0
                  |L227.264|
000108  436f6e6e          DCB      "ConnectedComponentsTemplate<Type>::ConnectedComponents",0
00010c  65637465
000110  64436f6d
000114  706f6e65
000118  6e747354
00011c  656d706c
000120  6174653c
000124  54797065
000128  3e3a3a43
00012c  6f6e6e65
000130  63746564
000134  436f6d70
000138  6f6e656e
00013c  747300  
00013f  00                DCB      0

                          AREA ||area_number.228||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackE, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.228||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
000000  e9d12300          LDRD     r2,r3,[r1,#0]
000004  f8d1c008          LDR      r12,[r1,#8]
000008  f8c0c008          STR      r12,[r0,#8]
00000c  e9c02300          STRD     r2,r3,[r0,#0]
000010  e9d12303          LDRD     r2,r3,[r1,#0xc]
000014  f8d1c014          LDR      r12,[r1,#0x14]
000018  f8c0c014          STR      r12,[r0,#0x14]
00001c  e9c02303          STRD     r2,r3,[r0,#0xc]
000020  698b              LDR      r3,[r1,#0x18]
000022  6183              STR      r3,[r0,#0x18]
000024  69cb              LDR      r3,[r1,#0x1c]
000026  61c3              STR      r3,[r0,#0x1c]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  6203              STR      r3,[r0,#0x20]
00002c  6a4b              LDR      r3,[r1,#0x24]
00002e  6243              STR      r3,[r0,#0x24]
000030  6a8b              LDR      r3,[r1,#0x28]
000032  6283              STR      r3,[r0,#0x28]
000034  6aca              LDR      r2,[r1,#0x2c]
000036  62c2              STR      r2,[r0,#0x2c]
000038  6b09              LDR      r1,[r1,#0x30]
00003a  6301              STR      r1,[r0,#0x30]
00003c  4770              BX       lr
                          ENDP


                          AREA ||area_number.235||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_, LINKORDER=||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.235||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L238.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L238.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L238.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L238.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L238.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L238.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L238.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L238.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L238.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L238.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::set_size(int)
0000b2  e009              B        |L238.200|
                  |L238.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L238.118|
                  |L238.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L238.140|
                  |L238.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L238.162|
                  |L238.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::set_size(int)
                  |L238.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.239||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.239||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv PROC ; Anki::Embedded::ConnectedComponentsTemplate<int>::FindMaximumId()
;;;475    
;;;476        template<typename Type> Result ConnectedComponentsTemplate<Type>::FindMaximumId()
000000  b410              PUSH     {r4}
;;;477        {
;;;478          const s32 numComponents = components.get_size();
;;;479    
;;;480          this->maximumId = 0;
000002  2100              MOVS     r1,#0
000004  f8d0c00c          LDR      r12,[r0,#0xc]
000008  f8c01108          STR      r1,[r0,#0x108]
;;;481          const ConnectedComponentSegment<Type> * restrict pConstComponents = components.Pointer(0);
;;;482          for(s32 i=0; i<numComponents; i++) {
00000c  6b04              LDR      r4,[r0,#0x30]
00000e  f1bc0f00          CMP      r12,#0
000012  dd0e              BLE      |L245.50|
                  |L245.20|
;;;483            this->maximumId = MAX(this->maximumId, pConstComponents[i].id);
000014  eb010341          ADD      r3,r1,r1,LSL #1
000018  eb040383          ADD      r3,r4,r3,LSL #2
00001c  f8d02108          LDR      r2,[r0,#0x108]
000020  689b              LDR      r3,[r3,#8]
000022  429a              CMP      r2,r3
000024  bfd8              IT       LE
000026  461a              MOVLE    r2,r3
000028  1c49              ADDS     r1,r1,#1              ;482
00002a  f8c02108          STR      r2,[r0,#0x108]        ;482
00002e  4561              CMP      r1,r12                ;482
000030  dbf0              BLT      |L245.20|
                  |L245.50|
;;;484          }
;;;485    
;;;486          return RESULT_OK;
;;;487        }
000032  bc10              POP      {r4}
000034  2000              MOVS     r0,#0                 ;486
000036  4770              BX       lr
;;;488    
                          ENDP


                          AREA ||area_number.246||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.246||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEv||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEv, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEv PROC ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Finalize()
;;;292    
;;;293        template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_Finalize()
000000  b5f0              PUSH     {r4-r7,lr}
;;;294        {
000002  4605              MOV      r5,r0
;;;295          const s32 MAX_EQUIVALENT_ITERATIONS = 3;
;;;296    
;;;297          AnkiConditionalErrorAndReturnValue(this->curState == STATE_INITIALIZED,
000004  f8900104          LDRB     r0,[r0,#0x104]
000008  b083              SUB      sp,sp,#0xc            ;294
00000a  2802              CMP      r0,#2
00000c  d00e              BEQ      |L252.44|
00000e  f2401129          MOV      r1,#0x129
000012  4824              LDR      r0,|L252.164|
000014  4b24              LDR      r3,|L252.168|
000016  e9cd0100          STRD     r0,r1,[sp,#0]
00001a  a224              ADR      r2,|L252.172|
00001c  f1030144          ADD      r1,r3,#0x44
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       _Anki_Log
;;;298            RESULT_FAIL, "ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow", "Object is not initialized");
;;;299    
;;;300          Type * restrict pEquivalentComponents = equivalentComponents.Pointer(0);
;;;301    
;;;302          const s32 numComponents = components.get_size();
;;;303    
;;;304          // After all the initial 2d labels have been created, go through
;;;305          // equivalentComponents, and update equivalentComponents internally
;;;306          for(s32 iEquivalent=0; iEquivalent<MAX_EQUIVALENT_ITERATIONS; iEquivalent++) {
;;;307            const s32 MAX_RECURSION_LEVEL = 1000; // If it gets anywhere near this high, there's probably a bug
;;;308            s32 numChanges = 0;
;;;309    
;;;310            for(s32 iComponent=0; iComponent<numComponents; iComponent++) {
;;;311              // Trace back along the equivalentComponents list, to find the joined component with the minimum id
;;;312              Type minNeighbor = pEquivalentComponents[iComponent];
;;;313              if(pEquivalentComponents[minNeighbor] != minNeighbor) {
;;;314                s32 recursionLevel;
;;;315                for(recursionLevel=0; recursionLevel<MAX_RECURSION_LEVEL; recursionLevel++) {
;;;316                  if(pEquivalentComponents[minNeighbor] == minNeighbor)
;;;317                    break;
;;;318    
;;;319                  minNeighbor = pEquivalentComponents[minNeighbor]; // "Recurse" to the next lower component in the list
;;;320                }
;;;321    
;;;322                AnkiConditionalWarnAndReturnValue(recursionLevel < MAX_RECURSION_LEVEL, RESULT_FAIL, "extract2dComponents", "Issue with equivalentComponents minimum search (%d)", recursionLevel);
;;;323    
;;;324                numChanges++;
;;;325    
;;;326                pEquivalentComponents[iComponent] = minNeighbor;
;;;327              } // if(pEquivalentComponents[minNeighbor] != minNeighbor)
;;;328            } //  for(s32 iComponent=0; iComponent<numComponents; iComponent++)
;;;329    
;;;330            if(numChanges == 0) {
;;;331              break;
;;;332            }
;;;333          } // for(s32 iEquivalent=0; iEquivalent<MAX_EQUIVALENT_ITERATIONS; iEquivalent++)
;;;334    
;;;335          // Replace the id of all 1d components with their minimum equivalent id
;;;336          {
;;;337            ConnectedComponentSegment<Type> * restrict pComponents = components.Pointer(0);
;;;338            for(s32 iComponent=0; iComponent<numComponents; iComponent++) {
;;;339              pComponents[iComponent].id = pEquivalentComponents[pComponents[iComponent].id];
;;;340            }
;;;341          }
;;;342    
;;;343          FindMaximumId();
;;;344    
;;;345          this->curState = STATE_FINALIZED;
;;;346    
;;;347          // TODO: put this back if it is needed by some other algorithm
;;;348          // Sort all 1D components by id, y, then x
;;;349          // const Result result = SortConnectedComponentSegmentsById();
;;;350          // const Result result = SortConnectedComponentSegments();
;;;351          // return result;
;;;352    
;;;353          return RESULT_OK;
;;;354        } // template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_Finalize()
000026  b003              ADD      sp,sp,#0xc
000028  2001              MOVS     r0,#1                 ;297
00002a  bdf0              POP      {r4-r7,pc}
                  |L252.44|
00002c  f8d5c100          LDR      r12,[r5,#0x100]       ;306
000030  68ee              LDR      r6,[r5,#0xc]          ;306
000032  2700              MOVS     r7,#0                 ;306
                  |L252.52|
000034  2000              MOVS     r0,#0                 ;308
000036  4604              MOV      r4,r0                 ;310
000038  2e00              CMP      r6,#0                 ;310
00003a  dd1b              BLE      |L252.116|
                  |L252.60|
00003c  f85c1024          LDR      r1,[r12,r4,LSL #2]    ;312
000040  f85c2021          LDR      r2,[r12,r1,LSL #2]    ;313
000044  428a              CMP      r2,r1                 ;313
000046  bf18              IT       NE                    ;315
000048  2200              MOVNE    r2,#0                 ;315
00004a  d00b              BEQ      |L252.100|
                  |L252.76|
00004c  f85c3021          LDR      r3,[r12,r1,LSL #2]    ;316
000050  428b              CMP      r3,r1                 ;316
000052  d004              BEQ      |L252.94|
000054  1c52              ADDS     r2,r2,#1              ;315
000056  4619              MOV      r1,r3                 ;316
000058  f5b27f7a          CMP      r2,#0x3e8             ;315
00005c  dbf6              BLT      |L252.76|
                  |L252.94|
00005e  1c40              ADDS     r0,r0,#1              ;324
000060  f84c1024          STR      r1,[r12,r4,LSL #2]    ;326
                  |L252.100|
000064  1c64              ADDS     r4,r4,#1              ;310
000066  42a6              CMP      r6,r4                 ;310
000068  dce8              BGT      |L252.60|
00006a  2800              CMP      r0,#0                 ;330
00006c  bf1c              ITT      NE                    ;306
00006e  1c7f              ADDNE    r7,r7,#1              ;306
000070  2f03              CMPNE    r7,#3                 ;306
000072  dbdf              BLT      |L252.52|
                  |L252.116|
000074  2000              MOVS     r0,#0                 ;338
000076  6b2a              LDR      r2,[r5,#0x30]         ;338
000078  2e00              CMP      r6,#0                 ;338
00007a  dd0a              BLE      |L252.146|
                  |L252.124|
00007c  eb000140          ADD      r1,r0,r0,LSL #1       ;339
000080  eb020181          ADD      r1,r2,r1,LSL #2       ;339
000084  1c40              ADDS     r0,r0,#1              ;338
000086  688b              LDR      r3,[r1,#8]            ;339
000088  4286              CMP      r6,r0                 ;338
00008a  f85c3023          LDR      r3,[r12,r3,LSL #2]    ;339
00008e  608b              STR      r3,[r1,#8]            ;338
000090  dcf4              BGT      |L252.124|
                  |L252.146|
000092  4628              MOV      r0,r5                 ;343
000094  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<int>::FindMaximumId()
000098  2003              MOVS     r0,#3                 ;345
00009a  f8850104          STRB     r0,[r5,#0x104]        ;345
00009e  b003              ADD      sp,sp,#0xc
0000a0  2000              MOVS     r0,#0                 ;353
0000a2  bdf0              POP      {r4-r7,pc}
;;;355    
                          ENDP

                  |L252.164|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Finalize()::__PRETTY_FUNCTION__
                  |L252.168|
                          DCD      ||.constdata||+0x98
                  |L252.172|
0000ac  4f626a65          DCB      "Object is not initialized",0
0000b0  63742069
0000b4  73206e6f
0000b8  7420696e
0000bc  69746961
0000c0  6c697a65
0000c4  6400    
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||area_number.253||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEv, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.253||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisss||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisss, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisss PROC ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
;;;196    
;;;197        template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow(const u8 * restrict binaryImageRow, const s32 imageWidth, const s16 whichRow, const s16 minComponentWidth, const s16 maxSkipDistance)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;198        {
000004  b08d              SUB      sp,sp,#0x34
000006  4692              MOV      r10,r2
000008  e9dd741a          LDRD     r7,r4,[sp,#0x68]
00000c  4688              MOV      r8,r1
00000e  4605              MOV      r5,r0
;;;199          const Type TYPE_MAX = saturate_cast<Type>(1e100);
000010  ed9f0bd9          VLDR     d0,|L259.888|
000014  f7fffffe          BL       _ZN4Anki8Embedded13saturate_castIiEET_d ; Anki::Embedded::saturate_cast<int>(double)
;;;200    
;;;201          AnkiAssert(imageWidth <= maxImageWidth);
;;;202    
;;;203          AnkiConditionalErrorAndReturnValue(this->curState == STATE_INITIALIZED,
000018  900c              STR      r0,[sp,#0x30]
00001a  f8950104          LDRB     r0,[r5,#0x104]
00001e  2802              CMP      r0,#2
000020  d00e              BEQ      |L259.64|
000022  21cb              MOVS     r1,#0xcb
000024  48d6              LDR      r0,|L259.896|
000026  4bd7              LDR      r3,|L259.900|
000028  e9cd0100          STRD     r0,r1,[sp,#0]
00002c  a2d6              ADR      r2,|L259.904|
00002e  f1030144          ADD      r1,r3,#0x44
000032  2005              MOVS     r0,#5
000034  f7fffffe          BL       _Anki_Log
;;;204            RESULT_FAIL, "ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow", "Object is not initialized");
;;;205    
;;;206          const ConnectedComponentSegment<Type> * restrict pCurrentComponents1d = currentComponents1d.Pointer(0);
;;;207          const ConnectedComponentSegment<Type> * restrict pPreviousComponents1d = previousComponents1d.Pointer(0);
;;;208          ConnectedComponentSegment<Type> * restrict pNewPreviousComponents1d = newPreviousComponents1d.Pointer(0);
;;;209    
;;;210          Type * restrict pEquivalentComponents = equivalentComponents.Pointer(0);
;;;211    
;;;212          BeginBenchmark("e2dc_pr_nextRow_extract");
;;;213          ConnectedComponentsTemplate<Type>::Extract1dComponents(binaryImageRow, static_cast<s16>(imageWidth), minComponentWidth, maxSkipDistance, currentComponents1d);
;;;214          EndBenchmark("e2dc_pr_nextRow_extract");
;;;215    
;;;216          const s32 numCurrentComponents1d = currentComponents1d.get_size();
;;;217          const s32 numPreviousComponents1d = previousComponents1d.get_size();
;;;218    
;;;219          newPreviousComponents1d.set_size(numCurrentComponents1d);
;;;220    
;;;221          BeginBenchmark("e2dc_pr_nextRow_mainLoop");
;;;222    
;;;223          for(s32 iCurrent=0; iCurrent<numCurrentComponents1d; iCurrent++) {
;;;224            bool foundMatch = false;
;;;225            Type firstMatchedPreviousId = TYPE_MAX;
;;;226    
;;;227            for(s32 iPrevious=0; iPrevious<numPreviousComponents1d; iPrevious++) {
;;;228              // The current component matches the previous one if
;;;229              // 1. the previous start is less-than-or-equal the current end, and
;;;230              // 2. the previous end is greater-than-or-equal the current start
;;;231    
;;;232              if(pPreviousComponents1d[iPrevious].xStart <= pCurrentComponents1d[iCurrent].xEnd &&
;;;233                pPreviousComponents1d[iPrevious].xEnd >= pCurrentComponents1d[iCurrent].xStart) {
;;;234                  if(!foundMatch) {
;;;235                    // If this is the first match we've found, add this 1d
;;;236                    // component to components, using that previous component's id.
;;;237                    foundMatch = true;
;;;238                    firstMatchedPreviousId = pPreviousComponents1d[iPrevious].id;
;;;239    
;;;240                    const ConnectedComponentSegment<Type> newComponent(pCurrentComponents1d[iCurrent].xStart, pCurrentComponents1d[iCurrent].xEnd, whichRow, firstMatchedPreviousId);
;;;241    
;;;242                    const Result result = components.PushBack(newComponent);
;;;243    
;;;244                    AnkiConditionalErrorAndReturnValue(result == RESULT_OK, result, "extract2dComponents", "Extracted maximum number of 2d components");
;;;245    
;;;246                    pNewPreviousComponents1d[iCurrent] = newComponent;
;;;247                  } else { // if(!foundMatch)
;;;248                    // Update the lookup table for all of:
;;;249                    // 1. The first matching component
;;;250                    // 2. This iPrevious component.
;;;251                    // 3. The newPreviousComponents1d(iCurrent) component
;;;252                    // TODO: Think if this can be changed to make the final equivalence matching faster
;;;253    
;;;254                    const Type previousId = pPreviousComponents1d[iPrevious].id;
;;;255                    const Type minId = MIN(MIN(MIN(firstMatchedPreviousId, previousId), pEquivalentComponents[previousId]), pEquivalentComponents[firstMatchedPreviousId]);
;;;256    
;;;257                    pEquivalentComponents[pEquivalentComponents[firstMatchedPreviousId]] = minId;
;;;258                    pEquivalentComponents[firstMatchedPreviousId] = minId;
;;;259                    pEquivalentComponents[previousId] = minId;
;;;260                    pNewPreviousComponents1d[iCurrent].id = minId;
;;;261                  } // if(!foundMatch) ... else
;;;262              } // if(pPreviousComponents1d[iPrevious].xStart
;;;263            } // for(s32 iPrevious=0; iPrevious<numPreviousComponents1d; iPrevious++)
;;;264    
;;;265            // If none of the previous components matched, start a new id, equal to num2dComponents
;;;266            if(!foundMatch) {
;;;267              this->maximumId++;
;;;268              firstMatchedPreviousId = this->maximumId;
;;;269    
;;;270              const ConnectedComponentSegment<Type> newComponent(pCurrentComponents1d[iCurrent].xStart, pCurrentComponents1d[iCurrent].xEnd, whichRow, firstMatchedPreviousId);
;;;271    
;;;272              pNewPreviousComponents1d[iCurrent] = newComponent;
;;;273    
;;;274              const Result result = components.PushBack(newComponent);
;;;275              //#pragma unused(result)
;;;276    
;;;277              AnkiConditionalWarnAndReturnValue(result == RESULT_OK, result, "extract2dComponents", "Extracted maximum number of 2d components");
;;;278            } // if(!foundMatch)
;;;279          } // for(s32 iCurrent=0; iCurrent<numCurrentComponents1d; iCurrent++)
;;;280    
;;;281          EndBenchmark("e2dc_pr_nextRow_mainLoop");
;;;282    
;;;283          BeginBenchmark("e2dc_pr_nextRow_finalize");
;;;284    
;;;285          // Update previousComponents1d to be newPreviousComponents1d
;;;286          Swap(previousComponents1d, newPreviousComponents1d);
;;;287    
;;;288          EndBenchmark("e2dc_pr_nextRow_finalize");
;;;289    
;;;290          return RESULT_OK;
;;;291        } // template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow(const Array<u8> &binaryImageRow, const s16 minComponentWidth, const s16 maxSkipDistance)
000038  b011              ADD      sp,sp,#0x44
00003a  2001              MOVS     r0,#1                 ;203
00003c  e8bd8ff0          POP      {r4-r11,pc}
                  |L259.64|
000040  f8d59064          LDR      r9,[r5,#0x64]         ;207
000044  f8d50098          LDR      r0,[r5,#0x98]         ;207
000048  900a              STR      r0,[sp,#0x28]         ;207
00004a  f8d500cc          LDR      r0,[r5,#0xcc]         ;208
00004e  9008              STR      r0,[sp,#0x20]         ;208
000050  a0d4              ADR      r0,|L259.932|
000052  f8d56100          LDR      r6,[r5,#0x100]        ;212
000056  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00005a  fa0ff08a          SXTH     r0,r10                ;213
00005e  9006              STR      r0,[sp,#0x18]         ;213
000060  f8cd8000          STR      r8,[sp,#0]            ;213
000064  e9cd7401          STRD     r7,r4,[sp,#4]         ;213
000068  f1050a34          ADD      r10,r5,#0x34          ;213
00006c  2700              MOVS     r7,#0                 ;213
00006e  4639              MOV      r1,r7                 ;213
000070  4650              MOV      r0,r10                ;213
000072  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::set_size(int)
000076  f8dd8000          LDR      r8,[sp,#0]            ;213
00007a  f8980000          LDRB     r0,[r8,#0]            ;213
00007e  2800              CMP      r0,#0                 ;213
000080  bf19              ITTEE    NE                    ;213
000082  2001              MOVNE    r0,#1                 ;213
000084  f04f0800          MOVNE    r8,#0                 ;213
000088  2000              MOVEQ    r0,#0                 ;213
00008a  f04f38ff          MOVEQ    r8,#0xffffffff        ;213
00008e  2401              MOVS     r4,#1                 ;213
000090  9906              LDR      r1,[sp,#0x18]         ;213
000092  2901              CMP      r1,#1                 ;213
000094  dd3f              BLE      |L259.278|
                  |L259.150|
000096  9900              LDR      r1,[sp,#0]            ;213
000098  5d09              LDRB     r1,[r1,r4]            ;213
00009a  b390              CBZ      r0,|L259.258|
00009c  2900              CMP      r1,#0                 ;213
00009e  bf18              IT       NE                    ;213
0000a0  2700              MOVNE    r7,#0                 ;213
0000a2  d133              BNE      |L259.268|
0000a4  1c79              ADDS     r1,r7,#1              ;213
0000a6  b20f              SXTH     r7,r1                 ;213
0000a8  9902              LDR      r1,[sp,#8]            ;213
0000aa  428f              CMP      r7,r1                 ;213
0000ac  dd2e              BLE      |L259.268|
0000ae  eba40008          SUB      r0,r4,r8              ;213
0000b2  9901              LDR      r1,[sp,#4]            ;213
0000b4  b200              SXTH     r0,r0                 ;213
0000b6  4281              CMP      r1,r0                 ;213
0000b8  dc21              BGT      |L259.254|
0000ba  1be0              SUBS     r0,r4,r7              ;213
0000bc  f8ad800c          STRH     r8,[sp,#0xc]          ;213
0000c0  f04f32ff          MOV      r2,#0xffffffff        ;213
0000c4  2100              MOVS     r1,#0                 ;213
0000c6  f8ad000e          STRH     r0,[sp,#0xe]          ;213
0000ca  f8ad2010          STRH     r2,[sp,#0x10]         ;213
0000ce  9105              STR      r1,[sp,#0x14]         ;213
0000d0  4650              MOV      r0,r10                ;213
0000d2  f8dab00c          LDR      r11,[r10,#0xc]        ;213
0000d6  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::get_maximumSize() const
0000da  4583              CMP      r11,r0                ;213
0000dc  da0f              BGE      |L259.254|
0000de  f8da0030          LDR      r0,[r10,#0x30]        ;213
0000e2  eb0b014b          ADD      r1,r11,r11,LSL #1     ;213
0000e6  eb000081          ADD      r0,r0,r1,LSL #2       ;213
0000ea  e9dd1203          LDRD     r1,r2,[sp,#0xc]       ;213
0000ee  9b05              LDR      r3,[sp,#0x14]         ;213
0000f0  6083              STR      r3,[r0,#8]            ;213
0000f2  e9c01200          STRD     r1,r2,[r0,#0]         ;213
0000f6  f10b0101          ADD      r1,r11,#1             ;213
0000fa  f8ca100c          STR      r1,[r10,#0xc]         ;213
                  |L259.254|
0000fe  2000              MOVS     r0,#0                 ;213
000100  e004              B        |L259.268|
                  |L259.258|
000102  e7ff              B        |L259.260|
                  |L259.260|
000104  b111              CBZ      r1,|L259.268|
000106  2001              MOVS     r0,#1                 ;213
000108  46a0              MOV      r8,r4                 ;213
00010a  2700              MOVS     r7,#0                 ;213
                  |L259.268|
00010c  1c61              ADDS     r1,r4,#1              ;213
00010e  b20c              SXTH     r4,r1                 ;213
000110  9906              LDR      r1,[sp,#0x18]         ;213
000112  42a1              CMP      r1,r4                 ;213
000114  dcbf              BGT      |L259.150|
                  |L259.278|
000116  b340              CBZ      r0,|L259.362|
000118  eba10008          SUB      r0,r1,r8              ;213
00011c  9901              LDR      r1,[sp,#4]            ;213
00011e  b200              SXTH     r0,r0                 ;213
000120  4288              CMP      r0,r1                 ;213
000122  db22              BLT      |L259.362|
000124  9806              LDR      r0,[sp,#0x18]         ;213
000126  f8ad8000          STRH     r8,[sp,#0]            ;213
00012a  1bc0              SUBS     r0,r0,r7              ;213
00012c  1e40              SUBS     r0,r0,#1              ;213
00012e  f04f32ff          MOV      r2,#0xffffffff        ;213
000132  2100              MOVS     r1,#0                 ;213
000134  f8ad0002          STRH     r0,[sp,#2]            ;213
000138  f8ad2004          STRH     r2,[sp,#4]            ;213
00013c  9102              STR      r1,[sp,#8]            ;213
00013e  4650              MOV      r0,r10                ;213
000140  f8da400c          LDR      r4,[r10,#0xc]         ;213
000144  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::get_maximumSize() const
000148  42a0              CMP      r0,r4                 ;213
00014a  dd0e              BLE      |L259.362|
00014c  f8da0030          LDR      r0,[r10,#0x30]        ;213
000150  eb040144          ADD      r1,r4,r4,LSL #1       ;213
000154  eb000081          ADD      r0,r0,r1,LSL #2       ;213
000158  e9dd1200          LDRD     r1,r2,[sp,#0]         ;213
00015c  9b02              LDR      r3,[sp,#8]            ;213
00015e  6083              STR      r3,[r0,#8]            ;213
000160  e9c01200          STRD     r1,r2,[r0,#0]         ;213
000164  1c60              ADDS     r0,r4,#1              ;213
000166  f8ca000c          STR      r0,[r10,#0xc]         ;213
                  |L259.362|
00016a  a08e              ADR      r0,|L259.932|
00016c  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000170  6c28              LDR      r0,[r5,#0x40]         ;216
000172  9001              STR      r0,[sp,#4]            ;216
000174  6f68              LDR      r0,[r5,#0x74]         ;217
000176  900b              STR      r0,[sp,#0x2c]         ;219
000178  f105009c          ADD      r0,r5,#0x9c           ;219
00017c  9901              LDR      r1,[sp,#4]            ;219
00017e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::set_size(int)
000182  a08e              ADR      r0,|L259.956|
000184  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000188  9801              LDR      r0,[sp,#4]            ;223
00018a  f04f0a00          MOV      r10,#0                ;223
00018e  2800              CMP      r0,#0                 ;223
000190  f34080cd          BLE.W    |L259.814|
                  |L259.404|
000194  e9dd040b          LDRD     r0,r4,[sp,#0x2c]      ;227
000198  f04f0800          MOV      r8,#0                 ;224
00019c  4647              MOV      r7,r8                 ;227
00019e  2800              CMP      r0,#0                 ;227
0001a0  dd4f              BLE      |L259.578|
0001a2  eb0a004a          ADD      r0,r10,r10,LSL #1     ;232
0001a6  9009              STR      r0,[sp,#0x24]         ;232
0001a8  eb090080          ADD      r0,r9,r0,LSL #2       ;232
0001ac  9005              STR      r0,[sp,#0x14]         ;232
0001ae  e9dd1008          LDRD     r1,r0,[sp,#0x20]      ;232
0001b2  eb010080          ADD      r0,r1,r0,LSL #2       ;246
0001b6  9000              STR      r0,[sp,#0]            ;246
                  |L259.440|
0001b8  990a              LDR      r1,[sp,#0x28]         ;232
0001ba  eb070047          ADD      r0,r7,r7,LSL #1       ;232
0001be  f9313020          LDRSH    r3,[r1,r0,LSL #2]     ;232
0001c2  9905              LDR      r1,[sp,#0x14]         ;232
0001c4  f9b12002          LDRSH    r2,[r1,#2]            ;232
0001c8  4293              CMP      r3,r2                 ;232
0001ca  dc33              BGT      |L259.564|
0001cc  990a              LDR      r1,[sp,#0x28]         ;233
0001ce  eb010080          ADD      r0,r1,r0,LSL #2       ;233
0001d2  9909              LDR      r1,[sp,#0x24]         ;233
0001d4  f9b03002          LDRSH    r3,[r0,#2]            ;233
0001d8  f9391021          LDRSH    r1,[r9,r1,LSL #2]     ;233
0001dc  4299              CMP      r1,r3                 ;233
0001de  dc29              BGT      |L259.564|
0001e0  f1b80f00          CMP      r8,#0                 ;234
0001e4  d02e              BEQ      |L259.580|
0001e6  6880              LDR      r0,[r0,#8]            ;254
0001e8  4284              CMP      r4,r0                 ;255
0001ea  bfac              ITE      GE                    ;255
0001ec  4602              MOVGE    r2,r0                 ;255
0001ee  4622              MOVLT    r2,r4                 ;255
0001f0  f8561020          LDR      r1,[r6,r0,LSL #2]     ;255
0001f4  428a              CMP      r2,r1                 ;255
0001f6  bfa8              IT       GE                    ;255
0001f8  460a              MOVGE    r2,r1                 ;255
0001fa  da03              BGE      |L259.516|
0001fc  4284              CMP      r4,r0                 ;255
0001fe  bfb4              ITE      LT                    ;255
000200  4622              MOVLT    r2,r4                 ;255
000202  4602              MOVGE    r2,r0                 ;255
                  |L259.516|
000204  f8563024          LDR      r3,[r6,r4,LSL #2]     ;255
000208  429a              CMP      r2,r3                 ;255
00020a  bfa8              IT       GE                    ;255
00020c  4619              MOVGE    r1,r3                 ;255
00020e  da09              BGE      |L259.548|
000210  4284              CMP      r4,r0                 ;255
000212  bfb4              ITE      LT                    ;255
000214  4622              MOVLT    r2,r4                 ;255
000216  4602              MOVGE    r2,r0                 ;255
000218  428a              CMP      r2,r1                 ;255
00021a  da03              BGE      |L259.548|
00021c  4284              CMP      r4,r0                 ;255
00021e  bfac              ITE      GE                    ;255
000220  4601              MOVGE    r1,r0                 ;255
000222  4621              MOVLT    r1,r4                 ;255
                  |L259.548|
000224  f8461023          STR      r1,[r6,r3,LSL #2]     ;257
000228  f8461024          STR      r1,[r6,r4,LSL #2]     ;258
00022c  f8461020          STR      r1,[r6,r0,LSL #2]     ;259
000230  9800              LDR      r0,[sp,#0]            ;260
000232  6081              STR      r1,[r0,#8]            ;260
                  |L259.564|
000234  980b              LDR      r0,[sp,#0x2c]         ;227
000236  1c7f              ADDS     r7,r7,#1              ;227
000238  4287              CMP      r7,r0                 ;227
00023a  dbbd              BLT      |L259.440|
00023c  f1b80f00          CMP      r8,#0                 ;266
000240  d16f              BNE      |L259.802|
                  |L259.578|
000242  e03d              B        |L259.704|
                  |L259.580|
000244  6884              LDR      r4,[r0,#8]            ;240
000246  9810              LDR      r0,[sp,#0x40]         ;240
000248  f8ad1008          STRH     r1,[sp,#8]            ;240
00024c  f8ad000c          STRH     r0,[sp,#0xc]          ;240
000250  f8ad200a          STRH     r2,[sp,#0xa]          ;240
000254  9404              STR      r4,[sp,#0x10]         ;240
000256  f04f0801          MOV      r8,#1                 ;237
00025a  4628              MOV      r0,r5                 ;237
00025c  f8d5b00c          LDR      r11,[r5,#0xc]         ;237
000260  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::get_maximumSize() const
000264  4558              CMP      r0,r11                ;237
000266  bfd8              IT       LE                    ;237
000268  f8dfb16c          LDRLE    r11,|L259.984|
00026c  dd0f              BLE      |L259.654|
00026e  6b28              LDR      r0,[r5,#0x30]         ;237
000270  eb0b014b          ADD      r1,r11,r11,LSL #1     ;237
000274  eb000081          ADD      r0,r0,r1,LSL #2       ;237
000278  e9dd1202          LDRD     r1,r2,[sp,#8]         ;237
00027c  9b04              LDR      r3,[sp,#0x10]         ;237
00027e  6083              STR      r3,[r0,#8]            ;237
000280  e9c01200          STRD     r1,r2,[r0,#0]         ;237
000284  f10b0101          ADD      r1,r11,#1             ;237
000288  f04f0b00          MOV      r11,#0                ;237
00028c  60e9              STR      r1,[r5,#0xc]          ;237
                  |L259.654|
00028e  f1bb0f00          CMP      r11,#0                ;244
000292  d00d              BEQ      |L259.688|
000294  21f4              MOVS     r1,#0xf4              ;244
000296  483a              LDR      r0,|L259.896|
000298  e9cd0100          STRD     r0,r1,[sp,#0]         ;244
00029c  4b39              LDR      r3,|L259.900|
00029e  a24f              ADR      r2,|L259.988|
0002a0  a159              ADR      r1,|L259.1032|
0002a2  2005              MOVS     r0,#5                 ;244
0002a4  f7fffffe          BL       _Anki_Log
0002a8  b011              ADD      sp,sp,#0x44
0002aa  4658              MOV      r0,r11                ;244
0002ac  e8bd8ff0          POP      {r4-r11,pc}
                  |L259.688|
0002b0  e9dd1202          LDRD     r1,r2,[sp,#8]         ;246
0002b4  9800              LDR      r0,[sp,#0]            ;246
0002b6  9b04              LDR      r3,[sp,#0x10]         ;246
0002b8  6083              STR      r3,[r0,#8]            ;246
0002ba  e9c01200          STRD     r1,r2,[r0,#0]         ;246
0002be  e7b9              B        |L259.564|
                  |L259.704|
0002c0  f8d50108          LDR      r0,[r5,#0x108]        ;267
0002c4  1c41              ADDS     r1,r0,#1              ;267
0002c6  eb0a004a          ADD      r0,r10,r10,LSL #1     ;270
0002ca  f8c51108          STR      r1,[r5,#0x108]        ;270
0002ce  eb090280          ADD      r2,r9,r0,LSL #2       ;270
0002d2  f8393020          LDRH     r3,[r9,r0,LSL #2]     ;270
0002d6  f8b2c002          LDRH     r12,[r2,#2]           ;270
0002da  9107              STR      r1,[sp,#0x1c]         ;272
0002dc  f8ad3014          STRH     r3,[sp,#0x14]         ;272
0002e0  9908              LDR      r1,[sp,#0x20]         ;272
0002e2  9a10              LDR      r2,[sp,#0x40]         ;272
0002e4  f8adc016          STRH     r12,[sp,#0x16]        ;272
0002e8  f8ad2018          STRH     r2,[sp,#0x18]         ;272
0002ec  eb010080          ADD      r0,r1,r0,LSL #2       ;272
0002f0  e9dd1205          LDRD     r1,r2,[sp,#0x14]      ;272
0002f4  9b07              LDR      r3,[sp,#0x1c]         ;272
0002f6  6083              STR      r3,[r0,#8]            ;272
0002f8  e9c01200          STRD     r1,r2,[r0,#0]         ;272
0002fc  4628              MOV      r0,r5                 ;272
0002fe  68ec              LDR      r4,[r5,#0xc]          ;272
000300  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::get_maximumSize() const
000304  4284              CMP      r4,r0                 ;272
000306  da0c              BGE      |L259.802|
000308  6b28              LDR      r0,[r5,#0x30]         ;272
00030a  eb040144          ADD      r1,r4,r4,LSL #1       ;272
00030e  eb000081          ADD      r0,r0,r1,LSL #2       ;272
000312  e9dd1205          LDRD     r1,r2,[sp,#0x14]      ;272
000316  9b07              LDR      r3,[sp,#0x1c]         ;272
000318  6083              STR      r3,[r0,#8]            ;272
00031a  e9c01200          STRD     r1,r2,[r0,#0]         ;272
00031e  1c61              ADDS     r1,r4,#1              ;272
000320  60e9              STR      r1,[r5,#0xc]          ;272
                  |L259.802|
000322  9801              LDR      r0,[sp,#4]            ;223
000324  f10a0a01          ADD      r10,r10,#1            ;223
000328  4582              CMP      r10,r0                ;223
00032a  f6ffaf33          BLT      |L259.404|
                  |L259.814|
00032e  a023              ADR      r0,|L259.956|
000330  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000334  a039              ADR      r0,|L259.1052|
000336  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00033a  f1050068          ADD      r0,r5,#0x68           ;286
00033e  f105049c          ADD      r4,r5,#0x9c           ;286
000342  e89011ee          LDM      r0,{r1-r3,r5-r8,r12}  ;286
000346  e88d11ee          STM      sp,{r1-r3,r5-r8,r12}  ;286
00034a  f1000120          ADD      r1,r0,#0x20           ;286
00034e  ae08              ADD      r6,sp,#0x20           ;286
000350  e891102e          LDM      r1,{r1-r3,r5,r12}     ;286
000354  e8a6102e          STM      r6!,{r1-r3,r5,r12}    ;286
000358  4621              MOV      r1,r4                 ;286
00035a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
00035e  4669              MOV      r1,sp                 ;286
000360  4620              MOV      r0,r4                 ;286
000362  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
000366  a02d              ADR      r0,|L259.1052|
000368  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00036c  b011              ADD      sp,sp,#0x44
00036e  2000              MOVS     r0,#0                 ;290
000370  e8bd8ff0          POP      {r4-r11,pc}
;;;292    
                          ENDP

                          DCD      0x00000000
                  |L259.888|
000378  2594c37d          DCFD     0x54b249ad2594c37d ; 1e+100
00037c  54b249ad
                  |L259.896|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisssE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)::__PRETTY_FUNCTION__
                  |L259.900|
                          DCD      ||.constdata||+0x98
                  |L259.904|
000388  4f626a65          DCB      "Object is not initialized",0
00038c  63742069
000390  73206e6f
000394  7420696e
000398  69746961
00039c  6c697a65
0003a0  6400    
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L259.932|
0003a4  65326463          DCB      "e2dc_pr_nextRow_extract",0
0003a8  5f70725f
0003ac  6e657874
0003b0  526f775f
0003b4  65787472
0003b8  61637400
                  |L259.956|
0003bc  65326463          DCB      "e2dc_pr_nextRow_mainLoop",0
0003c0  5f70725f
0003c4  6e657874
0003c8  526f775f
0003cc  6d61696e
0003d0  4c6f6f70
0003d4  00      
0003d5  00                DCB      0
0003d6  00                DCB      0
0003d7  00                DCB      0
                  |L259.984|
                          DCD      0x01000001
                  |L259.988|
0003dc  45787472          DCB      "Extracted maximum number of 2d components",0
0003e0  61637465
0003e4  64206d61
0003e8  78696d75
0003ec  6d206e75
0003f0  6d626572
0003f4  206f6620
0003f8  32642063
0003fc  6f6d706f
000400  6e656e74
000404  7300    
000406  00                DCB      0
000407  00                DCB      0
                  |L259.1032|
000408  65787472          DCB      "extract2dComponents",0
00040c  61637432
000410  64436f6d
000414  706f6e65
000418  6e747300
                  |L259.1052|
00041c  65326463          DCB      "e2dc_pr_nextRow_finalize",0
000420  5f70725f
000424  6e657874
000428  526f775f
00042c  66696e61
000430  6c697a65
000434  00      
000435  00                DCB      0
000436  00                DCB      0
000437  00                DCB      0

                          AREA ||area_number.260||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisss, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.260||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisss||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIiEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<int>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L266.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L266.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L266.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L266.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L266.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L266.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L266.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L266.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L266.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L266.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
0000b2  e009              B        |L266.200|
                  |L266.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L266.118|
                  |L266.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L266.140|
                  |L266.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L266.162|
                  |L266.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
                  |L266.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.267||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.267||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_ PROC ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
;;;164    
;;;165        template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_Initialize(MemoryStack &fastMemory, MemoryStack &slowerMemory, MemoryStack &slowestMemory)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;166        {
000004  b09e              SUB      sp,sp,#0x78
000006  461f              MOV      r7,r3
000008  4690              MOV      r8,r2
00000a  460e              MOV      r6,r1
00000c  4604              MOV      r4,r0
;;;167          const Type MAX_2D_COMPONENTS = static_cast<Type>(components.get_maximumSize());
00000e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::get_maximumSize() const
000012  4605              MOV      r5,r0
;;;168    
;;;169          AnkiConditionalErrorAndReturnValue(this->curState == STATE_CONSTRUCTED,
000014  f8940104          LDRB     r0,[r4,#0x104]
000018  2801              CMP      r0,#1
00001a  d00e              BEQ      |L273.58|
00001c  21a9              MOVS     r1,#0xa9
00001e  4845              LDR      r0,|L273.308|
000020  4b45              LDR      r3,|L273.312|
000022  e9cd0100          STRD     r0,r1,[sp,#0]
000026  a245              ADR      r2,|L273.316|
000028  f1030144          ADD      r1,r3,#0x44
00002c  2005              MOVS     r0,#5
00002e  f7fffffe          BL       _Anki_Log
;;;170            RESULT_FAIL, "ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow", "Object is not constructed (or was initialized earlier)");
;;;171    
;;;172          components.Clear();
;;;173    
;;;174          this->maximumId = 0;
;;;175    
;;;176          this->previousComponents1d = FixedLengthList<ConnectedComponentSegment<Type> >(maxImageWidth, fastMemory);
;;;177          this->currentComponents1d = FixedLengthList<ConnectedComponentSegment<Type> >(maxImageWidth, fastMemory);
;;;178          this->newPreviousComponents1d = FixedLengthList<ConnectedComponentSegment<Type> >(maxImageWidth, fastMemory);
;;;179    
;;;180          const s32 bytesRequired = 256 + MEMORY_ALIGNMENT + maxComponentSegments * sizeof(Type);
;;;181          if(slowerMemory.ComputeLargestPossibleAllocation() >= bytesRequired) {
;;;182            this->equivalentComponents = FixedLengthList<Type>(maxComponentSegments, slowerMemory);
;;;183          } else {
;;;184            this->equivalentComponents = FixedLengthList<Type>(maxComponentSegments, slowestMemory);
;;;185          }
;;;186    
;;;187          Type * restrict pEquivalentComponents = equivalentComponents.Pointer(0);
;;;188          for(s32 i=0; i<MAX_2D_COMPONENTS; i++) {
;;;189            pEquivalentComponents[i] = static_cast<Type>(i);
;;;190          }
;;;191    
;;;192          this->curState = STATE_INITIALIZED;
;;;193    
;;;194          return RESULT_OK;
;;;195        } // template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_Initialize()
000032  b01e              ADD      sp,sp,#0x78
000034  2001              MOVS     r0,#1                 ;169
000036  e8bd81f0          POP      {r4-r8,pc}
                  |L273.58|
00003a  2100              MOVS     r1,#0
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::set_size(int)
000042  2000              MOVS     r0,#0                 ;174
000044  4603              MOV      r3,r0                 ;176
000046  4602              MOV      r2,r0                 ;176
000048  f8c40108          STR      r0,[r4,#0x108]        ;176
00004c  2101              MOVS     r1,#1                 ;176
00004e  a81c              ADD      r0,sp,#0x70           ;176
000050  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000054  6803              LDR      r3,[r0,#0]            ;176
000056  f8d4110c          LDR      r1,[r4,#0x10c]        ;176
00005a  4632              MOV      r2,r6                 ;176
00005c  a802              ADD      r0,sp,#8              ;176
00005e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000062  4601              MOV      r1,r0                 ;176
000064  f1040068          ADD      r0,r4,#0x68           ;176
000068  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
00006c  2300              MOVS     r3,#0                 ;177
00006e  461a              MOV      r2,r3                 ;177
000070  2101              MOVS     r1,#1                 ;177
000072  a81c              ADD      r0,sp,#0x70           ;177
000074  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000078  6803              LDR      r3,[r0,#0]            ;177
00007a  f8d4110c          LDR      r1,[r4,#0x10c]        ;177
00007e  4632              MOV      r2,r6                 ;177
000080  a802              ADD      r0,sp,#8              ;177
000082  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000086  4601              MOV      r1,r0                 ;177
000088  f1040034          ADD      r0,r4,#0x34           ;177
00008c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
000090  2300              MOVS     r3,#0                 ;178
000092  461a              MOV      r2,r3                 ;178
000094  2101              MOVS     r1,#1                 ;178
000096  a81c              ADD      r0,sp,#0x70           ;178
000098  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00009c  6803              LDR      r3,[r0,#0]            ;178
00009e  f8d4110c          LDR      r1,[r4,#0x10c]        ;178
0000a2  4632              MOV      r2,r6                 ;178
0000a4  a802              ADD      r0,sp,#8              ;178
0000a6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000aa  4601              MOV      r1,r0                 ;178
0000ac  f104009c          ADD      r0,r4,#0x9c           ;178
0000b0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
0000b4  f8d40110          LDR      r0,[r4,#0x110]        ;180
0000b8  f44f7188          MOV      r1,#0x110             ;180
0000bc  eb010680          ADD      r6,r1,r0,LSL #2       ;180
0000c0  4640              MOV      r0,r8                 ;181
0000c2  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack32ComputeLargestPossibleAllocationEv ; Anki::Embedded::MemoryStack::ComputeLargestPossibleAllocation() const
0000c6  42b0              CMP      r0,r6                 ;181
0000c8  f04f0300          MOV      r3,#0                 ;184
0000cc  461a              MOV      r2,r3                 ;184
0000ce  f04f0101          MOV      r1,#1                 ;184
0000d2  4668              MOV      r0,sp                 ;184
0000d4  db0e              BLT      |L273.244|
0000d6  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000da  6803              LDR      r3,[r0,#0]            ;182
0000dc  f8d41110          LDR      r1,[r4,#0x110]        ;182
0000e0  4642              MOV      r2,r8                 ;182
0000e2  a80f              ADD      r0,sp,#0x3c           ;182
0000e4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000e8  4601              MOV      r1,r0                 ;182
0000ea  f10400d0          ADD      r0,r4,#0xd0           ;182
0000ee  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_ ; Anki::Embedded::FixedLengthList<int>::operator =(const Anki::Embedded::FixedLengthList<int>&)
0000f2  e00d              B        |L273.272|
                  |L273.244|
0000f4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000f8  6803              LDR      r3,[r0,#0]            ;184
0000fa  f8d41110          LDR      r1,[r4,#0x110]        ;184
0000fe  463a              MOV      r2,r7                 ;184
000100  a80f              ADD      r0,sp,#0x3c           ;184
000102  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000106  4601              MOV      r1,r0                 ;184
000108  f10400d0          ADD      r0,r4,#0xd0           ;184
00010c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_ ; Anki::Embedded::FixedLengthList<int>::operator =(const Anki::Embedded::FixedLengthList<int>&)
                  |L273.272|
000110  2000              MOVS     r0,#0                 ;188
000112  f8d41100          LDR      r1,[r4,#0x100]        ;188
000116  2d00              CMP      r5,#0                 ;188
000118  dd04              BLE      |L273.292|
                  |L273.282|
00011a  f8410020          STR      r0,[r1,r0,LSL #2]     ;189
00011e  1c40              ADDS     r0,r0,#1              ;188
000120  4285              CMP      r5,r0                 ;188
000122  dcfa              BGT      |L273.282|
                  |L273.292|
000124  2002              MOVS     r0,#2                 ;192
000126  f8840104          STRB     r0,[r4,#0x104]        ;192
00012a  b01e              ADD      sp,sp,#0x78
00012c  2000              MOVS     r0,#0                 ;194
00012e  e8bd81f0          POP      {r4-r8,pc}
;;;196    
                          ENDP

000132  0000              DCW      0x0000
                  |L273.308|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
                  |L273.312|
                          DCD      ||.constdata||+0x98
                  |L273.316|
00013c  4f626a65          DCB      "Object is not constructed (or was initialized earlier)",0
000140  63742069
000144  73206e6f
000148  7420636f
00014c  6e737472
000150  75637465
000154  6420286f
000158  72207761
00015c  7320696e
000160  69746961
000164  6c697a65
000168  64206561
00016c  726c6965
000170  722900  
000173  00                DCB      0

                          AREA ||area_number.274||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.274||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEv||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEv, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEv PROC ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Finalize()
;;;292    
;;;293        template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_Finalize()
000000  b5f0              PUSH     {r4-r7,lr}
;;;294        {
000002  4605              MOV      r5,r0
;;;295          const s32 MAX_EQUIVALENT_ITERATIONS = 3;
;;;296    
;;;297          AnkiConditionalErrorAndReturnValue(this->curState == STATE_INITIALIZED,
000004  f8900104          LDRB     r0,[r0,#0x104]
000008  b083              SUB      sp,sp,#0xc            ;294
00000a  2802              CMP      r0,#2
00000c  d00e              BEQ      |L280.44|
00000e  f2401129          MOV      r1,#0x129
000012  4823              LDR      r0,|L280.160|
000014  4b23              LDR      r3,|L280.164|
000016  e9cd0100          STRD     r0,r1,[sp,#0]
00001a  a223              ADR      r2,|L280.168|
00001c  f1030144          ADD      r1,r3,#0x44
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       _Anki_Log
;;;298            RESULT_FAIL, "ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow", "Object is not initialized");
;;;299    
;;;300          Type * restrict pEquivalentComponents = equivalentComponents.Pointer(0);
;;;301    
;;;302          const s32 numComponents = components.get_size();
;;;303    
;;;304          // After all the initial 2d labels have been created, go through
;;;305          // equivalentComponents, and update equivalentComponents internally
;;;306          for(s32 iEquivalent=0; iEquivalent<MAX_EQUIVALENT_ITERATIONS; iEquivalent++) {
;;;307            const s32 MAX_RECURSION_LEVEL = 1000; // If it gets anywhere near this high, there's probably a bug
;;;308            s32 numChanges = 0;
;;;309    
;;;310            for(s32 iComponent=0; iComponent<numComponents; iComponent++) {
;;;311              // Trace back along the equivalentComponents list, to find the joined component with the minimum id
;;;312              Type minNeighbor = pEquivalentComponents[iComponent];
;;;313              if(pEquivalentComponents[minNeighbor] != minNeighbor) {
;;;314                s32 recursionLevel;
;;;315                for(recursionLevel=0; recursionLevel<MAX_RECURSION_LEVEL; recursionLevel++) {
;;;316                  if(pEquivalentComponents[minNeighbor] == minNeighbor)
;;;317                    break;
;;;318    
;;;319                  minNeighbor = pEquivalentComponents[minNeighbor]; // "Recurse" to the next lower component in the list
;;;320                }
;;;321    
;;;322                AnkiConditionalWarnAndReturnValue(recursionLevel < MAX_RECURSION_LEVEL, RESULT_FAIL, "extract2dComponents", "Issue with equivalentComponents minimum search (%d)", recursionLevel);
;;;323    
;;;324                numChanges++;
;;;325    
;;;326                pEquivalentComponents[iComponent] = minNeighbor;
;;;327              } // if(pEquivalentComponents[minNeighbor] != minNeighbor)
;;;328            } //  for(s32 iComponent=0; iComponent<numComponents; iComponent++)
;;;329    
;;;330            if(numChanges == 0) {
;;;331              break;
;;;332            }
;;;333          } // for(s32 iEquivalent=0; iEquivalent<MAX_EQUIVALENT_ITERATIONS; iEquivalent++)
;;;334    
;;;335          // Replace the id of all 1d components with their minimum equivalent id
;;;336          {
;;;337            ConnectedComponentSegment<Type> * restrict pComponents = components.Pointer(0);
;;;338            for(s32 iComponent=0; iComponent<numComponents; iComponent++) {
;;;339              pComponents[iComponent].id = pEquivalentComponents[pComponents[iComponent].id];
;;;340            }
;;;341          }
;;;342    
;;;343          FindMaximumId();
;;;344    
;;;345          this->curState = STATE_FINALIZED;
;;;346    
;;;347          // TODO: put this back if it is needed by some other algorithm
;;;348          // Sort all 1D components by id, y, then x
;;;349          // const Result result = SortConnectedComponentSegmentsById();
;;;350          // const Result result = SortConnectedComponentSegments();
;;;351          // return result;
;;;352    
;;;353          return RESULT_OK;
;;;354        } // template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_Finalize()
000026  b003              ADD      sp,sp,#0xc
000028  2001              MOVS     r0,#1                 ;297
00002a  bdf0              POP      {r4-r7,pc}
                  |L280.44|
00002c  f8d5c100          LDR      r12,[r5,#0x100]       ;306
000030  68ee              LDR      r6,[r5,#0xc]          ;306
000032  2700              MOVS     r7,#0                 ;306
                  |L280.52|
000034  2000              MOVS     r0,#0                 ;308
000036  4604              MOV      r4,r0                 ;310
000038  2e00              CMP      r6,#0                 ;310
00003a  dd1b              BLE      |L280.116|
                  |L280.60|
00003c  f83c1014          LDRH     r1,[r12,r4,LSL #1]    ;312
000040  f83c2011          LDRH     r2,[r12,r1,LSL #1]    ;313
000044  428a              CMP      r2,r1                 ;313
000046  bf18              IT       NE                    ;315
000048  2200              MOVNE    r2,#0                 ;315
00004a  d00b              BEQ      |L280.100|
                  |L280.76|
00004c  f83c3011          LDRH     r3,[r12,r1,LSL #1]    ;316
000050  428b              CMP      r3,r1                 ;316
000052  d004              BEQ      |L280.94|
000054  1c52              ADDS     r2,r2,#1              ;315
000056  4619              MOV      r1,r3                 ;316
000058  f5b27f7a          CMP      r2,#0x3e8             ;315
00005c  dbf6              BLT      |L280.76|
                  |L280.94|
00005e  1c40              ADDS     r0,r0,#1              ;324
000060  f82c1014          STRH     r1,[r12,r4,LSL #1]    ;326
                  |L280.100|
000064  1c64              ADDS     r4,r4,#1              ;310
000066  42a6              CMP      r6,r4                 ;310
000068  dce8              BGT      |L280.60|
00006a  2800              CMP      r0,#0                 ;330
00006c  bf1c              ITT      NE                    ;306
00006e  1c7f              ADDNE    r7,r7,#1              ;306
000070  2f03              CMPNE    r7,#3                 ;306
000072  dbdf              BLT      |L280.52|
                  |L280.116|
000074  2000              MOVS     r0,#0                 ;338
000076  6b2a              LDR      r2,[r5,#0x30]         ;338
000078  2e00              CMP      r6,#0                 ;338
00007a  dd08              BLE      |L280.142|
                  |L280.124|
00007c  eb0201c0          ADD      r1,r2,r0,LSL #3       ;339
000080  1c40              ADDS     r0,r0,#1              ;338
000082  88cb              LDRH     r3,[r1,#6]            ;339
000084  4286              CMP      r6,r0                 ;338
000086  f83c3013          LDRH     r3,[r12,r3,LSL #1]    ;339
00008a  80cb              STRH     r3,[r1,#6]            ;339
00008c  dcf6              BGT      |L280.124|
                  |L280.142|
00008e  4628              MOV      r0,r5                 ;343
000090  f7fffffe          BL       _ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::FindMaximumId()
000094  2003              MOVS     r0,#3                 ;345
000096  f8850104          STRB     r0,[r5,#0x104]        ;345
00009a  b003              ADD      sp,sp,#0xc
00009c  2000              MOVS     r0,#0                 ;353
00009e  bdf0              POP      {r4-r7,pc}
;;;355    
                          ENDP

                  |L280.160|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Finalize()::__PRETTY_FUNCTION__
                  |L280.164|
                          DCD      ||.constdata||+0x98
                  |L280.168|
0000a8  4f626a65          DCB      "Object is not initialized",0
0000ac  63742069
0000b0  73206e6f
0000b4  7420696e
0000b8  69746961
0000bc  6c697a65
0000c0  6400    
0000c2  00                DCB      0
0000c3  00                DCB      0

                          AREA ||area_number.281||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEv, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.281||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisss||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisss, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisss PROC ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)
;;;196    
;;;197        template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow(const u8 * restrict binaryImageRow, const s32 imageWidth, const s16 whichRow, const s16 minComponentWidth, const s16 maxSkipDistance)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;198        {
000004  b08d              SUB      sp,sp,#0x34
000006  4691              MOV      r9,r2
000008  e9dd541a          LDRD     r5,r4,[sp,#0x68]
00000c  460f              MOV      r7,r1
00000e  4606              MOV      r6,r0
;;;199          const Type TYPE_MAX = saturate_cast<Type>(1e100);
000010  ed9f0bc7          VLDR     d0,|L287.816|
000014  f7fffffe          BL       _ZN4Anki8Embedded13saturate_castItEET_d ; Anki::Embedded::saturate_cast<unsigned short>(double)
;;;200    
;;;201          AnkiAssert(imageWidth <= maxImageWidth);
;;;202    
;;;203          AnkiConditionalErrorAndReturnValue(this->curState == STATE_INITIALIZED,
000018  9008              STR      r0,[sp,#0x20]
00001a  f8960104          LDRB     r0,[r6,#0x104]
00001e  2802              CMP      r0,#2
000020  d00e              BEQ      |L287.64|
000022  21cb              MOVS     r1,#0xcb
000024  48c4              LDR      r0,|L287.824|
000026  4bc5              LDR      r3,|L287.828|
000028  e9cd0100          STRD     r0,r1,[sp,#0]
00002c  a2c4              ADR      r2,|L287.832|
00002e  f1030144          ADD      r1,r3,#0x44
000032  2005              MOVS     r0,#5
000034  f7fffffe          BL       _Anki_Log
;;;204            RESULT_FAIL, "ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow", "Object is not initialized");
;;;205    
;;;206          const ConnectedComponentSegment<Type> * restrict pCurrentComponents1d = currentComponents1d.Pointer(0);
;;;207          const ConnectedComponentSegment<Type> * restrict pPreviousComponents1d = previousComponents1d.Pointer(0);
;;;208          ConnectedComponentSegment<Type> * restrict pNewPreviousComponents1d = newPreviousComponents1d.Pointer(0);
;;;209    
;;;210          Type * restrict pEquivalentComponents = equivalentComponents.Pointer(0);
;;;211    
;;;212          BeginBenchmark("e2dc_pr_nextRow_extract");
;;;213          ConnectedComponentsTemplate<Type>::Extract1dComponents(binaryImageRow, static_cast<s16>(imageWidth), minComponentWidth, maxSkipDistance, currentComponents1d);
;;;214          EndBenchmark("e2dc_pr_nextRow_extract");
;;;215    
;;;216          const s32 numCurrentComponents1d = currentComponents1d.get_size();
;;;217          const s32 numPreviousComponents1d = previousComponents1d.get_size();
;;;218    
;;;219          newPreviousComponents1d.set_size(numCurrentComponents1d);
;;;220    
;;;221          BeginBenchmark("e2dc_pr_nextRow_mainLoop");
;;;222    
;;;223          for(s32 iCurrent=0; iCurrent<numCurrentComponents1d; iCurrent++) {
;;;224            bool foundMatch = false;
;;;225            Type firstMatchedPreviousId = TYPE_MAX;
;;;226    
;;;227            for(s32 iPrevious=0; iPrevious<numPreviousComponents1d; iPrevious++) {
;;;228              // The current component matches the previous one if
;;;229              // 1. the previous start is less-than-or-equal the current end, and
;;;230              // 2. the previous end is greater-than-or-equal the current start
;;;231    
;;;232              if(pPreviousComponents1d[iPrevious].xStart <= pCurrentComponents1d[iCurrent].xEnd &&
;;;233                pPreviousComponents1d[iPrevious].xEnd >= pCurrentComponents1d[iCurrent].xStart) {
;;;234                  if(!foundMatch) {
;;;235                    // If this is the first match we've found, add this 1d
;;;236                    // component to components, using that previous component's id.
;;;237                    foundMatch = true;
;;;238                    firstMatchedPreviousId = pPreviousComponents1d[iPrevious].id;
;;;239    
;;;240                    const ConnectedComponentSegment<Type> newComponent(pCurrentComponents1d[iCurrent].xStart, pCurrentComponents1d[iCurrent].xEnd, whichRow, firstMatchedPreviousId);
;;;241    
;;;242                    const Result result = components.PushBack(newComponent);
;;;243    
;;;244                    AnkiConditionalErrorAndReturnValue(result == RESULT_OK, result, "extract2dComponents", "Extracted maximum number of 2d components");
;;;245    
;;;246                    pNewPreviousComponents1d[iCurrent] = newComponent;
;;;247                  } else { // if(!foundMatch)
;;;248                    // Update the lookup table for all of:
;;;249                    // 1. The first matching component
;;;250                    // 2. This iPrevious component.
;;;251                    // 3. The newPreviousComponents1d(iCurrent) component
;;;252                    // TODO: Think if this can be changed to make the final equivalence matching faster
;;;253    
;;;254                    const Type previousId = pPreviousComponents1d[iPrevious].id;
;;;255                    const Type minId = MIN(MIN(MIN(firstMatchedPreviousId, previousId), pEquivalentComponents[previousId]), pEquivalentComponents[firstMatchedPreviousId]);
;;;256    
;;;257                    pEquivalentComponents[pEquivalentComponents[firstMatchedPreviousId]] = minId;
;;;258                    pEquivalentComponents[firstMatchedPreviousId] = minId;
;;;259                    pEquivalentComponents[previousId] = minId;
;;;260                    pNewPreviousComponents1d[iCurrent].id = minId;
;;;261                  } // if(!foundMatch) ... else
;;;262              } // if(pPreviousComponents1d[iPrevious].xStart
;;;263            } // for(s32 iPrevious=0; iPrevious<numPreviousComponents1d; iPrevious++)
;;;264    
;;;265            // If none of the previous components matched, start a new id, equal to num2dComponents
;;;266            if(!foundMatch) {
;;;267              this->maximumId++;
;;;268              firstMatchedPreviousId = this->maximumId;
;;;269    
;;;270              const ConnectedComponentSegment<Type> newComponent(pCurrentComponents1d[iCurrent].xStart, pCurrentComponents1d[iCurrent].xEnd, whichRow, firstMatchedPreviousId);
;;;271    
;;;272              pNewPreviousComponents1d[iCurrent] = newComponent;
;;;273    
;;;274              const Result result = components.PushBack(newComponent);
;;;275              //#pragma unused(result)
;;;276    
;;;277              AnkiConditionalWarnAndReturnValue(result == RESULT_OK, result, "extract2dComponents", "Extracted maximum number of 2d components");
;;;278            } // if(!foundMatch)
;;;279          } // for(s32 iCurrent=0; iCurrent<numCurrentComponents1d; iCurrent++)
;;;280    
;;;281          EndBenchmark("e2dc_pr_nextRow_mainLoop");
;;;282    
;;;283          BeginBenchmark("e2dc_pr_nextRow_finalize");
;;;284    
;;;285          // Update previousComponents1d to be newPreviousComponents1d
;;;286          Swap(previousComponents1d, newPreviousComponents1d);
;;;287    
;;;288          EndBenchmark("e2dc_pr_nextRow_finalize");
;;;289    
;;;290          return RESULT_OK;
;;;291        } // template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow(const Array<u8> &binaryImageRow, const s16 minComponentWidth, const s16 maxSkipDistance)
000038  b011              ADD      sp,sp,#0x44
00003a  2001              MOVS     r0,#1                 ;203
00003c  e8bd8ff0          POP      {r4-r11,pc}
                  |L287.64|
000040  f8d6a064          LDR      r10,[r6,#0x64]        ;207
000044  f8d60098          LDR      r0,[r6,#0x98]         ;207
000048  9007              STR      r0,[sp,#0x1c]         ;207
00004a  f8d600cc          LDR      r0,[r6,#0xcc]         ;208
00004e  9006              STR      r0,[sp,#0x18]         ;208
000050  a0c2              ADR      r0,|L287.860|
000052  f8d68100          LDR      r8,[r6,#0x100]        ;212
000056  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00005a  fa0ff089          SXTH     r0,r9                 ;213
00005e  9003              STR      r0,[sp,#0xc]          ;213
000060  9700              STR      r7,[sp,#0]            ;213
000062  e9cd5401          STRD     r5,r4,[sp,#4]         ;213
000066  f1060934          ADD      r9,r6,#0x34           ;213
00006a  2500              MOVS     r5,#0                 ;213
00006c  4629              MOV      r1,r5                 ;213
00006e  4648              MOV      r0,r9                 ;213
000070  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::set_size(int)
000074  9f00              LDR      r7,[sp,#0]            ;213
000076  7838              LDRB     r0,[r7,#0]            ;213
000078  2800              CMP      r0,#0                 ;213
00007a  bf19              ITTEE    NE                    ;213
00007c  2001              MOVNE    r0,#1                 ;213
00007e  2700              MOVNE    r7,#0                 ;213
000080  2000              MOVEQ    r0,#0                 ;213
000082  1e47              SUBEQ    r7,r0,#1              ;213
000084  2401              MOVS     r4,#1                 ;213
000086  9903              LDR      r1,[sp,#0xc]          ;213
000088  2901              CMP      r1,#1                 ;213
00008a  dd3c              BLE      |L287.262|
                  |L287.140|
00008c  9900              LDR      r1,[sp,#0]            ;213
00008e  5d09              LDRB     r1,[r1,r4]            ;213
000090  b378              CBZ      r0,|L287.242|
000092  2900              CMP      r1,#0                 ;213
000094  bf18              IT       NE                    ;213
000096  2500              MOVNE    r5,#0                 ;213
000098  d130              BNE      |L287.252|
00009a  1c69              ADDS     r1,r5,#1              ;213
00009c  b20d              SXTH     r5,r1                 ;213
00009e  9902              LDR      r1,[sp,#8]            ;213
0000a0  428d              CMP      r5,r1                 ;213
0000a2  dd2b              BLE      |L287.252|
0000a4  1be0              SUBS     r0,r4,r7              ;213
0000a6  9901              LDR      r1,[sp,#4]            ;213
0000a8  b200              SXTH     r0,r0                 ;213
0000aa  4281              CMP      r1,r0                 ;213
0000ac  dc1f              BGT      |L287.238|
0000ae  1b60              SUBS     r0,r4,r5              ;213
0000b0  f8ad7010          STRH     r7,[sp,#0x10]         ;213
0000b4  f04f33ff          MOV      r3,#0xffffffff        ;213
0000b8  f8ad0012          STRH     r0,[sp,#0x12]         ;213
0000bc  a904              ADD      r1,sp,#0x10           ;213
0000be  2200              MOVS     r2,#0                 ;213
0000c0  f8ad3014          STRH     r3,[sp,#0x14]         ;213
0000c4  f8ad2016          STRH     r2,[sp,#0x16]         ;213
0000c8  9109              STR      r1,[sp,#0x24]         ;213
0000ca  4648              MOV      r0,r9                 ;213
0000cc  f8d9b00c          LDR      r11,[r9,#0xc]         ;213
0000d0  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::get_maximumSize() const
0000d4  4583              CMP      r11,r0                ;213
0000d6  da0a              BGE      |L287.238|
0000d8  f8d90030          LDR      r0,[r9,#0x30]         ;213
0000dc  9909              LDR      r1,[sp,#0x24]         ;213
0000de  eb0000cb          ADD      r0,r0,r11,LSL #3      ;213
0000e2  f7fffffe          BL       __ARM_common_memcpy4_8
0000e6  f10b0101          ADD      r1,r11,#1             ;213
0000ea  f8c9100c          STR      r1,[r9,#0xc]          ;213
                  |L287.238|
0000ee  2000              MOVS     r0,#0                 ;213
0000f0  e004              B        |L287.252|
                  |L287.242|
0000f2  e7ff              B        |L287.244|
                  |L287.244|
0000f4  b111              CBZ      r1,|L287.252|
0000f6  2001              MOVS     r0,#1                 ;213
0000f8  4627              MOV      r7,r4                 ;213
0000fa  2500              MOVS     r5,#0                 ;213
                  |L287.252|
0000fc  1c61              ADDS     r1,r4,#1              ;213
0000fe  b20c              SXTH     r4,r1                 ;213
000100  9903              LDR      r1,[sp,#0xc]          ;213
000102  42a1              CMP      r1,r4                 ;213
000104  dcc2              BGT      |L287.140|
                  |L287.262|
000106  b320              CBZ      r0,|L287.338|
000108  1bc8              SUBS     r0,r1,r7              ;213
00010a  9901              LDR      r1,[sp,#4]            ;213
00010c  b200              SXTH     r0,r0                 ;213
00010e  4288              CMP      r0,r1                 ;213
000110  db1f              BLT      |L287.338|
000112  9803              LDR      r0,[sp,#0xc]          ;213
000114  f04f32ff          MOV      r2,#0xffffffff        ;213
000118  1b40              SUBS     r0,r0,r5              ;213
00011a  1e40              SUBS     r0,r0,#1              ;213
00011c  f8ad7000          STRH     r7,[sp,#0]            ;213
000120  2100              MOVS     r1,#0                 ;213
000122  f8ad0002          STRH     r0,[sp,#2]            ;213
000126  f8ad2004          STRH     r2,[sp,#4]            ;213
00012a  f8ad1006          STRH     r1,[sp,#6]            ;213
00012e  46eb              MOV      r11,sp                ;213
000130  4648              MOV      r0,r9                 ;213
000132  f8d9400c          LDR      r4,[r9,#0xc]          ;213
000136  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::get_maximumSize() const
00013a  42a0              CMP      r0,r4                 ;213
00013c  dd09              BLE      |L287.338|
00013e  f8d90030          LDR      r0,[r9,#0x30]         ;213
000142  4659              MOV      r1,r11                ;213
000144  eb0000c4          ADD      r0,r0,r4,LSL #3       ;213
000148  f7fffffe          BL       __ARM_common_memcpy4_8
00014c  1c60              ADDS     r0,r4,#1              ;213
00014e  f8c9000c          STR      r0,[r9,#0xc]          ;213
                  |L287.338|
000152  a082              ADR      r0,|L287.860|
000154  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000158  6c30              LDR      r0,[r6,#0x40]         ;216
00015a  9004              STR      r0,[sp,#0x10]         ;216
00015c  6f70              LDR      r0,[r6,#0x74]         ;217
00015e  9005              STR      r0,[sp,#0x14]         ;219
000160  f106009c          ADD      r0,r6,#0x9c           ;219
000164  9904              LDR      r1,[sp,#0x10]         ;219
000166  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::set_size(int)
00016a  a082              ADR      r0,|L287.884|
00016c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000170  9804              LDR      r0,[sp,#0x10]         ;223
000172  2700              MOVS     r7,#0                 ;223
000174  2800              CMP      r0,#0                 ;223
000176  f34080b7          BLE.W    |L287.744|
                  |L287.378|
00017a  9805              LDR      r0,[sp,#0x14]         ;227
00017c  f04f0900          MOV      r9,#0                 ;224
000180  9c08              LDR      r4,[sp,#0x20]         ;227
000182  464d              MOV      r5,r9                 ;227
000184  2800              CMP      r0,#0                 ;227
000186  dd48              BLE      |L287.538|
000188  eb0a00c7          ADD      r0,r10,r7,LSL #3      ;232
00018c  9001              STR      r0,[sp,#4]            ;208
00018e  9806              LDR      r0,[sp,#0x18]         ;246
000190  eb0000c7          ADD      r0,r0,r7,LSL #3       ;246
000194  9000              STR      r0,[sp,#0]            ;246
                  |L287.406|
000196  9807              LDR      r0,[sp,#0x1c]         ;232
000198  f9301035          LDRSH    r1,[r0,r5,LSL #3]     ;232
00019c  9801              LDR      r0,[sp,#4]            ;232
00019e  f9b02002          LDRSH    r2,[r0,#2]            ;232
0001a2  4291              CMP      r1,r2                 ;232
0001a4  dc32              BGT      |L287.524|
0001a6  9807              LDR      r0,[sp,#0x1c]         ;233
0001a8  f93a1037          LDRSH    r1,[r10,r7,LSL #3]    ;233
0001ac  eb0000c5          ADD      r0,r0,r5,LSL #3       ;233
0001b0  f9b03002          LDRSH    r3,[r0,#2]            ;233
0001b4  4299              CMP      r1,r3                 ;233
0001b6  dc29              BGT      |L287.524|
0001b8  f1b90f00          CMP      r9,#0                 ;234
0001bc  d02e              BEQ      |L287.540|
0001be  88c0              LDRH     r0,[r0,#6]            ;254
0001c0  4284              CMP      r4,r0                 ;255
0001c2  bf2c              ITE      CS                    ;255
0001c4  4602              MOVCS    r2,r0                 ;255
0001c6  4622              MOVCC    r2,r4                 ;255
0001c8  f8381010          LDRH     r1,[r8,r0,LSL #1]     ;255
0001cc  428a              CMP      r2,r1                 ;255
0001ce  bf28              IT       CS                    ;255
0001d0  460a              MOVCS    r2,r1                 ;255
0001d2  d203              BCS      |L287.476|
0001d4  4284              CMP      r4,r0                 ;255
0001d6  bf34              ITE      CC                    ;255
0001d8  4622              MOVCC    r2,r4                 ;255
0001da  4602              MOVCS    r2,r0                 ;255
                  |L287.476|
0001dc  f8383014          LDRH     r3,[r8,r4,LSL #1]     ;255
0001e0  429a              CMP      r2,r3                 ;255
0001e2  bf28              IT       CS                    ;255
0001e4  4619              MOVCS    r1,r3                 ;255
0001e6  d209              BCS      |L287.508|
0001e8  4284              CMP      r4,r0                 ;255
0001ea  bf34              ITE      CC                    ;255
0001ec  4622              MOVCC    r2,r4                 ;255
0001ee  4602              MOVCS    r2,r0                 ;255
0001f0  428a              CMP      r2,r1                 ;255
0001f2  d203              BCS      |L287.508|
0001f4  4284              CMP      r4,r0                 ;255
0001f6  bf2c              ITE      CS                    ;255
0001f8  4601              MOVCS    r1,r0                 ;255
0001fa  4621              MOVCC    r1,r4                 ;255
                  |L287.508|
0001fc  f8281013          STRH     r1,[r8,r3,LSL #1]     ;257
000200  f8281014          STRH     r1,[r8,r4,LSL #1]     ;258
000204  f8281010          STRH     r1,[r8,r0,LSL #1]     ;259
000208  9800              LDR      r0,[sp,#0]            ;260
00020a  80c1              STRH     r1,[r0,#6]            ;260
                  |L287.524|
00020c  9805              LDR      r0,[sp,#0x14]         ;227
00020e  1c6d              ADDS     r5,r5,#1              ;227
000210  4285              CMP      r5,r0                 ;227
000212  dbc0              BLT      |L287.406|
000214  f1b90f00          CMP      r9,#0                 ;266
000218  d161              BNE      |L287.734|
                  |L287.538|
00021a  e038              B        |L287.654|
                  |L287.540|
00021c  88c4              LDRH     r4,[r0,#6]            ;238
00021e  9810              LDR      r0,[sp,#0x40]         ;238
000220  f8ad000c          STRH     r0,[sp,#0xc]          ;238
000224  a802              ADD      r0,sp,#8              ;242
000226  f8ad1008          STRH     r1,[sp,#8]            ;242
00022a  9009              STR      r0,[sp,#0x24]         ;242
00022c  f8ad200a          STRH     r2,[sp,#0xa]          ;242
000230  f8ad400e          STRH     r4,[sp,#0xe]          ;242
000234  f04f0901          MOV      r9,#1                 ;237
000238  4630              MOV      r0,r6                 ;237
00023a  f8d6b00c          LDR      r11,[r6,#0xc]         ;237
00023e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::get_maximumSize() const
000242  4558              CMP      r0,r11                ;237
000244  bfd8              IT       LE                    ;237
000246  f8dfb148          LDRLE    r11,|L287.912|
00024a  dd0a              BLE      |L287.610|
00024c  6b30              LDR      r0,[r6,#0x30]         ;237
00024e  9909              LDR      r1,[sp,#0x24]         ;237
000250  eb0000cb          ADD      r0,r0,r11,LSL #3      ;237
000254  f7fffffe          BL       __ARM_common_memcpy4_8
000258  f10b0101          ADD      r1,r11,#1             ;237
00025c  f04f0b00          MOV      r11,#0                ;237
000260  60f1              STR      r1,[r6,#0xc]          ;237
                  |L287.610|
000262  f1bb0f00          CMP      r11,#0                ;244
000266  d00d              BEQ      |L287.644|
000268  21f4              MOVS     r1,#0xf4              ;244
00026a  4833              LDR      r0,|L287.824|
00026c  e9cd0100          STRD     r0,r1,[sp,#0]         ;244
000270  4b32              LDR      r3,|L287.828|
000272  a248              ADR      r2,|L287.916|
000274  a152              ADR      r1,|L287.960|
000276  2005              MOVS     r0,#5                 ;244
000278  f7fffffe          BL       _Anki_Log
00027c  b011              ADD      sp,sp,#0x44
00027e  4658              MOV      r0,r11                ;244
000280  e8bd8ff0          POP      {r4-r11,pc}
                  |L287.644|
000284  a902              ADD      r1,sp,#8              ;246
000286  9800              LDR      r0,[sp,#0]            ;246
000288  f7fffffe          BL       __ARM_common_memcpy4_8
00028c  e7be              B        |L287.524|
                  |L287.654|
00028e  f8b60108          LDRH     r0,[r6,#0x108]        ;267
000292  eb0a01c7          ADD      r1,r10,r7,LSL #3      ;270
000296  1c40              ADDS     r0,r0,#1              ;267
000298  f8a60108          STRH     r0,[r6,#0x108]        ;267
00029c  884a              LDRH     r2,[r1,#2]            ;270
00029e  f83a3037          LDRH     r3,[r10,r7,LSL #3]    ;270
0002a2  9910              LDR      r1,[sp,#0x40]         ;270
0002a4  f8ad1004          STRH     r1,[sp,#4]            ;270
0002a8  f8ad0006          STRH     r0,[sp,#6]            ;270
0002ac  9806              LDR      r0,[sp,#0x18]         ;272
0002ae  f8ad3000          STRH     r3,[sp,#0]            ;272
0002b2  f8ad2002          STRH     r2,[sp,#2]            ;272
0002b6  eb0000c7          ADD      r0,r0,r7,LSL #3       ;272
0002ba  4669              MOV      r1,sp                 ;272
0002bc  f7fffffe          BL       __ARM_common_memcpy4_8
0002c0  466d              MOV      r5,sp                 ;274
0002c2  4630              MOV      r0,r6                 ;274
0002c4  68f4              LDR      r4,[r6,#0xc]          ;274
0002c6  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::get_maximumSize() const
0002ca  4284              CMP      r4,r0                 ;274
0002cc  da07              BGE      |L287.734|
0002ce  6b30              LDR      r0,[r6,#0x30]         ;274
0002d0  4629              MOV      r1,r5                 ;274
0002d2  eb0000c4          ADD      r0,r0,r4,LSL #3       ;274
0002d6  f7fffffe          BL       __ARM_common_memcpy4_8
0002da  1c61              ADDS     r1,r4,#1              ;274
0002dc  60f1              STR      r1,[r6,#0xc]          ;274
                  |L287.734|
0002de  9804              LDR      r0,[sp,#0x10]         ;223
0002e0  1c7f              ADDS     r7,r7,#1              ;223
0002e2  4287              CMP      r7,r0                 ;223
0002e4  f6ffaf49          BLT      |L287.378|
                  |L287.744|
0002e8  a022              ADR      r0,|L287.884|
0002ea  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0002ee  a039              ADR      r0,|L287.980|
0002f0  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0002f4  f1060068          ADD      r0,r6,#0x68           ;286
0002f8  f106049c          ADD      r4,r6,#0x9c           ;286
0002fc  e89011ee          LDM      r0,{r1-r3,r5-r8,r12}  ;286
000300  e88d11ee          STM      sp,{r1-r3,r5-r8,r12}  ;286
000304  f1000120          ADD      r1,r0,#0x20           ;286
000308  af08              ADD      r7,sp,#0x20           ;286
00030a  e891102e          LDM      r1,{r1-r3,r5,r12}     ;286
00030e  e8a7102e          STM      r7!,{r1-r3,r5,r12}    ;286
000312  4621              MOV      r1,r4                 ;286
000314  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000318  4669              MOV      r1,sp                 ;286
00031a  4620              MOV      r0,r4                 ;286
00031c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000320  a02c              ADR      r0,|L287.980|
000322  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000326  b011              ADD      sp,sp,#0x44
000328  2000              MOVS     r0,#0                 ;290
00032a  e8bd8ff0          POP      {r4-r11,pc}
;;;292    
                          ENDP

00032e  0000              DCW      0x0000
                  |L287.816|
000330  2594c37d          DCFD     0x54b249ad2594c37d ; 1e+100
000334  54b249ad
                  |L287.824|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisssE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)::__PRETTY_FUNCTION__
                  |L287.828|
                          DCD      ||.constdata||+0x98
                  |L287.832|
000340  4f626a65          DCB      "Object is not initialized",0
000344  63742069
000348  73206e6f
00034c  7420696e
000350  69746961
000354  6c697a65
000358  6400    
00035a  00                DCB      0
00035b  00                DCB      0
                  |L287.860|
00035c  65326463          DCB      "e2dc_pr_nextRow_extract",0
000360  5f70725f
000364  6e657874
000368  526f775f
00036c  65787472
000370  61637400
                  |L287.884|
000374  65326463          DCB      "e2dc_pr_nextRow_mainLoop",0
000378  5f70725f
00037c  6e657874
000380  526f775f
000384  6d61696e
000388  4c6f6f70
00038c  00      
00038d  00                DCB      0
00038e  00                DCB      0
00038f  00                DCB      0
                  |L287.912|
                          DCD      0x01000001
                  |L287.916|
000394  45787472          DCB      "Extracted maximum number of 2d components",0
000398  61637465
00039c  64206d61
0003a0  78696d75
0003a4  6d206e75
0003a8  6d626572
0003ac  206f6620
0003b0  32642063
0003b4  6f6d706f
0003b8  6e656e74
0003bc  7300    
0003be  00                DCB      0
0003bf  00                DCB      0
                  |L287.960|
0003c0  65787472          DCB      "extract2dComponents",0
0003c4  61637432
0003c8  64436f6d
0003cc  706f6e65
0003d0  6e747300
                  |L287.980|
0003d4  65326463          DCB      "e2dc_pr_nextRow_finalize",0
0003d8  5f70725f
0003dc  6e657874
0003e0  526f775f
0003e4  66696e61
0003e8  6c697a65
0003ec  00      
0003ed  00                DCB      0
0003ee  00                DCB      0
0003ef  00                DCB      0

                          AREA ||area_number.288||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisss, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.288||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisss||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListItEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L294.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L294.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L294.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L294.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L294.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L294.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L294.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L294.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L294.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L294.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi ; Anki::Embedded::FixedLengthList<unsigned short>::set_size(int)
0000b2  e009              B        |L294.200|
                  |L294.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L294.118|
                  |L294.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L294.140|
                  |L294.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L294.162|
                  |L294.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi ; Anki::Embedded::FixedLengthList<unsigned short>::set_size(int)
                  |L294.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.295||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.295||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_ PROC ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)
;;;164    
;;;165        template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_Initialize(MemoryStack &fastMemory, MemoryStack &slowerMemory, MemoryStack &slowestMemory)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;166        {
000004  b09e              SUB      sp,sp,#0x78
000006  461f              MOV      r7,r3
000008  4690              MOV      r8,r2
00000a  460e              MOV      r6,r1
00000c  4604              MOV      r4,r0
;;;167          const Type MAX_2D_COMPONENTS = static_cast<Type>(components.get_maximumSize());
00000e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::get_maximumSize() const
000012  b285              UXTH     r5,r0
;;;168    
;;;169          AnkiConditionalErrorAndReturnValue(this->curState == STATE_CONSTRUCTED,
000014  f8940104          LDRB     r0,[r4,#0x104]
000018  2801              CMP      r0,#1
00001a  d00e              BEQ      |L301.58|
00001c  21a9              MOVS     r1,#0xa9
00001e  4845              LDR      r0,|L301.308|
000020  4b45              LDR      r3,|L301.312|
000022  e9cd0100          STRD     r0,r1,[sp,#0]
000026  a245              ADR      r2,|L301.316|
000028  f1030144          ADD      r1,r3,#0x44
00002c  2005              MOVS     r0,#5
00002e  f7fffffe          BL       _Anki_Log
;;;170            RESULT_FAIL, "ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_NextRow", "Object is not constructed (or was initialized earlier)");
;;;171    
;;;172          components.Clear();
;;;173    
;;;174          this->maximumId = 0;
;;;175    
;;;176          this->previousComponents1d = FixedLengthList<ConnectedComponentSegment<Type> >(maxImageWidth, fastMemory);
;;;177          this->currentComponents1d = FixedLengthList<ConnectedComponentSegment<Type> >(maxImageWidth, fastMemory);
;;;178          this->newPreviousComponents1d = FixedLengthList<ConnectedComponentSegment<Type> >(maxImageWidth, fastMemory);
;;;179    
;;;180          const s32 bytesRequired = 256 + MEMORY_ALIGNMENT + maxComponentSegments * sizeof(Type);
;;;181          if(slowerMemory.ComputeLargestPossibleAllocation() >= bytesRequired) {
;;;182            this->equivalentComponents = FixedLengthList<Type>(maxComponentSegments, slowerMemory);
;;;183          } else {
;;;184            this->equivalentComponents = FixedLengthList<Type>(maxComponentSegments, slowestMemory);
;;;185          }
;;;186    
;;;187          Type * restrict pEquivalentComponents = equivalentComponents.Pointer(0);
;;;188          for(s32 i=0; i<MAX_2D_COMPONENTS; i++) {
;;;189            pEquivalentComponents[i] = static_cast<Type>(i);
;;;190          }
;;;191    
;;;192          this->curState = STATE_INITIALIZED;
;;;193    
;;;194          return RESULT_OK;
;;;195        } // template<typename Type> Result ConnectedComponentsTemplate<Type>::Extract2dComponents_PerRow_Initialize()
000032  b01e              ADD      sp,sp,#0x78
000034  2001              MOVS     r0,#1                 ;169
000036  e8bd81f0          POP      {r4-r8,pc}
                  |L301.58|
00003a  2100              MOVS     r1,#0
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::set_size(int)
000042  2000              MOVS     r0,#0                 ;174
000044  f8a40108          STRH     r0,[r4,#0x108]        ;174
000048  4603              MOV      r3,r0                 ;176
00004a  4602              MOV      r2,r0                 ;176
00004c  2101              MOVS     r1,#1                 ;176
00004e  a81c              ADD      r0,sp,#0x70           ;176
000050  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000054  6803              LDR      r3,[r0,#0]            ;176
000056  f8d4110c          LDR      r1,[r4,#0x10c]        ;176
00005a  4632              MOV      r2,r6                 ;176
00005c  a802              ADD      r0,sp,#8              ;176
00005e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000062  4601              MOV      r1,r0                 ;176
000064  f1040068          ADD      r0,r4,#0x68           ;176
000068  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
00006c  2300              MOVS     r3,#0                 ;177
00006e  461a              MOV      r2,r3                 ;177
000070  2101              MOVS     r1,#1                 ;177
000072  a81c              ADD      r0,sp,#0x70           ;177
000074  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000078  6803              LDR      r3,[r0,#0]            ;177
00007a  f8d4110c          LDR      r1,[r4,#0x10c]        ;177
00007e  4632              MOV      r2,r6                 ;177
000080  a802              ADD      r0,sp,#8              ;177
000082  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000086  4601              MOV      r1,r0                 ;177
000088  f1040034          ADD      r0,r4,#0x34           ;177
00008c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000090  2300              MOVS     r3,#0                 ;178
000092  461a              MOV      r2,r3                 ;178
000094  2101              MOVS     r1,#1                 ;178
000096  a81c              ADD      r0,sp,#0x70           ;178
000098  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00009c  6803              LDR      r3,[r0,#0]            ;178
00009e  f8d4110c          LDR      r1,[r4,#0x10c]        ;178
0000a2  4632              MOV      r2,r6                 ;178
0000a4  a802              ADD      r0,sp,#8              ;178
0000a6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000aa  4601              MOV      r1,r0                 ;178
0000ac  f104009c          ADD      r0,r4,#0x9c           ;178
0000b0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
0000b4  f8d40110          LDR      r0,[r4,#0x110]        ;180
0000b8  f44f7188          MOV      r1,#0x110             ;180
0000bc  eb010640          ADD      r6,r1,r0,LSL #1       ;180
0000c0  4640              MOV      r0,r8                 ;181
0000c2  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack32ComputeLargestPossibleAllocationEv ; Anki::Embedded::MemoryStack::ComputeLargestPossibleAllocation() const
0000c6  42b0              CMP      r0,r6                 ;181
0000c8  f04f0300          MOV      r3,#0                 ;184
0000cc  461a              MOV      r2,r3                 ;184
0000ce  f04f0101          MOV      r1,#1                 ;184
0000d2  4668              MOV      r0,sp                 ;184
0000d4  db0e              BLT      |L301.244|
0000d6  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000da  6803              LDR      r3,[r0,#0]            ;182
0000dc  f8d41110          LDR      r1,[r4,#0x110]        ;182
0000e0  4642              MOV      r2,r8                 ;182
0000e2  a80f              ADD      r0,sp,#0x3c           ;182
0000e4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000e8  4601              MOV      r1,r0                 ;182
0000ea  f10400d0          ADD      r0,r4,#0xd0           ;182
0000ee  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEaSERKS2_ ; Anki::Embedded::FixedLengthList<unsigned short>::operator =(const Anki::Embedded::FixedLengthList<unsigned short>&)
0000f2  e00d              B        |L301.272|
                  |L301.244|
0000f4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000f8  6803              LDR      r3,[r0,#0]            ;184
0000fa  f8d41110          LDR      r1,[r4,#0x110]        ;184
0000fe  463a              MOV      r2,r7                 ;184
000100  a80f              ADD      r0,sp,#0x3c           ;184
000102  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000106  4601              MOV      r1,r0                 ;184
000108  f10400d0          ADD      r0,r4,#0xd0           ;184
00010c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEaSERKS2_ ; Anki::Embedded::FixedLengthList<unsigned short>::operator =(const Anki::Embedded::FixedLengthList<unsigned short>&)
                  |L301.272|
000110  2000              MOVS     r0,#0                 ;188
000112  f8d41100          LDR      r1,[r4,#0x100]        ;188
000116  2d00              CMP      r5,#0                 ;188
000118  dd04              BLE      |L301.292|
                  |L301.282|
00011a  f8210010          STRH     r0,[r1,r0,LSL #1]     ;189
00011e  1c40              ADDS     r0,r0,#1              ;188
000120  4285              CMP      r5,r0                 ;188
000122  dcfa              BGT      |L301.282|
                  |L301.292|
000124  2002              MOVS     r0,#2                 ;192
000126  f8840104          STRB     r0,[r4,#0x104]        ;192
00012a  b01e              ADD      sp,sp,#0x78
00012c  2000              MOVS     r0,#0                 ;194
00012e  e8bd81f0          POP      {r4-r8,pc}
;;;196    
                          ENDP

000132  0000              DCW      0x0000
                  |L301.308|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
                  |L301.312|
                          DCD      ||.constdata||+0x98
                  |L301.316|
00013c  4f626a65          DCB      "Object is not constructed (or was initialized earlier)",0
000140  63742069
000144  73206e6f
000148  7420636f
00014c  6e737472
000150  75637465
000154  6420286f
000158  72207761
00015c  7320696e
000160  69746961
000164  6c697a65
000168  64206561
00016c  726c6965
000170  722900  
000173  00                DCB      0

                          AREA ||area_number.302||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.302||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv PROC ; Anki::Embedded::FixedLengthList<int>::SetZero()
;;;146    
;;;147        template<typename Type> inline s32 FixedLengthList<Type>::SetZero()
000000  b510              PUSH     {r4,lr}
;;;148        {
;;;149          return this->array.SetZero();
000002  3018              ADDS     r0,r0,#0x18
000004  b082              SUB      sp,sp,#8              ;148
000006  6903              LDR      r3,[r0,#0x10]         ;148
000008  b18b              CBZ      r3,|L308.46|
00000a  6801              LDR      r1,[r0,#0]            ;148
00000c  2900              CMP      r1,#0                 ;148
00000e  bfa4              ITT      GE                    ;148
000010  6842              LDRGE    r2,[r0,#4]            ;148
000012  2a00              CMPGE    r2,#0                 ;148
000014  db0b              BLT      |L308.46|
000016  6882              LDR      r2,[r0,#8]            ;148
000018  2000              MOVS     r0,#0                 ;148
00001a  fb01f402          MUL      r4,r1,r2              ;148
00001e  fb003002          MLA      r0,r0,r2,r3           ;148
000022  4621              MOV      r1,r4                 ;148
000024  f7fffffe          BL       __aeabi_memclr4
;;;150        }
000028  b002              ADD      sp,sp,#8
00002a  4620              MOV      r0,r4
00002c  bd10              POP      {r4,pc}
                  |L308.46|
00002e  f2402176          MOV      r1,#0x276
000032  4806              LDR      r0,|L308.76|
000034  e9cd0100          STRD     r0,r1,[sp,#0]
000038  a305              ADR      r3,|L308.80|
00003a  a213              ADR      r2,|L308.136|
00003c  a119              ADR      r1,|L308.164|
00003e  2005              MOVS     r0,#5
000040  f7fffffe          BL       _Anki_Log
000044  b002              ADD      sp,sp,#8
000046  2000              MOVS     r0,#0
000048  bd10              POP      {r4,pc}
;;;151    
                          ENDP

00004a  0000              DCW      0x0000
                  |L308.76|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::SetZero()::__PRETTY_FUNCTION__
                  |L308.80|
000050  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000054  6f726574
000058  6563685c
00005c  636f6d6d
000060  6f6e5c69
000064  6e636c75
000068  64655c61
00006c  6e6b692f
000070  636f6d6d
000074  6f6e2f72
000078  6f626f74
00007c  2f617272
000080  617932  
000083  642e6800          DCB      "d.h",0
000087  00                DCB      0
                  |L308.136|
000088  41727261          DCB      "Array<Type> is not valid",0
00008c  793c5479
000090  70653e20
000094  6973206e
000098  6f742076
00009c  616c6964
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L308.164|
0000a4  41727261          DCB      "Array<Type>::SetZero",0
0000a8  793c5479
0000ac  70653e3a
0000b0  3a536574
0000b4  5a65726f
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0

                          AREA ||area_number.309||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.309||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv PROC ; Anki::Embedded::FixedLengthList<int>::IsValid() const
;;;91     
;;;92         template<typename Type> bool FixedLengthList<Type>::IsValid() const
000000  68c2              LDR      r2,[r0,#0xc]
;;;93         {
;;;94           if(this->get_size() > this->get_maximumSize()) {
000002  69c1              LDR      r1,[r0,#0x1c]
000004  428a              CMP      r2,r1
000006  dc07              BGT      |L315.24|
000008  6a82              LDR      r2,[r0,#0x28]         ;93
00000a  b12a              CBZ      r2,|L315.24|
00000c  6980              LDR      r0,[r0,#0x18]         ;93
00000e  2800              CMP      r0,#0                 ;93
000010  bfa2              ITTT     GE                    ;93
000012  2900              CMPGE    r1,#0                 ;93
000014  2001              MOVGE    r0,#1                 ;93
;;;95             return false;
;;;96           }
;;;97     
;;;98           return ArraySlice<Type>::IsValid();
;;;99         } // bool FixedLengthList<Type>::IsValid() const
000016  4770              BXGE     lr
                  |L315.24|
000018  2000              MOVS     r0,#0
00001a  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||area_number.316||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.316||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEE||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEE PROC ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)
;;;488    
;;;489        template<typename Type> Result ConnectedComponentsTemplate<Type>::ComputeComponentSizes(FixedLengthList<s32> &componentSizes)
000000  b570              PUSH     {r4-r6,lr}
;;;490        {
000002  4605              MOV      r5,r0
000004  b082              SUB      sp,sp,#8
000006  460e              MOV      r6,r1
;;;491          AnkiConditionalErrorAndReturnValue(componentSizes.IsValid(), RESULT_FAIL_INVALID_OBJECT, "ComputeComponentSizes", "componentSizes is not valid");
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv ; Anki::Embedded::FixedLengthList<int>::IsValid() const
00000e  4c24              LDR      r4,|L322.160|
000010  b350              CBZ      r0,|L322.104|
;;;492          AnkiConditionalErrorAndReturnValue(components.IsValid(), RESULT_FAIL_INVALID_OBJECT, "ComputeComponentSizes", "components is not valid");
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
000018  2800              CMP      r0,#0
00001a  d033              BEQ      |L322.132|
;;;493    
;;;494          componentSizes.SetZero();
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv ; Anki::Embedded::FixedLengthList<int>::SetZero()
;;;495          componentSizes.set_size(maximumId+1);
000022  f8d50108          LDR      r0,[r5,#0x108]
000026  1c41              ADDS     r1,r0,#1
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
00002e  f8d5c030          LDR      r12,[r5,#0x30]
000032  68ed              LDR      r5,[r5,#0xc]
000034  6b34              LDR      r4,[r6,#0x30]
;;;496    
;;;497          const ConnectedComponentSegment<Type> * restrict pConstComponents = components.Pointer(0);
;;;498          s32 * restrict pComponentSizes = componentSizes.Pointer(0);
;;;499    
;;;500          const s32 numComponents = components.get_size();
;;;501    
;;;502          for(s32 i=0; i<numComponents; i++) {
000036  2000              MOVS     r0,#0
000038  2d00              CMP      r5,#0
00003a  dd12              BLE      |L322.98|
                  |L322.60|
;;;503            const Type id = pConstComponents[i].id;
00003c  eb000240          ADD      r2,r0,r0,LSL #1
000040  eb0c0382          ADD      r3,r12,r2,LSL #2
;;;504            const s16 length = pConstComponents[i].xEnd - pConstComponents[i].xStart + 1;
000044  f83c2022          LDRH     r2,[r12,r2,LSL #2]
000048  6899              LDR      r1,[r3,#8]
00004a  885b              LDRH     r3,[r3,#2]
00004c  1c40              ADDS     r0,r0,#1              ;502
00004e  1a9a              SUBS     r2,r3,r2
000050  1c52              ADDS     r2,r2,#1
;;;505    
;;;506            pComponentSizes[id] += length;
000052  f8543021          LDR      r3,[r4,r1,LSL #2]
000056  b212              SXTH     r2,r2                 ;504
000058  441a              ADD      r2,r2,r3
00005a  f8442021          STR      r2,[r4,r1,LSL #2]
00005e  4285              CMP      r5,r0                 ;502
000060  dcec              BGT      |L322.60|
                  |L322.98|
;;;507          }
;;;508    
;;;509          return RESULT_OK;
;;;510        }
000062  b002              ADD      sp,sp,#8
000064  2000              MOVS     r0,#0                 ;509
000066  bd70              POP      {r4-r6,pc}
                  |L322.104|
000068  f24010eb          MOV      r0,#0x1eb             ;491
00006c  e9cd4000          STRD     r4,r0,[sp,#0]         ;491
000070  4b0c              LDR      r3,|L322.164|
000072  a20d              ADR      r2,|L322.168|
000074  a113              ADR      r1,|L322.196|
000076  2005              MOVS     r0,#5                 ;491
000078  f7fffffe          BL       _Anki_Log
00007c  b002              ADD      sp,sp,#8
00007e  f04f6080          MOV      r0,#0x4000000         ;491
000082  bd70              POP      {r4-r6,pc}
                  |L322.132|
000084  f44f70f6          MOV      r0,#0x1ec             ;492
000088  e9cd4000          STRD     r4,r0,[sp,#0]         ;492
00008c  4b05              LDR      r3,|L322.164|
00008e  a213              ADR      r2,|L322.220|
000090  a10c              ADR      r1,|L322.196|
000092  2005              MOVS     r0,#5                 ;492
000094  f7fffffe          BL       _Anki_Log
000098  b002              ADD      sp,sp,#8
00009a  f04f6080          MOV      r0,#0x4000000         ;492
00009e  bd70              POP      {r4-r6,pc}
;;;511    
                          ENDP

                  |L322.160|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)::__PRETTY_FUNCTION__
                  |L322.164|
                          DCD      ||.constdata||+0x98
                  |L322.168|
0000a8  636f6d70          DCB      "componentSizes is not valid",0
0000ac  6f6e656e
0000b0  7453697a
0000b4  65732069
0000b8  73206e6f
0000bc  74207661
0000c0  6c696400
                  |L322.196|
0000c4  436f6d70          DCB      "ComputeComponentSizes",0
0000c8  75746543
0000cc  6f6d706f
0000d0  6e656e74
0000d4  53697a65
0000d8  7300    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L322.220|
0000dc  636f6d70          DCB      "components is not valid",0
0000e0  6f6e656e
0000e4  74732069
0000e8  73206e6f
0000ec  74207661
0000f0  6c696400

                          AREA ||area_number.323||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEE, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.323||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEE||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEE PROC ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)
;;;488    
;;;489        template<typename Type> Result ConnectedComponentsTemplate<Type>::ComputeComponentSizes(FixedLengthList<s32> &componentSizes)
000000  b570              PUSH     {r4-r6,lr}
;;;490        {
000002  4604              MOV      r4,r0
000004  b082              SUB      sp,sp,#8
000006  460e              MOV      r6,r1
;;;491          AnkiConditionalErrorAndReturnValue(componentSizes.IsValid(), RESULT_FAIL_INVALID_OBJECT, "ComputeComponentSizes", "componentSizes is not valid");
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListIiE7IsValidEv ; Anki::Embedded::FixedLengthList<int>::IsValid() const
00000e  4d23              LDR      r5,|L329.156|
000010  b340              CBZ      r0,|L329.100|
;;;492          AnkiConditionalErrorAndReturnValue(components.IsValid(), RESULT_FAIL_INVALID_OBJECT, "ComputeComponentSizes", "components is not valid");
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
000018  2800              CMP      r0,#0
00001a  d031              BEQ      |L329.128|
;;;493    
;;;494          componentSizes.SetZero();
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE7SetZeroEv ; Anki::Embedded::FixedLengthList<int>::SetZero()
;;;495          componentSizes.set_size(maximumId+1);
000022  f8b40108          LDRH     r0,[r4,#0x108]
000026  1c41              ADDS     r1,r0,#1
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
00002e  6b23              LDR      r3,[r4,#0x30]
000030  68e4              LDR      r4,[r4,#0xc]
000032  f8d6c030          LDR      r12,[r6,#0x30]
;;;496    
;;;497          const ConnectedComponentSegment<Type> * restrict pConstComponents = components.Pointer(0);
;;;498          s32 * restrict pComponentSizes = componentSizes.Pointer(0);
;;;499    
;;;500          const s32 numComponents = components.get_size();
;;;501    
;;;502          for(s32 i=0; i<numComponents; i++) {
000036  2000              MOVS     r0,#0
000038  2c00              CMP      r4,#0
00003a  dd10              BLE      |L329.94|
                  |L329.60|
;;;503            const Type id = pConstComponents[i].id;
00003c  eb0302c0          ADD      r2,r3,r0,LSL #3
;;;504            const s16 length = pConstComponents[i].xEnd - pConstComponents[i].xStart + 1;
000040  f8335030          LDRH     r5,[r3,r0,LSL #3]
000044  88d1              LDRH     r1,[r2,#6]            ;503
000046  8852              LDRH     r2,[r2,#2]
000048  1c40              ADDS     r0,r0,#1              ;502
00004a  1b52              SUBS     r2,r2,r5
00004c  1c52              ADDS     r2,r2,#1
;;;505    
;;;506            pComponentSizes[id] += length;
00004e  f85c5021          LDR      r5,[r12,r1,LSL #2]
000052  b212              SXTH     r2,r2                 ;504
000054  442a              ADD      r2,r2,r5
000056  f84c2021          STR      r2,[r12,r1,LSL #2]
00005a  4284              CMP      r4,r0                 ;502
00005c  dcee              BGT      |L329.60|
                  |L329.94|
;;;507          }
;;;508    
;;;509          return RESULT_OK;
;;;510        }
00005e  b002              ADD      sp,sp,#8
000060  2000              MOVS     r0,#0                 ;509
000062  bd70              POP      {r4-r6,pc}
                  |L329.100|
000064  f24010eb          MOV      r0,#0x1eb             ;491
000068  e9cd5000          STRD     r5,r0,[sp,#0]         ;491
00006c  4b0c              LDR      r3,|L329.160|
00006e  a20d              ADR      r2,|L329.164|
000070  a113              ADR      r1,|L329.192|
000072  2005              MOVS     r0,#5                 ;491
000074  f7fffffe          BL       _Anki_Log
000078  b002              ADD      sp,sp,#8
00007a  f04f6080          MOV      r0,#0x4000000         ;491
00007e  bd70              POP      {r4-r6,pc}
                  |L329.128|
000080  f44f70f6          MOV      r0,#0x1ec             ;492
000084  e9cd5000          STRD     r5,r0,[sp,#0]         ;492
000088  4b05              LDR      r3,|L329.160|
00008a  a213              ADR      r2,|L329.216|
00008c  a10c              ADR      r1,|L329.192|
00008e  2005              MOVS     r0,#5                 ;492
000090  f7fffffe          BL       _Anki_Log
000094  b002              ADD      sp,sp,#8
000096  f04f6080          MOV      r0,#0x4000000         ;492
00009a  bd70              POP      {r4-r6,pc}
;;;511    
                          ENDP

                  |L329.156|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)::__PRETTY_FUNCTION__
                  |L329.160|
                          DCD      ||.constdata||+0x98
                  |L329.164|
0000a4  636f6d70          DCB      "componentSizes is not valid",0
0000a8  6f6e656e
0000ac  7453697a
0000b0  65732069
0000b4  73206e6f
0000b8  74207661
0000bc  6c696400
                  |L329.192|
0000c0  436f6d70          DCB      "ComputeComponentSizes",0
0000c4  75746543
0000c8  6f6d706f
0000cc  6e656e74
0000d0  53697a65
0000d4  7300    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L329.216|
0000d8  636f6d70          DCB      "components is not valid",0
0000dc  6f6e656e
0000e0  74732069
0000e4  73206e6f
0000e8  74207661
0000ec  6c696400

                          AREA ||area_number.330||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEE, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.330||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L336.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L336.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.337||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.337||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L343.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L343.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L343.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L343.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L343.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L343.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L343.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L343.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L343.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L343.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::set_size(int)
0000b2  e009              B        |L343.200|
                  |L343.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L343.118|
                  |L343.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L343.140|
                  |L343.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L343.162|
                  |L343.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::set_size(int)
                  |L343.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.344||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.344||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L350.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L350.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.351||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.351||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE PROC ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)
;;;565    
;;;566        template<typename Type> Result ConnectedComponentsTemplate<Type>::ComputeComponentBoundingBoxes(FixedLengthList<Rectangle<s16> > &componentBoundingBoxes)
000000  b5f0              PUSH     {r4-r7,lr}
;;;567        {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
000006  68c9              LDR      r1,[r1,#0xc]
000008  69e0              LDR      r0,[r4,#0x1c]
;;;568          AnkiConditionalErrorAndReturnValue(componentBoundingBoxes.IsValid(), RESULT_FAIL_INVALID_OBJECT, "ComputeComponentSizes", "componentBoundingBoxes is not valid");
00000a  4e40              LDR      r6,|L357.268|
00000c  b083              SUB      sp,sp,#0xc            ;567
00000e  4281              CMP      r1,r0                 ;567
000010  dc60              BGT      |L357.212|
000012  6aa1              LDR      r1,[r4,#0x28]         ;567
000014  b129              CBZ      r1,|L357.34|
000016  69a1              LDR      r1,[r4,#0x18]         ;567
000018  2900              CMP      r1,#0                 ;567
00001a  bfa4              ITT      GE                    ;567
00001c  2800              CMPGE    r0,#0                 ;567
00001e  2201              MOVGE    r2,#1                 ;567
000020  da00              BGE      |L357.36|
                  |L357.34|
000022  2200              MOVS     r2,#0                 ;567
                  |L357.36|
000024  2a00              CMP      r2,#0
000026  d055              BEQ      |L357.212|
;;;569          AnkiConditionalErrorAndReturnValue(components.IsValid(), RESULT_FAIL_INVALID_OBJECT, "ComputeComponentSizes", "components is not valid");
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
00002e  2800              CMP      r0,#0
000030  d05e              BEQ      |L357.240|
;;;570    
;;;571          componentBoundingBoxes.set_size(maximumId+1);
000032  f8d50108          LDR      r0,[r5,#0x108]
000036  1c41              ADDS     r1,r0,#1
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>::set_size(int)
00003e  68ee              LDR      r6,[r5,#0xc]
000040  68e3              LDR      r3,[r4,#0xc]
000042  6b2d              LDR      r5,[r5,#0x30]
;;;572    
;;;573          const s32 numComponents = components.get_size();
;;;574          const s32 numComponentBoundingBoxes = componentBoundingBoxes.get_size();
;;;575    
;;;576          const ConnectedComponentSegment<Type> * restrict pConstComponents = components.Pointer(0);
;;;577          Rectangle<s16> * restrict pComponentBoundingBoxes = componentBoundingBoxes.Pointer(0);
;;;578    
;;;579          for(s32 i=0; i<numComponentBoundingBoxes; i++) {
000044  2000              MOVS     r0,#0
000046  6b21              LDR      r1,[r4,#0x30]
000048  2b00              CMP      r3,#0
;;;580            pComponentBoundingBoxes[i].left = s16_MAX;
00004a  bfc4              ITT      GT
00004c  f6477cff          MOVGT    r12,#0x7fff
;;;581            pComponentBoundingBoxes[i].right = s16_MIN;
000050  ea6f040c          MVNGT    r4,r12
000054  dd0a              BLE      |L357.108|
                  |L357.86|
000056  f821c030          STRH     r12,[r1,r0,LSL #3]    ;580
00005a  eb0102c0          ADD      r2,r1,r0,LSL #3
00005e  1c40              ADDS     r0,r0,#1              ;579
000060  8054              STRH     r4,[r2,#2]
;;;582            pComponentBoundingBoxes[i].top = s16_MAX;
000062  f8a2c004          STRH     r12,[r2,#4]
;;;583            pComponentBoundingBoxes[i].bottom = s16_MIN;
000066  80d4              STRH     r4,[r2,#6]
000068  4283              CMP      r3,r0                 ;579
00006a  dcf4              BGT      |L357.86|
                  |L357.108|
;;;584          }
;;;585    
;;;586          for(s32 iComponent=0; iComponent<numComponents; iComponent++) {
00006c  2300              MOVS     r3,#0
00006e  2e00              CMP      r6,#0
000070  dd2d              BLE      |L357.206|
                  |L357.114|
;;;587            const Type id = pConstComponents[iComponent].id;
000072  eb030c43          ADD      r12,r3,r3,LSL #1
000076  eb05028c          ADD      r2,r5,r12,LSL #2
;;;588            const s16 xStart = pConstComponents[iComponent].xStart;
00007a  f935c02c          LDRSH    r12,[r5,r12,LSL #2]
;;;589            const s16 xEnd = pConstComponents[iComponent].xEnd;
;;;590            const s16 y = pConstComponents[iComponent].y;
00007e  6890              LDR      r0,[r2,#8]
000080  f9b24002          LDRSH    r4,[r2,#2]            ;589
000084  f9b22004          LDRSH    r2,[r2,#4]
;;;591    
;;;592            pComponentBoundingBoxes[id].left = MIN(pComponentBoundingBoxes[id].left, xStart);
000088  f9317030          LDRSH    r7,[r1,r0,LSL #3]
00008c  4567              CMP      r7,r12
00008e  bfb8              IT       LT
000090  46bc              MOVLT    r12,r7
000092  f821c030          STRH     r12,[r1,r0,LSL #3]
;;;593            pComponentBoundingBoxes[id].right = MAX(pComponentBoundingBoxes[id].right, xEnd+1);
000096  eb0100c0          ADD      r0,r1,r0,LSL #3
00009a  1c67              ADDS     r7,r4,#1
00009c  f9b0c002          LDRSH    r12,[r0,#2]
0000a0  45bc              CMP      r12,r7
0000a2  bfd8              IT       LE
0000a4  46bc              MOVLE    r12,r7
0000a6  f8a0c002          STRH     r12,[r0,#2]
;;;594            pComponentBoundingBoxes[id].top = MIN(pComponentBoundingBoxes[id].top, y);
0000aa  f9b0c004          LDRSH    r12,[r0,#4]
0000ae  4594              CMP      r12,r2
0000b0  bfa8              IT       GE
0000b2  4694              MOVGE    r12,r2
0000b4  f8a0c004          STRH     r12,[r0,#4]
;;;595            pComponentBoundingBoxes[id].bottom = MAX(pComponentBoundingBoxes[id].bottom, y+1);
0000b8  f9b0c006          LDRSH    r12,[r0,#6]
0000bc  1c54              ADDS     r4,r2,#1
0000be  45a4              CMP      r12,r4
0000c0  bfd8              IT       LE
0000c2  46a4              MOVLE    r12,r4
0000c4  f8a0c006          STRH     r12,[r0,#6]
0000c8  1c5b              ADDS     r3,r3,#1              ;586
0000ca  42b3              CMP      r3,r6                 ;586
0000cc  dbd1              BLT      |L357.114|
                  |L357.206|
;;;596          }
;;;597    
;;;598          return RESULT_OK;
;;;599        }
0000ce  b003              ADD      sp,sp,#0xc
0000d0  2000              MOVS     r0,#0                 ;598
0000d2  bdf0              POP      {r4-r7,pc}
                  |L357.212|
0000d4  f44f700e          MOV      r0,#0x238             ;568
0000d8  e9cd6000          STRD     r6,r0,[sp,#0]         ;568
0000dc  4b0c              LDR      r3,|L357.272|
0000de  a20d              ADR      r2,|L357.276|
0000e0  a115              ADR      r1,|L357.312|
0000e2  2005              MOVS     r0,#5                 ;568
0000e4  f7fffffe          BL       _Anki_Log
0000e8  b003              ADD      sp,sp,#0xc
0000ea  f04f6080          MOV      r0,#0x4000000         ;568
0000ee  bdf0              POP      {r4-r7,pc}
                  |L357.240|
0000f0  f2402039          MOV      r0,#0x239             ;569
0000f4  e9cd6000          STRD     r6,r0,[sp,#0]         ;569
0000f8  4b05              LDR      r3,|L357.272|
0000fa  a215              ADR      r2,|L357.336|
0000fc  a10e              ADR      r1,|L357.312|
0000fe  2005              MOVS     r0,#5                 ;569
000100  f7fffffe          BL       _Anki_Log
000104  b003              ADD      sp,sp,#0xc
000106  f04f6080          MOV      r0,#0x4000000         ;569
00010a  bdf0              POP      {r4-r7,pc}
;;;600    
                          ENDP

                  |L357.268|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)::__PRETTY_FUNCTION__
                  |L357.272|
                          DCD      ||.constdata||+0x98
                  |L357.276|
000114  636f6d70          DCB      "componentBoundingBoxes is not valid",0
000118  6f6e656e
00011c  74426f75
000120  6e64696e
000124  67426f78
000128  65732069
00012c  73206e6f
000130  74207661
000134  6c696400
                  |L357.312|
000138  436f6d70          DCB      "ComputeComponentSizes",0
00013c  75746543
000140  6f6d706f
000144  6e656e74
000148  53697a65
00014c  7300    
00014e  00                DCB      0
00014f  00                DCB      0
                  |L357.336|
000150  636f6d70          DCB      "components is not valid",0
000154  6f6e656e
000158  74732069
00015c  73206e6f
000160  74207661
000164  6c696400

                          AREA ||area_number.358||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.358||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE PROC ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)
;;;565    
;;;566        template<typename Type> Result ConnectedComponentsTemplate<Type>::ComputeComponentBoundingBoxes(FixedLengthList<Rectangle<s16> > &componentBoundingBoxes)
000000  b5f0              PUSH     {r4-r7,lr}
;;;567        {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
000006  68c9              LDR      r1,[r1,#0xc]
000008  69e0              LDR      r0,[r4,#0x1c]
;;;568          AnkiConditionalErrorAndReturnValue(componentBoundingBoxes.IsValid(), RESULT_FAIL_INVALID_OBJECT, "ComputeComponentSizes", "componentBoundingBoxes is not valid");
00000a  4e3f              LDR      r6,|L364.264|
00000c  b083              SUB      sp,sp,#0xc            ;567
00000e  4281              CMP      r1,r0                 ;567
000010  dc5e              BGT      |L364.208|
000012  6aa1              LDR      r1,[r4,#0x28]         ;567
000014  b129              CBZ      r1,|L364.34|
000016  69a1              LDR      r1,[r4,#0x18]         ;567
000018  2900              CMP      r1,#0                 ;567
00001a  bfa4              ITT      GE                    ;567
00001c  2800              CMPGE    r0,#0                 ;567
00001e  2201              MOVGE    r2,#1                 ;567
000020  da00              BGE      |L364.36|
                  |L364.34|
000022  2200              MOVS     r2,#0                 ;567
                  |L364.36|
000024  2a00              CMP      r2,#0
000026  d053              BEQ      |L364.208|
;;;569          AnkiConditionalErrorAndReturnValue(components.IsValid(), RESULT_FAIL_INVALID_OBJECT, "ComputeComponentSizes", "components is not valid");
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
00002e  2800              CMP      r0,#0
000030  d05c              BEQ      |L364.236|
;;;570    
;;;571          componentBoundingBoxes.set_size(maximumId+1);
000032  f8b50108          LDRH     r0,[r5,#0x108]
000036  1c41              ADDS     r1,r0,#1
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>::set_size(int)
00003e  68ee              LDR      r6,[r5,#0xc]
000040  68e3              LDR      r3,[r4,#0xc]
000042  6b2d              LDR      r5,[r5,#0x30]
;;;572    
;;;573          const s32 numComponents = components.get_size();
;;;574          const s32 numComponentBoundingBoxes = componentBoundingBoxes.get_size();
;;;575    
;;;576          const ConnectedComponentSegment<Type> * restrict pConstComponents = components.Pointer(0);
;;;577          Rectangle<s16> * restrict pComponentBoundingBoxes = componentBoundingBoxes.Pointer(0);
;;;578    
;;;579          for(s32 i=0; i<numComponentBoundingBoxes; i++) {
000044  2000              MOVS     r0,#0
000046  6b21              LDR      r1,[r4,#0x30]
000048  2b00              CMP      r3,#0
;;;580            pComponentBoundingBoxes[i].left = s16_MAX;
00004a  bfc4              ITT      GT
00004c  f6477cff          MOVGT    r12,#0x7fff
;;;581            pComponentBoundingBoxes[i].right = s16_MIN;
000050  ea6f040c          MVNGT    r4,r12
000054  dd0a              BLE      |L364.108|
                  |L364.86|
000056  f821c030          STRH     r12,[r1,r0,LSL #3]    ;580
00005a  eb0102c0          ADD      r2,r1,r0,LSL #3
00005e  1c40              ADDS     r0,r0,#1              ;579
000060  8054              STRH     r4,[r2,#2]
;;;582            pComponentBoundingBoxes[i].top = s16_MAX;
000062  f8a2c004          STRH     r12,[r2,#4]
;;;583            pComponentBoundingBoxes[i].bottom = s16_MIN;
000066  80d4              STRH     r4,[r2,#6]
000068  4283              CMP      r3,r0                 ;579
00006a  dcf4              BGT      |L364.86|
                  |L364.108|
;;;584          }
;;;585    
;;;586          for(s32 iComponent=0; iComponent<numComponents; iComponent++) {
00006c  2200              MOVS     r2,#0
00006e  2e00              CMP      r6,#0
000070  dd2b              BLE      |L364.202|
                  |L364.114|
;;;587            const Type id = pConstComponents[iComponent].id;
000072  eb0503c2          ADD      r3,r5,r2,LSL #3
;;;588            const s16 xStart = pConstComponents[iComponent].xStart;
000076  f935c032          LDRSH    r12,[r5,r2,LSL #3]
00007a  88d8              LDRH     r0,[r3,#6]            ;587
;;;589            const s16 xEnd = pConstComponents[iComponent].xEnd;
00007c  f9b34002          LDRSH    r4,[r3,#2]
;;;590            const s16 y = pConstComponents[iComponent].y;
000080  f9b33004          LDRSH    r3,[r3,#4]
;;;591    
;;;592            pComponentBoundingBoxes[id].left = MIN(pComponentBoundingBoxes[id].left, xStart);
000084  f9317030          LDRSH    r7,[r1,r0,LSL #3]
000088  4567              CMP      r7,r12
00008a  bfb8              IT       LT
00008c  46bc              MOVLT    r12,r7
00008e  f821c030          STRH     r12,[r1,r0,LSL #3]
;;;593            pComponentBoundingBoxes[id].right = MAX(pComponentBoundingBoxes[id].right, xEnd+1);
000092  eb0100c0          ADD      r0,r1,r0,LSL #3
000096  1c67              ADDS     r7,r4,#1
000098  f9b0c002          LDRSH    r12,[r0,#2]
00009c  45bc              CMP      r12,r7
00009e  bfd8              IT       LE
0000a0  46bc              MOVLE    r12,r7
0000a2  f8a0c002          STRH     r12,[r0,#2]
;;;594            pComponentBoundingBoxes[id].top = MIN(pComponentBoundingBoxes[id].top, y);
0000a6  f9b0c004          LDRSH    r12,[r0,#4]
0000aa  459c              CMP      r12,r3
0000ac  bfa8              IT       GE
0000ae  469c              MOVGE    r12,r3
0000b0  f8a0c004          STRH     r12,[r0,#4]
;;;595            pComponentBoundingBoxes[id].bottom = MAX(pComponentBoundingBoxes[id].bottom, y+1);
0000b4  f9b0c006          LDRSH    r12,[r0,#6]
0000b8  1c5c              ADDS     r4,r3,#1
0000ba  45a4              CMP      r12,r4
0000bc  bfd8              IT       LE
0000be  46a4              MOVLE    r12,r4
0000c0  f8a0c006          STRH     r12,[r0,#6]
0000c4  1c52              ADDS     r2,r2,#1              ;586
0000c6  42b2              CMP      r2,r6                 ;586
0000c8  dbd3              BLT      |L364.114|
                  |L364.202|
;;;596          }
;;;597    
;;;598          return RESULT_OK;
;;;599        }
0000ca  b003              ADD      sp,sp,#0xc
0000cc  2000              MOVS     r0,#0                 ;598
0000ce  bdf0              POP      {r4-r7,pc}
                  |L364.208|
0000d0  f44f700e          MOV      r0,#0x238             ;568
0000d4  e9cd6000          STRD     r6,r0,[sp,#0]         ;568
0000d8  4b0c              LDR      r3,|L364.268|
0000da  a20d              ADR      r2,|L364.272|
0000dc  a115              ADR      r1,|L364.308|
0000de  2005              MOVS     r0,#5                 ;568
0000e0  f7fffffe          BL       _Anki_Log
0000e4  b003              ADD      sp,sp,#0xc
0000e6  f04f6080          MOV      r0,#0x4000000         ;568
0000ea  bdf0              POP      {r4-r7,pc}
                  |L364.236|
0000ec  f2402039          MOV      r0,#0x239             ;569
0000f0  e9cd6000          STRD     r6,r0,[sp,#0]         ;569
0000f4  4b05              LDR      r3,|L364.268|
0000f6  a215              ADR      r2,|L364.332|
0000f8  a10e              ADR      r1,|L364.308|
0000fa  2005              MOVS     r0,#5                 ;569
0000fc  f7fffffe          BL       _Anki_Log
000100  b003              ADD      sp,sp,#0xc
000102  f04f6080          MOV      r0,#0x4000000         ;569
000106  bdf0              POP      {r4-r7,pc}
;;;600    
                          ENDP

                  |L364.264|
                          DCD      _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)::__PRETTY_FUNCTION__
                  |L364.268|
                          DCD      ||.constdata||+0x98
                  |L364.272|
000110  636f6d70          DCB      "componentBoundingBoxes is not valid",0
000114  6f6e656e
000118  74426f75
00011c  6e64696e
000120  67426f78
000124  65732069
000128  73206e6f
00012c  74207661
000130  6c696400
                  |L364.308|
000134  436f6d70          DCB      "ComputeComponentSizes",0
000138  75746543
00013c  6f6d706f
000140  6e656e74
000144  53697a65
000148  7300    
00014a  00                DCB      0
00014b  00                DCB      0
                  |L364.332|
00014c  636f6d70          DCB      "components is not valid",0
000150  6f6e656e
000154  74732069
000158  73206e6f
00015c  74207661
000160  6c696400

                          AREA ||area_number.365||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.365||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceIbE3SetEb||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIbE3SetEb, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10ArraySliceIbE3SetEb PROC ; Anki::Embedded::ArraySlice<bool>::Set(bool)
;;;109    
;;;110        template<typename Type> s32 ArraySlice<Type>::Set(const Type value)
000000  b530              PUSH     {r4,r5,lr}
;;;111        {
000002  6a82              LDR      r2,[r0,#0x28]
000004  b089              SUB      sp,sp,#0x24
000006  f1000318          ADD      r3,r0,#0x18
00000a  b1ea              CBZ      r2,|L371.72|
00000c  681a              LDR      r2,[r3,#0]
00000e  2a00              CMP      r2,#0
000010  bfa4              ITT      GE
000012  685a              LDRGE    r2,[r3,#4]
000014  2a00              CMPGE    r2,#0
000016  db17              BLT      |L371.72|
000018  f04f0c01          MOV      r12,#1
00001c  f88dc008          STRB     r12,[sp,#8]
000020  f8d0c010          LDR      r12,[r0,#0x10]
000024  f8cdc00c          STR      r12,[sp,#0xc]
000028  f8d0c014          LDR      r12,[r0,#0x14]
00002c  f8cdc010          STR      r12,[sp,#0x10]
000030  68c2              LDR      r2,[r0,#0xc]
000032  9205              STR      r2,[sp,#0x14]
000034  6842              LDR      r2,[r0,#4]
000036  9206              STR      r2,[sp,#0x18]
000038  6882              LDR      r2,[r0,#8]
00003a  9207              STR      r2,[sp,#0x1c]
00003c  6800              LDR      r0,[r0,#0]
;;;112          Array<Type> &array = this->get_array();
;;;113    
;;;114          AnkiConditionalErrorAndReturnValue(array.IsValid(),
;;;115            0, "ArraySlice<Type>::Set", "Array<Type> is not valid");
;;;116    
;;;117          const ArraySliceLimits_in1_out0<s32> limits(this->get_ySlice(), this->get_xSlice());
;;;118    
;;;119          AnkiConditionalErrorAndReturnValue(limits.isValid,
;;;120            0, "ArraySlice<Type>::Set", "Limits is not valid");
;;;121    
;;;122          for(s32 iy=0; iy<limits.rawIn1Limits.ySize; iy++) {
00003e  2200              MOVS     r2,#0
000040  9008              STR      r0,[sp,#0x20]
000042  2800              CMP      r0,#0
000044  dd2b              BLE      |L371.158|
000046  e00c              B        |L371.98|
                  |L371.72|
000048  2172              MOVS     r1,#0x72              ;114
00004a  4817              LDR      r0,|L371.168|
00004c  e9cd0100          STRD     r0,r1,[sp,#0]         ;114
000050  a316              ADR      r3,|L371.172|
000052  a225              ADR      r2,|L371.232|
000054  a12b              ADR      r1,|L371.260|
000056  2005              MOVS     r0,#5                 ;114
000058  f7fffffe          BL       _Anki_Log
;;;123            const s32 y = limits.rawIn1Limits.yStart + iy * limits.rawIn1Limits.yIncrement;
;;;124            Type * restrict pMat = array.Pointer(y, 0);
;;;125    
;;;126            for(s32 ix=0; ix<limits.rawIn1Limits.xSize; ix++) {
;;;127              const s32 x = limits.rawIn1Limits.xStart + ix * limits.rawIn1Limits.xIncrement;
;;;128              pMat[x] = value;
;;;129            }
;;;130          }
;;;131    
;;;132          return limits.rawIn1Limits.xSize*limits.rawIn1Limits.ySize;
;;;133        }
00005c  b009              ADD      sp,sp,#0x24
00005e  2000              MOVS     r0,#0                 ;114
000060  bd30              POP      {r4,r5,pc}
                  |L371.98|
000062  e9dd0c06          LDRD     r0,r12,[sp,#0x18]
000066  fb02000c          MLA      r0,r2,r12,r0          ;123
00006a  f8d3c010          LDR      r12,[r3,#0x10]        ;123
00006e  689c              LDR      r4,[r3,#8]            ;123
000070  fb00c404          MLA      r4,r0,r4,r12          ;123
000074  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000078  2000              MOVS     r0,#0                 ;126
00007a  f1bc0f00          CMP      r12,#0                ;126
00007e  dd0a              BLE      |L371.150|
                  |L371.128|
000080  e9ddc503          LDRD     r12,r5,[sp,#0xc]      ;126
000084  fb00cc05          MLA      r12,r0,r5,r12         ;127
000088  1c40              ADDS     r0,r0,#1              ;126
00008a  f804100c          STRB     r1,[r4,r12]           ;128
00008e  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000092  4584              CMP      r12,r0                ;126
000094  dcf4              BGT      |L371.128|
                  |L371.150|
000096  9808              LDR      r0,[sp,#0x20]         ;122
000098  1c52              ADDS     r2,r2,#1              ;122
00009a  4290              CMP      r0,r2                 ;122
00009c  dce1              BGT      |L371.98|
                  |L371.158|
00009e  9908              LDR      r1,[sp,#0x20]         ;132
0000a0  9805              LDR      r0,[sp,#0x14]         ;132
0000a2  b009              ADD      sp,sp,#0x24
0000a4  4348              MULS     r0,r1,r0              ;132
0000a6  bd30              POP      {r4,r5,pc}
;;;134    
                          ENDP

                  |L371.168|
                          DCD      _ZZN4Anki8Embedded10ArraySliceIbE3SetEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<bool>::Set(bool)::__PRETTY_FUNCTION__
                  |L371.172|
0000ac  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0000b0  6f726574
0000b4  6563685c
0000b8  636f6d6d
0000bc  6f6e5c69
0000c0  6e636c75
0000c4  64655c61
0000c8  6e6b692f
0000cc  636f6d6d
0000d0  6f6e2f72
0000d4  6f626f74
0000d8  2f617272
0000dc  617953  
0000df  6c696365          DCB      "lices.h",0
0000e3  732e6800
0000e7  00                DCB      0
                  |L371.232|
0000e8  41727261          DCB      "Array<Type> is not valid",0
0000ec  793c5479
0000f0  70653e20
0000f4  6973206e
0000f8  6f742076
0000fc  616c6964
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L371.260|
000104  41727261          DCB      "ArraySlice<Type>::Set",0
000108  79536c69
00010c  63653c54
000110  7970653e
000114  3a3a5365
000118  7400    
00011a  00                DCB      0
00011b  00                DCB      0

                          AREA ||area_number.372||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIbE3SetEb, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceIbE3SetEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.372||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceIbE3SetEb||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<bool>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L378.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L378.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.379||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.379||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIbEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<bool>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<bool>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<bool>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L385.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L385.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L385.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L385.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L385.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L385.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L385.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L385.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L385.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L385.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi ; Anki::Embedded::FixedLengthList<bool>::set_size(int)
0000b2  e009              B        |L385.200|
                  |L385.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L385.118|
                  |L385.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L385.140|
                  |L385.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L385.162|
                  |L385.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIbE8set_sizeEi ; Anki::Embedded::FixedLengthList<bool>::set_size(int)
                  |L385.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.386||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.386||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIbEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Rectangle<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L392.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L392.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L392.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L392.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L392.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L392.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L392.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L392.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L392.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L392.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>::set_size(int)
0000b2  e009              B        |L392.200|
                  |L392.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L392.118|
                  |L392.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L392.140|
                  |L392.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L392.162|
                  |L392.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>::set_size(int)
                  |L392.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.393||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.393||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_9RectangleIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceIiE3SetEi||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIiE3SetEi, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10ArraySliceIiE3SetEi PROC ; Anki::Embedded::ArraySlice<int>::Set(int)
;;;109    
;;;110        template<typename Type> s32 ArraySlice<Type>::Set(const Type value)
000000  b530              PUSH     {r4,r5,lr}
;;;111        {
000002  6a82              LDR      r2,[r0,#0x28]
000004  b089              SUB      sp,sp,#0x24
000006  f1000318          ADD      r3,r0,#0x18
00000a  b1ea              CBZ      r2,|L399.72|
00000c  681a              LDR      r2,[r3,#0]
00000e  2a00              CMP      r2,#0
000010  bfa4              ITT      GE
000012  685a              LDRGE    r2,[r3,#4]
000014  2a00              CMPGE    r2,#0
000016  db17              BLT      |L399.72|
000018  f04f0c01          MOV      r12,#1
00001c  f88dc008          STRB     r12,[sp,#8]
000020  f8d0c010          LDR      r12,[r0,#0x10]
000024  f8cdc00c          STR      r12,[sp,#0xc]
000028  f8d0c014          LDR      r12,[r0,#0x14]
00002c  f8cdc010          STR      r12,[sp,#0x10]
000030  68c2              LDR      r2,[r0,#0xc]
000032  9205              STR      r2,[sp,#0x14]
000034  6842              LDR      r2,[r0,#4]
000036  9206              STR      r2,[sp,#0x18]
000038  6882              LDR      r2,[r0,#8]
00003a  9207              STR      r2,[sp,#0x1c]
00003c  6800              LDR      r0,[r0,#0]
;;;112          Array<Type> &array = this->get_array();
;;;113    
;;;114          AnkiConditionalErrorAndReturnValue(array.IsValid(),
;;;115            0, "ArraySlice<Type>::Set", "Array<Type> is not valid");
;;;116    
;;;117          const ArraySliceLimits_in1_out0<s32> limits(this->get_ySlice(), this->get_xSlice());
;;;118    
;;;119          AnkiConditionalErrorAndReturnValue(limits.isValid,
;;;120            0, "ArraySlice<Type>::Set", "Limits is not valid");
;;;121    
;;;122          for(s32 iy=0; iy<limits.rawIn1Limits.ySize; iy++) {
00003e  2200              MOVS     r2,#0
000040  9008              STR      r0,[sp,#0x20]
000042  2800              CMP      r0,#0
000044  dd2b              BLE      |L399.158|
000046  e00c              B        |L399.98|
                  |L399.72|
000048  2172              MOVS     r1,#0x72              ;114
00004a  4817              LDR      r0,|L399.168|
00004c  e9cd0100          STRD     r0,r1,[sp,#0]         ;114
000050  a316              ADR      r3,|L399.172|
000052  a225              ADR      r2,|L399.232|
000054  a12b              ADR      r1,|L399.260|
000056  2005              MOVS     r0,#5                 ;114
000058  f7fffffe          BL       _Anki_Log
;;;123            const s32 y = limits.rawIn1Limits.yStart + iy * limits.rawIn1Limits.yIncrement;
;;;124            Type * restrict pMat = array.Pointer(y, 0);
;;;125    
;;;126            for(s32 ix=0; ix<limits.rawIn1Limits.xSize; ix++) {
;;;127              const s32 x = limits.rawIn1Limits.xStart + ix * limits.rawIn1Limits.xIncrement;
;;;128              pMat[x] = value;
;;;129            }
;;;130          }
;;;131    
;;;132          return limits.rawIn1Limits.xSize*limits.rawIn1Limits.ySize;
;;;133        }
00005c  b009              ADD      sp,sp,#0x24
00005e  2000              MOVS     r0,#0                 ;114
000060  bd30              POP      {r4,r5,pc}
                  |L399.98|
000062  e9dd0c06          LDRD     r0,r12,[sp,#0x18]
000066  fb02000c          MLA      r0,r2,r12,r0          ;123
00006a  f8d3c010          LDR      r12,[r3,#0x10]        ;123
00006e  689c              LDR      r4,[r3,#8]            ;123
000070  fb00c404          MLA      r4,r0,r4,r12          ;123
000074  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000078  2000              MOVS     r0,#0                 ;126
00007a  f1bc0f00          CMP      r12,#0                ;126
00007e  dd0a              BLE      |L399.150|
                  |L399.128|
000080  e9ddc503          LDRD     r12,r5,[sp,#0xc]      ;126
000084  fb00cc05          MLA      r12,r0,r5,r12         ;127
000088  1c40              ADDS     r0,r0,#1              ;126
00008a  f844102c          STR      r1,[r4,r12,LSL #2]    ;128
00008e  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000092  4584              CMP      r12,r0                ;126
000094  dcf4              BGT      |L399.128|
                  |L399.150|
000096  9808              LDR      r0,[sp,#0x20]         ;122
000098  1c52              ADDS     r2,r2,#1              ;122
00009a  4290              CMP      r0,r2                 ;122
00009c  dce1              BGT      |L399.98|
                  |L399.158|
00009e  9908              LDR      r1,[sp,#0x20]         ;132
0000a0  9805              LDR      r0,[sp,#0x14]         ;132
0000a2  b009              ADD      sp,sp,#0x24
0000a4  4348              MULS     r0,r1,r0              ;132
0000a6  bd30              POP      {r4,r5,pc}
;;;134    
                          ENDP

                  |L399.168|
                          DCD      _ZZN4Anki8Embedded10ArraySliceIiE3SetEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<int>::Set(int)::__PRETTY_FUNCTION__
                  |L399.172|
0000ac  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0000b0  6f726574
0000b4  6563685c
0000b8  636f6d6d
0000bc  6f6e5c69
0000c0  6e636c75
0000c4  64655c61
0000c8  6e6b692f
0000cc  636f6d6d
0000d0  6f6e2f72
0000d4  6f626f74
0000d8  2f617272
0000dc  617953  
0000df  6c696365          DCB      "lices.h",0
0000e3  732e6800
0000e7  00                DCB      0
                  |L399.232|
0000e8  41727261          DCB      "Array<Type> is not valid",0
0000ec  793c5479
0000f0  70653e20
0000f4  6973206e
0000f8  6f742076
0000fc  616c6964
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L399.260|
000104  41727261          DCB      "ArraySlice<Type>::Set",0
000108  79536c69
00010c  63653c54
000110  7970653e
000114  3a3a5365
000118  7400    
00011a  00                DCB      0
00011b  00                DCB      0

                          AREA ||area_number.400||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIiE3SetEi, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceIiE3SetEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.400||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceIiE3SetEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Ev||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Ev                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object()
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Ev PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence()
;;;24     
;;;25         template<typename Type> LinearSequence<Type>::LinearSequence()
;;;26           : size(-1), start(-1), increment(static_cast<Type>(-1))
;;;27         {
;;;28           this->size = -1;
;;;29         }
;;;30     
000000  f04f31ff          MOV      r1,#0xffffffff
000004  6001              STR      r1,[r0,#0]
000006  6041              STR      r1,[r0,#4]
000008  6081              STR      r1,[r0,#8]
00000a  4770              BX       lr
                          ENDP


                          AREA ||area_number.407||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Ev, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.407||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIiEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<int>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListIiEC1Ev PROC ; Anki::Embedded::FixedLengthList<int>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000006  300c              ADDS     r0,r0,#0xc
000008  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
00000c  3018              ADDS     r0,r0,#0x18
00000e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000012  f04f31ff          MOV      r1,#0xffffffff
000016  f8401d0c          STR      r1,[r0,#-0xc]!
00001a  f1a00418          SUB      r4,r0,#0x18
00001e  6041              STR      r1,[r0,#4]
000020  6081              STR      r1,[r0,#8]
000022  2100              MOVS     r1,#0
000024  6101              STR      r1,[r0,#0x10]
000026  6141              STR      r1,[r0,#0x14]
000028  6181              STR      r1,[r0,#0x18]
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
000030  4620              MOV      r0,r4
000032  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.414||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.414||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.421||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.421||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  b570              PUSH     {r4-r6,lr}
;;;182        {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000006  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::get_maximumSize() const
00000a  2c00              CMP      r4,#0
00000c  bfb4              ITE      LT
00000e  2100              MOVLT    r1,#0
000010  4621              MOVGE    r1,r4
000012  4281              CMP      r1,r0
000014  dd04              BLE      |L427.32|
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::get_maximumSize() const
00001c  4604              MOV      r4,r0
00001e  e002              B        |L427.38|
                  |L427.32|
000020  2c00              CMP      r4,#0
000022  bfb8              IT       LT
000024  2400              MOVLT    r4,#0
                  |L427.38|
000026  4620              MOV      r0,r4
;;;184    
;;;185          this->xSlice.size = newSize;
000028  60ec              STR      r4,[r5,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00002a  bd70              POP      {r4-r6,pc}
;;;189    
                          ENDP


                          AREA ||area_number.428||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.428||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC2Ev                  ; Alternate entry point ; Anki::Embedded::ConnectedComponentsTemplate<int>::ConnectedComponentsTemplate__sub_object()
                  _ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev PROC ; Anki::Embedded::ConnectedComponentsTemplate<int>::ConnectedComponentsTemplate()
;;;140    
;;;141        template<typename Type> ConnectedComponentsTemplate<Type>::ConnectedComponentsTemplate()
;;;142          : curState(STATE_INVALID), isSortedInId(true), isSortedInY(true), isSortedInX(true), maximumId(0), maxImageWidth(-1)
;;;143        {
;;;144        }
;;;145    
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
000006  3034              ADDS     r0,r0,#0x34
000008  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
00000c  3034              ADDS     r0,r0,#0x34
00000e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
000012  3034              ADDS     r0,r0,#0x34
000014  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::FixedLengthList()
000018  3034              ADDS     r0,r0,#0x34
00001a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1Ev ; Anki::Embedded::FixedLengthList<int>::FixedLengthList()
00001e  2200              MOVS     r2,#0
000020  f8802034          STRB     r2,[r0,#0x34]
000024  2101              MOVS     r1,#1
000026  f8801035          STRB     r1,[r0,#0x35]
00002a  f8801036          STRB     r1,[r0,#0x36]
00002e  f8801037          STRB     r1,[r0,#0x37]
000032  1e89              SUBS     r1,r1,#2
000034  e9c0210e          STRD     r2,r1,[r0,#0x38]
000038  38d0              SUBS     r0,r0,#0xd0
00003a  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.435||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.435||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<unsigned short>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L441.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L441.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.442||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.442||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListItEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListItEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListItEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListItEC1Ev PROC ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
000006  300c              ADDS     r0,r0,#0xc
000008  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Ev ; Anki::Embedded::LinearSequence<int>::LinearSequence()
00000c  3018              ADDS     r0,r0,#0x18
00000e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000012  f04f31ff          MOV      r1,#0xffffffff
000016  f8401d0c          STR      r1,[r0,#-0xc]!
00001a  f1a00418          SUB      r4,r0,#0x18
00001e  6041              STR      r1,[r0,#4]
000020  6081              STR      r1,[r0,#8]
000022  2100              MOVS     r1,#0
000024  6101              STR      r1,[r0,#0x10]
000026  6141              STR      r1,[r0,#0x14]
000028  6181              STR      r1,[r0,#0x18]
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItE8set_sizeEi ; Anki::Embedded::FixedLengthList<unsigned short>::set_size(int)
000030  4620              MOV      r0,r4
000032  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.449||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListItEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListItEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.449||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListItEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.456||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.456||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  b570              PUSH     {r4-r6,lr}
;;;182        {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000006  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::get_maximumSize() const
00000a  2c00              CMP      r4,#0
00000c  bfb4              ITE      LT
00000e  2100              MOVLT    r1,#0
000010  4621              MOVGE    r1,r4
000012  4281              CMP      r1,r0
000014  dd04              BLE      |L462.32|
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::get_maximumSize() const
00001c  4604              MOV      r4,r0
00001e  e002              B        |L462.38|
                  |L462.32|
000020  2c00              CMP      r4,#0
000022  bfb8              IT       LT
000024  2400              MOVLT    r4,#0
                  |L462.38|
000026  4620              MOV      r0,r4
;;;184    
;;;185          this->xSlice.size = newSize;
000028  60ec              STR      r4,[r5,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00002a  bd70              POP      {r4-r6,pc}
;;;189    
                          ENDP


                          AREA ||area_number.463||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.463||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1Ev||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItEC2Ev                  ; Alternate entry point ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate__sub_object()
                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1Ev PROC ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate()
;;;140    
;;;141        template<typename Type> ConnectedComponentsTemplate<Type>::ConnectedComponentsTemplate()
;;;142          : curState(STATE_INVALID), isSortedInId(true), isSortedInY(true), isSortedInX(true), maximumId(0), maxImageWidth(-1)
;;;143        {
;;;144        }
;;;145    
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
000006  3034              ADDS     r0,r0,#0x34
000008  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
00000c  3034              ADDS     r0,r0,#0x34
00000e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
000012  3034              ADDS     r0,r0,#0x34
000014  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::FixedLengthList()
000018  3034              ADDS     r0,r0,#0x34
00001a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListItEC1Ev ; Anki::Embedded::FixedLengthList<unsigned short>::FixedLengthList()
00001e  2200              MOVS     r2,#0
000020  f8802034          STRB     r2,[r0,#0x34]
000024  2101              MOVS     r1,#1
000026  f8801035          STRB     r1,[r0,#0x35]
00002a  f8801036          STRB     r1,[r0,#0x36]
00002e  f8801037          STRB     r1,[r0,#0x37]
000032  8702              STRH     r2,[r0,#0x38]
000034  1e89              SUBS     r1,r1,#2
000036  63c1              STR      r1,[r0,#0x3c]
000038  38d0              SUBS     r0,r0,#0xd0
00003a  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.470||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1Ev, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.470||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItEC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded15FixedLengthListItEaSERKS2_||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListItEaSERKS2_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListItEaSERKS2_ PROC ; Anki::Embedded::FixedLengthList<unsigned short>::operator =(const Anki::Embedded::FixedLengthList<unsigned short>&)
000000  e9d12300          LDRD     r2,r3,[r1,#0]
000004  f8d1c008          LDR      r12,[r1,#8]
000008  f8c0c008          STR      r12,[r0,#8]
00000c  e9c02300          STRD     r2,r3,[r0,#0]
000010  e9d12303          LDRD     r2,r3,[r1,#0xc]
000014  f8d1c014          LDR      r12,[r1,#0x14]
000018  f8c0c014          STR      r12,[r0,#0x14]
00001c  e9c02303          STRD     r2,r3,[r0,#0xc]
000020  698b              LDR      r3,[r1,#0x18]
000022  6183              STR      r3,[r0,#0x18]
000024  69cb              LDR      r3,[r1,#0x1c]
000026  61c3              STR      r3,[r0,#0x1c]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  6203              STR      r3,[r0,#0x20]
00002c  6a4b              LDR      r3,[r1,#0x24]
00002e  6243              STR      r3,[r0,#0x24]
000030  6a8b              LDR      r3,[r1,#0x28]
000032  6283              STR      r3,[r0,#0x28]
000034  6aca              LDR      r2,[r1,#0x2c]
000036  62c2              STR      r2,[r0,#0x2c]
000038  6b09              LDR      r1,[r1,#0x30]
00003a  6301              STR      r1,[r0,#0x30]
00003c  4770              BX       lr
                          ENDP


                          AREA ||area_number.477||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListItEaSERKS2_, LINKORDER=||i._ZN4Anki8Embedded15FixedLengthListItEaSERKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.477||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15FixedLengthListItEaSERKS2_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L480.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L480.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L480.384|
000044  a25c              ADR      r2,|L480.440|
000046  a160              ADR      r1,|L480.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L480.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  00c0              LSLS     r0,r0,#3
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L480.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L480.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L480.384|
000080  a24d              ADR      r2,|L480.440|
000082  a157              ADR      r1,|L480.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L480.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L480.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L480.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L480.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L480.384|
0000c8  a251              ADR      r2,|L480.528|
0000ca  a156              ADR      r1,|L480.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L480.372|
                  |L480.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L480.384|
0000e0  a258              ADR      r2,|L480.580|
0000e2  a15f              ADR      r1,|L480.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L480.372|
                  |L480.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L480.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L480.384|
000110  a259              ADR      r2,|L480.632|
000112  a144              ADR      r1,|L480.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L480.372|
                  |L480.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00f1              LSLS     r1,r6,#3
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L480.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L480.384|
00015a  a251              ADR      r2,|L480.672|
00015c  a140              ADR      r1,|L480.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L480.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L480.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L480.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L480.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L480.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L480.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L480.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L480.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L480.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L480.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L480.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L480.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L480.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L480.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.481||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.481||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_ PROC ; Anki::Embedded::FixedLengthList<int>::operator =(const Anki::Embedded::FixedLengthList<int>&)
000000  e9d12300          LDRD     r2,r3,[r1,#0]
000004  f8d1c008          LDR      r12,[r1,#8]
000008  f8c0c008          STR      r12,[r0,#8]
00000c  e9c02300          STRD     r2,r3,[r0,#0]
000010  e9d12303          LDRD     r2,r3,[r1,#0xc]
000014  f8d1c014          LDR      r12,[r1,#0x14]
000018  f8c0c014          STR      r12,[r0,#0x14]
00001c  e9c02303          STRD     r2,r3,[r0,#0xc]
000020  698b              LDR      r3,[r1,#0x18]
000022  6183              STR      r3,[r0,#0x18]
000024  69cb              LDR      r3,[r1,#0x1c]
000026  61c3              STR      r3,[r0,#0x1c]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  6203              STR      r3,[r0,#0x20]
00002c  6a4b              LDR      r3,[r1,#0x24]
00002e  6243              STR      r3,[r0,#0x24]
000030  6a8b              LDR      r3,[r1,#0x28]
000032  6283              STR      r3,[r0,#0x28]
000034  6aca              LDR      r2,[r1,#0x2c]
000036  62c2              STR      r2,[r0,#0x2c]
000038  6b09              LDR      r1,[r1,#0x30]
00003a  6301              STR      r1,[r0,#0x30]
00003c  4770              BX       lr
                          ENDP


                          AREA ||area_number.488||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_, LINKORDER=||i._ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.488||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15FixedLengthListIiEaSERKS2_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L491.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L491.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L491.392|
000044  a25e              ADR      r2,|L491.448|
000046  a162              ADR      r1,|L491.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L491.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000040          ADD      r0,r0,r0,LSL #1
000066  0080              LSLS     r0,r0,#2
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L491.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L491.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L491.392|
000084  a24e              ADR      r2,|L491.448|
000086  a158              ADR      r1,|L491.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L491.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L491.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L491.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L491.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L491.392|
0000cc  a252              ADR      r2,|L491.536|
0000ce  a157              ADR      r1,|L491.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L491.380|
                  |L491.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L491.392|
0000e4  a259              ADR      r2,|L491.588|
0000e6  a160              ADR      r1,|L491.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L491.380|
                  |L491.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L491.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L491.392|
000114  a25a              ADR      r2,|L491.640|
000116  a145              ADR      r1,|L491.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L491.380|
                  |L491.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060146          ADD      r1,r6,r6,LSL #1
00013e  0089              LSLS     r1,r1,#2
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L491.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L491.392|
000162  a251              ADR      r2,|L491.680|
000164  a140              ADR      r1,|L491.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L491.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L491.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L491.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L491.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L491.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L491.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L491.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L491.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L491.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L491.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L491.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L491.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L491.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L491.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.492||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.492||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded13saturate_castIiEET_d||, COMGROUP=_ZN4Anki8Embedded13saturate_castIiEET_d, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded13saturate_castIiEET_d PROC ; Anki::Embedded::saturate_cast<int>(double)
;;;343        template<> inline s32 saturate_cast<s32>(const f32 v) { return (s32) (v > (f32)0x7FFFFFBF) ? 0x7FFFFFFF : Round<s32>(MAX((f32)s32_MIN, (f32)v)); } // Due to precision issues, this cast is a little wierd
;;;344        template<> inline s32 saturate_cast<s32>(const f64 v) { return (s32) Round<s32>( MIN((f64)s32_MAX, MAX((f64)s32_MIN, (f64)v)) ); }
000000  b510              PUSH     {r4,lr}
000002  ed2d8b08          VPUSH    {d8-d11}
000006  eeb08a40          VMOV.F32 s16,s0
00000a  eef08a60          VMOV.F32 s17,s1
00000e  ec510b18          VMOV     r0,r1,d8
000012  ed9f9b27          VLDR     d9,|L498.176|
000016  ed9fab22          VLDR     d10,|L498.160|
00001a  ed9fbb23          VLDR     d11,|L498.168|
00001e  ec532b19          VMOV     r2,r3,d9
000022  f7fffffe          BL       __aeabi_cdcmple
000026  bf27              ITTEE    CS
000028  eeb00a48          VMOVCS.F32 s0,s16
00002c  eef00a68          VMOVCS.F32 s1,s17
000030  eeb00a49          VMOVCC.F32 s0,s18
000034  eef00a69          VMOVCC.F32 s1,s19
000038  ec532b1b          VMOV     r2,r3,d11
00003c  ec510b10          VMOV     r0,r1,d0
000040  f7fffffe          BL       __aeabi_cdrcmple
000044  bf3c              ITT      CC
000046  eeb08a4b          VMOVCC.F32 s16,s22
00004a  eef08a6b          VMOVCC.F32 s17,s23
00004e  d30a              BCC      |L498.102|
000050  ec532b19          VMOV     r2,r3,d9
000054  ec510b18          VMOV     r0,r1,d8
000058  f7fffffe          BL       __aeabi_cdcmple
00005c  bf3c              ITT      CC
00005e  eeb08a49          VMOVCC.F32 s16,s18
000062  eef08a69          VMOVCC.F32 s17,s19
                  |L498.102|
000066  ed9f0b14          VLDR     d0,|L498.184|
00006a  ec510b18          VMOV     r0,r1,d8
00006e  ec532b10          VMOV     r2,r3,d0
000072  f7fffffe          BL       __aeabi_cdrcmple
000076  ec532b1a          VMOV     r2,r3,d10
00007a  ec510b18          VMOV     r0,r1,d8
00007e  d207              BCS      |L498.144|
000080  f7fffffe          BL       __aeabi_dadd
000084  ecbd8b08          VPOP     {d8-d11}
000088  e8bd4010          POP      {r4,lr}
00008c  f7ffbffe          B.W      __aeabi_d2iz
                  |L498.144|
000090  f7fffffe          BL       __aeabi_dsub
000094  ecbd8b08          VPOP     {d8-d11}
000098  e8bd4010          POP      {r4,lr}
00009c  f7ffbffe          B.W      __aeabi_d2iz
;;;345    
                          ENDP

                  |L498.160|
0000a0  00000000          DCFD     0x3fe0000000000000 ; 0.5
0000a4  3fe00000
                  |L498.168|
0000a8  ffc00000          DCFD     0x41dfffffffc00000 ; 2147483647
0000ac  41dfffff
                  |L498.176|
0000b0  00000000          DCFD     0xc1e0000000000000 ; -2147483648
0000b4  c1e00000
                  |L498.184|
0000b8  00000000          DCFD     0x0000000000000000 ; 0
0000bc  00000000

                          AREA ||area_number.499||, COMGROUP=_ZN4Anki8Embedded13saturate_castIiEET_d, LINKORDER=||i._ZN4Anki8Embedded13saturate_castIiEET_d||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.499||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded13saturate_castIiEET_d||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIiEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<int>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L505.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L505.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L505.384|
000044  a25c              ADR      r2,|L505.440|
000046  a160              ADR      r1,|L505.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L505.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L505.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L505.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L505.384|
000080  a24d              ADR      r2,|L505.440|
000082  a157              ADR      r1,|L505.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L505.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L505.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L505.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L505.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L505.384|
0000c8  a251              ADR      r2,|L505.528|
0000ca  a156              ADR      r1,|L505.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L505.372|
                  |L505.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L505.384|
0000e0  a258              ADR      r2,|L505.580|
0000e2  a15f              ADR      r1,|L505.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L505.372|
                  |L505.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L505.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L505.384|
000110  a259              ADR      r2,|L505.632|
000112  a144              ADR      r1,|L505.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L505.372|
                  |L505.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L505.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L505.384|
00015a  a251              ADR      r2,|L505.672|
00015c  a140              ADR      r1,|L505.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L505.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L505.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L505.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L505.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L505.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L505.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L505.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L505.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L505.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L505.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L505.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L505.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L505.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L505.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.506||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.506||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L512.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L512.56|
00000e  4b0b              LDR      r3,|L512.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L512.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L512.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L512.60|
                          DCD      ||.constdata||+0x2c

                          AREA ||area_number.513||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.513||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv PROC ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::FindMaximumId()
;;;475    
;;;476        template<typename Type> Result ConnectedComponentsTemplate<Type>::FindMaximumId()
000000  b410              PUSH     {r4}
;;;477        {
;;;478          const s32 numComponents = components.get_size();
;;;479    
;;;480          this->maximumId = 0;
000002  2100              MOVS     r1,#0
000004  f8d0c00c          LDR      r12,[r0,#0xc]
000008  f8a01108          STRH     r1,[r0,#0x108]
;;;481          const ConnectedComponentSegment<Type> * restrict pConstComponents = components.Pointer(0);
;;;482          for(s32 i=0; i<numComponents; i++) {
00000c  6b04              LDR      r4,[r0,#0x30]
00000e  f1bc0f00          CMP      r12,#0
000012  dd0c              BLE      |L519.46|
                  |L519.20|
;;;483            this->maximumId = MAX(this->maximumId, pConstComponents[i].id);
000014  eb0403c1          ADD      r3,r4,r1,LSL #3
000018  f8b02108          LDRH     r2,[r0,#0x108]
00001c  88db              LDRH     r3,[r3,#6]
00001e  429a              CMP      r2,r3
000020  bf98              IT       LS
000022  461a              MOVLS    r2,r3
000024  f8a02108          STRH     r2,[r0,#0x108]
000028  1c49              ADDS     r1,r1,#1              ;482
00002a  4561              CMP      r1,r12                ;482
00002c  dbf2              BLT      |L519.20|
                  |L519.46|
;;;484          }
;;;485    
;;;486          return RESULT_OK;
;;;487        }
00002e  bc10              POP      {r4}
000030  2000              MOVS     r0,#0                 ;486
000032  4770              BX       lr
;;;488    
                          ENDP


                          AREA ||area_number.520||, COMGROUP=_ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv, LINKORDER=||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.520||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded27ConnectedComponentsTemplateItE13FindMaximumIdEv||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded13saturate_castItEET_d||, COMGROUP=_ZN4Anki8Embedded13saturate_castItEET_d, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded13saturate_castItEET_d PROC ; Anki::Embedded::saturate_cast<unsigned short>(double)
;;;310        template<> inline u16 saturate_cast<u16>(const f32 v) { return (u16) Round<s32>( MIN((f32)u16_MAX, MAX((f32)0, (f32)v)) ); }
;;;311        template<> inline u16 saturate_cast<u16>(const f64 v) { return (u16) Round<s32>( MIN((f64)u16_MAX, MAX((f64)0, (f64)v)) ); }
000000  b510              PUSH     {r4,lr}
000002  ed2d8b08          VPUSH    {d8-d11}
000006  eeb08a40          VMOV.F32 s16,s0
00000a  eef08a60          VMOV.F32 s17,s1
00000e  ec510b18          VMOV     r0,r1,d8
000012  ed9f9b25          VLDR     d9,|L526.168|
000016  ed9fab20          VLDR     d10,|L526.152|
00001a  ed9fbb21          VLDR     d11,|L526.160|
00001e  ec532b19          VMOV     r2,r3,d9
000022  f7fffffe          BL       __aeabi_cdcmple
000026  bf27              ITTEE    CS
000028  eeb00a48          VMOVCS.F32 s0,s16
00002c  eef00a68          VMOVCS.F32 s1,s17
000030  eeb00a49          VMOVCC.F32 s0,s18
000034  eef00a69          VMOVCC.F32 s1,s19
000038  ec532b1b          VMOV     r2,r3,d11
00003c  ec510b10          VMOV     r0,r1,d0
000040  f7fffffe          BL       __aeabi_cdrcmple
000044  bf3c              ITT      CC
000046  eeb08a4b          VMOVCC.F32 s16,s22
00004a  eef08a6b          VMOVCC.F32 s17,s23
00004e  d30a              BCC      |L526.102|
000050  ec532b19          VMOV     r2,r3,d9
000054  ec510b18          VMOV     r0,r1,d8
000058  f7fffffe          BL       __aeabi_cdcmple
00005c  bf3c              ITT      CC
00005e  eeb08a49          VMOVCC.F32 s16,s18
000062  eef08a69          VMOVCC.F32 s17,s19
                  |L526.102|
000066  ec532b19          VMOV     r2,r3,d9
00006a  ec510b18          VMOV     r0,r1,d8
00006e  f7fffffe          BL       __aeabi_cdrcmple
000072  ec532b1a          VMOV     r2,r3,d10
000076  ec510b18          VMOV     r0,r1,d8
00007a  d204              BCS      |L526.134|
00007c  f7fffffe          BL       __aeabi_dadd
000080  f7fffffe          BL       __aeabi_d2iz
000084  e003              B        |L526.142|
                  |L526.134|
000086  f7fffffe          BL       __aeabi_dsub
00008a  f7fffffe          BL       __aeabi_d2iz
                  |L526.142|
00008e  ecbd8b08          VPOP     {d8-d11}
000092  b280              UXTH     r0,r0
000094  bd10              POP      {r4,pc}
;;;312    
                          ENDP

000096  0000              DCW      0x0000
                  |L526.152|
000098  00000000          DCFD     0x3fe0000000000000 ; 0.5
00009c  3fe00000
                  |L526.160|
0000a0  00000000          DCFD     0x40efffe000000000 ; 65535
0000a4  40efffe0
                  |L526.168|
0000a8  00000000          DCFD     0x0000000000000000 ; 0
0000ac  00000000

                          AREA ||area_number.527||, COMGROUP=_ZN4Anki8Embedded13saturate_castItEET_d, LINKORDER=||i._ZN4Anki8Embedded13saturate_castItEET_d||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.527||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded13saturate_castItEET_d||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayItEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<unsigned short>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L533.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L533.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L533.384|
000044  a25c              ADR      r2,|L533.440|
000046  a160              ADR      r1,|L533.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L533.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0040              LSLS     r0,r0,#1
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L533.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L533.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L533.384|
000080  a24d              ADR      r2,|L533.440|
000082  a157              ADR      r1,|L533.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L533.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L533.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L533.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L533.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L533.384|
0000c8  a251              ADR      r2,|L533.528|
0000ca  a156              ADR      r1,|L533.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L533.372|
                  |L533.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L533.384|
0000e0  a258              ADR      r2,|L533.580|
0000e2  a15f              ADR      r1,|L533.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L533.372|
                  |L533.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L533.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L533.384|
000110  a259              ADR      r2,|L533.632|
000112  a144              ADR      r1,|L533.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L533.372|
                  |L533.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0071              LSLS     r1,r6,#1
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L533.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L533.384|
00015a  a251              ADR      r2,|L533.672|
00015c  a140              ADR      r1,|L533.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L533.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L533.380|
                          DCD      _ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L533.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L533.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L533.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L533.476|
                          DCD      _ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L533.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L533.524|
                          DCD      _ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L533.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L533.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L533.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L533.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L533.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L533.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.534||, COMGROUP=_ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.534||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::IsValid() const
;;;91     
;;;92         template<typename Type> bool FixedLengthList<Type>::IsValid() const
000000  b570              PUSH     {r4-r6,lr}
;;;93         {
000002  4604              MOV      r4,r0
;;;94           if(this->get_size() > this->get_maximumSize()) {
000004  68c5              LDR      r5,[r0,#0xc]
000006  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::get_maximumSize() const
00000a  4285              CMP      r5,r0
00000c  dc0a              BGT      |L540.36|
00000e  6aa0              LDR      r0,[r4,#0x28]
000010  2800              CMP      r0,#0
;;;95             return false;
;;;96           }
;;;97     
;;;98           return ArraySlice<Type>::IsValid();
;;;99         } // bool FixedLengthList<Type>::IsValid() const
000012  bf08              IT       EQ
000014  bd70              POPEQ    {r4-r6,pc}
000016  69a0              LDR      r0,[r4,#0x18]
000018  2800              CMP      r0,#0
00001a  bfa1              ITTTT    GE
00001c  69e0              LDRGE    r0,[r4,#0x1c]
00001e  2800              CMPGE    r0,#0
000020  2001              MOVGE    r0,#1
000022  bd70              POPGE    {r4-r6,pc}
                  |L540.36|
000024  2000              MOVS     r0,#0
000026  bd70              POP      {r4-r6,pc}
;;;100    
                          ENDP


                          AREA ||area_number.541||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.541||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::IsValid() const
;;;91     
;;;92         template<typename Type> bool FixedLengthList<Type>::IsValid() const
000000  b570              PUSH     {r4-r6,lr}
;;;93         {
000002  4604              MOV      r4,r0
;;;94           if(this->get_size() > this->get_maximumSize()) {
000004  68c5              LDR      r5,[r0,#0xc]
000006  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::get_maximumSize() const
00000a  4285              CMP      r5,r0
00000c  dc0a              BGT      |L547.36|
00000e  6aa0              LDR      r0,[r4,#0x28]
000010  2800              CMP      r0,#0
;;;95             return false;
;;;96           }
;;;97     
;;;98           return ArraySlice<Type>::IsValid();
;;;99         } // bool FixedLengthList<Type>::IsValid() const
000012  bf08              IT       EQ
000014  bd70              POPEQ    {r4-r6,pc}
000016  69a0              LDR      r0,[r4,#0x18]
000018  2800              CMP      r0,#0
00001a  bfa1              ITTTT    GE
00001c  69e0              LDRGE    r0,[r4,#0x1c]
00001e  2800              CMPGE    r0,#0
000020  2001              MOVGE    r0,#1
000022  bd70              POPGE    {r4-r6,pc}
                  |L547.36|
000024  2000              MOVS     r0,#0
000026  bd70              POP      {r4-r6,pc}
;;;100    
                          ENDP


                          AREA ||area_number.548||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.548||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE7SetZeroEv||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE7SetZeroEv, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE7SetZeroEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<int>>::SetZero()
;;;146    
;;;147        template<typename Type> inline s32 FixedLengthList<Type>::SetZero()
000000  b510              PUSH     {r4,lr}
;;;148        {
;;;149          return this->array.SetZero();
000002  3018              ADDS     r0,r0,#0x18
000004  b082              SUB      sp,sp,#8              ;148
000006  6903              LDR      r3,[r0,#0x10]         ;148
000008  b18b              CBZ      r3,|L554.46|
00000a  6801              LDR      r1,[r0,#0]            ;148
00000c  2900              CMP      r1,#0                 ;148
00000e  bfa4              ITT      GE                    ;148
000010  6842              LDRGE    r2,[r0,#4]            ;148
000012  2a00              CMPGE    r2,#0                 ;148
000014  db0b              BLT      |L554.46|
000016  6882              LDR      r2,[r0,#8]            ;148
000018  2000              MOVS     r0,#0                 ;148
00001a  fb01f402          MUL      r4,r1,r2              ;148
00001e  fb003002          MLA      r0,r0,r2,r3           ;148
000022  4621              MOV      r1,r4                 ;148
000024  f7fffffe          BL       __aeabi_memclr4
;;;150        }
000028  b002              ADD      sp,sp,#8
00002a  4620              MOV      r0,r4
00002c  bd10              POP      {r4,pc}
                  |L554.46|
00002e  f2402176          MOV      r1,#0x276
000032  4807              LDR      r0,|L554.80|
000034  4b07              LDR      r3,|L554.84|
000036  e9cd0100          STRD     r0,r1,[sp,#0]
00003a  f5037288          ADD      r2,r3,#0x110
00003e  f1a20118          SUB      r1,r2,#0x18
000042  2005              MOVS     r0,#5
000044  f7fffffe          BL       _Anki_Log
000048  b002              ADD      sp,sp,#8
00004a  2000              MOVS     r0,#0
00004c  bd10              POP      {r4,pc}
;;;151    
                          ENDP

00004e  0000              DCW      0x0000
                  |L554.80|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::SetZero()::__PRETTY_FUNCTION__
                  |L554.84|
                          DCD      ||.constdata||+0x2c

                          AREA ||area_number.555||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE7SetZeroEv, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE7SetZeroEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.555||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIiEEE7SetZeroEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_5PointIiEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L561.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L561.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L561.384|
000044  a25c              ADR      r2,|L561.440|
000046  a160              ADR      r1,|L561.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L561.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  00c0              LSLS     r0,r0,#3
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L561.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L561.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L561.384|
000080  a24d              ADR      r2,|L561.440|
000082  a157              ADR      r1,|L561.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L561.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L561.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L561.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L561.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L561.384|
0000c8  a251              ADR      r2,|L561.528|
0000ca  a156              ADR      r1,|L561.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L561.372|
                  |L561.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L561.384|
0000e0  a258              ADR      r2,|L561.580|
0000e2  a15f              ADR      r1,|L561.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L561.372|
                  |L561.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L561.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L561.384|
000110  a259              ADR      r2,|L561.632|
000112  a144              ADR      r1,|L561.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L561.372|
                  |L561.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00f1              LSLS     r1,r6,#3
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L561.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L561.384|
00015a  a251              ADR      r2,|L561.672|
00015c  a140              ADR      r1,|L561.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L561.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L561.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L561.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L561.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L561.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L561.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L561.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L561.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L561.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L561.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L561.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L561.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L561.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L561.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.562||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.562||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L568.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L568.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.569||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.569||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE7SetZeroEv||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE7SetZeroEv, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE7SetZeroEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::SetZero()
;;;146    
;;;147        template<typename Type> inline s32 FixedLengthList<Type>::SetZero()
000000  b510              PUSH     {r4,lr}
;;;148        {
;;;149          return this->array.SetZero();
000002  3018              ADDS     r0,r0,#0x18
000004  b082              SUB      sp,sp,#8              ;148
000006  6903              LDR      r3,[r0,#0x10]         ;148
000008  b18b              CBZ      r3,|L575.46|
00000a  6801              LDR      r1,[r0,#0]            ;148
00000c  2900              CMP      r1,#0                 ;148
00000e  bfa4              ITT      GE                    ;148
000010  6842              LDRGE    r2,[r0,#4]            ;148
000012  2a00              CMPGE    r2,#0                 ;148
000014  db0b              BLT      |L575.46|
000016  6882              LDR      r2,[r0,#8]            ;148
000018  2000              MOVS     r0,#0                 ;148
00001a  fb01f402          MUL      r4,r1,r2              ;148
00001e  fb003002          MLA      r0,r0,r2,r3           ;148
000022  4621              MOV      r1,r4                 ;148
000024  f7fffffe          BL       __aeabi_memclr
;;;150        }
000028  b002              ADD      sp,sp,#8
00002a  4620              MOV      r0,r4
00002c  bd10              POP      {r4,pc}
                  |L575.46|
00002e  f2402176          MOV      r1,#0x276
000032  4807              LDR      r0,|L575.80|
000034  4b07              LDR      r3,|L575.84|
000036  e9cd0100          STRD     r0,r1,[sp,#0]
00003a  f5037288          ADD      r2,r3,#0x110
00003e  f1a20118          SUB      r1,r2,#0x18
000042  2005              MOVS     r0,#5
000044  f7fffffe          BL       _Anki_Log
000048  b002              ADD      sp,sp,#8
00004a  2000              MOVS     r0,#0
00004c  bd10              POP      {r4,pc}
;;;151    
                          ENDP

00004e  0000              DCW      0x0000
                  |L575.80|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::SetZero()::__PRETTY_FUNCTION__
                  |L575.84|
                          DCD      ||.constdata||+0x2c

                          AREA ||area_number.576||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE7SetZeroEv, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE7SetZeroEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.576||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE7SetZeroEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIbEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<bool>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<bool>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L582.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L582.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L582.384|
000044  a25c              ADR      r2,|L582.440|
000046  a160              ADR      r1,|L582.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L582.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  300f              ADDS     r0,r0,#0xf
000064  f020050f          BIC      r5,r0,#0xf
000068  a804              ADD      r0,sp,#0x10
00006a  e9cd0902          STRD     r0,r9,[sp,#8]
00006e  2d00              CMP      r5,#0
000070  dc0a              BGT      |L582.136|
000072  f240310b          MOV      r1,#0x30b
000076  4859              LDR      r0,|L582.476|
000078  e9cd0100          STRD     r0,r1,[sp,#0]
00007c  a340              ADR      r3,|L582.384|
00007e  a24e              ADR      r2,|L582.440|
000080  a157              ADR      r1,|L582.480|
000082  2005              MOVS     r0,#5
000084  f7fffffe          BL       _Anki_Log
                  |L582.136|
000088  4638              MOV      r0,r7
00008a  2f01              CMP      r7,#1
00008c  bfd8              IT       LE
00008e  2001              MOVLE    r0,#1
000090  60a5              STR      r5,[r4,#8]
000092  4345              MULS     r5,r0,r5
000094  a803              ADD      r0,sp,#0xc
000096  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009a  4602              MOV      r2,r0
00009c  4629              MOV      r1,r5
00009e  4640              MOV      r0,r8
0000a0  9b02              LDR      r3,[sp,#8]
0000a2  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a6  f8cd900c          STR      r9,[sp,#0xc]
0000aa  f8dd8010          LDR      r8,[sp,#0x10]
0000ae  f8df915c          LDR      r9,|L582.524|
0000b2  0005              MOVS     r5,r0
0000b4  d00e              BEQ      |L582.212|
0000b6  f1b80f10          CMP      r8,#0x10
0000ba  d21e              BCS      |L582.250|
0000bc  f2403023          MOV      r0,#0x323
0000c0  e9cd9000          STRD     r9,r0,[sp,#0]
0000c4  a32e              ADR      r3,|L582.384|
0000c6  a252              ADR      r2,|L582.528|
0000c8  a156              ADR      r1,|L582.548|
0000ca  2005              MOVS     r0,#5
0000cc  f7fffffe          BL       _Anki_Log
0000d0  f000b84f          B.W      |L582.370|
                  |L582.212|
0000d4  f240301e          MOV      r0,#0x31e
0000d8  e9cd9000          STRD     r9,r0,[sp,#0]
0000dc  a328              ADR      r3,|L582.384|
0000de  a259              ADR      r2,|L582.580|
0000e0  a15f              ADR      r1,|L582.608|
0000e2  2005              MOVS     r0,#5
0000e4  f7fffffe          BL       _Anki_Log
0000e8  f8c4b000          STR      r11,[r4,#0]
0000ec  f8c4b004          STR      r11,[r4,#4]
0000f0  f8c4b008          STR      r11,[r4,#8]
0000f4  f8c4a010          STR      r10,[r4,#0x10]
0000f8  e03b              B        |L582.370|
                  |L582.250|
0000fa  a803              ADD      r0,sp,#0xc
0000fc  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000100  2800              CMP      r0,#0
000102  d00a              BEQ      |L582.282|
000104  f2403026          MOV      r0,#0x326
000108  e9cd9000          STRD     r9,r0,[sp,#0]
00010c  a31c              ADR      r3,|L582.384|
00010e  a25a              ADR      r2,|L582.632|
000110  a144              ADR      r1,|L582.548|
000112  2005              MOVS     r0,#5
000114  f7fffffe          BL       _Anki_Log
000118  e02b              B        |L582.370|
                  |L582.282|
00011a  9903              LDR      r1,[sp,#0xc]
00011c  e9c41503          STRD     r1,r5,[r4,#0xc]
000120  f105000f          ADD      r0,r5,#0xf
000124  f020000f          BIC      r0,r0,#0xf
000128  e9c47600          STRD     r7,r6,[r4,#0]
00012c  1b40              SUBS     r0,r0,r5
00012e  2e01              CMP      r6,#1
000130  bfd8              IT       LE
000132  2601              MOVLE    r6,#1
000134  f106010f          ADD      r1,r6,#0xf
000138  f021010f          BIC      r1,r1,#0xf
00013c  fb010107          MLA      r1,r1,r7,r0
000140  4541              CMP      r1,r8
000142  bfdc              ITT      LE
000144  1829              ADDLE    r1,r5,r0
000146  6121              STRLE    r1,[r4,#0x10]
000148  dd13              BLE      |L582.370|
00014a  f2403035          MOV      r0,#0x335
00014e  f8cd9000          STR      r9,[sp,#0]
000152  e9cd0101          STRD     r0,r1,[sp,#4]
000156  a30a              ADR      r3,|L582.384|
000158  a251              ADR      r2,|L582.672|
00015a  a141              ADR      r1,|L582.608|
00015c  2005              MOVS     r0,#5
00015e  f7fffffe          BL       _Anki_Log
000162  f8c4b000          STR      r11,[r4,#0]
000166  f8c4b004          STR      r11,[r4,#4]
00016a  f8c4b008          STR      r11,[r4,#8]
00016e  f8c4a010          STR      r10,[r4,#0x10]
                  |L582.370|
000172  b005              ADD      sp,sp,#0x14
000174  4620              MOV      r0,r4
000176  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

00017a  0000              DCW      0x0000
                  |L582.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<bool>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L582.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L582.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L582.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L582.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIbE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<bool>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L582.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L582.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIbE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<bool>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L582.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L582.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L582.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L582.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L582.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L582.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.583||, COMGROUP=_ZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.583||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Rectangle<short>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Rectangle<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L589.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L589.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L589.384|
000044  a25c              ADR      r2,|L589.440|
000046  a160              ADR      r1,|L589.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L589.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  00c0              LSLS     r0,r0,#3
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L589.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L589.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L589.384|
000080  a24d              ADR      r2,|L589.440|
000082  a157              ADR      r1,|L589.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L589.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L589.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L589.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L589.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L589.384|
0000c8  a251              ADR      r2,|L589.528|
0000ca  a156              ADR      r1,|L589.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L589.372|
                  |L589.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L589.384|
0000e0  a258              ADR      r2,|L589.580|
0000e2  a15f              ADR      r1,|L589.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L589.372|
                  |L589.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L589.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L589.384|
000110  a259              ADR      r2,|L589.632|
000112  a144              ADR      r1,|L589.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L589.372|
                  |L589.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00f1              LSLS     r1,r6,#3
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L589.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L589.384|
00015a  a251              ADR      r2,|L589.672|
00015c  a140              ADR      r1,|L589.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L589.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L589.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L589.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L589.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L589.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L589.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L589.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L589.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L589.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L589.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L589.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L589.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L589.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L589.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.590||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.590||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItEC1EtsRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ConnectedComponentsTemplate(unsigned short, short, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  436f6e6e          DCB      0x43,0x6f,0x6e,0x6e
000014  65637465          DCB      0x65,0x63,0x74,0x65
000018  64436f6d          DCB      0x64,0x43,0x6f,0x6d
00001c  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000020  6e747354          DCB      0x6e,0x74,0x73,0x54
000024  656d706c          DCB      0x65,0x6d,0x70,0x6c
000028  6174653c          DCB      0x61,0x74,0x65,0x3c
00002c  54797065          DCB      0x54,0x79,0x70,0x65
000030  3e3a3a43          DCB      0x3e,0x3a,0x3a,0x43
000034  6f6e6e65          DCB      0x6f,0x6e,0x6e,0x65
000038  63746564          DCB      0x63,0x74,0x65,0x64
00003c  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000040  6f6e656e          DCB      0x6f,0x6e,0x65,0x6e
000044  74735465          DCB      0x74,0x73,0x54,0x65
000048  6d706c61          DCB      0x6d,0x70,0x6c,0x61
00004c  74652854          DCB      0x74,0x65,0x28,0x54
000050  7970652c          DCB      0x79,0x70,0x65,0x2c
000054  20736967          DCB      0x20,0x73,0x69,0x67
000058  6e656420          DCB      0x6e,0x65,0x64,0x20
00005c  73686f72          DCB      0x73,0x68,0x6f,0x72
000060  742c2041          DCB      0x74,0x2c,0x20,0x41
000064  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000068  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00006c  65646465          DCB      0x65,0x64,0x64,0x65
000070  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000074  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000078  79537461          DCB      0x79,0x53,0x74,0x61
00007c  636b2026          DCB      0x63,0x6b,0x20,0x26
000080  29205b77          DCB      0x29,0x20,0x5b,0x77
000084  69746820          DCB      0x69,0x74,0x68,0x20
000088  54797065          DCB      0x54,0x79,0x70,0x65
00008c  203d2075          DCB      0x20,0x3d,0x20,0x75
000090  6e736967          DCB      0x6e,0x73,0x69,0x67
000094  6e656420          DCB      0x6e,0x65,0x64,0x20
000098  73686f72          DCB      0x73,0x68,0x6f,0x72
00009c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  45787472          DCB      0x45,0x78,0x74,0x72
000044  61637432          DCB      0x61,0x63,0x74,0x32
000048  64436f6d          DCB      0x64,0x43,0x6f,0x6d
00004c  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000050  6e74735f          DCB      0x6e,0x74,0x73,0x5f
000054  50657252          DCB      0x50,0x65,0x72,0x52
000058  6f775f49          DCB      0x6f,0x77,0x5f,0x49
00005c  6e697469          DCB      0x6e,0x69,0x74,0x69
000060  616c697a          DCB      0x61,0x6c,0x69,0x7a
000064  6528416e          DCB      0x65,0x28,0x41,0x6e
000068  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00006c  456d6265          DCB      0x45,0x6d,0x62,0x65
000070  64646564          DCB      0x64,0x64,0x65,0x64
000074  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
000078  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
00007c  53746163          DCB      0x53,0x74,0x61,0x63
000080  6b20262c          DCB      0x6b,0x20,0x26,0x2c
000084  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000088  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00008c  6d626564          DCB      0x6d,0x62,0x65,0x64
000090  6465643a          DCB      0x64,0x65,0x64,0x3a
000094  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
000098  6f727953          DCB      0x6f,0x72,0x79,0x53
00009c  7461636b          DCB      0x74,0x61,0x63,0x6b
0000a0  20262c20          DCB      0x20,0x26,0x2c,0x20
0000a4  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000a8  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000ac  62656464          DCB      0x62,0x65,0x64,0x64
0000b0  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000b4  4d656d6f          DCB      0x4d,0x65,0x6d,0x6f
0000b8  72795374          DCB      0x72,0x79,0x53,0x74
0000bc  61636b20          DCB      0x61,0x63,0x6b,0x20
0000c0  2629205b          DCB      0x26,0x29,0x20,0x5b
0000c4  77697468          DCB      0x77,0x69,0x74,0x68
0000c8  20547970          DCB      0x20,0x54,0x79,0x70
0000cc  65203d20          DCB      0x65,0x20,0x3d,0x20
0000d0  756e7369          DCB      0x75,0x6e,0x73,0x69
0000d4  676e6564          DCB      0x67,0x6e,0x65,0x64
0000d8  2073686f          DCB      0x20,0x73,0x68,0x6f
0000dc  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisssE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisssE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE34Extract2dComponents_PerRow_NextRowEPKhisssE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  45787472          DCB      0x45,0x78,0x74,0x72
000044  61637432          DCB      0x61,0x63,0x74,0x32
000048  64436f6d          DCB      0x64,0x43,0x6f,0x6d
00004c  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000050  6e74735f          DCB      0x6e,0x74,0x73,0x5f
000054  50657252          DCB      0x50,0x65,0x72,0x52
000058  6f775f4e          DCB      0x6f,0x77,0x5f,0x4e
00005c  65787452          DCB      0x65,0x78,0x74,0x52
000060  6f772863          DCB      0x6f,0x77,0x28,0x63
000064  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000068  20756e73          DCB      0x20,0x75,0x6e,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  64206368          DCB      0x64,0x20,0x63,0x68
000074  6172202a          DCB      0x61,0x72,0x20,0x2a
000078  2c207369          DCB      0x2c,0x20,0x73,0x69
00007c  676e6564          DCB      0x67,0x6e,0x65,0x64
000080  20696e74          DCB      0x20,0x69,0x6e,0x74
000084  2c207369          DCB      0x2c,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  2073686f          DCB      0x20,0x73,0x68,0x6f
000090  72742c20          DCB      0x72,0x74,0x2c,0x20
000094  7369676e          DCB      0x73,0x69,0x67,0x6e
000098  65642073          DCB      0x65,0x64,0x20,0x73
00009c  686f7274          DCB      0x68,0x6f,0x72,0x74
0000a0  2c207369          DCB      0x2c,0x20,0x73,0x69
0000a4  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a8  2073686f          DCB      0x20,0x73,0x68,0x6f
0000ac  72742920          DCB      0x72,0x74,0x29,0x20
0000b0  5b776974          DCB      0x5b,0x77,0x69,0x74
0000b4  68205479          DCB      0x68,0x20,0x54,0x79
0000b8  7065203d          DCB      0x70,0x65,0x20,0x3d
0000bc  20756e73          DCB      0x20,0x75,0x6e,0x73
0000c0  69676e65          DCB      0x69,0x67,0x6e,0x65
0000c4  64207368          DCB      0x64,0x20,0x73,0x68
0000c8  6f72745d          DCB      0x6f,0x72,0x74,0x5d
0000cc  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE35Extract2dComponents_PerRow_FinalizeEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::Extract2dComponents_PerRow_Finalize()::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  45787472          DCB      0x45,0x78,0x74,0x72
000044  61637432          DCB      0x61,0x63,0x74,0x32
000048  64436f6d          DCB      0x64,0x43,0x6f,0x6d
00004c  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000050  6e74735f          DCB      0x6e,0x74,0x73,0x5f
000054  50657252          DCB      0x50,0x65,0x72,0x52
000058  6f775f46          DCB      0x6f,0x77,0x5f,0x46
00005c  696e616c          DCB      0x69,0x6e,0x61,0x6c
000060  697a6528          DCB      0x69,0x7a,0x65,0x28
000064  29205b77          DCB      0x29,0x20,0x5b,0x77
000068  69746820          DCB      0x69,0x74,0x68,0x20
00006c  54797065          DCB      0x54,0x79,0x70,0x65
000070  203d2075          DCB      0x20,0x3d,0x20,0x75
000074  6e736967          DCB      0x6e,0x73,0x69,0x67
000078  6e656420          DCB      0x6e,0x65,0x64,0x20
00007c  73686f72          DCB      0x73,0x68,0x6f,0x72
000080  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE36CompressConnectedComponentSegmentIdsENS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE36CompressConnectedComponentSegmentIdsENS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE36CompressConnectedComponentSegmentIdsENS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  72657373          DCB      0x72,0x65,0x73,0x73
000048  436f6e6e          DCB      0x43,0x6f,0x6e,0x6e
00004c  65637465          DCB      0x65,0x63,0x74,0x65
000050  64436f6d          DCB      0x64,0x43,0x6f,0x6d
000054  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000058  6e745365          DCB      0x6e,0x74,0x53,0x65
00005c  676d656e          DCB      0x67,0x6d,0x65,0x6e
000060  74496473          DCB      0x74,0x49,0x64,0x73
000064  28416e6b          DCB      0x28,0x41,0x6e,0x6b
000068  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00006c  6d626564          DCB      0x6d,0x62,0x65,0x64
000070  6465643a          DCB      0x64,0x65,0x64,0x3a
000074  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
000078  6f727953          DCB      0x6f,0x72,0x79,0x53
00007c  7461636b          DCB      0x74,0x61,0x63,0x6b
000080  29205b77          DCB      0x29,0x20,0x5b,0x77
000084  69746820          DCB      0x69,0x74,0x68,0x20
000088  54797065          DCB      0x54,0x79,0x70,0x65
00008c  203d2075          DCB      0x20,0x3d,0x20,0x75
000090  6e736967          DCB      0x6e,0x73,0x69,0x67
000094  6e656420          DCB      0x6e,0x65,0x64,0x20
000098  73686f72          DCB      0x73,0x68,0x6f,0x72
00009c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE21ComputeComponentSizesERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  75746543          DCB      0x75,0x74,0x65,0x43
000048  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
00004c  6e656e74          DCB      0x6e,0x65,0x6e,0x74
000050  53697a65          DCB      0x53,0x69,0x7a,0x65
000054  7328416e          DCB      0x73,0x28,0x41,0x6e
000058  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00005c  456d6265          DCB      0x45,0x6d,0x62,0x65
000060  64646564          DCB      0x64,0x64,0x65,0x64
000064  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
000068  7865644c          DCB      0x78,0x65,0x64,0x4c
00006c  656e6774          DCB      0x65,0x6e,0x67,0x74
000070  684c6973          DCB      0x68,0x4c,0x69,0x73
000074  743c7369          DCB      0x74,0x3c,0x73,0x69
000078  676e6564          DCB      0x67,0x6e,0x65,0x64
00007c  20696e74          DCB      0x20,0x69,0x6e,0x74
000080  3e202629          DCB      0x3e,0x20,0x26,0x29
000084  205b7769          DCB      0x20,0x5b,0x77,0x69
000088  74682054          DCB      0x74,0x68,0x20,0x54
00008c  79706520          DCB      0x79,0x70,0x65,0x20
000090  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000094  7369676e          DCB      0x73,0x69,0x67,0x6e
000098  65642073          DCB      0x65,0x64,0x20,0x73
00009c  686f7274          DCB      0x68,0x6f,0x72,0x74
0000a0  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentCentroids(Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  75746543          DCB      0x75,0x74,0x65,0x43
000048  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
00004c  6e656e74          DCB      0x6e,0x65,0x6e,0x74
000050  43656e74          DCB      0x43,0x65,0x6e,0x74
000054  726f6964          DCB      0x72,0x6f,0x69,0x64
000058  7328416e          DCB      0x73,0x28,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
00006c  7865644c          DCB      0x78,0x65,0x64,0x4c
000070  656e6774          DCB      0x65,0x6e,0x67,0x74
000074  684c6973          DCB      0x68,0x4c,0x69,0x73
000078  743c416e          DCB      0x74,0x3c,0x41,0x6e
00007c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000080  456d6265          DCB      0x45,0x6d,0x62,0x65
000084  64646564          DCB      0x64,0x64,0x65,0x64
000088  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
00008c  696e743c          DCB      0x69,0x6e,0x74,0x3c
000090  7369676e          DCB      0x73,0x69,0x67,0x6e
000094  65642073          DCB      0x65,0x64,0x20,0x73
000098  686f7274          DCB      0x68,0x6f,0x72,0x74
00009c  3e3e2026          DCB      0x3e,0x3e,0x20,0x26
0000a0  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0000a4  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000a8  456d6265          DCB      0x45,0x6d,0x62,0x65
0000ac  64646564          DCB      0x64,0x64,0x65,0x64
0000b0  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
0000b4  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
0000b8  53746163          DCB      0x53,0x74,0x61,0x63
0000bc  6b29205b          DCB      0x6b,0x29,0x20,0x5b
0000c0  77697468          DCB      0x77,0x69,0x74,0x68
0000c4  20547970          DCB      0x20,0x54,0x79,0x70
0000c8  65203d20          DCB      0x65,0x20,0x3d,0x20
0000cc  756e7369          DCB      0x75,0x6e,0x73,0x69
0000d0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000d4  2073686f          DCB      0x20,0x73,0x68,0x6f
0000d8  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  75746543          DCB      0x75,0x74,0x65,0x43
000048  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
00004c  6e656e74          DCB      0x6e,0x65,0x6e,0x74
000050  426f756e          DCB      0x42,0x6f,0x75,0x6e
000054  64696e67          DCB      0x64,0x69,0x6e,0x67
000058  426f7865          DCB      0x42,0x6f,0x78,0x65
00005c  7328416e          DCB      0x73,0x28,0x41,0x6e
000060  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000064  456d6265          DCB      0x45,0x6d,0x62,0x65
000068  64646564          DCB      0x64,0x64,0x65,0x64
00006c  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
000070  7865644c          DCB      0x78,0x65,0x64,0x4c
000074  656e6774          DCB      0x65,0x6e,0x67,0x74
000078  684c6973          DCB      0x68,0x4c,0x69,0x73
00007c  743c416e          DCB      0x74,0x3c,0x41,0x6e
000080  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000084  456d6265          DCB      0x45,0x6d,0x62,0x65
000088  64646564          DCB      0x64,0x64,0x65,0x64
00008c  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000090  6374616e          DCB      0x63,0x74,0x61,0x6e
000094  676c653c          DCB      0x67,0x6c,0x65,0x3c
000098  7369676e          DCB      0x73,0x69,0x67,0x6e
00009c  65642073          DCB      0x65,0x64,0x20,0x73
0000a0  686f7274          DCB      0x68,0x6f,0x72,0x74
0000a4  3e3e2026          DCB      0x3e,0x3e,0x20,0x26
0000a8  29205b77          DCB      0x29,0x20,0x5b,0x77
0000ac  69746820          DCB      0x69,0x74,0x68,0x20
0000b0  54797065          DCB      0x54,0x79,0x70,0x65
0000b4  203d2075          DCB      0x20,0x3d,0x20,0x75
0000b8  6e736967          DCB      0x6e,0x73,0x69,0x67
0000bc  6e656420          DCB      0x6e,0x65,0x64,0x20
0000c0  73686f72          DCB      0x73,0x68,0x6f,0x72
0000c4  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::ComputeNumComponentSegmentsForEachId(Anki::Embedded::FixedLengthList<int>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  7574654e          DCB      0x75,0x74,0x65,0x4e
000048  756d436f          DCB      0x75,0x6d,0x43,0x6f
00004c  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
000050  656e7453          DCB      0x65,0x6e,0x74,0x53
000054  65676d65          DCB      0x65,0x67,0x6d,0x65
000058  6e747346          DCB      0x6e,0x74,0x73,0x46
00005c  6f724561          DCB      0x6f,0x72,0x45,0x61
000060  63684964          DCB      0x63,0x68,0x49,0x64
000064  28416e6b          DCB      0x28,0x41,0x6e,0x6b
000068  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00006c  6d626564          DCB      0x6d,0x62,0x65,0x64
000070  6465643a          DCB      0x64,0x65,0x64,0x3a
000074  3a466978          DCB      0x3a,0x46,0x69,0x78
000078  65644c65          DCB      0x65,0x64,0x4c,0x65
00007c  6e677468          DCB      0x6e,0x67,0x74,0x68
000080  4c697374          DCB      0x4c,0x69,0x73,0x74
000084  3c736967          DCB      0x3c,0x73,0x69,0x67
000088  6e656420          DCB      0x6e,0x65,0x64,0x20
00008c  696e743e          DCB      0x69,0x6e,0x74,0x3e
000090  20262920          DCB      0x20,0x26,0x29,0x20
000094  5b776974          DCB      0x5b,0x77,0x69,0x74
000098  68205479          DCB      0x68,0x20,0x54,0x79
00009c  7065203d          DCB      0x70,0x65,0x20,0x3d
0000a0  20756e73          DCB      0x20,0x75,0x6e,0x73
0000a4  69676e65          DCB      0x69,0x67,0x6e,0x65
0000a8  64207368          DCB      0x64,0x20,0x73,0x68
0000ac  6f72745d          DCB      0x6f,0x72,0x74,0x5d
0000b0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  496e7661          DCB      0x49,0x6e,0x76,0x61
000044  6c696461          DCB      0x6c,0x69,0x64,0x61
000048  7465536d          DCB      0x74,0x65,0x53,0x6d
00004c  616c6c4f          DCB      0x61,0x6c,0x6c,0x4f
000050  724c6172          DCB      0x72,0x4c,0x61,0x72
000054  6765436f          DCB      0x67,0x65,0x43,0x6f
000058  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00005c  656e7473          DCB      0x65,0x6e,0x74,0x73
000060  28736967          DCB      0x28,0x73,0x69,0x67
000064  6e656420          DCB      0x6e,0x65,0x64,0x20
000068  696e742c          DCB      0x69,0x6e,0x74,0x2c
00006c  20736967          DCB      0x20,0x73,0x69,0x67
000070  6e656420          DCB      0x6e,0x65,0x64,0x20
000074  696e742c          DCB      0x69,0x6e,0x74,0x2c
000078  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00007c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000080  6d626564          DCB      0x6d,0x62,0x65,0x64
000084  6465643a          DCB      0x64,0x65,0x64,0x3a
000088  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00008c  6f727953          DCB      0x6f,0x72,0x79,0x53
000090  7461636b          DCB      0x74,0x61,0x63,0x6b
000094  29205b77          DCB      0x29,0x20,0x5b,0x77
000098  69746820          DCB      0x69,0x74,0x68,0x20
00009c  54797065          DCB      0x54,0x79,0x70,0x65
0000a0  203d2075          DCB      0x20,0x3d,0x20,0x75
0000a4  6e736967          DCB      0x6e,0x73,0x69,0x67
0000a8  6e656420          DCB      0x6e,0x65,0x64,0x20
0000ac  73686f72          DCB      0x73,0x68,0x6f,0x72
0000b0  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateItE33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateItE33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateItE33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<unsigned short>::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  496e7661          DCB      0x49,0x6e,0x76,0x61
000044  6c696461          DCB      0x6c,0x69,0x64,0x61
000048  7465536f          DCB      0x74,0x65,0x53,0x6f
00004c  6c69644f          DCB      0x6c,0x69,0x64,0x4f
000050  72537061          DCB      0x72,0x53,0x70,0x61
000054  72736543          DCB      0x72,0x73,0x65,0x43
000058  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
00005c  6e656e74          DCB      0x6e,0x65,0x6e,0x74
000060  73287369          DCB      0x73,0x28,0x73,0x69
000064  676e6564          DCB      0x67,0x6e,0x65,0x64
000068  20696e74          DCB      0x20,0x69,0x6e,0x74
00006c  2c207369          DCB      0x2c,0x20,0x73,0x69
000070  676e6564          DCB      0x67,0x6e,0x65,0x64
000074  20696e74          DCB      0x20,0x69,0x6e,0x74
000078  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00007c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000080  456d6265          DCB      0x45,0x6d,0x62,0x65
000084  64646564          DCB      0x64,0x64,0x65,0x64
000088  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
00008c  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
000090  53746163          DCB      0x53,0x74,0x61,0x63
000094  6b29205b          DCB      0x6b,0x29,0x20,0x5b
000098  77697468          DCB      0x77,0x69,0x74,0x68
00009c  20547970          DCB      0x20,0x54,0x79,0x70
0000a0  65203d20          DCB      0x65,0x20,0x3d,0x20
0000a4  756e7369          DCB      0x75,0x6e,0x73,0x69
0000a8  676e6564          DCB      0x67,0x6e,0x65,0x64
0000ac  2073686f          DCB      0x20,0x73,0x68,0x6f
0000b0  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000098  6e6e6563          DCB      0x6e,0x6e,0x65,0x63
00009c  74656443          DCB      0x74,0x65,0x64,0x43
0000a0  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
0000a4  6e656e74          DCB      0x6e,0x65,0x6e,0x74
0000a8  5365676d          DCB      0x53,0x65,0x67,0x6d
0000ac  656e743c          DCB      0x65,0x6e,0x74,0x3c
0000b0  756e7369          DCB      0x75,0x6e,0x73,0x69
0000b4  676e6564          DCB      0x67,0x6e,0x65,0x64
0000b8  2073686f          DCB      0x20,0x73,0x68,0x6f
0000bc  72743e5d          DCB      0x72,0x74,0x3e,0x5d
0000c0  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE5PrintEPKciiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE5PrintEPKciiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE5PrintEPKciiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::Print(const char*, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7428          DCB      0x69,0x6e,0x74,0x28
000030  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000034  74206368          DCB      0x74,0x20,0x63,0x68
000038  6172202a          DCB      0x61,0x72,0x20,0x2a
00003c  2c207369          DCB      0x2c,0x20,0x73,0x69
000040  676e6564          DCB      0x67,0x6e,0x65,0x64
000044  20696e74          DCB      0x20,0x69,0x6e,0x74
000048  2c207369          DCB      0x2c,0x20,0x73,0x69
00004c  676e6564          DCB      0x67,0x6e,0x65,0x64
000050  20696e74          DCB      0x20,0x69,0x6e,0x74
000054  2c207369          DCB      0x2c,0x20,0x73,0x69
000058  676e6564          DCB      0x67,0x6e,0x65,0x64
00005c  20696e74          DCB      0x20,0x69,0x6e,0x74
000060  2c207369          DCB      0x2c,0x20,0x73,0x69
000064  676e6564          DCB      0x67,0x6e,0x65,0x64
000068  20696e74          DCB      0x20,0x69,0x6e,0x74
00006c  2920636f          DCB      0x29,0x20,0x63,0x6f
000070  6e737420          DCB      0x6e,0x73,0x74,0x20
000074  5b776974          DCB      0x5b,0x77,0x69,0x74
000078  68205479          DCB      0x68,0x20,0x54,0x79
00007c  7065203d          DCB      0x70,0x65,0x20,0x3d
000080  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000084  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000088  6d626564          DCB      0x6d,0x62,0x65,0x64
00008c  6465643a          DCB      0x64,0x65,0x64,0x3a
000090  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000094  6e656374          DCB      0x6e,0x65,0x63,0x74
000098  6564436f          DCB      0x65,0x64,0x43,0x6f
00009c  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
0000a0  656e7453          DCB      0x65,0x6e,0x74,0x53
0000a4  65676d65          DCB      0x65,0x67,0x6d,0x65
0000a8  6e743c75          DCB      0x6e,0x74,0x3c,0x75
0000ac  6e736967          DCB      0x6e,0x73,0x69,0x67
0000b0  6e656420          DCB      0x6e,0x65,0x64,0x20
0000b4  73686f72          DCB      0x73,0x68,0x6f,0x72
0000b8  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  436f6e6e          DCB      0x43,0x6f,0x6e,0x6e
0000cc  65637465          DCB      0x65,0x63,0x74,0x65
0000d0  64436f6d          DCB      0x64,0x43,0x6f,0x6d
0000d4  706f6e65          DCB      0x70,0x6f,0x6e,0x65
0000d8  6e745365          DCB      0x6e,0x74,0x53,0x65
0000dc  676d656e          DCB      0x67,0x6d,0x65,0x6e
0000e0  743c756e          DCB      0x74,0x3c,0x75,0x6e
0000e4  7369676e          DCB      0x73,0x69,0x67,0x6e
0000e8  65642073          DCB      0x65,0x64,0x20,0x73
0000ec  686f7274          DCB      0x68,0x6f,0x72,0x74
0000f0  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentItEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a43          DCB      0x64,0x3a,0x3a,0x43
0000a4  6f6e6e65          DCB      0x6f,0x6e,0x6e,0x65
0000a8  63746564          DCB      0x63,0x74,0x65,0x64
0000ac  436f6d70          DCB      0x43,0x6f,0x6d,0x70
0000b0  6f6e656e          DCB      0x6f,0x6e,0x65,0x6e
0000b4  74536567          DCB      0x74,0x53,0x65,0x67
0000b8  6d656e74          DCB      0x6d,0x65,0x6e,0x74
0000bc  3c756e73          DCB      0x3c,0x75,0x6e,0x73
0000c0  69676e65          DCB      0x69,0x67,0x6e,0x65
0000c4  64207368          DCB      0x64,0x20,0x73,0x68
0000c8  6f72743e          DCB      0x6f,0x72,0x74,0x3e
0000cc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642073          DCB      0x65,0x64,0x20,0x73
000090  686f7274          DCB      0x68,0x6f,0x72,0x74
000094  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItE7SetZeroEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItE7SetZeroEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::SetZero()::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  5365745a          DCB      0x53,0x65,0x74,0x5a
00002c  65726f28          DCB      0x65,0x72,0x6f,0x28
000030  29205b77          DCB      0x29,0x20,0x5b,0x77
000034  69746820          DCB      0x69,0x74,0x68,0x20
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  203d2075          DCB      0x20,0x3d,0x20,0x75
000040  6e736967          DCB      0x6e,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  73686f72          DCB      0x73,0x68,0x6f,0x72
00004c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  2073686f          DCB      0x20,0x73,0x68,0x6f
0000c4  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  73686f72          DCB      0x73,0x68,0x6f,0x72
0000a0  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1EisRNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1EisRNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiEC1EisRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ConnectedComponentsTemplate(int, short, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  436f6e6e          DCB      0x43,0x6f,0x6e,0x6e
000014  65637465          DCB      0x65,0x63,0x74,0x65
000018  64436f6d          DCB      0x64,0x43,0x6f,0x6d
00001c  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000020  6e747354          DCB      0x6e,0x74,0x73,0x54
000024  656d706c          DCB      0x65,0x6d,0x70,0x6c
000028  6174653c          DCB      0x61,0x74,0x65,0x3c
00002c  54797065          DCB      0x54,0x79,0x70,0x65
000030  3e3a3a43          DCB      0x3e,0x3a,0x3a,0x43
000034  6f6e6e65          DCB      0x6f,0x6e,0x6e,0x65
000038  63746564          DCB      0x63,0x74,0x65,0x64
00003c  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000040  6f6e656e          DCB      0x6f,0x6e,0x65,0x6e
000044  74735465          DCB      0x74,0x73,0x54,0x65
000048  6d706c61          DCB      0x6d,0x70,0x6c,0x61
00004c  74652854          DCB      0x74,0x65,0x28,0x54
000050  7970652c          DCB      0x79,0x70,0x65,0x2c
000054  20736967          DCB      0x20,0x73,0x69,0x67
000058  6e656420          DCB      0x6e,0x65,0x64,0x20
00005c  73686f72          DCB      0x73,0x68,0x6f,0x72
000060  742c2041          DCB      0x74,0x2c,0x20,0x41
000064  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000068  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00006c  65646465          DCB      0x65,0x64,0x64,0x65
000070  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000074  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000078  79537461          DCB      0x79,0x53,0x74,0x61
00007c  636b2026          DCB      0x63,0x6b,0x20,0x26
000080  29205b77          DCB      0x29,0x20,0x5b,0x77
000084  69746820          DCB      0x69,0x74,0x68,0x20
000088  54797065          DCB      0x54,0x79,0x70,0x65
00008c  203d2073          DCB      0x20,0x3d,0x20,0x73
000090  69676e65          DCB      0x69,0x67,0x6e,0x65
000094  6420696e          DCB      0x64,0x20,0x69,0x6e
000098  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE37Extract2dComponents_PerRow_InitializeERNS0_11MemoryStackES4_S4_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Initialize(Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  45787472          DCB      0x45,0x78,0x74,0x72
000044  61637432          DCB      0x61,0x63,0x74,0x32
000048  64436f6d          DCB      0x64,0x43,0x6f,0x6d
00004c  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000050  6e74735f          DCB      0x6e,0x74,0x73,0x5f
000054  50657252          DCB      0x50,0x65,0x72,0x52
000058  6f775f49          DCB      0x6f,0x77,0x5f,0x49
00005c  6e697469          DCB      0x6e,0x69,0x74,0x69
000060  616c697a          DCB      0x61,0x6c,0x69,0x7a
000064  6528416e          DCB      0x65,0x28,0x41,0x6e
000068  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00006c  456d6265          DCB      0x45,0x6d,0x62,0x65
000070  64646564          DCB      0x64,0x64,0x65,0x64
000074  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
000078  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
00007c  53746163          DCB      0x53,0x74,0x61,0x63
000080  6b20262c          DCB      0x6b,0x20,0x26,0x2c
000084  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000088  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00008c  6d626564          DCB      0x6d,0x62,0x65,0x64
000090  6465643a          DCB      0x64,0x65,0x64,0x3a
000094  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
000098  6f727953          DCB      0x6f,0x72,0x79,0x53
00009c  7461636b          DCB      0x74,0x61,0x63,0x6b
0000a0  20262c20          DCB      0x20,0x26,0x2c,0x20
0000a4  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000a8  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000ac  62656464          DCB      0x62,0x65,0x64,0x64
0000b0  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000b4  4d656d6f          DCB      0x4d,0x65,0x6d,0x6f
0000b8  72795374          DCB      0x72,0x79,0x53,0x74
0000bc  61636b20          DCB      0x61,0x63,0x6b,0x20
0000c0  2629205b          DCB      0x26,0x29,0x20,0x5b
0000c4  77697468          DCB      0x77,0x69,0x74,0x68
0000c8  20547970          DCB      0x20,0x54,0x79,0x70
0000cc  65203d20          DCB      0x65,0x20,0x3d,0x20
0000d0  7369676e          DCB      0x73,0x69,0x67,0x6e
0000d4  65642069          DCB      0x65,0x64,0x20,0x69
0000d8  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisssE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisssE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE34Extract2dComponents_PerRow_NextRowEPKhisssE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_NextRow(const unsigned char*, int, short, short, short)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  45787472          DCB      0x45,0x78,0x74,0x72
000044  61637432          DCB      0x61,0x63,0x74,0x32
000048  64436f6d          DCB      0x64,0x43,0x6f,0x6d
00004c  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000050  6e74735f          DCB      0x6e,0x74,0x73,0x5f
000054  50657252          DCB      0x50,0x65,0x72,0x52
000058  6f775f4e          DCB      0x6f,0x77,0x5f,0x4e
00005c  65787452          DCB      0x65,0x78,0x74,0x52
000060  6f772863          DCB      0x6f,0x77,0x28,0x63
000064  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000068  20756e73          DCB      0x20,0x75,0x6e,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  64206368          DCB      0x64,0x20,0x63,0x68
000074  6172202a          DCB      0x61,0x72,0x20,0x2a
000078  2c207369          DCB      0x2c,0x20,0x73,0x69
00007c  676e6564          DCB      0x67,0x6e,0x65,0x64
000080  20696e74          DCB      0x20,0x69,0x6e,0x74
000084  2c207369          DCB      0x2c,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  2073686f          DCB      0x20,0x73,0x68,0x6f
000090  72742c20          DCB      0x72,0x74,0x2c,0x20
000094  7369676e          DCB      0x73,0x69,0x67,0x6e
000098  65642073          DCB      0x65,0x64,0x20,0x73
00009c  686f7274          DCB      0x68,0x6f,0x72,0x74
0000a0  2c207369          DCB      0x2c,0x20,0x73,0x69
0000a4  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a8  2073686f          DCB      0x20,0x73,0x68,0x6f
0000ac  72742920          DCB      0x72,0x74,0x29,0x20
0000b0  5b776974          DCB      0x5b,0x77,0x69,0x74
0000b4  68205479          DCB      0x68,0x20,0x54,0x79
0000b8  7065203d          DCB      0x70,0x65,0x20,0x3d
0000bc  20736967          DCB      0x20,0x73,0x69,0x67
0000c0  6e656420          DCB      0x6e,0x65,0x64,0x20
0000c4  696e745d          DCB      0x69,0x6e,0x74,0x5d
0000c8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE35Extract2dComponents_PerRow_FinalizeEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::Extract2dComponents_PerRow_Finalize()::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  45787472          DCB      0x45,0x78,0x74,0x72
000044  61637432          DCB      0x61,0x63,0x74,0x32
000048  64436f6d          DCB      0x64,0x43,0x6f,0x6d
00004c  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000050  6e74735f          DCB      0x6e,0x74,0x73,0x5f
000054  50657252          DCB      0x50,0x65,0x72,0x52
000058  6f775f46          DCB      0x6f,0x77,0x5f,0x46
00005c  696e616c          DCB      0x69,0x6e,0x61,0x6c
000060  697a6528          DCB      0x69,0x7a,0x65,0x28
000064  29205b77          DCB      0x29,0x20,0x5b,0x77
000068  69746820          DCB      0x69,0x74,0x68,0x20
00006c  54797065          DCB      0x54,0x79,0x70,0x65
000070  203d2073          DCB      0x20,0x3d,0x20,0x73
000074  69676e65          DCB      0x69,0x67,0x6e,0x65
000078  6420696e          DCB      0x64,0x20,0x69,0x6e
00007c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE36CompressConnectedComponentSegmentIdsENS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE36CompressConnectedComponentSegmentIdsENS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE36CompressConnectedComponentSegmentIdsENS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  72657373          DCB      0x72,0x65,0x73,0x73
000048  436f6e6e          DCB      0x43,0x6f,0x6e,0x6e
00004c  65637465          DCB      0x65,0x63,0x74,0x65
000050  64436f6d          DCB      0x64,0x43,0x6f,0x6d
000054  706f6e65          DCB      0x70,0x6f,0x6e,0x65
000058  6e745365          DCB      0x6e,0x74,0x53,0x65
00005c  676d656e          DCB      0x67,0x6d,0x65,0x6e
000060  74496473          DCB      0x74,0x49,0x64,0x73
000064  28416e6b          DCB      0x28,0x41,0x6e,0x6b
000068  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00006c  6d626564          DCB      0x6d,0x62,0x65,0x64
000070  6465643a          DCB      0x64,0x65,0x64,0x3a
000074  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
000078  6f727953          DCB      0x6f,0x72,0x79,0x53
00007c  7461636b          DCB      0x74,0x61,0x63,0x6b
000080  29205b77          DCB      0x29,0x20,0x5b,0x77
000084  69746820          DCB      0x69,0x74,0x68,0x20
000088  54797065          DCB      0x54,0x79,0x70,0x65
00008c  203d2073          DCB      0x20,0x3d,0x20,0x73
000090  69676e65          DCB      0x69,0x67,0x6e,0x65
000094  6420696e          DCB      0x64,0x20,0x69,0x6e
000098  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE21ComputeComponentSizesERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentSizes(Anki::Embedded::FixedLengthList<int>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  75746543          DCB      0x75,0x74,0x65,0x43
000048  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
00004c  6e656e74          DCB      0x6e,0x65,0x6e,0x74
000050  53697a65          DCB      0x53,0x69,0x7a,0x65
000054  7328416e          DCB      0x73,0x28,0x41,0x6e
000058  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00005c  456d6265          DCB      0x45,0x6d,0x62,0x65
000060  64646564          DCB      0x64,0x64,0x65,0x64
000064  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
000068  7865644c          DCB      0x78,0x65,0x64,0x4c
00006c  656e6774          DCB      0x65,0x6e,0x67,0x74
000070  684c6973          DCB      0x68,0x4c,0x69,0x73
000074  743c7369          DCB      0x74,0x3c,0x73,0x69
000078  676e6564          DCB      0x67,0x6e,0x65,0x64
00007c  20696e74          DCB      0x20,0x69,0x6e,0x74
000080  3e202629          DCB      0x3e,0x20,0x26,0x29
000084  205b7769          DCB      0x20,0x5b,0x77,0x69
000088  74682054          DCB      0x74,0x68,0x20,0x54
00008c  79706520          DCB      0x79,0x70,0x65,0x20
000090  3d207369          DCB      0x3d,0x20,0x73,0x69
000094  676e6564          DCB      0x67,0x6e,0x65,0x64
000098  20696e74          DCB      0x20,0x69,0x6e,0x74
00009c  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE25ComputeComponentCentroidsERNS0_15FixedLengthListINS0_5PointIsEEEENS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentCentroids(Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  75746543          DCB      0x75,0x74,0x65,0x43
000048  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
00004c  6e656e74          DCB      0x6e,0x65,0x6e,0x74
000050  43656e74          DCB      0x43,0x65,0x6e,0x74
000054  726f6964          DCB      0x72,0x6f,0x69,0x64
000058  7328416e          DCB      0x73,0x28,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
00006c  7865644c          DCB      0x78,0x65,0x64,0x4c
000070  656e6774          DCB      0x65,0x6e,0x67,0x74
000074  684c6973          DCB      0x68,0x4c,0x69,0x73
000078  743c416e          DCB      0x74,0x3c,0x41,0x6e
00007c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000080  456d6265          DCB      0x45,0x6d,0x62,0x65
000084  64646564          DCB      0x64,0x64,0x65,0x64
000088  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
00008c  696e743c          DCB      0x69,0x6e,0x74,0x3c
000090  7369676e          DCB      0x73,0x69,0x67,0x6e
000094  65642073          DCB      0x65,0x64,0x20,0x73
000098  686f7274          DCB      0x68,0x6f,0x72,0x74
00009c  3e3e2026          DCB      0x3e,0x3e,0x20,0x26
0000a0  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0000a4  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000a8  456d6265          DCB      0x45,0x6d,0x62,0x65
0000ac  64646564          DCB      0x64,0x64,0x65,0x64
0000b0  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
0000b4  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
0000b8  53746163          DCB      0x53,0x74,0x61,0x63
0000bc  6b29205b          DCB      0x6b,0x29,0x20,0x5b
0000c0  77697468          DCB      0x77,0x69,0x74,0x68
0000c4  20547970          DCB      0x20,0x54,0x79,0x70
0000c8  65203d20          DCB      0x65,0x20,0x3d,0x20
0000cc  7369676e          DCB      0x73,0x69,0x67,0x6e
0000d0  65642069          DCB      0x65,0x64,0x20,0x69
0000d4  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE29ComputeComponentBoundingBoxesERNS0_15FixedLengthListINS0_9RectangleIsEEEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeComponentBoundingBoxes(Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<short>>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  75746543          DCB      0x75,0x74,0x65,0x43
000048  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
00004c  6e656e74          DCB      0x6e,0x65,0x6e,0x74
000050  426f756e          DCB      0x42,0x6f,0x75,0x6e
000054  64696e67          DCB      0x64,0x69,0x6e,0x67
000058  426f7865          DCB      0x42,0x6f,0x78,0x65
00005c  7328416e          DCB      0x73,0x28,0x41,0x6e
000060  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000064  456d6265          DCB      0x45,0x6d,0x62,0x65
000068  64646564          DCB      0x64,0x64,0x65,0x64
00006c  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
000070  7865644c          DCB      0x78,0x65,0x64,0x4c
000074  656e6774          DCB      0x65,0x6e,0x67,0x74
000078  684c6973          DCB      0x68,0x4c,0x69,0x73
00007c  743c416e          DCB      0x74,0x3c,0x41,0x6e
000080  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000084  456d6265          DCB      0x45,0x6d,0x62,0x65
000088  64646564          DCB      0x64,0x64,0x65,0x64
00008c  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000090  6374616e          DCB      0x63,0x74,0x61,0x6e
000094  676c653c          DCB      0x67,0x6c,0x65,0x3c
000098  7369676e          DCB      0x73,0x69,0x67,0x6e
00009c  65642073          DCB      0x65,0x64,0x20,0x73
0000a0  686f7274          DCB      0x68,0x6f,0x72,0x74
0000a4  3e3e2026          DCB      0x3e,0x3e,0x20,0x26
0000a8  29205b77          DCB      0x29,0x20,0x5b,0x77
0000ac  69746820          DCB      0x69,0x74,0x68,0x20
0000b0  54797065          DCB      0x54,0x79,0x70,0x65
0000b4  203d2073          DCB      0x20,0x3d,0x20,0x73
0000b8  69676e65          DCB      0x69,0x67,0x6e,0x65
0000bc  6420696e          DCB      0x64,0x20,0x69,0x6e
0000c0  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE36ComputeNumComponentSegmentsForEachIdERNS0_15FixedLengthListIiEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::ComputeNumComponentSegmentsForEachId(Anki::Embedded::FixedLengthList<int>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  436f6d70          DCB      0x43,0x6f,0x6d,0x70
000044  7574654e          DCB      0x75,0x74,0x65,0x4e
000048  756d436f          DCB      0x75,0x6d,0x43,0x6f
00004c  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
000050  656e7453          DCB      0x65,0x6e,0x74,0x53
000054  65676d65          DCB      0x65,0x67,0x6d,0x65
000058  6e747346          DCB      0x6e,0x74,0x73,0x46
00005c  6f724561          DCB      0x6f,0x72,0x45,0x61
000060  63684964          DCB      0x63,0x68,0x49,0x64
000064  28416e6b          DCB      0x28,0x41,0x6e,0x6b
000068  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00006c  6d626564          DCB      0x6d,0x62,0x65,0x64
000070  6465643a          DCB      0x64,0x65,0x64,0x3a
000074  3a466978          DCB      0x3a,0x46,0x69,0x78
000078  65644c65          DCB      0x65,0x64,0x4c,0x65
00007c  6e677468          DCB      0x6e,0x67,0x74,0x68
000080  4c697374          DCB      0x4c,0x69,0x73,0x74
000084  3c736967          DCB      0x3c,0x73,0x69,0x67
000088  6e656420          DCB      0x6e,0x65,0x64,0x20
00008c  696e743e          DCB      0x69,0x6e,0x74,0x3e
000090  20262920          DCB      0x20,0x26,0x29,0x20
000094  5b776974          DCB      0x5b,0x77,0x69,0x74
000098  68205479          DCB      0x68,0x20,0x54,0x79
00009c  7065203d          DCB      0x70,0x65,0x20,0x3d
0000a0  20736967          DCB      0x20,0x73,0x69,0x67
0000a4  6e656420          DCB      0x6e,0x65,0x64,0x20
0000a8  696e745d          DCB      0x69,0x6e,0x74,0x5d
0000ac  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  496e7661          DCB      0x49,0x6e,0x76,0x61
000044  6c696461          DCB      0x6c,0x69,0x64,0x61
000048  7465536d          DCB      0x74,0x65,0x53,0x6d
00004c  616c6c4f          DCB      0x61,0x6c,0x6c,0x4f
000050  724c6172          DCB      0x72,0x4c,0x61,0x72
000054  6765436f          DCB      0x67,0x65,0x43,0x6f
000058  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00005c  656e7473          DCB      0x65,0x6e,0x74,0x73
000060  28736967          DCB      0x28,0x73,0x69,0x67
000064  6e656420          DCB      0x6e,0x65,0x64,0x20
000068  696e742c          DCB      0x69,0x6e,0x74,0x2c
00006c  20736967          DCB      0x20,0x73,0x69,0x67
000070  6e656420          DCB      0x6e,0x65,0x64,0x20
000074  696e742c          DCB      0x69,0x6e,0x74,0x2c
000078  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00007c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000080  6d626564          DCB      0x6d,0x62,0x65,0x64
000084  6465643a          DCB      0x64,0x65,0x64,0x3a
000088  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00008c  6f727953          DCB      0x6f,0x72,0x79,0x53
000090  7461636b          DCB      0x74,0x61,0x63,0x6b
000094  29205b77          DCB      0x29,0x20,0x5b,0x77
000098  69746820          DCB      0x69,0x74,0x68,0x20
00009c  54797065          DCB      0x54,0x79,0x70,0x65
0000a0  203d2073          DCB      0x20,0x3d,0x20,0x73
0000a4  69676e65          DCB      0x69,0x67,0x6e,0x65
0000a8  6420696e          DCB      0x64,0x20,0x69,0x6e
0000ac  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded27ConnectedComponentsTemplateIiE33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ConnectedComponentsTemplate<int>::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000020  6e656374          DCB      0x6e,0x65,0x63,0x74
000024  6564436f          DCB      0x65,0x64,0x43,0x6f
000028  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00002c  656e7473          DCB      0x65,0x6e,0x74,0x73
000030  54656d70          DCB      0x54,0x65,0x6d,0x70
000034  6c617465          DCB      0x6c,0x61,0x74,0x65
000038  3c547970          DCB      0x3c,0x54,0x79,0x70
00003c  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000040  496e7661          DCB      0x49,0x6e,0x76,0x61
000044  6c696461          DCB      0x6c,0x69,0x64,0x61
000048  7465536f          DCB      0x74,0x65,0x53,0x6f
00004c  6c69644f          DCB      0x6c,0x69,0x64,0x4f
000050  72537061          DCB      0x72,0x53,0x70,0x61
000054  72736543          DCB      0x72,0x73,0x65,0x43
000058  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
00005c  6e656e74          DCB      0x6e,0x65,0x6e,0x74
000060  73287369          DCB      0x73,0x28,0x73,0x69
000064  676e6564          DCB      0x67,0x6e,0x65,0x64
000068  20696e74          DCB      0x20,0x69,0x6e,0x74
00006c  2c207369          DCB      0x2c,0x20,0x73,0x69
000070  676e6564          DCB      0x67,0x6e,0x65,0x64
000074  20696e74          DCB      0x20,0x69,0x6e,0x74
000078  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00007c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000080  456d6265          DCB      0x45,0x6d,0x62,0x65
000084  64646564          DCB      0x64,0x64,0x65,0x64
000088  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
00008c  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
000090  53746163          DCB      0x53,0x74,0x61,0x63
000094  6b29205b          DCB      0x6b,0x29,0x20,0x5b
000098  77697468          DCB      0x77,0x69,0x74,0x68
00009c  20547970          DCB      0x20,0x54,0x79,0x70
0000a0  65203d20          DCB      0x65,0x20,0x3d,0x20
0000a4  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a8  65642069          DCB      0x65,0x64,0x20,0x69
0000ac  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000098  6e6e6563          DCB      0x6e,0x6e,0x65,0x63
00009c  74656443          DCB      0x74,0x65,0x64,0x43
0000a0  6f6d706f          DCB      0x6f,0x6d,0x70,0x6f
0000a4  6e656e74          DCB      0x6e,0x65,0x6e,0x74
0000a8  5365676d          DCB      0x53,0x65,0x67,0x6d
0000ac  656e743c          DCB      0x65,0x6e,0x74,0x3c
0000b0  7369676e          DCB      0x73,0x69,0x67,0x6e
0000b4  65642069          DCB      0x65,0x64,0x20,0x69
0000b8  6e743e5d          DCB      0x6e,0x74,0x3e,0x5d
0000bc  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE5PrintEPKciiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE5PrintEPKciiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE5PrintEPKciiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::Print(const char*, int, int, int, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00002c  696e7428          DCB      0x69,0x6e,0x74,0x28
000030  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000034  74206368          DCB      0x74,0x20,0x63,0x68
000038  6172202a          DCB      0x61,0x72,0x20,0x2a
00003c  2c207369          DCB      0x2c,0x20,0x73,0x69
000040  676e6564          DCB      0x67,0x6e,0x65,0x64
000044  20696e74          DCB      0x20,0x69,0x6e,0x74
000048  2c207369          DCB      0x2c,0x20,0x73,0x69
00004c  676e6564          DCB      0x67,0x6e,0x65,0x64
000050  20696e74          DCB      0x20,0x69,0x6e,0x74
000054  2c207369          DCB      0x2c,0x20,0x73,0x69
000058  676e6564          DCB      0x67,0x6e,0x65,0x64
00005c  20696e74          DCB      0x20,0x69,0x6e,0x74
000060  2c207369          DCB      0x2c,0x20,0x73,0x69
000064  676e6564          DCB      0x67,0x6e,0x65,0x64
000068  20696e74          DCB      0x20,0x69,0x6e,0x74
00006c  2920636f          DCB      0x29,0x20,0x63,0x6f
000070  6e737420          DCB      0x6e,0x73,0x74,0x20
000074  5b776974          DCB      0x5b,0x77,0x69,0x74
000078  68205479          DCB      0x68,0x20,0x54,0x79
00007c  7065203d          DCB      0x70,0x65,0x20,0x3d
000080  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000084  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000088  6d626564          DCB      0x6d,0x62,0x65,0x64
00008c  6465643a          DCB      0x64,0x65,0x64,0x3a
000090  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000094  6e656374          DCB      0x6e,0x65,0x63,0x74
000098  6564436f          DCB      0x65,0x64,0x43,0x6f
00009c  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
0000a0  656e7453          DCB      0x65,0x6e,0x74,0x53
0000a4  65676d65          DCB      0x65,0x67,0x6d,0x65
0000a8  6e743c73          DCB      0x6e,0x74,0x3c,0x73
0000ac  69676e65          DCB      0x69,0x67,0x6e,0x65
0000b0  6420696e          DCB      0x64,0x20,0x69,0x6e
0000b4  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  436f6e6e          DCB      0x43,0x6f,0x6e,0x6e
0000cc  65637465          DCB      0x65,0x63,0x74,0x65
0000d0  64436f6d          DCB      0x64,0x43,0x6f,0x6d
0000d4  706f6e65          DCB      0x70,0x6f,0x6e,0x65
0000d8  6e745365          DCB      0x6e,0x74,0x53,0x65
0000dc  676d656e          DCB      0x67,0x6d,0x65,0x6e
0000e0  743c7369          DCB      0x74,0x3c,0x73,0x69
0000e4  676e6564          DCB      0x67,0x6e,0x65,0x64
0000e8  20696e74          DCB      0x20,0x69,0x6e,0x74
0000ec  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_25ConnectedComponentSegmentIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::ConnectedComponentSegment<int>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a43          DCB      0x64,0x3a,0x3a,0x43
0000a4  6f6e6e65          DCB      0x6f,0x6e,0x6e,0x65
0000a8  63746564          DCB      0x63,0x74,0x65,0x64
0000ac  436f6d70          DCB      0x43,0x6f,0x6d,0x70
0000b0  6f6e656e          DCB      0x6f,0x6e,0x65,0x6e
0000b4  74536567          DCB      0x74,0x53,0x65,0x67
0000b8  6d656e74          DCB      0x6d,0x65,0x6e,0x74
0000bc  3c736967          DCB      0x3c,0x73,0x69,0x67
0000c0  6e656420          DCB      0x6e,0x65,0x64,0x20
0000c4  696e743e          DCB      0x69,0x6e,0x74,0x3e
0000c8  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d207369          DCB      0x3d,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  20696e74          DCB      0x20,0x69,0x6e,0x74
000090  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE7SetZeroEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE7SetZeroEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::SetZero()::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  5365745a          DCB      0x53,0x65,0x74,0x5a
00002c  65726f28          DCB      0x65,0x72,0x6f,0x28
000030  29205b77          DCB      0x29,0x20,0x5b,0x77
000034  69746820          DCB      0x69,0x74,0x68,0x20
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  203d2073          DCB      0x20,0x3d,0x20,0x73
000040  69676e65          DCB      0x69,0x67,0x6e,0x65
000044  6420696e          DCB      0x64,0x20,0x69,0x6e
000048  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000bc  65642069          DCB      0x65,0x64,0x20,0x69
0000c0  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2073          DCB      0x20,0x3d,0x20,0x73
000094  69676e65          DCB      0x69,0x67,0x6e,0x65
000098  6420696e          DCB      0x64,0x20,0x69,0x6e
00009c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded10ArraySliceIiE3SetEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded10ArraySliceIiE3SetEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded10ArraySliceIiE3SetEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<int>::Set(int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  536c6963          DCB      0x53,0x6c,0x69,0x63
000024  653c5479          DCB      0x65,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a536574          DCB      0x3a,0x53,0x65,0x74
000030  28547970          DCB      0x28,0x54,0x79,0x70
000034  6529205b          DCB      0x65,0x29,0x20,0x5b
000038  77697468          DCB      0x77,0x69,0x74,0x68
00003c  20547970          DCB      0x20,0x54,0x79,0x70
000040  65203d20          DCB      0x65,0x20,0x3d,0x20
000044  7369676e          DCB      0x73,0x69,0x67,0x6e
000048  65642069          DCB      0x65,0x64,0x20,0x69
00004c  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIbEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<bool>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20626f          DCB      0x3d,0x20,0x62,0x6f
000088  6f6c5d00          DCB      0x6f,0x6c,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIbE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIbE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIbE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<bool>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
0000bc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIbE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIbE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIbE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<bool>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2062          DCB      0x20,0x3d,0x20,0x62
000094  6f6f6c5d          DCB      0x6f,0x6f,0x6c,0x5d
000098  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE7SetZeroEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE7SetZeroEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::SetZero()::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  5365745a          DCB      0x53,0x65,0x74,0x5a
00002c  65726f28          DCB      0x65,0x72,0x6f,0x28
000030  29205b77          DCB      0x29,0x20,0x5b,0x77
000034  69746820          DCB      0x69,0x74,0x68,0x20
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  203d2041          DCB      0x20,0x3d,0x20,0x41
000040  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000044  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000048  65646465          DCB      0x65,0x64,0x64,0x65
00004c  643a3a50          DCB      0x64,0x3a,0x3a,0x50
000050  6f696e74          DCB      0x6f,0x69,0x6e,0x74
000054  3c736967          DCB      0x3c,0x73,0x69,0x67
000058  6e656420          DCB      0x6e,0x65,0x64,0x20
00005c  73686f72          DCB      0x73,0x68,0x6f,0x72
000060  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIiEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
000098  696e743c          DCB      0x69,0x6e,0x74,0x3c
00009c  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a0  65642069          DCB      0x65,0x64,0x20,0x69
0000a4  6e743e5d          DCB      0x6e,0x74,0x3e,0x5d
0000a8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE7SetZeroEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE7SetZeroEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::SetZero()::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  5365745a          DCB      0x53,0x65,0x74,0x5a
00002c  65726f28          DCB      0x65,0x72,0x6f,0x28
000030  29205b77          DCB      0x29,0x20,0x5b,0x77
000034  69746820          DCB      0x69,0x74,0x68,0x20
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  203d2041          DCB      0x20,0x3d,0x20,0x41
000040  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000044  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000048  65646465          DCB      0x65,0x64,0x64,0x65
00004c  643a3a50          DCB      0x64,0x3a,0x3a,0x50
000050  6f696e74          DCB      0x6f,0x69,0x6e,0x74
000054  3c736967          DCB      0x3c,0x73,0x69,0x67
000058  6e656420          DCB      0x6e,0x65,0x64,0x20
00005c  696e743e          DCB      0x69,0x6e,0x74,0x3e
000060  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  506f696e          DCB      0x50,0x6f,0x69,0x6e
0000cc  743c7369          DCB      0x74,0x3c,0x73,0x69
0000d0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000d4  20696e74          DCB      0x20,0x69,0x6e,0x74
0000d8  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIiEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<int>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a50          DCB      0x64,0x3a,0x3a,0x50
0000a4  6f696e74          DCB      0x6f,0x69,0x6e,0x74
0000a8  3c736967          DCB      0x3c,0x73,0x69,0x67
0000ac  6e656420          DCB      0x6e,0x65,0x64,0x20
0000b0  696e743e          DCB      0x69,0x6e,0x74,0x3e
0000b4  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000098  6374616e          DCB      0x63,0x74,0x61,0x6e
00009c  676c653c          DCB      0x67,0x6c,0x65,0x3c
0000a0  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a4  65642073          DCB      0x65,0x64,0x20,0x73
0000a8  686f7274          DCB      0x68,0x6f,0x72,0x74
0000ac  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  52656374          DCB      0x52,0x65,0x63,0x74
0000cc  616e676c          DCB      0x61,0x6e,0x67,0x6c
0000d0  653c7369          DCB      0x65,0x3c,0x73,0x69
0000d4  676e6564          DCB      0x67,0x6e,0x65,0x64
0000d8  2073686f          DCB      0x20,0x73,0x68,0x6f
0000dc  72743e5d          DCB      0x72,0x74,0x3e,0x5d
0000e0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_9RectangleIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Rectangle<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a52          DCB      0x64,0x3a,0x3a,0x52
0000a4  65637461          DCB      0x65,0x63,0x74,0x61
0000a8  6e676c65          DCB      0x6e,0x67,0x6c,0x65
0000ac  3c736967          DCB      0x3c,0x73,0x69,0x67
0000b0  6e656420          DCB      0x6e,0x65,0x64,0x20
0000b4  73686f72          DCB      0x73,0x68,0x6f,0x72
0000b8  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded10ArraySliceIbE3SetEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded10ArraySliceIbE3SetEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded10ArraySliceIbE3SetEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<bool>::Set(bool)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  536c6963          DCB      0x53,0x6c,0x69,0x63
000024  653c5479          DCB      0x65,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a536574          DCB      0x3a,0x53,0x65,0x74
000030  28547970          DCB      0x28,0x54,0x79,0x70
000034  6529205b          DCB      0x65,0x29,0x20,0x5b
000038  77697468          DCB      0x77,0x69,0x74,0x68
00003c  20547970          DCB      0x20,0x54,0x79,0x70
000040  65203d20          DCB      0x65,0x20,0x3d,0x20
000044  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
000048  5d00              DCB      0x5d,0x00

                          AREA ||i.__ARM_common_memcpy4_8||, COMGROUP=__ARM_common_memcpy4_8, CODE, READONLY, ALIGN=1

                  __ARM_common_memcpy4_8 PROC
000000  680a              LDR      r2,[r1,#0]
000002  684b              LDR      r3,[r1,#4]
000004  6002              STR      r2,[r0,#0]
000006  6043              STR      r3,[r0,#4]
000008  4770              BX       lr
                          ENDP


                          AREA ||area_number.703||, COMGROUP=__ARM_common_memcpy4_8, LINKORDER=||i.__ARM_common_memcpy4_8||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.703||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_memcpy4_8||
                          DCD      0x00000001
