; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\cozmobot.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\cozmobot.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\cozmobot.crf supervisor\src\cozmoBot.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo5Robot16GetOperationModeEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo5Robot16GetOperationModeEv PROC ; Anki::Cozmo::Robot::GetOperationMode()
;;;73           //
;;;74           OperationMode GetOperationMode()
000000  4801              LDR      r0,|L1.8|
;;;75           { return mode_; }
000002  7800              LDRB     r0,[r0,#0]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd623375mode_E
000004  4770              BX       lr
;;;76     
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo5Robot16SetOperationModeENS1_13OperationModeE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo5Robot16SetOperationModeENS1_13OperationModeE PROC ; Anki::Cozmo::Robot::SetOperationMode(Anki::Cozmo::Robot::OperationMode)
;;;76     
;;;77           void SetOperationMode(OperationMode newMode)
000000  4901              LDR      r1,|L2.8|
;;;78           { mode_ = newMode; }
000002  7008              STRB     r0,[r1,#0]
000004  4770              BX       lr
;;;79     
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo5Robot18step_LongExecutionEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo5Robot18step_LongExecutionEv PROC ; Anki::Cozmo::Robot::step_LongExecution()
;;;429          // will be slower
;;;430          Result step_LongExecution()
000000  b5f0              PUSH     {r4-r7,lr}
;;;431          {
000002  b08b              SUB      sp,sp,#0x2c
;;;432            Result retVal = RESULT_OK;
;;;433    
;;;434            // IMPORTANT: The static robot state message is being passed in here
;;;435            //   *by value*, NOT by reference.  This is because step_LongExecution()
;;;436            //   can be interupted by step_MainExecution().
;;;437            retVal = VisionSystem::Update(Messages::GetRobotStateMsg());
000004  f7fffffe          BL       _ZN4Anki5Cozmo8Messages16GetRobotStateMsgEv ; Anki::Cozmo::Messages::GetRobotStateMsg()
000008  f1000110          ADD      r1,r0,#0x10
00000c  e89110fe          LDM      r1,{r1-r7,r12}
000010  e88d10fe          STM      sp,{r1-r7,r12}
000014  e9d0120c          LDRD     r1,r2,[r0,#0x30]
000018  6b83              LDR      r3,[r0,#0x38]
00001a  e9cd1208          STRD     r1,r2,[sp,#0x20]
00001e  930a              STR      r3,[sp,#0x28]
000020  c80f              LDM      r0,{r0-r3}
000022  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem6UpdateENS0_8Messages10RobotStateE ; Anki::Cozmo::VisionSystem::Update(Anki::Cozmo::Messages::RobotState)
;;;438    
;;;439            return retVal;
;;;440    
;;;441          } // Robot::step_longExecution()
000026  b00b              ADD      sp,sp,#0x2c
000028  bdf0              POP      {r4-r7,pc}
;;;442    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo5Robot18step_MainExecutionEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo5Robot18step_MainExecutionEv PROC ; Anki::Cozmo::Robot::step_MainExecution()
;;;213    
;;;214          Result step_MainExecution()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;215          {
000004  ed2d8b02          VPUSH    {d8}
000008  b084              SUB      sp,sp,#0x10
;;;216            // Detect if it took too long in between mainExecution calls
;;;217            u32 cycleStartTime = HAL::GetMicroCounter();
00000a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
;;;218            if (lastCycleStartTime_ != 0) {
00000e  4c47              LDR      r4,|L4.300|
000010  4606              MOV      r6,r0                 ;217
;;;219              u32 timeBetweenCycles = cycleStartTime - lastCycleStartTime_;
;;;220              if (timeBetweenCycles > MAIN_TOO_LATE_TIME_THRESH) {
000012  f241587c          MOV      r8,#0x157c
000016  69a0              LDR      r0,[r4,#0x18]         ;218  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719lastCycleStartTime_E
000018  2800              CMP      r0,#0                 ;218
00001a  bf1c              ITT      NE                    ;219
00001c  1a31              SUBNE    r1,r6,r0              ;219
00001e  4541              CMPNE    r1,r8
000020  d911              BLS      |L4.70|
;;;221                ++mainTooLateCnt_;
000022  68e0              LDR      r0,[r4,#0xc]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233715mainTooLateCnt_E
000024  1c40              ADDS     r0,r0,#1
;;;222                avgMainTooLateTime_ = (u32)((f32)(avgMainTooLateTime_ * (mainTooLateCnt_ - 1) + timeBetweenCycles)) / mainTooLateCnt_;
000026  60e0              STR      r0,[r4,#0xc]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233715mainTooLateCnt_E
000028  6963              LDR      r3,[r4,#0x14]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLateTime_E
00002a  1e42              SUBS     r2,r0,#1
00002c  fb031102          MLA      r1,r3,r2,r1
000030  ee001a10          VMOV     s0,r1
000034  eeb80a40          VCVT.F32.U32 s0,s0
000038  eebc0ac0          VCVT.U32.F32 s0,s0
00003c  ee101a10          VMOV     r1,s0
000040  fbb1f0f0          UDIV     r0,r1,r0
000044  6160              STR      r0,[r4,#0x14]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLateTime_E
                  |L4.70|
;;;223              }
;;;224            }
;;;225    
;;;226            // HACK: Manually setting timestamp here in mainExecution until
;;;227            // until Nathan implements this the correct way.
;;;228            HAL::SetTimeStamp(HAL::GetTimeStamp()+TIME_STEP);
000046  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
00004a  1d40              ADDS     r0,r0,#5
00004c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12SetTimeStampEj ; Anki::Cozmo::HAL::SetTimeStamp(unsigned)
;;;229    
;;;230    // TBD - This should be moved to simulator just before step_MainExecution is called
;;;231    #ifndef ROBOT_HARDWARE
;;;232            // If the hardware interface needs to be advanced (as in the case of
;;;233            // a Webots simulation), do that first.
;;;234            HAL::Step();
;;;235    #endif
;;;236    
;;;237            //////////////////////////////////////////////////////////////
;;;238            // Test Mode
;;;239            //////////////////////////////////////////////////////////////
;;;240    //        TestModeController::Update();
;;;241    
;;;242    
;;;243            //////////////////////////////////////////////////////////////
;;;244            // Localization
;;;245            //////////////////////////////////////////////////////////////
;;;246      //      Localization::Update();
;;;247    
;;;248    
;;;249            //////////////////////////////////////////////////////////////
;;;250            // Communications
;;;251            //////////////////////////////////////////////////////////////
;;;252    
;;;253            // Check if there is a new or dropped connection to a basestation
;;;254            if (HAL::RadioIsConnected() && !wasConnected_) {
000050  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioIsConnectedEv ; Anki::Cozmo::HAL::RadioIsConnected()
000054  7861              LDRB     r1,[r4,#1]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233713wasConnected_E
000056  f04f0700          MOV      r7,#0
00005a  4388              BICS     r0,r0,r1
00005c  d005              BEQ      |L4.106|
;;;255              PRINT("Robot radio is connected.\n");
00005e  a034              ADR      r0,|L4.304|
000060  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;256              wasConnected_ = true;
000064  2001              MOVS     r0,#1
000066  7060              STRB     r0,[r4,#1]
000068  e025              B        |L4.182|
                  |L4.106|
;;;257            } else if (!HAL::RadioIsConnected() && wasConnected_) {
00006a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioIsConnectedEv ; Anki::Cozmo::HAL::RadioIsConnected()
00006e  7861              LDRB     r1,[r4,#1]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233713wasConnected_E
000070  ea310000          BICS     r0,r1,r0
000074  d01f              BEQ      |L4.182|
;;;258              PRINT("Radio disconnected\n");
000076  a035              ADR      r0,|L4.332|
000078  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;259              Messages::ResetInit();
00007c  f7fffffe          BL       _ZN4Anki5Cozmo8Messages9ResetInitEv ; Anki::Cozmo::Messages::ResetInit()
;;;260              TestModeController::Start(TM_NONE);
000080  2300              MOVS     r3,#0
000082  461a              MOV      r2,r3
000084  4619              MOV      r1,r3
000086  4618              MOV      r0,r3
000088  f7fffffe          BL       _ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii ; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
;;;261              SteeringController::ExecuteDirectDrive(0,0);
00008c  ed9f8a34          VLDR     s16,|L4.352|
000090  eef01a48          VMOV.F32 s3,s16
000094  eeb01a48          VMOV.F32 s2,s16
000098  eef00a48          VMOV.F32 s1,s16
00009c  eeb00a48          VMOV.F32 s0,s16
0000a0  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
;;;262              LiftController::SetAngularVelocity(0);
0000a4  eeb00a48          VMOV.F32 s0,s16
0000a8  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController18SetAngularVelocityEf ; Anki::Cozmo::LiftController::SetAngularVelocity(float)
;;;263              HeadController::SetAngularVelocity(0);
0000ac  eeb00a48          VMOV.F32 s0,s16
0000b0  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController18SetAngularVelocityEf ; Anki::Cozmo::HeadController::SetAngularVelocity(float)
;;;264              wasConnected_ = false;
0000b4  7067              STRB     r7,[r4,#1]
                  |L4.182|
;;;265            }
;;;266    
;;;267            // Process any messages from the basestation
;;;268            Messages::ProcessBTLEMessages();
0000b6  f7fffffe          BL       _ZN4Anki5Cozmo8Messages19ProcessBTLEMessagesEv ; Anki::Cozmo::Messages::ProcessBTLEMessages()
;;;269    
;;;270            /*
;;;271            Messages::MatMarkerObserved matMsg;
;;;272            while( Messages::CheckMailbox(matMsg) )
;;;273            {
;;;274              HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::MatMarkerObserved), &matMsg);
;;;275            }
;;;276    
;;;277            Messages::BlockMarkerObserved blockMsg;
;;;278            while( Messages::CheckMailbox(blockMsg) )
;;;279            {
;;;280              HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::BlockMarkerObserved), &blockMsg);
;;;281    
;;;282            } // while blockMarkerMailbox has mail
;;;283            */
;;;284    
;;;285            //////////////////////////////////////////////////////////////
;;;286            // Sensor updates
;;;287            //////////////////////////////////////////////////////////////
;;;288    #if !defined(THIS_IS_PETES_BOARD)
;;;289    //        IMUFilter::Update();
;;;290    #endif
;;;291    /*
;;;292    #ifdef HAVE_PROX_SENSORS // Most robots don't have these right now
;;;293            ProxSensors::Update();
;;;294    #endif
;;;295    */
;;;296            //////////////////////////////////////////////////////////////
;;;297            // Head & Lift Position Updates
;;;298            //////////////////////////////////////////////////////////////
;;;299    /*
;;;300            AnimationController::Update();
;;;301            EyeController::Update();
;;;302            HeadController::Update();
;;;303            LiftController::Update();
;;;304    #if defined(HAVE_ACTIVE_GRIPPER) && HAVE_ACTIVE_GRIPPER
;;;305            GripController::Update();
;;;306    #endif
;;;307    
;;;308            PathFollower::Update();
;;;309            PickAndPlaceController::Update();
;;;310            DockingController::Update();
;;;311            FaceTrackingController::Update();
;;;312    */
;;;313            //////////////////////////////////////////////////////////////
;;;314            // State Machine
;;;315            //////////////////////////////////////////////////////////////
;;;316    /*
;;;317            switch(mode_)
;;;318            {
;;;319              case INIT_MOTOR_CALIBRATION:
;;;320              {
;;;321                if(MotorCalibrationUpdate()) {
;;;322                  // Once initialization is done, broadcast a message that this robot
;;;323                  // is ready to go
;;;324                  Messages::RobotAvailable msg;
;;;325                  msg.robotID = HAL::GetIDCard()->esn;
;;;326                  PRINT("Robot %d broadcasting availability message.\n", msg.robotID);
;;;327                  HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::RobotAvailable), &msg);
;;;328    
;;;329                  // Start test mode
;;;330                  if (DEFAULT_TEST_MODE != TM_NONE) {
;;;331                    if(TestModeController::Start(DEFAULT_TEST_MODE) == RESULT_FAIL) {
;;;332                      PRINT("TestMode %d failed to start.\n", DEFAULT_TEST_MODE);
;;;333                      return RESULT_FAIL;
;;;334                    }
;;;335                  }
;;;336    
;;;337                  mode_ = WAITING;
;;;338                }
;;;339    
;;;340                break;
;;;341              }
;;;342              case WAITING:
;;;343              {
;;;344                // Idle.  Nothing to do yet...
;;;345    
;;;346                break;
;;;347              }
;;;348    
;;;349              default:
;;;350                PRINT("Unrecognized CozmoBot mode.\n");
;;;351    
;;;352            } // switch(mode_)
;;;353    */
;;;354    /*
;;;355            // Manage the various motion controllers:
;;;356            SpeedController::Manage();
;;;357            SteeringController::Manage();
;;;358            WheelController::Manage();
;;;359    */
;;;360    
;;;361            //////////////////////////////////////////////////////////////
;;;362            // Pickup reaction
;;;363            //////////////////////////////////////////////////////////////
;;;364    /* 
;;;365     if (IMUFilter::IsPickedUp() && !wasPickedUp_) {
;;;366              // Stop wheels
;;;367              PathFollower::ClearPath();
;;;368              SteeringController::ExecuteDirectDrive(0, 0);
;;;369              SpeedController::SetBothDesiredAndCurrentUserSpeed(0);
;;;370            }
;;;371            wasPickedUp_ = IMUFilter::IsPickedUp();
;;;372    */
;;;373    
;;;374            //////////////////////////////////////////////////////////////
;;;375            // Feedback / Display
;;;376            //////////////////////////////////////////////////////////////
;;;377    /*
;;;378            Messages::UpdateRobotStateMsg();
;;;379    #if(!STREAM_DEBUG_IMAGES)
;;;380            ++robotStateMessageCounter_;
;;;381            if(robotStateMessageCounter_ >= STATE_MESSAGE_FREQUENCY) {
;;;382              Messages::SendRobotStateMsg();
;;;383              robotStateMessageCounter_ = 0;
;;;384            }
;;;385    #endif
;;;386    */
;;;387    // TBD - This should be moved to simulator just after step_MainExecution is called
;;;388    #ifndef ROBOT_HARDWARE
;;;389      //      HAL::UpdateDisplay();
;;;390    #endif
;;;391    
;;;392    
;;;393            // Check if main took too long
;;;394            u32 cycleEndTime = HAL::GetMicroCounter();
0000ba  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
;;;395            u32 cycleTime = cycleEndTime - cycleStartTime;
0000be  1b81              SUBS     r1,r0,r6
0000c0  4605              MOV      r5,r0                 ;394
;;;396            if (cycleTime > MAIN_TOO_LONG_TIME_THRESH) {
0000c2  4541              CMP      r1,r8
0000c4  d911              BLS      |L4.234|
;;;397              ++mainTooLongCnt_;
0000c6  68a0              LDR      r0,[r4,#8]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233715mainTooLongCnt_E
0000c8  1c40              ADDS     r0,r0,#1
;;;398              avgMainTooLongTime_ = (u32)((f32)(avgMainTooLongTime_ * (mainTooLongCnt_ - 1) + cycleTime)) / mainTooLongCnt_;
0000ca  60a0              STR      r0,[r4,#8]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233715mainTooLongCnt_E
0000cc  6922              LDR      r2,[r4,#0x10]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLongTime_E
0000ce  1e43              SUBS     r3,r0,#1
0000d0  fb021103          MLA      r1,r2,r3,r1
0000d4  ee001a10          VMOV     s0,r1
0000d8  eeb80a40          VCVT.F32.U32 s0,s0
0000dc  eebc0ac0          VCVT.U32.F32 s0,s0
0000e0  ee101a10          VMOV     r1,s0
0000e4  fbb1f0f0          UDIV     r0,r1,r0
0000e8  6120              STR      r0,[r4,#0x10]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLongTime_E
                  |L4.234|
;;;399            }
;;;400            lastCycleStartTime_ = cycleStartTime;
0000ea  61a6              STR      r6,[r4,#0x18]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719lastCycleStartTime_E
0000ec  e9d41002          LDRD     r1,r0,[r4,#8]
;;;401    
;;;402    
;;;403            // Report main cycle time error
;;;404            if ((mainTooLateCnt_ > 0 || mainTooLongCnt_ > 0) &&
0000f0  ea500201          ORRS     r2,r0,r1
0000f4  d013              BEQ      |L4.286|
;;;405                (cycleEndTime - lastMainCycleTimeErrorReportTime_ > MAIN_CYCLE_ERROR_REPORTING_PERIOD)) {
0000f6  69e2              LDR      r2,[r4,#0x1c]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233733lastMainCycleTimeErrorReportTime_E
0000f8  4b1a              LDR      r3,|L4.356|
0000fa  1aaa              SUBS     r2,r5,r2
0000fc  429a              CMP      r2,r3
0000fe  d90e              BLS      |L4.286|
;;;406              Messages::MainCycleTimeError m;
;;;407              m.numMainTooLateErrors = mainTooLateCnt_;
;;;408              m.avgMainTooLateTime = avgMainTooLateTime_;
000100  9002              STR      r0,[sp,#8]
000102  6960              LDR      r0,[r4,#0x14]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLateTime_E
000104  e9cd1000          STRD     r1,r0,[sp,#0]
;;;409              m.numMainTooLongErrors = mainTooLongCnt_;
;;;410              m.avgMainTooLongTime = avgMainTooLongTime_;
000108  6920              LDR      r0,[r4,#0x10]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLongTime_E
;;;411    
;;;412              HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::MainCycleTimeError), &m);
00010a  9003              STR      r0,[sp,#0xc]
00010c  4669              MOV      r1,sp
00010e  204a              MOVS     r0,#0x4a
000110  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
;;;413    
;;;414              mainTooLateCnt_ = 0;
;;;415              avgMainTooLateTime_ = 0;
000114  60e7              STR      r7,[r4,#0xc]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233715mainTooLateCnt_E
;;;416              mainTooLongCnt_ = 0;
000116  6167              STR      r7,[r4,#0x14]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLateTime_E
;;;417              avgMainTooLongTime_ = 0;
000118  60a7              STR      r7,[r4,#8]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233715mainTooLongCnt_E
;;;418    
;;;419              lastMainCycleTimeErrorReportTime_ = cycleEndTime;
00011a  6127              STR      r7,[r4,#0x10]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLongTime_E
00011c  61e5              STR      r5,[r4,#0x1c]  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233733lastMainCycleTimeErrorReportTime_E
                  |L4.286|
;;;420            }
;;;421    
;;;422    
;;;423            return RESULT_OK;
;;;424    
;;;425          } // Robot::step_MainExecution()
00011e  b004              ADD      sp,sp,#0x10
000120  2000              MOVS     r0,#0                 ;423
000122  ecbd8b02          VPOP     {d8}
000126  e8bd81f0          POP      {r4-r8,pc}
;;;426    
                          ENDP

00012a  0000              DCW      0x0000
                  |L4.300|
                          DCD      ||.data||
                  |L4.304|
000130  526f626f          DCB      "Robot radio is connected.\n",0
000134  74207261
000138  64696f20
00013c  69732063
000140  6f6e6e65
000144  63746564
000148  2e0a00  
00014b  00                DCB      0
                  |L4.332|
00014c  52616469          DCB      "Radio disconnected\n",0
000150  6f206469
000154  73636f6e
000158  6e656374
00015c  65640a00
                  |L4.352|
000160  00000000          DCFS     0x00000000 ; 0
                  |L4.356|
                          DCD      0x000f4240

                          AREA ||i._ZN4Anki5Cozmo5Robot22MotorCalibrationUpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo5Robot22MotorCalibrationUpdateEv PROC ; Anki::Cozmo::Robot::MotorCalibrationUpdate()
;;;96           // Returns true when done.
;;;97           bool MotorCalibrationUpdate()
000000  b510              PUSH     {r4,lr}
;;;98           {
;;;99             bool isDone = false;
000002  2400              MOVS     r4,#0
;;;100    
;;;101            if(
000004  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController12IsCalibratedEv ; Anki::Cozmo::LiftController::IsCalibrated()
000008  b140              CBZ      r0,|L5.28|
;;;102               LiftController::IsCalibrated()
;;;103               && HeadController::IsCalibrated()
00000a  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController12IsCalibratedEv ; Anki::Cozmo::HeadController::IsCalibrated()
00000e  b128              CBZ      r0,|L5.28|
;;;104               ) {
;;;105              PRINT("Motors calibrated\n");
000010  a003              ADR      r0,|L5.32|
000012  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;106              IMUFilter::Reset();
000016  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter5ResetEv ; Anki::Cozmo::IMUFilter::Reset()
;;;107              isDone = true;
00001a  2401              MOVS     r4,#1
                  |L5.28|
;;;108            }
;;;109    
;;;110            return isDone;
00001c  4620              MOV      r0,r4
;;;111          }
00001e  bd10              POP      {r4,pc}
;;;112    
                          ENDP

                  |L5.32|
000020  4d6f746f          DCB      "Motors calibrated\n",0
000024  72732063
000028  616c6962
00002c  72617465
000030  640a00  
000033  00                DCB      0

                          AREA ||i._ZN4Anki5Cozmo5Robot28StartMotorCalibrationRoutineEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo5Robot28StartMotorCalibrationRoutineEv PROC ; Anki::Cozmo::Robot::StartMotorCalibrationRoutine()
;;;83     
;;;84           void StartMotorCalibrationRoutine()
000000  b510              PUSH     {r4,lr}
;;;85           {
;;;86             LiftController::StartCalibrationRoutine();
000002  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController23StartCalibrationRoutineEv ; Anki::Cozmo::LiftController::StartCalibrationRoutine()
;;;87             HeadController::StartCalibrationRoutine();
000006  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController23StartCalibrationRoutineEv ; Anki::Cozmo::HeadController::StartCalibrationRoutine()
;;;88     #if defined(HAVE_ACTIVE_GRIPPER) && HAVE_ACTIVE_GRIPPER
;;;89             GripController::DisengageGripper();
;;;90     #endif
;;;91             SteeringController::ExecuteDirectDrive(0,0);
00000a  ed9f0a06          VLDR     s0,|L6.36|
00000e  e8bd4010          POP      {r4,lr}
000012  eef01a40          VMOV.F32 s3,s0
000016  eeb01a40          VMOV.F32 s2,s0
00001a  eef00a40          VMOV.F32 s1,s0
00001e  f7ffbffe          B.W      _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
;;;92           }
;;;93     
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
000024  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki5Cozmo5Robot4InitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo5Robot4InitEv PROC ; Anki::Cozmo::Robot::Init()
;;;113    
;;;114          Result Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;115          {
000002  b083              SUB      sp,sp,#0xc
;;;116            Result lastResult = RESULT_OK;
;;;117    
;;;118            // Coretech setup
;;;119    #ifndef SIMULATOR
;;;120    #if(DIVERT_PRINT_TO_RADIO)
;;;121            SetCoreTechPrintFunctionPtr(Messages::SendText);
000004  484c              LDR      r0,|L7.312|
000006  f7fffffe          BL       _ZN4Anki27SetCoreTechPrintFunctionPtrEPFiPKcSt9__va_listE ; Anki::SetCoreTechPrintFunctionPtr(int(*)(const char*, std::__va_list))
;;;122    #else
;;;123            SetCoreTechPrintFunctionPtr(0);
;;;124    #endif
;;;125    #elif(USING_UART_RADIO && DIVERT_PRINT_TO_RADIO)
;;;126            SetCoreTechPrintFunctionPtr(Messages::SendText);
;;;127    #endif
;;;128    
;;;129            // HAL and supervisor init
;;;130    #ifndef ROBOT_HARDWARE    // The HAL/Operating System cannot be Init()ed or Destroy()ed on a real robot
;;;131            lastResult = HAL::Init();
;;;132            AnkiConditionalErrorAndReturnValue(lastResult == RESULT_OK, lastResult,
;;;133                                               "Robot::Init()", "HAL init failed.\n");
;;;134    #endif
;;;135    
;;;136            lastResult = Localization::Init();
00000a  f7fffffe          BL       _ZN4Anki5Cozmo12Localization4InitEv ; Anki::Cozmo::Localization::Init()
;;;137            AnkiConditionalErrorAndReturnValue(lastResult == RESULT_OK, lastResult,
00000e  4c4b              LDR      r4,|L7.316|
000010  0005              MOVS     r5,r0                 ;136
000012  d00b              BEQ      |L7.44|
000014  2189              MOVS     r1,#0x89
000016  e9cd4100          STRD     r4,r1,[sp,#0]
00001a  a349              ADR      r3,|L7.320|
00001c  a24f              ADR      r2,|L7.348|
00001e  a158              ADR      r1,|L7.384|
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       _Anki_Log
;;;138                                               "Robot::Init()", "Localization System init failed.\n");
;;;139    
;;;140            lastResult = VisionSystem::Init();
;;;141            AnkiConditionalErrorAndReturnValue(lastResult == RESULT_OK, lastResult,
;;;142                                               "Robot::Init()", "Vision System init failed.\n");
;;;143    
;;;144            lastResult = PathFollower::Init();
;;;145            AnkiConditionalErrorAndReturnValue(lastResult == RESULT_OK, lastResult,
;;;146                                               "Robot::Init()", "PathFollower System init failed.\n");
;;;147    
;;;148            lastResult = EyeController::Init();
;;;149            AnkiConditionalErrorAndReturnValue(lastResult == RESULT_OK, lastResult,
;;;150                                               "Robot::Init()", "EyeController init failed.\n");
;;;151    
;;;152    
;;;153            // Initialize subsystems if/when available:
;;;154            /*
;;;155             if(WheelController::Init() == RESULT_FAIL) {
;;;156             PRINT("WheelController initialization failed.\n");
;;;157             return RESULT_FAIL;
;;;158             }
;;;159    
;;;160             if(SpeedController::Init() == RESULT_FAIL) {
;;;161             PRINT("SpeedController initialization failed.\n");
;;;162             return RESULT_FAIL;
;;;163             }
;;;164    
;;;165             if(SteeringController::Init() == RESULT_FAIL) {
;;;166             PRINT("SteeringController initialization failed.\n");
;;;167             return RESULT_FAIL;
;;;168             }
;;;169    
;;;170             if(HeadController::Init() == RESULT_FAIL) {
;;;171             PRINT("HeadController initialization failed.\n");
;;;172             return RESULT_FAIL;
;;;173             }
;;;174             */
;;;175    
;;;176            // Before liftController?!
;;;177            lastResult = PickAndPlaceController::Init();
;;;178            AnkiConditionalErrorAndReturnValue(lastResult == RESULT_OK, lastResult,
;;;179                                               "Robot::Init()", "PickAndPlaceController init failed.\n");
;;;180    
;;;181            lastResult = LiftController::Init();
;;;182            AnkiConditionalErrorAndReturnValue(lastResult == RESULT_OK, lastResult,
;;;183                                               "Robot::Init()", "LiftController init failed.\n");
;;;184    
;;;185            lastResult = AnimationController::Init();
;;;186            AnkiConditionalErrorAndReturnValue(lastResult == RESULT_OK, lastResult,
;;;187                                               "Robot::Init()", "AnimationController init failed.\n");
;;;188    
;;;189            lastResult = FaceTrackingController::Init(VisionSystem::GetFaceDetectionParams());
;;;190            AnkiConditionalErrorAndReturnValue(lastResult == RESULT_OK, lastResult,
;;;191                                               "Robot::Init()", "FaceTrackingController init failed.\n");
;;;192    
;;;193            // Start calibration
;;;194            StartMotorCalibrationRoutine();
;;;195    
;;;196            // Set starting state
;;;197            mode_ = INIT_MOTOR_CALIBRATION;
;;;198    
;;;199            robotStateMessageCounter_ = 0;
;;;200    
;;;201            return RESULT_OK;
;;;202    
;;;203          } // Robot::Init()
000026  b003              ADD      sp,sp,#0xc
000028  4628              MOV      r0,r5                 ;137
00002a  bd30              POP      {r4,r5,pc}
                  |L7.44|
00002c  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem4InitEv ; Anki::Cozmo::VisionSystem::Init()
000030  0005              MOVS     r5,r0                 ;140
000032  d00b              BEQ      |L7.76|
000034  218d              MOVS     r1,#0x8d              ;141
000036  e9cd4100          STRD     r4,r1,[sp,#0]         ;141
00003a  a341              ADR      r3,|L7.320|
00003c  a254              ADR      r2,|L7.400|
00003e  a150              ADR      r1,|L7.384|
000040  2005              MOVS     r0,#5                 ;141
000042  f7fffffe          BL       _Anki_Log
000046  b003              ADD      sp,sp,#0xc
000048  4628              MOV      r0,r5                 ;141
00004a  bd30              POP      {r4,r5,pc}
                  |L7.76|
00004c  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower4InitEv ; Anki::Cozmo::PathFollower::Init()
000050  0005              MOVS     r5,r0                 ;144
000052  d00b              BEQ      |L7.108|
000054  2191              MOVS     r1,#0x91              ;145
000056  e9cd4100          STRD     r4,r1,[sp,#0]         ;145
00005a  a339              ADR      r3,|L7.320|
00005c  a253              ADR      r2,|L7.428|
00005e  a148              ADR      r1,|L7.384|
000060  2005              MOVS     r0,#5                 ;145
000062  f7fffffe          BL       _Anki_Log
000066  b003              ADD      sp,sp,#0xc
000068  4628              MOV      r0,r5                 ;145
00006a  bd30              POP      {r4,r5,pc}
                  |L7.108|
00006c  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController4InitEv ; Anki::Cozmo::EyeController::Init()
000070  0005              MOVS     r5,r0                 ;148
000072  d00b              BEQ      |L7.140|
000074  2195              MOVS     r1,#0x95              ;149
000076  e9cd4100          STRD     r4,r1,[sp,#0]         ;149
00007a  a331              ADR      r3,|L7.320|
00007c  a254              ADR      r2,|L7.464|
00007e  a140              ADR      r1,|L7.384|
000080  2005              MOVS     r0,#5                 ;149
000082  f7fffffe          BL       _Anki_Log
000086  b003              ADD      sp,sp,#0xc
000088  4628              MOV      r0,r5                 ;149
00008a  bd30              POP      {r4,r5,pc}
                  |L7.140|
00008c  f7fffffe          BL       _ZN4Anki5Cozmo22PickAndPlaceController4InitEv ; Anki::Cozmo::PickAndPlaceController::Init()
000090  0005              MOVS     r5,r0                 ;177
000092  d00b              BEQ      |L7.172|
000094  21b2              MOVS     r1,#0xb2              ;178
000096  e9cd4100          STRD     r4,r1,[sp,#0]         ;178
00009a  a329              ADR      r3,|L7.320|
00009c  a253              ADR      r2,|L7.492|
00009e  a138              ADR      r1,|L7.384|
0000a0  2005              MOVS     r0,#5                 ;178
0000a2  f7fffffe          BL       _Anki_Log
0000a6  b003              ADD      sp,sp,#0xc
0000a8  4628              MOV      r0,r5                 ;178
0000aa  bd30              POP      {r4,r5,pc}
                  |L7.172|
0000ac  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController4InitEv ; Anki::Cozmo::LiftController::Init()
0000b0  0005              MOVS     r5,r0                 ;181
0000b2  d00b              BEQ      |L7.204|
0000b4  21b6              MOVS     r1,#0xb6              ;182
0000b6  e9cd4100          STRD     r4,r1,[sp,#0]         ;182
0000ba  a321              ADR      r3,|L7.320|
0000bc  a255              ADR      r2,|L7.532|
0000be  a130              ADR      r1,|L7.384|
0000c0  2005              MOVS     r0,#5                 ;182
0000c2  f7fffffe          BL       _Anki_Log
0000c6  b003              ADD      sp,sp,#0xc
0000c8  4628              MOV      r0,r5                 ;182
0000ca  bd30              POP      {r4,r5,pc}
                  |L7.204|
0000cc  f7fffffe          BL       _ZN4Anki5Cozmo19AnimationController4InitEv ; Anki::Cozmo::AnimationController::Init()
0000d0  0005              MOVS     r5,r0                 ;185
0000d2  d00b              BEQ      |L7.236|
0000d4  21ba              MOVS     r1,#0xba              ;186
0000d6  e9cd4100          STRD     r4,r1,[sp,#0]         ;186
0000da  a319              ADR      r3,|L7.320|
0000dc  a255              ADR      r2,|L7.564|
0000de  a128              ADR      r1,|L7.384|
0000e0  2005              MOVS     r0,#5                 ;186
0000e2  f7fffffe          BL       _Anki_Log
0000e6  b003              ADD      sp,sp,#0xc
0000e8  4628              MOV      r0,r5                 ;186
0000ea  bd30              POP      {r4,r5,pc}
                  |L7.236|
0000ec  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem22GetFaceDetectionParamsEv ; Anki::Cozmo::VisionSystem::GetFaceDetectionParams()
0000f0  f7fffffe          BL       _ZN4Anki5Cozmo22FaceTrackingController4InitERKNS0_12VisionSystem23FaceDetectionParametersE ; Anki::Cozmo::FaceTrackingController::Init(const Anki::Cozmo::VisionSystem::FaceDetectionParameters&)
0000f4  0005              MOVS     r5,r0                 ;189
0000f6  d00b              BEQ      |L7.272|
0000f8  20be              MOVS     r0,#0xbe              ;190
0000fa  e9cd4000          STRD     r4,r0,[sp,#0]         ;190
0000fe  a310              ADR      r3,|L7.320|
000100  a255              ADR      r2,|L7.600|
000102  a11f              ADR      r1,|L7.384|
000104  2005              MOVS     r0,#5                 ;190
000106  f7fffffe          BL       _Anki_Log
00010a  b003              ADD      sp,sp,#0xc
00010c  4628              MOV      r0,r5                 ;190
00010e  bd30              POP      {r4,r5,pc}
                  |L7.272|
000110  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController23StartCalibrationRoutineEv ; Anki::Cozmo::LiftController::StartCalibrationRoutine()
000114  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController23StartCalibrationRoutineEv ; Anki::Cozmo::HeadController::StartCalibrationRoutine()
000118  ed9f0a59          VLDR     s0,|L7.640|
00011c  eef01a40          VMOV.F32 s3,s0
000120  eeb01a40          VMOV.F32 s2,s0
000124  eef00a40          VMOV.F32 s1,s0
000128  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
00012c  4955              LDR      r1,|L7.644|
00012e  2000              MOVS     r0,#0                 ;197
000130  7008              STRB     r0,[r1,#0]            ;197
000132  6048              STR      r0,[r1,#4]            ;199  ; _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233725robotStateMessageCounter_E
000134  b003              ADD      sp,sp,#0xc
000136  bd30              POP      {r4,r5,pc}
;;;204    
                          ENDP

                  |L7.312|
                          DCD      _ZN4Anki5Cozmo8Messages8SendTextEPKcSt9__va_list ; Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
                  |L7.316|
                          DCD      ||.constdata||
                  |L7.320|
000140  73757065          DCB      "supervisor\\src\\cozmoBot.cpp",0
000144  72766973
000148  6f725c73
00014c  72635c63
000150  6f7a6d6f
000154  426f742e
000158  63707000
                  |L7.348|
00015c  4c6f6361          DCB      "Localization System init failed.\n",0
000160  6c697a61
000164  74696f6e
000168  20537973
00016c  74656d20
000170  696e6974
000174  20666169
000178  6c65642e
00017c  0a00    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L7.384|
000180  526f626f          DCB      "Robot::Init()",0
000184  743a3a49
000188  6e697428
00018c  2900    
00018e  00                DCB      0
00018f  00                DCB      0
                  |L7.400|
000190  56697369          DCB      "Vision System init failed.\n",0
000194  6f6e2053
000198  79737465
00019c  6d20696e
0001a0  69742066
0001a4  61696c65
0001a8  642e0a00
                  |L7.428|
0001ac  50617468          DCB      "PathFollower System init failed.\n",0
0001b0  466f6c6c
0001b4  6f776572
0001b8  20537973
0001bc  74656d20
0001c0  696e6974
0001c4  20666169
0001c8  6c65642e
0001cc  0a00    
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L7.464|
0001d0  45796543          DCB      "EyeController init failed.\n",0
0001d4  6f6e7472
0001d8  6f6c6c65
0001dc  7220696e
0001e0  69742066
0001e4  61696c65
0001e8  642e0a00
                  |L7.492|
0001ec  5069636b          DCB      "PickAndPlaceController init failed.\n",0
0001f0  416e6450
0001f4  6c616365
0001f8  436f6e74
0001fc  726f6c6c
000200  65722069
000204  6e697420
000208  6661696c
00020c  65642e0a
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L7.532|
000214  4c696674          DCB      "LiftController init failed.\n",0
000218  436f6e74
00021c  726f6c6c
000220  65722069
000224  6e697420
000228  6661696c
00022c  65642e0a
000230  00      
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
                  |L7.564|
000234  416e696d          DCB      "AnimationController init failed.\n",0
000238  6174696f
00023c  6e436f6e
000240  74726f6c
000244  6c657220
000248  696e6974
00024c  20666169
000250  6c65642e
000254  0a00    
000256  00                DCB      0
000257  00                DCB      0
                  |L7.600|
000258  46616365          DCB      "FaceTrackingController init failed.\n",0
00025c  54726163
000260  6b696e67
000264  436f6e74
000268  726f6c6c
00026c  65722069
000270  6e697420
000274  6661696c
000278  65642e0a
00027c  00      
00027d  00                DCB      0
00027e  00                DCB      0
00027f  00                DCB      0
                  |L7.640|
000280  00000000          DCFS     0x00000000 ; 0
                  |L7.644|
                          DCD      ||.data||

                          AREA ||i.__sti___12_cozmoBot_cpp_fcd62337||, CODE, READONLY, ALIGN=2

                  __sti___12_cozmoBot_cpp_fcd62337 PROC
000000  4803              LDR      r0,|L8.16|
000002  ed9f0a02          VLDR     s0,|L8.12|
000006  ed800a08          VSTR     s0,[r0,#0x20]
00000a  4770              BX       lr
                          ENDP

                  |L8.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L8.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo5Robot16GetOperationModeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo5Robot16GetOperationModeEv||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN4Anki5Cozmo5Robot16SetOperationModeENS1_13OperationModeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo5Robot16SetOperationModeENS1_13OperationModeE||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN4Anki5Cozmo5Robot28StartMotorCalibrationRoutineEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo5Robot28StartMotorCalibrationRoutineEv||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN4Anki5Cozmo5Robot22MotorCalibrationUpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo5Robot22MotorCalibrationUpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZN4Anki5Cozmo5Robot4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo5Robot4InitEv||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4Anki5Cozmo5Robot18step_MainExecutionEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo5Robot18step_MainExecutionEv||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN4Anki5Cozmo5Robot18step_LongExecutionEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo5Robot18step_LongExecutionEv||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i.__sti___12_cozmoBot_cpp_fcd62337||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___12_cozmoBot_cpp_fcd62337||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a43          DCB      0x69,0x3a,0x3a,0x43
000014  6f7a6d6f          DCB      0x6f,0x7a,0x6d,0x6f
000018  3a3a526f          DCB      0x3a,0x3a,0x52,0x6f
00001c  626f743a          DCB      0x62,0x6f,0x74,0x3a
000020  3a496e69          DCB      0x3a,0x49,0x6e,0x69
000024  74282900          DCB      0x74,0x28,0x29,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd623375mode_E ; Anki::Cozmo::Robot::<unnamed>::mode_
000000  00                DCB      0x00
                  _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233713wasConnected_E ; Anki::Cozmo::Robot::<unnamed>::wasConnected_
000001  000000            DCB      0x00,0x00,0x00
                  _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233725robotStateMessageCounter_E ; Anki::Cozmo::Robot::<unnamed>::robotStateMessageCounter_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233715mainTooLongCnt_E ; Anki::Cozmo::Robot::<unnamed>::mainTooLongCnt_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233715mainTooLateCnt_E ; Anki::Cozmo::Robot::<unnamed>::mainTooLateCnt_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLongTime_E ; Anki::Cozmo::Robot::<unnamed>::avgMainTooLongTime_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719avgMainTooLateTime_E ; Anki::Cozmo::Robot::<unnamed>::avgMainTooLateTime_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233719lastCycleStartTime_E ; Anki::Cozmo::Robot::<unnamed>::lastCycleStartTime_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo5Robot36_GLOBAL__N__12_cozmoBot_cpp_fcd6233733lastMainCycleTimeErrorReportTime_E ; Anki::Cozmo::Robot::<unnamed>::lastMainCycleTimeErrorReportTime_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___12_cozmoBot_cpp_fcd62337
