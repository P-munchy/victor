; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\decisiontree_vision.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\decisiontree_vision.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\decisiontree_vision.crf ..\coretech\vision\robot\src\decisionTree_vision.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1EPKviiiPKsS5_iPKti||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded26FiducialMarkerDecisionTreeC2EPKviiiPKsS5_iPKti                  ; Alternate entry point ; Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree__sub_object(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int)
                  _ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1EPKviiiPKsS5_iPKti PROC ; Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree(const void*, int, int, int, const short*, const short*, int, const unsigned short*, int)
;;;20     
;;;21         FiducialMarkerDecisionTree::FiducialMarkerDecisionTree(const void * restrict treeData, const s32 treeDataLength, const s32 treeDataNumFractionalBits, const s32 treeMaxDepth, const s16 * restrict probeXOffsets, const s16 * restrict probeYOffsets, const s32 numProbeOffsets, const u16 * restrict leafLabels, const s32 numLeafLabels)
;;;22           : DecisionTree(treeData, treeDataLength, treeDataNumFractionalBits, treeMaxDepth, leafLabels, numLeafLabels), probeXOffsets(NULL), probeYOffsets(NULL), numProbeOffsets(-1)
;;;23         {
;;;24           AnkiConditionalErrorAndReturn(probeXOffsets != NULL && probeYOffsets != NULL,
;;;25             "FiducialMarkerDecisionTree::FiducialMarkerDecisionTree",
;;;26             "probes are NULL");
;;;27     
;;;28           AnkiConditionalErrorAndReturn(numProbeOffsets > 0,
;;;29             "FiducialMarkerDecisionTree::FiducialMarkerDecisionTree",
;;;30             "numProbeOffsets > 0");
;;;31     
;;;32           this->probeXOffsets = probeXOffsets;
;;;33           this->probeYOffsets = probeYOffsets;
;;;34           this->numProbeOffsets = numProbeOffsets;
;;;35         }
;;;36     
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b084              SUB      sp,sp,#0x10
000006  e9dd580d          LDRD     r5,r8,[sp,#0x34]
00000a  e9dd760b          LDRD     r7,r6,[sp,#0x2c]
00000e  f8ddc03c          LDR      r12,[sp,#0x3c]
000012  9c0a              LDR      r4,[sp,#0x28]
000014  9400              STR      r4,[sp,#0]
000016  e9cd8c01          STRD     r8,r12,[sp,#4]
00001a  f7fffffe          BL       _ZN4Anki8Embedded12DecisionTreeC1EPKviiiPKti ; Anki::Embedded::DecisionTree::DecisionTree(const void*, int, int, int, const unsigned short*, int)
00001e  4604              MOV      r4,r0
000020  2000              MOVS     r0,#0
000022  61a0              STR      r0,[r4,#0x18]
000024  61e0              STR      r0,[r4,#0x1c]
000026  1e40              SUBS     r0,r0,#1
000028  6220              STR      r0,[r4,#0x20]
00002a  4812              LDR      r0,|L1.116|
00002c  2f00              CMP      r7,#0
00002e  bf18              IT       NE
000030  2e00              CMPNE    r6,#0
000032  d012              BEQ      |L1.90|
000034  2d00              CMP      r5,#0
000036  bfc4              ITT      GT
000038  61a7              STRGT    r7,[r4,#0x18]
00003a  e9c46507          STRDGT   r6,r5,[r4,#0x1c]
00003e  dc08              BGT      |L1.82|
000040  211c              MOVS     r1,#0x1c
000042  e9cd0100          STRD     r0,r1,[sp,#0]
000046  a30c              ADR      r3,|L1.120|
000048  a219              ADR      r2,|L1.176|
00004a  a11e              ADR      r1,|L1.196|
00004c  2005              MOVS     r0,#5
00004e  f7fffffe          BL       _Anki_Log
                  |L1.82|
000052  b004              ADD      sp,sp,#0x10
000054  4620              MOV      r0,r4
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L1.90|
00005a  2118              MOVS     r1,#0x18
00005c  e9cd0100          STRD     r0,r1,[sp,#0]
000060  a305              ADR      r3,|L1.120|
000062  a226              ADR      r2,|L1.252|
000064  a117              ADR      r1,|L1.196|
000066  2005              MOVS     r0,#5
000068  f7fffffe          BL       _Anki_Log
00006c  b004              ADD      sp,sp,#0x10
00006e  4620              MOV      r0,r4
000070  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L1.116|
                          DCD      ||.constdata||
                  |L1.120|
000078  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\decisionTree_vision.c"
00007c  6f726574
000080  6563685c
000084  76697369
000088  6f6e5c72
00008c  6f626f74
000090  5c737263
000094  5c646563
000098  6973696f
00009c  6e547265
0000a0  655f7669
0000a4  73696f6e
0000a8  2e63    
0000aa  707000            DCB      "pp",0
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L1.176|
0000b0  6e756d50          DCB      "numProbeOffsets > 0",0
0000b4  726f6265
0000b8  4f666673
0000bc  65747320
0000c0  3e203000
                  |L1.196|
0000c4  46696475          DCB      "FiducialMarkerDecisionTree::FiducialMarkerDecisionTree",0
0000c8  6369616c
0000cc  4d61726b
0000d0  65724465
0000d4  63697369
0000d8  6f6e5472
0000dc  65653a3a
0000e0  46696475
0000e4  6369616c
0000e8  4d61726b
0000ec  65724465
0000f0  63697369
0000f4  6f6e5472
0000f8  656500  
0000fb  00                DCB      0
                  |L1.252|
0000fc  70726f62          DCB      "probes are NULL",0
000100  65732061
000104  7265204e
000108  554c4c00

                          AREA ||i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded26FiducialMarkerDecisionTreeC2Ev                  ; Alternate entry point ; Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree__sub_object()
                  _ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1Ev PROC ; Anki::Embedded::FiducialMarkerDecisionTree::FiducialMarkerDecisionTree()
;;;15       {
;;;16         FiducialMarkerDecisionTree::FiducialMarkerDecisionTree()
;;;17           : DecisionTree(), probeXOffsets(NULL), probeYOffsets(NULL), numProbeOffsets(-1)
;;;18         {
;;;19         }
;;;20     
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded12DecisionTreeC1Ev ; Anki::Embedded::DecisionTree::DecisionTree()
000006  2100              MOVS     r1,#0
000008  6181              STR      r1,[r0,#0x18]
00000a  61c1              STR      r1,[r0,#0x1c]
00000c  1e49              SUBS     r1,r1,#1
00000e  6201              STR      r1,[r0,#0x20]
000010  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree6VerifyERKNS0_5ArrayIhEERKNS2_IfEEhiRb||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded26FiducialMarkerDecisionTree6VerifyERKNS0_5ArrayIhEERKNS2_IfEEhiRb PROC ; Anki::Embedded::FiducialMarkerDecisionTree::Verify(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Array<float>&, unsigned char, int, bool&) const
;;;159    
;;;160        Result FiducialMarkerDecisionTree::Verify(const Array<u8> &image, const Array<f32> &homography,
000000  b570              PUSH     {r4-r6,lr}
;;;161          const u8 meanGrayvalueThreshold, const s32 label,
;;;162          bool &isVerified) const
;;;163        {
000002  b082              SUB      sp,sp,#8
000004  4606              MOV      r6,r0
000006  e9dd5406          LDRD     r5,r4,[sp,#0x18]
;;;164          Result lastResult = RESULT_OK;
;;;165    
;;;166          s32 leafNodeIndex = -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
;;;167          if((lastResult = FindLeaf(image, homography, meanGrayvalueThreshold, leafNodeIndex)) != RESULT_OK)
00000e  9001              STR      r0,[sp,#4]
000010  a801              ADD      r0,sp,#4
000012  9000              STR      r0,[sp,#0]
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       _ZNK4Anki8Embedded26FiducialMarkerDecisionTree8FindLeafERKNS0_5ArrayIhEERKNS2_IfEEhRi ; Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Array<float>&, unsigned char, int&) const
00001a  2800              CMP      r0,#0
;;;168          {
;;;169            return lastResult;
;;;170          }
;;;171    
;;;172          const Node * restrict pTreeData = reinterpret_cast<const Node*>(this->treeData);
;;;173    
;;;174          // The X/Y center members of a node are actually the start/end indexes of
;;;175          // the labels list for leaf nodes.  If they are equal, there is a single
;;;176          // label at this leaf and it is simply stored in the label field.
;;;177          const s16 labelIndexStart = pTreeData[leafNodeIndex].probeXCenter;
;;;178          const s16 labelIndexEnd   = pTreeData[leafNodeIndex].probeYCenter;
;;;179    
;;;180          if(labelIndexStart == labelIndexEnd) {
;;;181            // simple case: the leaf node's label field _is_ the single label
;;;182            const u16 verifyLabel = pTreeData[leafNodeIndex].label & 0x7FFF;
;;;183            isVerified = label == verifyLabel;
;;;184          }
;;;185          else {
;;;186            // Check to see if the given label matches _any_ of the labels
;;;187            // at this leaf node
;;;188            isVerified = false;
;;;189            AnkiAssert(this->leafLabels != NULL);
;;;190            AnkiAssert(labelIndexStart >= 0 && labelIndexEnd <= this->numLeafLabels);
;;;191            const u16  * restrict pLeafLabels = this->leafLabels;
;;;192            for(s32 labelIndex = labelIndexStart; labelIndex < labelIndexEnd; ++labelIndex) {
;;;193              if(label == pLeafLabels[labelIndex]) {
;;;194                isVerified = true;
;;;195                break;
;;;196              }
;;;197            }
;;;198          }
;;;199    
;;;200          return lastResult;
;;;201        } // FiducialMarkerDecisionTree::Verify()
00001c  bf1c              ITT      NE
00001e  b002              ADDNE    sp,sp,#8
000020  bd70              POPNE    {r4-r6,pc}
000022  6832              LDR      r2,[r6,#0]            ;177
000024  9b01              LDR      r3,[sp,#4]            ;177
000026  f9321033          LDRSH    r1,[r2,r3,LSL #3]     ;177
00002a  eb0203c3          ADD      r3,r2,r3,LSL #3       ;178
00002e  f9b32002          LDRSH    r2,[r3,#2]            ;178
000032  4291              CMP      r1,r2                 ;180
000034  d109              BNE      |L3.74|
000036  88d9              LDRH     r1,[r3,#6]            ;182
000038  f3c1010e          UBFX     r1,r1,#0,#15          ;182
00003c  428d              CMP      r5,r1                 ;183
00003e  bf14              ITE      NE                    ;183
000040  2100              MOVNE    r1,#0                 ;183
000042  2101              MOVEQ    r1,#1                 ;183
000044  7021              STRB     r1,[r4,#0]            ;183
000046  b002              ADD      sp,sp,#8
000048  bd70              POP      {r4-r6,pc}
                  |L3.74|
00004a  f04f0300          MOV      r3,#0                 ;188
00004e  7023              STRB     r3,[r4,#0]            ;188
000050  6933              LDR      r3,[r6,#0x10]         ;192
000052  bfa4              ITT      GE
000054  b002              ADDGE    sp,sp,#8
000056  bd70              POPGE    {r4-r6,pc}
                  |L3.88|
000058  f833c011          LDRH     r12,[r3,r1,LSL #1]    ;193
00005c  45ac              CMP      r12,r5                ;193
00005e  d103              BNE      |L3.104|
000060  2101              MOVS     r1,#1                 ;194
000062  7021              STRB     r1,[r4,#0]            ;194
000064  b002              ADD      sp,sp,#8
000066  bd70              POP      {r4-r6,pc}
                  |L3.104|
000068  1c49              ADDS     r1,r1,#1              ;192
00006a  4291              CMP      r1,r2                 ;192
00006c  dbf4              BLT      |L3.88|
00006e  b002              ADD      sp,sp,#8
000070  bd70              POP      {r4-r6,pc}
;;;202    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree7IsValidEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded26FiducialMarkerDecisionTree7IsValidEv PROC ; Anki::Embedded::FiducialMarkerDecisionTree::IsValid() const
;;;202    
;;;203        bool FiducialMarkerDecisionTree::IsValid() const
000000  b510              PUSH     {r4,lr}
;;;204        {
000002  4604              MOV      r4,r0
;;;205          if(DecisionTree::IsValid() == false)
000004  f7fffffe          BL       _ZNK4Anki8Embedded12DecisionTree7IsValidEv ; Anki::Embedded::DecisionTree::IsValid() const
000008  2800              CMP      r0,#0
;;;206            return false;
;;;207    
;;;208          if(!probeXOffsets)
00000a  bf1a              ITTE     NE
00000c  69a0              LDRNE    r0,[r4,#0x18]
00000e  2800              CMPNE    r0,#0
;;;209            return false;
;;;210    
;;;211          if(!probeYOffsets)
;;;212            return false;
;;;213    
;;;214          return true;
;;;215        }
000010  bd10              POPEQ    {r4,pc}
000012  69e0              LDR      r0,[r4,#0x1c]         ;211
000014  2800              CMP      r0,#0                 ;211
000016  bf18              IT       NE                    ;214
000018  2001              MOVNE    r0,#1                 ;214
00001a  bd10              POP      {r4,pc}
;;;216      } // namespace Embedded
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree8ClassifyERKNS0_5ArrayIhEERKNS2_IfEEhRi||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded26FiducialMarkerDecisionTree8ClassifyERKNS0_5ArrayIhEERKNS2_IfEEhRi PROC ; Anki::Embedded::FiducialMarkerDecisionTree::Classify(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Array<float>&, unsigned char, int&) const
;;;126    
;;;127        Result FiducialMarkerDecisionTree::Classify(const Array<u8> &image, const Array<f32> &homography,
000000  b530              PUSH     {r4,r5,lr}
;;;128          const u8 meanGrayvalueThreshold, s32 &label) const
;;;129        {
000002  b083              SUB      sp,sp,#0xc
000004  4605              MOV      r5,r0
;;;130          Result lastResult = RESULT_FAIL;
;;;131    
;;;132          s32 leafNodeIndex = -1;
000006  f04f30ff          MOV      r0,#0xffffffff
;;;133          if((lastResult = FindLeaf(image, homography, meanGrayvalueThreshold, leafNodeIndex)) != RESULT_OK)
00000a  9002              STR      r0,[sp,#8]
00000c  a802              ADD      r0,sp,#8
00000e  9000              STR      r0,[sp,#0]
000010  9c06              LDR      r4,[sp,#0x18]         ;132
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZNK4Anki8Embedded26FiducialMarkerDecisionTree8FindLeafERKNS0_5ArrayIhEERKNS2_IfEEhRi ; Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Array<float>&, unsigned char, int&) const
000018  2800              CMP      r0,#0
;;;134          {
;;;135            return lastResult;
;;;136          }
;;;137    
;;;138          const Node * restrict pTreeData = reinterpret_cast<const Node*>(this->treeData);
;;;139    
;;;140          // The X/Y center members of a node are actually the start/end indexes of
;;;141          // the labels list for leaf nodes.  If they are equal, there is a single
;;;142          // label at this leaf and it is simply stored in the label field.
;;;143          const s16 labelIndexStart = pTreeData[leafNodeIndex].probeXCenter;
;;;144          const s16 labelIndexEnd   = pTreeData[leafNodeIndex].probeYCenter;
;;;145    
;;;146          if(labelIndexStart == labelIndexEnd) {
;;;147            label = pTreeData[leafNodeIndex].label & 0x7FFF;
;;;148            lastResult = RESULT_OK;
;;;149          } else {
;;;150            // We should not be calling classify on a tree that has leaves with
;;;151            // multiple labels! Those are for verifying!
;;;152            AnkiError("FiducialMarkerDecisionTree::Classify",
;;;153              "Classification tree should not have leaves with multiple labels.");
;;;154            lastResult = RESULT_FAIL;
;;;155          }
;;;156    
;;;157          return lastResult;
;;;158        } // FiducialMarkerDecisionTree::Classify()
00001a  bf1c              ITT      NE
00001c  b003              ADDNE    sp,sp,#0xc
00001e  bd30              POPNE    {r4,r5,pc}
000020  6829              LDR      r1,[r5,#0]            ;143
000022  9a02              LDR      r2,[sp,#8]            ;143
000024  f9313032          LDRSH    r3,[r1,r2,LSL #3]     ;143
000028  eb0101c2          ADD      r1,r1,r2,LSL #3       ;144
00002c  f9b12002          LDRSH    r2,[r1,#2]            ;144
000030  4293              CMP      r3,r2                 ;146
000032  d105              BNE      |L5.64|
000034  88c9              LDRH     r1,[r1,#6]            ;147
000036  f3c1010e          UBFX     r1,r1,#0,#15          ;147
00003a  6021              STR      r1,[r4,#0]            ;148
00003c  b003              ADD      sp,sp,#0xc
00003e  bd30              POP      {r4,r5,pc}
                  |L5.64|
000040  4806              LDR      r0,|L5.92|
000042  2198              MOVS     r1,#0x98              ;152
000044  e9cd0100          STRD     r0,r1,[sp,#0]         ;152
000048  f20012d7          ADD      r2,r0,#0x1d7          ;152
00004c  a304              ADR      r3,|L5.96|
00004e  a112              ADR      r1,|L5.152|
000050  2005              MOVS     r0,#5                 ;152
000052  f7fffffe          BL       _Anki_Log
000056  b003              ADD      sp,sp,#0xc
000058  2001              MOVS     r0,#1                 ;154
00005a  bd30              POP      {r4,r5,pc}
;;;159    
                          ENDP

                  |L5.92|
                          DCD      ||.constdata||+0xd5
                  |L5.96|
000060  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\decisionTree_vision.c"
000064  6f726574
000068  6563685c
00006c  76697369
000070  6f6e5c72
000074  6f626f74
000078  5c737263
00007c  5c646563
000080  6973696f
000084  6e547265
000088  655f7669
00008c  73696f6e
000090  2e63    
000092  707000            DCB      "pp",0
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L5.152|
000098  46696475          DCB      "FiducialMarkerDecisionTree::Classify",0
00009c  6369616c
0000a0  4d61726b
0000a4  65724465
0000a8  63697369
0000ac  6f6e5472
0000b0  65653a3a
0000b4  436c6173
0000b8  73696679
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree8FindLeafERKNS0_5ArrayIhEERKNS2_IfEEhRi||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded26FiducialMarkerDecisionTree8FindLeafERKNS0_5ArrayIhEERKNS2_IfEEhRi PROC ; Anki::Embedded::FiducialMarkerDecisionTree::FindLeaf(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Array<float>&, unsigned char, int&) const
;;;36     
;;;37         Result FiducialMarkerDecisionTree::FindLeaf(const Array<u8> &image, const Array<f32> &homography,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;38           const u8 meanGrayvalueThreshold, s32& nodeIndex) const
;;;39         {
000004  461d              MOV      r5,r3
000006  ed2d8b02          VPUSH    {d8}
00000a  b095              SUB      sp,sp,#0x54
00000c  4614              MOV      r4,r2
00000e  4688              MOV      r8,r1
000010  4607              MOV      r7,r0
000012  9e20              LDR      r6,[sp,#0x80]
000014  f7fffffe          BL       _ZNK4Anki8Embedded12DecisionTree7IsValidEv ; Anki::Embedded::DecisionTree::IsValid() const
000018  2800              CMP      r0,#0
00001a  bf1c              ITT      NE
00001c  69b9              LDRNE    r1,[r7,#0x18]
00001e  2900              CMPNE    r1,#0
000020  d07e              BEQ      |L6.288|
000022  69fb              LDR      r3,[r7,#0x1c]
000024  2b00              CMP      r3,#0
000026  bf1c              ITT      NE
000028  f8d80010          LDRNE    r0,[r8,#0x10]
00002c  2800              CMPNE    r0,#0
00002e  d07a              BEQ      |L6.294|
000030  f8d80000          LDR      r0,[r8,#0]
000034  2800              CMP      r0,#0
000036  bfa4              ITT      GE
000038  f8d80004          LDRGE    r0,[r8,#4]
00003c  2800              CMPGE    r0,#0
00003e  db72              BLT      |L6.294|
000040  6920              LDR      r0,[r4,#0x10]
000042  2800              CMP      r0,#0
000044  d06f              BEQ      |L6.294|
000046  6822              LDR      r2,[r4,#0]
000048  2a00              CMP      r2,#0
00004a  bfa4              ITT      GE
00004c  6862              LDRGE    r2,[r4,#4]
00004e  2a00              CMPGE    r2,#0
000050  db69              BLT      |L6.294|
000052  f8d49008          LDR      r9,[r4,#8]
;;;40           const s32 imageHeight = image.get_size(0);
;;;41           const s32 imageWidth = image.get_size(1);
;;;42     
;;;43           AnkiConditionalErrorAndReturnValue(AreValid(*this, image, homography),
;;;44             RESULT_FAIL_INVALID_OBJECT, "FiducialMarkerDecisionTree::Classify", "Invalid objects");
;;;45     
;;;46           // This function is optimized for 9 or fewer probes, but this is not a big issue
;;;47           AnkiAssert(numProbeOffsets <= 9);
;;;48     
;;;49           const s32 numProbeOffsets = this->numProbeOffsets;
;;;50     
;;;51           const f32 h00 = homography[0][0];
000056  2200              MOVS     r2,#0
;;;52           const f32 h10 = homography[1][0];
000058  2401              MOVS     r4,#1
00005a  fb020209          MLA      r2,r2,r9,r0
00005e  fb040409          MLA      r4,r4,r9,r0
;;;53           const f32 h20 = homography[2][0];
000062  f04f0a02          MOV      r10,#2
000066  fb0a0009          MLA      r0,r10,r9,r0
00006a  f8d7c020          LDR      r12,[r7,#0x20]
00006e  ed907a00          VLDR     s14,[r0,#0]
;;;54           const f32 h01 = homography[0][1];
;;;55           const f32 h11 = homography[1][1];
;;;56           const f32 h21 = homography[2][1];
000072  edd05a01          VLDR     s11,[r0,#4]
;;;57           const f32 h02 = homography[0][2];
;;;58           const f32 h12 = homography[1][2];
;;;59           const f32 h22 = homography[2][2];
000076  ed904a02          VLDR     s8,[r0,#8]
00007a  ed928a00          VLDR     s16,[r2,#0]           ;51
00007e  edd47a00          VLDR     s15,[r4,#0]           ;52
000082  edd26a01          VLDR     s13,[r2,#4]           ;54
000086  ed946a01          VLDR     s12,[r4,#4]           ;55
00008a  ed925a02          VLDR     s10,[r2,#8]           ;57
00008e  edd44a02          VLDR     s9,[r4,#8]            ;58
;;;60     
;;;61           const u32 sumGrayvalueThreshold = meanGrayvalueThreshold * numProbeOffsets;
000092  fb05f00c          MUL      r0,r5,r12
;;;62     
;;;63           f32 fixedPointDivider;
;;;64     
;;;65           fixedPointDivider = 1.0f / static_cast<f32>(1 << this->treeDataNumFractionalBits);
000096  9000              STR      r0,[sp,#0]
000098  7a38              LDRB     r0,[r7,#8]
00009a  2201              MOVS     r2,#1
00009c  fa02f000          LSL      r0,r2,r0
0000a0  ee000a10          VMOV     s0,r0
0000a4  eef78a00          VMOV.F32 s17,#1.00000000
;;;66     
;;;67           f32 probeXOffsetsF32[9];
;;;68           f32 probeYOffsetsF32[9];
;;;69     
;;;70           for(s32 iProbe=0; iProbe<numProbeOffsets; iProbe++) {
0000a8  2000              MOVS     r0,#0
0000aa  eeb80ac0          VCVT.F32.S32 s0,s0                 ;65
0000ae  f10d0e2c          ADD      lr,sp,#0x2c           ;67
0000b2  ac02              ADD      r4,sp,#8              ;68
0000b4  f1bc0f00          CMP      r12,#0
0000b8  ee882a80          VDIV.F32 s4,s17,s0             ;65
0000bc  dd1a              BLE      |L6.244|
                  |L6.190|
;;;71             probeXOffsetsF32[iProbe] = static_cast<f32>(this->probeXOffsets[iProbe]) * fixedPointDivider;
0000be  f9312010          LDRSH    r2,[r1,r0,LSL #1]
0000c2  ee002a10          VMOV     s0,r2
0000c6  eb0e0280          ADD      r2,lr,r0,LSL #2
0000ca  eeb80ac0          VCVT.F32.S32 s0,s0
0000ce  ee200a02          VMUL.F32 s0,s0,s4
0000d2  ed820a00          VSTR     s0,[r2,#0]
;;;72             probeYOffsetsF32[iProbe] = static_cast<f32>(this->probeYOffsets[iProbe]) * fixedPointDivider;
0000d6  f9332010          LDRSH    r2,[r3,r0,LSL #1]
0000da  ee002a10          VMOV     s0,r2
0000de  eb040280          ADD      r2,r4,r0,LSL #2
0000e2  1c40              ADDS     r0,r0,#1              ;70
0000e4  eeb80ac0          VCVT.F32.S32 s0,s0
0000e8  4584              CMP      r12,r0                ;70
0000ea  ee200a02          VMUL.F32 s0,s0,s4
0000ee  ed820a00          VSTR     s0,[r2,#0]
0000f2  dce4              BGT      |L6.190|
                  |L6.244|
;;;73           }
;;;74     
;;;75           const Node * restrict pTreeData = reinterpret_cast<const Node*>(this->treeData);
;;;76     
;;;77           nodeIndex = 0;
0000f4  2000              MOVS     r0,#0
0000f6  f8d7b000          LDR      r11,[r7,#0]
;;;78           for(s32 iDepth=0; iDepth<=treeMaxDepth; iDepth++) {
0000fa  4682              MOV      r10,r0
0000fc  6030              STR      r0,[r6,#0]
0000fe  68f8              LDR      r0,[r7,#0xc]
000100  2800              CMP      r0,#0
000102  bfa8              IT       GE
000104  eddf2a4b          VLDRGE   s5,|L6.564|
000108  db7e              BLT      |L6.520|
                  |L6.266|
;;;79             const bool isLeaf = static_cast<bool>(pTreeData[nodeIndex].label & (1<<15));
00010a  6831              LDR      r1,[r6,#0]
00010c  eb0b00c1          ADD      r0,r11,r1,LSL #3
000110  88c2              LDRH     r2,[r0,#6]
000112  0bd2              LSRS     r2,r2,#15
;;;80     
;;;81             if(isLeaf) {
000114  d014              BEQ      |L6.320|
;;;82               return RESULT_OK;
000116  2000              MOVS     r0,#0
                  |L6.280|
;;;83             }
;;;84     
;;;85             const f32 xCenter = static_cast<f32>(pTreeData[nodeIndex].probeXCenter) * fixedPointDivider;
;;;86             const f32 yCenter = static_cast<f32>(pTreeData[nodeIndex].probeYCenter) * fixedPointDivider;
;;;87     
;;;88             u32 accumulator = 0;
;;;89             for(s32 iProbe=0; iProbe<numProbeOffsets; iProbe++) {
;;;90               // 1. Map each probe to its warped locations
;;;91               const f32 x = xCenter + probeXOffsetsF32[iProbe];
;;;92               const f32 y = yCenter + probeYOffsetsF32[iProbe];
;;;93     
;;;94               const f32 homogenousDivisor = 1.0f / (h20*x + h21*y + h22);
;;;95     
;;;96               const f32 warpedXf = (h00 * x + h01 *y + h02) * homogenousDivisor;
;;;97               const f32 warpedYf = (h10 * x + h11 *y + h12) * homogenousDivisor;
;;;98     
;;;99               const s32 warpedX = Round<s32>(warpedXf);
;;;100              const s32 warpedY = Round<s32>(warpedYf);
;;;101    
;;;102              // 2. Sample the image
;;;103    
;;;104              // This should only fail if there's a bug in the quad extraction
;;;105              AnkiAssert(warpedY >= 0  && warpedX >= 0 && warpedY < imageHeight && warpedX < imageWidth);
;;;106    
;;;107              const u8 imageValue = *image.Pointer(warpedY, warpedX);
;;;108    
;;;109              accumulator += imageValue;
;;;110            } // for(s32 iProbe=0; iProbe<numProbeOffsets; iProbe++)
;;;111    
;;;112            // If the point is black, go to the left child
;;;113            // If the point is white, go to the right child
;;;114            if(accumulator <= sumGrayvalueThreshold) {
;;;115              nodeIndex = pTreeData[nodeIndex].leftChildIndex;
;;;116            } else {
;;;117              nodeIndex = pTreeData[nodeIndex].leftChildIndex + 1;
;;;118            }
;;;119          } // for(s32 iDepth=0; iDepth<treeMaxDepth; iDepth++)
;;;120    
;;;121          AnkiError("FiducialMarkerDecisionTree::Classify", "Decision tree ran out of bounds");
;;;122    
;;;123          // If this is reached, we ran out of tree to query
;;;124          return RESULT_FAIL;
;;;125        } // FiducialMarkerDecisionTree::FindLeaf()
000118  b015              ADD      sp,sp,#0x54
00011a  ecbd8b02          VPOP     {d8}
00011e  e000              B        |L6.290|
                  |L6.288|
000120  e001              B        |L6.294|
                  |L6.290|
000122  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.294|
000126  212b              MOVS     r1,#0x2b              ;43
000128  4843              LDR      r0,|L6.568|
00012a  e9cd0100          STRD     r0,r1,[sp,#0]         ;43
00012e  a343              ADR      r3,|L6.572|
000130  a250              ADR      r2,|L6.628|
000132  a154              ADR      r1,|L6.644|
000134  2005              MOVS     r0,#5                 ;43
000136  f7fffffe          BL       _Anki_Log
00013a  f04f6080          MOV      r0,#0x4000000         ;43
00013e  e7eb              B        |L6.280|
                  |L6.320|
000140  f93b1031          LDRSH    r1,[r11,r1,LSL #3]    ;85
000144  2300              MOVS     r3,#0                 ;88
000146  ee001a10          VMOV     s0,r1                 ;85
00014a  f9b01002          LDRSH    r1,[r0,#2]            ;86
00014e  461a              MOV      r2,r3                 ;89
000150  eeb80ac0          VCVT.F32.S32 s0,s0                 ;85
000154  f1bc0f00          CMP      r12,#0                ;89
000158  ee603a02          VMUL.F32 s7,s0,s4              ;85
00015c  ee001a10          VMOV     s0,r1                 ;86
000160  eeb80ac0          VCVT.F32.S32 s0,s0                 ;86
000164  ee203a02          VMUL.F32 s6,s0,s4              ;86
000168  bfc4              ITT      GT                    ;86
00016a  f8d89008          LDRGT    r9,[r8,#8]            ;86
00016e  f8d81010          LDRGT    r1,[r8,#0x10]         ;86
000172  dd45              BLE      |L6.512|
                  |L6.372|
000174  eb0e0482          ADD      r4,lr,r2,LSL #2       ;91
000178  ed940a00          VLDR     s0,[r4,#0]            ;91
00017c  ac02              ADD      r4,sp,#8              ;92
00017e  eb040482          ADD      r4,r4,r2,LSL #2       ;92
000182  ee301a23          VADD.F32 s2,s0,s7              ;91
000186  ed940a00          VLDR     s0,[r4,#0]            ;92
00018a  ee700a03          VADD.F32 s1,s0,s6              ;92
00018e  ee270a01          VMUL.F32 s0,s14,s2             ;94
000192  ee050aa0          VMLA.F32 s0,s11,s1             ;94
000196  ee300a04          VADD.F32 s0,s0,s8              ;94
00019a  eec81a80          VDIV.F32 s3,s17,s0             ;94
00019e  ee280a01          VMUL.F32 s0,s16,s2             ;96
0001a2  ee271a81          VMUL.F32 s2,s15,s2             ;97
0001a6  ee060aa0          VMLA.F32 s0,s13,s1             ;96
0001aa  ee061a20          VMLA.F32 s2,s12,s1             ;97
0001ae  ee300a05          VADD.F32 s0,s0,s10             ;96
0001b2  ee710a24          VADD.F32 s1,s2,s9              ;97
0001b6  ee200a21          VMUL.F32 s0,s0,s3              ;96
0001ba  ee600aa1          VMUL.F32 s1,s1,s3              ;97
0001be  eeb50ac0          VCMPE.F32 s0,#0.0               ;97
0001c2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;97
0001c6  bfcc              ITE      GT                    ;97
0001c8  ee300a22          VADDGT.F32 s0,s0,s5              ;97
0001cc  ee300a62          VSUBLE.F32 s0,s0,s5              ;97
0001d0  eebd0ac0          VCVT.S32.F32 s0,s0                 ;97
0001d4  eef50ac0          VCMPE.F32 s1,#0.0               ;97
0001d8  ee104a10          VMOV     r4,s0                 ;97
0001dc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;97
0001e0  bfcc              ITE      GT                    ;97
0001e2  ee300aa2          VADDGT.F32 s0,s1,s5              ;97
0001e6  ee300ae2          VSUBLE.F32 s0,s1,s5              ;97
0001ea  eebd0ac0          VCVT.S32.F32 s0,s0                 ;97
0001ee  1c52              ADDS     r2,r2,#1              ;89
0001f0  4562              CMP      r2,r12                ;89
0001f2  ee105a10          VMOV     r5,s0                 ;89
0001f6  fb051509          MLA      r5,r5,r9,r1           ;89
0001fa  5d2c              LDRB     r4,[r5,r4]            ;107
0001fc  4423              ADD      r3,r3,r4              ;109
0001fe  dbb9              BLT      |L6.372|
                  |L6.512|
000200  9900              LDR      r1,[sp,#0]            ;114
000202  8880              LDRH     r0,[r0,#4]            ;117
000204  428b              CMP      r3,r1                 ;114
000206  e000              B        |L6.522|
                  |L6.520|
000208  e008              B        |L6.540|
                  |L6.522|
00020a  bf88              IT       HI                    ;117
00020c  1c40              ADDHI    r0,r0,#1              ;117
00020e  f10a0a01          ADD      r10,r10,#1            ;78
000212  6030              STR      r0,[r6,#0]            ;78
000214  68f8              LDR      r0,[r7,#0xc]          ;78
000216  4550              CMP      r0,r10                ;78
000218  f6bfaf77          BGE      |L6.266|
                  |L6.540|
00021c  2179              MOVS     r1,#0x79              ;121
00021e  4806              LDR      r0,|L6.568|
000220  e9cd0100          STRD     r0,r1,[sp,#0]         ;121
000224  a305              ADR      r3,|L6.572|
000226  a221              ADR      r2,|L6.684|
000228  a116              ADR      r1,|L6.644|
00022a  2005              MOVS     r0,#5                 ;121
00022c  f7fffffe          BL       _Anki_Log
000230  2001              MOVS     r0,#1                 ;124
000232  e771              B        |L6.280|
;;;126    
                          ENDP

                  |L6.564|
000234  3f000000          DCFS     0x3f000000 ; 0.5
                  |L6.568|
                          DCD      ||.constdata||+0x18e
                  |L6.572|
00023c  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\decisionTree_vision.c"
000240  6f726574
000244  6563685c
000248  76697369
00024c  6f6e5c72
000250  6f626f74
000254  5c737263
000258  5c646563
00025c  6973696f
000260  6e547265
000264  655f7669
000268  73696f6e
00026c  2e63    
00026e  707000            DCB      "pp",0
000271  00                DCB      0
000272  00                DCB      0
000273  00                DCB      0
                  |L6.628|
000274  496e7661          DCB      "Invalid objects",0
000278  6c696420
00027c  6f626a65
000280  63747300
                  |L6.644|
000284  46696475          DCB      "FiducialMarkerDecisionTree::Classify",0
000288  6369616c
00028c  4d61726b
000290  65724465
000294  63697369
000298  6f6e5472
00029c  65653a3a
0002a0  436c6173
0002a4  73696679
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L6.684|
0002ac  44656369          DCB      "Decision tree ran out of bounds",0
0002b0  73696f6e
0002b4  20747265
0002b8  65207261
0002bc  6e206f75
0002c0  74206f66
0002c4  20626f75
0002c8  6e647300

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1EPKviiiPKsS5_iPKti||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded26FiducialMarkerDecisionTreeC1EPKviiiPKsS5_iPKti||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree7IsValidEv||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree8FindLeafERKNS0_5ArrayIhEERKNS2_IfEEhRi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree8FindLeafERKNS0_5ArrayIhEERKNS2_IfEEhRi||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree8ClassifyERKNS0_5ArrayIhEERKNS2_IfEEhRi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree8ClassifyERKNS0_5ArrayIhEERKNS2_IfEEhRi||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree6VerifyERKNS0_5ArrayIhEERKNS2_IfEEhiRb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded26FiducialMarkerDecisionTree6VerifyERKNS0_5ArrayIhEERKNS2_IfEEhiRb||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  46696475          DCB      0x46,0x69,0x64,0x75
000014  6369616c          DCB      0x63,0x69,0x61,0x6c
000018  4d61726b          DCB      0x4d,0x61,0x72,0x6b
00001c  65724465          DCB      0x65,0x72,0x44,0x65
000020  63697369          DCB      0x63,0x69,0x73,0x69
000024  6f6e5472          DCB      0x6f,0x6e,0x54,0x72
000028  65653a3a          DCB      0x65,0x65,0x3a,0x3a
00002c  46696475          DCB      0x46,0x69,0x64,0x75
000030  6369616c          DCB      0x63,0x69,0x61,0x6c
000034  4d61726b          DCB      0x4d,0x61,0x72,0x6b
000038  65724465          DCB      0x65,0x72,0x44,0x65
00003c  63697369          DCB      0x63,0x69,0x73,0x69
000040  6f6e5472          DCB      0x6f,0x6e,0x54,0x72
000044  65652863          DCB      0x65,0x65,0x28,0x63
000048  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00004c  20766f69          DCB      0x20,0x76,0x6f,0x69
000050  64202a2c          DCB      0x64,0x20,0x2a,0x2c
000054  20736967          DCB      0x20,0x73,0x69,0x67
000058  6e656420          DCB      0x6e,0x65,0x64,0x20
00005c  696e742c          DCB      0x69,0x6e,0x74,0x2c
000060  20736967          DCB      0x20,0x73,0x69,0x67
000064  6e656420          DCB      0x6e,0x65,0x64,0x20
000068  696e742c          DCB      0x69,0x6e,0x74,0x2c
00006c  20736967          DCB      0x20,0x73,0x69,0x67
000070  6e656420          DCB      0x6e,0x65,0x64,0x20
000074  696e742c          DCB      0x69,0x6e,0x74,0x2c
000078  20636f6e          DCB      0x20,0x63,0x6f,0x6e
00007c  73742073          DCB      0x73,0x74,0x20,0x73
000080  69676e65          DCB      0x69,0x67,0x6e,0x65
000084  64207368          DCB      0x64,0x20,0x73,0x68
000088  6f727420          DCB      0x6f,0x72,0x74,0x20
00008c  2a2c2063          DCB      0x2a,0x2c,0x20,0x63
000090  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000094  20736967          DCB      0x20,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  73686f72          DCB      0x73,0x68,0x6f,0x72
0000a0  74202a2c          DCB      0x74,0x20,0x2a,0x2c
0000a4  20736967          DCB      0x20,0x73,0x69,0x67
0000a8  6e656420          DCB      0x6e,0x65,0x64,0x20
0000ac  696e742c          DCB      0x69,0x6e,0x74,0x2c
0000b0  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0000b4  73742075          DCB      0x73,0x74,0x20,0x75
0000b8  6e736967          DCB      0x6e,0x73,0x69,0x67
0000bc  6e656420          DCB      0x6e,0x65,0x64,0x20
0000c0  73686f72          DCB      0x73,0x68,0x6f,0x72
0000c4  74202a2c          DCB      0x74,0x20,0x2a,0x2c
0000c8  20736967          DCB      0x20,0x73,0x69,0x67
0000cc  6e656420          DCB      0x6e,0x65,0x64,0x20
0000d0  696e7429          DCB      0x69,0x6e,0x74,0x29
0000d4  00                DCB      0x00
                  |symbol_number.20|
0000d5  416e6b            DCB      0x41,0x6e,0x6b
0000d8  693a3a52          DCB      0x69,0x3a,0x3a,0x52
0000dc  6573756c          DCB      0x65,0x73,0x75,0x6c
0000e0  7420416e          DCB      0x74,0x20,0x41,0x6e
0000e4  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000e8  456d6265          DCB      0x45,0x6d,0x62,0x65
0000ec  64646564          DCB      0x64,0x64,0x65,0x64
0000f0  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
0000f4  64756369          DCB      0x64,0x75,0x63,0x69
0000f8  616c4d61          DCB      0x61,0x6c,0x4d,0x61
0000fc  726b6572          DCB      0x72,0x6b,0x65,0x72
000100  44656369          DCB      0x44,0x65,0x63,0x69
000104  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000108  54726565          DCB      0x54,0x72,0x65,0x65
00010c  3a3a436c          DCB      0x3a,0x3a,0x43,0x6c
000110  61737369          DCB      0x61,0x73,0x73,0x69
000114  66792863          DCB      0x66,0x79,0x28,0x63
000118  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00011c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000120  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000124  6d626564          DCB      0x6d,0x62,0x65,0x64
000128  6465643a          DCB      0x64,0x65,0x64,0x3a
00012c  3a417272          DCB      0x3a,0x41,0x72,0x72
000130  61793c75          DCB      0x61,0x79,0x3c,0x75
000134  6e736967          DCB      0x6e,0x73,0x69,0x67
000138  6e656420          DCB      0x6e,0x65,0x64,0x20
00013c  63686172          DCB      0x63,0x68,0x61,0x72
000140  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000144  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000148  73742041          DCB      0x73,0x74,0x20,0x41
00014c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000150  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000154  65646465          DCB      0x65,0x64,0x64,0x65
000158  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00015c  72726179          DCB      0x72,0x72,0x61,0x79
000160  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
000164  61743e20          DCB      0x61,0x74,0x3e,0x20
000168  262c2075          DCB      0x26,0x2c,0x20,0x75
00016c  6e736967          DCB      0x6e,0x73,0x69,0x67
000170  6e656420          DCB      0x6e,0x65,0x64,0x20
000174  63686172          DCB      0x63,0x68,0x61,0x72
000178  2c207369          DCB      0x2c,0x20,0x73,0x69
00017c  676e6564          DCB      0x67,0x6e,0x65,0x64
000180  20696e74          DCB      0x20,0x69,0x6e,0x74
000184  20262920          DCB      0x20,0x26,0x29,0x20
000188  636f6e73          DCB      0x63,0x6f,0x6e,0x73
00018c  7400              DCB      0x74,0x00
                  |symbol_number.21|
00018e  416e              DCB      0x41,0x6e
000190  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000194  52657375          DCB      0x52,0x65,0x73,0x75
000198  6c742041          DCB      0x6c,0x74,0x20,0x41
00019c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0001a0  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0001a4  65646465          DCB      0x65,0x64,0x64,0x65
0001a8  643a3a46          DCB      0x64,0x3a,0x3a,0x46
0001ac  69647563          DCB      0x69,0x64,0x75,0x63
0001b0  69616c4d          DCB      0x69,0x61,0x6c,0x4d
0001b4  61726b65          DCB      0x61,0x72,0x6b,0x65
0001b8  72446563          DCB      0x72,0x44,0x65,0x63
0001bc  6973696f          DCB      0x69,0x73,0x69,0x6f
0001c0  6e547265          DCB      0x6e,0x54,0x72,0x65
0001c4  653a3a46          DCB      0x65,0x3a,0x3a,0x46
0001c8  696e644c          DCB      0x69,0x6e,0x64,0x4c
0001cc  65616628          DCB      0x65,0x61,0x66,0x28
0001d0  636f6e73          DCB      0x63,0x6f,0x6e,0x73
0001d4  7420416e          DCB      0x74,0x20,0x41,0x6e
0001d8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0001dc  456d6265          DCB      0x45,0x6d,0x62,0x65
0001e0  64646564          DCB      0x64,0x64,0x65,0x64
0001e4  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
0001e8  7261793c          DCB      0x72,0x61,0x79,0x3c
0001ec  756e7369          DCB      0x75,0x6e,0x73,0x69
0001f0  676e6564          DCB      0x67,0x6e,0x65,0x64
0001f4  20636861          DCB      0x20,0x63,0x68,0x61
0001f8  723e2026          DCB      0x72,0x3e,0x20,0x26
0001fc  2c20636f          DCB      0x2c,0x20,0x63,0x6f
000200  6e737420          DCB      0x6e,0x73,0x74,0x20
000204  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000208  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00020c  62656464          DCB      0x62,0x65,0x64,0x64
000210  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000214  41727261          DCB      0x41,0x72,0x72,0x61
000218  793c666c          DCB      0x79,0x3c,0x66,0x6c
00021c  6f61743e          DCB      0x6f,0x61,0x74,0x3e
000220  20262c20          DCB      0x20,0x26,0x2c,0x20
000224  756e7369          DCB      0x75,0x6e,0x73,0x69
000228  676e6564          DCB      0x67,0x6e,0x65,0x64
00022c  20636861          DCB      0x20,0x63,0x68,0x61
000230  722c2073          DCB      0x72,0x2c,0x20,0x73
000234  69676e65          DCB      0x69,0x67,0x6e,0x65
000238  6420696e          DCB      0x64,0x20,0x69,0x6e
00023c  74202629          DCB      0x74,0x20,0x26,0x29
000240  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000244  73740000          DCB      0x73,0x74,0x00,0x00
000248  41727261          DCB      0x41,0x72,0x72,0x61
00024c  793c5479          DCB      0x79,0x3c,0x54,0x79
000250  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000254  3a676574          DCB      0x3a,0x67,0x65,0x74
000258  5f73697a          DCB      0x5f,0x73,0x69,0x7a
00025c  65000000          DCB      0x65,0x00,0x00,0x00
000260  4e656761          DCB      0x4e,0x65,0x67,0x61
000264  74697665          DCB      0x74,0x69,0x76,0x65
000268  2064696d          DCB      0x20,0x64,0x69,0x6d
00026c  656e7369          DCB      0x65,0x6e,0x73,0x69
000270  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000274  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000278  6f726574          DCB      0x6f,0x72,0x65,0x74
00027c  6563685c          DCB      0x65,0x63,0x68,0x5c
000280  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000284  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000288  6e636c75          DCB      0x6e,0x63,0x6c,0x75
00028c  64655c61          DCB      0x64,0x65,0x5c,0x61
000290  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000294  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000298  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
00029c  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0002a0  2f617272          DCB      0x2f,0x61,0x72,0x72
0002a4  61793264          DCB      0x61,0x79,0x32,0x64
0002a8  2e680000          DCB      0x2e,0x68,0x00,0x00
0002ac  436c6173          DCB      0x43,0x6c,0x61,0x73
0002b0  73696669          DCB      0x73,0x69,0x66,0x69
0002b4  63617469          DCB      0x63,0x61,0x74,0x69
0002b8  6f6e2074          DCB      0x6f,0x6e,0x20,0x74
0002bc  72656520          DCB      0x72,0x65,0x65,0x20
0002c0  73686f75          DCB      0x73,0x68,0x6f,0x75
0002c4  6c64206e          DCB      0x6c,0x64,0x20,0x6e
0002c8  6f742068          DCB      0x6f,0x74,0x20,0x68
0002cc  61766520          DCB      0x61,0x76,0x65,0x20
0002d0  6c656176          DCB      0x6c,0x65,0x61,0x76
0002d4  65732077          DCB      0x65,0x73,0x20,0x77
0002d8  69746820          DCB      0x69,0x74,0x68,0x20
0002dc  6d756c74          DCB      0x6d,0x75,0x6c,0x74
0002e0  69706c65          DCB      0x69,0x70,0x6c,0x65
0002e4  206c6162          DCB      0x20,0x6c,0x61,0x62
0002e8  656c732e          DCB      0x65,0x6c,0x73,0x2e
0002ec  00                DCB      0x00
