; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\detectfiducialmarkers.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\detectfiducialmarkers.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\detectfiducialmarkers.crf ..\coretech\vision\robot\src\detectFiducialMarkers.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded21DetectFiducialMarkersERKNS0_5ArrayIhEERNS0_15FixedLengthListINS0_12VisionMarkerEEERNS5_INS1_IfEEEEiissiiiifiiifiiiiffbNS0_11MemoryStackESC_SC_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded21DetectFiducialMarkersERKNS0_5ArrayIhEERNS0_15FixedLengthListINS0_12VisionMarkerEEERNS5_INS1_IfEEEEiissiiiifiiifiiiiffbNS0_11MemoryStackESC_SC_ PROC ; Anki::Embedded::DetectFiducialMarkers(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::FixedLengthList<Anki::Embedded::VisionMarker>&, Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>&, int, int, short, short, int, int, int, int, float, int, int, int, float, int, int, int, int, float, float, bool, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
;;;25       {
;;;26         Result DetectFiducialMarkers(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;27           const Array<u8> &image,
;;;28           FixedLengthList<VisionMarker> &markers,
;;;29           FixedLengthList<Array<f32> > &homographies,
;;;30           const s32 scaleImage_numPyramidLevels, const s32 scaleImage_thresholdMultiplier,
;;;31           const s16 component1d_minComponentWidth, const s16 component1d_maxSkipDistance,
;;;32           const s32 component_minimumNumPixels, const s32 component_maximumNumPixels,
;;;33           const s32 component_sparseMultiplyThreshold, const s32 component_solidMultiplyThreshold,
;;;34           const f32 component_minHollowRatio,
;;;35           const s32 quads_minQuadArea, const s32 quads_quadSymmetryThreshold, const s32 quads_minDistanceFromImageEdge,
;;;36           const f32 decode_minContrastRatio,
;;;37           const s32 maxConnectedComponentSegments,
;;;38           const s32 maxExtractedQuads,
;;;39           const s32 refine_quadRefinementIterations,
;;;40           const s32 refine_numRefinementSamples,
;;;41           const f32 refine_quadRefinementMaxCornerChange,
;;;42           const f32 refine_quadRefinementMinCornerChange,
;;;43           const bool returnInvalidMarkers,
;;;44           MemoryStack scratchCcm,
;;;45           MemoryStack scratchOnchip,
;;;46           MemoryStack scratchOffChip)
;;;47         {
000004  4615              MOV      r5,r2
000006  ed2d0b04          VPUSH    {d0-d1}
00000a  460c              MOV      r4,r1
00000c  4683              MOV      r11,r0
00000e  ed2d8b04          VPUSH    {d8-d9}
000012  f2ad5d1c          SUB      sp,sp,#0x51c
000016  eeb08a61          VMOV.F32 s16,s3
00001a  eef08a41          VMOV.F32 s17,s2
00001e  eeb09a60          VMOV.F32 s18,s1
000022  eef09a40          VMOV.F32 s19,s0
;;;48           const f32 maxProjectiveTermValue = 8.0f;
;;;49     
;;;50           Result lastResult;
;;;51     
;;;52           BeginBenchmark("DetectFiducialMarkers");
000026  a0fe              ADR      r0,|L1.1056|
000028  f8dd6598          LDR      r6,[sp,#0x598]
00002c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;53     
;;;54           const s32 imageHeight = image.get_size(0);
000030  f8db0000          LDR      r0,[r11,#0]
000034  f8cd0510          STR      r0,[sp,#0x510]
000038  f8db1010          LDR      r1,[r11,#0x10]
00003c  f8db8004          LDR      r8,[r11,#4]
000040  2900              CMP      r1,#0
000042  d061              BEQ      |L1.264|
000044  2800              CMP      r0,#0
000046  bfa8              IT       GE
000048  f1b80f00          CMPGE    r8,#0
00004c  db5c              BLT      |L1.264|
00004e  68e1              LDR      r1,[r4,#0xc]
000050  69e0              LDR      r0,[r4,#0x1c]
000052  4288              CMP      r0,r1
000054  db58              BLT      |L1.264|
000056  6aa1              LDR      r1,[r4,#0x28]
000058  b129              CBZ      r1,|L1.102|
00005a  69a1              LDR      r1,[r4,#0x18]
00005c  2900              CMP      r1,#0
00005e  bfa4              ITT      GE
000060  2800              CMPGE    r0,#0
000062  2001              MOVGE    r0,#1
000064  da00              BGE      |L1.104|
                  |L1.102|
000066  2000              MOVS     r0,#0
                  |L1.104|
;;;55           const s32 imageWidth = image.get_size(1);
;;;56     
;;;57           AnkiConditionalErrorAndReturnValue(image.IsValid() && markers.IsValid() && homographies.IsValid() && scratchOffChip.IsValid() && scratchOnchip.IsValid() && scratchCcm.IsValid(),
000068  2800              CMP      r0,#0
00006a  d04d              BEQ      |L1.264|
00006c  68e9              LDR      r1,[r5,#0xc]
00006e  69e8              LDR      r0,[r5,#0x1c]
000070  4281              CMP      r1,r0
000072  dc49              BGT      |L1.264|
000074  6aa9              LDR      r1,[r5,#0x28]
000076  b129              CBZ      r1,|L1.132|
000078  69a9              LDR      r1,[r5,#0x18]
00007a  2900              CMP      r1,#0
00007c  bfa4              ITT      GE
00007e  2800              CMPGE    r0,#0
000080  2001              MOVGE    r0,#1
000082  da00              BGE      |L1.134|
                  |L1.132|
000084  2000              MOVS     r0,#0
                  |L1.134|
000086  2800              CMP      r0,#0
000088  d03e              BEQ      |L1.264|
00008a  f8dd05b4          LDR      r0,[sp,#0x5b4]
00008e  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000092  2800              CMP      r0,#0
000094  d038              BEQ      |L1.264|
000096  f8dd05b0          LDR      r0,[sp,#0x5b0]
00009a  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
00009e  2800              CMP      r0,#0
0000a0  d032              BEQ      |L1.264|
0000a2  f8dd05ac          LDR      r0,[sp,#0x5ac]
0000a6  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
0000aa  2800              CMP      r0,#0
0000ac  d02c              BEQ      |L1.264|
;;;58             RESULT_FAIL_INVALID_OBJECT, "DetectFiducialMarkers", "Some input is invalid");
;;;59     
;;;60           // On the robot, we don't have enough memory for resolutions over QVGA
;;;61           if(scratchOffChip.get_totalBytes() < 1000000 && scratchOnchip.get_totalBytes() < 1000000 && scratchCcm.get_totalBytes() < 1000000) {
0000ae  f8dd05b4          LDR      r0,[sp,#0x5b4]
0000b2  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack14get_totalBytesEv ; Anki::Embedded::MemoryStack::get_totalBytes() const
0000b6  4fe0              LDR      r7,|L1.1080|
0000b8  42b8              CMP      r0,r7
0000ba  da43              BGE      |L1.324|
0000bc  f8dd05b0          LDR      r0,[sp,#0x5b0]
0000c0  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack14get_totalBytesEv ; Anki::Embedded::MemoryStack::get_totalBytes() const
0000c4  42b8              CMP      r0,r7
0000c6  da3d              BGE      |L1.324|
0000c8  f8dd05ac          LDR      r0,[sp,#0x5ac]
0000cc  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack14get_totalBytesEv ; Anki::Embedded::MemoryStack::get_totalBytes() const
0000d0  4287              CMP      r7,r0
0000d2  dd37              BLE      |L1.324|
;;;62             AnkiConditionalErrorAndReturnValue(imageHeight <= 240 && imageWidth <= 320,
0000d4  f8dd0510          LDR      r0,[sp,#0x510]
0000d8  28f0              CMP      r0,#0xf0
0000da  bfd8              IT       LE
0000dc  f5b87fa0          CMPLE    r8,#0x140
0000e0  dd1f              BLE      |L1.290|
0000e2  213e              MOVS     r1,#0x3e
0000e4  48d5              LDR      r0,|L1.1084|
0000e6  e9cd0100          STRD     r0,r1,[sp,#0]
0000ea  a3d5              ADR      r3,|L1.1088|
0000ec  a2e2              ADR      r2,|L1.1144|
0000ee  a1cc              ADR      r1,|L1.1056|
0000f0  2005              MOVS     r0,#5
0000f2  f7fffffe          BL       _Anki_Log
0000f6  f04f60a0          MOV      r0,#0x5000000
                  |L1.250|
;;;63               RESULT_FAIL_INVALID_SIZE, "DetectFiducialMarkers", "The image is too large to test");
;;;64     
;;;65             AnkiConditionalErrorAndReturnValue(scaleImage_numPyramidLevels <= 3,
;;;66               RESULT_FAIL_INVALID_SIZE, "DetectFiducialMarkers", "Only 3 pyramid levels are supported");
;;;67           }
;;;68     
;;;69           BeginBenchmark("ExtractComponentsViaCharacteristicScale");
;;;70     
;;;71           ConnectedComponents extractedComponents;
;;;72           if(maxConnectedComponentSegments <= u16_MAX) {
;;;73             extractedComponents = ConnectedComponents(maxConnectedComponentSegments, imageWidth, true, scratchOffChip);
;;;74           } else {
;;;75             extractedComponents = ConnectedComponents(maxConnectedComponentSegments, imageWidth, false, scratchOffChip);
;;;76           }
;;;77     
;;;78           AnkiConditionalErrorAndReturnValue(extractedComponents.IsValid(),
;;;79             RESULT_FAIL_OUT_OF_MEMORY, "DetectFiducialMarkers", "extractedComponents could not be allocated");
;;;80     
;;;81           FixedLengthList<s32> filterHalfWidths(scaleImage_numPyramidLevels+2, scratchOnchip, Flags::Buffer(false, false, true));
;;;82     
;;;83           AnkiConditionalErrorAndReturnValue(filterHalfWidths.IsValid(),
;;;84             RESULT_FAIL_OUT_OF_MEMORY, "DetectFiducialMarkers", "filterHalfWidths could not be allocated");
;;;85     
;;;86           for(s32 i=0; i<(scaleImage_numPyramidLevels+2); i++) {
;;;87             filterHalfWidths[i] = 1 << (i);
;;;88           }
;;;89     
;;;90           //const s32 halfWidthData[] = {1,2,3,4,6,8,12,16};
;;;91           //for(s32 i=0; i<8; i++) {
;;;92           //  filterHalfWidths[i] = halfWidthData[i];
;;;93           //}
;;;94     
;;;95           // 1. Compute the Scale image
;;;96           // 2. Binarize the Scale image
;;;97           // 3. Compute connected components from the binary image
;;;98           if((lastResult = ExtractComponentsViaCharacteristicScale(
;;;99             image,
;;;100            filterHalfWidths, scaleImage_thresholdMultiplier,
;;;101            component1d_minComponentWidth, component1d_maxSkipDistance,
;;;102            extractedComponents,
;;;103            scratchCcm, scratchOnchip, scratchOffChip)) != RESULT_OK)
;;;104          {
;;;105            /* // DEBUG: drop a display of extracted components into matlab
;;;106            Embedded::Matlab matlab(false);
;;;107            matlab.PutArray(image, "image");
;;;108            Array<u8> empty(image.get_size(0), image.get_size(1), scratchOnchip);
;;;109            Embedded::DrawComponents<u8>(empty, extractedComponents, 64, 255);
;;;110            matlab.PutArray(empty, "empty");
;;;111            matlab.EvalStringEcho("desktop; keyboard");
;;;112            */
;;;113            return lastResult;
;;;114          }
;;;115    
;;;116    #ifdef SHOW_DRAWN_COMPONENTS
;;;117          {
;;;118            const s32 bigScratchSize = 1024 + image.get_size(0) * RoundUp<s32>(image.get_size(1), MEMORY_ALIGNMENT);
;;;119            MemoryStack bigScratch(malloc(bigScratchSize), bigScratchSize);
;;;120            Array<u8> empty(image.get_size(0), image.get_size(1), bigScratch);
;;;121            Embedded::DrawComponents<u8>(empty, extractedComponents, 64, 255);
;;;122            image.Show("image", false, false, true);
;;;123            empty.Show("components orig", false, false, true);
;;;124            free(bigScratch.get_buffer());
;;;125          }
;;;126    #endif
;;;127    
;;;128          EndBenchmark("ExtractComponentsViaCharacteristicScale");
;;;129    
;;;130          { // 3b. Remove poor components
;;;131            BeginBenchmark("CompressConnectedComponentSegmentIds1");
;;;132            extractedComponents.CompressConnectedComponentSegmentIds(scratchOnchip);
;;;133            EndBenchmark("CompressConnectedComponentSegmentIds1");
;;;134    
;;;135            BeginBenchmark("InvalidateSmallOrLargeComponents");
;;;136            if((lastResult = extractedComponents.InvalidateSmallOrLargeComponents(component_minimumNumPixels, component_maximumNumPixels, scratchOnchip)) != RESULT_OK)
;;;137              return lastResult;
;;;138            EndBenchmark("InvalidateSmallOrLargeComponents");
;;;139    
;;;140            BeginBenchmark("CompressConnectedComponentSegmentIds2");
;;;141            extractedComponents.CompressConnectedComponentSegmentIds(scratchOnchip);
;;;142            EndBenchmark("CompressConnectedComponentSegmentIds2");
;;;143    
;;;144            BeginBenchmark("InvalidateSolidOrSparseComponents");
;;;145            if((lastResult = extractedComponents.InvalidateSolidOrSparseComponents(component_sparseMultiplyThreshold, component_solidMultiplyThreshold, scratchOnchip)) != RESULT_OK)
;;;146              return lastResult;
;;;147            EndBenchmark("InvalidateSolidOrSparseComponents");
;;;148    
;;;149            BeginBenchmark("CompressConnectedComponentSegmentIds3");
;;;150            extractedComponents.CompressConnectedComponentSegmentIds(scratchOnchip);
;;;151            EndBenchmark("CompressConnectedComponentSegmentIds3");
;;;152    
;;;153            BeginBenchmark("InvalidateFilledCenterComponents_hollowRows");
;;;154            if((lastResult = extractedComponents.InvalidateFilledCenterComponents_hollowRows(component_minHollowRatio, scratchOnchip)) != RESULT_OK)
;;;155              return lastResult;
;;;156            EndBenchmark("InvalidateFilledCenterComponents_hollowRows");
;;;157    
;;;158            BeginBenchmark("CompressConnectedComponentSegmentIds4");
;;;159            extractedComponents.CompressConnectedComponentSegmentIds(scratchOnchip);
;;;160            EndBenchmark("CompressConnectedComponentSegmentIds4");
;;;161    
;;;162            BeginBenchmark("SortConnectedComponentSegmentsById");
;;;163            extractedComponents.SortConnectedComponentSegmentsById(scratchOnchip);
;;;164            EndBenchmark("SortConnectedComponentSegmentsById");
;;;165          } // 3b. Remove poor components
;;;166    
;;;167    #ifdef SHOW_DRAWN_COMPONENTS
;;;168          {
;;;169            //CoreTechPrint("Components\n");
;;;170            const s32 bigScratchSize = 1024 + image.get_size(0) * RoundUp<s32>(image.get_size(1), MEMORY_ALIGNMENT);
;;;171            MemoryStack bigScratch(malloc(bigScratchSize), bigScratchSize);
;;;172            Array<u8> empty(image.get_size(0), image.get_size(1), bigScratch);
;;;173            Embedded::DrawComponents<u8>(empty, extractedComponents, 64, 255);
;;;174            empty.Show("components good", true, false, true);
;;;175            free(bigScratch.get_buffer());
;;;176          }
;;;177    #endif
;;;178    
;;;179          // 4. Compute candidate quadrilaterals from the connected components
;;;180          {
;;;181            BeginBenchmark("ComputeQuadrilateralsFromConnectedComponents");
;;;182            FixedLengthList<Quadrilateral<s16> > extractedQuads(maxExtractedQuads, scratchOnchip);
;;;183    
;;;184            if((lastResult = ComputeQuadrilateralsFromConnectedComponents(extractedComponents, quads_minQuadArea, quads_quadSymmetryThreshold, quads_minDistanceFromImageEdge, imageHeight, imageWidth, extractedQuads, scratchOnchip)) != RESULT_OK)
;;;185              return lastResult;
;;;186    
;;;187            markers.set_size(extractedQuads.get_size());
;;;188    
;;;189            EndBenchmark("ComputeQuadrilateralsFromConnectedComponents");
;;;190    
;;;191            // 4b. Compute a homography for each extracted quadrilateral
;;;192            BeginBenchmark("ComputeHomographyFromQuad");
;;;193            for(s32 iQuad=0; iQuad<extractedQuads.get_size(); iQuad++) {
;;;194              Array<f32> &currentHomography = homographies[iQuad];
;;;195              VisionMarker &currentMarker = markers[iQuad];
;;;196    
;;;197              bool numericalFailure;
;;;198              if((lastResult = Transformations::ComputeHomographyFromQuad(extractedQuads[iQuad], currentHomography, numericalFailure, scratchOnchip)) != RESULT_OK) {
;;;199                return lastResult;
;;;200              }
;;;201    
;;;202              markers[iQuad] = VisionMarker(extractedQuads[iQuad], VisionMarker::UNKNOWN);
;;;203    
;;;204              if(numericalFailure) {
;;;205                currentMarker.validity = VisionMarker::NUMERICAL_FAILURE;
;;;206              } else {
;;;207                if(currentHomography[2][0] > maxProjectiveTermValue || currentHomography[2][1] > maxProjectiveTermValue) {
;;;208                  AnkiWarn("DetectFiducialMarkers", "Homography projective terms are unreasonably large");
;;;209                  currentMarker.validity = VisionMarker::NUMERICAL_FAILURE;
;;;210                }
;;;211              }
;;;212    
;;;213              //currentHomography.Print("currentHomography");
;;;214            } // for(iQuad=0; iQuad<; iQuad++)
;;;215            EndBenchmark("ComputeHomographyFromQuad");
;;;216          }
;;;217    
;;;218          // 5. Decode fiducial markers from the candidate quadrilaterals
;;;219    
;;;220          BeginBenchmark("ExtractVisionMarker");
;;;221    
;;;222          // refinedHomography and meanGrayvalueThreshold are computed by currentMarker.RefineCorners(), then used by currentMarker.Extract()
;;;223          Array<f32> refinedHomography(3, 3, scratchOnchip);
;;;224          u8 meanGrayvalueThreshold;
;;;225    
;;;226          for(s32 iMarker=0; iMarker<markers.get_size(); iMarker++) {
;;;227            const Array<f32> &currentHomography = homographies[iMarker];
;;;228            VisionMarker &currentMarker = markers[iMarker];
;;;229    
;;;230            if(currentMarker.validity == VisionMarker::UNKNOWN) {
;;;231              // If refine_quadRefinementIterations > 0, then make this marker's corners more accurate
;;;232              if((lastResult = currentMarker.RefineCorners(
;;;233                image,
;;;234                currentHomography,
;;;235                decode_minContrastRatio,
;;;236                refine_quadRefinementIterations, refine_numRefinementSamples, refine_quadRefinementMaxCornerChange, refine_quadRefinementMinCornerChange,
;;;237                quads_minQuadArea, quads_quadSymmetryThreshold, quads_minDistanceFromImageEdge,
;;;238                refinedHomography, meanGrayvalueThreshold,
;;;239                scratchOnchip)) != RESULT_OK)
;;;240              {
;;;241                return lastResult;
;;;242              }
;;;243    
;;;244              if(currentMarker.validity == VisionMarker::LOW_CONTRAST) {
;;;245                currentMarker.markerType = Anki::Vision::MARKER_UNKNOWN;
;;;246              } else {
;;;247                if((lastResult = currentMarker.Extract(
;;;248                  image,
;;;249                  refinedHomography, meanGrayvalueThreshold,
;;;250                  decode_minContrastRatio,
;;;251                  scratchOnchip)) != RESULT_OK)
;;;252                {
;;;253                  return lastResult;
;;;254                }
;;;255              }
;;;256            } // if(currentMarker.validity == VisionMarker::UNKNOWN)
;;;257          } // for(s32 iMarker=0; iMarker<markers.get_size(); iMarker++)
;;;258    
;;;259          // Remove invalid markers from the list
;;;260          if(!returnInvalidMarkers) {
;;;261            for(s32 iMarker=0; iMarker<markers.get_size(); iMarker++) {
;;;262              if(markers[iMarker].validity != VisionMarker::VALID) {
;;;263                for(s32 jQuad=iMarker; jQuad<markers.get_size(); jQuad++) {
;;;264                  markers[jQuad] = markers[jQuad+1];
;;;265                  homographies[jQuad] = homographies[jQuad+1];
;;;266                }
;;;267                //extractedQuads.set_size(extractedQuads.get_size()-1);
;;;268                markers.set_size(markers.get_size()-1);
;;;269                homographies.set_size(homographies.get_size()-1);
;;;270                iMarker--;
;;;271              }
;;;272            }
;;;273          } // if(!returnInvalidMarkers)
;;;274    
;;;275          EndBenchmark("ExtractVisionMarker");
;;;276    
;;;277          EndBenchmark("DetectFiducialMarkers");
;;;278    
;;;279          return RESULT_OK;
;;;280        } // DetectFiducialMarkers()
0000fa  f20d5d1c          ADD      sp,sp,#0x51c
0000fe  ecbd8b04          VPOP     {d8-d9}
000102  b008              ADD      sp,sp,#0x20
000104  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.264|
000108  2139              MOVS     r1,#0x39              ;57
00010a  48cc              LDR      r0,|L1.1084|
00010c  e9cd0100          STRD     r0,r1,[sp,#0]         ;57
000110  a3cb              ADR      r3,|L1.1088|
000112  a2e1              ADR      r2,|L1.1176|
000114  a1c2              ADR      r1,|L1.1056|
000116  2005              MOVS     r0,#5                 ;57
000118  f7fffffe          BL       _Anki_Log
00011c  f04f6080          MOV      r0,#0x4000000         ;57
000120  e7eb              B        |L1.250|
                  |L1.290|
000122  f8dd0548          LDR      r0,[sp,#0x548]        ;65
000126  2803              CMP      r0,#3                 ;65
000128  dd0c              BLE      |L1.324|
00012a  2141              MOVS     r1,#0x41              ;65
00012c  48c3              LDR      r0,|L1.1084|
00012e  e9cd0100          STRD     r0,r1,[sp,#0]         ;65
000132  a3c3              ADR      r3,|L1.1088|
000134  a2de              ADR      r2,|L1.1200|
000136  a1ba              ADR      r1,|L1.1056|
000138  2005              MOVS     r0,#5                 ;65
00013a  f7fffffe          BL       _Anki_Log
00013e  f04f60a0          MOV      r0,#0x5000000         ;65
000142  e7da              B        |L1.250|
                  |L1.324|
000144  a0e3              ADR      r0,|L1.1236|
000146  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00014a  a807              ADD      r0,sp,#0x1c           ;71
00014c  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponentsC1Ev ; Anki::Embedded::ConnectedComponents::ConnectedComponents()
000150  f8dd05b4          LDR      r0,[sp,#0x5b4]        ;75
000154  f5b63f80          CMP      r6,#0x10000           ;72
000158  9000              STR      r0,[sp,#0]            ;72
00015a  da0b              BGE      |L1.372|
00015c  2301              MOVS     r3,#1                 ;73
00015e  fa0ff288          SXTH     r2,r8                 ;73
000162  4631              MOV      r1,r6                 ;73
000164  a892              ADD      r0,sp,#0x248          ;73
000166  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponentsC1EisbRNS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::ConnectedComponents(int, short, bool, Anki::Embedded::MemoryStack&)
00016a  4601              MOV      r1,r0                 ;73
00016c  a807              ADD      r0,sp,#0x1c           ;73
00016e  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponentsaSERKS1_ ; Anki::Embedded::ConnectedComponents::operator =(const Anki::Embedded::ConnectedComponents&)
000172  e00a              B        |L1.394|
                  |L1.372|
000174  2300              MOVS     r3,#0                 ;75
000176  fa0ff288          SXTH     r2,r8                 ;75
00017a  4631              MOV      r1,r6                 ;75
00017c  a892              ADD      r0,sp,#0x248          ;75
00017e  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponentsC1EisbRNS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::ConnectedComponents(int, short, bool, Anki::Embedded::MemoryStack&)
000182  4601              MOV      r1,r0                 ;75
000184  a807              ADD      r0,sp,#0x1c           ;75
000186  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponentsaSERKS1_ ; Anki::Embedded::ConnectedComponents::operator =(const Anki::Embedded::ConnectedComponents&)
                  |L1.394|
00018a  a807              ADD      r0,sp,#0x1c           ;78
00018c  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents7IsValidEv ; Anki::Embedded::ConnectedComponents::IsValid() const
000190  2800              CMP      r0,#0                 ;78
000192  f0008334          BEQ.W    |L1.2046|
000196  f20d4074          ADD      r0,sp,#0x474          ;81
00019a  9002              STR      r0,[sp,#8]            ;81
00019c  f8dd0548          LDR      r0,[sp,#0x548]        ;81
0001a0  2200              MOVS     r2,#0                 ;81
0001a2  1c80              ADDS     r0,r0,#2              ;81
0001a4  9001              STR      r0,[sp,#4]            ;81
0001a6  2301              MOVS     r3,#1                 ;81
0001a8  4611              MOV      r1,r2                 ;81
0001aa  f50d60a3          ADD      r0,sp,#0x518          ;81
0001ae  f8dd65b0          LDR      r6,[sp,#0x5b0]        ;81
0001b2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0001b6  6800              LDR      r0,[r0,#0]            ;81
0001b8  9003              STR      r0,[sp,#0xc]          ;81
0001ba  9000              STR      r0,[sp,#0]            ;81
0001bc  4633              MOV      r3,r6                 ;81
0001be  2101              MOVS     r1,#1                 ;81
0001c0  a892              ADD      r0,sp,#0x248          ;81
0001c2  9a01              LDR      r2,[sp,#4]            ;81
0001c4  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0001c8  4601              MOV      r1,r0                 ;81
0001ca  f8d0a010          LDR      r10,[r0,#0x10]        ;81
0001ce  e9d19002          LDRD     r9,r0,[r1,#8]         ;81
0001d2  e9d16700          LDRD     r6,r7,[r1,#0]         ;81
0001d6  2200              MOVS     r2,#0                 ;81
0001d8  9000              STR      r0,[sp,#0]            ;81
0001da  4611              MOV      r1,r2                 ;81
0001dc  a804              ADD      r0,sp,#0x10           ;81
0001de  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
0001e2  2200              MOVS     r2,#0                 ;81
0001e4  909a              STR      r0,[sp,#0x268]        ;81
0001e6  4611              MOV      r1,r2                 ;81
0001e8  a897              ADD      r0,sp,#0x25c          ;81
0001ea  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
0001ee  9a9a              LDR      r2,[sp,#0x268]        ;81
0001f0  4603              MOV      r3,r0                 ;81
0001f2  2e00              CMP      r6,#0                 ;81
0001f4  e9d20100          LDRD     r0,r1,[r2,#0]         ;81
0001f8  6892              LDR      r2,[r2,#8]            ;81
0001fa  f8cd247c          STR      r2,[sp,#0x47c]        ;81
0001fe  f8cd1478          STR      r1,[sp,#0x478]        ;81
000202  f8cd0474          STR      r0,[sp,#0x474]        ;81
000206  e9d30100          LDRD     r0,r1,[r3,#0]         ;81
00020a  689a              LDR      r2,[r3,#8]            ;81
00020c  f8cd0480          STR      r0,[sp,#0x480]        ;81
000210  f8cd2488          STR      r2,[sp,#0x488]        ;81
000214  9800              LDR      r0,[sp,#0]            ;81
000216  f8cd1484          STR      r1,[sp,#0x484]        ;81
00021a  f8cda49c          STR      r10,[sp,#0x49c]       ;81
00021e  f8cd9494          STR      r9,[sp,#0x494]        ;81
000222  f8cd7490          STR      r7,[sp,#0x490]        ;81
000226  f8cd648c          STR      r6,[sp,#0x48c]        ;81
00022a  f8cd0498          STR      r0,[sp,#0x498]        ;81
00022e  bfc8              IT       GT                    ;81
000230  2f00              CMPGT    r7,#0                 ;81
000232  f34082f2          BLE.W    |L1.2074|
000236  fb06f007          MUL      r0,r6,r7              ;81
00023a  2800              CMP      r0,#0                 ;81
00023c  bf1c              ITT      NE                    ;81
00023e  2000              MOVNE    r0,#0                 ;81
000240  fb00a009          MLANE    r0,r0,r9,r10          ;81
000244  f00082e9          BEQ.W    |L1.2074|
                  |L1.584|
000248  f8cd04a0          STR      r0,[sp,#0x4a0]        ;81
00024c  2e00              CMP      r6,#0                 ;81
00024e  bfc8              IT       GT                    ;81
000250  2f00              CMPGT    r7,#0                 ;81
000252  f34082e4          BLE.W    |L1.2078|
000256  fb06f007          MUL      r0,r6,r7              ;81
00025a  2800              CMP      r0,#0                 ;81
00025c  bf1c              ITT      NE                    ;81
00025e  2000              MOVNE    r0,#0                 ;81
000260  fb00a009          MLANE    r0,r0,r9,r10          ;81
000264  f00082db          BEQ.W    |L1.2078|
                  |L1.616|
000268  f8cd04a4          STR      r0,[sp,#0x4a4]        ;81
00026c  2e00              CMP      r6,#0                 ;81
00026e  bfc8              IT       GT                    ;81
000270  2f00              CMPGT    r7,#0                 ;81
000272  f34082d6          BLE.W    |L1.2082|
000276  fb06f007          MUL      r0,r6,r7              ;81
00027a  2800              CMP      r0,#0                 ;81
00027c  bf1c              ITT      NE                    ;81
00027e  2000              MOVNE    r0,#0                 ;81
000280  fb00a009          MLANE    r0,r0,r9,r10          ;81
000284  f00082cd          BEQ.W    |L1.2082|
                  |L1.648|
000288  f8cd04a4          STR      r0,[sp,#0x4a4]        ;81
00028c  a803              ADD      r0,sp,#0xc            ;81
00028e  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
000292  2800              CMP      r0,#0                 ;81
000294  bf12              ITEE     NE                    ;81
000296  e9dd1001          LDRDNE   r1,r0,[sp,#4]         ;81
00029a  2100              MOVEQ    r1,#0                 ;81
00029c  9802              LDREQ    r0,[sp,#8]            ;81
00029e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
0002a2  f8dd1480          LDR      r1,[sp,#0x480]        ;81
0002a6  f8dd0490          LDR      r0,[sp,#0x490]        ;81
0002aa  4281              CMP      r1,r0                 ;81
0002ac  f30082bb          BGT.W    |L1.2086|
0002b0  f8dd049c          LDR      r0,[sp,#0x49c]        ;81
0002b4  b140              CBZ      r0,|L1.712|
0002b6  f8dd048c          LDR      r0,[sp,#0x48c]        ;81
0002ba  2800              CMP      r0,#0                 ;81
0002bc  bfa3              ITTTE    GE                    ;81
0002be  f8dd0490          LDRGE    r0,[sp,#0x490]        ;81
0002c2  2800              CMPGE    r0,#0                 ;81
0002c4  2001              MOVGE    r0,#1                 ;81
0002c6  2000              MOVLT    r0,#0                 ;81
                  |L1.712|
0002c8  2800              CMP      r0,#0                 ;83
0002ca  f00082ac          BEQ.W    |L1.2086|
0002ce  f8dd1548          LDR      r1,[sp,#0x548]        ;86
0002d2  2000              MOVS     r0,#0                 ;86
0002d4  1c8b              ADDS     r3,r1,#2              ;86
0002d6  2b00              CMP      r3,#0                 ;86
0002d8  bfc8              IT       GT                    ;86
0002da  2101              MOVGT    r1,#1                 ;86
0002dc  dd08              BLE      |L1.752|
                  |L1.734|
0002de  f8dd24a4          LDR      r2,[sp,#0x4a4]        ;87
0002e2  fa01fc00          LSL      r12,r1,r0             ;87
0002e6  f842c020          STR      r12,[r2,r0,LSL #2]    ;87
0002ea  1c40              ADDS     r0,r0,#1              ;86
0002ec  4283              CMP      r3,r0                 ;86
0002ee  dcf6              BGT      |L1.734|
                  |L1.752|
0002f0  f20d40f4          ADD      r0,sp,#0x4f4          ;98
0002f4  f8dd15b4          LDR      r1,[sp,#0x5b4]        ;98
0002f8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0002fc  4606              MOV      r6,r0                 ;98
0002fe  f50d609b          ADD      r0,sp,#0x4d8          ;98
000302  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;98
000306  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00030a  4607              MOV      r7,r0                 ;98
00030c  f20d40bc          ADD      r0,sp,#0x4bc          ;98
000310  f8dd15ac          LDR      r1,[sp,#0x5ac]        ;98
000314  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000318  4602              MOV      r2,r0                 ;98
00031a  a807              ADD      r0,sp,#0x1c           ;98
00031c  e9cd0201          STRD     r0,r2,[sp,#4]         ;98
000320  e9cd7603          STRD     r7,r6,[sp,#0xc]       ;98
000324  f8dd0578          LDR      r0,[sp,#0x578]        ;98
000328  9000              STR      r0,[sp,#0]            ;98
00032a  f20d4174          ADD      r1,sp,#0x474          ;98
00032e  4658              MOV      r0,r11                ;98
000330  f8dd3574          LDR      r3,[sp,#0x574]        ;98
000334  f8dd2570          LDR      r2,[sp,#0x570]        ;98
000338  f7fffffe          BL       _ZN4Anki8Embedded39ExtractComponentsViaCharacteristicScaleERKNS0_5ArrayIhEERKNS0_15FixedLengthListIiEEissRNS0_19ConnectedComponentsENS0_11MemoryStackESB_SB_ ; Anki::Embedded::ExtractComponentsViaCharacteristicScale(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::FixedLengthList<int>&, int, short, short, Anki::Embedded::ConnectedComponents&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
00033c  2800              CMP      r0,#0                 ;98
00033e  f47faedc          BNE      |L1.250|
000342  a064              ADR      r0,|L1.1236|
000344  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000348  a06c              ADR      r0,|L1.1276|
00034a  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00034e  4668              MOV      r0,sp                 ;132
000350  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;132
000354  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000358  4601              MOV      r1,r0                 ;132
00035a  a807              ADD      r0,sp,#0x1c           ;132
00035c  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents36CompressConnectedComponentSegmentIdsENS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
000360  a066              ADR      r0,|L1.1276|
000362  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000366  a06f              ADR      r0,|L1.1316|
000368  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00036c  4668              MOV      r0,sp                 ;136
00036e  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;136
000372  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000376  4603              MOV      r3,r0                 ;136
000378  a807              ADD      r0,sp,#0x1c           ;136
00037a  f8dd2580          LDR      r2,[sp,#0x580]        ;136
00037e  f8dd157c          LDR      r1,[sp,#0x57c]        ;136
000382  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents32InvalidateSmallOrLargeComponentsEiiNS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::InvalidateSmallOrLargeComponents(int, int, Anki::Embedded::MemoryStack)
000386  2800              CMP      r0,#0                 ;136
000388  f47faeb7          BNE      |L1.250|
00038c  a065              ADR      r0,|L1.1316|
00038e  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000392  a06d              ADR      r0,|L1.1352|
000394  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000398  4668              MOV      r0,sp                 ;141
00039a  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;141
00039e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0003a2  4601              MOV      r1,r0                 ;141
0003a4  a807              ADD      r0,sp,#0x1c           ;141
0003a6  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents36CompressConnectedComponentSegmentIdsENS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
0003aa  a067              ADR      r0,|L1.1352|
0003ac  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0003b0  a06f              ADR      r0,|L1.1392|
0003b2  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0003b6  4668              MOV      r0,sp                 ;145
0003b8  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;145
0003bc  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0003c0  4603              MOV      r3,r0                 ;145
0003c2  a807              ADD      r0,sp,#0x1c           ;145
0003c4  f8dd2588          LDR      r2,[sp,#0x588]        ;145
0003c8  f8dd1584          LDR      r1,[sp,#0x584]        ;145
0003cc  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents33InvalidateSolidOrSparseComponentsEiiNS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::InvalidateSolidOrSparseComponents(int, int, Anki::Embedded::MemoryStack)
0003d0  2800              CMP      r0,#0                 ;145
0003d2  f47fae92          BNE      |L1.250|
0003d6  a066              ADR      r0,|L1.1392|
0003d8  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0003dc  a06d              ADR      r0,|L1.1428|
0003de  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0003e2  4668              MOV      r0,sp                 ;150
0003e4  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;150
0003e8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0003ec  4601              MOV      r1,r0                 ;150
0003ee  a807              ADD      r0,sp,#0x1c           ;150
0003f0  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents36CompressConnectedComponentSegmentIdsENS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
0003f4  a067              ADR      r0,|L1.1428|
0003f6  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0003fa  a070              ADR      r0,|L1.1468|
0003fc  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000400  4668              MOV      r0,sp                 ;154
000402  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;154
000406  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00040a  4601              MOV      r1,r0                 ;154
00040c  eeb00a69          VMOV.F32 s0,s19                ;154
000410  a807              ADD      r0,sp,#0x1c           ;154
000412  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents43InvalidateFilledCenterComponents_hollowRowsEfNS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::InvalidateFilledCenterComponents_hollowRows(float, Anki::Embedded::MemoryStack)
000416  2800              CMP      r0,#0                 ;154
000418  f47fae6f          BNE      |L1.250|
00041c  a067              ADR      r0,|L1.1468|
00041e  e0e3              B        |L1.1512|
                  |L1.1056|
000420  44657465          DCB      "DetectFiducialMarkers",0
000424  63744669
000428  64756369
00042c  616c4d61
000430  726b6572
000434  7300    
000436  00                DCB      0
000437  00                DCB      0
                  |L1.1080|
                          DCD      0x000f4240
                  |L1.1084|
                          DCD      ||.constdata||
                  |L1.1088|
000440  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\detectFiducialMarkers"
000444  6f726574
000448  6563685c
00044c  76697369
000450  6f6e5c72
000454  6f626f74
000458  5c737263
00045c  5c646574
000460  65637446
000464  69647563
000468  69616c4d
00046c  61726b65
000470  7273    
000472  2e637070          DCB      ".cpp",0
000476  00      
000477  00                DCB      0
                  |L1.1144|
000478  54686520          DCB      "The image is too large to test",0
00047c  696d6167
000480  65206973
000484  20746f6f
000488  206c6172
00048c  67652074
000490  6f207465
000494  737400  
000497  00                DCB      0
                  |L1.1176|
000498  536f6d65          DCB      "Some input is invalid",0
00049c  20696e70
0004a0  75742069
0004a4  7320696e
0004a8  76616c69
0004ac  6400    
0004ae  00                DCB      0
0004af  00                DCB      0
                  |L1.1200|
0004b0  4f6e6c79          DCB      "Only 3 pyramid levels are supported",0
0004b4  20332070
0004b8  7972616d
0004bc  6964206c
0004c0  6576656c
0004c4  73206172
0004c8  65207375
0004cc  70706f72
0004d0  74656400
                  |L1.1236|
0004d4  45787472          DCB      "ExtractComponentsViaCharacteristicScale",0
0004d8  61637443
0004dc  6f6d706f
0004e0  6e656e74
0004e4  73566961
0004e8  43686172
0004ec  61637465
0004f0  72697374
0004f4  69635363
0004f8  616c6500
                  |L1.1276|
0004fc  436f6d70          DCB      "CompressConnectedComponentSegmentIds1",0
000500  72657373
000504  436f6e6e
000508  65637465
00050c  64436f6d
000510  706f6e65
000514  6e745365
000518  676d656e
00051c  74496473
000520  3100    
000522  00                DCB      0
000523  00                DCB      0
                  |L1.1316|
000524  496e7661          DCB      "InvalidateSmallOrLargeComponents",0
000528  6c696461
00052c  7465536d
000530  616c6c4f
000534  724c6172
000538  6765436f
00053c  6d706f6e
000540  656e7473
000544  00      
000545  00                DCB      0
000546  00                DCB      0
000547  00                DCB      0
                  |L1.1352|
000548  436f6d70          DCB      "CompressConnectedComponentSegmentIds2",0
00054c  72657373
000550  436f6e6e
000554  65637465
000558  64436f6d
00055c  706f6e65
000560  6e745365
000564  676d656e
000568  74496473
00056c  3200    
00056e  00                DCB      0
00056f  00                DCB      0
                  |L1.1392|
000570  496e7661          DCB      "InvalidateSolidOrSparseComponents",0
000574  6c696461
000578  7465536f
00057c  6c69644f
000580  72537061
000584  72736543
000588  6f6d706f
00058c  6e656e74
000590  7300    
000592  00                DCB      0
000593  00                DCB      0
                  |L1.1428|
000594  436f6d70          DCB      "CompressConnectedComponentSegmentIds3",0
000598  72657373
00059c  436f6e6e
0005a0  65637465
0005a4  64436f6d
0005a8  706f6e65
0005ac  6e745365
0005b0  676d656e
0005b4  74496473
0005b8  3300    
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
0005bc  496e7661          DCB      "InvalidateFilledCenterComponents_hollowRows",0
0005c0  6c696461
0005c4  74654669
0005c8  6c6c6564
0005cc  43656e74
0005d0  6572436f
0005d4  6d706f6e
0005d8  656e7473
0005dc  5f686f6c
0005e0  6c6f7752
0005e4  6f777300
                  |L1.1512|
0005e8  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0005ec  a0f9              ADR      r0,|L1.2516|
0005ee  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0005f2  4668              MOV      r0,sp                 ;159
0005f4  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;159
0005f8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0005fc  4601              MOV      r1,r0                 ;159
0005fe  a807              ADD      r0,sp,#0x1c           ;159
000600  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents36CompressConnectedComponentSegmentIdsENS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::CompressConnectedComponentSegmentIds(Anki::Embedded::MemoryStack)
000604  a0f3              ADR      r0,|L1.2516|
000606  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00060a  a0fc              ADR      r0,|L1.2556|
00060c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000610  4668              MOV      r0,sp                 ;163
000612  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;163
000616  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00061a  4601              MOV      r1,r0                 ;163
00061c  a807              ADD      r0,sp,#0x1c           ;163
00061e  f7fffffe          BL       _ZN4Anki8Embedded19ConnectedComponents34SortConnectedComponentSegmentsByIdENS0_11MemoryStackE ; Anki::Embedded::ConnectedComponents::SortConnectedComponentSegmentsById(Anki::Embedded::MemoryStack)
000622  a0f6              ADR      r0,|L1.2556|
000624  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000628  a0fd              ADR      r0,|L1.2592|
00062a  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00062e  a892              ADD      r0,sp,#0x248          ;182
000630  9002              STR      r0,[sp,#8]            ;182
000632  f8dd059c          LDR      r0,[sp,#0x59c]        ;182
000636  9001              STR      r0,[sp,#4]            ;182
000638  2300              MOVS     r3,#0                 ;182
00063a  461a              MOV      r2,r3                 ;182
00063c  2101              MOVS     r1,#1                 ;182
00063e  a8b2              ADD      r0,sp,#0x2c8          ;182
000640  f8dd65b0          LDR      r6,[sp,#0x5b0]        ;182
000644  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000648  6800              LDR      r0,[r0,#0]            ;182
00064a  9003              STR      r0,[sp,#0xc]          ;182
00064c  9000              STR      r0,[sp,#0]            ;182
00064e  4633              MOV      r3,r6                 ;182
000650  2101              MOVS     r1,#1                 ;182
000652  a89f              ADD      r0,sp,#0x27c          ;182
000654  9a01              LDR      r2,[sp,#4]            ;182
000656  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00065a  4602              MOV      r2,r0                 ;182
00065c  f8d0a010          LDR      r10,[r0,#0x10]        ;182
000660  e9d29002          LDRD     r9,r0,[r2,#8]         ;182
000664  e9d26700          LDRD     r6,r7,[r2,#0]         ;182
000668  2200              MOVS     r2,#0                 ;182
00066a  9000              STR      r0,[sp,#0]            ;182
00066c  4611              MOV      r1,r2                 ;182
00066e  a804              ADD      r0,sp,#0x10           ;182
000670  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000674  2200              MOVS     r2,#0                 ;182
000676  90a7              STR      r0,[sp,#0x29c]        ;182
000678  4611              MOV      r1,r2                 ;182
00067a  a8a4              ADD      r0,sp,#0x290          ;182
00067c  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000680  9ba7              LDR      r3,[sp,#0x29c]        ;182
000682  4684              MOV      r12,r0                ;182
000684  2e00              CMP      r6,#0                 ;182
000686  e9d30200          LDRD     r0,r2,[r3,#0]         ;182
00068a  689b              LDR      r3,[r3,#8]            ;182
00068c  e9cd0292          STRD     r0,r2,[sp,#0x248]     ;182
000690  9394              STR      r3,[sp,#0x250]        ;182
000692  e9dc0200          LDRD     r0,r2,[r12,#0]        ;182
000696  f8dc3008          LDR      r3,[r12,#8]           ;182
00069a  9397              STR      r3,[sp,#0x25c]        ;182
00069c  e9cd0295          STRD     r0,r2,[sp,#0x254]     ;182
0006a0  9800              LDR      r0,[sp,#0]            ;182
0006a2  f8cda270          STR      r10,[sp,#0x270]       ;182
0006a6  e9cd909a          STRD     r9,r0,[sp,#0x268]     ;182
0006aa  e9cd6798          STRD     r6,r7,[sp,#0x260]     ;182
0006ae  bfc8              IT       GT                    ;182
0006b0  2f00              CMPGT    r7,#0                 ;182
0006b2  f34080c6          BLE.W    |L1.2114|
0006b6  fb06f007          MUL      r0,r6,r7              ;182
0006ba  2800              CMP      r0,#0                 ;182
0006bc  bf1c              ITT      NE                    ;182
0006be  2000              MOVNE    r0,#0                 ;182
0006c0  fb00a009          MLANE    r0,r0,r9,r10          ;182
0006c4  f00080bd          BEQ.W    |L1.2114|
                  |L1.1736|
0006c8  909d              STR      r0,[sp,#0x274]        ;182
0006ca  2e00              CMP      r6,#0                 ;182
0006cc  bfc8              IT       GT                    ;182
0006ce  2f00              CMPGT    r7,#0                 ;182
0006d0  f34080b9          BLE.W    |L1.2118|
0006d4  fb06f007          MUL      r0,r6,r7              ;182
0006d8  2800              CMP      r0,#0                 ;182
0006da  bf1c              ITT      NE                    ;182
0006dc  2000              MOVNE    r0,#0                 ;182
0006de  fb00a009          MLANE    r0,r0,r9,r10          ;182
0006e2  f00080b0          BEQ.W    |L1.2118|
                  |L1.1766|
0006e6  909e              STR      r0,[sp,#0x278]        ;182
0006e8  2e00              CMP      r6,#0                 ;182
0006ea  bfc8              IT       GT                    ;182
0006ec  2f00              CMPGT    r7,#0                 ;182
0006ee  f34080ac          BLE.W    |L1.2122|
0006f2  fb06f007          MUL      r0,r6,r7              ;182
0006f6  2800              CMP      r0,#0                 ;182
0006f8  bf1c              ITT      NE                    ;182
0006fa  2000              MOVNE    r0,#0                 ;182
0006fc  fb00a009          MLANE    r0,r0,r9,r10          ;182
000700  f00080a3          BEQ.W    |L1.2122|
                  |L1.1796|
000704  909e              STR      r0,[sp,#0x278]        ;182
000706  a803              ADD      r0,sp,#0xc            ;182
000708  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
00070c  2800              CMP      r0,#0                 ;182
00070e  bf12              ITEE     NE                    ;182
000710  e9dd1001          LDRDNE   r1,r0,[sp,#4]         ;182
000714  2100              MOVEQ    r1,#0                 ;182
000716  9802              LDREQ    r0,[sp,#8]            ;182
000718  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<short>>::set_size(int)
00071c  a8aa              ADD      r0,sp,#0x2a8          ;184
00071e  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;184
000722  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000726  aa92              ADD      r2,sp,#0x248          ;184
000728  f8dd1510          LDR      r1,[sp,#0x510]        ;184
00072c  e9cd2002          STRD     r2,r0,[sp,#8]         ;184
000730  e9cd1800          STRD     r1,r8,[sp,#0]         ;184
000734  a807              ADD      r0,sp,#0x1c           ;184
000736  f8dd3594          LDR      r3,[sp,#0x594]        ;184
00073a  f8dd2590          LDR      r2,[sp,#0x590]        ;184
00073e  f8dd158c          LDR      r1,[sp,#0x58c]        ;184
000742  f7fffffe          BL       _ZN4Anki8Embedded44ComputeQuadrilateralsFromConnectedComponentsERKNS0_19ConnectedComponentsEiiiiiRNS0_15FixedLengthListINS0_13QuadrilateralIsEEEENS0_11MemoryStackE ; Anki::Embedded::ComputeQuadrilateralsFromConnectedComponents(const Anki::Embedded::ConnectedComponents&, int, int, int, int, int, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<short>>&, Anki::Embedded::MemoryStack)
000746  2800              CMP      r0,#0                 ;184
000748  f47facd7          BNE      |L1.250|
00074c  4620              MOV      r0,r4                 ;187
00074e  9995              LDR      r1,[sp,#0x254]        ;187
000750  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::VisionMarker>::set_size(int)
000754  a0b2              ADR      r0,|L1.2592|
000756  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00075a  a0bd              ADR      r0,|L1.2640|
00075c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000760  9895              LDR      r0,[sp,#0x254]        ;193
000762  2600              MOVS     r6,#0                 ;193
000764  2800              CMP      r0,#0                 ;193
000766  bfc8              IT       GT                    ;193
000768  f04f0a05          MOVGT    r10,#5                ;193
00076c  dd6f              BLE      |L1.2126|
                  |L1.1902|
00076e  6b28              LDR      r0,[r5,#0x30]         ;193
000770  eb060186          ADD      r1,r6,r6,LSL #2       ;193
000774  eb000881          ADD      r8,r0,r1,LSL #2       ;193
000778  eb060146          ADD      r1,r6,r6,LSL #1       ;193
00077c  eb0107c6          ADD      r7,r1,r6,LSL #3       ;193
000780  6b20              LDR      r0,[r4,#0x30]         ;193
000782  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;198
000786  eb000987          ADD      r9,r0,r7,LSL #2       ;198
00078a  4668              MOV      r0,sp                 ;198
00078c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000790  4603              MOV      r3,r0                 ;198
000792  989e              LDR      r0,[sp,#0x278]        ;198
000794  aab1              ADD      r2,sp,#0x2c4          ;198
000796  eb001006          ADD      r0,r0,r6,LSL #4       ;198
00079a  4641              MOV      r1,r8                 ;198
00079c  f7fffffe          BL       _ZN4Anki8Embedded15Transformations25ComputeHomographyFromQuadERKNS0_13QuadrilateralIsEERNS0_5ArrayIfEERbNS0_11MemoryStackE ; Anki::Embedded::Transformations::ComputeHomographyFromQuad(const Anki::Embedded::Quadrilateral<short>&, Anki::Embedded::Array<float>&, bool&, Anki::Embedded::MemoryStack)
0007a0  2800              CMP      r0,#0                 ;198
0007a2  f47facaa          BNE      |L1.250|
0007a6  6b20              LDR      r0,[r4,#0x30]         ;198
0007a8  2203              MOVS     r2,#3                 ;202
0007aa  eb000787          ADD      r7,r0,r7,LSL #2       ;202
0007ae  989e              LDR      r0,[sp,#0x278]        ;202
0007b0  eb001106          ADD      r1,r0,r6,LSL #4       ;202
0007b4  a89f              ADD      r0,sp,#0x27c          ;202
0007b6  f7fffffe          BL       _ZN4Anki8Embedded12VisionMarkerC1ERKNS0_13QuadrilateralIsEENS1_12ValidityCodeE ; Anki::Embedded::VisionMarker::VisionMarker(const Anki::Embedded::Quadrilateral<short>&, Anki::Embedded::VisionMarker::ValidityCode)
0007ba  4603              MOV      r3,r0                 ;202
0007bc  2000              MOVS     r0,#0                 ;202
                  |L1.1982|
0007be  eb0301c0          ADD      r1,r3,r0,LSL #3       ;202
0007c2  eb0702c0          ADD      r2,r7,r0,LSL #3       ;202
0007c6  edd10a00          VLDR     s1,[r1,#0]            ;202
0007ca  1c40              ADDS     r0,r0,#1              ;202
0007cc  edc20a00          VSTR     s1,[r2,#0]            ;202
0007d0  edd10a01          VLDR     s1,[r1,#4]            ;202
0007d4  2804              CMP      r0,#4                 ;202
0007d6  edc20a01          VSTR     s1,[r2,#4]            ;202
0007da  dbf0              BLT      |L1.1982|
0007dc  f8930020          LDRB     r0,[r3,#0x20]         ;202
0007e0  f8870020          STRB     r0,[r7,#0x20]         ;202
0007e4  edd30a09          VLDR     s1,[r3,#0x24]         ;202
0007e8  edc70a09          VSTR     s1,[r7,#0x24]         ;202
0007ec  f8930028          LDRB     r0,[r3,#0x28]         ;202
0007f0  f8870028          STRB     r0,[r7,#0x28]         ;202
0007f4  f89d02c4          LDRB     r0,[sp,#0x2c4]        ;204
0007f8  2800              CMP      r0,#0                 ;204
0007fa  d138              BNE      |L1.2158|
0007fc  e028              B        |L1.2128|
                  |L1.2046|
0007fe  489b              LDR      r0,|L1.2668|
000800  214e              MOVS     r1,#0x4e              ;78
000802  f2af33c4          ADR      r3,|L1.1088|
000806  a29a              ADR      r2,|L1.2672|
000808  e9cd0100          STRD     r0,r1,[sp,#0]         ;78
00080c  f2af31f0          ADR      r1,|L1.1056|
000810  2005              MOVS     r0,#5                 ;78
000812  f7fffffe          BL       _Anki_Log
000816  48a1              LDR      r0,|L1.2716|
000818  e46f              B        |L1.250|
                  |L1.2074|
00081a  2000              MOVS     r0,#0                 ;78
00081c  e514              B        |L1.584|
                  |L1.2078|
00081e  2000              MOVS     r0,#0                 ;78
000820  e522              B        |L1.616|
                  |L1.2082|
000822  2000              MOVS     r0,#0                 ;78
000824  e530              B        |L1.648|
                  |L1.2086|
000826  4891              LDR      r0,|L1.2668|
000828  2153              MOVS     r1,#0x53              ;83
00082a  f2af33ec          ADR      r3,|L1.1088|
00082e  a29c              ADR      r2,|L1.2720|
000830  e9cd0100          STRD     r0,r1,[sp,#0]         ;83
000834  f2af4118          ADR      r1,|L1.1056|
000838  2005              MOVS     r0,#5                 ;83
00083a  f7fffffe          BL       _Anki_Log
00083e  4897              LDR      r0,|L1.2716|
000840  e45b              B        |L1.250|
                  |L1.2114|
000842  2000              MOVS     r0,#0                 ;83
000844  e740              B        |L1.1736|
                  |L1.2118|
000846  2000              MOVS     r0,#0                 ;83
000848  e74d              B        |L1.1766|
                  |L1.2122|
00084a  2000              MOVS     r0,#0                 ;83
00084c  e75a              B        |L1.1796|
                  |L1.2126|
00084e  e015              B        |L1.2172|
                  |L1.2128|
000850  f8d82008          LDR      r2,[r8,#8]            ;83
000854  f8d81010          LDR      r1,[r8,#0x10]         ;83
000858  2002              MOVS     r0,#2                 ;207
00085a  fb001002          MLA      r0,r0,r2,r1           ;207
00085e  6801              LDR      r1,[r0,#0]            ;207
000860  f1b14f82          CMP      r1,#0x41000000        ;207
000864  bfdc              ITT      LE                    ;207
000866  6840              LDRLE    r0,[r0,#4]            ;207
000868  f1b04f82          CMPLE    r0,#0x41000000        ;207
00086c  dd01              BLE      |L1.2162|
                  |L1.2158|
00086e  f889a028          STRB     r10,[r9,#0x28]        ;209
                  |L1.2162|
000872  9895              LDR      r0,[sp,#0x254]        ;193
000874  1c76              ADDS     r6,r6,#1              ;193
000876  42b0              CMP      r0,r6                 ;193
000878  f73faf79          BGT      |L1.1902|
                  |L1.2172|
00087c  a074              ADR      r0,|L1.2640|
00087e  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000882  a091              ADR      r0,|L1.2760|
000884  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000888  2300              MOVS     r3,#0                 ;223
00088a  461a              MOV      r2,r3                 ;223
00088c  2101              MOVS     r1,#1                 ;223
00088e  f50d60a3          ADD      r0,sp,#0x518          ;223
000892  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000896  6800              LDR      r0,[r0,#0]            ;223
000898  9000              STR      r0,[sp,#0]            ;223
00089a  2203              MOVS     r2,#3                 ;223
00089c  4611              MOV      r1,r2                 ;223
00089e  f50d6095          ADD      r0,sp,#0x4a8          ;223
0008a2  f8dd35b0          LDR      r3,[sp,#0x5b0]        ;223
0008a6  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0008aa  68e0              LDR      r0,[r4,#0xc]          ;226
0008ac  2600              MOVS     r6,#0                 ;226
0008ae  2800              CMP      r0,#0                 ;226
0008b0  bfc4              ITT      GT                    ;223
0008b2  f50d6995          ADDGT    r9,sp,#0x4a8          ;223
0008b6  f20d5a14          ADDGT    r10,sp,#0x514         ;232
0008ba  dd52              BLE      |L1.2402|
                  |L1.2236|
0008bc  6b28              LDR      r0,[r5,#0x30]         ;226
0008be  eb060186          ADD      r1,r6,r6,LSL #2       ;226
0008c2  eb000881          ADD      r8,r0,r1,LSL #2       ;226
0008c6  eb060146          ADD      r1,r6,r6,LSL #1       ;226
0008ca  6b20              LDR      r0,[r4,#0x30]         ;226
0008cc  eb0101c6          ADD      r1,r1,r6,LSL #3       ;226
0008d0  eb000781          ADD      r7,r0,r1,LSL #2       ;226
0008d4  f8970028          LDRB     r0,[r7,#0x28]         ;230
0008d8  2803              CMP      r0,#3                 ;230
0008da  d13e              BNE      |L1.2394|
0008dc  a892              ADD      r0,sp,#0x248          ;232
0008de  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;232
0008e2  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0008e6  f8dd1594          LDR      r1,[sp,#0x594]        ;232
0008ea  e9cda005          STRD     r10,r0,[sp,#0x14]     ;232
0008ee  e9cd1903          STRD     r1,r9,[sp,#0xc]       ;232
0008f2  f8dd2590          LDR      r2,[sp,#0x590]        ;232
0008f6  f8dd158c          LDR      r1,[sp,#0x58c]        ;232
0008fa  f8dd05a4          LDR      r0,[sp,#0x5a4]        ;232
0008fe  e9cd0100          STRD     r0,r1,[sp,#0]         ;232
000902  9202              STR      r2,[sp,#8]            ;232
000904  eeb01a48          VMOV.F32 s2,s16                ;232
000908  eef00a68          VMOV.F32 s1,s17                ;232
00090c  eeb00a49          VMOV.F32 s0,s18                ;232
000910  4642              MOV      r2,r8                 ;232
000912  4659              MOV      r1,r11                ;232
000914  4638              MOV      r0,r7                 ;232
000916  f8dd35a0          LDR      r3,[sp,#0x5a0]        ;232
00091a  f7fffffe          BL       _ZN4Anki8Embedded12VisionMarker13RefineCornersERKNS0_5ArrayIhEERKNS2_IfEEfiiffiiiRS6_RhNS0_11MemoryStackE ; Anki::Embedded::VisionMarker::RefineCorners(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Array<float>&, float, int, int, float, float, int, int, int, Anki::Embedded::Array<float>&, unsigned char&, Anki::Embedded::MemoryStack)
00091e  2800              CMP      r0,#0                 ;232
000920  f47fabeb          BNE      |L1.250|
000924  f8970028          LDRB     r0,[r7,#0x28]         ;244
000928  2801              CMP      r0,#1                 ;244
00092a  bf04              ITT      EQ                    ;245
00092c  20f7              MOVEQ    r0,#0xf7              ;245
00092e  f8870020          STRBEQ   r0,[r7,#0x20]         ;245
000932  d012              BEQ      |L1.2394|
000934  a899              ADD      r0,sp,#0x264          ;247
000936  f8dd15b0          LDR      r1,[sp,#0x5b0]        ;247
00093a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00093e  9000              STR      r0,[sp,#0]            ;247
000940  eeb00a49          VMOV.F32 s0,s18                ;247
000944  f89d3514          LDRB     r3,[sp,#0x514]        ;247
000948  f50d6295          ADD      r2,sp,#0x4a8          ;247
00094c  4659              MOV      r1,r11                ;247
00094e  4638              MOV      r0,r7                 ;247
000950  f7fffffe          BL       _ZN4Anki8Embedded12VisionMarker7ExtractERKNS0_5ArrayIhEERKNS2_IfEEhfNS0_11MemoryStackE ; Anki::Embedded::VisionMarker::Extract(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Array<float>&, unsigned char, float, Anki::Embedded::MemoryStack)
000954  2800              CMP      r0,#0                 ;247
000956  f47fabd0          BNE      |L1.250|
                  |L1.2394|
00095a  68e0              LDR      r0,[r4,#0xc]          ;226
00095c  1c76              ADDS     r6,r6,#1              ;226
00095e  42b0              CMP      r0,r6                 ;226
000960  dcac              BGT      |L1.2236|
                  |L1.2402|
000962  f8dd05a8          LDR      r0,[sp,#0x5a8]        ;260
000966  bb90              CBNZ     r0,|L1.2510|
000968  68e0              LDR      r0,[r4,#0xc]          ;261
00096a  2700              MOVS     r7,#0                 ;261
00096c  2800              CMP      r0,#0                 ;261
00096e  dd2e              BLE      |L1.2510|
                  |L1.2416|
000970  eb070147          ADD      r1,r7,r7,LSL #1       ;261
000974  6b20              LDR      r0,[r4,#0x30]         ;261
000976  eb0101c7          ADD      r1,r1,r7,LSL #3       ;261
00097a  eb000081          ADD      r0,r0,r1,LSL #2       ;261
00097e  f8900028          LDRB     r0,[r0,#0x28]         ;262
000982  b328              CBZ      r0,|L1.2512|
000984  68e0              LDR      r0,[r4,#0xc]          ;263
000986  4639              MOV      r1,r7                 ;263
000988  4288              CMP      r0,r1                 ;263
00098a  dd22              BLE      |L1.2514|
                  |L1.2444|
00098c  eb010041          ADD      r0,r1,r1,LSL #1       ;263
000990  6b22              LDR      r2,[r4,#0x30]         ;263
000992  eb0000c1          ADD      r0,r0,r1,LSL #3       ;263
000996  eb020680          ADD      r6,r2,r0,LSL #2       ;263
00099a  1c48              ADDS     r0,r1,#1              ;264
00099c  eb000340          ADD      r3,r0,r0,LSL #1       ;264
0009a0  eb0300c0          ADD      r0,r3,r0,LSL #3       ;264
0009a4  eb020c80          ADD      r12,r2,r0,LSL #2      ;264
0009a8  2000              MOVS     r0,#0                 ;264
                  |L1.2474|
0009aa  eb0c02c0          ADD      r2,r12,r0,LSL #3      ;264
0009ae  eb0603c0          ADD      r3,r6,r0,LSL #3       ;264
0009b2  ed920a00          VLDR     s0,[r2,#0]            ;264
0009b6  1c40              ADDS     r0,r0,#1              ;264
0009b8  ed830a00          VSTR     s0,[r3,#0]            ;264
0009bc  ed920a01          VLDR     s0,[r2,#4]            ;264
0009c0  2804              CMP      r0,#4                 ;264
0009c2  ed830a01          VSTR     s0,[r3,#4]            ;264
0009c6  dbf0              BLT      |L1.2474|
0009c8  f89c0020          LDRB     r0,[r12,#0x20]        ;264
0009cc  e086              B        |L1.2780|
                  |L1.2510|
0009ce  e0cb              B        |L1.2920|
                  |L1.2512|
0009d0  e0c5              B        |L1.2910|
                  |L1.2514|
0009d2  e0a6              B        |L1.2850|
                  |L1.2516|
0009d4  436f6d70          DCB      "CompressConnectedComponentSegmentIds4",0
0009d8  72657373
0009dc  436f6e6e
0009e0  65637465
0009e4  64436f6d
0009e8  706f6e65
0009ec  6e745365
0009f0  676d656e
0009f4  74496473
0009f8  3400    
0009fa  00                DCB      0
0009fb  00                DCB      0
                  |L1.2556|
0009fc  536f7274          DCB      "SortConnectedComponentSegmentsById",0
000a00  436f6e6e
000a04  65637465
000a08  64436f6d
000a0c  706f6e65
000a10  6e745365
000a14  676d656e
000a18  74734279
000a1c  496400  
000a1f  00                DCB      0
                  |L1.2592|
000a20  436f6d70          DCB      "ComputeQuadrilateralsFromConnectedComponents",0
000a24  75746551
000a28  75616472
000a2c  696c6174
000a30  6572616c
000a34  7346726f
000a38  6d436f6e
000a3c  6e656374
000a40  6564436f
000a44  6d706f6e
000a48  656e7473
000a4c  00      
000a4d  00                DCB      0
000a4e  00                DCB      0
000a4f  00                DCB      0
                  |L1.2640|
000a50  436f6d70          DCB      "ComputeHomographyFromQuad",0
000a54  75746548
000a58  6f6d6f67
000a5c  72617068
000a60  7946726f
000a64  6d517561
000a68  6400    
000a6a  00                DCB      0
000a6b  00                DCB      0
                  |L1.2668|
                          DCD      ||.constdata||
                  |L1.2672|
000a70  65787472          DCB      "extractedComponents could not be allocated",0
000a74  61637465
000a78  64436f6d
000a7c  706f6e65
000a80  6e747320
000a84  636f756c
000a88  64206e6f
000a8c  74206265
000a90  20616c6c
000a94  6f636174
000a98  656400  
000a9b  00                DCB      0
                  |L1.2716|
                          DCD      0x01000001
                  |L1.2720|
000aa0  66696c74          DCB      "filterHalfWidths could not be allocated",0
000aa4  65724861
000aa8  6c665769
000aac  64746873
000ab0  20636f75
000ab4  6c64206e
000ab8  6f742062
000abc  6520616c
000ac0  6c6f6361
000ac4  74656400
                  |L1.2760|
000ac8  45787472          DCB      "ExtractVisionMarker",0
000acc  61637456
000ad0  6973696f
000ad4  6e4d6172
000ad8  6b657200
                  |L1.2780|
000adc  f8860020          STRB     r0,[r6,#0x20]         ;264
000ae0  ed9c0a09          VLDR     s0,[r12,#0x24]        ;264
000ae4  eb010281          ADD      r2,r1,r1,LSL #2       ;264
000ae8  ed860a09          VSTR     s0,[r6,#0x24]         ;264
000aec  f89c0028          LDRB     r0,[r12,#0x28]        ;264
000af0  f8860028          STRB     r0,[r6,#0x28]         ;264
000af4  6b28              LDR      r0,[r5,#0x30]         ;264
000af6  1c4b              ADDS     r3,r1,#1              ;265
000af8  eb000282          ADD      r2,r0,r2,LSL #2       ;265
000afc  eb030383          ADD      r3,r3,r3,LSL #2       ;265
000b00  eb000083          ADD      r0,r0,r3,LSL #2       ;265
000b04  1c49              ADDS     r1,r1,#1              ;263
000b06  6803              LDR      r3,[r0,#0]            ;263
000b08  6013              STR      r3,[r2,#0]            ;263
000b0a  6843              LDR      r3,[r0,#4]            ;263
000b0c  6053              STR      r3,[r2,#4]            ;263
000b0e  6883              LDR      r3,[r0,#8]            ;263
000b10  6093              STR      r3,[r2,#8]            ;263
000b12  68c3              LDR      r3,[r0,#0xc]          ;263
000b14  60d3              STR      r3,[r2,#0xc]          ;263
000b16  6900              LDR      r0,[r0,#0x10]         ;263
000b18  6110              STR      r0,[r2,#0x10]         ;263
000b1a  68e0              LDR      r0,[r4,#0xc]          ;263
000b1c  4281              CMP      r1,r0                 ;263
000b1e  f6ffaf35          BLT      |L1.2444|
                  |L1.2850|
000b22  1e40              SUBS     r0,r0,#1              ;268
000b24  69e1              LDR      r1,[r4,#0x1c]         ;268
000b26  2800              CMP      r0,#0                 ;268
000b28  bfb4              ITE      LT                    ;268
000b2a  2200              MOVLT    r2,#0                 ;268
000b2c  4602              MOVGE    r2,r0                 ;268
000b2e  4291              CMP      r1,r2                 ;268
000b30  bfb8              IT       LT                    ;268
000b32  4608              MOVLT    r0,r1                 ;268
000b34  db02              BLT      |L1.2876|
000b36  2800              CMP      r0,#0                 ;268
000b38  bfb8              IT       LT                    ;268
000b3a  2000              MOVLT    r0,#0                 ;268
                  |L1.2876|
000b3c  60e0              STR      r0,[r4,#0xc]          ;268
000b3e  68e8              LDR      r0,[r5,#0xc]          ;269
000b40  69e9              LDR      r1,[r5,#0x1c]         ;269
000b42  1e40              SUBS     r0,r0,#1              ;269
000b44  2800              CMP      r0,#0                 ;269
000b46  bfb4              ITE      LT                    ;269
000b48  2200              MOVLT    r2,#0                 ;269
000b4a  4602              MOVGE    r2,r0                 ;269
000b4c  4291              CMP      r1,r2                 ;269
000b4e  bfb8              IT       LT                    ;269
000b50  4608              MOVLT    r0,r1                 ;269
000b52  db02              BLT      |L1.2906|
000b54  2800              CMP      r0,#0                 ;269
000b56  bfb8              IT       LT                    ;269
000b58  2000              MOVLT    r0,#0                 ;269
                  |L1.2906|
000b5a  1e7f              SUBS     r7,r7,#1              ;270
000b5c  60e8              STR      r0,[r5,#0xc]          ;270
                  |L1.2910|
000b5e  68e0              LDR      r0,[r4,#0xc]          ;261
000b60  1c7f              ADDS     r7,r7,#1              ;261
000b62  42b8              CMP      r0,r7                 ;261
000b64  f73faf04          BGT      |L1.2416|
                  |L1.2920|
000b68  f2af00a4          ADR      r0,|L1.2760|
000b6c  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000b70  f2af7054          ADR      r0,|L1.1056|
000b74  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000b78  2000              MOVS     r0,#0                 ;279
000b7a  f7ffbabe          B        |L1.250|
;;;281      } // namespace Embedded
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded21DetectFiducialMarkersERKNS0_5ArrayIhEERNS0_15FixedLengthListINS0_12VisionMarkerEEERNS5_INS1_IfEEEEiissiiiifiiifiiiiffbNS0_11MemoryStackESC_SC_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded21DetectFiducialMarkersERKNS0_5ArrayIhEERNS0_15FixedLengthListINS0_12VisionMarkerEEERNS5_INS1_IfEEEEiissiiiifiiifiiiiffbNS0_11MemoryStackESC_SC_||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a446574          DCB      0x3a,0x44,0x65,0x74
000020  65637446          DCB      0x65,0x63,0x74,0x46
000024  69647563          DCB      0x69,0x64,0x75,0x63
000028  69616c4d          DCB      0x69,0x61,0x6c,0x4d
00002c  61726b65          DCB      0x61,0x72,0x6b,0x65
000030  72732863          DCB      0x72,0x73,0x28,0x63
000034  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000038  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00003c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000040  6d626564          DCB      0x6d,0x62,0x65,0x64
000044  6465643a          DCB      0x64,0x65,0x64,0x3a
000048  3a417272          DCB      0x3a,0x41,0x72,0x72
00004c  61793c75          DCB      0x61,0x79,0x3c,0x75
000050  6e736967          DCB      0x6e,0x73,0x69,0x67
000054  6e656420          DCB      0x6e,0x65,0x64,0x20
000058  63686172          DCB      0x63,0x68,0x61,0x72
00005c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000060  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000064  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000068  6d626564          DCB      0x6d,0x62,0x65,0x64
00006c  6465643a          DCB      0x64,0x65,0x64,0x3a
000070  3a466978          DCB      0x3a,0x46,0x69,0x78
000074  65644c65          DCB      0x65,0x64,0x4c,0x65
000078  6e677468          DCB      0x6e,0x67,0x74,0x68
00007c  4c697374          DCB      0x4c,0x69,0x73,0x74
000080  3c416e6b          DCB      0x3c,0x41,0x6e,0x6b
000084  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000088  6d626564          DCB      0x6d,0x62,0x65,0x64
00008c  6465643a          DCB      0x64,0x65,0x64,0x3a
000090  3a566973          DCB      0x3a,0x56,0x69,0x73
000094  696f6e4d          DCB      0x69,0x6f,0x6e,0x4d
000098  61726b65          DCB      0x61,0x72,0x6b,0x65
00009c  723e2026          DCB      0x72,0x3e,0x20,0x26
0000a0  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0000a4  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000a8  456d6265          DCB      0x45,0x6d,0x62,0x65
0000ac  64646564          DCB      0x64,0x64,0x65,0x64
0000b0  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
0000b4  7865644c          DCB      0x78,0x65,0x64,0x4c
0000b8  656e6774          DCB      0x65,0x6e,0x67,0x74
0000bc  684c6973          DCB      0x68,0x4c,0x69,0x73
0000c0  743c416e          DCB      0x74,0x3c,0x41,0x6e
0000c4  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000c8  456d6265          DCB      0x45,0x6d,0x62,0x65
0000cc  64646564          DCB      0x64,0x64,0x65,0x64
0000d0  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
0000d4  7261793c          DCB      0x72,0x61,0x79,0x3c
0000d8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000dc  743e3e20          DCB      0x74,0x3e,0x3e,0x20
0000e0  262c2073          DCB      0x26,0x2c,0x20,0x73
0000e4  69676e65          DCB      0x69,0x67,0x6e,0x65
0000e8  6420696e          DCB      0x64,0x20,0x69,0x6e
0000ec  742c2073          DCB      0x74,0x2c,0x20,0x73
0000f0  69676e65          DCB      0x69,0x67,0x6e,0x65
0000f4  6420696e          DCB      0x64,0x20,0x69,0x6e
0000f8  742c2073          DCB      0x74,0x2c,0x20,0x73
0000fc  69676e65          DCB      0x69,0x67,0x6e,0x65
000100  64207368          DCB      0x64,0x20,0x73,0x68
000104  6f72742c          DCB      0x6f,0x72,0x74,0x2c
000108  20736967          DCB      0x20,0x73,0x69,0x67
00010c  6e656420          DCB      0x6e,0x65,0x64,0x20
000110  73686f72          DCB      0x73,0x68,0x6f,0x72
000114  742c2073          DCB      0x74,0x2c,0x20,0x73
000118  69676e65          DCB      0x69,0x67,0x6e,0x65
00011c  6420696e          DCB      0x64,0x20,0x69,0x6e
000120  742c2073          DCB      0x74,0x2c,0x20,0x73
000124  69676e65          DCB      0x69,0x67,0x6e,0x65
000128  6420696e          DCB      0x64,0x20,0x69,0x6e
00012c  742c2073          DCB      0x74,0x2c,0x20,0x73
000130  69676e65          DCB      0x69,0x67,0x6e,0x65
000134  6420696e          DCB      0x64,0x20,0x69,0x6e
000138  742c2073          DCB      0x74,0x2c,0x20,0x73
00013c  69676e65          DCB      0x69,0x67,0x6e,0x65
000140  6420696e          DCB      0x64,0x20,0x69,0x6e
000144  742c2066          DCB      0x74,0x2c,0x20,0x66
000148  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00014c  2c207369          DCB      0x2c,0x20,0x73,0x69
000150  676e6564          DCB      0x67,0x6e,0x65,0x64
000154  20696e74          DCB      0x20,0x69,0x6e,0x74
000158  2c207369          DCB      0x2c,0x20,0x73,0x69
00015c  676e6564          DCB      0x67,0x6e,0x65,0x64
000160  20696e74          DCB      0x20,0x69,0x6e,0x74
000164  2c207369          DCB      0x2c,0x20,0x73,0x69
000168  676e6564          DCB      0x67,0x6e,0x65,0x64
00016c  20696e74          DCB      0x20,0x69,0x6e,0x74
000170  2c20666c          DCB      0x2c,0x20,0x66,0x6c
000174  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000178  20736967          DCB      0x20,0x73,0x69,0x67
00017c  6e656420          DCB      0x6e,0x65,0x64,0x20
000180  696e742c          DCB      0x69,0x6e,0x74,0x2c
000184  20736967          DCB      0x20,0x73,0x69,0x67
000188  6e656420          DCB      0x6e,0x65,0x64,0x20
00018c  696e742c          DCB      0x69,0x6e,0x74,0x2c
000190  20736967          DCB      0x20,0x73,0x69,0x67
000194  6e656420          DCB      0x6e,0x65,0x64,0x20
000198  696e742c          DCB      0x69,0x6e,0x74,0x2c
00019c  20736967          DCB      0x20,0x73,0x69,0x67
0001a0  6e656420          DCB      0x6e,0x65,0x64,0x20
0001a4  696e742c          DCB      0x69,0x6e,0x74,0x2c
0001a8  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0001ac  61742c20          DCB      0x61,0x74,0x2c,0x20
0001b0  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0001b4  742c2062          DCB      0x74,0x2c,0x20,0x62
0001b8  6f6f6c2c          DCB      0x6f,0x6f,0x6c,0x2c
0001bc  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0001c0  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0001c4  6d626564          DCB      0x6d,0x62,0x65,0x64
0001c8  6465643a          DCB      0x64,0x65,0x64,0x3a
0001cc  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
0001d0  6f727953          DCB      0x6f,0x72,0x79,0x53
0001d4  7461636b          DCB      0x74,0x61,0x63,0x6b
0001d8  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0001dc  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0001e0  456d6265          DCB      0x45,0x6d,0x62,0x65
0001e4  64646564          DCB      0x64,0x64,0x65,0x64
0001e8  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
0001ec  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
0001f0  53746163          DCB      0x53,0x74,0x61,0x63
0001f4  6b2c2041          DCB      0x6b,0x2c,0x20,0x41
0001f8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0001fc  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000200  65646465          DCB      0x65,0x64,0x64,0x65
000204  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000208  656d6f72          DCB      0x65,0x6d,0x6f,0x72
00020c  79537461          DCB      0x79,0x53,0x74,0x61
000210  636b2900          DCB      0x63,0x6b,0x29,0x00
000214  41727261          DCB      0x41,0x72,0x72,0x61
000218  793c5479          DCB      0x79,0x3c,0x54,0x79
00021c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000220  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000224  70757465          DCB      0x70,0x75,0x74,0x65
000228  52657175          DCB      0x52,0x65,0x71,0x75
00022c  69726564          DCB      0x69,0x72,0x65,0x64
000230  53747269          DCB      0x53,0x74,0x72,0x69
000234  64650000          DCB      0x64,0x65,0x00,0x00
000238  496e7661          DCB      0x49,0x6e,0x76,0x61
00023c  6c696420          DCB      0x6c,0x69,0x64,0x20
000240  73697a65          DCB      0x73,0x69,0x7a,0x65
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
00024c  6f726574          DCB      0x6f,0x72,0x65,0x74
000250  6563685c          DCB      0x65,0x63,0x68,0x5c
000254  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000258  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
00025c  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000260  64655c61          DCB      0x64,0x65,0x5c,0x61
000264  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000268  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
00026c  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000270  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000274  2f617272          DCB      0x2f,0x61,0x72,0x72
000278  61793264          DCB      0x61,0x79,0x32,0x64
00027c  2e680000          DCB      0x2e,0x68,0x00,0x00
000280  41727261          DCB      0x41,0x72,0x72,0x61
000284  793c5479          DCB      0x79,0x3c,0x54,0x79
000288  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00028c  3a676574          DCB      0x3a,0x67,0x65,0x74
000290  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000294  65000000          DCB      0x65,0x00,0x00,0x00
000298  4e656761          DCB      0x4e,0x65,0x67,0x61
00029c  74697665          DCB      0x74,0x69,0x76,0x65
0002a0  2064696d          DCB      0x20,0x64,0x69,0x6d
0002a4  656e7369          DCB      0x65,0x6e,0x73,0x69
0002a8  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d017              BEQ      |L14.64|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L14.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L14.30|
                  |L14.26|
00001a  462b              MOV      r3,r5
00001c  e010              B        |L14.64|
                  |L14.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0a              BGE      |L14.64|
00002a  2185              MOVS     r1,#0x85
00002c  4806              LDR      r0,|L14.72|
00002e  e9cd0100          STRD     r0,r1,[sp,#0]
000032  a306              ADR      r3,|L14.76|
000034  a214              ADR      r2,|L14.136|
000036  a11a              ADR      r1,|L14.160|
000038  2005              MOVS     r0,#5
00003a  f7fffffe          BL       _Anki_Log
00003e  462b              MOV      r3,r5
                  |L14.64|
000040  6023              STR      r3,[r4,#0]
000042  b003              ADD      sp,sp,#0xc
000044  4620              MOV      r0,r4
000046  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L14.72|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L14.76|
00004c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/sequen"
000050  6f726574
000054  6563685c
000058  636f6d6d
00005c  6f6e5c69
000060  6e636c75
000064  64655c61
000068  6e6b692f
00006c  636f6d6d
000070  6f6e2f72
000074  6f626f74
000078  2f736571
00007c  75656e  
00007f  6365732e          DCB      "ces.h",0
000083  6800    
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L14.136|
000088  73697a65          DCB      "size estimation failed",0
00008c  20657374
000090  696d6174
000094  696f6e20
000098  6661696c
00009c  656400  
00009f  00                DCB      0
                  |L14.160|
0000a0  4c696e65          DCB      "LinearSequence<Type>::computeSize",0
0000a4  61725365
0000a8  7175656e
0000ac  63653c54
0000b0  7970653e
0000b4  3a3a636f
0000b8  6d707574
0000bc  6553697a
0000c0  6500    
0000c2  00                DCB      0
0000c3  00                DCB      0

                          AREA ||area_number.15||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded19ConnectedComponentsaSERKS1_||, COMGROUP=_ZN4Anki8Embedded19ConnectedComponentsaSERKS1_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded19ConnectedComponentsaSERKS1_ PROC ; Anki::Embedded::ConnectedComponents::operator =(const Anki::Embedded::ConnectedComponents&)
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  7808              LDRB     r0,[r1,#0]
000008  460f              MOV      r7,r1
00000a  7030              STRB     r0,[r6,#0]
00000c  1d35              ADDS     r5,r6,#4
00000e  1d0c              ADDS     r4,r1,#4
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000018  f1040134          ADD      r1,r4,#0x34
00001c  f1050034          ADD      r0,r5,#0x34
000020  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000024  f1040168          ADD      r1,r4,#0x68
000028  f1050068          ADD      r0,r5,#0x68
00002c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000030  f104019c          ADD      r1,r4,#0x9c
000034  f105009c          ADD      r0,r5,#0x9c
000038  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
00003c  e9d40234          LDRD     r0,r2,[r4,#0xd0]
000040  f10501d0          ADD      r1,r5,#0xd0
000044  f8d430d8          LDR      r3,[r4,#0xd8]
000048  f8c530d8          STR      r3,[r5,#0xd8]
00004c  e9c10200          STRD     r0,r2,[r1,#0]
000050  e9d40237          LDRD     r0,r2,[r4,#0xdc]
000054  f8d430e4          LDR      r3,[r4,#0xe4]
000058  f8c530e4          STR      r3,[r5,#0xe4]
00005c  e9c10203          STRD     r0,r2,[r1,#0xc]
000060  f8d420e8          LDR      r2,[r4,#0xe8]
000064  f8c520e8          STR      r2,[r5,#0xe8]
000068  f8d420ec          LDR      r2,[r4,#0xec]
00006c  f8c520ec          STR      r2,[r5,#0xec]
000070  f8d420f0          LDR      r2,[r4,#0xf0]
000074  f8c520f0          STR      r2,[r5,#0xf0]
000078  f8d420f4          LDR      r2,[r4,#0xf4]
00007c  f8c520f4          STR      r2,[r5,#0xf4]
000080  f8d420f8          LDR      r2,[r4,#0xf8]
000084  f8c520f8          STR      r2,[r5,#0xf8]
000088  f8d400fc          LDR      r0,[r4,#0xfc]
00008c  62c8              STR      r0,[r1,#0x2c]
00008e  f8d40100          LDR      r0,[r4,#0x100]
000092  6308              STR      r0,[r1,#0x30]
000094  f8940104          LDRB     r0,[r4,#0x104]
000098  f8850104          STRB     r0,[r5,#0x104]
00009c  f8940105          LDRB     r0,[r4,#0x105]
0000a0  f8850105          STRB     r0,[r5,#0x105]
0000a4  f8940106          LDRB     r0,[r4,#0x106]
0000a8  f8850106          STRB     r0,[r5,#0x106]
0000ac  f8940107          LDRB     r0,[r4,#0x107]
0000b0  f8850107          STRB     r0,[r5,#0x107]
0000b4  f8b40108          LDRH     r0,[r4,#0x108]
0000b8  f8a50108          STRH     r0,[r5,#0x108]
0000bc  f8d4010c          LDR      r0,[r4,#0x10c]
0000c0  f8c5010c          STR      r0,[r5,#0x10c]
0000c4  f8d40110          LDR      r0,[r4,#0x110]
0000c8  f8c50110          STR      r0,[r5,#0x110]
0000cc  f506758c          ADD      r5,r6,#0x118
0000d0  f507748c          ADD      r4,r7,#0x118
0000d4  4621              MOV      r1,r4
0000d6  4628              MOV      r0,r5
0000d8  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
0000dc  f1040134          ADD      r1,r4,#0x34
0000e0  f1050034          ADD      r0,r5,#0x34
0000e4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
0000e8  f1040168          ADD      r1,r4,#0x68
0000ec  f1050068          ADD      r0,r5,#0x68
0000f0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
0000f4  f104019c          ADD      r1,r4,#0x9c
0000f8  f105009c          ADD      r0,r5,#0x9c
0000fc  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
000100  e9d40234          LDRD     r0,r2,[r4,#0xd0]
000104  f50671f4          ADD      r1,r6,#0x1e8
000108  f8d430d8          LDR      r3,[r4,#0xd8]
00010c  f8c631f0          STR      r3,[r6,#0x1f0]
000110  e9c10200          STRD     r0,r2,[r1,#0]
000114  e9d40237          LDRD     r0,r2,[r4,#0xdc]
000118  f8d430e4          LDR      r3,[r4,#0xe4]
00011c  f8c631fc          STR      r3,[r6,#0x1fc]
000120  e9c10203          STRD     r0,r2,[r1,#0xc]
000124  f8d420e8          LDR      r2,[r4,#0xe8]
000128  f8c62200          STR      r2,[r6,#0x200]
00012c  f8d420ec          LDR      r2,[r4,#0xec]
000130  f8c62204          STR      r2,[r6,#0x204]
000134  f8d420f0          LDR      r2,[r4,#0xf0]
000138  f8c62208          STR      r2,[r6,#0x208]
00013c  f8d420f4          LDR      r2,[r4,#0xf4]
000140  f8c6220c          STR      r2,[r6,#0x20c]
000144  f8d420f8          LDR      r2,[r4,#0xf8]
000148  f8c62210          STR      r2,[r6,#0x210]
00014c  f8d400fc          LDR      r0,[r4,#0xfc]
000150  62c8              STR      r0,[r1,#0x2c]
000152  f8d40100          LDR      r0,[r4,#0x100]
000156  6308              STR      r0,[r1,#0x30]
000158  f8940104          LDRB     r0,[r4,#0x104]
00015c  f8850104          STRB     r0,[r5,#0x104]
000160  f8940105          LDRB     r0,[r4,#0x105]
000164  f8850105          STRB     r0,[r5,#0x105]
000168  f8940106          LDRB     r0,[r4,#0x106]
00016c  f8850106          STRB     r0,[r5,#0x106]
000170  f8940107          LDRB     r0,[r4,#0x107]
000174  f8850107          STRB     r0,[r5,#0x107]
000178  f8d40108          LDR      r0,[r4,#0x108]
00017c  f8c50108          STR      r0,[r5,#0x108]
000180  f8d4010c          LDR      r0,[r4,#0x10c]
000184  f8c5010c          STR      r0,[r5,#0x10c]
000188  f8d40110          LDR      r0,[r4,#0x110]
00018c  f8c50110          STR      r0,[r5,#0x110]
000190  4630              MOV      r0,r6
000192  e8bd81f0          POP      {r4-r8,pc}
                          ENDP


                          AREA ||area_number.22||, COMGROUP=_ZN4Anki8Embedded19ConnectedComponentsaSERKS1_, LINKORDER=||i._ZN4Anki8Embedded19ConnectedComponentsaSERKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19ConnectedComponentsaSERKS1_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIiEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<int>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L25.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L25.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L25.384|
000044  a25c              ADR      r2,|L25.440|
000046  a160              ADR      r1,|L25.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L25.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L25.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L25.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L25.384|
000080  a24d              ADR      r2,|L25.440|
000082  a157              ADR      r1,|L25.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L25.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L25.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L25.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L25.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L25.384|
0000c8  a251              ADR      r2,|L25.528|
0000ca  a156              ADR      r1,|L25.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L25.372|
                  |L25.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L25.384|
0000e0  a258              ADR      r2,|L25.580|
0000e2  a15f              ADR      r1,|L25.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L25.372|
                  |L25.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L25.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L25.384|
000110  a259              ADR      r2,|L25.632|
000112  a144              ADR      r1,|L25.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L25.372|
                  |L25.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L25.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L25.384|
00015a  a251              ADR      r2,|L25.672|
00015c  a140              ADR      r1,|L25.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L25.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L25.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L25.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L25.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L25.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L25.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L25.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L25.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L25.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L25.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L25.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L25.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L25.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L25.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.26||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L32.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L32.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L32.384|
000044  a25c              ADR      r2,|L32.440|
000046  a160              ADR      r1,|L32.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L32.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L32.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L32.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L32.384|
000080  a24d              ADR      r2,|L32.440|
000082  a157              ADR      r1,|L32.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L32.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L32.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L32.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L32.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L32.384|
0000c8  a251              ADR      r2,|L32.528|
0000ca  a156              ADR      r1,|L32.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L32.372|
                  |L32.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L32.384|
0000e0  a258              ADR      r2,|L32.580|
0000e2  a15f              ADR      r1,|L32.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L32.372|
                  |L32.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L32.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L32.384|
000110  a259              ADR      r2,|L32.632|
000112  a144              ADR      r1,|L32.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L32.372|
                  |L32.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L32.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L32.384|
00015a  a251              ADR      r2,|L32.672|
00015c  a140              ADR      r1,|L32.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L32.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L32.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L32.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L32.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L32.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L32.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L32.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L32.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L32.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L32.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L32.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L32.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L32.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L32.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.33||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_ PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<int>>&)
000000  e9d12300          LDRD     r2,r3,[r1,#0]
000004  f8d1c008          LDR      r12,[r1,#8]
000008  f8c0c008          STR      r12,[r0,#8]
00000c  e9c02300          STRD     r2,r3,[r0,#0]
000010  e9d12303          LDRD     r2,r3,[r1,#0xc]
000014  f8d1c014          LDR      r12,[r1,#0x14]
000018  f8c0c014          STR      r12,[r0,#0x14]
00001c  e9c02303          STRD     r2,r3,[r0,#0xc]
000020  698b              LDR      r3,[r1,#0x18]
000022  6183              STR      r3,[r0,#0x18]
000024  69cb              LDR      r3,[r1,#0x1c]
000026  61c3              STR      r3,[r0,#0x1c]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  6203              STR      r3,[r0,#0x20]
00002c  6a4b              LDR      r3,[r1,#0x24]
00002e  6243              STR      r3,[r0,#0x24]
000030  6a8b              LDR      r3,[r1,#0x28]
000032  6283              STR      r3,[r0,#0x28]
000034  6aca              LDR      r2,[r1,#0x2c]
000036  62c2              STR      r2,[r0,#0x2c]
000038  6b09              LDR      r1,[r1,#0x30]
00003a  6301              STR      r1,[r0,#0x30]
00003c  4770              BX       lr
                          ENDP


                          AREA ||area_number.40||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_, LINKORDER=||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentIiEEEaSERKS4_||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_ PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::ConnectedComponentSegment<unsigned short>>&)
000000  e9d12300          LDRD     r2,r3,[r1,#0]
000004  f8d1c008          LDR      r12,[r1,#8]
000008  f8c0c008          STR      r12,[r0,#8]
00000c  e9c02300          STRD     r2,r3,[r0,#0]
000010  e9d12303          LDRD     r2,r3,[r1,#0xc]
000014  f8d1c014          LDR      r12,[r1,#0x14]
000018  f8c0c014          STR      r12,[r0,#0x14]
00001c  e9c02303          STRD     r2,r3,[r0,#0xc]
000020  698b              LDR      r3,[r1,#0x18]
000022  6183              STR      r3,[r0,#0x18]
000024  69cb              LDR      r3,[r1,#0x1c]
000026  61c3              STR      r3,[r0,#0x1c]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  6203              STR      r3,[r0,#0x20]
00002c  6a4b              LDR      r3,[r1,#0x24]
00002e  6243              STR      r3,[r0,#0x24]
000030  6a8b              LDR      r3,[r1,#0x28]
000032  6283              STR      r3,[r0,#0x28]
000034  6aca              LDR      r2,[r1,#0x2c]
000036  62c2              STR      r2,[r0,#0x2c]
000038  6b09              LDR      r1,[r1,#0x30]
00003a  6301              STR      r1,[r0,#0x30]
00003c  4770              BX       lr
                          ENDP


                          AREA ||area_number.44||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_, LINKORDER=||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15FixedLengthListINS0_25ConnectedComponentSegmentItEEEaSERKS4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<int>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L47.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L47.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.48||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::VisionMarker>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L54.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L54.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.55||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<short>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L61.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L61.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L61.384|
000044  a25c              ADR      r2,|L61.440|
000046  a160              ADR      r1,|L61.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L61.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0100              LSLS     r0,r0,#4
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L61.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L61.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L61.384|
000080  a24d              ADR      r2,|L61.440|
000082  a157              ADR      r1,|L61.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L61.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L61.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L61.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L61.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L61.384|
0000c8  a251              ADR      r2,|L61.528|
0000ca  a156              ADR      r1,|L61.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L61.372|
                  |L61.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L61.384|
0000e0  a258              ADR      r2,|L61.580|
0000e2  a15f              ADR      r1,|L61.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L61.372|
                  |L61.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L61.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L61.384|
000110  a259              ADR      r2,|L61.632|
000112  a144              ADR      r1,|L61.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L61.372|
                  |L61.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0131              LSLS     r1,r6,#4
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L61.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L61.384|
00015a  a251              ADR      r2,|L61.672|
00015c  a140              ADR      r1,|L61.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L61.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L61.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L61.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L61.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L61.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L61.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L61.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L61.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L61.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L61.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L61.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L61.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L61.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L61.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.62||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.62||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIsEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIsEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIsEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<short>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L68.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L68.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.69||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIsEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIsEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.69||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIsEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d207369          DCB      0x3d,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  20696e74          DCB      0x20,0x69,0x6e,0x74
000090  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000bc  65642069          DCB      0x65,0x64,0x20,0x69
0000c0  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2073          DCB      0x20,0x3d,0x20,0x73
000094  69676e65          DCB      0x69,0x67,0x6e,0x65
000098  6420696e          DCB      0x64,0x20,0x69,0x6e
00009c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5175          DCB      0x3a,0x3a,0x51,0x75
000098  61647269          DCB      0x61,0x64,0x72,0x69
00009c  6c617465          DCB      0x6c,0x61,0x74,0x65
0000a0  72616c3c          DCB      0x72,0x61,0x6c,0x3c
0000a4  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a8  65642073          DCB      0x65,0x64,0x20,0x73
0000ac  686f7274          DCB      0x68,0x6f,0x72,0x74
0000b0  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  51756164          DCB      0x51,0x75,0x61,0x64
0000cc  72696c61          DCB      0x72,0x69,0x6c,0x61
0000d0  74657261          DCB      0x74,0x65,0x72,0x61
0000d4  6c3c7369          DCB      0x6c,0x3c,0x73,0x69
0000d8  676e6564          DCB      0x67,0x6e,0x65,0x64
0000dc  2073686f          DCB      0x20,0x73,0x68,0x6f
0000e0  72743e5d          DCB      0x72,0x74,0x3e,0x5d
0000e4  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a51          DCB      0x64,0x3a,0x3a,0x51
0000a4  75616472          DCB      0x75,0x61,0x64,0x72
0000a8  696c6174          DCB      0x69,0x6c,0x61,0x74
0000ac  6572616c          DCB      0x65,0x72,0x61,0x6c
0000b0  3c736967          DCB      0x3c,0x73,0x69,0x67
0000b4  6e656420          DCB      0x6e,0x65,0x64,0x20
0000b8  73686f72          DCB      0x73,0x68,0x6f,0x72
0000bc  743e5d00          DCB      0x74,0x3e,0x5d,0x00
