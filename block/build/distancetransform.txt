; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\distancetransform.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\distancetransform.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\distancetransform.crf ..\coretech\vision\robot\src\distanceTransform.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15ImageProcessing17DistanceTransformENS0_5ArrayIhEEhRNS0_15FixedPointArrayIsEE||, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded15ImageProcessing17DistanceTransformENS0_5ArrayIhEEhRNS0_15FixedPointArrayIsEE PROC ; Anki::Embedded::ImageProcessing::DistanceTransform(Anki::Embedded::Array<unsigned char>, unsigned char, Anki::Embedded::FixedPointArray<short>&)
;;;29           // Any pixel with grayvalue less than backgroundThreshold is treated as background
;;;30           Result DistanceTransform(const Array<u8> image, const u8 backgroundThreshold, FixedPointArray<s16> &distance)
000000  b40f              PUSH     {r0-r3}
;;;31           {
000002  e92d4ff0          PUSH     {r4-r11,lr}
000006  ed2d8b0a          VPUSH    {d8-d12}
00000a  b087              SUB      sp,sp,#0x1c
00000c  e9dd861f          LDRD     r8,r6,[sp,#0x7c]
;;;32             BeginBenchmark("dt_init");
;;;33     
;;;34             const s32 numFractionalBits = distance.get_numFractionalBits();
;;;35     
;;;36             // For numFractionalBits==3, a==8 and b==11
;;;37             const u16 a = saturate_cast<u16>(0.95509 * pow(2.0,numFractionalBits));
000010  ed9fcbf9          VLDR     d12,|L1.1016|
000014  ed9fabfa          VLDR     d10,|L1.1024|
000018  ed9fbbfb          VLDR     d11,|L1.1032|
00001c  ed9f9bfc          VLDR     d9,|L1.1040|
000020  a0fd              ADR      r0,|L1.1048|
000022  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000026  f8d69014          LDR      r9,[r6,#0x14]         ;32
00002a  4648              MOV      r0,r9                 ;32
00002c  f7fffffe          BL       __aeabi_i2d
000030  460f              MOV      r7,r1                 ;32
000032  4605              MOV      r5,r0                 ;32
000034  ec470b11          VMOV     d1,r0,r7              ;32
000038  eeb00a4c          VMOV.F32 s0,s24                ;32
00003c  eef00a6c          VMOV.F32 s1,s25                ;32
000040  f7fffffe          BL       __hardfp_pow
000044  ed9f1bf6          VLDR     d1,|L1.1056|
000048  ec510b10          VMOV     r0,r1,d0
00004c  ec532b11          VMOV     r2,r3,d1
000050  f7fffffe          BL       __aeabi_dmul
000054  ec410b18          VMOV     d8,r0,r1
000058  ec532b19          VMOV     r2,r3,d9
00005c  f7fffffe          BL       __aeabi_cdcmple
000060  bf27              ITTEE    CS
000062  eeb01a48          VMOVCS.F32 s2,s16
000066  eef01a68          VMOVCS.F32 s3,s17
00006a  eeb01a49          VMOVCC.F32 s2,s18
00006e  eef01a69          VMOVCC.F32 s3,s19
000072  ec532b1b          VMOV     r2,r3,d11
000076  ec510b11          VMOV     r0,r1,d1
00007a  f7fffffe          BL       __aeabi_cdrcmple
00007e  bf3c              ITT      CC
000080  eeb08a4b          VMOVCC.F32 s16,s22
000084  eef08a6b          VMOVCC.F32 s17,s23
000088  d30a              BCC      |L1.160|
00008a  ec532b19          VMOV     r2,r3,d9
00008e  ec510b18          VMOV     r0,r1,d8
000092  f7fffffe          BL       __aeabi_cdcmple
000096  bf3c              ITT      CC
000098  eeb08a49          VMOVCC.F32 s16,s18
00009c  eef08a69          VMOVCC.F32 s17,s19
                  |L1.160|
0000a0  ec532b19          VMOV     r2,r3,d9
0000a4  ec510b18          VMOV     r0,r1,d8
0000a8  f7fffffe          BL       __aeabi_cdrcmple
0000ac  ec532b1a          VMOV     r2,r3,d10
0000b0  ec510b18          VMOV     r0,r1,d8
0000b4  d204              BCS      |L1.192|
0000b6  f7fffffe          BL       __aeabi_dadd
0000ba  f7fffffe          BL       __aeabi_d2iz
0000be  e003              B        |L1.200|
                  |L1.192|
0000c0  f7fffffe          BL       __aeabi_dsub
0000c4  f7fffffe          BL       __aeabi_d2iz
                  |L1.200|
0000c8  b284              UXTH     r4,r0
;;;38             const u16 b = saturate_cast<u16>(1.3693 * pow(2.0,numFractionalBits));
0000ca  eeb00a4c          VMOV.F32 s0,s24
0000ce  eef00a6c          VMOV.F32 s1,s25
0000d2  ec475b11          VMOV     d1,r5,r7
0000d6  f7fffffe          BL       __hardfp_pow
0000da  ed9f1bd3          VLDR     d1,|L1.1064|
0000de  ec510b10          VMOV     r0,r1,d0
0000e2  ec532b11          VMOV     r2,r3,d1
0000e6  f7fffffe          BL       __aeabi_dmul
0000ea  ec410b18          VMOV     d8,r0,r1
0000ee  ec532b19          VMOV     r2,r3,d9
0000f2  f7fffffe          BL       __aeabi_cdcmple
0000f6  bf27              ITTEE    CS
0000f8  eeb00a48          VMOVCS.F32 s0,s16
0000fc  eef00a68          VMOVCS.F32 s1,s17
000100  eeb00a49          VMOVCC.F32 s0,s18
000104  eef00a69          VMOVCC.F32 s1,s19
000108  ec532b1b          VMOV     r2,r3,d11
00010c  ec510b10          VMOV     r0,r1,d0
000110  f7fffffe          BL       __aeabi_cdrcmple
000114  bf3c              ITT      CC
000116  eeb08a4b          VMOVCC.F32 s16,s22
00011a  eef08a6b          VMOVCC.F32 s17,s23
00011e  d30a              BCC      |L1.310|
000120  ec532b19          VMOV     r2,r3,d9
000124  ec510b18          VMOV     r0,r1,d8
000128  f7fffffe          BL       __aeabi_cdcmple
00012c  bf3c              ITT      CC
00012e  eeb08a49          VMOVCC.F32 s16,s18
000132  eef08a69          VMOVCC.F32 s17,s19
                  |L1.310|
000136  ec532b19          VMOV     r2,r3,d9
00013a  ec510b18          VMOV     r0,r1,d8
00013e  f7fffffe          BL       __aeabi_cdrcmple
000142  ec532b1a          VMOV     r2,r3,d10
000146  ec510b18          VMOV     r0,r1,d8
00014a  d204              BCS      |L1.342|
00014c  f7fffffe          BL       __aeabi_dadd
000150  f7fffffe          BL       __aeabi_d2iz
000154  e003              B        |L1.350|
                  |L1.342|
000156  f7fffffe          BL       __aeabi_dsub
00015a  f7fffffe          BL       __aeabi_d2iz
                  |L1.350|
00015e  b285              UXTH     r5,r0
;;;39     
;;;40             const s32 imageHeight = image.get_size(0);
000160  2100              MOVS     r1,#0
000162  a81a              ADD      r0,sp,#0x68
000164  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;41             const s32 imageWidth = image.get_size(1);
000168  9001              STR      r0,[sp,#4]
00016a  2101              MOVS     r1,#1
00016c  a81a              ADD      r0,sp,#0x68
00016e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000172  4607              MOV      r7,r0
;;;42     
;;;43             //const u32 backgroundThresholdX2 = static_cast<u32>(backgroundThreshold) | (static_cast<u32>(backgroundThreshold) << 16);
;;;44             //const u32 aX2 = static_cast<u32>(a) | (static_cast<u32>(a) << 16);
;;;45             //const u32 bX2 = static_cast<u32>(b) | (static_cast<u32>(b) << 16);
;;;46     
;;;47             // To prevent overflow, maxDistance is a bit less than s16_MAX
;;;48             const u16 maxDistance = s16_MAX - ( MAX(a,b) * (imageHeight + imageWidth) * (1<<numFractionalBits) );
000174  42ac              CMP      r4,r5
000176  bf8c              ITE      HI
000178  4620              MOVHI    r0,r4
00017a  4628              MOVLS    r0,r5
00017c  9901              LDR      r1,[sp,#4]
;;;49     
;;;50             AnkiConditionalErrorAndReturnValue(AreValid(image, distance),
00017e  f8dfb2b0          LDR      r11,|L1.1072|
000182  4439              ADD      r1,r1,r7              ;48
000184  4348              MULS     r0,r1,r0              ;48
000186  fa00f009          LSL      r0,r0,r9              ;48
00018a  f64771ff          MOV      r1,#0x7fff            ;48
00018e  1a08              SUBS     r0,r1,r0              ;48
000190  fa1ffa80          UXTH     r10,r0                ;48
000194  981e              LDR      r0,[sp,#0x78]         ;48
000196  2800              CMP      r0,#0                 ;48
000198  d031              BEQ      |L1.510|
00019a  981a              LDR      r0,[sp,#0x68]         ;48
00019c  2800              CMP      r0,#0                 ;48
00019e  bfa4              ITT      GE                    ;48
0001a0  981b              LDRGE    r0,[sp,#0x6c]         ;48
0001a2  2800              CMPGE    r0,#0                 ;48
0001a4  db2b              BLT      |L1.510|
0001a6  6930              LDR      r0,[r6,#0x10]         ;48
0001a8  2800              CMP      r0,#0                 ;48
0001aa  d028              BEQ      |L1.510|
0001ac  6830              LDR      r0,[r6,#0]            ;48
0001ae  2800              CMP      r0,#0                 ;48
0001b0  bfa4              ITT      GE                    ;48
0001b2  6870              LDRGE    r0,[r6,#4]            ;48
0001b4  2800              CMPGE    r0,#0                 ;48
0001b6  db22              BLT      |L1.510|
;;;51               RESULT_FAIL_INVALID_OBJECT, "DistanceTransform", "Invalid objects");
;;;52     
;;;53             AnkiConditionalErrorAndReturnValue(AreEqualSize(image, distance),
0001b8  a81a              ADD      r0,sp,#0x68
0001ba  2100              MOVS     r1,#0
0001bc  9000              STR      r0,[sp,#0]
0001be  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0001c2  4601              MOV      r1,r0
0001c4  6830              LDR      r0,[r6,#0]
0001c6  4281              CMP      r1,r0
0001c8  d107              BNE      |L1.474|
0001ca  2101              MOVS     r1,#1
0001cc  9800              LDR      r0,[sp,#0]
0001ce  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0001d2  4601              MOV      r1,r0
0001d4  6870              LDR      r0,[r6,#4]
0001d6  4281              CMP      r1,r0
0001d8  d01d              BEQ      |L1.534|
                  |L1.474|
0001da  2035              MOVS     r0,#0x35
0001dc  e9cdb000          STRD     r11,r0,[sp,#0]
0001e0  a394              ADR      r3,|L1.1076|
0001e2  a2a1              ADR      r2,|L1.1128|
0001e4  a1ab              ADR      r1,|L1.1172|
0001e6  2005              MOVS     r0,#5
0001e8  f7fffffe          BL       _Anki_Log
0001ec  f04f60a0          MOV      r0,#0x5000000
                  |L1.496|
;;;54               RESULT_FAIL_INVALID_SIZE, "DistanceTransform", "image and distance must be the same size");
;;;55     
;;;56             AnkiConditionalErrorAndReturnValue(numFractionalBits >= 0 && numFractionalBits < 15,
;;;57               RESULT_FAIL_INVALID_PARAMETER, "DistanceTransform", "numFractionalBits is out of range");
;;;58     
;;;59             AnkiConditionalErrorAndReturnValue(imageWidth%4 == 0,
;;;60               RESULT_FAIL_INVALID_SIZE, "FastGradient", "Image width must be divisible by 4");
;;;61     
;;;62             EndBenchmark("dt_init");
;;;63     
;;;64             //
;;;65             // Forward pass (left and down)
;;;66             //
;;;67     
;;;68             BeginBenchmark("dt_forward1");
;;;69     
;;;70             // Compute the left and top image edges (forward pass)
;;;71             {
;;;72               const u8 * restrict pImage = image.Pointer(0,0);
;;;73     
;;;74               u16 * restrict pDistance = reinterpret_cast<u16*>( distance.Pointer(0,0) );
;;;75     
;;;76               // Top left
;;;77               if(pImage[0] < backgroundThreshold) {
;;;78                 pDistance[0] = 0;
;;;79               } else {
;;;80                 pDistance[0] = maxDistance;
;;;81               }
;;;82     
;;;83               // Left to right
;;;84               for(s32 x=1; x<imageWidth; x++) {
;;;85                 if(pImage[x] < backgroundThreshold) {
;;;86                   pDistance[x] = 0;
;;;87                 } else {
;;;88                   pDistance[x] = pDistance[x-1] + a;
;;;89                 }
;;;90               }
;;;91     
;;;92               // Top to bottom
;;;93               for(s32 y=1; y<imageHeight; y++) {
;;;94                 if(*image.Pointer(y,0) < backgroundThreshold) {
;;;95                   *distance.Pointer(y,0) = 0;
;;;96                 } else {
;;;97                   *distance.Pointer(y,0) = *distance.Pointer(y-1,0) + a;
;;;98                 }
;;;99               }
;;;100            } // Compute the left and top image edges (forward pass)
;;;101    
;;;102            EndBenchmark("dt_forward1");
;;;103    
;;;104            BeginBenchmark("dt_forward2");
;;;105    
;;;106            // Compute the non left-top pixels (forward pass)
;;;107            {
;;;108              for(s32 y=1; y<imageHeight; y++) {
;;;109                const u8 * restrict pImage_y0 = image.Pointer(y,0);
;;;110    
;;;111                const u16 * restrict pDistance_ym1 = reinterpret_cast<u16*>( distance.Pointer(y-1,0) );
;;;112                u16 * restrict pDistance_y0 = reinterpret_cast<u16*>( distance.Pointer(y,0) );
;;;113    
;;;114                //for(s32 x=1; x<imageWidth; x++) {
;;;115                for(s32 x=1; x<2; x++) {
;;;116                  if(pImage_y0[x] < backgroundThreshold) {
;;;117                    pDistance_y0[x] = 0;
;;;118                  } else {
;;;119                    const u16 left = pDistance_y0[x-1] + a;
;;;120                    const u16 leftUp = pDistance_ym1[x-1] + b;
;;;121                    const u16 up = pDistance_ym1[x] + a;
;;;122                    const u16 rightUp = pDistance_ym1[x+1] + b;
;;;123    
;;;124                    pDistance_y0[x] = MIN(MIN(MIN(left, leftUp), up), rightUp);
;;;125                  }
;;;126                }
;;;127    
;;;128                // TODO: If all of the image pixels are background, set zero without doing the computation
;;;129    
;;;130                const u16 backgroundThreshold_0 = static_cast<u16>(backgroundThreshold);
;;;131                const u16 backgroundThreshold_right8 = static_cast<u16>(backgroundThreshold) << 8;
;;;132    
;;;133                for(s32 x=2; x<imageWidth-1; x+=2) {
;;;134                  const u16 image10 = *reinterpret_cast<const u16*>(pImage_y0 + x);
;;;135    
;;;136                  //#if !defined(USE_ARM_ACCELERATION)
;;;137                  u32 distance10 = 0;
;;;138    
;;;139                  if((image10 & 0xFF) >= backgroundThreshold_0) {
;;;140                    const u16 left = pDistance_y0[x-1] + a;
;;;141                    const u16 leftUp = pDistance_ym1[x-1] + b;
;;;142                    const u16 up = pDistance_ym1[x] + a;
;;;143                    const u16 rightUp = pDistance_ym1[x+1] + b;
;;;144    
;;;145                    distance10 |= MIN(MIN(MIN(left, leftUp), up), rightUp);
;;;146                  }
;;;147    
;;;148                  if((image10 & 0xFF00) >= backgroundThreshold_right8) {
;;;149                    const u16 left = (distance10&0xFFFF) + a;
;;;150                    const u16 leftUp = pDistance_ym1[x] + b;
;;;151                    const u16 up = pDistance_ym1[x+1] + a;
;;;152                    const u16 rightUp = pDistance_ym1[x+2] + b;
;;;153    
;;;154                    distance10 |= MIN(MIN(MIN(left, leftUp), up), rightUp) << 16;
;;;155                  }
;;;156    
;;;157                  //#else // #if !defined(USE_ARM_ACCELERATION)
;;;158                  //              // TODO: make work so Keil doesn't merge loads
;;;159                  //              const u32 leftUp10  = *reinterpret_cast<const u32*>(pDistance_ym1 + x - 1) + bX2;
;;;160                  //              const u32 up10      = *reinterpret_cast<const u32*>(pDistance_ym1 + x    ) + aX2;
;;;161                  //              const u32 rightUp10 = *reinterpret_cast<const u32*>(pDistance_ym1 + x + 1) + bX2;
;;;162                  //
;;;163                  //              // Compute the 2-way min of leftup, up, and rightup
;;;164                  //
;;;165                  //              u32 distance10 = leftUp10;
;;;166                  //
;;;167                  //              __USUB16(up10, distance10);
;;;168                  //              distance10 = __SEL(distance10, up10);
;;;169                  //
;;;170                  //              __USUB16(rightUp10, distance10);
;;;171                  //              distance10 = __SEL(distance10, rightUp10);
;;;172                  //
;;;173                  //              // Compute the min of distance0 and left0
;;;174                  //              const u32 left0 = pDistance_y0[x-1] + a;
;;;175                  //              if(left0 < (distance10 & 0xFFFF)) {
;;;176                  //                distance10 &= 0xFFFF0000;
;;;177                  //                distance10 |= left0;
;;;178                  //              }
;;;179                  //
;;;180                  //              // If the pixel0 is background, set distance0 to 0
;;;181                  //              if((image10 & 0xFF) < backgroundThreshold_0) {
;;;182                  //                distance10 &= 0xFFFF0000;
;;;183                  //              }
;;;184                  //
;;;185                  //              // Compute the min of distance1 and left1
;;;186                  //              const u32 left1 = ((distance10 & 0xFFFF)+a) << 16;
;;;187                  //              if(left1 < (distance10 & 0xFFFF0000)) {
;;;188                  //                distance10 &= 0x0000FFFF;
;;;189                  //                distance10 |= left1;
;;;190                  //              }
;;;191                  //
;;;192                  //              // If the pixel1 is background, set distance1 to 0
;;;193                  //              if((image10 & 0xFF00) < backgroundThreshold_right8) {
;;;194                  //                distance10 &= 0x0000FFFF;
;;;195                  //              }
;;;196                  //#endif // #if !defined(USE_ARM_ACCELERATION) ... #else
;;;197    
;;;198                  *reinterpret_cast<u32*>(pDistance_y0 + x) = distance10;
;;;199                }
;;;200    
;;;201                // Compute the right-edge pixels (forward pass)
;;;202                {
;;;203                  const s32 x = imageWidth - 1;
;;;204    
;;;205                  if(pImage_y0[x] < backgroundThreshold) {
;;;206                    pDistance_y0[x] = 0;
;;;207                  } else {
;;;208                    const u16 left = pDistance_y0[x-1] + a;
;;;209                    const u16 leftUp = pDistance_ym1[x-1] + b;
;;;210                    const u16 up = pDistance_ym1[x] + a;
;;;211    
;;;212                    pDistance_y0[x] = MIN(MIN(left, leftUp), up);
;;;213                  }
;;;214                } // Compute the right-edge pixels (forward pass)
;;;215              } // for(s32 y=1; y<imageHeight; y++)
;;;216            } // Compute the non left-right-top pixels (forward pass)
;;;217    
;;;218            EndBenchmark("dt_forward2");
;;;219    
;;;220            //distance.Print("distance");
;;;221    
;;;222            //
;;;223            // Backward pass (right and up)
;;;224            //
;;;225    
;;;226            BeginBenchmark("dt_backward1");
;;;227    
;;;228            // Compute the right and bottom image edges (backward pass)
;;;229            {
;;;230              u16 * restrict pDistance = reinterpret_cast<u16*>( distance.Pointer(imageHeight-1,0) );
;;;231    
;;;232              // Right to left
;;;233              for(s32 x=imageWidth-2; x>=0; x--) {
;;;234                pDistance[x] = MIN(pDistance[x], pDistance[x+1] + a);
;;;235              }
;;;236    
;;;237              // Bottom to top
;;;238              for(s32 y=imageHeight-2; y>=0; y--) {
;;;239                *distance.Pointer(y,imageWidth-1) = MIN(*distance.Pointer(y,imageWidth-1), *distance.Pointer(y+1,imageWidth-1) + a);
;;;240              }
;;;241            } // Compute the right and bottom image edges (backward pass)
;;;242    
;;;243            EndBenchmark("dt_backward1");
;;;244    
;;;245            BeginBenchmark("dt_backward2");
;;;246    
;;;247            // Compute the non right-top pixels (backward pass)
;;;248            {
;;;249              for(s32 y=imageHeight-2; y>=0; y--) {
;;;250                const u16 * restrict pDistance_yp1 = reinterpret_cast<u16*>( distance.Pointer(y+1,0) );
;;;251                u16 * restrict pDistance_y0 = reinterpret_cast<u16*>( distance.Pointer(y,0) );
;;;252    
;;;253                for(s32 x=imageWidth-2; x>0; x--) {
;;;254                  const u16 center = pDistance_y0[x];
;;;255                  if(center != 0) {
;;;256                    const u16 right = pDistance_y0[x+1] + a;
;;;257                    const u16 rightDown = pDistance_yp1[x+1] + b;
;;;258                    const u16 down = pDistance_yp1[x] + a;
;;;259                    const u16 leftDown = pDistance_yp1[x-1] + b;
;;;260    
;;;261                    pDistance_y0[x] = MIN(MIN(MIN(MIN(right, rightDown), down), leftDown), center);
;;;262                  }
;;;263                }
;;;264    
;;;265                // Compute the left edge (backward pass)
;;;266                {
;;;267                  const s32 x = 0;
;;;268    
;;;269                  const u16 center = pDistance_y0[x];
;;;270                  if(center != 0) {
;;;271                    const u16 right = pDistance_y0[x+1] + a;
;;;272                    const u16 rightDown = pDistance_yp1[x+1] + b;
;;;273                    const u16 down = pDistance_yp1[x] + a;
;;;274    
;;;275                    pDistance_y0[x] = MIN(MIN(MIN(right, rightDown), down), center);
;;;276                  }
;;;277                } // Compute the left edge (backward pass)
;;;278              } // for(s32 y=imageHeight-2; y>=0; y--)
;;;279            } // Compute the non left-right-top pixels (backward pass)
;;;280    
;;;281            EndBenchmark("dt_backward2");
;;;282    
;;;283            return RESULT_OK;
;;;284          }
0001f0  b007              ADD      sp,sp,#0x1c
0001f2  ecbd8b0a          VPOP     {d8-d12}
0001f6  e8bd0ff0          POP      {r4-r11}
0001fa  f85dfb14          LDR      pc,[sp],#0x14
                  |L1.510|
0001fe  2032              MOVS     r0,#0x32              ;50
000200  e9cdb000          STRD     r11,r0,[sp,#0]        ;50
000204  a38b              ADR      r3,|L1.1076|
000206  a2a8              ADR      r2,|L1.1192|
000208  a1a2              ADR      r1,|L1.1172|
00020a  2005              MOVS     r0,#5                 ;50
00020c  f7fffffe          BL       _Anki_Log
000210  f04f6080          MOV      r0,#0x4000000         ;50
000214  e7ec              B        |L1.496|
                  |L1.534|
000216  f1b90f0f          CMP      r9,#0xf               ;56
00021a  d30b              BCC      |L1.564|
00021c  2038              MOVS     r0,#0x38              ;56
00021e  e9cdb000          STRD     r11,r0,[sp,#0]        ;56
000222  a384              ADR      r3,|L1.1076|
000224  a2a4              ADR      r2,|L1.1208|
000226  a19b              ADR      r1,|L1.1172|
000228  2005              MOVS     r0,#5                 ;56
00022a  f7fffffe          BL       _Anki_Log
00022e  f04f7040          MOV      r0,#0x3000000         ;56
000232  e7dd              B        |L1.496|
                  |L1.564|
000234  f0170f03          TST      r7,#3                 ;59
000238  d00b              BEQ      |L1.594|
00023a  203b              MOVS     r0,#0x3b              ;59
00023c  e9cdb000          STRD     r11,r0,[sp,#0]        ;59
000240  a37c              ADR      r3,|L1.1076|
000242  a2a6              ADR      r2,|L1.1244|
000244  a1ae              ADR      r1,|L1.1280|
000246  2005              MOVS     r0,#5                 ;59
000248  f7fffffe          BL       _Anki_Log
00024c  f04f60a0          MOV      r0,#0x5000000         ;59
000250  e7ce              B        |L1.496|
                  |L1.594|
000252  a071              ADR      r0,|L1.1048|
000254  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000258  a0ad              ADR      r0,|L1.1296|
00025a  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00025e  9a1c              LDR      r2,[sp,#0x70]         ;68
000260  991e              LDR      r1,[sp,#0x78]         ;68
000262  2000              MOVS     r0,#0                 ;72
000264  fb001202          MLA      r2,r0,r2,r1           ;72
000268  68b3              LDR      r3,[r6,#8]            ;72
00026a  6931              LDR      r1,[r6,#0x10]         ;72
00026c  f04f0900          MOV      r9,#0                 ;77
000270  fb001103          MLA      r1,r0,r3,r1           ;77
000274  7810              LDRB     r0,[r2,#0]            ;77
000276  4540              CMP      r0,r8                 ;77
000278  bf34              ITE      CC                    ;78
00027a  f8a19000          STRHCC   r9,[r1,#0]            ;78
00027e  f8a1a000          STRHCS   r10,[r1,#0]           ;80
000282  2001              MOVS     r0,#1                 ;84
000284  2f01              CMP      r7,#1                 ;84
000286  dd0f              BLE      |L1.680|
                  |L1.648|
000288  5c13              LDRB     r3,[r2,r0]            ;85
00028a  4543              CMP      r3,r8                 ;85
00028c  bf38              IT       CC                    ;86
00028e  f8219010          STRHCC   r9,[r1,r0,LSL #1]     ;86
000292  d306              BCC      |L1.674|
000294  eb010340          ADD      r3,r1,r0,LSL #1       ;88
000298  f8333c02          LDRH     r3,[r3,#-2]           ;88
00029c  4423              ADD      r3,r3,r4              ;88
00029e  f8213010          STRH     r3,[r1,r0,LSL #1]     ;88
                  |L1.674|
0002a2  1c40              ADDS     r0,r0,#1              ;84
0002a4  42b8              CMP      r0,r7                 ;84
0002a6  dbef              BLT      |L1.648|
                  |L1.680|
0002a8  9901              LDR      r1,[sp,#4]            ;93
0002aa  2001              MOVS     r0,#1                 ;93
0002ac  2901              CMP      r1,#1                 ;93
0002ae  dd1b              BLE      |L1.744|
                  |L1.688|
0002b0  9a1c              LDR      r2,[sp,#0x70]         ;93
0002b2  991e              LDR      r1,[sp,#0x78]         ;93
0002b4  fb001102          MLA      r1,r0,r2,r1           ;93
0002b8  7809              LDRB     r1,[r1,#0]            ;94
0002ba  4541              CMP      r1,r8                 ;94
0002bc  d206              BCS      |L1.716|
0002be  68b2              LDR      r2,[r6,#8]            ;94
0002c0  6931              LDR      r1,[r6,#0x10]         ;94
0002c2  fb001102          MLA      r1,r0,r2,r1           ;94
0002c6  f8a19000          STRH     r9,[r1,#0]            ;95
0002ca  e009              B        |L1.736|
                  |L1.716|
0002cc  6932              LDR      r2,[r6,#0x10]         ;95
0002ce  68b1              LDR      r1,[r6,#8]            ;95
0002d0  1e43              SUBS     r3,r0,#1              ;97
0002d2  fb032301          MLA      r3,r3,r1,r2           ;97
0002d6  fb002101          MLA      r1,r0,r1,r2           ;97
0002da  881b              LDRH     r3,[r3,#0]            ;97
0002dc  4423              ADD      r3,r3,r4              ;97
0002de  800b              STRH     r3,[r1,#0]            ;97
                  |L1.736|
0002e0  9901              LDR      r1,[sp,#4]            ;93
0002e2  1c40              ADDS     r0,r0,#1              ;93
0002e4  4288              CMP      r0,r1                 ;93
0002e6  dbe3              BLT      |L1.688|
                  |L1.744|
0002e8  a089              ADR      r0,|L1.1296|
0002ea  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0002ee  a08b              ADR      r0,|L1.1308|
0002f0  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0002f4  2001              MOVS     r0,#1                 ;108
0002f6  9000              STR      r0,[sp,#0]            ;108
0002f8  9801              LDR      r0,[sp,#4]            ;108
0002fa  2801              CMP      r0,#1                 ;108
0002fc  f3408196          BLE.W    |L1.1580|
000300  ea4f2008          LSL      r0,r8,#8              ;131
000304  9005              STR      r0,[sp,#0x14]         ;133
000306  1e78              SUBS     r0,r7,#1              ;133
000308  9003              STR      r0,[sp,#0xc]          ;133
                  |L1.778|
00030a  9a1c              LDR      r2,[sp,#0x70]         ;133
00030c  991e              LDR      r1,[sp,#0x78]         ;133
00030e  9800              LDR      r0,[sp,#0]            ;133
000310  fb001002          MLA      r0,r0,r2,r1           ;133
000314  9002              STR      r0,[sp,#8]            ;111
000316  9800              LDR      r0,[sp,#0]            ;111
000318  6931              LDR      r1,[r6,#0x10]         ;111
00031a  1e42              SUBS     r2,r0,#1              ;111
00031c  68b0              LDR      r0,[r6,#8]            ;111
00031e  fb021900          MLA      r9,r2,r0,r1           ;111
000322  9a00              LDR      r2,[sp,#0]            ;111
000324  fb021a00          MLA      r10,r2,r0,r1          ;111
000328  2001              MOVS     r0,#1                 ;115
                  |L1.810|
00032a  9902              LDR      r1,[sp,#8]            ;116
00032c  5c09              LDRB     r1,[r1,r0]            ;116
00032e  4541              CMP      r1,r8                 ;116
000330  bf3c              ITT      CC                    ;117
000332  2100              MOVCC    r1,#0                 ;117
000334  f82a1010          STRHCC   r1,[r10,r0,LSL #1]    ;117
000338  d331              BCC      |L1.926|
00033a  eb0a0140          ADD      r1,r10,r0,LSL #1      ;119
00033e  eb090c40          ADD      r12,r9,r0,LSL #1      ;120
000342  f8311c02          LDRH     r1,[r1,#-2]           ;119
000346  f8393010          LDRH     r3,[r9,r0,LSL #1]     ;121
00034a  4421              ADD      r1,r1,r4              ;119
00034c  b28a              UXTH     r2,r1                 ;119
00034e  f83c1c02          LDRH     r1,[r12,#-2]          ;120
000352  f8bcc002          LDRH     r12,[r12,#2]          ;122
000356  4429              ADD      r1,r1,r5              ;120
000358  b289              UXTH     r1,r1                 ;120
00035a  4423              ADD      r3,r3,r4              ;121
00035c  44ac              ADD      r12,r12,r5            ;122
00035e  b29b              UXTH     r3,r3                 ;121
000360  fa1ffb8c          UXTH     r11,r12               ;122
000364  428a              CMP      r2,r1                 ;124
000366  bf34              ITE      CC                    ;124
000368  4694              MOVCC    r12,r2                ;124
00036a  468c              MOVCS    r12,r1                ;124
00036c  459c              CMP      r12,r3                ;124
00036e  bf28              IT       CS                    ;124
000370  469c              MOVCS    r12,r3                ;124
000372  d203              BCS      |L1.892|
000374  428a              CMP      r2,r1                 ;124
000376  bf34              ITE      CC                    ;124
000378  4694              MOVCC    r12,r2                ;124
00037a  468c              MOVCS    r12,r1                ;124
                  |L1.892|
00037c  45dc              CMP      r12,r11               ;124
00037e  bf28              IT       CS                    ;124
000380  4659              MOVCS    r1,r11                ;124
000382  d20a              BCS      |L1.922|
000384  428a              CMP      r2,r1                 ;124
000386  bf34              ITE      CC                    ;124
000388  4694              MOVCC    r12,r2                ;124
00038a  468c              MOVCS    r12,r1                ;124
00038c  459c              CMP      r12,r3                ;124
00038e  bf28              IT       CS                    ;124
000390  4619              MOVCS    r1,r3                 ;124
000392  d202              BCS      |L1.922|
000394  428a              CMP      r2,r1                 ;124
000396  bf38              IT       CC                    ;124
000398  4611              MOVCC    r1,r2                 ;124
                  |L1.922|
00039a  f82a1010          STRH     r1,[r10,r0,LSL #1]    ;124
                  |L1.926|
00039e  1c40              ADDS     r0,r0,#1              ;115
0003a0  2802              CMP      r0,#2                 ;115
0003a2  dbc2              BLT      |L1.810|
0003a4  9805              LDR      r0,[sp,#0x14]         ;131
0003a6  9004              STR      r0,[sp,#0x10]         ;133
0003a8  9803              LDR      r0,[sp,#0xc]          ;133
0003aa  2102              MOVS     r1,#2                 ;133
0003ac  2802              CMP      r0,#2                 ;133
0003ae  dd1e              BLE      |L1.1006|
                  |L1.944|
0003b0  9802              LDR      r0,[sp,#8]            ;134
0003b2  2200              MOVS     r2,#0                 ;137
0003b4  f830b001          LDRH     r11,[r0,r1]           ;134
0003b8  f00b03ff          AND      r3,r11,#0xff          ;139
0003bc  4543              CMP      r3,r8                 ;139
0003be  d317              BCC      |L1.1008|
0003c0  eb0a0041          ADD      r0,r10,r1,LSL #1      ;140
0003c4  eb090c41          ADD      r12,r9,r1,LSL #1      ;141
0003c8  f8300c02          LDRH     r0,[r0,#-2]           ;140
0003cc  4420              ADD      r0,r0,r4              ;140
0003ce  b283              UXTH     r3,r0                 ;140
0003d0  f83c0c02          LDRH     r0,[r12,#-2]          ;141
0003d4  f8bcc002          LDRH     r12,[r12,#2]          ;143
0003d8  4428              ADD      r0,r0,r5              ;141
0003da  b282              UXTH     r2,r0                 ;141
0003dc  f8390011          LDRH     r0,[r9,r1,LSL #1]     ;142
0003e0  44ac              ADD      r12,r12,r5            ;143
0003e2  4420              ADD      r0,r0,r4              ;142
0003e4  b280              UXTH     r0,r0                 ;142
0003e6  fa1ffe8c          UXTH     lr,r12                ;143
0003ea  4293              CMP      r3,r2                 ;145
0003ec  e09c              B        |L1.1320|
                  |L1.1006|
0003ee  e0f0              B        |L1.1490|
                  |L1.1008|
0003f0  e0b4              B        |L1.1372|
0003f2  0000              DCW      0x0000
                          DCD      0x00000000
                  |L1.1016|
0003f8  00000000          DCFD     0x4000000000000000 ; 2
0003fc  40000000
                  |L1.1024|
000400  00000000          DCFD     0x3fe0000000000000 ; 0.5
000404  3fe00000
                  |L1.1032|
000408  00000000          DCFD     0x40efffe000000000 ; 65535
00040c  40efffe0
                  |L1.1040|
000410  00000000          DCFD     0x0000000000000000 ; 0
000414  00000000
                  |L1.1048|
000418  64745f69          DCB      "dt_init",0
00041c  6e697400
                  |L1.1056|
000420  e757928e          DCFD     0x3fee9018e757928e ; 0.95508999999999999
000424  3fee9018
                  |L1.1064|
000428  1de69ad4          DCFD     0x3ff5e8a71de69ad4 ; 1.3693
00042c  3ff5e8a7
                  |L1.1072|
                          DCD      ||.constdata||
                  |L1.1076|
000434  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\distanceTransform.cpp"
000438  6f726574
00043c  6563685c
000440  76697369
000444  6f6e5c72
000448  6f626f74
00044c  5c737263
000450  5c646973
000454  74616e63
000458  65547261
00045c  6e73666f
000460  726d2e63
000464  7070    
000466  00                DCB      0
000467  00                DCB      0
                  |L1.1128|
000468  696d6167          DCB      "image and distance must be the same size",0
00046c  6520616e
000470  64206469
000474  7374616e
000478  6365206d
00047c  75737420
000480  62652074
000484  68652073
000488  616d6520
00048c  73697a65
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
                  |L1.1172|
000494  44697374          DCB      "DistanceTransform",0
000498  616e6365
00049c  5472616e
0004a0  73666f72
0004a4  6d00    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  496e7661          DCB      "Invalid objects",0
0004ac  6c696420
0004b0  6f626a65
0004b4  63747300
                  |L1.1208|
0004b8  6e756d46          DCB      "numFractionalBits is out of range",0
0004bc  72616374
0004c0  696f6e61
0004c4  6c426974
0004c8  73206973
0004cc  206f7574
0004d0  206f6620
0004d4  72616e67
0004d8  6500    
0004da  00                DCB      0
0004db  00                DCB      0
                  |L1.1244|
0004dc  496d6167          DCB      "Image width must be divisible by 4",0
0004e0  65207769
0004e4  64746820
0004e8  6d757374
0004ec  20626520
0004f0  64697669
0004f4  7369626c
0004f8  65206279
0004fc  203400  
0004ff  00                DCB      0
                  |L1.1280|
000500  46617374          DCB      "FastGradient",0
000504  47726164
000508  69656e74
00050c  00      
00050d  00                DCB      0
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  64745f66          DCB      "dt_forward1",0
000514  6f727761
000518  72643100
                  |L1.1308|
00051c  64745f66          DCB      "dt_forward2",0
000520  6f727761
000524  72643200
                  |L1.1320|
000528  bf34              ITE      CC                    ;145
00052a  469c              MOVCC    r12,r3                ;145
00052c  4694              MOVCS    r12,r2                ;145
00052e  4584              CMP      r12,r0                ;145
000530  bf28              IT       CS                    ;145
000532  4684              MOVCS    r12,r0                ;145
000534  d203              BCS      |L1.1342|
000536  4293              CMP      r3,r2                 ;145
000538  bf34              ITE      CC                    ;145
00053a  469c              MOVCC    r12,r3                ;145
00053c  4694              MOVCS    r12,r2                ;145
                  |L1.1342|
00053e  45f4              CMP      r12,lr                ;145
000540  bf28              IT       CS                    ;145
000542  4672              MOVCS    r2,lr                 ;145
000544  d20a              BCS      |L1.1372|
000546  4293              CMP      r3,r2                 ;145
000548  bf34              ITE      CC                    ;145
00054a  469c              MOVCC    r12,r3                ;145
00054c  4694              MOVCS    r12,r2                ;145
00054e  4584              CMP      r12,r0                ;145
000550  bf28              IT       CS                    ;145
000552  4602              MOVCS    r2,r0                 ;145
000554  d202              BCS      |L1.1372|
000556  4293              CMP      r3,r2                 ;145
000558  bf38              IT       CC                    ;145
00055a  461a              MOVCC    r2,r3                 ;145
                  |L1.1372|
00055c  f40b437f          AND      r3,r11,#0xff00        ;148
000560  9804              LDR      r0,[sp,#0x10]         ;148
000562  4298              CMP      r0,r3                 ;148
000564  d82e              BHI      |L1.1476|
000566  eb090b41          ADD      r11,r9,r1,LSL #1      ;151
00056a  1910              ADDS     r0,r2,r4              ;149
00056c  f8bb3002          LDRH     r3,[r11,#2]           ;151
000570  fa1ffc80          UXTH     r12,r0                ;149
000574  f8390011          LDRH     r0,[r9,r1,LSL #1]     ;150
000578  f8bbb004          LDRH     r11,[r11,#4]          ;152
00057c  4428              ADD      r0,r0,r5              ;150
00057e  b280              UXTH     r0,r0                 ;150
000580  4423              ADD      r3,r3,r4              ;151
000582  44ab              ADD      r11,r11,r5            ;152
000584  b29b              UXTH     r3,r3                 ;151
000586  fa1ffe8b          UXTH     lr,r11                ;152
00058a  4584              CMP      r12,r0                ;154
00058c  bf34              ITE      CC                    ;154
00058e  46e3              MOVCC    r11,r12               ;154
000590  4683              MOVCS    r11,r0                ;154
000592  459b              CMP      r11,r3                ;154
000594  bf28              IT       CS                    ;154
000596  469b              MOVCS    r11,r3                ;154
000598  d203              BCS      |L1.1442|
00059a  4584              CMP      r12,r0                ;154
00059c  bf34              ITE      CC                    ;154
00059e  46e3              MOVCC    r11,r12               ;154
0005a0  4683              MOVCS    r11,r0                ;154
                  |L1.1442|
0005a2  45f3              CMP      r11,lr                ;154
0005a4  bf28              IT       CS                    ;154
0005a6  4670              MOVCS    r0,lr                 ;154
0005a8  d20a              BCS      |L1.1472|
0005aa  4584              CMP      r12,r0                ;154
0005ac  bf34              ITE      CC                    ;154
0005ae  46e3              MOVCC    r11,r12               ;154
0005b0  4683              MOVCS    r11,r0                ;154
0005b2  459b              CMP      r11,r3                ;154
0005b4  bf28              IT       CS                    ;154
0005b6  4618              MOVCS    r0,r3                 ;154
0005b8  d202              BCS      |L1.1472|
0005ba  4584              CMP      r12,r0                ;154
0005bc  bf38              IT       CC                    ;154
0005be  4660              MOVCC    r0,r12                ;154
                  |L1.1472|
0005c0  ea424200          ORR      r2,r2,r0,LSL #16      ;154
                  |L1.1476|
0005c4  f84a2011          STR      r2,[r10,r1,LSL #1]    ;198
0005c8  9803              LDR      r0,[sp,#0xc]          ;133
0005ca  1c89              ADDS     r1,r1,#2              ;133
0005cc  4281              CMP      r1,r0                 ;133
0005ce  f6ffaeef          BLT      |L1.944|
                  |L1.1490|
0005d2  9902              LDR      r1,[sp,#8]            ;205
0005d4  1e78              SUBS     r0,r7,#1              ;203
0005d6  5c09              LDRB     r1,[r1,r0]            ;205
0005d8  4541              CMP      r1,r8                 ;205
0005da  bf3c              ITT      CC                    ;206
0005dc  2100              MOVCC    r1,#0                 ;206
0005de  f82a1010          STRHCC   r1,[r10,r0,LSL #1]    ;206
0005e2  d31c              BCC      |L1.1566|
0005e4  eb0a0140          ADD      r1,r10,r0,LSL #1      ;208
0005e8  f8393010          LDRH     r3,[r9,r0,LSL #1]     ;210
0005ec  f8311c02          LDRH     r1,[r1,#-2]           ;208
0005f0  4423              ADD      r3,r3,r4              ;210
0005f2  4421              ADD      r1,r1,r4              ;208
0005f4  b28a              UXTH     r2,r1                 ;208
0005f6  eb090140          ADD      r1,r9,r0,LSL #1       ;209
0005fa  b29b              UXTH     r3,r3                 ;210
0005fc  f8311c02          LDRH     r1,[r1,#-2]           ;209
000600  4429              ADD      r1,r1,r5              ;209
000602  b289              UXTH     r1,r1                 ;209
000604  428a              CMP      r2,r1                 ;212
000606  bf34              ITE      CC                    ;212
000608  4694              MOVCC    r12,r2                ;212
00060a  468c              MOVCS    r12,r1                ;212
00060c  459c              CMP      r12,r3                ;212
00060e  bf28              IT       CS                    ;212
000610  4619              MOVCS    r1,r3                 ;212
000612  d202              BCS      |L1.1562|
000614  428a              CMP      r2,r1                 ;212
000616  bf38              IT       CC                    ;212
000618  4611              MOVCC    r1,r2                 ;212
                  |L1.1562|
00061a  f82a1010          STRH     r1,[r10,r0,LSL #1]    ;212
                  |L1.1566|
00061e  9800              LDR      r0,[sp,#0]            ;108
000620  9901              LDR      r1,[sp,#4]            ;108
000622  1c40              ADDS     r0,r0,#1              ;108
000624  9000              STR      r0,[sp,#0]            ;108
000626  4288              CMP      r0,r1                 ;108
000628  f6ffae6f          BLT      |L1.778|
                  |L1.1580|
00062c  f2af1014          ADR      r0,|L1.1308|
000630  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000634  a06c              ADR      r0,|L1.2024|
000636  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00063a  9801              LDR      r0,[sp,#4]            ;230
00063c  68b2              LDR      r2,[r6,#8]            ;230
00063e  6931              LDR      r1,[r6,#0x10]         ;230
000640  f1a00001          SUB      r0,r0,#1              ;230
000644  fb001102          MLA      r1,r0,r2,r1           ;230
000648  1eb8              SUBS     r0,r7,#2              ;233
00064a  d40c              BMI      |L1.1638|
                  |L1.1612|
00064c  eb010240          ADD      r2,r1,r0,LSL #1       ;234
000650  f8313010          LDRH     r3,[r1,r0,LSL #1]     ;234
000654  8852              LDRH     r2,[r2,#2]            ;234
000656  4422              ADD      r2,r2,r4              ;234
000658  4293              CMP      r3,r2                 ;234
00065a  bf38              IT       CC                    ;234
00065c  461a              MOVCC    r2,r3                 ;234
00065e  f8212010          STRH     r2,[r1,r0,LSL #1]     ;234
000662  1e40              SUBS     r0,r0,#1              ;233
000664  d5f2              BPL      |L1.1612|
                  |L1.1638|
000666  9801              LDR      r0,[sp,#4]            ;238
000668  1e80              SUBS     r0,r0,#2              ;238
00066a  d418              BMI      |L1.1694|
                  |L1.1644|
00066c  f8d6c008          LDR      r12,[r6,#8]           ;238
000670  6933              LDR      r3,[r6,#0x10]         ;238
000672  f1000901          ADD      r9,r0,#1              ;239
000676  fb00320c          MLA      r2,r0,r12,r3          ;239
00067a  fb09330c          MLA      r3,r9,r12,r3          ;239
00067e  1e79              SUBS     r1,r7,#1              ;239
000680  f1a70801          SUB      r8,r7,#1              ;239
000684  eb020241          ADD      r2,r2,r1,LSL #1       ;239
000688  f9333018          LDRSH    r3,[r3,r8,LSL #1]     ;239
00068c  f9b21000          LDRSH    r1,[r2,#0]            ;239
000690  4423              ADD      r3,r3,r4              ;239
000692  4299              CMP      r1,r3                 ;239
000694  bfa8              IT       GE                    ;239
000696  4619              MOVGE    r1,r3                 ;239
000698  8011              STRH     r1,[r2,#0]            ;239
00069a  1e40              SUBS     r0,r0,#1              ;238
00069c  d5e6              BPL      |L1.1644|
                  |L1.1694|
00069e  a052              ADR      r0,|L1.2024|
0006a0  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0006a4  a054              ADR      r0,|L1.2040|
0006a6  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0006aa  9801              LDR      r0,[sp,#4]            ;249
0006ac  f1b00b02          SUBS     r11,r0,#2             ;249
0006b0  d47c              BMI      |L1.1964|
                  |L1.1714|
0006b2  68b1              LDR      r1,[r6,#8]            ;249
0006b4  6930              LDR      r0,[r6,#0x10]         ;249
0006b6  f10b0201          ADD      r2,r11,#1             ;250
0006ba  fb020a01          MLA      r10,r2,r1,r0          ;250
0006be  fb0b0c01          MLA      r12,r11,r1,r0         ;250
0006c2  1eba              SUBS     r2,r7,#2              ;253
0006c4  2a00              CMP      r2,#0                 ;253
0006c6  dd58              BLE      |L1.1914|
                  |L1.1736|
0006c8  f83ce012          LDRH     lr,[r12,r2,LSL #1]    ;254
0006cc  f1be0f00          CMP      lr,#0                 ;255
0006d0  d050              BEQ      |L1.1908|
0006d2  eb0c0042          ADD      r0,r12,r2,LSL #1      ;256
0006d6  eb0a0842          ADD      r8,r10,r2,LSL #1      ;257
0006da  8840              LDRH     r0,[r0,#2]            ;256
0006dc  f83a3012          LDRH     r3,[r10,r2,LSL #1]    ;258
0006e0  4420              ADD      r0,r0,r4              ;256
0006e2  b281              UXTH     r1,r0                 ;256
0006e4  f8b80002          LDRH     r0,[r8,#2]            ;257
0006e8  f8388c02          LDRH     r8,[r8,#-2]           ;259
0006ec  4428              ADD      r0,r0,r5              ;257
0006ee  b280              UXTH     r0,r0                 ;257
0006f0  4423              ADD      r3,r3,r4              ;258
0006f2  44a8              ADD      r8,r8,r5              ;259
0006f4  b29b              UXTH     r3,r3                 ;258
0006f6  fa1ff888          UXTH     r8,r8                 ;259
0006fa  4281              CMP      r1,r0                 ;261
0006fc  bf2c              ITE      CS                    ;261
0006fe  4681              MOVCS    r9,r0                 ;261
000700  4689              MOVCC    r9,r1                 ;261
000702  4599              CMP      r9,r3                 ;261
000704  bf28              IT       CS                    ;261
000706  4699              MOVCS    r9,r3                 ;261
000708  d203              BCS      |L1.1810|
00070a  4281              CMP      r1,r0                 ;261
00070c  bf34              ITE      CC                    ;261
00070e  4689              MOVCC    r9,r1                 ;261
000710  4681              MOVCS    r9,r0                 ;261
                  |L1.1810|
000712  45c1              CMP      r9,r8                 ;261
000714  bf28              IT       CS                    ;261
000716  46c1              MOVCS    r9,r8                 ;261
000718  d20b              BCS      |L1.1842|
00071a  4281              CMP      r1,r0                 ;261
00071c  bf34              ITE      CC                    ;261
00071e  4689              MOVCC    r9,r1                 ;261
000720  4681              MOVCS    r9,r0                 ;261
000722  4599              CMP      r9,r3                 ;261
000724  bf28              IT       CS                    ;261
000726  4699              MOVCS    r9,r3                 ;261
000728  d203              BCS      |L1.1842|
00072a  4281              CMP      r1,r0                 ;261
00072c  bf34              ITE      CC                    ;261
00072e  4689              MOVCC    r9,r1                 ;261
000730  4681              MOVCS    r9,r0                 ;261
                  |L1.1842|
000732  45f1              CMP      r9,lr                 ;261
000734  bf28              IT       CS                    ;261
000736  4670              MOVCS    r0,lr                 ;261
000738  d21a              BCS      |L1.1904|
00073a  4281              CMP      r1,r0                 ;261
00073c  bf34              ITE      CC                    ;261
00073e  4689              MOVCC    r9,r1                 ;261
000740  4681              MOVCS    r9,r0                 ;261
000742  4599              CMP      r9,r3                 ;261
000744  bf28              IT       CS                    ;261
000746  4699              MOVCS    r9,r3                 ;261
000748  d203              BCS      |L1.1874|
00074a  4281              CMP      r1,r0                 ;261
00074c  bf34              ITE      CC                    ;261
00074e  4689              MOVCC    r9,r1                 ;261
000750  4681              MOVCS    r9,r0                 ;261
                  |L1.1874|
000752  45c1              CMP      r9,r8                 ;261
000754  bf28              IT       CS                    ;261
000756  4640              MOVCS    r0,r8                 ;261
000758  d20a              BCS      |L1.1904|
00075a  4281              CMP      r1,r0                 ;261
00075c  bf34              ITE      CC                    ;261
00075e  4688              MOVCC    r8,r1                 ;261
000760  4680              MOVCS    r8,r0                 ;261
000762  4598              CMP      r8,r3                 ;261
000764  bf28              IT       CS                    ;261
000766  4618              MOVCS    r0,r3                 ;261
000768  d202              BCS      |L1.1904|
00076a  4281              CMP      r1,r0                 ;261
00076c  bf38              IT       CC                    ;261
00076e  4608              MOVCC    r0,r1                 ;261
                  |L1.1904|
000770  f82c0012          STRH     r0,[r12,r2,LSL #1]    ;261
                  |L1.1908|
000774  1e52              SUBS     r2,r2,#1              ;253
000776  2a00              CMP      r2,#0                 ;253
000778  dca6              BGT      |L1.1736|
                  |L1.1914|
00077a  f8bc3000          LDRH     r3,[r12,#0]           ;269
00077e  b353              CBZ      r3,|L1.2006|
000780  f8bc0002          LDRH     r0,[r12,#2]           ;271
000784  f8ba2000          LDRH     r2,[r10,#0]           ;273
000788  4420              ADD      r0,r0,r4              ;271
00078a  b281              UXTH     r1,r0                 ;271
00078c  f8ba0002          LDRH     r0,[r10,#2]           ;272
000790  4422              ADD      r2,r2,r4              ;273
000792  4428              ADD      r0,r0,r5              ;272
000794  b280              UXTH     r0,r0                 ;272
000796  b292              UXTH     r2,r2                 ;273
000798  4281              CMP      r1,r0                 ;275
00079a  bf2c              ITE      CS                    ;275
00079c  4680              MOVCS    r8,r0                 ;275
00079e  4688              MOVCC    r8,r1                 ;275
0007a0  4590              CMP      r8,r2                 ;275
0007a2  bf28              IT       CS                    ;275
0007a4  4690              MOVCS    r8,r2                 ;275
0007a6  d205              BCS      |L1.1972|
0007a8  4281              CMP      r1,r0                 ;275
0007aa  e000              B        |L1.1966|
                  |L1.1964|
0007ac  e017              B        |L1.2014|
                  |L1.1966|
0007ae  bf34              ITE      CC                    ;275
0007b0  4688              MOVCC    r8,r1                 ;275
0007b2  4680              MOVCS    r8,r0                 ;275
                  |L1.1972|
0007b4  4598              CMP      r8,r3                 ;275
0007b6  bf28              IT       CS                    ;275
0007b8  4618              MOVCS    r0,r3                 ;275
0007ba  d20a              BCS      |L1.2002|
0007bc  4281              CMP      r1,r0                 ;275
0007be  bf34              ITE      CC                    ;275
0007c0  460b              MOVCC    r3,r1                 ;275
0007c2  4603              MOVCS    r3,r0                 ;275
0007c4  4293              CMP      r3,r2                 ;275
0007c6  bf28              IT       CS                    ;275
0007c8  4610              MOVCS    r0,r2                 ;275
0007ca  d202              BCS      |L1.2002|
0007cc  4281              CMP      r1,r0                 ;275
0007ce  bf38              IT       CC                    ;275
0007d0  4608              MOVCC    r0,r1                 ;275
                  |L1.2002|
0007d2  f8ac0000          STRH     r0,[r12,#0]           ;275
                  |L1.2006|
0007d6  f1bb0b01          SUBS     r11,r11,#1            ;249
0007da  f57faf6a          BPL      |L1.1714|
                  |L1.2014|
0007de  a006              ADR      r0,|L1.2040|
0007e0  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0007e4  2000              MOVS     r0,#0                 ;283
0007e6  e503              B        |L1.496|
;;;285        } // namespace ImageProcessing
                          ENDP

                  |L1.2024|
0007e8  64745f62          DCB      "dt_backward1",0
0007ec  61636b77
0007f0  61726431
0007f4  00      
0007f5  00                DCB      0
0007f6  00                DCB      0
0007f7  00                DCB      0
                  |L1.2040|
0007f8  64745f62          DCB      "dt_backward2",0
0007fc  61636b77
000800  61726432
000804  00      
000805  00                DCB      0
000806  00                DCB      0
000807  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15ImageProcessing17DistanceTransformENS0_5ArrayIhEEhRNS0_15FixedPointArrayIsEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15ImageProcessing17DistanceTransformENS0_5ArrayIhEEhRNS0_15FixedPointArrayIsEE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a4469          DCB      0x3a,0x3a,0x44,0x69
000030  7374616e          DCB      0x73,0x74,0x61,0x6e
000034  63655472          DCB      0x63,0x65,0x54,0x72
000038  616e7366          DCB      0x61,0x6e,0x73,0x66
00003c  6f726d28          DCB      0x6f,0x72,0x6d,0x28
000040  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000044  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000048  62656464          DCB      0x62,0x65,0x64,0x64
00004c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000050  41727261          DCB      0x41,0x72,0x72,0x61
000054  793c756e          DCB      0x79,0x3c,0x75,0x6e
000058  7369676e          DCB      0x73,0x69,0x67,0x6e
00005c  65642063          DCB      0x65,0x64,0x20,0x63
000060  6861723e          DCB      0x68,0x61,0x72,0x3e
000064  2c20756e          DCB      0x2c,0x20,0x75,0x6e
000068  7369676e          DCB      0x73,0x69,0x67,0x6e
00006c  65642063          DCB      0x65,0x64,0x20,0x63
000070  6861722c          DCB      0x68,0x61,0x72,0x2c
000074  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000078  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00007c  6d626564          DCB      0x6d,0x62,0x65,0x64
000080  6465643a          DCB      0x64,0x65,0x64,0x3a
000084  3a466978          DCB      0x3a,0x46,0x69,0x78
000088  6564506f          DCB      0x65,0x64,0x50,0x6f
00008c  696e7441          DCB      0x69,0x6e,0x74,0x41
000090  72726179          DCB      0x72,0x72,0x61,0x79
000094  3c736967          DCB      0x3c,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  73686f72          DCB      0x73,0x68,0x6f,0x72
0000a0  743e2026          DCB      0x74,0x3e,0x20,0x26
0000a4  29000000          DCB      0x29,0x00,0x00,0x00
0000a8  41727261          DCB      0x41,0x72,0x72,0x61
0000ac  793c5479          DCB      0x79,0x3c,0x54,0x79
0000b0  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0000b4  3a676574          DCB      0x3a,0x67,0x65,0x74
0000b8  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0000bc  65000000          DCB      0x65,0x00,0x00,0x00
0000c0  4e656761          DCB      0x4e,0x65,0x67,0x61
0000c4  74697665          DCB      0x74,0x69,0x76,0x65
0000c8  2064696d          DCB      0x20,0x64,0x69,0x6d
0000cc  656e7369          DCB      0x65,0x6e,0x73,0x69
0000d0  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
0000d4  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0000d8  6f726574          DCB      0x6f,0x72,0x65,0x74
0000dc  6563685c          DCB      0x65,0x63,0x68,0x5c
0000e0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0000e4  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0000e8  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0000ec  64655c61          DCB      0x64,0x65,0x5c,0x61
0000f0  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0000f4  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0000f8  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0000fc  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000100  2f617272          DCB      0x2f,0x61,0x72,0x72
000104  61793264          DCB      0x61,0x79,0x32,0x64
000108  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L14.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L14.56|
00000e  4b0b              LDR      r3,|L14.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L14.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L14.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L14.60|
                          DCD      ||.constdata||+0xd4

                          AREA ||area_number.15||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\distanceTransform.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_distanceTransform_cpp_5fed6d01___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___21_distanceTransform_cpp_5fed6d01___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_distanceTransform_cpp_5fed6d01___Z7__REVSHi|
#line 144
|__asm___21_distanceTransform_cpp_5fed6d01___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
