; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\dockingcontroller.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\dockingcontroller.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\dockingcontroller.crf supervisor\src\dockingController.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo17DockingController11ResetDockerEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController11ResetDockerEv PROC ; Anki::Cozmo::DockingController::ResetDocker()
;;;606    
;;;607          void ResetDocker() {
000000  b570              PUSH     {r4-r6,lr}
;;;608            
;;;609            if (!trackingOnly_) {
000002  4c13              LDR      r4,|L1.80|
000004  ed2d8b02          VPUSH    {d8}                  ;607
000008  79e0              LDRB     r0,[r4,#7]  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749413trackingOnly_E
;;;610              SpeedController::SetUserCommandedDesiredVehicleSpeed(0);
;;;611              PathFollower::ClearPath();
;;;612              SteeringController::ExecuteDirectDrive(0,0);
00000a  ed9f8a12          VLDR     s16,|L1.84|
00000e  b970              CBNZ     r0,|L1.46|
000010  2000              MOVS     r0,#0                 ;610
000012  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs ; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
000016  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower9ClearPathEv ; Anki::Cozmo::PathFollower::ClearPath()
00001a  eeb00a48          VMOV.F32 s0,s16
00001e  eef01a40          VMOV.F32 s3,s0
000022  eeb01a40          VMOV.F32 s2,s0
000026  eef00a40          VMOV.F32 s1,s0
00002a  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
                  |L1.46|
;;;613            }
;;;614            mode_ = IDLE;
00002e  2500              MOVS     r5,#0
000030  7025              STRB     r5,[r4,#0]
;;;615            
;;;616            // Reset trackingOnly vars
;;;617            trackingOnly_ = false;
000032  71e5              STRB     r5,[r4,#7]
;;;618            lastMarkerDistX_ = 0.f;
000034  ed848a05          VSTR     s16,[r4,#0x14]
;;;619            lastMarkerDistY_ = 0.f;
000038  ed848a06          VSTR     s16,[r4,#0x18]
;;;620            lastMarkerAng_ = 0.f;
00003c  ed848a07          VSTR     s16,[r4,#0x1c]
;;;621            
;;;622            // Command VisionSystem to stop processing images
;;;623            VisionSystem::StopTracking();
000040  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem12StopTrackingEv ; Anki::Cozmo::VisionSystem::StopTracking()
;;;624    
;;;625            markerlessDocking_ = false;
000044  70a5              STRB     r5,[r4,#2]
;;;626            success_ = false;
000046  7065              STRB     r5,[r4,#1]
;;;627          }
000048  ecbd8b02          VPOP     {d8}
00004c  bd70              POP      {r4-r6,pc}
;;;628          
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      ||.data||
                  |L1.84|
000054  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEfRKNS_8Embedded5PointIfEEhfffbb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEfRKNS_8Embedded5PointIfEEhfffbb PROC ; Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point<float>&, unsigned char, float, float, float, bool, bool)
;;;568    
;;;569          void StartDocking(const Vision::MarkerType& dockingMarker,
000000  b570              PUSH     {r4-r6,lr}
;;;570                            const f32 markerWidth_mm,
;;;571                            const Embedded::Point2f &markerCenter, const u8 pixel_radius,
;;;572                            const f32 dockOffsetDistX, const f32 dockOffsetDistY, const f32 dockOffsetAngle,
;;;573                            const bool checkAngleX,
;;;574                            const bool useManualSpeed)
;;;575          {
;;;576            AnkiAssert(markerWidth_mm > 0.f);
;;;577            
;;;578            dockMarker_      = dockingMarker;
000002  4c10              LDR      r4,|L2.68|
000004  7800              LDRB     r0,[r0,#0]
000006  9d04              LDR      r5,[sp,#0x10]
000008  7220              STRB     r0,[r4,#8]
00000a  4694              MOV      r12,r2                ;575
;;;579            dockOffsetDistX_ = dockOffsetDistX;
00000c  edc40a03          VSTR     s1,[r4,#0xc]
;;;580            
;;;581            if (pixel_radius == u8_MAX) {
000010  2aff              CMP      r2,#0xff
000012  d011              BEQ      |L2.56|
;;;582              VisionSystem::SetMarkerToTrack(dockMarker_, markerWidth_mm, checkAngleX);
;;;583            } else {
;;;584              VisionSystem::SetMarkerToTrack(dockMarker_, markerWidth_mm, markerCenter, static_cast<f32>(pixel_radius), checkAngleX);
000014  ee00ca90          VMOV     s1,r12
000018  461a              MOV      r2,r3
00001a  f1040008          ADD      r0,r4,#8
00001e  eef80a60          VCVT.F32.U32 s1,s1
000022  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem16SetMarkerToTrackERKNS_6Vision10MarkerTypeEfRKNS_8Embedded5PointIfEEfb ; Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point<float>&, float, bool)
                  |L2.38|
;;;585            }
;;;586            
;;;587            useManualSpeed_ = useManualSpeed;
000026  7165              STRB     r5,[r4,#5]
;;;588            lastDockingErrorSignalRecvdTime_ = HAL::GetMicroCounter();
000028  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
;;;589            mode_ = LOOKING_FOR_BLOCK;
00002c  6120              STR      r0,[r4,#0x10]  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749432lastDockingErrorSignalRecvdTime_E
00002e  2001              MOVS     r0,#1
000030  7020              STRB     r0,[r4,#0]
;;;590            
;;;591            success_ = false;
000032  2000              MOVS     r0,#0
000034  7060              STRB     r0,[r4,#1]
;;;592          }
000036  bd70              POP      {r4-r6,pc}
                  |L2.56|
000038  4619              MOV      r1,r3                 ;582
00003a  4803              LDR      r0,|L2.72|
00003c  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem16SetMarkerToTrackERKNS_6Vision10MarkerTypeEfb ; Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, bool)
000040  e7f1              B        |L2.38|
;;;593          
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      ||.data||
                  |L2.72|
                          DCD      ||.data||+0x8

                          AREA ||i._ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEffffbb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEffffbb PROC ; Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, float, float, float, bool, bool)
;;;559          
;;;560          void StartDocking(const Vision::MarkerType& dockingMarker,
000000  b530              PUSH     {r4,r5,lr}
;;;561                            const f32 markerWidth_mm,
;;;562                            const f32 dockOffsetDistX, const f32 dockOffsetDistY, const f32 dockOffsetAngle,
;;;563                            const bool checkAngleX,
;;;564                            const bool useManualSpeed)
;;;565          {
000002  b083              SUB      sp,sp,#0xc
;;;566            StartDocking(dockingMarker, markerWidth_mm, Embedded::Point2f(-1,-1), u8_MAX, dockOffsetDistX, dockOffsetDistY, dockOffsetAngle, checkAngleX, useManualSpeed);
000004  eebf1a00          VMOV.F32 s2,#-1.00000000
000008  ed8d1a00          VSTR     s2,[sp,#0]
00000c  4c0a              LDR      r4,|L3.56|
00000e  ed8d1a01          VSTR     s2,[sp,#4]
000012  7800              LDRB     r0,[r0,#0]
000014  7220              STRB     r0,[r4,#8]
000016  4615              MOV      r5,r2                 ;565
000018  edc40a03          VSTR     s1,[r4,#0xc]          ;565
00001c  f1040008          ADD      r0,r4,#8              ;565
000020  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem16SetMarkerToTrackERKNS_6Vision10MarkerTypeEfb ; Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, bool)
000024  7165              STRB     r5,[r4,#5]            ;565
000026  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
00002a  6120              STR      r0,[r4,#0x10]         ;565  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749432lastDockingErrorSignalRecvdTime_E
00002c  2001              MOVS     r0,#1                 ;565
00002e  7020              STRB     r0,[r4,#0]            ;565
000030  2000              MOVS     r0,#0                 ;565
000032  7060              STRB     r0,[r4,#1]            ;565
;;;567          }
000034  b003              ADD      sp,sp,#0xc
000036  bd30              POP      {r4,r5,pc}
;;;568    
                          ENDP

                  |L3.56|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo17DockingController14SetRelDockPoseEfff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController14SetRelDockPoseEfff PROC ; Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
;;;390          
;;;391          void SetRelDockPose(f32 rel_x, f32 rel_y, f32 rel_rad)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;392          {
000004  ed2d8b06          VPUSH    {d8-d10}
000008  eeb09a40          VMOV.F32 s18,s0
00000c  eef09a41          VMOV.F32 s19,s2
;;;393            // Check for readings that we do not expect to get
;;;394            if (rel_x < 0.f || ABS(rel_rad) > 0.75f*PIDIV2_F
000010  eeb59ac0          VCMPE.F32 s18,#0.0
000014  eeb08a60          VMOV.F32 s16,s1                ;392
000018  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001c  b08c              SUB      sp,sp,#0x30           ;392
00001e  d30d              BCC      |L4.60|
000020  eef59ac0          VCMPE.F32 s19,#0.0
000024  eef1fa10          VMRS     APSR_nzcv,FPSCR
000028  bfac              ITE      GE
00002a  eeb00a69          VMOVGE.F32 s0,s19
00002e  eeb10a69          VNEGLT.F32 s0,s19
000032  ee100a10          VMOV     r0,s0
000036  4998              LDR      r1,|L4.664|
000038  4288              CMP      r0,r1
00003a  dd1d              BLE      |L4.120|
                  |L4.60|
;;;395                ) {
;;;396              PRINT("WARN: Ignoring out of range docking error signal (%f, %f, %f)\n", rel_x, rel_y, rel_rad);
00003c  ee190a90          VMOV     r0,s19
000040  f7fffffe          BL       __aeabi_f2d
000044  4606              MOV      r6,r0
000046  460f              MOV      r7,r1
000048  ee180a10          VMOV     r0,s16
00004c  f7fffffe          BL       __aeabi_f2d
000050  4604              MOV      r4,r0
000052  460d              MOV      r5,r1
000054  ee190a10          VMOV     r0,s18
000058  f7fffffe          BL       __aeabi_f2d
00005c  e88d00f0          STM      sp,{r4-r7}
000060  ec410b10          VMOV     d0,r0,r1
000064  a08d              ADR      r0,|L4.668|
000066  ec532b10          VMOV     r2,r3,d0
00006a  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
                  |L4.110|
;;;397              return;
;;;398            }
;;;399            
;;;400            if (mode_ == IDLE || success_) {
;;;401              // We already accomplished the dock. We're done!
;;;402              return;
;;;403            }
;;;404            
;;;405    #if(RESET_LOC_ON_BLOCK_UPDATE)
;;;406            // Reset localization to zero buildup of localization error.
;;;407            Localization::Init();
;;;408    #endif
;;;409            
;;;410            // Set mode to approach if looking for a block
;;;411            if (mode_ == LOOKING_FOR_BLOCK) {
;;;412              
;;;413              mode_ = APPROACH_FOR_DOCK;
;;;414    
;;;415              // Set approach start pose
;;;416              Localization::GetCurrentMatPose(approachStartPose_.x(), approachStartPose_.y(), approachStartPose_.angle);
;;;417              
;;;418    #if(RESET_LOC_ON_BLOCK_UPDATE)
;;;419              // If there is no localization (as is currently the case on the robot)
;;;420              // we adjust the path's starting point as the robot progresses along
;;;421              // the path so that the relative position of the starting point to the
;;;422              // block is the same as it was when tracking first started.
;;;423              approachPath_dist = sqrtf(rel_x*rel_x + rel_y*rel_y);
;;;424              approachPath_dtheta = atan2_acc(rel_y, rel_x);
;;;425              approachPath_dOrientation = rel_rad;
;;;426              
;;;427              //PRINT("Approach start delta: distToBlock: %f, angleToBlock: %f, blockAngleRelToRobot: %f\n", approachPath_dist,approachPath_dtheta, approachPath_dOrientation);
;;;428    #endif
;;;429              
;;;430              followingBlockNormalPath_ = false;
;;;431            }
;;;432            
;;;433            // Clear current path
;;;434            PathFollower::ClearPath();
;;;435            
;;;436            // Create new path that is aligned with the normal of the block we want to dock to.
;;;437            // End point: Where the robot origin should be by the time the robot has docked.
;;;438            // Start point: Projected from end point at specified rad.
;;;439            //              Just make length as long as distance to block.
;;;440            //
;;;441            //   ______
;;;442            //   |     |
;;;443            //   |     *  End ---------- Start              * == (rel_x, rel_y)
;;;444            //   |_____|      \ ) rad
;;;445            //    Block        \
;;;446            //                  \
;;;447            //                   \ Aligned with robot x axis (but opposite direction)
;;;448            //
;;;449            //
;;;450            //               \ +ve x axis
;;;451            //                \
;;;452            //                / ROBOT
;;;453            //               /
;;;454            //              +ve y-axis
;;;455            
;;;456            
;;;457            if (rel_x <= dockOffsetDistX_ && ABS(rel_y) < LATERAL_DOCK_TOLERANCE_AT_DOCK_MM) {
;;;458    #if(DEBUG_DOCK_CONTROLLER)
;;;459              PRINT("DOCK POSE REACHED\n");
;;;460    #endif
;;;461              return;
;;;462            }
;;;463            
;;;464            Anki::Embedded::Pose2d currPose;
;;;465            Localization::GetCurrentMatPose(currPose.x(), currPose.y(), currPose.angle);
;;;466            
;;;467            // Compute absolute block pose
;;;468            f32 distToBlock = sqrtf((rel_x * rel_x) + (rel_y * rel_y));
;;;469            f32 rel_angle_to_block = atan2_acc(rel_y, rel_x);
;;;470            blockPose_.x() = currPose.x() + distToBlock * cosf(rel_angle_to_block + currPose.angle.ToFloat());
;;;471            blockPose_.y() = currPose.y() + distToBlock * sinf(rel_angle_to_block + currPose.angle.ToFloat());
;;;472            blockPose_.angle = currPose.angle + rel_rad;
;;;473            
;;;474            
;;;475    #if(RESET_LOC_ON_BLOCK_UPDATE)
;;;476            // Rotate block so that it is parallel with approach start pose
;;;477            f32 rel_blockAngle = rel_rad - approachPath_dOrientation;
;;;478            
;;;479            // Subtract dtheta so that angle points to where start pose is
;;;480            rel_blockAngle += approachPath_dtheta;
;;;481            
;;;482            // Compute dx and dy from block pose in current robot frame
;;;483            f32 dx = approachPath_dist * cosf(rel_blockAngle);
;;;484            f32 dy = approachPath_dist * sinf(rel_blockAngle);
;;;485    
;;;486            approachStartPose_.x() = blockPose_.x() - dx;
;;;487            approachStartPose_.y() = blockPose_.y() - dy;
;;;488            approachStartPose_.angle = rel_blockAngle - approachPath_dtheta;
;;;489            
;;;490            //PRINT("Approach start pose: x = %f, y = %f, angle = %f\n", approachStartPose_.x(), approachStartPose_.y(), approachStartPose_.angle.ToFloat());
;;;491    #endif
;;;492    
;;;493            
;;;494            // Compute dock pose
;;;495            dockPose_.x() = blockPose_.x() - dockOffsetDistX_ * cosf(blockPose_.angle.ToFloat());
;;;496            dockPose_.y() = blockPose_.y() - dockOffsetDistX_ * sinf(blockPose_.angle.ToFloat());
;;;497            dockPose_.angle = blockPose_.angle;
;;;498            
;;;499            
;;;500            f32 path_length;
;;;501            u8 numPathSegments = PathFollower::GenerateDubinsPath(approachStartPose_.x(),
;;;502                                                                  approachStartPose_.y(),
;;;503                                                                  approachStartPose_.angle.ToFloat(),
;;;504                                                                  dockPose_.x(),
;;;505                                                                  dockPose_.y(),
;;;506                                                                  dockPose_.angle.ToFloat(),
;;;507                                                                  DOCK_PATH_START_RADIUS_MM,
;;;508                                                                  DOCK_PATH_END_RADIUS_MM,
;;;509                                                                  DOCK_APPROACH_SPEED_MMPS,
;;;510                                                                  DOCK_APPROACH_ACCEL_MMPS2,
;;;511                                                                  DOCK_APPROACH_DECEL_MMPS2,
;;;512                                                                  FINAL_APPROACH_STRAIGHT_SEGMENT_LENGTH_MM,
;;;513                                                                  &path_length);
;;;514    
;;;515            //PRINT("numPathSegments: %d, path_length: %f, distToBlock: %f, followBlockNormalPath: %d\n",
;;;516            //      numPathSegments, path_length, distToBlock, followingBlockNormalPath_);
;;;517    
;;;518            
;;;519            // No reasonable Dubins path exists.
;;;520            // Either try again with smaller radii or just let the controller
;;;521            // attempt to get on to a straight line normal path.
;;;522            if (numPathSegments == 0 || path_length > 2 * distToBlock || followingBlockNormalPath_) {
;;;523              
;;;524              // Compute new starting point for path
;;;525              // HACK: Feeling lazy, just multiplying path by some scalar so that it's likely to be behind the current robot pose.
;;;526              f32 x_start_mm = dockPose_.x() - 3 * distToBlock * cosf(dockPose_.angle.ToFloat());
;;;527              f32 y_start_mm = dockPose_.y() - 3 * distToBlock * sinf(dockPose_.angle.ToFloat());
;;;528              
;;;529              PathFollower::ClearPath();
;;;530              PathFollower::AppendPathSegment_Line(0, x_start_mm, y_start_mm, dockPose_.x(), dockPose_.y(),
;;;531                                                   DOCK_APPROACH_SPEED_MMPS, DOCK_APPROACH_ACCEL_MMPS2, DOCK_APPROACH_DECEL_MMPS2);
;;;532              
;;;533              followingBlockNormalPath_ = true;
;;;534              //PRINT("Computing straight line path (%f, %f) to (%f, %f)\n", x_start_m, y_start_m, dockPose_.x(), dockPose_.y());
;;;535            }
;;;536    
;;;537            /*
;;;538            // Set speed
;;;539            // TODO: Add hysteresis
;;;540            if (distToBlock < FAR_DIST_TO_BLOCK_THRESH_MM) {
;;;541              SpeedController::SetUserCommandedDesiredVehicleSpeed( DOCK_APPROACH_SPEED_MMPS );
;;;542            } else {
;;;543              SpeedController::SetUserCommandedDesiredVehicleSpeed( DOCK_FAR_APPROACH_SPEED_MMPS );
;;;544            }
;;;545            SpeedController::SetUserCommandedAcceleration( DOCK_APPROACH_ACCEL_MMPS2 );
;;;546            */
;;;547            
;;;548            // Start following path
;;;549            createdValidPath_ = PathFollower::StartPathTraversal(0, useManualSpeed_);
;;;550            
;;;551            // Debug
;;;552            if (!createdValidPath_) {
;;;553              PRINT("ERROR DockingController: Failed to create path\n");
;;;554              PathFollower::PrintPath();
;;;555            }
;;;556            
;;;557          }
00006e  b00c              ADD      sp,sp,#0x30
000070  ecbd8b06          VPOP     {d8-d10}
000074  e8bd81f0          POP      {r4-r8,pc}
                  |L4.120|
000078  4c98              LDR      r4,|L4.732|
00007a  7861              LDRB     r1,[r4,#1]            ;400  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974948success_E
00007c  7820              LDRB     r0,[r4,#0]            ;400  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974945mode_E
00007e  1e49              SUBS     r1,r1,#1              ;400
000080  4208              TST      r0,r1                 ;400
000082  d0f4              BEQ      |L4.110|
000084  4f96              LDR      r7,|L4.736|
000086  1d39              ADDS     r1,r7,#4              ;416
000088  2801              CMP      r0,#1                 ;411
00008a  d107              BNE      |L4.156|
00008c  2002              MOVS     r0,#2                 ;413
00008e  7020              STRB     r0,[r4,#0]            ;413
000090  4638              MOV      r0,r7                 ;416
000092  1d0a              ADDS     r2,r1,#4              ;416
000094  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
000098  2000              MOVS     r0,#0                 ;430
00009a  7120              STRB     r0,[r4,#4]            ;430
                  |L4.156|
00009c  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower9ClearPathEv ; Anki::Cozmo::PathFollower::ClearPath()
0000a0  ed940a03          VLDR     s0,[r4,#0xc]          ;457
0000a4  eeb49ac0          VCMPE.F32 s18,s0                ;457
0000a8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;457
0000ac  d80d              BHI      |L4.202|
0000ae  eeb58ac0          VCMPE.F32 s16,#0.0              ;457
0000b2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;457
0000b6  bfac              ITE      GE                    ;457
0000b8  eeb00a48          VMOVGE.F32 s0,s16                ;457
0000bc  eeb10a48          VNEGLT.F32 s0,s16                ;457
0000c0  ee100a10          VMOV     r0,s0                 ;457
0000c4  f1b05f7e          CMP      r0,#0x3f800000        ;457
0000c8  dbd1              BLT      |L4.110|
                  |L4.202|
0000ca  a806              ADD      r0,sp,#0x18           ;464
0000cc  ed9f0a85          VLDR     s0,|L4.740|
0000d0  ed8d0a04          VSTR     s0,[sp,#0x10]         ;464
0000d4  ed8d0a05          VSTR     s0,[sp,#0x14]         ;464
0000d8  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
0000dc  a804              ADD      r0,sp,#0x10           ;465
0000de  a905              ADD      r1,sp,#0x14           ;465
0000e0  4605              MOV      r5,r0                 ;465
0000e2  aa06              ADD      r2,sp,#0x18           ;465
0000e4  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
0000e8  ee690a09          VMUL.F32 s1,s18,s18            ;468
0000ec  ee480a08          VMLA.F32 s1,s16,s16            ;468
0000f0  eeb10ae0          VSQRT.F32 s0,s1                 ;468
0000f4  eeb40a40          VCMP.F32 s0,s0                 ;468
0000f8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;468
0000fc  bf1c              ITT      NE                    ;468
0000fe  eeb00a60          VMOVNE.F32 s0,s1                 ;468
000102  f7fffffe          BLNE     __hardfp_sqrtf
000106  eef08a40          VMOV.F32 s17,s0                ;468
00010a  eef00a49          VMOV.F32 s1,s18                ;469
00010e  eeb00a48          VMOV.F32 s0,s16                ;469
000112  f7fffffe          BL       _Z9atan2_accff ; atan2_acc(float, float)
000116  eeb08a40          VMOV.F32 s16,s0                ;469
00011a  ed9d0a06          VLDR     s0,[sp,#0x18]         ;469
00011e  ed9d9a04          VLDR     s18,[sp,#0x10]        ;470
000122  ee300a08          VADD.F32 s0,s0,s16             ;470
000126  f7fffffe          BL       __hardfp_cosf
00012a  eef00a40          VMOV.F32 s1,s0                 ;470
00012e  486e              LDR      r0,|L4.744|
000130  ee089aa0          VMLA.F32 s18,s17,s1            ;470
000134  ed809a00          VSTR     s18,[r0,#0]           ;470
000138  ed9d0a06          VLDR     s0,[sp,#0x18]         ;470
00013c  ed9d9a05          VLDR     s18,[sp,#0x14]        ;471
000140  ee300a08          VADD.F32 s0,s0,s16             ;471
000144  f7fffffe          BL       __hardfp_sinf
000148  eef00a40          VMOV.F32 s1,s0                 ;471
00014c  4866              LDR      r0,|L4.744|
00014e  ee089aa0          VMLA.F32 s18,s17,s1            ;471
000152  eeb00a69          VMOV.F32 s0,s19                ;472
000156  f1050108          ADD      r1,r5,#8              ;472
00015a  ed809a01          VSTR     s18,[r0,#4]           ;471
00015e  a808              ADD      r0,sp,#0x20           ;472
000160  f7fffffe          BL       _ZN4AnkiplERKNS_7RadiansEf ; Anki::operator +(const Anki::Radians&, float)
000164  4d60              LDR      r5,|L4.744|
000166  a908              ADD      r1,sp,#0x20           ;472
000168  f1050008          ADD      r0,r5,#8              ;472
00016c  f7fffffe          BL       _ZN4Anki7RadiansaSERKS0_ ; Anki::Radians::operator =(const Anki::Radians&)
000170  4628              MOV      r0,r5                 ;495
000172  ed950a02          VLDR     s0,[r5,#8]            ;495
000176  ed908a00          VLDR     s16,[r0,#0]           ;495
00017a  f7fffffe          BL       __hardfp_cosf
00017e  edd40a03          VLDR     s1,[r4,#0xc]          ;495
000182  f1050010          ADD      r0,r5,#0x10           ;495
000186  ee008ac0          VMLS.F32 s16,s1,s0             ;495
00018a  ed808a00          VSTR     s16,[r0,#0]           ;495
00018e  3810              SUBS     r0,r0,#0x10           ;496
000190  ed950a02          VLDR     s0,[r5,#8]            ;496
000194  ed908a01          VLDR     s16,[r0,#4]           ;496
000198  f7fffffe          BL       __hardfp_sinf
00019c  edd40a03          VLDR     s1,[r4,#0xc]          ;496
0001a0  f1050010          ADD      r0,r5,#0x10           ;496
0001a4  4680              MOV      r8,r0                 ;497
0001a6  ee008ac0          VMLS.F32 s16,s1,s0             ;496
0001aa  f1050108          ADD      r1,r5,#8              ;497
0001ae  4646              MOV      r6,r8                 ;497
0001b0  ed808a01          VSTR     s16,[r0,#4]           ;496
0001b4  f1080008          ADD      r0,r8,#8              ;497
0001b8  f7fffffe          BL       _ZN4Anki7RadiansaSERKS0_ ; Anki::Radians::operator =(const Anki::Radians&)
0001bc  f1050010          ADD      r0,r5,#0x10           ;501
0001c0  edd62a02          VLDR     s5,[r6,#8]            ;501
0001c4  ed902a01          VLDR     s4,[r0,#4]            ;501
0001c8  edd01a00          VLDR     s3,[r0,#0]            ;501
0001cc  3820              SUBS     r0,r0,#0x20           ;501
0001ce  ed971a02          VLDR     s2,[r7,#8]            ;501
0001d2  edd00a01          VLDR     s1,[r0,#4]            ;501
0001d6  ed900a00          VLDR     s0,[r0,#0]            ;501
0001da  a80a              ADD      r0,sp,#0x28           ;501
0001dc  eef35a0e          VMOV.F32 s11,#30.00000000      ;501
0001e0  eddf9a42          VLDR     s19,|L4.748|
0001e4  eeb05a69          VMOV.F32 s10,s19               ;501
0001e8  ed9faa41          VLDR     s20,|L4.752|
0001ec  eeb34a0e          VMOV.F32 s8,#30.00000000       ;501
0001f0  eef04a4a          VMOV.F32 s9,s20                ;501
0001f4  eddf3a3f          VLDR     s7,|L4.756|
0001f8  ed9f3a3f          VLDR     s6,|L4.760|
0001fc  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower18GenerateDubinsPathEffffffffffffPf ; Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*)
000200  b168              CBZ      r0,|L4.542|
000202  eeb00a00          VMOV.F32 s0,#2.00000000        ;522
000206  eddd0a0a          VLDR     s1,[sp,#0x28]         ;522
00020a  ee280a80          VMUL.F32 s0,s17,s0             ;522
00020e  eef40ac0          VCMPE.F32 s1,s0                 ;522
000212  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;522
000216  bfdc              ITT      LE                    ;522
000218  7920              LDRBLE   r0,[r4,#4]            ;522  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749425followingBlockNormalPath_E
00021a  2800              CMPLE    r0,#0                 ;522
00021c  d02e              BEQ      |L4.636|
                  |L4.542|
00021e  4837              LDR      r0,|L4.764|
000220  4646              MOV      r6,r8                 ;526
000222  ed980a02          VLDR     s0,[r8,#8]            ;526
000226  ed909a00          VLDR     s18,[r0,#0]           ;526
00022a  f7fffffe          BL       __hardfp_cosf
00022e  eef00a08          VMOV.F32 s1,#3.00000000        ;526
000232  4832              LDR      r0,|L4.764|
000234  ee288aa0          VMUL.F32 s16,s17,s1            ;526
000238  eef08a49          VMOV.F32 s17,s18               ;526
00023c  ed909a01          VLDR     s18,[r0,#4]           ;527
000240  ee488a40          VMLS.F32 s17,s16,s0            ;526
000244  ed960a02          VLDR     s0,[r6,#8]            ;526
000248  f7fffffe          BL       __hardfp_sinf
00024c  ee089a40          VMLS.F32 s18,s16,s0            ;527
000250  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower9ClearPathEv ; Anki::Cozmo::PathFollower::ClearPath()
000254  4829              LDR      r0,|L4.764|
000256  eeb03a69          VMOV.F32 s6,s19                ;530
00025a  eef02a4a          VMOV.F32 s5,s20                ;530
00025e  edd01a01          VLDR     s3,[r0,#4]            ;530
000262  ed901a00          VLDR     s2,[r0,#0]            ;530
000266  eeb32a0e          VMOV.F32 s4,#30.00000000       ;530
00026a  eef00a49          VMOV.F32 s1,s18                ;530
00026e  eeb00a68          VMOV.F32 s0,s17                ;530
000272  2000              MOVS     r0,#0                 ;530
000274  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower22AppendPathSegment_LineEjfffffff ; Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
000278  2001              MOVS     r0,#1                 ;533
00027a  7120              STRB     r0,[r4,#4]            ;533
                  |L4.636|
00027c  7961              LDRB     r1,[r4,#5]            ;549  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749415useManualSpeed_E
00027e  2000              MOVS     r0,#0                 ;549
000280  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower18StartPathTraversalEtb ; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
000284  70e0              STRB     r0,[r4,#3]            ;549
000286  2800              CMP      r0,#0                 ;552
000288  f47faef1          BNE      |L4.110|
00028c  a01c              ADR      r0,|L4.768|
00028e  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
000292  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower9PrintPathEv ; Anki::Cozmo::PathFollower::PrintPath()
000296  e6ea              B        |L4.110|
;;;558          
                          ENDP

                  |L4.664|
                          DCD      0x3f96cbe4
                  |L4.668|
00029c  5741524e          DCB      "WARN: Ignoring out of range docking error signal (%f, %"
0002a0  3a204967
0002a4  6e6f7269
0002a8  6e67206f
0002ac  7574206f
0002b0  66207261
0002b4  6e676520
0002b8  646f636b
0002bc  696e6720
0002c0  6572726f
0002c4  72207369
0002c8  676e616c
0002cc  20282566
0002d0  2c2025  
0002d3  662c2025          DCB      "f, %f)\n",0
0002d7  66290a00
0002db  00                DCB      0
                  |L4.732|
                          DCD      ||.data||
                  |L4.736|
                          DCD      ||.bss||
                  |L4.740|
0002e4  00000000          DCFS     0x00000000 ; 0
                  |L4.744|
                          DCD      ||.bss||+0x10
                  |L4.748|
0002ec  43480000          DCFS     0x43480000 ; 200
                  |L4.752|
0002f0  42700000          DCFS     0x42700000 ; 60
                  |L4.756|
0002f4  42c80000          DCFS     0x42c80000 ; 100
                  |L4.760|
0002f8  42480000          DCFS     0x42480000 ; 50
                  |L4.764|
                          DCD      ||.bss||+0x20
                  |L4.768|
000300  4552524f          DCB      "ERROR DockingController: Failed to create path\n",0
000304  5220446f
000308  636b696e
00030c  67436f6e
000310  74726f6c
000314  6c65723a
000318  20466169
00031c  6c656420
000320  746f2063
000324  72656174
000328  65207061
00032c  74680a00

                          AREA ||i._ZN4Anki5Cozmo17DockingController16TrackCamWithLiftEb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController16TrackCamWithLiftEb PROC ; Anki::Cozmo::DockingController::TrackCamWithLift(bool)
;;;144          
;;;145          void TrackCamWithLift(bool on)
000000  4901              LDR      r1,|L5.8|
;;;146          {
;;;147            trackCamWithLift_ = on;
000002  7188              STRB     r0,[r1,#6]
;;;148          }
000004  4770              BX       lr
;;;149          
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo17DockingController17GetLastMarkerPoseERfS2_S2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController17GetLastMarkerPoseERfS2_S2_ PROC ; Anki::Cozmo::DockingController::GetLastMarkerPose(float&, float&, float&)
;;;643          
;;;644          bool GetLastMarkerPose(f32 &x, f32 &y, f32 &angle)
000000  4b0a              LDR      r3,|L6.44|
;;;645          {
;;;646            if (lastMarkerDistX_ > 0.f) {
000002  ed930a05          VLDR     s0,[r3,#0x14]
000006  eeb50ac0          VCMPE.F32 s0,#0.0
00000a  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;647              x = lastMarkerDistX_;
;;;648              y = lastMarkerDistY_;
;;;649              angle = lastMarkerAng_;
;;;650              return true;
;;;651            }
;;;652            return false;
00000e  bfdc              ITT      LE
000010  2000              MOVLE    r0,#0
;;;653          }
000012  4770              BXLE     lr
000014  ed800a00          VSTR     s0,[r0,#0]            ;647
000018  ed930a06          VLDR     s0,[r3,#0x18]         ;648
00001c  2001              MOVS     r0,#1                 ;650
00001e  ed810a00          VSTR     s0,[r1,#0]            ;648
000022  ed930a07          VLDR     s0,[r3,#0x1c]         ;649
000026  ed820a00          VSTR     s0,[r2,#0]            ;649
00002a  4770              BX       lr
;;;654          
                          ENDP

                  |L6.44|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo17DockingController17StartTrackingOnlyERKNS_6Vision10MarkerTypeEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController17StartTrackingOnlyERKNS_6Vision10MarkerTypeEf PROC ; Anki::Cozmo::DockingController::StartTrackingOnly(const Anki::Vision::MarkerType&, float)
;;;629          
;;;630          void StartTrackingOnly(const Vision::MarkerType& trackingMarker,
000000  b570              PUSH     {r4-r6,lr}
;;;631                                 const f32 markerWidth_mm)
;;;632          {
;;;633            dockMarker_ = trackingMarker;
000002  4c0b              LDR      r4,|L7.48|
000004  7800              LDRB     r0,[r0,#0]
;;;634            VisionSystem::SetMarkerToTrack(dockMarker_, markerWidth_mm, false);
000006  2100              MOVS     r1,#0
000008  7220              STRB     r0,[r4,#8]            ;633
00000a  f1040008          ADD      r0,r4,#8
00000e  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem16SetMarkerToTrackERKNS_6Vision10MarkerTypeEfb ; Anki::Cozmo::VisionSystem::SetMarkerToTrack(const Anki::Vision::MarkerType&, float, bool)
;;;635            trackingOnly_ = true;
000012  2501              MOVS     r5,#1
;;;636            lastMarkerDistX_ = 0.f;
000014  ed9f0a07          VLDR     s0,|L7.52|
000018  71e5              STRB     r5,[r4,#7]            ;635
00001a  ed840a05          VSTR     s0,[r4,#0x14]
;;;637            lastMarkerDistY_ = 0.f;
00001e  ed840a06          VSTR     s0,[r4,#0x18]
;;;638            lastMarkerAng_ = 0.f;
000022  ed840a07          VSTR     s0,[r4,#0x1c]
;;;639            
;;;640            lastDockingErrorSignalRecvdTime_ = HAL::GetMicroCounter();
000026  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
;;;641            mode_ = LOOKING_FOR_BLOCK;
00002a  6120              STR      r0,[r4,#0x10]  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749432lastDockingErrorSignalRecvdTime_E
00002c  7025              STRB     r5,[r4,#0]
;;;642          }
00002e  bd70              POP      {r4-r6,pc}
;;;643          
                          ENDP

                  |L7.48|
                          DCD      ||.data||
                  |L7.52|
000034  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki5Cozmo17DockingController18DidLastDockSucceedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController18DidLastDockSucceedEv PROC ; Anki::Cozmo::DockingController::DidLastDockSucceed()
;;;139          
;;;140          bool DidLastDockSucceed()
000000  4801              LDR      r0,|L8.8|
;;;141          {
;;;142            return success_;
000002  7840              LDRB     r0,[r0,#1]  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974948success_E
;;;143          }
000004  4770              BX       lr
;;;144          
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo17DockingController20GetCamFOVLowerHeightEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController20GetCamFOVLowerHeightEv PROC ; Anki::Cozmo::DockingController::GetCamFOVLowerHeight()
;;;152          // TODO: Should this be in some kinematics module where we have functions to get things wrt other things?
;;;153          f32 GetCamFOVLowerHeight()
000000  b500              PUSH     {lr}
;;;154          {
000002  ed2d8b02          VPUSH    {d8}
000006  b083              SUB      sp,sp,#0xc
;;;155            f32 x, z, angle, liftH;
;;;156            HeadController::GetCamPose(x, z, angle);
000008  aa01              ADD      r2,sp,#4
00000a  4669              MOV      r1,sp
00000c  a802              ADD      r0,sp,#8
00000e  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController10GetCamPoseERfS2_S2_ ; Anki::Cozmo::HeadController::GetCamPose(float&, float&, float&)
;;;157     
;;;158            // Compute the angle of the line extending from the camera that represents
;;;159            // the lower bound of its field of view
;;;160            f32 lowerCamFOVangle = angle - 0.45f * VisionSystem::GetVerticalFOV();
000012  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem14GetVerticalFOVEv ; Anki::Cozmo::VisionSystem::GetVerticalFOV()
000016  eef00a40          VMOV.F32 s1,s0
00001a  ed9d0a01          VLDR     s0,[sp,#4]
00001e  ed9f1a17          VLDR     s2,|L9.124|
;;;161            
;;;162            // Compute the lift height required to raise the cross bar to be at
;;;163            // the height of that line.
;;;164            // TODO: This is really rough computation approximating with a fixed horizontal distance between
;;;165            //       the camera and the lift. make better!
;;;166            const f32 liftDistToCam = 26;
000022  eeb38a0a          VMOV.F32 s16,#26.00000000
000026  ee000ac1          VMLS.F32 s0,s1,s2              ;160
;;;167            liftH = liftDistToCam * sinf(lowerCamFOVangle) + z;
00002a  f7fffffe          BL       __hardfp_sinf
00002e  eddd0a00          VLDR     s1,[sp,#0]
;;;168            liftH -= LIFT_XBAR_HEIGHT_WRT_WRIST_JOINT;
;;;169            
;;;170            //PRINT("CAM POSE: x %f, z %f, angle %f (lowerCamAngle %f, liftH %f)\n", x, z, angle, lowerCamFOVangle, liftH);
;;;171            
;;;172            return CLIP(liftH, LIFT_HEIGHT_LOWDOCK, LIFT_HEIGHT_CARRY);
000032  4913              LDR      r1,|L9.128|
000034  ee400a08          VMLA.F32 s1,s0,s16             ;167
000038  eebb0a06          VMOV.F32 s0,#-22.00000000      ;168
00003c  ee300ac0          VSUB.F32 s0,s1,s0              ;168
000040  ee100a10          VMOV     r0,s0
000044  4288              CMP      r0,r1
000046  bfcc              ITE      GT
000048  eef00a40          VMOVGT.F32 s1,s0
00004c  eef30a07          VMOVLE.F32 s1,#23.00000000
000050  ee100a90          VMOV     r0,s1
000054  4a0b              LDR      r2,|L9.132|
000056  4290              CMP      r0,r2
000058  bfa1              ITTTT    GE
00005a  ed9f0a0b          VLDRGE   s0,|L9.136|
;;;173          }
00005e  b003              ADDGE    sp,sp,#0xc
000060  ecbd8b02          VPOPGE   {d8}
000064  bd00              POPGE    {pc}
000066  ee100a10          VMOV     r0,s0                 ;172
00006a  4288              CMP      r0,r1                 ;172
00006c  bfd8              IT       LE                    ;172
00006e  eeb30a07          VMOVLE.F32 s0,#23.00000000       ;172
000072  b003              ADD      sp,sp,#0xc
000074  ecbd8b02          VPOP     {d8}
000078  bd00              POP      {pc}
;;;174          
                          ENDP

00007a  0000              DCW      0x0000
                  |L9.124|
00007c  3ee66666          DCFS     0x3ee66666 ; 0.44999998807907104
                  |L9.128|
                          DCD      0x41b80000
                  |L9.132|
                          DCD      0x42be0000
                  |L9.136|
000088  42be0000          DCFS     0x42be0000 ; 95

                          AREA ||i._ZN4Anki5Cozmo17DockingController21StartDockingToRelPoseEfffb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController21StartDockingToRelPoseEfffb PROC ; Anki::Cozmo::DockingController::StartDockingToRelPose(float, float, float, bool)
;;;593          
;;;594          void StartDockingToRelPose(const f32 rel_x, const f32 rel_y, const f32 rel_angle, const bool useManualSpeed)
000000  b510              PUSH     {r4,lr}
;;;595          {
;;;596            useManualSpeed_ = useManualSpeed;
000002  4c0f              LDR      r4,|L10.64|
000004  ed2d8b04          VPUSH    {d8-d9}               ;595
000008  eeb08a41          VMOV.F32 s16,s2                ;595
00000c  eef08a60          VMOV.F32 s17,s1                ;595
000010  eeb09a40          VMOV.F32 s18,s0                ;595
000014  7160              STRB     r0,[r4,#5]
;;;597            lastDockingErrorSignalRecvdTime_ = HAL::GetMicroCounter();
000016  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
;;;598            mode_ = LOOKING_FOR_BLOCK;
00001a  6120              STR      r0,[r4,#0x10]  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749432lastDockingErrorSignalRecvdTime_E
00001c  2001              MOVS     r0,#1
00001e  7020              STRB     r0,[r4,#0]
;;;599            markerlessDocking_ = true;
000020  70a0              STRB     r0,[r4,#2]
;;;600            success_ = false;
000022  2000              MOVS     r0,#0
000024  7060              STRB     r0,[r4,#1]
;;;601            
;;;602            // NOTE: mode_ must be set to LOOKING_FOR_BLOCK and success_ must be false
;;;603            //       before we call SetRelDockPose()
;;;604            SetRelDockPose(rel_x, rel_y, rel_angle);
000026  eeb01a48          VMOV.F32 s2,s16
00002a  eef00a68          VMOV.F32 s1,s17
00002e  eeb00a49          VMOV.F32 s0,s18
000032  ecbd8b04          VPOP     {d8-d9}
000036  e8bd4010          POP      {r4,lr}
00003a  f7ffbffe          B.W      _ZN4Anki5Cozmo17DockingController14SetRelDockPoseEfff ; Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
;;;605          }
;;;606    
                          ENDP

00003e  0000              DCW      0x0000
                  |L10.64|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo17DockingController6IsBusyEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController6IsBusyEv PROC ; Anki::Cozmo::DockingController::IsBusy()
;;;134          
;;;135          bool IsBusy()
000000  4802              LDR      r0,|L11.12|
;;;136          {
;;;137            return (mode_ != IDLE);
000002  7800              LDRB     r0,[r0,#0]  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974945mode_E
000004  2800              CMP      r0,#0
000006  bf18              IT       NE
000008  2001              MOVNE    r0,#1
;;;138          }
00000a  4770              BX       lr
;;;139          
                          ENDP

                  |L11.12|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo17DockingController6UpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController6UpdateEv PROC ; Anki::Cozmo::DockingController::Update()
;;;174          
;;;175          Result Update()
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;176          {
000004  ed2d8b0c          VPUSH    {d8-d13}
000008  b08d              SUB      sp,sp,#0x34
;;;177            
;;;178            // Get any docking error signal available from the vision system
;;;179            // and update our path accordingly.
;;;180            Messages::DockingErrorSignal dockMsg;
;;;181            while( Messages::CheckMailbox(dockMsg) )
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       _ZN4Anki5Cozmo8Messages12CheckMailboxERNS1_18DockingErrorSignalE ; Anki::Cozmo::Messages::CheckMailbox(Anki::Cozmo::Messages::DockingErrorSignal&)
;;;182            {
;;;183              
;;;184              // If we're not actually docking, just toss the dockMsg.
;;;185              if (mode_ == IDLE) {
;;;186                break;
;;;187              }
;;;188              
;;;189    #if(0)
;;;190              // Print period of tracker (i.e. messages coming in from tracker)
;;;191              static u32 lastTime = 0;
;;;192              u32 currTime = HAL::GetMicroCounter();
;;;193              if (lastTime != 0) {
;;;194                u32 period = (currTime - lastTime)/1000;
;;;195                PRINT("PERIOD: %d ms\n", period);
;;;196              }
;;;197              lastTime = currTime;
;;;198    #endif
;;;199              
;;;200              
;;;201              if(dockMsg.didTrackingSucceed) {
;;;202                
;;;203                //PRINT("ErrSignal %d (msgTime %d)\n", HAL::GetMicroCounter(), dockMsg.timestamp);
;;;204                
;;;205                // Convert from camera coordinates to robot coordinates
;;;206                if(dockMsg.isApproximate) 
;;;207                {
;;;208                  dockMsg.x_distErr += HEAD_CAM_POSITION[0]*cosf(HeadController::GetAngleRad()) + NECK_JOINT_POSITION[0];
;;;209                }
;;;210                else {
;;;211                  Embedded::Point3<f32> tempPoint;
;;;212                  VisionSystem::GetWithRespectToRobot(Embedded::Point3<f32>(dockMsg.x_distErr, dockMsg.y_horErr, dockMsg.z_height),
;;;213                                                      tempPoint);
;;;214                  
;;;215                  dockMsg.x_distErr = tempPoint.x;
;;;216                  dockMsg.y_horErr  = tempPoint.y + ( (HAL::GetIDCard()->esn == 2) ? COZMO2_CAM_LATERAL_POSITION_HACK : 0 );
;;;217                  dockMsg.z_height  = tempPoint.z;
;;;218                }
;;;219                
;;;220                // Update last observed marker pose
;;;221                lastMarkerDistX_ = dockMsg.x_distErr;
;;;222                lastMarkerDistY_ = dockMsg.y_horErr;
;;;223                lastMarkerAng_ = dockMsg.angleErr;
;;;224                
;;;225    #if(DEBUG_DOCK_CONTROLLER)
;;;226                PRINT("Received%sdocking error signal: x_distErr=%f, y_horErr=%f, "
;;;227                      "z_height=%f, angleErr=%fdeg\n",
;;;228                      (dockMsg.isApproximate ? " approximate " : " "),
;;;229                      dockMsg.x_distErr, dockMsg.y_horErr,
;;;230                      dockMsg.z_height, RAD_TO_DEG_F32(dockMsg.angleErr));
;;;231    #endif
;;;232                
;;;233                // Check that error signal is plausible
;;;234                // If not, treat as if tracking failed.
;;;235                // TODO: Get tracker to detect these situations and not even send the error message here.
;;;236                if (dockMsg.x_distErr > 0.f && ABS(dockMsg.angleErr) < 0.75f*PIDIV2_F) {
;;;237                 
;;;238                  // Update time that last good error signal was received
;;;239                  lastDockingErrorSignalRecvdTime_ = HAL::GetMicroCounter();
;;;240                  
;;;241                  // No more to do if we're just tracking a marker, but not docking to it.
;;;242                  if (trackingOnly_) {
;;;243                    continue;
;;;244                  }
;;;245                  
;;;246                  // Set relative block pose to start/continue docking
;;;247                  SetRelDockPose(dockMsg.x_distErr, dockMsg.y_horErr, dockMsg.angleErr);
;;;248    
;;;249                  if(!dockMsg.isApproximate) // will be -1 if not computed
;;;250                  {
;;;251                    // If we have the height of the marker for docking, we can also
;;;252                    // compute the head angle to keep it centered
;;;253                    HeadController::SetSpeedAndAccel(2.5, 10);
;;;254                    //f32 desiredHeadAngle = atan_fast( (dockMsg.z_height - NECK_JOINT_POSITION[2])/dockMsg.x_distErr);
;;;255                    
;;;256                    // Make sure bottom of camera FOV doesn't tilt below the bottom of the block
;;;257                    // or that the camera FOV center doesn't tilt below the marker center.
;;;258                    // Otherwise try to maintain the lowest tilt possible
;;;259                    
;;;260                    // Compute angle the head needs to face such that the bottom of the marker
;;;261                    // is at the bottom of the image.
;;;262                    f32 minDesiredHeadAngle1 = atan_fast( (dockMsg.z_height - NECK_JOINT_POSITION[2] - 20.f)/dockMsg.x_distErr) + 0.5f*VisionSystem::GetVerticalFOV(); // TODO: Marker size should come from VisionSystem?
;;;263                    
;;;264                    // Compute the angle the head needs to face such that it is looking
;;;265                    // directly at the center of the marker
;;;266                    f32 minDesiredHeadAngle2 = atan_fast( (dockMsg.z_height - NECK_JOINT_POSITION[2])/dockMsg.x_distErr);
;;;267                    
;;;268                    // Use the min of both angles
;;;269                    f32 desiredHeadAngle = MIN(minDesiredHeadAngle1, minDesiredHeadAngle2);
;;;270                    
;;;271                    // KEVIN: Lens is wide enough now that we don't really need to do head tracking.
;;;272                    //        Docking is smoother without it!
;;;273                    //HeadController::SetDesiredAngle(desiredHeadAngle);
;;;274                    //PRINT("desHeadAngle %f (min1: %f, min2: %f)\n", desiredHeadAngle, minDesiredHeadAngle1, minDesiredHeadAngle2);
;;;275                    
;;;276                    // Track camera with lift.
;;;277                    // Do it only when it's a high block and we're within a certain distance of it.
;;;278                    // Don't lift higher than HIGHDOCK height.
;;;279                    if (trackCamWithLift_ &&
;;;280                        dockMsg.z_height > START_LIFT_TRACKING_HEIGHT_MM &&
;;;281                        dockMsg.x_distErr < START_LIFT_TRACKING_DIST_MM) {
;;;282                      f32 liftHeight = GetCamFOVLowerHeight();
;;;283                      if (liftHeight > LIFT_HEIGHT_HIGHDOCK) {
;;;284                        liftHeight = LIFT_HEIGHT_HIGHDOCK;
;;;285                      }
;;;286                      //PRINT("TrackLiftHeight: %f\n", liftHeight);
;;;287                      LiftController::SetDesiredHeight(liftHeight);
;;;288                    }
;;;289    
;;;290                    // If docking to a high block, assumes we're trying to pick it up!
;;;291                    // Gradually lift block from a height of START_LIFT_HEIGHT_MM to LIFT_HEIGHT_HIGH_DOCK
;;;292                    // over the marker distance ranging from START_LIFT_TRACKING_DIST_MM to dockOffsetDistX_.
;;;293                    if (dockMsg.z_height > START_LIFT_TRACKING_HEIGHT_MM &&
;;;294                        dockMsg.x_distErr < START_LIFT_TRACKING_DIST_MM) {
;;;295                      
;;;296                      // Compute desired slope of lift height during approach.
;;;297                      const f32 liftApproachSlope = (LIFT_HEIGHT_HIGHDOCK - START_LIFT_HEIGHT_MM) / (START_LIFT_TRACKING_DIST_MM - dockOffsetDistX_);
;;;298                      
;;;299                      // Compute current desired lift height based on current distance to block.
;;;300                      f32 liftHeight = START_LIFT_HEIGHT_MM + liftApproachSlope * (START_LIFT_TRACKING_DIST_MM - dockMsg.x_distErr);
;;;301                      
;;;302                      // Capping to highdock lift height
;;;303                      liftHeight = MIN(liftHeight, LIFT_HEIGHT_HIGHDOCK);
;;;304                      
;;;305                      // Adding a little extra height to gain more "hookage" since we're coming in at an angle.
;;;306                      liftHeight += 2;
;;;307                      
;;;308                      LiftController::SetDesiredHeight(liftHeight);
;;;309                    }
;;;310                    
;;;311                  }
;;;312                  /* Now done on basestation directly
;;;313                  // Send to basestation for visualization
;;;314                  HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::DockingErrorSignal), &dockMsg);
;;;315                   */
;;;316                  continue;
;;;317                }
;;;318    
;;;319              }  // IF tracking succeeded
;;;320              
;;;321              if (!trackingOnly_) {
;;;322                SpeedController::SetUserCommandedDesiredVehicleSpeed(0);
;;;323                //PathFollower::ClearPath();
;;;324                SteeringController::ExecuteDirectDrive(0,0);
;;;325                if (mode_ != IDLE) {
;;;326                  mode_ = LOOKING_FOR_BLOCK;
000010  2501              MOVS     r5,#1
000012  4cb5              LDR      r4,|L12.744|
000014  2800              CMP      r0,#0                 ;181
000016  f000812b          BEQ.W    |L12.624|
00001a  eddfaab4          VLDR     s21,|L12.748|
00001e  f8dfa2d0          LDR      r10,|L12.752|
000022  eefa9a0a          VMOV.F32 s19,#-13.00000000     ;208
000026  eddf8ab3          VLDR     s17,|L12.756|
00002a  eeb3ba04          VMOV.F32 s22,#20.00000000      ;262
00002e  ed9fcab2          VLDR     s24,|L12.760|
000032  f8dfb2c8          LDR      r11,|L12.764|
000036  f8df92c8          LDR      r9,|L12.768|
00003a  eeb3aa0a          VMOV.F32 s20,#26.00000000      ;262
00003e  eefbca06          VMOV.F32 s25,#-22.00000000     ;262
000042  ed9fdab0          VLDR     s26,|L12.772|
000046  4eb0              LDR      r6,|L12.776|
000048  4fb0              LDR      r7,|L12.780|
00004a  f8df82c4          LDR      r8,|L12.784|
00004e  ed9f9ab1          VLDR     s18,|L12.788|
                  |L12.82|
000052  7820              LDRB     r0,[r4,#0]            ;185  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974945mode_E
000054  2800              CMP      r0,#0                 ;185
000056  f000810b          BEQ.W    |L12.624|
00005a  f89d0014          LDRB     r0,[sp,#0x14]         ;201
00005e  2800              CMP      r0,#0                 ;201
000060  f00080ed          BEQ.W    |L12.574|
000064  f89d0015          LDRB     r0,[sp,#0x15]         ;206
000068  b170              CBZ      r0,|L12.136|
00006a  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController11GetAngleRadEv ; Anki::Cozmo::HeadController::GetAngleRad()
00006e  f7fffffe          BL       __hardfp_cosf
000072  eef00a69          VMOV.F32 s1,s19                ;208
000076  ee400a2a          VMLA.F32 s1,s0,s21             ;208
00007a  ed9d0a01          VLDR     s0,[sp,#4]            ;208
00007e  ee300a80          VADD.F32 s0,s1,s0              ;208
000082  ed8d0a01          VSTR     s0,[sp,#4]            ;208
000086  e02c              B        |L12.226|
                  |L12.136|
000088  ed9f8aa3          VLDR     s16,|L12.792|
00008c  a809              ADD      r0,sp,#0x24           ;212
00008e  ed8d8a06          VSTR     s16,[sp,#0x18]        ;212
000092  ed8d8a07          VSTR     s16,[sp,#0x1c]        ;212
000096  ed8d8a08          VSTR     s16,[sp,#0x20]        ;212
00009a  ed9d0a01          VLDR     s0,[sp,#4]            ;212
00009e  eddd0a02          VLDR     s1,[sp,#8]            ;212
0000a2  ed9d1a03          VLDR     s2,[sp,#0xc]          ;212
0000a6  ed8d0a09          VSTR     s0,[sp,#0x24]         ;212
0000aa  edcd0a0a          VSTR     s1,[sp,#0x28]         ;212
0000ae  ed8d1a0b          VSTR     s2,[sp,#0x2c]         ;212
0000b2  a906              ADD      r1,sp,#0x18           ;212
0000b4  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem21GetWithRespectToRobotERKNS_8Embedded6Point3IfEERS4_ ; Anki::Cozmo::VisionSystem::GetWithRespectToRobot(const Anki::Embedded::Point3<float>&, Anki::Embedded::Point3<float>&)
0000b8  ed9d0a06          VLDR     s0,[sp,#0x18]         ;215
0000bc  ed8d0a01          VSTR     s0,[sp,#4]            ;215
0000c0  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9GetIDCardEv ; Anki::Cozmo::HAL::GetIDCard()
0000c4  6800              LDR      r0,[r0,#0]            ;216
0000c6  2802              CMP      r0,#2                 ;216
0000c8  bf08              IT       EQ                    ;216
0000ca  eeb08a00          VMOVEQ.F32 s16,#2.00000000       ;216
0000ce  ed9d0a07          VLDR     s0,[sp,#0x1c]         ;216
0000d2  ee380a00          VADD.F32 s0,s16,s0             ;216
0000d6  ed8d0a02          VSTR     s0,[sp,#8]            ;216
0000da  ed9d0a08          VLDR     s0,[sp,#0x20]         ;217
0000de  ed8d0a03          VSTR     s0,[sp,#0xc]          ;217
                  |L12.226|
0000e2  eddd0a01          VLDR     s1,[sp,#4]            ;221
0000e6  edc40a05          VSTR     s1,[r4,#0x14]         ;221
0000ea  ed9d0a02          VLDR     s0,[sp,#8]            ;222
0000ee  eef50ac0          VCMPE.F32 s1,#0.0               ;236
0000f2  ed840a06          VSTR     s0,[r4,#0x18]         ;222
0000f6  ed9d0a04          VLDR     s0,[sp,#0x10]         ;223
0000fa  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;236
0000fe  ed840a07          VSTR     s0,[r4,#0x1c]         ;223
000102  dd7d              BLE      |L12.512|
000104  eeb50ac0          VCMPE.F32 s0,#0.0               ;236
000108  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;236
00010c  bfb8              IT       LT                    ;236
00010e  eeb10a40          VNEGLT.F32 s0,s0                 ;236
000112  ee100a10          VMOV     r0,s0                 ;236
000116  4550              CMP      r0,r10                ;236
000118  da72              BGE      |L12.512|
00011a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
00011e  6120              STR      r0,[r4,#0x10]         ;242  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749432lastDockingErrorSignalRecvdTime_E
000120  79e0              LDRB     r0,[r4,#7]            ;242  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749413trackingOnly_E
000122  2800              CMP      r0,#0                 ;242
000124  d16d              BNE      |L12.514|
000126  ed9d1a04          VLDR     s2,[sp,#0x10]         ;247
00012a  eddd0a02          VLDR     s1,[sp,#8]            ;247
00012e  ed9d0a01          VLDR     s0,[sp,#4]            ;247
000132  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController14SetRelDockPoseEfff ; Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
000136  f89d0015          LDRB     r0,[sp,#0x15]         ;249
00013a  2800              CMP      r0,#0                 ;249
00013c  d161              BNE      |L12.514|
00013e  eef20a04          VMOV.F32 s1,#10.00000000       ;253
000142  eeb00a04          VMOV.F32 s0,#2.50000000        ;253
000146  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController16SetSpeedAndAccelEff ; Anki::Cozmo::HeadController::SetSpeedAndAccel(float, float)
00014a  ed9d0a03          VLDR     s0,[sp,#0xc]          ;262
00014e  ed9d1a01          VLDR     s2,[sp,#4]            ;262
000152  ee300a68          VSUB.F32 s0,s0,s17             ;262
000156  ee700a4b          VSUB.F32 s1,s0,s22             ;262
00015a  ee800a81          VDIV.F32 s0,s1,s2              ;262
00015e  f7fffffe          BL       _Z9atan_fastf ; atan_fast(float)
000162  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem14GetVerticalFOVEv ; Anki::Cozmo::VisionSystem::GetVerticalFOV()
000166  ed9d0a03          VLDR     s0,[sp,#0xc]          ;266
00016a  ed9d1a01          VLDR     s2,[sp,#4]            ;266
00016e  ee700a68          VSUB.F32 s1,s0,s17             ;266
000172  ee800a81          VDIV.F32 s0,s1,s2              ;266
000176  f7fffffe          BL       _Z9atan_fastf ; atan_fast(float)
00017a  79a0              LDRB     r0,[r4,#6]            ;279  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749417trackCamWithLift_E
00017c  2800              CMP      r0,#0                 ;279
00017e  bf1c              ITT      NE                    ;280
000180  9803              LDRNE    r0,[sp,#0xc]          ;280
000182  42b0              CMPNE    r0,r6                 ;280
000184  bfc4              ITT      GT                    ;281
000186  9801              LDRGT    r0,[sp,#4]            ;281
000188  4287              CMPGT    r7,r0                 ;281
00018a  dd31              BLE      |L12.496|
00018c  aa07              ADD      r2,sp,#0x1c           ;269
00018e  a906              ADD      r1,sp,#0x18           ;269
000190  a808              ADD      r0,sp,#0x20           ;269
000192  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController10GetCamPoseERfS2_S2_ ; Anki::Cozmo::HeadController::GetCamPose(float&, float&, float&)
000196  f7fffffe          BL       _ZN4Anki5Cozmo12VisionSystem14GetVerticalFOVEv ; Anki::Cozmo::VisionSystem::GetVerticalFOV()
00019a  eef00a40          VMOV.F32 s1,s0                 ;269
00019e  ed9d0a07          VLDR     s0,[sp,#0x1c]         ;269
0001a2  ee000acc          VMLS.F32 s0,s1,s24             ;269
0001a6  f7fffffe          BL       __hardfp_sinf
0001aa  eddd0a06          VLDR     s1,[sp,#0x18]         ;269
0001ae  ee400a0a          VMLA.F32 s1,s0,s20             ;269
0001b2  ee300aec          VSUB.F32 s0,s1,s25             ;269
0001b6  ee100a10          VMOV     r0,s0                 ;269
0001ba  4581              CMP      r9,r0                 ;269
0001bc  bfac              ITE      GE                    ;269
0001be  eef30a07          VMOVGE.F32 s1,#23.00000000       ;269
0001c2  eef00a40          VMOVLT.F32 s1,s0                 ;269
0001c6  ee100a90          VMOV     r0,s1                 ;269
0001ca  4558              CMP      r0,r11                ;269
0001cc  bfa8              IT       GE                    ;269
0001ce  eeb00a4d          VMOVGE.F32 s0,s26                ;269
0001d2  da05              BGE      |L12.480|
0001d4  ee100a10          VMOV     r0,s0                 ;269
0001d8  4548              CMP      r0,r9                 ;269
0001da  bfd8              IT       LE                    ;269
0001dc  eeb30a07          VMOVLE.F32 s0,#23.00000000       ;269
                  |L12.480|
0001e0  ee100a10          VMOV     r0,s0                 ;283
0001e4  4540              CMP      r0,r8                 ;283
0001e6  bfc8              IT       GT                    ;284
0001e8  ed9f0a4c          VLDRGT   s0,|L12.796|
0001ec  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
                  |L12.496|
0001f0  9803              LDR      r0,[sp,#0xc]          ;293
0001f2  4286              CMP      r6,r0                 ;293
0001f4  da36              BGE      |L12.612|
0001f6  ed9d0a01          VLDR     s0,[sp,#4]            ;294
0001fa  ee100a10          VMOV     r0,s0                 ;294
0001fe  e001              B        |L12.516|
                  |L12.512|
000200  e01d              B        |L12.574|
                  |L12.514|
000202  e02f              B        |L12.612|
                  |L12.516|
000204  42b8              CMP      r0,r7                 ;294
000206  da2d              BGE      |L12.612|
000208  edd40a03          VLDR     s1,[r4,#0xc]          ;297
00020c  eef31a01          VMOV.F32 s3,#17.00000000       ;297
000210  ee391a60          VSUB.F32 s2,s18,s1             ;297
000214  eec10a81          VDIV.F32 s1,s3,s2              ;297
000218  ee391a40          VSUB.F32 s2,s18,s0             ;300
00021c  ed9f0a40          VLDR     s0,|L12.800|
000220  ee000a81          VMLA.F32 s0,s1,s2              ;300
000224  ee100a10          VMOV     r0,s0                 ;303
000228  4540              CMP      r0,r8                 ;303
00022a  bfa8              IT       GE                    ;303
00022c  ed9f0a3b          VLDRGE   s0,|L12.796|
000230  eef00a00          VMOV.F32 s1,#2.00000000        ;306
000234  ee300a20          VADD.F32 s0,s0,s1              ;306
000238  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
00023c  e012              B        |L12.612|
                  |L12.574|
00023e  79e0              LDRB     r0,[r4,#7]            ;321  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749413trackingOnly_E
000240  b980              CBNZ     r0,|L12.612|
000242  2000              MOVS     r0,#0                 ;322
000244  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs ; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
000248  ed9f0a33          VLDR     s0,|L12.792|
00024c  eef01a40          VMOV.F32 s3,s0                 ;324
000250  eeb01a40          VMOV.F32 s2,s0                 ;324
000254  eef00a40          VMOV.F32 s1,s0                 ;324
000258  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
00025c  7820              LDRB     r0,[r4,#0]            ;325  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974945mode_E
00025e  2800              CMP      r0,#0                 ;325
000260  bf18              IT       NE
000262  7025              STRBNE   r5,[r4,#0]
                  |L12.612|
000264  4668              MOV      r0,sp                 ;181
000266  f7fffffe          BL       _ZN4Anki5Cozmo8Messages12CheckMailboxERNS1_18DockingErrorSignalE ; Anki::Cozmo::Messages::CheckMailbox(Anki::Cozmo::Messages::DockingErrorSignal&)
00026a  2800              CMP      r0,#0                 ;181
00026c  f47faef1          BNE      |L12.82|
                  |L12.624|
;;;327                }
;;;328              }
;;;329              
;;;330            } // while dockErrSignalMailbox has mail
;;;331    
;;;332            
;;;333            Result retVal = RESULT_OK;
;;;334            
;;;335            switch(mode_)
000270  7821              LDRB     r1,[r4,#0]  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974945mode_E
000272  2600              MOVS     r6,#0                 ;333
000274  b149              CBZ      r1,|L12.650|
000276  2901              CMP      r1,#1
000278  d00c              BEQ      |L12.660|
00027a  2902              CMP      r1,#2
00027c  d014              BEQ      |L12.680|
;;;336            {
;;;337              case IDLE:
;;;338                break;
;;;339              case LOOKING_FOR_BLOCK:
;;;340                if (HAL::GetMicroCounter() - lastDockingErrorSignalRecvdTime_ > GIVEUP_DOCKING_TIMEOUT_US) {
;;;341                  ResetDocker();
;;;342    #if(DEBUG_DOCK_CONTROLLER)
;;;343                  PRINT("Too long without block pose (currTime %d, lastErrSignal %d). Giving up.\n", HAL::GetMicroCounter(), lastDockingErrorSignalRecvdTime_);
;;;344    #endif
;;;345                }
;;;346                break;
;;;347              case APPROACH_FOR_DOCK:
;;;348              {
;;;349                // Stop if we haven't received error signal for a while
;;;350                if (!markerlessDocking_ && HAL::GetMicroCounter() - lastDockingErrorSignalRecvdTime_ > STOPPED_TRACKING_TIMEOUT_US) {
;;;351                  PathFollower::ClearPath();
;;;352                  SpeedController::SetUserCommandedDesiredVehicleSpeed(0);
;;;353                  mode_ = LOOKING_FOR_BLOCK;
;;;354    #if(DEBUG_DOCK_CONTROLLER)
;;;355                  PRINT("Too long without block pose (currTime %d, lastErrSignal %d). Looking for block...\n", HAL::GetMicroCounter(), lastDockingErrorSignalRecvdTime_);
;;;356    #endif
;;;357                  break;
;;;358                }
;;;359                
;;;360                // If finished traversing path
;;;361                if (createdValidPath_ && !PathFollower::IsTraversingPath()) {
;;;362    #if(DEBUG_DOCK_CONTROLLER)
;;;363                  PRINT("*** DOCKING SUCCESS ***\n");
;;;364    #endif
;;;365                  ResetDocker();
;;;366                  success_ = true;
;;;367                  break;
;;;368                }
;;;369                
;;;370                break;
;;;371              }
;;;372              default:
;;;373                mode_ = IDLE;
00027e  2000              MOVS     r0,#0
000280  7020              STRB     r0,[r4,#0]
;;;374                success_ = false;
000282  7060              STRB     r0,[r4,#1]
;;;375                PRINT("Reached default case in DockingController "
000284  4827              LDR      r0,|L12.804|
000286  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
                  |L12.650|
;;;376                      "mode switch statement.(1)\n");
;;;377                break;
;;;378            }
;;;379            
;;;380    
;;;381            if(success_ == false)
00028a  7860              LDRB     r0,[r4,#1]  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974948success_E
00028c  2800              CMP      r0,#0
;;;382            {
;;;383              retVal = RESULT_FAIL;
00028e  bf08              IT       EQ
000290  2601              MOVEQ    r6,#1
000292  e023              B        |L12.732|
                  |L12.660|
000294  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000298  6921              LDR      r1,[r4,#0x10]         ;340  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749432lastDockingErrorSignalRecvdTime_E
00029a  1a40              SUBS     r0,r0,r1              ;340
00029c  4922              LDR      r1,|L12.808|
00029e  4288              CMP      r0,r1                 ;340
0002a0  bf88              IT       HI                    ;341
0002a2  f7fffffe          BLHI     _ZN4Anki5Cozmo17DockingController11ResetDockerEv ; Anki::Cozmo::DockingController::ResetDocker()
0002a6  e7f0              B        |L12.650|
                  |L12.680|
0002a8  78a0              LDRB     r0,[r4,#2]            ;350  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749418markerlessDocking_E
0002aa  b968              CBNZ     r0,|L12.712|
0002ac  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
0002b0  6921              LDR      r1,[r4,#0x10]         ;350  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749432lastDockingErrorSignalRecvdTime_E
0002b2  1a40              SUBS     r0,r0,r1              ;350
0002b4  491d              LDR      r1,|L12.812|
0002b6  4288              CMP      r0,r1                 ;350
0002b8  d906              BLS      |L12.712|
0002ba  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower9ClearPathEv ; Anki::Cozmo::PathFollower::ClearPath()
0002be  2000              MOVS     r0,#0                 ;352
0002c0  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs ; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
0002c4  7025              STRB     r5,[r4,#0]            ;353
0002c6  e7e0              B        |L12.650|
                  |L12.712|
0002c8  78e0              LDRB     r0,[r4,#3]            ;361  ; _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749417createdValidPath_E
0002ca  2800              CMP      r0,#0                 ;361
0002cc  d0dd              BEQ      |L12.650|
0002ce  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower16IsTraversingPathEv ; Anki::Cozmo::PathFollower::IsTraversingPath()
0002d2  2800              CMP      r0,#0                 ;361
0002d4  d1d9              BNE      |L12.650|
0002d6  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController11ResetDockerEv ; Anki::Cozmo::DockingController::ResetDocker()
0002da  7065              STRB     r5,[r4,#1]            ;366
                  |L12.732|
;;;384            }
;;;385            
;;;386            return retVal;
;;;387            
;;;388          } // Update()
0002dc  b00d              ADD      sp,sp,#0x34
0002de  4630              MOV      r0,r6                 ;386
0002e0  ecbd8b0c          VPOP     {d8-d13}
0002e4  e8bd8ff0          POP      {r4-r11,pc}
;;;389          
                          ENDP

                  |L12.744|
                          DCD      ||.data||
                  |L12.748|
0002ec  4099999a          DCFS     0x4099999a ; 4.8000001907348633
                  |L12.752|
                          DCD      0x3f96cbe4
                  |L12.756|
0002f4  423ecccd          DCFS     0x423ecccd ; 47.700000762939453
                  |L12.760|
0002f8  3ee66666          DCFS     0x3ee66666 ; 0.44999998807907104
                  |L12.764|
                          DCD      0x42be0000
                  |L12.768|
                          DCD      0x41b80000
                  |L12.772|
000304  42be0000          DCFS     0x42be0000 ; 95
                  |L12.776|
                          DCD      0x42300000
                  |L12.780|
                          DCD      0x428c0000
                  |L12.784|
                          DCD      0x42960000
                  |L12.788|
000314  428c0000          DCFS     0x428c0000 ; 70
                  |L12.792|
000318  00000000          DCFS     0x00000000 ; 0
                  |L12.796|
00031c  42960000          DCFS     0x42960000 ; 75
                  |L12.800|
000320  42680000          DCFS     0x42680000 ; 58
                  |L12.804|
                          DCD      ||.conststring||
                  |L12.808|
                          DCD      0x000f4240
                  |L12.812|
                          DCD      0x0007a120

                          AREA ||i.__sti___21_dockingController_cpp_90697494||, CODE, READONLY, ALIGN=2

                  __sti___21_dockingController_cpp_90697494 PROC
000000  b510              PUSH     {r4,lr}
000002  4816              LDR      r0,|L13.92|
000004  ed9f0a14          VLDR     s0,|L13.88|
000008  ed2d8b02          VPUSH    {d8}
00000c  ed800a08          VSTR     s0,[r0,#0x20]
000010  4813              LDR      r0,|L13.96|
000012  ed9f8a14          VLDR     s16,|L13.100|
000016  ed808a00          VSTR     s16,[r0,#0]
00001a  ed808a01          VSTR     s16,[r0,#4]
00001e  eeb00a48          VMOV.F32 s0,s16
000022  3008              ADDS     r0,r0,#8
000024  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
000028  480f              LDR      r0,|L13.104|
00002a  eeb00a48          VMOV.F32 s0,s16
00002e  ed808a00          VSTR     s16,[r0,#0]
000032  ed808a01          VSTR     s16,[r0,#4]
000036  3008              ADDS     r0,r0,#8
000038  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
00003c  480b              LDR      r0,|L13.108|
00003e  eeb00a48          VMOV.F32 s0,s16
000042  ed808a00          VSTR     s16,[r0,#0]
000046  ed808a01          VSTR     s16,[r0,#4]
00004a  3008              ADDS     r0,r0,#8
00004c  ecbd8b02          VPOP     {d8}
000050  e8bd4010          POP      {r4,lr}
000054  f7ffbffe          B.W      _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
                          ENDP

                  |L13.88|
000058  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L13.92|
                          DCD      ||.data||
                  |L13.96|
                          DCD      ||.bss||
                  |L13.100|
000064  00000000          DCFS     0x00000000 ; 0
                  |L13.104|
                          DCD      ||.bss||+0x10
                  |L13.108|
                          DCD      ||.bss||+0x20

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController6IsBusyEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController6IsBusyEv||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController18DidLastDockSucceedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController18DidLastDockSucceedEv||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController16TrackCamWithLiftEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController16TrackCamWithLiftEb||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController20GetCamFOVLowerHeightEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController20GetCamFOVLowerHeightEv||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController11ResetDockerEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController11ResetDockerEv||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController14SetRelDockPoseEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController14SetRelDockPoseEfff||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController6UpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController6UpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEfRKNS_8Embedded5PointIfEEhfffbb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEfRKNS_8Embedded5PointIfEEhfffbb||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEffffbb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEffffbb||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController21StartDockingToRelPoseEfffb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController21StartDockingToRelPoseEfffb||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController17StartTrackingOnlyERKNS_6Vision10MarkerTypeEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController17StartTrackingOnlyERKNS_6Vision10MarkerTypeEf||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki5Cozmo17DockingController17GetLastMarkerPoseERfS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo17DockingController17GetLastMarkerPoseERfS2_S2_||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i.__sti___21_dockingController_cpp_90697494||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___21_dockingController_cpp_90697494||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749418approachStartPose_E ; Anki::Cozmo::DockingController::<unnamed>::approachStartPose_
                          %        16
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749410blockPose_E ; Anki::Cozmo::DockingController::<unnamed>::blockPose_
                          %        16
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974949dockPose_E ; Anki::Cozmo::DockingController::<unnamed>::dockPose_
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo19NECK_JOINT_POSITIONE ; Anki::Cozmo::NECK_JOINT_POSITION
000000  c1500000          DCFS     0xc1500000 ; -13
000004  00000000          DCFS     0x00000000 ; 0
000008  423ecccd          DCFS     0x423ecccd ; 47.700000762939453

                          AREA ||area_number.31||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.constdata||
                  _ZN4Anki5Cozmo17HEAD_CAM_POSITIONE ; Anki::Cozmo::HEAD_CAM_POSITION
000000  4099999a          DCFS     0x4099999a ; 4.8000001907348633
000004  00000000          DCFS     0x00000000 ; 0
000008  c0c00000          DCFS     0xc0c00000 ; -6

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  52656163          DCB      "Reached default case in DockingController mode switch s"
000004  68656420
000008  64656661
00000c  756c7420
000010  63617365
000014  20696e20
000018  446f636b
00001c  696e6743
000020  6f6e7472
000024  6f6c6c65
000028  72206d6f
00002c  64652073
000030  77697463
000034  682073  
000037  74617465          DCB      "tatement.(1)\n",0
00003b  6d656e74
00003f  2e283129
000043  0a00    

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974945mode_E ; Anki::Cozmo::DockingController::<unnamed>::mode_
000000  00                DCB      0x00
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_906974948success_E ; Anki::Cozmo::DockingController::<unnamed>::success_
000001  00                DCB      0x00
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749418markerlessDocking_E ; Anki::Cozmo::DockingController::<unnamed>::markerlessDocking_
000002  00                DCB      0x00
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749417createdValidPath_E ; Anki::Cozmo::DockingController::<unnamed>::createdValidPath_
000003  00                DCB      0x00
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749425followingBlockNormalPath_E ; Anki::Cozmo::DockingController::<unnamed>::followingBlockNormalPath_
000004  00                DCB      0x00
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749415useManualSpeed_E ; Anki::Cozmo::DockingController::<unnamed>::useManualSpeed_
000005  00                DCB      0x00
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749417trackCamWithLift_E ; Anki::Cozmo::DockingController::<unnamed>::trackCamWithLift_
000006  00                DCB      0x00
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749413trackingOnly_E ; Anki::Cozmo::DockingController::<unnamed>::trackingOnly_
000007  00                DCB      0x00
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749411dockMarker_E ; Anki::Cozmo::DockingController::<unnamed>::dockMarker_
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749416dockOffsetDistX_E ; Anki::Cozmo::DockingController::<unnamed>::dockOffsetDistX_
00000c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749432lastDockingErrorSignalRecvdTime_E ; Anki::Cozmo::DockingController::<unnamed>::lastDockingErrorSignalRecvdTime_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749416lastMarkerDistX_E ; Anki::Cozmo::DockingController::<unnamed>::lastMarkerDistX_
000014  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749416lastMarkerDistY_E ; Anki::Cozmo::DockingController::<unnamed>::lastMarkerDistY_
000018  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo17DockingController45_GLOBAL__N__21_dockingController_cpp_9069749414lastMarkerAng_E ; Anki::Cozmo::DockingController::<unnamed>::lastMarkerAng_
00001c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___21_dockingController_cpp_90697494
