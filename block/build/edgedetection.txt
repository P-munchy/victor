; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\edgedetection.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\edgedetection.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\edgedetection.crf ..\coretech\vision\robot\src\edgeDetection.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded25ComputeGrayvalueThresholdERKNS0_13IntegerCountsEff||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded25ComputeGrayvalueThresholdERKNS0_13IntegerCountsEff PROC ; Anki::Embedded::ComputeGrayvalueThreshold(const Anki::Embedded::IntegerCounts&, float, float)
;;;660    
;;;661        u8 ComputeGrayvalueThreshold(
000000  b570              PUSH     {r4-r6,lr}
;;;662          const IntegerCounts &integerCounts,
;;;663          const f32 blackPercentile,
;;;664          const f32 whitePercentile)
;;;665        {
000002  4605              MOV      r5,r0
000004  ed2d8b02          VPUSH    {d8}
000008  eeb08a60          VMOV.F32 s16,s1
;;;666          const s32 grayvalueBlack = integerCounts.ComputePercentile(blackPercentile);
00000c  f7fffffe          BL       _ZNK4Anki8Embedded13IntegerCounts17ComputePercentileEf ; Anki::Embedded::IntegerCounts::ComputePercentile(float) const
000010  4604              MOV      r4,r0
;;;667          const s32 grayvalueWhite = integerCounts.ComputePercentile(whitePercentile);
000012  eeb00a48          VMOV.F32 s0,s16
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       _ZNK4Anki8Embedded13IntegerCounts17ComputePercentileEf ; Anki::Embedded::IntegerCounts::ComputePercentile(float) const
;;;668    
;;;669          const u8 grayvalueThreshold = static_cast<u8>( (grayvalueBlack + grayvalueWhite) / 2 );
00001c  4420              ADD      r0,r0,r4
00001e  eb0070d0          ADD      r0,r0,r0,LSR #31
;;;670    
;;;671          return grayvalueThreshold;
;;;672        }
000022  ecbd8b02          VPOP     {d8}
000026  f3c00047          UBFX     r0,r0,#1,#8           ;669
00002a  bd70              POP      {r4-r6,pc}
;;;673    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded25ComputeGrayvalueThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiffNS0_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded25ComputeGrayvalueThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiffNS0_11MemoryStackE PROC ; Anki::Embedded::ComputeGrayvalueThreshold(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, int, float, float, Anki::Embedded::MemoryStack)
;;;673    
;;;674        u8 ComputeGrayvalueThreshold(
000000  b530              PUSH     {r4,r5,lr}
;;;675          const Array<u8> &image,
;;;676          const Rectangle<s32> &imageRegionOfInterest,
;;;677          const s32 yIncrement,
;;;678          const s32 xIncrement,
;;;679          const f32 blackPercentile,
;;;680          const f32 whitePercentile,
;;;681          MemoryStack scratch)
;;;682        {
000002  468c              MOV      r12,r1
000004  ed2d8b02          VPUSH    {d8}
000008  b091              SUB      sp,sp,#0x44
00000a  eeb08a60          VMOV.F32 s16,s1
00000e  9916              LDR      r1,[sp,#0x58]
000010  eef08a40          VMOV.F32 s17,s0
000014  e9cd3100          STRD     r3,r1,[sp,#0]
;;;683          IntegerCounts integerCounts(image, imageRegionOfInterest, yIncrement, xIncrement, scratch);
000018  4613              MOV      r3,r2
00001a  4601              MOV      r1,r0
00001c  4662              MOV      r2,r12
00001e  a802              ADD      r0,sp,#8
000020  f7fffffe          BL       _ZN4Anki8Embedded13IntegerCountsC1ERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiRNS0_11MemoryStackE ; Anki::Embedded::IntegerCounts::IntegerCounts(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, int, Anki::Embedded::MemoryStack&)
;;;684    
;;;685          return ComputeGrayvalueThreshold(integerCounts, blackPercentile, whitePercentile);
000024  ad02              ADD      r5,sp,#8
000026  eeb00a68          VMOV.F32 s0,s17
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       _ZNK4Anki8Embedded13IntegerCounts17ComputePercentileEf ; Anki::Embedded::IntegerCounts::ComputePercentile(float) const
000030  4604              MOV      r4,r0
000032  eeb00a48          VMOV.F32 s0,s16
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       _ZNK4Anki8Embedded13IntegerCounts17ComputePercentileEf ; Anki::Embedded::IntegerCounts::ComputePercentile(float) const
;;;686        }
00003c  b011              ADD      sp,sp,#0x44
00003e  4420              ADD      r0,r0,r4
000040  eb0070d0          ADD      r0,r0,r0,LSR #31
000044  ecbd8b02          VPOP     {d8}
000048  f3c00047          UBFX     r0,r0,#1,#8
00004c  bd30              POP      {r4,r5,pc}
;;;687      } // namespace Embedded
                          ENDP


                          AREA ||i._ZN4Anki8Embedded37DetectBlurredEdges_GrayvalueThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded37DetectBlurredEdges_GrayvalueThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE PROC ; Anki::Embedded::DetectBlurredEdges_GrayvalueThreshold(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, unsigned char, int, int, Anki::Embedded::EdgeLists&)
;;;43     
;;;44         Result DetectBlurredEdges_GrayvalueThreshold(const Array<u8> &image, const Rectangle<s32> &imageRegionOfInterest, const u8 grayvalueThreshold, const s32 minComponentWidth, const s32 everyNLines, EdgeLists &edgeLists)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;45         {
000004  b083              SUB      sp,sp,#0xc
000006  4682              MOV      r10,r0
000008  e9dd540c          LDRD     r5,r4,[sp,#0x30]
;;;46           AnkiConditionalErrorAndReturnValue(AreValid(image, edgeLists.xDecreasing, edgeLists.xIncreasing, edgeLists.yDecreasing, edgeLists.yIncreasing),
00000c  f104009c          ADD      r0,r4,#0x9c
000010  461f              MOV      r7,r3                 ;45
000012  4690              MOV      r8,r2                 ;45
000014  4689              MOV      r9,r1                 ;45
000016  9000              STR      r0,[sp,#0]
000018  f1040368          ADD      r3,r4,#0x68
00001c  f1040234          ADD      r2,r4,#0x34
000020  4621              MOV      r1,r4
000022  4650              MOV      r0,r10
000024  f7fffffe          BL       _ZN4Anki8Embedded8AreValidINS0_5ArrayIhEENS0_15FixedLengthListINS0_5PointIsEEEES7_S7_S7_EEbRKT_RKT0_RKT1_RKT2_RKT3_ ; Anki::Embedded::AreValid<Anki::Embedded::Array<unsigned char>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>>(const T1&, const T2&, const T3&, const T4&, const T5&)
000028  4e43              LDR      r6,|L3.312|
00002a  2800              CMP      r0,#0
00002c  d00f              BEQ      |L3.78|
;;;47             RESULT_FAIL_INVALID_OBJECT, "DetectBlurredEdges", "Invalid objects");
;;;48     
;;;49           AnkiConditionalErrorAndReturnValue(minComponentWidth > 0,
00002e  2f00              CMP      r7,#0
000030  dc1b              BGT      |L3.106|
000032  2031              MOVS     r0,#0x31
000034  e9cd6000          STRD     r6,r0,[sp,#0]
000038  a340              ADR      r3,|L3.316|
00003a  a24c              ADR      r2,|L3.364|
00003c  a153              ADR      r1,|L3.396|
00003e  2005              MOVS     r0,#5
000040  f7fffffe          BL       _Anki_Log
;;;50             RESULT_FAIL_INVALID_SIZE, "DetectBlurredEdges", "minComponentWidth is too small");
;;;51     
;;;52           AnkiConditionalErrorAndReturnValue(edgeLists.xDecreasing.get_maximumSize() == edgeLists.xIncreasing.get_maximumSize() &&
;;;53             edgeLists.xDecreasing.get_maximumSize() == edgeLists.yDecreasing.get_maximumSize() &&
;;;54             edgeLists.xDecreasing.get_maximumSize() == edgeLists.yIncreasing.get_maximumSize(),
;;;55             RESULT_FAIL_INVALID_SIZE, "DetectBlurredEdges", "All edgeLists must have the same maximum size");
;;;56     
;;;57           edgeLists.xDecreasing.Clear();
;;;58           edgeLists.xIncreasing.Clear();
;;;59           edgeLists.yDecreasing.Clear();
;;;60           edgeLists.yIncreasing.Clear();
;;;61     
;;;62           const s32 imageHeight = image.get_size(0);
;;;63           const s32 imageWidth = image.get_size(1);
;;;64           //const s32 imageStride = image.get_stride();
;;;65     
;;;66           edgeLists.imageHeight = imageHeight;
;;;67           edgeLists.imageWidth = imageWidth;
;;;68     
;;;69           // TODO: won't detect an edge on the last horizontal (for x search) or vertical (for y search)
;;;70           //       pixel. Is there a fast way to do this?
;;;71     
;;;72           DetectBlurredEdges_GrayvalueThreshold_Horizontal(image, imageRegionOfInterest, grayvalueThreshold, minComponentWidth, everyNLines, edgeLists);
;;;73           DetectBlurredEdges_GrayvalueThreshold_Vertical(image, imageRegionOfInterest, grayvalueThreshold, minComponentWidth, everyNLines, edgeLists);
;;;74     
;;;75           return RESULT_OK;
;;;76         } // Result DetectBlurredEdges_GrayvalueThreshold()
000044  b003              ADD      sp,sp,#0xc
000046  f04f60a0          MOV      r0,#0x5000000         ;49
00004a  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.78|
00004e  202e              MOVS     r0,#0x2e              ;46
000050  e9cd6000          STRD     r6,r0,[sp,#0]         ;46
000054  a339              ADR      r3,|L3.316|
000056  a252              ADR      r2,|L3.416|
000058  a14c              ADR      r1,|L3.396|
00005a  2005              MOVS     r0,#5                 ;46
00005c  f7fffffe          BL       _Anki_Log
000060  b003              ADD      sp,sp,#0xc
000062  f04f6080          MOV      r0,#0x4000000         ;46
000066  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.106|
00006a  2101              MOVS     r1,#1
00006c  f1040018          ADD      r0,r4,#0x18
000070  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
000074  4683              MOV      r11,r0
000076  2101              MOVS     r1,#1
000078  f104004c          ADD      r0,r4,#0x4c
00007c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
000080  4583              CMP      r11,r0                ;52
000082  d119              BNE      |L3.184|
000084  2101              MOVS     r1,#1                 ;52
000086  f1040018          ADD      r0,r4,#0x18           ;52
00008a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
00008e  4683              MOV      r11,r0                ;52
000090  2101              MOVS     r1,#1                 ;52
000092  f1040080          ADD      r0,r4,#0x80           ;52
000096  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
00009a  4583              CMP      r11,r0                ;52
00009c  d10c              BNE      |L3.184|
00009e  2101              MOVS     r1,#1                 ;52
0000a0  f1040018          ADD      r0,r4,#0x18           ;52
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
0000a8  4683              MOV      r11,r0                ;52
0000aa  2101              MOVS     r1,#1                 ;52
0000ac  f10400b4          ADD      r0,r4,#0xb4           ;52
0000b0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
0000b4  4583              CMP      r11,r0                ;52
0000b6  d00d              BEQ      |L3.212|
                  |L3.184|
0000b8  2034              MOVS     r0,#0x34              ;52
0000ba  e9cd6000          STRD     r6,r0,[sp,#0]         ;52
0000be  a31f              ADR      r3,|L3.316|
0000c0  a23b              ADR      r2,|L3.432|
0000c2  a132              ADR      r1,|L3.396|
0000c4  2005              MOVS     r0,#5                 ;52
0000c6  f7fffffe          BL       _Anki_Log
0000ca  b003              ADD      sp,sp,#0xc
0000cc  f04f60a0          MOV      r0,#0x5000000         ;52
0000d0  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.212|
0000d4  2100              MOVS     r1,#0
0000d6  4620              MOV      r0,r4
0000d8  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
0000dc  f1040034          ADD      r0,r4,#0x34           ;58
0000e0  2100              MOVS     r1,#0                 ;58
0000e2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
0000e6  f1040068          ADD      r0,r4,#0x68           ;59
0000ea  2100              MOVS     r1,#0                 ;59
0000ec  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
0000f0  f104009c          ADD      r0,r4,#0x9c           ;60
0000f4  2100              MOVS     r1,#0                 ;60
0000f6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
0000fa  2100              MOVS     r1,#0                 ;62
0000fc  4650              MOV      r0,r10                ;62
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000102  4606              MOV      r6,r0                 ;62
000104  2101              MOVS     r1,#1                 ;63
000106  4650              MOV      r0,r10                ;63
000108  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00010c  e9c46034          STRD     r6,r0,[r4,#0xd0]      ;63
000110  e9cd5400          STRD     r5,r4,[sp,#0]         ;72
000114  463b              MOV      r3,r7                 ;72
000116  4642              MOV      r2,r8                 ;72
000118  4649              MOV      r1,r9                 ;72
00011a  4650              MOV      r0,r10                ;72
00011c  f7fffffe          BL       _ZN4Anki8Embedded48DetectBlurredEdges_GrayvalueThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE ; Anki::Embedded::DetectBlurredEdges_GrayvalueThreshold_Horizontal(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, unsigned char, int, int, Anki::Embedded::EdgeLists&)
000120  e9cd5400          STRD     r5,r4,[sp,#0]         ;73
000124  463b              MOV      r3,r7                 ;73
000126  4642              MOV      r2,r8                 ;73
000128  4649              MOV      r1,r9                 ;73
00012a  4650              MOV      r0,r10                ;73
00012c  f7fffffe          BL       _ZN4Anki8Embedded46DetectBlurredEdges_GrayvalueThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE ; Anki::Embedded::DetectBlurredEdges_GrayvalueThreshold_Vertical(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, unsigned char, int, int, Anki::Embedded::EdgeLists&)
000130  b003              ADD      sp,sp,#0xc
000132  2000              MOVS     r0,#0                 ;75
000134  e8bd8ff0          POP      {r4-r11,pc}
;;;77     
                          ENDP

                  |L3.312|
                          DCD      ||.constdata||
                  |L3.316|
00013c  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\edgeDetection.cpp",0
000140  6f726574
000144  6563685c
000148  76697369
00014c  6f6e5c72
000150  6f626f74
000154  5c737263
000158  5c656467
00015c  65446574
000160  65637469
000164  6f6e2e63
000168  707000  
00016b  00                DCB      0
                  |L3.364|
00016c  6d696e43          DCB      "minComponentWidth is too small",0
000170  6f6d706f
000174  6e656e74
000178  57696474
00017c  68206973
000180  20746f6f
000184  20736d61
000188  6c6c00  
00018b  00                DCB      0
                  |L3.396|
00018c  44657465          DCB      "DetectBlurredEdges",0
000190  6374426c
000194  75727265
000198  64456467
00019c  657300  
00019f  00                DCB      0
                  |L3.416|
0001a0  496e7661          DCB      "Invalid objects",0
0001a4  6c696420
0001a8  6f626a65
0001ac  63747300
                  |L3.432|
0001b0  416c6c20          DCB      "All edgeLists must have the same maximum size",0
0001b4  65646765
0001b8  4c697374
0001bc  73206d75
0001c0  73742068
0001c4  61766520
0001c8  74686520
0001cc  73616d65
0001d0  206d6178
0001d4  696d756d
0001d8  2073697a
0001dc  6500    
0001de  00                DCB      0
0001df  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded37DetectBlurredEdges_GrayvalueThresholdERKNS0_5ArrayIhEEhiiRNS0_9EdgeListsE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded37DetectBlurredEdges_GrayvalueThresholdERKNS0_5ArrayIhEEhiiRNS0_9EdgeListsE PROC ; Anki::Embedded::DetectBlurredEdges_GrayvalueThreshold(const Anki::Embedded::Array<unsigned char>&, unsigned char, int, int, Anki::Embedded::EdgeLists&)
;;;36     
;;;37         Result DetectBlurredEdges_GrayvalueThreshold(const Array<u8> &image, const u8 grayvalueThreshold, const s32 minComponentWidth, const s32 everyNLines, EdgeLists &edgeLists)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;38         {
000004  b087              SUB      sp,sp,#0x1c
000006  468a              MOV      r10,r1
000008  461d              MOV      r5,r3
00000a  4691              MOV      r9,r2
00000c  4683              MOV      r11,r0
;;;39           Rectangle<s32> imageRegionOfInterest(0, image.get_size(1), 0, image.get_size(0));
00000e  2700              MOVS     r7,#0
000010  2101              MOVS     r1,#1
000012  9e10              LDR      r6,[sp,#0x40]
000014  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000018  4680              MOV      r8,r0
00001a  2400              MOVS     r4,#0
00001c  4621              MOV      r1,r4
00001e  4658              MOV      r0,r11
000020  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;40     
;;;41           return DetectBlurredEdges_GrayvalueThreshold(image, imageRegionOfInterest, grayvalueThreshold, minComponentWidth, everyNLines, edgeLists);
000024  e9cd4004          STRD     r4,r0,[sp,#0x10]
000028  e88d01e0          STM      sp,{r5-r8}
00002c  464b              MOV      r3,r9
00002e  4652              MOV      r2,r10
000030  a902              ADD      r1,sp,#8
000032  4658              MOV      r0,r11
000034  f7fffffe          BL       _ZN4Anki8Embedded37DetectBlurredEdges_GrayvalueThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE ; Anki::Embedded::DetectBlurredEdges_GrayvalueThreshold(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, unsigned char, int, int, Anki::Embedded::EdgeLists&)
;;;42         }
000038  b007              ADD      sp,sp,#0x1c
00003a  e8bd8ff0          POP      {r4-r11,pc}
;;;43     
                          ENDP


                          AREA ||i._ZN4Anki8Embedded38DetectBlurredEdges_DerivativeThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded38DetectBlurredEdges_DerivativeThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE PROC ; Anki::Embedded::DetectBlurredEdges_DerivativeThreshold(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, int, int, Anki::Embedded::EdgeLists&)
;;;84     
;;;85         Result DetectBlurredEdges_DerivativeThreshold(const Array<u8> &image, const Rectangle<s32> &imageRegionOfInterest, const s32 combHalfWidth, const s32 combResponseThreshold, const s32 everyNLines, EdgeLists &edgeLists)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;86         {
000004  b083              SUB      sp,sp,#0xc
000006  4682              MOV      r10,r0
000008  e9dd540c          LDRD     r5,r4,[sp,#0x30]
;;;87           AnkiConditionalErrorAndReturnValue(AreValid(image, edgeLists.xDecreasing, edgeLists.xIncreasing, edgeLists.yDecreasing, edgeLists.yIncreasing),
00000c  f104009c          ADD      r0,r4,#0x9c
000010  461f              MOV      r7,r3                 ;86
000012  4690              MOV      r8,r2                 ;86
000014  4689              MOV      r9,r1                 ;86
000016  9000              STR      r0,[sp,#0]
000018  f1040368          ADD      r3,r4,#0x68
00001c  f1040234          ADD      r2,r4,#0x34
000020  4621              MOV      r1,r4
000022  4650              MOV      r0,r10
000024  f7fffffe          BL       _ZN4Anki8Embedded8AreValidINS0_5ArrayIhEENS0_15FixedLengthListINS0_5PointIsEEEES7_S7_S7_EEbRKT_RKT0_RKT1_RKT2_RKT3_ ; Anki::Embedded::AreValid<Anki::Embedded::Array<unsigned char>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>>(const T1&, const T2&, const T3&, const T4&, const T5&)
000028  4e45              LDR      r6,|L5.320|
00002a  2800              CMP      r0,#0
00002c  d012              BEQ      |L5.84|
;;;88             RESULT_FAIL_INVALID_OBJECT, "DetectBlurredEdges", "Invalid objects");
;;;89     
;;;90           AnkiConditionalErrorAndReturnValue(combHalfWidth > 0 && combResponseThreshold >= 0,
00002e  f1b80f00          CMP      r8,#0
000032  dd01              BLE      |L5.56|
000034  2f00              CMP      r7,#0
000036  da1b              BGE      |L5.112|
                  |L5.56|
000038  205a              MOVS     r0,#0x5a
00003a  e9cd6000          STRD     r6,r0,[sp,#0]
00003e  a341              ADR      r3,|L5.324|
000040  a24c              ADR      r2,|L5.372|
000042  a15a              ADR      r1,|L5.428|
000044  2005              MOVS     r0,#5
000046  f7fffffe          BL       _Anki_Log
;;;91             RESULT_FAIL_INVALID_SIZE, "DetectBlurredEdges", "combHalfWidth or combResponseThreshold are too small");
;;;92     
;;;93           AnkiConditionalErrorAndReturnValue(edgeLists.xDecreasing.get_maximumSize() == edgeLists.xIncreasing.get_maximumSize() &&
;;;94             edgeLists.xDecreasing.get_maximumSize() == edgeLists.yDecreasing.get_maximumSize() &&
;;;95             edgeLists.xDecreasing.get_maximumSize() == edgeLists.yIncreasing.get_maximumSize(),
;;;96             RESULT_FAIL_INVALID_SIZE, "DetectBlurredEdges", "All edgeLists must have the same maximum size");
;;;97     
;;;98           edgeLists.xDecreasing.Clear();
;;;99           edgeLists.xIncreasing.Clear();
;;;100          edgeLists.yDecreasing.Clear();
;;;101          edgeLists.yIncreasing.Clear();
;;;102    
;;;103          const s32 imageHeight = image.get_size(0);
;;;104          const s32 imageWidth = image.get_size(1);
;;;105          //const s32 imageStride = image.get_stride();
;;;106    
;;;107          edgeLists.imageHeight = imageHeight;
;;;108          edgeLists.imageWidth = imageWidth;
;;;109    
;;;110          DetectBlurredEdges_DerivativeThreshold_Horizontal(image, imageRegionOfInterest, combHalfWidth, combResponseThreshold, everyNLines, edgeLists);
;;;111          DetectBlurredEdges_DerivativeThreshold_Vertical(image, imageRegionOfInterest, combHalfWidth, combResponseThreshold, everyNLines, edgeLists);
;;;112    
;;;113          return RESULT_OK;
;;;114        } // DetectBlurredEdges_DerivativeThreshold()
00004a  b003              ADD      sp,sp,#0xc
00004c  f04f60a0          MOV      r0,#0x5000000         ;90
000050  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.84|
000054  2057              MOVS     r0,#0x57              ;87
000056  e9cd6000          STRD     r6,r0,[sp,#0]         ;87
00005a  a33a              ADR      r3,|L5.324|
00005c  a258              ADR      r2,|L5.448|
00005e  a153              ADR      r1,|L5.428|
000060  2005              MOVS     r0,#5                 ;87
000062  f7fffffe          BL       _Anki_Log
000066  b003              ADD      sp,sp,#0xc
000068  f04f6080          MOV      r0,#0x4000000         ;87
00006c  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.112|
000070  2101              MOVS     r1,#1
000072  f1040018          ADD      r0,r4,#0x18
000076  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
00007a  4683              MOV      r11,r0
00007c  2101              MOVS     r1,#1
00007e  f104004c          ADD      r0,r4,#0x4c
000082  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
000086  4583              CMP      r11,r0                ;93
000088  d119              BNE      |L5.190|
00008a  2101              MOVS     r1,#1                 ;93
00008c  f1040018          ADD      r0,r4,#0x18           ;93
000090  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
000094  4683              MOV      r11,r0                ;93
000096  2101              MOVS     r1,#1                 ;93
000098  f1040080          ADD      r0,r4,#0x80           ;93
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
0000a0  4583              CMP      r11,r0                ;93
0000a2  d10c              BNE      |L5.190|
0000a4  2101              MOVS     r1,#1                 ;93
0000a6  f1040018          ADD      r0,r4,#0x18           ;93
0000aa  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
0000ae  4683              MOV      r11,r0                ;93
0000b0  2101              MOVS     r1,#1                 ;93
0000b2  f10400b4          ADD      r0,r4,#0xb4           ;93
0000b6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
0000ba  4583              CMP      r11,r0                ;93
0000bc  d00d              BEQ      |L5.218|
                  |L5.190|
0000be  205d              MOVS     r0,#0x5d              ;93
0000c0  e9cd6000          STRD     r6,r0,[sp,#0]         ;93
0000c4  a31f              ADR      r3,|L5.324|
0000c6  a242              ADR      r2,|L5.464|
0000c8  a138              ADR      r1,|L5.428|
0000ca  2005              MOVS     r0,#5                 ;93
0000cc  f7fffffe          BL       _Anki_Log
0000d0  b003              ADD      sp,sp,#0xc
0000d2  f04f60a0          MOV      r0,#0x5000000         ;93
0000d6  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.218|
0000da  2100              MOVS     r1,#0
0000dc  4620              MOV      r0,r4
0000de  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
0000e2  f1040034          ADD      r0,r4,#0x34           ;99
0000e6  2100              MOVS     r1,#0                 ;99
0000e8  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
0000ec  f1040068          ADD      r0,r4,#0x68           ;100
0000f0  2100              MOVS     r1,#0                 ;100
0000f2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
0000f6  f104009c          ADD      r0,r4,#0x9c           ;101
0000fa  2100              MOVS     r1,#0                 ;101
0000fc  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
000100  2100              MOVS     r1,#0                 ;103
000102  4650              MOV      r0,r10                ;103
000104  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000108  4606              MOV      r6,r0                 ;103
00010a  2101              MOVS     r1,#1                 ;104
00010c  4650              MOV      r0,r10                ;104
00010e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000112  e9c46034          STRD     r6,r0,[r4,#0xd0]      ;104
000116  e9cd5400          STRD     r5,r4,[sp,#0]         ;110
00011a  463b              MOV      r3,r7                 ;110
00011c  4642              MOV      r2,r8                 ;110
00011e  4649              MOV      r1,r9                 ;110
000120  4650              MOV      r0,r10                ;110
000122  f7fffffe          BL       _ZN4Anki8Embedded49DetectBlurredEdges_DerivativeThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE ; Anki::Embedded::DetectBlurredEdges_DerivativeThreshold_Horizontal(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, int, int, Anki::Embedded::EdgeLists&)
000126  e9cd5400          STRD     r5,r4,[sp,#0]         ;111
00012a  463b              MOV      r3,r7                 ;111
00012c  4642              MOV      r2,r8                 ;111
00012e  4649              MOV      r1,r9                 ;111
000130  4650              MOV      r0,r10                ;111
000132  f7fffffe          BL       _ZN4Anki8Embedded47DetectBlurredEdges_DerivativeThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE ; Anki::Embedded::DetectBlurredEdges_DerivativeThreshold_Vertical(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, int, int, Anki::Embedded::EdgeLists&)
000136  b003              ADD      sp,sp,#0xc
000138  2000              MOVS     r0,#0                 ;113
00013a  e8bd8ff0          POP      {r4-r11,pc}
;;;115    
                          ENDP

00013e  0000              DCW      0x0000
                  |L5.320|
                          DCD      ||.constdata||+0xe4
                  |L5.324|
000144  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\edgeDetection.cpp",0
000148  6f726574
00014c  6563685c
000150  76697369
000154  6f6e5c72
000158  6f626f74
00015c  5c737263
000160  5c656467
000164  65446574
000168  65637469
00016c  6f6e2e63
000170  707000  
000173  00                DCB      0
                  |L5.372|
000174  636f6d62          DCB      "combHalfWidth or combResponseThreshold are too small",0
000178  48616c66
00017c  57696474
000180  68206f72
000184  20636f6d
000188  62526573
00018c  706f6e73
000190  65546872
000194  6573686f
000198  6c642061
00019c  72652074
0001a0  6f6f2073
0001a4  6d616c6c
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L5.428|
0001ac  44657465          DCB      "DetectBlurredEdges",0
0001b0  6374426c
0001b4  75727265
0001b8  64456467
0001bc  657300  
0001bf  00                DCB      0
                  |L5.448|
0001c0  496e7661          DCB      "Invalid objects",0
0001c4  6c696420
0001c8  6f626a65
0001cc  63747300
                  |L5.464|
0001d0  416c6c20          DCB      "All edgeLists must have the same maximum size",0
0001d4  65646765
0001d8  4c697374
0001dc  73206d75
0001e0  73742068
0001e4  61766520
0001e8  74686520
0001ec  73616d65
0001f0  206d6178
0001f4  696d756d
0001f8  2073697a
0001fc  6500    
0001fe  00                DCB      0
0001ff  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded38DetectBlurredEdges_DerivativeThresholdERKNS0_5ArrayIhEEiiiRNS0_9EdgeListsE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded38DetectBlurredEdges_DerivativeThresholdERKNS0_5ArrayIhEEiiiRNS0_9EdgeListsE PROC ; Anki::Embedded::DetectBlurredEdges_DerivativeThreshold(const Anki::Embedded::Array<unsigned char>&, int, int, int, Anki::Embedded::EdgeLists&)
;;;77     
;;;78         Result DetectBlurredEdges_DerivativeThreshold(const Array<u8> &image, const s32 combHalfWidth, const s32 combResponseThreshold, const s32 everyNLines, EdgeLists &edgeLists)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;79         {
000004  b087              SUB      sp,sp,#0x1c
000006  468a              MOV      r10,r1
000008  461d              MOV      r5,r3
00000a  4691              MOV      r9,r2
00000c  4683              MOV      r11,r0
;;;80           Rectangle<s32> imageRegionOfInterest(0, image.get_size(1), 0, image.get_size(0));
00000e  2700              MOVS     r7,#0
000010  2101              MOVS     r1,#1
000012  9e10              LDR      r6,[sp,#0x40]
000014  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000018  4680              MOV      r8,r0
00001a  2400              MOVS     r4,#0
00001c  4621              MOV      r1,r4
00001e  4658              MOV      r0,r11
000020  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;81     
;;;82           return DetectBlurredEdges_DerivativeThreshold(image, imageRegionOfInterest, combHalfWidth, combResponseThreshold, everyNLines, edgeLists);
000024  e9cd4004          STRD     r4,r0,[sp,#0x10]
000028  e88d01e0          STM      sp,{r5-r8}
00002c  464b              MOV      r3,r9
00002e  4652              MOV      r2,r10
000030  a902              ADD      r1,sp,#8
000032  4658              MOV      r0,r11
000034  f7fffffe          BL       _ZN4Anki8Embedded38DetectBlurredEdges_DerivativeThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE ; Anki::Embedded::DetectBlurredEdges_DerivativeThreshold(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, int, int, Anki::Embedded::EdgeLists&)
;;;83         } // DetectBlurredEdges_DerivativeThreshold()
000038  b007              ADD      sp,sp,#0x1c
00003a  e8bd8ff0          POP      {r4-r11,pc}
;;;84     
                          ENDP


                          AREA ||i._ZN4Anki8Embedded46DetectBlurredEdges_GrayvalueThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded46DetectBlurredEdges_GrayvalueThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE PROC ; Anki::Embedded::DetectBlurredEdges_GrayvalueThreshold_Vertical(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, unsigned char, int, int, Anki::Embedded::EdgeLists&)
                  ||__tagsym$$noinline||
;;;237    
;;;238        NO_INLINE static void DetectBlurredEdges_GrayvalueThreshold_Vertical(const Array<u8> &image, const Rectangle<s32> &imageRegionOfInterest, const u8 grayvalueThreshold, const s32 minComponentWidth, const s32 everyNLines, EdgeLists &edgeLists)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;239        {
000004  b083              SUB      sp,sp,#0xc
000006  460e              MOV      r6,r1
000008  9803              LDR      r0,[sp,#0xc]
00000a  4615              MOV      r5,r2
00000c  2101              MOVS     r1,#1
00000e  6884              LDR      r4,[r0,#8]
000010  9811              LDR      r0,[sp,#0x44]
000012  f8d08074          LDR      r8,[r0,#0x74]
000016  f8d070a8          LDR      r7,[r0,#0xa8]
00001a  3080              ADDS     r0,r0,#0x80
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
;;;240          //
;;;241          //  Detect vertical positive and negative transitions
;;;242          //
;;;243    
;;;244          const s32 imageStride = image.get_stride();
;;;245    
;;;246          s32 yDecreasingSize = edgeLists.yDecreasing.get_size();
;;;247          s32 yIncreasingSize = edgeLists.yIncreasing.get_size();
;;;248          s32 yMaxSizeM1 = edgeLists.yDecreasing.get_maximumSize() - 1;
000020  f1a00a01          SUB      r10,r0,#1
000024  9811              LDR      r0,[sp,#0x44]
000026  f8d00098          LDR      r0,[r0,#0x98]
00002a  9001              STR      r0,[sp,#4]
00002c  9811              LDR      r0,[sp,#0x44]
00002e  f8d000cc          LDR      r0,[r0,#0xcc]
;;;249          u32 * restrict pYDecreasing = reinterpret_cast<u32 *>(edgeLists.yDecreasing.Pointer(0));
;;;250          u32 * restrict pYIncreasing = reinterpret_cast<u32 *>(edgeLists.yIncreasing.Pointer(0));
000032  9000              STR      r0,[sp,#0]
000034  e9d62000          LDRD     r2,r0,[r6,#0]
;;;251    
;;;252          for(s32 x=imageRegionOfInterest.left; x<imageRegionOfInterest.right; x+=everyNLines) {
000038  4290              CMP      r0,r2
00003a  dd7a              BLE      |L7.306|
                  |L7.60|
00003c  9903              LDR      r1,[sp,#0xc]
00003e  68b0              LDR      r0,[r6,#8]
000040  690b              LDR      r3,[r1,#0x10]
000042  6889              LDR      r1,[r1,#8]
000044  fb003101          MLA      r1,r0,r1,r3
000048  188b              ADDS     r3,r1,r2
;;;253            const u8 * restrict pImage = image.Pointer(imageRegionOfInterest.top, x);
;;;254    
;;;255            bool onWhite;
;;;256    
;;;257            // Is the first pixel white or black? (probably noisy, but that's okay)
;;;258            if(pImage[0] > grayvalueThreshold)
00004a  7819              LDRB     r1,[r3,#0]
00004c  42a9              CMP      r1,r5
;;;259              onWhite = true;
00004e  bf8c              ITE      HI
000050  f04f0c01          MOVHI    r12,#1
;;;260            else
;;;261              onWhite = false;
000054  f04f0c00          MOVLS    r12,#0
;;;262    
;;;263            s32 lastSwitchY = imageRegionOfInterest.top;
000058  4601              MOV      r1,r0
;;;264            s32 y = imageRegionOfInterest.top;
;;;265            while(y < imageRegionOfInterest.bottom) {
00005a  f8d6900c          LDR      r9,[r6,#0xc]
00005e  4581              CMP      r9,r0
000060  dd62              BLE      |L7.296|
                  |L7.98|
;;;266              if(onWhite) {
;;;267                // If on white
;;;268    
;;;269                while(y < (imageRegionOfInterest.bottom-1)) {
;;;270                  const u8 pixel0 = pImage[0];
;;;271                  const u8 pixel1 = pImage[imageStride];
;;;272    
;;;273                  if(pixel0 <= grayvalueThreshold)
;;;274                    break;
;;;275    
;;;276                  if(pixel1 <= grayvalueThreshold)
;;;277                    break;
;;;278    
;;;279                  y += 2;
;;;280                  pImage += 2*imageStride;
;;;281                }
;;;282    
;;;283                while( (y < imageRegionOfInterest.bottom) && (pImage[0] > grayvalueThreshold) ){
;;;284                  y++;
;;;285                  pImage += imageStride;
;;;286                }
;;;287    
;;;288                onWhite = false;
;;;289    
;;;290                if(y < (imageRegionOfInterest.bottom-1)) {
;;;291                  const s32 componentWidth = y - lastSwitchY;
;;;292    
;;;293                  if(componentWidth >= minComponentWidth) {
;;;294                    // If there's room, add the point to the list
;;;295                    if(yDecreasingSize < yMaxSizeM1) {
;;;296                      const u32 newPoint = (y << 16) + x;
;;;297                      pYDecreasing[yDecreasingSize] = newPoint;
;;;298    
;;;299                      yDecreasingSize++;
;;;300                    }
;;;301                  }
;;;302    
;;;303                  lastSwitchY = y;
;;;304                } // if(y < (imageRegionOfInterest.bottom-1)
;;;305              } else {
;;;306                // If on black
;;;307    
;;;308                while(y < (imageRegionOfInterest.bottom-1)) {
000062  46ce              MOV      lr,r9
000064  f1bc0f00          CMP      r12,#0                ;266
000068  f1a90901          SUB      r9,r9,#1
00006c  d02b              BEQ      |L7.198|
00006e  4581              CMP      r9,r0                 ;269
000070  dd0c              BLE      |L7.140|
                  |L7.114|
000072  f893b000          LDRB     r11,[r3,#0]           ;270
000076  f813c004          LDRB     r12,[r3,r4]           ;271
00007a  45ab              CMP      r11,r5                ;273
00007c  bf88              IT       HI                    ;276
00007e  45ac              CMPHI    r12,r5                ;276
000080  d904              BLS      |L7.140|
000082  1c80              ADDS     r0,r0,#2              ;279
000084  eb030344          ADD      r3,r3,r4,LSL #1       ;280
000088  4581              CMP      r9,r0                 ;269
00008a  dcf2              BGT      |L7.114|
                  |L7.140|
00008c  4586              CMP      lr,r0                 ;283
00008e  dd06              BLE      |L7.158|
000090  f893c000          LDRB     r12,[r3,#0]           ;283
000094  45ac              CMP      r12,r5                ;283
000096  bf84              ITT      HI                    ;284
000098  1c40              ADDHI    r0,r0,#1              ;284
00009a  4423              ADDHI    r3,r4                 ;285
00009c  d8f6              BHI      |L7.140|
                  |L7.158|
00009e  f04f0c00          MOV      r12,#0                ;288
0000a2  4548              CMP      r0,r9                 ;290
0000a4  da3a              BGE      |L7.284|
0000a6  f8dd9018          LDR      r9,[sp,#0x18]         ;293
0000aa  1a41              SUBS     r1,r0,r1              ;291
0000ac  4589              CMP      r9,r1                 ;293
0000ae  bfd8              IT       LE                    ;295
0000b0  45d0              CMPLE    r8,r10                ;295
0000b2  da32              BGE      |L7.282|
0000b4  f8dd9004          LDR      r9,[sp,#4]            ;297
0000b8  eb024100          ADD      r1,r2,r0,LSL #16      ;296
0000bc  f8491028          STR      r1,[r9,r8,LSL #2]     ;297
0000c0  f1080801          ADD      r8,r8,#1              ;299
0000c4  e029              B        |L7.282|
                  |L7.198|
0000c6  4581              CMP      r9,r0
0000c8  dd0c              BLE      |L7.228|
                  |L7.202|
;;;309                  const u8 pixel0 = pImage[0];
0000ca  f893b000          LDRB     r11,[r3,#0]
;;;310                  const u8 pixel1 = pImage[imageStride];
0000ce  f813c004          LDRB     r12,[r3,r4]
;;;311    
;;;312                  if(pixel0 >= grayvalueThreshold)
0000d2  45ab              CMP      r11,r5
;;;313                    break;
;;;314    
;;;315                  if(pixel1 >= grayvalueThreshold)
0000d4  bf38              IT       CC
0000d6  45ac              CMPCC    r12,r5
0000d8  d204              BCS      |L7.228|
;;;316                    break;
;;;317    
;;;318                  y += 2;
0000da  1c80              ADDS     r0,r0,#2
;;;319                  pImage += 2*imageStride;
0000dc  eb030344          ADD      r3,r3,r4,LSL #1
0000e0  4581              CMP      r9,r0                 ;308
0000e2  dcf2              BGT      |L7.202|
                  |L7.228|
;;;320                }
;;;321    
;;;322                while( (y < imageRegionOfInterest.bottom) && (pImage[0] < grayvalueThreshold) ) {
0000e4  4586              CMP      lr,r0
0000e6  dd06              BLE      |L7.246|
0000e8  f893c000          LDRB     r12,[r3,#0]
0000ec  45ac              CMP      r12,r5
;;;323                  y++;
0000ee  bf3c              ITT      CC
0000f0  1c40              ADDCC    r0,r0,#1
;;;324                  pImage += imageStride;
0000f2  4423              ADDCC    r3,r4
0000f4  d3f6              BCC      |L7.228|
                  |L7.246|
;;;325                }
;;;326    
;;;327                onWhite = true;
0000f6  f04f0c01          MOV      r12,#1
;;;328    
;;;329                if(y < (imageRegionOfInterest.bottom-1)) {
0000fa  4548              CMP      r0,r9
0000fc  da0e              BGE      |L7.284|
;;;330                  const s32 componentWidth = y - lastSwitchY;
;;;331    
;;;332                  if(componentWidth >= minComponentWidth) {
0000fe  f8dd9018          LDR      r9,[sp,#0x18]
000102  1a41              SUBS     r1,r0,r1              ;330
000104  4589              CMP      r9,r1
;;;333                    // If there's room, add the point to the list
;;;334                    if(yIncreasingSize < yMaxSizeM1) {
000106  bfd8              IT       LE
000108  4557              CMPLE    r7,r10
00010a  da06              BGE      |L7.282|
;;;335                      const u32 newPoint = (y << 16) + x;
;;;336                      pYIncreasing[yIncreasingSize] = newPoint;
00010c  f8dd9000          LDR      r9,[sp,#0]
000110  eb024100          ADD      r1,r2,r0,LSL #16      ;335
000114  f8491027          STR      r1,[r9,r7,LSL #2]
;;;337    
;;;338                      yIncreasingSize++;
000118  1c7f              ADDS     r7,r7,#1
                  |L7.282|
;;;339                    }
;;;340                  }
;;;341    
;;;342                  lastSwitchY = y;
00011a  4601              MOV      r1,r0
                  |L7.284|
00011c  f8d6900c          LDR      r9,[r6,#0xc]          ;265
;;;343                } // if(y < (imageRegionOfInterest.bottom-1)
;;;344              } // if(onWhite) ... else
;;;345    
;;;346              y++;
000120  1c40              ADDS     r0,r0,#1
;;;347              pImage += imageStride;
000122  4423              ADD      r3,r3,r4
000124  4581              CMP      r9,r0                 ;265
000126  dc9c              BGT      |L7.98|
                  |L7.296|
000128  9810              LDR      r0,[sp,#0x40]         ;252
00012a  4402              ADD      r2,r2,r0              ;252
00012c  6870              LDR      r0,[r6,#4]            ;252
00012e  4290              CMP      r0,r2                 ;252
000130  dc84              BGT      |L7.60|
                  |L7.306|
;;;348            } // while(y < imageRegionOfInterest.bottom)
;;;349          } // for(s32 x=imageRegionOfInterest.left; x<imageRegionOfInterest.right; x+=everyNLines)
;;;350    
;;;351          edgeLists.yDecreasing.set_size(yDecreasingSize);
000132  9811              LDR      r0,[sp,#0x44]
000134  4641              MOV      r1,r8
000136  3068              ADDS     r0,r0,#0x68
000138  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;352          edgeLists.yIncreasing.set_size(yIncreasingSize);
00013c  9811              LDR      r0,[sp,#0x44]
00013e  b007              ADD      sp,sp,#0x1c
000140  4639              MOV      r1,r7
000142  e8bd4ff0          POP      {r4-r11,lr}
000146  309c              ADDS     r0,r0,#0x9c
000148  f7ffbffe          B.W      _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;353        } // DetectBlurredEdges_GrayvalueThreshold_Vertical()
;;;354    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded47DetectBlurredEdges_DerivativeThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded47DetectBlurredEdges_DerivativeThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE PROC ; Anki::Embedded::DetectBlurredEdges_DerivativeThreshold_Vertical(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, int, int, Anki::Embedded::EdgeLists&)
                  |symbol_number.133|
;;;424    
;;;425        NO_INLINE static void DetectBlurredEdges_DerivativeThreshold_Vertical(const Array<u8> &image, const Rectangle<s32> &imageRegionOfInterest, const s32 combHalfWidth, const s32 combResponseThreshold, const s32 everyNLines, EdgeLists &edgeLists)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;426        {
000004  b085              SUB      sp,sp,#0x14
000006  4688              MOV      r8,r1
000008  9805              LDR      r0,[sp,#0x14]
00000a  4617              MOV      r7,r2
00000c  2101              MOVS     r1,#1
00000e  6884              LDR      r4,[r0,#8]
000010  9813              LDR      r0,[sp,#0x4c]
000012  6f46              LDR      r6,[r0,#0x74]
000014  f8d050a8          LDR      r5,[r0,#0xa8]
000018  3080              ADDS     r0,r0,#0x80
00001a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
;;;427          //
;;;428          //  Detect vertical positive and negative transitions
;;;429          //
;;;430    
;;;431          const s32 imageStride = image.get_stride();
;;;432    
;;;433          s32 yDecreasingSize = edgeLists.yDecreasing.get_size();
;;;434          s32 yIncreasingSize = edgeLists.yIncreasing.get_size();
;;;435          s32 yMaxSizeM1 = edgeLists.yDecreasing.get_maximumSize() - 1;
00001e  f1a00a01          SUB      r10,r0,#1
000022  9813              LDR      r0,[sp,#0x4c]
000024  f8d00098          LDR      r0,[r0,#0x98]
000028  9004              STR      r0,[sp,#0x10]
00002a  9813              LDR      r0,[sp,#0x4c]
00002c  f8d000cc          LDR      r0,[r0,#0xcc]
;;;436          u32 * restrict pYDecreasing = reinterpret_cast<u32 *>(edgeLists.yDecreasing.Pointer(0));
;;;437          u32 * restrict pYIncreasing = reinterpret_cast<u32 *>(edgeLists.yIncreasing.Pointer(0));
;;;438    
;;;439          const s32 yStart = imageRegionOfInterest.top + combHalfWidth;
000030  9003              STR      r0,[sp,#0xc]
000032  f8d80008          LDR      r0,[r8,#8]
000036  4438              ADD      r0,r0,r7
;;;440          const s32 yEnd = imageRegionOfInterest.bottom - combHalfWidth;
000038  9001              STR      r0,[sp,#4]
00003a  f8d8000c          LDR      r0,[r8,#0xc]
00003e  eba00e07          SUB      lr,r0,r7
;;;441    
;;;442          // These have an extra 1 pixel, to match the grayvalue binarization
;;;443          const s32 xStart = imageRegionOfInterest.left + combHalfWidth;
000042  f8d80000          LDR      r0,[r8,#0]
000046  19c3              ADDS     r3,r0,r7
;;;444          const s32 xEnd = imageRegionOfInterest.right - combHalfWidth;
000048  f8d80004          LDR      r0,[r8,#4]
00004c  1bc0              SUBS     r0,r0,r7
;;;445    
;;;446          for(s32 x=xStart; x<xEnd; x+=everyNLines) {
00004e  9000              STR      r0,[sp,#0]
000050  4283              CMP      r3,r0
;;;447            const u8 * restrict pImage = image.Pointer(yStart, x);
;;;448            const u8 * restrict pImage_y0 = image.Pointer(0, x);
;;;449    
;;;450            bool onEdge = false;
;;;451    
;;;452            s32 componentStart = -1;
;;;453            s32 y = yStart;
;;;454            while(y < yEnd) {
;;;455              const s32 diff = pImage[imageStride*combHalfWidth] - pImage[-imageStride*combHalfWidth];
000052  bfbc              ITT      LT
000054  fb04f007          MULLT    r0,r4,r7
000058  9002              STRLT    r0,[sp,#8]
00005a  da5b              BGE      |L8.276|
                  |L8.92|
00005c  9805              LDR      r0,[sp,#0x14]         ;446
00005e  9905              LDR      r1,[sp,#0x14]         ;446
000060  9a01              LDR      r2,[sp,#4]            ;446
000062  6900              LDR      r0,[r0,#0x10]         ;446
000064  6889              LDR      r1,[r1,#8]            ;446
000066  fb020201          MLA      r2,r2,r1,r0           ;446
00006a  eb020c03          ADD      r12,r2,r3             ;446
00006e  2200              MOVS     r2,#0                 ;448
000070  fb020001          MLA      r0,r2,r1,r0           ;448
000074  eb000903          ADD      r9,r0,r3              ;448
000078  4690              MOV      r8,r2                 ;450
00007a  9801              LDR      r0,[sp,#4]            ;454
00007c  1e52              SUBS     r2,r2,#1              ;452
00007e  4570              CMP      r0,lr                 ;454
000080  da43              BGE      |L8.266|
                  |L8.130|
000082  9902              LDR      r1,[sp,#8]
000084  fb04cb17          MLS      r11,r4,r7,r12
000088  f81c1001          LDRB     r1,[r12,r1]
00008c  f89bb000          LDRB     r11,[r11,#0]
000090  eba1010b          SUB      r1,r1,r11
;;;456              const s32 absDiff = ABS(diff);
000094  2900              CMP      r1,#0
000096  bfb8              IT       LT
000098  4249              RSBLT    r1,r1,#0
;;;457    
;;;458              if(onEdge) {
00009a  f1b80f00          CMP      r8,#0
00009e  f8ddb020          LDR      r11,[sp,#0x20]        ;456
0000a2  d029              BEQ      |L8.248|
;;;459                if(absDiff < combResponseThreshold) {
0000a4  458b              CMP      r11,r1
0000a6  dd2c              BLE      |L8.258|
;;;460                  const s32 middle = (componentStart + y - 1) >> 1;
;;;461                  const s32 totalDiff = pImage_y0[imageStride*(y-1)] - pImage_y0[imageStride*(componentStart)];
0000a8  f1a00801          SUB      r8,r0,#1
0000ac  fb04f808          MUL      r8,r4,r8
0000b0  fb04fb02          MUL      r11,r4,r2
0000b4  1811              ADDS     r1,r2,r0              ;460
0000b6  f8198008          LDRB     r8,[r9,r8]
0000ba  f819b00b          LDRB     r11,[r9,r11]
0000be  1e49              SUBS     r1,r1,#1              ;460
0000c0  1049              ASRS     r1,r1,#1              ;460
0000c2  eba8080b          SUB      r8,r8,r11
;;;462    
;;;463                  if(totalDiff > 0) {
0000c6  f1b80f00          CMP      r8,#0
0000ca  dd09              BLE      |L8.224|
;;;464                    if(yIncreasingSize < yMaxSizeM1) {
0000cc  45aa              CMP      r10,r5
0000ce  dd10              BLE      |L8.242|
;;;465                      const u32 newPoint = (middle << 16) + x; // Set x and y in one operation
;;;466                      pYIncreasing[yIncreasingSize] = newPoint;
0000d0  f8dd800c          LDR      r8,[sp,#0xc]
0000d4  eb034101          ADD      r1,r3,r1,LSL #16      ;465
0000d8  f8481025          STR      r1,[r8,r5,LSL #2]
;;;467    
;;;468                      yIncreasingSize++;
0000dc  1c6d              ADDS     r5,r5,#1
;;;469                    }
0000de  e008              B        |L8.242|
                  |L8.224|
;;;470                  } else {
;;;471                    if(yDecreasingSize < yMaxSizeM1) {
0000e0  4556              CMP      r6,r10
0000e2  da06              BGE      |L8.242|
;;;472                      const u32 newPoint = (middle << 16) + x; // Set x and y in one operation
;;;473                      pYDecreasing[yDecreasingSize] = newPoint;
0000e4  f8dd8010          LDR      r8,[sp,#0x10]
0000e8  eb034101          ADD      r1,r3,r1,LSL #16      ;472
0000ec  f8481026          STR      r1,[r8,r6,LSL #2]
;;;474    
;;;475                      yDecreasingSize++;
0000f0  1c76              ADDS     r6,r6,#1
                  |L8.242|
;;;476                    }
;;;477                  }
;;;478    
;;;479                  onEdge = false;
0000f2  f04f0800          MOV      r8,#0
;;;480                }
0000f6  e004              B        |L8.258|
                  |L8.248|
;;;481              } else {
;;;482                if(absDiff >= combResponseThreshold) {
0000f8  4559              CMP      r1,r11
;;;483                  componentStart = y;
0000fa  bfa4              ITT      GE
0000fc  4602              MOVGE    r2,r0
;;;484                  onEdge = true;
0000fe  f04f0801          MOVGE    r8,#1
                  |L8.258|
;;;485                }
;;;486              }
;;;487    
;;;488              y++;
000102  1c40              ADDS     r0,r0,#1
;;;489              pImage += imageStride;
000104  44a4              ADD      r12,r12,r4
000106  4570              CMP      r0,lr                 ;454
000108  dbbb              BLT      |L8.130|
                  |L8.266|
00010a  9812              LDR      r0,[sp,#0x48]         ;446
00010c  4403              ADD      r3,r3,r0              ;446
00010e  9800              LDR      r0,[sp,#0]            ;446
000110  4283              CMP      r3,r0                 ;446
000112  dba3              BLT      |L8.92|
                  |L8.276|
;;;490            } // while(y < yEnd)
;;;491          } // for(s32 x=xStart; x<xEnd; x+=everyNLines)
;;;492    
;;;493          edgeLists.yDecreasing.set_size(yDecreasingSize);
000114  9813              LDR      r0,[sp,#0x4c]
000116  4631              MOV      r1,r6
000118  3068              ADDS     r0,r0,#0x68
00011a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;494          edgeLists.yIncreasing.set_size(yIncreasingSize);
00011e  9813              LDR      r0,[sp,#0x4c]
000120  b009              ADD      sp,sp,#0x24
000122  4629              MOV      r1,r5
000124  e8bd4ff0          POP      {r4-r11,lr}
000128  309c              ADDS     r0,r0,#0x9c
00012a  f7ffbffe          B.W      _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;495        } // DetectBlurredEdges_DerivativeThreshold_Vertical()
;;;496    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded48DetectBlurredEdges_GrayvalueThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded48DetectBlurredEdges_GrayvalueThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE PROC ; Anki::Embedded::DetectBlurredEdges_GrayvalueThreshold_Horizontal(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, unsigned char, int, int, Anki::Embedded::EdgeLists&)
                  |symbol_number.135|
;;;115    
;;;116        NO_INLINE static void DetectBlurredEdges_GrayvalueThreshold_Horizontal(const Array<u8> &image, const Rectangle<s32> &imageRegionOfInterest, const u8 grayvalueThreshold, const s32 minComponentWidth, const s32 everyNLines, EdgeLists &edgeLists)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;117        {
000004  b083              SUB      sp,sp,#0xc
000006  460d              MOV      r5,r1
000008  9811              LDR      r0,[sp,#0x44]
00000a  4698              MOV      r8,r3
00000c  4614              MOV      r4,r2
00000e  68c7              LDR      r7,[r0,#0xc]
000010  6c06              LDR      r6,[r0,#0x40]
000012  2101              MOVS     r1,#1
000014  3018              ADDS     r0,r0,#0x18
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
;;;118          //
;;;119          // Detect horizontal positive and negative transitions
;;;120          //
;;;121    
;;;122          //const s32 imageStride = image.get_stride();
;;;123    
;;;124          s32 xDecreasingSize = edgeLists.xDecreasing.get_size();
;;;125          s32 xIncreasingSize = edgeLists.xIncreasing.get_size();
;;;126          s32 xMaxSizeM1 = edgeLists.xDecreasing.get_maximumSize() - 1;
00001a  f1a00a01          SUB      r10,r0,#1
00001e  9811              LDR      r0,[sp,#0x44]
000020  6b00              LDR      r0,[r0,#0x30]
000022  9001              STR      r0,[sp,#4]
000024  9811              LDR      r0,[sp,#0x44]
000026  6e40              LDR      r0,[r0,#0x64]
;;;127          u32 * restrict pXDecreasing = reinterpret_cast<u32 *>(edgeLists.xDecreasing.Pointer(0));
;;;128          u32 * restrict pXIncreasing = reinterpret_cast<u32 *>(edgeLists.xIncreasing.Pointer(0));
000028  9000              STR      r0,[sp,#0]
00002a  e9d53002          LDRD     r3,r0,[r5,#8]
;;;129    
;;;130          for(s32 y=imageRegionOfInterest.top; y<imageRegionOfInterest.bottom; y+=everyNLines) {
00002e  4298              CMP      r0,r3
000030  dd7b              BLE      |L9.298|
                  |L9.50|
000032  9803              LDR      r0,[sp,#0xc]
000034  6901              LDR      r1,[r0,#0x10]
000036  6880              LDR      r0,[r0,#8]
000038  fb031100          MLA      r1,r3,r0,r1
;;;131            const u8 * restrict pImage = image.Pointer(y,0);
;;;132    
;;;133            bool onWhite;
;;;134    
;;;135            // Is the first pixel white or black? (probably noisy, but that's okay)
;;;136            if(pImage[0] > grayvalueThreshold)
00003c  7808              LDRB     r0,[r1,#0]
00003e  42a0              CMP      r0,r4
;;;137              onWhite = true;
000040  bf8c              ITE      HI
000042  2201              MOVHI    r2,#1
;;;138            else
;;;139              onWhite = false;
000044  2200              MOVLS    r2,#0
;;;140    
;;;141            s32 lastSwitchX = imageRegionOfInterest.left;
;;;142            s32 x = imageRegionOfInterest.left;
;;;143            while(x < imageRegionOfInterest.right) {
000046  6828              LDR      r0,[r5,#0]
000048  f8d59004          LDR      r9,[r5,#4]
00004c  4684              MOV      r12,r0
00004e  45e1              CMP      r9,r12
000050  dd66              BLE      |L9.288|
                  |L9.82|
;;;144              if(onWhite) {
;;;145                // If on white
;;;146    
;;;147                while(x < (imageRegionOfInterest.right-3)) {
;;;148                  const u32 pixels_u8x4 = *reinterpret_cast<const u32 *>(pImage+x);
;;;149    
;;;150                  if( (pixels_u8x4 & 0xFF) <= grayvalueThreshold )
;;;151                    break;
;;;152    
;;;153                  if( ((pixels_u8x4 & 0xFF00) >> 8) <= grayvalueThreshold )
;;;154                    break;
;;;155    
;;;156                  if( ((pixels_u8x4 & 0xFF0000) >> 16) <= grayvalueThreshold )
;;;157                    break;
;;;158    
;;;159                  if( ((pixels_u8x4 & 0xFF000000) >> 24) <= grayvalueThreshold )
;;;160                    break;
;;;161    
;;;162                  x += 4;
;;;163                }
;;;164    
;;;165                while( (x < imageRegionOfInterest.right) && (pImage[x] > grayvalueThreshold)) {
;;;166                  x++;
;;;167                }
;;;168    
;;;169                onWhite = false;
;;;170    
;;;171                if(x < (imageRegionOfInterest.right-1)) {
;;;172                  const s32 componentWidth = x - lastSwitchX;
;;;173    
;;;174                  if(componentWidth >= minComponentWidth) {
;;;175                    // If there's room, add the point to the list
;;;176                    if(xDecreasingSize < xMaxSizeM1) {
;;;177                      const u32 newPoint = (y << 16) + x; // Set x and y in one operation
;;;178                      pXDecreasing[xDecreasingSize] = newPoint;
;;;179    
;;;180                      xDecreasingSize++;
;;;181                    }
;;;182                  }
;;;183    
;;;184                  lastSwitchX = x;
;;;185                } // if(x < (imageRegionOfInterest.right-1)
;;;186              } else {
;;;187                // If on black
;;;188    
;;;189                while(x < (imageRegionOfInterest.right-3)) {
000052  f1a90b03          SUB      r11,r9,#3
000056  b372              CBZ      r2,|L9.182|
000058  4583              CMP      r11,r0                ;147
00005a  dd12              BLE      |L9.130|
                  |L9.92|
00005c  580a              LDR      r2,[r1,r0]            ;148
00005e  f0020eff          AND      lr,r2,#0xff           ;150
000062  45a6              CMP      lr,r4                 ;150
000064  bf84              ITT      HI                    ;153
000066  f3c22e07          UBFXHI   lr,r2,#8,#8           ;153
00006a  45a6              CMPHI    lr,r4                 ;153
00006c  d909              BLS      |L9.130|
00006e  f3c24e07          UBFX     lr,r2,#16,#8          ;156
000072  4574              CMP      r4,lr                 ;156
000074  bf38              IT       CC                    ;159
000076  ebb46f12          CMPCC    r4,r2,LSR #24         ;159
00007a  d202              BCS      |L9.130|
00007c  1d00              ADDS     r0,r0,#4              ;162
00007e  4583              CMP      r11,r0                ;147
000080  dcec              BGT      |L9.92|
                  |L9.130|
000082  4581              CMP      r9,r0                 ;165
000084  dd04              BLE      |L9.144|
000086  5c0a              LDRB     r2,[r1,r0]            ;165
000088  42a2              CMP      r2,r4                 ;165
00008a  bf88              IT       HI                    ;166
00008c  1c40              ADDHI    r0,r0,#1              ;166
00008e  d8f8              BHI      |L9.130|
                  |L9.144|
000090  2200              MOVS     r2,#0                 ;169
000092  f1a90901          SUB      r9,r9,#1              ;171
000096  4548              CMP      r0,r9                 ;171
000098  da3d              BGE      |L9.278|
00009a  eba00c0c          SUB      r12,r0,r12            ;172
00009e  45e0              CMP      r8,r12                ;174
0000a0  bfd8              IT       LE                    ;176
0000a2  4557              CMPLE    r7,r10                ;176
0000a4  da36              BGE      |L9.276|
0000a6  f8dd9004          LDR      r9,[sp,#4]            ;178
0000aa  eb004c03          ADD      r12,r0,r3,LSL #16     ;177
0000ae  f849c027          STR      r12,[r9,r7,LSL #2]    ;178
0000b2  1c7f              ADDS     r7,r7,#1              ;180
0000b4  e02e              B        |L9.276|
                  |L9.182|
0000b6  e7ff              B        |L9.184|
                  |L9.184|
0000b8  4583              CMP      r11,r0
0000ba  dd12              BLE      |L9.226|
                  |L9.188|
;;;190                  const u32 pixels_u8x4 = *reinterpret_cast<const u32 *>(pImage+x);
0000bc  580a              LDR      r2,[r1,r0]
;;;191    
;;;192                  if( (pixels_u8x4 & 0xFF) >= grayvalueThreshold )
0000be  f0020eff          AND      lr,r2,#0xff
0000c2  45a6              CMP      lr,r4
;;;193                    break;
;;;194    
;;;195                  if( ((pixels_u8x4 & 0xFF00) >> 8) >= grayvalueThreshold )
0000c4  bf3c              ITT      CC
0000c6  f3c22e07          UBFXCC   lr,r2,#8,#8
0000ca  45a6              CMPCC    lr,r4
0000cc  d209              BCS      |L9.226|
;;;196                    break;
;;;197    
;;;198                  if( ((pixels_u8x4 & 0xFF0000) >> 16) >= grayvalueThreshold )
0000ce  f3c24e07          UBFX     lr,r2,#16,#8
0000d2  4574              CMP      r4,lr
;;;199                    break;
;;;200    
;;;201                  if( ((pixels_u8x4 & 0xFF000000) >> 24) >= grayvalueThreshold )
0000d4  bf88              IT       HI
0000d6  ebb46f12          CMPHI    r4,r2,LSR #24
0000da  d902              BLS      |L9.226|
;;;202                    break;
;;;203    
;;;204                  x += 4;
0000dc  1d00              ADDS     r0,r0,#4
0000de  4583              CMP      r11,r0                ;189
0000e0  dcec              BGT      |L9.188|
                  |L9.226|
;;;205                }
;;;206    
;;;207                while( (x < imageRegionOfInterest.right) && (pImage[x] < grayvalueThreshold)) {
0000e2  4581              CMP      r9,r0
0000e4  dd04              BLE      |L9.240|
0000e6  5c0a              LDRB     r2,[r1,r0]
0000e8  42a2              CMP      r2,r4
;;;208                  x++;
0000ea  bf38              IT       CC
0000ec  1c40              ADDCC    r0,r0,#1
0000ee  d3f8              BCC      |L9.226|
                  |L9.240|
;;;209                }
;;;210    
;;;211                onWhite = true;
0000f0  2201              MOVS     r2,#1
;;;212    
;;;213                if(x < (imageRegionOfInterest.right-1)) {
0000f2  f1a90901          SUB      r9,r9,#1
0000f6  4548              CMP      r0,r9
0000f8  da0d              BGE      |L9.278|
;;;214                  const s32 componentWidth = x - lastSwitchX;
0000fa  eba00c0c          SUB      r12,r0,r12
;;;215    
;;;216                  if(componentWidth >= minComponentWidth) {
0000fe  45e0              CMP      r8,r12
;;;217                    // If there's room, add the point to the list
;;;218                    if(xIncreasingSize < xMaxSizeM1) {
000100  bfd8              IT       LE
000102  4556              CMPLE    r6,r10
000104  da06              BGE      |L9.276|
;;;219                      const u32 newPoint = (y << 16) + x;
;;;220                      pXIncreasing[xIncreasingSize] = newPoint;
000106  f8dd9000          LDR      r9,[sp,#0]
00010a  eb004c03          ADD      r12,r0,r3,LSL #16     ;219
00010e  f849c026          STR      r12,[r9,r6,LSL #2]
;;;221    
;;;222                      xIncreasingSize++;
000112  1c76              ADDS     r6,r6,#1
                  |L9.276|
;;;223                    }
;;;224                  }
;;;225    
;;;226                  lastSwitchX = x;
000114  4684              MOV      r12,r0
                  |L9.278|
000116  f8d59004          LDR      r9,[r5,#4]            ;143
;;;227                } // if(x < (imageRegionOfInterest.right-1))
;;;228              } // if(onWhite) ... else
;;;229    
;;;230              x++;
00011a  1c40              ADDS     r0,r0,#1
00011c  4581              CMP      r9,r0                 ;143
00011e  dc98              BGT      |L9.82|
                  |L9.288|
000120  9810              LDR      r0,[sp,#0x40]         ;130
000122  4403              ADD      r3,r3,r0              ;130
000124  68e8              LDR      r0,[r5,#0xc]          ;130
000126  4298              CMP      r0,r3                 ;130
000128  dc83              BGT      |L9.50|
                  |L9.298|
;;;231            } // if(onWhite) ... else
;;;232          } // for(s32 y=imageRegionOfInterest.top; y<imageRegionOfInterest.bottom; y+=everyNLines)
;;;233    
;;;234          edgeLists.xDecreasing.set_size(xDecreasingSize);
00012a  4639              MOV      r1,r7
00012c  9811              LDR      r0,[sp,#0x44]
00012e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;235          edgeLists.xIncreasing.set_size(xIncreasingSize);
000132  9811              LDR      r0,[sp,#0x44]
000134  b007              ADD      sp,sp,#0x1c
000136  4631              MOV      r1,r6
000138  e8bd4ff0          POP      {r4-r11,lr}
00013c  3034              ADDS     r0,r0,#0x34
00013e  f7ffbffe          B.W      _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;236        } // DetectBlurredEdges_GrayvalueThreshold_Horizontal()
;;;237    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded49DetectBlurredEdges_DerivativeThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded49DetectBlurredEdges_DerivativeThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE PROC ; Anki::Embedded::DetectBlurredEdges_DerivativeThreshold_Horizontal(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Rectangle<int>&, int, int, int, Anki::Embedded::EdgeLists&)
                  |symbol_number.137|
;;;354    
;;;355        NO_INLINE static void DetectBlurredEdges_DerivativeThreshold_Horizontal(const Array<u8> &image, const Rectangle<s32> &imageRegionOfInterest, const s32 combHalfWidth, const s32 combResponseThreshold, const s32 everyNLines, EdgeLists &edgeLists)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;356        {
000004  b085              SUB      sp,sp,#0x14
000006  460d              MOV      r5,r1
000008  f8dda04c          LDR      r10,[sp,#0x4c]
00000c  4699              MOV      r9,r3
00000e  4690              MOV      r8,r2
000010  2101              MOVS     r1,#1
000012  f10a0018          ADD      r0,r10,#0x18
000016  f8da700c          LDR      r7,[r10,#0xc]
00001a  f8da6040          LDR      r6,[r10,#0x40]
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
;;;357          //
;;;358          // Detect horizontal positive and negative transitions
;;;359          //
;;;360    
;;;361          //const s32 imageStride = image.get_stride();
;;;362    
;;;363          s32 xDecreasingSize = edgeLists.xDecreasing.get_size();
;;;364          s32 xIncreasingSize = edgeLists.xIncreasing.get_size();
;;;365          s32 xMaxSizeM1 = edgeLists.xDecreasing.get_maximumSize() - 1;
000022  1e43              SUBS     r3,r0,#1
;;;366          u32 * restrict pXDecreasing = reinterpret_cast<u32 *>(edgeLists.xDecreasing.Pointer(0));
000024  f8da0030          LDR      r0,[r10,#0x30]
000028  9003              STR      r0,[sp,#0xc]
;;;367          u32 * restrict pXIncreasing = reinterpret_cast<u32 *>(edgeLists.xIncreasing.Pointer(0));
00002a  f8da0064          LDR      r0,[r10,#0x64]
;;;368    
;;;369          const s32 xStart = imageRegionOfInterest.left + combHalfWidth;
00002e  9002              STR      r0,[sp,#8]
000030  6828              LDR      r0,[r5,#0]
000032  4440              ADD      r0,r0,r8
;;;370          const s32 xEnd = imageRegionOfInterest.right - combHalfWidth;
000034  9001              STR      r0,[sp,#4]
000036  6868              LDR      r0,[r5,#4]
000038  eba00b08          SUB      r11,r0,r8
;;;371    
;;;372          // These have an extra 1 pixel, to match the grayvalue binarization
;;;373          const s32 yStart = imageRegionOfInterest.top + combHalfWidth;
00003c  68a8              LDR      r0,[r5,#8]
00003e  eb000408          ADD      r4,r0,r8
;;;374          const s32 yEnd = imageRegionOfInterest.bottom - combHalfWidth;
000042  68e8              LDR      r0,[r5,#0xc]
000044  eba00008          SUB      r0,r0,r8
;;;375    
;;;376          for(s32 y=yStart; y<yEnd; y+=everyNLines) {
000048  9000              STR      r0,[sp,#0]
00004a  4284              CMP      r4,r0
00004c  da47              BGE      |L10.222|
                  |L10.78|
00004e  9805              LDR      r0,[sp,#0x14]
;;;377            const u8 * restrict pImage = image.Pointer(y,0);
;;;378    
;;;379            bool onEdge = false;
000050  2200              MOVS     r2,#0
;;;380    
;;;381            s32 componentStart = -1;
;;;382            s32 x = xStart;
;;;383            while(x < xEnd) {
000052  f8ddc004          LDR      r12,[sp,#4]
000056  6901              LDR      r1,[r0,#0x10]
000058  6880              LDR      r0,[r0,#8]
00005a  fb041500          MLA      r5,r4,r0,r1
00005e  1e51              SUBS     r1,r2,#1              ;381
000060  45dc              CMP      r12,r11
000062  da37              BGE      |L10.212|
                  |L10.100|
;;;384              const s32 diff = pImage[x+combHalfWidth] - pImage[x-combHalfWidth];
000064  eb0c0008          ADD      r0,r12,r8
000068  ebac0e08          SUB      lr,r12,r8
00006c  5c28              LDRB     r0,[r5,r0]
00006e  f815e00e          LDRB     lr,[r5,lr]
000072  eba0000e          SUB      r0,r0,lr
;;;385              const s32 absDiff = ABS(diff);
000076  2800              CMP      r0,#0
000078  bfb8              IT       LT
00007a  4240              RSBLT    r0,r0,#0
00007c  b312              CBZ      r2,|L10.196|
;;;386    
;;;387              if(onEdge) {
;;;388                if(absDiff < combResponseThreshold) {
00007e  4581              CMP      r9,r0
000080  dd24              BLE      |L10.204|
;;;389                  const s32 middle = (componentStart + x - 1) >> 1;
;;;390                  const s32 totalDiff = pImage[x-1] - pImage[componentStart];
000082  eb05020c          ADD      r2,r5,r12
000086  eb01000c          ADD      r0,r1,r12             ;389
00008a  f8122c01          LDRB     r2,[r2,#-1]
00008e  f815e001          LDRB     lr,[r5,r1]
000092  1e40              SUBS     r0,r0,#1              ;389
000094  1040              ASRS     r0,r0,#1              ;389
000096  eba2020e          SUB      r2,r2,lr
;;;391    
;;;392                  if(totalDiff > 0) {
00009a  2a00              CMP      r2,#0
00009c  dd08              BLE      |L10.176|
;;;393                    if(xIncreasingSize < xMaxSizeM1) {
00009e  42b3              CMP      r3,r6
0000a0  dd0e              BLE      |L10.192|
;;;394                      const u32 newPoint = (y << 16) + middle; // Set x and y in one operation
;;;395                      pXIncreasing[xIncreasingSize] = newPoint;
0000a2  9a02              LDR      r2,[sp,#8]
0000a4  eb004004          ADD      r0,r0,r4,LSL #16      ;394
0000a8  f8420026          STR      r0,[r2,r6,LSL #2]
;;;396    
;;;397                      xIncreasingSize++;
0000ac  1c76              ADDS     r6,r6,#1
;;;398                    }
0000ae  e007              B        |L10.192|
                  |L10.176|
;;;399                  } else { // if(totalDiff > 0)
;;;400                    if(xDecreasingSize < xMaxSizeM1) {
0000b0  429f              CMP      r7,r3
0000b2  da05              BGE      |L10.192|
;;;401                      const u32 newPoint = (y << 16) + middle; // Set x and y in one operation
;;;402                      pXDecreasing[xDecreasingSize] = newPoint;
0000b4  9a03              LDR      r2,[sp,#0xc]
0000b6  eb004004          ADD      r0,r0,r4,LSL #16      ;401
0000ba  f8420027          STR      r0,[r2,r7,LSL #2]
;;;403    
;;;404                      xDecreasingSize++;
0000be  1c7f              ADDS     r7,r7,#1
                  |L10.192|
;;;405                    }
;;;406                  } // if(totalDiff > 0) ... else
;;;407    
;;;408                  onEdge = false;
0000c0  2200              MOVS     r2,#0
;;;409                }
0000c2  e003              B        |L10.204|
                  |L10.196|
;;;410              } else { // if(onEdge)
;;;411                if(absDiff >= combResponseThreshold) {
0000c4  4548              CMP      r0,r9
;;;412                  componentStart = x;
0000c6  bfa4              ITT      GE
0000c8  4661              MOVGE    r1,r12
;;;413                  onEdge = true;
0000ca  2201              MOVGE    r2,#1
                  |L10.204|
;;;414                }
;;;415              } // if(onEdge) ... else
;;;416    
;;;417              x++;
0000cc  f10c0c01          ADD      r12,r12,#1
0000d0  45dc              CMP      r12,r11               ;383
0000d2  dbc7              BLT      |L10.100|
                  |L10.212|
0000d4  9812              LDR      r0,[sp,#0x48]         ;376
0000d6  4404              ADD      r4,r4,r0              ;376
0000d8  9800              LDR      r0,[sp,#0]            ;376
0000da  4284              CMP      r4,r0                 ;376
0000dc  dbb7              BLT      |L10.78|
                  |L10.222|
;;;418            } // while(x < xEnd)
;;;419          } // for(s32 y=imageRegionOfInterest.top; y<(imageRegionOfInterest.bottom-1); y+=everyNLines)
;;;420    
;;;421          edgeLists.xDecreasing.set_size(xDecreasingSize);
0000de  4639              MOV      r1,r7
0000e0  4650              MOV      r0,r10
0000e2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;422          edgeLists.xIncreasing.set_size(xIncreasingSize);
0000e6  b009              ADD      sp,sp,#0x24
0000e8  4631              MOV      r1,r6
0000ea  f10a0034          ADD      r0,r10,#0x34
0000ee  e8bd4ff0          POP      {r4-r11,lr}
0000f2  f7ffbffe          B.W      _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;423        } // DetectBlurredEdges_DerivativeThreshold_Horizontal()
;;;424    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded9EdgeLists11DeserializeEPcPPvRiRNS0_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded9EdgeLists11DeserializeEPcPPvRiRNS0_11MemoryStackE PROC ; Anki::Embedded::EdgeLists::Deserialize(char*, void**, int&, Anki::Embedded::MemoryStack&)
;;;520    
;;;521        Result EdgeLists::Deserialize(char *objectName, void** buffer, s32 &bufferLength, MemoryStack &memory)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;522        {
000004  b0c2              SUB      sp,sp,#0x108
000006  4605              MOV      r5,r0
;;;523          if(bufferLength <= 0) return RESULT_FAIL;
000008  6818              LDR      r0,[r3,#0]
00000a  9e4a              LDR      r6,[sp,#0x128]
00000c  461c              MOV      r4,r3                 ;522
00000e  4617              MOV      r7,r2                 ;522
000010  2800              CMP      r0,#0
000012  dd77              BLE      |L11.260|
;;;524    
;;;525          // TODO: check if the name is correct
;;;526          if(SerializedBuffer::DeserializeDescriptionStrings(NULL, objectName, buffer, bufferLength) != RESULT_OK)
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer29DeserializeDescriptionStringsEPcS2_PPvRi ; Anki::Embedded::SerializedBuffer::DeserializeDescriptionStrings(char*, char*, void**, int&)
00001a  2800              CMP      r0,#0
00001c  d172              BNE      |L11.260|
;;;527            return RESULT_FAIL;
;;;528    
;;;529          if(bufferLength <= 0) return RESULT_FAIL;
00001e  6820              LDR      r0,[r4,#0]
000020  2800              CMP      r0,#0
000022  dd6f              BLE      |L11.260|
;;;530    
;;;531          this->imageHeight = SerializedBuffer::DeserializeRawBasicType<s32>(NULL, buffer, bufferLength);
000024  4622              MOV      r2,r4
000026  4639              MOV      r1,r7
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRi ; Anki::Embedded::SerializedBuffer::DeserializeRawBasicType<int>(char*, void**, int&)
;;;532          if(bufferLength <= 0) return RESULT_FAIL;
00002e  f8c500d0          STR      r0,[r5,#0xd0]
000032  6820              LDR      r0,[r4,#0]
000034  2800              CMP      r0,#0
000036  dd65              BLE      |L11.260|
;;;533    
;;;534          this->imageWidth  = SerializedBuffer::DeserializeRawBasicType<s32>(NULL, buffer, bufferLength);
000038  4622              MOV      r2,r4
00003a  4639              MOV      r1,r7
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRi ; Anki::Embedded::SerializedBuffer::DeserializeRawBasicType<int>(char*, void**, int&)
;;;535          if(bufferLength <= 0) return RESULT_FAIL;
000042  f8c500d4          STR      r0,[r5,#0xd4]
000046  6820              LDR      r0,[r4,#0]
000048  2800              CMP      r0,#0
00004a  dd5b              BLE      |L11.260|
;;;536    
;;;537          this->xDecreasing = SerializedBuffer::DeserializeRawFixedLengthList<Point<s16> >(NULL, buffer, bufferLength, memory);
00004c  4623              MOV      r3,r4
00004e  463a              MOV      r2,r7
000050  2100              MOVS     r1,#0
000052  a835              ADD      r0,sp,#0xd4
000054  9600              STR      r6,[sp,#0]
000056  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE ; Anki::Embedded::SerializedBuffer::DeserializeRawFixedLengthList<Anki::Embedded::Point<short>>(char*, void**, int&, Anki::Embedded::MemoryStack&)
00005a  f10d0ed4          ADD      lr,sp,#0xd4
00005e  e8be170f          LDM      lr!,{r0-r3,r8-r10,r12}
000062  f10d0e04          ADD      lr,sp,#4
000066  e8ae170f          STM      lr!,{r0-r3,r8-r10,r12}
00006a  f10d08f4          ADD      r8,sp,#0xf4
00006e  e8b8100f          LDM      r8!,{r0-r3,r12}
000072  f10d0824          ADD      r8,sp,#0x24
000076  e8a8100f          STM      r8!,{r0-r3,r12}
00007a  a901              ADD      r1,sp,#4
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&)
;;;538          if(bufferLength <= 0) return RESULT_FAIL;
000082  6820              LDR      r0,[r4,#0]
000084  2800              CMP      r0,#0
000086  dd3d              BLE      |L11.260|
;;;539    
;;;540          this->xIncreasing = SerializedBuffer::DeserializeRawFixedLengthList<Point<s16> >(NULL, buffer, bufferLength, memory);
000088  4623              MOV      r3,r4
00008a  463a              MOV      r2,r7
00008c  2100              MOVS     r1,#0
00008e  a835              ADD      r0,sp,#0xd4
000090  9600              STR      r6,[sp,#0]
000092  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE ; Anki::Embedded::SerializedBuffer::DeserializeRawFixedLengthList<Anki::Embedded::Point<short>>(char*, void**, int&, Anki::Embedded::MemoryStack&)
000096  f10d0ed4          ADD      lr,sp,#0xd4
00009a  e8be170f          LDM      lr!,{r0-r3,r8-r10,r12}
00009e  f10d0e38          ADD      lr,sp,#0x38
0000a2  e8ae170f          STM      lr!,{r0-r3,r8-r10,r12}
0000a6  f10d08f4          ADD      r8,sp,#0xf4
0000aa  e8b8100f          LDM      r8!,{r0-r3,r12}
0000ae  f10d0858          ADD      r8,sp,#0x58
0000b2  e8a8100f          STM      r8!,{r0-r3,r12}
0000b6  a90e              ADD      r1,sp,#0x38
0000b8  f1050034          ADD      r0,r5,#0x34
0000bc  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&)
;;;541          if(bufferLength <= 0) return RESULT_FAIL;
0000c0  6820              LDR      r0,[r4,#0]
0000c2  2800              CMP      r0,#0
0000c4  dd1e              BLE      |L11.260|
;;;542    
;;;543          this->yDecreasing = SerializedBuffer::DeserializeRawFixedLengthList<Point<s16> >(NULL, buffer, bufferLength, memory);
0000c6  4623              MOV      r3,r4
0000c8  463a              MOV      r2,r7
0000ca  2100              MOVS     r1,#0
0000cc  a835              ADD      r0,sp,#0xd4
0000ce  9600              STR      r6,[sp,#0]
0000d0  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE ; Anki::Embedded::SerializedBuffer::DeserializeRawFixedLengthList<Anki::Embedded::Point<short>>(char*, void**, int&, Anki::Embedded::MemoryStack&)
0000d4  f10d0ed4          ADD      lr,sp,#0xd4
0000d8  e8be170f          LDM      lr!,{r0-r3,r8-r10,r12}
0000dc  f10d0e6c          ADD      lr,sp,#0x6c
0000e0  e8ae170f          STM      lr!,{r0-r3,r8-r10,r12}
0000e4  f10d08f4          ADD      r8,sp,#0xf4
0000e8  e8b8100f          LDM      r8!,{r0-r3,r12}
0000ec  f10d088c          ADD      r8,sp,#0x8c
0000f0  e8a8100f          STM      r8!,{r0-r3,r12}
0000f4  a91b              ADD      r1,sp,#0x6c
0000f6  f1050068          ADD      r0,r5,#0x68
0000fa  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&)
;;;544          if(bufferLength <= 0) return RESULT_FAIL;
0000fe  6820              LDR      r0,[r4,#0]
000100  2800              CMP      r0,#0
000102  dc03              BGT      |L11.268|
                  |L11.260|
;;;545    
;;;546          this->yIncreasing = SerializedBuffer::DeserializeRawFixedLengthList<Point<s16> >(NULL, buffer, bufferLength, memory);
;;;547    
;;;548          return RESULT_OK;
;;;549        }
000104  b042              ADD      sp,sp,#0x108
000106  2001              MOVS     r0,#1                 ;544
000108  e8bd87f0          POP      {r4-r10,pc}
                  |L11.268|
00010c  4623              MOV      r3,r4                 ;546
00010e  463a              MOV      r2,r7                 ;546
000110  2100              MOVS     r1,#0                 ;546
000112  a835              ADD      r0,sp,#0xd4           ;546
000114  9600              STR      r6,[sp,#0]            ;546
000116  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE ; Anki::Embedded::SerializedBuffer::DeserializeRawFixedLengthList<Anki::Embedded::Point<short>>(char*, void**, int&, Anki::Embedded::MemoryStack&)
00011a  f10d08d4          ADD      r8,sp,#0xd4           ;546
00011e  e8b810df          LDM      r8!,{r0-r4,r6,r7,r12} ;546
000122  f10d08a0          ADD      r8,sp,#0xa0           ;546
000126  e8a810df          STM      r8!,{r0-r4,r6,r7,r12} ;546
00012a  f10d08f4          ADD      r8,sp,#0xf4           ;546
00012e  e8b8100f          LDM      r8!,{r0-r3,r12}       ;546
000132  f10d08c0          ADD      r8,sp,#0xc0           ;546
000136  e8a8100f          STM      r8!,{r0-r3,r12}       ;546
00013a  a928              ADD      r1,sp,#0xa0           ;546
00013c  f105009c          ADD      r0,r5,#0x9c           ;546
000140  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&)
000144  b042              ADD      sp,sp,#0x108
000146  2000              MOVS     r0,#0                 ;548
000148  e8bd87f0          POP      {r4-r10,pc}
;;;550    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded9EdgeLists21get_serializationSizeEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded9EdgeLists21get_serializationSizeEv PROC ; Anki::Embedded::EdgeLists::get_serializationSize() const
;;;550    
;;;551        s32 EdgeLists::get_serializationSize() const
000000  68c3              LDR      r3,[r0,#0xc]
000002  6c02              LDR      r2,[r0,#0x40]
000004  6f41              LDR      r1,[r0,#0x74]
000006  330f              ADDS     r3,r3,#0xf
000008  320f              ADDS     r2,r2,#0xf
00000a  310f              ADDS     r1,r1,#0xf
00000c  f8d000a8          LDR      r0,[r0,#0xa8]
000010  f023030f          BIC      r3,r3,#0xf
000014  f022020f          BIC      r2,r2,#0xf
;;;552        {
;;;553          // TODO: make the correct length
;;;554    
;;;555          const s32 xDecreasingUsed = this->xDecreasing.get_size();
;;;556          const s32 xIncreasingUsed = this->xIncreasing.get_size();
;;;557          const s32 yDecreasingUsed = this->yDecreasing.get_size();
;;;558          const s32 yIncreasingUsed = this->yIncreasing.get_size();
;;;559    
;;;560          const size_t numTemplatePixels =
000018  441a              ADD      r2,r2,r3
00001a  f021010f          BIC      r1,r1,#0xf
00001e  300f              ADDS     r0,r0,#0xf
000020  4411              ADD      r1,r1,r2
000022  f020000f          BIC      r0,r0,#0xf
000026  4408              ADD      r0,r0,r1
;;;561            RoundUp<size_t>(xDecreasingUsed, MEMORY_ALIGNMENT) +
;;;562            RoundUp<size_t>(xIncreasingUsed, MEMORY_ALIGNMENT) +
;;;563            RoundUp<size_t>(yDecreasingUsed, MEMORY_ALIGNMENT) +
;;;564            RoundUp<size_t>(yIncreasingUsed, MEMORY_ALIGNMENT);
;;;565    
;;;566          AnkiAssert(numTemplatePixels <= s32_MAX);
;;;567          
;;;568          const s32 requiredBytes = 512 + static_cast<s32>(numTemplatePixels)*sizeof(Point<s16>) + 14*SerializedBuffer::DESCRIPTION_STRING_LENGTH;
000028  f44f7170          MOV      r1,#0x3c0
00002c  eb010080          ADD      r0,r1,r0,LSL #2
;;;569    
;;;570          return requiredBytes;
;;;571        }
000030  4770              BX       lr
;;;572    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded9EdgeLists9SerializeEPKcRNS0_16SerializedBufferE||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded9EdgeLists9SerializeEPKcRNS0_16SerializedBufferE PROC ; Anki::Embedded::EdgeLists::Serialize(const char*, Anki::Embedded::SerializedBuffer&) const
;;;496    
;;;497        Result EdgeLists::Serialize(const char *objectName, SerializedBuffer &buffer) const
000000  b530              PUSH     {r4,r5,lr}
;;;498        {
000002  4694              MOV      r12,r2
000004  460d              MOV      r5,r1
000006  68c3              LDR      r3,[r0,#0xc]
000008  6c02              LDR      r2,[r0,#0x40]
00000a  6f41              LDR      r1,[r0,#0x74]
00000c  4604              MOV      r4,r0
00000e  330f              ADDS     r3,r3,#0xf
000010  320f              ADDS     r2,r2,#0xf
000012  f8d000a8          LDR      r0,[r0,#0xa8]
000016  f023030f          BIC      r3,r3,#0xf
00001a  f022020f          BIC      r2,r2,#0xf
00001e  310f              ADDS     r1,r1,#0xf
000020  441a              ADD      r2,r2,r3
000022  f021010f          BIC      r1,r1,#0xf
000026  4411              ADD      r1,r1,r2
000028  300f              ADDS     r0,r0,#0xf
00002a  f020000f          BIC      r0,r0,#0xf
00002e  4408              ADD      r0,r0,r1
000030  f44f7170          MOV      r1,#0x3c0
000034  eb010380          ADD      r3,r1,r0,LSL #2
000038  b083              SUB      sp,sp,#0xc
;;;499          s32 totalDataLength = this->get_serializationSize();
;;;500    
;;;501          void *segment = buffer.Allocate("EdgeLists", objectName, totalDataLength);
00003a  462a              MOV      r2,r5
00003c  a11e              ADR      r1,|L13.184|
00003e  4660              MOV      r0,r12
000040  9300              STR      r3,[sp,#0]
000042  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer8AllocateEPKcS3_i ; Anki::Embedded::SerializedBuffer::Allocate(const char*, const char*, int)
;;;502    
;;;503          if(segment == NULL) {
000046  9001              STR      r0,[sp,#4]
000048  b130              CBZ      r0,|L13.88|
;;;504            return RESULT_FAIL;
;;;505          }
;;;506    
;;;507          if(SerializedBuffer::SerializeDescriptionStrings("EdgeLists", objectName, &segment, totalDataLength) != RESULT_OK)
00004a  466b              MOV      r3,sp
00004c  aa01              ADD      r2,sp,#4
00004e  4629              MOV      r1,r5
000050  a019              ADR      r0,|L13.184|
000052  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer27SerializeDescriptionStringsEPKcS3_PPvRi ; Anki::Embedded::SerializedBuffer::SerializeDescriptionStrings(const char*, const char*, void**, int&)
000056  b110              CBZ      r0,|L13.94|
                  |L13.88|
;;;508            return RESULT_FAIL;
;;;509    
;;;510          // Serialize the template lists
;;;511          SerializedBuffer::SerializeRawBasicType<s32>("imageHeight", this->imageHeight, &segment, totalDataLength);
;;;512          SerializedBuffer::SerializeRawBasicType<s32>("imageWidth", this->imageWidth, &segment, totalDataLength);
;;;513          SerializedBuffer::SerializeRawFixedLengthList<Point<s16> >("xDecreasing", this->xDecreasing, &segment, totalDataLength);
;;;514          SerializedBuffer::SerializeRawFixedLengthList<Point<s16> >("xIncreasing", this->xIncreasing, &segment, totalDataLength);
;;;515          SerializedBuffer::SerializeRawFixedLengthList<Point<s16> >("yDecreasing", this->yDecreasing, &segment, totalDataLength);
;;;516          SerializedBuffer::SerializeRawFixedLengthList<Point<s16> >("yIncreasing", this->yIncreasing, &segment, totalDataLength);
;;;517    
;;;518          return RESULT_OK;
;;;519        }
000058  b003              ADD      sp,sp,#0xc
00005a  2001              MOVS     r0,#1                 ;508
00005c  bd30              POP      {r4,r5,pc}
                  |L13.94|
00005e  466b              MOV      r3,sp                 ;511
000060  aa01              ADD      r2,sp,#4              ;511
000062  f10401d0          ADD      r1,r4,#0xd0           ;511
000066  a017              ADR      r0,|L13.196|
000068  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer21SerializeRawBasicTypeIiEENS_6ResultEPKcRKT_PPvRi ; Anki::Embedded::SerializedBuffer::SerializeRawBasicType<int>(const char*, const T1&, void**, int&)
00006c  466b              MOV      r3,sp                 ;512
00006e  aa01              ADD      r2,sp,#4              ;512
000070  f10401d4          ADD      r1,r4,#0xd4           ;512
000074  a016              ADR      r0,|L13.208|
000076  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer21SerializeRawBasicTypeIiEENS_6ResultEPKcRKT_PPvRi ; Anki::Embedded::SerializedBuffer::SerializeRawBasicType<int>(const char*, const T1&, void**, int&)
00007a  a018              ADR      r0,|L13.220|
00007c  aa01              ADD      r2,sp,#4              ;513
00007e  466b              MOV      r3,sp                 ;513
000080  4621              MOV      r1,r4                 ;513
000082  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi ; Anki::Embedded::SerializedBuffer::SerializeRawArraySlice<Anki::Embedded::Point<short>>(const char*, const Anki::Embedded::ConstArraySlice<T1>&, void**, int&)
000086  a018              ADR      r0,|L13.232|
000088  f1040134          ADD      r1,r4,#0x34           ;514
00008c  aa01              ADD      r2,sp,#4              ;514
00008e  466b              MOV      r3,sp                 ;514
000090  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi ; Anki::Embedded::SerializedBuffer::SerializeRawArraySlice<Anki::Embedded::Point<short>>(const char*, const Anki::Embedded::ConstArraySlice<T1>&, void**, int&)
000094  a017              ADR      r0,|L13.244|
000096  f1040168          ADD      r1,r4,#0x68           ;515
00009a  aa01              ADD      r2,sp,#4              ;515
00009c  466b              MOV      r3,sp                 ;515
00009e  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi ; Anki::Embedded::SerializedBuffer::SerializeRawArraySlice<Anki::Embedded::Point<short>>(const char*, const Anki::Embedded::ConstArraySlice<T1>&, void**, int&)
0000a2  a017              ADR      r0,|L13.256|
0000a4  f104019c          ADD      r1,r4,#0x9c           ;516
0000a8  aa01              ADD      r2,sp,#4              ;516
0000aa  466b              MOV      r3,sp                 ;516
0000ac  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi ; Anki::Embedded::SerializedBuffer::SerializeRawArraySlice<Anki::Embedded::Point<short>>(const char*, const Anki::Embedded::ConstArraySlice<T1>&, void**, int&)
0000b0  b003              ADD      sp,sp,#0xc
0000b2  2000              MOVS     r0,#0                 ;518
0000b4  bd30              POP      {r4,r5,pc}
;;;520    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L13.184|
0000b8  45646765          DCB      "EdgeLists",0
0000bc  4c697374
0000c0  7300    
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L13.196|
0000c4  696d6167          DCB      "imageHeight",0
0000c8  65486569
0000cc  67687400
                  |L13.208|
0000d0  696d6167          DCB      "imageWidth",0
0000d4  65576964
0000d8  746800  
0000db  00                DCB      0
                  |L13.220|
0000dc  78446563          DCB      "xDecreasing",0
0000e0  72656173
0000e4  696e6700
                  |L13.232|
0000e8  78496e63          DCB      "xIncreasing",0
0000ec  72656173
0000f0  696e6700
                  |L13.244|
0000f4  79446563          DCB      "yDecreasing",0
0000f8  72656173
0000fc  696e6700
                  |L13.256|
000100  79496e63          DCB      "yIncreasing",0
000104  72656173
000108  696e6700

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZNK4Anki8Embedded9EdgeLists21get_serializationSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded9EdgeLists21get_serializationSizeEv||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZNK4Anki8Embedded9EdgeLists9SerializeEPKcRNS0_16SerializedBufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded9EdgeLists9SerializeEPKcRNS0_16SerializedBufferE||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN4Anki8Embedded9EdgeLists11DeserializeEPcPPvRiRNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded9EdgeLists11DeserializeEPcPPvRiRNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki8Embedded46DetectBlurredEdges_GrayvalueThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded46DetectBlurredEdges_GrayvalueThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki8Embedded48DetectBlurredEdges_GrayvalueThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded48DetectBlurredEdges_GrayvalueThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki8Embedded37DetectBlurredEdges_GrayvalueThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded37DetectBlurredEdges_GrayvalueThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEhiiRNS0_9EdgeListsE||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki8Embedded37DetectBlurredEdges_GrayvalueThresholdERKNS0_5ArrayIhEEhiiRNS0_9EdgeListsE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded37DetectBlurredEdges_GrayvalueThresholdERKNS0_5ArrayIhEEhiiRNS0_9EdgeListsE||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN4Anki8Embedded47DetectBlurredEdges_DerivativeThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded47DetectBlurredEdges_DerivativeThreshold_VerticalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki8Embedded49DetectBlurredEdges_DerivativeThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded49DetectBlurredEdges_DerivativeThreshold_HorizontalERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki8Embedded38DetectBlurredEdges_DerivativeThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded38DetectBlurredEdges_DerivativeThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiiRNS0_9EdgeListsE||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki8Embedded38DetectBlurredEdges_DerivativeThresholdERKNS0_5ArrayIhEEiiiRNS0_9EdgeListsE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded38DetectBlurredEdges_DerivativeThresholdERKNS0_5ArrayIhEEiiiRNS0_9EdgeListsE||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki8Embedded25ComputeGrayvalueThresholdERKNS0_13IntegerCountsEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded25ComputeGrayvalueThresholdERKNS0_13IntegerCountsEff||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN4Anki8Embedded25ComputeGrayvalueThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiffNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded25ComputeGrayvalueThresholdERKNS0_5ArrayIhEERKNS0_9RectangleIiEEiiffNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a446574          DCB      0x3a,0x44,0x65,0x74
000020  65637442          DCB      0x65,0x63,0x74,0x42
000024  6c757272          DCB      0x6c,0x75,0x72,0x72
000028  65644564          DCB      0x65,0x64,0x45,0x64
00002c  6765735f          DCB      0x67,0x65,0x73,0x5f
000030  47726179          DCB      0x47,0x72,0x61,0x79
000034  76616c75          DCB      0x76,0x61,0x6c,0x75
000038  65546872          DCB      0x65,0x54,0x68,0x72
00003c  6573686f          DCB      0x65,0x73,0x68,0x6f
000040  6c642863          DCB      0x6c,0x64,0x28,0x63
000044  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000048  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00004c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000050  6d626564          DCB      0x6d,0x62,0x65,0x64
000054  6465643a          DCB      0x64,0x65,0x64,0x3a
000058  3a417272          DCB      0x3a,0x41,0x72,0x72
00005c  61793c75          DCB      0x61,0x79,0x3c,0x75
000060  6e736967          DCB      0x6e,0x73,0x69,0x67
000064  6e656420          DCB      0x6e,0x65,0x64,0x20
000068  63686172          DCB      0x63,0x68,0x61,0x72
00006c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000070  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000074  73742041          DCB      0x73,0x74,0x20,0x41
000078  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00007c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000080  65646465          DCB      0x65,0x64,0x64,0x65
000084  643a3a52          DCB      0x64,0x3a,0x3a,0x52
000088  65637461          DCB      0x65,0x63,0x74,0x61
00008c  6e676c65          DCB      0x6e,0x67,0x6c,0x65
000090  3c736967          DCB      0x3c,0x73,0x69,0x67
000094  6e656420          DCB      0x6e,0x65,0x64,0x20
000098  696e743e          DCB      0x69,0x6e,0x74,0x3e
00009c  20262c20          DCB      0x20,0x26,0x2c,0x20
0000a0  756e7369          DCB      0x75,0x6e,0x73,0x69
0000a4  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a8  20636861          DCB      0x20,0x63,0x68,0x61
0000ac  722c2073          DCB      0x72,0x2c,0x20,0x73
0000b0  69676e65          DCB      0x69,0x67,0x6e,0x65
0000b4  6420696e          DCB      0x64,0x20,0x69,0x6e
0000b8  742c2073          DCB      0x74,0x2c,0x20,0x73
0000bc  69676e65          DCB      0x69,0x67,0x6e,0x65
0000c0  6420696e          DCB      0x64,0x20,0x69,0x6e
0000c4  742c2041          DCB      0x74,0x2c,0x20,0x41
0000c8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000cc  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000d0  65646465          DCB      0x65,0x64,0x64,0x65
0000d4  643a3a45          DCB      0x64,0x3a,0x3a,0x45
0000d8  6467654c          DCB      0x64,0x67,0x65,0x4c
0000dc  69737473          DCB      0x69,0x73,0x74,0x73
0000e0  20262900          DCB      0x20,0x26,0x29,0x00
                  |symbol_number.74|
0000e4  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000e8  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
0000ec  73756c74          DCB      0x73,0x75,0x6c,0x74
0000f0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000f4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000f8  6d626564          DCB      0x6d,0x62,0x65,0x64
0000fc  6465643a          DCB      0x64,0x65,0x64,0x3a
000100  3a446574          DCB      0x3a,0x44,0x65,0x74
000104  65637442          DCB      0x65,0x63,0x74,0x42
000108  6c757272          DCB      0x6c,0x75,0x72,0x72
00010c  65644564          DCB      0x65,0x64,0x45,0x64
000110  6765735f          DCB      0x67,0x65,0x73,0x5f
000114  44657269          DCB      0x44,0x65,0x72,0x69
000118  76617469          DCB      0x76,0x61,0x74,0x69
00011c  76655468          DCB      0x76,0x65,0x54,0x68
000120  72657368          DCB      0x72,0x65,0x73,0x68
000124  6f6c6428          DCB      0x6f,0x6c,0x64,0x28
000128  636f6e73          DCB      0x63,0x6f,0x6e,0x73
00012c  7420416e          DCB      0x74,0x20,0x41,0x6e
000130  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000134  456d6265          DCB      0x45,0x6d,0x62,0x65
000138  64646564          DCB      0x64,0x64,0x65,0x64
00013c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000140  7261793c          DCB      0x72,0x61,0x79,0x3c
000144  756e7369          DCB      0x75,0x6e,0x73,0x69
000148  676e6564          DCB      0x67,0x6e,0x65,0x64
00014c  20636861          DCB      0x20,0x63,0x68,0x61
000150  723e2026          DCB      0x72,0x3e,0x20,0x26
000154  2c20636f          DCB      0x2c,0x20,0x63,0x6f
000158  6e737420          DCB      0x6e,0x73,0x74,0x20
00015c  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000160  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000164  62656464          DCB      0x62,0x65,0x64,0x64
000168  65643a3a          DCB      0x65,0x64,0x3a,0x3a
00016c  52656374          DCB      0x52,0x65,0x63,0x74
000170  616e676c          DCB      0x61,0x6e,0x67,0x6c
000174  653c7369          DCB      0x65,0x3c,0x73,0x69
000178  676e6564          DCB      0x67,0x6e,0x65,0x64
00017c  20696e74          DCB      0x20,0x69,0x6e,0x74
000180  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000184  20736967          DCB      0x20,0x73,0x69,0x67
000188  6e656420          DCB      0x6e,0x65,0x64,0x20
00018c  696e742c          DCB      0x69,0x6e,0x74,0x2c
000190  20736967          DCB      0x20,0x73,0x69,0x67
000194  6e656420          DCB      0x6e,0x65,0x64,0x20
000198  696e742c          DCB      0x69,0x6e,0x74,0x2c
00019c  20736967          DCB      0x20,0x73,0x69,0x67
0001a0  6e656420          DCB      0x6e,0x65,0x64,0x20
0001a4  696e742c          DCB      0x69,0x6e,0x74,0x2c
0001a8  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0001ac  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0001b0  6d626564          DCB      0x6d,0x62,0x65,0x64
0001b4  6465643a          DCB      0x64,0x65,0x64,0x3a
0001b8  3a456467          DCB      0x3a,0x45,0x64,0x67
0001bc  654c6973          DCB      0x65,0x4c,0x69,0x73
0001c0  74732026          DCB      0x74,0x73,0x20,0x26
0001c4  29000000          DCB      0x29,0x00,0x00,0x00
0001c8  42617369          DCB      0x42,0x61,0x73,0x69
0001cc  63205479          DCB      0x63,0x20,0x54,0x79
0001d0  70652042          DCB      0x70,0x65,0x20,0x42
0001d4  75666665          DCB      0x75,0x66,0x66,0x65
0001d8  72000000          DCB      0x72,0x00,0x00,0x00
0001dc  41727261          DCB      0x41,0x72,0x72,0x61
0001e0  793c5479          DCB      0x79,0x3c,0x54,0x79
0001e4  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0001e8  3a676574          DCB      0x3a,0x67,0x65,0x74
0001ec  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0001f0  65000000          DCB      0x65,0x00,0x00,0x00
0001f4  4e656761          DCB      0x4e,0x65,0x67,0x61
0001f8  74697665          DCB      0x74,0x69,0x76,0x65
0001fc  2064696d          DCB      0x20,0x64,0x69,0x6d
000200  656e7369          DCB      0x65,0x6e,0x73,0x69
000204  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000208  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
00020c  6f726574          DCB      0x6f,0x72,0x65,0x74
000210  6563685c          DCB      0x65,0x63,0x68,0x5c
000214  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000218  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
00021c  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000220  64655c61          DCB      0x64,0x65,0x5c,0x61
000224  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000228  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
00022c  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000230  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000234  2f617272          DCB      0x2f,0x61,0x72,0x72
000238  61793264          DCB      0x61,0x79,0x32,0x64
00023c  2e680000          DCB      0x2e,0x68,0x00,0x00
000240  53657269          DCB      0x53,0x65,0x72,0x69
000244  616c697a          DCB      0x61,0x6c,0x69,0x7a
000248  65644275          DCB      0x65,0x64,0x42,0x75
00024c  66666572          DCB      0x66,0x66,0x65,0x72
000250  3a3a4465          DCB      0x3a,0x3a,0x44,0x65
000254  73657269          DCB      0x73,0x65,0x72,0x69
000258  616c697a          DCB      0x61,0x6c,0x69,0x7a
00025c  65526177          DCB      0x65,0x52,0x61,0x77
000260  42617369          DCB      0x42,0x61,0x73,0x69
000264  63547970          DCB      0x63,0x54,0x79,0x70
000268  65000000          DCB      0x65,0x00,0x00,0x00
00026c  556e7265          DCB      0x55,0x6e,0x72,0x65
000270  61736f6e          DCB      0x61,0x73,0x6f,0x6e
000274  61626c65          DCB      0x61,0x62,0x6c,0x65
000278  20646573          DCB      0x20,0x64,0x65,0x73
00027c  65726961          DCB      0x65,0x72,0x69,0x61
000280  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000284  64207661          DCB      0x64,0x20,0x76,0x61
000288  6c756573          DCB      0x6c,0x75,0x65,0x73
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000294  6f726574          DCB      0x6f,0x72,0x65,0x74
000298  6563685c          DCB      0x65,0x63,0x68,0x5c
00029c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0002a0  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0002a4  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0002a8  64655c61          DCB      0x64,0x65,0x5c,0x61
0002ac  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0002b0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0002b4  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0002b8  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0002bc  2f736572          DCB      0x2f,0x73,0x65,0x72
0002c0  69616c69          DCB      0x69,0x61,0x6c,0x69
0002c4  7a652e68          DCB      0x7a,0x65,0x2e,0x68
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  41727261          DCB      0x41,0x72,0x72,0x61
0002d0  793c5479          DCB      0x79,0x3c,0x54,0x79
0002d4  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0002d8  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
0002dc  70757465          DCB      0x70,0x75,0x74,0x65
0002e0  52657175          DCB      0x52,0x65,0x71,0x75
0002e4  69726564          DCB      0x69,0x72,0x65,0x64
0002e8  53747269          DCB      0x53,0x74,0x72,0x69
0002ec  64650000          DCB      0x64,0x65,0x00,0x00
0002f0  496e7661          DCB      0x49,0x6e,0x76,0x61
0002f4  6c696420          DCB      0x6c,0x69,0x64,0x20
0002f8  73697a65          DCB      0x73,0x69,0x7a,0x65
0002fc  00                DCB      0x00

                          AREA ||t._ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::ArraySlice<Anki::Embedded::Point<short>>::ArraySlice__sub_object()
                  _ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev PROC ; Anki::Embedded::ArraySlice<Anki::Embedded::Point<short>>::ArraySlice()
;;;73     
;;;74         template<typename Type> ArraySlice<Type>::ArraySlice()
;;;75           : ConstArraySlice<Type>(), arrayData(NULL)
;;;76         {
;;;77         }
;;;78     
000000  b570              PUSH     {r4-r6,lr}
000002  f04f34ff          MOV      r4,#0xffffffff
000006  6004              STR      r4,[r0,#0]
000008  6044              STR      r4,[r0,#4]
00000a  4601              MOV      r1,r0
00000c  6084              STR      r4,[r0,#8]
00000e  f8404f0c          STR      r4,[r0,#0xc]!
000012  2500              MOVS     r5,#0
000014  6044              STR      r4,[r0,#4]
000016  6084              STR      r4,[r0,#8]
000018  f1010024          ADD      r0,r1,#0x24
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000020  f8404d0c          STR      r4,[r0,#-0xc]!
000024  6044              STR      r4,[r0,#4]
000026  6105              STR      r5,[r0,#0x10]
000028  6084              STR      r4,[r0,#8]
00002a  3818              SUBS     r0,r0,#0x18
00002c  62c5              STR      r5,[r0,#0x2c]
00002e  6305              STR      r5,[r0,#0x30]
000030  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.87||, COMGROUP=_ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.87||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE PROC ; Anki::Embedded::SerializedBuffer::DeserializeRawFixedLengthList<Anki::Embedded::Point<short>>(char*, void**, int&, Anki::Embedded::MemoryStack&)
;;;439    
;;;440        template<typename Type> FixedLengthList<Type> SerializedBuffer::DeserializeRawFixedLengthList(char *objectName, void ** buffer, s32 &bufferLength, MemoryStack &memory)
000000  b5f0              PUSH     {r4-r7,lr}
;;;441        {
000002  b09b              SUB      sp,sp,#0x6c
000004  4604              MOV      r4,r0
;;;442          ArraySlice<Type> arraySlice = SerializedBuffer::DeserializeRawArraySlice<Type>(objectName, buffer, bufferLength, memory);
000006  9820              LDR      r0,[sp,#0x80]
000008  9000              STR      r0,[sp,#0]
00000a  a80e              ADD      r0,sp,#0x38
00000c  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackE ; Anki::Embedded::SerializedBuffer::DeserializeRawArraySlice<Anki::Embedded::Point<short>>(char*, void**, int&, Anki::Embedded::MemoryStack&)
000010  9818              LDR      r0,[sp,#0x60]
000012  2500              MOVS     r5,#0
000014  2800              CMP      r0,#0
000016  d034              BEQ      |L93.130|
000018  9814              LDR      r0,[sp,#0x50]
00001a  2800              CMP      r0,#0
00001c  bfa4              ITT      GE
00001e  9815              LDRGE    r0,[sp,#0x54]
000020  2800              CMPGE    r0,#0
000022  db2e              BLT      |L93.130|
;;;443    
;;;444          if(!arraySlice.IsValid())
;;;445            return FixedLengthList<Type>();
;;;446    
;;;447          FixedLengthList<Type> out;
000024  a801              ADD      r0,sp,#4
000026  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev ; Anki::Embedded::ArraySlice<Anki::Embedded::Point<short>>::ArraySlice()
00002a  2100              MOVS     r1,#0
00002c  6305              STR      r5,[r0,#0x30]
00002e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;448    
;;;449          out.ySlice = arraySlice.get_ySlice();
000032  e9dd010e          LDRD     r0,r1,[sp,#0x38]
000036  9a10              LDR      r2,[sp,#0x40]
000038  9203              STR      r2,[sp,#0xc]
00003a  e9cd0101          STRD     r0,r1,[sp,#4]
;;;450          out.xSlice = arraySlice.get_xSlice();
00003e  e9dd0111          LDRD     r0,r1,[sp,#0x44]
000042  9a13              LDR      r2,[sp,#0x4c]
000044  e9cd0104          STRD     r0,r1,[sp,#0x10]
000048  9814              LDR      r0,[sp,#0x50]
00004a  9206              STR      r2,[sp,#0x18]
00004c  9007              STR      r0,[sp,#0x1c]
00004e  9815              LDR      r0,[sp,#0x54]
000050  9008              STR      r0,[sp,#0x20]
000052  9816              LDR      r0,[sp,#0x58]
000054  9009              STR      r0,[sp,#0x24]
000056  9817              LDR      r0,[sp,#0x5c]
000058  900a              STR      r0,[sp,#0x28]
00005a  9818              LDR      r0,[sp,#0x60]
00005c  9909              LDR      r1,[sp,#0x24]
00005e  900b              STR      r0,[sp,#0x2c]
000060  fb050001          MLA      r0,r5,r1,r0
;;;451          out.array = arraySlice.get_array();
;;;452          out.arrayData = out.array.Pointer(0,0);;
000064  f10d0e04          ADD      lr,sp,#4
000068  900d              STR      r0,[sp,#0x34]
00006a  e8be10ef          LDM      lr!,{r0-r3,r5-r7,r12}
00006e  e88410ef          STM      r4,{r0-r3,r5-r7,r12}
000072  ae09              ADD      r6,sp,#0x24
000074  3420              ADDS     r4,r4,#0x20
000076  e8b6100f          LDM      r6!,{r0-r3,r12}
00007a  e8a4100f          STM      r4!,{r0-r3,r12}
;;;453    
;;;454          return out;
;;;455        }
00007e  b01b              ADD      sp,sp,#0x6c
000080  bdf0              POP      {r4-r7,pc}
                  |L93.130|
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev ; Anki::Embedded::ArraySlice<Anki::Embedded::Point<short>>::ArraySlice()
000088  2100              MOVS     r1,#0
00008a  6305              STR      r5,[r0,#0x30]
00008c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
000090  b01b              ADD      sp,sp,#0x6c
000092  bdf0              POP      {r4-r7,pc}
;;;456    
                          ENDP


                          AREA ||area_number.94||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE, LINKORDER=||t._ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.94||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded16SerializedBuffer29DeserializeRawFixedLengthListINS0_5PointIsEEEENS0_15FixedLengthListIT_EEPcPPvRiRNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded8AreValidINS0_5ArrayIhEENS0_15FixedLengthListINS0_5PointIsEEEES7_S7_S7_EEbRKT_RKT0_RKT1_RKT2_RKT3_||, COMGROUP=_ZN4Anki8Embedded8AreValidINS0_5ArrayIhEENS0_15FixedLengthListINS0_5PointIsEEEES7_S7_S7_EEbRKT_RKT0_RKT1_RKT2_RKT3_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded8AreValidINS0_5ArrayIhEENS0_15FixedLengthListINS0_5PointIsEEEES7_S7_S7_EEbRKT_RKT0_RKT1_RKT2_RKT3_ PROC ; Anki::Embedded::AreValid<Anki::Embedded::Array<unsigned char>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>>(const T1&, const T2&, const T3&, const T4&, const T5&)
;;;104    
;;;105        template<typename Type1, typename Type2, typename Type3, typename Type4, typename Type5> bool AreValid(const Type1 &object1, const Type2 &object2, const Type3 &object3, const Type4 &object4, const Type5 &object5)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;106        {
000004  4615              MOV      r5,r2
000006  6902              LDR      r2,[r0,#0x10]
000008  9f06              LDR      r7,[sp,#0x18]
00000a  461c              MOV      r4,r3
00000c  460e              MOV      r6,r1
00000e  2a00              CMP      r2,#0
000010  d054              BEQ      |L100.188|
000012  6802              LDR      r2,[r0,#0]
000014  2a00              CMP      r2,#0
000016  bfa4              ITT      GE
000018  6840              LDRGE    r0,[r0,#4]
00001a  2800              CMPGE    r0,#0
00001c  db4e              BLT      |L100.188|
00001e  2101              MOVS     r1,#1
000020  f1060018          ADD      r0,r6,#0x18
000024  f8d6800c          LDR      r8,[r6,#0xc]
000028  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
00002c  4540              CMP      r0,r8
00002e  db45              BLT      |L100.188|
000030  6ab0              LDR      r0,[r6,#0x28]
000032  b130              CBZ      r0,|L100.66|
000034  69b0              LDR      r0,[r6,#0x18]
000036  2800              CMP      r0,#0
000038  bfa3              ITTTE    GE
00003a  69f0              LDRGE    r0,[r6,#0x1c]
00003c  2800              CMPGE    r0,#0
00003e  2001              MOVGE    r0,#1
000040  2000              MOVLT    r0,#0
                  |L100.66|
;;;107          if(!object1.IsValid() || !object2.IsValid() || !object3.IsValid() || !object4.IsValid() || !object5.IsValid())
000042  2800              CMP      r0,#0
000044  d03a              BEQ      |L100.188|
000046  2101              MOVS     r1,#1
000048  f1050018          ADD      r0,r5,#0x18
00004c  68ee              LDR      r6,[r5,#0xc]
00004e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
000052  4286              CMP      r6,r0
000054  dc32              BGT      |L100.188|
000056  6aa8              LDR      r0,[r5,#0x28]
000058  b130              CBZ      r0,|L100.104|
00005a  69a8              LDR      r0,[r5,#0x18]
00005c  2800              CMP      r0,#0
00005e  bfa3              ITTTE    GE
000060  69e8              LDRGE    r0,[r5,#0x1c]
000062  2800              CMPGE    r0,#0
000064  2001              MOVGE    r0,#1
000066  2000              MOVLT    r0,#0
                  |L100.104|
000068  2800              CMP      r0,#0
00006a  d027              BEQ      |L100.188|
00006c  2101              MOVS     r1,#1
00006e  f1040018          ADD      r0,r4,#0x18
000072  68e5              LDR      r5,[r4,#0xc]
000074  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
000078  4285              CMP      r5,r0
00007a  dc1f              BGT      |L100.188|
00007c  6aa0              LDR      r0,[r4,#0x28]
00007e  b130              CBZ      r0,|L100.142|
000080  69a0              LDR      r0,[r4,#0x18]
000082  2800              CMP      r0,#0
000084  bfa3              ITTTE    GE
000086  69e0              LDRGE    r0,[r4,#0x1c]
000088  2800              CMPGE    r0,#0
00008a  2001              MOVGE    r0,#1
00008c  2000              MOVLT    r0,#0
                  |L100.142|
00008e  b1a8              CBZ      r0,|L100.188|
000090  2101              MOVS     r1,#1
000092  f1070018          ADD      r0,r7,#0x18
000096  68fc              LDR      r4,[r7,#0xc]
000098  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
00009c  4284              CMP      r4,r0
00009e  dc0d              BGT      |L100.188|
0000a0  6ab8              LDR      r0,[r7,#0x28]
0000a2  b130              CBZ      r0,|L100.178|
0000a4  69b8              LDR      r0,[r7,#0x18]
0000a6  2800              CMP      r0,#0
0000a8  bfa3              ITTTE    GE
0000aa  69f8              LDRGE    r0,[r7,#0x1c]
0000ac  2800              CMPGE    r0,#0
0000ae  2001              MOVGE    r0,#1
0000b0  2000              MOVLT    r0,#0
                  |L100.178|
0000b2  2800              CMP      r0,#0
;;;108            return false;
;;;109    
;;;110          return true;
0000b4  bf1c              ITT      NE
0000b6  2001              MOVNE    r0,#1
;;;111        }
0000b8  e8bd81f0          POPNE    {r4-r8,pc}
                  |L100.188|
0000bc  2000              MOVS     r0,#0                 ;108
0000be  e8bd81f0          POP      {r4-r8,pc}
;;;112    
                          ENDP


                          AREA ||area_number.101||, COMGROUP=_ZN4Anki8Embedded8AreValidINS0_5ArrayIhEENS0_15FixedLengthListINS0_5PointIsEEEES7_S7_S7_EEbRKT_RKT0_RKT1_RKT2_RKT3_, LINKORDER=||t._ZN4Anki8Embedded8AreValidINS0_5ArrayIhEENS0_15FixedLengthListINS0_5PointIsEEEES7_S7_S7_EEbRKT_RKT0_RKT1_RKT2_RKT3_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.101||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded8AreValidINS0_5ArrayIhEENS0_15FixedLengthListINS0_5PointIsEEEES7_S7_S7_EEbRKT_RKT0_RKT1_RKT2_RKT3_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded16SerializedBuffer21SerializeRawBasicTypeIiEENS_6ResultEPKcRKT_PPvRi||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer21SerializeRawBasicTypeIiEENS_6ResultEPKcRKT_PPvRi, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded16SerializedBuffer21SerializeRawBasicTypeIiEENS_6ResultEPKcRKT_PPvRi PROC ; Anki::Embedded::SerializedBuffer::SerializeRawBasicType<int>(const char*, const T1&, void**, int&)
;;;133    
;;;134        template<typename Type> Result SerializedBuffer::SerializeRawBasicType(const char *objectName, const Type &in, void ** buffer, s32 &bufferLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;135        {
;;;136          return SerializeRawBasicType(objectName, &in, 1, buffer, bufferLength);
000004  460f              MOV      r7,r1
000006  4601              MOV      r1,r0
000008  461d              MOV      r5,r3                 ;135
00000a  4614              MOV      r4,r2                 ;135
00000c  2601              MOVS     r6,#1
00000e  4812              LDR      r0,|L107.88|
000010  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer27SerializeDescriptionStringsEPKcS3_PPvRi ; Anki::Embedded::SerializedBuffer::SerializeDescriptionStrings(const char*, const char*, void**, int&)
000014  2800              CMP      r0,#0
000016  bf1c              ITT      NE
000018  2001              MOVNE    r0,#1
;;;137        }
00001a  e8bd81f0          POPNE    {r4-r8,pc}
00001e  6828              LDR      r0,[r5,#0]
000020  2808              CMP      r0,#8
000022  db0a              BLT      |L107.58|
000024  6821              LDR      r1,[r4,#0]
000026  480d              LDR      r0,|L107.92|
000028  6008              STR      r0,[r1,#0]
00002a  6820              LDR      r0,[r4,#0]
00002c  6046              STR      r6,[r0,#4]
00002e  6820              LDR      r0,[r4,#0]
000030  3008              ADDS     r0,r0,#8
000032  6020              STR      r0,[r4,#0]
000034  6828              LDR      r0,[r5,#0]
000036  3808              SUBS     r0,r0,#8
000038  6028              STR      r0,[r5,#0]
                  |L107.58|
00003a  2204              MOVS     r2,#4
00003c  4639              MOV      r1,r7
00003e  6820              LDR      r0,[r4,#0]
000040  f7fffffe          BL       __aeabi_memcpy
000044  6820              LDR      r0,[r4,#0]
000046  1d00              ADDS     r0,r0,#4
000048  6020              STR      r0,[r4,#0]
00004a  6828              LDR      r0,[r5,#0]
00004c  1f00              SUBS     r0,r0,#4
00004e  6028              STR      r0,[r5,#0]
000050  2000              MOVS     r0,#0
000052  e8bd81f0          POP      {r4-r8,pc}
;;;138    
                          ENDP

000056  0000              DCW      0x0000
                  |L107.88|
                          DCD      ||.constdata||+0x1c8
                  |L107.92|
                          DCD      0x00040007

                          AREA ||area_number.108||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer21SerializeRawBasicTypeIiEENS_6ResultEPKcRKT_PPvRi, LINKORDER=||t._ZN4Anki8Embedded16SerializedBuffer21SerializeRawBasicTypeIiEENS_6ResultEPKcRKT_PPvRi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.108||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded16SerializedBuffer21SerializeRawBasicTypeIiEENS_6ResultEPKcRKT_PPvRi||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi PROC ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L114.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L114.56|
00000e  4b0b              LDR      r3,|L114.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L114.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L114.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const::__PRETTY_FUNCTION__
                  |L114.60|
                          DCD      ||.constdata||+0x208

                          AREA ||area_number.115||, COMGROUP=_ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.115||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi PROC ; Anki::Embedded::SerializedBuffer::SerializeRawArraySlice<Anki::Embedded::Point<short>>(const char*, const Anki::Embedded::ConstArraySlice<T1>&, void**, int&)
;;;186    
;;;187        template<typename Type> Result SerializedBuffer::SerializeRawArraySlice(const char *objectName, const ConstArraySlice<Type> &in, void ** buffer, s32 &bufferLength)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;188        {
000004  460d              MOV      r5,r1
000006  6a89              LDR      r1,[r1,#0x28]
;;;189          AnkiConditionalErrorAndReturnValue(in.IsValid(),
000008  4f73              LDR      r7,|L121.472|
00000a  b087              SUB      sp,sp,#0x1c           ;188
00000c  461e              MOV      r6,r3                 ;188
00000e  4614              MOV      r4,r2                 ;188
000010  2900              CMP      r1,#0                 ;188
000012  d02e              BEQ      |L121.114|
000014  69a9              LDR      r1,[r5,#0x18]         ;188
000016  2900              CMP      r1,#0                 ;188
000018  bfa4              ITT      GE                    ;188
00001a  69e9              LDRGE    r1,[r5,#0x1c]         ;188
00001c  2900              CMPGE    r1,#0                 ;188
00001e  db28              BLT      |L121.114|
;;;190            RESULT_FAIL, "SerializedBuffer::SerializeRawArraySlice", "in ArraySlice is not Valid");
;;;191    
;;;192          if(SerializeDescriptionStrings("ArraySlice", objectName, buffer, bufferLength) != RESULT_OK)
000020  4601              MOV      r1,r0
000022  a06e              ADR      r0,|L121.476|
000024  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer27SerializeDescriptionStringsEPKcS3_PPvRi ; Anki::Embedded::SerializedBuffer::SerializeDescriptionStrings(const char*, const char*, void**, int&)
000028  2800              CMP      r0,#0
;;;193            return RESULT_FAIL;
00002a  bf1e              ITTT     NE
00002c  2001              MOVNE    r0,#1
;;;194    
;;;195          // NOTE: these parameters are the size that will be transmitted, not the original size
;;;196          const u32 height = in.get_ySlice().get_size();
;;;197          const u32 width = in.get_xSlice().get_size();
;;;198          const u32 stride = width*sizeof(Type);
;;;199    
;;;200          const s32 numRequiredBytes = height*stride + SerializedBuffer::EncodedArraySlice::CODE_LENGTH;
;;;201    
;;;202          AnkiConditionalErrorAndReturnValue(bufferLength >= numRequiredBytes,
;;;203            RESULT_FAIL_OUT_OF_MEMORY, "SerializedBuffer::SerializeRawArraySlice", "buffer needs at least %d bytes", numRequiredBytes);
;;;204    
;;;205          SerializedBuffer::EncodedArraySlice::Serialize<Type>(true, in, buffer, bufferLength);
;;;206    
;;;207          // TODO: this could be done more efficiently
;;;208          Type * restrict pDataType = reinterpret_cast<Type*>(*buffer);
;;;209          s32 iData = 0;
;;;210    
;;;211          const LinearSequence<s32>& ySlice = in.get_ySlice();
;;;212          const LinearSequence<s32>& xSlice = in.get_xSlice();
;;;213    
;;;214          const s32 yStart = ySlice.get_start();
;;;215          const s32 yIncrement = ySlice.get_increment();
;;;216          const s32 ySize = ySlice.get_size();
;;;217    
;;;218          const s32 xStart = xSlice.get_start();
;;;219          const s32 xIncrement = xSlice.get_increment();
;;;220          const s32 xSize = xSlice.get_size();
;;;221    
;;;222          for(s32 iy=0; iy<ySize; iy++) {
;;;223            const s32 y = yStart + iy * yIncrement;
;;;224            const Type * restrict pInData = in.get_array().Pointer(y, 0);
;;;225    
;;;226            for(s32 ix=0; ix<xSize; ix++) {
;;;227              const s32 x = xStart + ix * xIncrement;
;;;228              pDataType[iData] = pInData[x];
;;;229              iData++;
;;;230            }
;;;231          }
;;;232    
;;;233          AnkiAssert(iData == stride*height);
;;;234    
;;;235          *buffer = reinterpret_cast<u8*>(*buffer) + stride*height;
;;;236          bufferLength -= stride*height;
;;;237    
;;;238          return RESULT_OK;
;;;239        }
00002e  b007              ADDNE    sp,sp,#0x1c
000030  e8bd8ff0          POPNE    {r4-r11,pc}
000034  f8d5a000          LDR      r10,[r5,#0]           ;196
000038  f8cda008          STR      r10,[sp,#8]           ;196
00003c  f8d5900c          LDR      r9,[r5,#0xc]          ;198
000040  f105080c          ADD      r8,r5,#0xc            ;198
000044  ea4f0089          LSL      r0,r9,#2              ;198
000048  9003              STR      r0,[sp,#0xc]          ;200
00004a  fb0af000          MUL      r0,r10,r0             ;200
00004e  6831              LDR      r1,[r6,#0]            ;202
000050  3030              ADDS     r0,r0,#0x30           ;200
000052  4281              CMP      r1,r0                 ;202
000054  da1a              BGE      |L121.140|
000056  21ca              MOVS     r1,#0xca              ;202
000058  9700              STR      r7,[sp,#0]            ;202
00005a  e9cd1001          STRD     r1,r0,[sp,#4]         ;202
00005e  a362              ADR      r3,|L121.488|
000060  a270              ADR      r2,|L121.548|
000062  a178              ADR      r1,|L121.580|
000064  2005              MOVS     r0,#5                 ;202
000066  f7fffffe          BL       _Anki_Log
00006a  b007              ADD      sp,sp,#0x1c
00006c  4880              LDR      r0,|L121.624|
00006e  e8bd8ff0          POP      {r4-r11,pc}
                  |L121.114|
000072  20bd              MOVS     r0,#0xbd              ;189
000074  e9cd7000          STRD     r7,r0,[sp,#0]         ;189
000078  a35b              ADR      r3,|L121.488|
00007a  a27e              ADR      r2,|L121.628|
00007c  a171              ADR      r1,|L121.580|
00007e  2005              MOVS     r0,#5                 ;189
000080  f7fffffe          BL       _Anki_Log
000084  b007              ADD      sp,sp,#0x1c
000086  2001              MOVS     r0,#1                 ;189
000088  e8bd8ff0          POP      {r4-r11,pc}
                  |L121.140|
00008c  f1050718          ADD      r7,r5,#0x18
000090  2930              CMP      r1,#0x30
000092  db54              BLT      |L121.318|
000094  6aa8              LDR      r0,[r5,#0x28]
000096  2800              CMP      r0,#0
000098  d07e              BEQ      |L121.408|
00009a  69a8              LDR      r0,[r5,#0x18]
00009c  2800              CMP      r0,#0
00009e  bfa4              ITT      GE
0000a0  69e8              LDRGE    r0,[r5,#0x1c]
0000a2  2800              CMPGE    r0,#0
0000a4  db78              BLT      |L121.408|
0000a6  6869              LDR      r1,[r5,#4]
0000a8  9106              STR      r1,[sp,#0x18]
0000aa  68a8              LDR      r0,[r5,#8]
0000ac  9005              STR      r0,[sp,#0x14]
0000ae  f8d80004          LDR      r0,[r8,#4]
0000b2  9004              STR      r0,[sp,#0x10]
0000b4  f8d80008          LDR      r0,[r8,#8]
0000b8  9001              STR      r0,[sp,#4]
0000ba  2100              MOVS     r1,#0
0000bc  4638              MOV      r0,r7
0000be  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
0000c2  4683              MOV      r11,r0
0000c4  2101              MOVS     r1,#1
0000c6  4638              MOV      r0,r7
0000c8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
0000cc  6831              LDR      r1,[r6,#0]
0000ce  fb0bf000          MUL      r0,r11,r0
0000d2  2908              CMP      r1,#8
0000d4  db05              BLT      |L121.226|
0000d6  6822              LDR      r2,[r4,#0]
0000d8  f44f2180          MOV      r1,#0x40000
0000dc  6011              STR      r1,[r2,#0]
0000de  6821              LDR      r1,[r4,#0]
0000e0  6048              STR      r0,[r1,#4]
                  |L121.226|
0000e2  2100              MOVS     r1,#0
0000e4  4638              MOV      r0,r7
0000e6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
0000ea  6821              LDR      r1,[r4,#0]
0000ec  6088              STR      r0,[r1,#8]
0000ee  2101              MOVS     r1,#1
0000f0  4638              MOV      r0,r7
0000f2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
0000f6  6821              LDR      r1,[r4,#0]
0000f8  60c8              STR      r0,[r1,#0xc]
0000fa  6821              LDR      r1,[r4,#0]
0000fc  68b8              LDR      r0,[r7,#8]
0000fe  6108              STR      r0,[r1,#0x10]
000100  68f8              LDR      r0,[r7,#0xc]
000102  9000              STR      r0,[sp,#0]
000104  4668              MOV      r0,sp
000106  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer12get_rawFlagsEv ; Anki::Embedded::Flags::Buffer::get_rawFlags() const
00010a  6821              LDR      r1,[r4,#0]
00010c  6148              STR      r0,[r1,#0x14]
00010e  6821              LDR      r1,[r4,#0]
000110  9806              LDR      r0,[sp,#0x18]
000112  6188              STR      r0,[r1,#0x18]
000114  6821              LDR      r1,[r4,#0]
000116  9805              LDR      r0,[sp,#0x14]
000118  61c8              STR      r0,[r1,#0x1c]
00011a  6820              LDR      r0,[r4,#0]
00011c  f8c0a020          STR      r10,[r0,#0x20]
000120  6821              LDR      r1,[r4,#0]
000122  9804              LDR      r0,[sp,#0x10]
000124  6248              STR      r0,[r1,#0x24]
000126  6821              LDR      r1,[r4,#0]
000128  9801              LDR      r0,[sp,#4]
00012a  6288              STR      r0,[r1,#0x28]
00012c  6820              LDR      r0,[r4,#0]
00012e  f8c0902c          STR      r9,[r0,#0x2c]
000132  6820              LDR      r0,[r4,#0]
000134  3030              ADDS     r0,r0,#0x30
000136  6020              STR      r0,[r4,#0]
000138  6830              LDR      r0,[r6,#0]
00013a  3830              SUBS     r0,r0,#0x30
00013c  6030              STR      r0,[r6,#0]
                  |L121.318|
00013e  f8d4a000          LDR      r10,[r4,#0]
000142  6868              LDR      r0,[r5,#4]            ;214
000144  9000              STR      r0,[sp,#0]            ;214
000146  68a8              LDR      r0,[r5,#8]            ;215
000148  9001              STR      r0,[sp,#4]            ;215
00014a  6828              LDR      r0,[r5,#0]            ;216
00014c  9004              STR      r0,[sp,#0x10]         ;216
00014e  e9d8b901          LDRD     r11,r9,[r8,#4]        ;216
000152  2100              MOVS     r1,#0                 ;209
000154  f8d88000          LDR      r8,[r8,#0]            ;209
000158  460d              MOV      r5,r1                 ;222
00015a  2800              CMP      r0,#0                 ;222
00015c  dd21              BLE      |L121.418|
                  |L121.350|
00015e  e9dd0200          LDRD     r0,r2,[sp,#0]         ;222
000162  fb050002          MLA      r0,r5,r2,r0           ;223
000166  68bb              LDR      r3,[r7,#8]            ;223
000168  693a              LDR      r2,[r7,#0x10]         ;223
00016a  fb002e03          MLA      lr,r0,r3,r2           ;223
00016e  2000              MOVS     r0,#0                 ;226
000170  f1b80f00          CMP      r8,#0                 ;226
000174  dd0f              BLE      |L121.406|
                  |L121.374|
000176  fb00b209          MLA      r2,r0,r9,r11          ;227
00017a  eb0a0c81          ADD      r12,r10,r1,LSL #2     ;228
00017e  eb0e0282          ADD      r2,lr,r2,LSL #2       ;228
000182  1c49              ADDS     r1,r1,#1              ;229
000184  8813              LDRH     r3,[r2,#0]            ;229
000186  f8ac3000          STRH     r3,[r12,#0]           ;229
00018a  8852              LDRH     r2,[r2,#2]            ;229
00018c  1c40              ADDS     r0,r0,#1              ;226
00018e  f8ac2002          STRH     r2,[r12,#2]           ;226
000192  4580              CMP      r8,r0                 ;226
000194  dcef              BGT      |L121.374|
                  |L121.406|
000196  e000              B        |L121.410|
                  |L121.408|
000198  e013              B        |L121.450|
                  |L121.410|
00019a  9804              LDR      r0,[sp,#0x10]         ;222
00019c  1c6d              ADDS     r5,r5,#1              ;222
00019e  4285              CMP      r5,r0                 ;222
0001a0  dbdd              BLT      |L121.350|
                  |L121.418|
0001a2  e9dd1002          LDRD     r1,r0,[sp,#8]         ;235
0001a6  6822              LDR      r2,[r4,#0]            ;235
0001a8  fb002001          MLA      r0,r0,r1,r2           ;235
0001ac  6020              STR      r0,[r4,#0]            ;236
0001ae  e9dd1002          LDRD     r1,r0,[sp,#8]         ;236
0001b2  6832              LDR      r2,[r6,#0]            ;236
0001b4  fb002011          MLS      r0,r0,r1,r2           ;236
0001b8  6030              STR      r0,[r6,#0]            ;238
0001ba  b007              ADD      sp,sp,#0x1c
0001bc  2000              MOVS     r0,#0                 ;238
0001be  e8bd8ff0          POP      {r4-r11,pc}
                  |L121.450|
0001c2  2166              MOVS     r1,#0x66
0001c4  4832              LDR      r0,|L121.656|
0001c6  e9cd0100          STRD     r0,r1,[sp,#0]
0001ca  a307              ADR      r3,|L121.488|
0001cc  a231              ADR      r2,|L121.660|
0001ce  a136              ADR      r1,|L121.680|
0001d0  2005              MOVS     r0,#5
0001d2  f7fffffe          BL       _Anki_Log
0001d6  e7b2              B        |L121.318|
;;;240    
                          ENDP

                  |L121.472|
                          DCD      _ZZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRiE19__PRETTY_FUNCTION__ ; Anki::Embedded::SerializedBuffer::SerializeRawArraySlice<Anki::Embedded::Point<short>>(const char*, const Anki::Embedded::ConstArraySlice<T1>&, void**, int&)::__PRETTY_FUNCTION__
                  |L121.476|
0001dc  41727261          DCB      "ArraySlice",0
0001e0  79536c69
0001e4  636500  
0001e7  00                DCB      0
                  |L121.488|
0001e8  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/serial"
0001ec  6f726574
0001f0  6563685c
0001f4  636f6d6d
0001f8  6f6e5c69
0001fc  6e636c75
000200  64655c61
000204  6e6b692f
000208  636f6d6d
00020c  6f6e2f72
000210  6f626f74
000214  2f736572
000218  69616c  
00021b  697a652e          DCB      "ize.h",0
00021f  6800    
000221  00                DCB      0
000222  00                DCB      0
000223  00                DCB      0
                  |L121.548|
000224  62756666          DCB      "buffer needs at least %d bytes",0
000228  6572206e
00022c  65656473
000230  20617420
000234  6c656173
000238  74202564
00023c  20627974
000240  657300  
000243  00                DCB      0
                  |L121.580|
000244  53657269          DCB      "SerializedBuffer::SerializeRawArraySlice",0
000248  616c697a
00024c  65644275
000250  66666572
000254  3a3a5365
000258  7269616c
00025c  697a6552
000260  61774172
000264  72617953
000268  6c696365
00026c  00      
00026d  00                DCB      0
00026e  00                DCB      0
00026f  00                DCB      0
                  |L121.624|
                          DCD      0x01000001
                  |L121.628|
000274  696e2041          DCB      "in ArraySlice is not Valid",0
000278  72726179
00027c  536c6963
000280  65206973
000284  206e6f74
000288  2056616c
00028c  696400  
00028f  00                DCB      0
                  |L121.656|
                          DCD      _ZZN4Anki8Embedded16SerializedBuffer17EncodedArraySlice9SerializeINS0_5PointIsEEEENS_6ResultEbRKNS0_15ConstArraySliceIT_EEPPvRiE19__PRETTY_FUNCTION__ ; Anki::Embedded::SerializedBuffer::EncodedArraySlice::Serialize<Anki::Embedded::Point<short>>(bool, const Anki::Embedded::ConstArraySlice<T1>&, void**, int&)::__PRETTY_FUNCTION__
                  |L121.660|
000294  696e2041          DCB      "in Array is invalid",0
000298  72726179
00029c  20697320
0002a0  696e7661
0002a4  6c696400
                  |L121.680|
0002a8  53657269          DCB      "SerializedBuffer::EncodedArraySlice",0
0002ac  616c697a
0002b0  65644275
0002b4  66666572
0002b8  3a3a456e
0002bc  636f6465
0002c0  64417272
0002c4  6179536c
0002c8  69636500

                          AREA ||area_number.122||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi, LINKORDER=||t._ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.122||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRi||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRi, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRi PROC ; Anki::Embedded::SerializedBuffer::DeserializeRawBasicType<int>(char*, void**, int&)
;;;245    
;;;246        template<typename Type> Type SerializedBuffer::DeserializeRawBasicType(char *objectName, void ** buffer, s32 &bufferLength)
000000  b530              PUSH     {r4,r5,lr}
;;;247        {
000002  4614              MOV      r4,r2
;;;248          // TODO: check if description is valid
;;;249          DeserializeDescriptionStrings(NULL, objectName, buffer, bufferLength);
000004  4613              MOV      r3,r2
000006  460d              MOV      r5,r1                 ;247
000008  460a              MOV      r2,r1
00000a  4601              MOV      r1,r0
00000c  b08d              SUB      sp,sp,#0x34           ;247
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer29DeserializeDescriptionStringsEPcS2_PPvRi ; Anki::Embedded::SerializedBuffer::DeserializeDescriptionStrings(char*, char*, void**, int&)
;;;250    
;;;251          // TODO: check if encoded type is valid
;;;252          u16 sizeOfType;
;;;253          bool isBasicType;
;;;254          bool isInteger;
;;;255          bool isSigned;
;;;256          bool isFloat;
;;;257          bool isString;
;;;258          s32 numElements;
;;;259          EncodedBasicTypeBuffer::Deserialize(true, sizeOfType, isBasicType, isInteger, isSigned, isFloat, isString, numElements, buffer, bufferLength);
000014  a807              ADD      r0,sp,#0x1c
000016  a90c              ADD      r1,sp,#0x30
000018  e9cd1002          STRD     r1,r0,[sp,#8]
00001c  a80b              ADD      r0,sp,#0x2c
00001e  a90a              ADD      r1,sp,#0x28
000020  e9cd1000          STRD     r1,r0,[sp,#0]
000024  e9cd5404          STRD     r5,r4,[sp,#0x10]
000028  ab09              ADD      r3,sp,#0x24
00002a  aa08              ADD      r2,sp,#0x20
00002c  a906              ADD      r1,sp,#0x18
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer22EncodedBasicTypeBuffer11DeserializeEbRtRbS4_S4_S4_S4_RiPPvS5_ ; Anki::Embedded::SerializedBuffer::EncodedBasicTypeBuffer::Deserialize(bool, unsigned short&, bool&, bool&, bool&, bool&, bool&, int&, void**, int&)
;;;260    
;;;261          const Type var = *reinterpret_cast<Type*>(*buffer);
000034  682b              LDR      r3,[r5,#0]
;;;262    
;;;263          AnkiConditionalErrorAndReturnValue(sizeOfType < 10000 && numElements > 0 && numElements < 1000000,
000036  f8bd2018          LDRH     r2,[sp,#0x18]
00003a  f2427110          MOV      r1,#0x2710
00003e  6818              LDR      r0,[r3,#0]
000040  428a              CMP      r2,r1
000042  d206              BCS      |L128.82|
000044  9907              LDR      r1,[sp,#0x1c]
000046  2900              CMP      r1,#0
000048  bfc4              ITT      GT
00004a  f8dfc038          LDRGT    r12,|L128.132|
00004e  458c              CMPGT    r12,r1
000050  dc0f              BGT      |L128.114|
                  |L128.82|
000052  f2401107          MOV      r1,#0x107
000056  480c              LDR      r0,|L128.136|
000058  4b0c              LDR      r3,|L128.140|
00005a  e9cd0100          STRD     r0,r1,[sp,#0]
00005e  f1a30224          SUB      r2,r3,#0x24
000062  f1a2012c          SUB      r1,r2,#0x2c
000066  2005              MOVS     r0,#5
000068  f7fffffe          BL       _Anki_Log
;;;264            Type(), "SerializedBuffer::DeserializeRawBasicType", "Unreasonable deserialized values");
;;;265    
;;;266          *buffer = reinterpret_cast<u8*>(*buffer) + sizeOfType*numElements;
;;;267          bufferLength -= sizeOfType*numElements;
;;;268    
;;;269          return var;
;;;270        }
00006c  b00d              ADD      sp,sp,#0x34
00006e  2000              MOVS     r0,#0                 ;263
000070  bd30              POP      {r4,r5,pc}
                  |L128.114|
000072  fb023301          MLA      r3,r2,r1,r3           ;266
000076  602b              STR      r3,[r5,#0]            ;267
000078  6823              LDR      r3,[r4,#0]            ;267
00007a  fb023111          MLS      r1,r2,r1,r3           ;267
00007e  6021              STR      r1,[r4,#0]            ;267
000080  b00d              ADD      sp,sp,#0x34
000082  bd30              POP      {r4,r5,pc}
;;;271    
                          ENDP

                  |L128.132|
                          DCD      0x000f4240
                  |L128.136|
                          DCD      _ZZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRiE19__PRETTY_FUNCTION__ ; Anki::Embedded::SerializedBuffer::DeserializeRawBasicType<int>(char*, void**, int&)::__PRETTY_FUNCTION__
                  |L128.140|
                          DCD      ||.constdata||+0x290

                          AREA ||area_number.129||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRi, LINKORDER=||t._ZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.129||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  b570              PUSH     {r4-r6,lr}
;;;182        {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
000006  2101              MOVS     r1,#1
000008  3018              ADDS     r0,r0,#0x18
00000a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
00000e  4601              MOV      r1,r0
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000010  2c00              CMP      r4,#0
000012  bfb4              ITE      LT
000014  2000              MOVLT    r0,#0
000016  4620              MOVGE    r0,r4
000018  4288              CMP      r0,r1
00001a  dd06              BLE      |L135.42|
00001c  2101              MOVS     r1,#1
00001e  f1050018          ADD      r0,r5,#0x18
000022  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEi ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const
000026  4604              MOV      r4,r0
000028  e002              B        |L135.48|
                  |L135.42|
00002a  2c00              CMP      r4,#0
00002c  bfb8              IT       LT
00002e  2400              MOVLT    r4,#0
                  |L135.48|
000030  4620              MOV      r0,r4
;;;184    
;;;185          this->xSlice.size = newSize;
000032  60ec              STR      r4,[r5,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
000034  bd70              POP      {r4-r6,pc}
;;;189    
                          ENDP


                          AREA ||area_number.136||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.136||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackE||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackE PROC ; Anki::Embedded::SerializedBuffer::DeserializeRawArraySlice<Anki::Embedded::Point<short>>(char*, void**, int&, Anki::Embedded::MemoryStack&)
;;;358    
;;;359        template<typename Type> ArraySlice<Type> SerializedBuffer::DeserializeRawArraySlice(char *objectName, void ** buffer, s32 &bufferLength, MemoryStack &memory)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;360        {
000004  b0bb              SUB      sp,sp,#0xec
000006  4604              MOV      r4,r0
000008  461f              MOV      r7,r3
00000a  4690              MOV      r8,r2
;;;361          // TODO: check if description is valid
;;;362          DeserializeDescriptionStrings(NULL, objectName, buffer, bufferLength);
00000c  2000              MOVS     r0,#0
00000e  9d44              LDR      r5,[sp,#0x110]
000010  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer29DeserializeDescriptionStringsEPcS2_PPvRi ; Anki::Embedded::SerializedBuffer::DeserializeDescriptionStrings(char*, char*, void**, int&)
;;;363    
;;;364          // TODO: check if encoded type is valid
;;;365          s32 height;
;;;366          s32 width;
;;;367          s32 stride;
;;;368          Flags::Buffer flags;
000014  a833              ADD      r0,sp,#0xcc
000016  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
;;;369          s32 ySlice_start;
;;;370          s32 ySlice_increment;
;;;371          s32 ySlice_size;
;;;372          s32 xSlice_start;
;;;373          s32 xSlice_increment;
;;;374          s32 xSlice_size;
;;;375          u16 basicType_sizeOfType;
;;;376          bool basicType_isBasicType;
;;;377          bool basicType_isInteger;
;;;378          bool basicType_isSigned;
;;;379          bool basicType_isFloat;
;;;380          bool basicType_isString;
;;;381          s32 basicType_numElements;
;;;382          EncodedArraySlice::Deserialize(true, height, width, stride, flags, ySlice_start, ySlice_increment, ySlice_size, xSlice_start, xSlice_increment, xSlice_size, basicType_sizeOfType, basicType_isBasicType, basicType_isInteger, basicType_isSigned, basicType_isFloat, basicType_isString, basicType_numElements, buffer, bufferLength);
00001a  a832              ADD      r0,sp,#0xc8
00001c  a939              ADD      r1,sp,#0xe4
00001e  e9cd100c          STRD     r1,r0,[sp,#0x30]
000022  a838              ADD      r0,sp,#0xe0
000024  a937              ADD      r1,sp,#0xdc
000026  e9cd100a          STRD     r1,r0,[sp,#0x28]
00002a  aa36              ADD      r2,sp,#0xd8
00002c  ab35              ADD      r3,sp,#0xd4
00002e  e9cd3208          STRD     r3,r2,[sp,#0x20]
000032  a831              ADD      r0,sp,#0xc4
000034  a929              ADD      r1,sp,#0xa4
000036  e9cd1006          STRD     r1,r0,[sp,#0x18]
00003a  aa2f              ADD      r2,sp,#0xbc
00003c  ab2e              ADD      r3,sp,#0xb8
00003e  e9cd3204          STRD     r3,r2,[sp,#0x10]
000042  aa2c              ADD      r2,sp,#0xb0
000044  ab33              ADD      r3,sp,#0xcc
000046  e9cd3200          STRD     r3,r2,[sp,#0]
00004a  a828              ADD      r0,sp,#0xa0
00004c  a92d              ADD      r1,sp,#0xb4
00004e  e9cd1002          STRD     r1,r0,[sp,#8]
000052  e9cd870e          STRD     r8,r7,[sp,#0x38]
000056  ab30              ADD      r3,sp,#0xc0
000058  aa2b              ADD      r2,sp,#0xac
00005a  a92a              ADD      r1,sp,#0xa8
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       _ZN4Anki8Embedded16SerializedBuffer17EncodedArraySlice11DeserializeEbRiS3_S3_RNS0_5Flags6BufferES3_S3_S3_S3_S3_S3_RtRbS8_S8_S8_S8_S3_PPvS3_ ; Anki::Embedded::SerializedBuffer::EncodedArraySlice::Deserialize(bool, int&, int&, int&, Anki::Embedded::Flags::Buffer&, int&, int&, int&, int&, int&, int&, unsigned short&, bool&, bool&, bool&, bool&, bool&, int&, void**, int&)
;;;383    
;;;384          AnkiConditionalErrorAndReturnValue(
000062  4995              LDR      r1,|L142.696|
000064  982a              LDR      r0,[sp,#0xa8]
000066  f8df9254          LDR      r9,|L142.700|
00006a  4288              CMP      r0,r1
00006c  d22b              BCS      |L142.198|
00006e  982b              LDR      r0,[sp,#0xac]
000070  2800              CMP      r0,#0
000072  bfa4              ITT      GE
000074  f8dfb248          LDRGE    r11,|L142.704|
000078  4583              CMPGE    r11,r0
00007a  dd24              BLE      |L142.198|
00007c  9a30              LDR      r2,[sp,#0xc0]
00007e  2a00              CMP      r2,#0
000080  bfc8              IT       GT
000082  4593              CMPGT    r11,r2
000084  dd1f              BLE      |L142.198|
000086  f8dda0b0          LDR      r10,[sp,#0xb0]
00008a  f1ba0f00          CMP      r10,#0
00008e  bfa4              ITT      GE
000090  9e2d              LDRGE    r6,[sp,#0xb4]
000092  2e00              CMPGE    r6,#0
000094  dd17              BLE      |L142.198|
000096  f8ddc0b8          LDR      r12,[sp,#0xb8]
00009a  f1bc0f00          CMP      r12,#0
00009e  bfa4              ITT      GE
0000a0  992f              LDRGE    r1,[sp,#0xbc]
0000a2  2900              CMPGE    r1,#0
0000a4  bfc4              ITT      GT
0000a6  4b87              LDRGT    r3,|L142.708|
0000a8  428b              CMPGT    r3,r1
0000aa  dd0c              BLE      |L142.198|
0000ac  f8bd30c4          LDRH     r3,[sp,#0xc4]
0000b0  2b00              CMP      r3,#0
0000b2  bf1c              ITT      NE
0000b4  f2427e10          MOVNE    lr,#0x2710
0000b8  4573              CMPNE    r3,lr
0000ba  d204              BCS      |L142.198|
0000bc  9b32              LDR      r3,[sp,#0xc8]
0000be  2b00              CMP      r3,#0
0000c0  bfa8              IT       GE
0000c2  459b              CMPGE    r11,r3
0000c4  dc0f              BGT      |L142.230|
                  |L142.198|
0000c6  f44f70c0          MOV      r0,#0x180
0000ca  e9cd9000          STRD     r9,r0,[sp,#0]
0000ce  a37e              ADR      r3,|L142.712|
0000d0  a28c              ADR      r2,|L142.772|
0000d2  a195              ADR      r1,|L142.808|
0000d4  2005              MOVS     r0,#5
0000d6  f7fffffe          BL       _Anki_Log
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev ; Anki::Embedded::ArraySlice<Anki::Embedded::Point<short>>::ArraySlice()
;;;385            height >= 0 && height < s32(1e9) &&
;;;386            width >= 0 && width < s32(2e9) &&
;;;387            stride > 0 && stride < s32(2e9) &&
;;;388            ySlice_start >= 0 &&  ySlice_increment > 0 &&
;;;389            xSlice_start >= 0 && xSlice_increment > 0 && xSlice_increment < 1000000 &&
;;;390            basicType_sizeOfType > 0 && basicType_sizeOfType < 10000 &&
;;;391            basicType_numElements >= 0 && basicType_numElements < s32(2e9),
;;;392    
;;;393            ArraySlice<Type>(), "SerializedBuffer::DeserializeRawArraySlice", "Unreasonable deserialized values");
;;;394    
;;;395          if(width > 0) {
;;;396            AnkiConditionalErrorAndReturnValue(stride == RoundUp(width*sizeof(Type), MEMORY_ALIGNMENT),
;;;397              ArraySlice<Type>(), "SerializedBuffer::DeserializeRawArraySlice", "Parsed stride is not reasonable");
;;;398          }
;;;399    
;;;400          const LinearSequence<s32> ySlice(ySlice_start, ySlice_increment, -1, ySlice_size);
;;;401          const LinearSequence<s32> xSlice(xSlice_start, xSlice_increment, -1, xSlice_size);
;;;402    
;;;403          AnkiConditionalErrorAndReturnValue(bufferLength >= static_cast<s32>(xSlice.get_size()*ySlice.get_size()*sizeof(Type)),
;;;404            ArraySlice<Type>(), "SerializedBuffer::DeserializeRawArraySlice", "Not enought bytes left to set the array");
;;;405    
;;;406          Array<Type> array(height, width, memory);
;;;407    
;;;408          AnkiConditionalErrorAndReturnValue(array.IsValid(),
;;;409            ArraySlice<Type>(), "SerializedBuffer::DeserializeRawArraySlice", "Out of memory");
;;;410    
;;;411          // TODO: this could be done more efficiently
;;;412    
;;;413          Type * restrict pDataType = reinterpret_cast<Type*>(*buffer);
;;;414          s32 iData = 0;
;;;415    
;;;416          for(s32 iy=0; iy<ySlice_size; iy++) {
;;;417            const s32 y = ySlice_start + iy * ySlice_increment;
;;;418            Type * restrict pArrayData = array.Pointer(y, 0);
;;;419    
;;;420            for(s32 ix=0; ix<xSlice_size; ix++) {
;;;421              const s32 x = xSlice_start + ix * xSlice_increment;
;;;422              pArrayData[x] = pDataType[iData];
;;;423              iData++;
;;;424            }
;;;425          }
;;;426    
;;;427          const s32 numElements = xSlice.get_size()*ySlice.get_size();
;;;428    
;;;429          AnkiConditionalErrorAndReturnValue(iData == numElements,
;;;430            ArraySlice<Type>(), "SerializedBuffer::DeserializeRawArraySlice", "Deserialization error");
;;;431    
;;;432          ArraySlice<Type> out = ArraySlice<Type>(array, ySlice, xSlice);
;;;433    
;;;434          *buffer = reinterpret_cast<u8*>(*buffer) + numElements*sizeof(Type);
;;;435          bufferLength -= numElements*sizeof(Type);
;;;436    
;;;437          return out;
;;;438        }
0000e0  b03b              ADD      sp,sp,#0xec
0000e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L142.230|
0000e6  2800              CMP      r0,#0                 ;395
0000e8  dd15              BLE      |L142.278|
0000ea  0080              LSLS     r0,r0,#2              ;396
0000ec  300f              ADDS     r0,r0,#0xf            ;396
0000ee  f020000f          BIC      r0,r0,#0xf            ;396
0000f2  4290              CMP      r0,r2                 ;396
0000f4  d00f              BEQ      |L142.278|
0000f6  f44f70c6          MOV      r0,#0x18c             ;396
0000fa  e9cd9000          STRD     r9,r0,[sp,#0]         ;396
0000fe  a372              ADR      r3,|L142.712|
000100  a294              ADR      r2,|L142.852|
000102  a189              ADR      r1,|L142.808|
000104  2005              MOVS     r0,#5                 ;396
000106  f7fffffe          BL       _Anki_Log
00010a  4620              MOV      r0,r4                 ;396
00010c  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev ; Anki::Embedded::ArraySlice<Anki::Embedded::Point<short>>::ArraySlice()
000110  b03b              ADD      sp,sp,#0xec
000112  e8bd8ff0          POP      {r4-r11,pc}
                  |L142.278|
000116  9828              LDR      r0,[sp,#0xa0]
000118  9627              STR      r6,[sp,#0x9c]
00011a  e9cd0a25          STRD     r0,r10,[sp,#0x94]
00011e  9829              LDR      r0,[sp,#0xa4]
000120  9124              STR      r1,[sp,#0x90]
000122  e9cd0c22          STRD     r0,r12,[sp,#0x88]
000126  9925              LDR      r1,[sp,#0x94]         ;403
000128  4348              MULS     r0,r1,r0              ;403
00012a  6839              LDR      r1,[r7,#0]            ;403
00012c  ebb10f80          CMP      r1,r0,LSL #2          ;403
000130  da0f              BGE      |L142.338|
000132  f2401093          MOV      r0,#0x193             ;403
000136  e9cd9000          STRD     r9,r0,[sp,#0]         ;403
00013a  a363              ADR      r3,|L142.712|
00013c  a28d              ADR      r2,|L142.884|
00013e  a17a              ADR      r1,|L142.808|
000140  2005              MOVS     r0,#5                 ;403
000142  f7fffffe          BL       _Anki_Log
000146  4620              MOV      r0,r4                 ;403
000148  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev ; Anki::Embedded::ArraySlice<Anki::Embedded::Point<short>>::ArraySlice()
00014c  b03b              ADD      sp,sp,#0xec
00014e  e8bd8ff0          POP      {r4-r11,pc}
                  |L142.338|
000152  2300              MOVS     r3,#0                 ;406
000154  461a              MOV      r2,r3                 ;406
000156  2101              MOVS     r1,#1                 ;406
000158  a834              ADD      r0,sp,#0xd0           ;406
00015a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00015e  6800              LDR      r0,[r0,#0]            ;406
000160  e9dd122a          LDRD     r1,r2,[sp,#0xa8]      ;406
000164  9000              STR      r0,[sp,#0]            ;406
000166  462b              MOV      r3,r5                 ;406
000168  a81d              ADD      r0,sp,#0x74           ;406
00016a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00016e  9821              LDR      r0,[sp,#0x84]         ;406
000170  b170              CBZ      r0,|L142.400|
000172  981d              LDR      r0,[sp,#0x74]         ;406
000174  2800              CMP      r0,#0                 ;406
000176  bfa4              ITT      GE                    ;406
000178  981e              LDRGE    r0,[sp,#0x78]         ;406
00017a  2800              CMPGE    r0,#0                 ;406
00017c  db08              BLT      |L142.400|
00017e  9928              LDR      r1,[sp,#0xa0]         ;416
000180  f04f0c00          MOV      r12,#0                ;414
000184  f8d8a000          LDR      r10,[r8,#0]           ;416
000188  4660              MOV      r0,r12                ;416
00018a  2900              CMP      r1,#0                 ;416
00018c  dd32              BLE      |L142.500|
00018e  e00f              B        |L142.432|
                  |L142.400|
000190  f44f70cc          MOV      r0,#0x198             ;408
000194  e9cd9000          STRD     r9,r0,[sp,#0]         ;408
000198  a34b              ADR      r3,|L142.712|
00019a  a280              ADR      r2,|L142.924|
00019c  a162              ADR      r1,|L142.808|
00019e  2005              MOVS     r0,#5                 ;408
0001a0  f7fffffe          BL       _Anki_Log
0001a4  4620              MOV      r0,r4                 ;408
0001a6  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev ; Anki::Embedded::ArraySlice<Anki::Embedded::Point<short>>::ArraySlice()
0001aa  b03b              ADD      sp,sp,#0xec
0001ac  e8bd8ff0          POP      {r4-r11,pc}
                  |L142.432|
0001b0  e9dd122c          LDRD     r1,r2,[sp,#0xb0]
0001b4  fb001102          MLA      r1,r0,r2,r1           ;417
0001b8  9b1f              LDR      r3,[sp,#0x7c]         ;417
0001ba  9a21              LDR      r2,[sp,#0x84]         ;417
0001bc  fb012303          MLA      r3,r1,r3,r2           ;417
0001c0  9a29              LDR      r2,[sp,#0xa4]         ;420
0001c2  2100              MOVS     r1,#0                 ;420
0001c4  2a00              CMP      r2,#0                 ;420
0001c6  dd11              BLE      |L142.492|
                  |L142.456|
0001c8  e9dd252e          LDRD     r2,r5,[sp,#0xb8]      ;420
0001cc  fb012205          MLA      r2,r1,r5,r2           ;421
0001d0  eb0a058c          ADD      r5,r10,r12,LSL #2     ;422
0001d4  eb030682          ADD      r6,r3,r2,LSL #2       ;422
0001d8  882a              LDRH     r2,[r5,#0]            ;422
0001da  8032              STRH     r2,[r6,#0]            ;422
0001dc  886a              LDRH     r2,[r5,#2]            ;422
0001de  8072              STRH     r2,[r6,#2]            ;422
0001e0  9a29              LDR      r2,[sp,#0xa4]         ;420
0001e2  1c49              ADDS     r1,r1,#1              ;420
0001e4  f10c0c01          ADD      r12,r12,#1            ;423
0001e8  428a              CMP      r2,r1                 ;420
0001ea  dced              BGT      |L142.456|
                  |L142.492|
0001ec  9928              LDR      r1,[sp,#0xa0]         ;416
0001ee  1c40              ADDS     r0,r0,#1              ;416
0001f0  4288              CMP      r0,r1                 ;416
0001f2  dbdd              BLT      |L142.432|
                  |L142.500|
0001f4  9925              LDR      r1,[sp,#0x94]         ;427
0001f6  9822              LDR      r0,[sp,#0x88]         ;427
0001f8  fb00f201          MUL      r2,r0,r1              ;427
0001fc  4594              CMP      r12,r2                ;429
0001fe  d00f              BEQ      |L142.544|
000200  f24010ad          MOV      r0,#0x1ad             ;429
000204  e9cd9000          STRD     r9,r0,[sp,#0]         ;429
000208  a32f              ADR      r3,|L142.712|
00020a  a268              ADR      r2,|L142.940|
00020c  a146              ADR      r1,|L142.808|
00020e  2005              MOVS     r0,#5                 ;429
000210  f7fffffe          BL       _Anki_Log
000214  4620              MOV      r0,r4                 ;429
000216  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceINS0_5PointIsEEEC1Ev ; Anki::Embedded::ArraySlice<Anki::Embedded::Point<short>>::ArraySlice()
00021a  b03b              ADD      sp,sp,#0xec
00021c  e8bd8ff0          POP      {r4-r11,pc}
                  |L142.544|
000220  f10d0b74          ADD      r11,sp,#0x74
000224  e9dd6925          LDRD     r6,r9,[sp,#0x94]
000228  e8bb102b          LDM      r11!,{r0,r1,r3,r5,r12}
00022c  e9cd6910          STRD     r6,r9,[sp,#0x40]
000230  f8dda09c          LDR      r10,[sp,#0x9c]
000234  f8cda048          STR      r10,[sp,#0x48]
000238  e9dd6922          LDRD     r6,r9,[sp,#0x88]
00023c  f8dda090          LDR      r10,[sp,#0x90]
000240  f8cda054          STR      r10,[sp,#0x54]
000244  e9cd6913          STRD     r6,r9,[sp,#0x4c]
000248  f10d0958          ADD      r9,sp,#0x58
00024c  2600              MOVS     r6,#0
00024e  e8a9102b          STM      r9!,{r0,r1,r3,r5,r12}
000252  2800              CMP      r0,#0
000254  bfc8              IT       GT
000256  2900              CMPGT    r1,#0
000258  dd2a              BLE      |L142.688|
00025a  fb00f501          MUL      r5,r0,r1
00025e  b33d              CBZ      r5,|L142.688|
000260  2500              MOVS     r5,#0
000262  fb05c503          MLA      r5,r5,r3,r12
000266  951b              STR      r5,[sp,#0x6c]
                  |L142.616|
000268  2800              CMP      r0,#0
00026a  bfc8              IT       GT
00026c  2900              CMPGT    r1,#0
00026e  dd21              BLE      |L142.692|
000270  4348              MULS     r0,r1,r0
000272  b1f8              CBZ      r0,|L142.692|
000274  2000              MOVS     r0,#0
000276  fb00c003          MLA      r0,r0,r3,r12
00027a  901c              STR      r0,[sp,#0x70]
                  |L142.636|
00027c  f8d80000          LDR      r0,[r8,#0]            ;434
000280  4251              RSBS     r1,r2,#0              ;435
000282  eb000082          ADD      r0,r0,r2,LSL #2       ;434
000286  f8c80000          STR      r0,[r8,#0]            ;435
00028a  6838              LDR      r0,[r7,#0]            ;435
00028c  f10d0940          ADD      r9,sp,#0x40           ;435
000290  eb000081          ADD      r0,r0,r1,LSL #2       ;435
000294  6038              STR      r0,[r7,#0]            ;435
000296  e8b910ef          LDM      r9!,{r0-r3,r5-r7,r12} ;435
00029a  e88410ef          STM      r4,{r0-r3,r5-r7,r12}  ;435
00029e  ad18              ADD      r5,sp,#0x60           ;435
0002a0  3420              ADDS     r4,r4,#0x20           ;435
0002a2  e8b5100f          LDM      r5!,{r0-r3,r12}       ;435
0002a6  e8a4100f          STM      r4!,{r0-r3,r12}       ;435
0002aa  b03b              ADD      sp,sp,#0xec
0002ac  e8bd8ff0          POP      {r4-r11,pc}
                  |L142.688|
0002b0  961b              STR      r6,[sp,#0x6c]
0002b2  e7d9              B        |L142.616|
                  |L142.692|
0002b4  961c              STR      r6,[sp,#0x70]
0002b6  e7e1              B        |L142.636|
;;;439    
                          ENDP

                  |L142.696|
                          DCD      0x3b9aca00
                  |L142.700|
                          DCD      _ZZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::SerializedBuffer::DeserializeRawArraySlice<Anki::Embedded::Point<short>>(char*, void**, int&, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
                  |L142.704|
                          DCD      0x77359400
                  |L142.708|
                          DCD      0x000f4240
                  |L142.712|
0002c8  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/serial"
0002cc  6f726574
0002d0  6563685c
0002d4  636f6d6d
0002d8  6f6e5c69
0002dc  6e636c75
0002e0  64655c61
0002e4  6e6b692f
0002e8  636f6d6d
0002ec  6f6e2f72
0002f0  6f626f74
0002f4  2f736572
0002f8  69616c  
0002fb  697a652e          DCB      "ize.h",0
0002ff  6800    
000301  00                DCB      0
000302  00                DCB      0
000303  00                DCB      0
                  |L142.772|
000304  556e7265          DCB      "Unreasonable deserialized values",0
000308  61736f6e
00030c  61626c65
000310  20646573
000314  65726961
000318  6c697a65
00031c  64207661
000320  6c756573
000324  00      
000325  00                DCB      0
000326  00                DCB      0
000327  00                DCB      0
                  |L142.808|
000328  53657269          DCB      "SerializedBuffer::DeserializeRawArraySlice",0
00032c  616c697a
000330  65644275
000334  66666572
000338  3a3a4465
00033c  73657269
000340  616c697a
000344  65526177
000348  41727261
00034c  79536c69
000350  636500  
000353  00                DCB      0
                  |L142.852|
000354  50617273          DCB      "Parsed stride is not reasonable",0
000358  65642073
00035c  74726964
000360  65206973
000364  206e6f74
000368  20726561
00036c  736f6e61
000370  626c6500
                  |L142.884|
000374  4e6f7420          DCB      "Not enought bytes left to set the array",0
000378  656e6f75
00037c  67687420
000380  62797465
000384  73206c65
000388  66742074
00038c  6f207365
000390  74207468
000394  65206172
000398  72617900
                  |L142.924|
00039c  4f757420          DCB      "Out of memory",0
0003a0  6f66206d
0003a4  656d6f72
0003a8  7900    
0003aa  00                DCB      0
0003ab  00                DCB      0
                  |L142.940|
0003ac  44657365          DCB      "Deserialization error",0
0003b0  7269616c
0003b4  697a6174
0003b8  696f6e20
0003bc  6572726f
0003c0  7200    
0003c2  00                DCB      0
0003c3  00                DCB      0

                          AREA ||area_number.143||, COMGROUP=_ZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackE, LINKORDER=||t._ZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.143||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L149.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L149.56|
00000e  4b0b              LDR      r3,|L149.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L149.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L149.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L149.60|
                          DCD      ||.constdata||+0x208

                          AREA ||area_number.150||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.150||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_ PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::operator =(const Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&)
000000  e9d12300          LDRD     r2,r3,[r1,#0]
000004  f8d1c008          LDR      r12,[r1,#8]
000008  f8c0c008          STR      r12,[r0,#8]
00000c  e9c02300          STRD     r2,r3,[r0,#0]
000010  e9d12303          LDRD     r2,r3,[r1,#0xc]
000014  f8d1c014          LDR      r12,[r1,#0x14]
000018  f8c0c014          STR      r12,[r0,#0x14]
00001c  e9c02303          STRD     r2,r3,[r0,#0xc]
000020  698b              LDR      r3,[r1,#0x18]
000022  6183              STR      r3,[r0,#0x18]
000024  69cb              LDR      r3,[r1,#0x1c]
000026  61c3              STR      r3,[r0,#0x1c]
000028  6a0b              LDR      r3,[r1,#0x20]
00002a  6203              STR      r3,[r0,#0x20]
00002c  6a4b              LDR      r3,[r1,#0x24]
00002e  6243              STR      r3,[r0,#0x24]
000030  6a8b              LDR      r3,[r1,#0x28]
000032  6283              STR      r3,[r0,#0x28]
000034  6aca              LDR      r2,[r1,#0x2c]
000036  62c2              STR      r2,[r0,#0x2c]
000038  6b09              LDR      r1,[r1,#0x30]
00003a  6301              STR      r1,[r0,#0x30]
00003c  4770              BX       lr
                          ENDP


                          AREA ||area_number.157||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_, LINKORDER=||i._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.157||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEEaSERKS4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L160.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L160.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L160.384|
000044  a25c              ADR      r2,|L160.440|
000046  a160              ADR      r1,|L160.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L160.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L160.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L160.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L160.384|
000080  a24d              ADR      r2,|L160.440|
000082  a157              ADR      r1,|L160.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L160.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L160.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L160.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L160.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L160.384|
0000c8  a251              ADR      r2,|L160.528|
0000ca  a156              ADR      r1,|L160.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L160.372|
                  |L160.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L160.384|
0000e0  a258              ADR      r2,|L160.580|
0000e2  a15f              ADR      r1,|L160.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L160.372|
                  |L160.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L160.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L160.384|
000110  a259              ADR      r2,|L160.632|
000112  a144              ADR      r1,|L160.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L160.372|
                  |L160.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L160.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L160.384|
00015a  a251              ADR      r2,|L160.672|
00015c  a140              ADR      r1,|L160.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L160.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L160.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L160.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L160.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L160.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L160.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L160.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L160.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L160.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L160.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L160.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L160.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L160.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L160.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.161||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.161||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded16SerializedBuffer23DeserializeRawBasicTypeIiEET_PcPPvRiE19__PRETTY_FUNCTION__ ; Anki::Embedded::SerializedBuffer::DeserializeRawBasicType<int>(char*, void**, int&)::__PRETTY_FUNCTION__
000000  54797065          DCB      0x54,0x79,0x70,0x65
000004  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000008  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00000c  6d626564          DCB      0x6d,0x62,0x65,0x64
000010  6465643a          DCB      0x64,0x65,0x64,0x3a
000014  3a536572          DCB      0x3a,0x53,0x65,0x72
000018  69616c69          DCB      0x69,0x61,0x6c,0x69
00001c  7a656442          DCB      0x7a,0x65,0x64,0x42
000020  75666665          DCB      0x75,0x66,0x66,0x65
000024  723a3a44          DCB      0x72,0x3a,0x3a,0x44
000028  65736572          DCB      0x65,0x73,0x65,0x72
00002c  69616c69          DCB      0x69,0x61,0x6c,0x69
000030  7a655261          DCB      0x7a,0x65,0x52,0x61
000034  77426173          DCB      0x77,0x42,0x61,0x73
000038  69635479          DCB      0x69,0x63,0x54,0x79
00003c  70652863          DCB      0x70,0x65,0x28,0x63
000040  68617220          DCB      0x68,0x61,0x72,0x20
000044  2a2c2076          DCB      0x2a,0x2c,0x20,0x76
000048  6f696420          DCB      0x6f,0x69,0x64,0x20
00004c  2a2a2c20          DCB      0x2a,0x2a,0x2c,0x20
000050  7369676e          DCB      0x73,0x69,0x67,0x6e
000054  65642069          DCB      0x65,0x64,0x20,0x69
000058  6e742026          DCB      0x6e,0x74,0x20,0x26
00005c  29205b77          DCB      0x29,0x20,0x5b,0x77
000060  69746820          DCB      0x69,0x74,0x68,0x20
000064  54797065          DCB      0x54,0x79,0x70,0x65
000068  203d2073          DCB      0x20,0x3d,0x20,0x73
00006c  69676e65          DCB      0x69,0x67,0x6e,0x65
000070  6420696e          DCB      0x64,0x20,0x69,0x6e
000074  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded16SerializedBuffer22SerializeRawArraySliceINS0_5PointIsEEEENS_6ResultEPKcRKNS0_15ConstArraySliceIT_EEPPvRiE19__PRETTY_FUNCTION__ ; Anki::Embedded::SerializedBuffer::SerializeRawArraySlice<Anki::Embedded::Point<short>>(const char*, const Anki::Embedded::ConstArraySlice<T1>&, void**, int&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a536572          DCB      0x3a,0x53,0x65,0x72
000020  69616c69          DCB      0x69,0x61,0x6c,0x69
000024  7a656442          DCB      0x7a,0x65,0x64,0x42
000028  75666665          DCB      0x75,0x66,0x66,0x65
00002c  723a3a53          DCB      0x72,0x3a,0x3a,0x53
000030  65726961          DCB      0x65,0x72,0x69,0x61
000034  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000038  52617741          DCB      0x52,0x61,0x77,0x41
00003c  72726179          DCB      0x72,0x72,0x61,0x79
000040  536c6963          DCB      0x53,0x6c,0x69,0x63
000044  6528636f          DCB      0x65,0x28,0x63,0x6f
000048  6e737420          DCB      0x6e,0x73,0x74,0x20
00004c  63686172          DCB      0x63,0x68,0x61,0x72
000050  202a2c20          DCB      0x20,0x2a,0x2c,0x20
000054  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000058  7420416e          DCB      0x74,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
00006c  6e737441          DCB      0x6e,0x73,0x74,0x41
000070  72726179          DCB      0x72,0x72,0x61,0x79
000074  536c6963          DCB      0x53,0x6c,0x69,0x63
000078  653c5479          DCB      0x65,0x3c,0x54,0x79
00007c  70653e20          DCB      0x70,0x65,0x3e,0x20
000080  262c2076          DCB      0x26,0x2c,0x20,0x76
000084  6f696420          DCB      0x6f,0x69,0x64,0x20
000088  2a2a2c20          DCB      0x2a,0x2a,0x2c,0x20
00008c  7369676e          DCB      0x73,0x69,0x67,0x6e
000090  65642069          DCB      0x65,0x64,0x20,0x69
000094  6e742026          DCB      0x6e,0x74,0x20,0x26
000098  29205b77          DCB      0x29,0x20,0x5b,0x77
00009c  69746820          DCB      0x69,0x74,0x68,0x20
0000a0  54797065          DCB      0x54,0x79,0x70,0x65
0000a4  203d2041          DCB      0x20,0x3d,0x20,0x41
0000a8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000ac  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000b0  65646465          DCB      0x65,0x64,0x64,0x65
0000b4  643a3a50          DCB      0x64,0x3a,0x3a,0x50
0000b8  6f696e74          DCB      0x6f,0x69,0x6e,0x74
0000bc  3c736967          DCB      0x3c,0x73,0x69,0x67
0000c0  6e656420          DCB      0x6e,0x65,0x64,0x20
0000c4  73686f72          DCB      0x73,0x68,0x6f,0x72
0000c8  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded16SerializedBuffer24DeserializeRawArraySliceINS0_5PointIsEEEENS0_10ArraySliceIT_EEPcPPvRiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::SerializedBuffer::DeserializeRawArraySlice<Anki::Embedded::Point<short>>(char*, void**, int&, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  79536c69          DCB      0x79,0x53,0x6c,0x69
000018  63653c54          DCB      0x63,0x65,0x3c,0x54
00001c  7970653e          DCB      0x79,0x70,0x65,0x3e
000020  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000024  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000028  6d626564          DCB      0x6d,0x62,0x65,0x64
00002c  6465643a          DCB      0x64,0x65,0x64,0x3a
000030  3a536572          DCB      0x3a,0x53,0x65,0x72
000034  69616c69          DCB      0x69,0x61,0x6c,0x69
000038  7a656442          DCB      0x7a,0x65,0x64,0x42
00003c  75666665          DCB      0x75,0x66,0x66,0x65
000040  723a3a44          DCB      0x72,0x3a,0x3a,0x44
000044  65736572          DCB      0x65,0x73,0x65,0x72
000048  69616c69          DCB      0x69,0x61,0x6c,0x69
00004c  7a655261          DCB      0x7a,0x65,0x52,0x61
000050  77417272          DCB      0x77,0x41,0x72,0x72
000054  6179536c          DCB      0x61,0x79,0x53,0x6c
000058  69636528          DCB      0x69,0x63,0x65,0x28
00005c  63686172          DCB      0x63,0x68,0x61,0x72
000060  202a2c20          DCB      0x20,0x2a,0x2c,0x20
000064  766f6964          DCB      0x76,0x6f,0x69,0x64
000068  202a2a2c          DCB      0x20,0x2a,0x2a,0x2c
00006c  20736967          DCB      0x20,0x73,0x69,0x67
000070  6e656420          DCB      0x6e,0x65,0x64,0x20
000074  696e7420          DCB      0x69,0x6e,0x74,0x20
000078  262c2041          DCB      0x26,0x2c,0x20,0x41
00007c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000080  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000084  65646465          DCB      0x65,0x64,0x64,0x65
000088  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00008c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000090  79537461          DCB      0x79,0x53,0x74,0x61
000094  636b2026          DCB      0x63,0x6b,0x20,0x26
000098  29205b77          DCB      0x29,0x20,0x5b,0x77
00009c  69746820          DCB      0x69,0x74,0x68,0x20
0000a0  54797065          DCB      0x54,0x79,0x70,0x65
0000a4  203d2041          DCB      0x20,0x3d,0x20,0x41
0000a8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000ac  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000b0  65646465          DCB      0x65,0x64,0x64,0x65
0000b4  643a3a50          DCB      0x64,0x3a,0x3a,0x50
0000b8  6f696e74          DCB      0x6f,0x69,0x6e,0x74
0000bc  3c736967          DCB      0x3c,0x73,0x69,0x67
0000c0  6e656420          DCB      0x6e,0x65,0x64,0x20
0000c4  73686f72          DCB      0x73,0x68,0x6f,0x72
0000c8  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded16SerializedBuffer17EncodedArraySlice9SerializeINS0_5PointIsEEEENS_6ResultEbRKNS0_15ConstArraySliceIT_EEPPvRiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded16SerializedBuffer17EncodedArraySlice9SerializeINS0_5PointIsEEEENS_6ResultEbRKNS0_15ConstArraySliceIT_EEPPvRiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded16SerializedBuffer17EncodedArraySlice9SerializeINS0_5PointIsEEEENS_6ResultEbRKNS0_15ConstArraySliceIT_EEPPvRiE19__PRETTY_FUNCTION__ ; Anki::Embedded::SerializedBuffer::EncodedArraySlice::Serialize<Anki::Embedded::Point<short>>(bool, const Anki::Embedded::ConstArraySlice<T1>&, void**, int&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a536572          DCB      0x3a,0x53,0x65,0x72
000020  69616c69          DCB      0x69,0x61,0x6c,0x69
000024  7a656442          DCB      0x7a,0x65,0x64,0x42
000028  75666665          DCB      0x75,0x66,0x66,0x65
00002c  723a3a45          DCB      0x72,0x3a,0x3a,0x45
000030  6e636f64          DCB      0x6e,0x63,0x6f,0x64
000034  65644172          DCB      0x65,0x64,0x41,0x72
000038  72617953          DCB      0x72,0x61,0x79,0x53
00003c  6c696365          DCB      0x6c,0x69,0x63,0x65
000040  3a3a5365          DCB      0x3a,0x3a,0x53,0x65
000044  7269616c          DCB      0x72,0x69,0x61,0x6c
000048  697a6528          DCB      0x69,0x7a,0x65,0x28
00004c  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
000050  2c20636f          DCB      0x2c,0x20,0x63,0x6f
000054  6e737420          DCB      0x6e,0x73,0x74,0x20
000058  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00005c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000060  62656464          DCB      0x62,0x65,0x64,0x64
000064  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000068  436f6e73          DCB      0x43,0x6f,0x6e,0x73
00006c  74417272          DCB      0x74,0x41,0x72,0x72
000070  6179536c          DCB      0x61,0x79,0x53,0x6c
000074  6963653c          DCB      0x69,0x63,0x65,0x3c
000078  54797065          DCB      0x54,0x79,0x70,0x65
00007c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000080  20766f69          DCB      0x20,0x76,0x6f,0x69
000084  64202a2a          DCB      0x64,0x20,0x2a,0x2a
000088  2c207369          DCB      0x2c,0x20,0x73,0x69
00008c  676e6564          DCB      0x67,0x6e,0x65,0x64
000090  20696e74          DCB      0x20,0x69,0x6e,0x74
000094  20262920          DCB      0x20,0x26,0x29,0x20
000098  5b776974          DCB      0x5b,0x77,0x69,0x74
00009c  68205479          DCB      0x68,0x20,0x54,0x79
0000a0  7065203d          DCB      0x70,0x65,0x20,0x3d
0000a4  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000a8  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000ac  6d626564          DCB      0x6d,0x62,0x65,0x64
0000b0  6465643a          DCB      0x64,0x65,0x64,0x3a
0000b4  3a506f69          DCB      0x3a,0x50,0x6f,0x69
0000b8  6e743c73          DCB      0x6e,0x74,0x3c,0x73
0000bc  69676e65          DCB      0x69,0x67,0x6e,0x65
0000c0  64207368          DCB      0x64,0x20,0x73,0x68
0000c4  6f72743e          DCB      0x6f,0x72,0x74,0x3e
0000c8  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
000098  696e743c          DCB      0x69,0x6e,0x74,0x3c
00009c  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a0  65642073          DCB      0x65,0x64,0x20,0x73
0000a4  686f7274          DCB      0x68,0x6f,0x72,0x74
0000a8  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayINS0_5PointIsEEE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000054  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000058  62656464          DCB      0x62,0x65,0x64,0x64
00005c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000060  506f696e          DCB      0x50,0x6f,0x69,0x6e
000064  743c7369          DCB      0x74,0x3c,0x73,0x69
000068  676e6564          DCB      0x67,0x6e,0x65,0x64
00006c  2073686f          DCB      0x20,0x73,0x68,0x6f
000070  72743e5d          DCB      0x72,0x74,0x3e,0x5d
000074  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  506f696e          DCB      0x50,0x6f,0x69,0x6e
0000cc  743c7369          DCB      0x74,0x3c,0x73,0x69
0000d0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000d4  2073686f          DCB      0x20,0x73,0x68,0x6f
0000d8  72743e5d          DCB      0x72,0x74,0x3e,0x5d
0000dc  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_5PointIsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Point<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a50          DCB      0x64,0x3a,0x3a,0x50
0000a4  6f696e74          DCB      0x6f,0x69,0x6e,0x74
0000a8  3c736967          DCB      0x3c,0x73,0x69,0x67
0000ac  6e656420          DCB      0x6e,0x65,0x64,0x20
0000b0  73686f72          DCB      0x73,0x68,0x6f,0x72
0000b4  743e5d00          DCB      0x74,0x3e,0x5d,0x00
