; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\errorhandling.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\errorhandling.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\errorhandling.crf ..\coretech\common\robot\src\errorHandling.cpp]
                          THUMB

                          AREA ||i.SetLogSilence||, CODE, READONLY, ALIGN=2

                  SetLogSilence PROC
;;;27     
;;;28       void SetLogSilence(const bool isLogSilent)
000000  4901              LDR      r1,|L1.8|
;;;29       {
;;;30         isLogSilent_ = isLogSilent;
000002  7008              STRB     r0,[r1,#0]
;;;31       }
000004  4770              BX       lr
;;;32     
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      ||.data||

                          AREA ||i._Anki_Log||, CODE, READONLY, ALIGN=2

                  _Anki_Log PROC
;;;32     
;;;33       void _Anki_Log(int logLevel, const char* eventName, const char* eventValue, const char* file, const char* funct, int line, ...)
000000  b5f8              PUSH     {r3-r7,lr}
;;;34       {
000002  461c              MOV      r4,r3
000004  460b              MOV      r3,r1
000006  4601              MOV      r1,r0
;;;35     #if ANKI_OUTPUT_DEBUG_LEVEL == ANKI_OUTPUT_DEBUG_PRINTF
;;;36         if(!isLogSilent_) {
000008  4815              LDR      r0,|L2.96|
00000a  4615              MOV      r5,r2                 ;34
00000c  7800              LDRB     r0,[r0,#0]  ; isLogSilent_
00000e  2800              CMP      r0,#0
000010  d120              BNE      |L2.84|
;;;37           va_list argList;
;;;38     
;;;39           // Don't print all the path of the file
;;;40           s32 lastSlashIndex = -1;
000012  f04f3cff          MOV      r12,#0xffffffff
;;;41           for(s32 i=0; i<10000; i++) {
000016  f2427610          MOV      r6,#0x2710
                  |L2.26|
;;;42             if(file[i] == '\\' ||
00001a  5c22              LDRB     r2,[r4,r0]
00001c  2a5c              CMP      r2,#0x5c
;;;43               file[i] == '/') {
00001e  bf14              ITE      NE
000020  2a2f              CMPNE    r2,#0x2f
;;;44                 lastSlashIndex = i;
000022  4684              MOVEQ    r12,r0
000024  d000              BEQ      |L2.40|
;;;45             } else if(!file[i]) {
000026  b112              CBZ      r2,|L2.46|
                  |L2.40|
000028  1c40              ADDS     r0,r0,#1
00002a  42b0              CMP      r0,r6                 ;41
00002c  dbf5              BLT      |L2.26|
                  |L2.46|
;;;46               break;
;;;47             }
;;;48           }
;;;49     
;;;50           if(lastSlashIndex >= 0) {
00002e  f1bc0f00          CMP      r12,#0
;;;51             file += lastSlashIndex + 1;
000032  bfa4              ITT      GE
000034  eb04000c          ADDGE    r0,r4,r12
000038  1c44              ADDGE    r4,r0,#1
;;;52           }
;;;53     
;;;54           Anki::CoreTechPrint("LOG[%d] - %s@%d - %s - ", logLevel, file, line, eventName);
00003a  9300              STR      r3,[sp,#0]
00003c  4622              MOV      r2,r4
00003e  a009              ADR      r0,|L2.100|
000040  9b07              LDR      r3,[sp,#0x1c]
000042  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;55     
;;;56           va_start(argList, line);
000046  a908              ADD      r1,sp,#0x20
;;;57           Anki::CoreTechPrint(eventValue, argList);
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcSt9__va_list ; Anki::CoreTechPrint(const char*, std::__va_list)
;;;58           va_end(argList);
;;;59     
;;;60           Anki::CoreTechPrint("\n");
00004e  a00b              ADR      r0,|L2.124|
000050  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
                  |L2.84|
;;;61           //fflush(stdout);
;;;62         }
;;;63     #endif // #if ANKI_OUTPUT_DEBUG_LEVEL == ANKI_OUTPUT_DEBUG_PRINTF
;;;64     
;;;65         Anki::CoreTechPrint(""); // This is here, just so a breakpoint can be set
000054  e8bd40f8          POP      {r3-r7,lr}
000058  a009              ADR      r0,|L2.128|
00005a  f7ffbffe          B.W      _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;66       }
;;;67     
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      ||.data||
                  |L2.100|
000064  4c4f475b          DCB      "LOG[%d] - %s@%d - %s - ",0
000068  25645d20
00006c  2d202573
000070  40256420
000074  2d202573
000078  202d2000
                  |L2.124|
00007c  0a00              DCB      "\n",0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L2.128|
000080  00                DCB      0
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||i.SetLogSilence||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i.SetLogSilence||
                          DCD      0x00000001

                          AREA ||area_number.4||, LINKORDER=||i._Anki_Log||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Anki_Log||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=0

                  isLogSilent_
000000  00                DCB      0x00
