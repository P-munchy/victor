; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\filtering.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\filtering.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\filtering.crf ..\coretech\vision\robot\src\filtering.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15ImageProcessing12FastGradientERKNS0_5ArrayIhEERNS2_IaEES7_NS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15ImageProcessing12FastGradientERKNS0_5ArrayIhEERNS2_IaEES7_NS0_11MemoryStackE PROC ; Anki::Embedded::ImageProcessing::FastGradient(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::Array<signed char>&, Anki::Embedded::Array<signed char>&, Anki::Embedded::MemoryStack)
;;;491    
;;;492          Result FastGradient(const Array<u8> &in, Array<s8> &dx, Array<s8> &dy, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;493          {
000004  460f              MOV      r7,r1
000006  b0a9              SUB      sp,sp,#0xa4
000008  4698              MOV      r8,r3
00000a  4616              MOV      r6,r2
00000c  4604              MOV      r4,r0
;;;494            const s32 imageHeight = in.get_size(0);
00000e  2100              MOVS     r1,#0
000010  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000014  4681              MOV      r9,r0
;;;495            const s32 imageWidth = in.get_size(1);
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00001e  4605              MOV      r5,r0
;;;496    
;;;497            AnkiConditionalErrorAndReturnValue(in.IsValid() && dy.IsValid() && dx.IsValid() && scratch.IsValid(),
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000026  f8dfa1ec          LDR      r10,|L1.532|
00002a  2800              CMP      r0,#0
00002c  bf1c              ITT      NE
00002e  6930              LDRNE    r0,[r6,#0x10]
000030  2800              CMPNE    r0,#0
000032  d03a              BEQ      |L1.170|
000034  6830              LDR      r0,[r6,#0]
000036  2800              CMP      r0,#0
000038  bfa4              ITT      GE
00003a  6870              LDRGE    r0,[r6,#4]
00003c  2800              CMPGE    r0,#0
00003e  db34              BLT      |L1.170|
000040  6938              LDR      r0,[r7,#0x10]
000042  2800              CMP      r0,#0
000044  d031              BEQ      |L1.170|
000046  6838              LDR      r0,[r7,#0]
000048  2800              CMP      r0,#0
00004a  bfa4              ITT      GE
00004c  6878              LDRGE    r0,[r7,#4]
00004e  2800              CMPGE    r0,#0
000050  db2b              BLT      |L1.170|
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000058  2800              CMP      r0,#0
00005a  d026              BEQ      |L1.170|
;;;498              RESULT_FAIL_INVALID_OBJECT, "FastGradient", "Image is invalid");
;;;499    
;;;500            AnkiConditionalErrorAndReturnValue(
00005c  2100              MOVS     r1,#0
00005e  4638              MOV      r0,r7
000060  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIaE8get_sizeEi ; Anki::Embedded::Array<signed char>::get_size(int) const
000064  4548              CMP      r0,r9
000066  d111              BNE      |L1.140|
000068  2100              MOVS     r1,#0
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIaE8get_sizeEi ; Anki::Embedded::Array<signed char>::get_size(int) const
000070  4548              CMP      r0,r9
000072  d10b              BNE      |L1.140|
000074  2101              MOVS     r1,#1
000076  4638              MOV      r0,r7
000078  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIaE8get_sizeEi ; Anki::Embedded::Array<signed char>::get_size(int) const
00007c  42a8              CMP      r0,r5
00007e  d105              BNE      |L1.140|
000080  2101              MOVS     r1,#1
000082  4630              MOV      r0,r6
000084  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIaE8get_sizeEi ; Anki::Embedded::Array<signed char>::get_size(int) const
000088  42a8              CMP      r0,r5
00008a  d01d              BEQ      |L1.200|
                  |L1.140|
00008c  f44f70fa          MOV      r0,#0x1f4
000090  e9cda000          STRD     r10,r0,[sp,#0]
000094  a360              ADR      r3,|L1.536|
000096  a26b              ADR      r2,|L1.580|
000098  a172              ADR      r1,|L1.612|
00009a  2005              MOVS     r0,#5
00009c  f7fffffe          BL       _Anki_Log
;;;501              imageHeight == dx.get_size(0) && imageHeight == dy.get_size(0) &&
;;;502              imageWidth == dx.get_size(1) && imageWidth == dy.get_size(1),
;;;503              RESULT_FAIL_INVALID_SIZE, "FastGradient", "Images must be the same size");
;;;504    
;;;505            AnkiConditionalErrorAndReturnValue(imageWidth%8 == 0,
;;;506              RESULT_FAIL_INVALID_SIZE, "FastGradient", "Image width must be divisible by 8");
;;;507    
;;;508            dx(0,0,0,-1).Set(0);
;;;509    
;;;510            for(s32 y=1; y<(imageHeight-1); y++) {
;;;511              const u8 * restrict pIn_y0  = in.Pointer(y,0);
;;;512    
;;;513              s8 * restrict pDx = dx.Pointer(y,0);
;;;514    
;;;515              s32 x;
;;;516    
;;;517              //#if !defined(USE_ARM_ACCELERATION)
;;;518              for(x=1; x<(imageWidth-1); x++) {
;;;519                pDx[x] = static_cast<s8>( (static_cast<s32>(pIn_y0[x+1]) >> 1) - (static_cast<s32>(pIn_y0[x-1]) >> 1) );
;;;520              }
;;;521              //#else // #if !defined(USE_ARM_ACCELERATION)
;;;522              //          // TODO: make work so Keil doesn't merge loads
;;;523              //          for(x = 0; x<(imageWidth-7); x+=8) {
;;;524              //            const u32 inM3210 = *reinterpret_cast<const u32*>(pIn_y0 + x - 1);
;;;525              //            const u32 inM7654 = *reinterpret_cast<const u32*>(pIn_y0 + x + 3);
;;;526              //
;;;527              //            const u32 inP3210 = *reinterpret_cast<const u32*>(pIn_y0 + x + 1);
;;;528              //            const u32 inP7654 = *reinterpret_cast<const u32*>(pIn_y0 + x + 5);
;;;529              //
;;;530              //            const u32 inM3210Half = (inM3210 >> 1) & 0x7f7f7f7f;
;;;531              //            const u32 inM7654Half = (inM7654 >> 1) & 0x7f7f7f7f;
;;;532              //
;;;533              //            const u32 inP3210Half = (inP3210 >> 1) & 0x7f7f7f7f;
;;;534              //            const u32 inP7654Half = (inP7654 >> 1) & 0x7f7f7f7f;
;;;535              //
;;;536              //            const u32 out3210 = __SSUB8(inP3210Half, inM3210Half);
;;;537              //            const u32 out7654 = __SSUB8(inP7654Half, inM7654Half);
;;;538              //
;;;539              //            *reinterpret_cast<u32*>(pDx + x) = out3210;
;;;540              //            *reinterpret_cast<u32*>(pDx + x + 4) = out7654;
;;;541              //          }
;;;542              //#endif // #if !defined(USE_ARM_ACCELERATION) ... #else
;;;543    
;;;544              pDx[0] = 0;
;;;545              pDx[imageWidth-1] = 0;
;;;546    
;;;547              const u8 * restrict pIn_ym1 = in.Pointer(y-1,0);
;;;548              const u8 * restrict pIn_yp1 = in.Pointer(y+1,0);
;;;549    
;;;550              s8 * restrict pDy = dy.Pointer(y,0);
;;;551    
;;;552    #if USE_ARM_ACCELERATION == ACCELERATION_NONE || USE_ARM_ACCELERATION == ACCELERATION_ARM_A7
;;;553              for(x=1; x<(imageWidth-1); x++) {
;;;554                pDy[x] = static_cast<s8>( (static_cast<s32>(pIn_yp1[x]) >> 1) - (static_cast<s32>(pIn_ym1[x]) >> 1) );
;;;555              }
;;;556    #elif USE_ARM_ACCELERATION == ACCELERATION_ARM_M4
;;;557              // pIn_ym1 and pIn_yp1 should always be aligned, so this is okay even with auto-load-merging
;;;558              for(x = 0; x<(imageWidth-7); x+=8) {
;;;559                const u32 inM3210 = *reinterpret_cast<const u32*>(pIn_ym1 + x);
;;;560                const u32 inM7654 = *reinterpret_cast<const u32*>(pIn_ym1 + x + 4);
;;;561    
;;;562                const u32 inP3210 = *reinterpret_cast<const u32*>(pIn_yp1 + x);
;;;563                const u32 inP7654 = *reinterpret_cast<const u32*>(pIn_yp1 + x + 4);
;;;564    
;;;565                const u32 inM3210Half = (inM3210 >> 1) & 0x7f7f7f7f;
;;;566                const u32 inM7654Half = (inM7654 >> 1) & 0x7f7f7f7f;
;;;567    
;;;568                const u32 inP3210Half = (inP3210 >> 1) & 0x7f7f7f7f;
;;;569                const u32 inP7654Half = (inP7654 >> 1) & 0x7f7f7f7f;
;;;570    
;;;571                const u32 out3210 = __SSUB8(inP3210Half, inM3210Half);
;;;572                const u32 out7654 = __SSUB8(inP7654Half, inM7654Half);
;;;573    
;;;574                *reinterpret_cast<u32*>(pDy + x) = out3210;
;;;575                *reinterpret_cast<u32*>(pDy + x + 4) = out7654;
;;;576              }
;;;577    #endif // #elif USE_ARM_ACCELERATION == ACCELERATION_ARM_M4
;;;578    
;;;579              pDy[0] = 0;
;;;580              pDy[imageWidth-1] = 0;
;;;581            } // for(s32 y=1; y<(imageHeight-1); y++)
;;;582    
;;;583            dx(-1,-1,0,-1).Set(0);
;;;584    
;;;585            return RESULT_OK;
;;;586          } // Result FastGradient(const Array<u8> &in, Array<s8> &dx, Array<s8> &dy, MemoryStack scratch)
0000a0  b029              ADD      sp,sp,#0xa4
0000a2  f04f60a0          MOV      r0,#0x5000000         ;500
0000a6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.170|
0000aa  f24010f1          MOV      r0,#0x1f1             ;497
0000ae  e9cda000          STRD     r10,r0,[sp,#0]        ;497
0000b2  a359              ADR      r3,|L1.536|
0000b4  a26f              ADR      r2,|L1.628|
0000b6  a16b              ADR      r1,|L1.612|
0000b8  2005              MOVS     r0,#5                 ;497
0000ba  f7fffffe          BL       _Anki_Log
0000be  b029              ADD      sp,sp,#0xa4
0000c0  f04f6080          MOV      r0,#0x4000000         ;497
0000c4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.200|
0000c8  f0150f07          TST      r5,#7                 ;505
0000cc  d00e              BEQ      |L1.236|
0000ce  f24010f9          MOV      r0,#0x1f9             ;505
0000d2  e9cda000          STRD     r10,r0,[sp,#0]        ;505
0000d6  a350              ADR      r3,|L1.536|
0000d8  a26b              ADR      r2,|L1.648|
0000da  a162              ADR      r1,|L1.612|
0000dc  2005              MOVS     r0,#5                 ;505
0000de  f7fffffe          BL       _Anki_Log
0000e2  b029              ADD      sp,sp,#0xa4
0000e4  f04f60a0          MOV      r0,#0x5000000         ;505
0000e8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.236|
0000ec  f04f0800          MOV      r8,#0                 ;508
0000f0  f04f30ff          MOV      r0,#0xffffffff        ;508
0000f4  e9cd8000          STRD     r8,r0,[sp,#0]         ;508
0000f8  4643              MOV      r3,r8                 ;508
0000fa  4642              MOV      r2,r8                 ;508
0000fc  4639              MOV      r1,r7                 ;508
0000fe  a81c              ADD      r0,sp,#0x70           ;508
000100  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIaEclEiiii ; Anki::Embedded::Array<signed char>::operator ()(int, int, int, int)
000104  e9dd011c          LDRD     r0,r1,[sp,#0x70]      ;508
000108  e9dd231e          LDRD     r2,r3,[sp,#0x78]      ;508
00010c  e9ddab20          LDRD     r10,r11,[sp,#0x80]    ;508
000110  e9ddce22          LDRD     r12,lr,[sp,#0x88]     ;508
000114  e9cd0102          STRD     r0,r1,[sp,#8]         ;508
000118  a804              ADD      r0,sp,#0x10           ;508
00011a  e8a05c0c          STM      r0!,{r2,r3,r10-r12,lr};508
00011e  f10d0a90          ADD      r10,sp,#0x90          ;508
000122  e8ba100f          LDM      r10!,{r0-r3,r12}      ;508
000126  f10d0a28          ADD      r10,sp,#0x28          ;508
00012a  e8aa100f          STM      r10!,{r0-r3,r12}      ;508
00012e  2100              MOVS     r1,#0                 ;508
000130  a802              ADD      r0,sp,#8              ;508
000132  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIaE3SetEa ; Anki::Embedded::ArraySlice<signed char>::Set(signed char)
000136  2301              MOVS     r3,#1                 ;510
000138  f1a90b01          SUB      r11,r9,#1             ;510
00013c  f1bb0f01          CMP      r11,#1                ;510
000140  bfc8              IT       GT                    ;518
000142  f1a50c01          SUBGT    r12,r5,#1             ;518
000146  dd44              BLE      |L1.466|
                  |L1.328|
000148  68a1              LDR      r1,[r4,#8]            ;510
00014a  6920              LDR      r0,[r4,#0x10]         ;510
00014c  fb030a01          MLA      r10,r3,r1,r0          ;510
000150  68b9              LDR      r1,[r7,#8]            ;510
000152  6938              LDR      r0,[r7,#0x10]         ;510
000154  fb030201          MLA      r2,r3,r1,r0           ;510
000158  2001              MOVS     r0,#1                 ;518
00015a  f1bc0f01          CMP      r12,#1                ;518
00015e  dd0d              BLE      |L1.380|
                  |L1.352|
000160  eb0a0100          ADD      r1,r10,r0             ;519
000164  f8919001          LDRB     r9,[r1,#1]            ;519
000168  f8111c01          LDRB     r1,[r1,#-1]           ;519
00016c  ea4f0959          LSR      r9,r9,#1              ;519
000170  eba90151          SUB      r1,r9,r1,LSR #1       ;519
000174  5411              STRB     r1,[r2,r0]            ;519
000176  1c40              ADDS     r0,r0,#1              ;518
000178  4584              CMP      r12,r0                ;518
00017a  dcf1              BGT      |L1.352|
                  |L1.380|
00017c  1950              ADDS     r0,r2,r5              ;545
00017e  f8828000          STRB     r8,[r2,#0]            ;544
000182  f8008c01          STRB     r8,[r0,#-1]           ;545
000186  68a1              LDR      r1,[r4,#8]            ;545
000188  6920              LDR      r0,[r4,#0x10]         ;545
00018a  1e5a              SUBS     r2,r3,#1              ;547
00018c  f1030901          ADD      r9,r3,#1              ;548
000190  fb020201          MLA      r2,r2,r1,r0           ;548
000194  fb090a01          MLA      r10,r9,r1,r0          ;548
000198  68b1              LDR      r1,[r6,#8]            ;548
00019a  6930              LDR      r0,[r6,#0x10]         ;548
00019c  fb030101          MLA      r1,r3,r1,r0           ;548
0001a0  2001              MOVS     r0,#1                 ;553
0001a2  f1bc0f01          CMP      r12,#1                ;553
0001a6  dd0c              BLE      |L1.450|
                  |L1.424|
0001a8  f81a9000          LDRB     r9,[r10,r0]           ;554
0001ac  f812e000          LDRB     lr,[r2,r0]            ;554
0001b0  ea4f0959          LSR      r9,r9,#1              ;554
0001b4  eba9095e          SUB      r9,r9,lr,LSR #1       ;554
0001b8  f8019000          STRB     r9,[r1,r0]            ;554
0001bc  1c40              ADDS     r0,r0,#1              ;553
0001be  4584              CMP      r12,r0                ;553
0001c0  dcf2              BGT      |L1.424|
                  |L1.450|
0001c2  1948              ADDS     r0,r1,r5              ;580
0001c4  f8818000          STRB     r8,[r1,#0]            ;579
0001c8  1c5b              ADDS     r3,r3,#1              ;510
0001ca  f8008c01          STRB     r8,[r0,#-1]           ;580
0001ce  455b              CMP      r3,r11                ;510
0001d0  dbba              BLT      |L1.328|
                  |L1.466|
0001d2  f04f30ff          MOV      r0,#0xffffffff        ;583
0001d6  e9cd8000          STRD     r8,r0,[sp,#0]         ;583
0001da  4603              MOV      r3,r0                 ;583
0001dc  4602              MOV      r2,r0                 ;583
0001de  4639              MOV      r1,r7                 ;583
0001e0  a81c              ADD      r0,sp,#0x70           ;583
0001e2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIaEclEiiii ; Anki::Embedded::Array<signed char>::operator ()(int, int, int, int)
0001e6  f10d0970          ADD      r9,sp,#0x70           ;583
0001ea  e8b9107f          LDM      r9!,{r0-r6,r12}       ;583
0001ee  f10d093c          ADD      r9,sp,#0x3c           ;583
0001f2  e8a9107f          STM      r9!,{r0-r6,r12}       ;583
0001f6  ac24              ADD      r4,sp,#0x90           ;583
0001f8  e8b4100f          LDM      r4!,{r0-r3,r12}       ;583
0001fc  ac17              ADD      r4,sp,#0x5c           ;583
0001fe  e8a4100f          STM      r4!,{r0-r3,r12}       ;583
000202  2100              MOVS     r1,#0                 ;583
000204  a80f              ADD      r0,sp,#0x3c           ;583
000206  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIaE3SetEa ; Anki::Embedded::ArraySlice<signed char>::Set(signed char)
00020a  b029              ADD      sp,sp,#0xa4
00020c  2000              MOVS     r0,#0                 ;585
00020e  e8bd8ff0          POP      {r4-r11,pc}
;;;587        } // namespace ImageProcessing
                          ENDP

000212  0000              DCW      0x0000
                  |L1.532|
                          DCD      ||.constdata||+0x292
                  |L1.536|
000218  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\filtering.cpp",0
00021c  6f726574
000220  6563685c
000224  76697369
000228  6f6e5c72
00022c  6f626f74
000230  5c737263
000234  5c66696c
000238  74657269
00023c  6e672e63
000240  707000  
000243  00                DCB      0
                  |L1.580|
000244  496d6167          DCB      "Images must be the same size",0
000248  6573206d
00024c  75737420
000250  62652074
000254  68652073
000258  616d6520
00025c  73697a65
000260  00      
000261  00                DCB      0
000262  00                DCB      0
000263  00                DCB      0
                  |L1.612|
000264  46617374          DCB      "FastGradient",0
000268  47726164
00026c  69656e74
000270  00      
000271  00                DCB      0
000272  00                DCB      0
000273  00                DCB      0
                  |L1.628|
000274  496d6167          DCB      "Image is invalid",0
000278  65206973
00027c  20696e76
000280  616c6964
000284  00      
000285  00                DCB      0
000286  00                DCB      0
000287  00                DCB      0
                  |L1.648|
000288  496d6167          DCB      "Image width must be divisible by 8",0
00028c  65207769
000290  64746820
000294  6d757374
000298  20626520
00029c  64697669
0002a0  7369626c
0002a4  65206279
0002a8  203800  
0002ab  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded15ImageProcessing18BoxFilterNormalizeERKNS0_5ArrayIhEEihRS3_NS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15ImageProcessing18BoxFilterNormalizeERKNS0_5ArrayIhEEihRS3_NS0_11MemoryStackE PROC ; Anki::Embedded::ImageProcessing::BoxFilterNormalize(const Anki::Embedded::Array<unsigned char>&, int, unsigned char, Anki::Embedded::Array<unsigned char>&, Anki::Embedded::MemoryStack)
;;;72     
;;;73           Result BoxFilterNormalize(const Array<u8> &image, const s32 boxSize, const u8 padValue,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;74             Array<u8> &imageNorm, MemoryStack scratch)
;;;75           {
000004  b08d              SUB      sp,sp,#0x34
000006  4616              MOV      r6,r2
;;;76             Result lastResult = RESULT_OK;
;;;77     
;;;78             AnkiConditionalErrorAndReturnValue(image.IsValid(),
000008  f8dda068          LDR      r10,[sp,#0x68]
00000c  980d              LDR      r0,[sp,#0x34]
00000e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000012  4ffe              LDR      r7,|L2.1036|
000014  2800              CMP      r0,#0
000016  f00082c5          BEQ.W    |L2.1444|
;;;79               RESULT_FAIL_INVALID_OBJECT,
;;;80               "BoxFilterNormalize",
;;;81               "Input image is invalid.");
;;;82     
;;;83             const s32 imageHeight = image.get_size(0);
00001a  2100              MOVS     r1,#0
00001c  980d              LDR      r0,[sp,#0x34]
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000022  4605              MOV      r5,r0
;;;84             const s32 imageWidth  = image.get_size(1);
000024  2101              MOVS     r1,#1
000026  980d              LDR      r0,[sp,#0x34]
000028  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00002c  4604              MOV      r4,r0
;;;85     
;;;86             AnkiConditionalErrorAndReturnValue(imageNorm.IsValid(),
00002e  9810              LDR      r0,[sp,#0x40]
000030  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000034  2800              CMP      r0,#0
000036  f00082c3          BEQ.W    |L2.1472|
00003a  f8dd9034          LDR      r9,[sp,#0x34]
00003e  f8dd8040          LDR      r8,[sp,#0x40]
000042  4648              MOV      r0,r9
000044  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000048  2800              CMP      r0,#0
;;;87               RESULT_FAIL_INVALID_OBJECT,
;;;88               "BoxFilterNormalize",
;;;89               "Output normalized image is invalid.");
;;;90     
;;;91             AnkiConditionalErrorAndReturnValue(AreEqualSize(image, imageNorm),
00004a  f00082c7          BEQ.W    |L2.1500|
00004e  4640              MOV      r0,r8
000050  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000054  2800              CMP      r0,#0
000056  f00082c1          BEQ.W    |L2.1500|
00005a  2100              MOVS     r1,#0
00005c  4648              MOV      r0,r9
00005e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000062  4683              MOV      r11,r0
000064  2100              MOVS     r1,#0
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00006c  4583              CMP      r11,r0
00006e  f04082b5          BNE.W    |L2.1500|
000072  2101              MOVS     r1,#1
000074  4648              MOV      r0,r9
000076  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00007a  4681              MOV      r9,r0
00007c  2101              MOVS     r1,#1
00007e  4640              MOV      r0,r8
000080  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000084  4581              CMP      r9,r0
000086  f04082a9          BNE.W    |L2.1500|
;;;92               RESULT_FAIL_INVALID_SIZE,
;;;93               "BoxFilterNormalize",
;;;94               "Output normalized image must match input image's size.");
;;;95     
;;;96             Array<f32> integralImage(imageHeight, imageWidth, scratch);
00008a  2300              MOVS     r3,#0
00008c  461a              MOV      r2,r3
00008e  2101              MOVS     r1,#1
000090  a80c              ADD      r0,sp,#0x30
000092  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000096  6800              LDR      r0,[r0,#0]
000098  9000              STR      r0,[sp,#0]
00009a  4653              MOV      r3,r10
00009c  4622              MOV      r2,r4
00009e  4629              MOV      r1,r5
0000a0  a807              ADD      r0,sp,#0x1c
0000a2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000a6  980b              LDR      r0,[sp,#0x2c]
0000a8  2800              CMP      r0,#0
0000aa  f00082a5          BEQ.W    |L2.1528|
0000ae  9807              LDR      r0,[sp,#0x1c]
0000b0  2800              CMP      r0,#0
0000b2  bfa4              ITT      GE
0000b4  9808              LDRGE    r0,[sp,#0x20]
0000b6  2800              CMPGE    r0,#0
0000b8  f2c0829e          BLT.W    |L2.1528|
;;;97     
;;;98             AnkiConditionalErrorAndReturnValue(integralImage.IsValid(),
;;;99               RESULT_FAIL_OUT_OF_MEMORY,
;;;100              "BoxFilterNormalize",
;;;101              "Could not allocate integral image (out of memory?).");
;;;102    
;;;103            if((lastResult = CreateIntegralImage(image, integralImage)) != RESULT_OK) {
0000bc  f10d081c          ADD      r8,sp,#0x1c
0000c0  9f0d              LDR      r7,[sp,#0x34]
0000c2  e8b8100f          LDM      r8!,{r0-r3,r12}
0000c6  f10d0808          ADD      r8,sp,#8
0000ca  e8a8100f          STM      r8!,{r0-r3,r12}
0000ce  4638              MOV      r0,r7
0000d0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
0000d4  f8df9338          LDR      r9,|L2.1040|
0000d8  2800              CMP      r0,#0
0000da  bf1c              ITT      NE
0000dc  9806              LDRNE    r0,[sp,#0x18]
0000de  2800              CMPNE    r0,#0
0000e0  f0008297          BEQ.W    |L2.1554|
0000e4  9802              LDR      r0,[sp,#8]
0000e6  2800              CMP      r0,#0
0000e8  bfa4              ITT      GE
0000ea  9803              LDRGE    r0,[sp,#0xc]
0000ec  2800              CMPGE    r0,#0
0000ee  f2c08290          BLT.W    |L2.1554|
0000f2  2100              MOVS     r1,#0
0000f4  4638              MOV      r0,r7
0000f6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000fa  9000              STR      r0,[sp,#0]
0000fc  2101              MOVS     r1,#1
0000fe  4638              MOV      r0,r7
000100  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000104  4680              MOV      r8,r0
000106  4638              MOV      r0,r7
000108  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
00010c  2800              CMP      r0,#0
00010e  bf1c              ITT      NE
000110  9806              LDRNE    r0,[sp,#0x18]
000112  2800              CMPNE    r0,#0
000114  f0008289          BEQ.W    |L2.1578|
000118  9802              LDR      r0,[sp,#8]
00011a  2800              CMP      r0,#0
00011c  bfa4              ITT      GE
00011e  9803              LDRGE    r0,[sp,#0xc]
000120  2800              CMPGE    r0,#0
000122  f2c08282          BLT.W    |L2.1578|
000126  2100              MOVS     r1,#0
000128  4638              MOV      r0,r7
00012a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00012e  9902              LDR      r1,[sp,#8]
000130  4288              CMP      r0,r1
000132  f040827a          BNE.W    |L2.1578|
000136  2101              MOVS     r1,#1
000138  4638              MOV      r0,r7
00013a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00013e  9903              LDR      r1,[sp,#0xc]
000140  4288              CMP      r0,r1
000142  f0408272          BNE.W    |L2.1578|
000146  68ba              LDR      r2,[r7,#8]
000148  6939              LDR      r1,[r7,#0x10]
00014a  2000              MOVS     r0,#0
00014c  fb001302          MLA      r3,r0,r2,r1
000150  9a04              LDR      r2,[sp,#0x10]
000152  9906              LDR      r1,[sp,#0x18]
000154  fb001202          MLA      r2,r0,r2,r1
000158  7818              LDRB     r0,[r3,#0]
00015a  ee000a10          VMOV     s0,r0
00015e  2001              MOVS     r0,#1
000160  f1b80f01          CMP      r8,#1
000164  eeb80a40          VCVT.F32.U32 s0,s0
000168  ed820a00          VSTR     s0,[r2,#0]
00016c  dd10              BLE      |L2.400|
                  |L2.366|
00016e  f813c000          LDRB     r12,[r3,r0]
000172  eb020180          ADD      r1,r2,r0,LSL #2
000176  ee00ca10          VMOV     s0,r12
00017a  ed510a01          VLDR     s1,[r1,#-4]
00017e  1c40              ADDS     r0,r0,#1
000180  eeb80a40          VCVT.F32.U32 s0,s0
000184  4580              CMP      r8,r0
000186  ee300a80          VADD.F32 s0,s1,s0
00018a  ed810a00          VSTR     s0,[r1,#0]
00018e  dcee              BGT      |L2.366|
                  |L2.400|
000190  9800              LDR      r0,[sp,#0]
000192  2101              MOVS     r1,#1
000194  2801              CMP      r0,#1
000196  dd3b              BLE      |L2.528|
                  |L2.408|
000198  68ba              LDR      r2,[r7,#8]
00019a  6938              LDR      r0,[r7,#0x10]
00019c  9b04              LDR      r3,[sp,#0x10]
00019e  fb010a02          MLA      r10,r1,r2,r0
0001a2  9a04              LDR      r2,[sp,#0x10]
0001a4  9806              LDR      r0,[sp,#0x18]
0001a6  fb010902          MLA      r9,r1,r2,r0
0001aa  9a06              LDR      r2,[sp,#0x18]
0001ac  1e48              SUBS     r0,r1,#1
0001ae  fb002c03          MLA      r12,r0,r3,r2
0001b2  f89a0000          LDRB     r0,[r10,#0]
0001b6  eddc0a00          VLDR     s1,[r12,#0]
0001ba  ee000a10          VMOV     s0,r0
0001be  2001              MOVS     r0,#1
0001c0  f1b80f01          CMP      r8,#1
0001c4  eeb80a40          VCVT.F32.U32 s0,s0
0001c8  ee300a20          VADD.F32 s0,s0,s1
0001cc  ed890a00          VSTR     s0,[r9,#0]
0001d0  dd1a              BLE      |L2.520|
                  |L2.466|
0001d2  eb090280          ADD      r2,r9,r0,LSL #2
0001d6  eb0c0380          ADD      r3,r12,r0,LSL #2
0001da  ed120a01          VLDR     s0,[r2,#-4]
0001de  edd30a00          VLDR     s1,[r3,#0]
0001e2  f81ab000          LDRB     r11,[r10,r0]
0001e6  1c40              ADDS     r0,r0,#1
0001e8  ee700a20          VADD.F32 s1,s0,s1
0001ec  ee00ba10          VMOV     s0,r11
0001f0  4580              CMP      r8,r0
0001f2  eeb80a40          VCVT.F32.U32 s0,s0
0001f6  ee300a80          VADD.F32 s0,s1,s0
0001fa  ed530a01          VLDR     s1,[r3,#-4]
0001fe  ee300a60          VSUB.F32 s0,s0,s1
000202  ed820a00          VSTR     s0,[r2,#0]
000206  dce4              BGT      |L2.466|
                  |L2.520|
000208  9800              LDR      r0,[sp,#0]
00020a  1c49              ADDS     r1,r1,#1
00020c  4281              CMP      r1,r0
00020e  dbc3              BLT      |L2.408|
                  |L2.528|
000210  2000              MOVS     r0,#0
                  |L2.530|
000212  2800              CMP      r0,#0
;;;104              return lastResult;
;;;105            }
;;;106    
;;;107            // Divide each input pixel by box filter results computed from integral image
;;;108            const s32 halfWidth = MIN(MIN(imageWidth,imageHeight)-1, boxSize)/2;
;;;109            const s32 boxWidth  = 2*halfWidth + 1;
;;;110            const f32 boxArea   = static_cast<f32>(boxWidth*boxWidth);
;;;111            const f32 outMean = 128.f; //static_cast<f32>(GetImageTypeMean<u8>());
;;;112    
;;;113            for(s32 y=0; y<imageHeight; y++) {
;;;114              // Input/Output pixel pointers:
;;;115              const u8 * restrict pImageRow     = image.Pointer(y,0);
;;;116              u8       * restrict pImageRowNorm = imageNorm.Pointer(y,0);
;;;117    
;;;118              // Integral image pointers for top and bottom of summing box
;;;119              s32 rowAhead  = y + halfWidth;
;;;120              s32 rowBehind = y - halfWidth - 1;
;;;121              s32 inBoundsHeight = boxWidth;
;;;122              if(rowAhead >= imageHeight) {
;;;123                inBoundsHeight = imageHeight - y + halfWidth;
;;;124                rowAhead = imageHeight - 1;
;;;125              }
;;;126              if(rowBehind < 0) {
;;;127                inBoundsHeight = y+halfWidth+1;
;;;128                rowBehind = 0;
;;;129              }
;;;130    
;;;131              const f32 * restrict pIntegralImageRowBehind = integralImage.Pointer(rowBehind,0);
;;;132              const f32 * restrict pIntegralImageRowAhead  = integralImage.Pointer(rowAhead, 0);
;;;133    
;;;134              // Left side
;;;135              for(s32 x=0; x<=halfWidth; x++) {
;;;136                f32 OutOfBoundsArea = static_cast<f32>(boxArea - (x+halfWidth+1)*inBoundsHeight);
;;;137    
;;;138                f32 boxSum = (pIntegralImageRowAhead[x+halfWidth] -
;;;139                  pIntegralImageRowAhead[0] -
;;;140                  pIntegralImageRowBehind[x+halfWidth] +
;;;141                  pIntegralImageRowBehind[0] +
;;;142                  OutOfBoundsArea*static_cast<f32>(padValue));
;;;143    
;;;144                pImageRowNorm[x] = static_cast<u8>(CLIP(outMean * (static_cast<f32>(pImageRow[x]) * boxArea) / boxSum, 0.f, 255.f));
;;;145              }
;;;146    
;;;147              // Middle
;;;148              const f32 OutOfBoundsArea = static_cast<f32>(boxArea - boxWidth*inBoundsHeight);
;;;149              const f32 paddingSum = OutOfBoundsArea * static_cast<f32>(padValue);
;;;150              for(s32 x=halfWidth+1; x<imageWidth-halfWidth; x++) {
;;;151                f32 boxSum = (pIntegralImageRowAhead[x+halfWidth] -
;;;152                  pIntegralImageRowAhead[x-halfWidth-1] -
;;;153                  pIntegralImageRowBehind[x+halfWidth] +
;;;154                  pIntegralImageRowBehind[x-halfWidth-1] +
;;;155                  paddingSum);
;;;156    
;;;157                pImageRowNorm[x] = static_cast<u8>(CLIP(outMean * (static_cast<f32>(pImageRow[x]) * boxArea) / boxSum, 0.f, 255.f));
;;;158              }
;;;159    
;;;160              // Right side
;;;161              for(s32 x=imageWidth-halfWidth; x<imageWidth; x++) {
;;;162                f32 OutOfBoundsArea = static_cast<f32>(boxArea - (imageWidth-x+halfWidth)*inBoundsHeight);
;;;163    
;;;164                f32 boxSum = (pIntegralImageRowAhead[imageWidth-1] -
;;;165                  pIntegralImageRowAhead[x-halfWidth-1] -
;;;166                  pIntegralImageRowBehind[imageWidth-1] +
;;;167                  pIntegralImageRowBehind[x-halfWidth-1] +
;;;168                  OutOfBoundsArea*static_cast<f32>(padValue));
;;;169    
;;;170                pImageRowNorm[x] = static_cast<u8>(CLIP(outMean * (static_cast<f32>(pImageRow[x]) * boxArea) / boxSum, 0.f, 255.f));
;;;171              }
;;;172            }
;;;173    
;;;174            return RESULT_OK;
;;;175          } // BoxFilterNormalize()
000214  bf1c              ITT      NE
000216  b011              ADDNE    sp,sp,#0x44
000218  e8bd8ff0          POPNE    {r4-r11,pc}
00021c  42ac              CMP      r4,r5                 ;108
00021e  bfb4              ITE      LT                    ;108
000220  4620              MOVLT    r0,r4                 ;108
000222  4628              MOVGE    r0,r5                 ;108
000224  1e41              SUBS     r1,r0,#1              ;108
000226  980e              LDR      r0,[sp,#0x38]         ;108
000228  4281              CMP      r1,r0                 ;108
00022a  da04              BGE      |L2.566|
00022c  42ac              CMP      r4,r5                 ;108
00022e  bfac              ITE      GE                    ;108
000230  4628              MOVGE    r0,r5                 ;108
000232  4620              MOVLT    r0,r4                 ;108
000234  1e40              SUBS     r0,r0,#1              ;108
                  |L2.566|
000236  eb0070d0          ADD      r0,r0,r0,LSR #31      ;108
00023a  1040              ASRS     r0,r0,#1              ;108
00023c  2101              MOVS     r1,#1                 ;109
00023e  eb010140          ADD      r1,r1,r0,LSL #1       ;109
000242  9101              STR      r1,[sp,#4]            ;110
000244  4349              MULS     r1,r1,r1              ;110
000246  ee001a10          VMOV     s0,r1                 ;110
00024a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;110
00024e  eddf1a71          VLDR     s3,|L2.1044|
000252  f04f0c00          MOV      r12,#0                ;113
000256  2d00              CMP      r5,#0                 ;113
000258  f34081a0          BLE.W    |L2.1436|
00025c  1a21              SUBS     r1,r4,r0              ;150
00025e  ed9f3a6e          VLDR     s6,|L2.1048|
000262  eddf3a6e          VLDR     s7,|L2.1052|
000266  9100              STR      r1,[sp,#0]            ;144
                  |L2.616|
000268  990d              LDR      r1,[sp,#0x34]         ;144
00026a  f8dd8004          LDR      r8,[sp,#4]            ;122
00026e  690a              LDR      r2,[r1,#0x10]         ;122
000270  6889              LDR      r1,[r1,#8]            ;122
000272  fb0c2a01          MLA      r10,r12,r1,r2         ;122
000276  9910              LDR      r1,[sp,#0x40]         ;122
000278  690a              LDR      r2,[r1,#0x10]         ;122
00027a  6889              LDR      r1,[r1,#8]            ;122
00027c  fb0c2901          MLA      r9,r12,r1,r2          ;122
000280  eb0c0100          ADD      r1,r12,r0             ;119
000284  ebac0200          SUB      r2,r12,r0             ;120
000288  1e52              SUBS     r2,r2,#1              ;120
00028a  460b              MOV      r3,r1                 ;119
00028c  42a9              CMP      r1,r5                 ;122
00028e  db04              BLT      |L2.666|
000290  eba5010c          SUB      r1,r5,r12             ;123
000294  eb010800          ADD      r8,r1,r0              ;123
000298  1e69              SUBS     r1,r5,#1              ;124
                  |L2.666|
00029a  2a00              CMP      r2,#0                 ;126
00029c  bfbc              ITT      LT                    ;127
00029e  f1030801          ADDLT    r8,r3,#1              ;127
0002a2  2200              MOVLT    r2,#0                 ;128
0002a4  9f09              LDR      r7,[sp,#0x24]         ;128
0002a6  9b0b              LDR      r3,[sp,#0x2c]         ;128
0002a8  fb023207          MLA      r2,r2,r7,r3           ;128
0002ac  fb013107          MLA      r1,r1,r7,r3           ;128
0002b0  2300              MOVS     r3,#0                 ;135
0002b2  2800              CMP      r0,#0                 ;135
0002b4  db6e              BLT      |L2.916|
0002b6  ed914a00          VLDR     s8,[r1,#0]            ;138
0002ba  ed922a00          VLDR     s4,[r2,#0]            ;138
0002be  f8dfb160          LDR      r11,|L2.1056|
                  |L2.706|
0002c2  181f              ADDS     r7,r3,r0              ;136
0002c4  f1070e01          ADD      lr,r7,#1              ;136
0002c8  fb0efe08          MUL      lr,lr,r8              ;136
0002cc  ee00ea90          VMOV     s1,lr                 ;136
0002d0  eb010e87          ADD      lr,r1,r7,LSL #2       ;138
0002d4  eb020787          ADD      r7,r2,r7,LSL #2       ;138
0002d8  eef80ae0          VCVT.F32.S32 s1,s1                 ;136
0002dc  edd72a00          VLDR     s5,[r7,#0]            ;138
0002e0  f81a7003          LDRB     r7,[r10,r3]           ;144
0002e4  ee301a60          VSUB.F32 s2,s0,s1              ;136
0002e8  edde0a00          VLDR     s1,[lr,#0]            ;138
0002ec  ee700ac4          VSUB.F32 s1,s1,s8              ;138
0002f0  ee700ae2          VSUB.F32 s1,s1,s5              ;138
0002f4  ee026a90          VMOV     s5,r6                 ;138
0002f8  ee700a82          VADD.F32 s1,s1,s4              ;138
0002fc  eef82a62          VCVT.F32.U32 s5,s5                 ;138
000300  ee410a22          VMLA.F32 s1,s2,s5              ;138
000304  ee017a10          VMOV     s2,r7                 ;144
000308  eeb81a41          VCVT.F32.U32 s2,s2                 ;144
00030c  ee211a00          VMUL.F32 s2,s2,s0              ;144
000310  ee211a21          VMUL.F32 s2,s2,s3              ;144
000314  eec12a20          VDIV.F32 s5,s2,s1              ;144
000318  eef52ac0          VCMPE.F32 s5,#0.0               ;144
00031c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;144
000320  bfd8              IT       LE                    ;144
000322  eeb01a43          VMOVLE.F32 s2,s6                 ;144
000326  dd09              BLE      |L2.828|
000328  ee017a10          VMOV     s2,r7                 ;144
00032c  eeb81a41          VCVT.F32.U32 s2,s2                 ;144
000330  ee211a00          VMUL.F32 s2,s2,s0              ;144
000334  ee612a21          VMUL.F32 s5,s2,s3              ;144
000338  ee821aa0          VDIV.F32 s2,s5,s1              ;144
                  |L2.828|
00033c  ee11ea10          VMOV     lr,s2                 ;144
000340  45f3              CMP      r11,lr                ;144
000342  bfd8              IT       LE                    ;144
000344  eeb01a63          VMOVLE.F32 s2,s7                 ;144
000348  dd1b              BLE      |L2.898|
00034a  ee017a10          VMOV     s2,r7                 ;144
00034e  eeb81a41          VCVT.F32.U32 s2,s2                 ;144
000352  ee211a00          VMUL.F32 s2,s2,s0              ;144
000356  ee211a21          VMUL.F32 s2,s2,s3              ;144
00035a  eec12a20          VDIV.F32 s5,s2,s1              ;144
00035e  eef52ac0          VCMPE.F32 s5,#0.0               ;144
000362  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;144
000366  bfd8              IT       LE                    ;144
000368  eeb01a43          VMOVLE.F32 s2,s6                 ;144
00036c  dd09              BLE      |L2.898|
00036e  ee017a10          VMOV     s2,r7                 ;144
000372  eeb81a41          VCVT.F32.U32 s2,s2                 ;144
000376  ee211a00          VMUL.F32 s2,s2,s0              ;144
00037a  ee612a21          VMUL.F32 s5,s2,s3              ;144
00037e  ee821aa0          VDIV.F32 s2,s5,s1              ;144
                  |L2.898|
000382  eefc0ac1          VCVT.U32.F32 s1,s2                 ;144
000386  ee107a90          VMOV     r7,s1                 ;144
00038a  f8097003          STRB     r7,[r9,r3]            ;144
00038e  1c5b              ADDS     r3,r3,#1              ;135
000390  4283              CMP      r3,r0                 ;135
000392  dd96              BLE      |L2.706|
                  |L2.916|
000394  9b01              LDR      r3,[sp,#4]            ;148
000396  ee016a10          VMOV     s2,r6                 ;149
00039a  fb03f308          MUL      r3,r3,r8              ;148
00039e  ee003a90          VMOV     s1,r3                 ;148
0003a2  eeb81a41          VCVT.F32.U32 s2,s2                 ;149
0003a6  9f00              LDR      r7,[sp,#0]            ;150
0003a8  eef80ae0          VCVT.F32.S32 s1,s1                 ;148
0003ac  1c43              ADDS     r3,r0,#1              ;150
0003ae  429f              CMP      r7,r3                 ;150
0003b0  ee700a60          VSUB.F32 s1,s0,s1              ;148
0003b4  ee202a81          VMUL.F32 s4,s1,s2              ;149
0003b8  dd75              BLE      |L2.1190|
                  |L2.954|
0003ba  181f              ADDS     r7,r3,r0              ;151
0003bc  eb010b87          ADD      r11,r1,r7,LSL #2      ;151
0003c0  eb020787          ADD      r7,r2,r7,LSL #2       ;151
0003c4  eddb0a00          VLDR     s1,[r11,#0]           ;151
0003c8  eba30b00          SUB      r11,r3,r0             ;151
0003cc  eb010e8b          ADD      lr,r1,r11,LSL #2      ;151
0003d0  ed1e1a01          VLDR     s2,[lr,#-4]           ;151
0003d4  ee700ac1          VSUB.F32 s1,s1,s2              ;151
0003d8  ed971a00          VLDR     s2,[r7,#0]            ;151
0003dc  eb02078b          ADD      r7,r2,r11,LSL #2      ;151
0003e0  ee700ac1          VSUB.F32 s1,s1,s2              ;151
0003e4  ed171a01          VLDR     s2,[r7,#-4]           ;151
0003e8  f81a7003          LDRB     r7,[r10,r3]           ;157
0003ec  ee700a81          VADD.F32 s1,s1,s2              ;151
0003f0  ee017a10          VMOV     s2,r7                 ;157
0003f4  eeb81a41          VCVT.F32.U32 s2,s2                 ;157
0003f8  ee700a82          VADD.F32 s1,s1,s4              ;151
0003fc  ee211a00          VMUL.F32 s2,s2,s0              ;157
000400  ee211a21          VMUL.F32 s2,s2,s3              ;157
000404  eec12a20          VDIV.F32 s5,s2,s1              ;157
000408  e00c              B        |L2.1060|
00040a  0000              DCW      0x0000
                  |L2.1036|
                          DCD      ||.constdata||+0x10f
                  |L2.1040|
                          DCD      _ZZN4Anki8Embedded15ImageProcessing19CreateIntegralImageIhfEENS_6ResultERKNS0_5ArrayIT_EENS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::CreateIntegralImage<unsigned char, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>)::__PRETTY_FUNCTION__
                  |L2.1044|
000414  43000000          DCFS     0x43000000 ; 128
                  |L2.1048|
000418  00000000          DCFS     0x00000000 ; 0
                  |L2.1052|
00041c  437f0000          DCFS     0x437f0000 ; 255
                  |L2.1056|
                          DCD      0x437f0000
                  |L2.1060|
000424  eef52ac0          VCMPE.F32 s5,#0.0               ;157
000428  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;157
00042c  bfd8              IT       LE                    ;157
00042e  eeb01a43          VMOVLE.F32 s2,s6                 ;157
000432  dd09              BLE      |L2.1096|
000434  ee017a10          VMOV     s2,r7                 ;157
000438  eeb81a41          VCVT.F32.U32 s2,s2                 ;157
00043c  ee211a00          VMUL.F32 s2,s2,s0              ;157
000440  ee612a21          VMUL.F32 s5,s2,s3              ;157
000444  ee821aa0          VDIV.F32 s2,s5,s1              ;157
                  |L2.1096|
000448  f8dfe1f8          LDR      lr,|L2.1604|
00044c  ee11ba10          VMOV     r11,s2                ;157
000450  45de              CMP      lr,r11                ;157
000452  bfd8              IT       LE                    ;157
000454  eeb01a63          VMOVLE.F32 s2,s7                 ;157
000458  dd1b              BLE      |L2.1170|
00045a  ee017a10          VMOV     s2,r7                 ;157
00045e  eeb81a41          VCVT.F32.U32 s2,s2                 ;157
000462  ee211a00          VMUL.F32 s2,s2,s0              ;157
000466  ee211a21          VMUL.F32 s2,s2,s3              ;157
00046a  eec12a20          VDIV.F32 s5,s2,s1              ;157
00046e  eef52ac0          VCMPE.F32 s5,#0.0               ;157
000472  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;157
000476  bfd8              IT       LE                    ;157
000478  eeb01a43          VMOVLE.F32 s2,s6                 ;157
00047c  dd09              BLE      |L2.1170|
00047e  ee017a10          VMOV     s2,r7                 ;157
000482  eeb81a41          VCVT.F32.U32 s2,s2                 ;157
000486  ee211a00          VMUL.F32 s2,s2,s0              ;157
00048a  ee612a21          VMUL.F32 s5,s2,s3              ;157
00048e  ee821aa0          VDIV.F32 s2,s5,s1              ;157
                  |L2.1170|
000492  eefc0ac1          VCVT.U32.F32 s1,s2                 ;157
000496  ee107a90          VMOV     r7,s1                 ;157
00049a  f8097003          STRB     r7,[r9,r3]            ;157
00049e  9f00              LDR      r7,[sp,#0]            ;150
0004a0  1c5b              ADDS     r3,r3,#1              ;150
0004a2  429f              CMP      r7,r3                 ;150
0004a4  dc89              BGT      |L2.954|
                  |L2.1190|
0004a6  463b              MOV      r3,r7                 ;150
0004a8  429c              CMP      r4,r3                 ;161
0004aa  dd72              BLE      |L2.1426|
0004ac  eb010784          ADD      r7,r1,r4,LSL #2       ;164
0004b0  f8dfb190          LDR      r11,|L2.1604|
0004b4  ed174a01          VLDR     s8,[r7,#-4]           ;164
0004b8  eb020784          ADD      r7,r2,r4,LSL #2       ;164
0004bc  ed572a01          VLDR     s5,[r7,#-4]           ;164
                  |L2.1216|
0004c0  1ae7              SUBS     r7,r4,r3              ;162
0004c2  4407              ADD      r7,r7,r0              ;162
0004c4  fb07f708          MUL      r7,r7,r8              ;162
0004c8  ee007a90          VMOV     s1,r7                 ;162
0004cc  1a1f              SUBS     r7,r3,r0              ;164
0004ce  eb010e87          ADD      lr,r1,r7,LSL #2       ;164
0004d2  eef80ae0          VCVT.F32.S32 s1,s1                 ;162
0004d6  eb020787          ADD      r7,r2,r7,LSL #2       ;164
0004da  ed172a01          VLDR     s4,[r7,#-4]           ;164
0004de  ee301a60          VSUB.F32 s2,s0,s1              ;162
0004e2  ed5e0a01          VLDR     s1,[lr,#-4]           ;164
0004e6  f81a7003          LDRB     r7,[r10,r3]           ;170
0004ea  ee740a60          VSUB.F32 s1,s8,s1              ;164
0004ee  ee700ae2          VSUB.F32 s1,s1,s5              ;164
0004f2  ee700a82          VADD.F32 s1,s1,s4              ;164
0004f6  ee026a10          VMOV     s4,r6                 ;164
0004fa  eeb82a42          VCVT.F32.U32 s4,s4                 ;164
0004fe  ee410a02          VMLA.F32 s1,s2,s4              ;164
000502  ee017a10          VMOV     s2,r7                 ;170
000506  eeb81a41          VCVT.F32.U32 s2,s2                 ;170
00050a  ee211a00          VMUL.F32 s2,s2,s0              ;170
00050e  ee211a21          VMUL.F32 s2,s2,s3              ;170
000512  ee812a20          VDIV.F32 s4,s2,s1              ;170
000516  eeb52ac0          VCMPE.F32 s4,#0.0               ;170
00051a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;170
00051e  bfd8              IT       LE                    ;170
000520  eeb01a43          VMOVLE.F32 s2,s6                 ;170
000524  dd09              BLE      |L2.1338|
000526  ee017a10          VMOV     s2,r7                 ;170
00052a  eeb81a41          VCVT.F32.U32 s2,s2                 ;170
00052e  ee211a00          VMUL.F32 s2,s2,s0              ;170
000532  ee212a21          VMUL.F32 s4,s2,s3              ;170
000536  ee821a20          VDIV.F32 s2,s4,s1              ;170
                  |L2.1338|
00053a  ee11ea10          VMOV     lr,s2                 ;170
00053e  45f3              CMP      r11,lr                ;170
000540  bfd8              IT       LE                    ;170
000542  eeb01a63          VMOVLE.F32 s2,s7                 ;170
000546  dd1b              BLE      |L2.1408|
000548  ee017a10          VMOV     s2,r7                 ;170
00054c  eeb81a41          VCVT.F32.U32 s2,s2                 ;170
000550  ee211a00          VMUL.F32 s2,s2,s0              ;170
000554  ee211a21          VMUL.F32 s2,s2,s3              ;170
000558  ee812a20          VDIV.F32 s4,s2,s1              ;170
00055c  eeb52ac0          VCMPE.F32 s4,#0.0               ;170
000560  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;170
000564  bfd8              IT       LE                    ;170
000566  eeb01a43          VMOVLE.F32 s2,s6                 ;170
00056a  dd09              BLE      |L2.1408|
00056c  ee017a10          VMOV     s2,r7                 ;170
000570  eeb81a41          VCVT.F32.U32 s2,s2                 ;170
000574  ee211a00          VMUL.F32 s2,s2,s0              ;170
000578  ee212a21          VMUL.F32 s4,s2,s3              ;170
00057c  ee821a20          VDIV.F32 s2,s4,s1              ;170
                  |L2.1408|
000580  eefc0ac1          VCVT.U32.F32 s1,s2                 ;170
000584  ee107a90          VMOV     r7,s1                 ;170
000588  f8097003          STRB     r7,[r9,r3]            ;170
00058c  1c5b              ADDS     r3,r3,#1              ;161
00058e  42a3              CMP      r3,r4                 ;161
000590  db96              BLT      |L2.1216|
                  |L2.1426|
000592  f10c0c01          ADD      r12,r12,#1            ;113
000596  45ac              CMP      r12,r5                ;113
000598  f6ffae66          BLT      |L2.616|
                  |L2.1436|
00059c  b011              ADD      sp,sp,#0x44
00059e  2000              MOVS     r0,#0                 ;174
0005a0  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1444|
0005a4  204e              MOVS     r0,#0x4e              ;78
0005a6  e9cd7000          STRD     r7,r0,[sp,#0]         ;78
0005aa  a327              ADR      r3,|L2.1608|
0005ac  a231              ADR      r2,|L2.1652|
0005ae  a137              ADR      r1,|L2.1676|
0005b0  2005              MOVS     r0,#5                 ;78
0005b2  f7fffffe          BL       _Anki_Log
0005b6  b011              ADD      sp,sp,#0x44
0005b8  f04f6080          MOV      r0,#0x4000000         ;78
0005bc  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1472|
0005c0  2056              MOVS     r0,#0x56              ;86
0005c2  e9cd7000          STRD     r7,r0,[sp,#0]         ;86
0005c6  a320              ADR      r3,|L2.1608|
0005c8  a235              ADR      r2,|L2.1696|
0005ca  a130              ADR      r1,|L2.1676|
0005cc  2005              MOVS     r0,#5                 ;86
0005ce  f7fffffe          BL       _Anki_Log
0005d2  b011              ADD      sp,sp,#0x44
0005d4  f04f6080          MOV      r0,#0x4000000         ;86
0005d8  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1500|
0005dc  205b              MOVS     r0,#0x5b              ;91
0005de  e9cd7000          STRD     r7,r0,[sp,#0]         ;91
0005e2  a319              ADR      r3,|L2.1608|
0005e4  a237              ADR      r2,|L2.1732|
0005e6  a129              ADR      r1,|L2.1676|
0005e8  2005              MOVS     r0,#5                 ;91
0005ea  f7fffffe          BL       _Anki_Log
0005ee  b011              ADD      sp,sp,#0x44
0005f0  f04f60a0          MOV      r0,#0x5000000         ;91
0005f4  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1528|
0005f8  2062              MOVS     r0,#0x62              ;98
0005fa  e9cd7000          STRD     r7,r0,[sp,#0]         ;98
0005fe  a312              ADR      r3,|L2.1608|
000600  a23e              ADR      r2,|L2.1788|
000602  a122              ADR      r1,|L2.1676|
000604  2005              MOVS     r0,#5                 ;98
000606  f7fffffe          BL       _Anki_Log
00060a  b011              ADD      sp,sp,#0x44
00060c  4848              LDR      r0,|L2.1840|
00060e  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1554|
000612  20fb              MOVS     r0,#0xfb
000614  e9cd9000          STRD     r9,r0,[sp,#0]
000618  a346              ADR      r3,|L2.1844|
00061a  a256              ADR      r2,|L2.1908|
00061c  a159              ADR      r1,|L2.1924|
00061e  2005              MOVS     r0,#5
000620  f7fffffe          BL       _Anki_Log
000624  f04f6080          MOV      r0,#0x4000000
000628  e5f3              B        |L2.530|
                  |L2.1578|
00062a  f2401003          MOV      r0,#0x103
00062e  e9cd9000          STRD     r9,r0,[sp,#0]
000632  a340              ADR      r3,|L2.1844|
000634  a25d              ADR      r2,|L2.1964|
000636  a153              ADR      r1,|L2.1924|
000638  2005              MOVS     r0,#5
00063a  f7fffffe          BL       _Anki_Log
00063e  f04f60a0          MOV      r0,#0x5000000
000642  e5e6              B        |L2.530|
;;;176    
                          ENDP

                  |L2.1604|
                          DCD      0x437f0000
                  |L2.1608|
000648  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\filtering.cpp",0
00064c  6f726574
000650  6563685c
000654  76697369
000658  6f6e5c72
00065c  6f626f74
000660  5c737263
000664  5c66696c
000668  74657269
00066c  6e672e63
000670  707000  
000673  00                DCB      0
                  |L2.1652|
000674  496e7075          DCB      "Input image is invalid.",0
000678  7420696d
00067c  61676520
000680  69732069
000684  6e76616c
000688  69642e00
                  |L2.1676|
00068c  426f7846          DCB      "BoxFilterNormalize",0
000690  696c7465
000694  724e6f72
000698  6d616c69
00069c  7a6500  
00069f  00                DCB      0
                  |L2.1696|
0006a0  4f757470          DCB      "Output normalized image is invalid.",0
0006a4  7574206e
0006a8  6f726d61
0006ac  6c697a65
0006b0  6420696d
0006b4  61676520
0006b8  69732069
0006bc  6e76616c
0006c0  69642e00
                  |L2.1732|
0006c4  4f757470          DCB      "Output normalized image must match input image's size.",0
0006c8  7574206e
0006cc  6f726d61
0006d0  6c697a65
0006d4  6420696d
0006d8  61676520
0006dc  6d757374
0006e0  206d6174
0006e4  63682069
0006e8  6e707574
0006ec  20696d61
0006f0  67652773
0006f4  2073697a
0006f8  652e00  
0006fb  00                DCB      0
                  |L2.1788|
0006fc  436f756c          DCB      "Could not allocate integral image (out of memory?).",0
000700  64206e6f
000704  7420616c
000708  6c6f6361
00070c  74652069
000710  6e746567
000714  72616c20
000718  696d6167
00071c  6520286f
000720  7574206f
000724  66206d65
000728  6d6f7279
00072c  3f292e00
                  |L2.1840|
                          DCD      0x01000001
                  |L2.1844|
000734  2e2e5c63          DCB      "..\\coretech\\vision\\include\\anki/vision/robot/imageP"
000738  6f726574
00073c  6563685c
000740  76697369
000744  6f6e5c69
000748  6e636c75
00074c  64655c61
000750  6e6b692f
000754  76697369
000758  6f6e2f72
00075c  6f626f74
000760  2f696d61
000764  676550  
000767  726f6365          DCB      "rocessing.h",0
00076b  7373696e
00076f  672e6800
000773  00                DCB      0
                  |L2.1908|
000774  496e7661          DCB      "Invalid objects",0
000778  6c696420
00077c  6f626a65
000780  63747300
                  |L2.1924|
000784  496d6167          DCB      "ImageProcessing::CreateIntegralImage",0
000788  6550726f
00078c  63657373
000790  696e673a
000794  3a437265
000798  61746549
00079c  6e746567
0007a0  72616c49
0007a4  6d616765
0007a8  00      
0007a9  00                DCB      0
0007aa  00                DCB      0
0007ab  00                DCB      0
                  |L2.1964|
0007ac  4f757470          DCB      "Output integralImage array must match input image's siz"
0007b0  75742069
0007b4  6e746567
0007b8  72616c49
0007bc  6d616765
0007c0  20617272
0007c4  6179206d
0007c8  75737420
0007cc  6d617463
0007d0  6820696e
0007d4  70757420
0007d8  696d6167
0007dc  65277320
0007e0  73697a  
0007e3  652e00            DCB      "e.",0
0007e6  00                DCB      0
0007e7  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded15ImageProcessing18DownsampleBilinearERKNS0_5ArrayIhEERS3_NS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15ImageProcessing18DownsampleBilinearERKNS0_5ArrayIhEERS3_NS0_11MemoryStackE PROC ; Anki::Embedded::ImageProcessing::DownsampleBilinear(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::Array<unsigned char>&, Anki::Embedded::MemoryStack)
;;;356    
;;;357          Result DownsampleBilinear(const Array<u8> &in, Array<u8> &out, MemoryStack scratch)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;358          {
000004  4615              MOV      r5,r2
000006  ed2d8b08          VPUSH    {d8-d11}
00000a  b0bc              SUB      sp,sp,#0xf0
;;;359            const s32 numSubpixelBits = 11;
;;;360            const u32 subpixelMultiplierU32 = 1 << numSubpixelBits;
;;;361            const f32 subpixelMultiplierF32 = static_cast<f32>(subpixelMultiplierU32);
00000c  eddf9afe          VLDR     s19,|L3.1032|
000010  e9dd0444          LDRD     r0,r4,[sp,#0x110]
000014  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000018  2800              CMP      r0,#0
;;;362    
;;;363            AnkiConditionalErrorAndReturnValue(AreValid(in, out, scratch),
00001a  d053              BEQ      |L3.196|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000022  2800              CMP      r0,#0
000024  d04e              BEQ      |L3.196|
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
00002c  2800              CMP      r0,#0
00002e  d049              BEQ      |L3.196|
;;;364              RESULT_FAIL_INVALID_OBJECT, "DownsampleBilinear", "Invalid objects");
;;;365    
;;;366            const s32 inHeight = in.get_size(0);
000030  2100              MOVS     r1,#0
000032  9844              LDR      r0,[sp,#0x110]
000034  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000038  4606              MOV      r6,r0
;;;367            const s32 inWidth  = in.get_size(1);
00003a  2101              MOVS     r1,#1
00003c  9844              LDR      r0,[sp,#0x110]
00003e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000042  4680              MOV      r8,r0
;;;368    
;;;369            const s32 outHeight = out.get_size(0);
000044  2100              MOVS     r1,#0
000046  9845              LDR      r0,[sp,#0x114]
000048  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;370            const s32 outWidth  = out.get_size(1);
00004c  9001              STR      r0,[sp,#4]
00004e  2101              MOVS     r1,#1
000050  9845              LDR      r0,[sp,#0x114]
000052  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;371    
;;;372            Point<f32> scale(
000056  ee008a10          VMOV     s0,r8
00005a  4604              MOV      r4,r0                 ;370
00005c  9801              LDR      r0,[sp,#4]
00005e  eef80ac0          VCVT.F32.S32 s1,s0
000062  ee004a10          VMOV     s0,r4
000066  eeb80ac0          VCVT.F32.S32 s0,s0
00006a  eec0aa80          VDIV.F32 s21,s1,s0
00006e  ee006a10          VMOV     s0,r6
000072  eef80ac0          VCVT.F32.S32 s1,s0
000076  ee000a10          VMOV     s0,r0
00007a  eeb80ac0          VCVT.F32.S32 s0,s0
00007e  eec08a80          VDIV.F32 s17,s1,s0
;;;373              static_cast<f32>(inWidth)  / static_cast<f32>(outWidth),
;;;374              static_cast<f32>(inHeight) / static_cast<f32>(outHeight));
;;;375    
;;;376            AnkiConditionalErrorAndReturnValue(scale.x > 1.0f && scale.y > 1.0f,
000082  ee1a0a90          VMOV     r0,s21
000086  edcdaa36          VSTR     s21,[sp,#0xd8]
00008a  f1b05f7e          CMP      r0,#0x3f800000
00008e  edcd8a37          VSTR     s17,[sp,#0xdc]
000092  bfc4              ITT      GT
000094  ee180a90          VMOVGT   r0,s17
000098  f1b05f7e          CMPGT    r0,#0x3f800000
00009c  dc20              BGT      |L3.224|
00009e  f44f71bc          MOV      r1,#0x178
0000a2  48da              LDR      r0,|L3.1036|
0000a4  e9cd0100          STRD     r0,r1,[sp,#0]
0000a8  a3d9              ADR      r3,|L3.1040|
0000aa  a2e4              ADR      r2,|L3.1084|
0000ac  a1e9              ADR      r1,|L3.1108|
0000ae  2005              MOVS     r0,#5
0000b0  f7fffffe          BL       _Anki_Log
0000b4  f04f60a0          MOV      r0,#0x5000000
                  |L3.184|
;;;377              RESULT_FAIL_INVALID_SIZE, "DownsampleBilinear", "out is larger than in");
;;;378    
;;;379            const f32 yInStart     = (0.5f * scale.y) - 0.5f;
;;;380            const f32 yInIncrement = scale.y;
;;;381    
;;;382            const f32 xInStart     = (0.5f * scale.x) - 0.5f;
;;;383            const f32 xInIncrement = scale.x;
;;;384    
;;;385            FixedLengthList<s32> inX0s_S32(outWidth, scratch);
;;;386            FixedLengthList<s32> inX1s_S32(outWidth, scratch);
;;;387            FixedLengthList<u32> alphaXs(outWidth, scratch);
;;;388    
;;;389            AnkiConditionalErrorAndReturnValue(AreValid(inX0s_S32, inX1s_S32, alphaXs),
;;;390              RESULT_FAIL_OUT_OF_MEMORY, "DownsampleBilinear", "Out of memory");
;;;391    
;;;392            // Compute the x coordinates
;;;393            {
;;;394              s32 * restrict pInX0s_S32 = inX0s_S32.Pointer(0);
;;;395              s32 * restrict pInX1s_S32 = inX1s_S32.Pointer(0);
;;;396              u32 * restrict pAlphaXs = alphaXs.Pointer(0);
;;;397    
;;;398              for(s32 x=0; x<outWidth; x++) {
;;;399                const f32 inX = xInStart + xInIncrement * static_cast<f32>(x);
;;;400    
;;;401                s32 inX0_S32 = FloorS32(inX);
;;;402                s32 inX1_S32 = CeilS32(inX);
;;;403    
;;;404                // Technically, we can't interpolate the borders. But this is a reasonable approximation
;;;405                if(inX0_S32 < 0)
;;;406                  inX0_S32 = 0;
;;;407    
;;;408                if(inX1_S32 < 0)
;;;409                  inX1_S32 = 0;
;;;410    
;;;411                if(inX0_S32 > (inWidth-1))
;;;412                  inX0_S32 = inWidth-1;
;;;413    
;;;414                if(inX1_S32 > (inWidth-1))
;;;415                  inX1_S32 = inWidth-1;
;;;416    
;;;417                const f32 inX0 = static_cast<f32>(inX0_S32);
;;;418    
;;;419                const f32 alphaX = inX - inX0;
;;;420    
;;;421                pInX0s_S32[x] = inX0_S32;
;;;422                pInX1s_S32[x] = inX1_S32;
;;;423                pAlphaXs[x] = saturate_cast<u32>(alphaX * subpixelMultiplierF32);
;;;424              } // for(s32 x=0; x<outWidth; x++)
;;;425            }
;;;426    
;;;427            const s32 * restrict pInX0s_S32 = inX0s_S32.Pointer(0);
;;;428            const s32 * restrict pInX1s_S32 = inX1s_S32.Pointer(0);
;;;429            const u32 * restrict pAlphaXs = alphaXs.Pointer(0);
;;;430    
;;;431            for(s32 y=0; y<outHeight; y++) {
;;;432              const f32 inY = yInStart + yInIncrement * static_cast<f32>(y);
;;;433    
;;;434              s32 inY0_S32 = FloorS32(inY);
;;;435              s32 inY1_S32 = CeilS32(inY);
;;;436    
;;;437              // Technically, we can't interpolate the borders. But this is a reasonable approximation
;;;438              if(inY0_S32 < 0)
;;;439                inY0_S32 = 0;
;;;440    
;;;441              if(inY1_S32 < 0)
;;;442                inY1_S32 = 0;
;;;443    
;;;444              if(inY0_S32 > (inHeight-1))
;;;445                inY0_S32 = inHeight-1;
;;;446    
;;;447              if(inY1_S32 > (inHeight-1))
;;;448                inY1_S32 = inHeight-1;
;;;449    
;;;450              const f32 inY0 = static_cast<f32>(inY0_S32);
;;;451              //const f32 inY1 = static_cast<f32>(inY1_S32);
;;;452    
;;;453              const f32 alphaYF32 = inY - inY0;
;;;454              //const f32 alphaYinverseF32 = 1.0f - alphaYF32;
;;;455    
;;;456              const u32 alphaYU32 = saturate_cast<u32>(alphaYF32 * subpixelMultiplierF32);
;;;457              const u32 alphaYinverseU32 = subpixelMultiplierU32 - alphaYU32;
;;;458    
;;;459              const u8 * restrict pIn_y0 = in.Pointer(inY0_S32, 0);
;;;460              const u8 * restrict pIn_y1 = in.Pointer(inY1_S32, 0);
;;;461    
;;;462              u8 * restrict pOut = out.Pointer(y, 0);
;;;463    
;;;464              s32 x = 0;
;;;465    
;;;466              for(; x<outWidth; x++) {
;;;467                const s32 inX0_S32 = pInX0s_S32[x];
;;;468                const s32 inX1_S32 = pInX1s_S32[x];
;;;469                const u32 alphaX = pAlphaXs[x];
;;;470    
;;;471                const u32 alphaXinverse = subpixelMultiplierU32 - alphaX;
;;;472    
;;;473                const u8 pixelTL = pIn_y0[inX0_S32];
;;;474                const u8 pixelTR = pIn_y0[inX1_S32];
;;;475                const u8 pixelBL = pIn_y1[inX0_S32];
;;;476                const u8 pixelBR = pIn_y1[inX1_S32];
;;;477    
;;;478                //const f32 interpolatedPixelValueF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;479    
;;;480                const u32 interpolatedTop = alphaXinverse*pixelTL + alphaX*pixelTR;
;;;481                const u32 interpolatedBottom = alphaXinverse*pixelBL + alphaX*pixelBR;
;;;482                const u32 interpolatedPixelValue = alphaYinverseU32*interpolatedTop + alphaYU32*interpolatedBottom;
;;;483                const u32 interpolatedPixelValueScaled = interpolatedPixelValue >> (2*numSubpixelBits);
;;;484    
;;;485                pOut[x] = interpolatedPixelValueScaled & 0xFF;
;;;486              } // for(s32 x=0; x<outWidth; x++)
;;;487            } // for(s32 y=0; y<outHeight; y++)
;;;488    
;;;489            return RESULT_OK;
;;;490          } // Result DownsampleBilinear(const Array<u8> &in, Array<u8> &out, MemoryStack scratch)
0000b8  b03c              ADD      sp,sp,#0xf0
0000ba  ecbd8b08          VPOP     {d8-d11}
0000be  b003              ADD      sp,sp,#0xc
0000c0  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.196|
0000c4  f240116b          MOV      r1,#0x16b             ;363
0000c8  48d0              LDR      r0,|L3.1036|
0000ca  e9cd0100          STRD     r0,r1,[sp,#0]         ;363
0000ce  a3d0              ADR      r3,|L3.1040|
0000d0  a2e5              ADR      r2,|L3.1128|
0000d2  a1e0              ADR      r1,|L3.1108|
0000d4  2005              MOVS     r0,#5                 ;363
0000d6  f7fffffe          BL       _Anki_Log
0000da  f04f6080          MOV      r0,#0x4000000         ;363
0000de  e7eb              B        |L3.184|
                  |L3.224|
0000e0  eef6ba00          VMOV.F32 s23,#0.50000000       ;379
0000e4  2300              MOVS     r3,#0                 ;385
0000e6  eeb09a6b          VMOV.F32 s18,s23               ;379
0000ea  eeb0ba6b          VMOV.F32 s22,s23               ;379
0000ee  ee189aab          VNMLS.F32 s18,s17,s23           ;379
0000f2  ee1abaab          VNMLS.F32 s22,s21,s23           ;382
0000f6  461a              MOV      r2,r3                 ;385
0000f8  2101              MOVS     r1,#1                 ;385
0000fa  a838              ADD      r0,sp,#0xe0           ;385
0000fc  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000100  6803              LDR      r3,[r0,#0]            ;385
000102  462a              MOV      r2,r5                 ;385
000104  4621              MOV      r1,r4                 ;385
000106  a80f              ADD      r0,sp,#0x3c           ;385
000108  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00010c  2300              MOVS     r3,#0                 ;386
00010e  461a              MOV      r2,r3                 ;386
000110  2101              MOVS     r1,#1                 ;386
000112  a839              ADD      r0,sp,#0xe4           ;386
000114  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000118  6803              LDR      r3,[r0,#0]            ;386
00011a  462a              MOV      r2,r5                 ;386
00011c  4621              MOV      r1,r4                 ;386
00011e  a81c              ADD      r0,sp,#0x70           ;386
000120  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000124  a802              ADD      r0,sp,#8              ;387
000126  2300              MOVS     r3,#0                 ;387
000128  902f              STR      r0,[sp,#0xbc]         ;387
00012a  461a              MOV      r2,r3                 ;387
00012c  2101              MOVS     r1,#1                 ;387
00012e  a83a              ADD      r0,sp,#0xe8           ;387
000130  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000134  6800              LDR      r0,[r0,#0]            ;387
000136  9035              STR      r0,[sp,#0xd4]         ;387
000138  9000              STR      r0,[sp,#0]            ;387
00013a  462b              MOV      r3,r5                 ;387
00013c  4622              MOV      r2,r4                 ;387
00013e  2101              MOVS     r1,#1                 ;387
000140  a830              ADD      r0,sp,#0xc0           ;387
000142  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000146  f8d0a010          LDR      r10,[r0,#0x10]        ;387
00014a  e8b00aa0          LDM      r0!,{r5,r7,r9,r11}    ;387
00014e  2000              MOVS     r0,#0                 ;387
000150  4602              MOV      r2,r0                 ;387
000152  902d              STR      r0,[sp,#0xb4]         ;387
000154  2001              MOVS     r0,#1                 ;387
000156  902e              STR      r0,[sp,#0xb8]         ;387
000158  2101              MOVS     r1,#1                 ;387
00015a  982d              LDR      r0,[sp,#0xb4]         ;387
00015c  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
000160  902c              STR      r0,[sp,#0xb0]         ;387
000162  2000              MOVS     r0,#0                 ;387
000164  4602              MOV      r2,r0                 ;387
000166  902a              STR      r0,[sp,#0xa8]         ;387
000168  2001              MOVS     r0,#1                 ;387
00016a  902b              STR      r0,[sp,#0xac]         ;387
00016c  2101              MOVS     r1,#1                 ;387
00016e  982a              LDR      r0,[sp,#0xa8]         ;387
000170  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
000174  9029              STR      r0,[sp,#0xa4]         ;387
000176  e9dd012c          LDRD     r0,r1,[sp,#0xb0]      ;387
00017a  9a2e              LDR      r2,[sp,#0xb8]         ;387
00017c  9204              STR      r2,[sp,#0x10]         ;387
00017e  e9cd0102          STRD     r0,r1,[sp,#8]         ;387
000182  e9dd0129          LDRD     r0,r1,[sp,#0xa4]      ;387
000186  ab05              ADD      r3,sp,#0x14           ;387
000188  9a2b              LDR      r2,[sp,#0xac]         ;387
00018a  f8cda030          STR      r10,[sp,#0x30]        ;387
00018e  e8a30aa7          STM      r3!,{r0-r2,r5,r7,r9,r11};387
000192  2100              MOVS     r1,#0                 ;387
000194  2d00              CMP      r5,#0                 ;387
000196  bfc8              IT       GT                    ;387
000198  2f00              CMPGT    r7,#0                 ;387
00019a  dd25              BLE      |L3.488|
00019c  fb05f007          MUL      r0,r5,r7              ;387
0001a0  b310              CBZ      r0,|L3.488|
0001a2  2000              MOVS     r0,#0                 ;387
0001a4  fb00a009          MLA      r0,r0,r9,r10          ;387
0001a8  900d              STR      r0,[sp,#0x34]         ;387
                  |L3.426|
0001aa  2d00              CMP      r5,#0                 ;387
0001ac  bfc8              IT       GT                    ;387
0001ae  2f00              CMPGT    r7,#0                 ;387
0001b0  dd1c              BLE      |L3.492|
0001b2  fb05f007          MUL      r0,r5,r7              ;387
0001b6  b1c8              CBZ      r0,|L3.492|
0001b8  2000              MOVS     r0,#0                 ;387
0001ba  fb00a009          MLA      r0,r0,r9,r10          ;387
0001be  900e              STR      r0,[sp,#0x38]         ;387
                  |L3.448|
0001c0  2d00              CMP      r5,#0                 ;387
0001c2  bfc8              IT       GT                    ;387
0001c4  2f00              CMPGT    r7,#0                 ;387
0001c6  dd13              BLE      |L3.496|
0001c8  fb05f007          MUL      r0,r5,r7              ;387
0001cc  b180              CBZ      r0,|L3.496|
0001ce  2000              MOVS     r0,#0                 ;387
0001d0  fb00a009          MLA      r0,r0,r9,r10          ;387
0001d4  900e              STR      r0,[sp,#0x38]         ;387
                  |L3.470|
0001d6  a835              ADD      r0,sp,#0xd4           ;387
0001d8  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0001dc  b150              CBZ      r0,|L3.500|
0001de  4621              MOV      r1,r4                 ;387
0001e0  982f              LDR      r0,[sp,#0xbc]         ;387
0001e2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIjE8set_sizeEi ; Anki::Embedded::FixedLengthList<unsigned>::set_size(int)
0001e6  e009              B        |L3.508|
                  |L3.488|
0001e8  910d              STR      r1,[sp,#0x34]         ;387
0001ea  e7de              B        |L3.426|
                  |L3.492|
0001ec  910e              STR      r1,[sp,#0x38]         ;387
0001ee  e7e7              B        |L3.448|
                  |L3.496|
0001f0  910e              STR      r1,[sp,#0x38]         ;387
0001f2  e7f0              B        |L3.470|
                  |L3.500|
0001f4  2100              MOVS     r1,#0                 ;387
0001f6  982f              LDR      r0,[sp,#0xbc]         ;387
0001f8  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIjE8set_sizeEi ; Anki::Embedded::FixedLengthList<unsigned>::set_size(int)
                  |L3.508|
0001fc  9912              LDR      r1,[sp,#0x48]         ;387
0001fe  9816              LDR      r0,[sp,#0x58]         ;387
000200  4281              CMP      r1,r0                 ;387
000202  f3008163          BGT.W    |L3.1228|
000206  9819              LDR      r0,[sp,#0x64]         ;387
000208  b130              CBZ      r0,|L3.536|
00020a  9815              LDR      r0,[sp,#0x54]         ;387
00020c  2800              CMP      r0,#0                 ;387
00020e  bfa3              ITTTE    GE                    ;387
000210  9816              LDRGE    r0,[sp,#0x58]         ;387
000212  2800              CMPGE    r0,#0                 ;387
000214  2001              MOVGE    r0,#1                 ;387
000216  2000              MOVLT    r0,#0                 ;387
                  |L3.536|
000218  2800              CMP      r0,#0                 ;387
00021a  f0008157          BEQ.W    |L3.1228|
00021e  991f              LDR      r1,[sp,#0x7c]         ;387
000220  9823              LDR      r0,[sp,#0x8c]         ;387
000222  4281              CMP      r1,r0                 ;387
000224  f3008152          BGT.W    |L3.1228|
000228  9826              LDR      r0,[sp,#0x98]         ;387
00022a  b130              CBZ      r0,|L3.570|
00022c  9822              LDR      r0,[sp,#0x88]         ;387
00022e  2800              CMP      r0,#0                 ;387
000230  bfa3              ITTTE    GE                    ;387
000232  9823              LDRGE    r0,[sp,#0x8c]         ;387
000234  2800              CMPGE    r0,#0                 ;387
000236  2001              MOVGE    r0,#1                 ;387
000238  2000              MOVLT    r0,#0                 ;387
                  |L3.570|
00023a  2800              CMP      r0,#0                 ;387
00023c  f0008146          BEQ.W    |L3.1228|
000240  9905              LDR      r1,[sp,#0x14]         ;387
000242  9809              LDR      r0,[sp,#0x24]         ;387
000244  4281              CMP      r1,r0                 ;387
000246  f3008141          BGT.W    |L3.1228|
00024a  980c              LDR      r0,[sp,#0x30]         ;387
00024c  b130              CBZ      r0,|L3.604|
00024e  9808              LDR      r0,[sp,#0x20]         ;387
000250  2800              CMP      r0,#0                 ;387
000252  bfa3              ITTTE    GE                    ;387
000254  9809              LDRGE    r0,[sp,#0x24]         ;387
000256  2800              CMPGE    r0,#0                 ;387
000258  2001              MOVGE    r0,#1                 ;387
00025a  2000              MOVLT    r0,#0                 ;387
                  |L3.604|
00025c  2800              CMP      r0,#0                 ;387
00025e  f0008135          BEQ.W    |L3.1228|
000262  981b              LDR      r0,[sp,#0x6c]         ;394
000264  9000              STR      r0,[sp,#0]            ;394
000266  2500              MOVS     r5,#0                 ;398
000268  ed9faa83          VLDR     s20,|L3.1144|
00026c  f8ddb0a0          LDR      r11,[sp,#0xa0]        ;398
000270  f8dda038          LDR      r10,[sp,#0x38]        ;398
000274  2c00              CMP      r4,#0                 ;398
000276  bfc8              IT       GT                    ;411
000278  f1a80901          SUBGT    r9,r8,#1              ;411
00027c  dd53              BLE      |L3.806|
                  |L3.638|
00027e  ee005a10          VMOV     s0,r5                 ;399
000282  eeb08a4b          VMOV.F32 s16,s22               ;399
000286  eeb80ac0          VCVT.F32.S32 s0,s0                 ;399
00028a  ee0a8a80          VMLA.F32 s16,s21,s0            ;399
00028e  eeb00a48          VMOV.F32 s0,s16                ;399
000292  f7fffffe          BL       __hardfp_floorf
000296  eebd0ac0          VCVT.S32.F32 s0,s0                 ;399
00029a  ee107a10          VMOV     r7,s0                 ;399
00029e  eeb00a48          VMOV.F32 s0,s16                ;399
0002a2  f7fffffe          BL       __hardfp_ceilf
0002a6  eebd0ac0          VCVT.S32.F32 s0,s0                 ;399
0002aa  2f00              CMP      r7,#0                 ;405
0002ac  ee100a10          VMOV     r0,s0                 ;405
0002b0  bfb8              IT       LT                    ;406
0002b2  2700              MOVLT    r7,#0                 ;406
0002b4  2800              CMP      r0,#0                 ;408
0002b6  bfb8              IT       LT                    ;409
0002b8  2000              MOVLT    r0,#0                 ;409
0002ba  454f              CMP      r7,r9                 ;411
0002bc  bfc8              IT       GT                    ;412
0002be  f1a80701          SUBGT    r7,r8,#1              ;412
0002c2  4548              CMP      r0,r9                 ;414
0002c4  bfc8              IT       GT                    ;415
0002c6  f1a80001          SUBGT    r0,r8,#1              ;415
0002ca  ee007a10          VMOV     s0,r7                 ;417
0002ce  9900              LDR      r1,[sp,#0]            ;421
0002d0  eeb80ac0          VCVT.F32.S32 s0,s0                 ;417
0002d4  f8417025          STR      r7,[r1,r5,LSL #2]     ;421
0002d8  f84b0025          STR      r0,[r11,r5,LSL #2]    ;422
0002dc  ee380a40          VSUB.F32 s0,s16,s0             ;419
0002e0  ee200a29          VMUL.F32 s0,s0,s19             ;423
0002e4  ee100a10          VMOV     r0,s0                 ;423
0002e8  f1b04f9f          CMP      r0,#0x4f800000        ;423
0002ec  bfa8              IT       GE                    ;423
0002ee  f04f30ff          MOVGE    r0,#0xffffffff        ;423
0002f2  da13              BGE      |L3.796|
0002f4  eeb50ac0          VCMPE.F32 s0,#0.0               ;408
0002f8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;408
0002fc  bf38              IT       CC                    ;408
0002fe  eeb00a4a          VMOVCC.F32 s0,s20                ;408
000302  eeb50ac0          VCMPE.F32 s0,#0.0               ;408
000306  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;408
00030a  bfd8              IT       LE                    ;408
00030c  2000              MOVLE    r0,#0                 ;408
00030e  dd05              BLE      |L3.796|
000310  ee300a2b          VADD.F32 s0,s0,s23             ;408
000314  eebc0ac0          VCVT.U32.F32 s0,s0                 ;408
000318  ee100a10          VMOV     r0,s0                 ;408
                  |L3.796|
00031c  f84a0025          STR      r0,[r10,r5,LSL #2]    ;423
000320  1c6d              ADDS     r5,r5,#1              ;398
000322  42a5              CMP      r5,r4                 ;398
000324  dbab              BLT      |L3.638|
                  |L3.806|
000326  981b              LDR      r0,[sp,#0x6c]         ;427
000328  9029              STR      r0,[sp,#0xa4]         ;427
00032a  9828              LDR      r0,[sp,#0xa0]         ;428
00032c  902a              STR      r0,[sp,#0xa8]         ;428
00032e  980e              LDR      r0,[sp,#0x38]         ;429
000330  902c              STR      r0,[sp,#0xb0]         ;431
000332  9801              LDR      r0,[sp,#4]            ;431
000334  2500              MOVS     r5,#0                 ;431
000336  2800              CMP      r0,#0                 ;431
000338  bfc4              ITT      GT                    ;444
00033a  1e70              SUBGT    r0,r6,#1              ;444
00033c  9000              STRGT    r0,[sp,#0]            ;444
00033e  dd61              BLE      |L3.1028|
                  |L3.832|
000340  ee005a10          VMOV     s0,r5                 ;432
000344  eeb08a49          VMOV.F32 s16,s18               ;432
000348  eeb80ac0          VCVT.F32.S32 s0,s0                 ;432
00034c  ee088a80          VMLA.F32 s16,s17,s0            ;432
000350  eeb00a48          VMOV.F32 s0,s16                ;432
000354  f7fffffe          BL       __hardfp_floorf
000358  eebd0ac0          VCVT.S32.F32 s0,s0                 ;432
00035c  ee107a10          VMOV     r7,s0                 ;432
000360  eeb00a48          VMOV.F32 s0,s16                ;432
000364  f7fffffe          BL       __hardfp_ceilf
000368  eebd0ac0          VCVT.S32.F32 s0,s0                 ;432
00036c  2f00              CMP      r7,#0                 ;438
00036e  ee100a10          VMOV     r0,s0                 ;438
000372  bfb8              IT       LT                    ;439
000374  2700              MOVLT    r7,#0                 ;439
000376  2800              CMP      r0,#0                 ;441
000378  bfb8              IT       LT                    ;442
00037a  2000              MOVLT    r0,#0                 ;442
00037c  9900              LDR      r1,[sp,#0]            ;444
00037e  428f              CMP      r7,r1                 ;444
000380  bfc8              IT       GT                    ;445
000382  1e77              SUBGT    r7,r6,#1              ;445
000384  4288              CMP      r0,r1                 ;447
000386  bfc8              IT       GT                    ;448
000388  1e70              SUBGT    r0,r6,#1              ;448
00038a  ee007a10          VMOV     s0,r7                 ;450
00038e  eeb80ac0          VCVT.F32.S32 s0,s0                 ;450
000392  ee380a40          VSUB.F32 s0,s16,s0             ;453
000396  ee200a29          VMUL.F32 s0,s0,s19             ;456
00039a  ee101a10          VMOV     r1,s0                 ;456
00039e  f1b14f9f          CMP      r1,#0x4f800000        ;456
0003a2  bfa8              IT       GE                    ;456
0003a4  f04f39ff          MOVGE    r9,#0xffffffff        ;456
0003a8  da14              BGE      |L3.980|
0003aa  eeb50ac0          VCMPE.F32 s0,#0.0               ;441
0003ae  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;441
0003b2  bf38              IT       CC                    ;441
0003b4  eeb00a4a          VMOVCC.F32 s0,s20                ;441
0003b8  eeb50ac0          VCMPE.F32 s0,#0.0               ;441
0003bc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;441
0003c0  bfd8              IT       LE                    ;441
0003c2  f04f0900          MOVLE    r9,#0                 ;441
0003c6  dd05              BLE      |L3.980|
0003c8  ee300a2b          VADD.F32 s0,s0,s23             ;441
0003cc  eebc0ac0          VCVT.U32.F32 s0,s0                 ;441
0003d0  ee109a10          VMOV     r9,s0                 ;441
                  |L3.980|
0003d4  f5c96100          RSB      r1,r9,#0x800          ;457
0003d8  912b              STR      r1,[sp,#0xac]         ;457
0003da  9944              LDR      r1,[sp,#0x110]        ;457
0003dc  9a44              LDR      r2,[sp,#0x110]        ;457
0003de  6909              LDR      r1,[r1,#0x10]         ;457
0003e0  6892              LDR      r2,[r2,#8]            ;457
0003e2  fb071802          MLA      r8,r7,r2,r1           ;457
0003e6  fb001702          MLA      r7,r0,r2,r1           ;457
0003ea  9845              LDR      r0,[sp,#0x114]        ;457
0003ec  6901              LDR      r1,[r0,#0x10]         ;457
0003ee  6880              LDR      r0,[r0,#8]            ;457
0003f0  fb051e00          MLA      lr,r5,r0,r1           ;457
0003f4  2000              MOVS     r0,#0                 ;464
0003f6  2c00              CMP      r4,#0                 ;466
0003f8  dd61              BLE      |L3.1214|
                  |L3.1018|
0003fa  9929              LDR      r1,[sp,#0xa4]         ;467
0003fc  f851c020          LDR      r12,[r1,r0,LSL #2]    ;467
000400  992a              LDR      r1,[sp,#0xa8]         ;468
000402  e03b              B        |L3.1148|
                  |L3.1028|
000404  e060              B        |L3.1224|
000406  0000              DCW      0x0000
                  |L3.1032|
000408  45000000          DCFS     0x45000000 ; 2048
                  |L3.1036|
                          DCD      ||.constdata||+0x1de
                  |L3.1040|
000410  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\filtering.cpp",0
000414  6f726574
000418  6563685c
00041c  76697369
000420  6f6e5c72
000424  6f626f74
000428  5c737263
00042c  5c66696c
000430  74657269
000434  6e672e63
000438  707000  
00043b  00                DCB      0
                  |L3.1084|
00043c  6f757420          DCB      "out is larger than in",0
000440  6973206c
000444  61726765
000448  72207468
00044c  616e2069
000450  6e00    
000452  00                DCB      0
000453  00                DCB      0
                  |L3.1108|
000454  446f776e          DCB      "DownsampleBilinear",0
000458  73616d70
00045c  6c654269
000460  6c696e65
000464  617200  
000467  00                DCB      0
                  |L3.1128|
000468  496e7661          DCB      "Invalid objects",0
00046c  6c696420
000470  6f626a65
000474  63747300
                  |L3.1144|
000478  00000000          DCFS     0x00000000 ; 0
                  |L3.1148|
00047c  f8513020          LDR      r3,[r1,r0,LSL #2]     ;468
000480  992c              LDR      r1,[sp,#0xb0]         ;469
000482  f818b00c          LDRB     r11,[r8,r12]          ;473
000486  f818a003          LDRB     r10,[r8,r3]           ;474
00048a  f8511020          LDR      r1,[r1,r0,LSL #2]     ;469
00048e  f817c00c          LDRB     r12,[r7,r12]          ;475
000492  f5c16200          RSB      r2,r1,#0x800          ;471
000496  fb02fb0b          MUL      r11,r2,r11            ;480
00049a  5cfb              LDRB     r3,[r7,r3]            ;476
00049c  fb01ba0a          MLA      r10,r1,r10,r11        ;480
0004a0  fb02f20c          MUL      r2,r2,r12             ;481
0004a4  fb012103          MLA      r1,r1,r3,r2           ;481
0004a8  9a2b              LDR      r2,[sp,#0xac]         ;482
0004aa  fb02f20a          MUL      r2,r2,r10             ;482
0004ae  fb092101          MLA      r1,r9,r1,r2           ;482
0004b2  0d89              LSRS     r1,r1,#22             ;483
0004b4  f80e1000          STRB     r1,[lr,r0]            ;485
0004b8  1c40              ADDS     r0,r0,#1              ;466
0004ba  4284              CMP      r4,r0                 ;466
0004bc  dc9d              BGT      |L3.1018|
                  |L3.1214|
0004be  9801              LDR      r0,[sp,#4]            ;431
0004c0  1c6d              ADDS     r5,r5,#1              ;431
0004c2  4285              CMP      r5,r0                 ;431
0004c4  f6ffaf3c          BLT      |L3.832|
                  |L3.1224|
0004c8  2000              MOVS     r0,#0                 ;489
0004ca  e5f5              B        |L3.184|
                  |L3.1228|
0004cc  4807              LDR      r0,|L3.1260|
0004ce  f2401185          MOV      r1,#0x185             ;389
0004d2  f2af03c4          ADR      r3,|L3.1040|
0004d6  a206              ADR      r2,|L3.1264|
0004d8  e9cd0100          STRD     r0,r1,[sp,#0]         ;389
0004dc  f2af018c          ADR      r1,|L3.1108|
0004e0  2005              MOVS     r0,#5                 ;389
0004e2  f7fffffe          BL       _Anki_Log
0004e6  4806              LDR      r0,|L3.1280|
0004e8  e5e6              B        |L3.184|
;;;491    
                          ENDP

0004ea  0000              DCW      0x0000
                  |L3.1260|
                          DCD      ||.constdata||+0x1de
                  |L3.1264|
0004f0  4f757420          DCB      "Out of memory",0
0004f4  6f66206d
0004f8  656d6f72
0004fc  7900    
0004fe  00                DCB      0
0004ff  00                DCB      0
                  |L3.1280|
                          DCD      0x01000001

                          AREA ||i._ZN4Anki8Embedded15ImageProcessing32GetBitShiftDirectionAndMagnitudeEiiiRiRb||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15ImageProcessing32GetBitShiftDirectionAndMagnitudeEiiiRiRb PROC ; Anki::Embedded::ImageProcessing::GetBitShiftDirectionAndMagnitude(int, int, int, int&, bool&)
;;;42         {
;;;43           void GetBitShiftDirectionAndMagnitude(
000000  b430              PUSH     {r4,r5}
;;;44             const s32 in1_numFractionalBits,
;;;45             const s32 in2_numFractionalBit,
;;;46             const s32 out_numFractionalBit,
;;;47             s32 &shiftMagnitude,
;;;48             bool &shiftRight)
;;;49           {
;;;50             if((in1_numFractionalBits+in2_numFractionalBit) > out_numFractionalBit) {
000002  1844              ADDS     r4,r0,r1
000004  2500              MOVS     r5,#0
000006  f8ddc008          LDR      r12,[sp,#8]
00000a  4294              CMP      r4,r2
;;;51               shiftRight = true;
00000c  bfc3              ITTTE    GT
00000e  2001              MOVGT    r0,#1
000010  f88c0000          STRBGT   r0,[r12,#0]
;;;52               shiftMagnitude = in1_numFractionalBits + in2_numFractionalBit - out_numFractionalBit;
000014  1aa0              SUBGT    r0,r4,r2
;;;53             } else if((in1_numFractionalBits+in2_numFractionalBit) < out_numFractionalBit) {
;;;54               shiftRight = false;
;;;55               shiftMagnitude = out_numFractionalBit - in1_numFractionalBits - in2_numFractionalBit;
;;;56             } else {
;;;57               shiftRight = false;
000016  f88c5000          STRBLE   r5,[r12,#0]
;;;58               shiftMagnitude = 0;
00001a  bf08              IT       EQ
00001c  601d              STREQ    r5,[r3,#0]
00001e  bfbc              ITT      LT                    ;55
000020  1a10              SUBLT    r0,r2,r0              ;55
000022  1a40              SUBLT    r0,r0,r1              ;55
;;;59             }
;;;60           } // void GetBitShiftDirectionAndMagnitude()
000024  bf04              ITT      EQ
000026  bc30              POPEQ    {r4,r5}
000028  4770              BXEQ     lr
00002a  6018              STR      r0,[r3,#0]            ;52
00002c  bc30              POP      {r4,r5}
00002e  4770              BX       lr
;;;61     
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15ImageProcessing9BoxFilterIhttEENS_6ResultERKNS0_5ArrayIT_EEiiRNS4_IT1_EENS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15ImageProcessing9BoxFilterIhttEENS_6ResultERKNS0_5ArrayIT_EEiiRNS4_IT1_EENS0_11MemoryStackE PROC ; Anki::Embedded::ImageProcessing::BoxFilter<unsigned char, unsigned short, unsigned short>(const Anki::Embedded::Array<T1>&, int, int, Anki::Embedded::Array<T3>&, Anki::Embedded::MemoryStack)
;;;176    
;;;177          template<> Result BoxFilter<u8,u16,u16>(const Array<u8> &image, const s32 boxHeight, const s32 boxWidth, Array<u16> &filtered, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;178          {
000004  b0cb              SUB      sp,sp,#0x12c
000006  4617              MOV      r7,r2
;;;179            AnkiConditionalErrorAndReturnValue(image.IsValid() && filtered.IsValid(),
000008  f8dd8160          LDR      r8,[sp,#0x160]
00000c  984b              LDR      r0,[sp,#0x12c]
00000e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000012  4dfe              LDR      r5,|L5.1036|
000014  2800              CMP      r0,#0
000016  d04e              BEQ      |L5.182|
000018  984e              LDR      r0,[sp,#0x138]
00001a  6900              LDR      r0,[r0,#0x10]
00001c  2800              CMP      r0,#0
00001e  d04a              BEQ      |L5.182|
000020  984e              LDR      r0,[sp,#0x138]
000022  6800              LDR      r0,[r0,#0]
000024  2800              CMP      r0,#0
000026  db46              BLT      |L5.182|
000028  984e              LDR      r0,[sp,#0x138]
00002a  6840              LDR      r0,[r0,#4]
00002c  2800              CMP      r0,#0
00002e  db42              BLT      |L5.182|
;;;180              RESULT_FAIL_INVALID_OBJECT, "BoxFilter", "Image is invalid");
;;;181    
;;;182            const s32 imageHeight = image.get_size(0);
000030  2100              MOVS     r1,#0
000032  984b              LDR      r0,[sp,#0x12c]
000034  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;183            const s32 imageWidth  = image.get_size(1);
000038  9047              STR      r0,[sp,#0x11c]
00003a  2101              MOVS     r1,#1
00003c  984b              LDR      r0,[sp,#0x12c]
00003e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000042  4606              MOV      r6,r0
;;;184    
;;;185            const s32 boxHeight2 = boxHeight / 2;
000044  984c              LDR      r0,[sp,#0x130]
000046  f8dd912c          LDR      r9,[sp,#0x12c]
00004a  eb0070d0          ADD      r0,r0,r0,LSR #31
00004e  1040              ASRS     r0,r0,#1
;;;186            const s32 boxWidth2 = boxWidth / 2;
000050  9043              STR      r0,[sp,#0x10c]
000052  eb0770d7          ADD      r0,r7,r7,LSR #31
000056  1040              ASRS     r0,r0,#1
;;;187    
;;;188            AnkiConditionalErrorAndReturnValue(AreEqualSize(image, filtered),
000058  9044              STR      r0,[sp,#0x110]
00005a  4648              MOV      r0,r9
00005c  9c4e              LDR      r4,[sp,#0x138]
00005e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000062  2800              CMP      r0,#0
000064  bf1c              ITT      NE
000066  6920              LDRNE    r0,[r4,#0x10]
000068  2800              CMPNE    r0,#0
00006a  d032              BEQ      |L5.210|
00006c  6820              LDR      r0,[r4,#0]
00006e  2800              CMP      r0,#0
000070  bfa4              ITT      GE
000072  6860              LDRGE    r0,[r4,#4]
000074  2800              CMPGE    r0,#0
000076  db2c              BLT      |L5.210|
000078  2100              MOVS     r1,#0
00007a  4648              MOV      r0,r9
00007c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000080  6821              LDR      r1,[r4,#0]
000082  4288              CMP      r0,r1
000084  d125              BNE      |L5.210|
000086  2101              MOVS     r1,#1
000088  4648              MOV      r0,r9
00008a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00008e  6861              LDR      r1,[r4,#4]
000090  4288              CMP      r0,r1
000092  d11e              BNE      |L5.210|
;;;189              RESULT_FAIL_INVALID_SIZE, "BoxFilter", "Output normalized image must match input image's size.");
;;;190    
;;;191            AnkiConditionalErrorAndReturnValue(imageWidth%8 == 0,
000094  f0160f07          TST      r6,#7
000098  d029              BEQ      |L5.238|
00009a  20bf              MOVS     r0,#0xbf
00009c  e9cd5000          STRD     r5,r0,[sp,#0]
0000a0  a3db              ADR      r3,|L5.1040|
0000a2  a2e6              ADR      r2,|L5.1084|
0000a4  a1ee              ADR      r1,|L5.1120|
0000a6  2005              MOVS     r0,#5
0000a8  f7fffffe          BL       _Anki_Log
;;;192              RESULT_FAIL_INVALID_SIZE, "BoxFilter", "Image width must be divisible by 8");
;;;193    
;;;194            AnkiConditionalErrorAndReturnValue(boxHeight > 2 && boxWidth > 2 && IsOdd(boxWidth) && IsOdd(boxHeight),
;;;195              RESULT_FAIL_INVALID_SIZE, "BoxFilter", "Box filter must be greater than two and odd");
;;;196    
;;;197            AnkiConditionalWarn(boxHeight*boxWidth <= 256,
;;;198              "BoxFilter", "Filtering may overflow");
;;;199    
;;;200            s32 y;
;;;201    
;;;202            // Includes extra padding for simd
;;;203            u16 * restrict verticalAccumulator = reinterpret_cast<u16*>( scratch.Allocate(imageWidth*sizeof(u16) + 16) );
;;;204            memset(verticalAccumulator, 0, imageWidth*sizeof(u16));
;;;205    
;;;206            // Accumulate a whole boxHeight
;;;207            for(y=0; y<boxHeight; y++) {
;;;208              const u8 * restrict pImage = image.Pointer(y,0);
;;;209              for(s32 x=0; x<imageWidth; x+=8) {
;;;210                const u32 image3210 = *reinterpret_cast<const u32*>(pImage + x);
;;;211                const u32 image7654 = *reinterpret_cast<const u32*>(pImage + x + 4);
;;;212    
;;;213                const u32 toAdd10 =  (image3210 & 0xFF)            | ((image3210 & 0xFF00)     << 8);
;;;214                const u32 toAdd32 = ((image3210 & 0xFF0000) >> 16) | ((image3210 & 0xFF000000) >> 8);
;;;215    
;;;216                const u32 toAdd54 =  (image7654 & 0xFF)            | ((image7654 & 0xFF00)     << 8);
;;;217                const u32 toAdd76 = ((image7654 & 0xFF0000) >> 16) | ((image7654 & 0xFF000000) >> 8);
;;;218    
;;;219                *reinterpret_cast<u32*>(verticalAccumulator + x)     += toAdd10;
;;;220                *reinterpret_cast<u32*>(verticalAccumulator + x + 2) += toAdd32;
;;;221                *reinterpret_cast<u32*>(verticalAccumulator + x + 4) += toAdd54;
;;;222                *reinterpret_cast<u32*>(verticalAccumulator + x + 6) += toAdd76;
;;;223              }
;;;224            }
;;;225    
;;;226            //
;;;227            // Add the first row to the filtered image
;;;228            //
;;;229    
;;;230            filtered(0,boxHeight2-1,0,-1).Set(0);
;;;231    
;;;232            {
;;;233              // Grab the pointer to the horizontally negative-offset location in the filtered image
;;;234              u16 * restrict pFiltered = filtered.Pointer(boxHeight2,0) - boxWidth2;
;;;235    
;;;236              u16 horizontalAccumulator = 0;
;;;237    
;;;238              s32 x;
;;;239              for(x=0; x<boxWidth; x++) {
;;;240                horizontalAccumulator += verticalAccumulator[x];
;;;241              }
;;;242    
;;;243              filtered(boxHeight2,boxHeight2,0,boxWidth2-1).Set(0);
;;;244    
;;;245              pFiltered[x-1] = horizontalAccumulator;
;;;246    
;;;247              for(; x<imageWidth-3; x+=4) {
;;;248                const u32 toAdd10 = *reinterpret_cast<const u32*>(verticalAccumulator + x);
;;;249                const u32 toAdd32 = *reinterpret_cast<const u32*>(verticalAccumulator + x + 2);
;;;250    
;;;251                u32 toSub10 = *reinterpret_cast<const u32*>(verticalAccumulator + x - boxWidth);
;;;252                u32 toSub32 = *reinterpret_cast<const u32*>(verticalAccumulator + x - boxWidth + 2);
;;;253    
;;;254                // h is previous horizontal accumulator
;;;255                u32 total10 = toAdd10 + horizontalAccumulator; // [1, 0h]
;;;256                total10 += total10 << 16; // [10h, 0h]
;;;257    
;;;258                toSub10 += toSub10 << 16; // [10, 0]
;;;259                total10 -= toSub10;
;;;260    
;;;261                u32 total32 = toAdd32 + (total10 >> 16); // [3, 210h]
;;;262                total32 += total32 << 16; // [3210h, 210h]
;;;263    
;;;264                toSub32 += toSub32 << 16; // [32, 2]
;;;265                total32 -= toSub32;
;;;266    
;;;267                horizontalAccumulator = total32 >> 16;
;;;268    
;;;269                *reinterpret_cast<u32*>(pFiltered + x) = total10;
;;;270                *reinterpret_cast<u32*>(pFiltered + x + 2) = total32;
;;;271              }
;;;272    
;;;273              for(; x<imageWidth; x++) {
;;;274                horizontalAccumulator += verticalAccumulator[x] - verticalAccumulator[x-boxWidth];
;;;275                pFiltered[x] = horizontalAccumulator;
;;;276              }
;;;277    
;;;278              filtered(boxHeight2,boxHeight2,-boxWidth2,-1).Set(0);
;;;279            }
;;;280    
;;;281            //
;;;282            // Add the remaining rows to the filtered image
;;;283            //
;;;284    
;;;285            for(; y<imageHeight; y++) {
;;;286              // Grab the pointer to the horizontally negative-offset location in the filtered image
;;;287              u16 * restrict pFiltered = filtered.Pointer(y - boxHeight2,0) - boxWidth2;
;;;288    
;;;289              const u8 * restrict pImageOld = image.Pointer(y-boxHeight,0);
;;;290              const u8 * restrict pImageNew = image.Pointer(y,0);
;;;291    
;;;292              for(s32 x=0; x<imageWidth; x+=4) {
;;;293                const u32 imageNew3210 = *reinterpret_cast<const u32*>(pImageNew + x);
;;;294    
;;;295                const u32 imageOld3210 = *reinterpret_cast<const u32*>(pImageOld + x);
;;;296    
;;;297                const u32 toAdd10 =  (imageNew3210 & 0xFF)            | ((imageNew3210 & 0xFF00)     << 8);
;;;298                const u32 toAdd32 = ((imageNew3210 & 0xFF0000) >> 16) | ((imageNew3210 & 0xFF000000) >> 8);
;;;299    
;;;300                const u32 toSub10 =  (imageOld3210 & 0xFF)            | ((imageOld3210 & 0xFF00)     << 8);
;;;301                const u32 toSub32 = ((imageOld3210 & 0xFF0000) >> 16) | ((imageOld3210 & 0xFF000000) >> 8);
;;;302    
;;;303                *reinterpret_cast<u32*>(verticalAccumulator + x)     += toAdd10 - toSub10;
;;;304                *reinterpret_cast<u32*>(verticalAccumulator + x + 2) += toAdd32 - toSub32;
;;;305              }
;;;306    
;;;307              u16 horizontalAccumulator = 0;
;;;308    
;;;309              s32 x;
;;;310              for(x=0; x<boxWidth; x++) {
;;;311                horizontalAccumulator += verticalAccumulator[x];
;;;312              }
;;;313    
;;;314              filtered(y-boxHeight2,y-boxHeight2,0,boxWidth2-1).Set(0);
;;;315    
;;;316              pFiltered[x-1] = horizontalAccumulator;
;;;317    
;;;318              for(; x<imageWidth-3; x+=4) {
;;;319                const u32 toAdd10 = *reinterpret_cast<const u32*>(verticalAccumulator + x);
;;;320                const u32 toAdd32 = *reinterpret_cast<const u32*>(verticalAccumulator + x + 2);
;;;321    
;;;322                u32 toSub10 = *reinterpret_cast<const u32*>(verticalAccumulator + x - boxWidth);
;;;323                u32 toSub32 = *reinterpret_cast<const u32*>(verticalAccumulator + x - boxWidth + 2);
;;;324    
;;;325                // h is previous horizontal accumulator
;;;326                u32 total10 = toAdd10 + horizontalAccumulator; // [1, 0h]
;;;327                total10 += total10 << 16; // [10h, 0h]
;;;328    
;;;329                toSub10 += toSub10 << 16; // [10, 0]
;;;330                total10 -= toSub10;
;;;331    
;;;332                u32 total32 = toAdd32 + (total10 >> 16); // [3, 210h]
;;;333                total32 += total32 << 16; // [3210h, 210h]
;;;334    
;;;335                toSub32 += toSub32 << 16; // [32, 2]
;;;336                total32 -= toSub32;
;;;337    
;;;338                horizontalAccumulator = total32 >> 16;
;;;339    
;;;340                *reinterpret_cast<u32*>(pFiltered + x) = total10;
;;;341                *reinterpret_cast<u32*>(pFiltered + x + 2) = total32;
;;;342              }
;;;343    
;;;344              for(; x<imageWidth; x++) {
;;;345                horizontalAccumulator += verticalAccumulator[x] - verticalAccumulator[x-boxWidth];
;;;346                pFiltered[x] = horizontalAccumulator;
;;;347              }
;;;348    
;;;349              filtered(y-boxHeight2,y-boxHeight2,-boxWidth2,-1).Set(0);
;;;350            }
;;;351    
;;;352            filtered(-boxHeight2,-1,0,-1).Set(0);
;;;353    
;;;354            return RESULT_OK;
;;;355          } // Result BoxFilter()
0000ac  b04f              ADD      sp,sp,#0x13c
0000ae  f04f60a0          MOV      r0,#0x5000000         ;191
0000b2  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.182|
0000b6  20b3              MOVS     r0,#0xb3              ;179
0000b8  e9cd5000          STRD     r5,r0,[sp,#0]         ;179
0000bc  a3d4              ADR      r3,|L5.1040|
0000be  a2eb              ADR      r2,|L5.1132|
0000c0  a1e7              ADR      r1,|L5.1120|
0000c2  2005              MOVS     r0,#5                 ;179
0000c4  f7fffffe          BL       _Anki_Log
0000c8  b04f              ADD      sp,sp,#0x13c
0000ca  f04f6080          MOV      r0,#0x4000000         ;179
0000ce  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.210|
0000d2  20bc              MOVS     r0,#0xbc              ;188
0000d4  e9cd5000          STRD     r5,r0,[sp,#0]         ;188
0000d8  a3cd              ADR      r3,|L5.1040|
0000da  a2e9              ADR      r2,|L5.1152|
0000dc  a1e0              ADR      r1,|L5.1120|
0000de  2005              MOVS     r0,#5                 ;188
0000e0  f7fffffe          BL       _Anki_Log
0000e4  b04f              ADD      sp,sp,#0x13c
0000e6  f04f60a0          MOV      r0,#0x5000000         ;188
0000ea  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.238|
0000ee  984c              LDR      r0,[sp,#0x130]        ;194
0000f0  2802              CMP      r0,#2                 ;194
0000f2  bfc8              IT       GT                    ;194
0000f4  2f02              CMPGT    r7,#2                 ;194
0000f6  f340825b          BLE.W    |L5.1456|
0000fa  4638              MOV      r0,r7                 ;194
0000fc  f7fffffe          BL       IsOdd
000100  2800              CMP      r0,#0                 ;194
000102  f0008255          BEQ.W    |L5.1456|
000106  984c              LDR      r0,[sp,#0x130]        ;194
000108  f7fffffe          BL       IsOdd
00010c  2800              CMP      r0,#0                 ;194
00010e  f000824f          BEQ.W    |L5.1456|
000112  2010              MOVS     r0,#0x10              ;203
000114  eb000146          ADD      r1,r0,r6,LSL #1       ;203
000118  4640              MOV      r0,r8                 ;203
00011a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
00011e  4605              MOV      r5,r0                 ;203
000120  0071              LSLS     r1,r6,#1              ;204
000122  f7fffffe          BL       __aeabi_memclr
000126  f04f0800          MOV      r8,#0                 ;207
                  |L5.298|
00012a  984b              LDR      r0,[sp,#0x12c]        ;207
00012c  6901              LDR      r1,[r0,#0x10]         ;207
00012e  6880              LDR      r0,[r0,#8]            ;207
000130  fb081300          MLA      r3,r8,r0,r1           ;207
000134  2000              MOVS     r0,#0                 ;209
000136  2e00              CMP      r6,#0                 ;209
000138  bfc8              IT       GT                    ;214
00013a  f44f0a7f          MOVGT    r10,#0xff0000         ;214
00013e  dd2b              BLE      |L5.408|
                  |L5.320|
000140  5819              LDR      r1,[r3,r0]            ;210
000142  181a              ADDS     r2,r3,r0              ;211
000144  f4014c7f          AND      r12,r1,#0xff00        ;213
000148  468b              MOV      r11,r1                ;213
00014a  f36c2b1f          BFI      r11,r12,#8,#24        ;213
00014e  ea0a2c11          AND      r12,r10,r1,LSR #8     ;214
000152  6852              LDR      r2,[r2,#4]            ;211
000154  f3c14107          UBFX     r1,r1,#16,#8          ;214
000158  ea4c0401          ORR      r4,r12,r1             ;214
00015c  f402417f          AND      r1,r2,#0xff00         ;216
000160  4694              MOV      r12,r2                ;216
000162  f3612c1f          BFI      r12,r1,#8,#24         ;216
000166  ea0a2112          AND      r1,r10,r2,LSR #8      ;217
00016a  f3c24207          UBFX     r2,r2,#16,#8          ;217
00016e  ea410902          ORR      r9,r1,r2              ;217
000172  f8551010          LDR      r1,[r5,r0,LSL #1]     ;219
000176  4459              ADD      r1,r1,r11             ;219
000178  f8451010          STR      r1,[r5,r0,LSL #1]     ;219
00017c  eb050140          ADD      r1,r5,r0,LSL #1       ;220
000180  3008              ADDS     r0,r0,#8              ;209
000182  684a              LDR      r2,[r1,#4]            ;220
000184  4286              CMP      r6,r0                 ;209
000186  4422              ADD      r2,r2,r4              ;220
000188  604a              STR      r2,[r1,#4]            ;221
00018a  688a              LDR      r2,[r1,#8]            ;221
00018c  4462              ADD      r2,r2,r12             ;221
00018e  608a              STR      r2,[r1,#8]            ;222
000190  68ca              LDR      r2,[r1,#0xc]          ;222
000192  444a              ADD      r2,r2,r9              ;222
000194  60ca              STR      r2,[r1,#0xc]          ;209
000196  dcd3              BGT      |L5.320|
                  |L5.408|
000198  984c              LDR      r0,[sp,#0x130]        ;207
00019a  f1080801          ADD      r8,r8,#1              ;207
00019e  4580              CMP      r8,r0                 ;207
0001a0  dbc3              BLT      |L5.298|
0001a2  2100              MOVS     r1,#0                 ;230
0001a4  f04f3bff          MOV      r11,#0xffffffff       ;230
0001a8  e9cd1b00          STRD     r1,r11,[sp,#0]        ;230
0001ac  9843              LDR      r0,[sp,#0x10c]        ;230
0001ae  460a              MOV      r2,r1                 ;230
0001b0  1e43              SUBS     r3,r0,#1              ;230
0001b2  a81c              ADD      r0,sp,#0x70           ;230
0001b4  994e              LDR      r1,[sp,#0x138]        ;230
0001b6  f7fffffe          BL       _ZN4Anki8Embedded5ArrayItEclEiiii ; Anki::Embedded::Array<unsigned short>::operator ()(int, int, int, int)
0001ba  f10d0b70          ADD      r11,sp,#0x70          ;230
0001be  e8bb161f          LDM      r11!,{r0-r4,r9,r10,r12};230
0001c2  f10d0b08          ADD      r11,sp,#8             ;230
0001c6  e8ab161f          STM      r11!,{r0-r4,r9,r10,r12};230
0001ca  ac24              ADD      r4,sp,#0x90           ;230
0001cc  e8b4100f          LDM      r4!,{r0-r3,r12}       ;230
0001d0  ac0a              ADD      r4,sp,#0x28           ;230
0001d2  e8a4100f          STM      r4!,{r0-r3,r12}       ;230
0001d6  2100              MOVS     r1,#0                 ;230
0001d8  a802              ADD      r0,sp,#8              ;230
0001da  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceItE3SetEt ; Anki::Embedded::ArraySlice<unsigned short>::Set(unsigned short)
0001de  994e              LDR      r1,[sp,#0x138]        ;230
0001e0  9843              LDR      r0,[sp,#0x10c]        ;230
0001e2  f04f0900          MOV      r9,#0                 ;236
0001e6  690a              LDR      r2,[r1,#0x10]         ;236
0001e8  6889              LDR      r1,[r1,#8]            ;236
0001ea  464c              MOV      r4,r9                 ;239
0001ec  fb002001          MLA      r0,r0,r1,r2           ;239
0001f0  9944              LDR      r1,[sp,#0x110]        ;234
0001f2  2f00              CMP      r7,#0                 ;239
0001f4  eba00041          SUB      r0,r0,r1,LSL #1       ;234
0001f8  9045              STR      r0,[sp,#0x114]        ;239
0001fa  dd07              BLE      |L5.524|
                  |L5.508|
0001fc  f8350014          LDRH     r0,[r5,r4,LSL #1]     ;240
000200  1c64              ADDS     r4,r4,#1              ;239
000202  4448              ADD      r0,r0,r9              ;240
000204  fa1ff980          UXTH     r9,r0                 ;240
000208  42a7              CMP      r7,r4                 ;239
00020a  dcf7              BGT      |L5.508|
                  |L5.524|
00020c  1e48              SUBS     r0,r1,#1              ;243
00020e  2100              MOVS     r1,#0                 ;243
000210  e9cd1000          STRD     r1,r0,[sp,#0]         ;243
000214  9049              STR      r0,[sp,#0x124]        ;243
000216  9b43              LDR      r3,[sp,#0x10c]        ;243
000218  a836              ADD      r0,sp,#0xd8           ;243
00021a  461a              MOV      r2,r3                 ;243
00021c  994e              LDR      r1,[sp,#0x138]        ;243
00021e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayItEclEiiii ; Anki::Embedded::Array<unsigned short>::operator ()(int, int, int, int)
000222  e9dd0136          LDRD     r0,r1,[sp,#0xd8]      ;243
000226  e9dd2338          LDRD     r2,r3,[sp,#0xe0]      ;243
00022a  e9ddab3a          LDRD     r10,r11,[sp,#0xe8]    ;243
00022e  e9ddce3c          LDRD     r12,lr,[sp,#0xf0]     ;243
000232  e9cd011c          STRD     r0,r1,[sp,#0x70]      ;243
000236  a81e              ADD      r0,sp,#0x78           ;243
000238  e8a05c0c          STM      r0!,{r2,r3,r10-r12,lr};243
00023c  f10d0af8          ADD      r10,sp,#0xf8          ;243
000240  e8ba100f          LDM      r10!,{r0-r3,r12}      ;243
000244  f10d0a90          ADD      r10,sp,#0x90          ;243
000248  e8aa100f          STM      r10!,{r0-r3,r12}      ;243
00024c  2100              MOVS     r1,#0                 ;243
00024e  a81c              ADD      r0,sp,#0x70           ;243
000250  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceItE3SetEt ; Anki::Embedded::ArraySlice<unsigned short>::Set(unsigned short)
000254  9845              LDR      r0,[sp,#0x114]        ;245
000256  eb000044          ADD      r0,r0,r4,LSL #1       ;245
00025a  f8209c02          STRH     r9,[r0,#-2]           ;245
00025e  1ef0              SUBS     r0,r6,#3              ;247
000260  9046              STR      r0,[sp,#0x118]        ;247
000262  4284              CMP      r4,r0                 ;247
000264  da22              BGE      |L5.684|
                  |L5.614|
000266  f8552014          LDR      r2,[r5,r4,LSL #1]     ;248
00026a  eb050044          ADD      r0,r5,r4,LSL #1       ;249
00026e  eba00147          SUB      r1,r0,r7,LSL #1       ;251
000272  6843              LDR      r3,[r0,#4]            ;251
000274  e9d10100          LDRD     r0,r1,[r1,#0]         ;251
000278  444a              ADD      r2,r2,r9              ;255
00027a  eb024202          ADD      r2,r2,r2,LSL #16      ;256
00027e  eb004000          ADD      r0,r0,r0,LSL #16      ;258
000282  1a10              SUBS     r0,r2,r0              ;259
000284  eb034210          ADD      r2,r3,r0,LSR #16      ;261
000288  eb024202          ADD      r2,r2,r2,LSL #16      ;262
00028c  eb014101          ADD      r1,r1,r1,LSL #16      ;264
000290  1a51              SUBS     r1,r2,r1              ;265
000292  9a45              LDR      r2,[sp,#0x114]        ;269
000294  ea4f4911          LSR      r9,r1,#16             ;267
000298  f8420014          STR      r0,[r2,r4,LSL #1]     ;269
00029c  9845              LDR      r0,[sp,#0x114]        ;270
00029e  eb000044          ADD      r0,r0,r4,LSL #1       ;270
0002a2  1d24              ADDS     r4,r4,#4              ;247
0002a4  6041              STR      r1,[r0,#4]            ;247
0002a6  9846              LDR      r0,[sp,#0x118]        ;247
0002a8  4284              CMP      r4,r0                 ;247
0002aa  dbdc              BLT      |L5.614|
                  |L5.684|
0002ac  42b4              CMP      r4,r6                 ;273
0002ae  da0e              BGE      |L5.718|
                  |L5.688|
0002b0  1be1              SUBS     r1,r4,r7              ;274
0002b2  f8350014          LDRH     r0,[r5,r4,LSL #1]     ;274
0002b6  f8351011          LDRH     r1,[r5,r1,LSL #1]     ;274
0002ba  1a40              SUBS     r0,r0,r1              ;274
0002bc  4448              ADD      r0,r0,r9              ;274
0002be  fa1ff980          UXTH     r9,r0                 ;274
0002c2  9845              LDR      r0,[sp,#0x114]        ;275
0002c4  f8209014          STRH     r9,[r0,r4,LSL #1]     ;275
0002c8  1c64              ADDS     r4,r4,#1              ;273
0002ca  42b4              CMP      r4,r6                 ;273
0002cc  dbf0              BLT      |L5.688|
                  |L5.718|
0002ce  9844              LDR      r0,[sp,#0x110]        ;278
0002d0  f04f31ff          MOV      r1,#0xffffffff        ;278
0002d4  4240              RSBS     r0,r0,#0              ;278
0002d6  e9cd0100          STRD     r0,r1,[sp,#0]         ;278
0002da  9b43              LDR      r3,[sp,#0x10c]        ;278
0002dc  904a              STR      r0,[sp,#0x128]        ;278
0002de  461a              MOV      r2,r3                 ;278
0002e0  a836              ADD      r0,sp,#0xd8           ;278
0002e2  994e              LDR      r1,[sp,#0x138]        ;278
0002e4  f7fffffe          BL       _ZN4Anki8Embedded5ArrayItEclEiiii ; Anki::Embedded::Array<unsigned short>::operator ()(int, int, int, int)
0002e8  f10d0bd8          ADD      r11,sp,#0xd8          ;278
0002ec  e8bb161f          LDM      r11!,{r0-r4,r9,r10,r12};278
0002f0  f10d0ba4          ADD      r11,sp,#0xa4          ;278
0002f4  e8ab161f          STM      r11!,{r0-r4,r9,r10,r12};278
0002f8  ac3e              ADD      r4,sp,#0xf8           ;278
0002fa  e8b4100f          LDM      r4!,{r0-r3,r12}       ;278
0002fe  ac31              ADD      r4,sp,#0xc4           ;278
000300  e8a4100f          STM      r4!,{r0-r3,r12}       ;278
000304  2100              MOVS     r1,#0                 ;278
000306  a829              ADD      r0,sp,#0xa4           ;278
000308  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceItE3SetEt ; Anki::Embedded::ArraySlice<unsigned short>::Set(unsigned short)
00030c  9847              LDR      r0,[sp,#0x11c]        ;285
00030e  4580              CMP      r8,r0                 ;285
000310  da7a              BGE      |L5.1032|
                  |L5.786|
000312  9843              LDR      r0,[sp,#0x10c]        ;287
000314  994e              LDR      r1,[sp,#0x138]        ;287
000316  eba80000          SUB      r0,r8,r0              ;287
00031a  9048              STR      r0,[sp,#0x120]        ;287
00031c  690a              LDR      r2,[r1,#0x10]         ;287
00031e  6889              LDR      r1,[r1,#8]            ;287
000320  fb002001          MLA      r0,r0,r1,r2           ;287
000324  9944              LDR      r1,[sp,#0x110]        ;287
000326  eba00041          SUB      r0,r0,r1,LSL #1       ;287
00032a  9045              STR      r0,[sp,#0x114]        ;289
00032c  984c              LDR      r0,[sp,#0x130]        ;289
00032e  eba80200          SUB      r2,r8,r0              ;289
000332  984b              LDR      r0,[sp,#0x12c]        ;289
000334  6901              LDR      r1,[r0,#0x10]         ;289
000336  6880              LDR      r0,[r0,#8]            ;289
000338  fb021a00          MLA      r10,r2,r0,r1          ;289
00033c  fb081900          MLA      r9,r8,r0,r1           ;289
000340  2000              MOVS     r0,#0                 ;292
000342  2e00              CMP      r6,#0                 ;292
000344  bfc8              IT       GT                    ;214
000346  f44f0b7f          MOVGT    r11,#0xff0000         ;214
00034a  dd29              BLE      |L5.928|
                  |L5.844|
00034c  f8593000          LDR      r3,[r9,r0]            ;293
000350  f85a2000          LDR      r2,[r10,r0]           ;295
000354  f4034c7f          AND      r12,r3,#0xff00        ;297
000358  4619              MOV      r1,r3                 ;297
00035a  f36c211f          BFI      r1,r12,#8,#24         ;297
00035e  ea0b2c13          AND      r12,r11,r3,LSR #8     ;298
000362  f3c34307          UBFX     r3,r3,#16,#8          ;298
000366  ea4c0303          ORR      r3,r12,r3             ;298
00036a  f402447f          AND      r4,r2,#0xff00         ;300
00036e  4694              MOV      r12,r2                ;300
000370  f3642c1f          BFI      r12,r4,#8,#24         ;300
000374  ea0b2412          AND      r4,r11,r2,LSR #8      ;301
000378  f3c24207          UBFX     r2,r2,#16,#8          ;301
00037c  4322              ORRS     r2,r2,r4              ;301
00037e  f8554010          LDR      r4,[r5,r0,LSL #1]     ;303
000382  eba1010c          SUB      r1,r1,r12             ;303
000386  4421              ADD      r1,r1,r4              ;303
000388  f8451010          STR      r1,[r5,r0,LSL #1]     ;303
00038c  eb050140          ADD      r1,r5,r0,LSL #1       ;304
000390  1a9a              SUBS     r2,r3,r2              ;304
000392  f8d1c004          LDR      r12,[r1,#4]           ;304
000396  1d00              ADDS     r0,r0,#4              ;292
000398  4462              ADD      r2,r2,r12             ;304
00039a  604a              STR      r2,[r1,#4]            ;292
00039c  4286              CMP      r6,r0                 ;292
00039e  dcd5              BGT      |L5.844|
                  |L5.928|
0003a0  f04f0900          MOV      r9,#0                 ;307
0003a4  464c              MOV      r4,r9                 ;310
0003a6  2f00              CMP      r7,#0                 ;310
0003a8  dd07              BLE      |L5.954|
                  |L5.938|
0003aa  f8350014          LDRH     r0,[r5,r4,LSL #1]     ;311
0003ae  1c64              ADDS     r4,r4,#1              ;310
0003b0  4448              ADD      r0,r0,r9              ;311
0003b2  fa1ff980          UXTH     r9,r0                 ;311
0003b6  42a7              CMP      r7,r4                 ;310
0003b8  dcf7              BGT      |L5.938|
                  |L5.954|
0003ba  9949              LDR      r1,[sp,#0x124]        ;314
0003bc  2000              MOVS     r0,#0                 ;314
0003be  e9cd0100          STRD     r0,r1,[sp,#0]         ;314
0003c2  9a48              LDR      r2,[sp,#0x120]        ;314
0003c4  a836              ADD      r0,sp,#0xd8           ;314
0003c6  4613              MOV      r3,r2                 ;314
0003c8  994e              LDR      r1,[sp,#0x138]        ;314
0003ca  f7fffffe          BL       _ZN4Anki8Embedded5ArrayItEclEiiii ; Anki::Embedded::Array<unsigned short>::operator ()(int, int, int, int)
0003ce  e9dd0136          LDRD     r0,r1,[sp,#0xd8]      ;314
0003d2  e9dd2338          LDRD     r2,r3,[sp,#0xe0]      ;314
0003d6  e9ddab3a          LDRD     r10,r11,[sp,#0xe8]    ;314
0003da  e9ddce3c          LDRD     r12,lr,[sp,#0xf0]     ;314
0003de  e9cd011c          STRD     r0,r1,[sp,#0x70]      ;314
0003e2  a81e              ADD      r0,sp,#0x78           ;314
0003e4  e8a05c0c          STM      r0!,{r2,r3,r10-r12,lr};314
0003e8  f10d0af8          ADD      r10,sp,#0xf8          ;314
0003ec  e8ba100f          LDM      r10!,{r0-r3,r12}      ;314
0003f0  f10d0a90          ADD      r10,sp,#0x90          ;314
0003f4  e8aa100f          STM      r10!,{r0-r3,r12}      ;314
0003f8  2100              MOVS     r1,#0                 ;314
0003fa  a81c              ADD      r0,sp,#0x70           ;314
0003fc  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceItE3SetEt ; Anki::Embedded::ArraySlice<unsigned short>::Set(unsigned short)
000400  9845              LDR      r0,[sp,#0x114]        ;316
000402  eb000044          ADD      r0,r0,r4,LSL #1       ;316
000406  e057              B        |L5.1208|
                  |L5.1032|
000408  e0b2              B        |L5.1392|
00040a  0000              DCW      0x0000
                  |L5.1036|
                          DCD      ||.constdata||
                  |L5.1040|
000410  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\filtering.cpp",0
000414  6f726574
000418  6563685c
00041c  76697369
000420  6f6e5c72
000424  6f626f74
000428  5c737263
00042c  5c66696c
000430  74657269
000434  6e672e63
000438  707000  
00043b  00                DCB      0
                  |L5.1084|
00043c  496d6167          DCB      "Image width must be divisible by 8",0
000440  65207769
000444  64746820
000448  6d757374
00044c  20626520
000450  64697669
000454  7369626c
000458  65206279
00045c  203800  
00045f  00                DCB      0
                  |L5.1120|
000460  426f7846          DCB      "BoxFilter",0
000464  696c7465
000468  7200    
00046a  00                DCB      0
00046b  00                DCB      0
                  |L5.1132|
00046c  496d6167          DCB      "Image is invalid",0
000470  65206973
000474  20696e76
000478  616c6964
00047c  00      
00047d  00                DCB      0
00047e  00                DCB      0
00047f  00                DCB      0
                  |L5.1152|
000480  4f757470          DCB      "Output normalized image must match input image's size.",0
000484  7574206e
000488  6f726d61
00048c  6c697a65
000490  6420696d
000494  61676520
000498  6d757374
00049c  206d6174
0004a0  63682069
0004a4  6e707574
0004a8  20696d61
0004ac  67652773
0004b0  2073697a
0004b4  652e00  
0004b7  00                DCB      0
                  |L5.1208|
0004b8  f8209c02          STRH     r9,[r0,#-2]           ;316
0004bc  9846              LDR      r0,[sp,#0x118]        ;318
0004be  4284              CMP      r4,r0                 ;318
0004c0  da22              BGE      |L5.1288|
                  |L5.1218|
0004c2  f8552014          LDR      r2,[r5,r4,LSL #1]     ;319
0004c6  eb050044          ADD      r0,r5,r4,LSL #1       ;320
0004ca  eba00147          SUB      r1,r0,r7,LSL #1       ;322
0004ce  6843              LDR      r3,[r0,#4]            ;322
0004d0  e9d10100          LDRD     r0,r1,[r1,#0]         ;322
0004d4  444a              ADD      r2,r2,r9              ;326
0004d6  eb024202          ADD      r2,r2,r2,LSL #16      ;327
0004da  eb004000          ADD      r0,r0,r0,LSL #16      ;329
0004de  1a10              SUBS     r0,r2,r0              ;330
0004e0  eb034210          ADD      r2,r3,r0,LSR #16      ;332
0004e4  eb024202          ADD      r2,r2,r2,LSL #16      ;333
0004e8  eb014101          ADD      r1,r1,r1,LSL #16      ;335
0004ec  1a51              SUBS     r1,r2,r1              ;336
0004ee  9a45              LDR      r2,[sp,#0x114]        ;340
0004f0  ea4f4911          LSR      r9,r1,#16             ;338
0004f4  f8420014          STR      r0,[r2,r4,LSL #1]     ;340
0004f8  9845              LDR      r0,[sp,#0x114]        ;341
0004fa  eb000044          ADD      r0,r0,r4,LSL #1       ;341
0004fe  1d24              ADDS     r4,r4,#4              ;318
000500  6041              STR      r1,[r0,#4]            ;318
000502  9846              LDR      r0,[sp,#0x118]        ;318
000504  4284              CMP      r4,r0                 ;318
000506  dbdc              BLT      |L5.1218|
                  |L5.1288|
000508  42b4              CMP      r4,r6                 ;344
00050a  da0e              BGE      |L5.1322|
                  |L5.1292|
00050c  1be1              SUBS     r1,r4,r7              ;345
00050e  f8350014          LDRH     r0,[r5,r4,LSL #1]     ;345
000512  f8351011          LDRH     r1,[r5,r1,LSL #1]     ;345
000516  1a40              SUBS     r0,r0,r1              ;345
000518  4448              ADD      r0,r0,r9              ;345
00051a  fa1ff980          UXTH     r9,r0                 ;345
00051e  9845              LDR      r0,[sp,#0x114]        ;346
000520  f8209014          STRH     r9,[r0,r4,LSL #1]     ;346
000524  1c64              ADDS     r4,r4,#1              ;344
000526  42b4              CMP      r4,r6                 ;344
000528  dbf0              BLT      |L5.1292|
                  |L5.1322|
00052a  f04f31ff          MOV      r1,#0xffffffff        ;349
00052e  984a              LDR      r0,[sp,#0x128]        ;349
000530  e9cd0100          STRD     r0,r1,[sp,#0]         ;349
000534  9a48              LDR      r2,[sp,#0x120]        ;349
000536  a836              ADD      r0,sp,#0xd8           ;349
000538  4613              MOV      r3,r2                 ;349
00053a  994e              LDR      r1,[sp,#0x138]        ;349
00053c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayItEclEiiii ; Anki::Embedded::Array<unsigned short>::operator ()(int, int, int, int)
000540  f10d0bd8          ADD      r11,sp,#0xd8          ;349
000544  e8bb161f          LDM      r11!,{r0-r4,r9,r10,r12};349
000548  f10d0ba4          ADD      r11,sp,#0xa4          ;349
00054c  e8ab161f          STM      r11!,{r0-r4,r9,r10,r12};349
000550  ac3e              ADD      r4,sp,#0xf8           ;349
000552  e8b4100f          LDM      r4!,{r0-r3,r12}       ;349
000556  ac31              ADD      r4,sp,#0xc4           ;349
000558  e8a4100f          STM      r4!,{r0-r3,r12}       ;349
00055c  2100              MOVS     r1,#0                 ;349
00055e  a829              ADD      r0,sp,#0xa4           ;349
000560  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceItE3SetEt ; Anki::Embedded::ArraySlice<unsigned short>::Set(unsigned short)
000564  9847              LDR      r0,[sp,#0x11c]        ;285
000566  f1080801          ADD      r8,r8,#1              ;285
00056a  4580              CMP      r8,r0                 ;285
00056c  f6ffaed1          BLT      |L5.786|
                  |L5.1392|
000570  f04f31ff          MOV      r1,#0xffffffff        ;352
000574  2000              MOVS     r0,#0                 ;352
000576  e9cd0100          STRD     r0,r1,[sp,#0]         ;352
00057a  9843              LDR      r0,[sp,#0x10c]        ;352
00057c  460b              MOV      r3,r1                 ;352
00057e  4242              RSBS     r2,r0,#0              ;352
000580  a81c              ADD      r0,sp,#0x70           ;352
000582  994e              LDR      r1,[sp,#0x138]        ;352
000584  f7fffffe          BL       _ZN4Anki8Embedded5ArrayItEclEiiii ; Anki::Embedded::Array<unsigned short>::operator ()(int, int, int, int)
000588  af1c              ADD      r7,sp,#0x70           ;352
00058a  e8b7107f          LDM      r7!,{r0-r6,r12}       ;352
00058e  af0f              ADD      r7,sp,#0x3c           ;352
000590  e8a7107f          STM      r7!,{r0-r6,r12}       ;352
000594  ac24              ADD      r4,sp,#0x90           ;352
000596  e8b4100f          LDM      r4!,{r0-r3,r12}       ;352
00059a  ac17              ADD      r4,sp,#0x5c           ;352
00059c  e8a4100f          STM      r4!,{r0-r3,r12}       ;352
0005a0  2100              MOVS     r1,#0                 ;352
0005a2  a80f              ADD      r0,sp,#0x3c           ;352
0005a4  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceItE3SetEt ; Anki::Embedded::ArraySlice<unsigned short>::Set(unsigned short)
0005a8  b04f              ADD      sp,sp,#0x13c
0005aa  2000              MOVS     r0,#0                 ;354
0005ac  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.1456|
0005b0  20c2              MOVS     r0,#0xc2              ;194
0005b2  f2af13a4          ADR      r3,|L5.1040|
0005b6  a206              ADR      r2,|L5.1488|
0005b8  f2af115c          ADR      r1,|L5.1120|
0005bc  e9cd5000          STRD     r5,r0,[sp,#0]         ;194
0005c0  2005              MOVS     r0,#5                 ;194
0005c2  f7fffffe          BL       _Anki_Log
0005c6  b04f              ADD      sp,sp,#0x13c
0005c8  f04f60a0          MOV      r0,#0x5000000         ;194
0005cc  e8bd8ff0          POP      {r4-r11,pc}
;;;356    
                          ENDP

                  |L5.1488|
0005d0  426f7820          DCB      "Box filter must be greater than two and odd",0
0005d4  66696c74
0005d8  6572206d
0005dc  75737420
0005e0  62652067
0005e4  72656174
0005e8  65722074
0005ec  68616e20
0005f0  74776f20
0005f4  616e6420
0005f8  6f646400

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15ImageProcessing9BoxFilterIhttEENS_6ResultERKNS0_5ArrayIT_EEiiRNS4_IT1_EENS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15ImageProcessing9BoxFilterIhttEENS_6ResultERKNS0_5ArrayIT_EEiiRNS4_IT1_EENS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.7||, LINKORDER=||i._ZN4Anki8Embedded15ImageProcessing32GetBitShiftDirectionAndMagnitudeEiiiRiRb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15ImageProcessing32GetBitShiftDirectionAndMagnitudeEiiiRiRb||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4Anki8Embedded15ImageProcessing18BoxFilterNormalizeERKNS0_5ArrayIhEEihRS3_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15ImageProcessing18BoxFilterNormalizeERKNS0_5ArrayIhEEihRS3_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN4Anki8Embedded15ImageProcessing18DownsampleBilinearERKNS0_5ArrayIhEERS3_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15ImageProcessing18DownsampleBilinearERKNS0_5ArrayIhEERS3_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN4Anki8Embedded15ImageProcessing12FastGradientERKNS0_5ArrayIhEERNS2_IaEES7_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15ImageProcessing12FastGradientERKNS0_5ArrayIhEERNS2_IaEES7_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a426f          DCB      0x3a,0x3a,0x42,0x6f
000030  7846696c          DCB      0x78,0x46,0x69,0x6c
000034  74657228          DCB      0x74,0x65,0x72,0x28
000038  636f6e73          DCB      0x63,0x6f,0x6e,0x73
00003c  7420416e          DCB      0x74,0x20,0x41,0x6e
000040  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000044  456d6265          DCB      0x45,0x6d,0x62,0x65
000048  64646564          DCB      0x64,0x64,0x65,0x64
00004c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000050  7261793c          DCB      0x72,0x61,0x79,0x3c
000054  54797065          DCB      0x54,0x79,0x70,0x65
000058  3e20262c          DCB      0x3e,0x20,0x26,0x2c
00005c  20736967          DCB      0x20,0x73,0x69,0x67
000060  6e656420          DCB      0x6e,0x65,0x64,0x20
000064  696e742c          DCB      0x69,0x6e,0x74,0x2c
000068  20736967          DCB      0x20,0x73,0x69,0x67
00006c  6e656420          DCB      0x6e,0x65,0x64,0x20
000070  696e742c          DCB      0x69,0x6e,0x74,0x2c
000074  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000078  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00007c  6d626564          DCB      0x6d,0x62,0x65,0x64
000080  6465643a          DCB      0x64,0x65,0x64,0x3a
000084  3a417272          DCB      0x3a,0x41,0x72,0x72
000088  61793c4f          DCB      0x61,0x79,0x3c,0x4f
00008c  75745479          DCB      0x75,0x74,0x54,0x79
000090  70653e20          DCB      0x70,0x65,0x3e,0x20
000094  262c2041          DCB      0x26,0x2c,0x20,0x41
000098  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00009c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000a0  65646465          DCB      0x65,0x64,0x64,0x65
0000a4  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
0000a8  656d6f72          DCB      0x65,0x6d,0x6f,0x72
0000ac  79537461          DCB      0x79,0x53,0x74,0x61
0000b0  636b2920          DCB      0x63,0x6b,0x29,0x20
0000b4  5b776974          DCB      0x5b,0x77,0x69,0x74
0000b8  6820496e          DCB      0x68,0x20,0x49,0x6e
0000bc  54797065          DCB      0x54,0x79,0x70,0x65
0000c0  203d2075          DCB      0x20,0x3d,0x20,0x75
0000c4  6e736967          DCB      0x6e,0x73,0x69,0x67
0000c8  6e656420          DCB      0x6e,0x65,0x64,0x20
0000cc  63686172          DCB      0x63,0x68,0x61,0x72
0000d0  2c20496e          DCB      0x2c,0x20,0x49,0x6e
0000d4  7465726d          DCB      0x74,0x65,0x72,0x6d
0000d8  65646961          DCB      0x65,0x64,0x69,0x61
0000dc  74655479          DCB      0x74,0x65,0x54,0x79
0000e0  7065203d          DCB      0x70,0x65,0x20,0x3d
0000e4  20756e73          DCB      0x20,0x75,0x6e,0x73
0000e8  69676e65          DCB      0x69,0x67,0x6e,0x65
0000ec  64207368          DCB      0x64,0x20,0x73,0x68
0000f0  6f72742c          DCB      0x6f,0x72,0x74,0x2c
0000f4  204f7574          DCB      0x20,0x4f,0x75,0x74
0000f8  54797065          DCB      0x54,0x79,0x70,0x65
0000fc  203d2075          DCB      0x20,0x3d,0x20,0x75
000100  6e736967          DCB      0x6e,0x73,0x69,0x67
000104  6e656420          DCB      0x6e,0x65,0x64,0x20
000108  73686f72          DCB      0x73,0x68,0x6f,0x72
00010c  745d00            DCB      0x74,0x5d,0x00
                  |symbol_number.78|
00010f  41                DCB      0x41
000110  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000114  3a526573          DCB      0x3a,0x52,0x65,0x73
000118  756c7420          DCB      0x75,0x6c,0x74,0x20
00011c  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000120  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000124  62656464          DCB      0x62,0x65,0x64,0x64
000128  65643a3a          DCB      0x65,0x64,0x3a,0x3a
00012c  496d6167          DCB      0x49,0x6d,0x61,0x67
000130  6550726f          DCB      0x65,0x50,0x72,0x6f
000134  63657373          DCB      0x63,0x65,0x73,0x73
000138  696e673a          DCB      0x69,0x6e,0x67,0x3a
00013c  3a426f78          DCB      0x3a,0x42,0x6f,0x78
000140  46696c74          DCB      0x46,0x69,0x6c,0x74
000144  65724e6f          DCB      0x65,0x72,0x4e,0x6f
000148  726d616c          DCB      0x72,0x6d,0x61,0x6c
00014c  697a6528          DCB      0x69,0x7a,0x65,0x28
000150  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000154  7420416e          DCB      0x74,0x20,0x41,0x6e
000158  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00015c  456d6265          DCB      0x45,0x6d,0x62,0x65
000160  64646564          DCB      0x64,0x64,0x65,0x64
000164  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000168  7261793c          DCB      0x72,0x61,0x79,0x3c
00016c  756e7369          DCB      0x75,0x6e,0x73,0x69
000170  676e6564          DCB      0x67,0x6e,0x65,0x64
000174  20636861          DCB      0x20,0x63,0x68,0x61
000178  723e2026          DCB      0x72,0x3e,0x20,0x26
00017c  2c207369          DCB      0x2c,0x20,0x73,0x69
000180  676e6564          DCB      0x67,0x6e,0x65,0x64
000184  20696e74          DCB      0x20,0x69,0x6e,0x74
000188  2c20756e          DCB      0x2c,0x20,0x75,0x6e
00018c  7369676e          DCB      0x73,0x69,0x67,0x6e
000190  65642063          DCB      0x65,0x64,0x20,0x63
000194  6861722c          DCB      0x68,0x61,0x72,0x2c
000198  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00019c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0001a0  6d626564          DCB      0x6d,0x62,0x65,0x64
0001a4  6465643a          DCB      0x64,0x65,0x64,0x3a
0001a8  3a417272          DCB      0x3a,0x41,0x72,0x72
0001ac  61793c75          DCB      0x61,0x79,0x3c,0x75
0001b0  6e736967          DCB      0x6e,0x73,0x69,0x67
0001b4  6e656420          DCB      0x6e,0x65,0x64,0x20
0001b8  63686172          DCB      0x63,0x68,0x61,0x72
0001bc  3e20262c          DCB      0x3e,0x20,0x26,0x2c
0001c0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0001c4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0001c8  6d626564          DCB      0x6d,0x62,0x65,0x64
0001cc  6465643a          DCB      0x64,0x65,0x64,0x3a
0001d0  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
0001d4  6f727953          DCB      0x6f,0x72,0x79,0x53
0001d8  7461636b          DCB      0x74,0x61,0x63,0x6b
0001dc  2900              DCB      0x29,0x00
                  |symbol_number.79|
0001de  416e              DCB      0x41,0x6e
0001e0  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0001e4  52657375          DCB      0x52,0x65,0x73,0x75
0001e8  6c742041          DCB      0x6c,0x74,0x20,0x41
0001ec  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0001f0  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0001f4  65646465          DCB      0x65,0x64,0x64,0x65
0001f8  643a3a49          DCB      0x64,0x3a,0x3a,0x49
0001fc  6d616765          DCB      0x6d,0x61,0x67,0x65
000200  50726f63          DCB      0x50,0x72,0x6f,0x63
000204  65737369          DCB      0x65,0x73,0x73,0x69
000208  6e673a3a          DCB      0x6e,0x67,0x3a,0x3a
00020c  446f776e          DCB      0x44,0x6f,0x77,0x6e
000210  73616d70          DCB      0x73,0x61,0x6d,0x70
000214  6c654269          DCB      0x6c,0x65,0x42,0x69
000218  6c696e65          DCB      0x6c,0x69,0x6e,0x65
00021c  61722863          DCB      0x61,0x72,0x28,0x63
000220  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000224  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000228  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00022c  6d626564          DCB      0x6d,0x62,0x65,0x64
000230  6465643a          DCB      0x64,0x65,0x64,0x3a
000234  3a417272          DCB      0x3a,0x41,0x72,0x72
000238  61793c75          DCB      0x61,0x79,0x3c,0x75
00023c  6e736967          DCB      0x6e,0x73,0x69,0x67
000240  6e656420          DCB      0x6e,0x65,0x64,0x20
000244  63686172          DCB      0x63,0x68,0x61,0x72
000248  3e20262c          DCB      0x3e,0x20,0x26,0x2c
00024c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000250  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000254  6d626564          DCB      0x6d,0x62,0x65,0x64
000258  6465643a          DCB      0x64,0x65,0x64,0x3a
00025c  3a417272          DCB      0x3a,0x41,0x72,0x72
000260  61793c75          DCB      0x61,0x79,0x3c,0x75
000264  6e736967          DCB      0x6e,0x73,0x69,0x67
000268  6e656420          DCB      0x6e,0x65,0x64,0x20
00026c  63686172          DCB      0x63,0x68,0x61,0x72
000270  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000274  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000278  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00027c  6d626564          DCB      0x6d,0x62,0x65,0x64
000280  6465643a          DCB      0x64,0x65,0x64,0x3a
000284  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
000288  6f727953          DCB      0x6f,0x72,0x79,0x53
00028c  7461636b          DCB      0x74,0x61,0x63,0x6b
000290  2900              DCB      0x29,0x00
                  |symbol_number.80|
000292  416e              DCB      0x41,0x6e
000294  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000298  52657375          DCB      0x52,0x65,0x73,0x75
00029c  6c742041          DCB      0x6c,0x74,0x20,0x41
0002a0  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0002a4  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0002a8  65646465          DCB      0x65,0x64,0x64,0x65
0002ac  643a3a49          DCB      0x64,0x3a,0x3a,0x49
0002b0  6d616765          DCB      0x6d,0x61,0x67,0x65
0002b4  50726f63          DCB      0x50,0x72,0x6f,0x63
0002b8  65737369          DCB      0x65,0x73,0x73,0x69
0002bc  6e673a3a          DCB      0x6e,0x67,0x3a,0x3a
0002c0  46617374          DCB      0x46,0x61,0x73,0x74
0002c4  47726164          DCB      0x47,0x72,0x61,0x64
0002c8  69656e74          DCB      0x69,0x65,0x6e,0x74
0002cc  28636f6e          DCB      0x28,0x63,0x6f,0x6e
0002d0  73742041          DCB      0x73,0x74,0x20,0x41
0002d4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0002d8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0002dc  65646465          DCB      0x65,0x64,0x64,0x65
0002e0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0002e4  72726179          DCB      0x72,0x72,0x61,0x79
0002e8  3c756e73          DCB      0x3c,0x75,0x6e,0x73
0002ec  69676e65          DCB      0x69,0x67,0x6e,0x65
0002f0  64206368          DCB      0x64,0x20,0x63,0x68
0002f4  61723e20          DCB      0x61,0x72,0x3e,0x20
0002f8  262c2041          DCB      0x26,0x2c,0x20,0x41
0002fc  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000300  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000304  65646465          DCB      0x65,0x64,0x64,0x65
000308  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00030c  72726179          DCB      0x72,0x72,0x61,0x79
000310  3c736967          DCB      0x3c,0x73,0x69,0x67
000314  6e656420          DCB      0x6e,0x65,0x64,0x20
000318  63686172          DCB      0x63,0x68,0x61,0x72
00031c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000320  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000324  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000328  6d626564          DCB      0x6d,0x62,0x65,0x64
00032c  6465643a          DCB      0x64,0x65,0x64,0x3a
000330  3a417272          DCB      0x3a,0x41,0x72,0x72
000334  61793c73          DCB      0x61,0x79,0x3c,0x73
000338  69676e65          DCB      0x69,0x67,0x6e,0x65
00033c  64206368          DCB      0x64,0x20,0x63,0x68
000340  61723e20          DCB      0x61,0x72,0x3e,0x20
000344  262c2041          DCB      0x26,0x2c,0x20,0x41
000348  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00034c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000350  65646465          DCB      0x65,0x64,0x64,0x65
000354  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000358  656d6f72          DCB      0x65,0x6d,0x6f,0x72
00035c  79537461          DCB      0x79,0x53,0x74,0x61
000360  636b2900          DCB      0x63,0x6b,0x29,0x00
000364  4c696e65          DCB      0x4c,0x69,0x6e,0x65
000368  61725365          DCB      0x61,0x72,0x53,0x65
00036c  7175656e          DCB      0x71,0x75,0x65,0x6e
000370  63653c54          DCB      0x63,0x65,0x3c,0x54
000374  7970653e          DCB      0x79,0x70,0x65,0x3e
000378  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
00037c  6d707574          DCB      0x6d,0x70,0x75,0x74
000380  6553697a          DCB      0x65,0x53,0x69,0x7a
000384  65000000          DCB      0x65,0x00,0x00,0x00
000388  73697a65          DCB      0x73,0x69,0x7a,0x65
00038c  20657374          DCB      0x20,0x65,0x73,0x74
000390  696d6174          DCB      0x69,0x6d,0x61,0x74
000394  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000398  6661696c          DCB      0x66,0x61,0x69,0x6c
00039c  65640000          DCB      0x65,0x64,0x00,0x00
0003a0  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0003a4  6f726574          DCB      0x6f,0x72,0x65,0x74
0003a8  6563685c          DCB      0x65,0x63,0x68,0x5c
0003ac  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0003b0  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0003b4  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0003b8  64655c61          DCB      0x64,0x65,0x5c,0x61
0003bc  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0003c0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0003c4  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0003c8  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0003cc  2f736571          DCB      0x2f,0x73,0x65,0x71
0003d0  75656e63          DCB      0x75,0x65,0x6e,0x63
0003d4  65732e68          DCB      0x65,0x73,0x2e,0x68
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  41727261          DCB      0x41,0x72,0x72,0x61
0003e0  793c5479          DCB      0x79,0x3c,0x54,0x79
0003e4  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0003e8  3a676574          DCB      0x3a,0x67,0x65,0x74
0003ec  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0003f0  65000000          DCB      0x65,0x00,0x00,0x00
0003f4  4e656761          DCB      0x4e,0x65,0x67,0x61
0003f8  74697665          DCB      0x74,0x69,0x76,0x65
0003fc  2064696d          DCB      0x20,0x64,0x69,0x6d
000400  656e7369          DCB      0x65,0x6e,0x73,0x69
000404  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000408  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
00040c  6f726574          DCB      0x6f,0x72,0x65,0x74
000410  6563685c          DCB      0x65,0x63,0x68,0x5c
000414  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000418  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
00041c  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000420  64655c61          DCB      0x64,0x65,0x5c,0x61
000424  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000428  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
00042c  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000430  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000434  2f617272          DCB      0x2f,0x61,0x72,0x72
000438  61793264          DCB      0x61,0x79,0x32,0x64
00043c  2e680000          DCB      0x2e,0x68,0x00,0x00
000440  41727261          DCB      0x41,0x72,0x72,0x61
000444  793c5479          DCB      0x79,0x3c,0x54,0x79
000448  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00044c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000450  70757465          DCB      0x70,0x75,0x74,0x65
000454  52657175          DCB      0x52,0x65,0x71,0x75
000458  69726564          DCB      0x69,0x72,0x65,0x64
00045c  53747269          DCB      0x53,0x74,0x72,0x69
000460  64650000          DCB      0x64,0x65,0x00,0x00
000464  496e7661          DCB      0x49,0x6e,0x76,0x61
000468  6c696420          DCB      0x6c,0x69,0x64,0x20
00046c  73697a65          DCB      0x73,0x69,0x7a,0x65
000470  00                DCB      0x00

                          AREA ||t._ZN4Anki8Embedded5ArrayItEclEiiii||, COMGROUP=_ZN4Anki8Embedded5ArrayItEclEiiii, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5ArrayItEclEiiii PROC ; Anki::Embedded::Array<unsigned short>::operator ()(int, int, int, int)
;;;401    
;;;402        template<typename Type> ArraySlice<Type> Array<Type>::operator() (s32 minY, s32 maxY, s32 minX, s32 maxX)
000000  b5f0              PUSH     {r4-r7,lr}
;;;403        {
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  e9dd671a          LDRD     r6,r7,[sp,#0x68]
;;;404          LinearSequence<s32> ySlice = IndexSequence<s32>(minY, 1, maxY, this->size[0]);
00000a  6808              LDR      r0,[r1,#0]
00000c  4694              MOV      r12,r2                ;403
00000e  460d              MOV      r5,r1                 ;403
000010  9000              STR      r0,[sp,#0]
000012  2201              MOVS     r2,#1
000014  4661              MOV      r1,r12
000016  a811              ADD      r0,sp,#0x44
000018  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
;;;405          LinearSequence<s32> xSlice = IndexSequence<s32>(minX, 1, maxX, this->size[1]);
00001c  6868              LDR      r0,[r5,#4]
00001e  9000              STR      r0,[sp,#0]
000020  463b              MOV      r3,r7
000022  2201              MOVS     r2,#1
000024  4631              MOV      r1,r6
000026  a80e              ADD      r0,sp,#0x38
000028  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
00002c  e8b5104e          LDM      r5!,{r1-r3,r6,r12}
000030  e9dd0511          LDRD     r0,r5,[sp,#0x44]
000034  9f13              LDR      r7,[sp,#0x4c]
000036  9703              STR      r7,[sp,#0xc]
000038  e9cd0501          STRD     r0,r5,[sp,#4]
00003c  e9dd050e          LDRD     r0,r5,[sp,#0x38]
000040  e9cd0504          STRD     r0,r5,[sp,#0x10]
000044  9f10              LDR      r7,[sp,#0x40]
000046  a807              ADD      r0,sp,#0x1c
000048  9706              STR      r7,[sp,#0x18]
00004a  e8a0104e          STM      r0!,{r1-r3,r6,r12}
00004e  2500              MOVS     r5,#0
000050  2900              CMP      r1,#0
000052  bfc8              IT       GT
000054  2a00              CMPGT    r2,#0
000056  dd25              BLE      |L38.164|
000058  fb01f002          MUL      r0,r1,r2
00005c  b310              CBZ      r0,|L38.164|
00005e  2000              MOVS     r0,#0
000060  fb00c003          MLA      r0,r0,r3,r12
000064  900c              STR      r0,[sp,#0x30]
                  |L38.102|
000066  2900              CMP      r1,#0
000068  bfc8              IT       GT
00006a  2a00              CMPGT    r2,#0
00006c  dd1c              BLE      |L38.168|
00006e  fb01f002          MUL      r0,r1,r2
000072  b1c8              CBZ      r0,|L38.168|
000074  2000              MOVS     r0,#0
000076  fb00c003          MLA      r0,r0,r3,r12
00007a  900d              STR      r0,[sp,#0x34]
                  |L38.124|
;;;406    
;;;407          ArraySlice<Type> slice(*this, ySlice, xSlice);
;;;408    
;;;409          return slice;
00007c  f10d0e04          ADD      lr,sp,#4
000080  463d              MOV      r5,r7
000082  e8be100f          LDM      lr!,{r0-r3,r12}
000086  e9dd6707          LDRD     r6,r7,[sp,#0x1c]
00008a  61e7              STR      r7,[r4,#0x1c]
00008c  e884100f          STM      r4,{r0-r3,r12}
000090  e9c45605          STRD     r5,r6,[r4,#0x14]
000094  ad09              ADD      r5,sp,#0x24
000096  3420              ADDS     r4,r4,#0x20
000098  e8b5100f          LDM      r5!,{r0-r3,r12}
00009c  e8a4100f          STM      r4!,{r0-r3,r12}
;;;410        }
0000a0  b015              ADD      sp,sp,#0x54
0000a2  bdf0              POP      {r4-r7,pc}
                  |L38.164|
0000a4  950c              STR      r5,[sp,#0x30]
0000a6  e7de              B        |L38.102|
                  |L38.168|
0000a8  950d              STR      r5,[sp,#0x34]
0000aa  e7e7              B        |L38.124|
;;;411    
                          ENDP


                          AREA ||area_number.39||, COMGROUP=_ZN4Anki8Embedded5ArrayItEclEiiii, LINKORDER=||t._ZN4Anki8Embedded5ArrayItEclEiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayItEclEiiii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceItE3SetEt||, COMGROUP=_ZN4Anki8Embedded10ArraySliceItE3SetEt, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10ArraySliceItE3SetEt PROC ; Anki::Embedded::ArraySlice<unsigned short>::Set(unsigned short)
;;;109    
;;;110        template<typename Type> s32 ArraySlice<Type>::Set(const Type value)
000000  b530              PUSH     {r4,r5,lr}
;;;111        {
000002  6a82              LDR      r2,[r0,#0x28]
000004  b089              SUB      sp,sp,#0x24
000006  f1000318          ADD      r3,r0,#0x18
00000a  b1ea              CBZ      r2,|L45.72|
00000c  681a              LDR      r2,[r3,#0]
00000e  2a00              CMP      r2,#0
000010  bfa4              ITT      GE
000012  685a              LDRGE    r2,[r3,#4]
000014  2a00              CMPGE    r2,#0
000016  db17              BLT      |L45.72|
000018  f04f0c01          MOV      r12,#1
00001c  f88dc008          STRB     r12,[sp,#8]
000020  f8d0c010          LDR      r12,[r0,#0x10]
000024  f8cdc00c          STR      r12,[sp,#0xc]
000028  f8d0c014          LDR      r12,[r0,#0x14]
00002c  f8cdc010          STR      r12,[sp,#0x10]
000030  68c2              LDR      r2,[r0,#0xc]
000032  9205              STR      r2,[sp,#0x14]
000034  6842              LDR      r2,[r0,#4]
000036  9206              STR      r2,[sp,#0x18]
000038  6882              LDR      r2,[r0,#8]
00003a  9207              STR      r2,[sp,#0x1c]
00003c  6800              LDR      r0,[r0,#0]
;;;112          Array<Type> &array = this->get_array();
;;;113    
;;;114          AnkiConditionalErrorAndReturnValue(array.IsValid(),
;;;115            0, "ArraySlice<Type>::Set", "Array<Type> is not valid");
;;;116    
;;;117          const ArraySliceLimits_in1_out0<s32> limits(this->get_ySlice(), this->get_xSlice());
;;;118    
;;;119          AnkiConditionalErrorAndReturnValue(limits.isValid,
;;;120            0, "ArraySlice<Type>::Set", "Limits is not valid");
;;;121    
;;;122          for(s32 iy=0; iy<limits.rawIn1Limits.ySize; iy++) {
00003e  2200              MOVS     r2,#0
000040  9008              STR      r0,[sp,#0x20]
000042  2800              CMP      r0,#0
000044  dd2b              BLE      |L45.158|
000046  e00c              B        |L45.98|
                  |L45.72|
000048  2172              MOVS     r1,#0x72              ;114
00004a  4817              LDR      r0,|L45.168|
00004c  e9cd0100          STRD     r0,r1,[sp,#0]         ;114
000050  a316              ADR      r3,|L45.172|
000052  a225              ADR      r2,|L45.232|
000054  a12b              ADR      r1,|L45.260|
000056  2005              MOVS     r0,#5                 ;114
000058  f7fffffe          BL       _Anki_Log
;;;123            const s32 y = limits.rawIn1Limits.yStart + iy * limits.rawIn1Limits.yIncrement;
;;;124            Type * restrict pMat = array.Pointer(y, 0);
;;;125    
;;;126            for(s32 ix=0; ix<limits.rawIn1Limits.xSize; ix++) {
;;;127              const s32 x = limits.rawIn1Limits.xStart + ix * limits.rawIn1Limits.xIncrement;
;;;128              pMat[x] = value;
;;;129            }
;;;130          }
;;;131    
;;;132          return limits.rawIn1Limits.xSize*limits.rawIn1Limits.ySize;
;;;133        }
00005c  b009              ADD      sp,sp,#0x24
00005e  2000              MOVS     r0,#0                 ;114
000060  bd30              POP      {r4,r5,pc}
                  |L45.98|
000062  e9dd0c06          LDRD     r0,r12,[sp,#0x18]
000066  fb02000c          MLA      r0,r2,r12,r0          ;123
00006a  f8d3c010          LDR      r12,[r3,#0x10]        ;123
00006e  689c              LDR      r4,[r3,#8]            ;123
000070  fb00c404          MLA      r4,r0,r4,r12          ;123
000074  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000078  2000              MOVS     r0,#0                 ;126
00007a  f1bc0f00          CMP      r12,#0                ;126
00007e  dd0a              BLE      |L45.150|
                  |L45.128|
000080  e9ddc503          LDRD     r12,r5,[sp,#0xc]      ;126
000084  fb00cc05          MLA      r12,r0,r5,r12         ;127
000088  1c40              ADDS     r0,r0,#1              ;126
00008a  f824101c          STRH     r1,[r4,r12,LSL #1]    ;128
00008e  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000092  4584              CMP      r12,r0                ;126
000094  dcf4              BGT      |L45.128|
                  |L45.150|
000096  9808              LDR      r0,[sp,#0x20]         ;122
000098  1c52              ADDS     r2,r2,#1              ;122
00009a  4290              CMP      r0,r2                 ;122
00009c  dce1              BGT      |L45.98|
                  |L45.158|
00009e  9908              LDR      r1,[sp,#0x20]         ;132
0000a0  9805              LDR      r0,[sp,#0x14]         ;132
0000a2  b009              ADD      sp,sp,#0x24
0000a4  4348              MULS     r0,r1,r0              ;132
0000a6  bd30              POP      {r4,r5,pc}
;;;134    
                          ENDP

                  |L45.168|
                          DCD      _ZZN4Anki8Embedded10ArraySliceItE3SetEtE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<unsigned short>::Set(unsigned short)::__PRETTY_FUNCTION__
                  |L45.172|
0000ac  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0000b0  6f726574
0000b4  6563685c
0000b8  636f6d6d
0000bc  6f6e5c69
0000c0  6e636c75
0000c4  64655c61
0000c8  6e6b692f
0000cc  636f6d6d
0000d0  6f6e2f72
0000d4  6f626f74
0000d8  2f617272
0000dc  617953  
0000df  6c696365          DCB      "lices.h",0
0000e3  732e6800
0000e7  00                DCB      0
                  |L45.232|
0000e8  41727261          DCB      "Array<Type> is not valid",0
0000ec  793c5479
0000f0  70653e20
0000f4  6973206e
0000f8  6f742076
0000fc  616c6964
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L45.260|
000104  41727261          DCB      "ArraySlice<Type>::Set",0
000108  79536c69
00010c  63653c54
000110  7970653e
000114  3a3a5365
000118  7400    
00011a  00                DCB      0
00011b  00                DCB      0

                          AREA ||area_number.46||, COMGROUP=_ZN4Anki8Embedded10ArraySliceItE3SetEt, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceItE3SetEt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceItE3SetEt||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIiEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<int>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<int>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a807              ADD      r0,sp,#0x1c
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2000              MOVS     r0,#0
000024  f04f0a01          MOV      r10,#1
000028  e9cd0a02          STRD     r0,r10,[sp,#8]
00002c  4602              MOV      r2,r0
00002e  4651              MOV      r1,r10
000030  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
000034  9001              STR      r0,[sp,#4]
000036  2000              MOVS     r0,#0
000038  e9cd0a05          STRD     r0,r10,[sp,#0x14]
00003c  4602              MOV      r2,r0
00003e  4651              MOV      r1,r10
000040  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
000044  9004              STR      r0,[sp,#0x10]
000046  e9dd0101          LDRD     r0,r1,[sp,#4]
00004a  9a03              LDR      r2,[sp,#0xc]
00004c  60a2              STR      r2,[r4,#8]
00004e  e9c40100          STRD     r0,r1,[r4,#0]
000052  e9dd0104          LDRD     r0,r1,[sp,#0x10]
000056  9a06              LDR      r2,[sp,#0x18]
000058  f104030c          ADD      r3,r4,#0xc
00005c  f8c48028          STR      r8,[r4,#0x28]
000060  e8a302e7          STM      r3!,{r0-r2,r5-r7,r9}
000064  2200              MOVS     r2,#0
000066  2d00              CMP      r5,#0
000068  bfc8              IT       GT
00006a  2e00              CMPGT    r6,#0
00006c  dd25              BLE      |L52.186|
00006e  fb05f006          MUL      r0,r5,r6
000072  b310              CBZ      r0,|L52.186|
000074  2000              MOVS     r0,#0
000076  fb008107          MLA      r1,r0,r7,r8
00007a  62e1              STR      r1,[r4,#0x2c]
                  |L52.124|
00007c  2d00              CMP      r5,#0
00007e  bfc8              IT       GT
000080  2e00              CMPGT    r6,#0
000082  dd1c              BLE      |L52.190|
000084  fb05f006          MUL      r0,r5,r6
000088  b1c8              CBZ      r0,|L52.190|
00008a  2000              MOVS     r0,#0
00008c  fb008007          MLA      r0,r0,r7,r8
000090  6320              STR      r0,[r4,#0x30]
                  |L52.146|
000092  2d00              CMP      r5,#0
000094  bfc8              IT       GT
000096  2e00              CMPGT    r6,#0
000098  dd13              BLE      |L52.194|
00009a  fb05f006          MUL      r0,r5,r6
00009e  b180              CBZ      r0,|L52.194|
0000a0  2000              MOVS     r0,#0
0000a2  fb008007          MLA      r0,r0,r7,r8
0000a6  6320              STR      r0,[r4,#0x30]
                  |L52.168|
0000a8  a810              ADD      r0,sp,#0x40
0000aa  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000ae  b150              CBZ      r0,|L52.198|
0000b0  4659              MOV      r1,r11
0000b2  4620              MOV      r0,r4
0000b4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
0000b8  e009              B        |L52.206|
                  |L52.186|
0000ba  62e2              STR      r2,[r4,#0x2c]
0000bc  e7de              B        |L52.124|
                  |L52.190|
0000be  6322              STR      r2,[r4,#0x30]
0000c0  e7e7              B        |L52.146|
                  |L52.194|
0000c2  6322              STR      r2,[r4,#0x30]
0000c4  e7f0              B        |L52.168|
                  |L52.198|
0000c6  2100              MOVS     r1,#0
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi ; Anki::Embedded::FixedLengthList<int>::set_size(int)
                  |L52.206|
0000ce  b011              ADD      sp,sp,#0x44
0000d0  4620              MOV      r0,r4
0000d2  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.53||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIaEclEiiii||, COMGROUP=_ZN4Anki8Embedded5ArrayIaEclEiiii, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5ArrayIaEclEiiii PROC ; Anki::Embedded::Array<signed char>::operator ()(int, int, int, int)
;;;401    
;;;402        template<typename Type> ArraySlice<Type> Array<Type>::operator() (s32 minY, s32 maxY, s32 minX, s32 maxX)
000000  b5f0              PUSH     {r4-r7,lr}
;;;403        {
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  e9dd671a          LDRD     r6,r7,[sp,#0x68]
;;;404          LinearSequence<s32> ySlice = IndexSequence<s32>(minY, 1, maxY, this->size[0]);
00000a  6808              LDR      r0,[r1,#0]
00000c  4694              MOV      r12,r2                ;403
00000e  460d              MOV      r5,r1                 ;403
000010  9000              STR      r0,[sp,#0]
000012  2201              MOVS     r2,#1
000014  4661              MOV      r1,r12
000016  a811              ADD      r0,sp,#0x44
000018  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
;;;405          LinearSequence<s32> xSlice = IndexSequence<s32>(minX, 1, maxX, this->size[1]);
00001c  6868              LDR      r0,[r5,#4]
00001e  9000              STR      r0,[sp,#0]
000020  463b              MOV      r3,r7
000022  2201              MOVS     r2,#1
000024  4631              MOV      r1,r6
000026  a80e              ADD      r0,sp,#0x38
000028  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
00002c  e8b5104e          LDM      r5!,{r1-r3,r6,r12}
000030  e9dd0511          LDRD     r0,r5,[sp,#0x44]
000034  9f13              LDR      r7,[sp,#0x4c]
000036  9703              STR      r7,[sp,#0xc]
000038  e9cd0501          STRD     r0,r5,[sp,#4]
00003c  e9dd050e          LDRD     r0,r5,[sp,#0x38]
000040  e9cd0504          STRD     r0,r5,[sp,#0x10]
000044  9f10              LDR      r7,[sp,#0x40]
000046  a807              ADD      r0,sp,#0x1c
000048  9706              STR      r7,[sp,#0x18]
00004a  e8a0104e          STM      r0!,{r1-r3,r6,r12}
00004e  2500              MOVS     r5,#0
000050  2900              CMP      r1,#0
000052  bfc8              IT       GT
000054  2a00              CMPGT    r2,#0
000056  dd25              BLE      |L59.164|
000058  fb01f002          MUL      r0,r1,r2
00005c  b310              CBZ      r0,|L59.164|
00005e  2000              MOVS     r0,#0
000060  fb00c003          MLA      r0,r0,r3,r12
000064  900c              STR      r0,[sp,#0x30]
                  |L59.102|
000066  2900              CMP      r1,#0
000068  bfc8              IT       GT
00006a  2a00              CMPGT    r2,#0
00006c  dd1c              BLE      |L59.168|
00006e  fb01f002          MUL      r0,r1,r2
000072  b1c8              CBZ      r0,|L59.168|
000074  2000              MOVS     r0,#0
000076  fb00c003          MLA      r0,r0,r3,r12
00007a  900d              STR      r0,[sp,#0x34]
                  |L59.124|
;;;406    
;;;407          ArraySlice<Type> slice(*this, ySlice, xSlice);
;;;408    
;;;409          return slice;
00007c  f10d0e04          ADD      lr,sp,#4
000080  463d              MOV      r5,r7
000082  e8be100f          LDM      lr!,{r0-r3,r12}
000086  e9dd6707          LDRD     r6,r7,[sp,#0x1c]
00008a  61e7              STR      r7,[r4,#0x1c]
00008c  e884100f          STM      r4,{r0-r3,r12}
000090  e9c45605          STRD     r5,r6,[r4,#0x14]
000094  ad09              ADD      r5,sp,#0x24
000096  3420              ADDS     r4,r4,#0x20
000098  e8b5100f          LDM      r5!,{r0-r3,r12}
00009c  e8a4100f          STM      r4!,{r0-r3,r12}
;;;410        }
0000a0  b015              ADD      sp,sp,#0x54
0000a2  bdf0              POP      {r4-r7,pc}
                  |L59.164|
0000a4  950c              STR      r5,[sp,#0x30]
0000a6  e7de              B        |L59.102|
                  |L59.168|
0000a8  950d              STR      r5,[sp,#0x34]
0000aa  e7e7              B        |L59.124|
;;;411    
                          ENDP


                          AREA ||area_number.60||, COMGROUP=_ZN4Anki8Embedded5ArrayIaEclEiiii, LINKORDER=||t._ZN4Anki8Embedded5ArrayIaEclEiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIaEclEiiii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceIaE3SetEa||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIaE3SetEa, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10ArraySliceIaE3SetEa PROC ; Anki::Embedded::ArraySlice<signed char>::Set(signed char)
;;;109    
;;;110        template<typename Type> s32 ArraySlice<Type>::Set(const Type value)
000000  b530              PUSH     {r4,r5,lr}
;;;111        {
000002  6a82              LDR      r2,[r0,#0x28]
000004  b089              SUB      sp,sp,#0x24
000006  f1000318          ADD      r3,r0,#0x18
00000a  b1ea              CBZ      r2,|L66.72|
00000c  681a              LDR      r2,[r3,#0]
00000e  2a00              CMP      r2,#0
000010  bfa4              ITT      GE
000012  685a              LDRGE    r2,[r3,#4]
000014  2a00              CMPGE    r2,#0
000016  db17              BLT      |L66.72|
000018  f04f0c01          MOV      r12,#1
00001c  f88dc008          STRB     r12,[sp,#8]
000020  f8d0c010          LDR      r12,[r0,#0x10]
000024  f8cdc00c          STR      r12,[sp,#0xc]
000028  f8d0c014          LDR      r12,[r0,#0x14]
00002c  f8cdc010          STR      r12,[sp,#0x10]
000030  68c2              LDR      r2,[r0,#0xc]
000032  9205              STR      r2,[sp,#0x14]
000034  6842              LDR      r2,[r0,#4]
000036  9206              STR      r2,[sp,#0x18]
000038  6882              LDR      r2,[r0,#8]
00003a  9207              STR      r2,[sp,#0x1c]
00003c  6800              LDR      r0,[r0,#0]
;;;112          Array<Type> &array = this->get_array();
;;;113    
;;;114          AnkiConditionalErrorAndReturnValue(array.IsValid(),
;;;115            0, "ArraySlice<Type>::Set", "Array<Type> is not valid");
;;;116    
;;;117          const ArraySliceLimits_in1_out0<s32> limits(this->get_ySlice(), this->get_xSlice());
;;;118    
;;;119          AnkiConditionalErrorAndReturnValue(limits.isValid,
;;;120            0, "ArraySlice<Type>::Set", "Limits is not valid");
;;;121    
;;;122          for(s32 iy=0; iy<limits.rawIn1Limits.ySize; iy++) {
00003e  2200              MOVS     r2,#0
000040  9008              STR      r0,[sp,#0x20]
000042  2800              CMP      r0,#0
000044  dd2b              BLE      |L66.158|
000046  e00c              B        |L66.98|
                  |L66.72|
000048  2172              MOVS     r1,#0x72              ;114
00004a  4817              LDR      r0,|L66.168|
00004c  e9cd0100          STRD     r0,r1,[sp,#0]         ;114
000050  a316              ADR      r3,|L66.172|
000052  a225              ADR      r2,|L66.232|
000054  a12b              ADR      r1,|L66.260|
000056  2005              MOVS     r0,#5                 ;114
000058  f7fffffe          BL       _Anki_Log
;;;123            const s32 y = limits.rawIn1Limits.yStart + iy * limits.rawIn1Limits.yIncrement;
;;;124            Type * restrict pMat = array.Pointer(y, 0);
;;;125    
;;;126            for(s32 ix=0; ix<limits.rawIn1Limits.xSize; ix++) {
;;;127              const s32 x = limits.rawIn1Limits.xStart + ix * limits.rawIn1Limits.xIncrement;
;;;128              pMat[x] = value;
;;;129            }
;;;130          }
;;;131    
;;;132          return limits.rawIn1Limits.xSize*limits.rawIn1Limits.ySize;
;;;133        }
00005c  b009              ADD      sp,sp,#0x24
00005e  2000              MOVS     r0,#0                 ;114
000060  bd30              POP      {r4,r5,pc}
                  |L66.98|
000062  e9dd0c06          LDRD     r0,r12,[sp,#0x18]
000066  fb02000c          MLA      r0,r2,r12,r0          ;123
00006a  f8d3c010          LDR      r12,[r3,#0x10]        ;123
00006e  689c              LDR      r4,[r3,#8]            ;123
000070  fb00c404          MLA      r4,r0,r4,r12          ;123
000074  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000078  2000              MOVS     r0,#0                 ;126
00007a  f1bc0f00          CMP      r12,#0                ;126
00007e  dd0a              BLE      |L66.150|
                  |L66.128|
000080  e9ddc503          LDRD     r12,r5,[sp,#0xc]      ;126
000084  fb00cc05          MLA      r12,r0,r5,r12         ;127
000088  1c40              ADDS     r0,r0,#1              ;126
00008a  f804100c          STRB     r1,[r4,r12]           ;128
00008e  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000092  4584              CMP      r12,r0                ;126
000094  dcf4              BGT      |L66.128|
                  |L66.150|
000096  9808              LDR      r0,[sp,#0x20]         ;122
000098  1c52              ADDS     r2,r2,#1              ;122
00009a  4290              CMP      r0,r2                 ;122
00009c  dce1              BGT      |L66.98|
                  |L66.158|
00009e  9908              LDR      r1,[sp,#0x20]         ;132
0000a0  9805              LDR      r0,[sp,#0x14]         ;132
0000a2  b009              ADD      sp,sp,#0x24
0000a4  4348              MULS     r0,r1,r0              ;132
0000a6  bd30              POP      {r4,r5,pc}
;;;134    
                          ENDP

                  |L66.168|
                          DCD      _ZZN4Anki8Embedded10ArraySliceIaE3SetEaE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<signed char>::Set(signed char)::__PRETTY_FUNCTION__
                  |L66.172|
0000ac  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0000b0  6f726574
0000b4  6563685c
0000b8  636f6d6d
0000bc  6f6e5c69
0000c0  6e636c75
0000c4  64655c61
0000c8  6e6b692f
0000cc  636f6d6d
0000d0  6f6e2f72
0000d4  6f626f74
0000d8  2f617272
0000dc  617953  
0000df  6c696365          DCB      "lices.h",0
0000e3  732e6800
0000e7  00                DCB      0
                  |L66.232|
0000e8  41727261          DCB      "Array<Type> is not valid",0
0000ec  793c5479
0000f0  70653e20
0000f4  6973206e
0000f8  6f742076
0000fc  616c6964
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L66.260|
000104  41727261          DCB      "ArraySlice<Type>::Set",0
000108  79536c69
00010c  63653c54
000110  7970653e
000114  3a3a5365
000118  7400    
00011a  00                DCB      0
00011b  00                DCB      0

                          AREA ||area_number.67||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIaE3SetEa, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceIaE3SetEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceIaE3SetEa||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii PROC ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
;;;105    
;;;106        template<typename Type> s32 LinearSequence<Type>::computeSize(const Type start, const Type increment, const Type end)
000000  4290              CMP      r0,r2
;;;107        {
;;;108          if(start == end) {
;;;109            return 1;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;110          } else {
;;;111            if(ABS(increment) <= Flags::numeric_limits<Type>::epsilon()) {
;;;112              return 0;
;;;113            }
;;;114          }
;;;115    
;;;116          // 10:-1:12
;;;117          if(increment < 0 && start < end) {
;;;118            return 0;
;;;119          }
;;;120    
;;;121          // 12:1:10
;;;122          if(increment > 0 && start > end) {
;;;123            return 0;
;;;124          }
;;;125    
;;;126          const Type minLimit = MIN(start, end);
;;;127          const Type maxLimit = MAX(start, end);
;;;128          const Type incrementMagnitude = ABS(increment);
;;;129    
;;;130          const Type validRange = maxLimit - minLimit;
;;;131          const s32 size = (validRange+incrementMagnitude) / incrementMagnitude;
;;;132    
;;;133          AnkiConditionalErrorAndReturnValue(size >= 0,
;;;134            0, "LinearSequence<Type>::computeSize", "size estimation failed");
;;;135    
;;;136          return size;
;;;137        }
000006  4770              BXEQ     lr
000008  b510              PUSH     {r4,lr}               ;107
00000a  2400              MOVS     r4,#0                 ;107
00000c  424b              RSBS     r3,r1,#0              ;111
00000e  b082              SUB      sp,sp,#8              ;107
000010  2900              CMP      r1,#0                 ;111
000012  bfac              ITE      GE                    ;111
000014  468c              MOVGE    r12,r1                ;111
000016  469c              MOVLT    r12,r3                ;111
000018  4564              CMP      r4,r12                ;111
00001a  da03              BGE      |L73.36|
00001c  2900              CMP      r1,#0                 ;117
00001e  da04              BGE      |L73.42|
000020  4290              CMP      r0,r2                 ;117
000022  da05              BGE      |L73.48|
                  |L73.36|
000024  b002              ADD      sp,sp,#8
000026  2000              MOVS     r0,#0                 ;123
000028  bd10              POP      {r4,pc}
                  |L73.42|
00002a  bf18              IT       NE                    ;122
00002c  4290              CMPNE    r0,r2                 ;122
00002e  dcf9              BGT      |L73.36|
                  |L73.48|
000030  4290              CMP      r0,r2                 ;126
000032  bfb4              ITE      LT                    ;126
000034  4684              MOVLT    r12,r0                ;126
000036  4694              MOVGE    r12,r2                ;126
000038  bfd8              IT       LE                    ;127
00003a  4610              MOVLE    r0,r2                 ;127
00003c  2900              CMP      r1,#0                 ;128
00003e  bfb8              IT       LT                    ;128
000040  4619              MOVLT    r1,r3                 ;128
000042  eba0000c          SUB      r0,r0,r12             ;130
000046  4408              ADD      r0,r0,r1              ;131
000048  fb90f0f1          SDIV     r0,r0,r1              ;131
00004c  2800              CMP      r0,#0                 ;133
00004e  bfa4              ITT      GE
000050  b002              ADDGE    sp,sp,#8
000052  bd10              POPGE    {r4,pc}
000054  2185              MOVS     r1,#0x85              ;133
000056  4807              LDR      r0,|L73.116|
000058  4b07              LDR      r3,|L73.120|
00005a  e9cd0100          STRD     r0,r1,[sp,#0]         ;133
00005e  f1a30218          SUB      r2,r3,#0x18           ;133
000062  f1a20124          SUB      r1,r2,#0x24           ;133
000066  2005              MOVS     r0,#5                 ;133
000068  f7fffffe          BL       _Anki_Log
00006c  b002              ADD      sp,sp,#8
00006e  2000              MOVS     r0,#0                 ;133
000070  bd10              POP      {r4,pc}
;;;138    
                          ENDP

000072  0000              DCW      0x0000
                  |L73.116|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L73.120|
                          DCD      ||.constdata||+0x3a0

                          AREA ||area_number.74||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.74||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i||, COMGROUP=_ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i PROC ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
;;;143    
;;;144        template<typename Type> LinearSequence<Type> IndexSequence(Type start, Type increment, Type end, s32 arraySize)
000000  b510              PUSH     {r4,lr}
;;;145        {
000002  b084              SUB      sp,sp,#0x10
000004  4694              MOV      r12,r2
;;;146          // A negative value means (end-value)
;;;147          if(start < 0)
000006  9a06              LDR      r2,[sp,#0x18]
000008  4604              MOV      r4,r0                 ;145
00000a  2900              CMP      r1,#0
;;;148            start += arraySize;
00000c  bfb8              IT       LT
00000e  4411              ADDLT    r1,r2
;;;149    
;;;150          AnkiAssert(start >=0 && start < arraySize);
;;;151    
;;;152          // A negative value means (end-value)
;;;153          if(end < 0)
000010  2b00              CMP      r3,#0
;;;154            end += arraySize;
000012  bfb8              IT       LT
000014  4413              ADDLT    r3,r2
000016  e9cd1c01          STRD     r1,r12,[sp,#4]
00001a  4661              MOV      r1,r12
00001c  461a              MOV      r2,r3
00001e  9801              LDR      r0,[sp,#4]
000020  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
000024  9000              STR      r0,[sp,#0]
000026  e9dd1201          LDRD     r1,r2,[sp,#4]
;;;155    
;;;156          AnkiAssert(end >=0 && end < arraySize);
;;;157    
;;;158          LinearSequence<Type> sequence(start, increment, end);
;;;159    
;;;160          return sequence;
00002a  60a2              STR      r2,[r4,#8]
00002c  e9c40100          STRD     r0,r1,[r4,#0]
;;;161        }
000030  b004              ADD      sp,sp,#0x10
000032  bd10              POP      {r4,pc}
;;;162    
                          ENDP


                          AREA ||area_number.81||, COMGROUP=_ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i, LINKORDER=||t._ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIiEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<int>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L87.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L87.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L87.384|
000044  a25c              ADR      r2,|L87.440|
000046  a160              ADR      r1,|L87.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L87.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L87.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L87.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L87.384|
000080  a24d              ADR      r2,|L87.440|
000082  a157              ADR      r1,|L87.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L87.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L87.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L87.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L87.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L87.384|
0000c8  a251              ADR      r2,|L87.528|
0000ca  a156              ADR      r1,|L87.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L87.372|
                  |L87.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L87.384|
0000e0  a258              ADR      r2,|L87.580|
0000e2  a15f              ADR      r1,|L87.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L87.372|
                  |L87.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L87.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L87.384|
000110  a259              ADR      r2,|L87.632|
000112  a144              ADR      r1,|L87.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L87.372|
                  |L87.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L87.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L87.384|
00015a  a251              ADR      r2,|L87.672|
00015c  a140              ADR      r1,|L87.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L87.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L87.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L87.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L87.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L87.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L87.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L87.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L87.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L87.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L87.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L87.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L87.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L87.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L87.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.88||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.88||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<int>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L94.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L94.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.95||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.95||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIiE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L101.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L101.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L101.384|
000044  a25c              ADR      r2,|L101.440|
000046  a160              ADR      r1,|L101.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L101.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L101.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L101.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L101.384|
000080  a24d              ADR      r2,|L101.440|
000082  a157              ADR      r1,|L101.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L101.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L101.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L101.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L101.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L101.384|
0000c8  a251              ADR      r2,|L101.528|
0000ca  a156              ADR      r1,|L101.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L101.372|
                  |L101.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L101.384|
0000e0  a258              ADR      r2,|L101.580|
0000e2  a15f              ADR      r1,|L101.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L101.372|
                  |L101.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L101.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L101.384|
000110  a259              ADR      r2,|L101.632|
000112  a144              ADR      r1,|L101.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L101.372|
                  |L101.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L101.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L101.384|
00015a  a251              ADR      r2,|L101.672|
00015c  a140              ADR      r1,|L101.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L101.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L101.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L101.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L101.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L101.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L101.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L101.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L101.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L101.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L101.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L101.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L101.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L101.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L101.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.102||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.102||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIhE7IsValidEv PROC ; Anki::Embedded::Array<unsigned char>::IsValid() const
;;;590    
;;;591        template<typename Type> bool Array<Type>::IsValid() const
000000  6901              LDR      r1,[r0,#0x10]
;;;592        {
000002  b131              CBZ      r1,|L108.18|
;;;593          if(this->data == NULL) {
;;;594            return false;
;;;595          }
;;;596    
;;;597          if(size[0] < 0 || size[1] < 0) {
000004  6801              LDR      r1,[r0,#0]
000006  2900              CMP      r1,#0
000008  bfa1              ITTTT    GE
00000a  6840              LDRGE    r0,[r0,#4]
00000c  2800              CMPGE    r0,#0
;;;598            return false;
;;;599          }
;;;600    
;;;601          return true;
00000e  2001              MOVGE    r0,#1
;;;602        }
000010  4770              BXGE     lr
                  |L108.18|
000012  2000              MOVS     r0,#0                 ;598
000014  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||area_number.109||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.109||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L115.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L115.56|
00000e  4b0b              LDR      r3,|L115.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L115.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L115.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L115.60|
                          DCD      ||.constdata||+0x408

                          AREA ||area_number.116||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.116||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIaE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIaE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIaE8get_sizeEi PROC ; Anki::Embedded::Array<signed char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L122.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L122.56|
00000e  4b0b              LDR      r3,|L122.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L122.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L122.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIaE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<signed char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L122.60|
                          DCD      ||.constdata||+0x408

                          AREA ||area_number.123||, COMGROUP=_ZNK4Anki8Embedded5ArrayIaE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIaE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.123||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIaE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIjEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<unsigned>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L129.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L129.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L129.384|
000044  a25c              ADR      r2,|L129.440|
000046  a160              ADR      r1,|L129.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L129.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L129.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L129.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L129.384|
000080  a24d              ADR      r2,|L129.440|
000082  a157              ADR      r1,|L129.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L129.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L129.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L129.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L129.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L129.384|
0000c8  a251              ADR      r2,|L129.528|
0000ca  a156              ADR      r1,|L129.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L129.372|
                  |L129.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L129.384|
0000e0  a258              ADR      r2,|L129.580|
0000e2  a15f              ADR      r1,|L129.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L129.372|
                  |L129.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L129.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L129.384|
000110  a259              ADR      r2,|L129.632|
000112  a144              ADR      r1,|L129.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L129.372|
                  |L129.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L129.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L129.384|
00015a  a251              ADR      r2,|L129.672|
00015c  a140              ADR      r1,|L129.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L129.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L129.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L129.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L129.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L129.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L129.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L129.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L129.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L129.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L129.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L129.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L129.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L129.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L129.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.130||, COMGROUP=_ZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.130||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIjE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIjE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIjE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<unsigned>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L136.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L136.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.137||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIjE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIjE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.137||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIjE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded10ArraySliceItE3SetEtE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded10ArraySliceItE3SetEtE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded10ArraySliceItE3SetEtE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<unsigned short>::Set(unsigned short)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  536c6963          DCB      0x53,0x6c,0x69,0x63
000024  653c5479          DCB      0x65,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a536574          DCB      0x3a,0x53,0x65,0x74
000030  28547970          DCB      0x28,0x54,0x79,0x70
000034  6529205b          DCB      0x65,0x29,0x20,0x5b
000038  77697468          DCB      0x77,0x69,0x74,0x68
00003c  20547970          DCB      0x20,0x54,0x79,0x70
000040  65203d20          DCB      0x65,0x20,0x3d,0x20
000044  756e7369          DCB      0x75,0x6e,0x73,0x69
000048  676e6564          DCB      0x67,0x6e,0x65,0x64
00004c  2073686f          DCB      0x20,0x73,0x68,0x6f
000050  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d207369          DCB      0x3d,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  20696e74          DCB      0x20,0x69,0x6e,0x74
000090  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000bc  65642069          DCB      0x65,0x64,0x20,0x69
0000c0  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2073          DCB      0x20,0x3d,0x20,0x73
000094  69676e65          DCB      0x69,0x67,0x6e,0x65
000098  6420696e          DCB      0x64,0x20,0x69,0x6e
00009c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIaE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIaE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIaE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<signed char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  7369676e          DCB      0x73,0x69,0x67,0x6e
000054  65642063          DCB      0x65,0x64,0x20,0x63
000058  6861725d          DCB      0x68,0x61,0x72,0x5d
00005c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642069          DCB      0x65,0x64,0x20,0x69
000090  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  20696e74          DCB      0x20,0x69,0x6e,0x74
0000c4  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIjE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  696e745d          DCB      0x69,0x6e,0x74,0x5d
0000a0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded10ArraySliceIaE3SetEaE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded10ArraySliceIaE3SetEaE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded10ArraySliceIaE3SetEaE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<signed char>::Set(signed char)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  536c6963          DCB      0x53,0x6c,0x69,0x63
000024  653c5479          DCB      0x65,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a536574          DCB      0x3a,0x53,0x65,0x74
000030  28547970          DCB      0x28,0x54,0x79,0x70
000034  6529205b          DCB      0x65,0x29,0x20,0x5b
000038  77697468          DCB      0x77,0x69,0x74,0x68
00003c  20547970          DCB      0x20,0x54,0x79,0x70
000040  65203d20          DCB      0x65,0x20,0x3d,0x20
000044  7369676e          DCB      0x73,0x69,0x67,0x6e
000048  65642063          DCB      0x65,0x64,0x20,0x63
00004c  6861725d          DCB      0x68,0x61,0x72,0x5d
000050  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded15ImageProcessing19CreateIntegralImageIhfEENS_6ResultERKNS0_5ArrayIT_EENS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded15ImageProcessing19CreateIntegralImageIhfEENS_6ResultERKNS0_5ArrayIT_EENS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded15ImageProcessing19CreateIntegralImageIhfEENS_6ResultERKNS0_5ArrayIT_EENS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::CreateIntegralImage<unsigned char, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a4372          DCB      0x3a,0x3a,0x43,0x72
000030  65617465          DCB      0x65,0x61,0x74,0x65
000034  496e7465          DCB      0x49,0x6e,0x74,0x65
000038  6772616c          DCB      0x67,0x72,0x61,0x6c
00003c  496d6167          DCB      0x49,0x6d,0x61,0x67
000040  6528636f          DCB      0x65,0x28,0x63,0x6f
000044  6e737420          DCB      0x6e,0x73,0x74,0x20
000048  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00004c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000050  62656464          DCB      0x62,0x65,0x64,0x64
000054  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000058  41727261          DCB      0x41,0x72,0x72,0x61
00005c  793c5479          DCB      0x79,0x3c,0x54,0x79
000060  70653e20          DCB      0x70,0x65,0x3e,0x20
000064  262c2041          DCB      0x26,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000078  72726179          DCB      0x72,0x72,0x61,0x79
00007c  3c4f7574          DCB      0x3c,0x4f,0x75,0x74
000080  54797065          DCB      0x54,0x79,0x70,0x65
000084  3e29205b          DCB      0x3e,0x29,0x20,0x5b
000088  77697468          DCB      0x77,0x69,0x74,0x68
00008c  20496e54          DCB      0x20,0x49,0x6e,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000098  7369676e          DCB      0x73,0x69,0x67,0x6e
00009c  65642063          DCB      0x65,0x64,0x20,0x63
0000a0  6861722c          DCB      0x68,0x61,0x72,0x2c
0000a4  204f7574          DCB      0x20,0x4f,0x75,0x74
0000a8  54797065          DCB      0x54,0x79,0x70,0x65
0000ac  203d2066          DCB      0x20,0x3d,0x20,0x66
0000b0  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000b4  5d00              DCB      0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\filtering.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_filtering_cpp_146d816e___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___13_filtering_cpp_146d816e___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_filtering_cpp_146d816e___Z7__REVSHi|
#line 144
|__asm___13_filtering_cpp_146d816e___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
