; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\frontcamera.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\frontcamera.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\frontcamera.crf arm_hal\hal\frontCamera.cpp]
                          THUMB

                          AREA ||i.DMA2_Stream1_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream1_IRQHandler PROC
;;;670    extern "C"
;;;671    void DMA2_Stream1_IRQHandler(void)
000000  4903              LDR      r1,|L1.16|
;;;672    {
;;;673      using namespace Anki::Cozmo::HAL;
;;;674    
;;;675      // Clear the DMA Transfer Complete flag
;;;676      //DMA_ClearFlag(DMA2_Stream1, DMA_FLAG_TCIF1);
;;;677      DMA2->LIFCR = DMA_FLAG_TCIF1 & 0x0F7D0F7D;  // Direct version of call above
000002  f44f6000          MOV      r0,#0x800
000006  6008              STR      r0,[r1,#0]
;;;678    
;;;679      m_isEOF = true;
000008  4902              LDR      r1,|L1.20|
00000a  2001              MOVS     r0,#1
00000c  7008              STRB     r0,[r1,#0]
;;;680    }
00000e  4770              BX       lr
;;;681    
                          ENDP

                  |L1.16|
                          DCD      0x40026408
                  |L1.20|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL10OV7739InitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL10OV7739InitEv PROC ; Anki::Cozmo::HAL::OV7739Init()
;;;355    
;;;356          void OV7739Init()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;357          {
;;;358            m_exposure = u32_MAX;
000004  484c              LDR      r0,|L2.312|
000006  b094              SUB      sp,sp,#0x50           ;357
000008  f04f31ff          MOV      r1,#0xffffffff
;;;359            m_enableVignettingCorrection = false;
00000c  f04f0800          MOV      r8,#0
000010  6041              STR      r1,[r0,#4]  ; _ZN4Anki5Cozmo3HAL10m_exposureE
000012  f8808001          STRB     r8,[r0,#1]
;;;360    
;;;361            // Configure the camera interface
;;;362            DCMI_InitTypeDef DCMI_InitStructure;
;;;363            DCMI_InitStructure.DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
;;;364            DCMI_InitStructure.DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
;;;365            DCMI_InitStructure.DCMI_PCKPolarity = DCMI_PCKPolarity_Rising;
000016  2020              MOVS     r0,#0x20
000018  f8ad0040          STRH     r0,[sp,#0x40]
;;;366            DCMI_InitStructure.DCMI_VSPolarity = DCMI_VSPolarity_High;
00001c  2080              MOVS     r0,#0x80
00001e  f8ad803c          STRH     r8,[sp,#0x3c]         ;363
000022  f8ad0042          STRH     r0,[sp,#0x42]
;;;367            DCMI_InitStructure.DCMI_HSPolarity = DCMI_HSPolarity_Low;
000026  f8ad8044          STRH     r8,[sp,#0x44]
00002a  f8ad803e          STRH     r8,[sp,#0x3e]         ;364
;;;368            DCMI_InitStructure.DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
00002e  f8ad8046          STRH     r8,[sp,#0x46]
;;;369            DCMI_InitStructure.DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
000032  f8ad8048          STRH     r8,[sp,#0x48]
;;;370            DCMI_Init(&DCMI_InitStructure);
000036  a80f              ADD      r0,sp,#0x3c
000038  f7fffffe          BL       DCMI_Init
;;;371    
;;;372            CamRead(0x3004);        // Get the I2C bus into a proper state
00003c  f2430004          MOV      r0,#0x3004
000040  f7fffffe          BL       _ZN4Anki5Cozmo3HAL7CamReadEi ; Anki::Cozmo::HAL::CamRead(int)
;;;373            
;;;374            UARTPutHex(CamRead(0x3015));  // XXX - For debug only
000044  f2430015          MOV      r0,#0x3015
000048  f7fffffe          BL       _ZN4Anki5Cozmo3HAL7CamReadEi ; Anki::Cozmo::HAL::CamRead(int)
00004c  b2c0              UXTB     r0,r0
00004e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10UARTPutHexEh ; Anki::Cozmo::HAL::UARTPutHex(unsigned char)
;;;375    
;;;376            // Write the configuration registers        
;;;377            unsigned short* p = m_camScript;
000052  4c3a              LDR      r4,|L2.316|
;;;378            while (*p) {
000054  8820              LDRH     r0,[r4,#0]
000056  b320              CBZ      r0,|L2.162|
                  |L2.88|
;;;379              CamWrite(p[0], p[1]);
000058  b285              UXTH     r5,r0
00005a  78a6              LDRB     r6,[r4,#2]
00005c  2778              MOVS     r7,#0x78
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
00006a  4638              MOV      r0,r7
00006c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
000070  0a28              LSRS     r0,r5,#8
000072  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
000076  b2e8              UXTB     r0,r5
000078  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
00007c  b2f0              UXTB     r0,r6
00007e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
000082  2000              MOVS     r0,#0
000084  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
000088  2001              MOVS     r0,#1
00008a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
00008e  2001              MOVS     r0,#1
000090  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
;;;380              p += 2;
000094  1d24              ADDS     r4,r4,#4
;;;381              // This delay helps miss a race condition in Omnivision-supplied configuration scripts
;;;382              // Omnivision is aware of this problem but could not suggest a workaround
;;;383              MicroWait(I2C_WAIT*12);
000096  2060              MOVS     r0,#0x60
000098  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
00009c  8820              LDRH     r0,[r4,#0]            ;378
00009e  2800              CMP      r0,#0                 ;378
0000a0  d1da              BNE      |L2.88|
                  |L2.162|
;;;384            }
;;;385    
;;;386            // Configure DMA2_Stream1 channel 1 for DMA from DCMI->DR to RAM
;;;387            DMA_DeInit(DMA2_Stream1);
0000a2  4c27              LDR      r4,|L2.320|
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       DMA_DeInit
;;;388            DMA_InitTypeDef DMA_InitStructure;
;;;389            DMA_InitStructure.DMA_Channel = DMA_Channel_1;
0000aa  f04f7000          MOV      r0,#0x2000000
;;;390            DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&DCMI->DR;
0000ae  9000              STR      r0,[sp,#0]
0000b0  4824              LDR      r0,|L2.324|
;;;391            DMA_InitStructure.DMA_Memory0BaseAddr = (u32)m_buffer;
0000b2  9001              STR      r0,[sp,#4]
0000b4  4824              LDR      r0,|L2.328|
0000b6  e9cd0802          STRD     r0,r8,[sp,#8]
;;;392            DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
;;;393            DMA_InitStructure.DMA_BufferSize = BUFFER_SIZE / 4;  // numBytes / sizeof(word)
0000ba  f44f4016          MOV      r0,#0x9600
0000be  e9cd0804          STRD     r0,r8,[sp,#0x10]
;;;394            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;395            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
0000c2  1520              ASRS     r0,r4,#20
;;;396            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
0000c4  9006              STR      r0,[sp,#0x18]
0000c6  0080              LSLS     r0,r0,#2
;;;397            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
0000c8  9007              STR      r0,[sp,#0x1c]
0000ca  0080              LSLS     r0,r0,#2
;;;398            DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
0000cc  9008              STR      r0,[sp,#0x20]
0000ce  1180              ASRS     r0,r0,#6
;;;399            DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
0000d0  9009              STR      r0,[sp,#0x24]
0000d2  f44f3040          MOV      r0,#0x30000
;;;400            DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
0000d6  900a              STR      r0,[sp,#0x28]
0000d8  2004              MOVS     r0,#4
;;;401            DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
0000da  900b              STR      r0,[sp,#0x2c]
0000dc  2003              MOVS     r0,#3
0000de  e9cd080c          STRD     r0,r8,[sp,#0x30]
;;;402            DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
;;;403            DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
;;;404            DMA_Init(DMA2_Stream1, &DMA_InitStructure);
0000e2  4669              MOV      r1,sp
0000e4  4620              MOV      r0,r4
0000e6  f8cd8038          STR      r8,[sp,#0x38]
0000ea  f7fffffe          BL       DMA_Init
;;;405    
;;;406            // Enable the DMA interrupt for transfer complete to give enough time
;;;407            // between frames to do some extra work
;;;408            DMA_ITConfig(DMA2_Stream1, DMA_IT_TC, ENABLE);
0000ee  2201              MOVS     r2,#1
0000f0  2110              MOVS     r1,#0x10
0000f2  4620              MOV      r0,r4
0000f4  f7fffffe          BL       DMA_ITConfig
;;;409    
;;;410            NVIC_InitTypeDef NVIC_InitStructure;
;;;411            NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream1_IRQn;
0000f8  2039              MOVS     r0,#0x39
0000fa  f88d004c          STRB     r0,[sp,#0x4c]
;;;412            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
0000fe  2101              MOVS     r1,#1
000100  f88d104d          STRB     r1,[sp,#0x4d]
;;;413            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000104  f88d104e          STRB     r1,[sp,#0x4e]
;;;414            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000108  f88d104f          STRB     r1,[sp,#0x4f]
;;;415            NVIC_Init(&NVIC_InitStructure);
00010c  a813              ADD      r0,sp,#0x4c
00010e  f7fffffe          BL       NVIC_Init
;;;416    
;;;417            // Enable DMA
;;;418            DMA_Cmd(DMA2_Stream1, ENABLE);
000112  2101              MOVS     r1,#1
000114  4620              MOV      r0,r4
000116  f7fffffe          BL       DMA_Cmd
;;;419    
;;;420            // Enable DCMI
;;;421            DCMI_Cmd(ENABLE);
00011a  2001              MOVS     r0,#1
00011c  f7fffffe          BL       DCMI_Cmd
;;;422    
;;;423            // Enable the DCMI peripheral to capture frames from vsync
;;;424            DCMI_CaptureCmd(ENABLE);
000120  2001              MOVS     r0,#1
000122  f7fffffe          BL       DCMI_CaptureCmd
;;;425            
;;;426            CamWrite(0x3008,0x02);  // Exit reset
000126  2102              MOVS     r1,#2
000128  f2430008          MOV      r0,#0x3008
00012c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8CamWriteEii ; Anki::Cozmo::HAL::CamWrite(int, int)
;;;427            
;;;428            // // Let the I2C lines float after config
;;;429            //PIN_IN(GPIO_SDA, SOURCE_SDA);
;;;430            //PIN_IN(GPIO_SCL, SOURCE_SCL);
;;;431          }
000130  b014              ADD      sp,sp,#0x50
000132  e8bd81f0          POP      {r4-r8,pc}
;;;432    
                          ENDP

000136  0000              DCW      0x0000
                  |L2.312|
                          DCD      ||.data||
                  |L2.316|
                          DCD      ||.data||+0xc
                  |L2.320|
                          DCD      0x40026428
                  |L2.324|
                          DCD      0x50050028
                  |L2.328|
                          DCD      OFFCHIP

                          AREA ||i._ZN4Anki5Cozmo3HAL14CameraGetFrameEPhNS_6Vision16CameraResolutionEb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL14CameraGetFrameEPhNS_6Vision16CameraResolutionEb PROC ; Anki::Cozmo::HAL::CameraGetFrame(unsigned char*, Anki::Vision::CameraResolution, bool)
;;;583    
;;;584          void CameraGetFrame(u8* frame, Vision::CameraResolution res, bool enableLight)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;585          {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;586            Anki::Embedded::BeginBenchmark("CameraGetFrame");
000008  a04a              ADR      r0,|L3.308|
00000a  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;587    
;;;588            Anki::Embedded::BeginBenchmark("CameraGetFrame_wait");
00000e  a04d              ADR      r0,|L3.324|
000010  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;589    
;;;590            m_isEOF = false;
000014  4850              LDR      r0,|L3.344|
000016  2100              MOVS     r1,#0
000018  7001              STRB     r1,[r0,#0]
                  |L3.26|
;;;591    
;;;592            // Wait until the frame has completed (based on DMA_FLAG_TCIF1)
;;;593            while (!m_isEOF)
00001a  7802              LDRB     r2,[r0,#0]  ; _ZN4Anki5Cozmo3HAL7m_isEOFE
00001c  2a00              CMP      r2,#0
00001e  d0fc              BEQ      |L3.26|
;;;594            {  
;;;595            }
;;;596    
;;;597            Anki::Embedded::EndBenchmark("CameraGetFrame_wait");
000020  a048              ADR      r0,|L3.324|
000022  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
;;;598    
;;;599            Anki::Embedded::BeginBenchmark("CameraGetFrame_convert");
000026  a04d              ADR      r0,|L3.348|
000028  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;600    
;;;601            // TODO: Change this to DMA mem-to-mem when we have a different camera
;;;602            // and we support resolution changes in the actual hardware
;;;603    
;;;604            // Copy the Y-channel into frame
;;;605    
;;;606            u32 xRes = Vision::CameraResInfo[res].width;
00002c  4851              LDR      r0,|L3.372|
;;;607            u32 yRes = Vision::CameraResInfo[res].height;
;;;608    
;;;609            u32 xSkip = 320 / xRes;
;;;610            u32 ySkip = 240 / yRes;
00002e  22f0              MOVS     r2,#0xf0
000030  f8308025          LDRH     r8,[r0,r5,LSL #2]     ;606
000034  eb000085          ADD      r0,r0,r5,LSL #2       ;607
000038  8841              LDRH     r1,[r0,#2]            ;607
00003a  f44f70a0          MOV      r0,#0x140             ;609
00003e  fbb0f0f8          UDIV     r0,r0,r8              ;609
000042  fbb2f9f1          UDIV     r9,r2,r1
;;;611    
;;;612            if(xSkip == 1 && ySkip == 1) {
000046  2801              CMP      r0,#1
000048  bf02              ITTT     EQ
00004a  f1b90f01          CMPEQ    r9,#1
;;;613              // Fastest (64 -> 32) (two loads and one store per 4 output pixels)
;;;614              const u32 numPixels4 = (320*240) >> 2;
;;;615    
;;;616              const u64 * restrict pMBufferU64 = reinterpret_cast<u64*>(m_buffer);
00004e  f8df9128          LDREQ    r9,|L3.376|
;;;617              u32 * restrict pFrameU32 = reinterpret_cast<u32*>(frame);
;;;618    
;;;619              for(u32 iPixel=0; iPixel<numPixels4; iPixel+=4) {
000052  2000              MOVEQ    r0,#0
000054  d022              BEQ      |L3.156|
;;;620                const u64 in01 = pMBufferU64[iPixel];
;;;621                const u64 in23 = pMBufferU64[iPixel+1];
;;;622                const u64 in45 = pMBufferU64[iPixel+2];
;;;623                const u64 in67 = pMBufferU64[iPixel+3];
;;;624    
;;;625                const u32 out01 = (in01 & 0xFF) | ((in01 & 0xFF0000) >> 8) | ((in01 & 0xFF00000000)>>16) | ((in01 & 0xFF000000000000) >> 24);
;;;626                const u32 out23 = (in23 & 0xFF) | ((in23 & 0xFF0000) >> 8) | ((in23 & 0xFF00000000)>>16) | ((in23 & 0xFF000000000000) >> 24);
;;;627                const u32 out45 = (in45 & 0xFF) | ((in45 & 0xFF0000) >> 8) | ((in45 & 0xFF00000000)>>16) | ((in45 & 0xFF000000000000) >> 24);
;;;628                const u32 out67 = (in67 & 0xFF) | ((in67 & 0xFF0000) >> 8) | ((in67 & 0xFF00000000)>>16) | ((in67 & 0xFF000000000000) >> 24);
;;;629    
;;;630                pFrameU32[iPixel] = out01;
;;;631                pFrameU32[iPixel+1] = out23;
;;;632                pFrameU32[iPixel+2] = out45;
;;;633                pFrameU32[iPixel+3] = out67;
;;;634              }
;;;635            } else {
;;;636              u32 dataY = 0;
000056  2600              MOVS     r6,#0
000058  f8dfa11c          LDR      r10,|L3.376|
;;;637              for (u32 y = 0; y < 240; y += ySkip, dataY++)
00005c  4633              MOV      r3,r6
                  |L3.94|
;;;638              {
;;;639                u32 dataX = 0;
00005e  2200              MOVS     r2,#0
;;;640                for (u32 x = 0; x < 320; x += xSkip, dataX++)
000060  4611              MOV      r1,r2
;;;641                {
;;;642                  frame[dataY * xRes + dataX] = m_buffer[y * 320 * 2 + x * 2];
000062  eb030783          ADD      r7,r3,r3,LSL #2
000066  fb06fc08          MUL      r12,r6,r8
                  |L3.106|
00006a  eb011587          ADD      r5,r1,r7,LSL #6
00006e  eb040b02          ADD      r11,r4,r2
000072  f81a5015          LDRB     r5,[r10,r5,LSL #1]
000076  4401              ADD      r1,r1,r0              ;640
000078  1c52              ADDS     r2,r2,#1              ;640
00007a  f80c500b          STRB     r5,[r12,r11]
00007e  f5b17fa0          CMP      r1,#0x140             ;640
000082  d3f2              BCC      |L3.106|
000084  444b              ADD      r3,r3,r9              ;637
000086  1c76              ADDS     r6,r6,#1              ;637
000088  2bf0              CMP      r3,#0xf0              ;637
00008a  d3e8              BCC      |L3.94|
                  |L3.140|
;;;643                }
;;;644              }
;;;645            }
;;;646    
;;;647            Anki::Embedded::EndBenchmark("CameraGetFrame_convert");
00008c  a033              ADR      r0,|L3.348|
00008e  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
;;;648    
;;;649            Anki::Embedded::EndBenchmark("CameraGetFrame");
000092  e8bd5ff0          POP      {r4-r12,lr}
000096  a027              ADR      r0,|L3.308|
000098  f7ffbffe          B.W      _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
                  |L3.156|
00009c  eb0901c0          ADD      r1,r9,r0,LSL #3       ;620
0000a0  e9d12304          LDRD     r2,r3,[r1,#0x10]      ;620
0000a4  e9d16800          LDRD     r6,r8,[r1,#0]         ;620
0000a8  f0060aff          AND      r10,r6,#0xff          ;625
0000ac  e9d1c502          LDRD     r12,r5,[r1,#8]        ;620
0000b0  f406067f          AND      r6,r6,#0xff0000       ;625
0000b4  ea4a2616          ORR      r6,r10,r6,LSR #8      ;625
0000b8  f0080aff          AND      r10,r8,#0xff          ;625
0000bc  ea46460a          ORR      r6,r6,r10,LSL #16     ;625
0000c0  f408087f          AND      r8,r8,#0xff0000       ;625
0000c4  ea462608          ORR      r6,r6,r8,LSL #8       ;625
0000c8  f00c08ff          AND      r8,r12,#0xff          ;626
0000cc  f40c0c7f          AND      r12,r12,#0xff0000     ;626
0000d0  ea482c1c          ORR      r12,r8,r12,LSR #8     ;626
0000d4  f00508ff          AND      r8,r5,#0xff           ;626
0000d8  ea4c4c08          ORR      r12,r12,r8,LSL #16    ;626
0000dc  f405057f          AND      r5,r5,#0xff0000       ;626
0000e0  ea4c2c05          ORR      r12,r12,r5,LSL #8     ;626
0000e4  b2d5              UXTB     r5,r2                 ;627
0000e6  f402027f          AND      r2,r2,#0xff0000       ;627
0000ea  ea452212          ORR      r2,r5,r2,LSR #8       ;627
0000ee  e9d17106          LDRD     r7,r1,[r1,#0x18]      ;620
0000f2  b2dd              UXTB     r5,r3                 ;627
0000f4  ea424205          ORR      r2,r2,r5,LSL #16      ;627
0000f8  f403037f          AND      r3,r3,#0xff0000       ;627
0000fc  ea422203          ORR      r2,r2,r3,LSL #8       ;627
000100  b2fd              UXTB     r5,r7                 ;628
000102  f407037f          AND      r3,r7,#0xff0000       ;628
000106  ea452313          ORR      r3,r5,r3,LSR #8       ;628
00010a  b2cd              UXTB     r5,r1                 ;628
00010c  ea434305          ORR      r3,r3,r5,LSL #16      ;628
000110  f401017f          AND      r1,r1,#0xff0000       ;628
000114  ea432301          ORR      r3,r3,r1,LSL #8       ;628
000118  f8446020          STR      r6,[r4,r0,LSL #2]     ;630
00011c  eb040180          ADD      r1,r4,r0,LSL #2       ;631
000120  1d00              ADDS     r0,r0,#4              ;619
000122  f8c1c004          STR      r12,[r1,#4]           ;631
000126  e9c12302          STRD     r2,r3,[r1,#8]         ;631
00012a  f5b04f96          CMP      r0,#0x4b00            ;619
00012e  d3b5              BCC      |L3.156|
000130  e7ac              B        |L3.140|
;;;650          }
;;;651    
                          ENDP

000132  0000              DCW      0x0000
                  |L3.308|
000134  43616d65          DCB      "CameraGetFrame",0
000138  72614765
00013c  74467261
000140  6d6500  
000143  00                DCB      0
                  |L3.324|
000144  43616d65          DCB      "CameraGetFrame_wait",0
000148  72614765
00014c  74467261
000150  6d655f77
000154  61697400
                  |L3.344|
                          DCD      ||.data||
                  |L3.348|
00015c  43616d65          DCB      "CameraGetFrame_convert",0
000160  72614765
000164  74467261
000168  6d655f63
00016c  6f6e7665
000170  727400  
000173  00                DCB      0
                  |L3.372|
                          DCD      ||.constdata||
                  |L3.376|
                          DCD      OFFCHIP

                          AREA ||i._ZN4Anki5Cozmo3HAL14GetHeadCamInfoEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL14GetHeadCamInfoEv PROC ; Anki::Cozmo::HAL::GetHeadCamInfo()
;;;651    
;;;652          const CameraInfo* GetHeadCamInfo(void)
000000  4800              LDR      r0,|L4.4|
;;;653          {
;;;654            static CameraInfo s_headCamInfo = {
;;;655              HEAD_CAM_CALIB_FOCAL_LENGTH_X,
;;;656              HEAD_CAM_CALIB_FOCAL_LENGTH_Y,
;;;657              HEAD_CAM_CALIB_CENTER_X,
;;;658              HEAD_CAM_CALIB_CENTER_Y,
;;;659              0.f,
;;;660              HEAD_CAM_CALIB_HEIGHT,
;;;661              HEAD_CAM_CALIB_WIDTH
;;;662            };
;;;663    
;;;664            return &s_headCamInfo;
;;;665          }
000002  4770              BX       lr
;;;666        }
                          ENDP

                  |L4.4|
                          DCD      ||.data||+0x178

                          AREA ||i._ZN4Anki5Cozmo3HAL15FrontCameraInitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL15FrontCameraInitEv PROC ; Anki::Cozmo::HAL::FrontCameraInit()
;;;432    
;;;433          void FrontCameraInit()
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;434          {
;;;435            // Clock configuration
;;;436            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  b08b              SUB      sp,sp,#0x2c           ;434
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;437            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
00000e  2101              MOVS     r1,#1
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;438            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
000016  2101              MOVS     r1,#1
000018  2040              MOVS     r0,#0x40
00001a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;439            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
00001e  2101              MOVS     r1,#1
000020  2010              MOVS     r0,#0x10
000022  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;440            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
000026  2101              MOVS     r1,#1
000028  0208              LSLS     r0,r1,#8
00002a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;441    
;;;442            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
00002e  2101              MOVS     r1,#1
000030  0588              LSLS     r0,r1,#22
000032  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;443            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_DCMI, ENABLE);
000036  2101              MOVS     r1,#1
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       RCC_AHB2PeriphClockCmd
;;;444            RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
00003e  2101              MOVS     r1,#1
000040  0408              LSLS     r0,r1,#16
000042  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;445            
;;;446            // TODO: Check that the GPIOs are okay
;;;447            //for (u8 i = 1; i; i <<= 1)
;;;448            //  printf("\r\nCam dbus: set %x, got %x", i, CamReadDB(i));        
;;;449            
;;;450            // Configure XCLK for 12.85 MHz (evenly divisible by 180 MHz)
;;;451            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;452            TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;453    
;;;454            TIM_TimeBaseStructure.TIM_Prescaler = 0;
000046  2400              MOVS     r4,#0
000048  f8ad401c          STRH     r4,[sp,#0x1c]
;;;455            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
00004c  f8ad401e          STRH     r4,[sp,#0x1e]
;;;456            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;457            TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
;;;458    
;;;459            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
000050  2060              MOVS     r0,#0x60
000052  f8ad0008          STRH     r0,[sp,#8]
;;;460            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
000056  2601              MOVS     r6,#1
;;;461            TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
;;;462            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
;;;463            TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
;;;464            TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
000058  0230              LSLS     r0,r6,#8
00005a  f8ad0018          STRH     r0,[sp,#0x18]
00005e  f04f0804          MOV      r8,#4                 ;461
000062  f8ad4024          STRH     r4,[sp,#0x24]         ;456
000066  f8ad800c          STRH     r8,[sp,#0xc]          ;461
00006a  2702              MOVS     r7,#2                 ;462
;;;465            TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
;;;466    
;;;467            TIM_TimeBaseStructure.TIM_Period = 15;  // clockFrequency = 180MHz / (period+1)
00006c  200f              MOVS     r0,#0xf
;;;468            TIM_OCInitStructure.TIM_Pulse = 8;     // pulse = (period+1) / 2
;;;469    
;;;470            TIM_TimeBaseInit(TIM9, &TIM_TimeBaseStructure);
00006e  4d60              LDR      r5,|L5.496|
000070  f88d4026          STRB     r4,[sp,#0x26]         ;457
000074  f8ad7014          STRH     r7,[sp,#0x14]         ;462
000078  f04f0908          MOV      r9,#8                 ;468
00007c  9008              STR      r0,[sp,#0x20]
00007e  f8ad600a          STRH     r6,[sp,#0xa]          ;460
000082  f8ad4016          STRH     r4,[sp,#0x16]         ;463
000086  f8ad401a          STRH     r4,[sp,#0x1a]         ;465
00008a  a907              ADD      r1,sp,#0x1c
00008c  f8cd9010          STR      r9,[sp,#0x10]
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       TIM_TimeBaseInit
;;;471            TIM_OC2Init(TIM9, &TIM_OCInitStructure);
000096  a902              ADD      r1,sp,#8
000098  4628              MOV      r0,r5
00009a  f7fffffe          BL       TIM_OC2Init
;;;472            TIM_Cmd(TIM9, ENABLE);
00009e  2101              MOVS     r1,#1
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       TIM_Cmd
;;;473            TIM_CtrlPWMOutputs(TIM9, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  4628              MOV      r0,r5
0000aa  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;474    
;;;475            // Configure the pins for DCMI in AF mode
;;;476            GPIO_PinAFConfig(GPIO_D0, SOURCE_D0, GPIO_AF_DCMI);
0000ae  f8dfa144          LDR      r10,|L5.500|
0000b2  220d              MOVS     r2,#0xd
0000b4  2109              MOVS     r1,#9
0000b6  4650              MOV      r0,r10
0000b8  f7fffffe          BL       GPIO_PinAFConfig
;;;477            GPIO_PinAFConfig(GPIO_D1, SOURCE_D1, GPIO_AF_DCMI);
0000bc  220d              MOVS     r2,#0xd
0000be  210a              MOVS     r1,#0xa
0000c0  4650              MOV      r0,r10
0000c2  f7fffffe          BL       GPIO_PinAFConfig
;;;478            GPIO_PinAFConfig(GPIO_D2, SOURCE_D2, GPIO_AF_DCMI);
0000c6  f8dfb130          LDR      r11,|L5.504|
0000ca  220d              MOVS     r2,#0xd
0000cc  210a              MOVS     r1,#0xa
0000ce  4658              MOV      r0,r11
0000d0  f7fffffe          BL       GPIO_PinAFConfig
;;;479            GPIO_PinAFConfig(GPIO_D3, SOURCE_D3, GPIO_AF_DCMI);
0000d4  220d              MOVS     r2,#0xd
0000d6  210b              MOVS     r1,#0xb
0000d8  4658              MOV      r0,r11
0000da  f7fffffe          BL       GPIO_PinAFConfig
;;;480            GPIO_PinAFConfig(GPIO_D4, SOURCE_D4, GPIO_AF_DCMI);
0000de  4d47              LDR      r5,|L5.508|
0000e0  220d              MOVS     r2,#0xd
0000e2  2104              MOVS     r1,#4
0000e4  4628              MOV      r0,r5
0000e6  f7fffffe          BL       GPIO_PinAFConfig
;;;481            GPIO_PinAFConfig(GPIO_D5, SOURCE_D5, GPIO_AF_DCMI);
0000ea  220d              MOVS     r2,#0xd
0000ec  2104              MOVS     r1,#4
0000ee  4844              LDR      r0,|L5.512|
0000f0  f7fffffe          BL       GPIO_PinAFConfig
;;;482            GPIO_PinAFConfig(GPIO_D6, SOURCE_D6, GPIO_AF_DCMI);
0000f4  220d              MOVS     r2,#0xd
0000f6  2106              MOVS     r1,#6
0000f8  4841              LDR      r0,|L5.512|
0000fa  f7fffffe          BL       GPIO_PinAFConfig
;;;483            GPIO_PinAFConfig(GPIO_D7, SOURCE_D7, GPIO_AF_DCMI);
0000fe  220d              MOVS     r2,#0xd
000100  2107              MOVS     r1,#7
000102  483f              LDR      r0,|L5.512|
000104  f7fffffe          BL       GPIO_PinAFConfig
;;;484            GPIO_PinAFConfig(GPIO_VSYNC, SOURCE_VSYNC, GPIO_AF_DCMI);
000108  220d              MOVS     r2,#0xd
00010a  2105              MOVS     r1,#5
00010c  483c              LDR      r0,|L5.512|
00010e  f7fffffe          BL       GPIO_PinAFConfig
;;;485            GPIO_PinAFConfig(GPIO_HSYNC, SOURCE_HSYNC, GPIO_AF_DCMI);
000112  220d              MOVS     r2,#0xd
000114  2104              MOVS     r1,#4
000116  4650              MOV      r0,r10
000118  f7fffffe          BL       GPIO_PinAFConfig
;;;486            GPIO_PinAFConfig(GPIO_PCLK, SOURCE_PCLK, GPIO_AF_DCMI);
00011c  220d              MOVS     r2,#0xd
00011e  2106              MOVS     r1,#6
000120  4650              MOV      r0,r10
000122  f7fffffe          BL       GPIO_PinAFConfig
;;;487            GPIO_PinAFConfig(GPIO_XCLK, SOURCE_XCLK, GPIO_AF_TIM9);
000126  2203              MOVS     r2,#3
000128  4611              MOV      r1,r2
00012a  4650              MOV      r0,r10
00012c  f7fffffe          BL       GPIO_PinAFConfig
;;;488    
;;;489            // Initialize the camera pins
;;;490            GPIO_InitTypeDef GPIO_InitStructure;
;;;491            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000130  f88d7004          STRB     r7,[sp,#4]
;;;492            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000134  2003              MOVS     r0,#3
000136  f88d0005          STRB     r0,[sp,#5]
;;;493            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;494            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;495    
;;;496            GPIO_InitStructure.GPIO_Pin = PIN_D0 | PIN_D1 | PIN_HSYNC | PIN_PCLK | PIN_XCLK;
00013a  f44f60cb          MOV      r0,#0x658
00013e  f88d4006          STRB     r4,[sp,#6]            ;493
;;;497            GPIO_Init(GPIOA, &GPIO_InitStructure);
000142  9000              STR      r0,[sp,#0]
000144  f88d4007          STRB     r4,[sp,#7]            ;494
000148  4669              MOV      r1,sp
00014a  4650              MOV      r0,r10
00014c  f7fffffe          BL       GPIO_Init
;;;498    
;;;499            GPIO_InitStructure.GPIO_Pin = PIN_D2 | PIN_D3;
000150  f44f6040          MOV      r0,#0xc00
;;;500            GPIO_Init(GPIOG, &GPIO_InitStructure);
000154  9000              STR      r0,[sp,#0]
000156  4669              MOV      r1,sp
000158  4658              MOV      r0,r11
00015a  f7fffffe          BL       GPIO_Init
;;;501    
;;;502            GPIO_InitStructure.GPIO_Pin = PIN_D4;
00015e  2010              MOVS     r0,#0x10
;;;503            GPIO_Init(GPIOE, &GPIO_InitStructure);
000160  9000              STR      r0,[sp,#0]
000162  4669              MOV      r1,sp
000164  4628              MOV      r0,r5
000166  f7fffffe          BL       GPIO_Init
;;;504    
;;;505            GPIO_InitStructure.GPIO_Pin = PIN_D5 | PIN_D6 | PIN_D7 | PIN_VSYNC;
00016a  20f0              MOVS     r0,#0xf0
;;;506            GPIO_Init(GPIOI, &GPIO_InitStructure);
00016c  9000              STR      r0,[sp,#0]
00016e  4669              MOV      r1,sp
000170  4823              LDR      r0,|L5.512|
000172  f7fffffe          BL       GPIO_Init
;;;507    
;;;508            // PWDN and RESET_N are normal GPIO
;;;509            GPIO_SET(GPIO_PWDN, PIN_PWDN);
000176  f8a58018          STRH     r8,[r5,#0x18]
;;;510            GPIO_RESET(GPIO_RESET_N, PIN_RESET_N);
00017a  2040              MOVS     r0,#0x40
00017c  8368              STRH     r0,[r5,#0x1a]
;;;511            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;512            GPIO_InitStructure.GPIO_Pin = PIN_PWDN | PIN_RESET_N;
00017e  2044              MOVS     r0,#0x44
;;;513            GPIO_Init(GPIOE, &GPIO_InitStructure);
000180  9000              STR      r0,[sp,#0]
000182  f88d6004          STRB     r6,[sp,#4]            ;511
000186  4669              MOV      r1,sp
000188  4628              MOV      r0,r5
00018a  f7fffffe          BL       GPIO_Init
;;;514    
;;;515            GPIO_RESET(GPIO_FSIN, PIN_FSIN);
00018e  f8aa701a          STRH     r7,[r10,#0x1a]
;;;516            GPIO_InitStructure.GPIO_Pin = PIN_FSIN;
;;;517            GPIO_Init(GPIO_FSIN, &GPIO_InitStructure);
000192  4669              MOV      r1,sp
000194  4650              MOV      r0,r10
000196  9700              STR      r7,[sp,#0]
000198  f7fffffe          BL       GPIO_Init
;;;518    
;;;519            // Initialize the I2C pins
;;;520            GPIO_SET(GPIO_SCL, PIN_SCL);
00019c  f8a59018          STRH     r9,[r5,#0x18]
;;;521            GPIO_SET(GPIO_SDA, PIN_SDA);
0001a0  2020              MOVS     r0,#0x20
0001a2  8328              STRH     r0,[r5,#0x18]
;;;522    
;;;523            GPIO_InitStructure.GPIO_Pin = PIN_SCL | PIN_SDA;
;;;524            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
0001a4  f88d6004          STRB     r6,[sp,#4]
0001a8  2028              MOVS     r0,#0x28              ;523
;;;525            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
0001aa  f88d4005          STRB     r4,[sp,#5]
0001ae  9000              STR      r0,[sp,#0]            ;524
;;;526            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
0001b0  f88d6006          STRB     r6,[sp,#6]
;;;527            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
0001b4  f88d4007          STRB     r4,[sp,#7]
;;;528            GPIO_Init(GPIOE, &GPIO_InitStructure);       
0001b8  4669              MOV      r1,sp
0001ba  4628              MOV      r0,r5
0001bc  f7fffffe          BL       GPIO_Init
;;;529    
;;;530            // Reset the camera
;;;531            MicroWait(50000);
0001c0  f24c3050          MOV      r0,#0xc350
0001c4  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
;;;532            PIN_IN(GPIO_PWDN, SOURCE_PWDN);
0001c8  6828              LDR      r0,[r5,#0]
0001ca  f0200030          BIC      r0,r0,#0x30
0001ce  6028              STR      r0,[r5,#0]
;;;533            MicroWait(50000);
0001d0  f24c3050          MOV      r0,#0xc350
0001d4  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
;;;534            PIN_IN(GPIO_RESET_N, SOURCE_RESET_N);
0001d8  6828              LDR      r0,[r5,#0]
0001da  f4205040          BIC      r0,r0,#0x3000
0001de  6028              STR      r0,[r5,#0]
;;;535            MicroWait(100000);  // XXX-WHY?
0001e0  4808              LDR      r0,|L5.516|
0001e2  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
;;;536    
;;;537            OV7739Init();
0001e6  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10OV7739InitEv ; Anki::Cozmo::HAL::OV7739Init()
;;;538          }
0001ea  b00b              ADD      sp,sp,#0x2c
0001ec  e8bd8ff0          POP      {r4-r11,pc}
;;;539    
                          ENDP

                  |L5.496|
                          DCD      0x40014000
                  |L5.500|
                          DCD      0x40020000
                  |L5.504|
                          DCD      0x40021800
                  |L5.508|
                          DCD      0x40021000
                  |L5.512|
                          DCD      0x40022000
                  |L5.516|
                          DCD      0x000186a0

                          AREA ||i._ZN4Anki5Cozmo3HAL19CameraSetParametersEfb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL19CameraSetParametersEfb PROC ; Anki::Cozmo::HAL::CameraSetParameters(float, bool)
;;;539    
;;;540          void CameraSetParameters(f32 exposure, bool enableVignettingCorrection)
000000  ed9f1a19          VLDR     s2,|L6.104|
;;;541          {
;;;542            //TODO: vignetting correction
;;;543            
;;;544            const f32 maxExposure = 0xf00; // Determined empirically
;;;545            
;;;546            f32 correctedExposure = exposure;
;;;547            
;;;548            if(exposure < 0.0f)
000004  eeb50ac0          VCMPE.F32 s0,#0.0
000008  eef00a40          VMOV.F32 s1,s0                 ;546
00000c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000010  b510              PUSH     {r4,lr}               ;541
;;;549            {
;;;550              correctedExposure = 0;
000012  bf38              IT       CC
000014  eddf0a15          VLDRCC   s1,|L6.108|
000018  d306              BCC      |L6.40|
;;;551            } else if(exposure > 1.0f)
00001a  ee100a10          VMOV     r0,s0
00001e  f1b05f7e          CMP      r0,#0x3f800000
;;;552            {
;;;553              correctedExposure = 1.0f;
000022  bfc8              IT       GT
000024  eddf0a12          VLDRGT   s1,|L6.112|
                  |L6.40|
;;;554            } 
;;;555            
;;;556            const u32 exposureU32 = (u32) floorf(correctedExposure * maxExposure + 0.5f);
000028  eeb60a00          VMOV.F32 s0,#0.50000000
00002c  ee000a81          VMLA.F32 s0,s1,s2
000030  f7fffffe          BL       __hardfp_floorf
000034  eebc0ac0          VCVT.U32.F32 s0,s0
;;;557            
;;;558            if (m_exposure != exposureU32)
000038  480e              LDR      r0,|L6.116|
00003a  ee104a10          VMOV     r4,s0                 ;556
00003e  6841              LDR      r1,[r0,#4]  ; _ZN4Anki5Cozmo3HAL10m_exposureE
000040  42a1              CMP      r1,r4
;;;559            {
;;;560              m_exposure = exposureU32;
;;;561              
;;;562              CamWrite(0x3501, (exposureU32 >> 8) & 0xFF);
;;;563              MicroWait(100);
;;;564              CamWrite(0x3502, exposureU32 & 0xFF);
;;;565            }
;;;566    
;;;567            if(enableVignettingCorrection) {
;;;568              AnkiAssert(false);
;;;569            }
;;;570            
;;;571            /*
;;;572            if(m_enableVignettingCorrection != enableVignettingCorrection)
;;;573            {
;;;574              m_enableVignettingCorrection = enableVignettingCorrection;
;;;575    
;;;576              const u8 newValue = enableVignettingCorrection ? 0x01 : 0x00;
;;;577    
;;;578              MicroWait(100);
;;;579              // XXX-NDM was OV7739 CamWrite(0x46, newValue);
;;;580            }
;;;581            */
;;;582          }
000042  bf08              IT       EQ
000044  bd10              POPEQ    {r4,pc}
000046  f3c42107          UBFX     r1,r4,#8,#8           ;562
00004a  6044              STR      r4,[r0,#4]            ;562  ; _ZN4Anki5Cozmo3HAL10m_exposureE
00004c  f2435001          MOV      r0,#0x3501            ;562
000050  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8CamWriteEii ; Anki::Cozmo::HAL::CamWrite(int, int)
000054  2064              MOVS     r0,#0x64              ;563
000056  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
00005a  b2e1              UXTB     r1,r4                 ;564
00005c  e8bd4010          POP      {r4,lr}               ;564
000060  f2435002          MOV      r0,#0x3502            ;564
000064  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL8CamWriteEii ; Anki::Cozmo::HAL::CamWrite(int, int)
;;;583    
                          ENDP

                  |L6.104|
000068  45700000          DCFS     0x45700000 ; 3840
                  |L6.108|
00006c  00000000          DCFS     0x00000000 ; 0
                  |L6.112|
000070  3f800000          DCFS     0x3f800000 ; 1
                  |L6.116|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL5WriteEh||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL5WriteEh PROC ; Anki::Cozmo::HAL::Write(unsigned char)
;;;262          // Write byte and return true for Ack or false for Nak
;;;263          static u8 Write(u8 b)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;264          {
;;;265            u8 m;
;;;266            // Write byte
;;;267            for (m = 0x80; m != 0; m >>= 1)
000004  2480              MOVS     r4,#0x80
000006  4d17              LDR      r5,|L7.100|
000008  4607              MOV      r7,r0                 ;264
00000a  2620              MOVS     r6,#0x20              ;264
00000c  f04f0808          MOV      r8,#8                 ;264
                  |L7.16|
;;;268            {
;;;269              DriveSDA(m & b);
000010  423c              TST      r4,r7
000012  bf14              ITE      NE
000014  832e              STRHNE   r6,[r5,#0x18]
000016  836e              STRHEQ   r6,[r5,#0x1a]
000018  2008              MOVS     r0,#8
00001a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
00001e  f8a58018          STRH     r8,[r5,#0x18]
000022  2008              MOVS     r0,#8
000024  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
;;;270    
;;;271              DriveSCL(1);
;;;272              if (m == 1)
000028  2c01              CMP      r4,#1
00002a  d104              BNE      |L7.54|
00002c  832e              STRH     r6,[r5,#0x18]
00002e  2008              MOVS     r0,#8
000030  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
000034  6928              LDR      r0,[r5,#0x10]
                  |L7.54|
000036  f8a5801a          STRH     r8,[r5,#0x1a]
00003a  2008              MOVS     r0,#8
00003c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
000040  0864              LSRS     r4,r4,#1              ;267
000042  d1e5              BNE      |L7.16|
;;;273                ReadSDA();  // Let SDA fall prior to last bit
;;;274              DriveSCL(0);
;;;275            }
;;;276    
;;;277            DriveSCL(1);
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
00004a  832e              STRH     r6,[r5,#0x18]
00004c  2008              MOVS     r0,#8
00004e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
000052  6928              LDR      r0,[r5,#0x10]
000054  f3c01440          UBFX     r4,r0,#5,#1
;;;278            b = ReadSDA();
;;;279            DriveSCL(0);
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
;;;280    
;;;281            return b;
00005e  4620              MOV      r0,r4
;;;282          }
000060  e8bd81f0          POP      {r4-r8,pc}
;;;283    
                          ENDP

                  |L7.100|
                          DCD      0x40021000

                          AREA ||i._ZN4Anki5Cozmo3HAL7CamReadEi||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL7CamReadEi PROC ; Anki::Cozmo::HAL::CamRead(int)
;;;301    
;;;302          static int CamRead(int reg)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;303          {
000004  4604              MOV      r4,r0
;;;304            int val;
;;;305            Start(I2C_ADDR);    // Base address is Write (for writing address)
000006  2578              MOVS     r5,#0x78
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
;;;306            Write(reg >> 8);
00001a  f3c42007          UBFX     r0,r4,#8,#8
00001e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
;;;307            Write(reg & 0xff);
000022  b2e0              UXTB     r0,r4
000024  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
;;;308            Stop();
;;;309            Start(I2C_ADDR+1);  // Base address + 1 is Read (for Reading address)
00003a  2479              MOVS     r4,#0x79
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
00004e  2500              MOVS     r5,#0
000050  4e1f              LDR      r6,|L8.208|
;;;310            val = Read(1);      // 1 for 'last Read'
000052  f04f0801          MOV      r8,#1
000056  462c              MOV      r4,r5
000058  f04f0920          MOV      r9,#0x20
00005c  2708              MOVS     r7,#8
                  |L8.94|
00005e  0668              LSLS     r0,r5,#25
000060  0e05              LSRS     r5,r0,#24
000062  f8a69018          STRH     r9,[r6,#0x18]
000066  2008              MOVS     r0,#8
000068  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
00006c  6930              LDR      r0,[r6,#0x10]
00006e  8337              STRH     r7,[r6,#0x18]
000070  2008              MOVS     r0,#8
000072  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
000076  f8a69018          STRH     r9,[r6,#0x18]
00007a  2008              MOVS     r0,#8
00007c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
000080  6930              LDR      r0,[r6,#0x10]
000082  8377              STRH     r7,[r6,#0x1a]
000084  f3c01040          UBFX     r0,r0,#5,#1
000088  4305              ORRS     r5,r5,r0
00008a  2008              MOVS     r0,#8
00008c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
000090  1c60              ADDS     r0,r4,#1
000092  b2c4              UXTB     r4,r0
000094  2c08              CMP      r4,#8
000096  d3e2              BCC      |L8.94|
000098  f1b80f00          CMP      r8,#0
00009c  bf14              ITE      NE
00009e  2001              MOVNE    r0,#1
0000a0  2000              MOVEQ    r0,#0
0000a2  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
0000a6  2001              MOVS     r0,#1
0000a8  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
0000ac  2000              MOVS     r0,#0
0000ae  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
0000b2  2001              MOVS     r0,#1
0000b4  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
0000b8  2000              MOVS     r0,#0
0000ba  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
0000be  2001              MOVS     r0,#1
0000c0  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
0000c4  2001              MOVS     r0,#1
0000c6  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
;;;311            Stop();
;;;312            return val;
0000ca  4628              MOV      r0,r5
;;;313          }
0000cc  e8bd87f0          POP      {r4-r10,pc}
;;;314    
                          ENDP

                  |L8.208|
                          DCD      0x40021000

                          AREA ||i._ZN4Anki5Cozmo3HAL8CamWriteEii||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo3HAL8CamWriteEii PROC ; Anki::Cozmo::HAL::CamWrite(int, int)
;;;292    
;;;293          static void CamWrite(int reg, int val)
000000  b570              PUSH     {r4-r6,lr}
;;;294          {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;295            Start(I2C_ADDR);    // Base address is Write
000006  2578              MOVS     r5,#0x78
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
;;;296            Write(reg >> 8);
00001a  f3c42007          UBFX     r0,r4,#8,#8
00001e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
;;;297            Write(reg & 0xff);
000022  b2e0              UXTB     r0,r4
000024  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
;;;298            Write(val);
000028  b2f0              UXTB     r0,r6
00002a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL5WriteEh ; Anki::Cozmo::HAL::Write(unsigned char)
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       _ZN4Anki5Cozmo3HAL8DriveSCLEh ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
00003a  e8bd4070          POP      {r4-r6,lr}
00003e  2001              MOVS     r0,#1
000040  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL8DriveSDAEh ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
;;;299            Stop();
;;;300          }
;;;301    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo3HAL8DriveSCLEh||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL8DriveSCLEh PROC ; Anki::Cozmo::HAL::DriveSCL(unsigned char)
;;;198          // Soft I2C stack, borrowed from Arduino (BSD license)
;;;199          static void DriveSCL(u8 bit)
000000  2208              MOVS     r2,#8
;;;200          {
;;;201            if (bit)
;;;202              GPIO_SET(GPIO_SCL, PIN_SCL);
000002  4904              LDR      r1,|L10.20|
000004  2800              CMP      r0,#0                 ;201
000006  bf14              ITE      NE
000008  830a              STRHNE   r2,[r1,#0x18]
;;;203            else
;;;204              GPIO_RESET(GPIO_SCL, PIN_SCL);
00000a  834a              STRHEQ   r2,[r1,#0x1a]
;;;205    
;;;206            MicroWait(I2C_WAIT);
00000c  2008              MOVS     r0,#8
00000e  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
;;;207          }
;;;208    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40021000

                          AREA ||i._ZN4Anki5Cozmo3HAL8DriveSDAEh||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL8DriveSDAEh PROC ; Anki::Cozmo::HAL::DriveSDA(unsigned char)
;;;208    
;;;209          static void DriveSDA(u8 bit)
000000  2220              MOVS     r2,#0x20
;;;210          {
;;;211            if (bit)
;;;212              GPIO_SET(GPIO_SDA, PIN_SDA);
000002  4904              LDR      r1,|L11.20|
000004  2800              CMP      r0,#0                 ;211
000006  bf14              ITE      NE
000008  830a              STRHNE   r2,[r1,#0x18]
;;;213            else
;;;214              GPIO_RESET(GPIO_SDA, PIN_SDA);
00000a  834a              STRHEQ   r2,[r1,#0x1a]
;;;215    
;;;216            MicroWait(I2C_WAIT);
00000c  2008              MOVS     r0,#8
00000e  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
;;;217          }
;;;218    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40021000

                          AREA ||i.__sti___15_frontCamera_cpp||, CODE, READONLY, ALIGN=2

                  __sti___15_frontCamera_cpp PROC
000000  4803              LDR      r0,|L12.16|
000002  ed9f0a02          VLDR     s0,|L12.12|
000006  ed800a02          VSTR     s0,[r0,#8]
00000a  4770              BX       lr
                          ENDP

                  |L12.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L12.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i.DMA2_Stream1_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i.DMA2_Stream1_IRQHandler||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4Anki5Cozmo3HAL5WriteEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL5WriteEh||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN4Anki5Cozmo3HAL7CamReadEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL7CamReadEi||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN4Anki5Cozmo3HAL10OV7739InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL10OV7739InitEv||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki5Cozmo3HAL15FrontCameraInitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL15FrontCameraInitEv||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki5Cozmo3HAL19CameraSetParametersEfb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL19CameraSetParametersEfb||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki5Cozmo3HAL14CameraGetFrameEPhNS_6Vision16CameraResolutionEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL14CameraGetFrameEPhNS_6Vision16CameraResolutionEb||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki5Cozmo3HAL14GetHeadCamInfoEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL14GetHeadCamInfoEv||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i.__sti___15_frontCamera_cpp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___15_frontCamera_cpp||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki5Cozmo3HAL8DriveSCLEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL8DriveSCLEh||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki5Cozmo3HAL8DriveSDAEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL8DriveSDAEh||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki5Cozmo3HAL8CamWriteEii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL8CamWriteEii||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  _ZN4Anki6Vision13CameraResInfoE ; Anki::Vision::CameraResInfo
000000  028001e0          DCW      0x0280,0x01e0
000004  014000f0          DCW      0x0140,0x00f0
000008  00a00078          DCW      0x00a0,0x0078
00000c  0050003c          DCW      0x0050,0x003c
000010  0028001e          DCW      0x0028,0x001e
000014  00100010          DCW      0x0010,0x0010

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo3HAL7m_isEOFE ; Anki::Cozmo::HAL::m_isEOF
000000  00                DCB      0x00
                  _ZN4Anki5Cozmo3HAL28m_enableVignettingCorrectionE ; Anki::Cozmo::HAL::m_enableVignettingCorrection
000001  000000            DCB      0x00,0x00,0x00
                  _ZN4Anki5Cozmo3HAL10m_exposureE ; Anki::Cozmo::HAL::m_exposure
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000
                  _ZN4Anki5Cozmo3HAL11m_camScriptE ; Anki::Cozmo::HAL::m_camScript
00000c  30080082          DCW      0x3008,0x0082
000010  30080042          DCW      0x3008,0x0042
000014  31040003          DCW      0x3104,0x0003
000018  3017007f          DCW      0x3017,0x007f
00001c  301800f0          DCW      0x3018,0x00f0
000020  36020014          DCW      0x3602,0x0014
000024  36110044          DCW      0x3611,0x0044
000028  36310022          DCW      0x3631,0x0022
00002c  36220000          DCW      0x3622,0x0000
000030  36330025          DCW      0x3633,0x0025
000034  370d0004          DCW      0x370d,0x0004
000038  36200032          DCW      0x3620,0x0032
00003c  3714002c          DCW      0x3714,0x002c
000040  401c0000          DCW      0x401c,0x0000
000044  401e0011          DCW      0x401e,0x0011
000048  47020001          DCW      0x4702,0x0001
00004c  5000000e          DCW      0x5000,0x000e
000050  50010000          DCW      0x5001,0x0000
000054  3a00007a          DCW      0x3a00,0x007a
000058  3a180000          DCW      0x3a18,0x0000
00005c  3a19003f          DCW      0x3a19,0x003f
000060  300f0088          DCW      0x300f,0x0088
000064  30110008          DCW      0x3011,0x0008
000068  430300ff          DCW      0x4303,0x00ff
00006c  430700ff          DCW      0x4307,0x00ff
000070  430b00ff          DCW      0x430b,0x00ff
000074  43050000          DCW      0x4305,0x0000
000078  43090000          DCW      0x4309,0x0000
00007c  430d0000          DCW      0x430d,0x0000
000080  43000030          DCW      0x4300,0x0030
000084  43010080          DCW      0x4301,0x0080
000088  501f0001          DCW      0x501f,0x0001
00008c  38000000          DCW      0x3800,0x0000
000090  3801006e          DCW      0x3801,0x006e
000094  38040001          DCW      0x3804,0x0001
000098  38050040          DCW      0x3805,0x0040
00009c  38020000          DCW      0x3802,0x0000
0000a0  3803000e          DCW      0x3803,0x000e
0000a4  38060000          DCW      0x3806,0x0000
0000a8  380700f0          DCW      0x3807,0x00f0
0000ac  38080001          DCW      0x3808,0x0001
0000b0  38090040          DCW      0x3809,0x0040
0000b4  380a0000          DCW      0x380a,0x0000
0000b8  380b00f0          DCW      0x380b,0x00f0
0000bc  380c0003          DCW      0x380c,0x0003
0000c0  380d0010          DCW      0x380d,0x0010
0000c4  380e0001          DCW      0x380e,0x0001
0000c8  380f0000          DCW      0x380f,0x0000
0000cc  38100008          DCW      0x3810,0x0008
0000d0  38110004          DCW      0x3811,0x0004
0000d4  370d000c          DCW      0x370d,0x000c
0000d8  36220068          DCW      0x3622,0x0068
0000dc  38180081          DCW      0x3818,0x0081
0000e0  3a080000          DCW      0x3a08,0x0000
0000e4  3a090099          DCW      0x3a09,0x0099
0000e8  3a0a0000          DCW      0x3a0a,0x0000
0000ec  3a0b0080          DCW      0x3a0b,0x0080
0000f0  3a0d0002          DCW      0x3a0d,0x0002
0000f4  3a0e0001          DCW      0x3a0e,0x0001
0000f8  370500dc          DCW      0x3705,0x00dc
0000fc  3a1a0005          DCW      0x3a1a,0x0005
000100  30080002          DCW      0x3008,0x0002
000104  51800002          DCW      0x5180,0x0002
000108  50000007          DCW      0x5000,0x0007
00010c  50010042          DCW      0x5001,0x0042
000110  55800000          DCW      0x5580,0x0000
000114  53000000          DCW      0x5300,0x0000
000118  53010000          DCW      0x5301,0x0000
00011c  53020000          DCW      0x5302,0x0000
000120  53030000          DCW      0x5303,0x0000
000124  53040010          DCW      0x5304,0x0010
000128  530500ce          DCW      0x5305,0x00ce
00012c  53060006          DCW      0x5306,0x0006
000130  530700d0          DCW      0x5307,0x00d0
000134  56800000          DCW      0x5680,0x0000
000138  56810050          DCW      0x5681,0x0050
00013c  56820000          DCW      0x5682,0x0000
000140  5683003c          DCW      0x5683,0x003c
000144  56840011          DCW      0x5684,0x0011
000148  568500e0          DCW      0x5685,0x00e0
00014c  5686000d          DCW      0x5686,0x000d
000150  56870068          DCW      0x5687,0x0068
000154  56880003          DCW      0x5688,0x0003
000158  40000005          DCW      0x4000,0x0005
00015c  40020045          DCW      0x4002,0x0045
000160  40080010          DCW      0x4008,0x0010
000164  35000000          DCW      0x3500,0x0000
000168  3501000f          DCW      0x3501,0x000f
00016c  35020000          DCW      0x3502,0x0000
000170  35030003          DCW      0x3503,0x0003
000174  00000000          DCW      0x0000,0x0000
                  s_headCamInfo
000178  43a46fae          DCFS     0x43a46fae ; 328.87249755859375
00017c  43a5962f          DCFS     0x43a5962f ; 331.17330932617188
000180  43201ba3          DCFS     0x43201ba3 ; 160.10795593261719
000184  42eb4a61          DCFS     0x42eb4a61 ; 117.64527130126953
000188  00000000          DCFS     0x00000000 ; 0
00018c  00f00140          DCW      0x00f0,0x0140
                          %        16

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___15_frontCamera_cpp

                          AREA OFFCHIP, DATA, ALIGN=0

                  _ZN4Anki5Cozmo3HAL8m_bufferE ; Anki::Cozmo::HAL::m_buffer
                          %        153600

;*** Start embedded assembler ***

#line 1 "arm_hal\\hal\\frontCamera.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_frontCamera_cpp_578fab24___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___15_frontCamera_cpp_578fab24___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_frontCamera_cpp_578fab24___Z7__REVSHi|
#line 144
|__asm___15_frontCamera_cpp_578fab24___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
