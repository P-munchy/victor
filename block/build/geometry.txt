; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\geometry.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\geometry.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\geometry.crf ..\coretech\common\robot\src\geometry.cpp]
                          THUMB

                          AREA ||i._ZNK4Anki8Embedded13QuadrilateralIdE5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded13QuadrilateralIdE5PrintEv PROC ; Anki::Embedded::Quadrilateral<double>::Print() const
;;;56     
;;;57         template<> void Quadrilateral<f64>::Print() const
000000  b500              PUSH     {lr}
;;;58         {
000002  b08f              SUB      sp,sp,#0x3c
;;;59           CoreTechPrint("{(%f,%f), (%f,%f), (%f,%f), (%f,%f)} ",
000004  ed900b0e          VLDR     d0,[r0,#0x38]
000008  ed8d0b0c          VSTR     d0,[sp,#0x30]
00000c  ed900b0c          VLDR     d0,[r0,#0x30]
000010  ed8d0b0a          VSTR     d0,[sp,#0x28]
000014  ed900b0a          VLDR     d0,[r0,#0x28]
000018  ed8d0b08          VSTR     d0,[sp,#0x20]
00001c  ed900b08          VLDR     d0,[r0,#0x20]
000020  ed8d0b06          VSTR     d0,[sp,#0x18]
000024  ed900b06          VLDR     d0,[r0,#0x18]
000028  ed8d0b04          VSTR     d0,[sp,#0x10]
00002c  ed900b04          VLDR     d0,[r0,#0x10]
000030  ed8d0b02          VSTR     d0,[sp,#8]
000034  ed900b02          VLDR     d0,[r0,#8]
000038  ed8d0b00          VSTR     d0,[sp,#0]
00003c  ed900b00          VLDR     d0,[r0,#0]
000040  a003              ADR      r0,|L1.80|
000042  ec532b10          VMOV     r2,r3,d0
000046  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;60             this->corners[0].x, this->corners[0].y,
;;;61             this->corners[1].x, this->corners[1].y,
;;;62             this->corners[2].x, this->corners[2].y,
;;;63             this->corners[3].x, this->corners[3].y);
;;;64         }
00004a  b00f              ADD      sp,sp,#0x3c
00004c  bd00              POP      {pc}
;;;65       } // namespace Embedded
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
000050  7b282566          DCB      "{(%f,%f), (%f,%f), (%f,%f), (%f,%f)} ",0
000054  2c256629
000058  2c202825
00005c  662c2566
000060  292c2028
000064  25662c25
000068  66292c20
00006c  2825662c
000070  2566297d
000074  2000    
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded13QuadrilateralIfE5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded13QuadrilateralIfE5PrintEv PROC ; Anki::Embedded::Quadrilateral<float>::Print() const
;;;47     
;;;48         template<> void Quadrilateral<f32>::Print() const
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;49         {
000004  4604              MOV      r4,r0
000006  b08e              SUB      sp,sp,#0x38
;;;50           CoreTechPrint("{(%f,%f), (%f,%f), (%f,%f), (%f,%f)} ",
000008  69c0              LDR      r0,[r0,#0x1c]
00000a  f7fffffe          BL       __aeabi_f2d
00000e  4681              MOV      r9,r0
000010  468a              MOV      r10,r1
000012  69a0              LDR      r0,[r4,#0x18]
000014  f7fffffe          BL       __aeabi_f2d
000018  e9cd0106          STRD     r0,r1,[sp,#0x18]
00001c  6960              LDR      r0,[r4,#0x14]
00001e  f7fffffe          BL       __aeabi_f2d
000022  e9cd0104          STRD     r0,r1,[sp,#0x10]
000026  6920              LDR      r0,[r4,#0x10]
000028  f7fffffe          BL       __aeabi_f2d
00002c  4607              MOV      r7,r0
00002e  4688              MOV      r8,r1
000030  68e0              LDR      r0,[r4,#0xc]
000032  f7fffffe          BL       __aeabi_f2d
000036  4605              MOV      r5,r0
000038  460e              MOV      r6,r1
00003a  68a0              LDR      r0,[r4,#8]
00003c  f7fffffe          BL       __aeabi_f2d
000040  e9cd0102          STRD     r0,r1,[sp,#8]
000044  6860              LDR      r0,[r4,#4]
000046  f7fffffe          BL       __aeabi_f2d
00004a  e9cd0100          STRD     r0,r1,[sp,#0]
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       __aeabi_f2d
000054  e9cd9a0c          STRD     r9,r10,[sp,#0x30]
000058  ec410b10          VMOV     d0,r0,r1
00005c  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000060  e9cd010a          STRD     r0,r1,[sp,#0x28]
000064  e9dd0104          LDRD     r0,r1,[sp,#0x10]
000068  e9cd0108          STRD     r0,r1,[sp,#0x20]
00006c  a904              ADD      r1,sp,#0x10
00006e  ec532b10          VMOV     r2,r3,d0
000072  e88101e0          STM      r1,{r5-r8}
000076  a003              ADR      r0,|L2.132|
000078  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;51             this->corners[0].x, this->corners[0].y,
;;;52             this->corners[1].x, this->corners[1].y,
;;;53             this->corners[2].x, this->corners[2].y,
;;;54             this->corners[3].x, this->corners[3].y);
;;;55         }
00007c  b00e              ADD      sp,sp,#0x38
00007e  e8bd87f0          POP      {r4-r10,pc}
;;;56     
                          ENDP

000082  0000              DCW      0x0000
                  |L2.132|
000084  7b282566          DCB      "{(%f,%f), (%f,%f), (%f,%f), (%f,%f)} ",0
000088  2c256629
00008c  2c202825
000090  662c2566
000094  292c2028
000098  25662c25
00009c  66292c20
0000a0  2825662c
0000a4  2566297d
0000a8  2000    
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded5PointIdE5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5PointIdE5PrintEv PROC ; Anki::Embedded::Point<double>::Print() const
;;;22     
;;;23         template<> void Point<f64>::Print() const
000000  b500              PUSH     {lr}
;;;24         {
000002  b083              SUB      sp,sp,#0xc
;;;25           CoreTechPrint("(%f,%f) ", this->x, this->y);
000004  ed900b02          VLDR     d0,[r0,#8]
000008  ed8d0b00          VSTR     d0,[sp,#0]
00000c  ed900b00          VLDR     d0,[r0,#0]
000010  a003              ADR      r0,|L3.32|
000012  ec532b10          VMOV     r2,r3,d0
000016  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;26         }
00001a  b003              ADD      sp,sp,#0xc
00001c  bd00              POP      {pc}
;;;27     
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
000020  2825662c          DCB      "(%f,%f) ",0
000024  25662920
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded5PointIfE5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5PointIfE5PrintEv PROC ; Anki::Embedded::Point<float>::Print() const
;;;17       {
;;;18         template<> void Point<f32>::Print() const
000000  b570              PUSH     {r4-r6,lr}
;;;19         {
000002  4606              MOV      r6,r0
000004  b082              SUB      sp,sp,#8
;;;20           CoreTechPrint("(%f,%f) ", this->x, this->y);
000006  6840              LDR      r0,[r0,#4]
000008  f7fffffe          BL       __aeabi_f2d
00000c  4604              MOV      r4,r0
00000e  460d              MOV      r5,r1
000010  6830              LDR      r0,[r6,#0]
000012  f7fffffe          BL       __aeabi_f2d
000016  ec410b10          VMOV     d0,r0,r1
00001a  a004              ADR      r0,|L4.44|
00001c  ec532b10          VMOV     r2,r3,d0
000020  e9cd4500          STRD     r4,r5,[sp,#0]
000024  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;21         }
000028  b002              ADD      sp,sp,#8
00002a  bd70              POP      {r4-r6,pc}
;;;22     
                          ENDP

                  |L4.44|
00002c  2825662c          DCB      "(%f,%f) ",0
000030  25662920
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded6Point3IdE5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded6Point3IdE5PrintEv PROC ; Anki::Embedded::Point3<double>::Print() const
;;;32     
;;;33         template<> void Point3<f64>::Print() const
000000  b500              PUSH     {lr}
;;;34         {
000002  b085              SUB      sp,sp,#0x14
;;;35           CoreTechPrint("(%f,%f,%f) ", this->x, this->y, this->z);
000004  ed900b04          VLDR     d0,[r0,#0x10]
000008  ed8d0b02          VSTR     d0,[sp,#8]
00000c  ed900b02          VLDR     d0,[r0,#8]
000010  ed8d0b00          VSTR     d0,[sp,#0]
000014  ed900b00          VLDR     d0,[r0,#0]
000018  a003              ADR      r0,|L5.40|
00001a  ec532b10          VMOV     r2,r3,d0
00001e  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;36         }
000022  b005              ADD      sp,sp,#0x14
000024  bd00              POP      {pc}
;;;37     
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
000028  2825662c          DCB      "(%f,%f,%f) ",0
00002c  25662c25
000030  66292000

                          AREA ||i._ZNK4Anki8Embedded6Point3IfE5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded6Point3IfE5PrintEv PROC ; Anki::Embedded::Point3<float>::Print() const
;;;27     
;;;28         template<> void Point3<f32>::Print() const
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;29         {
000004  4680              MOV      r8,r0
000006  b084              SUB      sp,sp,#0x10
;;;30           CoreTechPrint("(%f,%f,%f) ", this->x, this->y, this->z);
000008  6880              LDR      r0,[r0,#8]
00000a  f7fffffe          BL       __aeabi_f2d
00000e  4606              MOV      r6,r0
000010  460f              MOV      r7,r1
000012  f8d80004          LDR      r0,[r8,#4]
000016  f7fffffe          BL       __aeabi_f2d
00001a  4604              MOV      r4,r0
00001c  460d              MOV      r5,r1
00001e  f8d80000          LDR      r0,[r8,#0]
000022  f7fffffe          BL       __aeabi_f2d
000026  e88d00f0          STM      sp,{r4-r7}
00002a  ec410b10          VMOV     d0,r0,r1
00002e  a004              ADR      r0,|L6.64|
000030  ec532b10          VMOV     r2,r3,d0
000034  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;31         }
000038  b004              ADD      sp,sp,#0x10
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;32     
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
000040  2825662c          DCB      "(%f,%f,%f) ",0
000044  25662c25
000048  66292000

                          AREA ||i._ZNK4Anki8Embedded9RectangleIdE5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded9RectangleIdE5PrintEv PROC ; Anki::Embedded::Rectangle<double>::Print() const
;;;42     
;;;43         template<> void Rectangle<f64>::Print() const
000000  b500              PUSH     {lr}
;;;44         {
000002  b087              SUB      sp,sp,#0x1c
;;;45           CoreTechPrint("(%f,%f)->(%f,%f) ", this->left, this->top, this->right, this->bottom);
000004  ed900b06          VLDR     d0,[r0,#0x18]
000008  ed8d0b04          VSTR     d0,[sp,#0x10]
00000c  ed900b02          VLDR     d0,[r0,#8]
000010  ed8d0b02          VSTR     d0,[sp,#8]
000014  ed900b04          VLDR     d0,[r0,#0x10]
000018  ed8d0b00          VSTR     d0,[sp,#0]
00001c  ed900b00          VLDR     d0,[r0,#0]
000020  a003              ADR      r0,|L7.48|
000022  ec532b10          VMOV     r2,r3,d0
000026  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;46         }
00002a  b007              ADD      sp,sp,#0x1c
00002c  bd00              POP      {pc}
;;;47     
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
000030  2825662c          DCB      "(%f,%f)->(%f,%f) ",0
000034  2566292d
000038  3e282566
00003c  2c256629
000040  2000    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded9RectangleIfE5PrintEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded9RectangleIfE5PrintEv PROC ; Anki::Embedded::Rectangle<float>::Print() const
;;;37     
;;;38         template<> void Rectangle<f32>::Print() const
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;39         {
000004  4682              MOV      r10,r0
000006  b086              SUB      sp,sp,#0x18
;;;40           CoreTechPrint("(%f,%f)->(%f,%f) ", this->left, this->top, this->right, this->bottom);
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f7fffffe          BL       __aeabi_f2d
00000e  4680              MOV      r8,r0
000010  4689              MOV      r9,r1
000012  f8da0004          LDR      r0,[r10,#4]
000016  f7fffffe          BL       __aeabi_f2d
00001a  4606              MOV      r6,r0
00001c  460f              MOV      r7,r1
00001e  f8da0008          LDR      r0,[r10,#8]
000022  f7fffffe          BL       __aeabi_f2d
000026  4604              MOV      r4,r0
000028  460d              MOV      r5,r1
00002a  f8da0000          LDR      r0,[r10,#0]
00002e  f7fffffe          BL       __aeabi_f2d
000032  e88d03f0          STM      sp,{r4-r9}
000036  ec410b10          VMOV     d0,r0,r1
00003a  a004              ADR      r0,|L8.76|
00003c  ec532b10          VMOV     r2,r3,d0
000040  f7fffffe          BL       _ZN4Anki13CoreTechPrintEPKcz ; Anki::CoreTechPrint(const char*, ...)
;;;41         }
000044  b006              ADD      sp,sp,#0x18
000046  e8bd87f0          POP      {r4-r10,pc}
;;;42     
                          ENDP

00004a  0000              DCW      0x0000
                  |L8.76|
00004c  2825662c          DCB      "(%f,%f)->(%f,%f) ",0
000050  2566292d
000054  3e282566
000058  2c256629
00005c  2000    
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZNK4Anki8Embedded5PointIfE5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5PointIfE5PrintEv||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZNK4Anki8Embedded5PointIdE5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded5PointIdE5PrintEv||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZNK4Anki8Embedded6Point3IfE5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded6Point3IfE5PrintEv||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZNK4Anki8Embedded6Point3IdE5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded6Point3IdE5PrintEv||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZNK4Anki8Embedded9RectangleIfE5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded9RectangleIfE5PrintEv||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZNK4Anki8Embedded9RectangleIdE5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded9RectangleIdE5PrintEv||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZNK4Anki8Embedded13QuadrilateralIfE5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded13QuadrilateralIfE5PrintEv||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZNK4Anki8Embedded13QuadrilateralIdE5PrintEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded13QuadrilateralIdE5PrintEv||
                          DCD      0x00000001
