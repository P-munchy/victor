; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\headcontroller.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\headcontroller.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\headcontroller.crf supervisor\src\headController.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo14HeadController10GetCamPoseERfS2_S2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController10GetCamPoseERfS2_S2_ PROC ; Anki::Cozmo::HeadController::GetCamPose(float&, float&, float&)
;;;219    
;;;220        void GetCamPose(f32 &x, f32 &z, f32 &angle)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;221        {
000004  4c17              LDR      r4,|L1.100|
000006  4617              MOV      r7,r2
000008  ed2d8b02          VPUSH    {d8}
00000c  460e              MOV      r6,r1
00000e  4605              MOV      r5,r0
000010  ed940a00          VLDR     s0,[r4,#0]
;;;222          f32 cosH = cosf(currentAngle_.ToFloat());
000014  f7fffffe          BL       __hardfp_cosf
000018  eeb08a40          VMOV.F32 s16,s0
00001c  ed940a00          VLDR     s0,[r4,#0]
;;;223          f32 sinH = sinf(currentAngle_.ToFloat());
000020  f7fffffe          BL       __hardfp_sinf
;;;224          
;;;225          x = HEAD_CAM_POSITION[0]*cosH - HEAD_CAM_POSITION[2]*sinH + NECK_JOINT_POSITION[0];
000024  ed9f1a10          VLDR     s2,|L1.104|
000028  eef91a08          VMOV.F32 s3,#-6.00000000
00002c  eeba2a0a          VMOV.F32 s4,#-13.00000000
000030  ee680a01          VMUL.F32 s1,s16,s2
000034  ee400a61          VMLS.F32 s1,s0,s3
000038  ee700a82          VADD.F32 s1,s1,s4
00003c  edc50a00          VSTR     s1,[r5,#0]
;;;226          z = HEAD_CAM_POSITION[2]*cosH + HEAD_CAM_POSITION[0]*sinH + NECK_JOINT_POSITION[2];
000040  ee680a21          VMUL.F32 s1,s16,s3
000044  ee400a01          VMLA.F32 s1,s0,s2
000048  ed9f0a08          VLDR     s0,|L1.108|
00004c  ee300a80          VADD.F32 s0,s1,s0
000050  ed860a00          VSTR     s0,[r6,#0]
000054  ed940a00          VLDR     s0,[r4,#0]
;;;227          angle = currentAngle_.ToFloat();
000058  ed870a00          VSTR     s0,[r7,#0]
;;;228        }
00005c  ecbd8b02          VPOP     {d8}
000060  e8bd81f0          POP      {r4-r8,pc}
;;;229        
                          ENDP

                  |L1.100|
                          DCD      ||.data||+0x68
                  |L1.104|
000068  4099999a          DCFS     0x4099999a ; 4.8000001907348633
                  |L1.108|
00006c  423ecccd          DCFS     0x423ecccd ; 47.700000762939453

                          AREA ||i._ZN4Anki5Cozmo14HeadController11GetAngleRadEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController11GetAngleRadEv PROC ; Anki::Cozmo::HeadController::GetAngleRad()
;;;204        
;;;205        f32 GetAngleRad()
000000  4801              LDR      r0,|L2.8|
000002  ed900a00          VLDR     s0,[r0,#0]
;;;206        {
;;;207          return currentAngle_.ToFloat();
;;;208        }
000006  4770              BX       lr
;;;209        
                          ENDP

                  |L2.8|
                          DCD      ||.data||+0x68

                          AREA ||i._ZN4Anki5Cozmo14HeadController11SetAngleRadEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController11SetAngleRadEf PROC ; Anki::Cozmo::HeadController::SetAngleRad(float)
;;;209        
;;;210        void SetAngleRad(f32 angle)
000000  4801              LDR      r0,|L3.8|
;;;211        {
;;;212          currentAngle_ = angle;
000002  f7ffbffe          B.W      _ZN4Anki7RadiansaSEf ; Anki::Radians::operator =(float)
;;;213        }
;;;214    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.data||+0x68

                          AREA ||i._ZN4Anki5Cozmo14HeadController11StopNoddingEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController11StopNoddingEv PROC ; Anki::Cozmo::HeadController::StopNodding()
;;;513        
;;;514        void StopNodding()
000000  4901              LDR      r1,|L4.8|
;;;515        {
;;;516          AnkiConditionalWarnAndReturn(enable_, "HeadController.StopNodding.Disabled",
;;;517                                       "StopNodding() command ignored: HeadController is disabled.\n");
;;;518          
;;;519          //SetDesiredAngle_internal(preNodAngle_);
;;;520          isNodding_ = false;
000002  2000              MOVS     r0,#0
000004  7048              STRB     r0,[r1,#1]
;;;521        }
000006  4770              BX       lr
;;;522        
                          ENDP

                  |L4.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController12IsCalibratedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController12IsCalibratedEv PROC ; Anki::Cozmo::HeadController::IsCalibrated()
;;;128        
;;;129        bool IsCalibrated()
000000  4801              LDR      r0,|L5.8|
;;;130        {
;;;131          return isCalibrated_;
000002  78c0              LDRB     r0,[r0,#3]  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e13isCalibrated_E
;;;132        }
000004  4770              BX       lr
;;;133        
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController12IsInPositionEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController12IsInPositionEv PROC ; Anki::Cozmo::HeadController::IsInPosition()
;;;345      
;;;346        bool IsInPosition(void) {
000000  4801              LDR      r0,|L6.8|
;;;347          return inPosition_;
000002  7800              LDRB     r0,[r0,#0]  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e11inPosition_E
;;;348        }
000004  4770              BX       lr
;;;349        
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController12StartNoddingEfftiff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController12StartNoddingEfftiff PROC ; Anki::Cozmo::HeadController::StartNodding(float, float, unsigned short, int, float, float)
;;;488        
;;;489        void StartNodding(const f32 lowAngle, const f32 highAngle,
000000  4a0f              LDR      r2,|L7.64|
;;;490                          const u16 period_ms, const s32 numLoops,
;;;491                          const f32 easeInFraction, const f32 easeOutFraction)
;;;492        {
;;;493          //AnkiConditionalErrorAndReturnValue(keyFrame.type != KeyFrame::HEAD_NOD, RESULT_FAIL, "HeadNodStart.WrongKeyFrameType", "\n");
;;;494    
;;;495          AnkiConditionalWarnAndReturn(enable_, "HeadController.StartNodding.Disabled",
;;;496                                       "StartNodding() command ignored: HeadController is disabled.\n");
;;;497          
;;;498          //preNodAngle_ = GetAngleRad();
;;;499          nodLowAngle_  = lowAngle;
;;;500          nodHighAngle_ = highAngle;
;;;501          
;;;502          numNodsDesired_  = numLoops;
;;;503          numNodsComplete_ = 0;
;;;504          isNodding_ = true;
;;;505          nodEaseOutFraction_ = easeOutFraction;
;;;506          nodEaseInFraction_  = easeInFraction;
;;;507          
;;;508          nodHalfPeriod_sec_ = static_cast<f32>(period_ms) * .5f * 0.001f;
000002  eeb62a00          VMOV.F32 s4,#0.50000000
000006  ed820a0f          VSTR     s0,[r2,#0x3c]         ;499
00000a  edc20a10          VSTR     s1,[r2,#0x40]         ;500
00000e  eef00a61          VMOV.F32 s1,s3                 ;505
000012  ee010a90          VMOV     s3,r0
000016  6451              STR      r1,[r2,#0x44]         ;503  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e15numNodsDesired_E
000018  2100              MOVS     r1,#0                 ;503
00001a  eef81a61          VCVT.F32.U32 s3,s3
00001e  6491              STR      r1,[r2,#0x48]         ;504  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e16numNodsComplete_E
000020  2101              MOVS     r1,#1                 ;504
000022  7051              STRB     r1,[r2,#1]            ;504
000024  ee611a82          VMUL.F32 s3,s3,s4
000028  ed9f2a06          VLDR     s4,|L7.68|
00002c  edc20a14          VSTR     s1,[r2,#0x50]         ;505
000030  ed821a15          VSTR     s2,[r2,#0x54]         ;506
000034  ee611a82          VMUL.F32 s3,s3,s4
000038  edc21a13          VSTR     s3,[r2,#0x4c]
;;;509          SetDesiredAngle_internal(nodLowAngle_, nodEaseOutFraction_, nodEaseInFraction_, nodHalfPeriod_sec_);
00003c  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff ; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
;;;510          
;;;511        } // StartNodding()
;;;512        
                          ENDP

                  |L7.64|
                          DCD      ||.data||
                  |L7.68|
000044  3a83126f          DCFS     0x3a83126f ; 0.0010000000474974513

                          AREA ||i._ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf PROC ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
;;;269        
;;;270        void SetDesiredAngle(f32 angle) {
000000  4806              LDR      r0,|L8.28|
;;;271          SetDesiredAngle(angle, DEFAULT_START_ACCEL_FRAC, DEFAULT_END_ACCEL_FRAC, DEFAULT_DURATION_SEC);
000002  eef50a00          VMOV.F32 s1,#0.25000000
000006  7841              LDRB     r1,[r0,#1]  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e10isNodding_E
000008  2900              CMP      r1,#0
00000a  bf1c              ITT      NE
00000c  2100              MOVNE    r1,#0
00000e  7041              STRBNE   r1,[r0,#1]
000010  eef01a60          VMOV.F32 s3,s1
000014  eeb01a60          VMOV.F32 s2,s1
000018  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff ; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
;;;272        }
;;;273    
                          ENDP

                  |L8.28|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController15SetDesiredAngleEffff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEffff PROC ; Anki::Cozmo::HeadController::SetDesiredAngle(float, float, float, float)
;;;334      
;;;335        void SetDesiredAngle(f32 angle, f32 acc_start_frac, f32 acc_end_frac, f32 duration_seconds)
000000  4803              LDR      r0,|L9.16|
000002  7841              LDRB     r1,[r0,#1]  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e10isNodding_E
;;;336        {
;;;337          // Stop nodding if we were
;;;338          if(IsNodding()) {
000004  2900              CMP      r1,#0
;;;339            isNodding_ = false;
000006  bf1c              ITT      NE
000008  2100              MOVNE    r1,#0
00000a  7041              STRBNE   r1,[r0,#1]
;;;340          }
;;;341        
;;;342          SetDesiredAngle_internal(angle, acc_start_frac, acc_end_frac, duration_seconds);
00000c  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff ; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
;;;343        }
;;;344      
                          ENDP

                  |L9.16|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController16GetSpeedAndAccelERfS2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController16GetSpeedAndAccelERfS2_ PROC ; Anki::Cozmo::HeadController::GetSpeedAndAccel(float&, float&)
;;;263        
;;;264        void GetSpeedAndAccel(f32 &max_speed_rad_per_sec, f32 &accel_rad_per_sec2)
000000  4a04              LDR      r2,|L10.20|
;;;265        {
;;;266          max_speed_rad_per_sec = maxSpeedRad_;
000002  ed920a0c          VLDR     s0,[r2,#0x30]
000006  ed800a00          VSTR     s0,[r0,#0]
;;;267          accel_rad_per_sec2 = accelRad_;
00000a  ed920a0d          VLDR     s0,[r2,#0x34]
00000e  ed810a00          VSTR     s0,[r1,#0]
;;;268        }
000012  4770              BX       lr
;;;269        
                          ENDP

                  |L10.20|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController16SetSpeedAndAccelEff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController16SetSpeedAndAccelEff PROC ; Anki::Cozmo::HeadController::SetSpeedAndAccel(float, float)
;;;257        
;;;258        void SetSpeedAndAccel(const f32 max_speed_rad_per_sec, const f32 accel_rad_per_sec2)
000000  eeb50ac0          VCMPE.F32 s0,#0.0
;;;259        {
;;;260          maxSpeedRad_ = MAX(ABS(max_speed_rad_per_sec), approachSpeedRad_);
000004  eeb11a40          VNEG.F32 s2,s0
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  bfac              ITE      GE
00000e  eef01a40          VMOVGE.F32 s3,s0
000012  eef01a41          VMOVLT.F32 s3,s2
000016  480b              LDR      r0,|L11.68|
000018  ed902a0e          VLDR     s4,[r0,#0x38]
00001c  eef41ac2          VCMPE.F32 s3,s4
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR
000024  bfd8              IT       LE
000026  eeb00a42          VMOVLE.F32 s0,s4
00002a  dd06              BLE      |L11.58|
00002c  eeb50ac0          VCMPE.F32 s0,#0.0
000030  eef1fa10          VMRS     APSR_nzcv,FPSCR
000034  bfb8              IT       LT
000036  eeb00a41          VMOVLT.F32 s0,s2
                  |L11.58|
00003a  ed800a0c          VSTR     s0,[r0,#0x30]
;;;261          accelRad_ = accel_rad_per_sec2;
00003e  edc00a0d          VSTR     s1,[r0,#0x34]
;;;262        }
000042  4770              BX       lr
;;;263        
                          ENDP

                  |L11.68|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController17CalibrationUpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController17CalibrationUpdateEv PROC ; Anki::Cozmo::HeadController::CalibrationUpdate()
;;;153        
;;;154        void CalibrationUpdate()
000000  b570              PUSH     {r4-r6,lr}
;;;155        {
;;;156          if (!isCalibrated_) {
000002  4c2f              LDR      r4,|L12.192|
000004  78e0              LDRB     r0,[r4,#3]  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e13isCalibrated_E
000006  2800              CMP      r0,#0                 ;155
;;;157            
;;;158            switch(calState_) {
;;;159                
;;;160              case HCS_IDLE:
;;;161                break;
;;;162                
;;;163              case HCS_LOWER_HEAD:
;;;164                power_ = -0.7;
;;;165                HAL::MotorSetPower(HAL::MOTOR_HEAD, power_);
;;;166                lastHeadMovedTime_us = HAL::GetMicroCounter();
;;;167                calState_ = HCS_WAIT_FOR_STOP;
;;;168                break;
;;;169                
;;;170              case HCS_WAIT_FOR_STOP:
;;;171                // Check for when head stops moving for 0.2 seconds
;;;172                if (!IsMoving()) {
;;;173                  
;;;174                  if (HAL::GetMicroCounter() - lastHeadMovedTime_us > HEAD_STOP_TIME) {
;;;175                    // Turn off motor
;;;176                    power_ = 0.0;
;;;177                    HAL::MotorSetPower(HAL::MOTOR_HEAD, power_);
;;;178                    
;;;179                    // Set timestamp to be used in next state to wait for motor to "relax"
;;;180                    lastHeadMovedTime_us = HAL::GetMicroCounter();
;;;181                    
;;;182                    // Go to next state
;;;183                    calState_ = HCS_SET_CURR_ANGLE;
;;;184                  }
;;;185                } else {
;;;186                  lastHeadMovedTime_us = HAL::GetMicroCounter();
;;;187                }
;;;188                break;
;;;189                
;;;190              case HCS_SET_CURR_ANGLE:
;;;191                // Wait for motor to relax and then set angle
;;;192                if (HAL::GetMicroCounter() - lastHeadMovedTime_us > HEAD_STOP_TIME) {
;;;193                  PRINT("HEAD Calibrated\n");
;;;194                  ResetLowAnglePosition();
;;;195                  //SetDesiredAngle(HEAD_START_ANGLE);
;;;196                  calState_ = HCS_IDLE;
;;;197                }
;;;198                break;
;;;199            }
;;;200          }
;;;201          
;;;202        }
000008  bf18              IT       NE
00000a  bd70              POPNE    {r4-r6,pc}
00000c  78a0              LDRB     r0,[r4,#2]            ;158  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e9calState_E
00000e  2800              CMP      r0,#0                 ;158
000010  bf08              IT       EQ
000012  bd70              POPEQ    {r4-r6,pc}
000014  2801              CMP      r0,#1                 ;158
000016  d021              BEQ      |L12.92|
000018  4d2a              LDR      r5,|L12.196|
00001a  2802              CMP      r0,#2                 ;158
00001c  d02b              BEQ      |L12.118|
00001e  2803              CMP      r0,#3                 ;158
000020  bf18              IT       NE
000022  bd70              POPNE    {r4-r6,pc}
000024  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000028  6da1              LDR      r1,[r4,#0x58]         ;192  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e20lastHeadMovedTime_usE
00002a  1a40              SUBS     r0,r0,r1              ;192
00002c  42a8              CMP      r0,r5                 ;192
00002e  bf98              IT       LS
000030  bd70              POPLS    {r4-r6,pc}
000032  a025              ADR      r0,|L12.200|
000034  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
000038  ed9f0a28          VLDR     s0,|L12.220|
00003c  4828              LDR      r0,|L12.224|
00003e  f7fffffe          BL       _ZN4Anki7RadiansaSEf ; Anki::Radians::operator =(float)
000042  2003              MOVS     r0,#3                 ;193
000044  f7fffffe          BL       _ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)
000048  2003              MOVS     r0,#3                 ;193
00004a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
00004e  ed840a07          VSTR     s0,[r4,#0x1c]         ;193
000052  2001              MOVS     r0,#1                 ;193
000054  70e0              STRB     r0,[r4,#3]            ;193
000056  2000              MOVS     r0,#0                 ;196
                  |L12.88|
000058  70a0              STRB     r0,[r4,#2]            ;196
00005a  bd70              POP      {r4-r6,pc}
                  |L12.92|
00005c  ed9f0a21          VLDR     s0,|L12.228|
000060  2003              MOVS     r0,#3                 ;165
000062  ed840a02          VSTR     s0,[r4,#8]            ;164
000066  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf ; Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
00006a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
00006e  65a0              STR      r0,[r4,#0x58]         ;167  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e20lastHeadMovedTime_usE
000070  2002              MOVS     r0,#2                 ;167
000072  70a0              STRB     r0,[r4,#2]            ;167
000074  bd70              POP      {r4-r6,pc}
                  |L12.118|
000076  ed940a0b          VLDR     s0,[r4,#0x2c]
00007a  eeb50ac0          VCMPE.F32 s0,#0.0
00007e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000082  bfb8              IT       LT
000084  eeb10a40          VNEGLT.F32 s0,s0
000088  ee100a10          VMOV     r0,s0
00008c  4916              LDR      r1,|L12.232|
00008e  4288              CMP      r0,r1
000090  dd03              BLE      |L12.154|
000092  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000096  65a0              STR      r0,[r4,#0x58]         ;186  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e20lastHeadMovedTime_usE
000098  bd70              POP      {r4-r6,pc}
                  |L12.154|
00009a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
00009e  6da1              LDR      r1,[r4,#0x58]         ;174  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e20lastHeadMovedTime_usE
0000a0  1a40              SUBS     r0,r0,r1              ;174
0000a2  42a8              CMP      r0,r5                 ;174
0000a4  bf98              IT       LS
0000a6  bd70              POPLS    {r4-r6,pc}
0000a8  ed9f0a10          VLDR     s0,|L12.236|
0000ac  2003              MOVS     r0,#3                 ;177
0000ae  ed840a02          VSTR     s0,[r4,#8]            ;176
0000b2  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf ; Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
0000b6  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
0000ba  65a0              STR      r0,[r4,#0x58]         ;183  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e20lastHeadMovedTime_usE
0000bc  2003              MOVS     r0,#3                 ;183
0000be  e7cb              B        |L12.88|
;;;203    
                          ENDP

                  |L12.192|
                          DCD      ||.data||
                  |L12.196|
                          DCD      0x0007a120
                  |L12.200|
0000c8  48454144          DCB      "HEAD Calibrated\n",0
0000cc  2043616c
0000d0  69627261
0000d4  7465640a
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L12.220|
0000dc  bedf66f3          DCFS     0xbedf66f3 ; -0.43633231520652771
                  |L12.224|
                          DCD      ||.data||+0x68
                  |L12.228|
0000e4  bf333333          DCFS     0xbf333333 ; -0.69999998807907104
                  |L12.232|
                          DCD      0x3a83126f
                  |L12.236|
0000ec  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki5Cozmo14HeadController18SetAngularVelocityEf||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo14HeadController18SetAngularVelocityEf PROC ; Anki::Cozmo::HeadController::SetAngularVelocity(float)
;;;249        
;;;250        void SetAngularVelocity(const f32 rad_per_sec)
000000  ed9f1a17          VLDR     s2,|L13.96|
;;;251        {
000004  b510              PUSH     {r4,lr}
;;;252          // TODO: Figure out power-to-speed ratio on actual robot. Normalize with battery power?
;;;253          f32 power = CLIP(rad_per_sec / HAL::MAX_HEAD_SPEED, -1.0, 1.0);
000006  eec00a01          VDIV.F32 s1,s0,s2
00000a  ee100a90          VMOV     r0,s1
00000e  f1104f81          CMN      r0,#0x40800000
000012  d207              BCS      |L13.36|
000014  ee100a90          VMOV     r0,s1
000018  f1b05f7e          CMP      r0,#0x3f800000
00001c  bfa8              IT       GE
00001e  ed9f0b12          VLDRGE   d0,|L13.104|
000022  da0d              BGE      |L13.64|
                  |L13.36|
000024  ee100a90          VMOV     r0,s1
000028  f1104f81          CMN      r0,#0x40800000
00002c  bf28              IT       CS
00002e  ed9f0b10          VLDRCS   d0,|L13.112|
000032  d205              BCS      |L13.64|
000034  ee100a90          VMOV     r0,s1
000038  f7fffffe          BL       __aeabi_f2d
00003c  ec410b10          VMOV     d0,r0,r1
                  |L13.64|
000040  ec510b10          VMOV     r0,r1,d0
000044  f7fffffe          BL       __aeabi_d2f
000048  ee000a10          VMOV     s0,r0
;;;254          HAL::MotorSetPower(HAL::MOTOR_HEAD, power);
00004c  2003              MOVS     r0,#3
00004e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf ; Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
;;;255          inPosition_ = true;
000052  4909              LDR      r1,|L13.120|
000054  2001              MOVS     r0,#1
000056  7008              STRB     r0,[r1,#0]
;;;256        }
000058  bd10              POP      {r4,pc}
;;;257        
                          ENDP

00005a  0000              DCW      0x0000
                          DCD      0x00000000
                  |L13.96|
000060  40c90fdb          DCFS     0x40c90fdb ; 6.2831854820251465
                          DCD      0x00000000
                  |L13.104|
000068  00000000          DCFD     0x3ff0000000000000 ; 1
00006c  3ff00000
                  |L13.112|
000070  00000000          DCFD     0xbff0000000000000 ; -1
000074  bff00000
                  |L13.120|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController21GetLastCommandedAngleEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController21GetLastCommandedAngleEv PROC ; Anki::Cozmo::HeadController::GetLastCommandedAngle()
;;;214    
;;;215        f32 GetLastCommandedAngle()
000000  4801              LDR      r0,|L14.8|
000002  ed900a00          VLDR     s0,[r0,#0]
;;;216        {
;;;217          return desiredAngle_.ToFloat();
;;;218        }
000006  4770              BX       lr
;;;219    
                          ENDP

                  |L14.8|
                          DCD      ||.data||+0x70

                          AREA ||i._ZN4Anki5Cozmo14HeadController21ResetLowAnglePositionEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController21ResetLowAnglePositionEv PROC ; Anki::Cozmo::HeadController::ResetLowAnglePosition()
;;;134        
;;;135        void ResetLowAnglePosition()
000000  b510              PUSH     {r4,lr}
;;;136        {
;;;137          currentAngle_ = MIN_HEAD_ANGLE;
000002  ed9f0a08          VLDR     s0,|L15.36|
000006  4808              LDR      r0,|L15.40|
000008  f7fffffe          BL       _ZN4Anki7RadiansaSEf ; Anki::Radians::operator =(float)
;;;138          HAL::MotorResetPosition(HAL::MOTOR_HEAD);
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)
;;;139          prevHalPos_ = HAL::MotorGetPosition(HAL::MOTOR_HEAD);
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000018  4804              LDR      r0,|L15.44|
;;;140          isCalibrated_ = true;
00001a  2101              MOVS     r1,#1
00001c  ed800a07          VSTR     s0,[r0,#0x1c]         ;139
000020  70c1              STRB     r1,[r0,#3]
;;;141        }
000022  bd10              POP      {r4,pc}
;;;142        
                          ENDP

                  |L15.36|
000024  bedf66f3          DCFS     0xbedf66f3 ; -0.43633231520652771
                  |L15.40|
                          DCD      ||.data||+0x68
                  |L15.44|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController23StartCalibrationRoutineEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController23StartCalibrationRoutineEv PROC ; Anki::Cozmo::HeadController::StartCalibrationRoutine()
;;;113    
;;;114        void StartCalibrationRoutine()
000000  b510              PUSH     {r4,lr}
;;;115        {
;;;116          PRINT("Starting Head calibration\n");
000002  a004              ADR      r0,|L16.20|
000004  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;117          
;;;118    #ifdef SIMULATOR
;;;119          // Skipping actual calibration routine in sim due to weird lift behavior when attempting to move it when
;;;120          // it's at the joint limit.  The arm flies off the robot!
;;;121          isCalibrated_ = true;
;;;122          SetDesiredAngle(MIN_HEAD_ANGLE);
;;;123    #else
;;;124          calState_ = HCS_LOWER_HEAD;
000008  4809              LDR      r0,|L16.48|
00000a  2101              MOVS     r1,#1
00000c  7081              STRB     r1,[r0,#2]
;;;125          isCalibrated_ = false;
00000e  2100              MOVS     r1,#0
000010  70c1              STRB     r1,[r0,#3]
;;;126    #endif
;;;127        }
000012  bd10              POP      {r4,pc}
;;;128        
                          ENDP

                  |L16.20|
000014  53746172          DCB      "Starting Head calibration\n",0
000018  74696e67
00001c  20486561
000020  64206361
000024  6c696272
000028  6174696f
00002c  6e0a00  
00002f  00                DCB      0
                  |L16.48|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController24PoseAndSpeedFilterUpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController24PoseAndSpeedFilterUpdateEv PROC ; Anki::Cozmo::HeadController::PoseAndSpeedFilterUpdate()
;;;229        
;;;230        void PoseAndSpeedFilterUpdate()
000000  b510              PUSH     {r4,lr}
;;;231        {
;;;232          // Get encoder speed measurements
;;;233          f32 measuredSpeed = Cozmo::HAL::MotorGetSpeed(HAL::MOTOR_HEAD);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
;;;234          
;;;235          radSpeed_ = (measuredSpeed *
000008  eef60a00          VMOV.F32 s1,#0.50000000
00000c  4c0c              LDR      r4,|L17.64|
00000e  ee200a20          VMUL.F32 s0,s0,s1
;;;236                       (1.0f - SPEED_FILTERING_COEFF) +
;;;237                       (radSpeed_ * SPEED_FILTERING_COEFF));
;;;238          
;;;239          // Update position
;;;240          currentAngle_ += (HAL::MotorGetPosition(HAL::MOTOR_HEAD) - prevHalPos_);
000012  2003              MOVS     r0,#3
000014  ed941a0b          VLDR     s2,[r4,#0x2c]         ;235
000018  ee010a20          VMLA.F32 s0,s2,s1              ;235
00001c  ed840a0b          VSTR     s0,[r4,#0x2c]         ;235
000020  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000024  edd40a07          VLDR     s1,[r4,#0x1c]
000028  f1040068          ADD      r0,r4,#0x68
00002c  ee300a60          VSUB.F32 s0,s0,s1
000030  f7fffffe          BL       _ZN4Anki7RadianspLEf ; Anki::Radians::operator +=(float)
;;;241          
;;;242    #if(DEBUG_HEAD_CONTROLLER)
;;;243          PRINT("HEAD FILT: speed %f, speedFilt %f, currentAngle %f, currHalPos %f, prevPos %f, pwr %f\n",
;;;244                measuredSpeed, radSpeed_, currentAngle_.ToFloat(), HAL::MotorGetPosition(HAL::MOTOR_HEAD), prevHalPos_, power_);
;;;245    #endif
;;;246          prevHalPos_ = HAL::MotorGetPosition(HAL::MOTOR_HEAD);
000034  2003              MOVS     r0,#3
000036  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
00003a  ed840a07          VSTR     s0,[r4,#0x1c]
;;;247        }
00003e  bd10              POP      {r4,pc}
;;;248    
                          ENDP

                  |L17.64|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff PROC ; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
;;;274        // TODO: There is common code with the other SetDesiredAngle() that can be pulled out into a shared function.
;;;275        static void SetDesiredAngle_internal(f32 angle, f32 acc_start_frac, f32 acc_end_frac, f32 duration_seconds)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;276        {
;;;277          // Do range check on angle
;;;278          angle = CLIP(angle, MIN_HEAD_ANGLE, MAX_HEAD_ANGLE);
000004  ee101a10          VMOV     r1,s0
000008  ed2d8b06          VPUSH    {d8-d10}              ;276
00000c  b08b              SUB      sp,sp,#0x2c           ;276
00000e  eeb08a61          VMOV.F32 s16,s3                ;276
000012  eef09a41          VMOV.F32 s19,s2                ;276
000016  4857              LDR      r0,|L18.372|
000018  eeb0aa60          VMOV.F32 s20,s1                ;276
00001c  ed9f1a56          VLDR     s2,|L18.376|
000020  4281              CMP      r1,r0
000022  bf34              ITE      CC
000024  eef00a40          VMOVCC.F32 s1,s0
000028  eef00a41          VMOVCS.F32 s1,s2
00002c  ee101a90          VMOV     r1,s1
000030  4a52              LDR      r2,|L18.380|
000032  4291              CMP      r1,r2
000034  bfa8              IT       GE
000036  ed9f0a52          VLDRGE   s0,|L18.384|
00003a  da05              BGE      |L18.72|
00003c  ee101a10          VMOV     r1,s0
000040  4281              CMP      r1,r0
000042  bf28              IT       CS
000044  eeb00a41          VMOVCS.F32 s0,s2
                  |L18.72|
;;;279          
;;;280          desiredAngle_ = angle;
000048  484e              LDR      r0,|L18.388|
00004a  f7fffffe          BL       _ZN4Anki7RadiansaSEf ; Anki::Radians::operator =(float)
00004e  4c4d              LDR      r4,|L18.388|
000050  f1a40008          SUB      r0,r4,#8
000054  edd41a00          VLDR     s3,[r4,#0]
000058  edd08a00          VLDR     s17,[r0,#0]
;;;281          angleError_ = desiredAngle_.ToFloat() - currentAngle_.ToFloat();
00005c  3868              SUBS     r0,r0,#0x68
00005e  ee310ae8          VSUB.F32 s0,s3,s17
000062  ed800a05          VSTR     s0,[r0,#0x14]
;;;282          
;;;283    #if(DEBUG_HEAD_CONTROLLER)
;;;284          PRINT("HEAD (fixedDuration): SetDesiredAngle %f rads (duration %f)\n", desiredAngle_.ToFloat(), duration_seconds);
;;;285    #endif
;;;286          
;;;287          f32 startRadSpeed = radSpeed_;
;;;288          f32 startRad = currentAngle_.ToFloat();
;;;289          if (!inPosition_) {
000066  7801              LDRB     r1,[r0,#0]  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e11inPosition_E
000068  2900              CMP      r1,#0
;;;290            startRadSpeed = currDesiredRadVel_;
00006a  bf07              ITTEE    EQ
00006c  ed909a04          VLDREQ   s18,[r0,#0x10]
;;;291            startRad = currDesiredAngle_;
000070  edd08a03          VLDREQ   s17,[r0,#0xc]
;;;292          } else {
;;;293            startRadSpeed = 0;
000074  ed9f9a44          VLDRNE   s18,|L18.392|
;;;294            angleErrorSum_ = 0.f;
000078  ed809a06          VSTRNE   s18,[r0,#0x18]
;;;295          }
;;;296          
;;;297          inPosition_ = false;
00007c  2100              MOVS     r1,#0
00007e  4843              LDR      r0,|L18.396|
000080  7001              STRB     r1,[r0,#0]
;;;298          
;;;299          if (FLT_NEAR(angleError_,0.f)) {
000082  ee100a10          VMOV     r0,s0
000086  4942              LDR      r1,|L18.400|
000088  4288              CMP      r0,r1
00008a  d20d              BCS      |L18.168|
00008c  ee100a10          VMOV     r0,s0
000090  4a40              LDR      r2,|L18.404|
000092  493e              LDR      r1,|L18.396|
000094  4290              CMP      r0,r2
;;;300            inPosition_ = true;
000096  bfbf              ITTTT    LT
000098  2001              MOVLT    r0,#1
00009a  7008              STRBLT   r0,[r1,#0]
;;;301    #if(DEBUG_HEAD_CONTROLLER)
;;;302            PRINT("Head (fixedDuration): Already at desired position\n");
;;;303    #endif
;;;304            return;
;;;305          }
;;;306          
;;;307          // Start profile of head trajectory
;;;308          bool res = vpg_.StartProfile_fixedDuration(startRad, startRadSpeed, acc_start_frac*duration_seconds,
;;;309                                                     desiredAngle_.ToFloat(), acc_end_frac*duration_seconds,
;;;310                                                     MAX_HEAD_SPEED_RAD_PER_S,
;;;311                                                     MAX_HEAD_ACCEL_RAD_PER_S2,
;;;312                                                     duration_seconds,
;;;313                                                     CONTROL_DT);
;;;314          
;;;315          if (!res) {
;;;316            PRINT("FAIL: HEAD VPG (fixedDuration): startVel %f, startPos %f, acc_start_frac %f, acc_end_frac %f, endPos %f, duration %f.  Trying VPG without fixed duration.\n",
;;;317                  startRadSpeed, startRad, acc_start_frac, acc_end_frac, desiredAngle_.ToFloat(), duration_seconds);
;;;318            
;;;319            //SetDesiredAngle_internal(angle);
;;;320            // Start profile of head trajectory
;;;321            vpg_.StartProfile(startRadSpeed, startRad,
;;;322                              maxSpeedRad_, accelRad_,
;;;323                              approachSpeedRad_, desiredAngle_.ToFloat(),
;;;324                              CONTROL_DT);
;;;325    
;;;326          }
;;;327          
;;;328    #if(DEBUG_HEAD_CONTROLLER)
;;;329          PRINT("HEAD VPG (fixedDuration): startVel %f, startPos %f, acc_start_frac %f, acc_end_frac %f, endPos %f, duration %f\n",
;;;330                startRadSpeed, startRad, acc_start_frac, acc_end_frac, desiredAngle_.ToFloat(), duration_seconds);
;;;331    #endif
;;;332    
;;;333        } // SetDesiredAngle_internal()
00009c  b00b              ADDLT    sp,sp,#0x2c
00009e  ecbd8b06          VPOPLT   {d8-d10}
0000a2  bfb8              IT       LT
0000a4  e8bd8ff0          POPLT    {r4-r11,pc}
                  |L18.168|
0000a8  ee292a88          VMUL.F32 s4,s19,s16            ;308
0000ac  ee2a1a08          VMUL.F32 s2,s20,s16            ;308
0000b0  eddfaa39          VLDR     s21,|L18.408|
0000b4  eef03a48          VMOV.F32 s7,s16                ;308
0000b8  ed9f3a38          VLDR     s6,|L18.412|
0000bc  eeb04a6a          VMOV.F32 s8,s21                ;308
0000c0  eddf2a37          VLDR     s5,|L18.416|
0000c4  eef00a49          VMOV.F32 s1,s18                ;308
0000c8  eeb00a68          VMOV.F32 s0,s17                ;308
0000cc  4835              LDR      r0,|L18.420|
0000ce  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator26StartProfile_fixedDurationEfffffffff ; Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
0000d2  2800              CMP      r0,#0                 ;315
0000d4  d149              BNE      |L18.362|
0000d6  ee180a10          VMOV     r0,s16                ;316
0000da  f7fffffe          BL       __aeabi_f2d
0000de  4682              MOV      r10,r0                ;316
0000e0  4828              LDR      r0,|L18.388|
0000e2  468b              MOV      r11,r1                ;316
0000e4  6800              LDR      r0,[r0,#0]            ;316
0000e6  f7fffffe          BL       __aeabi_f2d
0000ea  4606              MOV      r6,r0                 ;316
0000ec  460f              MOV      r7,r1                 ;316
0000ee  ee190a90          VMOV     r0,s19                ;316
0000f2  f7fffffe          BL       __aeabi_f2d
0000f6  4604              MOV      r4,r0                 ;316
0000f8  460d              MOV      r5,r1                 ;316
0000fa  ee1a0a10          VMOV     r0,s20                ;316
0000fe  f7fffffe          BL       __aeabi_f2d
000102  e9cd0100          STRD     r0,r1,[sp,#0]         ;316
000106  ee180a90          VMOV     r0,s17                ;316
00010a  f7fffffe          BL       __aeabi_f2d
00010e  4680              MOV      r8,r0                 ;316
000110  4689              MOV      r9,r1                 ;316
000112  ee190a10          VMOV     r0,s18                ;316
000116  f7fffffe          BL       __aeabi_f2d
00011a  ec410b10          VMOV     d0,r0,r1              ;316
00011e  a804              ADD      r0,sp,#0x10           ;316
000120  ec532b10          VMOV     r2,r3,d0              ;316
000124  e8800cf0          STM      r0,{r4-r7,r10,r11}    ;316
000128  e9dd0100          LDRD     r0,r1,[sp,#0]         ;316
00012c  e9cd0102          STRD     r0,r1,[sp,#8]         ;316
000130  481d              LDR      r0,|L18.424|
000132  e9cd8900          STRD     r8,r9,[sp,#0]         ;316
000136  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
00013a  4812              LDR      r0,|L18.388|
00013c  eeb03a6a          VMOV.F32 s6,s21                ;321
000140  eef00a68          VMOV.F32 s1,s17                ;321
000144  edd02a00          VLDR     s5,[r0,#0]            ;321
000148  3870              SUBS     r0,r0,#0x70           ;321
00014a  eeb00a49          VMOV.F32 s0,s18                ;321
00014e  ed902a0e          VLDR     s4,[r0,#0x38]         ;321
000152  edd01a0d          VLDR     s3,[r0,#0x34]         ;321
000156  ed901a0c          VLDR     s2,[r0,#0x30]         ;321
00015a  b00b              ADD      sp,sp,#0x2c           ;321
00015c  4811              LDR      r0,|L18.420|
00015e  ecbd8b06          VPOP     {d8-d10}              ;321
000162  e8bd4ff0          POP      {r4-r11,lr}           ;321
000166  f7ffbffe          B.W      _ZN4Anki24VelocityProfileGenerator12StartProfileEfffffff ; Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
                  |L18.362|
00016a  b00b              ADD      sp,sp,#0x2c
00016c  ecbd8b06          VPOP     {d8-d10}
000170  e8bd8ff0          POP      {r4-r11,pc}
;;;334      
                          ENDP

                  |L18.372|
                          DCD      0xbedf66f3
                  |L18.376|
000178  bedf66f3          DCFS     0xbedf66f3 ; -0.43633231520652771
                  |L18.380|
                          DCD      0x3f32b8c2
                  |L18.384|
000180  3f32b8c2          DCFS     0x3f32b8c2 ; 0.69813168048858643
                  |L18.388|
                          DCD      ||.data||+0x70
                  |L18.392|
000188  00000000          DCFS     0x00000000 ; 0
                  |L18.396|
                          DCD      ||.data||
                  |L18.400|
                          DCD      0xb727c5ac
                  |L18.404|
                          DCD      0x3727c5ac
                  |L18.408|
000198  3ba3d70b          DCFS     0x3ba3d70b ; 0.0050000003539025784
                  |L18.412|
00019c  461c4000          DCFS     0x461c4000 ; 10000
                  |L18.416|
0001a0  447a0000          DCFS     0x447a0000 ; 1000
                  |L18.420|
                          DCD      ||.bss||
                  |L18.424|
                          DCD      ||.conststring||

                          AREA ||i._ZN4Anki5Cozmo14HeadController4StopEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController4StopEv PROC ; Anki::Cozmo::HeadController::Stop()
;;;147        
;;;148        void Stop()
000000  4903              LDR      r1,|L19.16|
;;;149        {
;;;150          isNodding_ = false;
000002  2000              MOVS     r0,#0
;;;151          SetAngularVelocity(0);
000004  ed9f0a03          VLDR     s0,|L19.20|
000008  7048              STRB     r0,[r1,#1]            ;150
00000a  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController18SetAngularVelocityEf ; Anki::Cozmo::HeadController::SetAngularVelocity(float)
;;;152        }
;;;153        
                          ENDP

00000e  0000              DCW      0x0000
                  |L19.16|
                          DCD      ||.data||
                  |L19.20|
000014  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki5Cozmo14HeadController6EnableEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController6EnableEv PROC ; Anki::Cozmo::HeadController::Enable()
;;;102        
;;;103        void Enable()
000000  4901              LDR      r1,|L20.8|
;;;104        {
;;;105          enable_ = true;
000002  2001              MOVS     r0,#1
000004  7108              STRB     r0,[r1,#4]
;;;106        }
000006  4770              BX       lr
;;;107        
                          ENDP

                  |L20.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController6UpdateEv||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo14HeadController6UpdateEv PROC ; Anki::Cozmo::HeadController::Update()
;;;349        
;;;350        Result Update()
000000  b530              PUSH     {r4,r5,lr}
;;;351        {
000002  ed2d8b02          VPUSH    {d8}
000006  b08d              SUB      sp,sp,#0x34
;;;352          CalibrationUpdate();
000008  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController17CalibrationUpdateEv ; Anki::Cozmo::HeadController::CalibrationUpdate()
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
000012  eef60a00          VMOV.F32 s1,#0.50000000
000016  4c84              LDR      r4,|L21.552|
000018  ee200a20          VMUL.F32 s0,s0,s1
00001c  2003              MOVS     r0,#3
00001e  ed941a0b          VLDR     s2,[r4,#0x2c]
000022  ee010a20          VMLA.F32 s0,s2,s1
000026  ed840a0b          VSTR     s0,[r4,#0x2c]
00002a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
00002e  edd40a07          VLDR     s1,[r4,#0x1c]
000032  f1040068          ADD      r0,r4,#0x68
000036  ee300a60          VSUB.F32 s0,s0,s1
00003a  f7fffffe          BL       _ZN4Anki7RadianspLEf ; Anki::Radians::operator +=(float)
00003e  2003              MOVS     r0,#3
000040  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000044  ed840a07          VSTR     s0,[r4,#0x1c]
;;;353          
;;;354          PoseAndSpeedFilterUpdate();
;;;355          
;;;356          if (!enable_) {
000048  7920              LDRB     r0,[r4,#4]  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e7enable_E
00004a  2800              CMP      r0,#0
;;;357            return RESULT_OK;
;;;358          }
;;;359          
;;;360          // Note that a new call to SetDesiredAngle will get
;;;361          // Update() working again after it has reached a previous
;;;362          // setting.
;;;363          if(not inPosition_) {
;;;364    
;;;365            // Get the current desired head angle
;;;366            vpg_.Step(currDesiredRadVel_, currDesiredAngle_);
;;;367            
;;;368            // Compute current angle error
;;;369            angleError_ = currDesiredAngle_ - currentAngle_.ToFloat();
;;;370            
;;;371            
;;;372            // Open loop value to drive at desired speed
;;;373            //power_ = currDesiredRadVel_ * SPEED_TO_POWER_OL_GAIN;
;;;374            
;;;375            // Compute corrective value
;;;376            f32 power_corr = (Kp_ * angleError_) + (Ki_ * angleErrorSum_);
;;;377            
;;;378            // Add base power in the direction of the desired general direction
;;;379            //power_ += power_corr + ((power_corr > 0) ? BASE_POWER_UP : BASE_POWER_DOWN);
;;;380            //power_ += power_corr + ((power_ > 0) ? BASE_POWER_UP : BASE_POWER_DOWN);
;;;381            power_ = power_corr + ((desiredAngle_.ToFloat() - currentAngle_.ToFloat() > 0) ? BASE_POWER_UP : BASE_POWER_DOWN);
;;;382            
;;;383            // Update angle error sum
;;;384            angleErrorSum_ += angleError_;
;;;385            angleErrorSum_ = CLIP(angleErrorSum_, -MAX_ERROR_SUM, MAX_ERROR_SUM);
;;;386            
;;;387            // If accurately tracking current desired angle...
;;;388            if((ABS(angleError_) < ANGLE_TOLERANCE && desiredAngle_ == currDesiredAngle_)
;;;389               || ABS(currentAngle_ - desiredAngle_) < ANGLE_TOLERANCE) {
;;;390              power_ = 0.f;
;;;391              inPosition_ = true;
;;;392    #         if(DEBUG_HEAD_CONTROLLER)
;;;393              PRINT(" HEAD ANGLE REACHED (%f rad)\n", GetAngleRad() );
;;;394    #         endif
;;;395            }
;;;396            
;;;397            
;;;398            /*
;;;399            // Convert angleError_ to power
;;;400            if(ABS(angleError_) < ANGLE_TOLERANCE) {
;;;401              angleErrorSum_ = 0.f;
;;;402              
;;;403              // If desired angle is low position, let it fall through to recalibration
;;;404              if (!(RECALIBRATE_AT_LIMIT && desiredAngle_.ToFloat() == MIN_HEAD_ANGLE)) {
;;;405                power_ = 0.f;
;;;406                
;;;407                if (desiredAngle_ == currDesiredAngle_) {
;;;408                  inPosition_ = true;
;;;409    #             if(DEBUG_HEAD_CONTROLLER)
;;;410                  PRINT(" HEAD ANGLE REACHED (%f rad)\n", currentAngle_.ToFloat());
;;;411    #             endif
;;;412                }
;;;413              }
;;;414            } else {
;;;415              power_ = minPower_ + (Kp_ * angleError_) + (Ki_ * angleErrorSum_);
;;;416              angleErrorSum_ += angleError_;
;;;417              angleErrorSum_ = CLIP(angleErrorSum_, -MAX_ERROR_SUM, MAX_ERROR_SUM);
;;;418              inPosition_ = false;
;;;419            }
;;;420             */
;;;421            
;;;422    #       if(DEBUG_HEAD_CONTROLLER)
;;;423            PERIODIC_PRINT(100, "HEAD: currA %f, curDesA %f, desA %f, err %f, errSum %f, pwr %f, spd %f\n",
;;;424                           currentAngle_.ToFloat(),
;;;425                           currDesiredAngle_,
;;;426                           desiredAngle_.ToFloat(),
;;;427                           angleError_,
;;;428                           angleErrorSum_,
;;;429                           power_,
;;;430                           radSpeed_);
;;;431            PERIODIC_PRINT(100, "  POWER terms: %f  %f\n", (Kp_ * angleError_), (Ki_ * angleErrorSum_))
;;;432    #       endif
;;;433            
;;;434            power_ = CLIP(power_, -1.0, 1.0);
;;;435            
;;;436    /*
;;;437            // If within 5 degrees of MIN_HEAD_ANGLE and the head isn't moving while downward power is applied,
;;;438            // assume we've hit the limit and recalibrate.
;;;439            if (limitingDetected_ ||
;;;440                  ((power_ < 0)
;;;441                   && (desiredAngle_.ToFloat() == MIN_HEAD_ANGLE)
;;;442                   && (desiredAngle_.ToFloat() == currDesiredAngle_)
;;;443                   && (ABS(angleError_) < RECALIBRATE_LIMIT_ANGLE_THRESH)
;;;444                   && NEAR_ZERO(HAL::MotorGetSpeed(HAL::MOTOR_HEAD)))) {
;;;445                    
;;;446              if (!limitingDetected_) {
;;;447    #           if(DEBUG_LIFT_CONTROLLER)
;;;448                PRINT("START RECAL HEAD\n");
;;;449    #           endif
;;;450                lastHeadMovedTime_us = HAL::GetMicroCounter();
;;;451                limitingDetected_ = true;
;;;452              } else if (HAL::GetMicroCounter() - lastHeadMovedTime_us > HEAD_STOP_TIME) {
;;;453    #           if(DEBUG_LIFT_CONTROLLER)
;;;454                PRINT("END RECAL HEAD\n");
;;;455    #           endif
;;;456                ResetLowAnglePosition();
;;;457                inPosition_ = true;
;;;458              }
;;;459              power_ = 0.f;
;;;460                
;;;461            }
;;;462    */
;;;463            
;;;464            HAL::MotorSetPower(HAL::MOTOR_HEAD, power_);
;;;465          } // if not in position
;;;466          else if(isNodding_)
;;;467          { // inPosition and Nodding
;;;468            if (GetLastCommandedAngle() == nodHighAngle_) {
;;;469              SetDesiredAngle_internal(nodLowAngle_, nodEaseOutFraction_, nodEaseInFraction_, nodHalfPeriod_sec_);
;;;470            } else if (GetLastCommandedAngle() == nodLowAngle_) {
;;;471              SetDesiredAngle_internal(nodHighAngle_, nodEaseOutFraction_, nodEaseInFraction_, nodHalfPeriod_sec_);
;;;472              ++numNodsComplete_;
;;;473              if(numNodsDesired_ > 0 && numNodsComplete_ >= numNodsDesired_) {
;;;474                StopNodding();
;;;475              }
;;;476            }
;;;477          } // else if(isNodding)
;;;478          
;;;479          return RESULT_OK;
;;;480        }
00004c  bf02              ITTT     EQ
00004e  b00d              ADDEQ    sp,sp,#0x34
000050  ecbd8b02          VPOPEQ   {d8}
000054  bd30              POPEQ    {r4,r5,pc}
000056  7820              LDRB     r0,[r4,#0]            ;363  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e11inPosition_E
000058  4d74              LDR      r5,|L21.556|
00005a  b1b0              CBZ      r0,|L21.138|
00005c  7860              LDRB     r0,[r4,#1]            ;466  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e10isNodding_E
00005e  2800              CMP      r0,#0                 ;466
000060  d07e              BEQ      |L21.352|
000062  edd50a00          VLDR     s1,[r5,#0]            ;466
000066  ed940a10          VLDR     s0,[r4,#0x40]         ;468
00006a  eef40a40          VCMP.F32 s1,s0                 ;468
00006e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;468
000072  d176              BNE      |L21.354|
000074  edd41a13          VLDR     s3,[r4,#0x4c]         ;469
000078  ed941a15          VLDR     s2,[r4,#0x54]         ;469
00007c  edd40a14          VLDR     s1,[r4,#0x50]         ;469
000080  ed940a0f          VLDR     s0,[r4,#0x3c]         ;469
000084  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff ; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
000088  e0c8              B        |L21.540|
                  |L21.138|
00008a  4a69              LDR      r2,|L21.560|
00008c  4869              LDR      r0,|L21.564|
00008e  1d11              ADDS     r1,r2,#4              ;366
000090  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator4StepERfS1_ ; Anki::VelocityProfileGenerator::Step(float&, float&)
000094  4868              LDR      r0,|L21.568|
000096  ed940a03          VLDR     s0,[r4,#0xc]          ;369
00009a  edd00a00          VLDR     s1,[r0,#0]            ;369
00009e  ee300a60          VSUB.F32 s0,s0,s1              ;369
0000a2  ed840a05          VSTR     s0,[r4,#0x14]         ;369
0000a6  ed941a08          VLDR     s2,[r4,#0x20]         ;376
0000aa  ed942a09          VLDR     s4,[r4,#0x24]         ;376
0000ae  ee611a00          VMUL.F32 s3,s2,s0              ;376
0000b2  ed941a06          VLDR     s2,[r4,#0x18]         ;376
0000b6  ee421a01          VMLA.F32 s3,s4,s2              ;376
0000ba  ed952a00          VLDR     s4,[r5,#0]            ;376
0000be  ee720a60          VSUB.F32 s1,s4,s1              ;381
0000c2  eef50ac0          VCMPE.F32 s1,#0.0               ;381
0000c6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;381
0000ca  bfcc              ITE      GT                    ;381
0000cc  eddf0a5b          VLDRGT   s1,|L21.572|
0000d0  eddf0a5b          VLDRLE   s1,|L21.576|
0000d4  ee700aa1          VADD.F32 s1,s1,s3              ;381
0000d8  ee311a00          VADD.F32 s2,s2,s0              ;384
0000dc  edc40a02          VSTR     s1,[r4,#8]            ;381
0000e0  ed841a06          VSTR     s2,[r4,#0x18]         ;384
0000e4  edd41a0a          VLDR     s3,[r4,#0x28]         ;385
0000e8  eef10a61          VNEG.F32 s1,s3                 ;385
0000ec  eeb41ae0          VCMPE.F32 s2,s1                 ;385
0000f0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;385
0000f4  bfcc              ITE      GT                    ;385
0000f6  eeb02a41          VMOVGT.F32 s4,s2                 ;385
0000fa  eeb02a60          VMOVLE.F32 s4,s1                 ;385
0000fe  eeb42ae1          VCMPE.F32 s4,s3                 ;385
000102  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;385
000106  bf28              IT       CS                    ;385
000108  eeb01a61          VMOVCS.F32 s2,s3                 ;385
00010c  d206              BCS      |L21.284|
00010e  eeb41ae0          VCMPE.F32 s2,s1                 ;385
000112  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;385
000116  bfd8              IT       LE                    ;385
000118  eeb01a60          VMOVLE.F32 s2,s1                 ;385
                  |L21.284|
00011c  ed841a06          VSTR     s2,[r4,#0x18]         ;385
000120  eeb50ac0          VCMPE.F32 s0,#0.0               ;388
000124  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;388
000128  bfb8              IT       LT                    ;388
00012a  eeb10a40          VNEGLT.F32 s0,s0                 ;388
00012e  a806              ADD      r0,sp,#0x18           ;388
000130  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
000134  4943              LDR      r1,|L21.580|
000136  f7fffffe          BL       _ZN4AnkiltERKNS_7RadiansES2_ ; Anki::operator <(const Anki::Radians&, const Anki::Radians&)
00013a  ed9f8a43          VLDR     s16,|L21.584|
00013e  b148              CBZ      r0,|L21.340|
000140  ed940a03          VLDR     s0,[r4,#0xc]          ;388
000144  a808              ADD      r0,sp,#0x20           ;388
000146  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
00014a  4601              MOV      r1,r0                 ;388
00014c  4837              LDR      r0,|L21.556|
00014e  f7fffffe          BL       _ZN4AnkieqERKNS_7RadiansES2_ ; Anki::operator ==(const Anki::Radians&, const Anki::Radians&)
000152  bb30              CBNZ     r0,|L21.418|
                  |L21.340|
000154  eeb00a48          VMOV.F32 s0,s16                ;389
000158  a80a              ADD      r0,sp,#0x28           ;389
00015a  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
00015e  e001              B        |L21.356|
                  |L21.352|
000160  e05c              B        |L21.540|
                  |L21.354|
000162  e042              B        |L21.490|
                  |L21.356|
000164  4a31              LDR      r2,|L21.556|
000166  4605              MOV      r5,r0                 ;389
000168  f1a20108          SUB      r1,r2,#8              ;389
00016c  a802              ADD      r0,sp,#8              ;389
00016e  f7fffffe          BL       _ZN4AnkimiERKNS_7RadiansES2_ ; Anki::operator -(const Anki::Radians&, const Anki::Radians&)
000172  4629              MOV      r1,r5                 ;389
000174  a802              ADD      r0,sp,#8              ;389
000176  f7fffffe          BL       _ZN4AnkigeERKNS_7RadiansES2_ ; Anki::operator >=(const Anki::Radians&, const Anki::Radians&)
00017a  4a2c              LDR      r2,|L21.556|
00017c  f1a20108          SUB      r1,r2,#8              ;389
000180  b118              CBZ      r0,|L21.394|
000182  4668              MOV      r0,sp                 ;389
000184  f7fffffe          BL       _ZN4AnkimiERKNS_7RadiansES2_ ; Anki::operator -(const Anki::Radians&, const Anki::Radians&)
000188  e006              B        |L21.408|
                  |L21.394|
00018a  a804              ADD      r0,sp,#0x10           ;389
00018c  f7fffffe          BL       _ZN4AnkimiERKNS_7RadiansES2_ ; Anki::operator -(const Anki::Radians&, const Anki::Radians&)
000190  a904              ADD      r1,sp,#0x10           ;389
000192  4668              MOV      r0,sp                 ;389
000194  f7fffffe          BL       _ZNK4Anki7RadiansngEv ; Anki::Radians::operator -() const
                  |L21.408|
000198  492a              LDR      r1,|L21.580|
00019a  4668              MOV      r0,sp                 ;389
00019c  f7fffffe          BL       _ZN4AnkiltERKNS_7RadiansES2_ ; Anki::operator <(const Anki::Radians&, const Anki::Radians&)
0001a0  b118              CBZ      r0,|L21.426|
                  |L21.418|
0001a2  ed848a02          VSTR     s16,[r4,#8]           ;390
0001a6  2001              MOVS     r0,#1                 ;391
0001a8  7020              STRB     r0,[r4,#0]            ;391
                  |L21.426|
0001aa  68a0              LDR      r0,[r4,#8]            ;434  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e6power_E
0001ac  f1104f81          CMN      r0,#0x40800000        ;434
0001b0  d205              BCS      |L21.446|
0001b2  f1b05f7e          CMP      r0,#0x3f800000        ;434
0001b6  bfa8              IT       GE                    ;434
0001b8  ed9f0b25          VLDRGE   d0,|L21.592|
0001bc  da09              BGE      |L21.466|
                  |L21.446|
0001be  f1104f81          CMN      r0,#0x40800000        ;434
0001c2  bf28              IT       CS                    ;434
0001c4  ed9f0b24          VLDRCS   d0,|L21.600|
0001c8  d203              BCS      |L21.466|
0001ca  f7fffffe          BL       __aeabi_f2d
0001ce  ec410b10          VMOV     d0,r0,r1              ;434
                  |L21.466|
0001d2  ec510b10          VMOV     r0,r1,d0              ;434
0001d6  f7fffffe          BL       __aeabi_d2f
0001da  ee000a10          VMOV     s0,r0                 ;434
0001de  2003              MOVS     r0,#3                 ;464
0001e0  ed840a02          VSTR     s0,[r4,#8]            ;434
0001e4  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf ; Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
0001e8  e018              B        |L21.540|
                  |L21.490|
0001ea  ed941a0f          VLDR     s2,[r4,#0x3c]         ;470
0001ee  eef40a41          VCMP.F32 s1,s2                 ;470
0001f2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;470
0001f6  d111              BNE      |L21.540|
0001f8  edd41a13          VLDR     s3,[r4,#0x4c]         ;471
0001fc  ed941a15          VLDR     s2,[r4,#0x54]         ;471
000200  edd40a14          VLDR     s1,[r4,#0x50]         ;471
000204  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff ; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
000208  6ca0              LDR      r0,[r4,#0x48]         ;472  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e16numNodsComplete_E
00020a  1c40              ADDS     r0,r0,#1              ;472
00020c  64a0              STR      r0,[r4,#0x48]         ;473  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e16numNodsComplete_E
00020e  6c61              LDR      r1,[r4,#0x44]         ;473  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e15numNodsDesired_E
000210  2900              CMP      r1,#0                 ;473
000212  dd03              BLE      |L21.540|
000214  4281              CMP      r1,r0                 ;473
000216  bfdc              ITT      LE                    ;473
000218  2000              MOVLE    r0,#0                 ;473
00021a  7060              STRBLE   r0,[r4,#1]            ;473
                  |L21.540|
00021c  2000              MOVS     r0,#0                 ;479
00021e  b00d              ADD      sp,sp,#0x34
000220  ecbd8b02          VPOP     {d8}
000224  bd30              POP      {r4,r5,pc}
;;;481        
                          ENDP

000226  0000              DCW      0x0000
                  |L21.552|
                          DCD      ||.data||
                  |L21.556|
                          DCD      ||.data||+0x70
                  |L21.560|
                          DCD      ||.data||+0xc
                  |L21.564|
                          DCD      ||.bss||
                  |L21.568|
                          DCD      ||.data||+0x68
                  |L21.572|
00023c  3e4faace          DCFS     0x3e4faace ; 0.20280000567436218
                  |L21.576|
000240  be379a6b          DCFS     0xbe379a6b ; -0.17929999530315399
                  |L21.580|
                          DCD      ||.data||+0x60
                  |L21.584|
000248  00000000          DCFS     0x00000000 ; 0
                          DCD      0x00000000
                  |L21.592|
000250  00000000          DCFD     0x3ff0000000000000 ; 1
000254  3ff00000
                  |L21.600|
000258  00000000          DCFD     0xbff0000000000000 ; -1
00025c  bff00000

                          AREA ||i._ZN4Anki5Cozmo14HeadController7DisableEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController7DisableEv PROC ; Anki::Cozmo::HeadController::Disable()
;;;107        
;;;108        void Disable()
000000  4901              LDR      r1,|L22.8|
;;;109        {
;;;110          enable_ = false;
000002  2000              MOVS     r0,#0
000004  7108              STRB     r0,[r1,#4]
;;;111        }
000006  4770              BX       lr
;;;112        
                          ENDP

                  |L22.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController8IsMovingEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController8IsMovingEv PROC ; Anki::Cozmo::HeadController::IsMoving()
;;;142        
;;;143        bool IsMoving()
000000  4808              LDR      r0,|L23.36|
;;;144        {
;;;145          return (ABS(radSpeed_) > MAX_HEAD_CONSIDERED_STOPPED_RAD_PER_SEC);
000002  ed900a0b          VLDR     s0,[r0,#0x2c]
000006  eeb50ac0          VCMPE.F32 s0,#0.0
00000a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000e  bfb8              IT       LT
000010  eeb10a40          VNEGLT.F32 s0,s0
000014  ee100a10          VMOV     r0,s0
000018  4903              LDR      r1,|L23.40|
00001a  4288              CMP      r0,r1
00001c  bfcc              ITE      GT
00001e  2001              MOVGT    r0,#1
000020  2000              MOVLE    r0,#0
;;;146        }
000022  4770              BX       lr
;;;147        
                          ENDP

                  |L23.36|
                          DCD      ||.data||
                  |L23.40|
                          DCD      0x3a83126f

                          AREA ||i._ZN4Anki5Cozmo14HeadController8SetGainsEfff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController8SetGainsEfff PROC ; Anki::Cozmo::HeadController::SetGains(float, float, float)
;;;481        
;;;482        void SetGains(const f32 kp, const f32 ki, const f32 maxIntegralError)
000000  4803              LDR      r0,|L24.16|
;;;483        {
;;;484          Kp_ = kp;
000002  ed800a08          VSTR     s0,[r0,#0x20]
;;;485          Ki_ = ki;
000006  edc00a09          VSTR     s1,[r0,#0x24]
;;;486          MAX_ERROR_SUM = maxIntegralError;
00000a  ed801a0a          VSTR     s2,[r0,#0x28]
;;;487        }
00000e  4770              BX       lr
;;;488        
                          ENDP

                  |L24.16|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14HeadController9IsNoddingEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController9IsNoddingEv PROC ; Anki::Cozmo::HeadController::IsNodding()
;;;522        
;;;523        bool IsNodding()
000000  4801              LDR      r0,|L25.8|
;;;524        {
;;;525          return isNodding_;
000002  7840              LDRB     r0,[r0,#1]  ; _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e10isNodding_E
;;;526        }
000004  4770              BX       lr
;;;527        
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      ||.data||

                          AREA ||i.__sti___18_headController_cpp_d23a1f8e||, CODE, READONLY, ALIGN=2

                  __sti___18_headController_cpp_d23a1f8e PROC
000000  b510              PUSH     {r4,lr}
000002  4810              LDR      r0,|L26.68|
000004  ed9f0a0e          VLDR     s0,|L26.64|
000008  ed2d8b02          VPUSH    {d8}
00000c  ed800a17          VSTR     s0,[r0,#0x5c]
000010  ed9f0a0d          VLDR     s0,|L26.72|
000014  3060              ADDS     r0,r0,#0x60
000016  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
00001a  ed9f8a0c          VLDR     s16,|L26.76|
00001e  480c              LDR      r0,|L26.80|
000020  eeb00a48          VMOV.F32 s0,s16
000024  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
000028  eeb00a48          VMOV.F32 s0,s16
00002c  4809              LDR      r0,|L26.84|
00002e  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
000032  ecbd8b02          VPOP     {d8}
000036  4808              LDR      r0,|L26.88|
000038  e8bd4010          POP      {r4,lr}
00003c  f7ffbffe          B.W      _ZN4Anki24VelocityProfileGeneratorC1Ev ; Anki::VelocityProfileGenerator::VelocityProfileGenerator()
                          ENDP

                  |L26.64|
000040  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L26.68|
                          DCD      ||.data||
                  |L26.72|
000048  3d567750          DCFS     0x3d567750 ; 0.052359879016876221
                  |L26.76|
00004c  00000000          DCFS     0x00000000 ; 0
                  |L26.80|
                          DCD      ||.data||+0x68
                  |L26.84|
                          DCD      ||.data||+0x70
                  |L26.88|
                          DCD      ||.bss||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController6EnableEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController6EnableEv||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController7DisableEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController7DisableEv||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController23StartCalibrationRoutineEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController23StartCalibrationRoutineEv||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController12IsCalibratedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController12IsCalibratedEv||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController21ResetLowAnglePositionEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController21ResetLowAnglePositionEv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController8IsMovingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController8IsMovingEv||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController18SetAngularVelocityEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController18SetAngularVelocityEf||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController4StopEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController4StopEv||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController17CalibrationUpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController17CalibrationUpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController11GetAngleRadEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController11GetAngleRadEv||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController11SetAngleRadEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController11SetAngleRadEf||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController21GetLastCommandedAngleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController21GetLastCommandedAngleEv||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController10GetCamPoseERfS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController10GetCamPoseERfS2_S2_||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController24PoseAndSpeedFilterUpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController24PoseAndSpeedFilterUpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController16SetSpeedAndAccelEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController16SetSpeedAndAccelEff||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController16GetSpeedAndAccelERfS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController16GetSpeedAndAccelERfS2_||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController9IsNoddingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController9IsNoddingEv||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController15SetDesiredAngleEffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController15SetDesiredAngleEffff||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController12IsInPositionEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController12IsInPositionEv||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController11StopNoddingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController11StopNoddingEv||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController6UpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController6UpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController8SetGainsEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController8SetGainsEfff||
                          DCD      0x00000001

                          AREA ||area_number.51||, LINKORDER=||i._ZN4Anki5Cozmo14HeadController12StartNoddingEfftiff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14HeadController12StartNoddingEfftiff||
                          DCD      0x00000001

                          AREA ||area_number.52||, LINKORDER=||i.__sti___18_headController_cpp_d23a1f8e||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___18_headController_cpp_d23a1f8e||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e4vpg_E ; Anki::Cozmo::HeadController::<unnamed>::vpg_
                          %        80

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo19NECK_JOINT_POSITIONE ; Anki::Cozmo::NECK_JOINT_POSITION
000000  c1500000          DCFS     0xc1500000 ; -13
000004  00000000          DCFS     0x00000000 ; 0
000008  423ecccd          DCFS     0x423ecccd ; 47.700000762939453

                          AREA ||area_number.57||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.constdata||
                  _ZN4Anki5Cozmo17HEAD_CAM_POSITIONE ; Anki::Cozmo::HEAD_CAM_POSITION
000000  4099999a          DCFS     0x4099999a ; 4.8000001907348633
000004  00000000          DCFS     0x00000000 ; 0
000008  c0c00000          DCFS     0xc0c00000 ; -6

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4641494c          DCB      "FAIL: HEAD VPG (fixedDuration): startVel %f, startPos %"
000004  3a204845
000008  41442056
00000c  50472028
000010  66697865
000014  64447572
000018  6174696f
00001c  6e293a20
000020  73746172
000024  7456656c
000028  2025662c
00002c  20737461
000030  7274506f
000034  732025  
000037  662c2061          DCB      "f, acc_start_frac %f, acc_end_frac %f, endPos %f, durat"
00003b  63635f73
00003f  74617274
000043  5f667261
000047  63202566
00004b  2c206163
00004f  635f656e
000053  645f6672
000057  61632025
00005b  662c2065
00005f  6e64506f
000063  73202566
000067  2c206475
00006b  726174  
00006e  696f6e20          DCB      "ion %f.  Trying VPG without fixed duration.\n",0
000072  25662e20
000076  20547279
00007a  696e6720
00007e  56504720
000082  77697468
000086  6f757420
00008a  66697865
00008e  64206475
000092  72617469
000096  6f6e2e0a
00009a  00      

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e11inPosition_E ; Anki::Cozmo::HeadController::<unnamed>::inPosition_
000000  01                DCB      0x01
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e10isNodding_E ; Anki::Cozmo::HeadController::<unnamed>::isNodding_
000001  00                DCB      0x00
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e9calState_E ; Anki::Cozmo::HeadController::<unnamed>::calState_
000002  00                DCB      0x00
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e13isCalibrated_E ; Anki::Cozmo::HeadController::<unnamed>::isCalibrated_
000003  00                DCB      0x00
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e7enable_E ; Anki::Cozmo::HeadController::<unnamed>::enable_
000004  01000000          DCB      0x01,0x00,0x00,0x00
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e6power_E ; Anki::Cozmo::HeadController::<unnamed>::power_
000008  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e17currDesiredAngle_E ; Anki::Cozmo::HeadController::<unnamed>::currDesiredAngle_
00000c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e18currDesiredRadVel_E ; Anki::Cozmo::HeadController::<unnamed>::currDesiredRadVel_
000010  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e11angleError_E ; Anki::Cozmo::HeadController::<unnamed>::angleError_
000014  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e14angleErrorSum_E ; Anki::Cozmo::HeadController::<unnamed>::angleErrorSum_
000018  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e11prevHalPos_E ; Anki::Cozmo::HeadController::<unnamed>::prevHalPos_
00001c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e3Kp_E ; Anki::Cozmo::HeadController::<unnamed>::Kp_
000020  40000000          DCFS     0x40000000 ; 2
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e3Ki_E ; Anki::Cozmo::HeadController::<unnamed>::Ki_
000024  3d4ccccd          DCFS     0x3d4ccccd ; 0.05000000074505806
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e13MAX_ERROR_SUME ; Anki::Cozmo::HeadController::<unnamed>::MAX_ERROR_SUM
000028  40800000          DCFS     0x40800000 ; 4
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e9radSpeed_E ; Anki::Cozmo::HeadController::<unnamed>::radSpeed_
00002c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e12maxSpeedRad_E ; Anki::Cozmo::HeadController::<unnamed>::maxSpeedRad_
000030  3f800000          DCFS     0x3f800000 ; 1
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e9accelRad_E ; Anki::Cozmo::HeadController::<unnamed>::accelRad_
000034  40000000          DCFS     0x40000000 ; 2
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e17approachSpeedRad_E ; Anki::Cozmo::HeadController::<unnamed>::approachSpeedRad_
000038  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e12nodLowAngle_E ; Anki::Cozmo::HeadController::<unnamed>::nodLowAngle_
00003c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e13nodHighAngle_E ; Anki::Cozmo::HeadController::<unnamed>::nodHighAngle_
000040  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e15numNodsDesired_E ; Anki::Cozmo::HeadController::<unnamed>::numNodsDesired_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e16numNodsComplete_E ; Anki::Cozmo::HeadController::<unnamed>::numNodsComplete_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e18nodHalfPeriod_sec_E ; Anki::Cozmo::HeadController::<unnamed>::nodHalfPeriod_sec_
00004c  3f000000          DCFS     0x3f000000 ; 0.5
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e19nodEaseOutFraction_E ; Anki::Cozmo::HeadController::<unnamed>::nodEaseOutFraction_
000050  3f000000          DCFS     0x3f000000 ; 0.5
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e18nodEaseInFraction_E ; Anki::Cozmo::HeadController::<unnamed>::nodEaseInFraction_
000054  3f000000          DCFS     0x3f000000 ; 0.5
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e20lastHeadMovedTime_usE ; Anki::Cozmo::HeadController::<unnamed>::lastHeadMovedTime_us
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e15ANGLE_TOLERANCEE ; Anki::Cozmo::HeadController::<unnamed>::ANGLE_TOLERANCE
                          %        8
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e13currentAngle_E ; Anki::Cozmo::HeadController::<unnamed>::currentAngle_
                          %        8
                  _ZN4Anki5Cozmo14HeadController42_GLOBAL__N__18_headController_cpp_d23a1f8e13desiredAngle_E ; Anki::Cozmo::HeadController::<unnamed>::desiredAngle_
                          %        8

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___18_headController_cpp_d23a1f8e
