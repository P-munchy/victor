; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\heatshrink_encoder.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\heatshrink_encoder.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DANKICORETECH_EMBEDDED_USE_HEATSHRINK -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\heatshrink_encoder.crf ..\..\coretech-external\heatshrink\heatshrink_encoder.cpp]
                          THUMB

                          AREA ||i._Z23heatshrink_encoder_pollP18heatshrink_encoderPhjPj||, CODE, READONLY, ALIGN=1

                  _Z23heatshrink_encoder_pollP18heatshrink_encoderPhjPj PROC ; heatshrink_encoder_poll(heatshrink_encoder*, unsigned char*, unsigned, unsigned*)
;;;202    
;;;203    HSE_poll_res heatshrink_encoder_poll(heatshrink_encoder *hse,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;204            uint8_t *out_buf, size_t out_buf_size, size_t *output_size) {
000004  f5ad7d05          SUB      sp,sp,#0x214
000008  0004              MOVS     r4,r0
;;;205        if ((hse == NULL) || (out_buf == NULL) || (output_size == NULL)) {
00000a  bf1d              ITTTE    NE
00000c  2900              CMPNE    r1,#0
00000e  9888              LDRNE    r0,[sp,#0x220]
000010  2800              CMPNE    r0,#0
;;;206            return HSER_POLL_ERROR_NULL;
000012  f04f30ff          MOVEQ    r0,#0xffffffff
;;;207        }
;;;208        if (out_buf_size == 0) {
;;;209            LOG("-- MISUSE: output buffer size is 0\n");
;;;210            return HSER_POLL_ERROR_MISUSE;
;;;211        }
;;;212        *output_size = 0;
;;;213    
;;;214        output_info oi;
;;;215        oi.buf = out_buf;
;;;216        oi.buf_size = out_buf_size;
;;;217        oi.output_size = output_size;
;;;218    
;;;219        while (1) {
;;;220            LOG("-- polling, state %u (%s), flags 0x%02x\n",
;;;221                hse->state, state_names[hse->state], hse->flags);
;;;222    
;;;223            uint8_t in_state = hse->state;
;;;224            switch (in_state) {
;;;225            case HSES_NOT_FULL:
;;;226                return HSER_POLL_EMPTY;
;;;227            case HSES_FILLED:
;;;228                do_indexing(hse);
;;;229                hse->state = HSES_SEARCH;
;;;230                break;
;;;231            case HSES_SEARCH:
;;;232                hse->state = st_step_search(hse);
;;;233                break;
;;;234            case HSES_YIELD_TAG_BIT:
;;;235                hse->state = st_yield_tag_bit(hse, &oi);
;;;236                break;
;;;237            case HSES_YIELD_LITERAL:
;;;238                hse->state = st_yield_literal(hse, &oi);
;;;239                break;
;;;240            case HSES_YIELD_BR_INDEX:
;;;241                hse->state = st_yield_br_index(hse, &oi);
;;;242                break;
;;;243            case HSES_YIELD_BR_LENGTH:
;;;244                hse->state = st_yield_br_length(hse, &oi);
;;;245                break;
;;;246            case HSES_SAVE_BACKLOG:
;;;247                hse->state = st_save_backlog(hse);
;;;248                break;
;;;249            case HSES_FLUSH_BITS:
;;;250                hse->state = st_flush_bit_buffer(hse, &oi);
;;;251            case HSES_DONE:
;;;252                return HSER_POLL_EMPTY;
;;;253            default:
;;;254                LOG("-- bad state %s\n", state_names[hse->state]);
;;;255                return HSER_POLL_ERROR_MISUSE;
;;;256            }
;;;257    
;;;258            if (hse->state == in_state) {
;;;259                /* Check if output buffer is exhausted. */
;;;260                if (*output_size == out_buf_size) return HSER_POLL_MORE;
;;;261            }
;;;262        }
;;;263    }
000016  bf04              ITT      EQ
000018  f50d7d09          ADDEQ    sp,sp,#0x224
00001c  e8bd8ff0          POPEQ    {r4-r11,pc}
000020  9887              LDR      r0,[sp,#0x21c]        ;208
000022  2800              CMP      r0,#0                 ;208
000024  f00081b1          BEQ.W    |L1.906|
000028  9888              LDR      r0,[sp,#0x220]        ;212
00002a  2200              MOVS     r2,#0                 ;212
00002c  6002              STR      r2,[r0,#0]            ;215
00002e  9887              LDR      r0,[sp,#0x21c]        ;216
000030  9081              STR      r0,[sp,#0x204]        ;217
000032  9888              LDR      r0,[sp,#0x220]        ;217
000034  9180              STR      r1,[sp,#0x200]        ;216
000036  9082              STR      r0,[sp,#0x208]        ;217
                  |L1.56|
000038  7b20              LDRB     r0,[r4,#0xc]          ;223
00003a  9083              STR      r0,[sp,#0x20c]        ;224
00003c  280a              CMP      r0,#0xa               ;224
00003e  f08081a4          BCS.W    |L1.906|
000042  e8dff000          TBB      [pc,r0]               ;224
000046  fd05              DCB      0xfd,0x05
000048  29c5e0fc          DCB      0x29,0xc5,0xe0,0xfc
00004c  fbfaf9fd          DCB      0xfb,0xfa,0xf9,0xfd
000050  f1040610          ADD      r6,r4,#0x10           ;224
000054  22ff              MOVS     r2,#0xff              ;224
000056  f44f7100          MOV      r1,#0x200             ;224
00005a  4668              MOV      r0,sp                 ;224
00005c  f7fffffe          BL       __aeabi_memset
000060  8820              LDRH     r0,[r4,#0]            ;224
000062  f5043580          ADD      r5,r4,#0x10000        ;224
000066  f5004080          ADD      r0,r0,#0x4000         ;224
00006a  b282              UXTH     r2,r0                 ;224
00006c  3512              ADDS     r5,r5,#0x12           ;224
00006e  2000              MOVS     r0,#0                 ;224
000070  f1060c02          ADD      r12,r6,#2             ;224
000074  2a00              CMP      r2,#0                 ;224
000076  bf88              IT       HI                    ;224
000078  466e              MOVHI    r6,sp                 ;224
00007a  d90a              BLS      |L1.146|
                  |L1.124|
00007c  5c29              LDRB     r1,[r5,r0]            ;224
00007e  f8363011          LDRH     r3,[r6,r1,LSL #1]     ;224
000082  f82c3010          STRH     r3,[r12,r0,LSL #1]    ;224
000086  f8260011          STRH     r0,[r6,r1,LSL #1]     ;224
00008a  1c40              ADDS     r0,r0,#1              ;224
00008c  b280              UXTH     r0,r0                 ;224
00008e  4282              CMP      r2,r0                 ;224
000090  d8f4              BHI      |L1.124|
                  |L1.146|
000092  2002              MOVS     r0,#2                 ;229
000094  7320              STRB     r0,[r4,#0xc]          ;229
000096  e08b              B        |L1.432|
000098  7ae1              LDRB     r1,[r4,#0xb]          ;230
00009a  2340              MOVS     r3,#0x40              ;230
00009c  8860              LDRH     r0,[r4,#2]            ;230
00009e  f44f4880          MOV      r8,#0x4000            ;230
0000a2  f0110f01          TST      r1,#1                 ;230
0000a6  bf14              ITE      NE                    ;230
0000a8  f04f0c01          MOVNE    r12,#1                ;230
0000ac  f04f0c00          MOVEQ    r12,#0                ;230
0000b0  8822              LDRH     r2,[r4,#0]            ;230
0000b2  f1bc0f00          CMP      r12,#0                ;230
0000b6  bf14              ITE      NE                    ;230
0000b8  f04f0c00          MOVNE    r12,#0                ;230
0000bc  469c              MOVEQ    r12,r3                ;230
0000be  eba20c0c          SUB      r12,r2,r12            ;230
0000c2  4584              CMP      r12,r0                ;230
0000c4  bfd8              IT       LE                    ;230
0000c6  2007              MOVLE    r0,#7                 ;230
0000c8  dd71              BLE      |L1.430|
0000ca  f5004c80          ADD      r12,r0,#0x4000        ;230
0000ce  fa1ff98c          UXTH     r9,r12                ;230
0000d2  f0110f10          TST      r1,#0x10              ;230
0000d6  d005              BEQ      |L1.228|
0000d8  f5a9517c          SUB      r1,r9,#0x3f00         ;230
0000dc  39ff              SUBS     r1,r1,#0xff           ;230
0000de  fa1ff881          UXTH     r8,r1                 ;230
0000e2  e00b              B        |L1.252|
                  |L1.228|
0000e4  f0110f08          TST      r1,#8                 ;230
0000e8  d008              BEQ      |L1.252|
0000ea  f5a9517c          SUB      r1,r9,#0x3f00         ;230
0000ee  39ff              SUBS     r1,r1,#0xff           ;230
0000f0  fa1ff881          UXTH     r8,r1                 ;230
0000f4  f1b80f40          CMP      r8,#0x40              ;230
0000f8  bf38              IT       CC                    ;230
0000fa  4698              MOVCC    r8,r3                 ;230
                  |L1.252|
0000fc  1a10              SUBS     r0,r2,r0              ;230
0000fe  2840              CMP      r0,#0x40              ;230
000100  bfb8              IT       LT                    ;230
000102  b283              UXTHLT   r3,r0                 ;230
000104  2000              MOVS     r0,#0                 ;230
000106  f8ad0000          STRH     r0,[sp,#0]            ;230
00010a  4602              MOV      r2,r0                 ;230
00010c  f1040710          ADD      r7,r4,#0x10           ;230
000110  eb070049          ADD      r0,r7,r9,LSL #1       ;230
000114  f8cdd004          STR      sp,[sp,#4]            ;230
000118  f5043e80          ADD      lr,r4,#0x10000        ;230
00011c  f9b00002          LDRSH    r0,[r0,#2]            ;230
000120  f10e0e12          ADD      lr,lr,#0x12           ;230
000124  f64f7aff          MOV      r10,#0xffff           ;230
000128  eb0e0509          ADD      r5,lr,r9              ;230
00012c  4540              CMP      r0,r8                 ;230
00012e  db28              BLT      |L1.386|
                  |L1.304|
000130  eb0e0c00          ADD      r12,lr,r0             ;230
000134  5cae              LDRB     r6,[r5,r2]            ;230
000136  f81c1002          LDRB     r1,[r12,r2]           ;230
00013a  42b1              CMP      r1,r6                 ;230
00013c  d113              BNE      |L1.358|
00013e  2101              MOVS     r1,#1                 ;230
000140  2b01              CMP      r3,#1                 ;230
000142  d909              BLS      |L1.344|
                  |L1.324|
000144  f81c6001          LDRB     r6,[r12,r1]           ;230
000148  f815b001          LDRB     r11,[r5,r1]           ;230
00014c  455e              CMP      r6,r11                ;230
00014e  d103              BNE      |L1.344|
000150  1c49              ADDS     r1,r1,#1              ;230
000152  b289              UXTH     r1,r1                 ;230
000154  4299              CMP      r1,r3                 ;230
000156  d3f5              BCC      |L1.324|
                  |L1.344|
000158  4291              CMP      r1,r2                 ;230
00015a  d904              BLS      |L1.358|
00015c  460a              MOV      r2,r1                 ;230
00015e  fa1ffa80          UXTH     r10,r0                ;230
000162  4299              CMP      r1,r3                 ;230
000164  d005              BEQ      |L1.370|
                  |L1.358|
000166  eb070040          ADD      r0,r7,r0,LSL #1       ;230
00016a  f9b00002          LDRSH    r0,[r0,#2]            ;230
00016e  4540              CMP      r0,r8                 ;230
000170  dade              BGE      |L1.304|
                  |L1.370|
000172  2a03              CMP      r2,#3                 ;230
000174  d305              BCC      |L1.386|
000176  9801              LDR      r0,[sp,#4]            ;230
000178  8002              STRH     r2,[r0,#0]            ;230
00017a  eba9000a          SUB      r0,r9,r10             ;230
00017e  b280              UXTH     r0,r0                 ;230
000180  e001              B        |L1.390|
                  |L1.386|
000182  f64f70ff          MOV      r0,#0xffff            ;230
                  |L1.390|
000186  f5a0417f          SUB      r1,r0,#0xff00         ;230
00018a  39ff              SUBS     r1,r1,#0xff           ;230
00018c  d109              BNE      |L1.418|
00018e  8860              LDRH     r0,[r4,#2]            ;230
000190  1c40              ADDS     r0,r0,#1              ;230
000192  8060              STRH     r0,[r4,#2]            ;230
000194  7ae0              LDRB     r0,[r4,#0xb]          ;230
000196  f0400102          ORR      r1,r0,#2              ;230
00019a  72e1              STRB     r1,[r4,#0xb]          ;230
00019c  2000              MOVS     r0,#0                 ;230
00019e  80a0              STRH     r0,[r4,#4]            ;230
0001a0  e058              B        |L1.596|
                  |L1.418|
0001a2  80e0              STRH     r0,[r4,#6]            ;230
0001a4  f8bd1000          LDRH     r1,[sp,#0]            ;230
0001a8  80a1              STRH     r1,[r4,#4]            ;230
0001aa  e053              B        |L1.596|
0001ac  e7ff              B        |L1.430|
                  |L1.430|
0001ae  7320              STRB     r0,[r4,#0xc]          ;232
                  |L1.432|
0001b0  b2c1              UXTB     r1,r0                 ;258
0001b2  9883              LDR      r0,[sp,#0x20c]        ;258
0001b4  4281              CMP      r1,r0                 ;258
0001b6  f47faf3f          BNE      |L1.56|
0001ba  9888              LDR      r0,[sp,#0x220]        ;260
0001bc  6801              LDR      r1,[r0,#0]            ;260
0001be  9887              LDR      r0,[sp,#0x21c]        ;260
0001c0  4281              CMP      r1,r0                 ;260
0001c2  f47faf39          BNE      |L1.56|
0001c6  f50d7d09          ADD      sp,sp,#0x224
0001ca  2001              MOVS     r0,#1                 ;260
0001cc  e8bd8ff0          POP      {r4-r11,pc}
0001d0  9882              LDR      r0,[sp,#0x208]
0001d2  9981              LDR      r1,[sp,#0x204]
0001d4  ab80              ADD      r3,sp,#0x200          ;235
0001d6  6800              LDR      r0,[r0,#0]            ;235
0001d8  4288              CMP      r0,r1                 ;235
0001da  d23b              BCS      |L1.596|
0001dc  88a0              LDRH     r0,[r4,#4]            ;235
0001de  2800              CMP      r0,#0                 ;235
0001e0  4620              MOV      r0,r4                 ;235
0001e2  d00a              BEQ      |L1.506|
0001e4  2200              MOVS     r2,#0                 ;235
0001e6  2101              MOVS     r1,#1                 ;235
0001e8  f7fffffe          BL       _Z9push_bitsP18heatshrink_encoderhhP11output_info ; push_bits(heatshrink_encoder*, unsigned char, unsigned char, output_info*)
0001ec  88e0              LDRH     r0,[r4,#6]            ;235
0001ee  210e              MOVS     r1,#0xe               ;235
0001f0  1e40              SUBS     r0,r0,#1              ;235
0001f2  8120              STRH     r0,[r4,#8]            ;235
0001f4  72a1              STRB     r1,[r4,#0xa]          ;235
0001f6  2005              MOVS     r0,#5                 ;235
0001f8  e7d9              B        |L1.430|
                  |L1.506|
0001fa  2201              MOVS     r2,#1                 ;235
0001fc  4611              MOV      r1,r2                 ;235
0001fe  f7fffffe          BL       _Z9push_bitsP18heatshrink_encoderhhP11output_info ; push_bits(heatshrink_encoder*, unsigned char, unsigned char, output_info*)
000202  2004              MOVS     r0,#4                 ;235
000204  e7d3              B        |L1.430|
000206  9882              LDR      r0,[sp,#0x208]        ;235
000208  9981              LDR      r1,[sp,#0x204]        ;235
00020a  ab80              ADD      r3,sp,#0x200          ;238
00020c  6800              LDR      r0,[r0,#0]            ;238
00020e  4288              CMP      r0,r1                 ;238
000210  bf28              IT       CS                    ;238
000212  2004              MOVCS    r0,#4                 ;238
000214  d2cb              BCS      |L1.430|
000216  8861              LDRH     r1,[r4,#2]            ;238
000218  4620              MOV      r0,r4                 ;238
00021a  1e49              SUBS     r1,r1,#1              ;238
00021c  f5014180          ADD      r1,r1,#0x4000         ;238
000220  b289              UXTH     r1,r1                 ;238
000222  4421              ADD      r1,r1,r4              ;238
000224  f5013180          ADD      r1,r1,#0x10000        ;238
000228  7c8a              LDRB     r2,[r1,#0x12]         ;238
00022a  2108              MOVS     r1,#8                 ;238
00022c  f7fffffe          BL       _Z9push_bitsP18heatshrink_encoderhhP11output_info ; push_bits(heatshrink_encoder*, unsigned char, unsigned char, output_info*)
000230  7ae0              LDRB     r0,[r4,#0xb]          ;238
000232  f0200002          BIC      r0,r0,#2              ;238
000236  e004              B        |L1.578|
000238  e08c              B        |L1.852|
00023a  e05a              B        |L1.754|
00023c  e032              B        |L1.676|
00023e  e00b              B        |L1.600|
000240  e09e              B        |L1.896|
                  |L1.578|
000242  72e0              STRB     r0,[r4,#0xb]          ;238
000244  f0100f04          TST      r0,#4                 ;238
000248  d15f              BNE      |L1.778|
00024a  88a0              LDRH     r0,[r4,#4]            ;238
00024c  2800              CMP      r0,#0                 ;238
00024e  bf08              IT       EQ                    ;238
000250  2002              MOVEQ    r0,#2                 ;238
000252  d0ac              BEQ      |L1.430|
                  |L1.596|
000254  2003              MOVS     r0,#3                 ;238
000256  e7aa              B        |L1.430|
                  |L1.600|
000258  9882              LDR      r0,[sp,#0x208]        ;238
00025a  9981              LDR      r1,[sp,#0x204]        ;238
00025c  ab80              ADD      r3,sp,#0x200          ;241
00025e  6800              LDR      r0,[r0,#0]            ;241
000260  4281              CMP      r1,r0                 ;241
000262  d90a              BLS      |L1.634|
000264  7aa0              LDRB     r0,[r4,#0xa]          ;241
000266  4625              MOV      r5,r4                 ;241
000268  2808              CMP      r0,#8                 ;241
00026a  d908              BLS      |L1.638|
00026c  2608              MOVS     r6,#8                 ;241
00026e  8929              LDRH     r1,[r5,#8]            ;241
000270  3808              SUBS     r0,r0,#8              ;241
000272  fa21f000          LSR      r0,r1,r0              ;241
000276  b2c2              UXTB     r2,r0                 ;241
000278  e004              B        |L1.644|
                  |L1.634|
00027a  2005              MOVS     r0,#5                 ;241
00027c  e797              B        |L1.430|
                  |L1.638|
00027e  7a2a              LDRB     r2,[r5,#8]            ;241
000280  0006              MOVS     r6,r0                 ;241
000282  d008              BEQ      |L1.662|
                  |L1.644|
000284  4631              MOV      r1,r6                 ;241
000286  4620              MOV      r0,r4                 ;241
000288  f7fffffe          BL       _Z9push_bitsP18heatshrink_encoderhhP11output_info ; push_bits(heatshrink_encoder*, unsigned char, unsigned char, output_info*)
00028c  7aa8              LDRB     r0,[r5,#0xa]          ;241
00028e  1b80              SUBS     r0,r0,r6              ;241
000290  72a8              STRB     r0,[r5,#0xa]          ;241
000292  2e00              CMP      r6,#0                 ;241
000294  d1f1              BNE      |L1.634|
                  |L1.662|
000296  88a0              LDRH     r0,[r4,#4]            ;241
000298  1e40              SUBS     r0,r0,#1              ;241
00029a  8120              STRH     r0,[r4,#8]            ;241
00029c  2106              MOVS     r1,#6                 ;241
00029e  72a1              STRB     r1,[r4,#0xa]          ;241
0002a0  4608              MOV      r0,r1                 ;241
0002a2  e784              B        |L1.430|
                  |L1.676|
0002a4  9882              LDR      r0,[sp,#0x208]        ;241
0002a6  9981              LDR      r1,[sp,#0x204]        ;241
0002a8  ab80              ADD      r3,sp,#0x200          ;244
0002aa  6800              LDR      r0,[r0,#0]            ;244
0002ac  4281              CMP      r1,r0                 ;244
0002ae  d90a              BLS      |L1.710|
0002b0  7aa0              LDRB     r0,[r4,#0xa]          ;244
0002b2  4625              MOV      r5,r4                 ;244
0002b4  2808              CMP      r0,#8                 ;244
0002b6  d908              BLS      |L1.714|
0002b8  2608              MOVS     r6,#8                 ;244
0002ba  8929              LDRH     r1,[r5,#8]            ;244
0002bc  3808              SUBS     r0,r0,#8              ;244
0002be  fa21f000          LSR      r0,r1,r0              ;244
0002c2  b2c2              UXTB     r2,r0                 ;244
0002c4  e004              B        |L1.720|
                  |L1.710|
0002c6  2006              MOVS     r0,#6                 ;244
0002c8  e771              B        |L1.430|
                  |L1.714|
0002ca  7a2a              LDRB     r2,[r5,#8]            ;244
0002cc  0006              MOVS     r6,r0                 ;244
0002ce  d008              BEQ      |L1.738|
                  |L1.720|
0002d0  4631              MOV      r1,r6                 ;244
0002d2  4620              MOV      r0,r4                 ;244
0002d4  f7fffffe          BL       _Z9push_bitsP18heatshrink_encoderhhP11output_info ; push_bits(heatshrink_encoder*, unsigned char, unsigned char, output_info*)
0002d8  7aa8              LDRB     r0,[r5,#0xa]          ;244
0002da  1b80              SUBS     r0,r0,r6              ;244
0002dc  72a8              STRB     r0,[r5,#0xa]          ;244
0002de  2e00              CMP      r6,#0                 ;244
0002e0  d1f1              BNE      |L1.710|
                  |L1.738|
0002e2  8861              LDRH     r1,[r4,#2]            ;244
0002e4  88a0              LDRH     r0,[r4,#4]            ;244
0002e6  4408              ADD      r0,r0,r1              ;244
0002e8  8060              STRH     r0,[r4,#2]            ;244
0002ea  2100              MOVS     r1,#0                 ;244
0002ec  80a1              STRH     r1,[r4,#4]            ;244
0002ee  2002              MOVS     r0,#2                 ;244
0002f0  e75d              B        |L1.430|
                  |L1.754|
0002f2  7ae0              LDRB     r0,[r4,#0xb]          ;244
0002f4  f0100f01          TST      r0,#1                 ;244
0002f8  d009              BEQ      |L1.782|
0002fa  f0100f02          TST      r0,#2                 ;244
0002fe  d004              BEQ      |L1.778|
000300  f0400104          ORR      r1,r0,#4              ;244
000304  72e1              STRB     r1,[r4,#0xb]          ;244
000306  2003              MOVS     r0,#3                 ;244
000308  e751              B        |L1.430|
                  |L1.778|
00030a  2008              MOVS     r0,#8                 ;244
00030c  e74f              B        |L1.430|
                  |L1.782|
00030e  8860              LDRH     r0,[r4,#2]            ;244
000310  4625              MOV      r5,r4                 ;244
000312  f5c04080          RSB      r0,r0,#0x4000         ;244
000316  b280              UXTH     r0,r0                 ;244
000318  f5004180          ADD      r1,r0,#0x4000         ;244
00031c  f5c04680          RSB      r6,r0,#0x4000         ;244
000320  b28a              UXTH     r2,r1                 ;244
000322  1970              ADDS     r0,r6,r5              ;244
000324  f5003180          ADD      r1,r0,#0x10000        ;244
000328  f5043080          ADD      r0,r4,#0x10000        ;244
00032c  3112              ADDS     r1,r1,#0x12           ;244
00032e  3012              ADDS     r0,r0,#0x12           ;244
000330  f7fffffe          BL       __aeabi_memmove
000334  7ae8              LDRB     r0,[r5,#0xb]          ;244
000336  f0100f08          TST      r0,#8                 ;244
00033a  bf14              ITE      NE                    ;244
00033c  f0400010          ORRNE    r0,r0,#0x10           ;244
000340  f0400008          ORREQ    r0,r0,#8              ;244
000344  72e8              STRB     r0,[r5,#0xb]          ;244
000346  2000              MOVS     r0,#0                 ;244
000348  8068              STRH     r0,[r5,#2]            ;244
00034a  8828              LDRH     r0,[r5,#0]            ;244
00034c  1b80              SUBS     r0,r0,r6              ;244
00034e  8028              STRH     r0,[r5,#0]            ;244
000350  2000              MOVS     r0,#0                 ;244
000352  e72c              B        |L1.430|
                  |L1.852|
000354  7ba0              LDRB     r0,[r4,#0xe]          ;244
000356  2880              CMP      r0,#0x80              ;244
000358  bf08              IT       EQ                    ;244
00035a  2009              MOVEQ    r0,#9                 ;244
00035c  d00f              BEQ      |L1.894|
00035e  9882              LDR      r0,[sp,#0x208]        ;244
000360  9981              LDR      r1,[sp,#0x204]        ;244
000362  6800              LDR      r0,[r0,#0]            ;244
000364  4288              CMP      r0,r1                 ;244
000366  bf28              IT       CS                    ;244
000368  2008              MOVCS    r0,#8                 ;244
00036a  d208              BCS      |L1.894|
00036c  f8ddc208          LDR      r12,[sp,#0x208]       ;244
000370  9a80              LDR      r2,[sp,#0x200]        ;244
000372  7b61              LDRB     r1,[r4,#0xd]          ;244
000374  1c43              ADDS     r3,r0,#1              ;244
000376  f8cc3000          STR      r3,[r12,#0]           ;244
00037a  5411              STRB     r1,[r2,r0]            ;244
00037c  2009              MOVS     r0,#9                 ;244
                  |L1.894|
00037e  7320              STRB     r0,[r4,#0xc]          ;250
                  |L1.896|
000380  f50d7d09          ADD      sp,sp,#0x224
000384  2000              MOVS     r0,#0                 ;252
000386  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.906|
00038a  f50d7d09          ADD      sp,sp,#0x224
00038e  f06f0001          MVN      r0,#1                 ;255
000392  e8bd8ff0          POP      {r4-r11,pc}
;;;264    
                          ENDP


                          AREA ||i._Z23heatshrink_encoder_sinkP18heatshrink_encoderPhjPj||, CODE, READONLY, ALIGN=1

                  _Z23heatshrink_encoder_sinkP18heatshrink_encoderPhjPj PROC ; heatshrink_encoder_sink(heatshrink_encoder*, unsigned char*, unsigned, unsigned*)
;;;149    
;;;150    HSE_sink_res heatshrink_encoder_sink(heatshrink_encoder *hse,
000000  2800              CMP      r0,#0
;;;151            uint8_t *in_buf, size_t size, size_t *input_size) {
;;;152        if ((hse == NULL) || (in_buf == NULL) || (input_size == NULL)) {
000002  bf19              ITTEE    NE
000004  2900              CMPNE    r1,#0
000006  2b00              CMPNE    r3,#0
;;;153            return HSER_SINK_ERROR_NULL;
000008  f04f30ff          MOVEQ    r0,#0xffffffff
;;;154        }
;;;155    
;;;156        /* Sinking more content after saying the content is done, tsk tsk */
;;;157        if (is_finishing(hse)) { return HSER_SINK_ERROR_MISUSE; }
;;;158    
;;;159        /* Sinking more content before processing is done */
;;;160        if (hse->state != HSES_NOT_FULL) { return HSER_SINK_ERROR_MISUSE; }
;;;161    
;;;162        uint16_t write_offset = get_input_offset(hse) + hse->input_size;
;;;163        uint16_t ibs = get_input_buffer_size(hse);
;;;164        uint16_t rem = ibs - hse->input_size;
;;;165        uint16_t cp_sz = rem < size ? rem : size;
;;;166    
;;;167        memcpy(&hse->buffer[write_offset], in_buf, cp_sz);
;;;168        *input_size = cp_sz;
;;;169        hse->input_size += cp_sz;
;;;170    
;;;171        LOG("-- sunk %u bytes (of %zu) into encoder at %d, input buffer now has %u\n",
;;;172            cp_sz, size, write_offset, hse->input_size);
;;;173        if (cp_sz == rem) {
;;;174            LOG("-- internal buffer is now full\n");
;;;175            hse->state = HSES_FILLED;
;;;176        }
;;;177    
;;;178        return HSER_SINK_OK;
;;;179    }
00000c  4770              BXEQ     lr
00000e  e92d41f0          PUSH     {r4-r8,lr}            ;151
000012  4604              MOV      r4,r0                 ;151
000014  7ac0              LDRB     r0,[r0,#0xb]          ;151
000016  461f              MOV      r7,r3                 ;151
000018  f0100f01          TST      r0,#1                 ;151
00001c  bf07              ITTEE    EQ                    ;160
00001e  7b20              LDRBEQ   r0,[r4,#0xc]          ;160
000020  2800              CMPEQ    r0,#0                 ;160
000022  f06f0001          MVNNE    r0,#1                 ;160
000026  e8bd81f0          POPNE    {r4-r8,pc}
00002a  8820              LDRH     r0,[r4,#0]            ;162
00002c  f5004380          ADD      r3,r0,#0x4000         ;162
000030  f5c04080          RSB      r0,r0,#0x4000         ;164
000034  b286              UXTH     r6,r0                 ;164
000036  b29b              UXTH     r3,r3                 ;162
000038  4296              CMP      r6,r2                 ;165
00003a  bf38              IT       CC                    ;165
00003c  4632              MOVCC    r2,r6                 ;165
00003e  b295              UXTH     r5,r2                 ;165
000040  18e0              ADDS     r0,r4,r3              ;167
000042  f5003080          ADD      r0,r0,#0x10000        ;167
000046  3012              ADDS     r0,r0,#0x12           ;167
000048  462a              MOV      r2,r5                 ;167
00004a  f7fffffe          BL       __aeabi_memcpy
00004e  603d              STR      r5,[r7,#0]            ;169
000050  8820              LDRH     r0,[r4,#0]            ;169
000052  42b5              CMP      r5,r6                 ;173
000054  4428              ADD      r0,r0,r5              ;169
000056  8020              STRH     r0,[r4,#0]            ;169
000058  bf04              ITT      EQ                    ;175
00005a  2001              MOVEQ    r0,#1                 ;175
00005c  7320              STRBEQ   r0,[r4,#0xc]          ;175
00005e  2000              MOVS     r0,#0                 ;178
000060  e8bd81f0          POP      {r4-r8,pc}
;;;180    
                          ENDP


                          AREA ||i._Z24heatshrink_encoder_resetP18heatshrink_encoder||, CODE, READONLY, ALIGN=1

                  _Z24heatshrink_encoder_resetP18heatshrink_encoder PROC ; heatshrink_encoder_reset(heatshrink_encoder*)
;;;130    
;;;131    void heatshrink_encoder_reset(heatshrink_encoder *hse) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;132        size_t buf_sz = (2 << HEATSHRINK_ENCODER_WINDOW_BITS(hse));
;;;133        memset(hse->buffer, 0, buf_sz);
000004  f5003080          ADD      r0,r0,#0x10000
000008  f44f4100          MOV      r1,#0x8000            ;132
00000c  3012              ADDS     r0,r0,#0x12
00000e  f7fffffe          BL       __aeabi_memclr
;;;134        hse->input_size = 0;
000012  2000              MOVS     r0,#0
000014  8020              STRH     r0,[r4,#0]
;;;135        hse->state = HSES_NOT_FULL;
000016  7320              STRB     r0,[r4,#0xc]
;;;136        hse->match_scan_index = 0;
000018  8060              STRH     r0,[r4,#2]
;;;137        hse->flags = 0;
00001a  72e0              STRB     r0,[r4,#0xb]
;;;138        hse->bit_index = 0x80;
00001c  2180              MOVS     r1,#0x80
00001e  73a1              STRB     r1,[r4,#0xe]
;;;139        hse->current_byte = 0x00;
000020  7360              STRB     r0,[r4,#0xd]
;;;140        hse->match_length = 0;
000022  80a0              STRH     r0,[r4,#4]
;;;141    
;;;142        hse->outgoing_bits = 0x0000;
000024  8120              STRH     r0,[r4,#8]
;;;143        hse->outgoing_bits_count = 0;
000026  72a0              STRB     r0,[r4,#0xa]
;;;144    
;;;145        #ifdef LOOP_DETECT
;;;146        hse->loop_detect = (uint32_t)-1;
;;;147        #endif
;;;148    }
000028  bd10              POP      {r4,pc}
;;;149    
                          ENDP


                          AREA ||i._Z25heatshrink_encoder_finishP18heatshrink_encoder||, CODE, READONLY, ALIGN=1

                  _Z25heatshrink_encoder_finishP18heatshrink_encoder PROC ; heatshrink_encoder_finish(heatshrink_encoder*)
;;;264    
;;;265    HSE_finish_res heatshrink_encoder_finish(heatshrink_encoder *hse) {
000000  2800              CMP      r0,#0
;;;266        if (hse == NULL) { return HSER_FINISH_ERROR_NULL; }
000002  bf04              ITT      EQ
000004  f04f30ff          MOVEQ    r0,#0xffffffff
;;;267        LOG("-- setting is_finishing flag\n");
;;;268        hse->flags |= FLAG_IS_FINISHING;
;;;269        if (hse->state == HSES_NOT_FULL) { hse->state = HSES_FILLED; }
;;;270        return hse->state == HSES_DONE ? HSER_FINISH_DONE : HSER_FINISH_MORE;
;;;271    }
000008  4770              BXEQ     lr
00000a  7ac1              LDRB     r1,[r0,#0xb]          ;268
00000c  f0410101          ORR      r1,r1,#1              ;268
000010  72c1              STRB     r1,[r0,#0xb]          ;268
000012  7b01              LDRB     r1,[r0,#0xc]          ;269
000014  2900              CMP      r1,#0                 ;269
000016  bf04              ITT      EQ                    ;269
000018  2101              MOVEQ    r1,#1                 ;269
00001a  7301              STRBEQ   r1,[r0,#0xc]          ;269
00001c  d003              BEQ      |L4.38|
00001e  2909              CMP      r1,#9                 ;270
000020  bf04              ITT      EQ                    ;270
000022  2000              MOVEQ    r0,#0                 ;270
000024  4770              BXEQ     lr
                  |L4.38|
000026  2001              MOVS     r0,#1                 ;270
000028  4770              BX       lr
;;;272    
                          ENDP


                          AREA ||i._Z9push_bitsP18heatshrink_encoderhhP11output_info||, CODE, READONLY, ALIGN=1

                  _Z9push_bitsP18heatshrink_encoderhhP11output_info PROC ; push_bits(heatshrink_encoder*, unsigned char, unsigned char, output_info*)
;;;591     * Bytes are set from the lowest bits, up. */
;;;592    static void push_bits(heatshrink_encoder *hse, uint8_t count, uint8_t bits,
000000  e92d07f0          PUSH     {r4-r10}
;;;593            output_info *oi) {
;;;594        ASSERT(count <= 8);
;;;595        LOG("++ push_bits: %d bits, input of 0x%02x\n", count, bits);
;;;596    
;;;597        /* If adding a whole byte and at the start of a new output byte,
;;;598         * just push it through whole and skip the bit IO loop. */
;;;599        if (count == 8 && hse->bit_index == 0x80) {
000004  2908              CMP      r1,#8
000006  bf04              ITT      EQ
000008  f890c00e          LDRBEQ   r12,[r0,#0xe]
00000c  f1bc0f80          CMPEQ    r12,#0x80
000010  d020              BEQ      |L5.84|
;;;600            oi->buf[(*oi->output_size)++] = bits;
;;;601        } else {
;;;602            for (int i=count - 1; i>=0; i--) {
000012  1e49              SUBS     r1,r1,#1
;;;603                bool bit = bits & (1 << i);
;;;604                if (bit) { hse->current_byte |= hse->bit_index; }
;;;605                if (0) {
;;;606                    LOG("  -- setting bit %d at bit index 0x%02x, byte => 0x%02x\n",
;;;607                        bit ? 1 : 0, hse->bit_index, hse->current_byte);
;;;608                }
;;;609                hse->bit_index >>= 1;
;;;610                if (hse->bit_index == 0x00) {
;;;611                    hse->bit_index = 0x80;
;;;612                    LOG(" > pushing byte 0x%02x\n", hse->current_byte);
;;;613                    oi->buf[(*oi->output_size)++] = hse->current_byte;
;;;614                    hse->current_byte = 0x00;
;;;615                }
;;;616            }
;;;617        }
;;;618    }
000014  bf44              ITT      MI
000016  e8bd07f0          POPMI    {r4-r10}
00001a  4770              BXMI     lr
00001c  2501              MOVS     r5,#1                 ;603
00001e  2600              MOVS     r6,#0                 ;603
000020  2780              MOVS     r7,#0x80              ;599
                  |L5.34|
000022  fa05fc01          LSL      r12,r5,r1             ;603
000026  ea1c0c02          ANDS     r12,r12,r2            ;603
00002a  bf18              IT       NE                    ;603
00002c  f04f0c01          MOVNE    r12,#1                ;603
000030  f1bc0f00          CMP      r12,#0                ;604
000034  d006              BEQ      |L5.68|
000036  f890c00d          LDRB     r12,[r0,#0xd]         ;604
00003a  7b84              LDRB     r4,[r0,#0xe]          ;604
00003c  ea4c0c04          ORR      r12,r12,r4            ;604
000040  f880c00d          STRB     r12,[r0,#0xd]         ;604
                  |L5.68|
000044  f890c00e          LDRB     r12,[r0,#0xe]         ;609
000048  ea5f0c5c          LSRS     r12,r12,#1            ;609
00004c  f880c00e          STRB     r12,[r0,#0xe]         ;609
000050  d11c              BNE      |L5.140|
000052  e00b              B        |L5.108|
                  |L5.84|
000054  6899              LDR      r1,[r3,#8]            ;600
000056  f8d3c000          LDR      r12,[r3,#0]           ;600
00005a  6808              LDR      r0,[r1,#0]            ;600
00005c  f1000301          ADD      r3,r0,#1              ;600
000060  600b              STR      r3,[r1,#0]            ;600
000062  f80c2000          STRB     r2,[r12,r0]           ;600
000066  e8bd07f0          POP      {r4-r10}
00006a  4770              BX       lr
                  |L5.108|
00006c  7387              STRB     r7,[r0,#0xe]          ;611
00006e  f8d3c008          LDR      r12,[r3,#8]           ;613
000072  f8d39000          LDR      r9,[r3,#0]            ;613
000076  f890800d          LDRB     r8,[r0,#0xd]          ;613
00007a  f8dc4000          LDR      r4,[r12,#0]           ;613
00007e  f1040a01          ADD      r10,r4,#1             ;613
000082  f8cca000          STR      r10,[r12,#0]          ;613
000086  f8098004          STRB     r8,[r9,r4]            ;613
00008a  7346              STRB     r6,[r0,#0xd]          ;614
                  |L5.140|
00008c  1e49              SUBS     r1,r1,#1              ;602
00008e  d5c8              BPL      |L5.34|
000090  e8bd07f0          POP      {r4-r10}
000094  4770              BX       lr
;;;619    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._Z24heatshrink_encoder_resetP18heatshrink_encoder||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z24heatshrink_encoder_resetP18heatshrink_encoder||
                          DCD      0x00000001

                          AREA ||area_number.7||, LINKORDER=||i._Z23heatshrink_encoder_sinkP18heatshrink_encoderPhjPj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z23heatshrink_encoder_sinkP18heatshrink_encoderPhjPj||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._Z9push_bitsP18heatshrink_encoderhhP11output_info||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9push_bitsP18heatshrink_encoderhhP11output_info||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._Z23heatshrink_encoder_pollP18heatshrink_encoderPhjPj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z23heatshrink_encoder_pollP18heatshrink_encoderPhjPj||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._Z25heatshrink_encoder_finishP18heatshrink_encoder||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z25heatshrink_encoder_finishP18heatshrink_encoder||
                          DCD      0x00000001
