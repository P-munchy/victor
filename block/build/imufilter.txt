; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\imufilter.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\imufilter.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\imufilter.crf supervisor\src\imuFilter.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter10IsPickedUpEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter10IsPickedUpEv PROC ; Anki::Cozmo::IMUFilter::IsPickedUp()
;;;642          
;;;643          bool IsPickedUp()
000000  4801              LDR      r0,|L1.8|
;;;644          {
;;;645            return pickedUp_;
000002  7800              LDRB     r0,[r0,#0]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e89pickedUp_E
;;;646          }
000004  4770              BX       lr
;;;647          
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter11GetRotationEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter11GetRotationEv PROC ; Anki::Cozmo::IMUFilter::GetRotation()
;;;627          
;;;628          f32 GetRotation()
000000  4801              LDR      r0,|L2.8|
;;;629          {
;;;630            return rot_;
000002  ed900a02          VLDR     s0,[r0,#8]
;;;631          }
000006  4770              BX       lr
;;;632          
                          ENDP

                  |L2.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter12DetectMotionEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter12DetectMotionEv PROC ; Anki::Cozmo::IMUFilter::DetectMotion()
;;;415          // Update the last time motion was detected
;;;416          void DetectMotion()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;417          {
;;;418            u32 currTime = HAL::GetMicroCounter();
000004  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000008  4604              MOV      r4,r0
;;;419            
;;;420            // Are wheels being powered?
;;;421            if (WheelController::AreWheelsPowered()) {
00000a  f7fffffe          BL       _ZN4Anki5Cozmo15WheelController16AreWheelsPoweredEv ; Anki::Cozmo::WheelController::AreWheelsPowered()
;;;422              lastMotionDetectedTime_us = currTime;
00000e  4d1d              LDR      r5,|L3.132|
000010  2800              CMP      r0,#0                 ;421
000012  bf18              IT       NE
000014  632c              STRNE    r4,[r5,#0x30]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e825lastMotionDetectedTime_usE
;;;423            }
;;;424            
;;;425            // Was motion detected by accel or gyro?
;;;426            for(u8 i=0; i<3; ++i) {
000016  2100              MOVS     r1,#0
;;;427              // Check accelerometer
;;;428              f32 dAccel = ABS(accel_robot_frame_filt[i] - prev_accel_robot_frame_filt[i]);
000018  4b1b              LDR      r3,|L3.136|
;;;429              prev_accel_robot_frame_filt[i] = accel_robot_frame_filt[i];
;;;430              if (dAccel > ACCEL_MOTION_THRESHOLD) {
00001a  4f1c              LDR      r7,|L3.140|
;;;431                lastMotionDetectedTime_us = currTime;
;;;432              }
;;;433              
;;;434              // Check gyro
;;;435              if (ABS(gyro_robot_frame_filt[i]) > GYRO_MOTION_THRESHOLD) {
00001c  f8df8070          LDR      r8,|L3.144|
000020  f1a30c78          SUB      r12,r3,#0x78          ;428
000024  f1a30618          SUB      r6,r3,#0x18
                  |L3.40|
000028  eb030081          ADD      r0,r3,r1,LSL #2       ;428
00002c  eb0c0281          ADD      r2,r12,r1,LSL #2      ;428
000030  ed900a00          VLDR     s0,[r0,#0]            ;428
000034  ed921a00          VLDR     s2,[r2,#0]            ;428
000038  ee700a41          VSUB.F32 s1,s0,s2              ;428
00003c  eef50ac0          VCMPE.F32 s1,#0.0               ;428
000040  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;428
000044  bfb8              IT       LT                    ;428
000046  ee710a40          VSUBLT.F32 s1,s2,s0              ;428
00004a  ee100a90          VMOV     r0,s1                 ;428
00004e  ed820a00          VSTR     s0,[r2,#0]            ;429
000052  42b8              CMP      r0,r7                 ;430
000054  bfc8              IT       GT                    ;431
000056  632c              STRGT    r4,[r5,#0x30]         ;431  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e825lastMotionDetectedTime_usE
000058  eb060081          ADD      r0,r6,r1,LSL #2
00005c  ed900a00          VLDR     s0,[r0,#0]
000060  eeb50ac0          VCMPE.F32 s0,#0.0
000064  eef1fa10          VMRS     APSR_nzcv,FPSCR
000068  bfb8              IT       LT
00006a  eeb10a40          VNEGLT.F32 s0,s0
00006e  ee100a10          VMOV     r0,s0
000072  4540              CMP      r0,r8
;;;436                lastMotionDetectedTime_us = currTime;
000074  bfc8              IT       GT
000076  632c              STRGT    r4,[r5,#0x30]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e825lastMotionDetectedTime_usE
000078  1c48              ADDS     r0,r1,#1              ;426
00007a  b2c1              UXTB     r1,r0                 ;426
00007c  2903              CMP      r1,#3                 ;426
00007e  d3d3              BCC      |L3.40|
;;;437              }
;;;438            }
;;;439          }
000080  e8bd81f0          POP      {r4-r8,pc}
;;;440          
                          ENDP

                  |L3.132|
                          DCD      ||.data||
                  |L3.136|
                          DCD      ||.bss||+0x78
                  |L3.140|
                          DCD      0x42700000
                  |L3.144|
                          DCD      0x3e75c28f

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter12DetectPickupEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter12DetectPickupEv PROC ; Anki::Cozmo::IMUFilter::DetectPickup()
;;;234          //    is engaged is some never-ending head motions.
;;;235          void DetectPickup()
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;236          {
;;;237            
;;;238            // Compute the acceleration componenet aligned with the z-axis of the robot
;;;239            const f32 xzAccelMagnitude = sqrtf(pdFiltAccX_*pdFiltAccX_ + pdFiltAccZ_*pdFiltAccZ_);
000004  4fb9              LDR      r7,|L4.748|
000006  ed2d8b04          VPUSH    {d8-d9}               ;236
00000a  b085              SUB      sp,sp,#0x14           ;236
00000c  ed970a08          VLDR     s0,[r7,#0x20]
000010  edd70a0a          VLDR     s1,[r7,#0x28]
000014  ee200a00          VMUL.F32 s0,s0,s0
000018  ee000aa0          VMLA.F32 s0,s1,s1
00001c  eef18ac0          VSQRT.F32 s17,s0
000020  eef48a68          VCMP.F32 s17,s17
000024  eef1fa10          VMRS     APSR_nzcv,FPSCR
000028  d003              BEQ      |L4.50|
00002a  f7fffffe          BL       __hardfp_sqrtf
00002e  eef08a40          VMOV.F32 s17,s0
                  |L4.50|
;;;240            const f32 accel_angle_imu_frame = atan2_fast(pdFiltAccZ_, pdFiltAccX_);
000032  edd70a08          VLDR     s1,[r7,#0x20]
000036  ed970a0a          VLDR     s0,[r7,#0x28]
00003a  f7fffffe          BL       _Z10atan2_fastff ; atan2_fast(float, float)
00003e  eeb08a40          VMOV.F32 s16,s0
;;;241            const f32 accel_angle_robot_frame = accel_angle_imu_frame + HeadController::GetAngleRad();
000042  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController11GetAngleRadEv ; Anki::Cozmo::HeadController::GetAngleRad()
000046  ee309a08          VADD.F32 s18,s0,s16
;;;242            
;;;243            f32 pdFiltPrevVal = pdFiltAccZ_aligned_;
00004a  ed978a07          VLDR     s16,[r7,#0x1c]
;;;244            
;;;245            pdFiltAccX_aligned_ = xzAccelMagnitude * cosf(accel_angle_robot_frame);
00004e  eeb00a49          VMOV.F32 s0,s18
000052  f7fffffe          BL       __hardfp_cosf
000056  ee200a28          VMUL.F32 s0,s0,s17
00005a  ed870a05          VSTR     s0,[r7,#0x14]
;;;246            pdFiltAccY_aligned_ = pdFiltAccY_;
00005e  ed970a09          VLDR     s0,[r7,#0x24]
000062  ed870a06          VSTR     s0,[r7,#0x18]
;;;247            pdFiltAccZ_aligned_ = xzAccelMagnitude * sinf(accel_angle_robot_frame);
000066  eeb00a49          VMOV.F32 s0,s18
00006a  f7fffffe          BL       __hardfp_sinf
00006e  ee200a28          VMUL.F32 s0,s0,s17
000072  ed870a07          VSTR     s0,[r7,#0x1c]
000076  7838              LDRB     r0,[r7,#0]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e89pickedUp_E
;;;248    
;;;249            
;;;250            
;;;251            if (IsPickedUp()) {
000078  b1d0              CBZ      r0,|L4.176|
00007a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
00007e  6b39              LDR      r1,[r7,#0x30]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e825lastMotionDetectedTime_usE
000080  f5012137          ADD      r1,r1,#0xb7000
000084  f50171d8          ADD      r1,r1,#0x1b0
000088  4288              CMP      r0,r1
;;;252              
;;;253              // Picked up flag is reset only when the robot has stopped moving
;;;254              // and it has been set upright.
;;;255              if (!MotionDetected() && accel_robot_frame_filt[2] > NSIDE_DOWN_THRESH_MMPS2) {
;;;256                SetPickupDetect(false);
;;;257              }
;;;258                
;;;259            } else {
;;;260    
;;;261              // Do simple check first.
;;;262              // If wheels aren't moving, any motion is because a person was messing with it!
;;;263              if (!WheelController::AreWheelsPowered() && !HeadController::IsMoving() && !LiftController::IsMoving()) {
;;;264                if (ABS(pdFiltAccX_aligned_) > 1000 ||
;;;265                    ABS(pdFiltAccY_aligned_) > 1000 ||
;;;266                    ABS(pdFiltAccZ_aligned_) > 11000 ||
;;;267                    ABS(gyro_robot_frame_filt[0]) > 1.f ||
;;;268                    ABS(gyro_robot_frame_filt[1]) > 1.f ||
;;;269                    ABS(gyro_robot_frame_filt[2]) > 1.f) {
;;;270                  if (++pdUnexpectedMotionCnt_ > 40) {
;;;271                    SetPickupDetect(true);
;;;272                  }
;;;273                }
;;;274              } else {
;;;275                pdUnexpectedMotionCnt_ = 0;
;;;276              }
;;;277    
;;;278              
;;;279              // If rise detected this tic...
;;;280              if (pdFiltAccZ_aligned_ > pdFiltPrevVal + PD_ACCEL_MIN_DELTA) {
;;;281                if (pdFallCnt_ > 0) {
;;;282                  // If we've been trending down, check if the trend
;;;283                  // meets pickup detection conditions. Otherwise,
;;;284                  // reset vars for upwards trend.
;;;285                  if ((pdFallCnt_ - pdLastHeadMoveCnt_ > PD_MIN_TREND_LENGTH)
;;;286                      || (pdFallCnt_ > PD_MIN_TREND_LENGTH && (pdTrendStartVal_ - pdFiltAccZ_aligned_) > PD_SUFFICIENT_TREND_DIFF)) {
;;;287                    PRINT("PDFall: %d, lastHead: %d, val %f, startVal %f\n", pdFallCnt_, pdLastHeadMoveCnt_, pdFiltAccZ_, pdTrendStartVal_);
;;;288                    SetPickupDetect(true);
;;;289                  } else {
;;;290                    pdFallCnt_ = 0;
;;;291                    pdLastHeadMoveCnt_ = 0;
;;;292                    pdTrendStartVal_ = pdFiltAccZ_aligned_;
;;;293                    ++pdRiseCnt_;
;;;294                  }
;;;295                } else {
;;;296                  ++pdRiseCnt_;
;;;297    
;;;298                  if (pdRiseCnt_ == 1) {
;;;299                    pdTrendStartVal_ = pdFiltAccZ_aligned_;
;;;300                  }
;;;301                  
;;;302                  if (HeadController::IsMoving()) {
;;;303                    pdLastHeadMoveCnt_ = pdRiseCnt_;
;;;304                  }
;;;305                  
;;;306                }
;;;307                
;;;308              // If fall detected this tic...
;;;309              } else if (pdFiltAccZ_aligned_ < pdFiltPrevVal - PD_ACCEL_MIN_DELTA) {
;;;310                if (pdRiseCnt_ > 0) {
;;;311                  // If we've been trending up, check if the trend
;;;312                  // meets pickup detection conditions. Otherwise,
;;;313                  // reset vars for downwards trend.
;;;314                  if ((pdRiseCnt_ - pdLastHeadMoveCnt_> PD_MIN_TREND_LENGTH)
;;;315                      || (pdRiseCnt_ > PD_MIN_TREND_LENGTH && (pdFiltAccZ_aligned_ - pdTrendStartVal_) > PD_SUFFICIENT_TREND_DIFF)) {
;;;316                    PRINT("PDRise: %d, lastHead: %d, val %f, startVal %f\n", pdRiseCnt_, pdLastHeadMoveCnt_, pdFiltAccZ_, pdTrendStartVal_);
;;;317                    SetPickupDetect(true);
;;;318                  } else {
;;;319                    pdRiseCnt_ = 0;
;;;320                    pdLastHeadMoveCnt_ = 0;
;;;321                    ++pdFallCnt_;
;;;322                    pdTrendStartVal_ = pdFiltAccZ_aligned_;
;;;323                  }
;;;324                } else {
;;;325                  ++pdFallCnt_;
;;;326                  
;;;327                  if (pdFallCnt_ == 1) {
;;;328                    pdTrendStartVal_ = pdFiltAccZ_aligned_;
;;;329                  }
;;;330                  
;;;331                  if (HeadController::IsMoving()) {
;;;332                    pdLastHeadMoveCnt_ = pdFallCnt_;
;;;333                  }
;;;334    
;;;335                }
;;;336              } else {
;;;337                
;;;338                // Trend is flat. Decrement counter values.
;;;339                if (pdRiseCnt_ > 0) {
;;;340                  --pdRiseCnt_;
;;;341                }
;;;342                if (pdFallCnt_ > 0) {
;;;343                  --pdFallCnt_;
;;;344                }
;;;345                if (pdLastHeadMoveCnt_ > 0) {
;;;346                  --pdLastHeadMoveCnt_;
;;;347                }
;;;348                
;;;349              }
;;;350            }
;;;351          }
00008a  bf3e              ITTT     CC
00008c  b005              ADDCC    sp,sp,#0x14
00008e  ecbd8b04          VPOPCC   {d8-d9}
000092  e8bd83f0          POPCC    {r4-r9,pc}
000096  4896              LDR      r0,|L4.752|
000098  4996              LDR      r1,|L4.756|
00009a  6880              LDR      r0,[r0,#8]            ;255  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e822accel_robot_frame_filtE
00009c  4288              CMP      r0,r1                 ;255
00009e  dd7d              BLE      |L4.412|
0000a0  b005              ADD      sp,sp,#0x14           ;256
0000a2  2000              MOVS     r0,#0                 ;256
0000a4  ecbd8b04          VPOP     {d8-d9}               ;256
0000a8  e8bd43f0          POP      {r4-r9,lr}            ;256
0000ac  f7ffbffe          B.W      _ZN4Anki5Cozmo9IMUFilter15SetPickupDetectEb ; Anki::Cozmo::IMUFilter::SetPickupDetect(bool)
                  |L4.176|
0000b0  f7fffffe          BL       _ZN4Anki5Cozmo15WheelController16AreWheelsPoweredEv ; Anki::Cozmo::WheelController::AreWheelsPowered()
0000b4  2400              MOVS     r4,#0                 ;263
0000b6  b930              CBNZ     r0,|L4.198|
0000b8  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController8IsMovingEv ; Anki::Cozmo::HeadController::IsMoving()
0000bc  b918              CBNZ     r0,|L4.198|
0000be  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController8IsMovingEv ; Anki::Cozmo::LiftController::IsMoving()
0000c2  2800              CMP      r0,#0                 ;263
0000c4  d039              BEQ      |L4.314|
                  |L4.198|
0000c6  713c              STRB     r4,[r7,#4]            ;275
                  |L4.200|
0000c8  eef10a04          VMOV.F32 s1,#5.00000000        ;280
0000cc  ed970a07          VLDR     s0,[r7,#0x1c]         ;280
0000d0  ee381a20          VADD.F32 s2,s16,s1             ;280
0000d4  4888              LDR      r0,|L4.760|
0000d6  eeb41ac0          VCMPE.F32 s2,s0                 ;280
0000da  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;280
0000de  d27b              BCS      |L4.472|
0000e0  f8978002          LDRB     r8,[r7,#2]            ;281  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdFallCnt_E
0000e4  f1b80f00          CMP      r8,#0                 ;281
0000e8  d077              BEQ      |L4.474|
0000ea  f8979003          LDRB     r9,[r7,#3]            ;285  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e818pdLastHeadMoveCnt_E
0000ee  eba80109          SUB      r1,r8,r9              ;285
0000f2  2914              CMP      r1,#0x14              ;285
0000f4  d80a              BHI      |L4.268|
0000f6  f1b80f14          CMP      r8,#0x14              ;286
0000fa  d96f              BLS      |L4.476|
0000fc  edd70a0b          VLDR     s1,[r7,#0x2c]         ;286
000100  ee700ac0          VSUB.F32 s1,s1,s0              ;286
000104  ee101a90          VMOV     r1,s1                 ;286
000108  4281              CMP      r1,r0                 ;286
00010a  dd7b              BLE      |L4.516|
                  |L4.268|
00010c  6af8              LDR      r0,[r7,#0x2c]         ;287  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e816pdTrendStartVal_E
00010e  f7fffffe          BL       __aeabi_f2d
000112  4604              MOV      r4,r0                 ;287
000114  460d              MOV      r5,r1                 ;287
000116  6ab8              LDR      r0,[r7,#0x28]         ;287  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e811pdFiltAccZ_E
000118  f7fffffe          BL       __aeabi_f2d
00011c  e88d0033          STM      sp,{r0,r1,r4,r5}      ;287
000120  464a              MOV      r2,r9                 ;287
000122  4641              MOV      r1,r8                 ;287
000124  a075              ADR      r0,|L4.764|
000126  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
00012a  b005              ADD      sp,sp,#0x14           ;288
00012c  2001              MOVS     r0,#1                 ;288
00012e  ecbd8b04          VPOP     {d8-d9}               ;288
000132  e8bd43f0          POP      {r4-r9,lr}            ;288
000136  f7ffbffe          B.W      _ZN4Anki5Cozmo9IMUFilter15SetPickupDetectEb ; Anki::Cozmo::IMUFilter::SetPickupDetect(bool)
                  |L4.314|
00013a  ed970a05          VLDR     s0,[r7,#0x14]         ;264
00013e  eeb50ac0          VCMPE.F32 s0,#0.0               ;264
000142  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;264
000146  bfb8              IT       LT                    ;264
000148  eeb10a40          VNEGLT.F32 s0,s0                 ;264
00014c  ee101a10          VMOV     r1,s0                 ;264
000150  4876              LDR      r0,|L4.812|
000152  4281              CMP      r1,r0                 ;264
000154  dc4c              BGT      |L4.496|
000156  ed970a06          VLDR     s0,[r7,#0x18]         ;265
00015a  eeb50ac0          VCMPE.F32 s0,#0.0               ;265
00015e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;265
000162  bfb8              IT       LT                    ;265
000164  eeb10a40          VNEGLT.F32 s0,s0                 ;265
000168  ee101a10          VMOV     r1,s0                 ;265
00016c  4281              CMP      r1,r0                 ;265
00016e  dc3f              BGT      |L4.496|
000170  ed970a07          VLDR     s0,[r7,#0x1c]         ;266
000174  eeb50ac0          VCMPE.F32 s0,#0.0               ;266
000178  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;266
00017c  bfb8              IT       LT                    ;266
00017e  eeb10a40          VNEGLT.F32 s0,s0                 ;266
000182  ee100a10          VMOV     r0,s0                 ;266
000186  496a              LDR      r1,|L4.816|
000188  4288              CMP      r0,r1                 ;266
00018a  dc31              BGT      |L4.496|
00018c  4869              LDR      r0,|L4.820|
00018e  ed900a00          VLDR     s0,[r0,#0]            ;267
000192  eeb50ac0          VCMPE.F32 s0,#0.0               ;267
000196  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;267
00019a  e000              B        |L4.414|
                  |L4.412|
00019c  e039              B        |L4.530|
                  |L4.414|
00019e  bfb8              IT       LT                    ;267
0001a0  eeb10a40          VNEGLT.F32 s0,s0                 ;267
0001a4  ee101a10          VMOV     r1,s0                 ;267
0001a8  f1b15f7e          CMP      r1,#0x3f800000        ;267
0001ac  dc20              BGT      |L4.496|
0001ae  ed900a01          VLDR     s0,[r0,#4]            ;268
0001b2  eeb50ac0          VCMPE.F32 s0,#0.0               ;268
0001b6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;268
0001ba  bfb8              IT       LT                    ;268
0001bc  eeb10a40          VNEGLT.F32 s0,s0                 ;268
0001c0  ee101a10          VMOV     r1,s0                 ;268
0001c4  f1b15f7e          CMP      r1,#0x3f800000        ;268
0001c8  dc12              BGT      |L4.496|
0001ca  ed900a02          VLDR     s0,[r0,#8]            ;269
0001ce  eeb50ac0          VCMPE.F32 s0,#0.0               ;269
0001d2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;269
0001d6  e002              B        |L4.478|
                  |L4.472|
0001d8  e030              B        |L4.572|
                  |L4.474|
0001da  e01f              B        |L4.540|
                  |L4.476|
0001dc  e012              B        |L4.516|
                  |L4.478|
0001de  bfb8              IT       LT                    ;269
0001e0  eeb10a40          VNEGLT.F32 s0,s0                 ;269
0001e4  ee100a10          VMOV     r0,s0                 ;269
0001e8  f1b05f7e          CMP      r0,#0x3f800000        ;269
0001ec  f77faf6c          BLE      |L4.200|
                  |L4.496|
0001f0  7938              LDRB     r0,[r7,#4]            ;270  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e822pdUnexpectedMotionCnt_E
0001f2  1c40              ADDS     r0,r0,#1              ;270
0001f4  b2c0              UXTB     r0,r0                 ;270
0001f6  7138              STRB     r0,[r7,#4]            ;270
0001f8  2828              CMP      r0,#0x28              ;270
0001fa  bf84              ITT      HI                    ;271
0001fc  2001              MOVHI    r0,#1                 ;271
0001fe  f7fffffe          BLHI     _ZN4Anki5Cozmo9IMUFilter15SetPickupDetectEb ; Anki::Cozmo::IMUFilter::SetPickupDetect(bool)
000202  e761              B        |L4.200|
                  |L4.516|
000204  70bc              STRB     r4,[r7,#2]            ;290
000206  70fc              STRB     r4,[r7,#3]            ;291
000208  ed870a0b          VSTR     s0,[r7,#0x2c]         ;292
00020c  7878              LDRB     r0,[r7,#1]            ;293  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdRiseCnt_E
00020e  1c40              ADDS     r0,r0,#1              ;293
000210  7078              STRB     r0,[r7,#1]            ;293
                  |L4.530|
000212  b005              ADD      sp,sp,#0x14
000214  ecbd8b04          VPOP     {d8-d9}
000218  e8bd83f0          POP      {r4-r9,pc}
                  |L4.540|
00021c  7878              LDRB     r0,[r7,#1]            ;296  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdRiseCnt_E
00021e  1c40              ADDS     r0,r0,#1              ;296
000220  b2c0              UXTB     r0,r0                 ;296
000222  7078              STRB     r0,[r7,#1]            ;296
000224  2801              CMP      r0,#1                 ;298
000226  bf08              IT       EQ                    ;299
000228  ed870a0b          VSTREQ   s0,[r7,#0x2c]         ;299
00022c  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController8IsMovingEv ; Anki::Cozmo::HeadController::IsMoving()
000230  2800              CMP      r0,#0                 ;302
000232  bf18              IT       NE                    ;303
000234  7878              LDRBNE   r0,[r7,#1]            ;303  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdRiseCnt_E
000236  d0ec              BEQ      |L4.530|
                  |L4.568|
000238  70f8              STRB     r0,[r7,#3]            ;303
00023a  e7ea              B        |L4.530|
                  |L4.572|
00023c  ee780a60          VSUB.F32 s1,s16,s1             ;309
000240  eef40ac0          VCMPE.F32 s1,s0                 ;309
000244  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;309
000248  dd3f              BLE      |L4.714|
00024a  787e              LDRB     r6,[r7,#1]            ;310  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdRiseCnt_E
00024c  b376              CBZ      r6,|L4.684|
00024e  f8978003          LDRB     r8,[r7,#3]            ;314  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e818pdLastHeadMoveCnt_E
000252  eba60108          SUB      r1,r6,r8              ;314
000256  2914              CMP      r1,#0x14              ;314
000258  d809              BHI      |L4.622|
00025a  2e14              CMP      r6,#0x14              ;315
00025c  d91e              BLS      |L4.668|
00025e  edd70a0b          VLDR     s1,[r7,#0x2c]         ;315
000262  ee700a60          VSUB.F32 s1,s0,s1              ;315
000266  ee101a90          VMOV     r1,s1                 ;315
00026a  4281              CMP      r1,r0                 ;315
00026c  dd16              BLE      |L4.668|
                  |L4.622|
00026e  6af8              LDR      r0,[r7,#0x2c]         ;316  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e816pdTrendStartVal_E
000270  f7fffffe          BL       __aeabi_f2d
000274  4604              MOV      r4,r0                 ;316
000276  460d              MOV      r5,r1                 ;316
000278  6ab8              LDR      r0,[r7,#0x28]         ;316  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e811pdFiltAccZ_E
00027a  f7fffffe          BL       __aeabi_f2d
00027e  e88d0033          STM      sp,{r0,r1,r4,r5}      ;316
000282  4642              MOV      r2,r8                 ;316
000284  4631              MOV      r1,r6                 ;316
000286  a02c              ADR      r0,|L4.824|
000288  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
00028c  b005              ADD      sp,sp,#0x14           ;317
00028e  2001              MOVS     r0,#1                 ;317
000290  ecbd8b04          VPOP     {d8-d9}               ;317
000294  e8bd43f0          POP      {r4-r9,lr}            ;317
000298  f7ffbffe          B.W      _ZN4Anki5Cozmo9IMUFilter15SetPickupDetectEb ; Anki::Cozmo::IMUFilter::SetPickupDetect(bool)
                  |L4.668|
00029c  707c              STRB     r4,[r7,#1]            ;319
00029e  70fc              STRB     r4,[r7,#3]            ;320
0002a0  78b8              LDRB     r0,[r7,#2]            ;321  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdFallCnt_E
0002a2  1c40              ADDS     r0,r0,#1              ;321
0002a4  70b8              STRB     r0,[r7,#2]            ;321
0002a6  ed870a0b          VSTR     s0,[r7,#0x2c]         ;322
0002aa  e7b2              B        |L4.530|
                  |L4.684|
0002ac  78b8              LDRB     r0,[r7,#2]            ;325  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdFallCnt_E
0002ae  1c40              ADDS     r0,r0,#1              ;325
0002b0  b2c0              UXTB     r0,r0                 ;325
0002b2  70b8              STRB     r0,[r7,#2]            ;325
0002b4  2801              CMP      r0,#1                 ;327
0002b6  bf08              IT       EQ                    ;328
0002b8  ed870a0b          VSTREQ   s0,[r7,#0x2c]         ;328
0002bc  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController8IsMovingEv ; Anki::Cozmo::HeadController::IsMoving()
0002c0  2800              CMP      r0,#0                 ;331
0002c2  bf18              IT       NE                    ;332
0002c4  78b8              LDRBNE   r0,[r7,#2]            ;332  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdFallCnt_E
0002c6  d0a4              BEQ      |L4.530|
0002c8  e7b6              B        |L4.568|
                  |L4.714|
0002ca  7878              LDRB     r0,[r7,#1]            ;339  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdRiseCnt_E
0002cc  2800              CMP      r0,#0                 ;339
0002ce  bf1c              ITT      NE                    ;339
0002d0  1e40              SUBNE    r0,r0,#1              ;339
0002d2  7078              STRBNE   r0,[r7,#1]            ;340
0002d4  78b8              LDRB     r0,[r7,#2]            ;342  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdFallCnt_E
0002d6  2800              CMP      r0,#0                 ;342
0002d8  bf1c              ITT      NE                    ;342
0002da  1e40              SUBNE    r0,r0,#1              ;342
0002dc  70b8              STRBNE   r0,[r7,#2]            ;343
0002de  78f8              LDRB     r0,[r7,#3]            ;345  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e818pdLastHeadMoveCnt_E
0002e0  2800              CMP      r0,#0                 ;345
0002e2  bf1c              ITT      NE                    ;345
0002e4  1e40              SUBNE    r0,r0,#1              ;345
0002e6  70f8              STRBNE   r0,[r7,#3]            ;346
0002e8  e793              B        |L4.530|
;;;352          
                          ENDP

0002ea  0000              DCW      0x0000
                  |L4.748|
                          DCD      ||.data||
                  |L4.752|
                          DCD      ||.bss||+0x78
                  |L4.756|
                          DCD      0x45fa0000
                  |L4.760|
                          DCD      0x45834000
                  |L4.764|
0002fc  50444661          DCB      "PDFall: %d, lastHead: %d, val %f, startVal %f\n",0
000300  6c6c3a20
000304  25642c20
000308  6c617374
00030c  48656164
000310  3a202564
000314  2c207661
000318  6c202566
00031c  2c207374
000320  61727456
000324  616c2025
000328  660a00  
00032b  00                DCB      0
                  |L4.812|
                          DCD      0x447a0000
                  |L4.816|
                          DCD      0x462be000
                  |L4.820|
                          DCD      ||.bss||+0x60
                  |L4.824|
000338  50445269          DCB      "PDRise: %d, lastHead: %d, val %f, startVal %f\n",0
00033c  73653a20
000340  25642c20
000344  6c617374
000348  48656164
00034c  3a202564
000350  2c207661
000354  6c202566
000358  2c207374
00035c  61727456
000360  616c2025
000364  660a00  
000367  00                DCB      0

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter13DetectFallingEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter13DetectFallingEv PROC ; Anki::Cozmo::IMUFilter::DetectFalling()
;;;197          
;;;198          void DetectFalling()
000000  480b              LDR      r0,|L5.48|
;;;199          {
;;;200            const f32 accelMagnitudeSqrd = accel_filt[0]*accel_filt[0] +
;;;201                                           accel_filt[1]*accel_filt[1] +
;;;202                                           accel_filt[2]*accel_filt[2];
;;;203            
;;;204            eventStateRaw_[FALLING] = accelMagnitudeSqrd < FALLING_THRESH_MMPS2_SQRD;
000002  490c              LDR      r1,|L5.52|
000004  ed900a00          VLDR     s0,[r0,#0]            ;200
000008  ee600a00          VMUL.F32 s1,s0,s0              ;200
00000c  ed900a01          VLDR     s0,[r0,#4]            ;200
000010  ee400a00          VMLA.F32 s1,s0,s0              ;200
000014  ed900a02          VLDR     s0,[r0,#8]            ;200
000018  ee400a00          VMLA.F32 s1,s0,s0              ;200
00001c  ee100a90          VMOV     r0,s1
000020  4288              CMP      r0,r1
000022  bfb4              ITE      LT
000024  2001              MOVLT    r0,#1
000026  2000              MOVGE    r0,#0
000028  4903              LDR      r1,|L5.56|
00002a  7008              STRB     r0,[r1,#0]
;;;205          }
00002c  4770              BX       lr
;;;206          
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      ||.bss||+0x6c
                  |L5.52|
                          DCD      0x4a742400
                  |L5.56|
                          DCD      ||.data||+0x38

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter13RecordAndSendEj||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter13RecordAndSendEj PROC ; Anki::Cozmo::IMUFilter::RecordAndSend(unsigned)
;;;648          
;;;649          void RecordAndSend(const u32 length_ms)
000000  b510              PUSH     {r4,lr}
;;;650          {
000002  4604              MOV      r4,r0
;;;651            PRINT("STARTING IMU RECORDING (time = %dms)\n", HAL::GetTimeStamp());
000004  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
000008  4601              MOV      r1,r0
00000a  a009              ADR      r0,|L6.48|
00000c  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;652            isRecording_ = true;
000010  4811              LDR      r0,|L6.88|
000012  2101              MOVS     r1,#1
000014  7141              STRB     r1,[r0,#5]
;;;653            recordDataIdx_ = 0;
000016  2100              MOVS     r1,#0
000018  7181              STRB     r1,[r0,#6]
;;;654            imuChunkMsg_.seqId++;
00001a  4810              LDR      r0,|L6.92|
00001c  7802              LDRB     r2,[r0,#0]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e812imuChunkMsg_E
00001e  1c52              ADDS     r2,r2,#1
000020  7002              STRB     r2,[r0,#0]
;;;655            imuChunkMsg_.chunkId=0;
000022  7041              STRB     r1,[r0,#1]
;;;656            imuChunkMsg_.totalNumChunks = length_ms / (TIME_STEP * IMU_CHUNK_SIZE);
000024  490e              LDR      r1,|L6.96|
000026  fba12104          UMULL    r2,r1,r1,r4
00002a  09c9              LSRS     r1,r1,#7
00002c  7081              STRB     r1,[r0,#2]
;;;657          }
00002e  bd10              POP      {r4,pc}
;;;658          
                          ENDP

                  |L6.48|
000030  53544152          DCB      "STARTING IMU RECORDING (time = %dms)\n",0
000034  54494e47
000038  20494d55
00003c  20524543
000040  4f524449
000044  4e472028
000048  74696d65
00004c  203d2025
000050  646d7329
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0
                  |L6.88|
                          DCD      ||.data||
                  |L6.92|
                          DCD      ||.bss||+0x84
                  |L6.96|
                          DCD      0xcccccccd

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter13StartLiftTestEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9IMUFilter13StartLiftTestEv PROC ; Anki::Cozmo::IMUFilter::StartLiftTest()
;;;157          
;;;158          void StartLiftTest()
000000  2300              MOVS     r3,#0
;;;159          {
000002  b510              PUSH     {r4,lr}
;;;160            TestModeController::Start(TM_LIFT);
000004  461a              MOV      r2,r3
000006  4619              MOV      r1,r3
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       _ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii ; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
00000e  2100              MOVS     r1,#0
000010  e8bd4010          POP      {r4,lr}
000014  2004              MOVS     r0,#4
000016  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
;;;161            TurnOffIndicatorLight();
;;;162          }
;;;163          
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9IMUFilter14MotionDetectedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter14MotionDetectedEv PROC ; Anki::Cozmo::IMUFilter::MotionDetected()
;;;216          
;;;217          bool MotionDetected() {
000000  b510              PUSH     {r4,lr}
;;;218            return (lastMotionDetectedTime_us + MOTION_DETECT_TIMEOUT_US) > HAL::GetMicroCounter();
000002  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000006  4905              LDR      r1,|L8.28|
000008  6b09              LDR      r1,[r1,#0x30]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e825lastMotionDetectedTime_usE
00000a  f5012137          ADD      r1,r1,#0xb7000
00000e  f50171d8          ADD      r1,r1,#0x1b0
000012  4288              CMP      r0,r1
000014  bf34              ITE      CC
000016  2001              MOVCC    r0,#1
000018  2000              MOVCS    r0,#0
;;;219          }
00001a  bd10              POP      {r4,pc}
;;;220          
                          ENDP

                  |L8.28|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter15DetectNsideDownEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter15DetectNsideDownEv PROC ; Anki::Cozmo::IMUFilter::DetectNsideDown()
;;;206          
;;;207          void DetectNsideDown()
000000  f8dfc04c          LDR      r12,|L9.80|
;;;208          {
000004  b410              PUSH     {r4}
;;;209            eventStateRaw_[UPSIDE_DOWN] = accel_robot_frame_filt[2] < -NSIDE_DOWN_THRESH_MMPS2;
000006  4a13              LDR      r2,|L9.84|
000008  f8dc0008          LDR      r0,[r12,#8]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e822accel_robot_frame_filtE
00000c  4290              CMP      r0,r2
00000e  bf8c              ITE      HI
000010  2001              MOVHI    r0,#1
000012  2000              MOVLS    r0,#0
000014  4b10              LDR      r3,|L9.88|
000016  7058              STRB     r0,[r3,#1]
;;;210            eventStateRaw_[LEFTSIDE_DOWN] = accel_robot_frame_filt[1] < -NSIDE_DOWN_THRESH_MMPS2;
000018  f8dc0004          LDR      r0,[r12,#4]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e822accel_robot_frame_filtE
00001c  4290              CMP      r0,r2
00001e  bf8c              ITE      HI
000020  2101              MOVHI    r1,#1
000022  2100              MOVLS    r1,#0
000024  7099              STRB     r1,[r3,#2]
;;;211            eventStateRaw_[RIGHTSIDE_DOWN] = accel_robot_frame_filt[1] > NSIDE_DOWN_THRESH_MMPS2;
000026  4c0d              LDR      r4,|L9.92|
000028  42a0              CMP      r0,r4
00002a  bfcc              ITE      GT
00002c  2001              MOVGT    r0,#1
00002e  2000              MOVLE    r0,#0
000030  70d8              STRB     r0,[r3,#3]
;;;212            eventStateRaw_[FRONTSIDE_DOWN] = accel_robot_frame_filt[0] < -NSIDE_DOWN_THRESH_MMPS2;
000032  f8dc0000          LDR      r0,[r12,#0]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e822accel_robot_frame_filtE
000036  4290              CMP      r0,r2
000038  bf8c              ITE      HI
00003a  2101              MOVHI    r1,#1
00003c  2100              MOVLS    r1,#0
00003e  7119              STRB     r1,[r3,#4]
;;;213            eventStateRaw_[BACKSIDE_DOWN] = accel_robot_frame_filt[0] > NSIDE_DOWN_THRESH_MMPS2;
000040  42a0              CMP      r0,r4
000042  bfcc              ITE      GT
000044  2001              MOVGT    r0,#1
000046  2000              MOVLE    r0,#0
000048  7158              STRB     r0,[r3,#5]
;;;214          }
00004a  bc10              POP      {r4}
00004c  4770              BX       lr
;;;215          
                          ENDP

00004e  0000              DCW      0x0000
                  |L9.80|
                          DCD      ||.bss||+0x78
                  |L9.84|
                          DCD      0xc5fa0000
                  |L9.88|
                          DCD      ||.data||+0x38
                  |L9.92|
                          DCD      0x45fa0000

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter15SetPickupDetectEb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter15SetPickupDetectEb PROC ; Anki::Cozmo::IMUFilter::SetPickupDetect(bool)
;;;164          //===== End of event callbacks ====
;;;165          void SetPickupDetect(bool pickupDetected)
000000  b510              PUSH     {r4,lr}
;;;166          {
000002  0004              MOVS     r4,r0
000004  d005              BEQ      |L10.18|
;;;167            // TEST WITH LIGHT
;;;168            if (pickupDetected) {
;;;169              HAL::SetLED(INDICATOR_LED_ID, LED_RED);
000006  f44f017f          MOV      r1,#0xff0000
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
000010  e003              B        |L10.26|
                  |L10.18|
;;;170            } else {
;;;171              HAL::SetLED(INDICATOR_LED_ID, LED_OFF);
000012  2100              MOVS     r1,#0
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
                  |L10.26|
;;;172            }
;;;173            
;;;174            pickedUp_ = pickupDetected;
00001a  4803              LDR      r0,|L10.40|
;;;175            pdFallCnt_ = 0;
00001c  2100              MOVS     r1,#0
00001e  7004              STRB     r4,[r0,#0]            ;174
000020  7081              STRB     r1,[r0,#2]
;;;176            pdRiseCnt_ = 0;
000022  7041              STRB     r1,[r0,#1]
;;;177            pdLastHeadMoveCnt_ = 0;
000024  70c1              STRB     r1,[r0,#3]
;;;178          }
000026  bd10              POP      {r4,pc}
;;;179          
                          ENDP

                  |L10.40|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter16GetRotationSpeedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter16GetRotationSpeedEv PROC ; Anki::Cozmo::IMUFilter::GetRotationSpeed()
;;;632          
;;;633          f32 GetRotationSpeed()
000000  4801              LDR      r0,|L11.8|
;;;634          {
;;;635            return rotSpeed_;
000002  ed900a03          VLDR     s0,[r0,#0xc]
;;;636          }
000006  4770              BX       lr
;;;637          
                          ENDP

                  |L11.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter16ToggleHeadLightsEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter16ToggleHeadLightsEv PROC ; Anki::Cozmo::IMUFilter::ToggleHeadLights()
;;;124          // ==== Event callback functions ===
;;;125          void ToggleHeadLights() {
000000  b510              PUSH     {r4,lr}
;;;126            static bool lightsOn = false;
;;;127            if (lightsOn) {
000002  4c08              LDR      r4,|L12.36|
000004  79e0              LDRB     r0,[r4,#7]  ; lightsOn
000006  b128              CBZ      r0,|L12.20|
;;;128              HAL::SetLED(HEADLIGHT_LED_ID, LED_OFF);
000008  2100              MOVS     r1,#0
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
;;;129              lightsOn = false;
000010  2000              MOVS     r0,#0
000012  e005              B        |L12.32|
                  |L12.20|
;;;130            } else {
;;;131              HAL::SetLED(HEADLIGHT_LED_ID, LED_RED);
000014  f44f017f          MOV      r1,#0xff0000
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
;;;132              lightsOn = true;
00001e  2001              MOVS     r0,#1
                  |L12.32|
000020  71e0              STRB     r0,[r4,#7]            ;129
;;;133            }
;;;134          }
000022  bd10              POP      {r4,pc}
;;;135          
                          ENDP

                  |L12.36|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter19StartPathFollowTestEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9IMUFilter19StartPathFollowTestEv PROC ; Anki::Cozmo::IMUFilter::StartPathFollowTest()
;;;151          
;;;152          void StartPathFollowTest()
000000  2300              MOVS     r3,#0
;;;153          {
000002  b510              PUSH     {r4,lr}
;;;154            TestModeController::Start(TM_PATH_FOLLOW);
000004  461a              MOV      r2,r3
000006  4619              MOV      r1,r3
000008  2003              MOVS     r0,#3
00000a  f7fffffe          BL       _ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii ; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
00000e  2100              MOVS     r1,#0
000010  e8bd4010          POP      {r4,lr}
000014  2004              MOVS     r0,#4
000016  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
;;;155            TurnOffIndicatorLight();
;;;156          }
;;;157          
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9IMUFilter20TurnOnIndicatorLightEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9IMUFilter20TurnOnIndicatorLightEv PROC ; Anki::Cozmo::IMUFilter::TurnOnIndicatorLight()
;;;135          
;;;136          void TurnOnIndicatorLight()
000000  2300              MOVS     r3,#0
;;;137          {
000002  b510              PUSH     {r4,lr}
;;;138            TestModeController::Start(TM_NONE);
000004  461a              MOV      r2,r3
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
00000a  f7fffffe          BL       _ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii ; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
;;;139            HAL::SetLED(INDICATOR_LED_ID, LED_RED);
00000e  e8bd4010          POP      {r4,lr}
000012  f44f017f          MOV      r1,#0xff0000
000016  2004              MOVS     r0,#4
000018  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
;;;140          }
;;;141          void TurnOffIndicatorLight()
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9IMUFilter20UpdateEventDetectionEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter20UpdateEventDetectionEv PROC ; Anki::Cozmo::IMUFilter::UpdateEventDetection()
;;;352          
;;;353          void UpdateEventDetection()
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;354          {
000004  482c              LDR      r0,|L15.184|
000006  492d              LDR      r1,|L15.188|
000008  ed900a00          VLDR     s0,[r0,#0]
00000c  ee600a00          VMUL.F32 s1,s0,s0
000010  ed900a01          VLDR     s0,[r0,#4]
000014  ee400a00          VMLA.F32 s1,s0,s0
000018  ed900a02          VLDR     s0,[r0,#8]
00001c  ee400a00          VMLA.F32 s1,s0,s0
000020  ee100a90          VMOV     r0,s1
000024  4288              CMP      r0,r1
000026  bfb4              ITE      LT
000028  2001              MOVLT    r0,#1
00002a  2000              MOVGE    r0,#0
00002c  f8df8090          LDR      r8,|L15.192|
000030  f8880000          STRB     r0,[r8,#0]
;;;355            // Call detect functions and update raw event state
;;;356            DetectFalling();
;;;357            DetectNsideDown();
000034  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter15DetectNsideDownEv ; Anki::Cozmo::IMUFilter::DetectNsideDown()
;;;358          
;;;359            
;;;360            // Now update event state according to (de)activation time
;;;361            u32 currTime = HAL::GetMicroCounter();
000038  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
;;;362            for (int e = FALLING; e < NUM_IMU_EVENTS; ++e) {
;;;363             
;;;364    #if(DEBUG_IMU_FILTER)
;;;365              //PERIODIC_PRINT(40,"IMUFilter event %d: state %d, rawState %d, eventTime %d, currTime %d\n",
;;;366              //               e, eventState_[e], eventStateRaw_[e], eventTime_[e], currTime);
;;;367    #endif
;;;368              
;;;369              if (!eventState_[e]) {
;;;370                if (eventStateRaw_[e]) {
;;;371                  if (eventTime_[e] == 0) {
;;;372                    // Raw event state conditions met for the first time
;;;373                    eventTime_[e] = currTime;
;;;374                  } else if (currTime - eventTime_[e] > eventActivationTime_us_[e]) {
;;;375                    // Event activated
;;;376                    eventState_[e] = true;
;;;377                    
;;;378                    // Call activation function
;;;379                    if (eventActivationCallbacks[e]) {
00003c  f8dfa084          LDR      r10,|L15.196|
000040  2400              MOVS     r4,#0                 ;362
000042  4605              MOV      r5,r0                 ;361
000044  f1080906          ADD      r9,r8,#6              ;369
;;;380    #if(DEBUG_IMU_FILTER)
;;;381                      PRINT("IMUFilter: Activation callback %d\n", e);
;;;382    #endif
;;;383                      eventActivationCallbacks[e]();
;;;384                    }
;;;385                  }
;;;386                } else {
;;;387                  eventTime_[e] = 0;
;;;388                }
;;;389                
;;;390              } else {
;;;391                
;;;392                if (!eventStateRaw_[e]){
;;;393                  if (eventTime_[e] == 0) {
;;;394                    eventTime_[e] = currTime;
;;;395                  } else if (currTime - eventTime_[e] > eventDeactivationTime_us_[e]) {
;;;396                    // Event deactivated
;;;397                    eventState_[e] = false;
;;;398                    
;;;399                    // Call deactivation function
;;;400                    if (eventDeactivationCallbacks[e]) {
000048  f10a0b18          ADD      r11,r10,#0x18
00004c  4627              MOV      r7,r4
00004e  f1aa0618          SUB      r6,r10,#0x18          ;371
                  |L15.82|
000052  f8190004          LDRB     r0,[r9,r4]            ;369
000056  2800              CMP      r0,#0                 ;369
000058  f8180004          LDRB     r0,[r8,r4]            ;392
00005c  d001              BEQ      |L15.98|
00005e  b188              CBZ      r0,|L15.132|
000060  e023              B        |L15.170|
                  |L15.98|
000062  b310              CBZ      r0,|L15.170|
000064  f8560024          LDR      r0,[r6,r4,LSL #2]     ;371
000068  b1e0              CBZ      r0,|L15.164|
00006a  1a29              SUBS     r1,r5,r0              ;374
00006c  4816              LDR      r0,|L15.200|
00006e  f8500024          LDR      r0,[r0,r4,LSL #2]     ;374
000072  4281              CMP      r1,r0                 ;374
000074  d91b              BLS      |L15.174|
000076  2001              MOVS     r0,#1                 ;376
000078  f8090004          STRB     r0,[r9,r4]            ;376
00007c  f85a0024          LDR      r0,[r10,r4,LSL #2]    ;379
000080  b1a8              CBZ      r0,|L15.174|
000082  e00d              B        |L15.160|
                  |L15.132|
000084  f8560024          LDR      r0,[r6,r4,LSL #2]     ;393
000088  b160              CBZ      r0,|L15.164|
00008a  1a29              SUBS     r1,r5,r0              ;395
00008c  480f              LDR      r0,|L15.204|
00008e  f8500024          LDR      r0,[r0,r4,LSL #2]     ;395
000092  4281              CMP      r1,r0                 ;395
000094  d90b              BLS      |L15.174|
000096  f8097004          STRB     r7,[r9,r4]            ;397
00009a  f85b0024          LDR      r0,[r11,r4,LSL #2]
00009e  b130              CBZ      r0,|L15.174|
                  |L15.160|
;;;401    #if(DEBUG_IMU_FILTER)
;;;402                      PRINT("IMUFilter: Deactivation callback %d\n", e);
;;;403    #endif
;;;404                      eventDeactivationCallbacks[e]();
0000a0  4780              BLX      r0
0000a2  e004              B        |L15.174|
                  |L15.164|
0000a4  f8465024          STR      r5,[r6,r4,LSL #2]     ;394
0000a8  e001              B        |L15.174|
                  |L15.170|
;;;405                    }
;;;406                  }
;;;407                } else {
;;;408                  eventTime_[e] = 0;
0000aa  f8467024          STR      r7,[r6,r4,LSL #2]
                  |L15.174|
0000ae  1c64              ADDS     r4,r4,#1
0000b0  2c06              CMP      r4,#6                 ;362
0000b2  dbce              BLT      |L15.82|
;;;409                }
;;;410              }
;;;411            }
;;;412            
;;;413          }
0000b4  e8bd9ff0          POP      {r4-r12,pc}
;;;414          
                          ENDP

                  |L15.184|
                          DCD      ||.bss||+0x6c
                  |L15.188|
                          DCD      0x4a742400
                  |L15.192|
                          DCD      ||.data||+0x38
                  |L15.196|
                          DCD      ||.bss||+0x24
                  |L15.200|
                          DCD      ||.constdata||
                  |L15.204|
                          DCD      ||.constdata||+0x18

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter21StartPickAndPlaceTestEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9IMUFilter21StartPickAndPlaceTestEv PROC ; Anki::Cozmo::IMUFilter::StartPickAndPlaceTest()
;;;145          
;;;146          void StartPickAndPlaceTest()
000000  2300              MOVS     r3,#0
;;;147          {
000002  b510              PUSH     {r4,lr}
;;;148            TestModeController::Start(TM_PICK_AND_PLACE);
000004  461a              MOV      r2,r3
000006  4619              MOV      r1,r3
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       _ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii ; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
00000e  2100              MOVS     r1,#0
000010  e8bd4010          POP      {r4,lr}
000014  2004              MOVS     r0,#4
000016  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
;;;149            TurnOffIndicatorLight();
;;;150          }
;;;151          
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9IMUFilter21TurnOffIndicatorLightEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo9IMUFilter21TurnOffIndicatorLightEv PROC ; Anki::Cozmo::IMUFilter::TurnOffIndicatorLight()
;;;140          }
;;;141          void TurnOffIndicatorLight()
000000  2100              MOVS     r1,#0
;;;142          {
;;;143            HAL::SetLED(INDICATOR_LED_ID, LED_OFF);
000002  2004              MOVS     r0,#4
000004  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
;;;144          }
;;;145          
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo9IMUFilter5ResetEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter5ResetEv PROC ; Anki::Cozmo::IMUFilter::Reset()
;;;179          
;;;180          void Reset()
000000  480d              LDR      r0,|L18.56|
;;;181          {
;;;182            rot_ = 0;
000002  ed9f0a0c          VLDR     s0,|L18.52|
;;;183            rotSpeed_ = 0;
;;;184            // Event callback functions
;;;185            // TODO: This should probably go somewhere else
;;;186            eventActivationCallbacks[UPSIDE_DOWN] = ToggleHeadLights;
000006  490d              LDR      r1,|L18.60|
000008  ed800a02          VSTR     s0,[r0,#8]            ;182
00000c  ed800a03          VSTR     s0,[r0,#0xc]          ;183
000010  480b              LDR      r0,|L18.64|
;;;187            eventActivationCallbacks[RIGHTSIDE_DOWN] = TurnOnIndicatorLight;
;;;188            eventDeactivationCallbacks[RIGHTSIDE_DOWN] = StartPickAndPlaceTest;
000012  4b0d              LDR      r3,|L18.72|
000014  f1000218          ADD      r2,r0,#0x18
000018  6041              STR      r1,[r0,#4]            ;187  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e824eventActivationCallbacksE
00001a  490a              LDR      r1,|L18.68|
00001c  60c1              STR      r1,[r0,#0xc]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e824eventActivationCallbacksE
;;;189            eventActivationCallbacks[LEFTSIDE_DOWN] = TurnOnIndicatorLight;
00001e  60d3              STR      r3,[r2,#0xc]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e826eventDeactivationCallbacksE
;;;190            eventDeactivationCallbacks[LEFTSIDE_DOWN] = StartPathFollowTest;
000020  4b0a              LDR      r3,|L18.76|
000022  6081              STR      r1,[r0,#8]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e824eventActivationCallbacksE
;;;191            eventActivationCallbacks[FRONTSIDE_DOWN] = TurnOnIndicatorLight;
000024  6093              STR      r3,[r2,#8]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e826eventDeactivationCallbacksE
;;;192            eventDeactivationCallbacks[FRONTSIDE_DOWN] = StartLiftTest;
000026  4b0a              LDR      r3,|L18.80|
000028  6101              STR      r1,[r0,#0x10]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e824eventActivationCallbacksE
;;;193            eventActivationCallbacks[BACKSIDE_DOWN] = TurnOnIndicatorLight;
00002a  6113              STR      r3,[r2,#0x10]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e826eventDeactivationCallbacksE
;;;194            eventDeactivationCallbacks[BACKSIDE_DOWN] = TurnOffIndicatorLight;
00002c  6141              STR      r1,[r0,#0x14]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e824eventActivationCallbacksE
00002e  4809              LDR      r0,|L18.84|
000030  6150              STR      r0,[r2,#0x14]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e826eventDeactivationCallbacksE
;;;195          }
000032  4770              BX       lr
;;;196          
                          ENDP

                  |L18.52|
000034  00000000          DCFS     0x00000000 ; 0
                  |L18.56|
                          DCD      ||.data||
                  |L18.60|
                          DCD      _ZN4Anki5Cozmo9IMUFilter16ToggleHeadLightsEv ; Anki::Cozmo::IMUFilter::ToggleHeadLights()
                  |L18.64|
                          DCD      ||.bss||+0x24
                  |L18.68|
                          DCD      _ZN4Anki5Cozmo9IMUFilter20TurnOnIndicatorLightEv ; Anki::Cozmo::IMUFilter::TurnOnIndicatorLight()
                  |L18.72|
                          DCD      _ZN4Anki5Cozmo9IMUFilter21StartPickAndPlaceTestEv ; Anki::Cozmo::IMUFilter::StartPickAndPlaceTest()
                  |L18.76|
                          DCD      _ZN4Anki5Cozmo9IMUFilter19StartPathFollowTestEv ; Anki::Cozmo::IMUFilter::StartPathFollowTest()
                  |L18.80|
                          DCD      _ZN4Anki5Cozmo9IMUFilter13StartLiftTestEv ; Anki::Cozmo::IMUFilter::StartLiftTest()
                  |L18.84|
                          DCD      _ZN4Anki5Cozmo9IMUFilter21TurnOffIndicatorLightEv ; Anki::Cozmo::IMUFilter::TurnOffIndicatorLight()

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter6UpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter6UpdateEv PROC ; Anki::Cozmo::IMUFilter::Update()
;;;440          
;;;441          Result Update()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;442          {
;;;443            Result retVal = RESULT_OK;
000004  2600              MOVS     r6,#0
000006  ed2d8b04          VPUSH    {d8-d9}               ;442
00000a  b086              SUB      sp,sp,#0x18           ;442
;;;444            
;;;445            // Don't do IMU updates until head is calibrated
;;;446            if (!HeadController::IsCalibrated()) {
00000c  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController12IsCalibratedEv ; Anki::Cozmo::HeadController::IsCalibrated()
000010  2800              CMP      r0,#0
000012  f0008148          BEQ.W    |L19.678|
;;;447              return retVal;
;;;448            }
;;;449            
;;;450            
;;;451            // Get IMU data
;;;452            HAL::IMU_DataStructure imu_data;
;;;453            HAL::IMUReadData(imu_data);
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11IMUReadDataERNS1_17IMU_DataStructureE ; Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
;;;454            
;;;455            
;;;456            ////// Gyro Update //////
;;;457            
;;;458            // Filter rotation speeds
;;;459            // TODO: Do this in hardware?
;;;460            gyro_filt[0] = imu_data.rate_x * RATE_FILT_COEFF + gyro_filt[0] * (1.f-RATE_FILT_COEFF);
00001c  ed9d0a03          VLDR     s0,[sp,#0xc]
000020  ed9f9aa4          VLDR     s18,|L19.692|
000024  4ca4              LDR      r4,|L19.696|
000026  ee600a09          VMUL.F32 s1,s0,s18
00002a  ed941a00          VLDR     s2,[r4,#0]
00002e  ed9f0aa3          VLDR     s0,|L19.700|
000032  ee410a00          VMLA.F32 s1,s2,s0
000036  edc40a00          VSTR     s1,[r4,#0]
;;;461            gyro_filt[1] = imu_data.rate_y * RATE_FILT_COEFF + gyro_filt[1] * (1.f-RATE_FILT_COEFF);
00003a  eddd0a04          VLDR     s1,[sp,#0x10]
00003e  ed941a01          VLDR     s2,[r4,#4]
000042  ee600a89          VMUL.F32 s1,s1,s18
000046  ee410a00          VMLA.F32 s1,s2,s0
00004a  edc40a01          VSTR     s1,[r4,#4]
;;;462            gyro_filt[2] = imu_data.rate_z * RATE_FILT_COEFF + gyro_filt[2] * (1.f-RATE_FILT_COEFF);
00004e  eddd0a05          VLDR     s1,[sp,#0x14]
000052  ed941a02          VLDR     s2,[r4,#8]
000056  ee600a89          VMUL.F32 s1,s1,s18
00005a  ee410a00          VMLA.F32 s1,s2,s0
00005e  edc40a02          VSTR     s1,[r4,#8]
;;;463          
;;;464            
;;;465            // Compute head angle wrt to world horizontal plane
;;;466            const f32 headAngle = HeadController::GetAngleRad();  // TODO: Use encoders or accelerometer data? If encoders,
000062  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController11GetAngleRadEv ; Anki::Cozmo::HeadController::GetAngleRad()
000066  eef08a40          VMOV.F32 s17,s0
;;;467                                                            // may need to use accelerometer data anyway for when it's on ramps.
;;;468            
;;;469    
;;;470            // Compute rotation speeds in robot XY-plane.
;;;471            // https://www.chrobotics.com/library/understanding-euler-angles
;;;472            // http://ocw.mit.edu/courses/mechanical-engineering/2-017j-design-of-electromechanical-robotic-systems-fall-2009/course-text/MIT2_017JF09_ch09.pdf
;;;473            //
;;;474            // r: roll angle (x-axis), p: pitch angle (y-axis), y: yaw angle (z-axis)
;;;475            //
;;;476            //            |  1    sin(r)*tan(p)    cos(r)*tan(p)  |
;;;477            // D(r,p,y) = |  0       cos(r)           -sin(r)     |
;;;478            //            |  0    sin(r)/cos(p)    cos(r)/cos(p)  |
;;;479            //
;;;480            // Rotation in robot frame = D * [dr/dt, dp/dt, dy,dt] where the latter vector is given by gyro readings.
;;;481            // In our case, we only care about yaw. In other words, it's always true that r = y = 0.
;;;482            // (NOTE: This is true as long as we don't start turning on ramps!!!)
;;;483            // So the result simplifies to...
;;;484            gyro_robot_frame_filt[0] = gyro_filt[0] + gyro_filt[2] * tanf(headAngle);
00006a  f7fffffe          BL       __hardfp_tanf
00006e  eef00a40          VMOV.F32 s1,s0
000072  ed940a00          VLDR     s0,[r4,#0]
000076  ed941a02          VLDR     s2,[r4,#8]
00007a  f104070c          ADD      r7,r4,#0xc
00007e  ee010a20          VMLA.F32 s0,s2,s1
000082  ed870a00          VSTR     s0,[r7,#0]
;;;485            gyro_robot_frame_filt[1] = gyro_filt[1];
000086  ed940a01          VLDR     s0,[r4,#4]
00008a  ed870a01          VSTR     s0,[r7,#4]
;;;486            gyro_robot_frame_filt[2] = gyro_filt[2] / cosf(headAngle);
00008e  eeb00a68          VMOV.F32 s0,s17
000092  f7fffffe          BL       __hardfp_cosf
000096  edd40a02          VLDR     s1,[r4,#8]
00009a  ee801a80          VDIV.F32 s2,s1,s0
00009e  ed871a02          VSTR     s2,[r7,#8]
;;;487            // TODO: We actually only care about gyro_robot_frame_filt[2]. Any point in computing the others?
;;;488            
;;;489            
;;;490            
;;;491            
;;;492            
;;;493            
;;;494            
;;;495            ///// Accelerometer update /////
;;;496            accel_filt[0] = imu_data.acc_x * ACCEL_FILT_COEFF + accel_filt[0] * (1.f-ACCEL_FILT_COEFF);
0000a2  ed9d0a00          VLDR     s0,[sp,#0]
0000a6  eddf9a86          VLDR     s19,|L19.704|
0000aa  3418              ADDS     r4,r4,#0x18
0000ac  ee200a29          VMUL.F32 s0,s0,s19
0000b0  edd40a00          VLDR     s1,[r4,#0]
0000b4  ee000a89          VMLA.F32 s0,s1,s18
0000b8  ed840a00          VSTR     s0,[r4,#0]
;;;497            accel_filt[1] = imu_data.acc_y * ACCEL_FILT_COEFF + accel_filt[1] * (1.f-ACCEL_FILT_COEFF);
0000bc  eddd0a01          VLDR     s1,[sp,#4]
0000c0  ed941a01          VLDR     s2,[r4,#4]
0000c4  ee600aa9          VMUL.F32 s1,s1,s19
0000c8  ee410a09          VMLA.F32 s1,s2,s18
0000cc  edc40a01          VSTR     s1,[r4,#4]
;;;498            accel_filt[2] = imu_data.acc_z * ACCEL_FILT_COEFF + accel_filt[2] * (1.f-ACCEL_FILT_COEFF);
0000d0  eddd0a02          VLDR     s1,[sp,#8]
0000d4  ed941a02          VLDR     s2,[r4,#8]
0000d8  ee600aa9          VMUL.F32 s1,s1,s19
0000dc  ee410a09          VMLA.F32 s1,s2,s18
0000e0  edc40a02          VSTR     s1,[r4,#8]
0000e4  f7fffffe          BL       __hardfp_atan2f
0000e8  eef00a40          VMOV.F32 s1,s0
;;;499            //printf("accel: %f %f %f\n", accel_filt[0], accel_filt[1], accel_filt[2]);
;;;500            pitch_ = atan2(accel_filt[0], accel_filt[2]) - headAngle;
0000ec  4d75              LDR      r5,|L19.708|
0000ee  ee300ae8          VSUB.F32 s0,s1,s17
0000f2  ed850a04          VSTR     s0,[r5,#0x10]
;;;501            
;;;502            //PERIODIC_PRINT(50, "Pitch %f\n", RAD_TO_DEG_F32(pitch_));
;;;503    
;;;504            // Compute accelerations in robot frame
;;;505            const f32 xzAccelMagnitude = sqrtf(accel_filt[0]*accel_filt[0] + accel_filt[2]*accel_filt[2]);
0000f6  ed940a00          VLDR     s0,[r4,#0]
0000fa  ee600a00          VMUL.F32 s1,s0,s0
0000fe  ed940a02          VLDR     s0,[r4,#8]
000102  ee400a00          VMLA.F32 s1,s0,s0
000106  eeb10ae0          VSQRT.F32 s0,s1
00010a  eeb40a40          VCMP.F32 s0,s0
00010e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000112  bf1c              ITT      NE
000114  eeb00a60          VMOVNE.F32 s0,s1
000118  f7fffffe          BLNE     __hardfp_sqrtf
00011c  eeb08a40          VMOV.F32 s16,s0
;;;506            const f32 accel_angle_imu_frame = atan2_fast(accel_filt[2], accel_filt[0]);
000120  edd40a00          VLDR     s1,[r4,#0]
000124  ed940a02          VLDR     s0,[r4,#8]
000128  f7fffffe          BL       _Z10atan2_fastff ; atan2_fast(float, float)
;;;507            const f32 accel_angle_robot_frame = accel_angle_imu_frame + headAngle;
;;;508            
;;;509            prev_accel_robot_frame_filt[0] = accel_robot_frame_filt[0];
00012c  f8df8198          LDR      r8,|L19.712|
000130  ee708a28          VADD.F32 s17,s0,s17            ;507
000134  f1a80078          SUB      r0,r8,#0x78
000138  ed980a00          VLDR     s0,[r8,#0]
00013c  ed800a00          VSTR     s0,[r0,#0]
;;;510            prev_accel_robot_frame_filt[1] = accel_robot_frame_filt[1];
000140  ed980a01          VLDR     s0,[r8,#4]
000144  ed800a01          VSTR     s0,[r0,#4]
;;;511            prev_accel_robot_frame_filt[2] = accel_robot_frame_filt[2];
000148  ed980a02          VLDR     s0,[r8,#8]
00014c  ed800a02          VSTR     s0,[r0,#8]
;;;512            
;;;513            accel_robot_frame_filt[0] = xzAccelMagnitude * cosf(accel_angle_robot_frame);
000150  eeb00a68          VMOV.F32 s0,s17
000154  f7fffffe          BL       __hardfp_cosf
000158  ee200a08          VMUL.F32 s0,s0,s16
00015c  ed880a00          VSTR     s0,[r8,#0]
;;;514            accel_robot_frame_filt[1] = accel_filt[1];
000160  ed940a01          VLDR     s0,[r4,#4]
000164  ed880a01          VSTR     s0,[r8,#4]
;;;515            accel_robot_frame_filt[2] = xzAccelMagnitude * sinf(accel_angle_robot_frame);
000168  eeb00a68          VMOV.F32 s0,s17
00016c  f7fffffe          BL       __hardfp_sinf
000170  ee200a08          VMUL.F32 s0,s0,s16
000174  ed880a02          VSTR     s0,[r8,#8]
;;;516            
;;;517    #if(DEBUG_IMU_FILTER)
;;;518            PERIODIC_PRINT(200, "Accel angle %f %f\n", accel_angle_imu_frame, accel_angle_robot_frame);
;;;519            PERIODIC_PRINT(200, "Accel (robot frame): %f %f %f\n",
;;;520                           accel_robot_frame_filt[0],
;;;521                           accel_robot_frame_filt[1],
;;;522                           accel_robot_frame_filt[2]);
;;;523    #endif
;;;524    
;;;525    
;;;526    #if(0)
;;;527            // Measure peak readings every 2 seconds
;;;528            static f32 max_gyro[3] = {0,0,0};
;;;529            static f32 max_accel[3] = {0,0,0};
;;;530            for (int i=0; i<3; ++i) {
;;;531              if(ABS(gyro_robot_frame_filt[i]) > max_gyro[i]) {
;;;532                max_gyro[i] = ABS(gyro_robot_frame_filt[i]);
;;;533              }
;;;534              
;;;535              if (prev_accel_robot_frame_filt[i] != 0) {
;;;536                f32 dAccel = ABS(accel_robot_frame_filt[i] - prev_accel_robot_frame_filt[i]);
;;;537                if(dAccel > max_accel[i]) {
;;;538                  max_accel[i] = dAccel;
;;;539                }
;;;540              }
;;;541            }
;;;542            
;;;543            static u32 measurement_cycles = 0;
;;;544            if (measurement_cycles++ == 400) {
;;;545              PRINT("Max gyro: %f %f %f\n",
;;;546                             max_gyro[0],
;;;547                             max_gyro[1],
;;;548                             max_gyro[2]);
;;;549              PRINT("Max accel_delta: %f %f %f\n",
;;;550                             max_accel[0],
;;;551                             max_accel[1],
;;;552                             max_accel[2]);
;;;553              
;;;554                measurement_cycles = 0;
;;;555              for (int i=0; i<3; ++i) {
;;;556                max_accel[i] = 0;
;;;557                max_gyro[i] = 0;
;;;558              }
;;;559            }
;;;560    #endif
;;;561            
;;;562            DetectMotion();
000178  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter12DetectMotionEv ; Anki::Cozmo::IMUFilter::DetectMotion()
;;;563            
;;;564            // XY-plane rotation rate is robot frame z-axis rotation rate
;;;565            rotSpeed_ = gyro_robot_frame_filt[2];
00017c  ed970a02          VLDR     s0,[r7,#8]
000180  ed850a03          VSTR     s0,[r5,#0xc]
000184  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000188  6b29              LDR      r1,[r5,#0x30]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e825lastMotionDetectedTime_usE
00018a  f5012137          ADD      r1,r1,#0xb7000
00018e  f50171d8          ADD      r1,r1,#0x1b0
000192  4288              CMP      r0,r1
000194  d20b              BCS      |L19.430|
;;;566            
;;;567            // Update orientation if motion detected or expected
;;;568            if (MotionDetected()) {
;;;569              f32 dAngle = rotSpeed_ * CONTROL_DT;
000196  ed950a03          VLDR     s0,[r5,#0xc]
00019a  eddf0a4c          VLDR     s1,|L19.716|
00019e  ee200a20          VMUL.F32 s0,s0,s1
;;;570              rot_ += dAngle;
0001a2  edd50a02          VLDR     s1,[r5,#8]
0001a6  ee300a80          VADD.F32 s0,s1,s0
0001aa  ed850a02          VSTR     s0,[r5,#8]
                  |L19.430|
;;;571            }
;;;572            
;;;573            // XXX: DEBUG!
;;;574            //UpdateEventDetection();
;;;575            
;;;576            // Pickup detection
;;;577            pdFiltAccX_ = imu_data.acc_x * ACCEL_PICKUP_FILT_COEFF + pdFiltAccX_ * (1.f - ACCEL_PICKUP_FILT_COEFF);
0001ae  ed9d0a00          VLDR     s0,[sp,#0]
0001b2  edd50a08          VLDR     s1,[r5,#0x20]
0001b6  ee200a29          VMUL.F32 s0,s0,s19
0001ba  ee000a89          VMLA.F32 s0,s1,s18
0001be  ed850a08          VSTR     s0,[r5,#0x20]
;;;578            pdFiltAccY_ = imu_data.acc_y * ACCEL_PICKUP_FILT_COEFF + pdFiltAccY_ * (1.f - ACCEL_PICKUP_FILT_COEFF);
0001c2  ed9d0a01          VLDR     s0,[sp,#4]
0001c6  edd50a09          VLDR     s1,[r5,#0x24]
0001ca  ee200a29          VMUL.F32 s0,s0,s19
0001ce  ee000a89          VMLA.F32 s0,s1,s18
0001d2  ed850a09          VSTR     s0,[r5,#0x24]
;;;579            pdFiltAccZ_ = imu_data.acc_z * ACCEL_PICKUP_FILT_COEFF + pdFiltAccZ_ * (1.f - ACCEL_PICKUP_FILT_COEFF);
0001d6  ed9d0a02          VLDR     s0,[sp,#8]
0001da  edd50a0a          VLDR     s1,[r5,#0x28]
0001de  ee200a29          VMUL.F32 s0,s0,s19
0001e2  ee000a89          VMLA.F32 s0,s1,s18
0001e6  ed850a0a          VSTR     s0,[r5,#0x28]
;;;580            
;;;581            // XXX: Commenting this out because pickup detection seems to be firing
;;;582            //      when the robot drives up ramp (or the side of a platform) and
;;;583            //      clearing pose history.
;;;584            //DetectPickup();
;;;585            
;;;586            //UpdateEventDetection();
;;;587            
;;;588            
;;;589            // Recording IMU data for sending to basestation
;;;590            if (isRecording_) {
0001ea  7968              LDRB     r0,[r5,#5]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e812isRecording_E
0001ec  2800              CMP      r0,#0
0001ee  d05a              BEQ      |L19.678|
;;;591              
;;;592              // Scale accel range of -20000 to +20000mm/s2 (roughly -2g to +2g) to be between -127 and +127
;;;593              const f32 accScaleFactor = 127.f/20000.f;
;;;594              /*
;;;595              imuChunkMsg_.aX[recordDataIdx_] = (accel_robot_frame_filt[0] * accScaleFactor);
;;;596              imuChunkMsg_.aY[recordDataIdx_] = (accel_robot_frame_filt[1] * accScaleFactor);
;;;597              imuChunkMsg_.aZ[recordDataIdx_] = (accel_robot_frame_filt[2] * accScaleFactor);
;;;598               */
;;;599              imuChunkMsg_.aX[recordDataIdx_] = (pdFiltAccX_aligned_ * accScaleFactor);
0001f0  edd50a05          VLDR     s1,[r5,#0x14]
0001f4  ed9f0a36          VLDR     s0,|L19.720|
0001f8  4c36              LDR      r4,|L19.724|
0001fa  79a9              LDRB     r1,[r5,#6]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e814recordDataIdx_E
0001fc  ee600a80          VMUL.F32 s1,s1,s0
000200  1860              ADDS     r0,r4,r1
000202  eefd0ae0          VCVT.S32.F32 s1,s1
000206  ee102a90          VMOV     r2,s1
00020a  70c2              STRB     r2,[r0,#3]
;;;600              imuChunkMsg_.aY[recordDataIdx_] = (pdFiltAccY_aligned_ * accScaleFactor);
00020c  edd50a06          VLDR     s1,[r5,#0x18]
000210  ee600a80          VMUL.F32 s1,s1,s0
000214  eefd0ae0          VCVT.S32.F32 s1,s1
000218  ee102a90          VMOV     r2,s1
00021c  f8802023          STRB     r2,[r0,#0x23]
;;;601              imuChunkMsg_.aZ[recordDataIdx_] = (pdFiltAccZ_aligned_ * accScaleFactor);
000220  edd50a07          VLDR     s1,[r5,#0x1c]
000224  ee200a80          VMUL.F32 s0,s1,s0
000228  eebd0ac0          VCVT.S32.F32 s0,s0
00022c  ee102a10          VMOV     r2,s0
;;;602              
;;;603              // Scale gyro range of -2pi to +2pi rad/s to be between -127 and +127
;;;604              const f32 gyroScaleFactor = 127.f/(2.f*PI_F);
000230  ed9f0a29          VLDR     s0,|L19.728|
000234  f8802043          STRB     r2,[r0,#0x43]         ;601
;;;605              imuChunkMsg_.gX[recordDataIdx_] = (gyro_robot_frame_filt[0] * gyroScaleFactor);
000238  edd70a00          VLDR     s1,[r7,#0]
00023c  ee600a80          VMUL.F32 s1,s1,s0
000240  eefd0ae0          VCVT.S32.F32 s1,s1
000244  ee102a90          VMOV     r2,s1
000248  f8802063          STRB     r2,[r0,#0x63]
;;;606              imuChunkMsg_.gY[recordDataIdx_] = (gyro_robot_frame_filt[1] * gyroScaleFactor);
00024c  edd70a01          VLDR     s1,[r7,#4]
000250  ee600a80          VMUL.F32 s1,s1,s0
000254  eefd0ae0          VCVT.S32.F32 s1,s1
000258  ee102a90          VMOV     r2,s1
00025c  f8802083          STRB     r2,[r0,#0x83]
;;;607              imuChunkMsg_.gZ[recordDataIdx_] = (gyro_robot_frame_filt[2] * gyroScaleFactor);
000260  edd70a02          VLDR     s1,[r7,#8]
000264  ee200a80          VMUL.F32 s0,s1,s0
000268  eebd0ac0          VCVT.S32.F32 s0,s0
00026c  ee102a10          VMOV     r2,s0
000270  f88020a3          STRB     r2,[r0,#0xa3]
;;;608    
;;;609              // Send message when it's full
;;;610              if (++recordDataIdx_ == IMU_CHUNK_SIZE) {
000274  1c48              ADDS     r0,r1,#1
000276  b2c0              UXTB     r0,r0
000278  71a8              STRB     r0,[r5,#6]
00027a  2820              CMP      r0,#0x20
00027c  d113              BNE      |L19.678|
;;;611                HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::IMUDataChunk), &imuChunkMsg_);
00027e  4621              MOV      r1,r4
000280  204b              MOVS     r0,#0x4b
000282  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
;;;612                recordDataIdx_ = 0;
000286  2700              MOVS     r7,#0
000288  71af              STRB     r7,[r5,#6]
;;;613                ++imuChunkMsg_.chunkId;
00028a  7860              LDRB     r0,[r4,#1]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e812imuChunkMsg_E
00028c  1c40              ADDS     r0,r0,#1
00028e  b2c0              UXTB     r0,r0
000290  7060              STRB     r0,[r4,#1]
;;;614                
;;;615                if (imuChunkMsg_.chunkId == imuChunkMsg_.totalNumChunks) {
000292  78a1              LDRB     r1,[r4,#2]  ; _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e812imuChunkMsg_E
000294  4288              CMP      r0,r1
000296  d106              BNE      |L19.678|
;;;616                  PRINT("IMU RECORDING COMPLETE (time %dms)\n", HAL::GetTimeStamp());
000298  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
00029c  4601              MOV      r1,r0
00029e  a00f              ADR      r0,|L19.732|
0002a0  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;617                  isRecording_ = false;
0002a4  716f              STRB     r7,[r5,#5]
                  |L19.678|
;;;618                }
;;;619              }
;;;620            }
;;;621            
;;;622            
;;;623            return retVal;
;;;624            
;;;625          } // Update()
0002a6  b006              ADD      sp,sp,#0x18
0002a8  4630              MOV      r0,r6                 ;623
0002aa  ecbd8b04          VPOP     {d8-d9}
0002ae  e8bd81f0          POP      {r4-r8,pc}
;;;626          
                          ENDP

0002b2  0000              DCW      0x0000
                  |L19.692|
0002b4  3f666666          DCFS     0x3f666666 ; 0.89999997615814209
                  |L19.696|
                          DCD      ||.bss||+0x54
                  |L19.700|
0002bc  3dccccd0          DCFS     0x3dccccd0 ; 0.10000002384185791
                  |L19.704|
0002c0  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
                  |L19.708|
                          DCD      ||.data||
                  |L19.712|
                          DCD      ||.bss||+0x78
                  |L19.716|
0002cc  3ba3d70b          DCFS     0x3ba3d70b ; 0.0050000003539025784
                  |L19.720|
0002d0  3bd013a9          DCFS     0x3bd013a9 ; 0.0063499999232590199
                  |L19.724|
                          DCD      ||.bss||+0x84
                  |L19.728|
0002d8  41a1b390          DCFS     0x41a1b390 ; 20.212677001953125
                  |L19.732|
0002dc  494d5520          DCB      "IMU RECORDING COMPLETE (time %dms)\n",0
0002e0  5245434f
0002e4  5244494e
0002e8  4720434f
0002ec  4d504c45
0002f0  54452028
0002f4  74696d65
0002f8  2025646d
0002fc  73290a00

                          AREA ||i._ZN4Anki5Cozmo9IMUFilter8GetPitchEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter8GetPitchEv PROC ; Anki::Cozmo::IMUFilter::GetPitch()
;;;637          
;;;638          f32 GetPitch()
000000  4801              LDR      r0,|L20.8|
;;;639          {
;;;640            return pitch_;
000002  ed900a04          VLDR     s0,[r0,#0x10]
;;;641          }
000006  4770              BX       lr
;;;642          
                          ENDP

                  |L20.8|
                          DCD      ||.data||

                          AREA ||i.__sti___13_imuFilter_cpp_873cf2e8||, CODE, READONLY, ALIGN=2

                  __sti___13_imuFilter_cpp_873cf2e8 PROC
000000  4803              LDR      r0,|L21.16|
000002  ed9f0a02          VLDR     s0,|L21.12|
000006  ed800a0d          VSTR     s0,[r0,#0x34]
00000a  4770              BX       lr
                          ENDP

                  |L21.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L21.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter16ToggleHeadLightsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter16ToggleHeadLightsEv||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter20TurnOnIndicatorLightEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter20TurnOnIndicatorLightEv||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter21TurnOffIndicatorLightEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter21TurnOffIndicatorLightEv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter21StartPickAndPlaceTestEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter21StartPickAndPlaceTestEv||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter19StartPathFollowTestEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter19StartPathFollowTestEv||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter13StartLiftTestEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter13StartLiftTestEv||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter15SetPickupDetectEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter15SetPickupDetectEb||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter5ResetEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter5ResetEv||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter13DetectFallingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter13DetectFallingEv||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter15DetectNsideDownEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter15DetectNsideDownEv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter14MotionDetectedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter14MotionDetectedEv||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter10IsPickedUpEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter10IsPickedUpEv||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter12DetectPickupEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter12DetectPickupEv||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter20UpdateEventDetectionEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter20UpdateEventDetectionEv||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter12DetectMotionEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter12DetectMotionEv||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter6UpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter6UpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter11GetRotationEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter11GetRotationEv||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter16GetRotationSpeedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter16GetRotationSpeedEv||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter8GetPitchEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter8GetPitchEv||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN4Anki5Cozmo9IMUFilter13RecordAndSendEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo9IMUFilter13RecordAndSendEj||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i.__sti___13_imuFilter_cpp_873cf2e8||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___13_imuFilter_cpp_873cf2e8||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e827prev_accel_robot_frame_filtE ; Anki::Cozmo::IMUFilter::<unnamed>::prev_accel_robot_frame_filt
                          %        12
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810eventTime_E ; Anki::Cozmo::IMUFilter::<unnamed>::eventTime_
                          %        24
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e824eventActivationCallbacksE ; Anki::Cozmo::IMUFilter::<unnamed>::eventActivationCallbacks
                          %        24
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e826eventDeactivationCallbacksE ; Anki::Cozmo::IMUFilter::<unnamed>::eventDeactivationCallbacks
                          %        24
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e89gyro_filtE ; Anki::Cozmo::IMUFilter::<unnamed>::gyro_filt
                          %        12
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e821gyro_robot_frame_filtE ; Anki::Cozmo::IMUFilter::<unnamed>::gyro_robot_frame_filt
                          %        12
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810accel_filtE ; Anki::Cozmo::IMUFilter::<unnamed>::accel_filt
                          %        12
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e822accel_robot_frame_filtE ; Anki::Cozmo::IMUFilter::<unnamed>::accel_robot_frame_filt
                          %        12
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e812imuChunkMsg_E ; Anki::Cozmo::IMUFilter::<unnamed>::imuChunkMsg_
                          %        195

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e823eventActivationTime_us_E ; Anki::Cozmo::IMUFilter::<unnamed>::eventActivationTime_us_
                          DCD      0x0007a120
                          DCD      0x0007a120
                          DCD      0x0007a120
                          DCD      0x0007a120
                          DCD      0x0007a120
                          DCD      0x00000000
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e825eventDeactivationTime_us_E ; Anki::Cozmo::IMUFilter::<unnamed>::eventDeactivationTime_us_
                          DCD      0x0007a120
                          DCD      0x0007a120
                          DCD      0x0007a120
                          DCD      0x0007a120
                          DCD      0x0007a120
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e89pickedUp_E ; Anki::Cozmo::IMUFilter::<unnamed>::pickedUp_
000000  00                DCB      0x00
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdRiseCnt_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdRiseCnt_
000001  00                DCB      0x00
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e810pdFallCnt_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdFallCnt_
000002  00                DCB      0x00
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e818pdLastHeadMoveCnt_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdLastHeadMoveCnt_
000003  00                DCB      0x00
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e822pdUnexpectedMotionCnt_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdUnexpectedMotionCnt_
000004  00                DCB      0x00
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e812isRecording_E ; Anki::Cozmo::IMUFilter::<unnamed>::isRecording_
000005  00                DCB      0x00
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e814recordDataIdx_E ; Anki::Cozmo::IMUFilter::<unnamed>::recordDataIdx_
000006  00                DCB      0x00
                  lightsOn
000007  00                DCB      0x00
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e84rot_E ; Anki::Cozmo::IMUFilter::<unnamed>::rot_
000008  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e89rotSpeed_E ; Anki::Cozmo::IMUFilter::<unnamed>::rotSpeed_
00000c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e86pitch_E ; Anki::Cozmo::IMUFilter::<unnamed>::pitch_
000010  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e819pdFiltAccX_aligned_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdFiltAccX_aligned_
000014  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e819pdFiltAccY_aligned_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdFiltAccY_aligned_
000018  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e819pdFiltAccZ_aligned_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdFiltAccZ_aligned_
00001c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e811pdFiltAccX_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdFiltAccX_
000020  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e811pdFiltAccY_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdFiltAccY_
000024  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e811pdFiltAccZ_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdFiltAccZ_
000028  46192000          DCFS     0x46192000 ; 9800
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e816pdTrendStartVal_E ; Anki::Cozmo::IMUFilter::<unnamed>::pdTrendStartVal_
00002c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e825lastMotionDetectedTime_usE ; Anki::Cozmo::IMUFilter::<unnamed>::lastMotionDetectedTime_us
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e814eventStateRaw_E ; Anki::Cozmo::IMUFilter::<unnamed>::eventStateRaw_
                          DCD      0x00000000
00003c  0000              DCB      0x00,0x00
                  _ZN4Anki5Cozmo9IMUFilter37_GLOBAL__N__13_imuFilter_cpp_873cf2e811eventState_E ; Anki::Cozmo::IMUFilter::<unnamed>::eventState_
00003e  0000              DCB      0x00,0x00
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___13_imuFilter_cpp_873cf2e8
