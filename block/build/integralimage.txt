; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\integralimage.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\integralimage.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\integralimage.crf ..\coretech\vision\robot\src\integralImage.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded20IntegralImage_u8_s32C1ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded20IntegralImage_u8_s32C2ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::IntegralImage_u8_s32::IntegralImage_u8_s32__sub_object(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded20IntegralImage_u8_s32C1ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::IntegralImage_u8_s32::IntegralImage_u8_s32(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;41     
;;;42         IntegralImage_u8_s32::IntegralImage_u8_s32(const Array<u8> &image, MemoryStack &memory, const Flags::Buffer flags)
;;;43           : Array<s32>(image.get_size(0) + 1, image.get_size(1) + 1, memory, flags)
;;;44         {
;;;45           AnkiConditionalErrorAndReturn(this->IsValid(),
;;;46             "IntegralImage_u8_s32::IntegralImage_u8_s32", "Could not allocate array");
;;;47     
;;;48           const s32 integralImageHeight = this->get_size(0);
;;;49           const s32 integralImageWidth = this->get_size(1);
;;;50     
;;;51           {
;;;52             PUSH_MEMORY_STACK(memory);
;;;53     
;;;54             memset(this->Pointer(0,0), 0, this->get_stride());
;;;55     
;;;56             for(s32 y=1; y<integralImageHeight; y++) {
;;;57               const u8 * restrict pImage = image.Pointer(y-1, 0);
;;;58               const s32 * restrict pPrevious = this->Pointer(y-1, 0);
;;;59     
;;;60               s32 * restrict pCurrent  = this->Pointer(y, 0);
;;;61     
;;;62               s32 horizontalSum = 0;
;;;63     
;;;64               pCurrent[0] = 0;
;;;65               for(s32 x=1; x<integralImageWidth; x++) {
;;;66                 horizontalSum += pImage[x-1];
;;;67                 pCurrent[x] = horizontalSum + pPrevious[x];
;;;68               }
;;;69             }
;;;70           }
;;;71         }
;;;72     
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  460e              MOV      r6,r1
000006  4607              MOV      r7,r0
000008  b08e              SUB      sp,sp,#0x38
00000a  461d              MOV      r5,r3
00000c  4690              MOV      r8,r2
00000e  2101              MOVS     r1,#1
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000016  1c44              ADDS     r4,r0,#1
000018  2100              MOVS     r1,#0
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000020  1c41              ADDS     r1,r0,#1
000022  4643              MOV      r3,r8
000024  4622              MOV      r2,r4
000026  4638              MOV      r0,r7
000028  9500              STR      r5,[sp,#0]
00002a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00002e  4604              MOV      r4,r0
000030  6900              LDR      r0,[r0,#0x10]
000032  2800              CMP      r0,#0
000034  d04a              BEQ      |L1.204|
000036  6820              LDR      r0,[r4,#0]
000038  2800              CMP      r0,#0
00003a  bfa4              ITT      GE
00003c  6860              LDRGE    r0,[r4,#4]
00003e  2800              CMPGE    r0,#0
000040  db44              BLT      |L1.204|
000042  2100              MOVS     r1,#0
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIiE8get_sizeEi ; Anki::Embedded::Array<int>::get_size(int) const
00004a  4607              MOV      r7,r0
00004c  2101              MOVS     r1,#1
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIiE8get_sizeEi ; Anki::Embedded::Array<int>::get_size(int) const
000054  4605              MOV      r5,r0
000056  4641              MOV      r1,r8
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00005e  4669              MOV      r1,sp
000060  a807              ADD      r0,sp,#0x1c
000062  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000066  6922              LDR      r2,[r4,#0x10]
000068  68a1              LDR      r1,[r4,#8]
00006a  2000              MOVS     r0,#0
00006c  fb002001          MLA      r0,r0,r1,r2
000070  f7fffffe          BL       __aeabi_memclr4
000074  2201              MOVS     r2,#1
000076  2f01              CMP      r7,#1
000078  bfc8              IT       GT
00007a  f04f0900          MOVGT    r9,#0
00007e  dd21              BLE      |L1.196|
                  |L1.128|
000080  68b3              LDR      r3,[r6,#8]
000082  6931              LDR      r1,[r6,#0x10]
000084  1e50              SUBS     r0,r2,#1
000086  fb001c03          MLA      r12,r0,r3,r1
00008a  4603              MOV      r3,r0
00008c  68a1              LDR      r1,[r4,#8]
00008e  6920              LDR      r0,[r4,#0x10]
000090  fb030801          MLA      r8,r3,r1,r0
000094  fb020301          MLA      r3,r2,r1,r0
000098  2100              MOVS     r1,#0
00009a  2001              MOVS     r0,#1
00009c  f8c39000          STR      r9,[r3,#0]
0000a0  2d01              CMP      r5,#1
0000a2  dd0c              BLE      |L1.190|
                  |L1.164|
0000a4  eb0c0a00          ADD      r10,r12,r0
0000a8  f81aac01          LDRB     r10,[r10,#-1]
0000ac  4451              ADD      r1,r1,r10
0000ae  f858a020          LDR      r10,[r8,r0,LSL #2]
0000b2  448a              ADD      r10,r10,r1
0000b4  f843a020          STR      r10,[r3,r0,LSL #2]
0000b8  1c40              ADDS     r0,r0,#1
0000ba  4285              CMP      r5,r0
0000bc  dcf2              BGT      |L1.164|
                  |L1.190|
0000be  1c52              ADDS     r2,r2,#1
0000c0  42ba              CMP      r2,r7
0000c2  dbdd              BLT      |L1.128|
                  |L1.196|
0000c4  b00e              ADD      sp,sp,#0x38
0000c6  4620              MOV      r0,r4
0000c8  e8bd87f0          POP      {r4-r10,pc}
                  |L1.204|
0000cc  212d              MOVS     r1,#0x2d
0000ce  4806              LDR      r0,|L1.232|
0000d0  e9cd0100          STRD     r0,r1,[sp,#0]
0000d4  a305              ADR      r3,|L1.236|
0000d6  a211              ADR      r2,|L1.284|
0000d8  a117              ADR      r1,|L1.312|
0000da  2005              MOVS     r0,#5
0000dc  f7fffffe          BL       _Anki_Log
0000e0  b00e              ADD      sp,sp,#0x38
0000e2  4620              MOV      r0,r4
0000e4  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

                  |L1.232|
                          DCD      ||.constdata||
                  |L1.236|
0000ec  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\integralImage.cpp",0
0000f0  6f726574
0000f4  6563685c
0000f8  76697369
0000fc  6f6e5c72
000100  6f626f74
000104  5c737263
000108  5c696e74
00010c  65677261
000110  6c496d61
000114  67652e63
000118  707000  
00011b  00                DCB      0
                  |L1.284|
00011c  436f756c          DCB      "Could not allocate array",0
000120  64206e6f
000124  7420616c
000128  6c6f6361
00012c  74652061
000130  72726179
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L1.312|
000138  496e7465          DCB      "IntegralImage_u8_s32::IntegralImage_u8_s32",0
00013c  6772616c
000140  496d6167
000144  655f7538
000148  5f733332
00014c  3a3a496e
000150  74656772
000154  616c496d
000158  6167655f
00015c  75385f73
000160  333200  
000163  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded20IntegralImage_u8_s32C1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded20IntegralImage_u8_s32C2Ev                  ; Alternate entry point ; Anki::Embedded::IntegralImage_u8_s32::IntegralImage_u8_s32__sub_object()
                  _ZN4Anki8Embedded20IntegralImage_u8_s32C1Ev PROC ; Anki::Embedded::IntegralImage_u8_s32::IntegralImage_u8_s32()
;;;36       {
;;;37         IntegralImage_u8_s32::IntegralImage_u8_s32()
;;;38           : Array<s32>()
;;;39         {
;;;40         }
;;;41     
000000  b510              PUSH     {r4,lr}
000002  300c              ADDS     r0,r0,#0xc
000004  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  f8401d0c          STR      r1,[r0,#-0xc]!
000010  6041              STR      r1,[r0,#4]
000012  6081              STR      r1,[r0,#8]
000014  2100              MOVS     r1,#0
000016  6101              STR      r1,[r0,#0x10]
000018  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZN4Anki8Embedded20IntegralImage_u8_u16C1ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded20IntegralImage_u8_u16C2ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::IntegralImage_u8_u16::IntegralImage_u8_u16__sub_object(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded20IntegralImage_u8_u16C1ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::IntegralImage_u8_u16::IntegralImage_u8_u16(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;77     
;;;78         IntegralImage_u8_u16::IntegralImage_u8_u16(const Array<u8> &image, MemoryStack &memory, const Flags::Buffer flags)
;;;79           : Array<u16>(image.get_size(0) + 1, image.get_size(1) + 1, memory, flags)
;;;80         {
;;;81           AnkiConditionalErrorAndReturn(this->IsValid(),
;;;82             "IntegralImage_u8_u16::IntegralImage_u8_u16", "Could not allocate array");
;;;83     
;;;84           const u16 integralImageHeight = this->get_size(0);
;;;85           const u16 integralImageWidth = this->get_size(1);
;;;86     
;;;87           {
;;;88             PUSH_MEMORY_STACK(memory);
;;;89     
;;;90             memset(this->Pointer(0,0), 0, this->get_stride());
;;;91     
;;;92             for(u16 y=1; y<integralImageHeight; y++) {
;;;93               const u8 * restrict pImage = image.Pointer(y-1, 0);
;;;94               const u16 * restrict pPrevious = this->Pointer(y-1, 0);
;;;95     
;;;96               u16 * restrict pCurrent  = this->Pointer(y, 0);
;;;97     
;;;98               u16 horizontalSum = 0;
;;;99     
;;;100              pCurrent[0] = 0;
;;;101              for(u16 x=1; x<integralImageWidth; x++) {
;;;102                horizontalSum += pImage[x-1];
;;;103                pCurrent[x] = horizontalSum + pPrevious[x];
;;;104              }
;;;105            }
;;;106          }
;;;107        }
;;;108    
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  460e              MOV      r6,r1
000006  4607              MOV      r7,r0
000008  b08e              SUB      sp,sp,#0x38
00000a  461c              MOV      r4,r3
00000c  4690              MOV      r8,r2
00000e  2101              MOVS     r1,#1
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000016  1c45              ADDS     r5,r0,#1
000018  2100              MOVS     r1,#0
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000020  1c41              ADDS     r1,r0,#1
000022  4643              MOV      r3,r8
000024  462a              MOV      r2,r5
000026  4638              MOV      r0,r7
000028  9400              STR      r4,[sp,#0]
00002a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00002e  4604              MOV      r4,r0
000030  6900              LDR      r0,[r0,#0x10]
000032  2800              CMP      r0,#0
000034  d045              BEQ      |L3.194|
000036  6820              LDR      r0,[r4,#0]
000038  2800              CMP      r0,#0
00003a  bfa4              ITT      GE
00003c  6861              LDRGE    r1,[r4,#4]
00003e  2900              CMPGE    r1,#0
000040  db3f              BLT      |L3.194|
000042  b287              UXTH     r7,r0
000044  b28d              UXTH     r5,r1
000046  4641              MOV      r1,r8
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00004e  4669              MOV      r1,sp
000050  a807              ADD      r0,sp,#0x1c
000052  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000056  6922              LDR      r2,[r4,#0x10]
000058  68a1              LDR      r1,[r4,#8]
00005a  2000              MOVS     r0,#0
00005c  fb002001          MLA      r0,r0,r1,r2
000060  f7fffffe          BL       __aeabi_memclr
000064  2201              MOVS     r2,#1
000066  2f01              CMP      r7,#1
000068  bf88              IT       HI
00006a  f04f0a00          MOVHI    r10,#0
00006e  d924              BLS      |L3.186|
                  |L3.112|
000070  68b3              LDR      r3,[r6,#8]
000072  6931              LDR      r1,[r6,#0x10]
000074  1e50              SUBS     r0,r2,#1
000076  fb001c03          MLA      r12,r0,r3,r1
00007a  4603              MOV      r3,r0
00007c  68a1              LDR      r1,[r4,#8]
00007e  6920              LDR      r0,[r4,#0x10]
000080  fb030901          MLA      r9,r3,r1,r0
000084  fb020301          MLA      r3,r2,r1,r0
000088  2100              MOVS     r1,#0
00008a  2001              MOVS     r0,#1
00008c  f8a3a000          STRH     r10,[r3,#0]
000090  2d01              CMP      r5,#1
000092  d90e              BLS      |L3.178|
                  |L3.148|
000094  eb0c0800          ADD      r8,r12,r0
000098  f8188c01          LDRB     r8,[r8,#-1]
00009c  4441              ADD      r1,r1,r8
00009e  f8398010          LDRH     r8,[r9,r0,LSL #1]
0000a2  b289              UXTH     r1,r1
0000a4  4488              ADD      r8,r8,r1
0000a6  f8238010          STRH     r8,[r3,r0,LSL #1]
0000aa  1c40              ADDS     r0,r0,#1
0000ac  b280              UXTH     r0,r0
0000ae  4285              CMP      r5,r0
0000b0  d8f0              BHI      |L3.148|
                  |L3.178|
0000b2  1c50              ADDS     r0,r2,#1
0000b4  b282              UXTH     r2,r0
0000b6  42ba              CMP      r2,r7
0000b8  d3da              BCC      |L3.112|
                  |L3.186|
0000ba  b00e              ADD      sp,sp,#0x38
0000bc  4620              MOV      r0,r4
0000be  e8bd87f0          POP      {r4-r10,pc}
                  |L3.194|
0000c2  2151              MOVS     r1,#0x51
0000c4  4806              LDR      r0,|L3.224|
0000c6  e9cd0100          STRD     r0,r1,[sp,#0]
0000ca  a306              ADR      r3,|L3.228|
0000cc  a211              ADR      r2,|L3.276|
0000ce  a118              ADR      r1,|L3.304|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  b00e              ADD      sp,sp,#0x38
0000d8  4620              MOV      r0,r4
0000da  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

0000de  0000              DCW      0x0000
                  |L3.224|
                          DCD      ||.constdata||+0xa7
                  |L3.228|
0000e4  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\integralImage.cpp",0
0000e8  6f726574
0000ec  6563685c
0000f0  76697369
0000f4  6f6e5c72
0000f8  6f626f74
0000fc  5c737263
000100  5c696e74
000104  65677261
000108  6c496d61
00010c  67652e63
000110  707000  
000113  00                DCB      0
                  |L3.276|
000114  436f756c          DCB      "Could not allocate array",0
000118  64206e6f
00011c  7420616c
000120  6c6f6361
000124  74652061
000128  72726179
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L3.304|
000130  496e7465          DCB      "IntegralImage_u8_u16::IntegralImage_u8_u16",0
000134  6772616c
000138  496d6167
00013c  655f7538
000140  5f753136
000144  3a3a496e
000148  74656772
00014c  616c496d
000150  6167655f
000154  75385f75
000158  313600  
00015b  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded20IntegralImage_u8_u16C1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded20IntegralImage_u8_u16C2Ev                  ; Alternate entry point ; Anki::Embedded::IntegralImage_u8_u16::IntegralImage_u8_u16__sub_object()
                  _ZN4Anki8Embedded20IntegralImage_u8_u16C1Ev PROC ; Anki::Embedded::IntegralImage_u8_u16::IntegralImage_u8_u16()
;;;72     
;;;73         IntegralImage_u8_u16::IntegralImage_u8_u16()
;;;74           : Array<u16>()
;;;75         {
;;;76         }
;;;77     
000000  b510              PUSH     {r4,lr}
000002  300c              ADDS     r0,r0,#0xc
000004  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  f8401d0c          STR      r1,[r0,#-0xc]!
000010  6041              STR      r1,[r0,#4]
000012  6081              STR      r1,[r0,#8]
000014  2100              MOVS     r1,#0
000016  6101              STR      r1,[r0,#0x10]
000018  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3210ScrollDownERKNS0_5ArrayIhEEiNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3210ScrollDownERKNS0_5ArrayIhEEiNS0_11MemoryStackE PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollDown(const Anki::Embedded::Array<unsigned char>&, int, Anki::Embedded::MemoryStack)
;;;125    
;;;126        Result ScrollingIntegralImage_u8_s32::ScrollDown(const Array<u8> &image, s32 numRowsToScroll, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;127        {
000004  b089              SUB      sp,sp,#0x24
000006  4604              MOV      r4,r0
000008  461f              MOV      r7,r3
00000a  4616              MOV      r6,r2
;;;128          Result lastResult;
;;;129    
;;;130          const s32 imageHeight = image.get_size(0);
00000c  2100              MOVS     r1,#0
00000e  980a              LDR      r0,[sp,#0x28]
000010  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000014  4681              MOV      r9,r0
;;;131          const s32 imageWidth = image.get_size(1);
000016  2101              MOVS     r1,#1
000018  980a              LDR      r0,[sp,#0x28]
00001a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;132    
;;;133          const s32 integralImageHeight = this->get_size(0);
00001e  2100              MOVS     r1,#0
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIiE8get_sizeEi ; Anki::Embedded::Array<int>::get_size(int) const
000026  4605              MOV      r5,r0
;;;134          const s32 integralImageWidth = this->get_size(1);
000028  2101              MOVS     r1,#1
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIiE8get_sizeEi ; Anki::Embedded::Array<int>::get_size(int) const
000030  4683              MOV      r11,r0
;;;135    
;;;136          //AnkiAssert(imageWidth%ANKI_VISION_IMAGE_WIDTH_SHIFT == 0);
;;;137          AnkiAssert(this->imageWidth == imageWidth);
;;;138    
;;;139          AnkiConditionalErrorAndReturnValue(numRowsToScroll > 0 && numRowsToScroll <= integralImageHeight,
000032  2e00              CMP      r6,#0
000034  dd01              BLE      |L5.58|
000036  42ae              CMP      r6,r5
000038  dd0e              BLE      |L5.88|
                  |L5.58|
00003a  218b              MOVS     r1,#0x8b
00003c  4868              LDR      r0,|L5.480|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a368              ADR      r3,|L5.484|
000044  a273              ADR      r2,|L5.532|
000046  a17c              ADR      r1,|L5.568|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
;;;140            RESULT_FAIL_INVALID_PARAMETER, "ScrollingIntegralImage_u8_s32::ScrollDown", "numRowsToScroll is to high or low");
;;;141    
;;;142          Array<u8> paddedRow(1, integralImageWidth, scratch);
;;;143          u8 * restrict pPaddedRow = paddedRow.Pointer(0, 0);
;;;144    
;;;145          s32 curIntegralImageY;
;;;146          s32 curImageY;
;;;147    
;;;148          // If we are asked to scroll all rows, we won't keep track of any of the previous data, so
;;;149          // we'll start by initializing the first rows
;;;150          if(numRowsToScroll == integralImageHeight) {
;;;151            BeginBenchmark("scrolling_first");
;;;152    
;;;153            if((lastResult = PadImageRow(image, 0, paddedRow)) != RESULT_OK)
;;;154              return lastResult;
;;;155    
;;;156            curIntegralImageY = 0;
;;;157    
;;;158            // Create the first line
;;;159            ComputeIntegralImageRow(pPaddedRow, this->Pointer(0, 0), integralImageWidth);
;;;160            curIntegralImageY++;
;;;161    
;;;162            // Fill in the top padded rows
;;;163            if(numBorderPixels > 0) {
;;;164              //for curIntegralImageY = 2:(1+extraBorderWidth)
;;;165              for(s32 y=0; y<numBorderPixels; y++) {
;;;166                ComputeIntegralImageRow(pPaddedRow, this->Pointer(curIntegralImageY-1, 0), this->Pointer(curIntegralImageY, 0), integralImageWidth);
;;;167                curIntegralImageY++;
;;;168              }
;;;169    
;;;170              numRowsToScroll -= numBorderPixels;
;;;171            } // if(numBorderPixels == 0)
;;;172    
;;;173            numRowsToScroll--;
;;;174            curImageY = 0;
;;;175    
;;;176            EndBenchmark("scrolling_first");
;;;177          } else { // if(numRowsToScroll == integralImageHeight)
;;;178            BeginBenchmark("scrolling_nth");
;;;179    
;;;180            curImageY = this->maxRow;
;;;181            curIntegralImageY = integralImageHeight - numRowsToScroll;
;;;182    
;;;183            // Scroll this integral image up
;;;184            // integralImage(1:(end-numRowsToUpdate), :) = integralImage((1+numRowsToUpdate):end, :);
;;;185            for(s32 y=0; y<(integralImageHeight-numRowsToScroll); y++) {
;;;186              s32 * restrict pIntegralImage_yDst = this->Pointer(y, 0);
;;;187              const s32 * restrict pIntegralImage_ySrc = this->Pointer(y+numRowsToScroll, 0);
;;;188    
;;;189              memcpy(pIntegralImage_yDst, pIntegralImage_ySrc, this->get_stride());
;;;190            }
;;;191            this->rowOffset += numRowsToScroll;
;;;192    
;;;193            EndBenchmark("scrolling_nth");
;;;194          } // if(numRowsToScroll == integralImageHeight) ... else
;;;195    
;;;196          // Compute the non-padded integral image rows
;;;197          if(curImageY < imageHeight) {
;;;198            BeginBenchmark("scrolling_nonPadded");
;;;199    
;;;200            //for iy = 1:numRowsToScroll
;;;201            while(numRowsToScroll > 0) {
;;;202              curImageY++;
;;;203    
;;;204              // If we've run out of image, exit this loop, then start the bottom-padding loop
;;;205              if(curImageY >= imageHeight) {
;;;206                curImageY = imageHeight - 1;
;;;207                break;
;;;208              }
;;;209    
;;;210              //BeginBenchmark("scrolling_nonPadded_pad");
;;;211              if((lastResult = PadImageRow(image, curImageY, paddedRow)) != RESULT_OK)
;;;212                return lastResult;
;;;213              //EndBenchmark("scrolling_nonPadded_pad");
;;;214    
;;;215              //BeginBenchmark("scrolling_nonPadded_compute");
;;;216              ComputeIntegralImageRow(pPaddedRow, this->Pointer(curIntegralImageY-1, 0), this->Pointer(curIntegralImageY, 0), integralImageWidth);
;;;217              //EndBenchmark("scrolling_nonPadded_compute");
;;;218    
;;;219              numRowsToScroll--;
;;;220              curIntegralImageY++;
;;;221            }
;;;222    
;;;223            EndBenchmark("scrolling_nonPadded");
;;;224          } else {
;;;225            curImageY = imageHeight - 1;
;;;226          }
;;;227    
;;;228          this->maxRow = curImageY;
;;;229          //this->minRow = MAX(0, this->maxRow-integralImageHeight+1);
;;;230    
;;;231          // If we're at the bottom of the image, compute the extra bottom padded rows
;;;232          if(numRowsToScroll > 0) {
;;;233            BeginBenchmark("scrolling_scroll");
;;;234    
;;;235            //paddedImageRow = padImageRow(image, curImageY, numBorderPixels);
;;;236            if((lastResult = PadImageRow(image, curImageY, paddedRow)) != RESULT_OK)
;;;237              return lastResult;
;;;238    
;;;239            //for iy = (iy+1):numRowsToScroll
;;;240            while(numRowsToScroll > 0) {
;;;241              // integralImage(curIntegralImageY,1) = paddedImageRow(1,1) + integralImage(curIntegralImageY-1,1);
;;;242              // for x = 2:size(paddedImageRow, 2)
;;;243              //     integralImage(curIntegralImageY,x) = paddedImageRow(1,x) + integralImage(curIntegralImageY,x-1) + integralImage(curIntegralImageY-1,x) - integralImage(curIntegralImageY-1,x-1);
;;;244              // end
;;;245              ComputeIntegralImageRow(pPaddedRow, this->Pointer(curIntegralImageY-1, 0), this->Pointer(curIntegralImageY, 0), integralImageWidth);
;;;246    
;;;247              curIntegralImageY++;
;;;248              numRowsToScroll--;
;;;249              //this->minRow++;
;;;250            }
;;;251    
;;;252            EndBenchmark("scrolling_scroll");
;;;253          }
;;;254    
;;;255          return RESULT_OK;
;;;256        }
00004e  b00d              ADD      sp,sp,#0x34
000050  f04f7040          MOV      r0,#0x3000000         ;139
000054  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.88|
000058  2300              MOVS     r3,#0                 ;142
00005a  461a              MOV      r2,r3                 ;142
00005c  2101              MOVS     r1,#1                 ;142
00005e  a807              ADD      r0,sp,#0x1c           ;142
000060  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000064  6800              LDR      r0,[r0,#0]            ;142
000066  9000              STR      r0,[sp,#0]            ;142
000068  463b              MOV      r3,r7                 ;142
00006a  465a              MOV      r2,r11                ;142
00006c  2101              MOVS     r1,#1                 ;142
00006e  a802              ADD      r0,sp,#8              ;142
000070  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000074  2000              MOVS     r0,#0                 ;143
000076  9a04              LDR      r2,[sp,#0x10]         ;143
000078  9906              LDR      r1,[sp,#0x18]         ;143
00007a  42ae              CMP      r6,r5                 ;150
00007c  fb001a02          MLA      r10,r0,r2,r1          ;150
000080  d13c              BNE      |L5.252|
000082  a078              ADR      r0,|L5.612|
000084  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000088  ab02              ADD      r3,sp,#8              ;153
00008a  2200              MOVS     r2,#0                 ;153
00008c  4620              MOV      r0,r4                 ;153
00008e  990a              LDR      r1,[sp,#0x28]         ;153
000090  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3211PadImageRowERKNS0_5ArrayIhEEiRS3_ ; Anki::Embedded::ScrollingIntegralImage_u8_s32::PadImageRow(const Anki::Embedded::Array<unsigned char>&, int, Anki::Embedded::Array<unsigned char>&)
000094  2800              CMP      r0,#0                 ;153
000096  bf1c              ITT      NE
000098  b00d              ADDNE    sp,sp,#0x34
00009a  e8bd8ff0          POPNE    {r4-r11,pc}
00009e  f04f0c00          MOV      r12,#0                ;156
0000a2  68a2              LDR      r2,[r4,#8]            ;156
0000a4  6921              LDR      r1,[r4,#0x10]         ;156
0000a6  4660              MOV      r0,r12                ;156
0000a8  fb0c1302          MLA      r3,r12,r2,r1          ;156
0000ac  4661              MOV      r1,r12                ;156
0000ae  f1bb0f00          CMP      r11,#0                ;156
0000b2  dd07              BLE      |L5.196|
                  |L5.180|
0000b4  f81a2000          LDRB     r2,[r10,r0]           ;156
0000b8  4411              ADD      r1,r1,r2              ;156
0000ba  f8431020          STR      r1,[r3,r0,LSL #2]     ;156
0000be  1c40              ADDS     r0,r0,#1              ;156
0000c0  4583              CMP      r11,r0                ;156
0000c2  dcf7              BGT      |L5.180|
                  |L5.196|
0000c4  6a20              LDR      r0,[r4,#0x20]         ;163
0000c6  f10c0501          ADD      r5,r12,#1             ;160
0000ca  2800              CMP      r0,#0                 ;163
0000cc  bfc8              IT       GT                    ;165
0000ce  2700              MOVGT    r7,#0                 ;165
0000d0  dd10              BLE      |L5.244|
                  |L5.210|
0000d2  68a1              LDR      r1,[r4,#8]            ;163
0000d4  6920              LDR      r0,[r4,#0x10]         ;163
0000d6  1e6b              SUBS     r3,r5,#1              ;166
0000d8  fb050201          MLA      r2,r5,r1,r0           ;166
0000dc  fb030101          MLA      r1,r3,r1,r0           ;166
0000e0  465b              MOV      r3,r11                ;166
0000e2  4650              MOV      r0,r10                ;166
0000e4  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPKiPii ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ComputeIntegralImageRow(const unsigned char*, const int*, int*, int)
0000e8  6a20              LDR      r0,[r4,#0x20]         ;165
0000ea  1c6d              ADDS     r5,r5,#1              ;167
0000ec  1c7f              ADDS     r7,r7,#1              ;165
0000ee  42b8              CMP      r0,r7                 ;165
0000f0  dcef              BGT      |L5.210|
0000f2  1a36              SUBS     r6,r6,r0              ;170
                  |L5.244|
0000f4  1e76              SUBS     r6,r6,#1              ;173
0000f6  2700              MOVS     r7,#0                 ;174
0000f8  a05a              ADR      r0,|L5.612|
0000fa  e01a              B        |L5.306|
                  |L5.252|
0000fc  a05d              ADR      r0,|L5.628|
0000fe  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000102  1bad              SUBS     r5,r5,r6              ;181
000104  69a7              LDR      r7,[r4,#0x18]         ;185
000106  f04f0800          MOV      r8,#0                 ;185
00010a  2d00              CMP      r5,#0                 ;185
00010c  dd0d              BLE      |L5.298|
                  |L5.270|
00010e  68a2              LDR      r2,[r4,#8]            ;185
000110  6921              LDR      r1,[r4,#0x10]         ;185
000112  eb080306          ADD      r3,r8,r6              ;187
000116  fb081002          MLA      r0,r8,r2,r1           ;187
00011a  fb031102          MLA      r1,r3,r2,r1           ;187
00011e  f7fffffe          BL       __aeabi_memcpy4
000122  f1080801          ADD      r8,r8,#1              ;185
000126  4545              CMP      r5,r8                 ;185
000128  dcf1              BGT      |L5.270|
                  |L5.298|
00012a  69e0              LDR      r0,[r4,#0x1c]         ;191
00012c  4430              ADD      r0,r0,r6              ;191
00012e  61e0              STR      r0,[r4,#0x1c]         ;193
000130  a050              ADR      r0,|L5.628|
                  |L5.306|
000132  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000136  45b9              CMP      r9,r7                 ;197
000138  bfd8              IT       LE                    ;225
00013a  f1a90701          SUBLE    r7,r9,#1              ;225
00013e  dd27              BLE      |L5.400|
000140  a050              ADR      r0,|L5.644|
000142  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000146  2e00              CMP      r6,#0                 ;201
000148  dd1f              BLE      |L5.394|
                  |L5.330|
00014a  1c7f              ADDS     r7,r7,#1              ;202
00014c  454f              CMP      r7,r9                 ;205
00014e  db02              BLT      |L5.342|
000150  f1a90701          SUB      r7,r9,#1              ;206
000154  e019              B        |L5.394|
                  |L5.342|
000156  ab02              ADD      r3,sp,#8              ;211
000158  463a              MOV      r2,r7                 ;211
00015a  4620              MOV      r0,r4                 ;211
00015c  990a              LDR      r1,[sp,#0x28]         ;211
00015e  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3211PadImageRowERKNS0_5ArrayIhEEiRS3_ ; Anki::Embedded::ScrollingIntegralImage_u8_s32::PadImageRow(const Anki::Embedded::Array<unsigned char>&, int, Anki::Embedded::Array<unsigned char>&)
000162  2800              CMP      r0,#0                 ;211
000164  bf1c              ITT      NE
000166  b00d              ADDNE    sp,sp,#0x34
000168  e8bd8ff0          POPNE    {r4-r11,pc}
00016c  68a1              LDR      r1,[r4,#8]
00016e  6920              LDR      r0,[r4,#0x10]
000170  1e6b              SUBS     r3,r5,#1              ;216
000172  fb050201          MLA      r2,r5,r1,r0           ;216
000176  fb030101          MLA      r1,r3,r1,r0           ;216
00017a  465b              MOV      r3,r11                ;216
00017c  4650              MOV      r0,r10                ;216
00017e  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPKiPii ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ComputeIntegralImageRow(const unsigned char*, const int*, int*, int)
000182  1e76              SUBS     r6,r6,#1              ;219
000184  1c6d              ADDS     r5,r5,#1              ;220
000186  2e00              CMP      r6,#0                 ;201
000188  dcdf              BGT      |L5.330|
                  |L5.394|
00018a  a03e              ADR      r0,|L5.644|
00018c  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
                  |L5.400|
000190  61a7              STR      r7,[r4,#0x18]         ;232
000192  2e00              CMP      r6,#0                 ;232
000194  dd20              BLE      |L5.472|
000196  a040              ADR      r0,|L5.664|
000198  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00019c  ab02              ADD      r3,sp,#8              ;236
00019e  463a              MOV      r2,r7                 ;236
0001a0  4620              MOV      r0,r4                 ;236
0001a2  990a              LDR      r1,[sp,#0x28]         ;236
0001a4  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3211PadImageRowERKNS0_5ArrayIhEEiRS3_ ; Anki::Embedded::ScrollingIntegralImage_u8_s32::PadImageRow(const Anki::Embedded::Array<unsigned char>&, int, Anki::Embedded::Array<unsigned char>&)
0001a8  2800              CMP      r0,#0                 ;236
0001aa  bf1c              ITT      NE
0001ac  b00d              ADDNE    sp,sp,#0x34
0001ae  e8bd8ff0          POPNE    {r4-r11,pc}
                  |L5.434|
0001b2  68a1              LDR      r1,[r4,#8]
0001b4  6920              LDR      r0,[r4,#0x10]
0001b6  1e6a              SUBS     r2,r5,#1              ;245
0001b8  fb050c01          MLA      r12,r5,r1,r0          ;245
0001bc  fb020101          MLA      r1,r2,r1,r0           ;245
0001c0  465b              MOV      r3,r11                ;245
0001c2  4662              MOV      r2,r12                ;245
0001c4  4650              MOV      r0,r10                ;245
0001c6  f7fffffe          BL       _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPKiPii ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ComputeIntegralImageRow(const unsigned char*, const int*, int*, int)
0001ca  1c6d              ADDS     r5,r5,#1              ;247
0001cc  1e76              SUBS     r6,r6,#1              ;248
0001ce  2e00              CMP      r6,#0                 ;240
0001d0  dcef              BGT      |L5.434|
0001d2  a031              ADR      r0,|L5.664|
0001d4  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
                  |L5.472|
0001d8  b00d              ADD      sp,sp,#0x34
0001da  2000              MOVS     r0,#0                 ;255
0001dc  e8bd8ff0          POP      {r4-r11,pc}
;;;257    
                          ENDP

                  |L5.480|
                          DCD      ||.constdata||+0x1fd
                  |L5.484|
0001e4  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\integralImage.cpp",0
0001e8  6f726574
0001ec  6563685c
0001f0  76697369
0001f4  6f6e5c72
0001f8  6f626f74
0001fc  5c737263
000200  5c696e74
000204  65677261
000208  6c496d61
00020c  67652e63
000210  707000  
000213  00                DCB      0
                  |L5.532|
000214  6e756d52          DCB      "numRowsToScroll is to high or low",0
000218  6f777354
00021c  6f536372
000220  6f6c6c20
000224  69732074
000228  6f206869
00022c  6768206f
000230  72206c6f
000234  7700    
000236  00                DCB      0
000237  00                DCB      0
                  |L5.568|
000238  5363726f          DCB      "ScrollingIntegralImage_u8_s32::ScrollDown",0
00023c  6c6c696e
000240  67496e74
000244  65677261
000248  6c496d61
00024c  67655f75
000250  385f7333
000254  323a3a53
000258  63726f6c
00025c  6c446f77
000260  6e00    
000262  00                DCB      0
000263  00                DCB      0
                  |L5.612|
000264  7363726f          DCB      "scrolling_first",0
000268  6c6c696e
00026c  675f6669
000270  72737400
                  |L5.628|
000274  7363726f          DCB      "scrolling_nth",0
000278  6c6c696e
00027c  675f6e74
000280  6800    
000282  00                DCB      0
000283  00                DCB      0
                  |L5.644|
000284  7363726f          DCB      "scrolling_nonPadded",0
000288  6c6c696e
00028c  675f6e6f
000290  6e506164
000294  64656400
                  |L5.664|
000298  7363726f          DCB      "scrolling_scroll",0
00029c  6c6c696e
0002a0  675f7363
0002a4  726f6c6c
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3211PadImageRowERKNS0_5ArrayIhEEiRS3_||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3211PadImageRowERKNS0_5ArrayIhEEiRS3_ PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::PadImageRow(const Anki::Embedded::Array<unsigned char>&, int, Anki::Embedded::Array<unsigned char>&)
;;;304    
;;;305        Result ScrollingIntegralImage_u8_s32::PadImageRow(const Array<u8> &image, const s32 whichRow, Array<u8> &paddedRow)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;306        {
000004  460e              MOV      r6,r1
000006  4604              MOV      r4,r0
000008  4698              MOV      r8,r3
00000a  4617              MOV      r7,r2
;;;307          const s32 imageHeight = image.get_size(0);
00000c  2100              MOVS     r1,#0
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;308          const s32 imageWidth = image.get_size(1);
000014  2101              MOVS     r1,#1
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00001c  4605              MOV      r5,r0
;;;309          const s32 imageWidth4 = imageWidth >> 2;
00001e  ea4f0ca0          ASR      r12,r0,#2
000022  68b1              LDR      r1,[r6,#8]
000024  6930              LDR      r0,[r6,#0x10]
000026  f8d82008          LDR      r2,[r8,#8]
00002a  fb070701          MLA      r7,r7,r1,r0
00002e  f8d81010          LDR      r1,[r8,#0x10]
;;;310    
;;;311          AnkiAssert(image.IsValid());
;;;312          AnkiAssert(paddedRow.IsValid());
;;;313          AnkiAssert(AreEqualSize(1, imageWidth+2*numBorderPixels, paddedRow));
;;;314          AnkiAssert(whichRow >= 0);
;;;315          AnkiAssert(whichRow < imageHeight);
;;;316    
;;;317          const u32 * restrict image_u32rowPointer = reinterpret_cast<const u32*>(image.Pointer(whichRow, 0));
;;;318          const u8 * restrict image_u8rowPointer = image.Pointer(whichRow, 0);
;;;319    
;;;320          // Technically aliases, but the writes don't overlap
;;;321          u8 * restrict paddedRow_u8rowPointer = paddedRow.Pointer(0, 0);
000032  2000              MOVS     r0,#0
000034  fb001202          MLA      r2,r0,r2,r1
;;;322          u32 * restrict paddedRow_u32rowPointerPxpad = reinterpret_cast<u32*>(paddedRow_u8rowPointer + numBorderPixels);
000038  f8d49020          LDR      r9,[r4,#0x20]
;;;323    
;;;324          const u8 firstPixel = image_u8rowPointer[0];
;;;325          const u8 lastPixel = image_u8rowPointer[imageWidth-1];
00003c  1978              ADDS     r0,r7,r5
;;;326    
;;;327          s32 xPad = 0;
00003e  2100              MOVS     r1,#0
000040  783b              LDRB     r3,[r7,#0]            ;324
000042  f8106c01          LDRB     r6,[r0,#-1]           ;325
000046  eb090802          ADD      r8,r9,r2              ;322
;;;328          for(s32 x=0; x<numBorderPixels; x++) {
00004a  4608              MOV      r0,r1
00004c  f1b90f00          CMP      r9,#0
000050  dd06              BLE      |L6.96|
                  |L6.82|
;;;329            paddedRow_u8rowPointer[xPad++] = firstPixel;
000052  5453              STRB     r3,[r2,r1]
000054  f8d49020          LDR      r9,[r4,#0x20]         ;328
000058  1c49              ADDS     r1,r1,#1
00005a  1c40              ADDS     r0,r0,#1              ;328
00005c  4581              CMP      r9,r0                 ;328
00005e  dcf8              BGT      |L6.82|
                  |L6.96|
;;;330          }
;;;331    
;;;332          for(s32 xImage = 0; xImage<imageWidth4; xImage++) {
000060  2000              MOVS     r0,#0
000062  f1bc0f00          CMP      r12,#0
000066  dd06              BLE      |L6.118|
                  |L6.104|
;;;333            paddedRow_u32rowPointerPxpad[xImage] = image_u32rowPointer[xImage];
000068  f8573020          LDR      r3,[r7,r0,LSL #2]
00006c  f8483020          STR      r3,[r8,r0,LSL #2]
000070  1c40              ADDS     r0,r0,#1              ;332
000072  4584              CMP      r12,r0                ;332
000074  dcf8              BGT      |L6.104|
                  |L6.118|
;;;334          }
;;;335    
;;;336          xPad += imageWidth;
;;;337          for(s32 x=0; x<numBorderPixels; x++) {
000076  6a23              LDR      r3,[r4,#0x20]
000078  2000              MOVS     r0,#0
00007a  4429              ADD      r1,r1,r5              ;336
00007c  2b00              CMP      r3,#0
00007e  dd05              BLE      |L6.140|
                  |L6.128|
;;;338            paddedRow_u8rowPointer[xPad++] = lastPixel;
000080  5456              STRB     r6,[r2,r1]
000082  6a23              LDR      r3,[r4,#0x20]         ;337
000084  1c49              ADDS     r1,r1,#1
000086  1c40              ADDS     r0,r0,#1              ;337
000088  4283              CMP      r3,r0                 ;337
00008a  dcf9              BGT      |L6.128|
                  |L6.140|
;;;339          }
;;;340    
;;;341          return RESULT_OK;
00008c  2000              MOVS     r0,#0
;;;342        }
00008e  e8bd87f0          POP      {r4-r10,pc}
;;;343    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3219FilterRow_innerLoopIhEEviiiiPKiS4_S4_S4_PT_||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3219FilterRow_innerLoopIhEEviiiiPKiS4_S4_S4_PT_ PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow_innerLoop<unsigned char>(int, int, int, int, const int*, const int*, const int*, const int*, T1*)
;;;394    
;;;395        template<> void ScrollingIntegralImage_u8_s32::FilterRow_innerLoop(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;396          const s32 minX,
;;;397          const s32 maxX,
;;;398          const s32 outputMultiply,
;;;399          const s32 outputRightShift,
;;;400          const s32 * restrict pIntegralImage_00,
;;;401          const s32 * restrict pIntegralImage_01,
;;;402          const s32 * restrict pIntegralImage_10,
;;;403          const s32 * restrict pIntegralImage_11,
;;;404          u8 * restrict pOutput)
;;;405        {
;;;406    #if ACCELERATION_TYPE == ACCELERATION_NONE
;;;407          if(outputMultiply == 1 && outputRightShift == 0) {
;;;408            for(s32 x=minX; x<=maxX; x++) {
;;;409              pOutput[x] = static_cast<u8>( pIntegralImage_11[x] - pIntegralImage_10[x] + pIntegralImage_00[x] - pIntegralImage_01[x] );
;;;410            }
;;;411          } else {
;;;412            for(s32 x=minX; x<=maxX; x++) {
;;;413              pOutput[x] = static_cast<u8>( ((pIntegralImage_11[x] - pIntegralImage_10[x] + pIntegralImage_00[x] - pIntegralImage_01[x]) * outputMultiply) >> outputRightShift ) ;
;;;414            }
;;;415          }
;;;416    #elif ACCELERATION_TYPE == ACCELERATION_ARM_M4
;;;417          if(outputMultiply == 1 && outputRightShift == 0) {
;;;418            const s32 maxX_firstCycles = RoundUp(minX, 4);
000004  f04f0a04          MOV      r10,#4
000008  fb90f8fa          SDIV     r8,r0,r10
00000c  ea4f0988          LSL      r9,r8,#2
000010  f1a00801          SUB      r8,r0,#1
000014  b083              SUB      sp,sp,#0xc            ;405
000016  fb98f8fa          SDIV     r8,r8,r10             ;405
00001a  e9dd540d          LDRD     r5,r4,[sp,#0x34]      ;405
00001e  e9ddc70f          LDRD     r12,r7,[sp,#0x3c]     ;405
000022  f1080801          ADD      r8,r8,#1              ;405
;;;419    
;;;420            for(s32 x=minX; x<maxX_firstCycles; x++) {
;;;421              pOutput[x] = static_cast<u8>( pIntegralImage_11[x] - pIntegralImage_10[x] + pIntegralImage_00[x] - pIntegralImage_01[x] );
;;;422            }
;;;423    
;;;424            u32 * restrict pOutputU32 = reinterpret_cast<u32*>(pOutput);
;;;425    
;;;426            const s32 minX_simd4 = maxX_firstCycles / 4;
;;;427            const s32 maxX_simd4 = maxX / 4;
000026  ea4f7ae1          ASR      r10,r1,#31
00002a  9e0c              LDR      r6,[sp,#0x30]         ;417
00002c  ea4f0888          LSL      r8,r8,#2              ;417
000030  eb01719a          ADD      r1,r1,r10,LSR #30
000034  2a01              CMP      r2,#1                 ;417
000036  bf08              IT       EQ                    ;417
000038  2b00              CMPEQ    r3,#0                 ;417
00003a  d07c              BEQ      |L7.310|
00003c  2800              CMP      r0,#0                 ;405
00003e  bfd8              IT       LE                    ;405
000040  46c8              MOVLE    r8,r9                 ;405
;;;428            for(s32 x=minX_simd4; x<=maxX_simd4; x++) {
;;;429              const u32 out0 = static_cast<u8>( pIntegralImage_11[x*4] - pIntegralImage_10[x*4] + pIntegralImage_00[x*4] - pIntegralImage_01[x*4] );
;;;430              const u32 out1 = static_cast<u8>( pIntegralImage_11[x*4+1] - pIntegralImage_10[x*4+1] + pIntegralImage_00[x*4+1] - pIntegralImage_01[x*4+1] );
;;;431              const u32 out2 = static_cast<u8>( pIntegralImage_11[x*4+2] - pIntegralImage_10[x*4+2] + pIntegralImage_00[x*4+2] - pIntegralImage_01[x*4+2] );
;;;432              const u32 out3 = static_cast<u8>( pIntegralImage_11[x*4+3] - pIntegralImage_10[x*4+3] + pIntegralImage_00[x*4+3] - pIntegralImage_01[x*4+3] );
;;;433    
;;;434              pOutputU32[x] = (out0 & 0xFF) | ((out1 & 0xFF) << 8) | ((out2 & 0xFF) << 16) | ((out3 & 0xFF) << 24);
;;;435            }
;;;436          } else {
;;;437            const s32 maxX_firstCycles = RoundUp(minX, 4);
;;;438    
;;;439            for(s32 x=minX; x<maxX_firstCycles; x++) {
000042  4540              CMP      r0,r8
000044  da15              BGE      |L7.114|
                  |L7.70|
;;;440              pOutput[x] = static_cast<u8>( ((pIntegralImage_11[x] - pIntegralImage_10[x] + pIntegralImage_00[x] - pIntegralImage_01[x] ) * outputMultiply) >> outputRightShift );
000046  f85c9020          LDR      r9,[r12,r0,LSL #2]
00004a  f854a020          LDR      r10,[r4,r0,LSL #2]
00004e  eba9090a          SUB      r9,r9,r10
000052  f856a020          LDR      r10,[r6,r0,LSL #2]
000056  44d1              ADD      r9,r9,r10
000058  f855a020          LDR      r10,[r5,r0,LSL #2]
00005c  eba9090a          SUB      r9,r9,r10
000060  fb09f902          MUL      r9,r9,r2
000064  fa49f903          ASR      r9,r9,r3
000068  f8079000          STRB     r9,[r7,r0]
00006c  1c40              ADDS     r0,r0,#1              ;439
00006e  4540              CMP      r0,r8                 ;439
000070  dbe9              BLT      |L7.70|
                  |L7.114|
;;;441            }
;;;442    
;;;443            u32 * restrict pOutputU32 = reinterpret_cast<u32*>(pOutput);
;;;444    
;;;445            const s32 minX_simd4 = maxX_firstCycles / 4;
000072  ea4f70e8          ASR      r0,r8,#31
000076  eb087090          ADD      r0,r8,r0,LSR #30
;;;446            const s32 maxX_simd4 = maxX / 4;
00007a  1089              ASRS     r1,r1,#2
00007c  1080              ASRS     r0,r0,#2              ;445
;;;447            for(s32 x=minX_simd4; x<=maxX_simd4; x++) {
00007e  9702              STR      r7,[sp,#8]
000080  9100              STR      r1,[sp,#0]
000082  4288              CMP      r0,r1
;;;448              const u32 out0 = static_cast<u8>( ((pIntegralImage_11[x*4] - pIntegralImage_10[x*4] + pIntegralImage_00[x*4] - pIntegralImage_01[x*4]) * outputMultiply) >> outputRightShift );
;;;449              const u32 out1 = static_cast<u8>( ((pIntegralImage_11[x*4+1] - pIntegralImage_10[x*4+1] + pIntegralImage_00[x*4+1] - pIntegralImage_01[x*4+1]) * outputMultiply) >> outputRightShift );
;;;450              const u32 out2 = static_cast<u8>( ((pIntegralImage_11[x*4+2] - pIntegralImage_10[x*4+2] + pIntegralImage_00[x*4+2] - pIntegralImage_01[x*4+2]) * outputMultiply) >> outputRightShift );
;;;451              const u32 out3 = static_cast<u8>( ((pIntegralImage_11[x*4+3] - pIntegralImage_10[x*4+3] + pIntegralImage_00[x*4+3] - pIntegralImage_01[x*4+3]) * outputMultiply) >> outputRightShift );
;;;452    
;;;453              pOutputU32[x] = (out0 & 0xFF) | ((out1 & 0xFF) << 8) | ((out2 & 0xFF) << 16) | ((out3 & 0xFF) << 24);
;;;454            }
;;;455          }
;;;456    #elif ACCELERATION_TYPE == ACCELERATION_ARM_A7
;;;457          if(outputMultiply == 1 && outputRightShift == 0) {
;;;458            BeginBenchmark("integral1");
;;;459            for(s32 x=minX; x<=maxX; x++) {
;;;460              pOutput[x] = static_cast<u8>( pIntegralImage_11[x] - pIntegralImage_10[x] + pIntegralImage_00[x] - pIntegralImage_01[x] );
;;;461            }
;;;462            EndBenchmark("integral1");
;;;463          } else {
;;;464            //        BeginBenchmark("integral2");
;;;465    
;;;466            s32 x = minX;
;;;467    
;;;468            for(; x<=(maxX-3); x+=4) {
;;;469              pOutput[x]   = static_cast<u8>( ((pIntegralImage_11[x]   - pIntegralImage_10[x]   + pIntegralImage_00[x]   - pIntegralImage_01[x])   * outputMultiply) >> outputRightShift ) ;
;;;470              pOutput[x+1] = static_cast<u8>( ((pIntegralImage_11[x+1] - pIntegralImage_10[x+1] + pIntegralImage_00[x+1] - pIntegralImage_01[x+1]) * outputMultiply) >> outputRightShift ) ;
;;;471              pOutput[x+2] = static_cast<u8>( ((pIntegralImage_11[x+2] - pIntegralImage_10[x+2] + pIntegralImage_00[x+2] - pIntegralImage_01[x+2]) * outputMultiply) >> outputRightShift ) ;
;;;472              pOutput[x+3] = static_cast<u8>( ((pIntegralImage_11[x+3] - pIntegralImage_10[x+3] + pIntegralImage_00[x+3] - pIntegralImage_01[x+3]) * outputMultiply) >> outputRightShift ) ;
;;;473            }
;;;474    
;;;475            /*for(; x<=(maxX-7); x+=8) {
;;;476              pOutput[x]   = static_cast<u8>( ((pIntegralImage_11[x]   - pIntegralImage_10[x]   + pIntegralImage_00[x]   - pIntegralImage_01[x])   * outputMultiply) >> outputRightShift ) ;
;;;477              pOutput[x+1] = static_cast<u8>( ((pIntegralImage_11[x+1] - pIntegralImage_10[x+1] + pIntegralImage_00[x+1] - pIntegralImage_01[x+1]) * outputMultiply) >> outputRightShift ) ;
;;;478              pOutput[x+2] = static_cast<u8>( ((pIntegralImage_11[x+2] - pIntegralImage_10[x+2] + pIntegralImage_00[x+2] - pIntegralImage_01[x+2]) * outputMultiply) >> outputRightShift ) ;
;;;479              pOutput[x+3] = static_cast<u8>( ((pIntegralImage_11[x+3] - pIntegralImage_10[x+3] + pIntegralImage_00[x+3] - pIntegralImage_01[x+3]) * outputMultiply) >> outputRightShift ) ;
;;;480              pOutput[x+4] = static_cast<u8>( ((pIntegralImage_11[x+4] - pIntegralImage_10[x+4] + pIntegralImage_00[x+4] - pIntegralImage_01[x+4]) * outputMultiply) >> outputRightShift ) ;
;;;481              pOutput[x+5] = static_cast<u8>( ((pIntegralImage_11[x+5] - pIntegralImage_10[x+5] + pIntegralImage_00[x+5] - pIntegralImage_01[x+5]) * outputMultiply) >> outputRightShift ) ;
;;;482              pOutput[x+6] = static_cast<u8>( ((pIntegralImage_11[x+6] - pIntegralImage_10[x+6] + pIntegralImage_00[x+6] - pIntegralImage_01[x+6]) * outputMultiply) >> outputRightShift ) ;
;;;483              pOutput[x+7] = static_cast<u8>( ((pIntegralImage_11[x+7] - pIntegralImage_10[x+7] + pIntegralImage_00[x+7] - pIntegralImage_01[x+7]) * outputMultiply) >> outputRightShift ) ;
;;;484            }*/
;;;485    
;;;486            /*      const u32 * restrict pIntegralImageU32_00 = reinterpret_cast<const u32*>(pIntegralImage_00);
;;;487            const u32 * restrict pIntegralImageU32_01 = reinterpret_cast<const u32*>(pIntegralImage_01);
;;;488            const u32 * restrict pIntegralImageU32_10 = reinterpret_cast<const u32*>(pIntegralImage_10);
;;;489            const u32 * restrict pIntegralImageU32_11 = reinterpret_cast<const u32*>(pIntegralImage_11);
;;;490    
;;;491            s32 x;
;;;492            for(; x<=(maxX-7); x+=8) {
;;;493            const uint32x4_t ii00_0 = vld1q_u32(&pIntegralImageU32_00[x]);
;;;494            const uint32x4_t ii01_0 = vld1q_u32(&pIntegralImageU32_01[x]);
;;;495            const uint32x4_t ii10_0 = vld1q_u32(&pIntegralImageU32_10[x]);
;;;496            const uint32x4_t ii11_0 = vld1q_u32(&pIntegralImageU32_11[x]);
;;;497            const uint32x4_t ii00_1 = vld1q_u32(&pIntegralImageU32_00[x+4]);
;;;498            const uint32x4_t ii01_1 = vld1q_u32(&pIntegralImageU32_01[x+4]);
;;;499            const uint32x4_t ii10_1 = vld1q_u32(&pIntegralImageU32_10[x+4]);
;;;500            const uint32x4_t ii11_1 = vld1q_u32(&pIntegralImageU32_11[x+4]);
;;;501    
;;;502            const uint32x4_t boxSum_0 = ii11_0 - ii10_0 + ii00_0 - ii01_0;
;;;503            const uint32x4_t boxSum_1 = ii11_1 - ii10_1 + ii00_1 - ii01_1;
;;;504    
;;;505            const uint32x4_t normalizedBoxSum_0 = (boxSum_0 * outputMultiply) >> outputRightShift;
;;;506            const uint32x4_t normalizedBoxSum_1 = (boxSum_1 * outputMultiply) >> outputRightShift;
;;;507    
;;;508            const uint16x4_t normalizedBoxSumU16_0 = vmovn_u32(normalizedBoxSum_0);
;;;509            const uint16x4_t normalizedBoxSumU16_1 = vmovn_u32(normalizedBoxSum_1);
;;;510    
;;;511            const uint16x8_t normalizedBoxSumU16_10 = vcombine_u16(normalizedBoxSumU16_0, normalizedBoxSumU16_1);
;;;512    
;;;513            const uint8x8_t normalizedBoxSumU8_10 = vmovn_u16(normalizedBoxSumU16_10);
;;;514    
;;;515            vst1_u8(&pOutput[x], normalizedBoxSumU8_10);
;;;516            }*/
;;;517    
;;;518            for(; x<=maxX; x++) {
;;;519              pOutput[x] = static_cast<u8>( ((pIntegralImage_11[x] - pIntegralImage_10[x] + pIntegralImage_00[x] - pIntegralImage_01[x]) * outputMultiply) >> outputRightShift ) ;
;;;520            }
;;;521    
;;;522            //        EndBenchmark("integral2");
;;;523          }
;;;524    #else
;;;525    #error Unknown acceleration
;;;526    #endif // #if ACCELERATION_TYPE == ACCELERATION_NONE ... #else
;;;527        } // FilterRow_innerLoop()
000084  bfc4              ITT      GT
000086  b003              ADDGT    sp,sp,#0xc
000088  e8bd8ff0          POPGT    {r4-r11,pc}
                  |L7.140|
00008c  eb0c1100          ADD      r1,r12,r0,LSL #4      ;448
000090  eb041900          ADD      r9,r4,r0,LSL #4       ;448
000094  680f              LDR      r7,[r1,#0]            ;448
000096  f8d98000          LDR      r8,[r9,#0]            ;448
00009a  eba70708          SUB      r7,r7,r8              ;448
00009e  eb061800          ADD      r8,r6,r0,LSL #4       ;448
0000a2  f8d8a000          LDR      r10,[r8,#0]           ;448
0000a6  44ba              ADD      r10,r10,r7            ;448
0000a8  eb051700          ADD      r7,r5,r0,LSL #4       ;448
0000ac  f8d7b000          LDR      r11,[r7,#0]           ;448
0000b0  ebaa0a0b          SUB      r10,r10,r11           ;448
0000b4  fb0afa02          MUL      r10,r10,r2            ;448
0000b8  fa4afa03          ASR      r10,r10,r3            ;448
0000bc  f00a0eff          AND      lr,r10,#0xff          ;448
0000c0  f8cde004          STR      lr,[sp,#4]            ;449
0000c4  f8d1a004          LDR      r10,[r1,#4]           ;449
0000c8  f8d9b004          LDR      r11,[r9,#4]           ;449
0000cc  f8d9e008          LDR      lr,[r9,#8]            ;450
0000d0  ebaa0a0b          SUB      r10,r10,r11           ;449
0000d4  f8d8b004          LDR      r11,[r8,#4]           ;449
0000d8  f8d9900c          LDR      r9,[r9,#0xc]          ;451
0000dc  44da              ADD      r10,r10,r11           ;449
0000de  f8d7b004          LDR      r11,[r7,#4]           ;449
0000e2  ebaa0a0b          SUB      r10,r10,r11           ;449
0000e6  fb0afa02          MUL      r10,r10,r2            ;449
0000ea  fa4afa03          ASR      r10,r10,r3            ;449
0000ee  f00a0bff          AND      r11,r10,#0xff         ;449
0000f2  f8d1a008          LDR      r10,[r1,#8]           ;450
0000f6  68c9              LDR      r1,[r1,#0xc]          ;451
0000f8  ebaa0a0e          SUB      r10,r10,lr            ;450
0000fc  f8d8e008          LDR      lr,[r8,#8]            ;450
000100  f8d8800c          LDR      r8,[r8,#0xc]          ;451
000104  44f2              ADD      r10,r10,lr            ;450
000106  f8d7e008          LDR      lr,[r7,#8]            ;450
00010a  eba10109          SUB      r1,r1,r9              ;451
00010e  ebaa0a0e          SUB      r10,r10,lr            ;450
000112  fb0afa02          MUL      r10,r10,r2            ;450
000116  fa4afa03          ASR      r10,r10,r3            ;450
00011a  68ff              LDR      r7,[r7,#0xc]          ;451
00011c  4441              ADD      r1,r1,r8              ;451
00011e  1bc9              SUBS     r1,r1,r7              ;451
000120  f8dde004          LDR      lr,[sp,#4]            ;453
000124  f00a0aff          AND      r10,r10,#0xff         ;450
000128  4351              MULS     r1,r2,r1              ;451
00012a  f36b2e1f          BFI      lr,r11,#8,#24         ;453
00012e  4119              ASRS     r1,r1,r3              ;451
000130  ea4e470a          ORR      r7,lr,r10,LSL #16     ;453
000134  e000              B        |L7.312|
                  |L7.310|
000136  e00b              B        |L7.336|
                  |L7.312|
000138  ea476701          ORR      r7,r7,r1,LSL #24      ;453
00013c  9902              LDR      r1,[sp,#8]            ;453
00013e  f8417020          STR      r7,[r1,r0,LSL #2]     ;453
000142  9900              LDR      r1,[sp,#0]            ;447
000144  1c40              ADDS     r0,r0,#1              ;447
000146  4288              CMP      r0,r1                 ;447
000148  dda0              BLE      |L7.140|
00014a  b003              ADD      sp,sp,#0xc
00014c  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.336|
000150  2800              CMP      r0,#0
000152  bfd8              IT       LE
000154  46c8              MOVLE    r8,r9
000156  4540              CMP      r0,r8                 ;420
000158  da0e              BGE      |L7.376|
                  |L7.346|
00015a  f81c2020          LDRB     r2,[r12,r0,LSL #2]    ;421
00015e  f8143020          LDRB     r3,[r4,r0,LSL #2]     ;421
000162  1ad2              SUBS     r2,r2,r3              ;421
000164  f8163020          LDRB     r3,[r6,r0,LSL #2]     ;421
000168  441a              ADD      r2,r2,r3              ;421
00016a  f8153020          LDRB     r3,[r5,r0,LSL #2]     ;421
00016e  1ad2              SUBS     r2,r2,r3              ;421
000170  543a              STRB     r2,[r7,r0]            ;421
000172  1c40              ADDS     r0,r0,#1              ;420
000174  4540              CMP      r0,r8                 ;420
000176  dbf0              BLT      |L7.346|
                  |L7.376|
000178  ea4f70e8          ASR      r0,r8,#31             ;426
00017c  eb087090          ADD      r0,r8,r0,LSR #30      ;426
000180  1080              ASRS     r0,r0,#2              ;426
000182  ea4f08a1          ASR      r8,r1,#2              ;427
000186  9700              STR      r7,[sp,#0]            ;428
000188  4540              CMP      r0,r8                 ;428
00018a  bfc4              ITT      GT
00018c  b003              ADDGT    sp,sp,#0xc
00018e  e8bd8ff0          POPGT    {r4-r11,pc}
                  |L7.402|
000192  eb0c1700          ADD      r7,r12,r0,LSL #4      ;429
000196  eb041300          ADD      r3,r4,r0,LSL #4       ;429
00019a  7839              LDRB     r1,[r7,#0]            ;429
00019c  781a              LDRB     r2,[r3,#0]            ;429
00019e  f893e008          LDRB     lr,[r3,#8]            ;431
0001a2  1a8a              SUBS     r2,r1,r2              ;429
0001a4  eb061100          ADD      r1,r6,r0,LSL #4       ;429
0001a8  f8919000          LDRB     r9,[r1,#0]            ;429
0001ac  4491              ADD      r9,r9,r2              ;429
0001ae  eb051200          ADD      r2,r5,r0,LSL #4       ;429
0001b2  f892a000          LDRB     r10,[r2,#0]           ;429
0001b6  eba9090a          SUB      r9,r9,r10             ;429
0001ba  f0090bff          AND      r11,r9,#0xff          ;429
0001be  f8979004          LDRB     r9,[r7,#4]            ;430
0001c2  f893a004          LDRB     r10,[r3,#4]           ;430
0001c6  7b1b              LDRB     r3,[r3,#0xc]          ;432
0001c8  eba9090a          SUB      r9,r9,r10             ;430
0001cc  f891a004          LDRB     r10,[r1,#4]           ;430
0001d0  44d1              ADD      r9,r9,r10             ;430
0001d2  f892a004          LDRB     r10,[r2,#4]           ;430
0001d6  eba9090a          SUB      r9,r9,r10             ;430
0001da  f0090aff          AND      r10,r9,#0xff          ;430
0001de  f8979008          LDRB     r9,[r7,#8]            ;431
0001e2  7b3f              LDRB     r7,[r7,#0xc]          ;432
0001e4  eba9090e          SUB      r9,r9,lr              ;431
0001e8  f891e008          LDRB     lr,[r1,#8]            ;431
0001ec  7b09              LDRB     r1,[r1,#0xc]          ;432
0001ee  44f1              ADD      r9,r9,lr              ;431
0001f0  f892e008          LDRB     lr,[r2,#8]            ;431
0001f4  1afb              SUBS     r3,r7,r3              ;432
0001f6  7b12              LDRB     r2,[r2,#0xc]          ;432
0001f8  eba9090e          SUB      r9,r9,lr              ;431
0001fc  4419              ADD      r1,r1,r3              ;432
0001fe  f00909ff          AND      r9,r9,#0xff           ;431
000202  1a89              SUBS     r1,r1,r2              ;432
000204  f36a2b1f          BFI      r11,r10,#8,#24        ;434
000208  ea4b4209          ORR      r2,r11,r9,LSL #16     ;434
00020c  ea426201          ORR      r2,r2,r1,LSL #24      ;434
000210  9900              LDR      r1,[sp,#0]            ;434
000212  f8412020          STR      r2,[r1,r0,LSL #2]     ;434
000216  1c40              ADDS     r0,r0,#1              ;428
000218  4540              CMP      r0,r8                 ;428
00021a  ddba              BLE      |L7.402|
00021c  b003              ADD      sp,sp,#0xc
00021e  e8bd8ff0          POP      {r4-r11,pc}
;;;528      } // namespace Embedded
                          ENDP


                          AREA ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPKiPii||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPKiPii PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ComputeIntegralImageRow(const unsigned char*, const int*, int*, int)
;;;356    
;;;357        void ScrollingIntegralImage_u8_s32::ComputeIntegralImageRow(const u8 * restrict paddedImage_currentRow, const s32 * restrict integralImage_previousRow, s32 * restrict integralImage_currentRow, const s32 integralImageWidth)
000000  e92d03f0          PUSH     {r4-r9}
;;;358        {
;;;359          s32 horizontalSum = 0;
;;;360    
;;;361          s32 x = 0;
;;;362    
;;;363    #if ACCELERATION_TYPE == ACCELERATION_ARM_M4
;;;364          const s32 integralImageWidth4 = (integralImageWidth-3) / 4;
000004  1edd              SUBS     r5,r3,#3
000006  17ee              ASRS     r6,r5,#31
000008  2400              MOVS     r4,#0                 ;359
00000a  eb057596          ADD      r5,r5,r6,LSR #30
00000e  ea4f08a5          ASR      r8,r5,#2
000012  46a4              MOV      r12,r4                ;361
;;;365    
;;;366          const u32 * restrict paddedImage_currentRowU32 = reinterpret_cast<const u32*>(paddedImage_currentRow);
;;;367    
;;;368          for(; x<integralImageWidth4; x++) {
000014  f1b80f00          CMP      r8,#0
000018  dd25              BLE      |L8.102|
                  |L8.26|
;;;369            const u32 curPixel = paddedImage_currentRowU32[x];
00001a  f850502c          LDR      r5,[r0,r12,LSL #2]
;;;370     
;;;371            horizontalSum += curPixel & 0xFF;
00001e  fa54f485          UXTAB    r4,r4,r5
;;;372            integralImage_currentRow[4*x] = horizontalSum + integralImage_previousRow[4*x];
000022  eb01170c          ADD      r7,r1,r12,LSL #4
000026  683e              LDR      r6,[r7,#0]
000028  eb060904          ADD      r9,r6,r4
00002c  eb02160c          ADD      r6,r2,r12,LSL #4
000030  f10c0c01          ADD      r12,r12,#1            ;368
;;;373     
;;;374            horizontalSum += (curPixel & 0xFF00) >> 8;
000034  f8c69000          STR      r9,[r6,#0]
000038  f3c52907          UBFX     r9,r5,#8,#8
00003c  444c              ADD      r4,r4,r9
;;;375            integralImage_currentRow[4*x + 1] = horizontalSum + integralImage_previousRow[4*x + 1];
00003e  f8d79004          LDR      r9,[r7,#4]
000042  45e0              CMP      r8,r12                ;368
000044  44a1              ADD      r9,r9,r4
;;;376     
;;;377            horizontalSum += (curPixel & 0xFF0000) >> 16;
000046  f8c69004          STR      r9,[r6,#4]
00004a  f3c54907          UBFX     r9,r5,#16,#8
00004e  444c              ADD      r4,r4,r9
;;;378            integralImage_currentRow[4*x + 2] = horizontalSum + integralImage_previousRow[4*x + 2];
000050  f8d79008          LDR      r9,[r7,#8]
000054  44a1              ADD      r9,r9,r4
;;;379     
;;;380            horizontalSum += (curPixel & 0xFF000000) >> 24;
000056  eb046415          ADD      r4,r4,r5,LSR #24
;;;381            integralImage_currentRow[4*x + 3] = horizontalSum + integralImage_previousRow[4*x + 3];
00005a  f8c69008          STR      r9,[r6,#8]
00005e  68fd              LDR      r5,[r7,#0xc]
000060  4425              ADD      r5,r5,r4
000062  60f5              STR      r5,[r6,#0xc]          ;368
000064  dcd9              BGT      |L8.26|
                  |L8.102|
;;;382          }
;;;383    
;;;384          x *= 4;
000066  ea4f0c8c          LSL      r12,r12,#2
;;;385    #elif ACCELERATION_TYPE == ACCELERATION_ARM_A7
;;;386        // TODO: doesn't seem possible to accelerate this much. Just loading the data takes most of the time. A manual 16x unrolling improves the speed by maybe 8%.
;;;387    #endif
;;;388    
;;;389          for(; x<integralImageWidth; x++) {
00006a  459c              CMP      r12,r3
;;;390            horizontalSum += paddedImage_currentRow[x];
;;;391            integralImage_currentRow[x] = horizontalSum + integralImage_previousRow[x];
;;;392          }
;;;393        }
00006c  bfa4              ITT      GE
00006e  e8bd03f0          POPGE    {r4-r9}
000072  4770              BXGE     lr
                  |L8.116|
000074  f810500c          LDRB     r5,[r0,r12]           ;390
000078  442c              ADD      r4,r4,r5              ;390
00007a  f851502c          LDR      r5,[r1,r12,LSL #2]    ;391
00007e  4425              ADD      r5,r5,r4              ;391
000080  f842502c          STR      r5,[r2,r12,LSL #2]    ;391
000084  f10c0c01          ADD      r12,r12,#1            ;389
000088  459c              CMP      r12,r3                ;389
00008a  dbf3              BLT      |L8.116|
00008c  e8bd03f0          POP      {r4-r9}
000090  4770              BX       lr
;;;394    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPii||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPii PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ComputeIntegralImageRow(const unsigned char*, int*, int)
;;;343    
;;;344        void ScrollingIntegralImage_u8_s32::ComputeIntegralImageRow(const u8* restrict paddedImage_currentRow, s32 * restrict integralImage_currentRow, const s32 integralImageWidth)
000000  f04f0c00          MOV      r12,#0
;;;345        {
;;;346          s32 horizontalSum = 0;
;;;347    
;;;348          s32 x = 0;
000004  4663              MOV      r3,r12
;;;349          for(; x<integralImageWidth; x++) {
000006  2a00              CMP      r2,#0
;;;350            const u8 curPixel = paddedImage_currentRow[x];
;;;351    
;;;352            horizontalSum += curPixel;
;;;353            integralImage_currentRow[x] = horizontalSum;
;;;354          }
;;;355        }
000008  bfd8              IT       LE
00000a  4770              BXLE     lr
00000c  b410              PUSH     {r4}                  ;345
                  |L9.14|
00000e  5cc4              LDRB     r4,[r0,r3]            ;350
000010  44a4              ADD      r12,r12,r4            ;352
000012  f841c023          STR      r12,[r1,r3,LSL #2]    ;353
000016  1c5b              ADDS     r3,r3,#1              ;349
000018  4293              CMP      r3,r2                 ;349
00001a  dbf8              BLT      |L9.14|
00001c  bc10              POP      {r4}
00001e  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C2EiiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32__sub_object(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32(int, int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;113    
;;;114        ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32(const s32 bufferHeight, const s32 imageWidth, const s32 numBorderPixels, MemoryStack &memory, const Flags::Buffer flags)
;;;115          : Array<s32>(bufferHeight, imageWidth+2*numBorderPixels, memory, flags), imageWidth(imageWidth), maxRow(-1), rowOffset(-numBorderPixels), numBorderPixels(numBorderPixels)
;;;116        {
;;;117          //AnkiAssert(imageWidth%ANKI_VISION_IMAGE_WIDTH_SHIFT == 0);
;;;118    
;;;119          if(numBorderPixels < 0 || numBorderPixels > bufferHeight || numBorderPixels > imageWidth) {
;;;120            AnkiError("Anki.ScrollingIntegralImage_u8_s32.ScrollingIntegralImage_u8_s32", "numBorderPixels must be greater than or equal to zero, and less than the size of this ScrollingIntegralImage.");
;;;121            InvalidateArray();
;;;122            return;
;;;123          }
;;;124        }
;;;125    
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b082              SUB      sp,sp,#8
000006  461d              MOV      r5,r3
000008  4616              MOV      r6,r2
00000a  e9dd3208          LDRD     r3,r2,[sp,#0x20]
00000e  9200              STR      r2,[sp,#0]
000010  4688              MOV      r8,r1
000012  eb060245          ADD      r2,r6,r5,LSL #1
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  4604              MOV      r4,r0
00001c  4268              RSBS     r0,r5,#0
00001e  e9c40507          STRD     r0,r5,[r4,#0x1c]
000022  f04f37ff          MOV      r7,#0xffffffff
000026  2d00              CMP      r5,#0
000028  e9c46705          STRD     r6,r7,[r4,#0x14]
00002c  bfa8              IT       GE
00002e  45a8              CMPGE    r8,r5
000030  db05              BLT      |L10.62|
000032  42b5              CMP      r5,r6
000034  bfde              ITTT     LE
000036  4620              MOVLE    r0,r4
000038  b002              ADDLE    sp,sp,#8
00003a  e8bd81f0          POPLE    {r4-r8,pc}
                  |L10.62|
00003e  2178              MOVS     r1,#0x78
000040  4809              LDR      r0,|L10.104|
000042  e9cd0100          STRD     r0,r1,[sp,#0]
000046  f50072f3          ADD      r2,r0,#0x1e6
00004a  f2002156          ADD      r1,r0,#0x256
00004e  a307              ADR      r3,|L10.108|
000050  2005              MOVS     r0,#5
000052  f7fffffe          BL       _Anki_Log
000056  6027              STR      r7,[r4,#0]
000058  6067              STR      r7,[r4,#4]
00005a  2000              MOVS     r0,#0
00005c  60a7              STR      r7,[r4,#8]
00005e  6120              STR      r0,[r4,#0x10]
000060  b002              ADD      sp,sp,#8
000062  4620              MOV      r0,r4
000064  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L10.104|
                          DCD      ||.constdata||+0x14e
                  |L10.108|
00006c  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\integralImage.cpp",0
000070  6f726574
000074  6563685c
000078  76697369
00007c  6f6e5c72
000080  6f626f74
000084  5c737263
000088  5c696e74
00008c  65677261
000090  6c496d61
000094  67652e63
000098  707000  
00009b  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C2Ev                  ; Alternate entry point ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32__sub_object()
                  _ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1Ev PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32()
;;;108    
;;;109        ScrollingIntegralImage_u8_s32::ScrollingIntegralImage_u8_s32()
;;;110          : Array<s32>(), imageWidth(-1), maxRow(-1), rowOffset(-1), numBorderPixels(-1)
;;;111        {
;;;112        }
;;;113    
000000  b510              PUSH     {r4,lr}
000002  300c              ADDS     r0,r0,#0xc
000004  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  f8401d0c          STR      r1,[r0,#-0xc]!
000010  2200              MOVS     r2,#0
000012  6041              STR      r1,[r0,#4]
000014  6081              STR      r1,[r0,#8]
000016  e9c02104          STRD     r2,r1,[r0,#0x10]
00001a  6181              STR      r1,[r0,#0x18]
00001c  61c1              STR      r1,[r0,#0x1c]
00001e  6201              STR      r1,[r0,#0x20]
000020  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3210get_maxRowEi||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3210get_maxRowEi PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::get_maxRow(int) const
;;;273    
;;;274        s32 ScrollingIntegralImage_u8_s32::get_maxRow(const s32 filterHalfHeight) const
000000  4602              MOV      r2,r0
;;;275        {
;;;276          AnkiAssert(filterHalfHeight >= 0);
;;;277    
;;;278          // TODO: make cleaner ?
;;;279    
;;;280          s32 shiftedMaxRow = maxRow - filterHalfHeight;
000002  6980              LDR      r0,[r0,#0x18]
;;;281          const s32 bottomOffset = shiftedMaxRow - this->rowOffset + filterHalfHeight;
000004  69d3              LDR      r3,[r2,#0x1c]
000006  1a40              SUBS     r0,r0,r1              ;280
000008  1ac3              SUBS     r3,r0,r3
;;;282    
;;;283          if(bottomOffset < (this->size[0]-1)) {
00000a  6812              LDR      r2,[r2,#0]
00000c  4419              ADD      r1,r1,r3              ;281
00000e  1e53              SUBS     r3,r2,#1
000010  428b              CMP      r3,r1
;;;284            shiftedMaxRow += (this->size[0]-1) - bottomOffset;
;;;285          }
;;;286    
;;;287          return shiftedMaxRow;
;;;288        }
000012  bfd8              IT       LE
000014  4770              BXLE     lr
000016  1a51              SUBS     r1,r2,r1              ;284
000018  4408              ADD      r0,r0,r1              ;284
00001a  1e40              SUBS     r0,r0,#1              ;284
00001c  4770              BX       lr
;;;289    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3213get_rowOffsetEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3213get_rowOffsetEv PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::get_rowOffset() const
;;;299    
;;;300        s32 ScrollingIntegralImage_u8_s32::get_rowOffset() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;301        {
;;;302          return rowOffset;
;;;303        }
000002  4770              BX       lr
;;;304    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3214get_imageWidthEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3214get_imageWidthEv PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::get_imageWidth() const
;;;289    
;;;290        s32 ScrollingIntegralImage_u8_s32::get_imageWidth() const
000000  6940              LDR      r0,[r0,#0x14]
;;;291        {
;;;292          return imageWidth;
;;;293        }
000002  4770              BX       lr
;;;294    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3219get_numBorderPixelsEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3219get_numBorderPixelsEv PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::get_numBorderPixels() const
;;;294    
;;;295        s32 ScrollingIntegralImage_u8_s32::get_numBorderPixels() const
000000  6a00              LDR      r0,[r0,#0x20]
;;;296        {
;;;297          return numBorderPixels;
;;;298        }
000002  4770              BX       lr
;;;299    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowERKNS0_9RectangleIsEEiRNS0_5ArrayIiEE||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowERKNS0_9RectangleIsEEiRNS0_5ArrayIiEE PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow(const Anki::Embedded::Rectangle<short>&, int, Anki::Embedded::Array<int>&) const
;;;257    
;;;258        Result ScrollingIntegralImage_u8_s32::FilterRow(const Rectangle<s16> &filter, const s32 imageRow, Array<s32> &output) const
000000  b500              PUSH     {lr}
;;;259        {
000002  b083              SUB      sp,sp,#0xc
;;;260          return this->FilterRow<s32>(filter, imageRow, 1, 0, output);
000004  f04f0c00          MOV      r12,#0
000008  e9cdc300          STRD     r12,r3,[sp,#0]
00000c  2301              MOVS     r3,#1
00000e  f7fffffe          BL       _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIiEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE ; Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow<int>(const Anki::Embedded::Rectangle<short>&, int, int, int, Anki::Embedded::Array<T1>&) const
;;;261        }
000012  b003              ADD      sp,sp,#0xc
000014  bd00              POP      {pc}
;;;262    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded20IntegralImage_u8_s32C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded20IntegralImage_u8_s32C1Ev||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki8Embedded20IntegralImage_u8_s32C1ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded20IntegralImage_u8_s32C1ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki8Embedded20IntegralImage_u8_u16C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded20IntegralImage_u8_u16C1Ev||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki8Embedded20IntegralImage_u8_u16C1ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded20IntegralImage_u8_u16C1ERKNS0_5ArrayIhEERNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1Ev||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s32C1EiiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPKiPii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPKiPii||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3211PadImageRowERKNS0_5ArrayIhEEiRS3_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3211PadImageRowERKNS0_5ArrayIhEEiRS3_||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3223ComputeIntegralImageRowEPKhPii||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3210ScrollDownERKNS0_5ArrayIhEEiNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3210ScrollDownERKNS0_5ArrayIhEEiNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3214get_imageWidthEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3214get_imageWidthEv||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowERKNS0_9RectangleIsEEiRNS0_5ArrayIiEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowERKNS0_9RectangleIsEEiRNS0_5ArrayIiEE||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3210get_maxRowEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3210get_maxRowEi||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3213get_rowOffsetEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3213get_rowOffsetEv||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3219get_numBorderPixelsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s3219get_numBorderPixelsEv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3219FilterRow_innerLoopIhEEviiiiPKiS4_S4_S4_PT_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded29ScrollingIntegralImage_u8_s3219FilterRow_innerLoopIhEEviiiiPKiS4_S4_S4_PT_||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  496e7465          DCB      0x49,0x6e,0x74,0x65
000014  6772616c          DCB      0x67,0x72,0x61,0x6c
000018  496d6167          DCB      0x49,0x6d,0x61,0x67
00001c  655f7538          DCB      0x65,0x5f,0x75,0x38
000020  5f733332          DCB      0x5f,0x73,0x33,0x32
000024  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
000028  74656772          DCB      0x74,0x65,0x67,0x72
00002c  616c496d          DCB      0x61,0x6c,0x49,0x6d
000030  6167655f          DCB      0x61,0x67,0x65,0x5f
000034  75385f73          DCB      0x75,0x38,0x5f,0x73
000038  33322863          DCB      0x33,0x32,0x28,0x63
00003c  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000040  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000044  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000048  6d626564          DCB      0x6d,0x62,0x65,0x64
00004c  6465643a          DCB      0x64,0x65,0x64,0x3a
000050  3a417272          DCB      0x3a,0x41,0x72,0x72
000054  61793c75          DCB      0x61,0x79,0x3c,0x75
000058  6e736967          DCB      0x6e,0x73,0x69,0x67
00005c  6e656420          DCB      0x6e,0x65,0x64,0x20
000060  63686172          DCB      0x63,0x68,0x61,0x72
000064  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000068  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00006c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000070  6d626564          DCB      0x6d,0x62,0x65,0x64
000074  6465643a          DCB      0x64,0x65,0x64,0x3a
000078  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00007c  6f727953          DCB      0x6f,0x72,0x79,0x53
000080  7461636b          DCB      0x74,0x61,0x63,0x6b
000084  20262c20          DCB      0x20,0x26,0x2c,0x20
000088  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00008c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000090  62656464          DCB      0x62,0x65,0x64,0x64
000094  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000098  466c6167          DCB      0x46,0x6c,0x61,0x67
00009c  733a3a42          DCB      0x73,0x3a,0x3a,0x42
0000a0  75666665          DCB      0x75,0x66,0x66,0x65
0000a4  722900            DCB      0x72,0x29,0x00
                  |symbol_number.69|
0000a7  41                DCB      0x41
0000a8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000ac  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000b0  65646465          DCB      0x65,0x64,0x64,0x65
0000b4  643a3a49          DCB      0x64,0x3a,0x3a,0x49
0000b8  6e746567          DCB      0x6e,0x74,0x65,0x67
0000bc  72616c49          DCB      0x72,0x61,0x6c,0x49
0000c0  6d616765          DCB      0x6d,0x61,0x67,0x65
0000c4  5f75385f          DCB      0x5f,0x75,0x38,0x5f
0000c8  7531363a          DCB      0x75,0x31,0x36,0x3a
0000cc  3a496e74          DCB      0x3a,0x49,0x6e,0x74
0000d0  65677261          DCB      0x65,0x67,0x72,0x61
0000d4  6c496d61          DCB      0x6c,0x49,0x6d,0x61
0000d8  67655f75          DCB      0x67,0x65,0x5f,0x75
0000dc  385f7531          DCB      0x38,0x5f,0x75,0x31
0000e0  3628636f          DCB      0x36,0x28,0x63,0x6f
0000e4  6e737420          DCB      0x6e,0x73,0x74,0x20
0000e8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000ec  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000f0  62656464          DCB      0x62,0x65,0x64,0x64
0000f4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000f8  41727261          DCB      0x41,0x72,0x72,0x61
0000fc  793c756e          DCB      0x79,0x3c,0x75,0x6e
000100  7369676e          DCB      0x73,0x69,0x67,0x6e
000104  65642063          DCB      0x65,0x64,0x20,0x63
000108  6861723e          DCB      0x68,0x61,0x72,0x3e
00010c  20262c20          DCB      0x20,0x26,0x2c,0x20
000110  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000114  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000118  62656464          DCB      0x62,0x65,0x64,0x64
00011c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000120  4d656d6f          DCB      0x4d,0x65,0x6d,0x6f
000124  72795374          DCB      0x72,0x79,0x53,0x74
000128  61636b20          DCB      0x61,0x63,0x6b,0x20
00012c  262c2041          DCB      0x26,0x2c,0x20,0x41
000130  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000134  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000138  65646465          DCB      0x65,0x64,0x64,0x65
00013c  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000140  6c616773          DCB      0x6c,0x61,0x67,0x73
000144  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000148  66666572          DCB      0x66,0x66,0x65,0x72
00014c  2900              DCB      0x29,0x00
                  |symbol_number.70|
00014e  416e              DCB      0x41,0x6e
000150  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000154  456d6265          DCB      0x45,0x6d,0x62,0x65
000158  64646564          DCB      0x64,0x64,0x65,0x64
00015c  3a3a5363          DCB      0x3a,0x3a,0x53,0x63
000160  726f6c6c          DCB      0x72,0x6f,0x6c,0x6c
000164  696e6749          DCB      0x69,0x6e,0x67,0x49
000168  6e746567          DCB      0x6e,0x74,0x65,0x67
00016c  72616c49          DCB      0x72,0x61,0x6c,0x49
000170  6d616765          DCB      0x6d,0x61,0x67,0x65
000174  5f75385f          DCB      0x5f,0x75,0x38,0x5f
000178  7333323a          DCB      0x73,0x33,0x32,0x3a
00017c  3a536372          DCB      0x3a,0x53,0x63,0x72
000180  6f6c6c69          DCB      0x6f,0x6c,0x6c,0x69
000184  6e67496e          DCB      0x6e,0x67,0x49,0x6e
000188  74656772          DCB      0x74,0x65,0x67,0x72
00018c  616c496d          DCB      0x61,0x6c,0x49,0x6d
000190  6167655f          DCB      0x61,0x67,0x65,0x5f
000194  75385f73          DCB      0x75,0x38,0x5f,0x73
000198  33322873          DCB      0x33,0x32,0x28,0x73
00019c  69676e65          DCB      0x69,0x67,0x6e,0x65
0001a0  6420696e          DCB      0x64,0x20,0x69,0x6e
0001a4  742c2073          DCB      0x74,0x2c,0x20,0x73
0001a8  69676e65          DCB      0x69,0x67,0x6e,0x65
0001ac  6420696e          DCB      0x64,0x20,0x69,0x6e
0001b0  742c2073          DCB      0x74,0x2c,0x20,0x73
0001b4  69676e65          DCB      0x69,0x67,0x6e,0x65
0001b8  6420696e          DCB      0x64,0x20,0x69,0x6e
0001bc  742c2041          DCB      0x74,0x2c,0x20,0x41
0001c0  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0001c4  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0001c8  65646465          DCB      0x65,0x64,0x64,0x65
0001cc  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
0001d0  656d6f72          DCB      0x65,0x6d,0x6f,0x72
0001d4  79537461          DCB      0x79,0x53,0x74,0x61
0001d8  636b2026          DCB      0x63,0x6b,0x20,0x26
0001dc  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0001e0  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0001e4  456d6265          DCB      0x45,0x6d,0x62,0x65
0001e8  64646564          DCB      0x64,0x64,0x65,0x64
0001ec  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
0001f0  6167733a          DCB      0x61,0x67,0x73,0x3a
0001f4  3a427566          DCB      0x3a,0x42,0x75,0x66
0001f8  66657229          DCB      0x66,0x65,0x72,0x29
0001fc  00                DCB      0x00
                  |symbol_number.71|
0001fd  416e6b            DCB      0x41,0x6e,0x6b
000200  693a3a52          DCB      0x69,0x3a,0x3a,0x52
000204  6573756c          DCB      0x65,0x73,0x75,0x6c
000208  7420416e          DCB      0x74,0x20,0x41,0x6e
00020c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000210  456d6265          DCB      0x45,0x6d,0x62,0x65
000214  64646564          DCB      0x64,0x64,0x65,0x64
000218  3a3a5363          DCB      0x3a,0x3a,0x53,0x63
00021c  726f6c6c          DCB      0x72,0x6f,0x6c,0x6c
000220  696e6749          DCB      0x69,0x6e,0x67,0x49
000224  6e746567          DCB      0x6e,0x74,0x65,0x67
000228  72616c49          DCB      0x72,0x61,0x6c,0x49
00022c  6d616765          DCB      0x6d,0x61,0x67,0x65
000230  5f75385f          DCB      0x5f,0x75,0x38,0x5f
000234  7333323a          DCB      0x73,0x33,0x32,0x3a
000238  3a536372          DCB      0x3a,0x53,0x63,0x72
00023c  6f6c6c44          DCB      0x6f,0x6c,0x6c,0x44
000240  6f776e28          DCB      0x6f,0x77,0x6e,0x28
000244  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000248  7420416e          DCB      0x74,0x20,0x41,0x6e
00024c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000250  456d6265          DCB      0x45,0x6d,0x62,0x65
000254  64646564          DCB      0x64,0x64,0x65,0x64
000258  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
00025c  7261793c          DCB      0x72,0x61,0x79,0x3c
000260  756e7369          DCB      0x75,0x6e,0x73,0x69
000264  676e6564          DCB      0x67,0x6e,0x65,0x64
000268  20636861          DCB      0x20,0x63,0x68,0x61
00026c  723e2026          DCB      0x72,0x3e,0x20,0x26
000270  2c207369          DCB      0x2c,0x20,0x73,0x69
000274  676e6564          DCB      0x67,0x6e,0x65,0x64
000278  20696e74          DCB      0x20,0x69,0x6e,0x74
00027c  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000280  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000284  456d6265          DCB      0x45,0x6d,0x62,0x65
000288  64646564          DCB      0x64,0x64,0x65,0x64
00028c  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
000290  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
000294  53746163          DCB      0x53,0x74,0x61,0x63
000298  6b290000          DCB      0x6b,0x29,0x00,0x00
00029c  41727261          DCB      0x41,0x72,0x72,0x61
0002a0  793c5479          DCB      0x79,0x3c,0x54,0x79
0002a4  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0002a8  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
0002ac  70757465          DCB      0x70,0x75,0x74,0x65
0002b0  52657175          DCB      0x52,0x65,0x71,0x75
0002b4  69726564          DCB      0x69,0x72,0x65,0x64
0002b8  53747269          DCB      0x53,0x74,0x72,0x69
0002bc  64650000          DCB      0x64,0x65,0x00,0x00
0002c0  496e7661          DCB      0x49,0x6e,0x76,0x61
0002c4  6c696420          DCB      0x6c,0x69,0x64,0x20
0002c8  73697a65          DCB      0x73,0x69,0x7a,0x65
0002cc  00000000          DCB      0x00,0x00,0x00,0x00
0002d0  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0002d4  6f726574          DCB      0x6f,0x72,0x65,0x74
0002d8  6563685c          DCB      0x65,0x63,0x68,0x5c
0002dc  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0002e0  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0002e4  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0002e8  64655c61          DCB      0x64,0x65,0x5c,0x61
0002ec  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0002f0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0002f4  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0002f8  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0002fc  2f617272          DCB      0x2f,0x61,0x72,0x72
000300  61793264          DCB      0x61,0x79,0x32,0x64
000304  2e680000          DCB      0x2e,0x68,0x00,0x00
000308  41727261          DCB      0x41,0x72,0x72,0x61
00030c  793c5479          DCB      0x79,0x3c,0x54,0x79
000310  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000314  3a676574          DCB      0x3a,0x67,0x65,0x74
000318  5f73697a          DCB      0x5f,0x73,0x69,0x7a
00031c  65000000          DCB      0x65,0x00,0x00,0x00
000320  4e656761          DCB      0x4e,0x65,0x67,0x61
000324  74697665          DCB      0x74,0x69,0x76,0x65
000328  2064696d          DCB      0x20,0x64,0x69,0x6d
00032c  656e7369          DCB      0x65,0x6e,0x73,0x69
000330  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000334  6e756d42          DCB      0x6e,0x75,0x6d,0x42
000338  6f726465          DCB      0x6f,0x72,0x64,0x65
00033c  72506978          DCB      0x72,0x50,0x69,0x78
000340  656c7320          DCB      0x65,0x6c,0x73,0x20
000344  6d757374          DCB      0x6d,0x75,0x73,0x74
000348  20626520          DCB      0x20,0x62,0x65,0x20
00034c  67726561          DCB      0x67,0x72,0x65,0x61
000350  74657220          DCB      0x74,0x65,0x72,0x20
000354  7468616e          DCB      0x74,0x68,0x61,0x6e
000358  206f7220          DCB      0x20,0x6f,0x72,0x20
00035c  65717561          DCB      0x65,0x71,0x75,0x61
000360  6c20746f          DCB      0x6c,0x20,0x74,0x6f
000364  207a6572          DCB      0x20,0x7a,0x65,0x72
000368  6f2c2061          DCB      0x6f,0x2c,0x20,0x61
00036c  6e64206c          DCB      0x6e,0x64,0x20,0x6c
000370  65737320          DCB      0x65,0x73,0x73,0x20
000374  7468616e          DCB      0x74,0x68,0x61,0x6e
000378  20746865          DCB      0x20,0x74,0x68,0x65
00037c  2073697a          DCB      0x20,0x73,0x69,0x7a
000380  65206f66          DCB      0x65,0x20,0x6f,0x66
000384  20746869          DCB      0x20,0x74,0x68,0x69
000388  73205363          DCB      0x73,0x20,0x53,0x63
00038c  726f6c6c          DCB      0x72,0x6f,0x6c,0x6c
000390  696e6749          DCB      0x69,0x6e,0x67,0x49
000394  6e746567          DCB      0x6e,0x74,0x65,0x67
000398  72616c49          DCB      0x72,0x61,0x6c,0x49
00039c  6d616765          DCB      0x6d,0x61,0x67,0x65
0003a0  2e000000          DCB      0x2e,0x00,0x00,0x00
0003a4  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0003a8  2e536372          DCB      0x2e,0x53,0x63,0x72
0003ac  6f6c6c69          DCB      0x6f,0x6c,0x6c,0x69
0003b0  6e67496e          DCB      0x6e,0x67,0x49,0x6e
0003b4  74656772          DCB      0x74,0x65,0x67,0x72
0003b8  616c496d          DCB      0x61,0x6c,0x49,0x6d
0003bc  6167655f          DCB      0x61,0x67,0x65,0x5f
0003c0  75385f73          DCB      0x75,0x38,0x5f,0x73
0003c4  33322e53          DCB      0x33,0x32,0x2e,0x53
0003c8  63726f6c          DCB      0x63,0x72,0x6f,0x6c
0003cc  6c696e67          DCB      0x6c,0x69,0x6e,0x67
0003d0  496e7465          DCB      0x49,0x6e,0x74,0x65
0003d4  6772616c          DCB      0x67,0x72,0x61,0x6c
0003d8  496d6167          DCB      0x49,0x6d,0x61,0x67
0003dc  655f7538          DCB      0x65,0x5f,0x75,0x38
0003e0  5f733332          DCB      0x5f,0x73,0x33,0x32
0003e4  00                DCB      0x00

                          AREA ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIiEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<int>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L104.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L104.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L104.384|
000044  a25c              ADR      r2,|L104.440|
000046  a160              ADR      r1,|L104.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L104.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L104.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L104.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L104.384|
000080  a24d              ADR      r2,|L104.440|
000082  a157              ADR      r1,|L104.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L104.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L104.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L104.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L104.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L104.384|
0000c8  a251              ADR      r2,|L104.528|
0000ca  a156              ADR      r1,|L104.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L104.372|
                  |L104.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L104.384|
0000e0  a258              ADR      r2,|L104.580|
0000e2  a15f              ADR      r1,|L104.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L104.372|
                  |L104.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L104.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L104.384|
000110  a259              ADR      r2,|L104.632|
000112  a144              ADR      r1,|L104.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L104.372|
                  |L104.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L104.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L104.384|
00015a  a251              ADR      r2,|L104.672|
00015c  a140              ADR      r1,|L104.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L104.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L104.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L104.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L104.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L104.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L104.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L104.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L104.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L104.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L104.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L104.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L104.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L104.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L104.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.105||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.105||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIiEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE||, COMGROUP=_ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIiEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIiEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE PROC ; Anki::Embedded::ScrollingIntegralImage_u8_s32::FilterRow<int>(const Anki::Embedded::Rectangle<short>&, int, int, int, Anki::Embedded::Array<T1>&) const
                  ||__tagsym$$noinline||
;;;21       {
;;;22         template<typename OutType> NO_INLINE Result ScrollingIntegralImage_u8_s32::FilterRow(const Rectangle<s16> &filter, const s32 imageRow, const s32 outputMultiply, const s32 outputRightShift, Array<OutType> &output) const
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;23         {
000004  4604              MOV      r4,r0
;;;24           AnkiAssert(AreValid(*this, output));
;;;25     
;;;26           // TODO: support these
;;;27           AnkiAssert(filter.left <= 0);
;;;28           AnkiAssert(filter.top <= 0);
;;;29           AnkiAssert(filter.right >= 0);
;;;30           AnkiAssert(filter.bottom >= 0);
;;;31     
;;;32           const bool insufficientBorderPixels_left = (-filter.left+1) > this->numBorderPixels;
000006  f9b13000          LDRSH    r3,[r1,#0]
00000a  460d              MOV      r5,r1                 ;23
00000c  6a00              LDR      r0,[r0,#0x20]
00000e  f1c30101          RSB      r1,r3,#1
000012  f8dd803c          LDR      r8,[sp,#0x3c]
000016  4691              MOV      r9,r2                 ;23
000018  4281              CMP      r1,r0
00001a  bfcc              ITE      GT
00001c  2201              MOVGT    r2,#1
00001e  2200              MOVLE    r2,#0
;;;33           const bool insufficientBorderPixels_right = (filter.right) > this->numBorderPixels;
000020  f9b51002          LDRSH    r1,[r5,#2]
000024  4281              CMP      r1,r0
000026  bfcc              ITE      GT
000028  2101              MOVGT    r1,#1
00002a  2100              MOVLE    r1,#0
;;;34     
;;;35           // These min and max coordinates are in the original image's coordinate frame
;;;36           const s32 minX = insufficientBorderPixels_left ? -(this->numBorderPixels + filter.left - 1) : 0;
00002c  2a00              CMP      r2,#0
00002e  bf1a              ITTE     NE
000030  4418              ADDNE    r0,r3
000032  f1c00701          RSBNE    r7,r0,#1
000036  2700              MOVEQ    r7,#0
;;;37           const s32 maxX = insufficientBorderPixels_right ? (this->get_size(1) - 1 - filter.right + this->numBorderPixels) : (this->get_imageWidth()-1);
000038  2900              CMP      r1,#0
00003a  bf04              ITT      EQ
00003c  6960              LDREQ    r0,[r4,#0x14]
00003e  1e46              SUBEQ    r6,r0,#1
000040  d009              BEQ      |L111.86|
000042  2101              MOVS     r1,#1
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIiE8get_sizeEi ; Anki::Embedded::Array<int>::get_size(int) const
00004a  f9b51002          LDRSH    r1,[r5,#2]
00004e  1a40              SUBS     r0,r0,r1
000050  6a21              LDR      r1,[r4,#0x20]
000052  1e40              SUBS     r0,r0,#1
000054  1846              ADDS     r6,r0,r1
                  |L111.86|
;;;38     
;;;39           // Get the four pointers to the corners of the filter in the integral image.
;;;40           // The x offset is added at the end, because it might be invalid for x==0.
;;;41           // The -1 terms are because the rectangular sums should be inclusive.
;;;42           const s32 topOffset = imageRow - this->rowOffset + filter.top - 1 ;
000056  69e0              LDR      r0,[r4,#0x1c]
000058  f9b51004          LDRSH    r1,[r5,#4]
00005c  eba90000          SUB      r0,r9,r0
000060  1e42              SUBS     r2,r0,#1
000062  eb010902          ADD      r9,r1,r2
;;;43           const s32 bottomOffset = imageRow - this->rowOffset + filter.bottom;
000066  f9b51006          LDRSH    r1,[r5,#6]
;;;44           const s32 leftOffset = filter.left - 1 + this->numBorderPixels;
;;;45           const s32 rightOffset = filter.right + this->numBorderPixels;
00006a  f9b52002          LDRSH    r2,[r5,#2]
00006e  eb000c01          ADD      r12,r0,r1             ;43
000072  f9b50000          LDRSH    r0,[r5,#0]            ;44
000076  6a21              LDR      r1,[r4,#0x20]         ;44
000078  68a3              LDR      r3,[r4,#8]            ;44
00007a  4408              ADD      r0,r0,r1              ;44
00007c  4411              ADD      r1,r1,r2
00007e  6922              LDR      r2,[r4,#0x10]
000080  1e40              SUBS     r0,r0,#1              ;44
000082  fb092503          MLA      r5,r9,r3,r2           ;44
000086  fb0c2203          MLA      r2,r12,r3,r2          ;44
;;;46     
;;;47           const s32 * restrict pIntegralImage_00 = this->Pointer(topOffset, 0) + leftOffset;
00008a  eb050980          ADD      r9,r5,r0,LSL #2
;;;48           const s32 * restrict pIntegralImage_01 = this->Pointer(topOffset, 0) + rightOffset;
;;;49           const s32 * restrict pIntegralImage_10 = this->Pointer(bottomOffset, 0) + leftOffset;
00008e  eb020a80          ADD      r10,r2,r0,LSL #2
;;;50           const s32 * restrict pIntegralImage_11 = this->Pointer(bottomOffset, 0) + rightOffset;
000092  eb020b81          ADD      r11,r2,r1,LSL #2
000096  eb050581          ADD      r5,r5,r1,LSL #2       ;48
;;;51     
;;;52           OutType * restrict pOutput = output.Pointer(0,0);
00009a  2000              MOVS     r0,#0
00009c  f8d82008          LDR      r2,[r8,#8]
0000a0  f8d81010          LDR      r1,[r8,#0x10]
;;;53     
;;;54           if(minX > 0)
0000a4  2f00              CMP      r7,#0
0000a6  fb001802          MLA      r8,r0,r2,r1
0000aa  dd03              BLE      |L111.180|
;;;55             memset(pOutput, 0, minX*sizeof(OutType));
0000ac  00b9              LSLS     r1,r7,#2
0000ae  4640              MOV      r0,r8
0000b0  f7fffffe          BL       __aeabi_memclr4
                  |L111.180|
0000b4  9903              LDR      r1,[sp,#0xc]
0000b6  980e              LDR      r0,[sp,#0x38]
0000b8  2901              CMP      r1,#1
0000ba  bf08              IT       EQ
0000bc  2800              CMPEQ    r0,#0
0000be  d024              BEQ      |L111.266|
0000c0  42b7              CMP      r7,r6
0000c2  dc12              BGT      |L111.234|
                  |L111.196|
0000c4  f85b2027          LDR      r2,[r11,r7,LSL #2]
0000c8  f85a3027          LDR      r3,[r10,r7,LSL #2]
0000cc  1ad2              SUBS     r2,r2,r3
0000ce  f8593027          LDR      r3,[r9,r7,LSL #2]
0000d2  441a              ADD      r2,r2,r3
0000d4  f8553027          LDR      r3,[r5,r7,LSL #2]
0000d8  1ad2              SUBS     r2,r2,r3
0000da  434a              MULS     r2,r1,r2
0000dc  fa42f300          ASR      r3,r2,r0
0000e0  f8483027          STR      r3,[r8,r7,LSL #2]
0000e4  1c7f              ADDS     r7,r7,#1
0000e6  42b7              CMP      r7,r6
0000e8  ddec              BLE      |L111.196|
                  |L111.234|
;;;56     
;;;57           ScrollingIntegralImage_u8_s32::FilterRow_innerLoop(
;;;58             minX, maxX,
;;;59             outputMultiply, outputRightShift,
;;;60             pIntegralImage_00, pIntegralImage_01, pIntegralImage_10, pIntegralImage_11,
;;;61             pOutput);
;;;62     
;;;63           if((maxX+1) < imageWidth)
0000ea  6960              LDR      r0,[r4,#0x14]
0000ec  1c71              ADDS     r1,r6,#1
0000ee  4288              CMP      r0,r1
0000f0  dd07              BLE      |L111.258|
;;;64             memset(pOutput+maxX+1, 0, (imageWidth - (maxX+1))*sizeof(OutType));
0000f2  1b80              SUBS     r0,r0,r6
0000f4  0080              LSLS     r0,r0,#2
0000f6  1f01              SUBS     r1,r0,#4
0000f8  eb080086          ADD      r0,r8,r6,LSL #2
0000fc  1d00              ADDS     r0,r0,#4
0000fe  f7fffffe          BL       __aeabi_memclr4
                  |L111.258|
;;;65     
;;;66           return RESULT_OK;
;;;67         }
000102  b004              ADD      sp,sp,#0x10
000104  2000              MOVS     r0,#0                 ;66
000106  e8bd9ff0          POP      {r4-r12,pc}
                  |L111.266|
00010a  42b7              CMP      r7,r6
00010c  dced              BGT      |L111.234|
                  |L111.270|
00010e  f85b0027          LDR      r0,[r11,r7,LSL #2]
000112  f85a1027          LDR      r1,[r10,r7,LSL #2]
000116  1a40              SUBS     r0,r0,r1
000118  f8591027          LDR      r1,[r9,r7,LSL #2]
00011c  4408              ADD      r0,r0,r1
00011e  f8551027          LDR      r1,[r5,r7,LSL #2]
000122  1a41              SUBS     r1,r0,r1
000124  f8481027          STR      r1,[r8,r7,LSL #2]
000128  1c7f              ADDS     r7,r7,#1
00012a  42b7              CMP      r7,r6
00012c  ddef              BLE      |L111.270|
00012e  e7dc              B        |L111.234|
;;;68     
                          ENDP


                          AREA ||area_number.112||, COMGROUP=_ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIiEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE, LINKORDER=||t._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIiEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.112||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded29ScrollingIntegralImage_u8_s329FilterRowIiEENS_6ResultERKNS0_9RectangleIsEEiiiRNS0_5ArrayIT_EE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIiE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIiE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIiE8get_sizeEi PROC ; Anki::Embedded::Array<int>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L118.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L118.56|
00000e  4b0b              LDR      r3,|L118.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L118.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L118.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::get_size(int) const::__PRETTY_FUNCTION__
                  |L118.60|
                          DCD      ||.constdata||+0x2d0

                          AREA ||area_number.119||, COMGROUP=_ZNK4Anki8Embedded5ArrayIiE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIiE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.119||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIiE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIhEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<unsigned char>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L125.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L125.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L125.384|
000044  a25c              ADR      r2,|L125.440|
000046  a160              ADR      r1,|L125.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L125.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  300f              ADDS     r0,r0,#0xf
000064  f020050f          BIC      r5,r0,#0xf
000068  a804              ADD      r0,sp,#0x10
00006a  e9cd0902          STRD     r0,r9,[sp,#8]
00006e  2d00              CMP      r5,#0
000070  dc0a              BGT      |L125.136|
000072  f240310b          MOV      r1,#0x30b
000076  4859              LDR      r0,|L125.476|
000078  e9cd0100          STRD     r0,r1,[sp,#0]
00007c  a340              ADR      r3,|L125.384|
00007e  a24e              ADR      r2,|L125.440|
000080  a157              ADR      r1,|L125.480|
000082  2005              MOVS     r0,#5
000084  f7fffffe          BL       _Anki_Log
                  |L125.136|
000088  4638              MOV      r0,r7
00008a  2f01              CMP      r7,#1
00008c  bfd8              IT       LE
00008e  2001              MOVLE    r0,#1
000090  60a5              STR      r5,[r4,#8]
000092  4345              MULS     r5,r0,r5
000094  a803              ADD      r0,sp,#0xc
000096  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009a  4602              MOV      r2,r0
00009c  4629              MOV      r1,r5
00009e  4640              MOV      r0,r8
0000a0  9b02              LDR      r3,[sp,#8]
0000a2  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a6  f8cd900c          STR      r9,[sp,#0xc]
0000aa  f8dd8010          LDR      r8,[sp,#0x10]
0000ae  f8df915c          LDR      r9,|L125.524|
0000b2  0005              MOVS     r5,r0
0000b4  d00e              BEQ      |L125.212|
0000b6  f1b80f10          CMP      r8,#0x10
0000ba  d21e              BCS      |L125.250|
0000bc  f2403023          MOV      r0,#0x323
0000c0  e9cd9000          STRD     r9,r0,[sp,#0]
0000c4  a32e              ADR      r3,|L125.384|
0000c6  a252              ADR      r2,|L125.528|
0000c8  a156              ADR      r1,|L125.548|
0000ca  2005              MOVS     r0,#5
0000cc  f7fffffe          BL       _Anki_Log
0000d0  f000b84f          B.W      |L125.370|
                  |L125.212|
0000d4  f240301e          MOV      r0,#0x31e
0000d8  e9cd9000          STRD     r9,r0,[sp,#0]
0000dc  a328              ADR      r3,|L125.384|
0000de  a259              ADR      r2,|L125.580|
0000e0  a15f              ADR      r1,|L125.608|
0000e2  2005              MOVS     r0,#5
0000e4  f7fffffe          BL       _Anki_Log
0000e8  f8c4b000          STR      r11,[r4,#0]
0000ec  f8c4b004          STR      r11,[r4,#4]
0000f0  f8c4b008          STR      r11,[r4,#8]
0000f4  f8c4a010          STR      r10,[r4,#0x10]
0000f8  e03b              B        |L125.370|
                  |L125.250|
0000fa  a803              ADD      r0,sp,#0xc
0000fc  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000100  2800              CMP      r0,#0
000102  d00a              BEQ      |L125.282|
000104  f2403026          MOV      r0,#0x326
000108  e9cd9000          STRD     r9,r0,[sp,#0]
00010c  a31c              ADR      r3,|L125.384|
00010e  a25a              ADR      r2,|L125.632|
000110  a144              ADR      r1,|L125.548|
000112  2005              MOVS     r0,#5
000114  f7fffffe          BL       _Anki_Log
000118  e02b              B        |L125.370|
                  |L125.282|
00011a  9903              LDR      r1,[sp,#0xc]
00011c  e9c41503          STRD     r1,r5,[r4,#0xc]
000120  f105000f          ADD      r0,r5,#0xf
000124  f020000f          BIC      r0,r0,#0xf
000128  e9c47600          STRD     r7,r6,[r4,#0]
00012c  1b40              SUBS     r0,r0,r5
00012e  2e01              CMP      r6,#1
000130  bfd8              IT       LE
000132  2601              MOVLE    r6,#1
000134  f106010f          ADD      r1,r6,#0xf
000138  f021010f          BIC      r1,r1,#0xf
00013c  fb010107          MLA      r1,r1,r7,r0
000140  4541              CMP      r1,r8
000142  bfdc              ITT      LE
000144  1829              ADDLE    r1,r5,r0
000146  6121              STRLE    r1,[r4,#0x10]
000148  dd13              BLE      |L125.370|
00014a  f2403035          MOV      r0,#0x335
00014e  f8cd9000          STR      r9,[sp,#0]
000152  e9cd0101          STRD     r0,r1,[sp,#4]
000156  a30a              ADR      r3,|L125.384|
000158  a251              ADR      r2,|L125.672|
00015a  a141              ADR      r1,|L125.608|
00015c  2005              MOVS     r0,#5
00015e  f7fffffe          BL       _Anki_Log
000162  f8c4b000          STR      r11,[r4,#0]
000166  f8c4b004          STR      r11,[r4,#4]
00016a  f8c4b008          STR      r11,[r4,#8]
00016e  f8c4a010          STR      r10,[r4,#0x10]
                  |L125.370|
000172  b005              ADD      sp,sp,#0x14
000174  4620              MOV      r0,r4
000176  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

00017a  0000              DCW      0x0000
                  |L125.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L125.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L125.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L125.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L125.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L125.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L125.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L125.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L125.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L125.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L125.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L125.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L125.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.126||, COMGROUP=_ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.126||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L132.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L132.56|
00000e  4b0b              LDR      r3,|L132.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L132.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L132.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L132.60|
                          DCD      ||.constdata||+0x2d0

                          AREA ||area_number.133||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.133||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayItEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<unsigned short>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L139.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L139.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L139.384|
000044  a25c              ADR      r2,|L139.440|
000046  a160              ADR      r1,|L139.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L139.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0040              LSLS     r0,r0,#1
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L139.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L139.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L139.384|
000080  a24d              ADR      r2,|L139.440|
000082  a157              ADR      r1,|L139.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L139.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L139.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L139.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L139.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L139.384|
0000c8  a251              ADR      r2,|L139.528|
0000ca  a156              ADR      r1,|L139.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L139.372|
                  |L139.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L139.384|
0000e0  a258              ADR      r2,|L139.580|
0000e2  a15f              ADR      r1,|L139.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L139.372|
                  |L139.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L139.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L139.384|
000110  a259              ADR      r2,|L139.632|
000112  a144              ADR      r1,|L139.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L139.372|
                  |L139.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0071              LSLS     r1,r6,#1
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L139.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L139.384|
00015a  a251              ADR      r2,|L139.672|
00015c  a140              ADR      r1,|L139.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L139.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L139.380|
                          DCD      _ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L139.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L139.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L139.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L139.476|
                          DCD      _ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L139.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L139.524|
                          DCD      _ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L139.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L139.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L139.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L139.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L139.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L139.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.140||, COMGROUP=_ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.140||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d207369          DCB      0x3d,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  20696e74          DCB      0x20,0x69,0x6e,0x74
000090  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIiE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  7369676e          DCB      0x73,0x69,0x67,0x6e
000054  65642069          DCB      0x65,0x64,0x20,0x69
000058  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000bc  65642069          DCB      0x65,0x64,0x20,0x69
0000c0  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIiE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<int>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2073          DCB      0x20,0x3d,0x20,0x73
000094  69676e65          DCB      0x69,0x67,0x6e,0x65
000098  6420696e          DCB      0x64,0x20,0x69,0x6e
00009c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642063          DCB      0x65,0x64,0x20,0x63
000090  6861725d          DCB      0x68,0x61,0x72,0x5d
000094  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  20636861          DCB      0x20,0x63,0x68,0x61
0000c4  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  63686172          DCB      0x63,0x68,0x61,0x72
0000a0  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642073          DCB      0x65,0x64,0x20,0x73
000090  686f7274          DCB      0x68,0x6f,0x72,0x74
000094  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  2073686f          DCB      0x20,0x73,0x68,0x6f
0000c4  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  73686f72          DCB      0x73,0x68,0x6f,0x72
0000a0  745d00            DCB      0x74,0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\integralImage.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_integralImage_cpp_2b9430a6___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___17_integralImage_cpp_2b9430a6___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_integralImage_cpp_2b9430a6___Z7__REVSHi|
#line 144
|__asm___17_integralImage_cpp_2b9430a6___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
