; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\keyframe.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\keyframe.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\keyframe.crf supervisor\src\keyFrame.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo8KeyFrame12IsInPositionEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo8KeyFrame12IsInPositionEv PROC ; Anki::Cozmo::KeyFrame::IsInPosition()
;;;334      
;;;335      bool KeyFrame::IsInPosition()
000000  7800              LDRB     r0,[r0,#0]
;;;336      {
;;;337        switch(type)
000002  2804              CMP      r0,#4
000004  d00d              BEQ      |L1.34|
000006  dc04              BGT      |L1.18|
000008  2800              CMP      r0,#0
00000a  bf18              IT       NE
00000c  2802              CMPNE    r0,#2
00000e  d104              BNE      |L1.26|
000010  e005              B        |L1.30|
                  |L1.18|
000012  280c              CMP      r0,#0xc
000014  d001              BEQ      |L1.26|
000016  2814              CMP      r0,#0x14
000018  d003              BEQ      |L1.34|
                  |L1.26|
;;;338        {
;;;339          case KeyFrame::START_HEAD_NOD:
;;;340          case KeyFrame::HEAD_ANGLE:
;;;341            return HeadController::IsInPosition();
;;;342    
;;;343          case KeyFrame::START_LIFT_NOD:
;;;344          case KeyFrame::LIFT_HEIGHT:
;;;345            return LiftController::IsInPosition();
;;;346            
;;;347          case KeyFrame::PLAY_SOUND:
;;;348            // TODO: Add something here to check whether streaming sound from BaseStation is ready?
;;;349            return true;
;;;350            
;;;351          default:
;;;352            return true;
00001a  2001              MOVS     r0,#1
;;;353            
;;;354        } // switch(type)
;;;355        
;;;356      } // IsInPosition()
00001c  4770              BX       lr
                  |L1.30|
00001e  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController12IsInPositionEv ; Anki::Cozmo::HeadController::IsInPosition()
                  |L1.34|
000022  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController12IsInPositionEv ; Anki::Cozmo::LiftController::IsInPosition()
;;;357      
                          ENDP


                          AREA ||i._ZNK4Anki5Cozmo8KeyFrame14TransitionIntoEjh||, CODE, READONLY, ALIGN=3

                  _ZNK4Anki5Cozmo8KeyFrame14TransitionIntoEjh PROC ; Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
;;;201      
;;;202      void KeyFrame::TransitionInto(const TimeStamp_t animStartTime_ms,
000000  b570              PUSH     {r4-r6,lr}
;;;203                                    const u8 prevTransitionOut) const
;;;204      {
000002  4604              MOV      r4,r0
000004  ed2d8b06          VPUSH    {d8-d10}
000008  4616              MOV      r6,r2
00000a  460d              MOV      r5,r1
;;;205        switch(type)
00000c  7800              LDRB     r0,[r0,#0]
00000e  ed9f9ba2          VLDR     d9,|L2.664|
;;;206        {
;;;207          case KeyFrame::HEAD_ANGLE:
;;;208          {
;;;209            s32 angleAdj = 0;
;;;210            if(SetHeadAngle.variability_deg > 0) {
;;;211              angleAdj = Embedded::RandS32(-static_cast<s32>(SetHeadAngle.variability_deg),
;;;212                                            static_cast<s32>(SetHeadAngle.variability_deg));
;;;213            }
;;;214            
;;;215            const f32 angle_rad = GetAngleRad(static_cast<s32>(SetHeadAngle.angle_deg) + angleAdj);
;;;216            
;;;217            if(relTime_ms == 0) {
;;;218              // Get into position ASAP:
;;;219              HeadController::SetSpeedAndAccel(10*M_PI, 1000.f);
000012  eddf8aa3          VLDR     s17,|L2.672|
;;;220              HeadController::SetDesiredAngle(angle_rad);
;;;221            } else {
;;;222              const f32 duration_sec = (animStartTime_ms + relTime_ms - HAL::GetTimeStamp())*0.001f;
000016  ed9f8aa3          VLDR     s16,|L2.676|
;;;223              HeadController::SetDesiredAngle(angle_rad,
;;;224                                              GetTransitionFraction(prevTransitionOut),
;;;225                                              GetTransitionFraction(transitionIn),
;;;226                                              duration_sec);
;;;227            }
;;;228            
;;;229            
;;;230          
;;;231            // TODO: Switch to method that takes desired time into account:
;;;232            /*
;;;233             HeadController::SetDesiredAngleAndTime(SetHeadAngle.targetAngle,
;;;234             SetHeadAngle.targetSpeed,
;;;235             (relTime_ms + animStartTime_ms)*1000);
;;;236             */
;;;237            break;
;;;238          }
;;;239            
;;;240          case KeyFrame::START_HEAD_NOD:
;;;241          {
;;;242            if(relTime_ms == 0) {
;;;243              // Get the head in position to start animation [as fast as possible?]
;;;244              HeadController::SetSpeedAndAccel(10*M_PI, 1000.f);
;;;245              HeadController::SetDesiredAngle(GetAngleRad(StartHeadNod.lowAngle_deg));
;;;246              
;;;247              // TODO: Switch to method that takes desired time into account:
;;;248              /*
;;;249               LiftController::SetDesiredHeightAndTime(SetLiftHeight.targetHeight,
;;;250               SetLiftHeight.targetSpeed,
;;;251               (relTime_ms + animStartTime_ms)*1000);
;;;252               */
;;;253            }
;;;254            break;
;;;255          }
;;;256            
;;;257          case KeyFrame::LIFT_HEIGHT:
;;;258          {
;;;259            if(relTime_ms == 0) {
;;;260              // Get to start position ASAP
;;;261              LiftController::SetSpeedAndAccel(1000.f, 1000.f);
;;;262              LiftController::SetDesiredHeight(SetLiftHeight.targetHeight);
;;;263            } else {
;;;264              const f32 duration_sec = (animStartTime_ms + relTime_ms - HAL::GetTimeStamp())*0.001f;
;;;265              LiftController::SetDesiredHeight(SetLiftHeight.targetHeight,
;;;266                                               GetTransitionFraction(prevTransitionOut),
;;;267                                               GetTransitionFraction(transitionIn),
;;;268                                               duration_sec);
;;;269            }
;;;270            
;;;271            // TODO: Switch to method that takes desired time into account:
;;;272            /*
;;;273             LiftController::SetDesiredHeightAndTime(SetLiftHeight.targetHeight,
;;;274             SetLiftHeight.targetSpeed,
;;;275             (relTime_ms + animStartTime_ms)*1000);
;;;276             */
;;;277            break;
;;;278          }
;;;279            
;;;280          case KeyFrame::START_LIFT_NOD:
;;;281          {
;;;282            if(relTime_ms == 0) {
;;;283              // Get the lift in position to start animation [as fast as possible?]
;;;284              LiftController::SetSpeedAndAccel(1000.f, 1000.f);
;;;285              LiftController::SetDesiredHeight(StartLiftNod.lowHeight);
;;;286              
;;;287              // TODO: Switch to method that takes desired time into account:
;;;288              /*
;;;289               LiftController::SetDesiredHeightAndTime(SetLiftHeight.targetHeight,
;;;290               SetLiftHeight.targetSpeed,
;;;291               (relTime_ms + animStartTime_ms)*1000);
;;;292               */
;;;293            }
;;;294            break;
;;;295          }
;;;296            
;;;297          case KeyFrame::POINT_TURN:
;;;298          {
;;;299            // TODO: Switch to new method that accepts duration and computes the right velocity profile
;;;300            
;;;301            s32 angleAdj = 0;
;;;302            if(TurnInPlace.variability_deg > 0) {
;;;303              angleAdj = Embedded::RandS32(-static_cast<s32>(TurnInPlace.variability_deg),
;;;304                                            static_cast<s32>(TurnInPlace.variability_deg));
;;;305            }
;;;306            
;;;307            const f32 angle_rad   = GetAngleRad(static_cast<s32>(TurnInPlace.relativeAngle_deg) + angleAdj);
;;;308            const f32 duration_sec = (animStartTime_ms + relTime_ms - HAL::GetTimeStamp()) * 0.001f;
;;;309            const f32 wheelSpeed  = (angle_rad * WHEEL_DIST_MM) / (duration_sec * 2.f);
;;;310    
;;;311            SteeringController::ExecuteDirectDrive(wheelSpeed, -wheelSpeed);
00001a  ed9faaa3          VLDR     s20,|L2.680|
00001e  2806              CMP      r0,#6                 ;205
000020  f0008119          BEQ.W    |L2.598|
000024  dc38              BGT      |L2.152|
000026  eddfaaa1          VLDR     s21,|L2.684|
00002a  ed9faaa1          VLDR     s20,|L2.688|
00002e  2800              CMP      r0,#0                 ;205
000030  d04c              BEQ      |L2.204|
000032  2802              CMP      r0,#2                 ;205
000034  d07c              BEQ      |L2.304|
000036  2804              CMP      r0,#4                 ;205
;;;312            
;;;313            break;
;;;314          }
;;;315            
;;;316          case KeyFrame::DRIVE_LINE_SEGMENT:
;;;317          {
;;;318            // TODO: Switch to new method that accepts duration and computes the right velocity profile
;;;319            const f32 duration_ms = animStartTime_ms + relTime_ms - HAL::GetTimeStamp();
;;;320            const f32 wheelSpeed = (DriveLineSegment.relativeDistance * 1000.f) / duration_ms;
;;;321            SteeringController::ExecuteDirectDrive(wheelSpeed, wheelSpeed);
;;;322            break;
;;;323          }
;;;324            
;;;325          default:
;;;326          {
;;;327            // Do nothing if no TransitionInto behavior defined for this type
;;;328            break;
;;;329          }
;;;330            
;;;331        } // switch(type)
;;;332        
;;;333      } // TransitionInto()
000038  bf1c              ITT      NE
00003a  ecbd8b06          VPOPNE   {d8-d10}
00003e  bd70              POPNE    {r4-r6,pc}
000040  8860              LDRH     r0,[r4,#2]            ;259
000042  2800              CMP      r0,#0                 ;259
000044  d075              BEQ      |L2.306|
000046  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
00004a  8861              LDRH     r1,[r4,#2]            ;264
00004c  4429              ADD      r1,r1,r5              ;264
00004e  1a08              SUBS     r0,r1,r0              ;264
000050  ee000a10          VMOV     s0,r0                 ;264
000054  7920              LDRB     r0,[r4,#4]            ;265
000056  eeb80a40          VCVT.F32.U32 s0,s0                 ;264
00005a  2800              CMP      r0,#0                 ;264
00005c  ee601a08          VMUL.F32 s3,s0,s16             ;264
000060  bf08              IT       EQ                    ;264
000062  2001              MOVEQ    r0,#1                 ;264
000064  ee000a10          VMOV     s0,r0                 ;264
000068  2e00              CMP      r6,#0                 ;264
00006a  eeb80a40          VCVT.F32.U32 s0,s0                 ;264
00006e  ee201a0a          VMUL.F32 s2,s0,s20             ;264
000072  bf08              IT       EQ                    ;264
000074  2601              MOVEQ    r6,#1                 ;264
000076  ee006a10          VMOV     s0,r6                 ;264
00007a  8920              LDRH     r0,[r4,#8]            ;265
00007c  eeb80a40          VCVT.F32.U32 s0,s0                 ;265
000080  ee600a0a          VMUL.F32 s1,s0,s20             ;265
000084  ecbd8b06          VPOP     {d8-d10}              ;265
000088  ee000a10          VMOV     s0,r0                 ;265
00008c  e8bd4070          POP      {r4-r6,lr}            ;265
000090  eeb80a40          VCVT.F32.U32 s0,s0                 ;265
000094  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEffff ; Anki::Cozmo::LiftController::SetDesiredHeight(float, float, float, float)
                  |L2.152|
000098  280a              CMP      r0,#0xa               ;205
00009a  d07d              BEQ      |L2.408|
00009c  2814              CMP      r0,#0x14              ;205
00009e  bf07              ITTEE    EQ                    ;282
0000a0  8860              LDRHEQ   r0,[r4,#2]            ;282
0000a2  2800              CMPEQ    r0,#0                 ;282
0000a4  ecbd8b06          VPOPNE   {d8-d10}
0000a8  bd70              POPNE    {r4-r6,pc}
0000aa  eeb00a68          VMOV.F32 s0,s17                ;284
0000ae  eef00a40          VMOV.F32 s1,s0                 ;284
0000b2  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetSpeedAndAccelEff ; Anki::Cozmo::LiftController::SetSpeedAndAccel(float, float)
0000b6  7a20              LDRB     r0,[r4,#8]            ;285
0000b8  ecbd8b06          VPOP     {d8-d10}              ;285
0000bc  ee000a10          VMOV     s0,r0                 ;285
0000c0  e8bd4070          POP      {r4-r6,lr}            ;285
0000c4  eeb80a40          VCVT.F32.U32 s0,s0                 ;285
0000c8  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
                  |L2.204|
0000cc  7a61              LDRB     r1,[r4,#9]            ;210
0000ce  2000              MOVS     r0,#0                 ;209
0000d0  2900              CMP      r1,#0                 ;210
0000d2  bf1c              ITT      NE                    ;211
0000d4  4248              RSBNE    r0,r1,#0              ;211
0000d6  f7fffffe          BLNE     _ZN4Anki8Embedded7RandS32Eii ; Anki::Embedded::RandS32(int, int)
0000da  f9941008          LDRSB    r1,[r4,#8]            ;215
0000de  4408              ADD      r0,r0,r1              ;215
0000e0  ee000a10          VMOV     s0,r0                 ;215
0000e4  eeb80ac0          VCVT.F32.S32 s0,s0                 ;215
0000e8  ee100a10          VMOV     r0,s0                 ;215
0000ec  f7fffffe          BL       __aeabi_f2d
0000f0  ec532b19          VMOV     r2,r3,d9              ;215
0000f4  f7fffffe          BL       __aeabi_dmul
0000f8  f7fffffe          BL       __aeabi_d2f
0000fc  ee090a10          VMOV     s18,r0                ;215
000100  8860              LDRH     r0,[r4,#2]            ;217
000102  b340              CBZ      r0,|L2.342|
000104  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
000108  8861              LDRH     r1,[r4,#2]            ;222
00010a  4429              ADD      r1,r1,r5              ;222
00010c  1a08              SUBS     r0,r1,r0              ;222
00010e  ee000a10          VMOV     s0,r0                 ;222
000112  7920              LDRB     r0,[r4,#4]            ;223
000114  eeb80a40          VCVT.F32.U32 s0,s0                 ;222
000118  2800              CMP      r0,#0                 ;222
00011a  ee601a08          VMUL.F32 s3,s0,s16             ;222
00011e  bf08              IT       EQ                    ;222
000120  2001              MOVEQ    r0,#1                 ;222
000122  ee000a10          VMOV     s0,r0                 ;222
000126  eeb80a40          VCVT.F32.U32 s0,s0                 ;222
00012a  ee201a0a          VMUL.F32 s2,s0,s20             ;222
00012e  e001              B        |L2.308|
                  |L2.304|
000130  e01f              B        |L2.370|
                  |L2.306|
000132  e044              B        |L2.446|
                  |L2.308|
000134  2e00              CMP      r6,#0                 ;222
000136  bf08              IT       EQ                    ;222
000138  2601              MOVEQ    r6,#1                 ;222
00013a  ee006a10          VMOV     s0,r6                 ;222
00013e  eeb80a40          VCVT.F32.U32 s0,s0                 ;222
000142  ee600a0a          VMUL.F32 s1,s0,s20             ;222
000146  eeb00a49          VMOV.F32 s0,s18                ;223
00014a  ecbd8b06          VPOP     {d8-d10}              ;223
00014e  e8bd4070          POP      {r4-r6,lr}            ;223
000152  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEffff ; Anki::Cozmo::HeadController::SetDesiredAngle(float, float, float, float)
                  |L2.342|
000156  eef00a68          VMOV.F32 s1,s17                ;219
00015a  eeb00a6a          VMOV.F32 s0,s21                ;219
00015e  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController16SetSpeedAndAccelEff ; Anki::Cozmo::HeadController::SetSpeedAndAccel(float, float)
000162  eeb00a49          VMOV.F32 s0,s18                ;220
000166  ecbd8b06          VPOP     {d8-d10}              ;220
00016a  e8bd4070          POP      {r4-r6,lr}            ;220
00016e  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
                  |L2.370|
000172  8860              LDRH     r0,[r4,#2]            ;242
000174  2800              CMP      r0,#0                 ;242
000176  bf1c              ITT      NE
000178  ecbd8b06          VPOPNE   {d8-d10}
00017c  bd70              POPNE    {r4-r6,pc}
00017e  eef00a68          VMOV.F32 s1,s17                ;244
000182  eeb00a6a          VMOV.F32 s0,s21                ;244
000186  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController16SetSpeedAndAccelEff ; Anki::Cozmo::HeadController::SetSpeedAndAccel(float, float)
00018a  f9940008          LDRSB    r0,[r4,#8]            ;245
00018e  ee000a10          VMOV     s0,r0                 ;245
000192  eeb80ac0          VCVT.F32.S32 s0,s0                 ;245
000196  e000              B        |L2.410|
                  |L2.408|
000198  e022              B        |L2.480|
                  |L2.410|
00019a  ee100a10          VMOV     r0,s0                 ;245
00019e  f7fffffe          BL       __aeabi_f2d
0001a2  ec532b19          VMOV     r2,r3,d9              ;245
0001a6  f7fffffe          BL       __aeabi_dmul
0001aa  f7fffffe          BL       __aeabi_d2f
0001ae  ecbd8b06          VPOP     {d8-d10}              ;245
0001b2  ee000a10          VMOV     s0,r0                 ;245
0001b6  e8bd4070          POP      {r4-r6,lr}            ;245
0001ba  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
                  |L2.446|
0001be  eeb00a68          VMOV.F32 s0,s17                ;261
0001c2  eef00a40          VMOV.F32 s1,s0                 ;261
0001c6  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetSpeedAndAccelEff ; Anki::Cozmo::LiftController::SetSpeedAndAccel(float, float)
0001ca  8920              LDRH     r0,[r4,#8]            ;262
0001cc  ecbd8b06          VPOP     {d8-d10}              ;262
0001d0  ee000a10          VMOV     s0,r0                 ;262
0001d4  e8bd4070          POP      {r4-r6,lr}            ;262
0001d8  eeb80a40          VCVT.F32.U32 s0,s0                 ;262
0001dc  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
                  |L2.480|
0001e0  7aa1              LDRB     r1,[r4,#0xa]          ;302
0001e2  2000              MOVS     r0,#0                 ;301
0001e4  2900              CMP      r1,#0                 ;302
0001e6  bf1c              ITT      NE                    ;303
0001e8  4248              RSBNE    r0,r1,#0              ;303
0001ea  f7fffffe          BLNE     _ZN4Anki8Embedded7RandS32Eii ; Anki::Embedded::RandS32(int, int)
0001ee  f9b41008          LDRSH    r1,[r4,#8]            ;307
0001f2  4408              ADD      r0,r0,r1              ;307
0001f4  ee000a10          VMOV     s0,r0                 ;307
0001f8  eeb80ac0          VCVT.F32.S32 s0,s0                 ;307
0001fc  ee100a10          VMOV     r0,s0                 ;307
000200  f7fffffe          BL       __aeabi_f2d
000204  ec532b19          VMOV     r2,r3,d9              ;307
000208  f7fffffe          BL       __aeabi_dmul
00020c  f7fffffe          BL       __aeabi_d2f
000210  ee080a90          VMOV     s17,r0                ;307
000214  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
000218  8861              LDRH     r1,[r4,#2]            ;308
00021a  eddf0a26          VLDR     s1,|L2.692|
00021e  4429              ADD      r1,r1,r5              ;308
000220  1a08              SUBS     r0,r1,r0              ;308
000222  ee000a10          VMOV     s0,r0                 ;308
000226  eeb01a00          VMOV.F32 s2,#2.00000000        ;309
00022a  ee680aa0          VMUL.F32 s1,s17,s1             ;309
00022e  eeb80a40          VCVT.F32.U32 s0,s0                 ;308
000232  ee200a08          VMUL.F32 s0,s0,s16             ;308
000236  ee201a01          VMUL.F32 s2,s0,s2              ;309
00023a  ee800a81          VDIV.F32 s0,s1,s2              ;309
00023e  eeb01a4a          VMOV.F32 s2,s20                ;311
000242  ecbd8b06          VPOP     {d8-d10}              ;311
000246  eef01a41          VMOV.F32 s3,s2                 ;311
00024a  e8bd4070          POP      {r4-r6,lr}            ;311
00024e  eef10a40          VNEG.F32 s1,s0                 ;311
000252  f7ffbffe          B.W      _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
                  |L2.598|
000256  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
00025a  8861              LDRH     r1,[r4,#2]            ;319
00025c  4429              ADD      r1,r1,r5              ;319
00025e  1a08              SUBS     r0,r1,r0              ;319
000260  ee000a10          VMOV     s0,r0                 ;319
000264  f9b40008          LDRSH    r0,[r4,#8]            ;320
000268  eeb81a40          VCVT.F32.U32 s2,s0                 ;319
00026c  ee000a10          VMOV     s0,r0                 ;320
000270  eeb80ac0          VCVT.F32.S32 s0,s0                 ;320
000274  ee600a28          VMUL.F32 s1,s0,s17             ;320
000278  ee800a81          VDIV.F32 s0,s1,s2              ;320
00027c  eeb01a4a          VMOV.F32 s2,s20                ;321
000280  ecbd8b06          VPOP     {d8-d10}              ;321
000284  eef01a41          VMOV.F32 s3,s2                 ;321
000288  e8bd4070          POP      {r4-r6,lr}            ;321
00028c  eef00a40          VMOV.F32 s1,s0                 ;321
000290  f7ffbffe          B.W      _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
;;;334      
                          ENDP

                          DCD      0x00000000
                  |L2.664|
000298  a2529d39          DCFD     0x3f91df46a2529d39 ; 0.017453292519943295
00029c  3f91df46
                  |L2.672|
0002a0  447a0000          DCFS     0x447a0000 ; 1000
                  |L2.676|
0002a4  3a83126f          DCFS     0x3a83126f ; 0.0010000000474974513
                  |L2.680|
0002a8  00000000          DCFS     0x00000000 ; 0
                  |L2.684|
0002ac  41fb53d2          DCFS     0x41fb53d2 ; 31.415927886962891
                  |L2.688|
0002b0  3c23d70a          DCFS     0x3c23d70a ; 0.0099999997764825821
                  |L2.692|
0002b4  423ecccd          DCFS     0x423ecccd ; 47.700000762939453

                          AREA ||i._ZNK4Anki5Cozmo8KeyFrame15TransitionOutOfEjh||, CODE, READONLY, ALIGN=3

                  _ZNK4Anki5Cozmo8KeyFrame15TransitionOutOfEjh PROC ; Anki::Cozmo::KeyFrame::TransitionOutOf(unsigned, unsigned char) const
;;;42       
;;;43       void KeyFrame::TransitionOutOf(const TimeStamp_t animStartTime_us, const u8 nextTransitionIn) const
000000  b510              PUSH     {r4,lr}
;;;44       {
000002  4604              MOV      r4,r0
000004  ed2d8b06          VPUSH    {d8-d10}
000008  b082              SUB      sp,sp,#8
;;;45         switch(type)
00000a  7800              LDRB     r0,[r0,#0]
00000c  1e80              SUBS     r0,r0,#2
00000e  2815              CMP      r0,#0x15
;;;46         {
;;;47           case KeyFrame::START_HEAD_NOD:
;;;48           {
;;;49             HeadController::StartNodding(GetAngleRad(StartHeadNod.lowAngle_deg),
;;;50                                          GetAngleRad(StartHeadNod.highAngle_deg),
;;;51                                          StartHeadNod.period_ms,
;;;52                                          0,
;;;53                                          GetTransitionFraction(transitionOut),
;;;54                                          GetTransitionFraction(nextTransitionIn));
;;;55             break;
;;;56           }
;;;57             
;;;58           case KeyFrame::STOP_HEAD_NOD:
;;;59           {
;;;60             HeadController::StopNodding();
;;;61             //HeadController::SetDesiredAngle(StopHeadNod.finalAngle);
;;;62             break;
;;;63           }
;;;64             
;;;65           case KeyFrame::START_LIFT_NOD:
;;;66           {
;;;67             LiftController::StartNodding(StartLiftNod.lowHeight,
;;;68                                          StartLiftNod.highHeight,
;;;69                                          StartLiftNod.period_ms,
;;;70                                          0,
;;;71                                          GetTransitionFraction(transitionOut),
;;;72                                          GetTransitionFraction(nextTransitionIn));
;;;73             break;
;;;74           }
;;;75             
;;;76           case KeyFrame::STOP_LIFT_NOD:
;;;77           {
;;;78             LiftController::StopNodding();
;;;79             break;
;;;80           }
;;;81             
;;;82           /*
;;;83           case KeyFrame::SET_LED_COLORS:
;;;84           {
;;;85             // TODO: Move this into some kind of LightController file/namespace
;;;86             for(s32 iLED=0; iLED<NUM_LEDS; ++iLED) {
;;;87               const u32& currLEDcolor = SetLEDcolors.led[iLED];
;;;88               if(currLEDcolor != KeyFrame::UNSPECIFIED_COLOR) {
;;;89                 HAL::SetLED(static_cast<LEDId>(iLED), currLEDcolor);
;;;90               }
;;;91             }
;;;92             break;
;;;93           }
;;;94            */
;;;95             
;;;96           case KeyFrame::POINT_TURN:
;;;97           {
;;;98             SteeringController::ExecuteDirectDrive(0.f, 0.f);
;;;99             break;
;;;100          }
;;;101            
;;;102          case KeyFrame::DRIVE_LINE_SEGMENT:
;;;103          {
;;;104            SteeringController::ExecuteDirectDrive(0.f, 0.f);
;;;105            break;
;;;106          }
;;;107            
;;;108          case KeyFrame::PLAY_SOUND:
;;;109          {
;;;110            // TODO: Play streamed-in sound directly using robot speaker once available
;;;111            // For now, though, we'll just request the basestation do it for us
;;;112            Messages::PlaySoundOnBaseStation msg;
;;;113            msg.soundID  = PlaySound.soundID;
;;;114            msg.numLoops = PlaySound.numLoops;
;;;115            msg.volume   = PlaySound.volume;
;;;116            HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::PlaySoundOnBaseStation), &msg);
;;;117            break;
;;;118          }
;;;119            
;;;120          case KeyFrame::STOP_SOUND:
;;;121          {
;;;122            Messages::StopSoundOnBaseStation msg;
;;;123            HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::StopSoundOnBaseStation), &msg);
;;;124            break;
;;;125          }
;;;126            
;;;127          case KeyFrame::BLINK_EYES:
;;;128          {
;;;129            EyeController::SetEyeColor(BlinkEyes.color);
;;;130            EyeController::SetBlinkVariability(BlinkEyes.variability_ms);
;;;131            EyeController::StartBlinking(BlinkEyes.timeOn_ms, BlinkEyes.timeOff_ms);
;;;132            break;
;;;133          }
;;;134            
;;;135          case KeyFrame::FLASH_EYES:
;;;136          {
;;;137            EyeController::SetEyeColor(FlashEyes.color);
;;;138            EyeController::StartFlashing(FlashEyes.shape, FlashEyes.timeOn_ms, FlashEyes.timeOff_ms);
;;;139            break;
;;;140          }
;;;141            
;;;142          case KeyFrame::SET_EYE:
;;;143          {
;;;144            switch(SetEye.whichEye)
;;;145            {
;;;146              case EYE_LEFT:
;;;147                EyeController::SetEyeColor(SetEye.color, LED_CURRENT_COLOR);
;;;148                EyeController::SetEyeShape(SetEye.shape, EYE_CURRENT_SHAPE);
;;;149                break;
;;;150    
;;;151              case EYE_RIGHT:
;;;152                EyeController::SetEyeColor(LED_CURRENT_COLOR, SetEye.color);
;;;153                EyeController::SetEyeShape(EYE_CURRENT_SHAPE, SetEye.shape);
;;;154                break;
;;;155    
;;;156              case EYE_BOTH:
;;;157                EyeController::SetEyeColor(SetEye.color);
;;;158                EyeController::SetEyeShape(SetEye.shape);
;;;159                break;
;;;160    
;;;161              default:
;;;162                AnkiError("KeyFrame.TranisionOutOf.UnknownWhichEye",
;;;163                          "Invalid specification for SetEye.whichEye\n");
;;;164                break;
;;;165            }
;;;166            
;;;167            break;
;;;168          }
;;;169            
;;;170          case KeyFrame::SPIN_EYES:
;;;171          {
;;;172            EyeController::SetEyeColor(SpinEyes.color);
;;;173            EyeController::StartSpinning(SpinEyes.period_ms,
;;;174                                         SpinEyes.leftClockwise,
;;;175                                         SpinEyes.rightClockWise);
;;;176            break;
;;;177          }
;;;178          
;;;179          case KeyFrame::STOP_EYES:
;;;180          {
;;;181            EyeController::StopAnimating();
;;;182            break;
;;;183          }
;;;184            
;;;185          case KeyFrame::TRIGGER_ANIMATION:
;;;186          {
;;;187            AnimationController::Play(TriggerAnimation.animID, TriggerAnimation.numLoops);
;;;188            break;
;;;189          }
;;;190            
;;;191          default:
;;;192          {
;;;193            // Do nothing if no TransitionOutOf behavior defined for this type
;;;194            break;
;;;195          }
;;;196            
;;;197        } // switch(type)
;;;198        
;;;199      } // TransitionOutOf()
000010  bf22              ITTT     CS
000012  b002              ADDCS    sp,sp,#8
000014  ecbd8b06          VPOPCS   {d8-d10}
000018  bd10              POPCS    {r4,pc}
00001a  e8dff000          TBB      [pc,r0]
00001e  0b55              DCB      0x0b,0x55
000020  aaaa8baa          DCB      0xaa,0xaa,0x8b,0xaa
000024  aaaa8baa          DCB      0xaa,0xaa,0x8b,0xaa
000028  9aaaa6ae          DCB      0x9a,0xaa,0xa6,0xae
00002c  befbfacc          DCB      0xbe,0xfb,0xfa,0xcc
000030  5c84f900          DCB      0x5c,0x84,0xf9,0x00
000034  2a00              CMP      r2,#0
000036  bf08              IT       EQ
000038  2201              MOVEQ    r2,#1
00003a  ee002a10          VMOV     s0,r2
00003e  eef80a40          VCVT.F32.U32 s1,s0
000042  ed9f0a93          VLDR     s0,|L3.656|
000046  7960              LDRB     r0,[r4,#5]            ;49
000048  ee609a80          VMUL.F32 s19,s1,s0             ;49
00004c  2800              CMP      r0,#0                 ;49
00004e  bf08              IT       EQ                    ;49
000050  2001              MOVEQ    r0,#1                 ;49
000052  ee000a90          VMOV     s1,r0                 ;49
000056  f9940009          LDRSB    r0,[r4,#9]            ;49
00005a  eef80a60          VCVT.F32.U32 s1,s1                 ;49
00005e  ee209a80          VMUL.F32 s18,s1,s0             ;49
000062  ee000a10          VMOV     s0,r0                 ;49
000066  eeb80ac0          VCVT.F32.S32 s0,s0                 ;49
00006a  ee100a10          VMOV     r0,s0                 ;49
00006e  f7fffffe          BL       __aeabi_f2d
000072  ed9f8b89          VLDR     d8,|L3.664|
000076  ec532b18          VMOV     r2,r3,d8              ;49
00007a  f7fffffe          BL       __aeabi_dmul
00007e  f7fffffe          BL       __aeabi_d2f
000082  ee0a0a10          VMOV     s20,r0                ;49
000086  f9940008          LDRSB    r0,[r4,#8]            ;49
00008a  ee000a10          VMOV     s0,r0                 ;49
00008e  eeb80ac0          VCVT.F32.S32 s0,s0                 ;49
000092  ee100a10          VMOV     r0,s0                 ;49
000096  f7fffffe          BL       __aeabi_f2d
00009a  ec532b18          VMOV     r2,r3,d8              ;49
00009e  f7fffffe          BL       __aeabi_dmul
0000a2  f7fffffe          BL       __aeabi_d2f
0000a6  ee000a10          VMOV     s0,r0                 ;49
0000aa  8960              LDRH     r0,[r4,#0xa]          ;49
0000ac  b002              ADD      sp,sp,#8              ;49
0000ae  eef01a69          VMOV.F32 s3,s19                ;49
0000b2  eeb01a49          VMOV.F32 s2,s18                ;49
0000b6  eef00a4a          VMOV.F32 s1,s20                ;49
0000ba  ecbd8b06          VPOP     {d8-d10}              ;49
0000be  2100              MOVS     r1,#0                 ;49
0000c0  e8bd4010          POP      {r4,lr}               ;49
0000c4  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController12StartNoddingEfftiff ; Anki::Cozmo::HeadController::StartNodding(float, float, unsigned short, int, float, float)
0000c8  b002              ADD      sp,sp,#8              ;60
0000ca  ecbd8b06          VPOP     {d8-d10}              ;60
0000ce  e8bd4010          POP      {r4,lr}               ;60
0000d2  f7ffbffe          B.W      _ZN4Anki5Cozmo14HeadController11StopNoddingEv ; Anki::Cozmo::HeadController::StopNodding()
0000d6  2a00              CMP      r2,#0                 ;60
0000d8  bf08              IT       EQ                    ;60
0000da  2201              MOVEQ    r2,#1                 ;60
0000dc  ee002a10          VMOV     s0,r2                 ;60
0000e0  eef80a40          VCVT.F32.U32 s1,s0                 ;60
0000e4  ed9f0a6a          VLDR     s0,|L3.656|
0000e8  7960              LDRB     r0,[r4,#5]            ;67
0000ea  ee601a80          VMUL.F32 s3,s1,s0              ;67
0000ee  2800              CMP      r0,#0                 ;67
0000f0  bf08              IT       EQ                    ;67
0000f2  2001              MOVEQ    r0,#1                 ;67
0000f4  ee000a90          VMOV     s1,r0                 ;67
0000f8  7a61              LDRB     r1,[r4,#9]            ;67
0000fa  8960              LDRH     r0,[r4,#0xa]          ;67
0000fc  eef80a60          VCVT.F32.U32 s1,s1                 ;67
000100  ee201a80          VMUL.F32 s2,s1,s0              ;67
000104  ee001a10          VMOV     s0,r1                 ;67
000108  7a21              LDRB     r1,[r4,#8]            ;67
00010a  b002              ADD      sp,sp,#8              ;67
00010c  eef80a40          VCVT.F32.U32 s1,s0                 ;67
000110  ecbd8b06          VPOP     {d8-d10}              ;67
000114  ee001a10          VMOV     s0,r1                 ;67
000118  2100              MOVS     r1,#0                 ;67
00011a  e8bd4010          POP      {r4,lr}               ;67
00011e  eeb80a40          VCVT.F32.U32 s0,s0                 ;67
000122  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController12StartNoddingEfftiff ; Anki::Cozmo::LiftController::StartNodding(float, float, unsigned short, int, float, float)
000126  b002              ADD      sp,sp,#8              ;78
000128  ecbd8b06          VPOP     {d8-d10}              ;78
00012c  e8bd4010          POP      {r4,lr}               ;78
000130  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController11StopNoddingEv ; Anki::Cozmo::LiftController::StopNodding()
000134  ed9f0a5a          VLDR     s0,|L3.672|
000138  b002              ADD      sp,sp,#8              ;104
00013a  ecbd8b06          VPOP     {d8-d10}              ;104
00013e  eef01a40          VMOV.F32 s3,s0                 ;104
000142  eeb01a40          VMOV.F32 s2,s0                 ;104
000146  eef00a40          VMOV.F32 s1,s0                 ;104
00014a  e8bd4010          POP      {r4,lr}               ;104
00014e  f7ffbffe          B.W      _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
000152  8920              LDRH     r0,[r4,#8]            ;113
000154  f8ad0000          STRH     r0,[sp,#0]            ;113
000158  7aa0              LDRB     r0,[r4,#0xa]          ;114
00015a  f88d0002          STRB     r0,[sp,#2]            ;114
00015e  7ae0              LDRB     r0,[r4,#0xb]          ;115
000160  f88d0003          STRB     r0,[sp,#3]            ;115
000164  4669              MOV      r1,sp                 ;116
000166  204c              MOVS     r0,#0x4c              ;116
000168  e001              B        |L3.366|
00016a  4669              MOV      r1,sp                 ;123
00016c  204d              MOVS     r0,#0x4d              ;123
                  |L3.366|
00016e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000172  b002              ADD      sp,sp,#8
000174  ecbd8b06          VPOP     {d8-d10}
000178  bd10              POP      {r4,pc}
00017a  68e0              LDR      r0,[r4,#0xc]          ;129
00017c  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController11SetEyeColorEj ; Anki::Cozmo::EyeController::SetEyeColor(unsigned)
000180  7c20              LDRB     r0,[r4,#0x10]         ;130
000182  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController19SetBlinkVariabilityEi ; Anki::Cozmo::EyeController::SetBlinkVariability(int)
000186  8961              LDRH     r1,[r4,#0xa]          ;131
000188  8920              LDRH     r0,[r4,#8]            ;131
00018a  b002              ADD      sp,sp,#8              ;131
00018c  2200              MOVS     r2,#0                 ;131
00018e  ecbd8b06          VPOP     {d8-d10}              ;131
000192  e8bd4010          POP      {r4,lr}               ;131
000196  f7ffbffe          B.W      _ZN4Anki5Cozmo13EyeController13StartBlinkingEttb ; Anki::Cozmo::EyeController::StartBlinking(unsigned short, unsigned short, bool)
00019a  68e0              LDR      r0,[r4,#0xc]          ;137
00019c  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController11SetEyeColorEj ; Anki::Cozmo::EyeController::SetEyeColor(unsigned)
0001a0  8962              LDRH     r2,[r4,#0xa]          ;138
0001a2  8921              LDRH     r1,[r4,#8]            ;138
0001a4  f9940010          LDRSB    r0,[r4,#0x10]         ;138
0001a8  b002              ADD      sp,sp,#8              ;138
0001aa  ecbd8b06          VPOP     {d8-d10}              ;138
0001ae  e8bd4010          POP      {r4,lr}               ;138
0001b2  f7ffbffe          B.W      _ZN4Anki5Cozmo13EyeController13StartFlashingENS0_8EyeShapeEtt ; Anki::Cozmo::EyeController::StartFlashing(Anki::Cozmo::EyeShape, unsigned short, unsigned short)
0001b6  7a20              LDRB     r0,[r4,#8]            ;144
0001b8  2800              CMP      r0,#0                 ;144
0001ba  d011              BEQ      |L3.480|
0001bc  2801              CMP      r0,#1                 ;144
0001be  d01f              BEQ      |L3.512|
0001c0  2802              CMP      r0,#2                 ;144
0001c2  d031              BEQ      |L3.552|
0001c4  21a2              MOVS     r1,#0xa2              ;162
0001c6  4837              LDR      r0,|L3.676|
0001c8  e9cd0100          STRD     r0,r1,[sp,#0]         ;162
0001cc  a336              ADR      r3,|L3.680|
0001ce  a23d              ADR      r2,|L3.708|
0001d0  a147              ADR      r1,|L3.752|
0001d2  2005              MOVS     r0,#5                 ;162
0001d4  f7fffffe          BL       _Anki_Log
0001d8  b002              ADD      sp,sp,#8
0001da  ecbd8b06          VPOP     {d8-d10}
0001de  bd10              POP      {r4,pc}
                  |L3.480|
0001e0  f04f31ff          MOV      r1,#0xffffffff        ;147
0001e4  68e0              LDR      r0,[r4,#0xc]          ;147
0001e6  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController11SetEyeColorEjj ; Anki::Cozmo::EyeController::SetEyeColor(unsigned, unsigned)
0001ea  f9940009          LDRSB    r0,[r4,#9]            ;148
0001ee  b002              ADD      sp,sp,#8              ;148
0001f0  f04f31ff          MOV      r1,#0xffffffff        ;148
0001f4  ecbd8b06          VPOP     {d8-d10}              ;148
0001f8  e8bd4010          POP      {r4,lr}               ;148
0001fc  f7ffbffe          B.W      _ZN4Anki5Cozmo13EyeController11SetEyeShapeENS0_8EyeShapeES2_ ; Anki::Cozmo::EyeController::SetEyeShape(Anki::Cozmo::EyeShape, Anki::Cozmo::EyeShape)
                  |L3.512|
000200  f04f30ff          MOV      r0,#0xffffffff        ;152
000204  68e1              LDR      r1,[r4,#0xc]          ;152
000206  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController11SetEyeColorEjj ; Anki::Cozmo::EyeController::SetEyeColor(unsigned, unsigned)
00020a  f9941009          LDRSB    r1,[r4,#9]            ;153
00020e  e002              B        |L3.534|
000210  e032              B        |L3.632|
000212  e02a              B        |L3.618|
000214  e014              B        |L3.576|
                  |L3.534|
000216  b002              ADD      sp,sp,#8              ;153
000218  f04f30ff          MOV      r0,#0xffffffff        ;153
00021c  ecbd8b06          VPOP     {d8-d10}              ;153
000220  e8bd4010          POP      {r4,lr}               ;153
000224  f7ffbffe          B.W      _ZN4Anki5Cozmo13EyeController11SetEyeShapeENS0_8EyeShapeES2_ ; Anki::Cozmo::EyeController::SetEyeShape(Anki::Cozmo::EyeShape, Anki::Cozmo::EyeShape)
                  |L3.552|
000228  68e0              LDR      r0,[r4,#0xc]          ;157
00022a  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController11SetEyeColorEj ; Anki::Cozmo::EyeController::SetEyeColor(unsigned)
00022e  f9940009          LDRSB    r0,[r4,#9]            ;158
000232  b002              ADD      sp,sp,#8              ;158
000234  ecbd8b06          VPOP     {d8-d10}              ;158
000238  e8bd4010          POP      {r4,lr}               ;158
00023c  f7ffbffe          B.W      _ZN4Anki5Cozmo13EyeController11SetEyeShapeENS0_8EyeShapeE ; Anki::Cozmo::EyeController::SetEyeShape(Anki::Cozmo::EyeShape)
                  |L3.576|
000240  68e0              LDR      r0,[r4,#0xc]          ;172
000242  f7fffffe          BL       _ZN4Anki5Cozmo13EyeController11SetEyeColorEj ; Anki::Cozmo::EyeController::SetEyeColor(unsigned)
000246  7c60              LDRB     r0,[r4,#0x11]         ;173
000248  2800              CMP      r0,#0                 ;173
00024a  bf14              ITE      NE                    ;173
00024c  2201              MOVNE    r2,#1                 ;173
00024e  2200              MOVEQ    r2,#0                 ;173
000250  7c20              LDRB     r0,[r4,#0x10]         ;173
000252  2800              CMP      r0,#0                 ;173
000254  bf14              ITE      NE                    ;173
000256  2101              MOVNE    r1,#1                 ;173
000258  2100              MOVEQ    r1,#0                 ;173
00025a  8920              LDRH     r0,[r4,#8]            ;173
00025c  b002              ADD      sp,sp,#8              ;173
00025e  ecbd8b06          VPOP     {d8-d10}              ;173
000262  e8bd4010          POP      {r4,lr}               ;173
000266  f7ffbffe          B.W      _ZN4Anki5Cozmo13EyeController13StartSpinningEtbb ; Anki::Cozmo::EyeController::StartSpinning(unsigned short, bool, bool)
                  |L3.618|
00026a  b002              ADD      sp,sp,#8              ;181
00026c  ecbd8b06          VPOP     {d8-d10}              ;181
000270  e8bd4010          POP      {r4,lr}               ;181
000274  f7ffbffe          B.W      _ZN4Anki5Cozmo13EyeController13StopAnimatingEv ; Anki::Cozmo::EyeController::StopAnimating()
                  |L3.632|
000278  7b21              LDRB     r1,[r4,#0xc]          ;187
00027a  68a0              LDR      r0,[r4,#8]            ;187
00027c  b002              ADD      sp,sp,#8              ;187
00027e  ecbd8b06          VPOP     {d8-d10}              ;187
000282  e8bd4010          POP      {r4,lr}               ;187
000286  f7ffbffe          B.W      _ZN4Anki5Cozmo19AnimationController4PlayEij ; Anki::Cozmo::AnimationController::Play(int, unsigned)
;;;200    
                          ENDP

00028a  0000              DCW      0x0000
                          DCD      0x00000000
                  |L3.656|
000290  3c23d70a          DCFS     0x3c23d70a ; 0.0099999997764825821
                          DCD      0x00000000
                  |L3.664|
000298  a2529d39          DCFD     0x3f91df46a2529d39 ; 0.017453292519943295
00029c  3f91df46
                  |L3.672|
0002a0  00000000          DCFS     0x00000000 ; 0
                  |L3.676|
                          DCD      ||.constdata||
                  |L3.680|
0002a8  73757065          DCB      "supervisor\\src\\keyFrame.cpp",0
0002ac  72766973
0002b0  6f725c73
0002b4  72635c6b
0002b8  65794672
0002bc  616d652e
0002c0  63707000
                  |L3.708|
0002c4  496e7661          DCB      "Invalid specification for SetEye.whichEye\n",0
0002c8  6c696420
0002cc  73706563
0002d0  69666963
0002d4  6174696f
0002d8  6e20666f
0002dc  72205365
0002e0  74457965
0002e4  2e776869
0002e8  63684579
0002ec  650a00  
0002ef  00                DCB      0
                  |L3.752|
0002f0  4b657946          DCB      "KeyFrame.TranisionOutOf.UnknownWhichEye",0
0002f4  72616d65
0002f8  2e547261
0002fc  6e697369
000300  6f6e4f75
000304  744f662e
000308  556e6b6e
00030c  6f776e57
000310  68696368
000314  45796500

                          AREA ||i.__sti___12_keyFrame_cpp_a2e5f0e7||, CODE, READONLY, ALIGN=2

                  __sti___12_keyFrame_cpp_a2e5f0e7 PROC
000000  4803              LDR      r0,|L4.16|
000002  ed9f0a02          VLDR     s0,|L4.12|
000006  ed800a00          VSTR     s0,[r0,#0]
00000a  4770              BX       lr
                          ENDP

                  |L4.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L4.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZNK4Anki5Cozmo8KeyFrame15TransitionOutOfEjh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki5Cozmo8KeyFrame15TransitionOutOfEjh||
                          DCD      0x00000001

                          AREA ||area_number.6||, LINKORDER=||i._ZNK4Anki5Cozmo8KeyFrame14TransitionIntoEjh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki5Cozmo8KeyFrame14TransitionIntoEjh||
                          DCD      0x00000001

                          AREA ||area_number.7||, LINKORDER=||i._ZN4Anki5Cozmo8KeyFrame12IsInPositionEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo8KeyFrame12IsInPositionEv||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i.__sti___12_keyFrame_cpp_a2e5f0e7||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___12_keyFrame_cpp_a2e5f0e7||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000008  693a3a43          DCB      0x69,0x3a,0x3a,0x43
00000c  6f7a6d6f          DCB      0x6f,0x7a,0x6d,0x6f
000010  3a3a4b65          DCB      0x3a,0x3a,0x4b,0x65
000014  79467261          DCB      0x79,0x46,0x72,0x61
000018  6d653a3a          DCB      0x6d,0x65,0x3a,0x3a
00001c  5472616e          DCB      0x54,0x72,0x61,0x6e
000020  73697469          DCB      0x73,0x69,0x74,0x69
000024  6f6e4f75          DCB      0x6f,0x6e,0x4f,0x75
000028  744f6628          DCB      0x74,0x4f,0x66,0x28
00002c  756e7369          DCB      0x75,0x6e,0x73,0x69
000030  676e6564          DCB      0x67,0x6e,0x65,0x64
000034  20696e74          DCB      0x20,0x69,0x6e,0x74
000038  2c20756e          DCB      0x2c,0x20,0x75,0x6e
00003c  7369676e          DCB      0x73,0x69,0x67,0x6e
000040  65642063          DCB      0x65,0x64,0x20,0x63
000044  68617229          DCB      0x68,0x61,0x72,0x29
000048  20636f6e          DCB      0x20,0x63,0x6f,0x6e
00004c  737400            DCB      0x73,0x74,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___12_keyFrame_cpp_a2e5f0e7
