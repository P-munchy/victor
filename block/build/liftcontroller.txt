; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\liftcontroller.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\liftcontroller.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\liftcontroller.crf supervisor\src\liftController.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo14LiftController10Height2RadEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController10Height2RadEf PROC ; Anki::Cozmo::LiftController::Height2Rad(float)
;;;141          // Returns the angle between the shoulder joint and the wrist joint.
;;;142          f32 Height2Rad(f32 height_mm) {
000000  ee101a10          VMOV     r1,s0
;;;143            height_mm = CLIP(height_mm, LIFT_HEIGHT_LOWDOCK, LIFT_HEIGHT_CARRY);
000004  480f              LDR      r0,|L1.68|
000006  4281              CMP      r1,r0
000008  bfcc              ITE      GT
00000a  eef00a40          VMOVGT.F32 s1,s0
00000e  eef30a07          VMOVLE.F32 s1,#23.00000000
000012  ee101a90          VMOV     r1,s1
000016  4a0c              LDR      r2,|L1.72|
000018  4291              CMP      r1,r2
00001a  bfa8              IT       GE
00001c  ed9f0a0b          VLDRGE   s0,|L1.76|
000020  da05              BGE      |L1.46|
000022  ee101a10          VMOV     r1,s0
000026  4281              CMP      r1,r0
000028  bfd8              IT       LE
00002a  eeb30a07          VMOVLE.F32 s0,#23.00000000
                  |L1.46|
;;;144            return asinf((height_mm - LIFT_BASE_POSITION[2] - LIFT_FORK_HEIGHT_REL_TO_ARM_END)/LIFT_ARM_LENGTH);
00002e  eddf0a08          VLDR     s1,|L1.80|
000032  ee300a60          VSUB.F32 s0,s0,s1
000036  eddf0a07          VLDR     s1,|L1.84|
00003a  ee200a20          VMUL.F32 s0,s0,s1
00003e  f7ffbffe          B.W      __hardfp_asinf
;;;145          }
;;;146          
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x41b80000
                  |L1.72|
                          DCD      0x42be0000
                  |L1.76|
00004c  42be0000          DCFS     0x42be0000 ; 95
                  |L1.80|
000050  422ecccd          DCFS     0x422ecccd ; 43.700000762939453
                  |L1.84|
000054  3c800000          DCFS     0x3c800000 ; 0.015625

                          AREA ||i._ZN4Anki5Cozmo14LiftController10IsLimitingEPf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController10IsLimitingEPf PROC ; Anki::Cozmo::LiftController::IsLimiting(float*)
;;;337          
;;;338          bool IsLimiting(f32* limitAngle)
000000  4a0a              LDR      r2,|L2.44|
;;;339          {
000002  4601              MOV      r1,r0
;;;340            if (limitingDetected_ && limitAngle) {
000004  78d0              LDRB     r0,[r2,#3]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b917limitingDetected_E
000006  2800              CMP      r0,#0
000008  bf14              ITE      NE
00000a  2900              CMPNE    r1,#0
;;;341              *limitAngle = power_ > 0 ? LIFT_ANGLE_HIGH_LIMIT : LIFT_ANGLE_LOW_LIMIT;
;;;342            }
;;;343            return limitingDetected_;
;;;344          }
00000c  4770              BXEQ     lr
00000e  ed920a0f          VLDR     s0,[r2,#0x3c]         ;341
000012  eeb50ac0          VCMPE.F32 s0,#0.0               ;341
000016  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;341
00001a  bfcc              ITE      GT                    ;341
00001c  ed920a1a          VLDRGT   s0,[r2,#0x68]         ;341
000020  ed920a19          VLDRLE   s0,[r2,#0x64]         ;341
000024  ed810a00          VSTR     s0,[r1,#0]            ;341
000028  4770              BX       lr
;;;345          
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController10Rad2HeightEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController10Rad2HeightEf PROC ; Anki::Cozmo::LiftController::Rad2Height(float)
;;;146          
;;;147          f32 Rad2Height(f32 angle) {
000000  b510              PUSH     {r4,lr}
;;;148            return (sinf(angle) * LIFT_ARM_LENGTH) + LIFT_BASE_POSITION[2] + LIFT_FORK_HEIGHT_REL_TO_ARM_END;
000002  f7fffffe          BL       __hardfp_sinf
000006  eef00a40          VMOV.F32 s1,s0
00000a  ed9f1a03          VLDR     s2,|L3.24|
00000e  ed9f0a03          VLDR     s0,|L3.28|
000012  ee000a81          VMLA.F32 s0,s1,s2
;;;149          }
000016  bd10              POP      {r4,pc}
;;;150          
                          ENDP

                  |L3.24|
000018  42800000          DCFS     0x42800000 ; 64
                  |L3.28|
00001c  422ecccd          DCFS     0x422ecccd ; 43.700000762939453

                          AREA ||i._ZN4Anki5Cozmo14LiftController11GetAngleRadEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController11GetAngleRadEv PROC ; Anki::Cozmo::LiftController::GetAngleRad()
;;;275          
;;;276          f32 GetAngleRad()
000000  4801              LDR      r0,|L4.8|
000002  ed900a00          VLDR     s0,[r0,#0]
;;;277          {
;;;278            return currentAngle_.ToFloat();
;;;279          }
000006  4770              BX       lr
;;;280          
                          ENDP

                  |L4.8|
                          DCD      ||.data||+0x78

                          AREA ||i._ZN4Anki5Cozmo14LiftController11GetHeightMMEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController11GetHeightMMEv PROC ; Anki::Cozmo::LiftController::GetHeightMM()
;;;270          
;;;271          f32 GetHeightMM()
000000  4807              LDR      r0,|L5.32|
;;;272          {
000002  b510              PUSH     {r4,lr}
000004  ed900a00          VLDR     s0,[r0,#0]
000008  f7fffffe          BL       __hardfp_sinf
00000c  ed9f1a05          VLDR     s2,|L5.36|
000010  eddf0a05          VLDR     s1,|L5.40|
000014  ee400a01          VMLA.F32 s1,s0,s2
000018  eeb00a60          VMOV.F32 s0,s1
;;;273            return Rad2Height(currentAngle_.ToFloat());
;;;274          }
00001c  bd10              POP      {r4,pc}
;;;275          
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      ||.data||+0x78
                  |L5.36|
000024  42800000          DCFS     0x42800000 ; 64
                  |L5.40|
000028  422ecccd          DCFS     0x422ecccd ; 43.700000762939453

                          AREA ||i._ZN4Anki5Cozmo14LiftController11StopNoddingEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController11StopNoddingEv PROC ; Anki::Cozmo::LiftController::StopNodding()
;;;692          
;;;693          void StopNodding()
000000  4901              LDR      r1,|L6.8|
;;;694          {
;;;695            AnkiConditionalWarnAndReturn(enable_, "LiftController.StopNodding.Disabled",
;;;696                                         "StopNodding() command ignored: LiftController is disabled.\n");
;;;697            
;;;698            //SetDesiredHeight_internal(preNodHeight_);
;;;699            isNodding_ = false;
000002  2000              MOVS     r0,#0
000004  7048              STRB     r0,[r1,#1]
;;;700          }
000006  4770              BX       lr
;;;701          
                          ENDP

                  |L6.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController12IsCalibratedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController12IsCalibratedEv PROC ; Anki::Cozmo::LiftController::IsCalibrated()
;;;201          
;;;202          bool IsCalibrated()
000000  4801              LDR      r0,|L7.8|
;;;203          {
;;;204            return isCalibrated_;
000002  7880              LDRB     r0,[r0,#2]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b913isCalibrated_E
;;;205          }
000004  4770              BX       lr
;;;206          
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController12IsInPositionEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController12IsInPositionEv PROC ; Anki::Cozmo::LiftController::IsInPosition()
;;;503          
;;;504          bool IsInPosition(void) {
000000  4801              LDR      r0,|L8.8|
;;;505            return inPosition_;
000002  7800              LDRB     r0,[r0,#0]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b911inPosition_E
;;;506          }
000004  4770              BX       lr
;;;507          
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController12StartNoddingEfftiff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController12StartNoddingEfftiff PROC ; Anki::Cozmo::LiftController::StartNodding(float, float, unsigned short, int, float, float)
;;;670          
;;;671          void StartNodding(const f32 lowHeight, const f32 highHeight,
000000  4a0f              LDR      r2,|L9.64|
;;;672                            const u16 period_ms, const s32 numLoops,
;;;673                            const f32 easeInFraction, const f32 easeOutFraction)
;;;674          {
;;;675            AnkiConditionalWarnAndReturn(enable_, "LiftController.StartNodding.Disabled",
;;;676                                         "StartNodding() command ignored: LiftController is disabled.\n");
;;;677            
;;;678            //preNodHeight_  = GetHeightMM();
;;;679            nodLowHeight_  = lowHeight;
;;;680            nodHighHeight_ = highHeight;
;;;681            numNodsDesired_  = numLoops;
;;;682            numNodsComplete_ = 0;
;;;683            isNodding_ = true;
;;;684            nodEaseInFraction_ = easeInFraction;
;;;685            nodEaseOutFraction_ = easeOutFraction;
;;;686            nodHalfPeriod_sec_ = static_cast<f32>(period_ms) * 0.5f * 0.001f;
000002  eeb62a00          VMOV.F32 s4,#0.50000000
000006  ed820a10          VSTR     s0,[r2,#0x40]         ;679
00000a  edc20a11          VSTR     s1,[r2,#0x44]         ;680
00000e  eef00a61          VMOV.F32 s1,s3                 ;685
000012  ee010a90          VMOV     s3,r0
000016  6491              STR      r1,[r2,#0x48]         ;682  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b915numNodsDesired_E
000018  2100              MOVS     r1,#0                 ;682
00001a  eef81a61          VCVT.F32.U32 s3,s3
00001e  64d1              STR      r1,[r2,#0x4c]         ;683  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b916numNodsComplete_E
000020  2101              MOVS     r1,#1                 ;683
000022  7051              STRB     r1,[r2,#1]            ;683
000024  ee611a82          VMUL.F32 s3,s3,s4
000028  ed9f2a06          VLDR     s4,|L9.68|
00002c  ed821a14          VSTR     s2,[r2,#0x50]         ;684
000030  edc20a15          VSTR     s1,[r2,#0x54]         ;685
000034  ee611a82          VMUL.F32 s3,s3,s4
000038  edc21a16          VSTR     s3,[r2,#0x58]
;;;687            
;;;688            SetDesiredHeight_internal(nodLowHeight_, nodEaseOutFraction_, nodEaseInFraction_, nodHalfPeriod_sec_);
00003c  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff ; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
;;;689            
;;;690          } // StartNodding()
;;;691          
                          ENDP

                  |L9.64|
                          DCD      ||.data||
                  |L9.68|
000044  3a83126f          DCFS     0x3a83126f ; 0.0010000000474974513

                          AREA ||i._ZN4Anki5Cozmo14LiftController16GetDesiredHeightEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController16GetDesiredHeightEv PROC ; Anki::Cozmo::LiftController::GetDesiredHeight()
;;;498          
;;;499          f32 GetDesiredHeight()
000000  4801              LDR      r0,|L10.8|
;;;500          {
;;;501            return desiredHeight_;
000002  ed900a06          VLDR     s0,[r0,#0x18]
;;;502          }
000006  4770              BX       lr
;;;503          
                          ENDP

                  |L10.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController16GetSpeedAndAccelERfS2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController16GetSpeedAndAccelERfS2_ PROC ; Anki::Cozmo::LiftController::GetSpeedAndAccel(float&, float&)
;;;292          
;;;293          void GetSpeedAndAccel(f32 &max_speed_rad_per_sec, f32 &accel_rad_per_sec2)
000000  4a04              LDR      r2,|L11.20|
;;;294          {
;;;295            max_speed_rad_per_sec = maxSpeedRad_;
000002  ed920a0b          VLDR     s0,[r2,#0x2c]
000006  ed800a00          VSTR     s0,[r0,#0]
;;;296            accel_rad_per_sec2 = accelRad_;
00000a  ed920a0c          VLDR     s0,[r2,#0x30]
00000e  ed810a00          VSTR     s0,[r1,#0]
;;;297          }
000012  4770              BX       lr
;;;298          
                          ENDP

                  |L11.20|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf PROC ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
;;;391          
;;;392          void SetDesiredHeight(f32 height_mm)
000000  eef50a00          VMOV.F32 s1,#0.25000000
;;;393          {
;;;394            SetDesiredHeight(height_mm, DEFAULT_START_ACCEL_FRAC, DEFAULT_END_ACCEL_FRAC, DEFAULT_DURATION_SEC);
000004  4904              LDR      r1,|L12.24|
000006  2000              MOVS     r0,#0
000008  eef01a60          VMOV.F32 s3,s1
00000c  7048              STRB     r0,[r1,#1]
00000e  eeb01a60          VMOV.F32 s2,s1
000012  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff ; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
;;;395          }
;;;396    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController16SetDesiredHeightEffff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEffff PROC ; Anki::Cozmo::LiftController::SetDesiredHeight(float, float, float, float)
;;;491          
;;;492          void SetDesiredHeight(f32 height_mm, f32 acc_start_frac, f32 acc_end_frac, f32 duration_seconds)
000000  4902              LDR      r1,|L13.12|
;;;493          {
;;;494            isNodding_ = false;
000002  2000              MOVS     r0,#0
000004  7048              STRB     r0,[r1,#1]
;;;495            SetDesiredHeight_internal(height_mm, acc_start_frac, acc_end_frac, duration_seconds);
000006  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff ; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
;;;496          }
;;;497          
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController16SetSpeedAndAccelEff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController16SetSpeedAndAccelEff PROC ; Anki::Cozmo::LiftController::SetSpeedAndAccel(float, float)
;;;280          
;;;281          void SetSpeedAndAccel(const f32 max_speed_rad_per_sec, const f32 accel_rad_per_sec2)
000000  4802              LDR      r0,|L14.12|
;;;282          {
;;;283            maxSpeedRad_ = max_speed_rad_per_sec;
000002  ed800a0b          VSTR     s0,[r0,#0x2c]
;;;284            accelRad_ = accel_rad_per_sec2;
000006  edc00a0c          VSTR     s1,[r0,#0x30]
;;;285          }
00000a  4770              BX       lr
;;;286          
                          ENDP

                  |L14.12|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController17LimitDetectUpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController17LimitDetectUpdateEv PROC ; Anki::Cozmo::LiftController::LimitDetectUpdate()
;;;350          
;;;351          void LimitDetectUpdate()
000000  b570              PUSH     {r4-r6,lr}
000002  4c20              LDR      r4,|L15.132|
000004  ed940a0e          VLDR     s0,[r4,#0x38]
000008  eeb50ac0          VCMPE.F32 s0,#0.0
00000c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000010  bfb8              IT       LT
000012  eeb10a40          VNEGLT.F32 s0,s0
000016  ee100a10          VMOV     r0,s0
00001a  491b              LDR      r1,|L15.136|
00001c  2600              MOVS     r6,#0
00001e  2501              MOVS     r5,#1
000020  4288              CMP      r0,r1
;;;352          {
000022  dd04              BLE      |L15.46|
;;;353            if (IsMoving()) {
;;;354              lastLiftMovedTime_us = HAL::GetMicroCounter();
000024  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
;;;355              limitingDetected_ = false;
000028  65e0              STR      r0,[r4,#0x5c]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b920lastLiftMovedTime_usE
00002a  70e6              STRB     r6,[r4,#3]
00002c  e015              B        |L15.90|
                  |L15.46|
;;;356            } else if (ABS(power_) > 0 && HAL::GetMicroCounter() - lastLiftMovedTime_us > LIFT_STOP_TIME) {
00002e  ed940a0f          VLDR     s0,[r4,#0x3c]
000032  eeb50ac0          VCMPE.F32 s0,#0.0
000036  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003a  bfb8              IT       LT
00003c  eeb10a40          VNEGLT.F32 s0,s0
000040  eeb50ac0          VCMPE.F32 s0,#0.0
000044  eef1fa10          VMRS     APSR_nzcv,FPSCR
000048  dd07              BLE      |L15.90|
00004a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
00004e  6de1              LDR      r1,[r4,#0x5c]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b920lastLiftMovedTime_usE
000050  1a40              SUBS     r0,r0,r1
000052  490e              LDR      r1,|L15.140|
000054  4288              CMP      r0,r1
;;;357              limitingDetected_ = true;
000056  bf88              IT       HI
000058  70e5              STRBHI   r5,[r4,#3]
                  |L15.90|
;;;358            }
;;;359            
;;;360            if (power_ == 0.f) {
00005a  ed940a0f          VLDR     s0,[r4,#0x3c]
00005e  eeb50ac0          VCMPE.F32 s0,#0.0
000062  eef1fa10          VMRS     APSR_nzcv,FPSCR
000066  d108              BNE      |L15.122|
;;;361              if (HAL::GetMicroCounter() - lastPowerAppliedTime_us > LIFT_RELAX_TIME) {
000068  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
00006c  6e21              LDR      r1,[r4,#0x60]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b923lastPowerAppliedTime_usE
00006e  1a40              SUBS     r0,r0,r1
000070  4907              LDR      r1,|L15.144|
000072  4288              CMP      r0,r1
;;;362                isRelaxed_ = true;
000074  bf88              IT       HI
000076  7165              STRBHI   r5,[r4,#5]
;;;363              }
;;;364            } else {
;;;365              lastPowerAppliedTime_us = HAL::GetMicroCounter();
;;;366              isRelaxed_ = false;
;;;367            }
;;;368            
;;;369            
;;;370    #if(DEBUG_LIFT_CONTROLLER)
;;;371            static bool wasLimiting = false;
;;;372            if (!wasLimiting && limitingDetected_) {
;;;373              PRINT("Lift LIMITED\n");
;;;374              wasLimiting = true;
;;;375            } else if (wasLimiting && !limitingDetected_) {
;;;376              PRINT("Lift FREE\n");
;;;377              wasLimiting = false;
;;;378            }
;;;379            
;;;380            static bool wasRelaxed = true;
;;;381            if (!wasRelaxed && isRelaxed_) {
;;;382              PRINT("Lift RELAXED\n");
;;;383              wasRelaxed = true;
;;;384            } else if (wasRelaxed && !isRelaxed_) {
;;;385              PRINT("Lift ENGAGED\n");
;;;386              wasRelaxed = false;
;;;387            }
;;;388    #endif
;;;389            
;;;390          }
000078  bd70              POP      {r4-r6,pc}
                  |L15.122|
00007a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
00007e  6620              STR      r0,[r4,#0x60]         ;366  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b923lastPowerAppliedTime_usE
000080  7166              STRB     r6,[r4,#5]            ;366
000082  bd70              POP      {r4-r6,pc}
;;;391          
                          ENDP

                  |L15.132|
                          DCD      ||.data||
                  |L15.136|
                          DCD      0x3a83126f
                  |L15.140|
                          DCD      0x0007a120
                  |L15.144|
                          DCD      0x00030d40

                          AREA ||i._ZN4Anki5Cozmo14LiftController17SetLinearVelocityEf||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo14LiftController17SetLinearVelocityEf PROC ; Anki::Cozmo::LiftController::SetLinearVelocity(float)
;;;298          
;;;299          void SetLinearVelocity(const f32 mm_per_sec)
000000  b510              PUSH     {r4,lr}
;;;300          {
;;;301            const f32 rad_per_sec = Height2Rad(mm_per_sec);
000002  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController10Height2RadEf ; Anki::Cozmo::LiftController::Height2Rad(float)
;;;302            SetAngularVelocity(rad_per_sec);
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController18SetAngularVelocityEf ; Anki::Cozmo::LiftController::SetAngularVelocity(float)
;;;303          }
;;;304          
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo14LiftController18GetAngularVelocityEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController18GetAngularVelocityEv PROC ; Anki::Cozmo::LiftController::GetAngularVelocity()
;;;312    
;;;313          f32 GetAngularVelocity()
000000  4801              LDR      r0,|L17.8|
;;;314          {
;;;315            return radSpeed_;
000002  ed900a0e          VLDR     s0,[r0,#0x38]
;;;316          }
000006  4770              BX       lr
;;;317          
                          ENDP

                  |L17.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController18ResetAnglePositionEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController18ResetAnglePositionEf PROC ; Anki::Cozmo::LiftController::ResetAnglePosition(float)
;;;172          
;;;173          void ResetAnglePosition(f32 currAngle)
000000  b510              PUSH     {r4,lr}
;;;174          {
;;;175            currentAngle_ = currAngle;
000002  4807              LDR      r0,|L18.32|
000004  f7fffffe          BL       _ZN4Anki7RadiansaSEf ; Anki::Radians::operator =(float)
;;;176            HAL::MotorResetPosition(HAL::MOTOR_LIFT);
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)
;;;177            prevHalPos_ = HAL::MotorGetPosition(HAL::MOTOR_LIFT);
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000014  4803              LDR      r0,|L18.36|
;;;178            isCalibrated_ = true;
000016  2101              MOVS     r1,#1
000018  ed800a0a          VSTR     s0,[r0,#0x28]         ;177
00001c  7081              STRB     r1,[r0,#2]
;;;179          }
00001e  bd10              POP      {r4,pc}
;;;180          
                          ENDP

                  |L18.32|
                          DCD      ||.data||+0x78
                  |L18.36|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController18SetAngularVelocityEf||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo14LiftController18SetAngularVelocityEf PROC ; Anki::Cozmo::LiftController::SetAngularVelocity(float)
;;;304          
;;;305          void SetAngularVelocity(const f32 rad_per_sec)
000000  ed9f1a17          VLDR     s2,|L19.96|
;;;306          {
000004  b510              PUSH     {r4,lr}
;;;307            // TODO: Figure out power-to-speed ratio on actual robot. Normalize with battery power?
;;;308            power_ = CLIP(rad_per_sec / HAL::MAX_LIFT_SPEED, -1.0, 1.0);
000006  eec00a01          VDIV.F32 s1,s0,s2
00000a  ee100a90          VMOV     r0,s1
00000e  f1104f81          CMN      r0,#0x40800000
000012  d207              BCS      |L19.36|
000014  ee100a90          VMOV     r0,s1
000018  f1b05f7e          CMP      r0,#0x3f800000
00001c  bfa8              IT       GE
00001e  ed9f0b12          VLDRGE   d0,|L19.104|
000022  da0d              BGE      |L19.64|
                  |L19.36|
000024  ee100a90          VMOV     r0,s1
000028  f1104f81          CMN      r0,#0x40800000
00002c  bf28              IT       CS
00002e  ed9f0b10          VLDRCS   d0,|L19.112|
000032  d205              BCS      |L19.64|
000034  ee100a90          VMOV     r0,s1
000038  f7fffffe          BL       __aeabi_f2d
00003c  ec410b10          VMOV     d0,r0,r1
                  |L19.64|
000040  ec510b10          VMOV     r0,r1,d0
000044  f7fffffe          BL       __aeabi_d2f
000048  4c0b              LDR      r4,|L19.120|
00004a  ee000a10          VMOV     s0,r0
;;;309            HAL::MotorSetPower(HAL::MOTOR_LIFT, power_);
00004e  2002              MOVS     r0,#2
000050  ed840a0f          VSTR     s0,[r4,#0x3c]         ;308
000054  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf ; Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
;;;310            inPosition_ = true;
000058  2001              MOVS     r0,#1
00005a  7020              STRB     r0,[r4,#0]
;;;311          }
00005c  bd10              POP      {r4,pc}
;;;312    
                          ENDP

00005e  0000              DCW      0x0000
                  |L19.96|
000060  3fc90fdb          DCFS     0x3fc90fdb ; 1.5707963705062866
                          DCD      0x00000000
                  |L19.104|
000068  00000000          DCFD     0x3ff0000000000000 ; 1
00006c  3ff00000
                  |L19.112|
000070  00000000          DCFD     0xbff0000000000000 ; -1
000074  bff00000
                  |L19.120|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController22SetLinearSpeedAndAccelEff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController22SetLinearSpeedAndAccelEff PROC ; Anki::Cozmo::LiftController::SetLinearSpeedAndAccel(float, float)
;;;286          
;;;287          void SetLinearSpeedAndAccel(const f32 max_speed_mm_per_sec, const f32 accel_mm_per_sec2)
000000  b510              PUSH     {r4,lr}
;;;288          {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08a60          VMOV.F32 s16,s1
;;;289            maxSpeedRad_ = Height2Rad(max_speed_mm_per_sec);
00000a  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController10Height2RadEf ; Anki::Cozmo::LiftController::Height2Rad(float)
00000e  4c06              LDR      r4,|L20.40|
000010  ed840a0b          VSTR     s0,[r4,#0x2c]
;;;290            accelRad_    = Height2Rad(accel_mm_per_sec2);
000014  eeb00a48          VMOV.F32 s0,s16
000018  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController10Height2RadEf ; Anki::Cozmo::LiftController::Height2Rad(float)
00001c  ed840a0c          VSTR     s0,[r4,#0x30]
;;;291          }
000020  ecbd8b02          VPOP     {d8}
000024  bd10              POP      {r4,pc}
;;;292          
                          ENDP

000026  0000              DCW      0x0000
                  |L20.40|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController23StartCalibrationRoutineEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController23StartCalibrationRoutineEv PROC ; Anki::Cozmo::LiftController::StartCalibrationRoutine()
;;;180          
;;;181          void StartCalibrationRoutine()
000000  b510              PUSH     {r4,lr}
;;;182          {
;;;183            PRINT("Starting Lift calibration\n");
000002  a009              ADR      r0,|L21.40|
000004  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
000008  490e              LDR      r1,|L21.68|
00000a  eef50a00          VMOV.F32 s1,#0.25000000
00000e  2000              MOVS     r0,#0
000010  7048              STRB     r0,[r1,#1]
000012  e8bd4010          POP      {r4,lr}
;;;184            
;;;185    #ifdef SIMULATOR
;;;186            // Skipping actual calibration routine in sim due to weird lift behavior when attempting to move it when
;;;187            // it's at the joint limit.  The arm flies off the robot!
;;;188            ResetAnglePosition(LIFT_ANGLE_LOW_LIMIT);
;;;189            desiredHeight_ = LIFT_HEIGHT_LOWDOCK;
;;;190    #else
;;;191            
;;;192    #if(RECALIBRATE_AT_LIMITS)
;;;193            SetDesiredHeight(LIFT_HEIGHT_LOWDOCK);
000016  eeb30a07          VMOV.F32 s0,#23.00000000
00001a  eef01a60          VMOV.F32 s3,s1
00001e  eeb01a60          VMOV.F32 s2,s1
000022  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff ; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
;;;194    #else
;;;195            calState_ = LCS_LOWER_LIFT;
;;;196            isCalibrated_ = false;
;;;197    #endif
;;;198            
;;;199    #endif
;;;200          }
;;;201          
                          ENDP

000026  0000              DCW      0x0000
                  |L21.40|
000028  53746172          DCB      "Starting Lift calibration\n",0
00002c  74696e67
000030  204c6966
000034  74206361
000038  6c696272
00003c  6174696f
000040  6e0a00  
000043  00                DCB      0
                  |L21.68|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController24GetLastCommandedHeightMMEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController24GetLastCommandedHeightMMEv PROC ; Anki::Cozmo::LiftController::GetLastCommandedHeightMM()
;;;265    
;;;266          f32 GetLastCommandedHeightMM()
000000  4801              LDR      r0,|L22.8|
;;;267          {
;;;268            return desiredHeight_;
000002  ed900a06          VLDR     s0,[r0,#0x18]
;;;269          }
000006  4770              BX       lr
;;;270          
                          ENDP

                  |L22.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController24PoseAndSpeedFilterUpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController24PoseAndSpeedFilterUpdateEv PROC ; Anki::Cozmo::LiftController::PoseAndSpeedFilterUpdate()
;;;317          
;;;318          void PoseAndSpeedFilterUpdate()
000000  b510              PUSH     {r4,lr}
;;;319          {
;;;320            // Get encoder speed measurements
;;;321            f32 measuredSpeed = Cozmo::HAL::MotorGetSpeed(HAL::MOTOR_LIFT);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
;;;322            
;;;323            radSpeed_ = (measuredSpeed *
000008  eddf0a0e          VLDR     s1,|L23.68|
00000c  4c0e              LDR      r4,|L23.72|
00000e  ed9f1a0f          VLDR     s2,|L23.76|
000012  ee200a20          VMUL.F32 s0,s0,s1
000016  edd40a0e          VLDR     s1,[r4,#0x38]
;;;324                         (1.0f - SPEED_FILTERING_COEFF) +
;;;325                         (radSpeed_ * SPEED_FILTERING_COEFF));
;;;326            
;;;327            // Update position
;;;328            currentAngle_ += (HAL::MotorGetPosition(HAL::MOTOR_LIFT) - prevHalPos_);
00001a  2002              MOVS     r0,#2
00001c  ee000a81          VMLA.F32 s0,s1,s2              ;323
000020  ed840a0e          VSTR     s0,[r4,#0x38]         ;323
000024  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000028  edd40a0a          VLDR     s1,[r4,#0x28]
00002c  f1040078          ADD      r0,r4,#0x78
000030  ee300a60          VSUB.F32 s0,s0,s1
000034  f7fffffe          BL       _ZN4Anki7RadianspLEf ; Anki::Radians::operator +=(float)
;;;329            
;;;330    #if(DEBUG_LIFT_CONTROLLER)
;;;331            PRINT("LIFT FILT: speed %f, speedFilt %f, currentAngle %f, currHalPos %f, prevPos %f, pwr %f\n",
;;;332                  measuredSpeed, radSpeed_, currentAngle_.ToFloat(), HAL::MotorGetPosition(HAL::MOTOR_LIFT), prevHalPos_, power_);
;;;333    #endif
;;;334            prevHalPos_ = HAL::MotorGetPosition(HAL::MOTOR_LIFT);
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
00003e  ed840a0a          VSTR     s0,[r4,#0x28]
;;;335          }
000042  bd10              POP      {r4,pc}
;;;336          
                          ENDP

                  |L23.68|
000044  3dccccd0          DCFS     0x3dccccd0 ; 0.10000002384185791
                  |L23.72|
                          DCD      ||.data||
                  |L23.76|
00004c  3f666666          DCFS     0x3f666666 ; 0.89999997615814209

                          AREA ||i._ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff PROC ; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
;;;396    
;;;397          static void SetDesiredHeight_internal(f32 height_mm, f32 acc_start_frac, f32 acc_end_frac, f32 duration_seconds)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;398          {
;;;399            
;;;400            // Do range check on height
;;;401            const f32 newDesiredHeight = CLIP(height_mm, LIFT_HEIGHT_LOWDOCK, LIFT_HEIGHT_CARRY);
000004  ee100a10          VMOV     r0,s0
000008  ed2d8b06          VPUSH    {d8-d10}              ;398
00000c  b08b              SUB      sp,sp,#0x2c           ;398
00000e  eeb08a61          VMOV.F32 s16,s3                ;398
000012  eef09a41          VMOV.F32 s19,s2                ;398
000016  4e64              LDR      r6,|L24.424|
000018  eeb0aa60          VMOV.F32 s20,s1                ;398
00001c  42b0              CMP      r0,r6
00001e  bfcc              ITE      GT
000020  eef00a40          VMOVGT.F32 s1,s0
000024  eef30a07          VMOVLE.F32 s1,#23.00000000
000028  ee100a90          VMOV     r0,s1
00002c  4f5f              LDR      r7,|L24.428|
00002e  42b8              CMP      r0,r7
000030  bfa8              IT       GE
000032  ed9f0a5f          VLDRGE   s0,|L24.432|
000036  da05              BGE      |L24.68|
000038  ee100a10          VMOV     r0,s0
00003c  42b0              CMP      r0,r6
00003e  bfd8              IT       LE
000040  eeb30a07          VMOVLE.F32 s0,#23.00000000
                  |L24.68|
;;;402            
;;;403    #ifdef SIMULATOR
;;;404            if(!HAL::IsGripperEngaged()) {
;;;405              // If the new desired height will make the lift move upward, turn on
;;;406              // the gripper's locking mechanism so that we might pick up a block as
;;;407              // it goes up
;;;408              if(newDesiredHeight > desiredHeight_) {
;;;409                HAL::EngageGripper();
;;;410              }
;;;411            }
;;;412            else {
;;;413              // If we're moving the lift down and the end goal is at low-place or
;;;414              // high-place height, disengage the gripper when we get there
;;;415              if(newDesiredHeight < desiredHeight_ &&
;;;416                 (newDesiredHeight == LIFT_HEIGHT_LOWDOCK ||
;;;417                  newDesiredHeight == LIFT_HEIGHT_HIGHDOCK))
;;;418              {
;;;419                disengageGripperAtDest_ = true;
;;;420                disengageAtAngle_ = Height2Rad(newDesiredHeight + 3.f*LIFT_FINGER_HEIGHT);
;;;421              }
;;;422              else {
;;;423                disengageGripperAtDest_ = false;
;;;424              }
;;;425            }
;;;426    #endif
;;;427            
;;;428            desiredHeight_ = newDesiredHeight;
000044  4c5b              LDR      r4,|L24.436|
000046  ed840a06          VSTR     s0,[r4,#0x18]
;;;429            
;;;430            // Convert desired height into the necessary angle:
;;;431    #if(DEBUG_LIFT_CONTROLLER)
;;;432            PRINT("LIFT DESIRED HEIGHT: %f mm (curr height %f mm), duration = %f s\n", desiredHeight_, GetHeightMM(), duration_seconds);
;;;433    #endif
;;;434            
;;;435            
;;;436            desiredAngle_ = Height2Rad(desiredHeight_);
00004a  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController10Height2RadEf ; Anki::Cozmo::LiftController::Height2Rad(float)
00004e  f1040080          ADD      r0,r4,#0x80
000052  f7fffffe          BL       _ZN4Anki7RadiansaSEf ; Anki::Radians::operator =(float)
000056  f1040580          ADD      r5,r4,#0x80
00005a  f1040078          ADD      r0,r4,#0x78
00005e  ed950a00          VLDR     s0,[r5,#0]
000062  edd08a00          VLDR     s17,[r0,#0]
;;;437            angleError_ = desiredAngle_.ToFloat() - currentAngle_.ToFloat();
000066  ee300a68          VSUB.F32 s0,s0,s17
00006a  ed840a09          VSTR     s0,[r4,#0x24]
;;;438            
;;;439            f32 startRadSpeed = radSpeed_;
;;;440            f32 startRad = currentAngle_.ToFloat();
;;;441            if (!inPosition_) {
00006e  7820              LDRB     r0,[r4,#0]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b911inPosition_E
000070  ed949a0e          VLDR     s18,[r4,#0x38]        ;439
000074  2800              CMP      r0,#0
;;;442              startRadSpeed = currDesiredRadVel_;
000076  bf07              ITTEE    EQ
000078  ed949a08          VLDREQ   s18,[r4,#0x20]
;;;443              startRad = currDesiredAngle_;
00007c  edd48a07          VLDREQ   s17,[r4,#0x1c]
;;;444            } else {
;;;445              angleErrorSum_ = 0.f;
000080  ed9f0a4d          VLDRNE   s0,|L24.440|
000084  ed840a04          VSTRNE   s0,[r4,#0x10]
;;;446            }
;;;447            
;;;448            lastLiftMovedTime_us = HAL::GetMicroCounter();
000088  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
;;;449            limitingDetected_ = false;
00008c  65e0              STR      r0,[r4,#0x5c]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b920lastLiftMovedTime_usE
00008e  2000              MOVS     r0,#0
000090  70e0              STRB     r0,[r4,#3]
;;;450            limitingExpected_ = false;
000092  7120              STRB     r0,[r4,#4]
;;;451            inPosition_ = false;
000094  7020              STRB     r0,[r4,#0]
;;;452            calibPending_ = false;
000096  71a0              STRB     r0,[r4,#6]
;;;453            
;;;454            if (FLT_NEAR(angleError_,0.f)) {
000098  4948              LDR      r1,|L24.444|
00009a  6a60              LDR      r0,[r4,#0x24]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b911angleError_E
00009c  4288              CMP      r0,r1
00009e  d20a              BCS      |L24.182|
0000a0  4947              LDR      r1,|L24.448|
0000a2  4288              CMP      r0,r1
;;;455              inPosition_ = true;
0000a4  bfbf              ITTTT    LT
0000a6  2001              MOVLT    r0,#1
0000a8  7020              STRBLT   r0,[r4,#0]
;;;456    #if(DEBUG_LIFT_CONTROLLER)
;;;457              PRINT("Lift: Already at desired position\n");
;;;458    #endif
;;;459              return;
;;;460            }
;;;461            
;;;462            
;;;463    #if(RECALIBRATE_AT_LIMITS)
;;;464            // Adjust approach speed to be a little faster if desired height is at a limit.
;;;465            approachSpeedRad_ = (desiredHeight_ == LIFT_HEIGHT_LOWDOCK || desiredHeight_ == LIFT_HEIGHT_CARRY) ? 0.5 : 0.2;
;;;466    #endif
;;;467    
;;;468            bool res = vpg_.StartProfile_fixedDuration(startRad, startRadSpeed, acc_start_frac*duration_seconds,
;;;469                                                       desiredAngle_.ToFloat(), acc_end_frac*duration_seconds,
;;;470                                                       MAX_LIFT_SPEED_RAD_PER_S,
;;;471                                                       MAX_LIFT_ACCEL_RAD_PER_S2,
;;;472                                                       duration_seconds,
;;;473                                                       CONTROL_DT);
;;;474            
;;;475            if (!res) {
;;;476              PRINT("FAIL: LIFT VPG (fixedDuration): startVel %f, startPos %f, acc_start_frac %f, acc_end_frac %f, endPos %f, duration %f. Trying VPG without fixed duration.\n",
;;;477                    startRadSpeed, startRad, acc_start_frac, acc_end_frac, desiredAngle_.ToFloat(), duration_seconds);
;;;478              
;;;479              vpg_.StartProfile(startRadSpeed, startRad,
;;;480                                maxSpeedRad_, accelRad_,
;;;481                                approachSpeedRad_, desiredAngle_.ToFloat(),
;;;482                                CONTROL_DT);
;;;483            }
;;;484            
;;;485    #if(DEBUG_HEAD_CONTROLLER)
;;;486            PRINT("LIFT VPG (fixedDuration): startVel %f, startPos %f, acc_start_frac %f, acc_end_frac %f, endPos %f, duration %f\n",
;;;487                  startRadSpeed, startRad, acc_start_frac, acc_end_frac, desiredAngle_.ToFloat(), duration_seconds);
;;;488    #endif
;;;489          } // SetDesiredHeight_internal
0000aa  b00b              ADDLT    sp,sp,#0x2c
0000ac  ecbd8b06          VPOPLT   {d8-d10}
0000b0  bfb8              IT       LT
0000b2  e8bd8ff0          POPLT    {r4-r11,pc}
                  |L24.182|
0000b6  69a0              LDR      r0,[r4,#0x18]         ;465  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b914desiredHeight_E
0000b8  42b0              CMP      r0,r6                 ;465
0000ba  bf16              ITET     NE                    ;465
0000bc  42b8              CMPNE    r0,r7                 ;465
0000be  ed9f0b42          VLDREQ   d0,|L24.456|
0000c2  ed9f0b43          VLDRNE   d0,|L24.464|
0000c6  ec510b10          VMOV     r0,r1,d0              ;465
0000ca  f7fffffe          BL       __aeabi_d2f
0000ce  4939              LDR      r1,|L24.436|
0000d0  ee292a88          VMUL.F32 s4,s19,s16            ;468
0000d4  ee2a1a08          VMUL.F32 s2,s20,s16            ;468
0000d8  6348              STR      r0,[r1,#0x34]         ;468  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b917approachSpeedRad_E
0000da  edd51a00          VLDR     s3,[r5,#0]            ;468
0000de  eddfaa3e          VLDR     s21,|L24.472|
0000e2  eef03a48          VMOV.F32 s7,s16                ;468
0000e6  ed9f3a3d          VLDR     s6,|L24.476|
0000ea  eeb04a6a          VMOV.F32 s8,s21                ;468
0000ee  eddf2a3c          VLDR     s5,|L24.480|
0000f2  eef00a49          VMOV.F32 s1,s18                ;468
0000f6  eeb00a68          VMOV.F32 s0,s17                ;468
0000fa  483a              LDR      r0,|L24.484|
0000fc  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator26StartProfile_fixedDurationEfffffffff ; Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
000100  2800              CMP      r0,#0                 ;475
000102  d149              BNE      |L24.408|
000104  ee180a10          VMOV     r0,s16                ;476
000108  f7fffffe          BL       __aeabi_f2d
00010c  4682              MOV      r10,r0                ;476
00010e  4836              LDR      r0,|L24.488|
000110  468b              MOV      r11,r1                ;476
000112  6800              LDR      r0,[r0,#0]            ;476
000114  f7fffffe          BL       __aeabi_f2d
000118  4606              MOV      r6,r0                 ;476
00011a  460f              MOV      r7,r1                 ;476
00011c  ee190a90          VMOV     r0,s19                ;476
000120  f7fffffe          BL       __aeabi_f2d
000124  4604              MOV      r4,r0                 ;476
000126  460d              MOV      r5,r1                 ;476
000128  ee1a0a10          VMOV     r0,s20                ;476
00012c  f7fffffe          BL       __aeabi_f2d
000130  e9cd0100          STRD     r0,r1,[sp,#0]         ;476
000134  ee180a90          VMOV     r0,s17                ;476
000138  f7fffffe          BL       __aeabi_f2d
00013c  4680              MOV      r8,r0                 ;476
00013e  4689              MOV      r9,r1                 ;476
000140  ee190a10          VMOV     r0,s18                ;476
000144  f7fffffe          BL       __aeabi_f2d
000148  ec410b10          VMOV     d0,r0,r1              ;476
00014c  a804              ADD      r0,sp,#0x10           ;476
00014e  ec532b10          VMOV     r2,r3,d0              ;476
000152  e8800cf0          STM      r0,{r4-r7,r10,r11}    ;476
000156  e9dd0100          LDRD     r0,r1,[sp,#0]         ;476
00015a  e9cd0102          STRD     r0,r1,[sp,#8]         ;476
00015e  4823              LDR      r0,|L24.492|
000160  e9cd8900          STRD     r8,r9,[sp,#0]         ;476
000164  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
000168  481f              LDR      r0,|L24.488|
00016a  eeb03a6a          VMOV.F32 s6,s21                ;479
00016e  eef00a68          VMOV.F32 s1,s17                ;479
000172  edd02a00          VLDR     s5,[r0,#0]            ;479
000176  3880              SUBS     r0,r0,#0x80           ;479
000178  eeb00a49          VMOV.F32 s0,s18                ;479
00017c  ed902a0d          VLDR     s4,[r0,#0x34]         ;479
000180  edd01a0c          VLDR     s3,[r0,#0x30]         ;479
000184  ed901a0b          VLDR     s2,[r0,#0x2c]         ;479
000188  b00b              ADD      sp,sp,#0x2c           ;479
00018a  4816              LDR      r0,|L24.484|
00018c  ecbd8b06          VPOP     {d8-d10}              ;479
000190  e8bd4ff0          POP      {r4-r11,lr}           ;479
000194  f7ffbffe          B.W      _ZN4Anki24VelocityProfileGenerator12StartProfileEfffffff ; Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
                  |L24.408|
000198  b00b              ADD      sp,sp,#0x2c
00019a  ecbd8b06          VPOP     {d8-d10}
00019e  e8bd8ff0          POP      {r4-r11,pc}
;;;490    
                          ENDP

0001a2  0000              DCW      0x0000
                          DCD      0x00000000
                  |L24.424|
                          DCD      0x41b80000
                  |L24.428|
                          DCD      0x42be0000
                  |L24.432|
0001b0  42be0000          DCFS     0x42be0000 ; 95
                  |L24.436|
                          DCD      ||.data||
                  |L24.440|
0001b8  00000000          DCFS     0x00000000 ; 0
                  |L24.444|
                          DCD      0xb727c5ac
                  |L24.448|
                          DCD      0x3727c5ac
                          DCD      0x00000000
                  |L24.456|
0001c8  00000000          DCFD     0x3fe0000000000000 ; 0.5
0001cc  3fe00000
                  |L24.464|
0001d0  9999999a          DCFD     0x3fc999999999999a ; 0.20000000000000001
0001d4  3fc99999
                  |L24.472|
0001d8  3ba3d70b          DCFS     0x3ba3d70b ; 0.0050000003539025784
                  |L24.476|
0001dc  461c4000          DCFS     0x461c4000 ; 10000
                  |L24.480|
0001e0  447a0000          DCFS     0x447a0000 ; 1000
                  |L24.484|
                          DCD      ||.bss||
                  |L24.488|
                          DCD      ||.data||+0x80
                  |L24.492|
                          DCD      ||.conststring||

                          AREA ||i._ZN4Anki5Cozmo14LiftController4InitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController4InitEv PROC ; Anki::Cozmo::LiftController::Init()
;;;151          
;;;152          Result Init()
000000  b510              PUSH     {r4,lr}
;;;153          {
;;;154            // Init consts
;;;155            LIFT_ANGLE_LOW_LIMIT = Height2Rad(LIFT_HEIGHT_LOWDOCK);
000002  eeb30a07          VMOV.F32 s0,#23.00000000
000006  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController10Height2RadEf ; Anki::Cozmo::LiftController::Height2Rad(float)
00000a  4c08              LDR      r4,|L25.44|
00000c  ed840a19          VSTR     s0,[r4,#0x64]
;;;156            LIFT_ANGLE_HIGH_LIMIT = Height2Rad(LIFT_HEIGHT_CARRY);
000010  ed9f0a07          VLDR     s0,|L25.48|
000014  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController10Height2RadEf ; Anki::Cozmo::LiftController::Height2Rad(float)
000018  ed840a1a          VSTR     s0,[r4,#0x68]
;;;157            LIFT_ANGLE_HIGH_DOCK = Height2Rad(LIFT_HEIGHT_HIGHDOCK);
00001c  ed9f0a05          VLDR     s0,|L25.52|
000020  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController10Height2RadEf ; Anki::Cozmo::LiftController::Height2Rad(float)
000024  ed840a1b          VSTR     s0,[r4,#0x6c]
;;;158            return RESULT_OK;
000028  2000              MOVS     r0,#0
;;;159          }
00002a  bd10              POP      {r4,pc}
;;;160          
                          ENDP

                  |L25.44|
                          DCD      ||.data||
                  |L25.48|
000030  42be0000          DCFS     0x42be0000 ; 95
                  |L25.52|
000034  42960000          DCFS     0x42960000 ; 75

                          AREA ||i._ZN4Anki5Cozmo14LiftController4StopEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController4StopEv PROC ; Anki::Cozmo::LiftController::Stop()
;;;664          
;;;665          void Stop()
000000  4903              LDR      r1,|L26.16|
;;;666          {
;;;667            isNodding_ = false;
000002  2000              MOVS     r0,#0
;;;668            SetAngularVelocity(0);
000004  ed9f0a03          VLDR     s0,|L26.20|
000008  7048              STRB     r0,[r1,#1]            ;667
00000a  f7ffbffe          B.W      _ZN4Anki5Cozmo14LiftController18SetAngularVelocityEf ; Anki::Cozmo::LiftController::SetAngularVelocity(float)
;;;669          }
;;;670          
                          ENDP

00000e  0000              DCW      0x0000
                  |L26.16|
                          DCD      ||.data||
                  |L26.20|
000014  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki5Cozmo14LiftController6EnableEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController6EnableEv PROC ; Anki::Cozmo::LiftController::Enable()
;;;161          
;;;162          void Enable()
000000  4901              LDR      r1,|L27.8|
;;;163          {
;;;164            enable_ = true;
000002  2001              MOVS     r0,#1
000004  71c8              STRB     r0,[r1,#7]
;;;165          }
000006  4770              BX       lr
;;;166          
                          ENDP

                  |L27.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController6UpdateEv||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo14LiftController6UpdateEv PROC ; Anki::Cozmo::LiftController::Update()
;;;507          
;;;508          Result Update()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;509          {
000004  2002              MOVS     r0,#2
000006  ed2d8b02          VPUSH    {d8}
00000a  b08c              SUB      sp,sp,#0x30
00000c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
000010  eddf0abb          VLDR     s1,|L28.768|
000014  4cbb              LDR      r4,|L28.772|
000016  ee200a20          VMUL.F32 s0,s0,s1
00001a  edd40a0e          VLDR     s1,[r4,#0x38]
00001e  ed9f1aba          VLDR     s2,|L28.776|
000022  2002              MOVS     r0,#2
000024  ee000a81          VMLA.F32 s0,s1,s2
000028  ed840a0e          VSTR     s0,[r4,#0x38]
00002c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000030  edd40a0a          VLDR     s1,[r4,#0x28]
000034  f1040078          ADD      r0,r4,#0x78
000038  ee300a60          VSUB.F32 s0,s0,s1
00003c  f7fffffe          BL       _ZN4Anki7RadianspLEf ; Anki::Radians::operator +=(float)
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000046  ed840a0a          VSTR     s0,[r4,#0x28]
;;;510    #if (!defined(SIMULATOR) && (RECALIBRATE_AT_LIMITS == 0))
;;;511            // Update routine for calibration sequence
;;;512            CalibrationUpdate();
;;;513    #endif
;;;514            
;;;515            PoseAndSpeedFilterUpdate();
;;;516            
;;;517            LimitDetectUpdate();
00004a  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController17LimitDetectUpdateEv ; Anki::Cozmo::LiftController::LimitDetectUpdate()
;;;518            
;;;519            // If disabled, do not activate motors
;;;520            if(!enable_) {
00004e  79e0              LDRB     r0,[r4,#7]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b97enable_E
000050  2800              CMP      r0,#0
;;;521              return RESULT_OK;
;;;522            }
;;;523            
;;;524    #if SIMULATOR
;;;525            if (disengageGripperAtDest_ && currentAngle_.ToFloat() < disengageAtAngle_) {
;;;526              HAL::DisengageGripper();
;;;527              disengageGripperAtDest_ = false;
;;;528            }
;;;529    #endif
;;;530            
;;;531            if(not inPosition_) {
;;;532              
;;;533              if (!limitingExpected_) {
;;;534                // Get the current desired lift angle
;;;535                vpg_.Step(currDesiredRadVel_, currDesiredAngle_);
;;;536                
;;;537                // Compute position error
;;;538                angleError_ = currDesiredAngle_ - currentAngle_.ToFloat();
;;;539                
;;;540    
;;;541                
;;;542                // Open loop value to drive at desired speed
;;;543                power_ = currDesiredRadVel_ * SPEED_TO_POWER_OL_GAIN;
;;;544                
;;;545                // Compute corrective value
;;;546                f32 power_corr = (Kp_ * angleError_) + (Ki_ * angleErrorSum_);
;;;547                
;;;548                // Add base power in the direction of the general desired direction
;;;549                //power_ += power_corr + ((power_corr > 0) ? BASE_POWER_UP : BASE_POWER_DOWN);
;;;550                power_ += power_corr + ((power_ > 0) ? BASE_POWER_UP : BASE_POWER_DOWN);
;;;551                
;;;552                // Update angle error sum
;;;553                angleErrorSum_ += angleError_;
;;;554                angleErrorSum_ = CLIP(angleErrorSum_, -MAX_ERROR_SUM, MAX_ERROR_SUM);
;;;555              }
;;;556              
;;;557    #if(RECALIBRATE_AT_LIMITS)
;;;558              if (!isCalibrated_) {
;;;559                power_ = -LIMIT_APPROACH_POWER;
;;;560              }
;;;561              if (IsLimiting(&calibAngle_)) {
;;;562                power_ = 0.f;
;;;563                calibPending_ = true;
;;;564                inPosition_ = true;
;;;565    
;;;566    #if(DEBUG_LIFT_CONTROLLER)
;;;567                PRINT(" Lift limit detected. Will reset to angle %f\n", calibAngle_);
;;;568    #endif
;;;569                
;;;570              } else if (desiredAngle_.ToFloat() == LIFT_ANGLE_LOW_LIMIT || desiredAngle_.ToFloat() == LIFT_ANGLE_HIGH_LIMIT) {
;;;571                // Once desired angle is reached, continue to command a power to drive the lift to the limit.
;;;572                // We then rely on limit detection to trigger recalibration.
;;;573                if (!limitingExpected_) {
;;;574                  if (currDesiredAngle_ == LIFT_ANGLE_LOW_LIMIT) {
;;;575                    //power_ = MIN(-MIN_LIMIT_APPROACH_POWER, power_);
;;;576                    power_ = -LIMIT_APPROACH_POWER;
;;;577                    limitingExpected_ = true;
;;;578    #if(DEBUG_LIFT_CONTROLLER)
;;;579                    PRINT(" Lift low limit reached. (power %f)\n", power_);
;;;580    #endif
;;;581                  } else if (currDesiredAngle_ == LIFT_ANGLE_HIGH_LIMIT) {
;;;582                    //power_ = MAX(MIN_LIMIT_APPROACH_POWER, power_);
;;;583                    power_ = LIMIT_APPROACH_POWER;
;;;584                    limitingExpected_ = true;
;;;585    #if(DEBUG_LIFT_CONTROLLER)
;;;586                    PRINT(" Lift high limit reached. (power %f)\n", power_);
;;;587    #endif
;;;588                  }
;;;589                }
;;;590                
;;;591              } else
;;;592    #endif // #if(RECALIBRATE_AT_LOW_HEIGHT)
;;;593              
;;;594              // If accurately tracking current desired angle...
;;;595              if((ABS(angleError_) < ANGLE_TOLERANCE && desiredAngle_ == currDesiredAngle_)
;;;596                 || ABS(currentAngle_ - desiredAngle_) < ANGLE_TOLERANCE) {
;;;597                  power_ = 0.f;
;;;598                  inPosition_ = true;
;;;599                /*
;;;600    #ifdef SIMULATOR
;;;601                  if (disengageGripperAtDest_) {
;;;602                    HAL::DisengageGripper();
;;;603                    disengageGripperAtDest_ = false;
;;;604                  }
;;;605    #endif
;;;606                 */
;;;607                  #if(DEBUG_LIFT_CONTROLLER)
;;;608                  PRINT(" LIFT HEIGHT REACHED (%f mm)\n", GetHeightMM());
;;;609                  #endif
;;;610              }
;;;611              
;;;612              
;;;613    #if(DEBUG_LIFT_CONTROLLER)
;;;614              PERIODIC_PRINT(100, "LIFT: currA %f, curDesA %f, currVel %f, curDesVel %f, desA %f, err %f, errSum %f, pwr %f\n",
;;;615                             currentAngle_.ToFloat(),
;;;616                             currDesiredAngle_,
;;;617                             radSpeed_,
;;;618                             currDesiredRadVel_,
;;;619                             desiredAngle_.ToFloat(),
;;;620                             angleError_,
;;;621                             angleErrorSum_,
;;;622                             power_);
;;;623              PERIODIC_PRINT(100, "  POWER terms: %f  %f\n", (Kp_ * angleError_), (Ki_ * angleErrorSum_))
;;;624    #endif
;;;625              
;;;626              power_ = CLIP(power_, -1.0, 1.0);
;;;627              HAL::MotorSetPower(HAL::MOTOR_LIFT, power_);
;;;628              
;;;629            } // if not in position
;;;630            else if(isNodding_)
;;;631            {
;;;632              // Note that this is inside else(not inPosition), so we must be
;;;633              // inPosition if we get here.
;;;634              if (GetLastCommandedHeightMM() == nodHighHeight_) {
;;;635                SetDesiredHeight_internal(nodLowHeight_, nodEaseOutFraction_, nodEaseInFraction_, nodHalfPeriod_sec_);
;;;636              } else if (GetLastCommandedHeightMM() == nodLowHeight_) {
;;;637                SetDesiredHeight_internal(nodHighHeight_, nodEaseOutFraction_, nodEaseInFraction_, nodHalfPeriod_sec_);
;;;638                ++numNodsComplete_;
;;;639                if(numNodsDesired_ > 0 && numNodsComplete_ >= numNodsDesired_) {
;;;640                  StopNodding();
;;;641                }
;;;642              }
;;;643            } // else if isNodding
;;;644            
;;;645            
;;;646            if (IsRelaxed() && calibPending_) {
;;;647    #if(DEBUG_LIFT_CONTROLLER)
;;;648              PRINT("RECALIBRATING LIFT\n");
;;;649    #endif
;;;650              ResetAnglePosition(calibAngle_);
;;;651              calibPending_ = false;
;;;652            }
;;;653          
;;;654          
;;;655            return RESULT_OK;
;;;656          }
000052  bf02              ITTT     EQ
000054  b00c              ADDEQ    sp,sp,#0x30
000056  ecbd8b02          VPOPEQ   {d8}
00005a  e8bd81f0          POPEQ    {r4-r8,pc}
00005e  7820              LDRB     r0,[r4,#0]            ;531  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b911inPosition_E
000060  2501              MOVS     r5,#1                 ;563
000062  2600              MOVS     r6,#0                 ;563
000064  b1c8              CBZ      r0,|L28.154|
000066  7860              LDRB     r0,[r4,#1]            ;630  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b910isNodding_E
000068  2800              CMP      r0,#0                 ;630
00006a  f0008130          BEQ.W    |L28.718|
00006e  edd40a06          VLDR     s1,[r4,#0x18]         ;630
000072  ed940a11          VLDR     s0,[r4,#0x44]         ;634
000076  eef40a40          VCMP.F32 s1,s0                 ;634
00007a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;634
00007e  f040810e          BNE.W    |L28.670|
000082  edd41a16          VLDR     s3,[r4,#0x58]         ;635
000086  ed941a14          VLDR     s2,[r4,#0x50]         ;635
00008a  edd40a15          VLDR     s1,[r4,#0x54]         ;635
00008e  ed940a10          VLDR     s0,[r4,#0x40]         ;635
000092  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff ; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
000096  f000b91a          B.W      |L28.718|
                  |L28.154|
00009a  7920              LDRB     r0,[r4,#4]            ;533  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b917limitingExpected_E
00009c  2800              CMP      r0,#0                 ;533
00009e  d150              BNE      |L28.322|
0000a0  4a9a              LDR      r2,|L28.780|
0000a2  489b              LDR      r0,|L28.784|
0000a4  1d11              ADDS     r1,r2,#4              ;535
0000a6  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator4StepERfS1_ ; Anki::VelocityProfileGenerator::Step(float&, float&)
0000aa  489a              LDR      r0,|L28.788|
0000ac  edd40a07          VLDR     s1,[r4,#0x1c]         ;538
0000b0  ed900a00          VLDR     s0,[r0,#0]            ;538
0000b4  ee300ac0          VSUB.F32 s0,s1,s0              ;538
0000b8  ed840a09          VSTR     s0,[r4,#0x24]         ;538
0000bc  edd40a08          VLDR     s1,[r4,#0x20]         ;543
0000c0  ed9f1a95          VLDR     s2,|L28.792|
0000c4  ee600a81          VMUL.F32 s1,s1,s2              ;543
0000c8  edc40a0f          VSTR     s1,[r4,#0x3c]         ;543
0000cc  ed941a02          VLDR     s2,[r4,#8]            ;546
0000d0  edd41a03          VLDR     s3,[r4,#0xc]          ;546
0000d4  eef50ac0          VCMPE.F32 s1,#0.0               ;550
0000d8  ee212a00          VMUL.F32 s4,s2,s0              ;546
0000dc  ed941a04          VLDR     s2,[r4,#0x10]         ;546
0000e0  ee012a81          VMLA.F32 s4,s3,s2              ;546
0000e4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;550
0000e8  bfcc              ITE      GT                    ;550
0000ea  eddf1a8c          VLDRGT   s3,|L28.796|
0000ee  eddf1a8c          VLDRLE   s3,|L28.800|
0000f2  ee711a82          VADD.F32 s3,s3,s4              ;550
0000f6  ee710aa0          VADD.F32 s1,s3,s1              ;550
0000fa  edc40a0f          VSTR     s1,[r4,#0x3c]         ;550
0000fe  ee710a00          VADD.F32 s1,s2,s0              ;553
000102  edc40a04          VSTR     s1,[r4,#0x10]         ;553
000106  ed941a05          VLDR     s2,[r4,#0x14]         ;554
00010a  eeb10a41          VNEG.F32 s0,s2                 ;554
00010e  eef40ac0          VCMPE.F32 s1,s0                 ;554
000112  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;554
000116  bfcc              ITE      GT                    ;554
000118  eef01a60          VMOVGT.F32 s3,s1                 ;554
00011c  eef01a40          VMOVLE.F32 s3,s0                 ;554
000120  eef41ac1          VCMPE.F32 s3,s2                 ;554
000124  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;554
000128  bf28              IT       CS                    ;554
00012a  eef00a41          VMOVCS.F32 s1,s2                 ;554
00012e  d206              BCS      |L28.318|
000130  eef40ac0          VCMPE.F32 s1,s0                 ;554
000134  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;554
000138  bfd8              IT       LE                    ;554
00013a  eef00a40          VMOVLE.F32 s1,s0                 ;554
                  |L28.318|
00013e  edc40a04          VSTR     s1,[r4,#0x10]         ;554
                  |L28.322|
000142  78a0              LDRB     r0,[r4,#2]            ;558  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b913isCalibrated_E
000144  eddf1a77          VLDR     s3,|L28.804|
000148  2800              CMP      r0,#0                 ;558
00014a  bf08              IT       EQ                    ;559
00014c  edc41a0f          VSTREQ   s3,[r4,#0x3c]         ;559
000150  4875              LDR      r0,|L28.808|
000152  78e1              LDRB     r1,[r4,#3]            ;561  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b917limitingDetected_E
000154  ed9f8a75          VLDR     s16,|L28.812|
000158  b181              CBZ      r1,|L28.380|
00015a  ed940a0f          VLDR     s0,[r4,#0x3c]         ;558
00015e  eeb50ac0          VCMPE.F32 s0,#0.0               ;558
000162  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;558
000166  bfd4              ITE      LE                    ;558
000168  edd40a19          VLDRLE   s1,[r4,#0x64]         ;558
00016c  edd40a1a          VLDRGT   s1,[r4,#0x68]         ;558
000170  edc00a00          VSTR     s1,[r0,#0]            ;558
000174  ed848a0f          VSTR     s16,[r4,#0x3c]        ;562
000178  71a5              STRB     r5,[r4,#6]            ;563
00017a  e06f              B        |L28.604|
                  |L28.380|
00017c  486c              LDR      r0,|L28.816|
00017e  ed941a19          VLDR     s2,[r4,#0x64]         ;570
000182  edd00a00          VLDR     s1,[r0,#0]            ;570
000186  eef40a41          VCMP.F32 s1,s2                 ;570
00018a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;570
00018e  bf1e              ITTT     NE                    ;570
000190  ed940a1a          VLDRNE   s0,[r4,#0x68]         ;570
000194  eef40a40          VCMPNE.F32 s1,s0                 ;570
000198  eef1fa10          VMRSNE   APSR_nzcv,FPSCR       ;570
00019c  d11a              BNE      |L28.468|
00019e  7920              LDRB     r0,[r4,#4]            ;573  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b917limitingExpected_E
0001a0  2800              CMP      r0,#0                 ;573
0001a2  d15c              BNE      |L28.606|
0001a4  ed940a07          VLDR     s0,[r4,#0x1c]         ;574
0001a8  eeb40a41          VCMP.F32 s0,s2                 ;574
0001ac  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;574
0001b0  bf08              IT       EQ                    ;576
0001b2  edc41a0f          VSTREQ   s3,[r4,#0x3c]         ;576
0001b6  d00b              BEQ      |L28.464|
0001b8  edd40a1a          VLDR     s1,[r4,#0x68]         ;581
0001bc  eeb40a60          VCMP.F32 s0,s1                 ;581
0001c0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;581
0001c4  bf04              ITT      EQ                    ;583
0001c6  ed9f0a5b          VLDREQ   s0,|L28.820|
0001ca  ed840a0f          VSTREQ   s0,[r4,#0x3c]         ;583
0001ce  d146              BNE      |L28.606|
                  |L28.464|
0001d0  7125              STRB     r5,[r4,#4]            ;577
0001d2  e044              B        |L28.606|
                  |L28.468|
0001d4  edd40a09          VLDR     s1,[r4,#0x24]         ;595
0001d8  eef50ac0          VCMPE.F32 s1,#0.0               ;595
0001dc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;595
0001e0  bfb8              IT       LT                    ;595
0001e2  eef10a60          VNEGLT.F32 s1,s1                 ;595
0001e6  ee100a90          VMOV     r0,s1                 ;595
0001ea  4953              LDR      r1,|L28.824|
0001ec  4288              CMP      r0,r1                 ;595
0001ee  da09              BGE      |L28.516|
0001f0  ed940a07          VLDR     s0,[r4,#0x1c]         ;595
0001f4  a806              ADD      r0,sp,#0x18           ;595
0001f6  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
0001fa  4601              MOV      r1,r0                 ;595
0001fc  484c              LDR      r0,|L28.816|
0001fe  f7fffffe          BL       _ZN4AnkieqERKNS_7RadiansES2_ ; Anki::operator ==(const Anki::Radians&, const Anki::Radians&)
000202  bb48              CBNZ     r0,|L28.600|
                  |L28.516|
000204  ed9f0a4d          VLDR     s0,|L28.828|
000208  a80a              ADD      r0,sp,#0x28           ;596
00020a  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
00020e  4607              MOV      r7,r0                 ;596
000210  eeb00a48          VMOV.F32 s0,s16                ;596
000214  a808              ADD      r0,sp,#0x20           ;596
000216  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
00021a  4a45              LDR      r2,|L28.816|
00021c  4680              MOV      r8,r0                 ;596
00021e  f1a20108          SUB      r1,r2,#8              ;596
000222  a802              ADD      r0,sp,#8              ;596
000224  f7fffffe          BL       _ZN4AnkimiERKNS_7RadiansES2_ ; Anki::operator -(const Anki::Radians&, const Anki::Radians&)
000228  4641              MOV      r1,r8                 ;596
00022a  a802              ADD      r0,sp,#8              ;596
00022c  f7fffffe          BL       _ZN4AnkigeERKNS_7RadiansES2_ ; Anki::operator >=(const Anki::Radians&, const Anki::Radians&)
000230  4a3f              LDR      r2,|L28.816|
000232  f1a20108          SUB      r1,r2,#8              ;596
000236  b118              CBZ      r0,|L28.576|
000238  4668              MOV      r0,sp                 ;596
00023a  f7fffffe          BL       _ZN4AnkimiERKNS_7RadiansES2_ ; Anki::operator -(const Anki::Radians&, const Anki::Radians&)
00023e  e006              B        |L28.590|
                  |L28.576|
000240  a804              ADD      r0,sp,#0x10           ;596
000242  f7fffffe          BL       _ZN4AnkimiERKNS_7RadiansES2_ ; Anki::operator -(const Anki::Radians&, const Anki::Radians&)
000246  a904              ADD      r1,sp,#0x10           ;596
000248  4668              MOV      r0,sp                 ;596
00024a  f7fffffe          BL       _ZNK4Anki7RadiansngEv ; Anki::Radians::operator -() const
                  |L28.590|
00024e  4639              MOV      r1,r7                 ;596
000250  4668              MOV      r0,sp                 ;596
000252  f7fffffe          BL       _ZN4AnkiltERKNS_7RadiansES2_ ; Anki::operator <(const Anki::Radians&, const Anki::Radians&)
000256  b110              CBZ      r0,|L28.606|
                  |L28.600|
000258  ed848a0f          VSTR     s16,[r4,#0x3c]        ;597
                  |L28.604|
00025c  7025              STRB     r5,[r4,#0]            ;564
                  |L28.606|
00025e  6be0              LDR      r0,[r4,#0x3c]         ;626  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b96power_E
000260  f1104f81          CMN      r0,#0x40800000        ;626
000264  d205              BCS      |L28.626|
000266  f1b05f7e          CMP      r0,#0x3f800000        ;626
00026a  bfa8              IT       GE                    ;626
00026c  ed9f0b34          VLDRGE   d0,|L28.832|
000270  da09              BGE      |L28.646|
                  |L28.626|
000272  f1104f81          CMN      r0,#0x40800000        ;626
000276  bf28              IT       CS                    ;626
000278  ed9f0b33          VLDRCS   d0,|L28.840|
00027c  d203              BCS      |L28.646|
00027e  f7fffffe          BL       __aeabi_f2d
000282  ec410b10          VMOV     d0,r0,r1              ;626
                  |L28.646|
000286  ec510b10          VMOV     r0,r1,d0              ;626
00028a  f7fffffe          BL       __aeabi_d2f
00028e  ee000a10          VMOV     s0,r0                 ;626
000292  2002              MOVS     r0,#2                 ;627
000294  ed840a0f          VSTR     s0,[r4,#0x3c]         ;626
000298  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf ; Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
00029c  e017              B        |L28.718|
                  |L28.670|
00029e  ed941a10          VLDR     s2,[r4,#0x40]         ;636
0002a2  eef40a41          VCMP.F32 s1,s2                 ;636
0002a6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;636
0002aa  d110              BNE      |L28.718|
0002ac  edd41a16          VLDR     s3,[r4,#0x58]         ;637
0002b0  ed941a14          VLDR     s2,[r4,#0x50]         ;637
0002b4  edd40a15          VLDR     s1,[r4,#0x54]         ;637
0002b8  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff ; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
0002bc  6ce0              LDR      r0,[r4,#0x4c]         ;638  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b916numNodsComplete_E
0002be  1c41              ADDS     r1,r0,#1              ;638
0002c0  64e1              STR      r1,[r4,#0x4c]         ;639  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b916numNodsComplete_E
0002c2  6ca0              LDR      r0,[r4,#0x48]         ;639  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b915numNodsDesired_E
0002c4  2800              CMP      r0,#0                 ;639
0002c6  dd02              BLE      |L28.718|
0002c8  4288              CMP      r0,r1                 ;639
0002ca  bfd8              IT       LE                    ;639
0002cc  7066              STRBLE   r6,[r4,#1]            ;639
                  |L28.718|
0002ce  7960              LDRB     r0,[r4,#5]            ;639  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b910isRelaxed_E
0002d0  79a1              LDRB     r1,[r4,#6]            ;646  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b913calibPending_E
0002d2  4208              TST      r0,r1                 ;646
0002d4  d00e              BEQ      |L28.756|
0002d6  ed940a1c          VLDR     s0,[r4,#0x70]         ;650
0002da  480e              LDR      r0,|L28.788|
0002dc  f7fffffe          BL       _ZN4Anki7RadiansaSEf ; Anki::Radians::operator =(float)
0002e0  2002              MOVS     r0,#2                 ;650
0002e2  f7fffffe          BL       _ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)
0002e6  2002              MOVS     r0,#2                 ;650
0002e8  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
0002ec  ed840a0a          VSTR     s0,[r4,#0x28]         ;650
0002f0  70a5              STRB     r5,[r4,#2]            ;650
0002f2  71a6              STRB     r6,[r4,#6]            ;651
                  |L28.756|
0002f4  b00c              ADD      sp,sp,#0x30
0002f6  2000              MOVS     r0,#0                 ;655
0002f8  ecbd8b02          VPOP     {d8}
0002fc  e8bd81f0          POP      {r4-r8,pc}
;;;657          
                          ENDP

                  |L28.768|
000300  3dccccd0          DCFS     0x3dccccd0 ; 0.10000002384185791
                  |L28.772|
                          DCD      ||.data||
                  |L28.776|
000308  3f666666          DCFS     0x3f666666 ; 0.89999997615814209
                  |L28.780|
                          DCD      ||.data||+0x1c
                  |L28.784|
                          DCD      ||.bss||
                  |L28.788|
                          DCD      ||.data||+0x78
                  |L28.792|
000318  3e75a858          DCFS     0x3e75a858 ; 0.23989999294281006
                  |L28.796|
00031c  3e060aa6          DCFS     0x3e060aa6 ; 0.13089999556541443
                  |L28.800|
000320  bda9c77a          DCFS     0xbda9c77a ; -0.082900002598762512
                  |L28.804|
000324  bf333333          DCFS     0xbf333333 ; -0.69999998807907104
                  |L28.808|
                          DCD      ||.data||+0x70
                  |L28.812|
00032c  00000000          DCFS     0x00000000 ; 0
                  |L28.816|
                          DCD      ||.data||+0x80
                  |L28.820|
000334  3f333333          DCFS     0x3f333333 ; 0.69999998807907104
                  |L28.824|
                          DCD      0x3c0efa35
                  |L28.828|
00033c  3c0efa35          DCFS     0x3c0efa35 ; 0.0087266461923718452
                  |L28.832|
000340  00000000          DCFD     0x3ff0000000000000 ; 1
000344  3ff00000
                  |L28.840|
000348  00000000          DCFD     0xbff0000000000000 ; -1
00034c  bff00000

                          AREA ||i._ZN4Anki5Cozmo14LiftController7DisableEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController7DisableEv PROC ; Anki::Cozmo::LiftController::Disable()
;;;166          
;;;167          void Disable()
000000  4901              LDR      r1,|L29.8|
;;;168          {
;;;169            enable_ = false;
000002  2000              MOVS     r0,#0
000004  71c8              STRB     r0,[r1,#7]
;;;170          }
000006  4770              BX       lr
;;;171          
                          ENDP

                  |L29.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController8IsMovingEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController8IsMovingEv PROC ; Anki::Cozmo::LiftController::IsMoving()
;;;207    
;;;208          bool IsMoving()
000000  4808              LDR      r0,|L30.36|
;;;209          {
;;;210            return (ABS(radSpeed_) > MAX_LIFT_CONSIDERED_STOPPED_RAD_PER_SEC);
000002  ed900a0e          VLDR     s0,[r0,#0x38]
000006  eeb50ac0          VCMPE.F32 s0,#0.0
00000a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000e  bfb8              IT       LT
000010  eeb10a40          VNEGLT.F32 s0,s0
000014  ee100a10          VMOV     r0,s0
000018  4903              LDR      r1,|L30.40|
00001a  4288              CMP      r0,r1
00001c  bfcc              ITE      GT
00001e  2001              MOVGT    r0,#1
000020  2000              MOVLE    r0,#0
;;;211          }
000022  4770              BX       lr
;;;212    
                          ENDP

                  |L30.36|
                          DCD      ||.data||
                  |L30.40|
                          DCD      0x3a83126f

                          AREA ||i._ZN4Anki5Cozmo14LiftController8SetGainsEfff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController8SetGainsEfff PROC ; Anki::Cozmo::LiftController::SetGains(float, float, float)
;;;657          
;;;658          void SetGains(const f32 kp, const f32 ki, const f32 maxIntegralError)
000000  4803              LDR      r0,|L31.16|
;;;659          {
;;;660            Kp_ = kp;
000002  ed800a02          VSTR     s0,[r0,#8]
;;;661            Ki_ = ki;
000006  edc00a03          VSTR     s1,[r0,#0xc]
;;;662            MAX_ERROR_SUM = maxIntegralError;
00000a  ed801a05          VSTR     s2,[r0,#0x14]
;;;663          }
00000e  4770              BX       lr
;;;664          
                          ENDP

                  |L31.16|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController9IsNoddingEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController9IsNoddingEv PROC ; Anki::Cozmo::LiftController::IsNodding()
;;;701          
;;;702          bool IsNodding()
000000  4801              LDR      r0,|L32.8|
;;;703          {
;;;704            return isNodding_;
000002  7840              LDRB     r0,[r0,#1]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b910isNodding_E
;;;705          }
000004  4770              BX       lr
;;;706          
                          ENDP

000006  0000              DCW      0x0000
                  |L32.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo14LiftController9IsRelaxedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController9IsRelaxedEv PROC ; Anki::Cozmo::LiftController::IsRelaxed()
;;;345          
;;;346          bool IsRelaxed()
000000  4801              LDR      r0,|L33.8|
;;;347          {
;;;348            return isRelaxed_;
000002  7940              LDRB     r0,[r0,#5]  ; _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b910isRelaxed_E
;;;349          }
000004  4770              BX       lr
;;;350          
                          ENDP

000006  0000              DCW      0x0000
                  |L33.8|
                          DCD      ||.data||

                          AREA ||i.__sti___18_liftController_cpp_265a82b9||, CODE, READONLY, ALIGN=2

                  __sti___18_liftController_cpp_265a82b9 PROC
000000  b510              PUSH     {r4,lr}
000002  480e              LDR      r0,|L34.60|
000004  ed9f0a0c          VLDR     s0,|L34.56|
000008  ed2d8b02          VPUSH    {d8}
00000c  ed9f8a0c          VLDR     s16,|L34.64|
000010  ed800a1d          VSTR     s0,[r0,#0x74]
000014  3078              ADDS     r0,r0,#0x78
000016  eeb00a48          VMOV.F32 s0,s16
00001a  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
00001e  eeb00a48          VMOV.F32 s0,s16
000022  4808              LDR      r0,|L34.68|
000024  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
000028  ecbd8b02          VPOP     {d8}
00002c  4806              LDR      r0,|L34.72|
00002e  e8bd4010          POP      {r4,lr}
000032  f7ffbffe          B.W      _ZN4Anki24VelocityProfileGeneratorC1Ev ; Anki::VelocityProfileGenerator::VelocityProfileGenerator()
                          ENDP

000036  0000              DCW      0x0000
                  |L34.56|
000038  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L34.60|
                          DCD      ||.data||
                  |L34.64|
000040  00000000          DCFS     0x00000000 ; 0
                  |L34.68|
                          DCD      ||.data||+0x80
                  |L34.72|
                          DCD      ||.bss||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController10Height2RadEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController10Height2RadEf||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController10Rad2HeightEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController10Rad2HeightEf||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController4InitEv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController6EnableEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController6EnableEv||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController7DisableEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController7DisableEv||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController18ResetAnglePositionEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController18ResetAnglePositionEf||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController16SetDesiredHeightEffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController16SetDesiredHeightEffff||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController23StartCalibrationRoutineEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController23StartCalibrationRoutineEv||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController12IsCalibratedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController12IsCalibratedEv||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController8IsMovingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController8IsMovingEv||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController24GetLastCommandedHeightMMEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController24GetLastCommandedHeightMMEv||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController11GetHeightMMEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController11GetHeightMMEv||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController11GetAngleRadEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController11GetAngleRadEv||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController16SetSpeedAndAccelEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController16SetSpeedAndAccelEff||
                          DCD      0x00000001

                          AREA ||area_number.51||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController22SetLinearSpeedAndAccelEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController22SetLinearSpeedAndAccelEff||
                          DCD      0x00000001

                          AREA ||area_number.52||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController16GetSpeedAndAccelERfS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController16GetSpeedAndAccelERfS2_||
                          DCD      0x00000001

                          AREA ||area_number.53||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController18SetAngularVelocityEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController18SetAngularVelocityEf||
                          DCD      0x00000001

                          AREA ||area_number.54||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController17SetLinearVelocityEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController17SetLinearVelocityEf||
                          DCD      0x00000001

                          AREA ||area_number.55||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController18GetAngularVelocityEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController18GetAngularVelocityEv||
                          DCD      0x00000001

                          AREA ||area_number.56||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController24PoseAndSpeedFilterUpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController24PoseAndSpeedFilterUpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.57||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController10IsLimitingEPf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController10IsLimitingEPf||
                          DCD      0x00000001

                          AREA ||area_number.58||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController9IsRelaxedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController9IsRelaxedEv||
                          DCD      0x00000001

                          AREA ||area_number.59||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController17LimitDetectUpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController17LimitDetectUpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.60||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController16GetDesiredHeightEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController16GetDesiredHeightEv||
                          DCD      0x00000001

                          AREA ||area_number.61||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController12IsInPositionEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.61||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController12IsInPositionEv||
                          DCD      0x00000001

                          AREA ||area_number.62||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController11StopNoddingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.62||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController11StopNoddingEv||
                          DCD      0x00000001

                          AREA ||area_number.63||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController6UpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController6UpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.64||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController8SetGainsEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController8SetGainsEfff||
                          DCD      0x00000001

                          AREA ||area_number.65||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController4StopEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController4StopEv||
                          DCD      0x00000001

                          AREA ||area_number.66||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController12StartNoddingEfftiff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController12StartNoddingEfftiff||
                          DCD      0x00000001

                          AREA ||area_number.67||, LINKORDER=||i._ZN4Anki5Cozmo14LiftController9IsNoddingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo14LiftController9IsNoddingEv||
                          DCD      0x00000001

                          AREA ||area_number.68||, LINKORDER=||i.__sti___18_liftController_cpp_265a82b9||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.68||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___18_liftController_cpp_265a82b9||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b94vpg_E ; Anki::Cozmo::LiftController::<unnamed>::vpg_
                          %        80

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo18LIFT_BASE_POSITIONE ; Anki::Cozmo::LIFT_BASE_POSITION
000000  c2200000          DCFS     0xc2200000 ; -40
000004  00000000          DCFS     0x00000000 ; 0
000008  422ecccd          DCFS     0x422ecccd ; 43.700000762939453

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4641494c          DCB      "FAIL: LIFT VPG (fixedDuration): startVel %f, startPos %"
000004  3a204c49
000008  46542056
00000c  50472028
000010  66697865
000014  64447572
000018  6174696f
00001c  6e293a20
000020  73746172
000024  7456656c
000028  2025662c
00002c  20737461
000030  7274506f
000034  732025  
000037  662c2061          DCB      "f, acc_start_frac %f, acc_end_frac %f, endPos %f, durat"
00003b  63635f73
00003f  74617274
000043  5f667261
000047  63202566
00004b  2c206163
00004f  635f656e
000053  645f6672
000057  61632025
00005b  662c2065
00005f  6e64506f
000063  73202566
000067  2c206475
00006b  726174  
00006e  696f6e20          DCB      "ion %f. Trying VPG without fixed duration.\n",0
000072  25662e20
000076  54727969
00007a  6e672056
00007e  50472077
000082  6974686f
000086  75742066
00008a  69786564
00008e  20647572
000092  6174696f
000096  6e2e0a00

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b911inPosition_E ; Anki::Cozmo::LiftController::<unnamed>::inPosition_
000000  01                DCB      0x01
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b910isNodding_E ; Anki::Cozmo::LiftController::<unnamed>::isNodding_
000001  00                DCB      0x00
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b913isCalibrated_E ; Anki::Cozmo::LiftController::<unnamed>::isCalibrated_
000002  00                DCB      0x00
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b917limitingDetected_E ; Anki::Cozmo::LiftController::<unnamed>::limitingDetected_
000003  00                DCB      0x00
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b917limitingExpected_E ; Anki::Cozmo::LiftController::<unnamed>::limitingExpected_
000004  00                DCB      0x00
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b910isRelaxed_E ; Anki::Cozmo::LiftController::<unnamed>::isRelaxed_
000005  01                DCB      0x01
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b913calibPending_E ; Anki::Cozmo::LiftController::<unnamed>::calibPending_
000006  00                DCB      0x00
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b97enable_E ; Anki::Cozmo::LiftController::<unnamed>::enable_
000007  01                DCB      0x01
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b93Kp_E ; Anki::Cozmo::LiftController::<unnamed>::Kp_
000008  41a00000          DCFS     0x41a00000 ; 20
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b93Ki_E ; Anki::Cozmo::LiftController::<unnamed>::Ki_
00000c  3cf5c28f          DCFS     0x3cf5c28f ; 0.029999999329447746
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b914angleErrorSum_E ; Anki::Cozmo::LiftController::<unnamed>::angleErrorSum_
000010  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b913MAX_ERROR_SUME ; Anki::Cozmo::LiftController::<unnamed>::MAX_ERROR_SUM
000014  41200000          DCFS     0x41200000 ; 10
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b914desiredHeight_E ; Anki::Cozmo::LiftController::<unnamed>::desiredHeight_
000018  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b917currDesiredAngle_E ; Anki::Cozmo::LiftController::<unnamed>::currDesiredAngle_
00001c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b918currDesiredRadVel_E ; Anki::Cozmo::LiftController::<unnamed>::currDesiredRadVel_
000020  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b911angleError_E ; Anki::Cozmo::LiftController::<unnamed>::angleError_
000024  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b911prevHalPos_E ; Anki::Cozmo::LiftController::<unnamed>::prevHalPos_
000028  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b912maxSpeedRad_E ; Anki::Cozmo::LiftController::<unnamed>::maxSpeedRad_
00002c  3f800000          DCFS     0x3f800000 ; 1
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b99accelRad_E ; Anki::Cozmo::LiftController::<unnamed>::accelRad_
000030  40000000          DCFS     0x40000000 ; 2
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b917approachSpeedRad_E ; Anki::Cozmo::LiftController::<unnamed>::approachSpeedRad_
000034  3e4ccccd          DCFS     0x3e4ccccd ; 0.20000000298023224
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b99radSpeed_E ; Anki::Cozmo::LiftController::<unnamed>::radSpeed_
000038  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b96power_E ; Anki::Cozmo::LiftController::<unnamed>::power_
00003c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b913nodLowHeight_E ; Anki::Cozmo::LiftController::<unnamed>::nodLowHeight_
000040  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b914nodHighHeight_E ; Anki::Cozmo::LiftController::<unnamed>::nodHighHeight_
000044  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b915numNodsDesired_E ; Anki::Cozmo::LiftController::<unnamed>::numNodsDesired_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b916numNodsComplete_E ; Anki::Cozmo::LiftController::<unnamed>::numNodsComplete_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b918nodEaseInFraction_E ; Anki::Cozmo::LiftController::<unnamed>::nodEaseInFraction_
000050  3f000000          DCFS     0x3f000000 ; 0.5
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b919nodEaseOutFraction_E ; Anki::Cozmo::LiftController::<unnamed>::nodEaseOutFraction_
000054  3f000000          DCFS     0x3f000000 ; 0.5
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b918nodHalfPeriod_sec_E ; Anki::Cozmo::LiftController::<unnamed>::nodHalfPeriod_sec_
000058  3f000000          DCFS     0x3f000000 ; 0.5
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b920lastLiftMovedTime_usE ; Anki::Cozmo::LiftController::<unnamed>::lastLiftMovedTime_us
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b923lastPowerAppliedTime_usE ; Anki::Cozmo::LiftController::<unnamed>::lastPowerAppliedTime_us
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b920LIFT_ANGLE_LOW_LIMITE ; Anki::Cozmo::LiftController::<unnamed>::LIFT_ANGLE_LOW_LIMIT
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b921LIFT_ANGLE_HIGH_LIMITE ; Anki::Cozmo::LiftController::<unnamed>::LIFT_ANGLE_HIGH_LIMIT
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b920LIFT_ANGLE_HIGH_DOCKE ; Anki::Cozmo::LiftController::<unnamed>::LIFT_ANGLE_HIGH_DOCK
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b911calibAngle_E ; Anki::Cozmo::LiftController::<unnamed>::calibAngle_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b913currentAngle_E ; Anki::Cozmo::LiftController::<unnamed>::currentAngle_
                          %        8
                  _ZN4Anki5Cozmo14LiftController42_GLOBAL__N__18_liftController_cpp_265a82b913desiredAngle_E ; Anki::Cozmo::LiftController::<unnamed>::desiredAngle_
                          %        8

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___18_liftController_cpp_265a82b9
