; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\localization.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\localization.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\localization.crf supervisor\src\localization.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo12Localization10GetHistIdxEjRt||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization10GetHistIdxEjRt PROC ; Anki::Cozmo::Localization::GetHistIdx(unsigned, unsigned short&)
;;;109          
;;;110          Result GetHistIdx(TimeStamp_t t, u16& idx)
000000  4a1d              LDR      r2,|L1.120|
;;;111          {
000002  b410              PUSH     {r4}
;;;112            // TODO: Binary search for timestamp
;;;113            //       For now just doing a straight up linear search.
;;;114            
;;;115            
;;;116            if (hEnd_ < hStart_) {
000004  8893              LDRH     r3,[r2,#4]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39725hEnd_E
000006  8852              LDRH     r2,[r2,#2]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39727hStart_E
;;;117              for (idx = hStart_; idx < POSE_HISTORY_SIZE; ++idx) {
;;;118                if (hist_[idx].t == t) {
000008  f8dfc070          LDR      r12,|L1.124|
00000c  429a              CMP      r2,r3                 ;116
;;;119                  return RESULT_OK;
;;;120                }
;;;121              }
;;;122              
;;;123              for (idx = 0; idx <= hEnd_; ++idx) {
;;;124                if (hist_[idx].t == t) {
;;;125                  return RESULT_OK;
;;;126                }
;;;127              }
;;;128              
;;;129            } else {
;;;130              for (idx = hStart_; idx <= hEnd_; ++idx) {
00000e  800a              STRH     r2,[r1,#0]
000010  d91e              BLS      |L1.80|
000012  f5b27f96          CMP      r2,#0x12c             ;117
000016  d20c              BCS      |L1.50|
                  |L1.24|
000018  b292              UXTH     r2,r2                 ;118
00001a  eb020482          ADD      r4,r2,r2,LSL #2       ;118
00001e  f85c4024          LDR      r4,[r12,r4,LSL #2]    ;118
000022  4284              CMP      r4,r0                 ;118
000024  d01c              BEQ      |L1.96|
000026  1c52              ADDS     r2,r2,#1              ;118
000028  b292              UXTH     r2,r2                 ;117
00002a  800a              STRH     r2,[r1,#0]            ;117
00002c  f5b27f96          CMP      r2,#0x12c             ;117
000030  d3f2              BCC      |L1.24|
                  |L1.50|
000032  2200              MOVS     r2,#0                 ;123
000034  800a              STRH     r2,[r1,#0]            ;123
                  |L1.54|
000036  b292              UXTH     r2,r2                 ;124
000038  eb020482          ADD      r4,r2,r2,LSL #2       ;124
00003c  f85c4024          LDR      r4,[r12,r4,LSL #2]    ;124
000040  4284              CMP      r4,r0                 ;124
000042  d00d              BEQ      |L1.96|
000044  1c52              ADDS     r2,r2,#1              ;124
000046  b292              UXTH     r2,r2                 ;123
000048  800a              STRH     r2,[r1,#0]            ;123
00004a  429a              CMP      r2,r3                 ;123
00004c  d9f3              BLS      |L1.54|
00004e  e00f              B        |L1.112|
                  |L1.80|
000050  d80e              BHI      |L1.112|
                  |L1.82|
;;;131                if (hist_[idx].t == t) {
000052  b292              UXTH     r2,r2
000054  eb020482          ADD      r4,r2,r2,LSL #2
000058  f85c4024          LDR      r4,[r12,r4,LSL #2]
00005c  4284              CMP      r4,r0
00005e  d102              BNE      |L1.102|
                  |L1.96|
;;;132                  return RESULT_OK;
;;;133                }
;;;134              }
;;;135            }
;;;136            return RESULT_FAIL;
;;;137          }
000060  bc10              POP      {r4}
000062  2000              MOVS     r0,#0                 ;132
000064  4770              BX       lr
                  |L1.102|
000066  1c52              ADDS     r2,r2,#1
000068  b292              UXTH     r2,r2                 ;130
00006a  800a              STRH     r2,[r1,#0]            ;130
00006c  429a              CMP      r2,r3                 ;130
00006e  d9f0              BLS      |L1.82|
                  |L1.112|
000070  bc10              POP      {r4}
000072  2001              MOVS     r0,#1                 ;136
000074  4770              BX       lr
;;;138          
                          ENDP

000076  0000              DCW      0x0000
                  |L1.120|
                          DCD      ||.data||
                  |L1.124|
                          DCD      ||.bss||+0x10

                          AREA ||i._ZN4Anki5Cozmo12Localization10IsOnBridgeEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization10IsOnBridgeEv PROC ; Anki::Cozmo::Localization::IsOnBridge()
;;;359          
;;;360          bool IsOnBridge() {
000000  4801              LDR      r0,|L2.8|
;;;361            return onBridge_;
000002  7840              LDRB     r0,[r0,#1]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39729onBridge_E
;;;362          }
000004  4770              BX       lr
;;;363          
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization11SetOnBridgeEb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization11SetOnBridgeEb PROC ; Anki::Cozmo::Localization::SetOnBridge(bool)
;;;336          
;;;337          Result SetOnBridge(bool onBridge)
000000  4601              MOV      r1,r0
;;;338          {
000002  b510              PUSH     {r4,lr}
;;;339            Result lastResult = RESULT_OK;
;;;340            
;;;341            if(onBridge == true && onBridge_ == false) {
000004  480e              LDR      r0,|L3.64|
000006  2400              MOVS     r4,#0                 ;339
000008  b082              SUB      sp,sp,#8              ;338
00000a  7840              LDRB     r0,[r0,#1]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39729onBridge_E
00000c  ea310200          BICS     r2,r1,r0
000010  d008              BEQ      |L3.36|
;;;342              // We weren't on a bridge but now we are
;;;343              Messages::BridgeTraverseStart msg;
;;;344              msg.timestamp = HAL::GetTimeStamp();
000012  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;345              if(HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::BridgeTraverseStart), &msg) == false) {
000016  9000              STR      r0,[sp,#0]
000018  4669              MOV      r1,sp
00001a  2043              MOVS     r0,#0x43
00001c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000020  b150              CBZ      r0,|L3.56|
000022  e00a              B        |L3.58|
                  |L3.36|
;;;346                lastResult = RESULT_FAIL;
;;;347              }
;;;348            }
;;;349            else if(onBridge == false && onBridge_ == true) {
000024  4388              BICS     r0,r0,r1
000026  d008              BEQ      |L3.58|
;;;350              // We were on a bridge and no we're not
;;;351              Messages::BridgeTraverseComplete msg;
;;;352              msg.timestamp = HAL::GetTimeStamp();
000028  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;353              if(HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::BridgeTraverseComplete), &msg) == false) {
00002c  9000              STR      r0,[sp,#0]
00002e  4669              MOV      r1,sp
000030  2044              MOVS     r0,#0x44
000032  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000036  b900              CBNZ     r0,|L3.58|
                  |L3.56|
;;;354                lastResult = RESULT_FAIL;
000038  2401              MOVS     r4,#1
                  |L3.58|
;;;355              }
;;;356            }
;;;357            return lastResult;
;;;358          }
00003a  b002              ADD      sp,sp,#8
00003c  4620              MOV      r0,r4                 ;357
00003e  bd10              POP      {r4,pc}
;;;359          
                          ENDP

                  |L3.64|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization12ClearHistoryEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization12ClearHistoryEv PROC ; Anki::Cozmo::Localization::ClearHistory()
;;;101          /// ============= Pose history ==============
;;;102          void ClearHistory() {
000000  4803              LDR      r0,|L4.16|
;;;103            hStart_ = 0;
000002  2100              MOVS     r1,#0
000004  8041              STRH     r1,[r0,#2]
;;;104            hEnd_ = 0;
000006  8081              STRH     r1,[r0,#4]
;;;105            hSize_ = 0;
000008  80c1              STRH     r1,[r0,#6]
;;;106            lastKeyframeUpdate_ = 0;
00000a  6201              STR      r1,[r0,#0x20]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397219lastKeyframeUpdate_E
;;;107          }
00000c  4770              BX       lr
;;;108          
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization13AddPoseToHistEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization13AddPoseToHistEv PROC ; Anki::Cozmo::Localization::AddPoseToHist()
;;;239          
;;;240          void AddPoseToHist()
000000  b510              PUSH     {r4,lr}
;;;241          {
;;;242            if (++hEnd_ == POSE_HISTORY_SIZE) {
000002  4c19              LDR      r4,|L5.104|
000004  2100              MOVS     r1,#0
000006  88a0              LDRH     r0,[r4,#4]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39725hEnd_E
000008  1c40              ADDS     r0,r0,#1
00000a  b280              UXTH     r0,r0
00000c  80a0              STRH     r0,[r4,#4]
00000e  f5b07f96          CMP      r0,#0x12c
;;;243              hEnd_ = 0;
000012  bf08              IT       EQ
000014  80a1              STRHEQ   r1,[r4,#4]
;;;244            }
;;;245            
;;;246            if (hEnd_ == hStart_) {
000016  88a2              LDRH     r2,[r4,#4]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39725hEnd_E
000018  8860              LDRH     r0,[r4,#2]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39727hStart_E
00001a  4282              CMP      r2,r0
00001c  d107              BNE      |L5.46|
00001e  1c40              ADDS     r0,r0,#1              ;241
;;;247              if (++hStart_ == POSE_HISTORY_SIZE) {
000020  b280              UXTH     r0,r0
000022  8060              STRH     r0,[r4,#2]
000024  f5b07f96          CMP      r0,#0x12c
;;;248                hStart_ = 0;
000028  bf08              IT       EQ
00002a  8061              STRHEQ   r1,[r4,#2]
00002c  e002              B        |L5.52|
                  |L5.46|
;;;249              }
;;;250            } else {
;;;251              ++hSize_;
00002e  88e0              LDRH     r0,[r4,#6]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39726hSize_E
000030  1c40              ADDS     r0,r0,#1
000032  80e0              STRH     r0,[r4,#6]
                  |L5.52|
;;;252            }
;;;253            
;;;254            hist_[hEnd_].t = HAL::GetTimeStamp();
000034  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
000038  88a1              LDRH     r1,[r4,#4]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39725hEnd_E
00003a  4a0c              LDR      r2,|L5.108|
00003c  eb010181          ADD      r1,r1,r1,LSL #2
000040  f8420021          STR      r0,[r2,r1,LSL #2]
;;;255            hist_[hEnd_].x = x_;
000044  ed940a02          VLDR     s0,[r4,#8]
000048  eb020081          ADD      r0,r2,r1,LSL #2
00004c  4908              LDR      r1,|L5.112|
00004e  ed800a01          VSTR     s0,[r0,#4]
;;;256            hist_[hEnd_].y = y_;
000052  ed940a03          VLDR     s0,[r4,#0xc]
000056  ed800a02          VSTR     s0,[r0,#8]
00005a  ed910a00          VLDR     s0,[r1,#0]
;;;257            hist_[hEnd_].angle = orientation_.ToFloat();
00005e  ed800a03          VSTR     s0,[r0,#0xc]
;;;258            hist_[hEnd_].frame = frameId_;
000062  69e1              LDR      r1,[r4,#0x1c]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39728frameId_E
000064  6101              STR      r1,[r0,#0x10]
;;;259          }
000066  bd10              POP      {r4,pc}
;;;260          
                          ENDP

                  |L5.104|
                          DCD      ||.data||
                  |L5.108|
                          DCD      ||.bss||+0x10
                  |L5.112|
                          DCD      ||.data||+0x28

                          AREA ||i._ZN4Anki5Cozmo12Localization14GetPoseFrameIdEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization14GetPoseFrameIdEv PROC ; Anki::Cozmo::Localization::GetPoseFrameId()
;;;571    
;;;572          PoseFrameID_t GetPoseFrameId()
000000  4801              LDR      r0,|L6.8|
;;;573          {
;;;574            return frameId_;
000002  69c0              LDR      r0,[r0,#0x1c]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39728frameId_E
;;;575          }
000004  4770              BX       lr
;;;576          
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization14ResetPoseFrameEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization14ResetPoseFrameEv PROC ; Anki::Cozmo::Localization::ResetPoseFrame()
;;;576          
;;;577          void ResetPoseFrame()
000000  4803              LDR      r0,|L7.16|
;;;578          {
;;;579            frameId_ = 0;
000002  2100              MOVS     r1,#0
000004  61c1              STR      r1,[r0,#0x1c]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39728frameId_E
000006  8041              STRH     r1,[r0,#2]
000008  8081              STRH     r1,[r0,#4]
00000a  80c1              STRH     r1,[r0,#6]
00000c  6201              STR      r1,[r0,#0x20]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397219lastKeyframeUpdate_E
;;;580            ClearHistory();
;;;581          }
00000e  4770              BX       lr
;;;582    
                          ENDP

                  |L7.16|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE PROC ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
;;;558          
;;;559          void GetCurrentMatPose(f32& x, f32& y, Radians& angle)
000000  4b06              LDR      r3,|L8.28|
;;;560          {
;;;561            x = x_;
000002  ed930a02          VLDR     s0,[r3,#8]
000006  ed800a00          VSTR     s0,[r0,#0]
;;;562            y = y_;
00000a  ed930a03          VLDR     s0,[r3,#0xc]
;;;563            angle = orientation_;
00000e  4610              MOV      r0,r2
000010  ed810a00          VSTR     s0,[r1,#0]            ;562
000014  f1030128          ADD      r1,r3,#0x28
000018  f7ffbffe          B.W      _ZN4Anki7RadiansaSERKS0_ ; Anki::Radians::operator =(const Anki::Radians&)
;;;564          } // GetCurrentMatPose()
;;;565          
                          ENDP

                  |L8.28|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization17SetCurrentMatPoseEffNS_7RadiansE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization17SetCurrentMatPoseEffNS_7RadiansE PROC ; Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
;;;550    
;;;551          void SetCurrentMatPose(f32  x, f32  y, Radians  angle)
000000  b570              PUSH     {r4-r6,lr}
;;;552          {
;;;553            x_ = x;
000002  4d0c              LDR      r5,|L9.52|
000004  4604              MOV      r4,r0                 ;552
000006  ed2d8b02          VPUSH    {d8}                  ;552
;;;554            y_ = y;
;;;555            orientation_ = angle;
00000a  4601              MOV      r1,r0
00000c  ed850a02          VSTR     s0,[r5,#8]            ;553
000010  edc50a03          VSTR     s1,[r5,#0xc]          ;554
000014  f1050028          ADD      r0,r5,#0x28
000018  f7fffffe          BL       _ZN4Anki7RadiansaSERKS0_ ; Anki::Radians::operator =(const Anki::Radians&)
00001c  ed948a00          VLDR     s16,[r4,#0]
;;;556            gyroRotOffset_ = angle.ToFloat() - IMUFilter::GetRotation();
000020  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter11GetRotationEv ; Anki::Cozmo::IMUFilter::GetRotation()
000024  ee380a40          VSUB.F32 s0,s16,s0
000028  ed850a06          VSTR     s0,[r5,#0x18]
;;;557          } // SetCurrentMatPose()
00002c  ecbd8b02          VPOP     {d8}
000030  bd70              POP      {r4-r6,pc}
;;;558          
                          ENDP

000032  0000              DCW      0x0000
                  |L9.52|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization22UpdatePoseWithKeyframeEjjfff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization22UpdatePoseWithKeyframeEjjfff PROC ; Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
;;;138          
;;;139          Result UpdatePoseWithKeyframe(PoseFrameID_t frameID, TimeStamp_t t, const f32 x, const f32 y, const f32 angle)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;140          {
;;;141            // Update frameID
;;;142            frameId_ = frameID;
000004  4ee4              LDR      r6,|L10.920|
000006  460d              MOV      r5,r1                 ;140
000008  ed2d8b06          VPUSH    {d8-d10}              ;140
00000c  b094              SUB      sp,sp,#0x50           ;140
00000e  eef09a41          VMOV.F32 s19,s2                ;140
000012  eeb0aa60          VMOV.F32 s20,s1                ;140
;;;143            
;;;144            u16 i;
;;;145            if (GetHistIdx(t, i) == RESULT_FAIL) {
000016  61f0              STR      r0,[r6,#0x1c]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39728frameId_E
000018  eef0aa40          VMOV.F32 s21,s0                ;140
00001c  a910              ADD      r1,sp,#0x40
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _ZN4Anki5Cozmo12Localization10GetHistIdxEjRt ; Anki::Cozmo::Localization::GetHistIdx(unsigned, unsigned short&)
;;;146              PRINT("ERROR: Couldn't find timestamp %d in history (oldest(%d) %d, newest(%d) %d)\n", t, hStart_, hist_[hStart_].t, hEnd_, hist_[hEnd_].t);
000024  4cdd              LDR      r4,|L10.924|
000026  2801              CMP      r0,#1                 ;145
000028  f00081a0          BEQ.W    |L10.876|
;;;147              return RESULT_FAIL;
;;;148            }
;;;149            
;;;150            
;;;151            // TODO: Replace lastKeyFrameUpdate with actually computing
;;;152            // pDiff by chaining pDiffs per frame all the way up to current frame.
;;;153            // The frame distance between the historical pose and current pose depends on the comms latency!
;;;154            // ... as well as how often the mat markers are sent, obviously.
;;;155            if (lastKeyframeUpdate_ > hist_[i].t) {
00002c  f8bd0040          LDRH     r0,[sp,#0x40]
000030  6a32              LDR      r2,[r6,#0x20]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397219lastKeyframeUpdate_E
000032  eb000080          ADD      r0,r0,r0,LSL #2
000036  f8541020          LDR      r1,[r4,r0,LSL #2]
00003a  4291              CMP      r1,r2
00003c  f0c081aa          BCC.W    |L10.916|
;;;156              #if(DEBUG_POSE_HISTORY)
;;;157              PRINT("Ignoring keyframe %d\n", frameId_);
;;;158              #endif
;;;159              return RESULT_FAIL;
;;;160            }
;;;161            
;;;162            
;;;163            
;;;164            // Compute new pose based on key frame pose and the diff between the historical
;;;165            // pose at time t and the latest pose.
;;;166            
;;;167            // Historical pose
;;;168            p0Trans.x = hist_[i].x;
000040  eb040080          ADD      r0,r4,r0,LSL #2
000044  49d6              LDR      r1,|L10.928|
000046  ed900a01          VLDR     s0,[r0,#4]
00004a  ed810a00          VSTR     s0,[r1,#0]
;;;169            p0Trans.y = hist_[i].y;
00004e  ed900a02          VLDR     s0,[r0,#8]
000052  ed810a01          VSTR     s0,[r1,#4]
;;;170            p0Trans.z = 0;
000056  ed9f8ad3          VLDR     s16,|L10.932|
00005a  ed818a02          VSTR     s16,[r1,#8]
;;;171            
;;;172            f32 s0 = sinf(hist_[i].angle);
00005e  ed900a03          VLDR     s0,[r0,#0xc]
000062  f7fffffe          BL       __hardfp_sinf
;;;173            f32 c0 = cosf(hist_[i].angle);
000066  f8bd0040          LDRH     r0,[sp,#0x40]
00006a  eef08a40          VMOV.F32 s17,s0                ;172
00006e  eb000080          ADD      r0,r0,r0,LSL #2
000072  eb040080          ADD      r0,r4,r0,LSL #2
000076  ed900a03          VLDR     s0,[r0,#0xc]
00007a  f7fffffe          BL       __hardfp_cosf
00007e  48ca              LDR      r0,|L10.936|
;;;174            p0Rot[0][0] = c0;    p0Rot[0][1] = -s0;    p0Rot[0][2] = 0;
000080  2100              MOVS     r1,#0
000082  eef10a68          VNEG.F32 s1,s17
000086  6883              LDR      r3,[r0,#8]
000088  6902              LDR      r2,[r0,#0x10]
;;;175            p0Rot[1][0] = s0;    p0Rot[1][1] =  c0;    p0Rot[1][2] = 0;
;;;176            p0Rot[2][0] =  0;    p0Rot[2][1] =   0;    p0Rot[2][2] = 1;
00008a  eeb79a00          VMOV.F32 s18,#1.00000000
00008e  fb012103          MLA      r1,r1,r3,r2
;;;177            
;;;178            // Current pose
;;;179            currPoseTrans.x = x_;
000092  f8df8318          LDR      r8,|L10.940|
000096  ed810a00          VSTR     s0,[r1,#0]            ;174
00009a  6883              LDR      r3,[r0,#8]            ;174
00009c  6902              LDR      r2,[r0,#0x10]         ;174
00009e  2100              MOVS     r1,#0                 ;174
0000a0  fb012103          MLA      r1,r1,r3,r2           ;174
0000a4  f1060428          ADD      r4,r6,#0x28           ;174
0000a8  edc10a01          VSTR     s1,[r1,#4]            ;174
0000ac  6883              LDR      r3,[r0,#8]            ;174
0000ae  6902              LDR      r2,[r0,#0x10]         ;174
0000b0  2100              MOVS     r1,#0                 ;174
0000b2  fb012103          MLA      r1,r1,r3,r2           ;174
0000b6  ed818a02          VSTR     s16,[r1,#8]           ;174
0000ba  6883              LDR      r3,[r0,#8]            ;174
0000bc  6902              LDR      r2,[r0,#0x10]         ;174
0000be  2101              MOVS     r1,#1                 ;175
0000c0  fb012103          MLA      r1,r1,r3,r2           ;175
0000c4  edc18a00          VSTR     s17,[r1,#0]           ;175
0000c8  6883              LDR      r3,[r0,#8]            ;175
0000ca  6902              LDR      r2,[r0,#0x10]         ;175
0000cc  2101              MOVS     r1,#1                 ;175
0000ce  fb012103          MLA      r1,r1,r3,r2           ;175
0000d2  ed810a01          VSTR     s0,[r1,#4]            ;175
0000d6  6883              LDR      r3,[r0,#8]            ;175
0000d8  6902              LDR      r2,[r0,#0x10]         ;175
0000da  2101              MOVS     r1,#1                 ;175
0000dc  fb012103          MLA      r1,r1,r3,r2           ;175
0000e0  ed818a02          VSTR     s16,[r1,#8]           ;175
0000e4  6883              LDR      r3,[r0,#8]            ;175
0000e6  6902              LDR      r2,[r0,#0x10]         ;175
0000e8  2102              MOVS     r1,#2                 ;176
0000ea  fb012103          MLA      r1,r1,r3,r2           ;176
0000ee  ed818a00          VSTR     s16,[r1,#0]           ;176
0000f2  6883              LDR      r3,[r0,#8]            ;176
0000f4  6902              LDR      r2,[r0,#0x10]         ;176
0000f6  2102              MOVS     r1,#2                 ;176
0000f8  fb012103          MLA      r1,r1,r3,r2           ;176
0000fc  ed818a01          VSTR     s16,[r1,#4]           ;176
000100  6902              LDR      r2,[r0,#0x10]         ;176
000102  6880              LDR      r0,[r0,#8]            ;176
000104  2102              MOVS     r1,#2                 ;176
000106  fb012000          MLA      r0,r1,r0,r2           ;176
00010a  ed809a02          VSTR     s18,[r0,#8]           ;176
00010e  ed960a02          VLDR     s0,[r6,#8]
000112  ed880a00          VSTR     s0,[r8,#0]
;;;180            currPoseTrans.y = y_;
000116  ed960a03          VLDR     s0,[r6,#0xc]
00011a  ed880a01          VSTR     s0,[r8,#4]
;;;181            currPoseTrans.z = 0;
00011e  ed888a02          VSTR     s16,[r8,#8]
000122  ed940a00          VLDR     s0,[r4,#0]
;;;182            
;;;183            f32 s1 = sinf(orientation_.ToFloat());
000126  f7fffffe          BL       __hardfp_sinf
00012a  eef08a40          VMOV.F32 s17,s0
00012e  ed940a00          VLDR     s0,[r4,#0]
;;;184            f32 c1 = cosf(orientation_.ToFloat());
000132  f7fffffe          BL       __hardfp_cosf
000136  f108040c          ADD      r4,r8,#0xc
;;;185            currPoseRot[0][0] = c1;    currPoseRot[0][1] = -s1;    currPoseRot[0][2] = 0;
00013a  2000              MOVS     r0,#0
00013c  68a2              LDR      r2,[r4,#8]
00013e  6921              LDR      r1,[r4,#0x10]
000140  eef10a68          VNEG.F32 s1,s17
000144  fb001002          MLA      r0,r0,r2,r1
000148  ed800a00          VSTR     s0,[r0,#0]
00014c  68a2              LDR      r2,[r4,#8]
00014e  6921              LDR      r1,[r4,#0x10]
000150  2000              MOVS     r0,#0
000152  fb001002          MLA      r0,r0,r2,r1
000156  edc00a01          VSTR     s1,[r0,#4]
00015a  68a2              LDR      r2,[r4,#8]
00015c  6921              LDR      r1,[r4,#0x10]
00015e  2000              MOVS     r0,#0
000160  fb001002          MLA      r0,r0,r2,r1
000164  ed808a02          VSTR     s16,[r0,#8]
000168  68a2              LDR      r2,[r4,#8]
00016a  6921              LDR      r1,[r4,#0x10]
;;;186            currPoseRot[1][0] = s1;    currPoseRot[1][1] =  c1;    currPoseRot[1][2] = 0;
00016c  2001              MOVS     r0,#1
00016e  fb001002          MLA      r0,r0,r2,r1
000172  edc08a00          VSTR     s17,[r0,#0]
000176  68a2              LDR      r2,[r4,#8]
000178  6921              LDR      r1,[r4,#0x10]
00017a  2001              MOVS     r0,#1
00017c  fb001002          MLA      r0,r0,r2,r1
000180  ed800a01          VSTR     s0,[r0,#4]
000184  68a2              LDR      r2,[r4,#8]
000186  6921              LDR      r1,[r4,#0x10]
000188  2001              MOVS     r0,#1
00018a  fb001002          MLA      r0,r0,r2,r1
00018e  ed808a02          VSTR     s16,[r0,#8]
000192  68a2              LDR      r2,[r4,#8]
000194  6921              LDR      r1,[r4,#0x10]
;;;187            currPoseRot[2][0] =  0;    currPoseRot[2][1] =   0;    currPoseRot[2][2] = 1;
000196  2002              MOVS     r0,#2
000198  fb001002          MLA      r0,r0,r2,r1
00019c  ed808a00          VSTR     s16,[r0,#0]
0001a0  68a2              LDR      r2,[r4,#8]
0001a2  6921              LDR      r1,[r4,#0x10]
0001a4  2002              MOVS     r0,#2
0001a6  fb001002          MLA      r0,r0,r2,r1
0001aa  ed808a01          VSTR     s16,[r0,#4]
0001ae  68a2              LDR      r2,[r4,#8]
0001b0  6921              LDR      r1,[r4,#0x10]
0001b2  2002              MOVS     r0,#2
0001b4  fb001002          MLA      r0,r0,r2,r1
;;;188            
;;;189            // Compute the difference between the historical pose and the current pose
;;;190            if (ComputePoseDiff(p0Rot, p0Trans, currPoseRot, currPoseTrans, pDiffRot, pDiffTrans, scratch) == RESULT_FAIL) {
0001b8  f1a40128          SUB      r1,r4,#0x28
0001bc  ed809a02          VSTR     s18,[r0,#8]           ;187
0001c0  a809              ADD      r0,sp,#0x24
0001c2  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0001c6  f1040134          ADD      r1,r4,#0x34
0001ca  f101020c          ADD      r2,r1,#0xc
0001ce  e9cd2100          STRD     r2,r1,[sp,#0]
0001d2  f1a10340          SUB      r3,r1,#0x40
0001d6  f1a10234          SUB      r2,r1,#0x34
0001da  9002              STR      r0,[sp,#8]
0001dc  3920              SUBS     r1,r1,#0x20
0001de  f101000c          ADD      r0,r1,#0xc
0001e2  f7fffffe          BL       _ZN4Anki8Embedded15ComputePoseDiffIfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_6Point3IS4_EES7_SB_RS5_RS9_NS0_11MemoryStackE ; Anki::Embedded::ComputePoseDiff<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::MemoryStack)
0001e6  2801              CMP      r0,#1
0001e8  d07d              BEQ      |L10.742|
;;;191              PRINT("Failed to compute pose diff\n");
;;;192              return RESULT_FAIL;
;;;193            }
;;;194            
;;;195            // Compute pose of the keyframe
;;;196            keyPoseTrans.x = x;
0001ea  f1040754          ADD      r7,r4,#0x54
;;;197            keyPoseTrans.y = y;
;;;198            keyPoseTrans.z = 0;
;;;199            
;;;200            f32 sk = sinf(angle);
0001ee  eeb00a69          VMOV.F32 s0,s19
0001f2  edc7aa00          VSTR     s21,[r7,#0]           ;196
0001f6  ed87aa01          VSTR     s20,[r7,#4]           ;197
0001fa  ed878a02          VSTR     s16,[r7,#8]           ;198
0001fe  f7fffffe          BL       __hardfp_sinf
000202  eef08a40          VMOV.F32 s17,s0
;;;201            f32 ck = cosf(angle);
000206  eeb00a69          VMOV.F32 s0,s19
00020a  f7fffffe          BL       __hardfp_cosf
00020e  f1040060          ADD      r0,r4,#0x60
;;;202            keyPoseRot[0][0] = ck;    keyPoseRot[0][1] = -sk;    keyPoseRot[0][2] = 0;
000212  2100              MOVS     r1,#0
000214  6883              LDR      r3,[r0,#8]
000216  6902              LDR      r2,[r0,#0x10]
000218  eef10a68          VNEG.F32 s1,s17
00021c  fb012103          MLA      r1,r1,r3,r2
000220  ed810a00          VSTR     s0,[r1,#0]
000224  6883              LDR      r3,[r0,#8]
000226  6902              LDR      r2,[r0,#0x10]
000228  2100              MOVS     r1,#0
00022a  fb012103          MLA      r1,r1,r3,r2
00022e  edc10a01          VSTR     s1,[r1,#4]
000232  6883              LDR      r3,[r0,#8]
000234  6902              LDR      r2,[r0,#0x10]
000236  2100              MOVS     r1,#0
000238  fb012103          MLA      r1,r1,r3,r2
00023c  ed818a02          VSTR     s16,[r1,#8]
000240  6883              LDR      r3,[r0,#8]
000242  6902              LDR      r2,[r0,#0x10]
;;;203            keyPoseRot[1][0] = sk;    keyPoseRot[1][1] =  ck;    keyPoseRot[1][2] = 0;
000244  2101              MOVS     r1,#1
000246  fb012103          MLA      r1,r1,r3,r2
00024a  edc18a00          VSTR     s17,[r1,#0]
00024e  6883              LDR      r3,[r0,#8]
000250  6902              LDR      r2,[r0,#0x10]
000252  2101              MOVS     r1,#1
000254  fb012103          MLA      r1,r1,r3,r2
000258  ed810a01          VSTR     s0,[r1,#4]
00025c  6883              LDR      r3,[r0,#8]
00025e  6902              LDR      r2,[r0,#0x10]
000260  2101              MOVS     r1,#1
000262  fb012103          MLA      r1,r1,r3,r2
000266  ed818a02          VSTR     s16,[r1,#8]
00026a  6883              LDR      r3,[r0,#8]
00026c  6902              LDR      r2,[r0,#0x10]
;;;204            keyPoseRot[2][0] =  0;    keyPoseRot[2][1] =   0;    keyPoseRot[2][2] = 1;
00026e  2102              MOVS     r1,#2
000270  fb012103          MLA      r1,r1,r3,r2
000274  ed818a00          VSTR     s16,[r1,#0]
000278  6883              LDR      r3,[r0,#8]
00027a  6902              LDR      r2,[r0,#0x10]
00027c  2102              MOVS     r1,#2
00027e  fb012103          MLA      r1,r1,r3,r2
000282  ed818a01          VSTR     s16,[r1,#4]
000286  6902              LDR      r2,[r0,#0x10]
000288  6880              LDR      r0,[r0,#8]
00028a  2102              MOVS     r1,#2
00028c  fb012000          MLA      r0,r1,r0,r2
;;;205    
;;;206            #if(DEBUG_POSE_HISTORY)
;;;207            PRINT("pHist: %f %f %f (frame %d, curFrame %d)\n", hist_[i].x, hist_[i].y, hist_[i].angle, hist_[i].frame, frameId_);
;;;208            PRINT("pCurr: %f %f %f\n", currPoseTrans.x, currPoseTrans.y, orientation_.ToFloat());
;;;209            PRINT("pKey: %f %f %f\n", x, y, angle);
;;;210            #endif
;;;211            
;;;212    
;;;213            // Apply the pose diff to the keyframe pose to get the new curr pose
;;;214            Embedded::Matrix::Multiply(keyPoseRot, pDiffRot, currPoseRot);
000290  4622              MOV      r2,r4
000292  ed809a02          VSTR     s18,[r0,#8]           ;204
000296  f1020140          ADD      r1,r2,#0x40
00029a  f1010020          ADD      r0,r1,#0x20
00029e  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
;;;215            currPoseTrans = keyPoseRot*pDiffTrans + keyPoseTrans;
0002a2  f1040234          ADD      r2,r4,#0x34
0002a6  f1a4050c          SUB      r5,r4,#0xc
0002aa  f102012c          ADD      r1,r2,#0x2c
0002ae  a806              ADD      r0,sp,#0x18
0002b0  f7fffffe          BL       _ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
0002b4  ed9d0a06          VLDR     s0,[sp,#0x18]
0002b8  edd70a00          VLDR     s1,[r7,#0]
0002bc  edd71a02          VLDR     s3,[r7,#8]
0002c0  ee301a20          VADD.F32 s2,s0,s1
0002c4  ed9d0a07          VLDR     s0,[sp,#0x1c]
0002c8  edd70a01          VLDR     s1,[r7,#4]
0002cc  ee700a20          VADD.F32 s1,s0,s1
0002d0  ed9d0a08          VLDR     s0,[sp,#0x20]
0002d4  ed8d1a03          VSTR     s2,[sp,#0xc]
0002d8  edcd0a04          VSTR     s1,[sp,#0x10]
0002dc  ee300a21          VADD.F32 s0,s0,s3
0002e0  ed8d0a05          VSTR     s0,[sp,#0x14]
0002e4  e000              B        |L10.744|
                  |L10.742|
0002e6  e052              B        |L10.910|
                  |L10.744|
0002e8  ed851a00          VSTR     s2,[r5,#0]
0002ec  ed9d0a04          VLDR     s0,[sp,#0x10]
;;;216    
;;;217            // NOTE: Expecting only rotation about the z-axis.
;;;218            //       If this is not the case, we need to do something more mathy.
;;;219            f32 newAngle = acosf(currPoseRot[0][0]);
0002f0  2000              MOVS     r0,#0
0002f2  ed850a01          VSTR     s0,[r5,#4]
0002f6  ed9d0a05          VLDR     s0,[sp,#0x14]
0002fa  ed850a02          VSTR     s0,[r5,#8]
0002fe  68a2              LDR      r2,[r4,#8]
000300  6921              LDR      r1,[r4,#0x10]
000302  fb001002          MLA      r0,r0,r2,r1
000306  ed900a00          VLDR     s0,[r0,#0]
00030a  f7fffffe          BL       __hardfp_acosf
00030e  68a2              LDR      r2,[r4,#8]
000310  6921              LDR      r1,[r4,#0x10]
;;;220            if (currPoseRot[0][1] > 0) {
000312  2000              MOVS     r0,#0
000314  fb001002          MLA      r0,r0,r2,r1
000318  edd00a01          VLDR     s1,[r0,#4]
00031c  eef50ac0          VCMPE.F32 s1,#0.0
000320  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;221              newAngle *= -1;
000324  bfc8              IT       GT
000326  eeb10a40          VNEGGT.F32 s0,s0
;;;222            }
;;;223            
;;;224            SetCurrentMatPose(currPoseTrans.x, currPoseTrans.y, newAngle);
00032a  ed988a00          VLDR     s16,[r8,#0]
00032e  edd88a01          VLDR     s17,[r8,#4]
000332  a812              ADD      r0,sp,#0x48
000334  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
000338  4604              MOV      r4,r0
00033a  ed868a02          VSTR     s16,[r6,#8]
00033e  4601              MOV      r1,r0
000340  edc68a03          VSTR     s17,[r6,#0xc]
000344  481a              LDR      r0,|L10.944|
000346  f7fffffe          BL       _ZN4Anki7RadiansaSERKS0_ ; Anki::Radians::operator =(const Anki::Radians&)
00034a  ed948a00          VLDR     s16,[r4,#0]
00034e  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter11GetRotationEv ; Anki::Cozmo::IMUFilter::GetRotation()
000352  ee380a40          VSUB.F32 s0,s16,s0
000356  ed860a06          VSTR     s0,[r6,#0x18]
;;;225            
;;;226            #if(DEBUG_POSE_HISTORY)
;;;227            f32 pDiffAngle = acosf(pDiffRot[0][0]);
;;;228            if (pDiffRot[0][1] > 0) {
;;;229              pDiffAngle *= -1;
;;;230            }
;;;231            PRINT("pDiff: %f %f %f\n", pDiffTrans.x, pDiffTrans.y, pDiffAngle);
;;;232            PRINT("pCurrNew: %f %f %f\n", x_, y_, orientation_.ToFloat());
;;;233            #endif
;;;234            
;;;235            lastKeyframeUpdate_ = HAL::GetTimeStamp();
00035a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;236            
;;;237            return RESULT_OK;
00035e  6230              STR      r0,[r6,#0x20]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397219lastKeyframeUpdate_E
000360  2000              MOVS     r0,#0
                  |L10.866|
;;;238          }
000362  b014              ADD      sp,sp,#0x50
000364  ecbd8b06          VPOP     {d8-d10}
000368  e8bd81f0          POP      {r4-r8,pc}
                  |L10.876|
00036c  88b2              LDRH     r2,[r6,#4]            ;146  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39725hEnd_E
00036e  4629              MOV      r1,r5                 ;146
000370  eb020082          ADD      r0,r2,r2,LSL #2       ;146
000374  f8540020          LDR      r0,[r4,r0,LSL #2]     ;146
000378  e9cd2000          STRD     r2,r0,[sp,#0]         ;146
00037c  8872              LDRH     r2,[r6,#2]            ;146  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39727hStart_E
00037e  eb020082          ADD      r0,r2,r2,LSL #2       ;146
000382  f8543020          LDR      r3,[r4,r0,LSL #2]     ;146
000386  480b              LDR      r0,|L10.948|
000388  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
00038c  e002              B        |L10.916|
                  |L10.910|
00038e  a00a              ADR      r0,|L10.952|
000390  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
                  |L10.916|
000394  2001              MOVS     r0,#1                 ;192
000396  e7e4              B        |L10.866|
;;;239          
                          ENDP

                  |L10.920|
                          DCD      ||.data||
                  |L10.924|
                          DCD      ||.bss||+0x10
                  |L10.928|
                          DCD      ||.bss||+0x1968
                  |L10.932|
0003a4  00000000          DCFS     0x00000000 ; 0
                  |L10.936|
                          DCD      ||.bss||+0x1974
                  |L10.940|
                          DCD      ||.bss||+0x1948
                  |L10.944|
                          DCD      ||.data||+0x28
                  |L10.948|
                          DCD      ||.conststring||
                  |L10.952|
0003b8  4661696c          DCB      "Failed to compute pose diff\n",0
0003bc  65642074
0003c0  6f20636f
0003c4  6d707574
0003c8  6520706f
0003cc  73652064
0003d0  6966660a
0003d4  00      
0003d5  00                DCB      0
0003d6  00                DCB      0
0003d7  00                DCB      0

                          AREA ||i._ZN4Anki5Cozmo12Localization24GetCurrentMatOrientationEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization24GetCurrentMatOrientationEv PROC ; Anki::Cozmo::Localization::GetCurrentMatOrientation()
;;;566      
;;;567          Radians GetCurrentMatOrientation()
000000  4901              LDR      r1,|L11.8|
;;;568          {
;;;569            return orientation_;
000002  f7ffbffe          B.W      _ZN4Anki7RadiansC1ERKS0_ ; Anki::Radians::Radians(const Anki::Radians&)
;;;570          }
;;;571    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      ||.data||+0x28

                          AREA ||i._ZN4Anki5Cozmo12Localization24SendRampTraverseCompleteEb||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12Localization24SendRampTraverseCompleteEb PROC ; Anki::Cozmo::Localization::SendRampTraverseComplete(bool)
;;;295          
;;;296          Result SendRampTraverseComplete(const bool success)
000000  b510              PUSH     {r4,lr}
;;;297          {
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
;;;298            Messages::RampTraverseComplete msg;
;;;299            msg.timestamp = HAL::GetTimeStamp();
000006  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;300            msg.didSucceed = success;
00000a  9000              STR      r0,[sp,#0]
00000c  f88d4004          STRB     r4,[sp,#4]
;;;301            if(HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::RampTraverseComplete), &msg)) {
000010  4669              MOV      r1,sp
000012  2042              MOVS     r0,#0x42
000014  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000018  2800              CMP      r0,#0
;;;302              return RESULT_OK;
00001a  bf14              ITE      NE
00001c  2000              MOVNE    r0,#0
;;;303            }
;;;304            return RESULT_FAIL;
00001e  2001              MOVEQ    r0,#1
;;;305          }
000020  b002              ADD      sp,sp,#8
000022  bd10              POP      {r4,pc}
;;;306    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12Localization28SendRampTraverseStartMessageEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12Localization28SendRampTraverseStartMessageEv PROC ; Anki::Cozmo::Localization::SendRampTraverseStartMessage()
;;;285          
;;;286          Result SendRampTraverseStartMessage()
000000  b508              PUSH     {r3,lr}
;;;287          {
;;;288            Messages::RampTraverseStart msg;
;;;289            msg.timestamp = HAL::GetTimeStamp();
000002  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;290            if(HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::RampTraverseStart), &msg)) {
000006  9000              STR      r0,[sp,#0]
000008  4669              MOV      r1,sp
00000a  2041              MOVS     r0,#0x41
00000c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000010  2800              CMP      r0,#0
;;;291              return RESULT_OK;
000012  bf14              ITE      NE
000014  2000              MOVNE    r0,#0
;;;292            }
;;;293            return RESULT_FAIL;
000016  2001              MOVEQ    r0,#1
;;;294          }
000018  bd08              POP      {r3,pc}
;;;295          
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12Localization4InitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization4InitEv PROC ; Anki::Cozmo::Localization::Init()
;;;264    
;;;265          Result Init() {
000000  b530              PUSH     {r4,r5,lr}
000002  ed2d8b02          VPUSH    {d8}
000006  b083              SUB      sp,sp,#0xc
;;;266            SetCurrentMatPose(0,0,0);
000008  ed9f8a1a          VLDR     s16,|L14.116|
00000c  4668              MOV      r0,sp
00000e  eeb00a48          VMOV.F32 s0,s16
000012  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
000016  4c18              LDR      r4,|L14.120|
000018  4605              MOV      r5,r0
00001a  4601              MOV      r1,r0
00001c  ed848a02          VSTR     s16,[r4,#8]
000020  ed848a03          VSTR     s16,[r4,#0xc]
000024  f1040028          ADD      r0,r4,#0x28
000028  f7fffffe          BL       _ZN4Anki7RadiansaSERKS0_ ; Anki::Radians::operator =(const Anki::Radians&)
00002c  ed958a00          VLDR     s16,[r5,#0]
000030  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter11GetRotationEv ; Anki::Cozmo::IMUFilter::GetRotation()
000034  ee380a40          VSUB.F32 s0,s16,s0
;;;267            
;;;268            onRamp_ = false;
000038  2500              MOVS     r5,#0
;;;269            
;;;270            prevLeftWheelPos_ = HAL::MotorGetPosition(HAL::MOTOR_LEFT_WHEEL);
00003a  4628              MOV      r0,r5
00003c  ed840a06          VSTR     s0,[r4,#0x18]
000040  7025              STRB     r5,[r4,#0]            ;268
000042  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000046  ed840a04          VSTR     s0,[r4,#0x10]
;;;271            prevRightWheelPos_ = HAL::MotorGetPosition(HAL::MOTOR_RIGHT_WHEEL);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000050  ed840a05          VSTR     s0,[r4,#0x14]
;;;272    
;;;273            gyroRotOffset_ =  -IMUFilter::GetRotation();
000054  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter11GetRotationEv ; Anki::Cozmo::IMUFilter::GetRotation()
000058  eeb10a40          VNEG.F32 s0,s0
00005c  ed840a06          VSTR     s0,[r4,#0x18]
000060  8065              STRH     r5,[r4,#2]
000062  80a5              STRH     r5,[r4,#4]
000064  80e5              STRH     r5,[r4,#6]
;;;274          
;;;275            ClearHistory();
;;;276            
;;;277            return RESULT_OK;
000066  6225              STR      r5,[r4,#0x20]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397219lastKeyframeUpdate_E
;;;278          }
000068  b003              ADD      sp,sp,#0xc
00006a  2000              MOVS     r0,#0                 ;277
00006c  ecbd8b02          VPOP     {d8}
000070  bd30              POP      {r4,r5,pc}
;;;279    /*
                          ENDP

000072  0000              DCW      0x0000
                  |L14.116|
000074  00000000          DCFS     0x00000000 ; 0
                  |L14.120|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization6UpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization6UpdateEv PROC ; Anki::Cozmo::Localization::Update()
;;;363          
;;;364          void Update()
000000  b570              PUSH     {r4-r6,lr}
;;;365          {
;;;366    
;;;367    #if(USE_SIM_GROUND_TRUTH_POSE)
;;;368            // For initial testing only
;;;369            float angle;
;;;370            HAL::GetGroundTruthPose(x_,y_,angle);
;;;371            
;;;372            // Convert to mm
;;;373            x_ *= 1000;
;;;374            y_ *= 1000;
;;;375            
;;;376            orientation_ = angle;
;;;377    #else
;;;378         
;;;379            bool movement = false;
;;;380            
;;;381            // Update current pose estimate based on wheel motion
;;;382            
;;;383            f32 currLeftWheelPos = HAL::MotorGetPosition(HAL::MOTOR_LEFT_WHEEL);
000002  2000              MOVS     r0,#0
000004  ed2d8b06          VPUSH    {d8-d10}              ;365
000008  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
00000c  eeb08a40          VMOV.F32 s16,s0
;;;384            f32 currRightWheelPos = HAL::MotorGetPosition(HAL::MOTOR_RIGHT_WHEEL);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
;;;385            
;;;386            // Compute distance traveled by each wheel
;;;387            f32 lDist = currLeftWheelPos - prevLeftWheelPos_;
000016  4c86              LDR      r4,|L15.560|
;;;388            f32 rDist = currRightWheelPos - prevRightWheelPos_;
;;;389    
;;;390            
;;;391            // Compute new pose based on encoders and gyros, but only if there was any motion.
;;;392            movement = (!FLT_NEAR(rDist, 0) || !FLT_NEAR(lDist,0));
000018  4a86              LDR      r2,|L15.564|
00001a  4987              LDR      r1,|L15.568|
00001c  edd40a04          VLDR     s1,[r4,#0x10]         ;387
000020  ee388a60          VSUB.F32 s16,s16,s1            ;387
000024  edd40a05          VLDR     s1,[r4,#0x14]         ;388
000028  ee700a60          VSUB.F32 s1,s0,s1              ;388
00002c  ee100a90          VMOV     r0,s1
000030  4290              CMP      r0,r2
000032  d20d              BCS      |L15.80|
000034  ee100a90          VMOV     r0,s1
000038  4288              CMP      r0,r1
00003a  da09              BGE      |L15.80|
00003c  ee180a10          VMOV     r0,s16
000040  4290              CMP      r0,r2
000042  d205              BCS      |L15.80|
000044  ee180a10          VMOV     r0,s16
000048  4288              CMP      r0,r1
00004a  bfb8              IT       LT
00004c  2000              MOVLT    r0,#0
00004e  db00              BLT      |L15.82|
                  |L15.80|
000050  2001              MOVS     r0,#1
                  |L15.82|
;;;393            if (movement ) {
000052  2800              CMP      r0,#0
000054  d074              BEQ      |L15.320|
;;;394    #if(DEBUG_LOCALIZATION)
;;;395              PRINT("\ncurrWheelPos (%f, %f)   prevWheelPos (%f, %f)\n",
;;;396                    currLeftWheelPos, currRightWheelPos, prevLeftWheelPos_, prevRightWheelPos_);
;;;397    #endif
;;;398              
;;;399              f32 lRadius, rRadius; // Radii of each wheel arc path (+ve radius means origin of arc is to the left)
;;;400              f32 cRadius; // Radius of arc traversed by center of robot
;;;401              f32 cDist;   // Distance traversed by center of robot
;;;402              f32 cTheta;  // Theta traversed by center of robot
;;;403              
;;;404              
;;;405          
;;;406              // lDist / lRadius = rDist / rRadius = theta
;;;407              // rRadius - lRadius = wheel_dist  => rRadius = wheel_dist + lRadius
;;;408              
;;;409              // lDist / lRadius = rDist / (wheel_dist + lRadius)
;;;410              // (wheel_dist + lRadius) / lRadius = rDist / lDist
;;;411              // wheel_dist / lRadius = rDist / lDist - 1
;;;412              // lRadius = wheel_dist / (rDist / lDist - 1)
;;;413    
;;;414              if ((rDist != 0) && (lDist / rDist) < 1.01f && (lDist / rDist) > 0.99f) {
;;;415    //          if (FLT_NEAR(lDist, rDist)) {
;;;416                lRadius = BIG_RADIUS;
;;;417                rRadius = BIG_RADIUS;
;;;418                cRadius = BIG_RADIUS;
;;;419                cTheta = 0;
000056  eddf8a79          VLDR     s17,|L15.572|
00005a  eef50ac0          VCMPE.F32 s1,#0.0               ;414
;;;420                cDist = lDist;
;;;421              } else {
;;;422                if (FLT_NEAR(lDist,0)) {
;;;423                  lRadius = 0;
;;;424                } else {
;;;425                  lRadius = WHEEL_DIST_MM / (rDist / lDist - 1);
;;;426                }
;;;427                rRadius = WHEEL_DIST_MM + lRadius;
;;;428                if (ABS(rRadius) > ABS(lRadius)) {
;;;429                  cTheta = rDist / rRadius;
;;;430                } else {
;;;431                  cTheta = lDist / lRadius;
;;;432                }
;;;433                cDist = 0.5f*(lDist + rDist);
00005e  eeb62a00          VMOV.F32 s4,#0.50000000
000062  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;414
000066  d010              BEQ      |L15.138|
000068  ee880a20          VDIV.F32 s0,s16,s1             ;414
00006c  4b74              LDR      r3,|L15.576|
00006e  ee100a10          VMOV     r0,s0                 ;414
000072  4283              CMP      r3,r0                 ;414
000074  dd09              BLE      |L15.138|
000076  ee100a10          VMOV     r0,s0                 ;414
00007a  4b72              LDR      r3,|L15.580|
00007c  4298              CMP      r0,r3                 ;414
00007e  bfc4              ITT      GT                    ;416
000080  ed9f9a71          VLDRGT   s18,|L15.584|
000084  eef09a68          VMOVGT.F32 s19,s17               ;419
000088  dc37              BGT      |L15.250|
                  |L15.138|
00008a  ee180a10          VMOV     r0,s16                ;422
00008e  ed9f0a6f          VLDR     s0,|L15.588|
000092  4290              CMP      r0,r2                 ;422
000094  d203              BCS      |L15.158|
000096  ee180a10          VMOV     r0,s16                ;422
00009a  4288              CMP      r0,r1                 ;422
00009c  db07              BLT      |L15.174|
                  |L15.158|
00009e  ee801a88          VDIV.F32 s2,s1,s16             ;425
0000a2  eef71a00          VMOV.F32 s3,#1.00000000        ;425
0000a6  ee311a61          VSUB.F32 s2,s2,s3              ;425
0000aa  eec08a01          VDIV.F32 s17,s0,s2             ;425
                  |L15.174|
0000ae  ee381a80          VADD.F32 s2,s17,s0             ;427
0000b2  eeb51ac0          VCMPE.F32 s2,#0.0               ;428
0000b6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;428
0000ba  bfac              ITE      GE                    ;428
0000bc  eeb00a41          VMOVGE.F32 s0,s2                 ;428
0000c0  eeb10a41          VNEGLT.F32 s0,s2                 ;428
0000c4  eef58ac0          VCMPE.F32 s17,#0.0              ;428
0000c8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;428
0000cc  bfac              ITE      GE                    ;428
0000ce  eef01a68          VMOVGE.F32 s3,s17                ;428
0000d2  eef11a68          VNEGLT.F32 s3,s17                ;428
0000d6  eeb40ae1          VCMPE.F32 s0,s3                 ;428
0000da  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;428
0000de  dd02              BLE      |L15.230|
0000e0  eec09a81          VDIV.F32 s19,s1,s2             ;429
0000e4  e001              B        |L15.234|
                  |L15.230|
0000e6  eec89a28          VDIV.F32 s19,s16,s17           ;431
                  |L15.234|
0000ea  ee380a20          VADD.F32 s0,s16,s1
0000ee  ee208a02          VMUL.F32 s16,s0,s4
;;;434                cRadius = lRadius + WHEEL_DIST_HALF_MM;
0000f2  ed9f0a57          VLDR     s0,|L15.592|
0000f6  ee389a80          VADD.F32 s18,s17,s0
                  |L15.250|
;;;435              }
;;;436    
;;;437    #if(DEBUG_LOCALIZATION)
;;;438              PRINT("lRadius %f, rRadius %f, lDist %f, rDist %f, cTheta %f, cDist %f, cRadius %f\n",
;;;439                    lRadius, rRadius, lDist, rDist, cTheta, cDist, cRadius);
;;;440              
;;;441              PRINT("oldPose: %f %f %f\n", x_, y_, orientation_.ToFloat());
;;;442    #endif
;;;443              
;;;444              if (ABS(cRadius) >= BIG_RADIUS) {
0000fa  eeb59ac0          VCMPE.F32 s18,#0.0
0000fe  eef1fa10          VMRS     APSR_nzcv,FPSCR
000102  bfac              ITE      GE
000104  eeb00a49          VMOVGE.F32 s0,s18
000108  eeb10a49          VNEGLT.F32 s0,s18
00010c  ee100a10          VMOV     r0,s0
000110  4950              LDR      r1,|L15.596|
000112  4d51              LDR      r5,|L15.600|
000114  4288              CMP      r0,r1
000116  db2c              BLT      |L15.370|
000118  ed950a00          VLDR     s0,[r5,#0]
;;;445    
;;;446                x_ += cDist * cosf(orientation_.ToFloat());
00011c  f7fffffe          BL       __hardfp_cosf
000120  edd40a02          VLDR     s1,[r4,#8]
000124  ee480a00          VMLA.F32 s1,s16,s0
000128  edc40a02          VSTR     s1,[r4,#8]
00012c  ed950a00          VLDR     s0,[r5,#0]
;;;447                y_ += cDist * sinf(orientation_.ToFloat());
000130  f7fffffe          BL       __hardfp_sinf
000134  edd40a03          VLDR     s1,[r4,#0xc]
000138  ee480a00          VMLA.F32 s1,s16,s0
00013c  edc40a03          VSTR     s1,[r4,#0xc]
                  |L15.320|
;;;448    
;;;449                /*
;;;450                f32 dx = cDist * cosf(orientation_.ToFloat());
;;;451                f32 dy = cDist * sinf(orientation_.ToFloat());
;;;452                
;;;453                // Only update z position when moving straight
;;;454                if (onRamp_) {
;;;455                  f32 pitch = IMUFilter::GetPitch();
;;;456                  f32 cosp = cosf(pitch);
;;;457                  x_ += dx * cosp;
;;;458                  y_ += dy * cosp;
;;;459                  z_ += cDist * tanf(pitch);
;;;460                  PRINT("dx %f, dy %f, pitch %f  (z %f)\n", dx, dy, pitch, z_);
;;;461                } else {
;;;462                  x_ += dx;
;;;463                  y_ += dy;
;;;464                }
;;;465                */
;;;466              } else {
;;;467                
;;;468                
;;;469    #if(1)
;;;470                // Compute distance traveled relative to previous position.
;;;471                // Drawing a straight line from the previous position to the new position forms a chord
;;;472                // in the circle defined by the turning radius as determined by the incremental wheel motion this tick.
;;;473                // The angle of this circle that this chord spans is cTheta.
;;;474                // The angle of the chord relative to the robot's previous trajectory is cTheta / 2.
;;;475                f32 alpha = cTheta * 0.5f;
;;;476                
;;;477                // The chord length is 2 * cRadius * sin(cTheta / 2).
;;;478                f32 chord_length = ABS(2 * cRadius * sinf(alpha));
;;;479                
;;;480                // The new pose is then
;;;481                x_ += (cDist > 0 ? 1 : -1) * chord_length * cosf(orientation_.ToFloat() + alpha);
;;;482                y_ += (cDist > 0 ? 1 : -1) * chord_length * sinf(orientation_.ToFloat() + alpha);
;;;483                orientation_ += cTheta;
;;;484    #else
;;;485                // Naive approximation, but seems to work nearly as well as non-naive with one less sin() call.
;;;486                x_ += cDist * cosf(orientation_.ToFloat());
;;;487                y_ += cDist * sinf(orientation_.ToFloat());
;;;488                orientation_ += cTheta;
;;;489    #endif
;;;490              }
;;;491              
;;;492    #if(DEBUG_LOCALIZATION)
;;;493              PRINT("newPose: %f %f %f\n", x_, y_, orientation_.ToFloat());
;;;494    #endif
;;;495           
;;;496            }
;;;497    
;;;498            
;;;499    #if(USE_GYRO_ORIENTATION)
;;;500            // Set orientation according to gyro
;;;501            orientation_ = IMUFilter::GetRotation() + gyroRotOffset_;
000140  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter11GetRotationEv ; Anki::Cozmo::IMUFilter::GetRotation()
000144  edd40a06          VLDR     s1,[r4,#0x18]
000148  4843              LDR      r0,|L15.600|
00014a  ee300a20          VADD.F32 s0,s0,s1
00014e  f7fffffe          BL       _ZN4Anki7RadiansaSEf ; Anki::Radians::operator =(float)
;;;502    #endif
;;;503            
;;;504            prevLeftWheelPos_ = HAL::MotorGetPosition(HAL::MOTOR_LEFT_WHEEL);
000152  2000              MOVS     r0,#0
000154  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000158  ed840a04          VSTR     s0,[r4,#0x10]
;;;505            prevRightWheelPos_ = HAL::MotorGetPosition(HAL::MOTOR_RIGHT_WHEEL);
00015c  2001              MOVS     r0,#1
00015e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
000162  ed840a05          VSTR     s0,[r4,#0x14]
;;;506    
;;;507            
;;;508    #if(USE_OVERLAY_DISPLAY)
;;;509            if(movement && HAL::GetTimeStamp()%100 == 0)
;;;510            {
;;;511              using namespace Sim::OverlayDisplay;
;;;512              
;;;513              SetText(CURR_EST_POSE, "Est. Pose: (x,y)=(%.4f, %.4f) at deg=%.1f",
;;;514                      x_, y_,
;;;515                      orientation_.getDegrees());
;;;516               
;;;517              //PRINT("Est. Pose: (x,y)=(%.4f, %.4f) at deg=%.1f\n",
;;;518              //      x_, y_,
;;;519              //      orientation_.getDegrees());
;;;520              
;;;521              HAL::GetGroundTruthPose(xTrue_, yTrue_, angleTrue_);
;;;522              Radians angleRad(angleTrue_);
;;;523              
;;;524              
;;;525              SetText(CURR_TRUE_POSE, "True Pose: (x,y)=(%.4f, %.4f) at deg=%.1f",
;;;526                      xTrue_ * 1000, yTrue_ * 1000, angleRad.getDegrees());
;;;527              //f32 trueDist = sqrtf((yTrue_ - prev_yTrue_)*(yTrue_ - prev_yTrue_) + (xTrue_ - prev_xTrue_)*(xTrue_ - prev_xTrue_));
;;;528              //PRINT("True Pose: (x,y)=(%.4f, %.4f) at deg=%.1f (trueDist = %f)\n", xTrue_, yTrue_, angleRad.getDegrees(), trueDist);
;;;529              
;;;530              prev_xTrue_ = xTrue_;
;;;531              prev_yTrue_ = yTrue_;
;;;532              prev_angleTrue_ = angleTrue_;
;;;533              
;;;534              UpdateEstimatedPose(x_, y_, orientation_.ToFloat());
;;;535            }
;;;536    #endif
;;;537    
;;;538            
;;;539            
;;;540    #endif  //else (!USE_SIM_GROUND_TRUTH_POSE)
;;;541            
;;;542    
;;;543            // Add new current pose to history
;;;544            AddPoseToHist();
000166  ecbd8b06          VPOP     {d8-d10}
00016a  e8bd4070          POP      {r4-r6,lr}
00016e  f7ffbffe          B.W      _ZN4Anki5Cozmo12Localization13AddPoseToHistEv ; Anki::Cozmo::Localization::AddPoseToHist()
                  |L15.370|
000172  ee698a82          VMUL.F32 s17,s19,s4            ;475
000176  eeb00a68          VMOV.F32 s0,s17                ;478
00017a  f7fffffe          BL       __hardfp_sinf
00017e  eef00a00          VMOV.F32 s1,#2.00000000        ;478
000182  ee29aa20          VMUL.F32 s20,s18,s1            ;478
000186  ee200a0a          VMUL.F32 s0,s0,s20             ;478
00018a  eeb50ac0          VCMPE.F32 s0,#0.0               ;478
00018e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;478
000192  eeb00a68          VMOV.F32 s0,s17                ;478
000196  db04              BLT      |L15.418|
000198  f7fffffe          BL       __hardfp_sinf
00019c  ee209a0a          VMUL.F32 s18,s0,s20            ;478
0001a0  e007              B        |L15.434|
                  |L15.418|
0001a2  f7fffffe          BL       __hardfp_sinf
0001a6  eef80a00          VMOV.F32 s1,#-2.00000000       ;478
0001aa  ee690a20          VMUL.F32 s1,s18,s1             ;478
0001ae  ee209a20          VMUL.F32 s18,s0,s1             ;478
                  |L15.434|
0001b2  ed950a00          VLDR     s0,[r5,#0]            ;478
0001b6  ee300a28          VADD.F32 s0,s0,s17             ;481
0001ba  f7fffffe          BL       __hardfp_cosf
0001be  eeb58ac0          VCMPE.F32 s16,#0.0              ;481
0001c2  eef00a40          VMOV.F32 s1,s0                 ;481
0001c6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;481
0001ca  bfcc              ITE      GT                    ;481
0001cc  2001              MOVGT    r0,#1                 ;481
0001ce  f04f30ff          MOVLE    r0,#0xffffffff        ;481
0001d2  ee000a10          VMOV     s0,r0                 ;481
0001d6  eeb80ac0          VCVT.F32.S32 s0,s0                 ;481
0001da  ee201a09          VMUL.F32 s2,s0,s18             ;481
0001de  ed940a02          VLDR     s0,[r4,#8]            ;481
0001e2  ee010a20          VMLA.F32 s0,s2,s1              ;481
0001e6  ed840a02          VSTR     s0,[r4,#8]            ;481
0001ea  ed950a00          VLDR     s0,[r5,#0]            ;481
0001ee  ee300a28          VADD.F32 s0,s0,s17             ;482
0001f2  f7fffffe          BL       __hardfp_sinf
0001f6  eeb58ac0          VCMPE.F32 s16,#0.0              ;482
0001fa  eef00a40          VMOV.F32 s1,s0                 ;482
0001fe  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;482
000202  bfcc              ITE      GT                    ;482
000204  2001              MOVGT    r0,#1                 ;482
000206  f04f30ff          MOVLE    r0,#0xffffffff        ;482
00020a  ee000a10          VMOV     s0,r0                 ;482
00020e  4812              LDR      r0,|L15.600|
000210  eeb80ac0          VCVT.F32.S32 s0,s0                 ;482
000214  ee201a09          VMUL.F32 s2,s0,s18             ;482
000218  ed940a03          VLDR     s0,[r4,#0xc]          ;482
00021c  ee010a20          VMLA.F32 s0,s2,s1              ;482
000220  ed840a03          VSTR     s0,[r4,#0xc]          ;482
000224  eeb00a69          VMOV.F32 s0,s19                ;483
000228  f7fffffe          BL       _ZN4Anki7RadianspLEf ; Anki::Radians::operator +=(float)
00022c  e788              B        |L15.320|
;;;545            
;;;546    #if(DEBUG_LOCALIZATION)
;;;547            PRINT("LOC: %f, %f, %f\n", x_, y_, orientation_.getDegrees());
;;;548    #endif
;;;549          }
;;;550    
                          ENDP

00022e  0000              DCW      0x0000
                  |L15.560|
                          DCD      ||.data||
                  |L15.564|
                          DCD      0xb727c5ac
                  |L15.568|
                          DCD      0x3727c5ac
                  |L15.572|
00023c  00000000          DCFS     0x00000000 ; 0
                  |L15.576|
                          DCD      0x3f8147ae
                  |L15.580|
                          DCD      0x3f7d70a4
                  |L15.584|
000248  459c4000          DCFS     0x459c4000 ; 5000
                  |L15.588|
00024c  423ecccd          DCFS     0x423ecccd ; 47.700000762939453
                  |L15.592|
000250  41becccd          DCFS     0x41becccd ; 23.850000381469727
                  |L15.596|
                          DCD      0x459c4000
                  |L15.600|
                          DCD      ||.data||+0x28

                          AREA ||i._ZN4Anki5Cozmo12Localization8IsOnRampEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization8IsOnRampEv PROC ; Anki::Cozmo::Localization::IsOnRamp()
;;;331          
;;;332          bool IsOnRamp() {
000000  4801              LDR      r0,|L16.8|
;;;333            return onRamp_;
000002  7800              LDRB     r0,[r0,#0]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39727onRamp_E
;;;334          }
000004  4770              BX       lr
;;;335          
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization9GetDistToEff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization9GetDistToEff PROC ; Anki::Cozmo::Localization::GetDistTo(float, float)
;;;582    
;;;583          f32 GetDistTo(const f32 x, const f32 y)
000000  480c              LDR      r0,|L17.52|
;;;584          {
;;;585            return sqrtf((x_-x)*(x_-x) + (y_-y)*(y_-y));
000002  ed901a02          VLDR     s2,[r0,#8]
000006  ee310a40          VSUB.F32 s0,s2,s0
00000a  ed901a03          VLDR     s2,[r0,#0xc]
00000e  ee200a00          VMUL.F32 s0,s0,s0
000012  ee710a60          VSUB.F32 s1,s2,s1
000016  ee000aa0          VMLA.F32 s0,s1,s1
00001a  eef10ac0          VSQRT.F32 s1,s0
00001e  eef40a60          VCMP.F32 s1,s1
000022  eef1fa10          VMRS     APSR_nzcv,FPSCR
000026  bf04              ITT      EQ
000028  eeb00a60          VMOVEQ.F32 s0,s1
;;;586          }
00002c  4770              BXEQ     lr
00002e  f7ffbffe          B.W      __hardfp_sqrtf
;;;587          
                          ENDP

000032  0000              DCW      0x0000
                  |L17.52|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12Localization9SetOnRampEb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12Localization9SetOnRampEb PROC ; Anki::Cozmo::Localization::SetOnRamp(bool)
;;;306    
;;;307          Result SetOnRamp(bool onRamp)
000000  b570              PUSH     {r4-r6,lr}
;;;308          {
;;;309            Result lastResult = RESULT_OK;
;;;310            if(onRamp == true && onRamp_ == false) {
000002  4e10              LDR      r6,|L18.68|
000004  4604              MOV      r4,r0                 ;308
000006  2500              MOVS     r5,#0                 ;309
000008  7830              LDRB     r0,[r6,#0]  ; _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39727onRamp_E
00000a  b082              SUB      sp,sp,#8              ;308
00000c  ea340100          BICS     r1,r4,r0
000010  d008              BEQ      |L18.36|
;;;311              // We weren't on a ramp but now we are
;;;312              Messages::RampTraverseStart msg;
;;;313              msg.timestamp = HAL::GetTimeStamp();
000012  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;314              if(HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::RampTraverseStart), &msg) == false) {
000016  9000              STR      r0,[sp,#0]
000018  4669              MOV      r1,sp
00001a  2041              MOVS     r0,#0x41
00001c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000020  b150              CBZ      r0,|L18.56|
000022  e00a              B        |L18.58|
                  |L18.36|
;;;315                lastResult = RESULT_FAIL;
;;;316              }
;;;317            }
;;;318            else if(onRamp == false && onRamp_ == true) {
000024  43a0              BICS     r0,r0,r4
000026  d008              BEQ      |L18.58|
;;;319              // We were on a ramp and now we're not
;;;320              Messages::RampTraverseComplete msg;
;;;321              msg.timestamp = HAL::GetTimeStamp();
000028  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;322              if(HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::RampTraverseComplete), &msg) == false) {
00002c  9000              STR      r0,[sp,#0]
00002e  4669              MOV      r1,sp
000030  2042              MOVS     r0,#0x42
000032  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000036  b900              CBNZ     r0,|L18.58|
                  |L18.56|
;;;323                lastResult = RESULT_FAIL;
000038  2501              MOVS     r5,#1
                  |L18.58|
;;;324              }
;;;325            }
;;;326            
;;;327            onRamp_ = onRamp;
00003a  7034              STRB     r4,[r6,#0]
;;;328            
;;;329            return lastResult;
;;;330          }
00003c  b002              ADD      sp,sp,#8
00003e  4628              MOV      r0,r5                 ;329
000040  bd70              POP      {r4-r6,pc}
;;;331          
                          ENDP

000042  0000              DCW      0x0000
                  |L18.68|
                          DCD      ||.data||

                          AREA ||i.__sti___16_localization_cpp_1cac3972||, CODE, READONLY, ALIGN=2

                  __sti___16_localization_cpp_1cac3972 PROC
000000  b500              PUSH     {lr}
000002  ed2d8b02          VPUSH    {d8}
000006  b087              SUB      sp,sp,#0x1c
000008  ed9f0a3f          VLDR     s0,|L19.264|
00000c  483f              LDR      r0,|L19.268|
00000e  ed800a09          VSTR     s0,[r0,#0x24]
000012  483f              LDR      r0,|L19.272|
000014  ed9f8a3f          VLDR     s16,|L19.276|
000018  ed808a00          VSTR     s16,[r0,#0]
00001c  ed808a01          VSTR     s16,[r0,#4]
000020  eeb00a48          VMOV.F32 s0,s16
000024  3008              ADDS     r0,r0,#8
000026  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
00002a  eeb00a48          VMOV.F32 s0,s16
00002e  483a              LDR      r0,|L19.280|
000030  f7fffffe          BL       _ZN4Anki7RadiansC1Ef ; Anki::Radians::Radians(float)
000034  2201              MOVS     r2,#1
000036  2300              MOVS     r3,#0
000038  4611              MOV      r1,r2
00003a  a801              ADD      r0,sp,#4
00003c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000040  4936              LDR      r1,|L19.284|
000042  6803              LDR      r3,[r0,#0]
000044  f44f72d6          MOV      r2,#0x1ac
000048  f50170d6          ADD      r0,r1,#0x1ac
00004c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE ; Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
000050  4833              LDR      r0,|L19.288|
000052  2300              MOVS     r3,#0
000054  461a              MOV      r2,r3
000056  ed808a00          VSTR     s16,[r0,#0]
00005a  ed808a01          VSTR     s16,[r0,#4]
00005e  ed808a02          VSTR     s16,[r0,#8]
000062  2101              MOVS     r1,#1
000064  a802              ADD      r0,sp,#8
000066  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00006a  6800              LDR      r0,[r0,#0]
00006c  4b2d              LDR      r3,|L19.292|
00006e  2203              MOVS     r2,#3
000070  9000              STR      r0,[sp,#0]
000072  4611              MOV      r1,r2
000074  f1030028          ADD      r0,r3,#0x28
000078  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00007c  482a              LDR      r0,|L19.296|
00007e  2300              MOVS     r3,#0
000080  461a              MOV      r2,r3
000082  ed808a00          VSTR     s16,[r0,#0]
000086  ed808a01          VSTR     s16,[r0,#4]
00008a  ed808a02          VSTR     s16,[r0,#8]
00008e  2101              MOVS     r1,#1
000090  a803              ADD      r0,sp,#0xc
000092  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000096  6800              LDR      r0,[r0,#0]
000098  4b22              LDR      r3,|L19.292|
00009a  2203              MOVS     r2,#3
00009c  9000              STR      r0,[sp,#0]
00009e  4611              MOV      r1,r2
0000a0  f1030048          ADD      r0,r3,#0x48
0000a4  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000a8  4820              LDR      r0,|L19.300|
0000aa  2300              MOVS     r3,#0
0000ac  461a              MOV      r2,r3
0000ae  ed808a00          VSTR     s16,[r0,#0]
0000b2  ed808a01          VSTR     s16,[r0,#4]
0000b6  ed808a02          VSTR     s16,[r0,#8]
0000ba  2101              MOVS     r1,#1
0000bc  a804              ADD      r0,sp,#0x10
0000be  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000c2  6800              LDR      r0,[r0,#0]
0000c4  4b17              LDR      r3,|L19.292|
0000c6  2203              MOVS     r2,#3
0000c8  9000              STR      r0,[sp,#0]
0000ca  4611              MOV      r1,r2
0000cc  f1030068          ADD      r0,r3,#0x68
0000d0  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000d4  4816              LDR      r0,|L19.304|
0000d6  2300              MOVS     r3,#0
0000d8  461a              MOV      r2,r3
0000da  ed808a00          VSTR     s16,[r0,#0]
0000de  ed808a01          VSTR     s16,[r0,#4]
0000e2  ed808a02          VSTR     s16,[r0,#8]
0000e6  2101              MOVS     r1,#1
0000e8  a805              ADD      r0,sp,#0x14
0000ea  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000ee  6800              LDR      r0,[r0,#0]
0000f0  4b0c              LDR      r3,|L19.292|
0000f2  2203              MOVS     r2,#3
0000f4  9000              STR      r0,[sp,#0]
0000f6  4611              MOV      r1,r2
0000f8  f1030088          ADD      r0,r3,#0x88
0000fc  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000100  b007              ADD      sp,sp,#0x1c
000102  ecbd8b02          VPOP     {d8}
000106  bd00              POP      {pc}
                          ENDP

                  |L19.264|
000108  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L19.268|
                          DCD      ||.data||
                  |L19.272|
                          DCD      ||.bss||
                  |L19.276|
000114  00000000          DCFS     0x00000000 ; 0
                  |L19.280|
                          DCD      ||.data||+0x28
                  |L19.284|
                          DCD      ||.bss||+0x1780
                  |L19.288|
                          DCD      ||.bss||+0x1948
                  |L19.292|
                          DCD      ||.bss||+0x192c
                  |L19.296|
                          DCD      ||.bss||+0x1968
                  |L19.300|
                          DCD      ||.bss||+0x1988
                  |L19.304|
                          DCD      ||.bss||+0x19a8

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo12Localization12ClearHistoryEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization12ClearHistoryEv||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN4Anki5Cozmo12Localization10GetHistIdxEjRt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization10GetHistIdxEjRt||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki5Cozmo12Localization17SetCurrentMatPoseEffNS_7RadiansE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization17SetCurrentMatPoseEffNS_7RadiansE||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki5Cozmo12Localization22UpdatePoseWithKeyframeEjjfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization22UpdatePoseWithKeyframeEjjfff||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki5Cozmo12Localization13AddPoseToHistEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization13AddPoseToHistEv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki5Cozmo12Localization4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization4InitEv||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN4Anki5Cozmo12Localization28SendRampTraverseStartMessageEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization28SendRampTraverseStartMessageEv||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN4Anki5Cozmo12Localization24SendRampTraverseCompleteEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization24SendRampTraverseCompleteEb||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN4Anki5Cozmo12Localization9SetOnRampEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization9SetOnRampEb||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN4Anki5Cozmo12Localization8IsOnRampEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization8IsOnRampEv||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN4Anki5Cozmo12Localization11SetOnBridgeEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization11SetOnBridgeEb||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN4Anki5Cozmo12Localization10IsOnBridgeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization10IsOnBridgeEv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN4Anki5Cozmo12Localization6UpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization6UpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN4Anki5Cozmo12Localization24GetCurrentMatOrientationEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization24GetCurrentMatOrientationEv||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._ZN4Anki5Cozmo12Localization14GetPoseFrameIdEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization14GetPoseFrameIdEv||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN4Anki5Cozmo12Localization14ResetPoseFrameEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization14ResetPoseFrameEv||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN4Anki5Cozmo12Localization9GetDistToEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12Localization9GetDistToEff||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i.__sti___16_localization_cpp_1cac3972||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___16_localization_cpp_1cac3972||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397211currMatPoseE ; Anki::Cozmo::Localization::<unnamed>::currMatPose
                          %        16
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39725hist_E ; Anki::Cozmo::Localization::<unnamed>::hist_
                          %        6000
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397213scratchBufferE ; Anki::Cozmo::Localization::<unnamed>::scratchBuffer
                          %        428
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39727scratchE ; Anki::Cozmo::Localization::<unnamed>::scratch
                          %        28
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397213currPoseTransE ; Anki::Cozmo::Localization::<unnamed>::currPoseTrans
                          %        12
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397211currPoseRotE ; Anki::Cozmo::Localization::<unnamed>::currPoseRot
                          %        20
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39727p0TransE ; Anki::Cozmo::Localization::<unnamed>::p0Trans
                          %        12
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39725p0RotE ; Anki::Cozmo::Localization::<unnamed>::p0Rot
                          %        20
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397210pDiffTransE ; Anki::Cozmo::Localization::<unnamed>::pDiffTrans
                          %        12
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39728pDiffRotE ; Anki::Cozmo::Localization::<unnamed>::pDiffRot
                          %        20
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397212keyPoseTransE ; Anki::Cozmo::Localization::<unnamed>::keyPoseTrans
                          %        12
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397210keyPoseRotE ; Anki::Cozmo::Localization::<unnamed>::keyPoseRot
                          %        20

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4552524f          DCB      "ERROR: Couldn't find timestamp %d in history (oldest(%d"
000004  523a2043
000008  6f756c64
00000c  6e277420
000010  66696e64
000014  2074696d
000018  65737461
00001c  6d702025
000020  6420696e
000024  20686973
000028  746f7279
00002c  20286f6c
000030  64657374
000034  282564  
000037  29202564          DCB      ") %d, newest(%d) %d)\n",0
00003b  2c206e65
00003f  77657374
000043  28256429
000047  20256429
00004b  0a00    

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39727onRamp_E ; Anki::Cozmo::Localization::<unnamed>::onRamp_
000000  00                DCB      0x00
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39729onBridge_E ; Anki::Cozmo::Localization::<unnamed>::onBridge_
000001  00                DCB      0x00
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39727hStart_E ; Anki::Cozmo::Localization::<unnamed>::hStart_
000002  0000              DCW      0x0000
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39725hEnd_E ; Anki::Cozmo::Localization::<unnamed>::hEnd_
000004  0000              DCW      0x0000
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39726hSize_E ; Anki::Cozmo::Localization::<unnamed>::hSize_
000006  0000              DCW      0x0000
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39722x_E ; Anki::Cozmo::Localization::<unnamed>::x_
000008  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39722y_E ; Anki::Cozmo::Localization::<unnamed>::y_
00000c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397217prevLeftWheelPos_E ; Anki::Cozmo::Localization::<unnamed>::prevLeftWheelPos_
000010  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397218prevRightWheelPos_E ; Anki::Cozmo::Localization::<unnamed>::prevRightWheelPos_
000014  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397214gyroRotOffset_E ; Anki::Cozmo::Localization::<unnamed>::gyroRotOffset_
000018  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac39728frameId_E ; Anki::Cozmo::Localization::<unnamed>::frameId_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397219lastKeyframeUpdate_E ; Anki::Cozmo::Localization::<unnamed>::lastKeyframeUpdate_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000
                  _ZN4Anki5Cozmo12Localization40_GLOBAL__N__16_localization_cpp_1cac397212orientation_E ; Anki::Cozmo::Localization::<unnamed>::orientation_
                          %        8

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___16_localization_cpp_1cac3972

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a416c6c          DCB      0x3a,0x41,0x6c,0x6c
000010  6f636174          DCB      0x6f,0x63,0x61,0x74
000014  65427566          DCB      0x65,0x42,0x75,0x66
000018  66657246          DCB      0x66,0x65,0x72,0x46
00001c  726f6d4d          DCB      0x72,0x6f,0x6d,0x4d
000020  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000024  79537461          DCB      0x79,0x53,0x74,0x61
000028  636b00            DCB      0x63,0x6b,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000010  70757465          DCB      0x70,0x75,0x74,0x65
000014  52657175          DCB      0x52,0x65,0x71,0x75
000018  69726564          DCB      0x69,0x72,0x65,0x64
00001c  53747269          DCB      0x53,0x74,0x72,0x69
000020  646500            DCB      0x64,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  2e417272          DCB      0x2e,0x41,0x72,0x72
000008  61793264          DCB      0x61,0x79,0x32,0x64
00000c  2e696e69          DCB      0x2e,0x69,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  696e7075          DCB      0x69,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  204e554c          DCB      0x20,0x4e,0x55,0x4c
000018  4c00              DCB      0x4c,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a496e69          DCB      0x3a,0x49,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6542          DCB      0x69,0x7a,0x65,0x42
000018  75666665          DCB      0x75,0x66,0x66,0x65
00001c  7200              DCB      0x72,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
000000  46696c6c          DCB      0x46,0x69,0x6c,0x6c
000004  20706174          DCB      0x20,0x70,0x61,0x74
000008  7465726e          DCB      0x74,0x65,0x72,0x6e
00000c  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000010  74207375          DCB      0x74,0x20,0x73,0x75
000014  70706f72          DCB      0x70,0x70,0x6f,0x72
000018  74656420          DCB      0x74,0x65,0x64,0x20
00001c  666f7220          DCB      0x66,0x6f,0x72,0x20
000020  41727261          DCB      0x41,0x72,0x72,0x61
000024  7900              DCB      0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  206e6f74          DCB      0x20,0x6e,0x6f,0x74
000018  206c6172          DCB      0x20,0x6c,0x61,0x72
00001c  67652065          DCB      0x67,0x65,0x20,0x65
000020  6e6f7567          DCB      0x6e,0x6f,0x75,0x67
000024  682e2025          DCB      0x68,0x2e,0x20,0x25
000028  64206279          DCB      0x64,0x20,0x62,0x79
00002c  74657320          DCB      0x74,0x65,0x73,0x20
000030  69732072          DCB      0x69,0x73,0x20,0x72
000034  65717569          DCB      0x65,0x71,0x75,0x69
000038  7265642e          DCB      0x72,0x65,0x64,0x2e
00003c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a417272          DCB      0x3a,0x41,0x72,0x72
000010  617900            DCB      0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs ; Anki::Embedded::Array<float>::get_size(int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  6500              DCB      0x65,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 2)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
000000  5472616e          DCB      0x54,0x72,0x61,0x6e
000004  73706f73          DCB      0x73,0x70,0x6f,0x73
000008  6500              DCB      0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  6f626a65          DCB      0x6f,0x62,0x6a,0x65
00000c  63747300          DCB      0x63,0x74,0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f6d6174          DCB      0x2f,0x6d,0x61,0x74
000030  7269782e          DCB      0x72,0x69,0x78,0x2e
000034  6800              DCB      0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)
000000  6f757420          DCB      0x6f,0x75,0x74,0x20
000004  6973206e          DCB      0x69,0x73,0x20,0x6e
000008  6f742074          DCB      0x6f,0x74,0x20,0x74
00000c  68652063          DCB      0x68,0x65,0x20,0x63
000010  6f727265          DCB      0x6f,0x72,0x72,0x65
000014  63742073          DCB      0x63,0x74,0x20,0x73
000018  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 5)
000000  696e2061          DCB      0x69,0x6e,0x20,0x61
000004  6e64206f          DCB      0x6e,0x64,0x20,0x6f
000008  75742063          DCB      0x75,0x74,0x20,0x63
00000c  616e6e6f          DCB      0x61,0x6e,0x6e,0x6f
000010  74206265          DCB      0x74,0x20,0x62,0x65
000014  20746865          DCB      0x20,0x74,0x68,0x65
000018  2073616d          DCB      0x20,0x73,0x61,0x6d
00001c  65206172          DCB      0x65,0x20,0x61,0x72
000020  72617900          DCB      0x72,0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
000000  4d756c74          DCB      0x4d,0x75,0x6c,0x74
000004  69706c79          DCB      0x69,0x70,0x6c,0x79
000008  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206d61          DCB      0x74,0x20,0x6d,0x61
000008  74726963          DCB      0x74,0x72,0x69,0x63
00000c  65732061          DCB      0x65,0x73,0x20,0x61
000010  72652069          DCB      0x72,0x65,0x20,0x69
000014  6e636f6d          DCB      0x6e,0x63,0x6f,0x6d
000018  70617469          DCB      0x70,0x61,0x74,0x69
00001c  626c6520          DCB      0x62,0x6c,0x65,0x20
000020  73697a65          DCB      0x73,0x69,0x7a,0x65
000024  7300              DCB      0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f6d6174          DCB      0x2f,0x6d,0x61,0x74
000030  7269782e          DCB      0x72,0x69,0x78,0x2e
000034  6800              DCB      0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  7420616e          DCB      0x74,0x20,0x61,0x6e
000008  64204f75          DCB      0x64,0x20,0x4f,0x75
00000c  74707574          DCB      0x74,0x70,0x75,0x74
000010  206d6174          DCB      0x20,0x6d,0x61,0x74
000014  72696365          DCB      0x72,0x69,0x63,0x65
000018  73206172          DCB      0x73,0x20,0x61,0x72
00001c  6520696e          DCB      0x65,0x20,0x69,0x6e
000020  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000024  61746962          DCB      0x61,0x74,0x69,0x62
000028  6c652073          DCB      0x6c,0x65,0x20,0x73
00002c  697a6573          DCB      0x69,0x7a,0x65,0x73
000030  00                DCB      0x00

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L179.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484e              LDR      r0,|L179.376|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  4b4e              LDR      r3,|L179.380|
000044  4a4e              LDR      r2,|L179.384|
000046  494f              LDR      r1,|L179.388|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L179.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L179.138|
000074  f240310b          MOV      r1,#0x30b
000078  4843              LDR      r0,|L179.392|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  4b43              LDR      r3,|L179.396|
000080  4a43              LDR      r2,|L179.400|
000082  4944              LDR      r1,|L179.404|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L179.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df90e4          LDR      r9,|L179.408|
0000b4  0005              MOVS     r5,r0
0000b6  d00d              BEQ      |L179.212|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21d              BCS      |L179.250|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  4b35              LDR      r3,|L179.412|
0000c8  4a35              LDR      r2,|L179.416|
0000ca  4936              LDR      r1,|L179.420|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  e04d              B        |L179.368|
                  |L179.212|
0000d4  f240301e          MOV      r0,#0x31e
0000d8  e9cd9000          STRD     r9,r0,[sp,#0]
0000dc  4b2f              LDR      r3,|L179.412|
0000de  4a32              LDR      r2,|L179.424|
0000e0  4932              LDR      r1,|L179.428|
0000e2  2005              MOVS     r0,#5
0000e4  f7fffffe          BL       _Anki_Log
0000e8  f8c4b000          STR      r11,[r4,#0]
0000ec  f8c4b004          STR      r11,[r4,#4]
0000f0  f8c4b008          STR      r11,[r4,#8]
0000f4  f8c4a010          STR      r10,[r4,#0x10]
0000f8  e03a              B        |L179.368|
                  |L179.250|
0000fa  a803              ADD      r0,sp,#0xc
0000fc  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000100  b150              CBZ      r0,|L179.280|
000102  f2403026          MOV      r0,#0x326
000106  e9cd9000          STRD     r9,r0,[sp,#0]
00010a  4b24              LDR      r3,|L179.412|
00010c  4a28              LDR      r2,|L179.432|
00010e  4925              LDR      r1,|L179.420|
000110  2005              MOVS     r0,#5
000112  f7fffffe          BL       _Anki_Log
000116  e02b              B        |L179.368|
                  |L179.280|
000118  9903              LDR      r1,[sp,#0xc]
00011a  e9c41503          STRD     r1,r5,[r4,#0xc]
00011e  f105000f          ADD      r0,r5,#0xf
000122  f020000f          BIC      r0,r0,#0xf
000126  e9c47600          STRD     r7,r6,[r4,#0]
00012a  1b40              SUBS     r0,r0,r5
00012c  2e01              CMP      r6,#1
00012e  bfd8              IT       LE
000130  2601              MOVLE    r6,#1
000132  00b1              LSLS     r1,r6,#2
000134  310f              ADDS     r1,r1,#0xf
000136  f021010f          BIC      r1,r1,#0xf
00013a  fb010107          MLA      r1,r1,r7,r0
00013e  4541              CMP      r1,r8
000140  bfdc              ITT      LE
000142  1829              ADDLE    r1,r5,r0
000144  6121              STRLE    r1,[r4,#0x10]
000146  dd13              BLE      |L179.368|
000148  f2403035          MOV      r0,#0x335
00014c  f8cd9000          STR      r9,[sp,#0]
000150  e9cd0101          STRD     r0,r1,[sp,#4]
000154  4b11              LDR      r3,|L179.412|
000156  4a17              LDR      r2,|L179.436|
000158  4914              LDR      r1,|L179.428|
00015a  2005              MOVS     r0,#5
00015c  f7fffffe          BL       _Anki_Log
000160  f8c4b000          STR      r11,[r4,#0]
000164  f8c4b004          STR      r11,[r4,#4]
000168  f8c4b008          STR      r11,[r4,#8]
00016c  f8c4a010          STR      r10,[r4,#0x10]
                  |L179.368|
000170  b005              ADD      sp,sp,#0x14
000172  4620              MOV      r0,r4
000174  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L179.376|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L179.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L179.384|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L179.388|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
                  |L179.392|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L179.396|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
                  |L179.400|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
                  |L179.404|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
                  |L179.408|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L179.412|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L179.416|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
                  |L179.420|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
                  |L179.424|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L179.428|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
                  |L179.432|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
                  |L179.436|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)

                          AREA ||area_number.180||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.180||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE PROC ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
;;;256    
;;;257          template<typename InType, typename OutType> Result Multiply(const Array<InType> &in1, const Array<InType> &in2, Array<OutType> &out)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;258          {
000004  b082              SUB      sp,sp,#8
000006  460e              MOV      r6,r1
;;;259            const s32 in1Height = in1.get_size(0);
000008  2100              MOVS     r1,#0
00000a  9802              LDR      r0,[sp,#8]
00000c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
;;;260            const s32 in1Width = in1.get_size(1);
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  9802              LDR      r0,[sp,#8]
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00001a  4680              MOV      r8,r0
;;;261    
;;;262            const s32 in2Height = in2.get_size(0);
00001c  2100              MOVS     r1,#0
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000024  4605              MOV      r5,r0
;;;263            const s32 in2Width = in2.get_size(1);
000026  2101              MOVS     r1,#1
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
;;;264            const s32 in2Stride = in2.get_stride();
;;;265    
;;;266            AnkiConditionalErrorAndReturnValue(in1Width == in2Height,
00002e  f8dfa154          LDR      r10,|L186.388|
000032  68b4              LDR      r4,[r6,#8]
000034  4607              MOV      r7,r0                 ;263
000036  45a8              CMP      r8,r5
000038  d00e              BEQ      |L186.88|
00003a  f44f7085          MOV      r0,#0x10a
00003e  e9cda000          STRD     r10,r0,[sp,#0]
000042  4b51              LDR      r3,|L186.392|
000044  4a51              LDR      r2,|L186.396|
000046  4952              LDR      r1,|L186.400|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
;;;267              RESULT_FAIL_INVALID_SIZE, "Multiply", "Input matrices are incompatible sizes");
;;;268    
;;;269            AnkiConditionalErrorAndReturnValue(AreEqualSize(in1Height, in2Width, out),
;;;270              RESULT_FAIL_INVALID_SIZE, "Multiply", "Input and Output matrices are incompatible sizes");
;;;271    
;;;272            for(s32 y1=0; y1<in1Height; y1++) {
;;;273              const InType * restrict pIn1 = in1.Pointer(y1, 0);
;;;274              OutType * restrict pOut = out.Pointer(y1, 0);
;;;275    
;;;276              for(s32 x2=0; x2<in2Width; x2++) {
;;;277                const u8 * restrict pIn2 = reinterpret_cast<const u8*>(in2.Pointer(0, x2));
;;;278    
;;;279                OutType accumulator = 0;
;;;280    
;;;281                s32 y2;
;;;282                for(y2=0; y2<in2Height-3; y2+=4) {
;;;283                  const InType in1_0 = pIn1[y2];
;;;284                  const InType in1_1 = pIn1[y2+1];
;;;285                  const InType in1_2 = pIn1[y2+2];
;;;286                  const InType in1_3 = pIn1[y2+3];
;;;287    
;;;288                  const InType in2_0 = *reinterpret_cast<const InType*>(pIn2);
;;;289                  const InType in2_1 = *reinterpret_cast<const InType*>(pIn2 + in2Stride);
;;;290                  const InType in2_2 = *reinterpret_cast<const InType*>(pIn2 + 2*in2Stride);
;;;291                  const InType in2_3 = *reinterpret_cast<const InType*>(pIn2 + 3*in2Stride);
;;;292    
;;;293                  accumulator +=
;;;294                    in1_0 * in2_0 +
;;;295                    in1_1 * in2_1 +
;;;296                    in1_2 * in2_2 +
;;;297                    in1_3 * in2_3;
;;;298    
;;;299                  pIn2 += 4*in2Stride;
;;;300                }
;;;301    
;;;302                for(; y2<in2Height; y2++) {
;;;303                  accumulator += pIn1[y2] * (*reinterpret_cast<const InType*>(pIn2));
;;;304    
;;;305                  pIn2 += in2Stride;
;;;306                }
;;;307    
;;;308                pOut[x2] = accumulator;
;;;309              }
;;;310            }
;;;311    
;;;312            return RESULT_OK;
;;;313          } // template<typename InType, typename OutType> Result Multiply(const Array<InType> &in1, const Array<InType> &in2, Array<OutType> &out)
00004e  b005              ADD      sp,sp,#0x14
000050  f04f60a0          MOV      r0,#0x5000000         ;266
000054  e8bd8ff0          POP      {r4-r11,pc}
                  |L186.88|
000058  f8dd8010          LDR      r8,[sp,#0x10]
00005c  f8dd9000          LDR      r9,[sp,#0]
000060  f8d80010          LDR      r0,[r8,#0x10]
000064  2800              CMP      r0,#0
000066  d07d              BEQ      |L186.356|
000068  f8d80000          LDR      r0,[r8,#0]
00006c  2800              CMP      r0,#0
00006e  bfa4              ITT      GE
000070  f8d80004          LDRGE    r0,[r8,#4]
000074  2800              CMPGE    r0,#0
000076  db75              BLT      |L186.356|
000078  2100              MOVS     r1,#0
00007a  4640              MOV      r0,r8
00007c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000080  4548              CMP      r0,r9
000082  d16f              BNE      |L186.356|
000084  2101              MOVS     r1,#1
000086  4640              MOV      r0,r8
000088  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00008c  42b8              CMP      r0,r7
00008e  d169              BNE      |L186.356|
000090  9800              LDR      r0,[sp,#0]            ;272
000092  f04f0900          MOV      r9,#0                 ;272
000096  2800              CMP      r0,#0                 ;272
000098  dd5f              BLE      |L186.346|
00009a  f1a50803          SUB      r8,r5,#3              ;282
00009e  eddf4a3d          VLDR     s9,|L186.404|
0000a2  eb040a44          ADD      r10,r4,r4,LSL #1      ;291
                  |L186.166|
0000a6  9802              LDR      r0,[sp,#8]            ;291
0000a8  6901              LDR      r1,[r0,#0x10]         ;291
0000aa  6880              LDR      r0,[r0,#8]            ;291
0000ac  fb091c00          MLA      r12,r9,r0,r1          ;291
0000b0  9804              LDR      r0,[sp,#0x10]         ;291
0000b2  6901              LDR      r1,[r0,#0x10]         ;291
0000b4  6880              LDR      r0,[r0,#8]            ;291
0000b6  fb091b00          MLA      r11,r9,r0,r1          ;291
0000ba  2100              MOVS     r1,#0                 ;276
0000bc  2f00              CMP      r7,#0                 ;276
0000be  dd47              BLE      |L186.336|
                  |L186.192|
0000c0  68b3              LDR      r3,[r6,#8]            ;276
0000c2  6932              LDR      r2,[r6,#0x10]         ;276
0000c4  2000              MOVS     r0,#0                 ;277
0000c6  fb002003          MLA      r0,r0,r3,r2           ;277
0000ca  2200              MOVS     r2,#0                 ;282
0000cc  eb000081          ADD      r0,r0,r1,LSL #2       ;282
0000d0  eeb00a64          VMOV.F32 s0,s9                 ;279
0000d4  f1b80f00          CMP      r8,#0                 ;282
0000d8  dd25              BLE      |L186.294|
                  |L186.218|
0000da  eb0c0382          ADD      r3,r12,r2,LSL #2      ;283
0000de  edd03a00          VLDR     s7,[r0,#0]            ;288
0000e2  ed934a00          VLDR     s8,[r3,#0]            ;283
0000e6  ed933a01          VLDR     s6,[r3,#4]            ;284
0000ea  ed932a02          VLDR     s4,[r3,#8]            ;285
0000ee  edd30a03          VLDR     s1,[r3,#0xc]          ;286
0000f2  1903              ADDS     r3,r0,r4              ;289
0000f4  ee643a23          VMUL.F32 s7,s8,s7              ;293
0000f8  edd32a00          VLDR     s5,[r3,#0]            ;289
0000fc  eb000344          ADD      r3,r0,r4,LSL #1       ;290
000100  1d12              ADDS     r2,r2,#4              ;299
000102  ee433a22          VMLA.F32 s7,s6,s5              ;293
000106  edd31a00          VLDR     s3,[r3,#0]            ;290
00010a  eb0a0300          ADD      r3,r10,r0             ;291
00010e  eb000084          ADD      r0,r0,r4,LSL #2       ;299
000112  ed931a00          VLDR     s2,[r3,#0]            ;291
000116  4590              CMP      r8,r2                 ;282
000118  ee423a21          VMLA.F32 s7,s4,s3              ;293
00011c  ee403a81          VMLA.F32 s7,s1,s2              ;293
000120  ee330a80          VADD.F32 s0,s7,s0              ;293
000124  dcd9              BGT      |L186.218|
                  |L186.294|
000126  42aa              CMP      r2,r5                 ;302
000128  da0b              BGE      |L186.322|
                  |L186.298|
00012a  eb0c0382          ADD      r3,r12,r2,LSL #2      ;303
00012e  ed901a00          VLDR     s2,[r0,#0]            ;303
000132  edd30a00          VLDR     s1,[r3,#0]            ;303
000136  1c52              ADDS     r2,r2,#1              ;305
000138  4420              ADD      r0,r0,r4              ;305
00013a  ee000a81          VMLA.F32 s0,s1,s2              ;303
00013e  42aa              CMP      r2,r5                 ;302
000140  dbf3              BLT      |L186.298|
                  |L186.322|
000142  eb0b0081          ADD      r0,r11,r1,LSL #2      ;308
000146  1c49              ADDS     r1,r1,#1              ;308
000148  ed800a00          VSTR     s0,[r0,#0]            ;308
00014c  42b9              CMP      r1,r7                 ;276
00014e  dbb7              BLT      |L186.192|
                  |L186.336|
000150  9800              LDR      r0,[sp,#0]            ;272
000152  f1090901          ADD      r9,r9,#1              ;272
000156  4581              CMP      r9,r0                 ;272
000158  dba5              BLT      |L186.166|
                  |L186.346|
00015a  b005              ADD      sp,sp,#0x14
00015c  2000              MOVS     r0,#0                 ;312
00015e  e8bd8ff0          POP      {r4-r11,pc}
000162  e7ff              B        |L186.356|
                  |L186.356|
000164  f240100d          MOV      r0,#0x10d             ;269
000168  e9cda000          STRD     r10,r0,[sp,#0]        ;269
00016c  4b06              LDR      r3,|L186.392|
00016e  4a0a              LDR      r2,|L186.408|
000170  4907              LDR      r1,|L186.400|
000172  2005              MOVS     r0,#5                 ;269
000174  f7fffffe          BL       _Anki_Log
000178  b005              ADD      sp,sp,#0x14
00017a  f04f60a0          MOV      r0,#0x5000000         ;269
00017e  e8bd8ff0          POP      {r4-r11,pc}
;;;314    
                          ENDP

000182  0000              DCW      0x0000
                  |L186.388|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L186.392|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
                  |L186.396|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
                  |L186.400|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
                  |L186.404|
000194  00000000          DCFS     0x00000000 ; 0
                  |L186.408|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)

                          AREA ||area_number.187||, COMGROUP=_ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.187||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi PROC ; Anki::Embedded::Array<float>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0d              BGE      |L193.36|
000008  f24021e3          MOV      r1,#0x2e3
00000c  4809              LDR      r0,|L193.52|
00000e  e9cd0100          STRD     r0,r1,[sp,#0]
000012  4b09              LDR      r3,|L193.56|
000014  4a09              LDR      r2,|L193.60|
000016  490a              LDR      r1,|L193.64|
000018  2005              MOVS     r0,#5
00001a  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
00001e  b003              ADD      sp,sp,#0xc
000020  2000              MOVS     r0,#0                 ;739
000022  bd00              POP      {pc}
                  |L193.36|
000024  2902              CMP      r1,#2                 ;742
000026  bf2c              ITE      CS                    ;743
000028  2001              MOVCS    r0,#1                 ;743
00002a  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
00002e  b003              ADD      sp,sp,#0xc
000030  bd00              POP      {pc}
;;;747    
                          ENDP

000032  0000              DCW      0x0000
                  |L193.52|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
                  |L193.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 3)
                  |L193.60|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 2)
                  |L193.64|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs ; Anki::Embedded::Array<float>::get_size(int) const::string

                          AREA ||area_number.194||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.194||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_||, COMGROUP=_ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ PROC ; Anki::Embedded::operator *<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
;;;270        template<typename Type>
;;;271        Point3<Type> operator* (const Array<Type>& M, const Point3<Type>& p)
000000  b410              PUSH     {r4}
000002  f8d1c008          LDR      r12,[r1,#8]
000006  690b              LDR      r3,[r1,#0x10]
;;;272        {
;;;273          // Matrix M must be 3x3
;;;274          AnkiAssert(AreEqualSize(3, 3, M));
;;;275    
;;;276          return Point3<Type>(M[0][0]*p.x + M[0][1]*p.y + M[0][2]*p.z,
000008  2400              MOVS     r4,#0
00000a  fb04310c          MLA      r1,r4,r12,r3
00000e  ed921a00          VLDR     s2,[r2,#0]
000012  ed910a00          VLDR     s0,[r1,#0]
000016  edd20a01          VLDR     s1,[r2,#4]
00001a  edd11a02          VLDR     s3,[r1,#8]
00001e  ee202a01          VMUL.F32 s4,s0,s2
000022  ed910a01          VLDR     s0,[r1,#4]
000026  2101              MOVS     r1,#1
000028  fb01310c          MLA      r1,r1,r12,r3
00002c  ee002a20          VMLA.F32 s4,s0,s1
000030  ed920a02          VLDR     s0,[r2,#8]
000034  edd12a01          VLDR     s5,[r1,#4]
000038  ee012a80          VMLA.F32 s4,s3,s0
00003c  edd11a00          VLDR     s3,[r1,#0]
000040  ee611a81          VMUL.F32 s3,s3,s2
000044  ee421aa0          VMLA.F32 s3,s5,s1
000048  edd12a02          VLDR     s5,[r1,#8]
00004c  2102              MOVS     r1,#2
00004e  fb01310c          MLA      r1,r1,r12,r3
000052  ee421a80          VMLA.F32 s3,s5,s0
000056  edd12a00          VLDR     s5,[r1,#0]
00005a  ee221a81          VMUL.F32 s2,s5,s2
00005e  edd12a01          VLDR     s5,[r1,#4]
000062  ee021aa0          VMLA.F32 s2,s5,s1
000066  edd10a02          VLDR     s1,[r1,#8]
00006a  ed802a00          VSTR     s4,[r0,#0]
00006e  edc01a01          VSTR     s3,[r0,#4]
000072  ee001a80          VMLA.F32 s2,s1,s0
000076  ed801a02          VSTR     s2,[r0,#8]
;;;277            M[1][0]*p.x + M[1][1]*p.y + M[1][2]*p.z,
;;;278            M[2][0]*p.x + M[2][1]*p.y + M[2][2]*p.z);
;;;279        }
00007a  bc10              POP      {r4}
00007c  4770              BX       lr
;;;280    
                          ENDP


                          AREA ||area_number.201||, COMGROUP=_ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_, LINKORDER=||t._ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.201||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15ComputePoseDiffIfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_6Point3IS4_EES7_SB_RS5_RS9_NS0_11MemoryStackE||, COMGROUP=_ZN4Anki8Embedded15ComputePoseDiffIfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_6Point3IS4_EES7_SB_RS5_RS9_NS0_11MemoryStackE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15ComputePoseDiffIfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_6Point3IS4_EES7_SB_RS5_RS9_NS0_11MemoryStackE PROC ; Anki::Embedded::ComputePoseDiff<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::MemoryStack)
;;;289        template<typename Type>
;;;290        Result ComputePoseDiff(const Array<Type>& R1, const Point3<Type>& T1,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;291          const Array<Type>& R2, const Point3<Type>& T2,
;;;292          Array<Type>& Rdiff, Point3<Type>& Tdiff,
;;;293          MemoryStack scratch)
;;;294        {
000004  b08f              SUB      sp,sp,#0x3c
000006  4698              MOV      r8,r3
000008  4689              MOV      r9,r1
00000a  4605              MOV      r5,r0
;;;295          // All the rotation matrices should be 3x3
;;;296          AnkiAssert(AreEqualSize(3, 3, R1));
;;;297          AnkiAssert(AreEqualSize(3, 3, R2));
;;;298          AnkiAssert(AreEqualSize(3, 3, Rdiff));
;;;299    
;;;300          Array<Type> invR1 = Array<Type>(3,3,scratch);
00000c  2300              MOVS     r3,#0
00000e  461a              MOV      r2,r3
000010  2101              MOVS     r1,#1
000012  a80e              ADD      r0,sp,#0x38
000014  9c1e              LDR      r4,[sp,#0x78]
000016  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00001a  6800              LDR      r0,[r0,#0]
00001c  2203              MOVS     r2,#3
00001e  9000              STR      r0,[sp,#0]
000020  4623              MOV      r3,r4
000022  4611              MOV      r1,r2
000024  a802              ADD      r0,sp,#8
000026  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;301          Matrix::Transpose(R1, invR1);
00002a  ac02              ADD      r4,sp,#8
00002c  2100              MOVS     r1,#0
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000034  900d              STR      r0,[sp,#0x34]
000036  2101              MOVS     r1,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00003e  4607              MOV      r7,r0
000040  6928              LDR      r0,[r5,#0x10]
000042  9e04              LDR      r6,[sp,#0x10]
000044  f8dfa1e8          LDR      r10,|L207.560|
000048  2800              CMP      r0,#0
00004a  f00080cf          BEQ.W    |L207.492|
00004e  6828              LDR      r0,[r5,#0]
000050  2800              CMP      r0,#0
000052  bfa4              ITT      GE
000054  6868              LDRGE    r0,[r5,#4]
000056  2800              CMPGE    r0,#0
000058  f2c080c8          BLT.W    |L207.492|
00005c  9806              LDR      r0,[sp,#0x18]
00005e  2800              CMP      r0,#0
000060  f00080c4          BEQ.W    |L207.492|
000064  9802              LDR      r0,[sp,#8]
000066  2800              CMP      r0,#0
000068  bfa4              ITT      GE
00006a  9803              LDRGE    r0,[sp,#0xc]
00006c  2800              CMPGE    r0,#0
00006e  db7d              BLT      |L207.364|
000070  2101              MOVS     r1,#1
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000078  9000              STR      r0,[sp,#0]
00007a  2100              MOVS     r1,#0
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000082  4683              MOV      r11,r0
000084  9806              LDR      r0,[sp,#0x18]
000086  2800              CMP      r0,#0
000088  d071              BEQ      |L207.366|
00008a  9802              LDR      r0,[sp,#8]
00008c  2800              CMP      r0,#0
00008e  bfa4              ITT      GE
000090  9803              LDRGE    r0,[sp,#0xc]
000092  2800              CMPGE    r0,#0
000094  db6b              BLT      |L207.366|
000096  2100              MOVS     r1,#0
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00009e  9900              LDR      r1,[sp,#0]
0000a0  4288              CMP      r0,r1
0000a2  d164              BNE      |L207.366|
0000a4  2101              MOVS     r1,#1
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000ac  4558              CMP      r0,r11
0000ae  d15e              BNE      |L207.366|
0000b0  6928              LDR      r0,[r5,#0x10]
0000b2  2800              CMP      r0,#0
0000b4  d07e              BEQ      |L207.436|
0000b6  6829              LDR      r1,[r5,#0]
0000b8  2900              CMP      r1,#0
0000ba  bfa4              ITT      GE
0000bc  6869              LDRGE    r1,[r5,#4]
0000be  2900              CMPGE    r1,#0
0000c0  db78              BLT      |L207.436|
0000c2  9906              LDR      r1,[sp,#0x18]
0000c4  2900              CMP      r1,#0
0000c6  d075              BEQ      |L207.436|
0000c8  9902              LDR      r1,[sp,#8]
0000ca  2900              CMP      r1,#0
0000cc  bfa4              ITT      GE
0000ce  9903              LDRGE    r1,[sp,#0xc]
0000d0  2900              CMPGE    r1,#0
0000d2  db6f              BLT      |L207.436|
0000d4  9000              STR      r0,[sp,#0]
0000d6  9806              LDR      r0,[sp,#0x18]
0000d8  9001              STR      r0,[sp,#4]
0000da  2000              MOVS     r0,#0
0000dc  4669              MOV      r1,sp
                  |L207.222|
0000de  1c42              ADDS     r2,r0,#1
0000e0  2a02              CMP      r2,#2
0000e2  bfb8              IT       LT
0000e4  f8513020          LDRLT    r3,[r1,r0,LSL #2]
0000e8  da06              BGE      |L207.248|
                  |L207.234|
0000ea  f851c022          LDR      r12,[r1,r2,LSL #2]
0000ee  4563              CMP      r3,r12
0000f0  d060              BEQ      |L207.436|
0000f2  1c52              ADDS     r2,r2,#1
0000f4  2a02              CMP      r2,#2
0000f6  dbf8              BLT      |L207.234|
                  |L207.248|
0000f8  1c40              ADDS     r0,r0,#1
0000fa  2802              CMP      r0,#2
0000fc  dbef              BLT      |L207.222|
0000fe  980d              LDR      r0,[sp,#0x34]
000100  2100              MOVS     r1,#0
000102  2800              CMP      r0,#0
000104  bfc8              IT       GT
000106  f1a70b01          SUBGT    r11,r7,#1
00010a  dd3a              BLE      |L207.386|
                  |L207.268|
00010c  68aa              LDR      r2,[r5,#8]
00010e  6928              LDR      r0,[r5,#0x10]
000110  68a3              LDR      r3,[r4,#8]
000112  fb010c02          MLA      r12,r1,r2,r0
000116  6922              LDR      r2,[r4,#0x10]
000118  2000              MOVS     r0,#0
00011a  fb002003          MLA      r0,r0,r3,r2
00011e  eb000a81          ADD      r10,r0,r1,LSL #2
000122  2000              MOVS     r0,#0
000124  4602              MOV      r2,r0
000126  f1bb0f00          CMP      r11,#0
00012a  dd12              BLE      |L207.338|
                  |L207.300|
00012c  eb0c0382          ADD      r3,r12,r2,LSL #2
000130  eb0a0e00          ADD      lr,r10,r0
000134  ed930a00          VLDR     s0,[r3,#0]
000138  edd30a01          VLDR     s1,[r3,#4]
00013c  1983              ADDS     r3,r0,r6
00013e  4453              ADD      r3,r3,r10
000140  ed8e0a00          VSTR     s0,[lr,#0]
000144  1c92              ADDS     r2,r2,#2
000146  edc30a00          VSTR     s1,[r3,#0]
00014a  eb000046          ADD      r0,r0,r6,LSL #1
00014e  4593              CMP      r11,r2
000150  dcec              BGT      |L207.300|
                  |L207.338|
000152  42ba              CMP      r2,r7
000154  da11              BGE      |L207.378|
                  |L207.342|
000156  68a3              LDR      r3,[r4,#8]
000158  6920              LDR      r0,[r4,#0x10]
00015a  fb020003          MLA      r0,r2,r3,r0
00015e  eb0c0382          ADD      r3,r12,r2,LSL #2
000162  eb000081          ADD      r0,r0,r1,LSL #2
000166  ed930a00          VLDR     s0,[r3,#0]
00016a  e001              B        |L207.368|
                  |L207.364|
00016c  e03e              B        |L207.492|
                  |L207.366|
00016e  e048              B        |L207.514|
                  |L207.368|
000170  1c52              ADDS     r2,r2,#1
000172  ed800a00          VSTR     s0,[r0,#0]
000176  42ba              CMP      r2,r7
000178  dbed              BLT      |L207.342|
                  |L207.378|
00017a  980d              LDR      r0,[sp,#0x34]
00017c  1c49              ADDS     r1,r1,#1
00017e  4281              CMP      r1,r0
000180  dbc4              BLT      |L207.268|
                  |L207.386|
;;;302    
;;;303          Matrix::Multiply(invR1, R2, Rdiff);
000182  a802              ADD      r0,sp,#8
000184  9a1c              LDR      r2,[sp,#0x70]
000186  9911              LDR      r1,[sp,#0x44]
000188  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
00018c  ed980a00          VLDR     s0,[r8,#0]
000190  edd90a00          VLDR     s1,[r9,#0]
000194  ed991a01          VLDR     s2,[r9,#4]
000198  edd91a02          VLDR     s3,[r9,#8]
00019c  ee700a60          VSUB.F32 s1,s0,s1
0001a0  ed980a01          VLDR     s0,[r8,#4]
0001a4  9c1d              LDR      r4,[sp,#0x74]
0001a6  ee301a41          VSUB.F32 s2,s0,s2
0001aa  ed980a02          VLDR     s0,[r8,#8]
0001ae  ee300a61          VSUB.F32 s0,s0,s3
0001b2  e000              B        |L207.438|
                  |L207.436|
0001b4  e030              B        |L207.536|
                  |L207.438|
0001b6  edcd0a0a          VSTR     s1,[sp,#0x28]
0001ba  ed8d1a0b          VSTR     s2,[sp,#0x2c]
0001be  ed8d0a0c          VSTR     s0,[sp,#0x30]
;;;304          Tdiff = invR1 * (T2 - T1);
0001c2  aa0a              ADD      r2,sp,#0x28
0001c4  a902              ADD      r1,sp,#8
0001c6  a807              ADD      r0,sp,#0x1c
0001c8  f7fffffe          BL       _ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
0001cc  ed9d0a07          VLDR     s0,[sp,#0x1c]
;;;305    
;;;306          return RESULT_OK;
0001d0  2000              MOVS     r0,#0
0001d2  ed840a00          VSTR     s0,[r4,#0]
0001d6  ed9d0a08          VLDR     s0,[sp,#0x20]
0001da  ed840a01          VSTR     s0,[r4,#4]
0001de  ed9d0a09          VLDR     s0,[sp,#0x24]
0001e2  ed840a02          VSTR     s0,[r4,#8]
;;;307        }
0001e6  b013              ADD      sp,sp,#0x4c
0001e8  e8bd8ff0          POP      {r4-r11,pc}
                  |L207.492|
0001ec  f44f7033          MOV      r0,#0x2cc
0001f0  e9cda000          STRD     r10,r0,[sp,#0]
0001f4  4b0f              LDR      r3,|L207.564|
0001f6  4a10              LDR      r2,|L207.568|
0001f8  4910              LDR      r1,|L207.572|
0001fa  2005              MOVS     r0,#5
0001fc  f7fffffe          BL       _Anki_Log
000200  e7bf              B        |L207.386|
                  |L207.514|
000202  f24020cf          MOV      r0,#0x2cf
000206  e9cda000          STRD     r10,r0,[sp,#0]
00020a  4b0a              LDR      r3,|L207.564|
00020c  4a0c              LDR      r2,|L207.576|
00020e  490b              LDR      r1,|L207.572|
000210  2005              MOVS     r0,#5
000212  f7fffffe          BL       _Anki_Log
000216  e7b4              B        |L207.386|
                  |L207.536|
000218  f24020d2          MOV      r0,#0x2d2
00021c  e9cda000          STRD     r10,r0,[sp,#0]
000220  4b04              LDR      r3,|L207.564|
000222  4a08              LDR      r2,|L207.580|
000224  4905              LDR      r1,|L207.572|
000226  2005              MOVS     r0,#5
000228  f7fffffe          BL       _Anki_Log
00022c  e7a9              B        |L207.386|
;;;308    
                          ENDP

00022e  0000              DCW      0x0000
                  |L207.560|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L207.564|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
                  |L207.568|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
                  |L207.572|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
                  |L207.576|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)
                  |L207.580|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 5)

                          AREA ||area_number.208||, COMGROUP=_ZN4Anki8Embedded15ComputePoseDiffIfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_6Point3IS4_EES7_SB_RS5_RS9_NS0_11MemoryStackE, LINKORDER=||t._ZN4Anki8Embedded15ComputePoseDiffIfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_6Point3IS4_EES7_SB_RS5_RS9_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.208||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15ComputePoseDiffIfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_6Point3IS4_EES7_SB_RS5_RS9_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000054  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a4d756c          DCB      0x3a,0x4d,0x75,0x6c
000028  7469706c          DCB      0x74,0x69,0x70,0x6c
00002c  7928636f          DCB      0x79,0x28,0x63,0x6f
000030  6e737420          DCB      0x6e,0x73,0x74,0x20
000034  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000038  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00003c  62656464          DCB      0x62,0x65,0x64,0x64
000040  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000044  41727261          DCB      0x41,0x72,0x72,0x61
000048  793c5479          DCB      0x79,0x3c,0x54,0x79
00004c  70653e20          DCB      0x70,0x65,0x3e,0x20
000050  262c2063          DCB      0x26,0x2c,0x20,0x63
000054  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a417272          DCB      0x3a,0x41,0x72,0x72
00006c  61793c54          DCB      0x61,0x79,0x3c,0x54
000070  7970653e          DCB      0x79,0x70,0x65,0x3e
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00007c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000080  62656464          DCB      0x62,0x65,0x64,0x64
000084  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000088  41727261          DCB      0x41,0x72,0x72,0x61
00008c  793c4f75          DCB      0x79,0x3c,0x4f,0x75
000090  74547970          DCB      0x74,0x54,0x79,0x70
000094  653e2026          DCB      0x65,0x3e,0x20,0x26
000098  29205b77          DCB      0x29,0x20,0x5b,0x77
00009c  69746820          DCB      0x69,0x74,0x68,0x20
0000a0  496e5479          DCB      0x49,0x6e,0x54,0x79
0000a4  7065203d          DCB      0x70,0x65,0x20,0x3d
0000a8  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0000ac  61742c20          DCB      0x61,0x74,0x2c,0x20
0000b0  4f757454          DCB      0x4f,0x75,0x74,0x54
0000b4  79706520          DCB      0x79,0x70,0x65,0x20
0000b8  3d20666c          DCB      0x3d,0x20,0x66,0x6c
0000bc  6f61745d          DCB      0x6f,0x61,0x74,0x5d
0000c0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a547261          DCB      0x3a,0x54,0x72,0x61
000028  6e73706f          DCB      0x6e,0x73,0x70,0x6f
00002c  73652863          DCB      0x73,0x65,0x28,0x63
000030  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000034  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000038  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00003c  6d626564          DCB      0x6d,0x62,0x65,0x64
000040  6465643a          DCB      0x64,0x65,0x64,0x3a
000044  3a417272          DCB      0x3a,0x41,0x72,0x72
000048  61793c54          DCB      0x61,0x79,0x3c,0x54
00004c  7970653e          DCB      0x79,0x70,0x65,0x3e
000050  20262c20          DCB      0x20,0x26,0x2c,0x20
000054  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000058  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00005c  62656464          DCB      0x62,0x65,0x64,0x64
000060  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000064  41727261          DCB      0x41,0x72,0x72,0x61
000068  793c4f75          DCB      0x79,0x3c,0x4f,0x75
00006c  74547970          DCB      0x74,0x54,0x79,0x70
000070  653e2026          DCB      0x65,0x3e,0x20,0x26
000074  29205b77          DCB      0x29,0x20,0x5b,0x77
000078  69746820          DCB      0x69,0x74,0x68,0x20
00007c  496e5479          DCB      0x49,0x6e,0x54,0x79
000080  7065203d          DCB      0x70,0x65,0x20,0x3d
000084  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000088  61742c20          DCB      0x61,0x74,0x2c,0x20
00008c  4f757454          DCB      0x4f,0x75,0x74,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000098  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00009c  00                DCB      0x00
