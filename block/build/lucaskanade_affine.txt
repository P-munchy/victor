; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\lucaskanade_affine.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\lucaskanade_affine.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\lucaskanade_affine.crf ..\coretech\vision\robot\src\lucasKanade_Affine.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::UpdateTrack(const Anki::Embedded::Array<unsigned char>&, int, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
;;;48     
;;;49           Result LucasKanadeTracker_Affine::UpdateTrack(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;50             const Array<u8> &nextImage,
;;;51             const s32 maxIterations,
;;;52             const f32 convergenceTolerance,
;;;53             const u8 verify_maxPixelDifference,
;;;54             bool &verify_converged,
;;;55             s32 &verify_meanAbsoluteDifference, //< For all pixels in the template, compute the mean difference between the template and the final warped template
;;;56             s32 &verify_numInBounds, // How many template pixels are in the image, after the template is warped?
;;;57             s32 &verify_numSimilarPixels, //< For all pixels in the template, how many are within verifyMaxPixelDifference grayvalues? Use in conjunction with get_numTemplatePixels() for a percentage.
;;;58             MemoryStack scratch)
;;;59           {
000004  4606              MOV      r6,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  ed2d8b02          VPUSH    {d8}
00000e  b099              SUB      sp,sp,#0x64
;;;60             Result lastResult;
;;;61     
;;;62             for(s32 iScale=numPyramidLevels-1; iScale>=0; iScale--) {
000010  6840              LDR      r0,[r0,#4]
000012  e9dd872c          LDRD     r8,r7,[sp,#0xb0]      ;59
000016  9d2a              LDR      r5,[sp,#0xa8]
000018  1e44              SUBS     r4,r0,#1
00001a  eeb08a40          VMOV.F32 s16,s0                ;59
00001e  2c00              CMP      r4,#0
000020  bfa4              ITT      GE
000022  f04f0900          MOVGE    r9,#0
;;;63               verify_converged = false;
;;;64     
;;;65               BeginBenchmark("UpdateTrack.refineTranslation");
;;;66               if((lastResult = IterativelyRefineTrack(nextImage, maxIterations, iScale, convergenceTolerance, Transformations::TRANSFORM_TRANSLATION, verify_converged, scratch)) != RESULT_OK)
000026  f44f7a00          MOVGE    r10,#0x200
00002a  db45              BLT      |L1.184|
                  |L1.44|
00002c  f8859000          STRB     r9,[r5,#0]            ;63
000030  a02b              ADR      r0,|L1.224|
000032  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000036  a80a              ADD      r0,sp,#0x28
000038  992e              LDR      r1,[sp,#0xb8]
00003a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00003e  f8cda000          STR      r10,[sp,#0]
000042  e9cd5001          STRD     r5,r0,[sp,#4]
000046  e9dd121e          LDRD     r1,r2,[sp,#0x78]
00004a  eeb00a48          VMOV.F32 s0,s16
00004e  4623              MOV      r3,r4
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
000056  2800              CMP      r0,#0
;;;67                 return lastResult;
;;;68               EndBenchmark("UpdateTrack.refineTranslation");
;;;69     
;;;70               if(this->transformation.get_transformType() != Transformations::TRANSFORM_TRANSLATION) {
;;;71                 BeginBenchmark("UpdateTrack.refineOther");
;;;72                 if((lastResult = IterativelyRefineTrack(nextImage, maxIterations, iScale, convergenceTolerance, this->transformation.get_transformType(), verify_converged, scratch)) != RESULT_OK)
;;;73                   return lastResult;
;;;74                 EndBenchmark("UpdateTrack.refineOther");
;;;75               }
;;;76             } // for(s32 iScale=numPyramidLevels; iScale>=0; iScale--)
;;;77     
;;;78             //lastResult = this->VerifyTrack_Projective(nextImage, verify_maxPixelDifference, verify_meanAbsoluteDifference, verify_numInBounds, verify_numSimilarPixels, scratch);
;;;79     
;;;80             lastResult = this->VerifyTrack_Projective(
;;;81               nextImage,
;;;82               verify_maxPixelDifference,
;;;83               verify_meanAbsoluteDifference, verify_numInBounds, verify_numSimilarPixels,
;;;84               scratch);
;;;85     
;;;86             return lastResult;
;;;87           }
000058  bf1f              ITTTT    NE
00005a  b019              ADDNE    sp,sp,#0x64
00005c  ecbd8b02          VPOPNE   {d8}
000060  b006              ADDNE    sp,sp,#0x18
000062  e8bd8ff0          POPNE    {r4-r11,pc}
000066  a01e              ADR      r0,|L1.224|
000068  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00006c  f1060018          ADD      r0,r6,#0x18           ;70
000070  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000074  f5b07f00          CMP      r0,#0x200             ;70
000078  d01c              BEQ      |L1.180|
00007a  a021              ADR      r0,|L1.256|
00007c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000080  a811              ADD      r0,sp,#0x44           ;72
000082  992e              LDR      r1,[sp,#0xb8]         ;72
000084  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000088  4683              MOV      r11,r0                ;72
00008a  f1060018          ADD      r0,r6,#0x18           ;72
00008e  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000092  e9cd0500          STRD     r0,r5,[sp,#0]         ;72
000096  e9dd121e          LDRD     r1,r2,[sp,#0x78]      ;72
00009a  eeb00a48          VMOV.F32 s0,s16                ;72
00009e  4623              MOV      r3,r4                 ;72
0000a0  f8cdb008          STR      r11,[sp,#8]           ;72
0000a4  4630              MOV      r0,r6                 ;72
0000a6  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
0000aa  2800              CMP      r0,#0                 ;72
0000ac  d112              BNE      |L1.212|
0000ae  a014              ADR      r0,|L1.256|
0000b0  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
                  |L1.180|
0000b4  1e64              SUBS     r4,r4,#1              ;62
0000b6  d5b9              BPL      |L1.44|
                  |L1.184|
0000b8  a803              ADD      r0,sp,#0xc            ;80
0000ba  992e              LDR      r1,[sp,#0xb8]         ;80
0000bc  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0000c0  f8cd8000          STR      r8,[sp,#0]            ;80
0000c4  e9cd7001          STRD     r7,r0,[sp,#4]         ;80
0000c8  4630              MOV      r0,r6                 ;80
0000ca  9b2b              LDR      r3,[sp,#0xac]         ;80
0000cc  9a20              LDR      r2,[sp,#0x80]         ;80
0000ce  991e              LDR      r1,[sp,#0x78]         ;80
0000d0  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::VerifyTrack_Projective(const Anki::Embedded::Array<unsigned char>&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const
                  |L1.212|
0000d4  b019              ADD      sp,sp,#0x64
0000d6  ecbd8b02          VPOP     {d8}
0000da  b006              ADD      sp,sp,#0x18
0000dc  e8bd8ff0          POP      {r4-r11,pc}
;;;88     
                          ENDP

                  |L1.224|
0000e0  55706461          DCB      "UpdateTrack.refineTranslation",0
0000e4  74655472
0000e8  61636b2e
0000ec  72656669
0000f0  6e655472
0000f4  616e736c
0000f8  6174696f
0000fc  6e00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L1.256|
000100  55706461          DCB      "UpdateTrack.refineOther",0
000104  74655472
000108  61636b2e
00010c  72656669
000110  6e654f74
000114  68657200

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
;;;88     
;;;89           Result LucasKanadeTracker_Affine::IterativelyRefineTrack(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, const Transformations::TransformType curTransformType, bool &verify_converged, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;90           {
000004  460c              MOV      r4,r1
000006  ed2d8b02          VPUSH    {d8}
00000a  b089              SUB      sp,sp,#0x24
00000c  4605              MOV      r5,r0
00000e  e9dd9814          LDRD     r9,r8,[sp,#0x50]
000012  eeb08a40          VMOV.F32 s16,s0
000016  469a              MOV      r10,r3
000018  4693              MOV      r11,r2
;;;91             const s32 nextImageHeight = nextImage.get_size(0);
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;92             const s32 nextImageWidth = nextImage.get_size(1);
000022  9000              STR      r0,[sp,#0]
000024  2101              MOVS     r1,#1
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00002c  4607              MOV      r7,r0
;;;93     
;;;94             AnkiConditionalErrorAndReturnValue(this->IsValid() == true,
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast7IsValidEv ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::IsValid() const
000034  4e56              LDR      r6,|L2.400|
000036  2800              CMP      r0,#0
000038  d01f              BEQ      |L2.122|
00003a  6920              LDR      r0,[r4,#0x10]
00003c  2800              CMP      r0,#0
00003e  d027              BEQ      |L2.144|
000040  6820              LDR      r0,[r4,#0]
000042  2800              CMP      r0,#0
000044  bfa4              ITT      GE
000046  6860              LDRGE    r0,[r4,#4]
000048  2800              CMPGE    r0,#0
00004a  db21              BLT      |L2.144|
;;;95               RESULT_FAIL, "LucasKanadeTracker_Affine::IterativelyRefineTrack", "This object is not initialized");
;;;96     
;;;97             AnkiConditionalErrorAndReturnValue(nextImage.IsValid(),
;;;98               RESULT_FAIL_INVALID_OBJECT, "LucasKanadeTracker_Affine::IterativelyRefineTrack", "nextImage is not valid");
;;;99     
;;;100            AnkiConditionalErrorAndReturnValue(maxIterations > 0 && maxIterations < 1000,
00004c  f1bb0f00          CMP      r11,#0
000050  dd03              BLE      |L2.90|
000052  f5bb7f7a          CMP      r11,#0x3e8
000056  f2c08027          BLT.W    |L2.168|
                  |L2.90|
00005a  2064              MOVS     r0,#0x64
00005c  e9cd6000          STRD     r6,r0,[sp,#0]
000060  a34c              ADR      r3,|L2.404|
000062  a259              ADR      r2,|L2.456|
000064  a167              ADR      r1,|L2.516|
000066  2005              MOVS     r0,#5
000068  f7fffffe          BL       _Anki_Log
00006c  f04f7040          MOV      r0,#0x3000000
                  |L2.112|
;;;101              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_Affine::IterativelyRefineTrack", "maxIterations must be greater than zero and less than 1000");
;;;102    
;;;103            AnkiConditionalErrorAndReturnValue(whichScale >= 0 && whichScale < this->numPyramidLevels,
;;;104              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_Affine::IterativelyRefineTrack", "whichScale is invalid");
;;;105    
;;;106            AnkiConditionalErrorAndReturnValue(convergenceTolerance > 0.0f,
;;;107              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_Affine::IterativelyRefineTrack", "convergenceTolerance must be greater than zero");
;;;108    
;;;109            AnkiConditionalErrorAndReturnValue(nextImageHeight == templateImageHeight && nextImageWidth == templateImageWidth,
;;;110              RESULT_FAIL_INVALID_SIZE, "LucasKanadeTracker_Affine::IterativelyRefineTrack", "nextImage must be the same size as the template");
;;;111    
;;;112            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
;;;113            const s32 initialImagePowerS32 = Log2u32(static_cast<u32>(initialImageScaleS32));
;;;114    
;;;115            AnkiConditionalErrorAndReturnValue(((1<<initialImagePowerS32)*nextImageWidth) == BASE_IMAGE_WIDTH,
;;;116              RESULT_FAIL_INVALID_SIZE, "LucasKanadeTracker_Affine::IterativelyRefineTrack", "The templateImage must be a power of two smaller than BASE_IMAGE_WIDTH");
;;;117    
;;;118            if(curTransformType == Transformations::TRANSFORM_TRANSLATION) {
;;;119              return IterativelyRefineTrack_Translation(nextImage, maxIterations, whichScale, convergenceTolerance, verify_converged, scratch);
;;;120            } else if(curTransformType == Transformations::TRANSFORM_AFFINE) {
;;;121              return IterativelyRefineTrack_Affine(nextImage, maxIterations, whichScale, convergenceTolerance, verify_converged, scratch);
;;;122            }
;;;123    
;;;124            return RESULT_FAIL;
;;;125          } // Result LucasKanadeTracker_Affine::IterativelyRefineTrack(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, const TransformType curTransformType, bool &verify_converged, MemoryStack scratch)
000070  b009              ADD      sp,sp,#0x24
000072  ecbd8b02          VPOP     {d8}
000076  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.122|
00007a  205e              MOVS     r0,#0x5e              ;94
00007c  e9cd6000          STRD     r6,r0,[sp,#0]         ;94
000080  a344              ADR      r3,|L2.404|
000082  a26d              ADR      r2,|L2.568|
000084  a15f              ADR      r1,|L2.516|
000086  2005              MOVS     r0,#5                 ;94
000088  f7fffffe          BL       _Anki_Log
00008c  2001              MOVS     r0,#1                 ;94
00008e  e7ef              B        |L2.112|
                  |L2.144|
000090  2061              MOVS     r0,#0x61              ;97
000092  e9cd6000          STRD     r6,r0,[sp,#0]         ;97
000096  a33f              ADR      r3,|L2.404|
000098  a26f              ADR      r2,|L2.600|
00009a  a15a              ADR      r1,|L2.516|
00009c  2005              MOVS     r0,#5                 ;97
00009e  f7fffffe          BL       _Anki_Log
0000a2  f04f6080          MOV      r0,#0x4000000         ;97
0000a6  e7e3              B        |L2.112|
                  |L2.168|
0000a8  f1ba0f00          CMP      r10,#0                ;103
0000ac  bfa4              ITT      GE                    ;103
0000ae  6868              LDRGE    r0,[r5,#4]            ;103
0000b0  4550              CMPGE    r0,r10                ;103
0000b2  dc0b              BGT      |L2.204|
0000b4  2067              MOVS     r0,#0x67              ;103
0000b6  e9cd6000          STRD     r6,r0,[sp,#0]         ;103
0000ba  a336              ADR      r3,|L2.404|
0000bc  a26c              ADR      r2,|L2.624|
0000be  a151              ADR      r1,|L2.516|
0000c0  2005              MOVS     r0,#5                 ;103
0000c2  f7fffffe          BL       _Anki_Log
0000c6  f04f7040          MOV      r0,#0x3000000         ;103
0000ca  e7d1              B        |L2.112|
                  |L2.204|
0000cc  eeb58ac0          VCMPE.F32 s16,#0.0              ;106
0000d0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;106
0000d4  d80b              BHI      |L2.238|
0000d6  206a              MOVS     r0,#0x6a              ;106
0000d8  e9cd6000          STRD     r6,r0,[sp,#0]         ;106
0000dc  a32d              ADR      r3,|L2.404|
0000de  a26a              ADR      r2,|L2.648|
0000e0  a148              ADR      r1,|L2.516|
0000e2  2005              MOVS     r0,#5                 ;106
0000e4  f7fffffe          BL       _Anki_Log
0000e8  f04f7040          MOV      r0,#0x3000000         ;106
0000ec  e7c0              B        |L2.112|
                  |L2.238|
0000ee  68a9              LDR      r1,[r5,#8]            ;109
0000f0  9800              LDR      r0,[sp,#0]            ;109
0000f2  4281              CMP      r1,r0                 ;109
0000f4  bf04              ITT      EQ                    ;109
0000f6  68e8              LDREQ    r0,[r5,#0xc]          ;109
0000f8  42b8              CMPEQ    r0,r7                 ;109
0000fa  d00b              BEQ      |L2.276|
0000fc  206d              MOVS     r0,#0x6d              ;109
0000fe  e9cd6000          STRD     r6,r0,[sp,#0]         ;109
000102  a324              ADR      r3,|L2.404|
000104  a26c              ADR      r2,|L2.696|
000106  a13f              ADR      r1,|L2.516|
000108  2005              MOVS     r0,#5                 ;109
00010a  f7fffffe          BL       _Anki_Log
00010e  f04f60a0          MOV      r0,#0x5000000         ;109
000112  e7ad              B        |L2.112|
                  |L2.276|
000114  f44f70a0          MOV      r0,#0x140             ;112
000118  fb90f0f7          SDIV     r0,r0,r7              ;112
00011c  f7fffffe          BL       Log2u32
000120  fa07f000          LSL      r0,r7,r0              ;115
000124  f5b07fa0          CMP      r0,#0x140             ;115
000128  d00b              BEQ      |L2.322|
00012a  2073              MOVS     r0,#0x73              ;115
00012c  e9cd6000          STRD     r6,r0,[sp,#0]         ;115
000130  a318              ADR      r3,|L2.404|
000132  4a6d              LDR      r2,|L2.744|
000134  a133              ADR      r1,|L2.516|
000136  2005              MOVS     r0,#5                 ;115
000138  f7fffffe          BL       _Anki_Log
00013c  f04f60a0          MOV      r0,#0x5000000         ;115
000140  e796              B        |L2.112|
                  |L2.322|
000142  f5b97f00          CMP      r9,#0x200             ;118
000146  d013              BEQ      |L2.368|
000148  f5b96fc0          CMP      r9,#0x600             ;120
00014c  bf18              IT       NE                    ;124
00014e  2001              MOVNE    r0,#1                 ;124
000150  d18e              BNE      |L2.112|
000152  a802              ADD      r0,sp,#8              ;121
000154  9916              LDR      r1,[sp,#0x58]         ;121
000156  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00015a  e9cd8000          STRD     r8,r0,[sp,#0]         ;121
00015e  eeb00a48          VMOV.F32 s0,s16                ;121
000162  4653              MOV      r3,r10                ;121
000164  465a              MOV      r2,r11                ;121
000166  4621              MOV      r1,r4                 ;121
000168  4628              MOV      r0,r5                 ;121
00016a  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::IterativelyRefineTrack_Affine(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
00016e  e77f              B        |L2.112|
                  |L2.368|
000170  a802              ADD      r0,sp,#8              ;119
000172  9916              LDR      r1,[sp,#0x58]         ;119
000174  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000178  e9cd8000          STRD     r8,r0,[sp,#0]         ;119
00017c  eeb00a48          VMOV.F32 s0,s16                ;119
000180  4653              MOV      r3,r10                ;119
000182  465a              MOV      r2,r11                ;119
000184  4621              MOV      r1,r4                 ;119
000186  4628              MOV      r0,r5                 ;119
000188  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::IterativelyRefineTrack_Translation(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
00018c  e770              B        |L2.112|
;;;126    
                          ENDP

00018e  0000              DCW      0x0000
                  |L2.400|
                          DCD      ||.constdata||
                  |L2.404|
000194  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\lucasKanade_Affine.cp"
000198  6f726574
00019c  6563685c
0001a0  76697369
0001a4  6f6e5c72
0001a8  6f626f74
0001ac  5c737263
0001b0  5c6c7563
0001b4  61734b61
0001b8  6e616465
0001bc  5f416666
0001c0  696e652e
0001c4  6370    
0001c6  7000              DCB      "p",0
                  |L2.456|
0001c8  6d617849          DCB      "maxIterations must be greater than zero and less than 1"
0001cc  74657261
0001d0  74696f6e
0001d4  73206d75
0001d8  73742062
0001dc  65206772
0001e0  65617465
0001e4  72207468
0001e8  616e207a
0001ec  65726f20
0001f0  616e6420
0001f4  6c657373
0001f8  20746861
0001fc  6e2031  
0001ff  30303000          DCB      "000",0
000203  00                DCB      0
                  |L2.516|
000204  4c756361          DCB      "LucasKanadeTracker_Affine::IterativelyRefineTrack",0
000208  734b616e
00020c  61646554
000210  7261636b
000214  65725f41
000218  6666696e
00021c  653a3a49
000220  74657261
000224  74697665
000228  6c795265
00022c  66696e65
000230  54726163
000234  6b00    
000236  00                DCB      0
000237  00                DCB      0
                  |L2.568|
000238  54686973          DCB      "This object is not initialized",0
00023c  206f626a
000240  65637420
000244  6973206e
000248  6f742069
00024c  6e697469
000250  616c697a
000254  656400  
000257  00                DCB      0
                  |L2.600|
000258  6e657874          DCB      "nextImage is not valid",0
00025c  496d6167
000260  65206973
000264  206e6f74
000268  2076616c
00026c  696400  
00026f  00                DCB      0
                  |L2.624|
000270  77686963          DCB      "whichScale is invalid",0
000274  68536361
000278  6c652069
00027c  7320696e
000280  76616c69
000284  6400    
000286  00                DCB      0
000287  00                DCB      0
                  |L2.648|
000288  636f6e76          DCB      "convergenceTolerance must be greater than zero",0
00028c  65726765
000290  6e636554
000294  6f6c6572
000298  616e6365
00029c  206d7573
0002a0  74206265
0002a4  20677265
0002a8  61746572
0002ac  20746861
0002b0  6e207a65
0002b4  726f00  
0002b7  00                DCB      0
                  |L2.696|
0002b8  6e657874          DCB      "nextImage must be the same size as the template",0
0002bc  496d6167
0002c0  65206d75
0002c4  73742062
0002c8  65207468
0002cc  65207361
0002d0  6d652073
0002d4  697a6520
0002d8  61732074
0002dc  68652074
0002e0  656d706c
0002e4  61746500
                  |L2.744|
                          DCD      ||.constdata||+0x2ac

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::IterativelyRefineTrack_Affine(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
;;;322    
;;;323          Result LucasKanadeTracker_Affine::IterativelyRefineTrack_Affine(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;324          {
000004  461c              MOV      r4,r3
000006  ed2d0b02          VPUSH    {d0}
00000a  4688              MOV      r8,r1
00000c  4681              MOV      r9,r0
00000e  ed2d8b10          VPUSH    {d8-d15}
000012  b0ef              SUB      sp,sp,#0x1bc
;;;325            // This method is heavily based on Interp2_Affine
;;;326            // The call would be like: Interp2_Affine<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;327    
;;;328            Result lastResult;
;;;329    
;;;330            Array<f32> AWAt(6, 6, scratch);
000014  2300              MOVS     r3,#0
000016  461a              MOV      r2,r3
000018  2101              MOVS     r1,#1
00001a  a86e              ADD      r0,sp,#0x1b8
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000020  6800              LDR      r0,[r0,#0]
000022  9000              STR      r0,[sp,#0]
000024  2206              MOVS     r2,#6
000026  4611              MOV      r1,r2
000028  a83a              ADD      r0,sp,#0xe8
00002a  9b8f              LDR      r3,[sp,#0x23c]
00002c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;331            Array<f32> b(1, 6, scratch);
000030  2300              MOVS     r3,#0
000032  461a              MOV      r2,r3
000034  2101              MOVS     r1,#1
000036  a86d              ADD      r0,sp,#0x1b4
000038  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00003c  6800              LDR      r0,[r0,#0]
00003e  9000              STR      r0,[sp,#0]
000040  2206              MOVS     r2,#6
000042  2101              MOVS     r1,#1
000044  a83f              ADD      r0,sp,#0xfc
000046  9b8f              LDR      r3,[sp,#0x23c]
000048  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;332    
;;;333            // These addresses should be known at compile time, so should be faster
;;;334            f32 AWAt_raw[6][6];
;;;335            f32 b_raw[6];
;;;336    
;;;337            verify_converged = false;
00004c  988e              LDR      r0,[sp,#0x238]
00004e  2100              MOVS     r1,#0
000050  7001              STRB     r1,[r0,#0]
;;;338    
;;;339            const s32 nextImageHeight = nextImage.get_size(0);
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000058  ee090a10          VMOV     s18,r0
;;;340            const s32 nextImageWidth = nextImage.get_size(1);
00005c  2101              MOVS     r1,#1
00005e  4640              MOV      r0,r8
000060  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000064  4607              MOV      r7,r0
;;;341    
;;;342            const f32 scale = static_cast<f32>(1 << whichScale);
000066  2001              MOVS     r0,#1
000068  40a0              LSLS     r0,r0,r4
00006a  ee000a10          VMOV     s0,r0
;;;343    
;;;344            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
00006e  f44f70a0          MOV      r0,#0x140
000072  fb90f0f7          SDIV     r0,r0,r7
000076  eef89ac0          VCVT.F32.S32 s19,s0                ;342
;;;345            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
00007a  ee000a10          VMOV     s0,r0
00007e  eeb80ac0          VCVT.F32.S32 s0,s0
000082  ed8d0a33          VSTR     s0,[sp,#0xcc]
;;;346    
;;;347            const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
;;;348            const f32 scaleOverFiveTen = scale / (2.0f*255.0f);
000086  ed9f0afd          VLDR     s0,|L3.1148|
;;;349    
;;;350            //const Point<f32>& centerOffset = this->transformation.get_centerOffset();
;;;351            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
00008a  f1090118          ADD      r1,r9,#0x18
00008e  a85a              ADD      r0,sp,#0x168
000090  ee89da80          VDIV.F32 s26,s19,s0            ;348
000094  ed9d0a33          VLDR     s0,[sp,#0xcc]
000098  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;352    
;;;353            // Initialize with some very extreme coordinates
;;;354            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
00009c  2300              MOVS     r3,#0
00009e  461a              MOV      r2,r3
0000a0  2101              MOVS     r1,#1
0000a2  a86d              ADD      r0,sp,#0x1b4
0000a4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000a8  6803              LDR      r3,[r0,#0]
0000aa  2102              MOVS     r1,#2
0000ac  a826              ADD      r0,sp,#0x98
0000ae  9a8f              LDR      r2,[sp,#0x23c]
0000b0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;355    
;;;356            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
0000b4  2500              MOVS     r5,#0
;;;357              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
0000b6  ed9f8af2          VLDR     s16,|L3.1152|
                  |L3.186|
0000ba  9832              LDR      r0,[sp,#0xc8]
0000bc  ed8d8a00          VSTR     s16,[sp,#0]
0000c0  ed8d8a01          VSTR     s16,[sp,#4]
0000c4  ed8d8a52          VSTR     s16,[sp,#0x148]
0000c8  ed8d8a53          VSTR     s16,[sp,#0x14c]
0000cc  ed8d8a54          VSTR     s16,[sp,#0x150]
0000d0  ed8d8a55          VSTR     s16,[sp,#0x154]
0000d4  eb001645          ADD      r6,r0,r5,LSL #5
0000d8  ed8d8a56          VSTR     s16,[sp,#0x158]
0000dc  a84a              ADD      r0,sp,#0x128
0000de  ed8d8a57          VSTR     s16,[sp,#0x15c]
0000e2  2304              MOVS     r3,#4
0000e4  2208              MOVS     r2,#8
0000e6  49e7              LDR      r1,|L3.1156|
0000e8  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0000ec  ed9d0a00          VLDR     s0,[sp,#0]
0000f0  4603              MOV      r3,r0
0000f2  ed800a00          VSTR     s0,[r0,#0]
0000f6  ed9d0a01          VLDR     s0,[sp,#4]
0000fa  ed800a01          VSTR     s0,[r0,#4]
0000fe  3008              ADDS     r0,r0,#8
000100  ed9d0a52          VLDR     s0,[sp,#0x148]
000104  ed800a00          VSTR     s0,[r0,#0]
000108  ed9d0a53          VLDR     s0,[sp,#0x14c]
00010c  ed800a01          VSTR     s0,[r0,#4]
000110  ed9d0a54          VLDR     s0,[sp,#0x150]
000114  2000              MOVS     r0,#0
000116  ed830a04          VSTR     s0,[r3,#0x10]
00011a  ed9d0a55          VLDR     s0,[sp,#0x154]
00011e  ed830a05          VSTR     s0,[r3,#0x14]
000122  ed9d0a56          VLDR     s0,[sp,#0x158]
000126  ed830a06          VSTR     s0,[r3,#0x18]
00012a  ed9d0a57          VLDR     s0,[sp,#0x15c]
00012e  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L3.306|
000132  eb0301c0          ADD      r1,r3,r0,LSL #3
000136  eb0602c0          ADD      r2,r6,r0,LSL #3
00013a  ed910a00          VLDR     s0,[r1,#0]
00013e  1c40              ADDS     r0,r0,#1
000140  ed820a00          VSTR     s0,[r2,#0]
000144  ed910a01          VLDR     s0,[r1,#4]
000148  2804              CMP      r0,#4
00014a  ed820a01          VSTR     s0,[r2,#4]
00014e  dbf0              BLT      |L3.306|
000150  1c6d              ADDS     r5,r5,#1              ;356
000152  2d02              CMP      r5,#2                 ;356
000154  dbb1              BLT      |L3.186|
;;;358            }
;;;359    
;;;360            Meshgrid<f32> originalCoordinates(
000156  ed998a05          VLDR     s16,[r9,#0x14]
00015a  ee880a29          VDIV.F32 s0,s16,s19
00015e  ed9faaca          VLDR     s20,|L3.1160|
000162  ee300a0a          VADD.F32 s0,s0,s20
000166  f7fffffe          BL       __hardfp_floorf
00016a  eebd0ac0          VCVT.S32.F32 s0,s0
00016e  eef6ba00          VMOV.F32 s23,#0.50000000
000172  eefeaa00          VMOV.F32 s21,#-0.50000000
000176  ee101a10          VMOV     r1,s0
00017a  ee680a2b          VMUL.F32 s1,s16,s23
00017e  ee280a2a          VMUL.F32 s0,s16,s21
000182  a84a              ADD      r0,sp,#0x128
000184  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
000188  ed998a04          VLDR     s16,[r9,#0x10]
00018c  e9dd564a          LDRD     r5,r6,[sp,#0x128]
000190  ee880a29          VDIV.F32 s0,s16,s19
000194  f8dda130          LDR      r10,[sp,#0x130]
000198  ee300a0a          VADD.F32 s0,s0,s20
00019c  f7fffffe          BL       __hardfp_floorf
0001a0  eebd0ac0          VCVT.S32.F32 s0,s0
0001a4  ee680a2b          VMUL.F32 s1,s16,s23
0001a8  a84d              ADD      r0,sp,#0x134
0001aa  ee101a10          VMOV     r1,s0
0001ae  ee280a2a          VMUL.F32 s0,s16,s21
0001b2  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
0001b6  9a4f              LDR      r2,[sp,#0x13c]
;;;361              Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;362              Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;363    
;;;364            // Unused, remove?
;;;365            //const s32 outHeight = originalCoordinates.get_yGridVector().get_size();
;;;366            //const s32 outWidth = originalCoordinates.get_xGridVector().get_size();
;;;367    
;;;368            const f32 xyReferenceMin = 0.0f;
;;;369            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
0001b8  ee007a10          VMOV     s0,r7
0001bc  e9dd014d          LDRD     r0,r1,[sp,#0x134]     ;360
0001c0  eef80ac0          VCVT.F32.S32 s1,s0
;;;370            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
0001c4  f8cda0d8          STR      r10,[sp,#0xd8]
0001c8  9239              STR      r2,[sp,#0xe4]
0001ca  eeb70a00          VMOV.F32 s0,#1.00000000        ;369
0001ce  e9cd0137          STRD     r0,r1,[sp,#0xdc]
0001d2  ee30fac0          VSUB.F32 s30,s1,s0             ;369
0001d6  eef80ac9          VCVT.F32.S32 s1,s18
;;;371    
;;;372            const LinearSequence<f32> &yGridVector = originalCoordinates.get_yGridVector();
;;;373            const LinearSequence<f32> &xGridVector = originalCoordinates.get_xGridVector();
;;;374    
;;;375            const f32 yGridStart = yGridVector.get_start();
0001da  e9cd5634          STRD     r5,r6,[sp,#0xd0]
;;;376            const f32 xGridStart = xGridVector.get_start();
;;;377    
;;;378            const f32 yGridDelta = yGridVector.get_increment();
;;;379            const f32 xGridDelta = xGridVector.get_increment();
;;;380    
;;;381            const s32 yIterationMax = yGridVector.get_size();
;;;382            const s32 xIterationMax = xGridVector.get_size();
;;;383    
;;;384            for(s32 iteration=0; iteration<maxIterations; iteration++) {
0001de  9059              STR      r0,[sp,#0x164]
0001e0  2000              MOVS     r0,#0
0001e2  9058              STR      r0,[sp,#0x160]
0001e4  ee70eac0          VSUB.F32 s29,s1,s0             ;370
0001e8  9883              LDR      r0,[sp,#0x20c]
0001ea  ee0e6a10          VMOV     s28,r6
0001ee  ee0f2a90          VMOV     s31,r2
0001f2  ee0baa10          VMOV     s22,r10
0001f6  9164              STR      r1,[sp,#0x190]        ;375
0001f8  46aa              MOV      r10,r5                ;375
0001fa  2800              CMP      r0,#0
0001fc  f3408261          BLE.W    |L3.1730|
000200  eb040084          ADD      r0,r4,r4,LSL #2
000204  f10d0b08          ADD      r11,sp,#8             ;334
000208  9057              STR      r0,[sp,#0x15c]        ;334
                  |L3.522|
;;;385              const Array<f32> &homography = this->transformation.get_homography();
00020a  f1090018          ADD      r0,r9,#0x18
00020e  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
000212  6882              LDR      r2,[r0,#8]
000214  6901              LDR      r1,[r0,#0x10]
;;;386              const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
000216  2300              MOVS     r3,#0
000218  fb031002          MLA      r0,r3,r2,r1
00021c  ed900a01          VLDR     s0,[r0,#4]
000220  ed901a00          VLDR     s2,[r0,#0]
000224  ed8d0a63          VSTR     s0,[sp,#0x18c]
000228  edd01a02          VLDR     s3,[r0,#8]
00022c  eddd0a33          VLDR     s1,[sp,#0xcc]
;;;387              const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
000230  2001              MOVS     r0,#1
000232  fb001002          MLA      r0,r0,r2,r1
000236  ee810aa0          VDIV.F32 s0,s3,s1              ;386
;;;388    
;;;389              const f32 yTransformedDelta = h10 * yGridDelta;
;;;390              const f32 xTransformedDelta = h00 * xGridDelta;
00023a  ee21ca0b          VMUL.F32 s24,s2,s22
;;;391    
;;;392              //AWAt.SetZero();
;;;393              //b.SetZero();
;;;394    
;;;395              for(s32 ia=0; ia<6; ia++) {
00023e  2100              MOVS     r1,#0
000240  ed8d0a6c          VSTR     s0,[sp,#0x1b0]        ;386
000244  ed900a01          VLDR     s0,[r0,#4]            ;387
000248  edd00a00          VLDR     s1,[r0,#0]            ;387
00024c  ed8d0a01          VSTR     s0,[sp,#4]            ;387
000250  ed902a02          VLDR     s4,[r0,#8]            ;387
000254  ed9d0a33          VLDR     s0,[sp,#0xcc]         ;387
000258  ee60caaf          VMUL.F32 s25,s1,s31            ;389
00025c  eec21a00          VDIV.F32 s3,s4,s0              ;387
000260  edcd1a6b          VSTR     s3,[sp,#0x1ac]        ;387
000264  ed9f0a89          VLDR     s0,|L3.1164|
000268  ab44              ADD      r3,sp,#0x110          ;335
                  |L3.618|
;;;396                for(s32 ja=0; ja<6; ja++) {
;;;397                  AWAt_raw[ia][ja] = 0;
00026a  eb010241          ADD      r2,r1,r1,LSL #1
00026e  2000              MOVS     r0,#0                 ;396
000270  eb0b02c2          ADD      r2,r11,r2,LSL #3
                  |L3.628|
000274  eb020c80          ADD      r12,r2,r0,LSL #2
000278  1c40              ADDS     r0,r0,#1              ;396
00027a  ed8c0a00          VSTR     s0,[r12,#0]
00027e  2806              CMP      r0,#6                 ;396
000280  dbf8              BLT      |L3.628|
;;;398                }
;;;399                b_raw[ia] = 0;
000282  eb030081          ADD      r0,r3,r1,LSL #2
000286  1c49              ADDS     r1,r1,#1              ;395
000288  ed800a00          VSTR     s0,[r0,#0]
00028c  2906              CMP      r1,#6                 ;395
00028e  dbec              BLT      |L3.618|
;;;400              }
;;;401    
;;;402              s32 numInBounds = 0;
000290  2600              MOVS     r6,#0
;;;403    
;;;404              // TODO: make the x and y limits from 1 to end-2
;;;405    
;;;406              f32 yOriginal = yGridStart;
;;;407              for(s32 y=0; y<yIterationMax; y++) {
000292  9859              LDR      r0,[sp,#0x164]
000294  eddd9a64          VLDR     s19,[sp,#0x190]       ;406
000298  4635              MOV      r5,r6
00029a  2800              CMP      r0,#0
00029c  f3408211          BLE.W    |L3.1730|
;;;408                const u8 * restrict pTemplateImage = this->templateImagePyramid[whichScale].Pointer(y, 0);
;;;409    
;;;410                const s16 * restrict pTemplateImageXGradient = this->templateImageXGradientPyramid[whichScale].Pointer(y, 0);
;;;411                const s16 * restrict pTemplateImageYGradient = this->templateImageYGradientPyramid[whichScale].Pointer(y, 0);
;;;412    
;;;413                f32 xOriginal = xGridStart;
;;;414    
;;;415                // TODO: This could be strength-reduced further, but it wouldn't be much faster
;;;416                f32 xTransformed = h00*xOriginal + h01*yOriginal + h02 + centerOffsetScaled.x;
0002a0  ee210a0e          VMUL.F32 s0,s2,s28
0002a4  f8d900d8          LDR      r0,[r9,#0xd8]
0002a8  9957              LDR      r1,[sp,#0x15c]
0002aa  ed8d0a62          VSTR     s0,[sp,#0x188]
;;;417                f32 yTransformed = h10*xOriginal + h11*yOriginal + h12 + centerOffsetScaled.y;
0002ae  ee200a8e          VMUL.F32 s0,s1,s28
0002b2  eb000081          ADD      r0,r0,r1,LSL #2
;;;418    
;;;419                for(s32 x=0; x<xIterationMax; x++) {
;;;420                  const f32 x0 = FLT_FLOOR(xTransformed);
;;;421                  const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
;;;422    
;;;423                  const f32 y0 = FLT_FLOOR(yTransformed);
;;;424                  const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
;;;425    
;;;426                  // If out of bounds, continue
;;;427                  if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;428                    // strength reduction for the affine transformation along this horizontal line
;;;429                    xTransformed += xTransformedDelta;
;;;430                    yTransformed += yTransformedDelta;
;;;431                    xOriginal += xGridDelta;
;;;432                    continue;
;;;433                  }
;;;434    
;;;435                  numInBounds++;
;;;436    
;;;437                  const f32 alphaX = xTransformed - x0;
;;;438                  const f32 alphaXinverse = 1 - alphaX;
;;;439    
;;;440                  const f32 alphaY = yTransformed - y0;
;;;441                  const f32 alphaYinverse = 1.0f - alphaY;
;;;442    
;;;443                  const s32 y0S32 = Round<s32>(y0);
;;;444                  const s32 y1S32 = Round<s32>(y1);
;;;445                  const s32 x0S32 = Round<s32>(x0);
;;;446    
;;;447                  const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;448                  const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;449    
;;;450                  const f32 pixelTL = *pReference_y0;
;;;451                  const f32 pixelTR = *(pReference_y0+1);
;;;452                  const f32 pixelBL = *pReference_y1;
;;;453                  const f32 pixelBR = *(pReference_y1+1);
;;;454    
;;;455                  const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;456    
;;;457                  //const u8 interpolatedPixel = static_cast<u8>(Round(interpolatedPixelF32));
;;;458    
;;;459                  // This block is the non-interpolation part of the per-sample algorithm
;;;460                  {
;;;461                    const f32 templatePixelValue = static_cast<f32>(pTemplateImage[x]);
;;;462                    const f32 xGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageXGradient[x]);
;;;463                    const f32 yGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageYGradient[x]);
;;;464    
;;;465                    const f32 tGradientValue = oneOverTwoFiftyFive * (interpolatedPixelF32 - templatePixelValue);
;;;466    
;;;467                    //CoreTechPrint("%f ", xOriginal);
;;;468                    const f32 values[6] = {
0002b6  af4a              ADD      r7,sp,#0x128
0002b8  ed8d0a00          VSTR     s0,[sp,#0]            ;417
0002bc  6901              LDR      r1,[r0,#0x10]         ;417
0002be  9161              STR      r1,[sp,#0x184]        ;417
0002c0  6880              LDR      r0,[r0,#8]            ;417
0002c2  9060              STR      r0,[sp,#0x180]        ;417
0002c4  f8d9010c          LDR      r0,[r9,#0x10c]        ;417
0002c8  9957              LDR      r1,[sp,#0x15c]        ;417
0002ca  eb000081          ADD      r0,r0,r1,LSL #2       ;417
0002ce  6901              LDR      r1,[r0,#0x10]         ;417
0002d0  915f              STR      r1,[sp,#0x17c]        ;417
0002d2  6880              LDR      r0,[r0,#8]            ;417
0002d4  905e              STR      r0,[sp,#0x178]        ;417
0002d6  f8d90140          LDR      r0,[r9,#0x140]        ;417
0002da  9957              LDR      r1,[sp,#0x15c]        ;417
0002dc  eb000081          ADD      r0,r0,r1,LSL #2       ;417
0002e0  6901              LDR      r1,[r0,#0x10]         ;417
0002e2  915d              STR      r1,[sp,#0x174]        ;417
0002e4  6880              LDR      r0,[r0,#8]            ;417
0002e6  905c              STR      r0,[sp,#0x170]        ;416
0002e8  ed9d0a5a          VLDR     s0,[sp,#0x168]        ;416
0002ec  ed8d0a6a          VSTR     s0,[sp,#0x1a8]        ;416
0002f0  ed9d0a5b          VLDR     s0,[sp,#0x16c]        ;417
0002f4  ed8d0a69          VSTR     s0,[sp,#0x1a4]        ;417
                  |L3.760|
0002f8  e9dd0160          LDRD     r0,r1,[sp,#0x180]
0002fc  fb051000          MLA      r0,r5,r0,r1
000300  9068              STR      r0,[sp,#0x1a0]        ;408
000302  e9dd015e          LDRD     r0,r1,[sp,#0x178]     ;408
000306  fb051000          MLA      r0,r5,r0,r1           ;408
00030a  9067              STR      r0,[sp,#0x19c]        ;410
00030c  e9dd105c          LDRD     r1,r0,[sp,#0x170]     ;410
000310  fb050001          MLA      r0,r5,r1,r0           ;410
000314  9066              STR      r0,[sp,#0x198]        ;413
000316  ed9d0a62          VLDR     s0,[sp,#0x188]        ;413
00031a  eddd0a63          VLDR     s1,[sp,#0x18c]        ;416
00031e  2400              MOVS     r4,#0                 ;419
000320  eeb08a4e          VMOV.F32 s16,s28               ;413
000324  ee000aa9          VMLA.F32 s0,s1,s19             ;416
000328  eddd0a6c          VLDR     s1,[sp,#0x1b0]        ;416
00032c  f1ba0f00          CMP      r10,#0                ;419
000330  ee700a20          VADD.F32 s1,s0,s1              ;416
000334  ed9d0a6a          VLDR     s0,[sp,#0x1a8]        ;416
000338  ee309a80          VADD.F32 s18,s1,s0             ;416
00033c  ed9d0a00          VLDR     s0,[sp,#0]            ;416
000340  eddd0a01          VLDR     s1,[sp,#4]            ;417
000344  ee000aa9          VMLA.F32 s0,s1,s19             ;417
000348  eddd0a6b          VLDR     s1,[sp,#0x1ac]        ;417
00034c  ee700a20          VADD.F32 s1,s0,s1              ;417
000350  ed9d0a69          VLDR     s0,[sp,#0x1a4]        ;417
000354  ee708a80          VADD.F32 s17,s1,s0             ;417
000358  dd7e              BLE      |L3.1112|
                  |L3.858|
00035a  ed9faa4b          VLDR     s20,|L3.1160|
00035e  ee390a0a          VADD.F32 s0,s18,s20            ;420
000362  f7fffffe          BL       __hardfp_floorf
000366  eef0aa40          VMOV.F32 s21,s0                ;420
00036a  eeb00a49          VMOV.F32 s0,s18                ;421
00036e  f7fffffe          BL       __hardfp_ceilf
000372  eef0da40          VMOV.F32 s27,s0                ;421
000376  ee380a8a          VADD.F32 s0,s17,s20            ;423
00037a  f7fffffe          BL       __hardfp_floorf
00037e  eeb0aa40          VMOV.F32 s20,s0                ;423
000382  eeb00a68          VMOV.F32 s0,s17                ;424
000386  f7fffffe          BL       __hardfp_ceilf
00038a  eef5aac0          VCMPE.F32 s21,#0.0              ;427
00038e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;427
000392  d37d              BCC      |L3.1168|
000394  eef4dacf          VCMPE.F32 s27,s30               ;427
000398  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;427
00039c  dc78              BGT      |L3.1168|
00039e  eeb5aac0          VCMPE.F32 s20,#0.0              ;427
0003a2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;427
0003a6  d373              BCC      |L3.1168|
0003a8  eeb40aee          VCMPE.F32 s0,s29                ;427
0003ac  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;427
0003b0  dc6e              BGT      |L3.1168|
0003b2  ee790a6a          VSUB.F32 s1,s18,s21            ;437
0003b6  ee381aca          VSUB.F32 s2,s17,s20            ;440
0003ba  eeb72a00          VMOV.F32 s4,#1.00000000        ;438
0003be  eeb5aac0          VCMPE.F32 s20,#0.0              ;438
0003c2  ee721a60          VSUB.F32 s3,s4,s1              ;438
0003c6  ee722a41          VSUB.F32 s5,s4,s2              ;441
0003ca  1c76              ADDS     r6,r6,#1              ;435
0003cc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;435
0003d0  bfcc              ITE      GT                    ;435
0003d2  ee3a2a2b          VADDGT.F32 s4,s20,s23            ;435
0003d6  ee3a2a6b          VSUBLE.F32 s4,s20,s23            ;435
0003da  eebd2ac2          VCVT.S32.F32 s4,s4                 ;435
0003de  eeb50ac0          VCMPE.F32 s0,#0.0               ;435
0003e2  ee123a10          VMOV     r3,s4                 ;435
0003e6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;435
0003ea  bfcc              ITE      GT                    ;435
0003ec  ee300a2b          VADDGT.F32 s0,s0,s23             ;435
0003f0  ee300a6b          VSUBLE.F32 s0,s0,s23             ;435
0003f4  eebd0ac0          VCVT.S32.F32 s0,s0                 ;435
0003f8  eef5aac0          VCMPE.F32 s21,#0.0              ;435
0003fc  ee10ca10          VMOV     r12,s0                ;435
000400  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;435
000404  bfcc              ITE      GT                    ;435
000406  ee3a0aab          VADDGT.F32 s0,s21,s23            ;435
00040a  ee3a0aeb          VSUBLE.F32 s0,s21,s23            ;435
00040e  eebd0ac0          VCVT.S32.F32 s0,s0                 ;435
000412  f8d82008          LDR      r2,[r8,#8]            ;435
000416  f8d81010          LDR      r1,[r8,#0x10]         ;435
00041a  ee100a10          VMOV     r0,s0                 ;435
00041e  fb031302          MLA      r3,r3,r2,r1           ;435
000422  fb0c1102          MLA      r1,r12,r2,r1          ;435
000426  4403              ADD      r3,r3,r0              ;435
000428  4408              ADD      r0,r0,r1              ;435
00042a  7819              LDRB     r1,[r3,#0]            ;450
00042c  ee001a10          VMOV     s0,r1                 ;450
000430  7859              LDRB     r1,[r3,#1]            ;451
000432  eeb83a40          VCVT.F32.U32 s6,s0                 ;450
000436  ee001a10          VMOV     s0,r1                 ;451
00043a  7801              LDRB     r1,[r0,#0]            ;452
00043c  7840              LDRB     r0,[r0,#1]            ;453
00043e  eeb82a40          VCVT.F32.U32 s4,s0                 ;451
000442  ee001a10          VMOV     s0,r1                 ;452
000446  ee213a83          VMUL.F32 s6,s3,s6              ;452
00044a  eef83a40          VCVT.F32.U32 s7,s0                 ;452
00044e  ee000a10          VMOV     s0,r0                 ;453
000452  eeb80a40          VCVT.F32.U32 s0,s0                 ;453
000456  e000              B        |L3.1114|
                  |L3.1112|
000458  e07d              B        |L3.1366|
                  |L3.1114|
00045a  ee003a82          VMLA.F32 s6,s1,s4              ;453
00045e  ee212aa3          VMUL.F32 s4,s3,s7              ;453
000462  9868              LDR      r0,[sp,#0x1a0]        ;461
000464  ee002a80          VMLA.F32 s4,s1,s0              ;461
000468  ee621a83          VMUL.F32 s3,s5,s6              ;461
00046c  5d00              LDRB     r0,[r0,r4]            ;461
00046e  ee000a10          VMOV     s0,r0                 ;461
000472  ee411a02          VMLA.F32 s3,s2,s4              ;461
000476  eeb81a40          VCVT.F32.U32 s2,s0                 ;461
00047a  e00a              B        |L3.1170|
                  |L3.1148|
00047c  43ff0000          DCFS     0x43ff0000 ; 510
                  |L3.1152|
000480  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L3.1156|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L3.1160|
000488  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L3.1164|
00048c  00000000          DCFS     0x00000000 ; 0
                  |L3.1168|
000490  e057              B        |L3.1346|
                  |L3.1170|
000492  9867              LDR      r0,[sp,#0x19c]        ;462
000494  ee711ac1          VSUB.F32 s3,s3,s2              ;465
000498  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;465
00049c  ee000a10          VMOV     s0,r0                 ;462
0004a0  9866              LDR      r0,[sp,#0x198]        ;463
0004a2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;462
0004a6  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;463
0004aa  ee600a0d          VMUL.F32 s1,s0,s26             ;462
0004ae  ee000a10          VMOV     s0,r0                 ;463
0004b2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;463
0004b6  ee200a0d          VMUL.F32 s0,s0,s26             ;463
0004ba  ed9f1a83          VLDR     s2,|L3.1736|
;;;469                      xOriginal * xGradientValue,
;;;470                      yOriginal * xGradientValue,
;;;471                      xGradientValue,
;;;472                      xOriginal * yGradientValue,
;;;473                      yOriginal * yGradientValue,
;;;474                      yGradientValue};
;;;475    
;;;476                    //for(s32 ia=0; ia<6; ia++) {
;;;477                    //  CoreTechPrint("%f ", values[ia]);
;;;478                    //}
;;;479                    //CoreTechPrint("\n");
;;;480    
;;;481                    //f32 AWAt_raw[6][6];
;;;482                    //f32 b_raw[6];
;;;483                    for(s32 ia=0; ia<6; ia++) {
0004be  2100              MOVS     r1,#0
0004c0  f50d7e88          ADD      lr,sp,#0x110          ;335
0004c4  ee611a81          VMUL.F32 s3,s3,s2              ;465
0004c8  ee281a20          VMUL.F32 s2,s16,s1             ;468
0004cc  ed8d1a4a          VSTR     s2,[sp,#0x128]        ;468
0004d0  ee291aa0          VMUL.F32 s2,s19,s1             ;468
0004d4  ed8d1a4b          VSTR     s2,[sp,#0x12c]        ;468
0004d8  edcd0a4c          VSTR     s1,[sp,#0x130]        ;468
0004dc  ee680a00          VMUL.F32 s1,s16,s0             ;468
0004e0  edcd0a4d          VSTR     s1,[sp,#0x134]        ;468
0004e4  ee690a80          VMUL.F32 s1,s19,s0             ;468
0004e8  edcd0a4e          VSTR     s1,[sp,#0x138]        ;468
0004ec  ed8d0a4f          VSTR     s0,[sp,#0x13c]        ;468
                  |L3.1264|
;;;484                      for(s32 ja=ia; ja<6; ja++) {
0004f0  4608              MOV      r0,r1
0004f2  2906              CMP      r1,#6
0004f4  da16              BGE      |L3.1316|
;;;485                        AWAt_raw[ia][ja] += values[ia] * values[ja];
0004f6  eb070281          ADD      r2,r7,r1,LSL #2
0004fa  ed920a00          VLDR     s0,[r2,#0]
0004fe  eb010241          ADD      r2,r1,r1,LSL #1
000502  eb0b0cc2          ADD      r12,r11,r2,LSL #3
                  |L3.1286|
000506  eb0c0280          ADD      r2,r12,r0,LSL #2
00050a  eb070380          ADD      r3,r7,r0,LSL #2
00050e  edd20a00          VLDR     s1,[r2,#0]
000512  ed931a00          VLDR     s2,[r3,#0]
000516  1c40              ADDS     r0,r0,#1              ;484
000518  2806              CMP      r0,#6                 ;484
00051a  ee400a01          VMLA.F32 s1,s0,s2
00051e  edc20a00          VSTR     s1,[r2,#0]
000522  dbf0              BLT      |L3.1286|
                  |L3.1316|
;;;486                      }
;;;487                      b_raw[ia] += values[ia] * tGradientValue;
000524  eb0e0081          ADD      r0,lr,r1,LSL #2
000528  eb070281          ADD      r2,r7,r1,LSL #2
00052c  ed900a00          VLDR     s0,[r0,#0]
000530  edd20a00          VLDR     s1,[r2,#0]
000534  1c49              ADDS     r1,r1,#1              ;483
000536  2906              CMP      r1,#6                 ;483
000538  ee000aa1          VMLA.F32 s0,s1,s3
00053c  ed800a00          VSTR     s0,[r0,#0]
000540  dbd6              BLT      |L3.1264|
                  |L3.1346|
;;;488                    }
;;;489                  }
;;;490    
;;;491                  // strength reduction for the affine transformation along this horizontal line
;;;492                  xTransformed += xTransformedDelta;
000542  ee399a0c          VADD.F32 s18,s18,s24
;;;493                  yTransformed += yTransformedDelta;
000546  ee788aac          VADD.F32 s17,s17,s25
;;;494                  xOriginal += xGridDelta;
00054a  ee388a0b          VADD.F32 s16,s16,s22
00054e  1c64              ADDS     r4,r4,#1              ;419
000550  4554              CMP      r4,r10                ;419
000552  f6ffaf02          BLT      |L3.858|
                  |L3.1366|
;;;495                } // for(s32 x=0; x<xIterationMax; x++)
;;;496    
;;;497                yOriginal += yGridDelta;
000556  ee799aaf          VADD.F32 s19,s19,s31
00055a  9859              LDR      r0,[sp,#0x164]        ;407
00055c  1c6d              ADDS     r5,r5,#1              ;407
00055e  4285              CMP      r5,r0                 ;407
000560  f6ffaeca          BLT      |L3.760|
;;;498              } // for(s32 y=0; y<yIterationMax; y++)
;;;499    
;;;500              if(numInBounds < 16) {
000564  2e10              CMP      r6,#0x10
;;;501                AnkiWarn("LucasKanadeTracker_Affine::IterativelyRefineTrack_Affine", "Template drifted too far out of image.");
;;;502                return RESULT_OK;
;;;503              }
;;;504    
;;;505              for(s32 ia=0; ia<6; ia++) {
000566  bfa4              ITT      GE
000568  2100              MOVGE    r1,#0
00056a  f50d7c88          ADDGE    r12,sp,#0x110         ;335
00056e  db7d              BLT      |L3.1644|
                  |L3.1392|
;;;506                for(s32 ja=ia; ja<6; ja++) {
000570  4608              MOV      r0,r1
000572  2906              CMP      r1,#6
;;;507                  AWAt[ia][ja] = AWAt_raw[ia][ja];
000574  bfbc              ITT      LT
000576  eb010241          ADDLT    r2,r1,r1,LSL #1
00057a  eb0b03c2          ADDLT    r3,r11,r2,LSL #3
00057e  da0e              BGE      |L3.1438|
                  |L3.1408|
000580  9c3c              LDR      r4,[sp,#0xf0]         ;506
000582  9a3e              LDR      r2,[sp,#0xf8]         ;506
000584  fb012204          MLA      r2,r1,r4,r2           ;506
000588  eb030480          ADD      r4,r3,r0,LSL #2
00058c  eb020280          ADD      r2,r2,r0,LSL #2
000590  ed940a00          VLDR     s0,[r4,#0]
000594  1c40              ADDS     r0,r0,#1              ;506
000596  ed820a00          VSTR     s0,[r2,#0]
00059a  2806              CMP      r0,#6                 ;506
00059c  dbf0              BLT      |L3.1408|
                  |L3.1438|
00059e  9b41              LDR      r3,[sp,#0x104]        ;506
0005a0  9a43              LDR      r2,[sp,#0x10c]        ;506
;;;508                }
;;;509                b[0][ia] = b_raw[ia];
0005a2  2000              MOVS     r0,#0
0005a4  fb002003          MLA      r0,r0,r3,r2
0005a8  eb0c0281          ADD      r2,r12,r1,LSL #2
0005ac  eb000081          ADD      r0,r0,r1,LSL #2
0005b0  ed920a00          VLDR     s0,[r2,#0]
0005b4  1c49              ADDS     r1,r1,#1              ;505
0005b6  ed800a00          VSTR     s0,[r0,#0]
0005ba  2906              CMP      r1,#6                 ;505
0005bc  dbd8              BLT      |L3.1392|
;;;510              }
;;;511    
;;;512              Matrix::MakeSymmetric(AWAt, false);
0005be  ac3a              ADD      r4,sp,#0xe8
0005c0  2500              MOVS     r5,#0
0005c2  4629              MOV      r1,r5
0005c4  4620              MOV      r0,r4
0005c6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0005ca  4606              MOV      r6,r0
0005cc  2101              MOVS     r1,#1
0005ce  4620              MOV      r0,r4
0005d0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0005d4  4286              CMP      r6,r0
0005d6  d00d              BEQ      |L3.1524|
0005d8  f2407109          MOV      r1,#0x709
0005dc  483b              LDR      r0,|L3.1740|
0005de  4b3c              LDR      r3,|L3.1744|
0005e0  e9cd0100          STRD     r0,r1,[sp,#0]
0005e4  f1a3021c          SUB      r2,r3,#0x1c
0005e8  f1a20110          SUB      r1,r2,#0x10
0005ec  2005              MOVS     r0,#5
0005ee  f7fffffe          BL       _Anki_Log
0005f2  e023              B        |L3.1596|
                  |L3.1524|
0005f4  2100              MOVS     r1,#0
0005f6  4620              MOV      r0,r4
0005f8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0005fc  1e06              SUBS     r6,r0,#0
0005fe  f04f0100          MOV      r1,#0
000602  dd1b              BLE      |L3.1596|
                  |L3.1540|
000604  2d00              CMP      r5,#0
000606  bf15              ITETE    NE
000608  1c48              ADDNE    r0,r1,#1
00060a  2000              MOVEQ    r0,#0
00060c  46b4              MOVNE    r12,r6
00060e  468c              MOVEQ    r12,r1
000610  4560              CMP      r0,r12
000612  da10              BGE      |L3.1590|
                  |L3.1556|
000614  68a3              LDR      r3,[r4,#8]
000616  6922              LDR      r2,[r4,#0x10]
000618  fb002703          MLA      r7,r0,r3,r2
00061c  fb012203          MLA      r2,r1,r3,r2
000620  eb070781          ADD      r7,r7,r1,LSL #2
000624  eb020280          ADD      r2,r2,r0,LSL #2
000628  ed970a00          VLDR     s0,[r7,#0]
00062c  1c40              ADDS     r0,r0,#1
00062e  ed820a00          VSTR     s0,[r2,#0]
000632  4560              CMP      r0,r12
000634  dbee              BLT      |L3.1556|
                  |L3.1590|
000636  1c49              ADDS     r1,r1,#1
000638  42b1              CMP      r1,r6
00063a  dbe3              BLT      |L3.1540|
                  |L3.1596|
;;;513    
;;;514              //AWAt.Print("New AWAt");
;;;515              //b.Print("New b");
;;;516    
;;;517              bool numericalFailure;
;;;518    
;;;519              if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK)
00063c  ab65              ADD      r3,sp,#0x194
00063e  2200              MOVS     r2,#0
000640  a93f              ADD      r1,sp,#0xfc
000642  a83a              ADD      r0,sp,#0xe8
000644  f7fffffe          BL       _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
000648  2800              CMP      r0,#0
;;;520                return lastResult;
;;;521    
;;;522              if(numericalFailure){
;;;523                AnkiWarn("LucasKanadeTracker_Affine::IterativelyRefineTrack_Affine", "numericalFailure");
;;;524                return RESULT_OK;
;;;525              }
;;;526    
;;;527              //b.Print("New update");
;;;528    
;;;529              this->transformation.Update(b, initialImageScaleF32, scratch, Transformations::TRANSFORM_AFFINE);
;;;530    
;;;531              //this->transformation.get_homography().Print("new transformation");
;;;532    
;;;533              // Check if we're done with iterations
;;;534              const f32 minChange = UpdatePreviousCorners(transformation, previousCorners, scratch);
;;;535    
;;;536              if(minChange < convergenceTolerance) {
;;;537                verify_converged = true;
;;;538                return RESULT_OK;
;;;539              }
;;;540            } // for(s32 iteration=0; iteration<maxIterations; iteration++)
;;;541    
;;;542            return RESULT_OK;
;;;543          } // Result LucasKanadeTracker_Affine::IterativelyRefineTrack_Affine()
00064a  bf1f              ITTTT    NE
00064c  b06f              ADDNE    sp,sp,#0x1bc
00064e  ecbd8b10          VPOPNE   {d8-d15}
000652  b006              ADDNE    sp,sp,#0x18
000654  e8bd8ff0          POPNE    {r4-r11,pc}
000658  f89d0194          LDRB     r0,[sp,#0x194]        ;522
00065c  b930              CBNZ     r0,|L3.1644|
00065e  a850              ADD      r0,sp,#0x140          ;529
000660  998f              LDR      r1,[sp,#0x23c]        ;529
000662  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000666  f44f63c0          MOV      r3,#0x600             ;529
00066a  e000              B        |L3.1646|
                  |L3.1644|
00066c  e029              B        |L3.1730|
                  |L3.1646|
00066e  4602              MOV      r2,r0                 ;529
000670  ed9d0a33          VLDR     s0,[sp,#0xcc]         ;529
000674  a93f              ADD      r1,sp,#0xfc           ;529
000676  f1090018          ADD      r0,r9,#0x18           ;529
00067a  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
00067e  a850              ADD      r0,sp,#0x140          ;534
000680  998f              LDR      r1,[sp,#0x23c]        ;534
000682  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000686  4602              MOV      r2,r0                 ;534
000688  a926              ADD      r1,sp,#0x98           ;534
00068a  f1090018          ADD      r0,r9,#0x18           ;534
00068e  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
000692  eddd0a7f          VLDR     s1,[sp,#0x1fc]        ;536
000696  eeb40ae0          VCMPE.F32 s0,s1                 ;536
00069a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;536
00069e  d209              BCS      |L3.1716|
0006a0  998e              LDR      r1,[sp,#0x238]        ;537
0006a2  2001              MOVS     r0,#1                 ;537
0006a4  7008              STRB     r0,[r1,#0]            ;537
0006a6  2000              MOVS     r0,#0                 ;538
                  |L3.1704|
0006a8  b06f              ADD      sp,sp,#0x1bc
0006aa  ecbd8b10          VPOP     {d8-d15}
0006ae  b006              ADD      sp,sp,#0x18
0006b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.1716|
0006b4  9858              LDR      r0,[sp,#0x160]        ;384
0006b6  9983              LDR      r1,[sp,#0x20c]        ;384
0006b8  1c40              ADDS     r0,r0,#1              ;384
0006ba  9058              STR      r0,[sp,#0x160]        ;384
0006bc  4288              CMP      r0,r1                 ;384
0006be  f6ffada4          BLT      |L3.522|
                  |L3.1730|
0006c2  2000              MOVS     r0,#0                 ;542
0006c4  e7f0              B        |L3.1704|
;;;544        } // namespace TemplateTracker
                          ENDP

0006c6  0000              DCW      0x0000
                  |L3.1736|
0006c8  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627
                  |L3.1740|
                          DCD      _ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)::__PRETTY_FUNCTION__
                  |L3.1744|
                          DCD      ||.constdata||+0x274

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::IterativelyRefineTrack_Translation(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
;;;126    
;;;127          Result LucasKanadeTracker_Affine::IterativelyRefineTrack_Translation(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;128          {
000004  461f              MOV      r7,r3
000006  ed2d0b02          VPUSH    {d0}
00000a  4606              MOV      r6,r0
;;;129            // This method is heavily based on Interp2_Affine
;;;130            // The call would be like: Interp2_Affine<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;131    
;;;132            Result lastResult;
;;;133    
;;;134            Array<f32> AWAt(2, 2, scratch);
00000c  2300              MOVS     r3,#0
00000e  ed2d8b10          VPUSH    {d8-d15}              ;128
000012  b0bb              SUB      sp,sp,#0xec           ;128
000014  461a              MOV      r2,r3
000016  2101              MOVS     r1,#1
000018  a83a              ADD      r0,sp,#0xe8
00001a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00001e  6800              LDR      r0,[r0,#0]
000020  9000              STR      r0,[sp,#0]
000022  2202              MOVS     r2,#2
000024  4611              MOV      r1,r2
000026  a802              ADD      r0,sp,#8
000028  9b5b              LDR      r3,[sp,#0x16c]
00002a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;135            Array<f32> b(1, 2, scratch);
00002e  2300              MOVS     r3,#0
000030  461a              MOV      r2,r3
000032  2101              MOVS     r1,#1
000034  a833              ADD      r0,sp,#0xcc
000036  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00003a  6800              LDR      r0,[r0,#0]
00003c  9000              STR      r0,[sp,#0]
00003e  2202              MOVS     r2,#2
000040  2101              MOVS     r1,#1
000042  a807              ADD      r0,sp,#0x1c
000044  9b5b              LDR      r3,[sp,#0x16c]
000046  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00004a  9a04              LDR      r2,[sp,#0x10]
00004c  9906              LDR      r1,[sp,#0x18]
;;;136    
;;;137            f32 &AWAt00 = AWAt[0][0];
00004e  2000              MOVS     r0,#0
000050  fb001902          MLA      r9,r0,r2,r1
;;;138            f32 &AWAt01 = AWAt[0][1];
000054  f1090004          ADD      r0,r9,#4
;;;139            // Unused, remove?  f32 &AWAt10 = AWAt[1][0];
;;;140            f32 &AWAt11 = AWAt[1][1];
000058  9030              STR      r0,[sp,#0xc0]
00005a  2001              MOVS     r0,#1
00005c  fb001002          MLA      r0,r0,r2,r1
000060  f1000b04          ADD      r11,r0,#4
000064  9a09              LDR      r2,[sp,#0x24]
000066  990b              LDR      r1,[sp,#0x2c]
;;;141    
;;;142            f32 &b0 = b[0][0];
000068  2000              MOVS     r0,#0
00006a  fb001802          MLA      r8,r0,r2,r1
;;;143            f32 &b1 = b[0][1];
;;;144    
;;;145            verify_converged = false;
00006e  4601              MOV      r1,r0
000070  985a              LDR      r0,[sp,#0x168]
000072  f1080a04          ADD      r10,r8,#4             ;143
000076  7001              STRB     r1,[r0,#0]
;;;146    
;;;147            const s32 nextImageHeight = nextImage.get_size(0);
000078  2100              MOVS     r1,#0
00007a  984e              LDR      r0,[sp,#0x138]
00007c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000080  ee080a90          VMOV     s17,r0
;;;148            const s32 nextImageWidth = nextImage.get_size(1);
000084  2101              MOVS     r1,#1
000086  984e              LDR      r0,[sp,#0x138]
000088  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;149    
;;;150            const f32 scale = static_cast<f32>(1 << whichScale);
00008c  9031              STR      r0,[sp,#0xc4]
00008e  2001              MOVS     r0,#1
000090  40b8              LSLS     r0,r0,r7
000092  ee000a10          VMOV     s0,r0
;;;151    
;;;152            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
000096  9831              LDR      r0,[sp,#0xc4]
000098  f44f71a0          MOV      r1,#0x140
00009c  fb91f0f0          SDIV     r0,r1,r0
0000a0  eeb89ac0          VCVT.F32.S32 s18,s0                ;150
;;;153            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
0000a4  ee000a10          VMOV     s0,r0
0000a8  eeb80ac0          VCVT.F32.S32 s0,s0
0000ac  ed8d0a19          VSTR     s0,[sp,#0x64]
;;;154    
;;;155            const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
0000b0  eddffafe          VLDR     s31,|L4.1196|
;;;156            const f32 scaleOverFiveTen = scale / (2.0f*255.0f);
0000b4  ed9f0afe          VLDR     s0,|L4.1200|
;;;157    
;;;158            //const Point<f32>& centerOffset = this->transformation.get_centerOffset();
;;;159            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
0000b8  f1060118          ADD      r1,r6,#0x18
0000bc  a82e              ADD      r0,sp,#0xb8
0000be  ee89ca00          VDIV.F32 s24,s18,s0            ;156
0000c2  ed9d0a19          VLDR     s0,[sp,#0x64]
0000c6  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;160    
;;;161            // Initialize with some very extreme coordinates
;;;162            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
0000ca  2300              MOVS     r3,#0
0000cc  461a              MOV      r2,r3
0000ce  2101              MOVS     r1,#1
0000d0  a833              ADD      r0,sp,#0xcc
0000d2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000d6  6803              LDR      r3,[r0,#0]
0000d8  2102              MOVS     r1,#2
0000da  a80c              ADD      r0,sp,#0x30
0000dc  9a5b              LDR      r2,[sp,#0x16c]
0000de  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;163    
;;;164            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
0000e2  2400              MOVS     r4,#0
;;;165              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
0000e4  ed9f8af3          VLDR     s16,|L4.1204|
                  |L4.232|
0000e8  9818              LDR      r0,[sp,#0x60]
0000ea  ed8d8a00          VSTR     s16,[sp,#0]
0000ee  ed8d8a01          VSTR     s16,[sp,#4]
0000f2  ed8d8a28          VSTR     s16,[sp,#0xa0]
0000f6  ed8d8a29          VSTR     s16,[sp,#0xa4]
0000fa  ed8d8a2a          VSTR     s16,[sp,#0xa8]
0000fe  ed8d8a2b          VSTR     s16,[sp,#0xac]
000102  eb001544          ADD      r5,r0,r4,LSL #5
000106  ed8d8a2c          VSTR     s16,[sp,#0xb0]
00010a  a820              ADD      r0,sp,#0x80
00010c  ed8d8a2d          VSTR     s16,[sp,#0xb4]
000110  2304              MOVS     r3,#4
000112  2208              MOVS     r2,#8
000114  49e8              LDR      r1,|L4.1208|
000116  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00011a  ed9d0a00          VLDR     s0,[sp,#0]
00011e  4603              MOV      r3,r0
000120  ed800a00          VSTR     s0,[r0,#0]
000124  ed9d0a01          VLDR     s0,[sp,#4]
000128  ed800a01          VSTR     s0,[r0,#4]
00012c  3008              ADDS     r0,r0,#8
00012e  ed9d0a28          VLDR     s0,[sp,#0xa0]
000132  ed800a00          VSTR     s0,[r0,#0]
000136  ed9d0a29          VLDR     s0,[sp,#0xa4]
00013a  ed800a01          VSTR     s0,[r0,#4]
00013e  ed9d0a2a          VLDR     s0,[sp,#0xa8]
000142  2000              MOVS     r0,#0
000144  ed830a04          VSTR     s0,[r3,#0x10]
000148  ed9d0a2b          VLDR     s0,[sp,#0xac]
00014c  ed830a05          VSTR     s0,[r3,#0x14]
000150  ed9d0a2c          VLDR     s0,[sp,#0xb0]
000154  ed830a06          VSTR     s0,[r3,#0x18]
000158  ed9d0a2d          VLDR     s0,[sp,#0xb4]
00015c  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L4.352|
000160  eb0301c0          ADD      r1,r3,r0,LSL #3
000164  eb0502c0          ADD      r2,r5,r0,LSL #3
000168  ed910a00          VLDR     s0,[r1,#0]
00016c  1c40              ADDS     r0,r0,#1
00016e  ed820a00          VSTR     s0,[r2,#0]
000172  ed910a01          VLDR     s0,[r1,#4]
000176  2804              CMP      r0,#4
000178  ed820a01          VSTR     s0,[r2,#4]
00017c  dbf0              BLT      |L4.352|
00017e  1c64              ADDS     r4,r4,#1              ;164
000180  2c02              CMP      r4,#2                 ;164
000182  dbb1              BLT      |L4.232|
;;;166            }
;;;167    
;;;168            Meshgrid<f32> originalCoordinates(
000184  ed968a05          VLDR     s16,[r6,#0x14]
000188  ee880a09          VDIV.F32 s0,s16,s18
00018c  eddfeacb          VLDR     s29,|L4.1212|
000190  ee300a2e          VADD.F32 s0,s0,s29
000194  f7fffffe          BL       __hardfp_floorf
000198  eebd0ac0          VCVT.S32.F32 s0,s0
00019c  eeb6aa00          VMOV.F32 s20,#0.50000000
0001a0  eefe9a00          VMOV.F32 s19,#-0.50000000
0001a4  ee101a10          VMOV     r1,s0
0001a8  ee680a0a          VMUL.F32 s1,s16,s20
0001ac  ee280a29          VMUL.F32 s0,s16,s19
0001b0  a823              ADD      r0,sp,#0x8c
0001b2  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
0001b6  e9dd5324          LDRD     r5,r3,[sp,#0x90]
0001ba  9c23              LDR      r4,[sp,#0x8c]
0001bc  9300              STR      r3,[sp,#0]
0001be  ed968a04          VLDR     s16,[r6,#0x10]
0001c2  ee880a09          VDIV.F32 s0,s16,s18
0001c6  ee300a2e          VADD.F32 s0,s0,s29
0001ca  f7fffffe          BL       __hardfp_floorf
0001ce  eebd0ac0          VCVT.S32.F32 s0,s0
0001d2  ee680a0a          VMUL.F32 s1,s16,s20
0001d6  a820              ADD      r0,sp,#0x80
0001d8  ee101a10          VMOV     r1,s0
0001dc  ee280a29          VMUL.F32 s0,s16,s19
0001e0  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
0001e4  e9dd0121          LDRD     r0,r1,[sp,#0x84]
0001e8  9b00              LDR      r3,[sp,#0]
0001ea  9a20              LDR      r2,[sp,#0x80]
0001ec  e9cd011e          STRD     r0,r1,[sp,#0x78]
0001f0  e9cd321c          STRD     r3,r2,[sp,#0x70]
;;;169              Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;170              Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;171    
;;;172            // Unused, remove?
;;;173            //const s32 outHeight = originalCoordinates.get_yGridVector().get_size();
;;;174            //const s32 outWidth = originalCoordinates.get_xGridVector().get_size();
;;;175    
;;;176            const f32 xyReferenceMin = 0.0f;
;;;177            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
0001f4  9831              LDR      r0,[sp,#0xc4]
0001f6  eeb7fa00          VMOV.F32 s30,#1.00000000
0001fa  ee000a10          VMOV     s0,r0
0001fe  e9cd451a          STRD     r4,r5,[sp,#0x68]
;;;178            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
;;;179    
;;;180            const LinearSequence<f32> &yGridVector = originalCoordinates.get_yGridVector();
;;;181            const LinearSequence<f32> &xGridVector = originalCoordinates.get_xGridVector();
;;;182    
;;;183            const f32 yGridStart = yGridVector.get_start();
;;;184            const f32 xGridStart = xGridVector.get_start();
;;;185    
;;;186            const f32 yGridDelta = yGridVector.get_increment();
;;;187            const f32 xGridDelta = xGridVector.get_increment();
;;;188    
;;;189            const s32 yIterationMax = yGridVector.get_size();
;;;190            const s32 xIterationMax = xGridVector.get_size();
;;;191    
;;;192            for(s32 iteration=0; iteration<maxIterations; iteration++) {
000202  2000              MOVS     r0,#0
000204  eeb80ac0          VCVT.F32.S32 s0,s0                 ;177
000208  ee0e1a10          VMOV     s28,r1                ;177
00020c  ee70da4f          VSUB.F32 s27,s0,s30            ;177
000210  eeb80ae8          VCVT.F32.S32 s0,s17                ;178
000214  ee30da4f          VSUB.F32 s26,s0,s30            ;178
000218  ed9d0a1e          VLDR     s0,[sp,#0x78]         ;178
00021c  ed8d0a31          VSTR     s0,[sp,#0xc4]         ;183
000220  9332              STR      r3,[sp,#0xc8]
000222  e9cd0528          STRD     r0,r5,[sp,#0xa0]
000226  e9cd242a          STRD     r2,r4,[sp,#0xa8]
00022a  984f              LDR      r0,[sp,#0x13c]
00022c  2800              CMP      r0,#0
00022e  bfc4              ITT      GT
000230  eb070087          ADDGT    r0,r7,r7,LSL #2
000234  9027              STRGT    r0,[sp,#0x9c]
000236  f3408234          BLE.W    |L4.1698|
                  |L4.570|
;;;193              const Array<f32> &homography = this->transformation.get_homography();
00023a  f1060018          ADD      r0,r6,#0x18
00023e  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
000242  6882              LDR      r2,[r0,#8]
000244  6901              LDR      r1,[r0,#0x10]
;;;194              const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
000246  2300              MOVS     r3,#0
000248  fb031002          MLA      r0,r3,r2,r1
00024c  ed900a01          VLDR     s0,[r0,#4]
000250  ed908a00          VLDR     s16,[r0,#0]
000254  ed8d0a2d          VSTR     s0,[sp,#0xb4]
000258  ed901a02          VLDR     s2,[r0,#8]
00025c  ed9d0a19          VLDR     s0,[sp,#0x64]
;;;195              const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
000260  2001              MOVS     r0,#1
000262  fb001002          MLA      r0,r0,r2,r1
000266  eec10a00          VDIV.F32 s1,s2,s0              ;194
00026a  edcd0a36          VSTR     s1,[sp,#0xd8]         ;194
00026e  ed900a01          VLDR     s0,[r0,#4]
000272  edd08a00          VLDR     s17,[r0,#0]
000276  ed8d0a2c          VSTR     s0,[sp,#0xb0]
00027a  ed901a02          VLDR     s2,[r0,#8]
00027e  ed9d0a19          VLDR     s0,[sp,#0x64]
;;;196    
;;;197              const f32 yTransformedDelta = h10 * yGridDelta;
000282  ee68ba8e          VMUL.F32 s23,s17,s28
;;;198              const f32 xTransformedDelta = h00 * xGridDelta;
;;;199    
;;;200              AWAt.SetZero();
000286  a802              ADD      r0,sp,#8
000288  eec10a00          VDIV.F32 s1,s2,s0              ;195
00028c  edcd0a35          VSTR     s1,[sp,#0xd4]         ;195
000290  ed9d0a32          VLDR     s0,[sp,#0xc8]         ;198
000294  9906              LDR      r1,[sp,#0x18]         ;198
000296  ee28ba00          VMUL.F32 s22,s16,s0            ;198
00029a  b191              CBZ      r1,|L4.706|
00029c  9902              LDR      r1,[sp,#8]            ;198
00029e  2900              CMP      r1,#0                 ;198
0002a0  bfa4              ITT      GE                    ;198
0002a2  9903              LDRGE    r1,[sp,#0xc]          ;198
0002a4  2900              CMPGE    r1,#0                 ;198
0002a6  db0c              BLT      |L4.706|
0002a8  2100              MOVS     r1,#0                 ;198
0002aa  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0002ae  9904              LDR      r1,[sp,#0x10]         ;198
0002b0  9b04              LDR      r3,[sp,#0x10]         ;198
0002b2  4341              MULS     r1,r0,r1              ;198
0002b4  9a06              LDR      r2,[sp,#0x18]         ;198
0002b6  2000              MOVS     r0,#0                 ;198
0002b8  fb002003          MLA      r0,r0,r3,r2           ;198
0002bc  f7fffffe          BL       __aeabi_memclr4
0002c0  e00c              B        |L4.732|
                  |L4.706|
0002c2  f2402176          MOV      r1,#0x276             ;198
0002c6  487e              LDR      r0,|L4.1216|
0002c8  4b7e              LDR      r3,|L4.1220|
0002ca  e9cd0100          STRD     r0,r1,[sp,#0]         ;198
0002ce  f103027c          ADD      r2,r3,#0x7c           ;198
0002d2  f1a20118          SUB      r1,r2,#0x18           ;198
0002d6  2005              MOVS     r0,#5                 ;198
0002d8  f7fffffe          BL       _Anki_Log
                  |L4.732|
0002dc  990b              LDR      r1,[sp,#0x2c]         ;198
;;;201              b.SetZero();
0002de  a807              ADD      r0,sp,#0x1c
0002e0  b191              CBZ      r1,|L4.776|
0002e2  9907              LDR      r1,[sp,#0x1c]
0002e4  2900              CMP      r1,#0
0002e6  bfa4              ITT      GE
0002e8  9908              LDRGE    r1,[sp,#0x20]
0002ea  2900              CMPGE    r1,#0
0002ec  db0c              BLT      |L4.776|
0002ee  2100              MOVS     r1,#0
0002f0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0002f4  9909              LDR      r1,[sp,#0x24]
0002f6  9b09              LDR      r3,[sp,#0x24]
0002f8  4341              MULS     r1,r0,r1
0002fa  9a0b              LDR      r2,[sp,#0x2c]
0002fc  2000              MOVS     r0,#0
0002fe  fb002003          MLA      r0,r0,r3,r2
000302  f7fffffe          BL       __aeabi_memclr4
000306  e00c              B        |L4.802|
                  |L4.776|
000308  f2402176          MOV      r1,#0x276
00030c  486c              LDR      r0,|L4.1216|
00030e  4b6d              LDR      r3,|L4.1220|
000310  e9cd0100          STRD     r0,r1,[sp,#0]
000314  f103027c          ADD      r2,r3,#0x7c
000318  f1a20118          SUB      r1,r2,#0x18
00031c  2005              MOVS     r0,#5
00031e  f7fffffe          BL       _Anki_Log
                  |L4.802|
;;;202    
;;;203              s32 numInBounds = 0;
000322  2700              MOVS     r7,#0
;;;204    
;;;205              // TODO: make the x and y limits from 1 to end-2
;;;206    
;;;207              f32 yOriginal = yGridStart;
;;;208              for(s32 y=0; y<yIterationMax; y++) {
000324  982a              LDR      r0,[sp,#0xa8]
000326  edddaa31          VLDR     s21,[sp,#0xc4]        ;207
00032a  463d              MOV      r5,r7
00032c  2800              CMP      r0,#0
00032e  f34081b8          BLE.W    |L4.1698|
000332  ed9d0a29          VLDR     s0,[sp,#0xa4]         ;184
;;;209                const u8 * restrict pTemplateImage = this->templateImagePyramid[whichScale].Pointer(y, 0);
;;;210    
;;;211                const s16 * restrict pTemplateImageXGradient = this->templateImageXGradientPyramid[whichScale].Pointer(y, 0);
;;;212                const s16 * restrict pTemplateImageYGradient = this->templateImageYGradientPyramid[whichScale].Pointer(y, 0);
;;;213    
;;;214                f32 xOriginal = xGridStart;
;;;215    
;;;216                // TODO: This could be strength-reduced further, but it wouldn't be much faster
;;;217                f32 xTransformed = h00*xOriginal + h01*yOriginal + h02 + centerOffsetScaled.x;
000336  ee280a00          VMUL.F32 s0,s16,s0
00033a  ed8d0a01          VSTR     s0,[sp,#4]
00033e  ed9d0a29          VLDR     s0,[sp,#0xa4]         ;184
;;;218                f32 yTransformed = h10*xOriginal + h11*yOriginal + h12 + centerOffsetScaled.y;
000342  ee280a80          VMUL.F32 s0,s17,s0
000346  ed8d0a00          VSTR     s0,[sp,#0]
                  |L4.842|
00034a  f8d610d8          LDR      r1,[r6,#0xd8]
00034e  9827              LDR      r0,[sp,#0x9c]
;;;219    
;;;220                for(s32 x=0; x<xIterationMax; x++) {
000350  2400              MOVS     r4,#0
000352  eb010080          ADD      r0,r1,r0,LSL #2
000356  6901              LDR      r1,[r0,#0x10]
000358  6880              LDR      r0,[r0,#8]
00035a  fb051000          MLA      r0,r5,r0,r1
00035e  9039              STR      r0,[sp,#0xe4]
000360  f8d6110c          LDR      r1,[r6,#0x10c]
000364  9827              LDR      r0,[sp,#0x9c]
000366  eb010080          ADD      r0,r1,r0,LSL #2
00036a  6901              LDR      r1,[r0,#0x10]
00036c  6880              LDR      r0,[r0,#8]
00036e  fb051000          MLA      r0,r5,r0,r1
000372  9038              STR      r0,[sp,#0xe0]
000374  f8d61140          LDR      r1,[r6,#0x140]
000378  9827              LDR      r0,[sp,#0x9c]
00037a  eb010080          ADD      r0,r1,r0,LSL #2
00037e  6901              LDR      r1,[r0,#0x10]
000380  6880              LDR      r0,[r0,#8]
000382  fb051000          MLA      r0,r5,r0,r1
000386  9037              STR      r0,[sp,#0xdc]         ;212
000388  ed9d0a01          VLDR     s0,[sp,#4]            ;212
00038c  eddd0a2d          VLDR     s1,[sp,#0xb4]         ;217
000390  982b              LDR      r0,[sp,#0xac]
000392  ee000aaa          VMLA.F32 s0,s1,s21             ;217
000396  eddd0a36          VLDR     s1,[sp,#0xd8]         ;217
00039a  2800              CMP      r0,#0
00039c  ee300a20          VADD.F32 s0,s0,s1              ;217
0003a0  eddd0a2e          VLDR     s1,[sp,#0xb8]         ;217
0003a4  ee708a20          VADD.F32 s17,s0,s1             ;217
0003a8  ed9d0a00          VLDR     s0,[sp,#0]            ;217
0003ac  eddd0a2c          VLDR     s1,[sp,#0xb0]         ;218
0003b0  ee000aaa          VMLA.F32 s0,s1,s21             ;218
0003b4  eddd0a35          VLDR     s1,[sp,#0xd4]         ;218
0003b8  ee300a20          VADD.F32 s0,s0,s1              ;218
0003bc  eddd0a2f          VLDR     s1,[sp,#0xbc]         ;218
0003c0  ee308a20          VADD.F32 s16,s0,s1             ;218
0003c4  dd33              BLE      |L4.1070|
                  |L4.966|
;;;221                  const f32 x0 = FLT_FLOOR(xTransformed);
0003c6  ee380aae          VADD.F32 s0,s17,s29
0003ca  f7fffffe          BL       __hardfp_floorf
0003ce  eef09a40          VMOV.F32 s19,s0
;;;222                  const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
0003d2  eeb00a68          VMOV.F32 s0,s17
0003d6  f7fffffe          BL       __hardfp_ceilf
0003da  eef0ca40          VMOV.F32 s25,s0
;;;223    
;;;224                  const f32 y0 = FLT_FLOOR(yTransformed);
0003de  ee380a2e          VADD.F32 s0,s16,s29
0003e2  f7fffffe          BL       __hardfp_floorf
0003e6  eeb09a40          VMOV.F32 s18,s0
;;;225                  const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
0003ea  eeb00a48          VMOV.F32 s0,s16
0003ee  f7fffffe          BL       __hardfp_ceilf
;;;226    
;;;227                  // If out of bounds, continue
;;;228                  if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
0003f2  eef59ac0          VCMPE.F32 s19,#0.0
0003f6  eeb02a40          VMOV.F32 s4,s0                 ;225
0003fa  eef1fa10          VMRS     APSR_nzcv,FPSCR
0003fe  d30e              BCC      |L4.1054|
000400  eef4caed          VCMPE.F32 s25,s27
000404  eef1fa10          VMRS     APSR_nzcv,FPSCR
000408  dc09              BGT      |L4.1054|
00040a  eeb59ac0          VCMPE.F32 s18,#0.0
00040e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000412  d304              BCC      |L4.1054|
000414  eeb42acd          VCMPE.F32 s4,s26
000418  eef1fa10          VMRS     APSR_nzcv,FPSCR
00041c  dd2c              BLE      |L4.1144|
                  |L4.1054|
;;;229                    // strength reduction for the affine transformation along this horizontal line
;;;230                    xTransformed += xTransformedDelta;
00041e  ee788a8b          VADD.F32 s17,s17,s22
;;;231                    yTransformed += yTransformedDelta;
000422  ee388a2b          VADD.F32 s16,s16,s23
                  |L4.1062|
000426  982b              LDR      r0,[sp,#0xac]         ;220
000428  1c64              ADDS     r4,r4,#1              ;220
00042a  4284              CMP      r4,r0                 ;220
00042c  dbcb              BLT      |L4.966|
                  |L4.1070|
;;;232                    xOriginal += xGridDelta;
;;;233                    continue;
;;;234                  }
;;;235    
;;;236                  numInBounds++;
;;;237    
;;;238                  const f32 alphaX = xTransformed - x0;
;;;239                  const f32 alphaXinverse = 1 - alphaX;
;;;240    
;;;241                  const f32 alphaY = yTransformed - y0;
;;;242                  const f32 alphaYinverse = 1.0f - alphaY;
;;;243    
;;;244                  const s32 y0S32 = Round<s32>(y0);
;;;245                  const s32 y1S32 = Round<s32>(y1);
;;;246                  const s32 x0S32 = Round<s32>(x0);
;;;247    
;;;248                  const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;249                  const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;250    
;;;251                  const f32 pixelTL = *pReference_y0;
;;;252                  const f32 pixelTR = *(pReference_y0+1);
;;;253                  const f32 pixelBL = *pReference_y1;
;;;254                  const f32 pixelBR = *(pReference_y1+1);
;;;255    
;;;256                  const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;257    
;;;258                  //const u8 interpolatedPixel = static_cast<u8>(Round(interpolatedPixelF32));
;;;259    
;;;260                  // This block is the non-interpolation part of the per-sample algorithm
;;;261                  {
;;;262                    const f32 templatePixelValue = static_cast<f32>(pTemplateImage[x]);
;;;263                    const f32 xGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageXGradient[x]);
;;;264                    const f32 yGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageYGradient[x]);
;;;265    
;;;266                    const f32 tGradientValue = oneOverTwoFiftyFive * (interpolatedPixelF32 - templatePixelValue);
;;;267    
;;;268                    //AWAt
;;;269                    //  b
;;;270                    AWAt00 += xGradientValue * xGradientValue;
;;;271                    AWAt01 += xGradientValue * yGradientValue;
;;;272                    AWAt11 += yGradientValue * yGradientValue;
;;;273    
;;;274                    b0 += xGradientValue * tGradientValue;
;;;275                    b1 += yGradientValue * tGradientValue;
;;;276                  }
;;;277    
;;;278                  // strength reduction for the affine transformation along this horizontal line
;;;279                  xTransformed += xTransformedDelta;
;;;280                  yTransformed += yTransformedDelta;
;;;281                  xOriginal += xGridDelta;
;;;282                } // for(s32 x=0; x<xIterationMax; x++)
;;;283    
;;;284                yOriginal += yGridDelta;
00042e  ee7aaa8e          VADD.F32 s21,s21,s28
000432  982a              LDR      r0,[sp,#0xa8]         ;208
000434  1c6d              ADDS     r5,r5,#1              ;208
000436  4285              CMP      r5,r0                 ;208
000438  db87              BLT      |L4.842|
;;;285              } // for(s32 y=0; y<yIterationMax; y++)
;;;286    
;;;287              if(numInBounds < 16) {
00043a  2f10              CMP      r7,#0x10
00043c  f2c08131          BLT.W    |L4.1698|
;;;288                AnkiWarn("LucasKanadeTracker_Affine::IterativelyRefineTrack_Translation", "Template drifted too far out of image.");
;;;289                return RESULT_OK;
;;;290              }
;;;291    
;;;292              Matrix::MakeSymmetric(AWAt, false);
000440  2000              MOVS     r0,#0
000442  ac02              ADD      r4,sp,#8
000444  4601              MOV      r1,r0
000446  9000              STR      r0,[sp,#0]
000448  4620              MOV      r0,r4
00044a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00044e  4605              MOV      r5,r0
000450  2101              MOVS     r1,#1
000452  4620              MOV      r0,r4
000454  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000458  4285              CMP      r5,r0
00045a  d07d              BEQ      |L4.1368|
00045c  f2407109          MOV      r1,#0x709
000460  4819              LDR      r0,|L4.1224|
000462  4b1a              LDR      r3,|L4.1228|
000464  e9cd0100          STRD     r0,r1,[sp,#0]
000468  f1a3021c          SUB      r2,r3,#0x1c
00046c  f1a20110          SUB      r1,r2,#0x10
000470  2005              MOVS     r0,#5
000472  f7fffffe          BL       _Anki_Log
000476  e0d3              B        |L4.1568|
                  |L4.1144|
000478  ee380ae9          VSUB.F32 s0,s17,s19            ;238
00047c  ee780a49          VSUB.F32 s1,s16,s18            ;241
000480  eeb59ac0          VCMPE.F32 s18,#0.0              ;241
000484  1c7f              ADDS     r7,r7,#1              ;236
000486  ee3f1a40          VSUB.F32 s2,s30,s0             ;239
00048a  ee7f1a60          VSUB.F32 s3,s30,s1             ;242
00048e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;242
000492  bfcc              ITE      GT                    ;242
000494  ee792a0a          VADDGT.F32 s5,s18,s20            ;242
000498  ee792a4a          VSUBLE.F32 s5,s18,s20            ;242
00049c  eefd2ae2          VCVT.S32.F32 s5,s5                 ;242
0004a0  eeb52ac0          VCMPE.F32 s4,#0.0               ;242
0004a4  ee123a90          VMOV     r3,s5                 ;242
0004a8  e012              B        |L4.1232|
0004aa  0000              DCW      0x0000
                  |L4.1196|
0004ac  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627
                  |L4.1200|
0004b0  43ff0000          DCFS     0x43ff0000 ; 510
                  |L4.1204|
0004b4  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L4.1208|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L4.1212|
0004bc  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L4.1216|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetZero()::__PRETTY_FUNCTION__
                  |L4.1220|
                          DCD      ||.constdata||+0x1b0
                  |L4.1224|
                          DCD      _ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)::__PRETTY_FUNCTION__
                  |L4.1228|
                          DCD      ||.constdata||+0x274
                  |L4.1232|
0004d0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;242
0004d4  bfcc              ITE      GT                    ;242
0004d6  ee322a0a          VADDGT.F32 s4,s4,s20             ;242
0004da  ee322a4a          VSUBLE.F32 s4,s4,s20             ;242
0004de  eebd2ac2          VCVT.S32.F32 s4,s4                 ;242
0004e2  eef59ac0          VCMPE.F32 s19,#0.0              ;242
0004e6  ee12ca10          VMOV     r12,s4                ;242
0004ea  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;242
0004ee  bfcc              ITE      GT                    ;242
0004f0  ee392a8a          VADDGT.F32 s4,s19,s20            ;242
0004f4  ee392aca          VSUBLE.F32 s4,s19,s20            ;242
0004f8  eebd2ac2          VCVT.S32.F32 s4,s4                 ;242
0004fc  994e              LDR      r1,[sp,#0x138]        ;242
0004fe  9a4e              LDR      r2,[sp,#0x138]        ;242
000500  ee120a10          VMOV     r0,s4                 ;242
000504  6909              LDR      r1,[r1,#0x10]         ;242
000506  6892              LDR      r2,[r2,#8]            ;242
000508  fb031302          MLA      r3,r3,r2,r1           ;242
00050c  fb0c1102          MLA      r1,r12,r2,r1          ;242
000510  4403              ADD      r3,r3,r0              ;242
000512  4408              ADD      r0,r0,r1              ;242
000514  7819              LDRB     r1,[r3,#0]            ;251
000516  ee021a10          VMOV     s4,r1                 ;251
00051a  7859              LDRB     r1,[r3,#1]            ;252
00051c  eef82a42          VCVT.F32.U32 s5,s4                 ;251
000520  ee021a10          VMOV     s4,r1                 ;252
000524  7801              LDRB     r1,[r0,#0]            ;253
000526  7840              LDRB     r0,[r0,#1]            ;254
000528  ee031a10          VMOV     s6,r1                 ;253
00052c  eeb82a42          VCVT.F32.U32 s4,s4                 ;252
000530  ee612a22          VMUL.F32 s5,s2,s5              ;252
000534  eef83a43          VCVT.F32.U32 s7,s6                 ;253
000538  ee030a10          VMOV     s6,r0                 ;254
00053c  9839              LDR      r0,[sp,#0xe4]         ;262
00053e  ee402a02          VMLA.F32 s5,s0,s4              ;262
000542  eeb83a43          VCVT.F32.U32 s6,s6                 ;254
000546  ee211a23          VMUL.F32 s2,s2,s7              ;254
00054a  ee001a03          VMLA.F32 s2,s0,s6              ;254
00054e  ee611aa2          VMUL.F32 s3,s3,s5              ;254
000552  ee401a81          VMLA.F32 s3,s1,s2              ;254
000556  e000              B        |L4.1370|
                  |L4.1368|
000558  e03e              B        |L4.1496|
                  |L4.1370|
00055a  5d00              LDRB     r0,[r0,r4]            ;262
00055c  ee788a8b          VADD.F32 s17,s17,s22           ;279
000560  ee000a10          VMOV     s0,r0                 ;262
000564  9838              LDR      r0,[sp,#0xe0]         ;263
000566  ee388a2b          VADD.F32 s16,s16,s23           ;280
00056a  eeb81a40          VCVT.F32.U32 s2,s0                 ;262
00056e  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;263
000572  ee000a10          VMOV     s0,r0                 ;263
000576  9837              LDR      r0,[sp,#0xdc]         ;264
000578  ee311ac1          VSUB.F32 s2,s3,s2              ;266
00057c  eeb80ac0          VCVT.F32.S32 s0,s0                 ;263
000580  edd91a00          VLDR     s3,[r9,#0]            ;270
000584  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;264
000588  ee211a2f          VMUL.F32 s2,s2,s31             ;266
00058c  ee600a0c          VMUL.F32 s1,s0,s24             ;263
000590  ee000a10          VMOV     s0,r0                 ;264
000594  ee401aa0          VMLA.F32 s3,s1,s1              ;270
000598  eeb80ac0          VCVT.F32.S32 s0,s0                 ;264
00059c  edc91a00          VSTR     s3,[r9,#0]            ;270
0005a0  9830              LDR      r0,[sp,#0xc0]         ;271
0005a2  ee200a0c          VMUL.F32 s0,s0,s24             ;264
0005a6  edd01a00          VLDR     s3,[r0,#0]            ;271
0005aa  ee401a80          VMLA.F32 s3,s1,s0              ;271
0005ae  edc01a00          VSTR     s3,[r0,#0]            ;271
0005b2  eddb1a00          VLDR     s3,[r11,#0]           ;272
0005b6  ee401a00          VMLA.F32 s3,s0,s0              ;272
0005ba  edcb1a00          VSTR     s3,[r11,#0]           ;272
0005be  edd81a00          VLDR     s3,[r8,#0]            ;274
0005c2  ee401a81          VMLA.F32 s3,s1,s2              ;274
0005c6  edc81a00          VSTR     s3,[r8,#0]            ;274
0005ca  edda0a00          VLDR     s1,[r10,#0]           ;275
0005ce  ee400a01          VMLA.F32 s1,s0,s2              ;275
0005d2  edca0a00          VSTR     s1,[r10,#0]           ;275
0005d6  e726              B        |L4.1062|
                  |L4.1496|
0005d8  2100              MOVS     r1,#0                 ;275
0005da  4620              MOV      r0,r4                 ;275
0005dc  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0005e0  1e05              SUBS     r5,r0,#0              ;275
0005e2  f04f0100          MOV      r1,#0                 ;275
0005e6  dd1b              BLE      |L4.1568|
                  |L4.1512|
0005e8  9800              LDR      r0,[sp,#0]            ;275
0005ea  2800              CMP      r0,#0                 ;275
0005ec  bf1a              ITTE     NE                    ;275
0005ee  1c48              ADDNE    r0,r1,#1              ;275
0005f0  46ac              MOVNE    r12,r5                ;275
0005f2  468c              MOVEQ    r12,r1                ;275
0005f4  4560              CMP      r0,r12                ;275
0005f6  da10              BGE      |L4.1562|
                  |L4.1528|
0005f8  68a3              LDR      r3,[r4,#8]            ;275
0005fa  6922              LDR      r2,[r4,#0x10]         ;275
0005fc  fb002703          MLA      r7,r0,r3,r2           ;275
000600  fb012203          MLA      r2,r1,r3,r2           ;275
000604  eb070781          ADD      r7,r7,r1,LSL #2       ;275
000608  eb020280          ADD      r2,r2,r0,LSL #2       ;275
00060c  ed970a00          VLDR     s0,[r7,#0]            ;275
000610  1c40              ADDS     r0,r0,#1              ;275
000612  ed820a00          VSTR     s0,[r2,#0]            ;275
000616  4560              CMP      r0,r12                ;275
000618  dbee              BLT      |L4.1528|
                  |L4.1562|
00061a  1c49              ADDS     r1,r1,#1              ;275
00061c  42a9              CMP      r1,r5                 ;275
00061e  dbe3              BLT      |L4.1512|
                  |L4.1568|
;;;293    
;;;294              //AWAt.Print("New AWAt");
;;;295              //b.Print("New b");
;;;296    
;;;297              bool numericalFailure;
;;;298    
;;;299              if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK)
000620  ab34              ADD      r3,sp,#0xd0
000622  2200              MOVS     r2,#0
000624  a907              ADD      r1,sp,#0x1c
000626  a802              ADD      r0,sp,#8
000628  f7fffffe          BL       _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
00062c  2800              CMP      r0,#0
;;;300                return lastResult;
;;;301    
;;;302              if(numericalFailure){
;;;303                AnkiWarn("LucasKanadeTracker_Affine::IterativelyRefineTrack_Translation", "numericalFailure");
;;;304                return RESULT_OK;
;;;305              }
;;;306    
;;;307              //b.Print("New update");
;;;308    
;;;309              this->transformation.Update(b, initialImageScaleF32, scratch, Transformations::TRANSFORM_TRANSLATION);
;;;310    
;;;311              // Check if we're done with iterations
;;;312              const f32 minChange = UpdatePreviousCorners(transformation, previousCorners, scratch);
;;;313    
;;;314              if(minChange < convergenceTolerance) {
;;;315                verify_converged = true;
;;;316                return RESULT_OK;
;;;317              }
;;;318            } // for(s32 iteration=0; iteration<maxIterations; iteration++)
;;;319    
;;;320            return RESULT_OK;
;;;321          } // Result LucasKanadeTracker_Affine::IterativelyRefineTrack_Translation()
00062e  bf1f              ITTTT    NE
000630  b03b              ADDNE    sp,sp,#0xec
000632  ecbd8b10          VPOPNE   {d8-d15}
000636  b006              ADDNE    sp,sp,#0x18
000638  e8bd8ff0          POPNE    {r4-r11,pc}
00063c  f89d00d0          LDRB     r0,[sp,#0xd0]         ;302
000640  bb78              CBNZ     r0,|L4.1698|
000642  a820              ADD      r0,sp,#0x80           ;309
000644  995b              LDR      r1,[sp,#0x16c]        ;309
000646  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00064a  4602              MOV      r2,r0                 ;309
00064c  f44f7300          MOV      r3,#0x200             ;309
000650  ed9d0a19          VLDR     s0,[sp,#0x64]         ;309
000654  a907              ADD      r1,sp,#0x1c           ;309
000656  f1060018          ADD      r0,r6,#0x18           ;309
00065a  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
00065e  a820              ADD      r0,sp,#0x80           ;312
000660  995b              LDR      r1,[sp,#0x16c]        ;312
000662  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000666  4602              MOV      r2,r0                 ;312
000668  a90c              ADD      r1,sp,#0x30           ;312
00066a  f1060018          ADD      r0,r6,#0x18           ;312
00066e  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
000672  eddd0a4b          VLDR     s1,[sp,#0x12c]        ;314
000676  eeb40ae0          VCMPE.F32 s0,s1                 ;314
00067a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;314
00067e  d209              BCS      |L4.1684|
000680  995a              LDR      r1,[sp,#0x168]        ;315
000682  2001              MOVS     r0,#1                 ;315
000684  7008              STRB     r0,[r1,#0]            ;315
000686  2000              MOVS     r0,#0                 ;316
                  |L4.1672|
000688  b03b              ADD      sp,sp,#0xec
00068a  ecbd8b10          VPOP     {d8-d15}
00068e  b006              ADD      sp,sp,#0x18
000690  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.1684|
000694  9828              LDR      r0,[sp,#0xa0]         ;192
000696  994f              LDR      r1,[sp,#0x13c]        ;192
000698  1c40              ADDS     r0,r0,#1              ;192
00069a  9028              STR      r0,[sp,#0xa0]         ;192
00069c  4288              CMP      r0,r1                 ;192
00069e  f6ffadcc          BLT      |L4.570|
                  |L4.1698|
0006a2  2000              MOVS     r0,#0                 ;320
0006a4  e7f0              B        |L4.1672|
;;;322    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC2ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::LucasKanadeTracker_Affine__sub_object(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
                  _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::LucasKanadeTracker_Affine(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
;;;36     
;;;37           LucasKanadeTracker_Affine::LucasKanadeTracker_Affine(
;;;38             const Array<u8> &templateImage,
;;;39             const Quadrilateral<f32> &templateQuad,
;;;40             const f32 scaleTemplateRegionPercent,
;;;41             const s32 numPyramidLevels,
;;;42             const Transformations::TransformType transformType,
;;;43             MemoryStack &memory)
;;;44             : LucasKanadeTracker_Fast(Transformations::TRANSFORM_AFFINE, templateImage, templateQuad, scaleTemplateRegionPercent, numPyramidLevels, transformType, memory)
;;;45           {
;;;46             this->isValid = true;
;;;47           }
;;;48     
000000  b510              PUSH     {r4,lr}
000002  b084              SUB      sp,sp,#0x10
000004  469c              MOV      r12,r3
000006  4614              MOV      r4,r2
000008  e9dd2306          LDRD     r2,r3,[sp,#0x18]
00000c  f8cdc000          STR      r12,[sp,#0]
000010  e9cd2301          STRD     r2,r3,[sp,#4]
000014  460a              MOV      r2,r1
000016  4623              MOV      r3,r4
000018  f44f61c0          MOV      r1,#0x600
00001c  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::LucasKanadeTracker_Fast(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
000020  2101              MOVS     r1,#1
000022  f8801070          STRB     r1,[r0,#0x70]
000026  b004              ADD      sp,sp,#0x10
000028  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC2Ev                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::LucasKanadeTracker_Affine__sub_object()
                  _ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC1Ev PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Affine::LucasKanadeTracker_Affine()
;;;31         {
;;;32           LucasKanadeTracker_Affine::LucasKanadeTracker_Affine()
;;;33             : LucasKanadeTracker_Fast(Transformations::TRANSFORM_AFFINE)
;;;34           {
;;;35           }
;;;36     
000000  f44f61c0          MOV      r1,#0x600
000004  f7ffbffe          B.W      _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::LucasKanadeTracker_Fast(Anki::Embedded::Transformations::TransformType)
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_AffineC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker25LucasKanadeTracker_Affine11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a54656d          DCB      0x3a,0x54,0x65,0x6d
000020  706c6174          DCB      0x70,0x6c,0x61,0x74
000024  65547261          DCB      0x65,0x54,0x72,0x61
000028  636b6572          DCB      0x63,0x6b,0x65,0x72
00002c  3a3a4c75          DCB      0x3a,0x3a,0x4c,0x75
000030  6361734b          DCB      0x63,0x61,0x73,0x4b
000034  616e6164          DCB      0x61,0x6e,0x61,0x64
000038  65547261          DCB      0x65,0x54,0x72,0x61
00003c  636b6572          DCB      0x63,0x6b,0x65,0x72
000040  5f416666          DCB      0x5f,0x41,0x66,0x66
000044  696e653a          DCB      0x69,0x6e,0x65,0x3a
000048  3a497465          DCB      0x3a,0x49,0x74,0x65
00004c  72617469          DCB      0x72,0x61,0x74,0x69
000050  76656c79          DCB      0x76,0x65,0x6c,0x79
000054  52656669          DCB      0x52,0x65,0x66,0x69
000058  6e655472          DCB      0x6e,0x65,0x54,0x72
00005c  61636b28          DCB      0x61,0x63,0x6b,0x28
000060  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000064  7420416e          DCB      0x74,0x20,0x41,0x6e
000068  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00006c  456d6265          DCB      0x45,0x6d,0x62,0x65
000070  64646564          DCB      0x64,0x64,0x65,0x64
000074  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000078  7261793c          DCB      0x72,0x61,0x79,0x3c
00007c  756e7369          DCB      0x75,0x6e,0x73,0x69
000080  676e6564          DCB      0x67,0x6e,0x65,0x64
000084  20636861          DCB      0x20,0x63,0x68,0x61
000088  723e2026          DCB      0x72,0x3e,0x20,0x26
00008c  2c207369          DCB      0x2c,0x20,0x73,0x69
000090  676e6564          DCB      0x67,0x6e,0x65,0x64
000094  20696e74          DCB      0x20,0x69,0x6e,0x74
000098  2c207369          DCB      0x2c,0x20,0x73,0x69
00009c  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a0  20696e74          DCB      0x20,0x69,0x6e,0x74
0000a4  2c20666c          DCB      0x2c,0x20,0x66,0x6c
0000a8  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000ac  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000b0  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000b4  6d626564          DCB      0x6d,0x62,0x65,0x64
0000b8  6465643a          DCB      0x64,0x65,0x64,0x3a
0000bc  3a547261          DCB      0x3a,0x54,0x72,0x61
0000c0  6e73666f          DCB      0x6e,0x73,0x66,0x6f
0000c4  726d6174          DCB      0x72,0x6d,0x61,0x74
0000c8  696f6e73          DCB      0x69,0x6f,0x6e,0x73
0000cc  3a3a5472          DCB      0x3a,0x3a,0x54,0x72
0000d0  616e7366          DCB      0x61,0x6e,0x73,0x66
0000d4  6f726d54          DCB      0x6f,0x72,0x6d,0x54
0000d8  7970652c          DCB      0x79,0x70,0x65,0x2c
0000dc  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000e0  6c20262c          DCB      0x6c,0x20,0x26,0x2c
0000e4  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000e8  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000ec  6d626564          DCB      0x6d,0x62,0x65,0x64
0000f0  6465643a          DCB      0x64,0x65,0x64,0x3a
0000f4  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
0000f8  6f727953          DCB      0x6f,0x72,0x79,0x53
0000fc  7461636b          DCB      0x74,0x61,0x63,0x6b
000100  29000000          DCB      0x29,0x00,0x00,0x00
000104  4c696e65          DCB      0x4c,0x69,0x6e,0x65
000108  61725365          DCB      0x61,0x72,0x53,0x65
00010c  7175656e          DCB      0x71,0x75,0x65,0x6e
000110  63653c54          DCB      0x63,0x65,0x3c,0x54
000114  7970653e          DCB      0x79,0x70,0x65,0x3e
000118  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
00011c  6d707574          DCB      0x6d,0x70,0x75,0x74
000120  6553697a          DCB      0x65,0x53,0x69,0x7a
000124  65000000          DCB      0x65,0x00,0x00,0x00
000128  73697a65          DCB      0x73,0x69,0x7a,0x65
00012c  20657374          DCB      0x20,0x65,0x73,0x74
000130  696d6174          DCB      0x69,0x6d,0x61,0x74
000134  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000138  6661696c          DCB      0x66,0x61,0x69,0x6c
00013c  65640000          DCB      0x65,0x64,0x00,0x00
000140  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000144  6f726574          DCB      0x6f,0x72,0x65,0x74
000148  6563685c          DCB      0x65,0x63,0x68,0x5c
00014c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000150  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000154  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000158  64655c61          DCB      0x64,0x65,0x5c,0x61
00015c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000160  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000164  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000168  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00016c  2f736571          DCB      0x2f,0x73,0x65,0x71
000170  75656e63          DCB      0x75,0x65,0x6e,0x63
000174  65732e68          DCB      0x65,0x73,0x2e,0x68
000178  00000000          DCB      0x00,0x00,0x00,0x00
00017c  41727261          DCB      0x41,0x72,0x72,0x61
000180  793c5479          DCB      0x79,0x3c,0x54,0x79
000184  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000188  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
00018c  70757465          DCB      0x70,0x75,0x74,0x65
000190  52657175          DCB      0x52,0x65,0x71,0x75
000194  69726564          DCB      0x69,0x72,0x65,0x64
000198  53747269          DCB      0x53,0x74,0x72,0x69
00019c  64650000          DCB      0x64,0x65,0x00,0x00
0001a0  496e7661          DCB      0x49,0x6e,0x76,0x61
0001a4  6c696420          DCB      0x6c,0x69,0x64,0x20
0001a8  73697a65          DCB      0x73,0x69,0x7a,0x65
0001ac  00000000          DCB      0x00,0x00,0x00,0x00
0001b0  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0001b4  6f726574          DCB      0x6f,0x72,0x65,0x74
0001b8  6563685c          DCB      0x65,0x63,0x68,0x5c
0001bc  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001c0  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0001c4  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0001c8  64655c61          DCB      0x64,0x65,0x5c,0x61
0001cc  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0001d0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001d4  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0001d8  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0001dc  2f617272          DCB      0x2f,0x61,0x72,0x72
0001e0  61793264          DCB      0x61,0x79,0x32,0x64
0001e4  2e680000          DCB      0x2e,0x68,0x00,0x00
0001e8  41727261          DCB      0x41,0x72,0x72,0x61
0001ec  793c5479          DCB      0x79,0x3c,0x54,0x79
0001f0  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0001f4  3a676574          DCB      0x3a,0x67,0x65,0x74
0001f8  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0001fc  65000000          DCB      0x65,0x00,0x00,0x00
000200  4e656761          DCB      0x4e,0x65,0x67,0x61
000204  74697665          DCB      0x74,0x69,0x76,0x65
000208  2064696d          DCB      0x20,0x64,0x69,0x6d
00020c  656e7369          DCB      0x65,0x6e,0x73,0x69
000210  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000214  41727261          DCB      0x41,0x72,0x72,0x61
000218  793c5479          DCB      0x79,0x3c,0x54,0x79
00021c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000220  3a536574          DCB      0x3a,0x53,0x65,0x74
000224  5a65726f          DCB      0x5a,0x65,0x72,0x6f
000228  00000000          DCB      0x00,0x00,0x00,0x00
00022c  41727261          DCB      0x41,0x72,0x72,0x61
000230  793c5479          DCB      0x79,0x3c,0x54,0x79
000234  70653e20          DCB      0x70,0x65,0x3e,0x20
000238  6973206e          DCB      0x69,0x73,0x20,0x6e
00023c  6f742076          DCB      0x6f,0x74,0x20,0x76
000240  616c6964          DCB      0x61,0x6c,0x69,0x64
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  4d616b65          DCB      0x4d,0x61,0x6b,0x65
00024c  53796d6d          DCB      0x53,0x79,0x6d,0x6d
000250  65747269          DCB      0x65,0x74,0x72,0x69
000254  63000000          DCB      0x63,0x00,0x00,0x00
000258  496e7075          DCB      0x49,0x6e,0x70,0x75
00025c  74206172          DCB      0x74,0x20,0x61,0x72
000260  72617920          DCB      0x72,0x61,0x79,0x20
000264  6d757374          DCB      0x6d,0x75,0x73,0x74
000268  20626520          DCB      0x20,0x62,0x65,0x20
00026c  73717561          DCB      0x73,0x71,0x75,0x61
000270  72650000          DCB      0x72,0x65,0x00,0x00
000274  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000278  6f726574          DCB      0x6f,0x72,0x65,0x74
00027c  6563685c          DCB      0x65,0x63,0x68,0x5c
000280  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000284  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000288  6e636c75          DCB      0x6e,0x63,0x6c,0x75
00028c  64655c61          DCB      0x64,0x65,0x5c,0x61
000290  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000294  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000298  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
00029c  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0002a0  2f6d6174          DCB      0x2f,0x6d,0x61,0x74
0002a4  7269782e          DCB      0x72,0x69,0x78,0x2e
0002a8  68000000          DCB      0x68,0x00,0x00,0x00
0002ac  54686520          DCB      0x54,0x68,0x65,0x20
0002b0  74656d70          DCB      0x74,0x65,0x6d,0x70
0002b4  6c617465          DCB      0x6c,0x61,0x74,0x65
0002b8  496d6167          DCB      0x49,0x6d,0x61,0x67
0002bc  65206d75          DCB      0x65,0x20,0x6d,0x75
0002c0  73742062          DCB      0x73,0x74,0x20,0x62
0002c4  65206120          DCB      0x65,0x20,0x61,0x20
0002c8  706f7765          DCB      0x70,0x6f,0x77,0x65
0002cc  72206f66          DCB      0x72,0x20,0x6f,0x66
0002d0  2074776f          DCB      0x20,0x74,0x77,0x6f
0002d4  20736d61          DCB      0x20,0x73,0x6d,0x61
0002d8  6c6c6572          DCB      0x6c,0x6c,0x65,0x72
0002dc  20746861          DCB      0x20,0x74,0x68,0x61
0002e0  6e204241          DCB      0x6e,0x20,0x42,0x41
0002e4  53455f49          DCB      0x53,0x45,0x5f,0x49
0002e8  4d414745          DCB      0x4d,0x41,0x47,0x45
0002ec  5f574944          DCB      0x5f,0x57,0x49,0x44
0002f0  544800            DCB      0x54,0x48,0x00

                          AREA ||t._ZN4Anki8Embedded5PointIfEC1Ev||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5PointIfEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point<float>::Point__sub_object()
                  _ZN4Anki8Embedded5PointIfEC1Ev PROC ; Anki::Embedded::Point<float>::Point()
;;;28     #endif
;;;29         template<typename Type> Point<Type>::Point()
;;;30           : x(static_cast<Type>(0)), y(static_cast<Type>(0))
;;;31         {
;;;32         }
;;;33     
000000  ed9f0a03          VLDR     s0,|L44.16|
000004  ed800a00          VSTR     s0,[r0,#0]
000008  ed800a01          VSTR     s0,[r0,#4]
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L44.16|
000010  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.45||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5PointIfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5PointIfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L51.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L51.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L51.384|
000044  a25c              ADR      r2,|L51.440|
000046  a160              ADR      r1,|L51.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L51.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L51.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L51.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L51.384|
000080  a24d              ADR      r2,|L51.440|
000082  a157              ADR      r1,|L51.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L51.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L51.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L51.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L51.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L51.384|
0000c8  a251              ADR      r2,|L51.528|
0000ca  a156              ADR      r1,|L51.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L51.372|
                  |L51.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L51.384|
0000e0  a258              ADR      r2,|L51.580|
0000e2  a15f              ADR      r1,|L51.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L51.372|
                  |L51.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L51.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L51.384|
000110  a259              ADR      r2,|L51.632|
000112  a144              ADR      r1,|L51.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L51.372|
                  |L51.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L51.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L51.384|
00015a  a251              ADR      r2,|L51.672|
00015c  a140              ADR      r1,|L51.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L51.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L51.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L51.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L51.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L51.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L51.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L51.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L51.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L51.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L51.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L51.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L51.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L51.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L51.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.52||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L58.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L58.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L58.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L58.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L58.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L58.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L58.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L58.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L58.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L58.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
0000b2  e009              B        |L58.200|
                  |L58.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L58.118|
                  |L58.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L58.140|
                  |L58.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L58.162|
                  |L58.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
                  |L58.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.59||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb||, COMGROUP=_ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb PROC ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
;;;352    
;;;353          template<typename Type> Result SolveLeastSquaresWithCholesky(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;354            Array<Type> &A_L,       //!< Input A Matrix and Output lower-triangular L matrix
;;;355            Array<Type> &Bt_Xt,     //!< Input B-transpose matrix and Output X-transpose solution
;;;356            bool realCholesky,      //!< A real Cholesky is slower to compute, and not required if only the X solution is required
;;;357            bool &numericalFailure  //!< If true, the solver failed because of numerical instability
;;;358            )
;;;359          {
000004  460e              MOV      r6,r1
000006  ed2d8b02          VPUSH    {d8}
00000a  b083              SUB      sp,sp,#0xc
00000c  4699              MOV      r9,r3
00000e  4604              MOV      r4,r0
;;;360            const s32 matrixHeight = A_L.get_size(0);
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000016  4605              MOV      r5,r0
;;;361            const s32 numSamples = Bt_Xt.get_size(0);
000018  2100              MOVS     r1,#0
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000020  4607              MOV      r7,r0
;;;362    
;;;363            numericalFailure = false;
000022  2000              MOVS     r0,#0
000024  f8890000          STRB     r0,[r9,#0]
000028  6920              LDR      r0,[r4,#0x10]
;;;364    
;;;365            AnkiConditionalErrorAndReturnValue(AreValid(A_L, Bt_Xt),
00002a  f8df826c          LDR      r8,|L65.664|
00002e  2800              CMP      r0,#0
000030  d026              BEQ      |L65.128|
000032  6820              LDR      r0,[r4,#0]
000034  2800              CMP      r0,#0
000036  bfa4              ITT      GE
000038  6860              LDRGE    r0,[r4,#4]
00003a  2800              CMPGE    r0,#0
00003c  db20              BLT      |L65.128|
00003e  6930              LDR      r0,[r6,#0x10]
000040  2800              CMP      r0,#0
000042  d01d              BEQ      |L65.128|
000044  6830              LDR      r0,[r6,#0]
000046  2800              CMP      r0,#0
000048  bfa4              ITT      GE
00004a  6870              LDRGE    r0,[r6,#4]
00004c  2800              CMPGE    r0,#0
00004e  db17              BLT      |L65.128|
;;;366              RESULT_FAIL_INVALID_OBJECT, "CholeskyDecomposition", "Invalid objects");
;;;367    
;;;368            AnkiConditionalErrorAndReturnValue(matrixHeight == A_L.get_size(1),
000050  2101              MOVS     r1,#1
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000058  42a8              CMP      r0,r5
00005a  d01e              BEQ      |L65.154|
00005c  f44f70b8          MOV      r0,#0x170
000060  e9cd8000          STRD     r8,r0,[sp,#0]
000064  a38d              ADR      r3,|L65.668|
000066  a29b              ADR      r2,|L65.724|
000068  a19f              ADR      r1,|L65.744|
00006a  2005              MOVS     r0,#5
00006c  f7fffffe          BL       _Anki_Log
000070  f04f60a0          MOV      r0,#0x5000000
                  |L65.116|
;;;369              RESULT_FAIL_INVALID_SIZE, "CholeskyDecomposition", "A_L is not square");
;;;370    
;;;371            AnkiConditionalErrorAndReturnValue(Bt_Xt.get_size(1) == matrixHeight,
;;;372              RESULT_FAIL_INVALID_SIZE, "CholeskyDecomposition", "Xt and Bt are the wrong sizes");
;;;373    
;;;374            // TODO: check if symmetric and positive-definite
;;;375    
;;;376            const Type minStableValue = Anki::Embedded::Flags::numeric_limits<Type>::epsilon();
;;;377    
;;;378            for(s32 i = 0; i < matrixHeight; i++) {
;;;379              // First, compute the non-diagonal values
;;;380              // This uses the results from the diagonal inverse computation from previous iterations of i
;;;381              Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;382    
;;;383              for(s32 j = 0; j < i; j++) {
;;;384                Type * restrict pAL_yj = A_L.Pointer(j, 0);
;;;385    
;;;386                Type sum = pAL_yi[j];
;;;387                for(s32 k = 0; k < j; k++) {
;;;388                  const Type value1 = pAL_yi[k];
;;;389                  const Type value2 = pAL_yj[k];
;;;390                  sum -= value1*value2;
;;;391                }
;;;392    
;;;393                pAL_yi[j] = sum*pAL_yj[j];
;;;394              } // for(s32 j = 0; j < i; j++)
;;;395    
;;;396              // Second, compute the inverse of the diagonal
;;;397              {
;;;398                Type sum = pAL_yi[i];
;;;399                for(s32 k = 0; k < i; k++) {
;;;400                  const Type value = pAL_yi[k];
;;;401                  sum -= value*value;
;;;402                }
;;;403    
;;;404                if(sum < minStableValue) {
;;;405                  numericalFailure = true;
;;;406                  return RESULT_OK;
;;;407                }
;;;408    
;;;409                // TODO: change this f32 square root to f64 if Type==f64
;;;410                const Type sumRoot = static_cast<Type>(sqrtf(static_cast<f32>(sum)));
;;;411                pAL_yi[i] = static_cast<Type>(1) / sumRoot;
;;;412              }
;;;413            } // for(s32 i = 0; i < m; i++)
;;;414    
;;;415            // Solve L*y = b via forward substitution
;;;416            for(s32 i = 0; i < matrixHeight; i++) {
;;;417              const Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;418              //Type * restrict pBX_yi = Bt_Xt.Pointer(i, 0);
;;;419    
;;;420              for(s32 j = 0; j < numSamples; j++) {
;;;421                Type * restrict pBX_yj = Bt_Xt.Pointer(j, 0);
;;;422    
;;;423                Type sum = pBX_yj[i];
;;;424                for(s32 k = 0; k < i; k++) {
;;;425                  const Type value1 = pAL_yi[k];
;;;426                  const Type value2 = pBX_yj[k];
;;;427                  sum -= value1*value2;
;;;428                }
;;;429    
;;;430                pBX_yj[i] = sum*pAL_yi[i];
;;;431              }
;;;432            }
;;;433    
;;;434            // Solve L'*X = Y via back substitution
;;;435            for(s32 i = matrixHeight-1; i >= 0; i--) {
;;;436              const Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;437              //Type * restrict pBX_yi = Bt_Xt.Pointer(i, 0);
;;;438    
;;;439              for(s32 j = 0; j < numSamples; j++) {
;;;440                Type * restrict pBX_yj = Bt_Xt.Pointer(j, 0);
;;;441    
;;;442                Type sum = pBX_yj[i];
;;;443                for(s32 k = matrixHeight-1; k > i; k-- ) {
;;;444                  const Type value1 = A_L[k][i];
;;;445                  const Type value2 = pBX_yj[k];
;;;446                  sum -= value1*value2;
;;;447                }
;;;448    
;;;449                pBX_yj[i] = sum*pAL_yi[i];
;;;450              }
;;;451            }
;;;452    
;;;453            if(realCholesky) {
;;;454              // Invert the diagonal values of L, and set upper triangular to zero
;;;455              for(s32 i = 0; i < matrixHeight; i++) {
;;;456                Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;457    
;;;458                pAL_yi[i] = static_cast<Type>(1) / pAL_yi[i];
;;;459    
;;;460                for(s32 j = i+1; j < matrixHeight; j++) {
;;;461                  pAL_yi[j] = 0;
;;;462                }
;;;463              }
;;;464            }
;;;465    
;;;466            return RESULT_OK;
;;;467          } // SolveLeastSquaresWithCholesky()
000074  b003              ADD      sp,sp,#0xc
000076  ecbd8b02          VPOP     {d8}
00007a  b004              ADD      sp,sp,#0x10
00007c  e8bd8ff0          POP      {r4-r11,pc}
                  |L65.128|
000080  f240106d          MOV      r0,#0x16d             ;365
000084  e9cd8000          STRD     r8,r0,[sp,#0]         ;365
000088  a384              ADR      r3,|L65.668|
00008a  a29d              ADR      r2,|L65.768|
00008c  a196              ADR      r1,|L65.744|
00008e  2005              MOVS     r0,#5                 ;365
000090  f7fffffe          BL       _Anki_Log
000094  f04f6080          MOV      r0,#0x4000000         ;365
000098  e7ec              B        |L65.116|
                  |L65.154|
00009a  2101              MOVS     r1,#1                 ;371
00009c  4630              MOV      r0,r6                 ;371
00009e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000a2  42a8              CMP      r0,r5                 ;371
0000a4  d00c              BEQ      |L65.192|
0000a6  f2401073          MOV      r0,#0x173             ;371
0000aa  e9cd8000          STRD     r8,r0,[sp,#0]         ;371
0000ae  a37b              ADR      r3,|L65.668|
0000b0  a297              ADR      r2,|L65.784|
0000b2  a18d              ADR      r1,|L65.744|
0000b4  2005              MOVS     r0,#5                 ;371
0000b6  f7fffffe          BL       _Anki_Log
0000ba  f04f60a0          MOV      r0,#0x5000000         ;371
0000be  e7d9              B        |L65.116|
                  |L65.192|
0000c0  eddf8a9b          VLDR     s17,|L65.816|
0000c4  f04f0800          MOV      r8,#0                 ;378
0000c8  eeb78a00          VMOV.F32 s16,#1.00000000       ;411
0000cc  2d00              CMP      r5,#0                 ;378
0000ce  dd58              BLE      |L65.386|
                  |L65.208|
0000d0  68a1              LDR      r1,[r4,#8]            ;378
0000d2  6920              LDR      r0,[r4,#0x10]         ;378
0000d4  2200              MOVS     r2,#0                 ;383
0000d6  fb080101          MLA      r1,r8,r1,r0           ;383
0000da  f1b80f00          CMP      r8,#0                 ;383
0000de  dd22              BLE      |L65.294|
                  |L65.224|
0000e0  68a3              LDR      r3,[r4,#8]            ;383
0000e2  6920              LDR      r0,[r4,#0x10]         ;383
0000e4  eb010c82          ADD      r12,r1,r2,LSL #2      ;386
0000e8  fb020303          MLA      r3,r2,r3,r0           ;386
0000ec  ed9c0a00          VLDR     s0,[r12,#0]           ;386
0000f0  2000              MOVS     r0,#0                 ;387
0000f2  2a00              CMP      r2,#0                 ;387
0000f4  dd0c              BLE      |L65.272|
                  |L65.246|
0000f6  eb010a80          ADD      r10,r1,r0,LSL #2      ;388
0000fa  ed9a1a00          VLDR     s2,[r10,#0]           ;388
0000fe  eb030a80          ADD      r10,r3,r0,LSL #2      ;389
000102  1c40              ADDS     r0,r0,#1              ;387
000104  edda0a00          VLDR     s1,[r10,#0]           ;389
000108  4282              CMP      r2,r0                 ;387
00010a  ee010a60          VMLS.F32 s0,s2,s1              ;390
00010e  dcf2              BGT      |L65.246|
                  |L65.272|
000110  eb030082          ADD      r0,r3,r2,LSL #2       ;393
000114  1c52              ADDS     r2,r2,#1              ;383
000116  edd00a00          VLDR     s1,[r0,#0]            ;393
00011a  4542              CMP      r2,r8                 ;383
00011c  ee200a80          VMUL.F32 s0,s1,s0              ;393
000120  ed8c0a00          VSTR     s0,[r12,#0]           ;393
000124  dbdc              BLT      |L65.224|
                  |L65.294|
000126  eb010a88          ADD      r10,r1,r8,LSL #2      ;398
00012a  2000              MOVS     r0,#0                 ;399
00012c  ed9a0a00          VLDR     s0,[r10,#0]           ;398
000130  f1b80f00          CMP      r8,#0                 ;399
000134  dd08              BLE      |L65.328|
                  |L65.310|
000136  eb010280          ADD      r2,r1,r0,LSL #2       ;400
00013a  1c40              ADDS     r0,r0,#1              ;399
00013c  edd20a00          VLDR     s1,[r2,#0]            ;400
000140  4580              CMP      r8,r0                 ;399
000142  ee000ae0          VMLS.F32 s0,s1,s1              ;401
000146  dcf6              BGT      |L65.310|
                  |L65.328|
000148  eef48ac0          VCMPE.F32 s17,s0                ;404
00014c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;404
000150  dd04              BLE      |L65.348|
000152  2001              MOVS     r0,#1                 ;405
000154  f8890000          STRB     r0,[r9,#0]            ;405
000158  2000              MOVS     r0,#0                 ;406
00015a  e78b              B        |L65.116|
                  |L65.348|
00015c  eef10ac0          VSQRT.F32 s1,s0                 ;410
000160  eef40a60          VCMP.F32 s1,s1                 ;410
000164  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;410
000168  d003              BEQ      |L65.370|
00016a  f7fffffe          BL       __hardfp_sqrtf
00016e  eef00a40          VMOV.F32 s1,s0                 ;410
                  |L65.370|
000172  f1080801          ADD      r8,r8,#1              ;378
000176  ee880a20          VDIV.F32 s0,s16,s1             ;411
00017a  45a8              CMP      r8,r5                 ;378
00017c  ed8a0a00          VSTR     s0,[r10,#0]           ;411
000180  dba6              BLT      |L65.208|
                  |L65.386|
000182  2100              MOVS     r1,#0                 ;416
000184  2d00              CMP      r5,#0                 ;416
000186  dd2d              BLE      |L65.484|
                  |L65.392|
000188  68a2              LDR      r2,[r4,#8]            ;416
00018a  6920              LDR      r0,[r4,#0x10]         ;416
00018c  fb010c02          MLA      r12,r1,r2,r0          ;416
000190  2200              MOVS     r2,#0                 ;420
000192  2f00              CMP      r7,#0                 ;420
000194  bfc8              IT       GT                    ;430
000196  eb0c0981          ADDGT    r9,r12,r1,LSL #2      ;430
00019a  dd20              BLE      |L65.478|
                  |L65.412|
00019c  68b3              LDR      r3,[r6,#8]            ;420
00019e  6930              LDR      r0,[r6,#0x10]         ;420
0001a0  fb020303          MLA      r3,r2,r3,r0           ;420
0001a4  eb030881          ADD      r8,r3,r1,LSL #2       ;423
0001a8  2000              MOVS     r0,#0                 ;424
0001aa  ed980a00          VLDR     s0,[r8,#0]            ;423
0001ae  2900              CMP      r1,#0                 ;424
0001b0  dd0c              BLE      |L65.460|
                  |L65.434|
0001b2  eb0c0a80          ADD      r10,r12,r0,LSL #2     ;425
0001b6  ed9a1a00          VLDR     s2,[r10,#0]           ;425
0001ba  eb030a80          ADD      r10,r3,r0,LSL #2      ;426
0001be  1c40              ADDS     r0,r0,#1              ;424
0001c0  edda0a00          VLDR     s1,[r10,#0]           ;426
0001c4  4281              CMP      r1,r0                 ;424
0001c6  ee010a60          VMLS.F32 s0,s2,s1              ;427
0001ca  dcf2              BGT      |L65.434|
                  |L65.460|
0001cc  edd90a00          VLDR     s1,[r9,#0]            ;430
0001d0  1c52              ADDS     r2,r2,#1              ;420
0001d2  42ba              CMP      r2,r7                 ;420
0001d4  ee200a80          VMUL.F32 s0,s1,s0              ;430
0001d8  ed880a00          VSTR     s0,[r8,#0]            ;430
0001dc  dbde              BLT      |L65.412|
                  |L65.478|
0001de  1c49              ADDS     r1,r1,#1              ;416
0001e0  42a9              CMP      r1,r5                 ;416
0001e2  dbd1              BLT      |L65.392|
                  |L65.484|
0001e4  1e69              SUBS     r1,r5,#1              ;435
0001e6  d433              BMI      |L65.592|
                  |L65.488|
0001e8  68a2              LDR      r2,[r4,#8]            ;435
0001ea  6920              LDR      r0,[r4,#0x10]         ;435
0001ec  fb010002          MLA      r0,r1,r2,r0           ;435
0001f0  2200              MOVS     r2,#0                 ;439
0001f2  2f00              CMP      r7,#0                 ;439
0001f4  bfc8              IT       GT                    ;449
0001f6  eb000a81          ADDGT    r10,r0,r1,LSL #2      ;449
0001fa  dd27              BLE      |L65.588|
                  |L65.508|
0001fc  68b3              LDR      r3,[r6,#8]            ;439
0001fe  6930              LDR      r0,[r6,#0x10]         ;439
000200  fb020303          MLA      r3,r2,r3,r0           ;439
000204  eb030981          ADD      r9,r3,r1,LSL #2       ;442
000208  1e68              SUBS     r0,r5,#1              ;443
00020a  ed990a00          VLDR     s0,[r9,#0]            ;442
00020e  4288              CMP      r0,r1                 ;443
000210  bfc4              ITT      GT                    ;443
000212  f8d4c008          LDRGT    r12,[r4,#8]           ;443
000216  f8d48010          LDRGT    r8,[r4,#0x10]         ;443
00021a  dd0e              BLE      |L65.570|
                  |L65.540|
00021c  fb008b0c          MLA      r11,r0,r12,r8         ;443
000220  eb0b0b81          ADD      r11,r11,r1,LSL #2     ;444
000224  ed9b1a00          VLDR     s2,[r11,#0]           ;444
000228  eb030b80          ADD      r11,r3,r0,LSL #2      ;445
00022c  1e40              SUBS     r0,r0,#1              ;443
00022e  eddb0a00          VLDR     s1,[r11,#0]           ;445
000232  4288              CMP      r0,r1                 ;443
000234  ee010a60          VMLS.F32 s0,s2,s1              ;446
000238  dcf0              BGT      |L65.540|
                  |L65.570|
00023a  edda0a00          VLDR     s1,[r10,#0]           ;449
00023e  1c52              ADDS     r2,r2,#1              ;439
000240  4297              CMP      r7,r2                 ;439
000242  ee200a80          VMUL.F32 s0,s1,s0              ;449
000246  ed890a00          VSTR     s0,[r9,#0]            ;449
00024a  dcd7              BGT      |L65.508|
                  |L65.588|
00024c  1e49              SUBS     r1,r1,#1              ;435
00024e  d5cb              BPL      |L65.488|
                  |L65.592|
000250  9807              LDR      r0,[sp,#0x1c]         ;453
000252  2800              CMP      r0,#0                 ;453
000254  bf1c              ITT      NE                    ;455
000256  2100              MOVNE    r1,#0                 ;455
000258  2d00              CMPNE    r5,#0                 ;455
00025a  bfc8              IT       GT                    ;461
00025c  ed9f0a35          VLDRGT   s0,|L65.820|
000260  dd18              BLE      |L65.660|
                  |L65.610|
000262  68a2              LDR      r2,[r4,#8]            ;453
000264  6920              LDR      r0,[r4,#0x10]         ;453
000266  fb010202          MLA      r2,r1,r2,r0           ;453
00026a  eb020081          ADD      r0,r2,r1,LSL #2       ;458
00026e  edd00a00          VLDR     s1,[r0,#0]            ;458
000272  ee881a20          VDIV.F32 s2,s16,s1             ;458
000276  ed801a00          VSTR     s2,[r0,#0]            ;458
00027a  1c48              ADDS     r0,r1,#1              ;460
00027c  4285              CMP      r5,r0                 ;460
00027e  dd06              BLE      |L65.654|
                  |L65.640|
000280  eb020380          ADD      r3,r2,r0,LSL #2       ;461
000284  1c40              ADDS     r0,r0,#1              ;460
000286  ed830a00          VSTR     s0,[r3,#0]            ;461
00028a  4285              CMP      r5,r0                 ;460
00028c  dcf8              BGT      |L65.640|
                  |L65.654|
00028e  1c49              ADDS     r1,r1,#1              ;455
000290  42a9              CMP      r1,r5                 ;455
000292  dbe6              BLT      |L65.610|
                  |L65.660|
000294  2000              MOVS     r0,#0                 ;466
000296  e6ed              B        |L65.116|
;;;468    
                          ENDP

                  |L65.664|
                          DCD      _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
                  |L65.668|
00029c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
0002a0  6f726574
0002a4  6563685c
0002a8  636f6d6d
0002ac  6f6e5c69
0002b0  6e636c75
0002b4  64655c61
0002b8  6e6b692f
0002bc  636f6d6d
0002c0  6f6e2f72
0002c4  6f626f74
0002c8  2f6d6174
0002cc  726978  
0002cf  2e6800            DCB      ".h",0
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L65.724|
0002d4  415f4c20          DCB      "A_L is not square",0
0002d8  6973206e
0002dc  6f742073
0002e0  71756172
0002e4  6500    
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L65.744|
0002e8  43686f6c          DCB      "CholeskyDecomposition",0
0002ec  65736b79
0002f0  4465636f
0002f4  6d706f73
0002f8  6974696f
0002fc  6e00    
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L65.768|
000300  496e7661          DCB      "Invalid objects",0
000304  6c696420
000308  6f626a65
00030c  63747300
                  |L65.784|
000310  58742061          DCB      "Xt and Bt are the wrong sizes",0
000314  6e642042
000318  74206172
00031c  65207468
000320  65207772
000324  6f6e6720
000328  73697a65
00032c  7300    
00032e  00                DCB      0
00032f  00                DCB      0
                  |L65.816|
000330  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L65.820|
000334  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.66||, COMGROUP=_ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb, LINKORDER=||t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i PROC ; Anki::Embedded::Linspace<float>(T1, T1, int)
;;;162    
;;;163        template<typename Type> LinearSequence<Type> Linspace(const Type start, const Type end, const s32 size)
000000  b086              SUB      sp,sp,#0x18
000002  f04f32ff          MOV      r2,#0xffffffff
000006  eebf1a00          VMOV.F32 s2,#-1.00000000
00000a  9200              STR      r2,[sp,#0]
00000c  ed8d1a01          VSTR     s2,[sp,#4]
000010  ed8d1a02          VSTR     s2,[sp,#8]
;;;164        {
;;;165          Type increment;
;;;166    
;;;167          LinearSequence<Type> sequence;
;;;168    
;;;169          if(ABS(end-start) <= Flags::numeric_limits<Type>::epsilon()) {
000014  ee301ac0          VSUB.F32 s2,s1,s0
000018  ed9f2a2e          VLDR     s4,|L72.212|
00001c  eeb51ac0          VCMPE.F32 s2,#0.0
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR
000024  bfac              ITE      GE
000026  eef01a41          VMOVGE.F32 s3,s2
00002a  ee701a60          VSUBLT.F32 s3,s0,s1
00002e  eef41ac2          VCMPE.F32 s3,s4
000032  eef1fa10          VMRS     APSR_nzcv,FPSCR
000036  d810              BHI      |L72.90|
000038  9103              STR      r1,[sp,#0xc]          ;164
;;;170            sequence = LinearSequence<Type>(start, 0, end, size);
00003a  eddf0a27          VLDR     s1,|L72.216|
00003e  ed8d0a04          VSTR     s0,[sp,#0x10]
000042  edcd0a05          VSTR     s1,[sp,#0x14]
000046  9100              STR      r1,[sp,#0]
000048  ed8d0a01          VSTR     s0,[sp,#4]
00004c  ee102a10          VMOV     r2,s0
000050  ee103a90          VMOV     r3,s1
000054  edcd0a02          VSTR     s1,[sp,#8]
;;;171          } else {
000058  e028              B        |L72.172|
                  |L72.90|
;;;172            if(size <= 0) {
;;;173              // Empty sequence
;;;174              sequence = LinearSequence<Type>(start, 1, end, 0);
00005a  eef71a00          VMOV.F32 s3,#1.00000000
00005e  2900              CMP      r1,#0                 ;172
000060  dc0d              BGT      |L72.126|
000062  2100              MOVS     r1,#0
000064  9103              STR      r1,[sp,#0xc]
000066  ed8d0a04          VSTR     s0,[sp,#0x10]
00006a  edcd1a05          VSTR     s3,[sp,#0x14]
00006e  9100              STR      r1,[sp,#0]
000070  ee102a10          VMOV     r2,s0
000074  ee113a90          VMOV     r3,s3
000078  ed8d0a01          VSTR     s0,[sp,#4]
;;;175            } else if(size == 1) {
00007c  e027              B        |L72.206|
                  |L72.126|
00007e  2901              CMP      r1,#1
000080  d019              BEQ      |L72.182|
;;;176              // If size == 1, match output with Matlab
;;;177              sequence = LinearSequence<Type>(end, 1, end, size);
;;;178            } else {
;;;179              increment = (end-start) / (size-1);
000082  1e4a              SUBS     r2,r1,#1
000084  ee002a90          VMOV     s1,r2
000088  9103              STR      r1,[sp,#0xc]
00008a  ed8d0a04          VSTR     s0,[sp,#0x10]
00008e  eef81ae0          VCVT.F32.S32 s3,s1
;;;180              sequence = LinearSequence<Type>(start, increment, end, size);
000092  ee102a10          VMOV     r2,s0
000096  eec10a21          VDIV.F32 s1,s2,s3              ;179
00009a  edcd0a05          VSTR     s1,[sp,#0x14]         ;179
00009e  ee103a90          VMOV     r3,s1
0000a2  9100              STR      r1,[sp,#0]
0000a4  ed8d0a01          VSTR     s0,[sp,#4]
0000a8  edcd0a02          VSTR     s1,[sp,#8]
                  |L72.172|
;;;181            }
;;;182          }
;;;183    
;;;184          return sequence;
0000ac  6083              STR      r3,[r0,#8]
0000ae  e9c01200          STRD     r1,r2,[r0,#0]
;;;185        }
0000b2  b006              ADD      sp,sp,#0x18
0000b4  4770              BX       lr
                  |L72.182|
0000b6  9103              STR      r1,[sp,#0xc]
0000b8  edcd0a04          VSTR     s1,[sp,#0x10]
0000bc  edcd1a05          VSTR     s3,[sp,#0x14]
0000c0  ee102a90          VMOV     r2,s1                 ;177
0000c4  ee113a90          VMOV     r3,s3                 ;177
0000c8  9100              STR      r1,[sp,#0]            ;177
0000ca  edcd0a01          VSTR     s1,[sp,#4]            ;177
                  |L72.206|
0000ce  edcd1a02          VSTR     s3,[sp,#8]            ;177
0000d2  e7eb              B        |L72.172|
;;;186    
                          ENDP

                  |L72.212|
0000d4  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L72.216|
0000d8  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.73||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, LINKORDER=||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.73||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d019              BEQ      |L79.68|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L79.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L79.30|
                  |L79.26|
00001a  462b              MOV      r3,r5
00001c  e012              B        |L79.68|
                  |L79.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0c              BGE      |L79.68|
00002a  2185              MOVS     r1,#0x85
00002c  4807              LDR      r0,|L79.76|
00002e  4b08              LDR      r3,|L79.80|
000030  e9cd0100          STRD     r0,r1,[sp,#0]
000034  f1a30218          SUB      r2,r3,#0x18
000038  f1a20124          SUB      r1,r2,#0x24
00003c  2005              MOVS     r0,#5
00003e  f7fffffe          BL       _Anki_Log
000042  462b              MOV      r3,r5
                  |L79.68|
000044  6023              STR      r3,[r4,#0]
000046  b003              ADD      sp,sp,#0xc
000048  4620              MOV      r0,r4
00004a  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L79.76|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L79.80|
                          DCD      ||.constdata||+0x140

                          AREA ||area_number.80||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.80||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi PROC ; Anki::Embedded::Array<float>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L86.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L86.56|
00000e  4b0b              LDR      r3,|L86.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L86.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L86.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
                  |L86.60|
                          DCD      ||.constdata||+0x1b0

                          AREA ||area_number.87||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.87||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L93.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L93.56|
00000e  4b0b              LDR      r3,|L93.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L93.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L93.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L93.60|
                          DCD      ||.constdata||+0x1b0

                          AREA ||area_number.94||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.94||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L100.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L100.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L100.384|
000044  a25c              ADR      r2,|L100.440|
000046  a160              ADR      r1,|L100.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L100.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0140              LSLS     r0,r0,#5
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L100.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L100.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L100.384|
000080  a24d              ADR      r2,|L100.440|
000082  a157              ADR      r1,|L100.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L100.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L100.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L100.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L100.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L100.384|
0000c8  a251              ADR      r2,|L100.528|
0000ca  a156              ADR      r1,|L100.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L100.372|
                  |L100.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L100.384|
0000e0  a258              ADR      r2,|L100.580|
0000e2  a15f              ADR      r1,|L100.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L100.372|
                  |L100.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L100.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L100.384|
000110  a259              ADR      r2,|L100.632|
000112  a144              ADR      r1,|L100.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L100.372|
                  |L100.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0171              LSLS     r1,r6,#5
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L100.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L100.384|
00015a  a251              ADR      r2,|L100.672|
00015c  a140              ADR      r1,|L100.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L100.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L100.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L100.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L100.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L100.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L100.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L100.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L100.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L100.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L100.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L100.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L100.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L100.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L100.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.101||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.101||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L107.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L107.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.108||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.108||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetZero()::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  5365745a          DCB      0x53,0x65,0x74,0x5a
00002c  65726f28          DCB      0x65,0x72,0x6f,0x28
000030  29205b77          DCB      0x29,0x20,0x5b,0x77
000034  69746820          DCB      0x69,0x74,0x68,0x20
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  203d2066          DCB      0x20,0x3d,0x20,0x66
000040  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000044  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000054  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5175          DCB      0x3a,0x3a,0x51,0x75
000098  61647269          DCB      0x61,0x64,0x72,0x69
00009c  6c617465          DCB      0x6c,0x61,0x74,0x65
0000a0  72616c3c          DCB      0x72,0x61,0x6c,0x3c
0000a4  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a8  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  51756164          DCB      0x51,0x75,0x61,0x64
0000cc  72696c61          DCB      0x72,0x69,0x6c,0x61
0000d0  74657261          DCB      0x74,0x65,0x72,0x61
0000d4  6c3c666c          DCB      0x6c,0x3c,0x66,0x6c
0000d8  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0000dc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a51          DCB      0x64,0x3a,0x3a,0x51
0000a4  75616472          DCB      0x75,0x61,0x64,0x72
0000a8  696c6174          DCB      0x69,0x6c,0x61,0x74
0000ac  6572616c          DCB      0x65,0x72,0x61,0x6c
0000b0  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000b4  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000b8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a4d616b          DCB      0x3a,0x4d,0x61,0x6b
000028  6553796d          DCB      0x65,0x53,0x79,0x6d
00002c  6d657472          DCB      0x6d,0x65,0x74,0x72
000030  69632854          DCB      0x69,0x63,0x28,0x54
000034  79706520          DCB      0x79,0x70,0x65,0x20
000038  262c2062          DCB      0x26,0x2c,0x20,0x62
00003c  6f6f6c29          DCB      0x6f,0x6f,0x6c,0x29
000040  205b7769          DCB      0x20,0x5b,0x77,0x69
000044  74682054          DCB      0x74,0x68,0x20,0x54
000048  79706520          DCB      0x79,0x70,0x65,0x20
00004c  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000050  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000054  456d6265          DCB      0x45,0x6d,0x62,0x65
000058  64646564          DCB      0x64,0x64,0x65,0x64
00005c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000060  7261793c          DCB      0x72,0x61,0x79,0x3c
000064  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000068  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a536f6c          DCB      0x3a,0x53,0x6f,0x6c
000028  76654c65          DCB      0x76,0x65,0x4c,0x65
00002c  61737453          DCB      0x61,0x73,0x74,0x53
000030  71756172          DCB      0x71,0x75,0x61,0x72
000034  65735769          DCB      0x65,0x73,0x57,0x69
000038  74684368          DCB      0x74,0x68,0x43,0x68
00003c  6f6c6573          DCB      0x6f,0x6c,0x65,0x73
000040  6b792841          DCB      0x6b,0x79,0x28,0x41
000044  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000048  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00004c  65646465          DCB      0x65,0x64,0x64,0x65
000050  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000054  72726179          DCB      0x72,0x72,0x61,0x79
000058  3c547970          DCB      0x3c,0x54,0x79,0x70
00005c  653e2026          DCB      0x65,0x3e,0x20,0x26
000060  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000064  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000068  456d6265          DCB      0x45,0x6d,0x62,0x65
00006c  64646564          DCB      0x64,0x64,0x65,0x64
000070  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000074  7261793c          DCB      0x72,0x61,0x79,0x3c
000078  54797065          DCB      0x54,0x79,0x70,0x65
00007c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000080  20626f6f          DCB      0x20,0x62,0x6f,0x6f
000084  6c2c2062          DCB      0x6c,0x2c,0x20,0x62
000088  6f6f6c20          DCB      0x6f,0x6f,0x6c,0x20
00008c  2629205b          DCB      0x26,0x29,0x20,0x5b
000090  77697468          DCB      0x77,0x69,0x74,0x68
000094  20547970          DCB      0x20,0x54,0x79,0x70
000098  65203d20          DCB      0x65,0x20,0x3d,0x20
00009c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a0  745d00            DCB      0x74,0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\lucasKanade_Affine.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___22_lucasKanade_Affine_cpp_e682c401___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___22_lucasKanade_Affine_cpp_e682c401___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___22_lucasKanade_Affine_cpp_e682c401___Z7__REVSHi|
#line 144
|__asm___22_lucasKanade_Affine_cpp_e682c401___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
