; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\lucaskanade_fast.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\lucaskanade_fast.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\lucaskanade_fast.crf ..\coretech\vision\robot\src\lucasKanade_Fast.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC2ENS0_15Transformations13TransformTypeE                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::LucasKanadeTracker_Fast__sub_object(Anki::Embedded::Transformations::TransformType)
                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::LucasKanadeTracker_Fast(Anki::Embedded::Transformations::TransformType)
;;;29         {
;;;30           LucasKanadeTracker_Fast::LucasKanadeTracker_Fast(const Transformations::TransformType maxSupportedTransformType)
;;;31             : LucasKanadeTracker_Generic(maxSupportedTransformType)
;;;32           {
;;;33           }
;;;34     
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType)
000006  3074              ADDS     r0,r0,#0x74
000008  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::FixedLengthList()
00000c  3034              ADDS     r0,r0,#0x34
00000e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::FixedLengthList()
000012  3034              ADDS     r0,r0,#0x34
000014  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList()
000018  3034              ADDS     r0,r0,#0x34
00001a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList()
00001e  f5a07088          SUB      r0,r0,#0x110
000022  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC2ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::LucasKanadeTracker_Fast__sub_object(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::LucasKanadeTracker_Fast(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
;;;34     
;;;35           LucasKanadeTracker_Fast::LucasKanadeTracker_Fast(
;;;36             const Transformations::TransformType maxSupportedTransformType,
;;;37             const Array<u8> &templateImage,
;;;38             const Quadrilateral<f32> &templateQuad,
;;;39             const f32 scaleTemplateRegionPercent,
;;;40             const s32 numPyramidLevels,
;;;41             const Transformations::TransformType transformType,
;;;42             MemoryStack &memory)
;;;43             : LucasKanadeTracker_Generic(maxSupportedTransformType, templateImage, templateQuad, scaleTemplateRegionPercent, numPyramidLevels, transformType, memory)
;;;44           {
;;;45             Result lastResult;
;;;46     
;;;47             BeginBenchmark("LucasKanadeTracker_Fast");
;;;48     
;;;49             // Allocate the memory for the pyramid lists
;;;50             templateCoordinates = FixedLengthList<Meshgrid<f32> >(numPyramidLevels, memory);
;;;51             templateImagePyramid = FixedLengthList<Array<u8> >(numPyramidLevels, memory);
;;;52             templateImageXGradientPyramid = FixedLengthList<Array<s16> >(numPyramidLevels, memory);
;;;53             templateImageYGradientPyramid = FixedLengthList<Array<s16> >(numPyramidLevels, memory);
;;;54     
;;;55             templateCoordinates.set_size(numPyramidLevels);
;;;56             templateImagePyramid.set_size(numPyramidLevels);
;;;57             templateImageXGradientPyramid.set_size(numPyramidLevels);
;;;58             templateImageYGradientPyramid.set_size(numPyramidLevels);
;;;59     
;;;60             AnkiConditionalErrorAndReturn(templateImagePyramid.IsValid() && templateImageXGradientPyramid.IsValid() && templateImageYGradientPyramid.IsValid() && templateCoordinates.IsValid(),
;;;61               "LucasKanadeTracker_Fast::LucasKanadeTracker_Fast", "Could not allocate pyramid lists");
;;;62     
;;;63             // Allocate the memory for all the images
;;;64             for(s32 iScale=0; iScale<numPyramidLevels; iScale++) {
;;;65               const f32 scale = static_cast<f32>(1 << iScale);
;;;66     
;;;67               // Unused, remove?
;;;68               //const s32 curTemplateHeight = templateImageHeight >> iScale;
;;;69               //const s32 curTemplateWidth = templateImageWidth >> iScale;
;;;70     
;;;71               templateCoordinates[iScale] = Meshgrid<f32>(
;;;72                 Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;73                 Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;74     
;;;75               const s32 numPointsY = templateCoordinates[iScale].get_yGridVector().get_size();
;;;76               const s32 numPointsX = templateCoordinates[iScale].get_xGridVector().get_size();
;;;77     
;;;78               templateImagePyramid[iScale] = Array<u8>(numPointsY, numPointsX, memory);
;;;79               templateImageXGradientPyramid[iScale] = Array<s16>(numPointsY, numPointsX, memory);
;;;80               templateImageYGradientPyramid[iScale] = Array<s16>(numPointsY, numPointsX, memory);
;;;81     
;;;82               AnkiConditionalErrorAndReturn(templateImagePyramid[iScale].IsValid() && templateImageXGradientPyramid[iScale].IsValid() && templateImageYGradientPyramid[iScale].IsValid(),
;;;83                 "LucasKanadeTracker_Fast::LucasKanadeTracker_Fast", "Could not allocate pyramid images");
;;;84             }
;;;85     
;;;86             // Sample all levels of the pyramid images
;;;87             for(s32 iScale=0; iScale<numPyramidLevels; iScale++) {
;;;88               if((lastResult = Interp2_Affine<u8,u8>(templateImage, templateCoordinates[iScale], transformation.get_homography(), this->transformation.get_centerOffset(initialImageScaleF32), this->templateImagePyramid[iScale], INTERPOLATE_LINEAR)) != RESULT_OK) {
;;;89                 AnkiError("LucasKanadeTracker_Fast::LucasKanadeTracker_Fast", "Interp2_Affine failed with code 0x%x", lastResult);
;;;90                 return;
;;;91               }
;;;92             }
;;;93     
;;;94             // Compute the spatial derivatives
;;;95             // TODO: compute without borders?
;;;96             for(s32 i=0; i<numPyramidLevels; i++) {
;;;97               if((lastResult = ImageProcessing::ComputeXGradient<u8,s16,s16>(templateImagePyramid[i], templateImageXGradientPyramid[i])) != RESULT_OK) {
;;;98                 AnkiError("LucasKanadeTracker_Fast::LucasKanadeTracker_Fast", "ComputeXGradient failed with code 0x%x", lastResult);
;;;99                 return;
;;;100              }
;;;101    
;;;102              if((lastResult = ImageProcessing::ComputeYGradient<u8,s16,s16>(templateImagePyramid[i], templateImageYGradientPyramid[i])) != RESULT_OK) {
;;;103                AnkiError("LucasKanadeTracker_Fast::LucasKanadeTracker_Fast", "ComputeYGradient failed with code 0x%x", lastResult);
;;;104                return;
;;;105              }
;;;106            }
;;;107    
;;;108            //this->isValid = true;
;;;109    
;;;110            EndBenchmark("LucasKanadeTracker_Fast");
;;;111          }
;;;112    
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  460c              MOV      r4,r1
000006  ed2d0b02          VPUSH    {d0}
00000a  ed2d8b06          VPUSH    {d8-d10}
00000e  b0c3              SUB      sp,sp,#0x10c
000010  e9dd6158          LDRD     r6,r1,[sp,#0x160]
000014  f8ddc168          LDR      r12,[sp,#0x168]
000018  e9cd6100          STRD     r6,r1,[sp,#0]
00001c  f8cdc008          STR      r12,[sp,#8]
000020  4621              MOV      r1,r4
000022  9a4d              LDR      r2,[sp,#0x134]
000024  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
000028  3074              ADDS     r0,r0,#0x74
00002a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::FixedLengthList()
00002e  3034              ADDS     r0,r0,#0x34
000030  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::FixedLengthList()
000034  3034              ADDS     r0,r0,#0x34
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList()
00003a  3034              ADDS     r0,r0,#0x34
00003c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList()
000040  f5a07488          SUB      r4,r0,#0x110
000044  a0fe              ADR      r0,|L2.1088|
000046  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00004a  a803              ADD      r0,sp,#0xc
00004c  9001              STR      r0,[sp,#4]
00004e  2300              MOVS     r3,#0
000050  f1040a74          ADD      r10,r4,#0x74
000054  461a              MOV      r2,r3
000056  2101              MOVS     r1,#1
000058  a838              ADD      r0,sp,#0xe0
00005a  9d5a              LDR      r5,[sp,#0x168]
00005c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000060  6800              LDR      r0,[r0,#0]
000062  9002              STR      r0,[sp,#8]
000064  9000              STR      r0,[sp,#0]
000066  462b              MOV      r3,r5
000068  4632              MOV      r2,r6
00006a  2101              MOVS     r1,#1
00006c  a82a              ADD      r0,sp,#0xa8
00006e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000072  f8d09010          LDR      r9,[r0,#0x10]
000076  e8b009a0          LDM      r0!,{r5,r7,r8,r11}
00007a  2200              MOVS     r2,#0
00007c  4611              MOV      r1,r2
00007e  a832              ADD      r0,sp,#0xc8
000080  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000084  2200              MOVS     r2,#0
000086  9000              STR      r0,[sp,#0]
000088  4611              MOV      r1,r2
00008a  a82f              ADD      r0,sp,#0xbc
00008c  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000090  9a00              LDR      r2,[sp,#0]
000092  4603              MOV      r3,r0
000094  f10d0c18          ADD      r12,sp,#0x18
000098  e9d20100          LDRD     r0,r1,[r2,#0]
00009c  6892              LDR      r2,[r2,#8]
00009e  9205              STR      r2,[sp,#0x14]
0000a0  e9cd0103          STRD     r0,r1,[sp,#0xc]
0000a4  e9d30100          LDRD     r0,r1,[r3,#0]
0000a8  689a              LDR      r2,[r3,#8]
0000aa  f8cd9034          STR      r9,[sp,#0x34]
0000ae  e8ac09a7          STM      r12!,{r0-r2,r5,r7,r8,r11}
0000b2  2d00              CMP      r5,#0
0000b4  bfc8              IT       GT
0000b6  2f00              CMPGT    r7,#0
0000b8  dd2b              BLE      |L2.274|
0000ba  fb05f007          MUL      r0,r5,r7
0000be  2800              CMP      r0,#0
0000c0  bf1c              ITT      NE
0000c2  2000              MOVNE    r0,#0
0000c4  fb009008          MLANE    r0,r0,r8,r9
0000c8  d023              BEQ      |L2.274|
                  |L2.202|
0000ca  900e              STR      r0,[sp,#0x38]
0000cc  2d00              CMP      r5,#0
0000ce  bfc8              IT       GT
0000d0  2f00              CMPGT    r7,#0
0000d2  dd20              BLE      |L2.278|
0000d4  fb05f007          MUL      r0,r5,r7
0000d8  2800              CMP      r0,#0
0000da  bf1c              ITT      NE
0000dc  2000              MOVNE    r0,#0
0000de  fb009008          MLANE    r0,r0,r8,r9
0000e2  d018              BEQ      |L2.278|
                  |L2.228|
0000e4  900f              STR      r0,[sp,#0x3c]
0000e6  2d00              CMP      r5,#0
0000e8  bfc8              IT       GT
0000ea  2f00              CMPGT    r7,#0
0000ec  dd15              BLE      |L2.282|
0000ee  fb05f007          MUL      r0,r5,r7
0000f2  2800              CMP      r0,#0
0000f4  bf1c              ITT      NE
0000f6  2000              MOVNE    r0,#0
0000f8  fb009008          MLANE    r0,r0,r8,r9
0000fc  d00d              BEQ      |L2.282|
                  |L2.254|
0000fe  900f              STR      r0,[sp,#0x3c]
000100  a802              ADD      r0,sp,#8
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
000106  b150              CBZ      r0,|L2.286|
000108  4631              MOV      r1,r6
00010a  9801              LDR      r0,[sp,#4]
00010c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
000110  e009              B        |L2.294|
                  |L2.274|
000112  2000              MOVS     r0,#0
000114  e7d9              B        |L2.202|
                  |L2.278|
000116  2000              MOVS     r0,#0
000118  e7e4              B        |L2.228|
                  |L2.282|
00011a  2000              MOVS     r0,#0
00011c  e7ef              B        |L2.254|
                  |L2.286|
00011e  2100              MOVS     r1,#0
000120  9801              LDR      r0,[sp,#4]
000122  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
                  |L2.294|
000126  e9dd1203          LDRD     r1,r2,[sp,#0xc]
00012a  4650              MOV      r0,r10
00012c  9b05              LDR      r3,[sp,#0x14]
00012e  f8ca3008          STR      r3,[r10,#8]
000132  e9c01200          STRD     r1,r2,[r0,#0]
000136  e9dd1206          LDRD     r1,r2,[sp,#0x18]
00013a  9b08              LDR      r3,[sp,#0x20]
00013c  f8ca3014          STR      r3,[r10,#0x14]
000140  e9c01203          STRD     r1,r2,[r0,#0xc]
000144  9909              LDR      r1,[sp,#0x24]
000146  f84a1f18          STR      r1,[r10,#0x18]!
00014a  990a              LDR      r1,[sp,#0x28]
00014c  f8ca1004          STR      r1,[r10,#4]
000150  990b              LDR      r1,[sp,#0x2c]
000152  f8ca1008          STR      r1,[r10,#8]
000156  990c              LDR      r1,[sp,#0x30]
000158  f8ca100c          STR      r1,[r10,#0xc]
00015c  990d              LDR      r1,[sp,#0x34]
00015e  f8ca1010          STR      r1,[r10,#0x10]
000162  990e              LDR      r1,[sp,#0x38]
000164  62c1              STR      r1,[r0,#0x2c]
000166  990f              LDR      r1,[sp,#0x3c]
000168  6301              STR      r1,[r0,#0x30]
00016a  a810              ADD      r0,sp,#0x40
00016c  9001              STR      r0,[sp,#4]
00016e  2300              MOVS     r3,#0
000170  f1040aa8          ADD      r10,r4,#0xa8
000174  461a              MOV      r2,r3
000176  2101              MOVS     r1,#1
000178  a838              ADD      r0,sp,#0xe0
00017a  9d5a              LDR      r5,[sp,#0x168]
00017c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000180  6800              LDR      r0,[r0,#0]
000182  9002              STR      r0,[sp,#8]
000184  9000              STR      r0,[sp,#0]
000186  462b              MOV      r3,r5
000188  4632              MOV      r2,r6
00018a  2101              MOVS     r1,#1
00018c  a82a              ADD      r0,sp,#0xa8
00018e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000192  f8d09010          LDR      r9,[r0,#0x10]
000196  e8b009a0          LDM      r0!,{r5,r7,r8,r11}
00019a  2200              MOVS     r2,#0
00019c  4611              MOV      r1,r2
00019e  a82f              ADD      r0,sp,#0xbc
0001a0  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
0001a4  2200              MOVS     r2,#0
0001a6  9000              STR      r0,[sp,#0]
0001a8  4611              MOV      r1,r2
0001aa  a832              ADD      r0,sp,#0xc8
0001ac  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
0001b0  9a00              LDR      r2,[sp,#0]
0001b2  4603              MOV      r3,r0
0001b4  2d00              CMP      r5,#0
0001b6  e9d20100          LDRD     r0,r1,[r2,#0]
0001ba  6892              LDR      r2,[r2,#8]
0001bc  9212              STR      r2,[sp,#0x48]
0001be  e9cd0110          STRD     r0,r1,[sp,#0x40]
0001c2  e9d30100          LDRD     r0,r1,[r3,#0]
0001c6  689a              LDR      r2,[r3,#8]
0001c8  ab13              ADD      r3,sp,#0x4c
0001ca  f8cd9068          STR      r9,[sp,#0x68]
0001ce  e8a309a7          STM      r3!,{r0-r2,r5,r7,r8,r11}
0001d2  bfc8              IT       GT
0001d4  2f00              CMPGT    r7,#0
0001d6  dd2b              BLE      |L2.560|
0001d8  fb05f007          MUL      r0,r5,r7
0001dc  2800              CMP      r0,#0
0001de  bf1c              ITT      NE
0001e0  2000              MOVNE    r0,#0
0001e2  fb009008          MLANE    r0,r0,r8,r9
0001e6  d023              BEQ      |L2.560|
                  |L2.488|
0001e8  901b              STR      r0,[sp,#0x6c]
0001ea  2d00              CMP      r5,#0
0001ec  bfc8              IT       GT
0001ee  2f00              CMPGT    r7,#0
0001f0  dd20              BLE      |L2.564|
0001f2  fb05f007          MUL      r0,r5,r7
0001f6  2800              CMP      r0,#0
0001f8  bf1c              ITT      NE
0001fa  2000              MOVNE    r0,#0
0001fc  fb009008          MLANE    r0,r0,r8,r9
000200  d018              BEQ      |L2.564|
                  |L2.514|
000202  901c              STR      r0,[sp,#0x70]
000204  2d00              CMP      r5,#0
000206  bfc8              IT       GT
000208  2f00              CMPGT    r7,#0
00020a  dd15              BLE      |L2.568|
00020c  fb05f007          MUL      r0,r5,r7
000210  2800              CMP      r0,#0
000212  bf1c              ITT      NE
000214  2000              MOVNE    r0,#0
000216  fb009008          MLANE    r0,r0,r8,r9
00021a  d00d              BEQ      |L2.568|
                  |L2.540|
00021c  901c              STR      r0,[sp,#0x70]
00021e  a802              ADD      r0,sp,#8
000220  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
000224  b150              CBZ      r0,|L2.572|
000226  4631              MOV      r1,r6
000228  9801              LDR      r0,[sp,#4]
00022a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
00022e  e009              B        |L2.580|
                  |L2.560|
000230  2000              MOVS     r0,#0
000232  e7d9              B        |L2.488|
                  |L2.564|
000234  2000              MOVS     r0,#0
000236  e7e4              B        |L2.514|
                  |L2.568|
000238  2000              MOVS     r0,#0
00023a  e7ef              B        |L2.540|
                  |L2.572|
00023c  2100              MOVS     r1,#0
00023e  9801              LDR      r0,[sp,#4]
000240  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
                  |L2.580|
000244  e9dd1210          LDRD     r1,r2,[sp,#0x40]
000248  4650              MOV      r0,r10
00024a  9b12              LDR      r3,[sp,#0x48]
00024c  f8ca3008          STR      r3,[r10,#8]
000250  e9c01200          STRD     r1,r2,[r0,#0]
000254  e9dd1213          LDRD     r1,r2,[sp,#0x4c]
000258  9b15              LDR      r3,[sp,#0x54]
00025a  f8ca3014          STR      r3,[r10,#0x14]
00025e  e9c01203          STRD     r1,r2,[r0,#0xc]
000262  9916              LDR      r1,[sp,#0x58]
000264  f84a1f18          STR      r1,[r10,#0x18]!
000268  9917              LDR      r1,[sp,#0x5c]
00026a  f8ca1004          STR      r1,[r10,#4]
00026e  9918              LDR      r1,[sp,#0x60]
000270  f8ca1008          STR      r1,[r10,#8]
000274  9919              LDR      r1,[sp,#0x64]
000276  f8ca100c          STR      r1,[r10,#0xc]
00027a  991a              LDR      r1,[sp,#0x68]
00027c  f8ca1010          STR      r1,[r10,#0x10]
000280  991b              LDR      r1,[sp,#0x6c]
000282  62c1              STR      r1,[r0,#0x2c]
000284  991c              LDR      r1,[sp,#0x70]
000286  6301              STR      r1,[r0,#0x30]
000288  2300              MOVS     r3,#0
00028a  f10405dc          ADD      r5,r4,#0xdc
00028e  461a              MOV      r2,r3
000290  2101              MOVS     r1,#1
000292  a838              ADD      r0,sp,#0xe0
000294  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000298  6803              LDR      r3,[r0,#0]
00029a  4631              MOV      r1,r6
00029c  a81d              ADD      r0,sp,#0x74
00029e  9a5a              LDR      r2,[sp,#0x168]
0002a0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0002a4  e9d01200          LDRD     r1,r2,[r0,#0]
0002a8  462f              MOV      r7,r5
0002aa  6883              LDR      r3,[r0,#8]
0002ac  60ab              STR      r3,[r5,#8]
0002ae  e9c71200          STRD     r1,r2,[r7,#0]
0002b2  e9d01203          LDRD     r1,r2,[r0,#0xc]
0002b6  6943              LDR      r3,[r0,#0x14]
0002b8  616b              STR      r3,[r5,#0x14]
0002ba  e9c71203          STRD     r1,r2,[r7,#0xc]
0002be  6981              LDR      r1,[r0,#0x18]
0002c0  f8451f18          STR      r1,[r5,#0x18]!
0002c4  69c1              LDR      r1,[r0,#0x1c]
0002c6  6069              STR      r1,[r5,#4]
0002c8  6a01              LDR      r1,[r0,#0x20]
0002ca  60a9              STR      r1,[r5,#8]
0002cc  6a41              LDR      r1,[r0,#0x24]
0002ce  60e9              STR      r1,[r5,#0xc]
0002d0  6a81              LDR      r1,[r0,#0x28]
0002d2  6129              STR      r1,[r5,#0x10]
0002d4  6ac1              LDR      r1,[r0,#0x2c]
0002d6  62f9              STR      r1,[r7,#0x2c]
0002d8  6b00              LDR      r0,[r0,#0x30]
0002da  2300              MOVS     r3,#0
0002dc  6338              STR      r0,[r7,#0x30]
0002de  f5047588          ADD      r5,r4,#0x110
0002e2  461a              MOV      r2,r3
0002e4  2101              MOVS     r1,#1
0002e6  a838              ADD      r0,sp,#0xe0
0002e8  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0002ec  6803              LDR      r3,[r0,#0]
0002ee  4631              MOV      r1,r6
0002f0  a81d              ADD      r0,sp,#0x74
0002f2  9a5a              LDR      r2,[sp,#0x168]
0002f4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0002f8  e9d01200          LDRD     r1,r2,[r0,#0]
0002fc  462f              MOV      r7,r5
0002fe  6883              LDR      r3,[r0,#8]
000300  60ab              STR      r3,[r5,#8]
000302  e9c71200          STRD     r1,r2,[r7,#0]
000306  e9d01203          LDRD     r1,r2,[r0,#0xc]
00030a  6943              LDR      r3,[r0,#0x14]
00030c  616b              STR      r3,[r5,#0x14]
00030e  e9c71203          STRD     r1,r2,[r7,#0xc]
000312  6981              LDR      r1,[r0,#0x18]
000314  f8451f18          STR      r1,[r5,#0x18]!
000318  69c1              LDR      r1,[r0,#0x1c]
00031a  6069              STR      r1,[r5,#4]
00031c  6a01              LDR      r1,[r0,#0x20]
00031e  60a9              STR      r1,[r5,#8]
000320  6a41              LDR      r1,[r0,#0x24]
000322  60e9              STR      r1,[r5,#0xc]
000324  6a81              LDR      r1,[r0,#0x28]
000326  6129              STR      r1,[r5,#0x10]
000328  6ac1              LDR      r1,[r0,#0x2c]
00032a  62f9              STR      r1,[r7,#0x2c]
00032c  6b00              LDR      r0,[r0,#0x30]
00032e  6338              STR      r0,[r7,#0x30]
000330  4631              MOV      r1,r6
000332  f1040074          ADD      r0,r4,#0x74
000336  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
00033a  4631              MOV      r1,r6
00033c  f10400a8          ADD      r0,r4,#0xa8
000340  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
000344  4631              MOV      r1,r6
000346  f10400dc          ADD      r0,r4,#0xdc
00034a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::set_size(int)
00034e  4631              MOV      r1,r6
000350  f5047088          ADD      r0,r4,#0x110
000354  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::set_size(int)
000358  f8d420b4          LDR      r2,[r4,#0xb4]
00035c  f8d410c4          LDR      r1,[r4,#0xc4]
000360  f10400a8          ADD      r0,r4,#0xa8
000364  428a              CMP      r2,r1
000366  dc6a              BGT      |L2.1086|
000368  6a82              LDR      r2,[r0,#0x28]
00036a  b12a              CBZ      r2,|L2.888|
00036c  6980              LDR      r0,[r0,#0x18]
00036e  2800              CMP      r0,#0
000370  bfa4              ITT      GE
000372  2900              CMPGE    r1,#0
000374  2001              MOVGE    r0,#1
000376  da00              BGE      |L2.890|
                  |L2.888|
000378  2000              MOVS     r0,#0
                  |L2.890|
00037a  2800              CMP      r0,#0
00037c  d05f              BEQ      |L2.1086|
00037e  f10400dc          ADD      r0,r4,#0xdc
000382  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::IsValid() const
000386  2800              CMP      r0,#0
000388  d059              BEQ      |L2.1086|
00038a  f5047088          ADD      r0,r4,#0x110
00038e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::IsValid() const
000392  2800              CMP      r0,#0
000394  d053              BEQ      |L2.1086|
000396  f8d42080          LDR      r2,[r4,#0x80]
00039a  f8d41090          LDR      r1,[r4,#0x90]
00039e  f1040074          ADD      r0,r4,#0x74
0003a2  428a              CMP      r2,r1
0003a4  dc4b              BGT      |L2.1086|
0003a6  6a82              LDR      r2,[r0,#0x28]
0003a8  b12a              CBZ      r2,|L2.950|
0003aa  6980              LDR      r0,[r0,#0x18]
0003ac  2800              CMP      r0,#0
0003ae  bfa4              ITT      GE
0003b0  2900              CMPGE    r1,#0
0003b2  2001              MOVGE    r0,#1
0003b4  da00              BGE      |L2.952|
                  |L2.950|
0003b6  2000              MOVS     r0,#0
                  |L2.952|
0003b8  2800              CMP      r0,#0
0003ba  d040              BEQ      |L2.1086|
0003bc  2700              MOVS     r7,#0
0003be  2e00              CMP      r6,#0
0003c0  f34081b7          BLE.W    |L2.1842|
0003c4  eef69a00          VMOV.F32 s19,#0.50000000
0003c8  ed9f9a23          VLDR     s18,|L2.1112|
0003cc  eebeaa00          VMOV.F32 s20,#-0.50000000
                  |L2.976|
0003d0  2001              MOVS     r0,#1
0003d2  40b8              LSLS     r0,r0,r7
0003d4  ee000a10          VMOV     s0,r0
0003d8  edd48a05          VLDR     s17,[r4,#0x14]
0003dc  f8d400a4          LDR      r0,[r4,#0xa4]
0003e0  eeb88ac0          VCVT.F32.S32 s16,s0
0003e4  eb070b47          ADD      r11,r7,r7,LSL #1
0003e8  eb0005cb          ADD      r5,r0,r11,LSL #3
0003ec  ee880a88          VDIV.F32 s0,s17,s16
0003f0  ee300a09          VADD.F32 s0,s0,s18
0003f4  f7fffffe          BL       __hardfp_floorf
0003f8  eebd0ac0          VCVT.S32.F32 s0,s0
0003fc  ee680aa9          VMUL.F32 s1,s17,s19
000400  4668              MOV      r0,sp
000402  ee101a10          VMOV     r1,s0
000406  ee280a8a          VMUL.F32 s0,s17,s20
00040a  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
00040e  e9dd8900          LDRD     r8,r9,[sp,#0]
000412  edd48a04          VLDR     s17,[r4,#0x10]
000416  f8dda008          LDR      r10,[sp,#8]
00041a  ee880a88          VDIV.F32 s0,s17,s16
00041e  ee300a09          VADD.F32 s0,s0,s18
000422  f7fffffe          BL       __hardfp_floorf
000426  eebd0ac0          VCVT.S32.F32 s0,s0
00042a  ee680aa9          VMUL.F32 s1,s17,s19
00042e  a835              ADD      r0,sp,#0xd4
000430  ee101a10          VMOV     r1,s0
000434  ee280a8a          VMUL.F32 s0,s17,s20
000438  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
00043c  e00e              B        |L2.1116|
                  |L2.1086|
00043e  e05c              B        |L2.1274|
                  |L2.1088|
000440  4c756361          DCB      "LucasKanadeTracker_Fast",0
000444  734b616e
000448  61646554
00044c  7261636b
000450  65725f46
000454  61737400
                  |L2.1112|
000458  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L2.1116|
00045c  e9dd0135          LDRD     r0,r1,[sp,#0xd4]
000460  9a37              LDR      r2,[sp,#0xdc]
000462  922f              STR      r2,[sp,#0xbc]
000464  f8cda0b0          STR      r10,[sp,#0xb0]
000468  e9cd012d          STRD     r0,r1,[sp,#0xb4]
00046c  e9cd892a          STRD     r8,r9,[sp,#0xa8]
000470  4640              MOV      r0,r8
000472  e9dd382d          LDRD     r3,r8,[sp,#0xb4]
000476  4652              MOV      r2,r10
000478  4649              MOV      r1,r9
00047a  f8ddc0bc          LDR      r12,[sp,#0xbc]
00047e  e8a5110f          STM      r5!,{r0-r3,r8,r12}
000482  f8d400a4          LDR      r0,[r4,#0xa4]
000486  eb070a87          ADD      r10,r7,r7,LSL #2
00048a  eb0000cb          ADD      r0,r0,r11,LSL #3
00048e  2300              MOVS     r3,#0
000490  f8d0800c          LDR      r8,[r0,#0xc]
000494  f8cd80d8          STR      r8,[sp,#0xd8]
000498  f8d0b000          LDR      r11,[r0,#0]
00049c  f8cdb0d4          STR      r11,[sp,#0xd4]
0004a0  f8d400d8          LDR      r0,[r4,#0xd8]
0004a4  ad3a              ADD      r5,sp,#0xe8
0004a6  eb00098a          ADD      r9,r0,r10,LSL #2
0004aa  985a              LDR      r0,[sp,#0x168]
0004ac  9000              STR      r0,[sp,#0]
0004ae  461a              MOV      r2,r3
0004b0  2101              MOVS     r1,#1
0004b2  a839              ADD      r0,sp,#0xe4
0004b4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0004b8  6800              LDR      r0,[r0,#0]
0004ba  9040              STR      r0,[sp,#0x100]
0004bc  f105000c          ADD      r0,r5,#0xc
0004c0  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
0004c4  f1a0050c          SUB      r5,r0,#0xc
0004c8  f04f30ff          MOV      r0,#0xffffffff
0004cc  6028              STR      r0,[r5,#0]
0004ce  6068              STR      r0,[r5,#4]
0004d0  60a8              STR      r0,[r5,#8]
0004d2  2000              MOVS     r0,#0
0004d4  6128              STR      r0,[r5,#0x10]
0004d6  f1bb0f00          CMP      r11,#0
0004da  bfa8              IT       GE
0004dc  f1b80f00          CMPGE    r8,#0
0004e0  da17              BGE      |L2.1298|
0004e2  217d              MOVS     r1,#0x7d
0004e4  48d4              LDR      r0,|L2.2104|
0004e6  e9cd0100          STRD     r0,r1,[sp,#0]
0004ea  a3d4              ADR      r3,|L2.2108|
0004ec  a2e1              ADR      r2,|L2.2164|
0004ee  a1e5              ADR      r1,|L2.2180|
0004f0  2005              MOVS     r0,#5
0004f2  f7fffffe          BL       _Anki_Log
0004f6  f000b8ab          B.W      |L2.1616|
                  |L2.1274|
0004fa  213c              MOVS     r1,#0x3c
0004fc  48e6              LDR      r0,|L2.2200|
0004fe  e9cd0100          STRD     r0,r1,[sp,#0]
000502  a3e6              ADR      r3,|L2.2204|
000504  a2f2              ADR      r2,|L2.2256|
000506  a1fb              ADR      r1,|L2.2292|
000508  2005              MOVS     r0,#5
00050a  f7fffffe          BL       _Anki_Log
00050e  f000b941          B.W      |L2.1940|
                  |L2.1298|
000512  2000              MOVS     r0,#0
000514  9037              STR      r0,[sp,#0xdc]
000516  f1bb0f01          CMP      r11,#1
00051a  bfcc              ITE      GT
00051c  4658              MOVGT    r0,r11
00051e  2001              MOVLE    r0,#1
000520  300f              ADDS     r0,r0,#0xf
000522  f020000f          BIC      r0,r0,#0xf
000526  903f              STR      r0,[sp,#0xfc]
000528  9800              LDR      r0,[sp,#0]
00052a  9002              STR      r0,[sp,#8]
00052c  a837              ADD      r0,sp,#0xdc
00052e  9042              STR      r0,[sp,#0x108]
000530  9840              LDR      r0,[sp,#0x100]
000532  9041              STR      r0,[sp,#0x104]
000534  983f              LDR      r0,[sp,#0xfc]
000536  2800              CMP      r0,#0
000538  dc0a              BGT      |L2.1360|
00053a  f240310b          MOV      r1,#0x30b
00053e  48fa              LDR      r0,|L2.2344|
000540  e9cd0100          STRD     r0,r1,[sp,#0]
000544  a3bd              ADR      r3,|L2.2108|
000546  a2cb              ADR      r2,|L2.2164|
000548  a1f8              ADR      r1,|L2.2348|
00054a  2005              MOVS     r0,#5
00054c  f7fffffe          BL       _Anki_Log
                  |L2.1360|
000550  4640              MOV      r0,r8
000552  f1b80f01          CMP      r8,#1
000556  bfd8              IT       LE
000558  2001              MOVLE    r0,#1
00055a  993f              LDR      r1,[sp,#0xfc]
00055c  60a9              STR      r1,[r5,#8]
00055e  4348              MULS     r0,r1,r0
000560  9001              STR      r0,[sp,#4]
000562  a841              ADD      r0,sp,#0x104
000564  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
000568  4602              MOV      r2,r0
00056a  e9dd1001          LDRD     r1,r0,[sp,#4]
00056e  9b42              LDR      r3,[sp,#0x108]
000570  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
000574  f8cd8004          STR      r8,[sp,#4]
000578  ea5f0800          MOVS     r8,r0
00057c  9837              LDR      r0,[sp,#0xdc]
00057e  9000              STR      r0,[sp,#0]
000580  9840              LDR      r0,[sp,#0x100]
000582  903f              STR      r0,[sp,#0xfc]
000584  d00e              BEQ      |L2.1444|
000586  9800              LDR      r0,[sp,#0]
000588  2810              CMP      r0,#0x10
00058a  d21e              BCS      |L2.1482|
00058c  f2403123          MOV      r1,#0x323
000590  48f1              LDR      r0,|L2.2392|
000592  e9cd0100          STRD     r0,r1,[sp,#0]
000596  a3a9              ADR      r3,|L2.2108|
000598  a2f0              ADR      r2,|L2.2396|
00059a  a1f5              ADR      r1,|L2.2416|
00059c  2005              MOVS     r0,#5
00059e  f7fffffe          BL       _Anki_Log
0005a2  e055              B        |L2.1616|
                  |L2.1444|
0005a4  f240311e          MOV      r1,#0x31e
0005a8  48eb              LDR      r0,|L2.2392|
0005aa  e9cd0100          STRD     r0,r1,[sp,#0]
0005ae  a3a3              ADR      r3,|L2.2108|
0005b0  a2f7              ADR      r2,|L2.2448|
0005b2  a1fe              ADR      r1,|L2.2476|
0005b4  2005              MOVS     r0,#5
0005b6  f7fffffe          BL       _Anki_Log
0005ba  f04f30ff          MOV      r0,#0xffffffff
0005be  6028              STR      r0,[r5,#0]
0005c0  6068              STR      r0,[r5,#4]
0005c2  60a8              STR      r0,[r5,#8]
0005c4  2000              MOVS     r0,#0
0005c6  6128              STR      r0,[r5,#0x10]
0005c8  e042              B        |L2.1616|
                  |L2.1482|
0005ca  a83f              ADD      r0,sp,#0xfc
0005cc  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
0005d0  b158              CBZ      r0,|L2.1514|
0005d2  f2403126          MOV      r1,#0x326
0005d6  48e0              LDR      r0,|L2.2392|
0005d8  e9cd0100          STRD     r0,r1,[sp,#0]
0005dc  a397              ADR      r3,|L2.2108|
0005de  a2f9              ADR      r2,|L2.2500|
0005e0  a1e3              ADR      r1,|L2.2416|
0005e2  2005              MOVS     r0,#5
0005e4  f7fffffe          BL       _Anki_Log
0005e8  e032              B        |L2.1616|
                  |L2.1514|
0005ea  993f              LDR      r1,[sp,#0xfc]
0005ec  60e9              STR      r1,[r5,#0xc]
0005ee  9801              LDR      r0,[sp,#4]
0005f0  f8c58010          STR      r8,[r5,#0x10]
0005f4  e9c50b00          STRD     r0,r11,[r5,#0]
0005f8  f108000f          ADD      r0,r8,#0xf
0005fc  f020000f          BIC      r0,r0,#0xf
000600  eba00008          SUB      r0,r0,r8
000604  f1bb0f01          CMP      r11,#1
000608  bfd8              IT       LE
00060a  f04f0b01          MOVLE    r11,#1
00060e  f10b010f          ADD      r1,r11,#0xf
000612  9a01              LDR      r2,[sp,#4]
000614  f021010f          BIC      r1,r1,#0xf
000618  fb010102          MLA      r1,r1,r2,r0
00061c  9a00              LDR      r2,[sp,#0]
00061e  4291              CMP      r1,r2
000620  bfdc              ITT      LE
000622  eb080100          ADDLE    r1,r8,r0
000626  6129              STRLE    r1,[r5,#0x10]
000628  dd12              BLE      |L2.1616|
00062a  f2403035          MOV      r0,#0x335
00062e  4aca              LDR      r2,|L2.2392|
000630  e9cd2000          STRD     r2,r0,[sp,#0]
000634  9102              STR      r1,[sp,#8]
000636  a381              ADR      r3,|L2.2108|
000638  a2ec              ADR      r2,|L2.2540|
00063a  a1dc              ADR      r1,|L2.2476|
00063c  2005              MOVS     r0,#5
00063e  f7fffffe          BL       _Anki_Log
000642  f04f30ff          MOV      r0,#0xffffffff
000646  6028              STR      r0,[r5,#0]
000648  6068              STR      r0,[r5,#4]
00064a  60a8              STR      r0,[r5,#8]
00064c  2000              MOVS     r0,#0
00064e  6128              STR      r0,[r5,#0x10]
                  |L2.1616|
000650  6828              LDR      r0,[r5,#0]
000652  f8c90000          STR      r0,[r9,#0]
000656  6868              LDR      r0,[r5,#4]
000658  f8c90004          STR      r0,[r9,#4]
00065c  68a8              LDR      r0,[r5,#8]
00065e  f8c90008          STR      r0,[r9,#8]
000662  68e8              LDR      r0,[r5,#0xc]
000664  f8c9000c          STR      r0,[r9,#0xc]
000668  6928              LDR      r0,[r5,#0x10]
00066a  f8c90010          STR      r0,[r9,#0x10]
00066e  f8d4010c          LDR      r0,[r4,#0x10c]
000672  2300              MOVS     r3,#0
000674  eb00058a          ADD      r5,r0,r10,LSL #2
000678  461a              MOV      r2,r3
00067a  2101              MOVS     r1,#1
00067c  a839              ADD      r0,sp,#0xe4
00067e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000682  6800              LDR      r0,[r0,#0]
000684  9000              STR      r0,[sp,#0]
000686  e9dd2135          LDRD     r2,r1,[sp,#0xd4]
00068a  a830              ADD      r0,sp,#0xc0
00068c  9b5a              LDR      r3,[sp,#0x168]
00068e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000692  6801              LDR      r1,[r0,#0]
000694  6029              STR      r1,[r5,#0]
000696  6841              LDR      r1,[r0,#4]
000698  6069              STR      r1,[r5,#4]
00069a  6881              LDR      r1,[r0,#8]
00069c  60a9              STR      r1,[r5,#8]
00069e  68c1              LDR      r1,[r0,#0xc]
0006a0  60e9              STR      r1,[r5,#0xc]
0006a2  6900              LDR      r0,[r0,#0x10]
0006a4  6128              STR      r0,[r5,#0x10]
0006a6  f8d40140          LDR      r0,[r4,#0x140]
0006aa  2300              MOVS     r3,#0
0006ac  eb00058a          ADD      r5,r0,r10,LSL #2
0006b0  461a              MOV      r2,r3
0006b2  2101              MOVS     r1,#1
0006b4  a839              ADD      r0,sp,#0xe4
0006b6  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0006ba  6800              LDR      r0,[r0,#0]
0006bc  9000              STR      r0,[sp,#0]
0006be  e9dd2135          LDRD     r2,r1,[sp,#0xd4]
0006c2  a830              ADD      r0,sp,#0xc0
0006c4  9b5a              LDR      r3,[sp,#0x168]
0006c6  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0006ca  6801              LDR      r1,[r0,#0]
0006cc  6029              STR      r1,[r5,#0]
0006ce  6841              LDR      r1,[r0,#4]
0006d0  6069              STR      r1,[r5,#4]
0006d2  6881              LDR      r1,[r0,#8]
0006d4  60a9              STR      r1,[r5,#8]
0006d6  68c1              LDR      r1,[r0,#0xc]
0006d8  60e9              STR      r1,[r5,#0xc]
0006da  6900              LDR      r0,[r0,#0x10]
0006dc  6128              STR      r0,[r5,#0x10]
0006de  f8d400d8          LDR      r0,[r4,#0xd8]
0006e2  eb00008a          ADD      r0,r0,r10,LSL #2
0006e6  6901              LDR      r1,[r0,#0x10]
0006e8  2900              CMP      r1,#0
0006ea  d05c              BEQ      |L2.1958|
0006ec  6801              LDR      r1,[r0,#0]
0006ee  2900              CMP      r1,#0
0006f0  bfa4              ITT      GE
0006f2  6840              LDRGE    r0,[r0,#4]
0006f4  2800              CMPGE    r0,#0
0006f6  db56              BLT      |L2.1958|
0006f8  f8d4010c          LDR      r0,[r4,#0x10c]
0006fc  eb00008a          ADD      r0,r0,r10,LSL #2
000700  6901              LDR      r1,[r0,#0x10]
000702  2900              CMP      r1,#0
000704  d04f              BEQ      |L2.1958|
000706  6801              LDR      r1,[r0,#0]
000708  2900              CMP      r1,#0
00070a  bfa4              ITT      GE
00070c  6840              LDRGE    r0,[r0,#4]
00070e  2800              CMPGE    r0,#0
000710  db49              BLT      |L2.1958|
000712  f8d40140          LDR      r0,[r4,#0x140]
000716  eb00008a          ADD      r0,r0,r10,LSL #2
00071a  6901              LDR      r1,[r0,#0x10]
00071c  b3e9              CBZ      r1,|L2.1946|
00071e  6801              LDR      r1,[r0,#0]
000720  2900              CMP      r1,#0
000722  bfa4              ITT      GE
000724  6840              LDRGE    r0,[r0,#4]
000726  2800              CMPGE    r0,#0
000728  db3d              BLT      |L2.1958|
00072a  1c7f              ADDS     r7,r7,#1
00072c  42b7              CMP      r7,r6
00072e  f6ffae4f          BLT      |L2.976|
                  |L2.1842|
000732  2500              MOVS     r5,#0
000734  2e00              CMP      r6,#0
000736  bfc8              IT       GT
000738  2700              MOVGT    r7,#0
00073a  dd42              BLE      |L2.1986|
                  |L2.1852|
00073c  f8d400d8          LDR      r0,[r4,#0xd8]
000740  eb050185          ADD      r1,r5,r5,LSL #2
000744  eb000881          ADD      r8,r0,r1,LSL #2
000748  ed940a1b          VLDR     s0,[r4,#0x6c]
00074c  f1040118          ADD      r1,r4,#0x18
000750  a82a              ADD      r0,sp,#0xa8
000752  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
000756  f1040018          ADD      r0,r4,#0x18
00075a  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
00075e  4602              MOV      r2,r0
000760  f8d400a4          LDR      r0,[r4,#0xa4]
000764  eb050145          ADD      r1,r5,r5,LSL #1
000768  e9cd8700          STRD     r8,r7,[sp,#0]
00076c  eb0001c1          ADD      r1,r0,r1,LSL #3
000770  9702              STR      r7,[sp,#8]
000772  ab2a              ADD      r3,sp,#0xa8
000774  984d              LDR      r0,[sp,#0x134]
000776  f7fffffe          BL       _ZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_ ; Anki::Embedded::Interp2_Affine<unsigned char, unsigned char>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Meshgrid<float>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Point<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
00077a  2800              CMP      r0,#0
00077c  d01e              BEQ      |L2.1980|
00077e  4946              LDR      r1,|L2.2200|
000780  9100              STR      r1,[sp,#0]
000782  2259              MOVS     r2,#0x59
000784  e9cd2001          STRD     r2,r0,[sp,#4]
000788  a344              ADR      r3,|L2.2204|
00078a  a2a8              ADR      r2,|L2.2604|
00078c  a159              ADR      r1,|L2.2292|
00078e  2005              MOVS     r0,#5
000790  f7fffffe          BL       _Anki_Log
                  |L2.1940|
000794  4620              MOV      r0,r4
000796  b043              ADD      sp,sp,#0x10c
000798  e000              B        |L2.1948|
                  |L2.1946|
00079a  e004              B        |L2.1958|
                  |L2.1948|
00079c  ecbd8b06          VPOP     {d8-d10}
0007a0  b006              ADD      sp,sp,#0x18
0007a2  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1958|
0007a6  2152              MOVS     r1,#0x52
0007a8  483b              LDR      r0,|L2.2200|
0007aa  e9cd0100          STRD     r0,r1,[sp,#0]
0007ae  a33b              ADR      r3,|L2.2204|
0007b0  a2a8              ADR      r2,|L2.2644|
0007b2  a150              ADR      r1,|L2.2292|
0007b4  2005              MOVS     r0,#5
0007b6  f7fffffe          BL       _Anki_Log
0007ba  e7eb              B        |L2.1940|
                  |L2.1980|
0007bc  1c6d              ADDS     r5,r5,#1
0007be  42b5              CMP      r5,r6
0007c0  dbbc              BLT      |L2.1852|
                  |L2.1986|
0007c2  f04f0900          MOV      r9,#0
0007c6  2e00              CMP      r6,#0
0007c8  f3408262          BLE.W    |L2.3216|
                  |L2.1996|
0007cc  eb090089          ADD      r0,r9,r9,LSL #2
0007d0  f8d410d8          LDR      r1,[r4,#0xd8]
0007d4  9002              STR      r0,[sp,#8]
0007d6  eb010780          ADD      r7,r1,r0,LSL #2
0007da  f8d4110c          LDR      r1,[r4,#0x10c]
0007de  eb010580          ADD      r5,r1,r0,LSL #2
0007e2  2100              MOVS     r1,#0
0007e4  4638              MOV      r0,r7
0007e6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0007ea  9000              STR      r0,[sp,#0]
0007ec  2101              MOVS     r1,#1
0007ee  4638              MOV      r0,r7
0007f0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0007f4  4680              MOV      r8,r0
0007f6  6938              LDR      r0,[r7,#0x10]
0007f8  2800              CMP      r0,#0
0007fa  d01a              BEQ      |L2.2098|
0007fc  6838              LDR      r0,[r7,#0]
0007fe  2800              CMP      r0,#0
000800  bfa4              ITT      GE
000802  6878              LDRGE    r0,[r7,#4]
000804  2800              CMPGE    r0,#0
000806  db14              BLT      |L2.2098|
000808  6928              LDR      r0,[r5,#0x10]
00080a  2800              CMP      r0,#0
00080c  d011              BEQ      |L2.2098|
00080e  6828              LDR      r0,[r5,#0]
000810  2800              CMP      r0,#0
000812  bfa4              ITT      GE
000814  6868              LDRGE    r0,[r5,#4]
000816  2800              CMPGE    r0,#0
000818  db0b              BLT      |L2.2098|
00081a  4629              MOV      r1,r5
00081c  4638              MOV      r0,r7
00081e  f7fffffe          BL       _ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_ ; Anki::Embedded::AreEqualSize<Anki::Embedded::Array<unsigned char>, Anki::Embedded::Array<short>>(const T1&, const T2&)
000822  2800              CMP      r0,#0
000824  d006              BEQ      |L2.2100|
000826  9800              LDR      r0,[sp,#0]
000828  2101              MOVS     r1,#1
00082a  1e40              SUBS     r0,r0,#1
00082c  9001              STR      r0,[sp,#4]
00082e  2801              CMP      r0,#1
000830  e122              B        |L2.2680|
                  |L2.2098|
000832  e171              B        |L2.2840|
                  |L2.2100|
000834  e17d              B        |L2.2866|
000836  0000              DCW      0x0000
                  |L2.2104|
                          DCD      _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L2.2108|
00083c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000840  6f726574
000844  6563685c
000848  636f6d6d
00084c  6f6e5c69
000850  6e636c75
000854  64655c61
000858  6e6b692f
00085c  636f6d6d
000860  6f6e2f72
000864  6f626f74
000868  2f617272
00086c  617932  
00086f  642e6800          DCB      "d.h",0
000873  00                DCB      0
                  |L2.2164|
000874  496e7661          DCB      "Invalid size",0
000878  6c696420
00087c  73697a65
000880  00      
000881  00                DCB      0
000882  00                DCB      0
000883  00                DCB      0
                  |L2.2180|
000884  41727261          DCB      "Array<Type>::Array",0
000888  793c5479
00088c  70653e3a
000890  3a417272
000894  617900  
000897  00                DCB      0
                  |L2.2200|
                          DCD      ||.constdata||
                  |L2.2204|
00089c  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\lucasKanade_Fast.cpp",0
0008a0  6f726574
0008a4  6563685c
0008a8  76697369
0008ac  6f6e5c72
0008b0  6f626f74
0008b4  5c737263
0008b8  5c6c7563
0008bc  61734b61
0008c0  6e616465
0008c4  5f466173
0008c8  742e6370
0008cc  7000    
0008ce  00                DCB      0
0008cf  00                DCB      0
                  |L2.2256|
0008d0  436f756c          DCB      "Could not allocate pyramid lists",0
0008d4  64206e6f
0008d8  7420616c
0008dc  6c6f6361
0008e0  74652070
0008e4  7972616d
0008e8  6964206c
0008ec  69737473
0008f0  00      
0008f1  00                DCB      0
0008f2  00                DCB      0
0008f3  00                DCB      0
                  |L2.2292|
0008f4  4c756361          DCB      "LucasKanadeTracker_Fast::LucasKanadeTracker_Fast",0
0008f8  734b616e
0008fc  61646554
000900  7261636b
000904  65725f46
000908  6173743a
00090c  3a4c7563
000910  61734b61
000914  6e616465
000918  54726163
00091c  6b65725f
000920  46617374
000924  00      
000925  00                DCB      0
000926  00                DCB      0
000927  00                DCB      0
                  |L2.2344|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L2.2348|
00092c  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
000930  793c5479
000934  70653e3a
000938  3a416c6c
00093c  6f636174
000940  65427566
000944  66657246
000948  726f6d4d
00094c  656d6f72
000950  79537461
000954  636b00  
000957  00                DCB      0
                  |L2.2392|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L2.2396|
00095c  4e656761          DCB      "Negative dimension",0
000960  74697665
000964  2064696d
000968  656e7369
00096c  6f6e00  
00096f  00                DCB      0
                  |L2.2416|
000970  41727261          DCB      "Array<Type>::InitializeBuffer",0
000974  793c5479
000978  70653e3a
00097c  3a496e69
000980  7469616c
000984  697a6542
000988  75666665
00098c  7200    
00098e  00                DCB      0
00098f  00                DCB      0
                  |L2.2448|
000990  696e7075          DCB      "input data buffer is NULL",0
000994  74206461
000998  74612062
00099c  75666665
0009a0  72206973
0009a4  204e554c
0009a8  4c00    
0009aa  00                DCB      0
0009ab  00                DCB      0
                  |L2.2476|
0009ac  416e6b69          DCB      "Anki.Array2d.initialize",0
0009b0  2e417272
0009b4  61793264
0009b8  2e696e69
0009bc  7469616c
0009c0  697a6500
                  |L2.2500|
0009c4  46696c6c          DCB      "Fill patterns not supported for Array",0
0009c8  20706174
0009cc  7465726e
0009d0  73206e6f
0009d4  74207375
0009d8  70706f72
0009dc  74656420
0009e0  666f7220
0009e4  41727261
0009e8  7900    
0009ea  00                DCB      0
0009eb  00                DCB      0
                  |L2.2540|
0009ec  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0009f0  74206461
0009f4  74612062
0009f8  75666665
0009fc  72206973
000a00  206e6f74
000a04  206c6172
000a08  67652065
000a0c  6e6f7567
000a10  682e2025
000a14  64206279
000a18  74657320
000a1c  69732072
000a20  657175  
000a23  69726564          DCB      "ired.",0
000a27  2e00    
000a29  00                DCB      0
000a2a  00                DCB      0
000a2b  00                DCB      0
                  |L2.2604|
000a2c  496e7465          DCB      "Interp2_Affine failed with code 0x%x",0
000a30  7270325f
000a34  41666669
000a38  6e652066
000a3c  61696c65
000a40  64207769
000a44  74682063
000a48  6f646520
000a4c  30782578
000a50  00      
000a51  00                DCB      0
000a52  00                DCB      0
000a53  00                DCB      0
                  |L2.2644|
000a54  436f756c          DCB      "Could not allocate pyramid images",0
000a58  64206e6f
000a5c  7420616c
000a60  6c6f6361
000a64  74652070
000a68  7972616d
000a6c  69642069
000a70  6d616765
000a74  7300    
000a76  00                DCB      0
000a77  00                DCB      0
                  |L2.2680|
000a78  bfc4              ITT      GT
000a7a  f1a80a01          SUBGT    r10,r8,#1
000a7e  f04f0e00          MOVGT    lr,#0
000a82  dd22              BLE      |L2.2762|
                  |L2.2692|
000a84  68ba              LDR      r2,[r7,#8]
000a86  6938              LDR      r0,[r7,#0x10]
000a88  fb010b02          MLA      r11,r1,r2,r0
000a8c  68aa              LDR      r2,[r5,#8]
000a8e  6928              LDR      r0,[r5,#0x10]
000a90  fb010202          MLA      r2,r1,r2,r0
000a94  2001              MOVS     r0,#1
000a96  f8a2e000          STRH     lr,[r2,#0]
000a9a  f1ba0f01          CMP      r10,#1
000a9e  dd0c              BLE      |L2.2746|
                  |L2.2720|
000aa0  eb0b0300          ADD      r3,r11,r0
000aa4  f893c001          LDRB     r12,[r3,#1]
000aa8  f8133c01          LDRB     r3,[r3,#-1]
000aac  ebac0303          SUB      r3,r12,r3
000ab0  f8223010          STRH     r3,[r2,r0,LSL #1]
000ab4  1c40              ADDS     r0,r0,#1
000ab6  4582              CMP      r10,r0
000ab8  dcf2              BGT      |L2.2720|
                  |L2.2746|
000aba  eb020048          ADD      r0,r2,r8,LSL #1
000abe  1c49              ADDS     r1,r1,#1
000ac0  f820ec02          STRH     lr,[r0,#-2]
000ac4  9801              LDR      r0,[sp,#4]
000ac6  4281              CMP      r1,r0
000ac8  dbdc              BLT      |L2.2692|
                  |L2.2762|
000aca  68a9              LDR      r1,[r5,#8]
000acc  6928              LDR      r0,[r5,#0x10]
000ace  9b00              LDR      r3,[sp,#0]
000ad0  2200              MOVS     r2,#0
000ad2  1e5b              SUBS     r3,r3,#1
000ad4  fb020201          MLA      r2,r2,r1,r0
000ad8  fb030301          MLA      r3,r3,r1,r0
000adc  2000              MOVS     r0,#0
000ade  f1b80f00          CMP      r8,#0
000ae2  bfc8              IT       GT
000ae4  2100              MOVGT    r1,#0
000ae6  dd06              BLE      |L2.2806|
                  |L2.2792|
000ae8  f8221010          STRH     r1,[r2,r0,LSL #1]
000aec  f8231010          STRH     r1,[r3,r0,LSL #1]
000af0  1c40              ADDS     r0,r0,#1
000af2  4580              CMP      r8,r0
000af4  dcf8              BGT      |L2.2792|
                  |L2.2806|
000af6  2000              MOVS     r0,#0
                  |L2.2808|
000af8  2800              CMP      r0,#0
000afa  d027              BEQ      |L2.2892|
000afc  4967              LDR      r1,|L2.3228|
000afe  2262              MOVS     r2,#0x62
000b00  f2af2368          ADR      r3,|L2.2204|
000b04  9100              STR      r1,[sp,#0]
000b06  e9cd2001          STRD     r2,r0,[sp,#4]
000b0a  a265              ADR      r2,|L2.3232|
000b0c  f2af211c          ADR      r1,|L2.2292|
000b10  2005              MOVS     r0,#5
000b12  f7fffffe          BL       _Anki_Log
000b16  e63d              B        |L2.1940|
                  |L2.2840|
000b18  2134              MOVS     r1,#0x34
000b1a  486b              LDR      r0,|L2.3272|
000b1c  e9cd0100          STRD     r0,r1,[sp,#0]
000b20  a36a              ADR      r3,|L2.3276|
000b22  a27a              ADR      r2,|L2.3340|
000b24  a17d              ADR      r1,|L2.3356|
000b26  2005              MOVS     r0,#5
000b28  f7fffffe          BL       _Anki_Log
000b2c  f04f6080          MOV      r0,#0x4000000
000b30  e7e2              B        |L2.2808|
                  |L2.2866|
000b32  2137              MOVS     r1,#0x37
000b34  4864              LDR      r0,|L2.3272|
000b36  e9cd0100          STRD     r0,r1,[sp,#0]
000b3a  a364              ADR      r3,|L2.3276|
000b3c  a27c              ADR      r2,|L2.3376|
000b3e  a177              ADR      r1,|L2.3356|
000b40  2005              MOVS     r0,#5
000b42  f7fffffe          BL       _Anki_Log
000b46  f04f60a0          MOV      r0,#0x5000000
000b4a  e7d5              B        |L2.2808|
                  |L2.2892|
000b4c  f8d410d8          LDR      r1,[r4,#0xd8]
000b50  9802              LDR      r0,[sp,#8]
000b52  eb010780          ADD      r7,r1,r0,LSL #2
000b56  f8d41140          LDR      r1,[r4,#0x140]
000b5a  eb010580          ADD      r5,r1,r0,LSL #2
000b5e  2100              MOVS     r1,#0
000b60  4638              MOV      r0,r7
000b62  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000b66  9000              STR      r0,[sp,#0]
000b68  2101              MOVS     r1,#1
000b6a  4638              MOV      r0,r7
000b6c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000b70  4680              MOV      r8,r0
000b72  6938              LDR      r0,[r7,#0x10]
000b74  2800              CMP      r0,#0
000b76  d06c              BEQ      |L2.3154|
000b78  6838              LDR      r0,[r7,#0]
000b7a  2800              CMP      r0,#0
000b7c  bfa4              ITT      GE
000b7e  6878              LDRGE    r0,[r7,#4]
000b80  2800              CMPGE    r0,#0
000b82  db66              BLT      |L2.3154|
000b84  6928              LDR      r0,[r5,#0x10]
000b86  b3e8              CBZ      r0,|L2.3076|
000b88  6828              LDR      r0,[r5,#0]
000b8a  2800              CMP      r0,#0
000b8c  bfa4              ITT      GE
000b8e  6868              LDRGE    r0,[r5,#4]
000b90  2800              CMPGE    r0,#0
000b92  db5e              BLT      |L2.3154|
000b94  4629              MOV      r1,r5
000b96  4638              MOV      r0,r7
000b98  f7fffffe          BL       _ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_ ; Anki::Embedded::AreEqualSize<Anki::Embedded::Array<unsigned char>, Anki::Embedded::Array<short>>(const T1&, const T2&)
000b9c  2800              CMP      r0,#0
000b9e  d065              BEQ      |L2.3180|
000ba0  9800              LDR      r0,[sp,#0]
000ba2  2101              MOVS     r1,#1
000ba4  1e40              SUBS     r0,r0,#1
000ba6  9001              STR      r0,[sp,#4]
000ba8  2801              CMP      r0,#1
000baa  bfc8              IT       GT
000bac  f1a80a01          SUBGT    r10,r8,#1
000bb0  dd26              BLE      |L2.3072|
                  |L2.2994|
000bb2  68ba              LDR      r2,[r7,#8]
000bb4  6938              LDR      r0,[r7,#0x10]
000bb6  1e4b              SUBS     r3,r1,#1
000bb8  f1010c01          ADD      r12,r1,#1
000bbc  fb030302          MLA      r3,r3,r2,r0
000bc0  fb0c0b02          MLA      r11,r12,r2,r0
000bc4  68aa              LDR      r2,[r5,#8]
000bc6  6928              LDR      r0,[r5,#0x10]
000bc8  fb010202          MLA      r2,r1,r2,r0
000bcc  2000              MOVS     r0,#0
000bce  8010              STRH     r0,[r2,#0]
000bd0  2001              MOVS     r0,#1
000bd2  f1ba0f01          CMP      r10,#1
000bd6  dd0a              BLE      |L2.3054|
                  |L2.3032|
000bd8  f81bc000          LDRB     r12,[r11,r0]
000bdc  f813e000          LDRB     lr,[r3,r0]
000be0  ebac0c0e          SUB      r12,r12,lr
000be4  f822c010          STRH     r12,[r2,r0,LSL #1]
000be8  1c40              ADDS     r0,r0,#1
000bea  4582              CMP      r10,r0
000bec  dcf4              BGT      |L2.3032|
                  |L2.3054|
000bee  eb020248          ADD      r2,r2,r8,LSL #1
000bf2  2000              MOVS     r0,#0
000bf4  f8220c02          STRH     r0,[r2,#-2]
000bf8  9801              LDR      r0,[sp,#4]
000bfa  1c49              ADDS     r1,r1,#1
000bfc  4281              CMP      r1,r0
000bfe  dbd8              BLT      |L2.2994|
                  |L2.3072|
000c00  2200              MOVS     r2,#0
000c02  e000              B        |L2.3078|
                  |L2.3076|
000c04  e025              B        |L2.3154|
                  |L2.3078|
000c06  68a9              LDR      r1,[r5,#8]
000c08  6928              LDR      r0,[r5,#0x10]
000c0a  9b00              LDR      r3,[sp,#0]
000c0c  fb020201          MLA      r2,r2,r1,r0
000c10  1e5b              SUBS     r3,r3,#1
000c12  fb030301          MLA      r3,r3,r1,r0
000c16  2000              MOVS     r0,#0
000c18  f1b80f00          CMP      r8,#0
000c1c  bfc8              IT       GT
000c1e  2100              MOVGT    r1,#0
000c20  dd06              BLE      |L2.3120|
                  |L2.3106|
000c22  f8221010          STRH     r1,[r2,r0,LSL #1]
000c26  f8231010          STRH     r1,[r3,r0,LSL #1]
000c2a  1c40              ADDS     r0,r0,#1
000c2c  4580              CMP      r8,r0
000c2e  dcf8              BGT      |L2.3106|
                  |L2.3120|
000c30  2000              MOVS     r0,#0
                  |L2.3122|
000c32  2800              CMP      r0,#0
000c34  d027              BEQ      |L2.3206|
000c36  4919              LDR      r1,|L2.3228|
000c38  2267              MOVS     r2,#0x67
000c3a  f2af33a0          ADR      r3,|L2.2204|
000c3e  9100              STR      r1,[sp,#0]
000c40  e9cd2001          STRD     r2,r0,[sp,#4]
000c44  a240              ADR      r2,|L2.3400|
000c46  f2af3154          ADR      r1,|L2.2292|
000c4a  2005              MOVS     r0,#5
000c4c  f7fffffe          BL       _Anki_Log
000c50  e5a0              B        |L2.1940|
                  |L2.3154|
000c52  215a              MOVS     r1,#0x5a
000c54  4846              LDR      r0,|L2.3440|
000c56  e9cd0100          STRD     r0,r1,[sp,#0]
000c5a  a31c              ADR      r3,|L2.3276|
000c5c  a22b              ADR      r2,|L2.3340|
000c5e  a145              ADR      r1,|L2.3444|
000c60  2005              MOVS     r0,#5
000c62  f7fffffe          BL       _Anki_Log
000c66  f04f6080          MOV      r0,#0x4000000
000c6a  e7e2              B        |L2.3122|
                  |L2.3180|
000c6c  215d              MOVS     r1,#0x5d
000c6e  4840              LDR      r0,|L2.3440|
000c70  e9cd0100          STRD     r0,r1,[sp,#0]
000c74  a315              ADR      r3,|L2.3276|
000c76  a22e              ADR      r2,|L2.3376|
000c78  a13e              ADR      r1,|L2.3444|
000c7a  2005              MOVS     r0,#5
000c7c  f7fffffe          BL       _Anki_Log
000c80  f04f60a0          MOV      r0,#0x5000000
000c84  e7d5              B        |L2.3122|
                  |L2.3206|
000c86  f1090901          ADD      r9,r9,#1
000c8a  45b1              CMP      r9,r6
000c8c  f6ffad9e          BLT      |L2.1996|
                  |L2.3216|
000c90  f6af0054          ADR      r0,|L2.1088|
000c94  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000c98  e57c              B        |L2.1940|
                          ENDP

000c9a  0000              DCW      0x0000
                  |L2.3228|
                          DCD      ||.constdata||
                  |L2.3232|
000ca0  436f6d70          DCB      "ComputeXGradient failed with code 0x%x",0
000ca4  75746558
000ca8  47726164
000cac  69656e74
000cb0  20666169
000cb4  6c656420
000cb8  77697468
000cbc  20636f64
000cc0  65203078
000cc4  257800  
000cc7  00                DCB      0
                  |L2.3272|
                          DCD      _ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeXGradient<unsigned char, short, short>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
                  |L2.3276|
000ccc  2e2e5c63          DCB      "..\\coretech\\vision\\include\\anki/vision/robot/imageP"
000cd0  6f726574
000cd4  6563685c
000cd8  76697369
000cdc  6f6e5c69
000ce0  6e636c75
000ce4  64655c61
000ce8  6e6b692f
000cec  76697369
000cf0  6f6e2f72
000cf4  6f626f74
000cf8  2f696d61
000cfc  676550  
000cff  726f6365          DCB      "rocessing.h",0
000d03  7373696e
000d07  672e6800
000d0b  00                DCB      0
                  |L2.3340|
000d0c  496e7661          DCB      "Invalid objects",0
000d10  6c696420
000d14  6f626a65
000d18  63747300
                  |L2.3356|
000d1c  436f6d70          DCB      "ComputeXGradient",0
000d20  75746558
000d24  47726164
000d28  69656e74
000d2c  00      
000d2d  00                DCB      0
000d2e  00                DCB      0
000d2f  00                DCB      0
                  |L2.3376|
000d30  496d6167          DCB      "Image sizes don't match",0
000d34  65207369
000d38  7a657320
000d3c  646f6e27
000d40  74206d61
000d44  74636800
                  |L2.3400|
000d48  436f6d70          DCB      "ComputeYGradient failed with code 0x%x",0
000d4c  75746559
000d50  47726164
000d54  69656e74
000d58  20666169
000d5c  6c656420
000d60  77697468
000d64  20636f64
000d68  65203078
000d6c  257800  
000d6f  00                DCB      0
                  |L2.3440|
                          DCD      _ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeYGradient<unsigned char, short, short>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
                  |L2.3444|
000d74  436f6d70          DCB      "ComputeYGradient",0
000d78  75746559
000d7c  47726164
000d80  69656e74
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0

                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast21get_numTemplatePixelsEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast21get_numTemplatePixelsEv PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::get_numTemplatePixels() const
;;;281    
;;;282          s32 LucasKanadeTracker_Fast::get_numTemplatePixels() const
000000  ed900a04          VLDR     s0,[r0,#0x10]
;;;283          {
;;;284            return Round<s32>(templateRegionHeight * templateRegionWidth);
000004  edd00a05          VLDR     s1,[r0,#0x14]
000008  ee200a20          VMUL.F32 s0,s0,s1
00000c  f7ffbffe          B.W      _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
;;;285          }
;;;286        } // namespace TemplateTracker
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::VerifyTrack_Projective(const Anki::Embedded::Array<unsigned char>&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const
;;;140    
;;;141          Result LucasKanadeTracker_Fast::VerifyTrack_Projective(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;142            const Array<u8> &nextImage,
;;;143            const u8 verify_maxPixelDifference,
;;;144            s32 &verify_meanAbsoluteDifference,
;;;145            s32 &verify_numInBounds,
;;;146            s32 &verify_numSimilarPixels,
;;;147            MemoryStack scratch) const
;;;148          {
000004  4689              MOV      r9,r1
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  b0a9              SUB      sp,sp,#0xa4
;;;149            // This method is heavily based on Interp2_Projective
;;;150            // The call would be like: Interp2_Projective<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;151    
;;;152            const s32 verify_maxPixelDifferenceS32 = verify_maxPixelDifference;
;;;153    
;;;154            const s32 nextImageHeight = nextImage.get_size(0);
00000c  2100              MOVS     r1,#0
00000e  4648              MOV      r0,r9
000010  e9dd7447          LDRD     r7,r4,[sp,#0x11c]     ;148
000014  9d46              LDR      r5,[sp,#0x118]        ;152
000016  9226              STR      r2,[sp,#0x98]
000018  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00001c  ee080a90          VMOV     s17,r0
;;;155            const s32 nextImageWidth = nextImage.get_size(1);
000020  2101              MOVS     r1,#1
000022  4648              MOV      r0,r9
000024  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000028  4680              MOV      r8,r0
;;;156    
;;;157            const s32 whichScale = 0;
;;;158            const f32 scale = static_cast<f32>(1 << whichScale);
;;;159    
;;;160            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
00002a  f44f70a0          MOV      r0,#0x140
00002e  fb90f0f8          SDIV     r0,r0,r8
;;;161            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
000032  ee000a10          VMOV     s0,r0
;;;162    
;;;163            //const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
;;;164            //const f32 scaleOverFiveTen = scale / (2.0f*255.0f);
;;;165    
;;;166            //const Point<f32>& centerOffset = this->transformation.get_centerOffset();
;;;167            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
000036  9839              LDR      r0,[sp,#0xe4]
000038  eeb7ca00          VMOV.F32 s24,#1.00000000       ;158
00003c  eeb89ac0          VCVT.F32.S32 s18,s0                ;161
000040  f1000118          ADD      r1,r0,#0x18
000044  a824              ADD      r0,sp,#0x90
000046  eeb00a49          VMOV.F32 s0,s18
00004a  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;168    
;;;169            // Initialize with some very extreme coordinates
;;;170            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
00004e  a801              ADD      r0,sp,#4
000050  9015              STR      r0,[sp,#0x54]
000052  2002              MOVS     r0,#2
000054  2300              MOVS     r3,#0
000056  9014              STR      r0,[sp,#0x50]
000058  461a              MOV      r2,r3
00005a  2101              MOVS     r1,#1
00005c  a827              ADD      r0,sp,#0x9c
00005e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000062  6800              LDR      r0,[r0,#0]
000064  9000              STR      r0,[sp,#0]
000066  901b              STR      r0,[sp,#0x6c]
000068  4623              MOV      r3,r4
00006a  2101              MOVS     r1,#1
00006c  a816              ADD      r0,sp,#0x58
00006e  9a14              LDR      r2,[sp,#0x50]
000070  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000074  e9d0a102          LDRD     r10,r1,[r0,#8]
000078  e9d04600          LDRD     r4,r6,[r0,#0]
00007c  f8d0b010          LDR      r11,[r0,#0x10]
000080  2200              MOVS     r2,#0
000082  9100              STR      r1,[sp,#0]
000084  4611              MOV      r1,r2
000086  a81d              ADD      r0,sp,#0x74
000088  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00008c  2200              MOVS     r2,#0
00008e  901c              STR      r0,[sp,#0x70]
000090  4611              MOV      r1,r2
000092  a820              ADD      r0,sp,#0x80
000094  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000098  991c              LDR      r1,[sp,#0x70]
00009a  2c00              CMP      r4,#0
00009c  e9d12300          LDRD     r2,r3,[r1,#0]
0000a0  6889              LDR      r1,[r1,#8]
0000a2  9201              STR      r2,[sp,#4]
0000a4  e9cd3102          STRD     r3,r1,[sp,#8]
0000a8  e9d01200          LDRD     r1,r2,[r0,#0]
0000ac  6880              LDR      r0,[r0,#8]
0000ae  9104              STR      r1,[sp,#0x10]
0000b0  e9cd2005          STRD     r2,r0,[sp,#0x14]
0000b4  9900              LDR      r1,[sp,#0]
0000b6  f8cdb02c          STR      r11,[sp,#0x2c]
0000ba  e9cda109          STRD     r10,r1,[sp,#0x24]
0000be  e9cd4607          STRD     r4,r6,[sp,#0x1c]
0000c2  bfc8              IT       GT
0000c4  2e00              CMPGT    r6,#0
0000c6  dd31              BLE      |L4.300|
0000c8  fb04f006          MUL      r0,r4,r6
0000cc  2800              CMP      r0,#0
0000ce  bf1c              ITT      NE
0000d0  2000              MOVNE    r0,#0
0000d2  fb00b00a          MLANE    r0,r0,r10,r11
0000d6  d029              BEQ      |L4.300|
                  |L4.216|
0000d8  900c              STR      r0,[sp,#0x30]
0000da  2c00              CMP      r4,#0
0000dc  bfc8              IT       GT
0000de  2e00              CMPGT    r6,#0
0000e0  dd26              BLE      |L4.304|
0000e2  fb04f006          MUL      r0,r4,r6
0000e6  2800              CMP      r0,#0
0000e8  bf1c              ITT      NE
0000ea  2000              MOVNE    r0,#0
0000ec  fb00b00a          MLANE    r0,r0,r10,r11
0000f0  d01e              BEQ      |L4.304|
                  |L4.242|
0000f2  900d              STR      r0,[sp,#0x34]
0000f4  2c00              CMP      r4,#0
0000f6  bfc8              IT       GT
0000f8  2e00              CMPGT    r6,#0
0000fa  dd1b              BLE      |L4.308|
0000fc  fb04f006          MUL      r0,r4,r6
000100  2800              CMP      r0,#0
000102  bf1c              ITT      NE
000104  2000              MOVNE    r0,#0
000106  fb00b00a          MLANE    r0,r0,r10,r11
00010a  d013              BEQ      |L4.308|
                  |L4.268|
00010c  900d              STR      r0,[sp,#0x34]
00010e  a81b              ADD      r0,sp,#0x6c
000110  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
000114  2800              CMP      r0,#0
000116  bf12              ITEE     NE
000118  e9dd1014          LDRDNE   r1,r0,[sp,#0x50]
00011c  2100              MOVEQ    r1,#0
00011e  9815              LDREQ    r0,[sp,#0x54]
000120  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
;;;171    
;;;172            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
000124  2400              MOVS     r4,#0
;;;173              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
000126  ed9f8ae7          VLDR     s16,|L4.1220|
00012a  e005              B        |L4.312|
                  |L4.300|
00012c  2000              MOVS     r0,#0
00012e  e7d3              B        |L4.216|
                  |L4.304|
000130  2000              MOVS     r0,#0
000132  e7de              B        |L4.242|
                  |L4.308|
000134  2000              MOVS     r0,#0
000136  e7e9              B        |L4.268|
                  |L4.312|
000138  980d              LDR      r0,[sp,#0x34]
00013a  ed8d8a1c          VSTR     s16,[sp,#0x70]
00013e  ed8d8a1d          VSTR     s16,[sp,#0x74]
000142  ed8d8a1e          VSTR     s16,[sp,#0x78]
000146  ed8d8a1f          VSTR     s16,[sp,#0x7c]
00014a  ed8d8a20          VSTR     s16,[sp,#0x80]
00014e  ed8d8a21          VSTR     s16,[sp,#0x84]
000152  eb001644          ADD      r6,r0,r4,LSL #5
000156  ed8d8a22          VSTR     s16,[sp,#0x88]
00015a  a814              ADD      r0,sp,#0x50
00015c  ed8d8a23          VSTR     s16,[sp,#0x8c]
000160  2304              MOVS     r3,#4
000162  2208              MOVS     r2,#8
000164  49d8              LDR      r1,|L4.1224|
000166  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00016a  ed9d0a1c          VLDR     s0,[sp,#0x70]
00016e  4603              MOV      r3,r0
000170  ed800a00          VSTR     s0,[r0,#0]
000174  ed9d0a1d          VLDR     s0,[sp,#0x74]
000178  ed800a01          VSTR     s0,[r0,#4]
00017c  3008              ADDS     r0,r0,#8
00017e  ed9d0a1e          VLDR     s0,[sp,#0x78]
000182  ed800a00          VSTR     s0,[r0,#0]
000186  ed9d0a1f          VLDR     s0,[sp,#0x7c]
00018a  ed800a01          VSTR     s0,[r0,#4]
00018e  ed9d0a20          VLDR     s0,[sp,#0x80]
000192  2000              MOVS     r0,#0
000194  ed830a04          VSTR     s0,[r3,#0x10]
000198  ed9d0a21          VLDR     s0,[sp,#0x84]
00019c  ed830a05          VSTR     s0,[r3,#0x14]
0001a0  ed9d0a22          VLDR     s0,[sp,#0x88]
0001a4  ed830a06          VSTR     s0,[r3,#0x18]
0001a8  ed9d0a23          VLDR     s0,[sp,#0x8c]
0001ac  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L4.432|
0001b0  eb0302c0          ADD      r2,r3,r0,LSL #3
0001b4  eb0601c0          ADD      r1,r6,r0,LSL #3
0001b8  edd20a00          VLDR     s1,[r2,#0]
0001bc  1c40              ADDS     r0,r0,#1
0001be  edc10a00          VSTR     s1,[r1,#0]
0001c2  edd20a01          VLDR     s1,[r2,#4]
0001c6  2804              CMP      r0,#4
0001c8  edc10a01          VSTR     s1,[r1,#4]
0001cc  dbf0              BLT      |L4.432|
0001ce  1c64              ADDS     r4,r4,#1              ;172
0001d0  2c02              CMP      r4,#2                 ;172
0001d2  dbb1              BLT      |L4.312|
;;;174            }
;;;175    
;;;176            Meshgrid<f32> originalCoordinates(
0001d4  9839              LDR      r0,[sp,#0xe4]
0001d6  ed908a05          VLDR     s16,[r0,#0x14]
0001da  eddf9abc          VLDR     s19,|L4.1228|
0001de  ee380a29          VADD.F32 s0,s16,s19
0001e2  f7fffffe          BL       __hardfp_floorf
0001e6  eebd0ac0          VCVT.S32.F32 s0,s0
0001ea  eeb6ba00          VMOV.F32 s22,#0.50000000
0001ee  eebeaa00          VMOV.F32 s20,#-0.50000000
0001f2  ee101a10          VMOV     r1,s0
0001f6  ee680a0b          VMUL.F32 s1,s16,s22
0001fa  ee280a0a          VMUL.F32 s0,s16,s20
0001fe  a814              ADD      r0,sp,#0x50
000200  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
000204  9839              LDR      r0,[sp,#0xe4]
000206  e9dd4614          LDRD     r4,r6,[sp,#0x50]
00020a  ed908a04          VLDR     s16,[r0,#0x10]
00020e  f8dda058          LDR      r10,[sp,#0x58]
000212  ee380a29          VADD.F32 s0,s16,s19
000216  f7fffffe          BL       __hardfp_floorf
00021a  eebd0ac0          VCVT.S32.F32 s0,s0
00021e  ee680a0b          VMUL.F32 s1,s16,s22
000222  a817              ADD      r0,sp,#0x5c
000224  ee101a10          VMOV     r1,s0
000228  ee280a0a          VMUL.F32 s0,s16,s20
00022c  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
000230  e9dd0117          LDRD     r0,r1,[sp,#0x5c]
;;;177              Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;178              Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;179    
;;;180            // Unused, remove?
;;;181            //const s32 outHeight = originalCoordinates.get_yGridVector().get_size();
;;;182            //const s32 outWidth = originalCoordinates.get_xGridVector().get_size();
;;;183    
;;;184            const f32 xyReferenceMin = 0.0f;
;;;185            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
000234  ee008a10          VMOV     s0,r8
000238  9a19              LDR      r2,[sp,#0x64]
00023a  f8cda040          STR      r10,[sp,#0x40]
00023e  eeb80ac0          VCVT.F32.S32 s0,s0
000242  9213              STR      r2,[sp,#0x4c]
000244  e9cd0111          STRD     r0,r1,[sp,#0x44]
000248  e9cd460e          STRD     r4,r6,[sp,#0x38]
00024c  ee300a4c          VSUB.F32 s0,s0,s24
000250  ee0caa90          VMOV     s25,r10
000254  46a2              MOV      r10,r4
000256  ed8d0a15          VSTR     s0,[sp,#0x54]
;;;186            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
00025a  eeb80ae8          VCVT.F32.S32 s0,s17
00025e  ee081a90          VMOV     s17,r1
000262  ee300a4c          VSUB.F32 s0,s0,s24
000266  ed8d0a14          VSTR     s0,[sp,#0x50]
00026a  e9cd6216          STRD     r6,r2,[sp,#0x58]
00026e  9000              STR      r0,[sp,#0]
;;;187    
;;;188            const LinearSequence<f32> &yGridVector = originalCoordinates.get_yGridVector();
;;;189            const LinearSequence<f32> &xGridVector = originalCoordinates.get_xGridVector();
;;;190    
;;;191            const f32 yGridStart = yGridVector.get_start();
;;;192            const f32 xGridStart = xGridVector.get_start();
;;;193    
;;;194            const f32 yGridDelta = yGridVector.get_increment();
;;;195            const f32 xGridDelta = xGridVector.get_increment();
;;;196    
;;;197            const s32 yIterationMax = yGridVector.get_size();
;;;198            const s32 xIterationMax = xGridVector.get_size();
;;;199    
;;;200            const Array<f32> &homography = this->transformation.get_homography();
000270  9839              LDR      r0,[sp,#0xe4]
000272  3018              ADDS     r0,r0,#0x18
000274  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
000278  6902              LDR      r2,[r0,#0x10]
00027a  6881              LDR      r1,[r0,#8]
;;;201            const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
00027c  2300              MOVS     r3,#0
00027e  fb032001          MLA      r0,r3,r1,r2
000282  ed900a00          VLDR     s0,[r0,#0]
000286  ed8d0a19          VSTR     s0,[sp,#0x64]
00028a  ed900a01          VLDR     s0,[r0,#4]
00028e  ed8d0a18          VSTR     s0,[sp,#0x60]
000292  ed900a02          VLDR     s0,[r0,#8]
;;;202            const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
000296  2001              MOVS     r0,#1
000298  fb002001          MLA      r0,r0,r1,r2
00029c  eec0fa09          VDIV.F32 s31,s0,s18            ;201
0002a0  ed900a02          VLDR     s0,[r0,#8]
0002a4  ed90fa00          VLDR     s30,[r0,#0]
0002a8  edd0ea01          VLDR     s29,[r0,#4]
;;;203            const f32 h20 = homography[2][0] * initialImageScaleF32; const f32 h21 = homography[2][1] * initialImageScaleF32; //const f32 h22 = 1.0f;
0002ac  2002              MOVS     r0,#2
0002ae  fb002001          MLA      r0,r0,r1,r2
0002b2  ee80ea09          VDIV.F32 s28,s0,s18            ;202
0002b6  ed900a00          VLDR     s0,[r0,#0]
0002ba  ee60da09          VMUL.F32 s27,s0,s18
0002be  ed900a01          VLDR     s0,[r0,#4]
;;;204    
;;;205            verify_numInBounds = 0;
0002c2  2000              MOVS     r0,#0
;;;206            verify_numSimilarPixels = 0;
0002c4  6028              STR      r0,[r5,#0]
;;;207            s32 totalGrayvalueDifference = 0;
0002c6  4606              MOV      r6,r0
;;;208    
;;;209            // TODO: make the x and y limits from 1 to end-2
;;;210    
;;;211            f32 yOriginal = yGridStart;
;;;212            for(s32 y=0; y<yIterationMax; y++) {
0002c8  4680              MOV      r8,r0
0002ca  6038              STR      r0,[r7,#0]
0002cc  ee20da09          VMUL.F32 s26,s0,s18            ;203
0002d0  9800              LDR      r0,[sp,#0]
0002d2  2800              CMP      r0,#0
0002d4  dd7d              BLE      |L4.978|
                  |L4.726|
0002d6  9839              LDR      r0,[sp,#0xe4]
;;;213              const u8 * restrict pTemplateImage = this->templateImagePyramid[whichScale].Pointer(y, 0);
;;;214    
;;;215              //const s16 * restrict pTemplateImageXGradient = this->templateImageXGradientPyramid[whichScale].Pointer(y, 0);
;;;216              //const s16 * restrict pTemplateImageYGradient = this->templateImageYGradientPyramid[whichScale].Pointer(y, 0);
;;;217    
;;;218              f32 xOriginal = xGridStart;
0002d8  ed9d8a16          VLDR     s16,[sp,#0x58]
;;;219    
;;;220              for(s32 x=0; x<xIterationMax; x++) {
0002dc  2400              MOVS     r4,#0
0002de  f8d000d8          LDR      r0,[r0,#0xd8]
0002e2  f1ba0f00          CMP      r10,#0
0002e6  6901              LDR      r1,[r0,#0x10]
0002e8  6880              LDR      r0,[r0,#8]
0002ea  fb081b00          MLA      r11,r8,r0,r1
0002ee  dd71              BLE      |L4.980|
                  |L4.752|
;;;221                // TODO: These two could be strength reduced
;;;222                const f32 xTransformedRaw = h00*xOriginal + h01*yOriginal + h02;
0002f0  ed9d0a19          VLDR     s0,[sp,#0x64]
0002f4  ee600a08          VMUL.F32 s1,s0,s16
0002f8  ed9d0a18          VLDR     s0,[sp,#0x60]
0002fc  ee400a28          VMLA.F32 s1,s0,s17
;;;223                const f32 yTransformedRaw = h10*xOriginal + h11*yOriginal + h12;
000300  ee2f0a08          VMUL.F32 s0,s30,s16
000304  ee0e0aa8          VMLA.F32 s0,s29,s17
000308  ee301aaf          VADD.F32 s2,s1,s31             ;222
00030c  ee700a0e          VADD.F32 s1,s0,s28
;;;224    
;;;225                const f32 normalization = h20*xOriginal + h21*yOriginal + 1.0f;
000310  ee2d0a88          VMUL.F32 s0,s27,s16
;;;226    
;;;227                const f32 xTransformed = (xTransformedRaw / normalization) + centerOffsetScaled.x;
;;;228                const f32 yTransformed = (yTransformedRaw / normalization) + centerOffsetScaled.y;
;;;229    
;;;230                xOriginal += xGridDelta;
000314  ee388a2c          VADD.F32 s16,s16,s25
000318  ee0d0a28          VMLA.F32 s0,s26,s17            ;225
00031c  ee300a0c          VADD.F32 s0,s0,s24             ;225
000320  eec11a00          VDIV.F32 s3,s2,s0              ;227
000324  ed9d1a24          VLDR     s2,[sp,#0x90]         ;227
000328  ee71aa81          VADD.F32 s21,s3,s2             ;227
00032c  ee801a80          VDIV.F32 s2,s1,s0              ;228
000330  ed9d0a25          VLDR     s0,[sp,#0x94]         ;228
000334  ee31aa00          VADD.F32 s20,s2,s0             ;228
;;;231    
;;;232                const f32 x0 = FLT_FLOOR(xTransformed);
000338  ed9f9a64          VLDR     s18,|L4.1228|
00033c  ee3a0a89          VADD.F32 s0,s21,s18
000340  f7fffffe          BL       __hardfp_floorf
000344  eef09a40          VMOV.F32 s19,s0
;;;233                const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
000348  eeb00a6a          VMOV.F32 s0,s21
00034c  f7fffffe          BL       __hardfp_ceilf
000350  eef0ba40          VMOV.F32 s23,s0
;;;234    
;;;235                const f32 y0 = FLT_FLOOR(yTransformed);
000354  ee3a0a09          VADD.F32 s0,s20,s18
000358  f7fffffe          BL       __hardfp_floorf
00035c  eeb09a40          VMOV.F32 s18,s0
;;;236                const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
000360  eeb00a4a          VMOV.F32 s0,s20
000364  f7fffffe          BL       __hardfp_ceilf
;;;237    
;;;238                // If out of bounds, continue
;;;239                if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
000368  eef59ac0          VCMPE.F32 s19,#0.0
00036c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000370  d37d              BCC      |L4.1134|
000372  eddd0a15          VLDR     s1,[sp,#0x54]
000376  eef4bae0          VCMPE.F32 s23,s1
00037a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00037e  dc76              BGT      |L4.1134|
000380  eeb59ac0          VCMPE.F32 s18,#0.0
000384  eef1fa10          VMRS     APSR_nzcv,FPSCR
000388  d371              BCC      |L4.1134|
00038a  eddd0a14          VLDR     s1,[sp,#0x50]
00038e  eeb40ae0          VCMPE.F32 s0,s1
000392  eef1fa10          VMRS     APSR_nzcv,FPSCR
000396  dc7a              BGT      |L4.1166|
;;;240                  continue;
;;;241                }
;;;242    
;;;243                verify_numInBounds++;
;;;244    
;;;245                const f32 alphaX = xTransformed - x0;
000398  ee7a0ae9          VSUB.F32 s1,s21,s19
;;;246                const f32 alphaXinverse = 1 - alphaX;
;;;247    
;;;248                const f32 alphaY = yTransformed - y0;
00039c  ee3a1a49          VSUB.F32 s2,s20,s18
0003a0  6828              LDR      r0,[r5,#0]            ;243
0003a2  eeb59ac0          VCMPE.F32 s18,#0.0              ;243
0003a6  ee7c1a60          VSUB.F32 s3,s24,s1             ;246
;;;249                const f32 alphaYinverse = 1.0f - alphaY;
0003aa  ee7c2a41          VSUB.F32 s5,s24,s2
0003ae  1c40              ADDS     r0,r0,#1              ;243
0003b0  6028              STR      r0,[r5,#0]            ;243
0003b2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;243
0003b6  bfcc              ITE      GT                    ;243
0003b8  ee392a0b          VADDGT.F32 s4,s18,s22            ;243
0003bc  ee392a4b          VSUBLE.F32 s4,s18,s22            ;243
0003c0  eebd2ac2          VCVT.S32.F32 s4,s4                 ;243
0003c4  eeb50ac0          VCMPE.F32 s0,#0.0               ;243
0003c8  ee121a10          VMOV     r1,s4                 ;243
0003cc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;243
0003d0  e001              B        |L4.982|
                  |L4.978|
0003d2  e06a              B        |L4.1194|
                  |L4.980|
0003d4  e05f              B        |L4.1174|
                  |L4.982|
0003d6  bfcc              ITE      GT                    ;243
0003d8  ee300a0b          VADDGT.F32 s0,s0,s22             ;243
0003dc  ee300a4b          VSUBLE.F32 s0,s0,s22             ;243
0003e0  eebd0ac0          VCVT.S32.F32 s0,s0                 ;243
0003e4  eef59ac0          VCMPE.F32 s19,#0.0              ;243
0003e8  ee10ca10          VMOV     r12,s0                ;243
0003ec  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;243
0003f0  bfcc              ITE      GT                    ;243
0003f2  ee390a8b          VADDGT.F32 s0,s19,s22            ;243
0003f6  ee390acb          VSUBLE.F32 s0,s19,s22            ;243
0003fa  eebd0ac0          VCVT.S32.F32 s0,s0                 ;243
0003fe  f8d93010          LDR      r3,[r9,#0x10]         ;243
000402  f8d90008          LDR      r0,[r9,#8]            ;243
000406  ee102a10          VMOV     r2,s0                 ;243
00040a  fb013100          MLA      r1,r1,r0,r3           ;243
00040e  fb0c3000          MLA      r0,r12,r0,r3          ;243
000412  4411              ADD      r1,r1,r2              ;243
000414  4410              ADD      r0,r0,r2              ;243
;;;250    
;;;251                const s32 y0S32 = Round<s32>(y0);
;;;252                const s32 y1S32 = Round<s32>(y1);
;;;253                const s32 x0S32 = Round<s32>(x0);
;;;254    
;;;255                const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;256                const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;257    
;;;258                const f32 pixelTL = *pReference_y0;
000416  780a              LDRB     r2,[r1,#0]
;;;259                const f32 pixelTR = *(pReference_y0+1);
000418  7849              LDRB     r1,[r1,#1]
00041a  ee002a10          VMOV     s0,r2                 ;258
00041e  eeb83a40          VCVT.F32.U32 s6,s0                 ;258
000422  ee001a10          VMOV     s0,r1
;;;260                const f32 pixelBL = *pReference_y1;
000426  7801              LDRB     r1,[r0,#0]
;;;261                const f32 pixelBR = *(pReference_y1+1);
000428  7840              LDRB     r0,[r0,#1]
00042a  eeb82a40          VCVT.F32.U32 s4,s0                 ;259
00042e  ee001a10          VMOV     s0,r1                 ;260
000432  ee213a83          VMUL.F32 s6,s3,s6              ;260
000436  ee030a90          VMOV     s7,r0
00043a  eeb80a40          VCVT.F32.U32 s0,s0                 ;260
00043e  eef83a63          VCVT.F32.U32 s7,s7
000442  ee003a82          VMLA.F32 s6,s1,s4
000446  ee611a80          VMUL.F32 s3,s3,s0
00044a  ee401aa3          VMLA.F32 s3,s1,s7
00044e  ee220a83          VMUL.F32 s0,s5,s6
000452  ee010a21          VMLA.F32 s0,s2,s3
000456  eeb50ac0          VCMPE.F32 s0,#0.0
00045a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00045e  bfcc              ITE      GT
000460  ee300a0b          VADDGT.F32 s0,s0,s22
000464  ee300a4b          VSUBLE.F32 s0,s0,s22
000468  eebd0ac0          VCVT.S32.F32 s0,s0
00046c  e000              B        |L4.1136|
                  |L4.1134|
00046e  e00e              B        |L4.1166|
                  |L4.1136|
000470  ee100a10          VMOV     r0,s0
;;;262    
;;;263                const s32 interpolatedPixelValue = Round<s32>(InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse));
;;;264                const s32 templatePixelValue = pTemplateImage[x];
000474  f81b2004          LDRB     r2,[r11,r4]
;;;265                const s32 grayvalueDifference = ABS(interpolatedPixelValue - templatePixelValue);
000478  1a81              SUBS     r1,r0,r2
00047a  2900              CMP      r1,#0
00047c  bfb8              IT       LT
00047e  1a11              SUBLT    r1,r2,r0
;;;266    
;;;267                totalGrayvalueDifference += grayvalueDifference;
000480  440e              ADD      r6,r6,r1
;;;268    
;;;269                if(grayvalueDifference <= verify_maxPixelDifferenceS32) {
000482  9826              LDR      r0,[sp,#0x98]
000484  4281              CMP      r1,r0
000486  dc02              BGT      |L4.1166|
;;;270                  verify_numSimilarPixels++;
000488  6838              LDR      r0,[r7,#0]
00048a  1c40              ADDS     r0,r0,#1
00048c  6038              STR      r0,[r7,#0]
                  |L4.1166|
00048e  1c64              ADDS     r4,r4,#1              ;220
000490  4554              CMP      r4,r10                ;220
000492  f6ffaf2d          BLT      |L4.752|
                  |L4.1174|
;;;271                }
;;;272              } // for(s32 x=0; x<xIterationMax; x++)
;;;273    
;;;274              yOriginal += yGridDelta;
000496  ed9d0a17          VLDR     s0,[sp,#0x5c]
00049a  9800              LDR      r0,[sp,#0]            ;212
00049c  f1080801          ADD      r8,r8,#1              ;212
0004a0  ee788a80          VADD.F32 s17,s17,s0
0004a4  4580              CMP      r8,r0                 ;212
0004a6  f6ffaf16          BLT      |L4.726|
                  |L4.1194|
;;;275            } // for(s32 y=0; y<yIterationMax; y++)
;;;276    
;;;277            verify_meanAbsoluteDifference = totalGrayvalueDifference / verify_numInBounds;
0004aa  6828              LDR      r0,[r5,#0]
0004ac  fb96f1f0          SDIV     r1,r6,r0
0004b0  983c              LDR      r0,[sp,#0xf0]
;;;278    
;;;279            return RESULT_OK;
0004b2  6001              STR      r1,[r0,#0]
;;;280          } // Result LucasKanadeTracker_Fast::VerifyTrack_Projective()
0004b4  b029              ADD      sp,sp,#0xa4
0004b6  2000              MOVS     r0,#0                 ;279
0004b8  ecbd8b10          VPOP     {d8-d15}
0004bc  b004              ADD      sp,sp,#0x10
0004be  e8bd8ff0          POP      {r4-r11,pc}
;;;281    
                          ENDP

0004c2  0000              DCW      0x0000
                  |L4.1220|
0004c4  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L4.1224|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L4.1228|
0004cc  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast7IsValidEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast7IsValidEv PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::IsValid() const
;;;112    
;;;113          bool LucasKanadeTracker_Fast::IsValid() const
000000  b570              PUSH     {r4-r6,lr}
;;;114          {
000002  4604              MOV      r4,r0
;;;115            if(!LucasKanadeTracker_Generic::IsValid())
000004  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic7IsValidEv ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const
000008  2800              CMP      r0,#0
;;;116              return false;
;;;117    
;;;118            if(!templateImagePyramid.IsValid())
;;;119              return false;
;;;120    
;;;121            if(!templateImageXGradientPyramid.IsValid())
;;;122              return false;
;;;123    
;;;124            if(!templateImageYGradientPyramid.IsValid())
;;;125              return false;
;;;126    
;;;127            for(s32 i=0; i<numPyramidLevels; i++) {
;;;128              if(!templateImagePyramid[i].IsValid())
;;;129                return false;
;;;130    
;;;131              if(!templateImageXGradientPyramid[i].IsValid())
;;;132                return false;
;;;133    
;;;134              if(!templateImageYGradientPyramid[i].IsValid())
;;;135                return false;
;;;136            }
;;;137    
;;;138            return true;
;;;139          }
00000a  bf08              IT       EQ
00000c  bd70              POPEQ    {r4-r6,pc}
00000e  f10400a8          ADD      r0,r4,#0xa8           ;118
000012  f8d420b4          LDR      r2,[r4,#0xb4]         ;118
000016  f8d410c4          LDR      r1,[r4,#0xc4]         ;118
00001a  428a              CMP      r2,r1                 ;118
00001c  dc4a              BGT      |L5.180|
00001e  6a82              LDR      r2,[r0,#0x28]         ;118
000020  b12a              CBZ      r2,|L5.46|
000022  6980              LDR      r0,[r0,#0x18]         ;118
000024  2800              CMP      r0,#0                 ;118
000026  bfa4              ITT      GE                    ;118
000028  2900              CMPGE    r1,#0                 ;118
00002a  2001              MOVGE    r0,#1                 ;118
00002c  da00              BGE      |L5.48|
                  |L5.46|
00002e  2000              MOVS     r0,#0                 ;118
                  |L5.48|
000030  2800              CMP      r0,#0                 ;118
000032  d03f              BEQ      |L5.180|
000034  f10400dc          ADD      r0,r4,#0xdc           ;121
000038  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::IsValid() const
00003c  2800              CMP      r0,#0                 ;121
00003e  bf08              IT       EQ
000040  bd70              POPEQ    {r4-r6,pc}
000042  f5047088          ADD      r0,r4,#0x110          ;124
000046  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::IsValid() const
00004a  2800              CMP      r0,#0                 ;124
00004c  bf08              IT       EQ
00004e  bd70              POPEQ    {r4-r6,pc}
000050  2000              MOVS     r0,#0                 ;127
000052  f8d4c004          LDR      r12,[r4,#4]           ;127
000056  f1bc0f00          CMP      r12,#0                ;127
00005a  bfc8              IT       GT                    ;127
00005c  f8d430d8          LDRGT    r3,[r4,#0xd8]         ;127
000060  dd26              BLE      |L5.176|
                  |L5.98|
000062  eb000280          ADD      r2,r0,r0,LSL #2       ;127
000066  eb030182          ADD      r1,r3,r2,LSL #2       ;127
00006a  690d              LDR      r5,[r1,#0x10]         ;127
00006c  b315              CBZ      r5,|L5.180|
00006e  680d              LDR      r5,[r1,#0]            ;127
000070  2d00              CMP      r5,#0                 ;127
000072  bfa4              ITT      GE                    ;127
000074  6849              LDRGE    r1,[r1,#4]            ;127
000076  2900              CMPGE    r1,#0                 ;127
000078  db1c              BLT      |L5.180|
00007a  f8d4110c          LDR      r1,[r4,#0x10c]        ;127
00007e  eb010182          ADD      r1,r1,r2,LSL #2       ;127
000082  690d              LDR      r5,[r1,#0x10]         ;127
000084  b1b5              CBZ      r5,|L5.180|
000086  680d              LDR      r5,[r1,#0]            ;127
000088  2d00              CMP      r5,#0                 ;127
00008a  bfa4              ITT      GE                    ;127
00008c  6849              LDRGE    r1,[r1,#4]            ;127
00008e  2900              CMPGE    r1,#0                 ;127
000090  db10              BLT      |L5.180|
000092  f8d41140          LDR      r1,[r4,#0x140]        ;127
000096  eb010182          ADD      r1,r1,r2,LSL #2       ;127
00009a  690a              LDR      r2,[r1,#0x10]         ;127
00009c  b152              CBZ      r2,|L5.180|
00009e  680a              LDR      r2,[r1,#0]            ;127
0000a0  2a00              CMP      r2,#0                 ;127
0000a2  bfa4              ITT      GE                    ;127
0000a4  6849              LDRGE    r1,[r1,#4]            ;127
0000a6  2900              CMPGE    r1,#0                 ;127
0000a8  db04              BLT      |L5.180|
0000aa  1c40              ADDS     r0,r0,#1              ;127
0000ac  4560              CMP      r0,r12                ;127
0000ae  dbd8              BLT      |L5.98|
                  |L5.176|
0000b0  2001              MOVS     r0,#1                 ;138
0000b2  bd70              POP      {r4-r6,pc}
                  |L5.180|
0000b4  2000              MOVS     r0,#0                 ;135
0000b6  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeE||
                          DCD      0x00000001

                          AREA ||area_number.7||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast7IsValidEv||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast21get_numTemplatePixelsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast21get_numTemplatePixelsEv||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  54656d70          DCB      0x54,0x65,0x6d,0x70
000014  6c617465          DCB      0x6c,0x61,0x74,0x65
000018  54726163          DCB      0x54,0x72,0x61,0x63
00001c  6b65723a          DCB      0x6b,0x65,0x72,0x3a
000020  3a4c7563          DCB      0x3a,0x4c,0x75,0x63
000024  61734b61          DCB      0x61,0x73,0x4b,0x61
000028  6e616465          DCB      0x6e,0x61,0x64,0x65
00002c  54726163          DCB      0x54,0x72,0x61,0x63
000030  6b65725f          DCB      0x6b,0x65,0x72,0x5f
000034  46617374          DCB      0x46,0x61,0x73,0x74
000038  3a3a4c75          DCB      0x3a,0x3a,0x4c,0x75
00003c  6361734b          DCB      0x63,0x61,0x73,0x4b
000040  616e6164          DCB      0x61,0x6e,0x61,0x64
000044  65547261          DCB      0x65,0x54,0x72,0x61
000048  636b6572          DCB      0x63,0x6b,0x65,0x72
00004c  5f466173          DCB      0x5f,0x46,0x61,0x73
000050  7428416e          DCB      0x74,0x28,0x41,0x6e
000054  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000058  456d6265          DCB      0x45,0x6d,0x62,0x65
00005c  64646564          DCB      0x64,0x64,0x65,0x64
000060  3a3a5472          DCB      0x3a,0x3a,0x54,0x72
000064  616e7366          DCB      0x61,0x6e,0x73,0x66
000068  6f726d61          DCB      0x6f,0x72,0x6d,0x61
00006c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000070  733a3a54          DCB      0x73,0x3a,0x3a,0x54
000074  72616e73          DCB      0x72,0x61,0x6e,0x73
000078  666f726d          DCB      0x66,0x6f,0x72,0x6d
00007c  54797065          DCB      0x54,0x79,0x70,0x65
000080  2c20636f          DCB      0x2c,0x20,0x63,0x6f
000084  6e737420          DCB      0x6e,0x73,0x74,0x20
000088  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00008c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000090  62656464          DCB      0x62,0x65,0x64,0x64
000094  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000098  41727261          DCB      0x41,0x72,0x72,0x61
00009c  793c756e          DCB      0x79,0x3c,0x75,0x6e
0000a0  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a4  65642063          DCB      0x65,0x64,0x20,0x63
0000a8  6861723e          DCB      0x68,0x61,0x72,0x3e
0000ac  20262c20          DCB      0x20,0x26,0x2c,0x20
0000b0  636f6e73          DCB      0x63,0x6f,0x6e,0x73
0000b4  7420416e          DCB      0x74,0x20,0x41,0x6e
0000b8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000bc  456d6265          DCB      0x45,0x6d,0x62,0x65
0000c0  64646564          DCB      0x64,0x64,0x65,0x64
0000c4  3a3a5175          DCB      0x3a,0x3a,0x51,0x75
0000c8  61647269          DCB      0x61,0x64,0x72,0x69
0000cc  6c617465          DCB      0x6c,0x61,0x74,0x65
0000d0  72616c3c          DCB      0x72,0x61,0x6c,0x3c
0000d4  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000d8  743e2026          DCB      0x74,0x3e,0x20,0x26
0000dc  2c20666c          DCB      0x2c,0x20,0x66,0x6c
0000e0  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000e4  20736967          DCB      0x20,0x73,0x69,0x67
0000e8  6e656420          DCB      0x6e,0x65,0x64,0x20
0000ec  696e742c          DCB      0x69,0x6e,0x74,0x2c
0000f0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000f4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000f8  6d626564          DCB      0x6d,0x62,0x65,0x64
0000fc  6465643a          DCB      0x64,0x65,0x64,0x3a
000100  3a547261          DCB      0x3a,0x54,0x72,0x61
000104  6e73666f          DCB      0x6e,0x73,0x66,0x6f
000108  726d6174          DCB      0x72,0x6d,0x61,0x74
00010c  696f6e73          DCB      0x69,0x6f,0x6e,0x73
000110  3a3a5472          DCB      0x3a,0x3a,0x54,0x72
000114  616e7366          DCB      0x61,0x6e,0x73,0x66
000118  6f726d54          DCB      0x6f,0x72,0x6d,0x54
00011c  7970652c          DCB      0x79,0x70,0x65,0x2c
000120  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000124  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000128  6d626564          DCB      0x6d,0x62,0x65,0x64
00012c  6465643a          DCB      0x64,0x65,0x64,0x3a
000130  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
000134  6f727953          DCB      0x6f,0x72,0x79,0x53
000138  7461636b          DCB      0x74,0x61,0x63,0x6b
00013c  20262900          DCB      0x20,0x26,0x29,0x00
000140  41727261          DCB      0x41,0x72,0x72,0x61
000144  793c5479          DCB      0x79,0x3c,0x54,0x79
000148  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00014c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000150  70757465          DCB      0x70,0x75,0x74,0x65
000154  52657175          DCB      0x52,0x65,0x71,0x75
000158  69726564          DCB      0x69,0x72,0x65,0x64
00015c  53747269          DCB      0x53,0x74,0x72,0x69
000160  64650000          DCB      0x64,0x65,0x00,0x00
000164  496e7661          DCB      0x49,0x6e,0x76,0x61
000168  6c696420          DCB      0x6c,0x69,0x64,0x20
00016c  73697a65          DCB      0x73,0x69,0x7a,0x65
000170  00000000          DCB      0x00,0x00,0x00,0x00
000174  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000178  6f726574          DCB      0x6f,0x72,0x65,0x74
00017c  6563685c          DCB      0x65,0x63,0x68,0x5c
000180  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000184  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000188  6e636c75          DCB      0x6e,0x63,0x6c,0x75
00018c  64655c61          DCB      0x64,0x65,0x5c,0x61
000190  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000194  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000198  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
00019c  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0001a0  2f617272          DCB      0x2f,0x61,0x72,0x72
0001a4  61793264          DCB      0x61,0x79,0x32,0x64
0001a8  2e680000          DCB      0x2e,0x68,0x00,0x00
0001ac  41727261          DCB      0x41,0x72,0x72,0x61
0001b0  793c5479          DCB      0x79,0x3c,0x54,0x79
0001b4  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0001b8  3a676574          DCB      0x3a,0x67,0x65,0x74
0001bc  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0001c0  65000000          DCB      0x65,0x00,0x00,0x00
0001c4  4e656761          DCB      0x4e,0x65,0x67,0x61
0001c8  74697665          DCB      0x74,0x69,0x76,0x65
0001cc  2064696d          DCB      0x20,0x64,0x69,0x6d
0001d0  656e7369          DCB      0x65,0x6e,0x73,0x69
0001d4  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||t._ZN4Anki8Embedded5PointIfEC1Ev||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5PointIfEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point<float>::Point__sub_object()
                  _ZN4Anki8Embedded5PointIfEC1Ev PROC ; Anki::Embedded::Point<float>::Point()
;;;28     #endif
;;;29         template<typename Type> Point<Type>::Point()
;;;30           : x(static_cast<Type>(0)), y(static_cast<Type>(0))
;;;31         {
;;;32         }
;;;33     
000000  ed9f0a03          VLDR     s0,|L38.16|
000004  ed800a00          VSTR     s0,[r0,#0]
000008  ed800a01          VSTR     s0,[r0,#4]
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L38.16|
000010  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.39||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5PointIfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5PointIfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d017              BEQ      |L45.64|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L45.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L45.30|
                  |L45.26|
00001a  462b              MOV      r3,r5
00001c  e010              B        |L45.64|
                  |L45.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0a              BGE      |L45.64|
00002a  2185              MOVS     r1,#0x85
00002c  4806              LDR      r0,|L45.72|
00002e  e9cd0100          STRD     r0,r1,[sp,#0]
000032  a306              ADR      r3,|L45.76|
000034  a214              ADR      r2,|L45.136|
000036  a11a              ADR      r1,|L45.160|
000038  2005              MOVS     r0,#5
00003a  f7fffffe          BL       _Anki_Log
00003e  462b              MOV      r3,r5
                  |L45.64|
000040  6023              STR      r3,[r4,#0]
000042  b003              ADD      sp,sp,#0xc
000044  4620              MOV      r0,r4
000046  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L45.72|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L45.76|
00004c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/sequen"
000050  6f726574
000054  6563685c
000058  636f6d6d
00005c  6f6e5c69
000060  6e636c75
000064  64655c61
000068  6e6b692f
00006c  636f6d6d
000070  6f6e2f72
000074  6f626f74
000078  2f736571
00007c  75656e  
00007f  6365732e          DCB      "ces.h",0
000083  6800    
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L45.136|
000088  73697a65          DCB      "size estimation failed",0
00008c  20657374
000090  696d6174
000094  696f6e20
000098  6661696c
00009c  656400  
00009f  00                DCB      0
                  |L45.160|
0000a0  4c696e65          DCB      "LinearSequence<Type>::computeSize",0
0000a4  61725365
0000a8  7175656e
0000ac  63653c54
0000b0  7970653e
0000b4  3a3a636f
0000b8  6d707574
0000bc  6553697a
0000c0  6500    
0000c2  00                DCB      0
0000c3  00                DCB      0

                          AREA ||area_number.46||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIsEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<short>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L52.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L52.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L52.384|
000044  a25c              ADR      r2,|L52.440|
000046  a160              ADR      r1,|L52.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L52.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0040              LSLS     r0,r0,#1
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L52.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L52.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L52.384|
000080  a24d              ADR      r2,|L52.440|
000082  a157              ADR      r1,|L52.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L52.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L52.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L52.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L52.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L52.384|
0000c8  a251              ADR      r2,|L52.528|
0000ca  a156              ADR      r1,|L52.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L52.372|
                  |L52.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L52.384|
0000e0  a258              ADR      r2,|L52.580|
0000e2  a15f              ADR      r1,|L52.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L52.372|
                  |L52.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L52.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L52.384|
000110  a259              ADR      r2,|L52.632|
000112  a144              ADR      r1,|L52.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L52.372|
                  |L52.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0071              LSLS     r1,r6,#1
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L52.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L52.384|
00015a  a251              ADR      r2,|L52.672|
00015c  a140              ADR      r1,|L52.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L52.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L52.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L52.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L52.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L52.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L52.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIsE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L52.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L52.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIsE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L52.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L52.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L52.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L52.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L52.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L52.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.53||, COMGROUP=_ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L59.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L59.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.60||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L66.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L66.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.67||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L73.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L73.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.74||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.74||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b570              PUSH     {r4-r6,lr}
000002  f04f34ff          MOV      r4,#0xffffffff
000006  6004              STR      r4,[r0,#0]
000008  6044              STR      r4,[r0,#4]
00000a  4601              MOV      r1,r0
00000c  6084              STR      r4,[r0,#8]
00000e  f8404f0c          STR      r4,[r0,#0xc]!
000012  2500              MOVS     r5,#0
000014  6044              STR      r4,[r0,#4]
000016  6084              STR      r4,[r0,#8]
000018  f1010024          ADD      r0,r1,#0x24
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000020  f8404d0c          STR      r4,[r0,#-0xc]!
000024  2100              MOVS     r1,#0
000026  6044              STR      r4,[r0,#4]
000028  6105              STR      r5,[r0,#0x10]
00002a  6084              STR      r4,[r0,#8]
00002c  6145              STR      r5,[r0,#0x14]
00002e  f1a00418          SUB      r4,r0,#0x18
000032  6185              STR      r5,[r0,#0x18]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::set_size(int)
00003a  4620              MOV      r0,r4
00003c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.81||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_||, COMGROUP=_ZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_ PROC ; Anki::Embedded::Interp2_Affine<unsigned char, unsigned char>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Meshgrid<float>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Point<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
;;;141    
;;;142        template<typename InType, typename OutType> Result Interp2_Affine(const Array<InType> &reference, const Meshgrid<f32> &originalCoordinates, const Array<f32> &homography, const Point<f32> &centerOffset, Array<OutType> &out, const InterpolationType interpolationType, const OutType invalidValue)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;143        {
000004  4606              MOV      r6,r0
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  b085              SUB      sp,sp,#0x14
00000c  4693              MOV      r11,r2
00000e  460f              MOV      r7,r1
000010  e9dd8022          LDRD     r8,r0,[sp,#0x88]
;;;144          AnkiConditionalErrorAndReturnValue(interpolationType == INTERPOLATE_LINEAR,
000014  4dd9              LDR      r5,|L87.892|
000016  2800              CMP      r0,#0
000018  d010              BEQ      |L87.60|
00001a  2090              MOVS     r0,#0x90
00001c  e9cd5000          STRD     r5,r0,[sp,#0]
000020  a3d7              ADR      r3,|L87.896|
000022  a2e6              ADR      r2,|L87.956|
000024  a1ef              ADR      r1,|L87.996|
000026  2005              MOVS     r0,#5
000028  f7fffffe          BL       _Anki_Log
00002c  f04f7040          MOV      r0,#0x3000000
                  |L87.48|
;;;145            RESULT_FAIL_INVALID_PARAMETER, "Interp2_Affine", "Only INTERPOLATE_LINEAR is supported");
;;;146    
;;;147          AnkiConditionalErrorAndReturnValue(AreValid(reference, out),
;;;148            RESULT_FAIL_INVALID_OBJECT, "Interp2_Affine", "Invalid objects");
;;;149    
;;;150          AnkiConditionalErrorAndReturnValue(NotAliased(reference, out),
;;;151            RESULT_FAIL_ALIASED_MEMORY, "Interp2_Affine", "reference cannot be the same as out");
;;;152    
;;;153          const s32 referenceHeight = reference.get_size(0);
;;;154          const s32 referenceWidth = reference.get_size(1);
;;;155    
;;;156          const s32 outHeight = out.get_size(0);
;;;157          const s32 outWidth = out.get_size(1);
;;;158    
;;;159          const bool isOutputOneDimensional = (out.get_size(0) == 1);
;;;160    
;;;161          const f32 xyReferenceMin = 0.0f;
;;;162          const f32 xReferenceMax = static_cast<f32>(referenceWidth) - 1.0f;
;;;163          const f32 yReferenceMax = static_cast<f32>(referenceHeight) - 1.0f;
;;;164    
;;;165          const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2];
;;;166          const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2];
;;;167    
;;;168          const LinearSequence<f32> &yGridVector = originalCoordinates.get_yGridVector();
;;;169          const LinearSequence<f32> &xGridVector = originalCoordinates.get_xGridVector();
;;;170    
;;;171          const f32 yGridStart = yGridVector.get_start();
;;;172          const f32 xGridStart = xGridVector.get_start();
;;;173    
;;;174          const f32 yGridDelta = yGridVector.get_increment();
;;;175          const f32 xGridDelta = xGridVector.get_increment();
;;;176    
;;;177          const s32 yIterationMax = yGridVector.get_size();
;;;178          const s32 xIterationMax = xGridVector.get_size();
;;;179    
;;;180          const f32 yTransformedDelta = h10 * yGridDelta;
;;;181          const f32 xTransformedDelta = h00 * xGridDelta;
;;;182    
;;;183          // One last check, to see if the sizes match
;;;184          if(isOutputOneDimensional) {
;;;185            const s32 numOutputElements = outHeight * outWidth;
;;;186            const s32 numOriginalCoordinates = xGridVector.get_size() * yGridVector.get_size();
;;;187    
;;;188            AnkiConditionalErrorAndReturnValue(
;;;189              outWidth == numOutputElements &&
;;;190              numOriginalCoordinates == numOutputElements,
;;;191              RESULT_FAIL_INVALID_SIZE, "Interp2_Affine", "originalCoordinates is the wrong size");
;;;192          } else {
;;;193            AnkiConditionalErrorAndReturnValue(
;;;194              yGridVector.get_size() == outHeight &&
;;;195              xGridVector.get_size() == outWidth,
;;;196              RESULT_FAIL_INVALID_SIZE, "Interp2_Affine", "originalCoordinates is the wrong size");
;;;197          }
;;;198    
;;;199          OutType * restrict pOut = out.Pointer(0,0);
;;;200    
;;;201          if(isOutputOneDimensional) {
;;;202            // pOut is incremented at the top of the loop, so decrement it here
;;;203            pOut -= xIterationMax;
;;;204          }
;;;205    
;;;206          f32 yOriginal = yGridStart;
;;;207          for(s32 y=0; y<yIterationMax; y++) {
;;;208            if(isOutputOneDimensional) {
;;;209              // If the output is one dimensional, then we will do the next set of x iterations later on
;;;210              // the same output row
;;;211              pOut += xIterationMax;
;;;212            } else {
;;;213              pOut = out.Pointer(y,0);
;;;214            }
;;;215    
;;;216            const f32 xOriginal = xGridStart;
;;;217    
;;;218            // TODO: This could be strength-reduced further, but it wouldn't be much faster
;;;219            f32 xTransformed = h00*xOriginal + h01*yOriginal + h02 + centerOffset.x;
;;;220            f32 yTransformed = h10*xOriginal + h11*yOriginal + h12 + centerOffset.y;
;;;221    
;;;222            for(s32 x=0; x<xIterationMax; x++) {
;;;223              const f32 x0 = FLT_FLOOR(xTransformed);
;;;224              const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
;;;225    
;;;226              const f32 y0 = FLT_FLOOR(yTransformed);
;;;227              const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
;;;228    
;;;229              // If out of bounds, set as invalid and continue
;;;230              if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;231                // strength reduction for the affine transformation along this horizontal line
;;;232                xTransformed += xTransformedDelta;
;;;233                yTransformed += yTransformedDelta;
;;;234    
;;;235                pOut[x] = invalidValue;
;;;236                continue;
;;;237              }
;;;238    
;;;239              const f32 alphaX = xTransformed - x0;
;;;240              const f32 alphaXinverse = 1 - alphaX;
;;;241    
;;;242              const f32 alphaY = yTransformed - y0;
;;;243              const f32 alphaYinverse = 1.0f - alphaY;
;;;244    
;;;245              const s32 y0S32 = Round<s32>(y0);
;;;246              const s32 y1S32 = Round<s32>(y1);
;;;247              const s32 x0S32 = Round<s32>(x0);
;;;248    
;;;249              const InType * restrict pReference_y0 = reference.Pointer(y0S32, x0S32);
;;;250              const InType * restrict pReference_y1 = reference.Pointer(y1S32, x0S32);
;;;251    
;;;252              const f32 pixelTL = *pReference_y0;
;;;253              const f32 pixelTR = *(pReference_y0+1);
;;;254              const f32 pixelBL = *pReference_y1;
;;;255              const f32 pixelBR = *(pReference_y1+1);
;;;256    
;;;257              const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;258    
;;;259              const OutType interpolatedPixel = RoundIfInteger<OutType>(interpolatedPixelF32);
;;;260    
;;;261              pOut[x] = interpolatedPixel;
;;;262    
;;;263              // strength reduction for the affine transformation along this horizontal line
;;;264              xTransformed += xTransformedDelta;
;;;265              yTransformed += yTransformedDelta;
;;;266            } // for(s32 x=0; x<xIterationMax; x++)
;;;267    
;;;268            yOriginal += yGridDelta;
;;;269          } // for(s32 y=0; y<yIterationMax; y++)
;;;270    
;;;271          return RESULT_OK;
;;;272        } // Interp2_Affine
000030  b005              ADD      sp,sp,#0x14
000032  ecbd8b10          VPOP     {d8-d15}
000036  b004              ADD      sp,sp,#0x10
000038  e8bd8ff0          POP      {r4-r11,pc}
                  |L87.60|
00003c  6931              LDR      r1,[r6,#0x10]
00003e  b1a9              CBZ      r1,|L87.108|
000040  6830              LDR      r0,[r6,#0]
000042  2800              CMP      r0,#0
000044  bfa4              ITT      GE
000046  6870              LDRGE    r0,[r6,#4]
000048  2800              CMPGE    r0,#0
00004a  db0f              BLT      |L87.108|
00004c  f8d80010          LDR      r0,[r8,#0x10]
000050  b160              CBZ      r0,|L87.108|
000052  f8d82000          LDR      r2,[r8,#0]
000056  2a00              CMP      r2,#0
000058  bfa4              ITT      GE
00005a  f8d82004          LDRGE    r2,[r8,#4]
00005e  2a00              CMPGE    r2,#0
000060  db04              BLT      |L87.108|
000062  e9cd1000          STRD     r1,r0,[sp,#0]
000066  2100              MOVS     r1,#0
000068  466a              MOV      r2,sp
00006a  e00b              B        |L87.132|
                  |L87.108|
00006c  2093              MOVS     r0,#0x93              ;147
00006e  e9cd5000          STRD     r5,r0,[sp,#0]         ;147
000072  a3c3              ADR      r3,|L87.896|
000074  a2df              ADR      r2,|L87.1012|
000076  a1db              ADR      r1,|L87.996|
000078  2005              MOVS     r0,#5                 ;147
00007a  f7fffffe          BL       _Anki_Log
00007e  f04f6080          MOV      r0,#0x4000000         ;147
000082  e7d5              B        |L87.48|
                  |L87.132|
000084  1c48              ADDS     r0,r1,#1              ;147
000086  2802              CMP      r0,#2                 ;147
000088  bfb8              IT       LT                    ;147
00008a  f8523021          LDRLT    r3,[r2,r1,LSL #2]     ;147
00008e  da11              BGE      |L87.180|
                  |L87.144|
000090  f852c020          LDR      r12,[r2,r0,LSL #2]    ;147
000094  4563              CMP      r3,r12                ;147
000096  d10a              BNE      |L87.174|
000098  2096              MOVS     r0,#0x96              ;150
00009a  e9cd5000          STRD     r5,r0,[sp,#0]         ;150
00009e  a3b8              ADR      r3,|L87.896|
0000a0  a2d8              ADR      r2,|L87.1028|
0000a2  a1d0              ADR      r1,|L87.996|
0000a4  2005              MOVS     r0,#5                 ;150
0000a6  f7fffffe          BL       _Anki_Log
0000aa  48df              LDR      r0,|L87.1064|
0000ac  e7c0              B        |L87.48|
                  |L87.174|
0000ae  1c40              ADDS     r0,r0,#1              ;150
0000b0  2802              CMP      r0,#2                 ;150
0000b2  dbed              BLT      |L87.144|
                  |L87.180|
0000b4  1c49              ADDS     r1,r1,#1              ;150
0000b6  2902              CMP      r1,#2                 ;150
0000b8  dbe4              BLT      |L87.132|
0000ba  2100              MOVS     r1,#0                 ;153
0000bc  4630              MOV      r0,r6                 ;153
0000be  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000c2  ee080a10          VMOV     s16,r0                ;153
0000c6  2101              MOVS     r1,#1                 ;154
0000c8  4630              MOV      r0,r6                 ;154
0000ca  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000ce  ee080a90          VMOV     s17,r0                ;154
0000d2  2100              MOVS     r1,#0                 ;156
0000d4  4640              MOV      r0,r8                 ;156
0000d6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000da  4681              MOV      r9,r0                 ;156
0000dc  2101              MOVS     r1,#1                 ;157
0000de  4640              MOV      r0,r8                 ;157
0000e0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000e4  4604              MOV      r4,r0                 ;157
0000e6  2100              MOVS     r1,#0                 ;159
0000e8  4640              MOV      r0,r8                 ;159
0000ea  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000ee  2801              CMP      r0,#1                 ;159
0000f0  bf14              ITE      NE                    ;159
0000f2  f04f0a00          MOVNE    r10,#0                ;159
0000f6  f04f0a01          MOVEQ    r10,#1                ;159
0000fa  eeb80ae8          VCVT.F32.S32 s0,s17                ;162
0000fe  eeb7ea00          VMOV.F32 s28,#1.00000000       ;162
000102  f8db2008          LDR      r2,[r11,#8]           ;162
000106  f8db1010          LDR      r1,[r11,#0x10]        ;162
00010a  ee30da4e          VSUB.F32 s26,s0,s28            ;162
00010e  eeb80ac8          VCVT.F32.S32 s0,s16                ;163
000112  2000              MOVS     r0,#0                 ;165
000114  fb001002          MLA      r0,r0,r2,r1           ;165
000118  ee70ca4e          VSUB.F32 s25,s0,s28            ;163
00011c  ed900a01          VLDR     s0,[r0,#4]            ;165
000120  ed901a00          VLDR     s2,[r0,#0]            ;165
000124  ed8d0a03          VSTR     s0,[sp,#0xc]          ;165
000128  ed900a02          VLDR     s0,[r0,#8]            ;165
00012c  2001              MOVS     r0,#1                 ;166
00012e  fb001002          MLA      r0,r0,r2,r1           ;166
000132  ed8d0a02          VSTR     s0,[sp,#8]            ;165
000136  ed900a01          VLDR     s0,[r0,#4]            ;166
00013a  edd00a00          VLDR     s1,[r0,#0]            ;166
00013e  ed8d0a01          VSTR     s0,[sp,#4]            ;166
000142  ed900a02          VLDR     s0,[r0,#8]            ;166
000146  f1ba0f00          CMP      r10,#0                ;184
00014a  ed8d0a00          VSTR     s0,[sp,#0]            ;166
00014e  edd7da05          VLDR     s27,[r7,#0x14]        ;166
000152  edd71a02          VLDR     s3,[r7,#8]            ;166
000156  edd7aa04          VLDR     s21,[r7,#0x10]        ;166
00015a  ed970a01          VLDR     s0,[r7,#4]            ;166
00015e  f8d7b00c          LDR      r11,[r7,#0xc]         ;166
000162  ee60baad          VMUL.F32 s23,s1,s27            ;180
000166  ee21ba21          VMUL.F32 s22,s2,s3             ;181
00016a  683f              LDR      r7,[r7,#0]            ;181
00016c  d013              BEQ      |L87.406|
00016e  fb09f104          MUL      r1,r9,r4              ;185
000172  fb07f00b          MUL      r0,r7,r11             ;186
000176  428c              CMP      r4,r1                 ;188
000178  bf08              IT       EQ                    ;188
00017a  4288              CMPEQ    r0,r1                 ;188
00017c  d01b              BEQ      |L87.438|
00017e  20bc              MOVS     r0,#0xbc              ;188
000180  e9cd5000          STRD     r5,r0,[sp,#0]         ;188
000184  a37e              ADR      r3,|L87.896|
000186  a2a9              ADR      r2,|L87.1068|
000188  a196              ADR      r1,|L87.996|
00018a  2005              MOVS     r0,#5                 ;188
00018c  f7fffffe          BL       _Anki_Log
000190  f04f60a0          MOV      r0,#0x5000000         ;188
000194  e74c              B        |L87.48|
                  |L87.406|
000196  45cb              CMP      r11,r9                ;193
000198  bf08              IT       EQ                    ;193
00019a  42a7              CMPEQ    r7,r4                 ;193
00019c  d00b              BEQ      |L87.438|
00019e  20c1              MOVS     r0,#0xc1              ;193
0001a0  e9cd5000          STRD     r5,r0,[sp,#0]         ;193
0001a4  a376              ADR      r3,|L87.896|
0001a6  a2a1              ADR      r2,|L87.1068|
0001a8  a18e              ADR      r1,|L87.996|
0001aa  2005              MOVS     r0,#5                 ;193
0001ac  f7fffffe          BL       _Anki_Log
0001b0  f04f60a0          MOV      r0,#0x5000000         ;193
0001b4  e73c              B        |L87.48|
                  |L87.438|
0001b6  2000              MOVS     r0,#0                 ;199
0001b8  f8d82008          LDR      r2,[r8,#8]            ;199
0001bc  f8d81010          LDR      r1,[r8,#0x10]         ;199
0001c0  f1ba0f00          CMP      r10,#0                ;201
0001c4  fb001502          MLA      r5,r0,r2,r1           ;201
0001c8  bf18              IT       NE                    ;203
0001ca  1bed              SUBNE    r5,r5,r7              ;203
0001cc  f04f0900          MOV      r9,#0                 ;207
0001d0  f1bb0f00          CMP      r11,#0                ;207
0001d4  dd7d              BLE      |L87.722|
0001d6  ee61fa00          VMUL.F32 s31,s2,s0             ;219
0001da  ee20fa80          VMUL.F32 s30,s1,s0             ;220
0001de  eddfea9d          VLDR     s29,|L87.1108|
0001e2  eeb6aa00          VMOV.F32 s20,#0.50000000       ;223
                  |L87.486|
0001e6  f1ba0f00          CMP      r10,#0                ;208
0001ea  bf18              IT       NE                    ;211
0001ec  443d              ADDNE    r5,r7                 ;211
0001ee  d105              BNE      |L87.508|
0001f0  f8d81008          LDR      r1,[r8,#8]            ;208
0001f4  f8d80010          LDR      r0,[r8,#0x10]         ;208
0001f8  fb090501          MLA      r5,r9,r1,r0           ;208
                  |L87.508|
0001fc  ed9d0a03          VLDR     s0,[sp,#0xc]          ;219
000200  eef00a6f          VMOV.F32 s1,s31                ;219
000204  9818              LDR      r0,[sp,#0x60]         ;219
000206  ee400a2a          VMLA.F32 s1,s0,s21             ;219
00020a  ed9d0a02          VLDR     s0,[sp,#8]            ;219
00020e  2400              MOVS     r4,#0                 ;222
000210  2f00              CMP      r7,#0                 ;222
000212  ee300a80          VADD.F32 s0,s1,s0              ;219
000216  edd00a00          VLDR     s1,[r0,#0]            ;219
00021a  ee708a20          VADD.F32 s17,s0,s1             ;219
00021e  ed9d0a01          VLDR     s0,[sp,#4]            ;220
000222  eef00a4f          VMOV.F32 s1,s30                ;220
000226  ee400a2a          VMLA.F32 s1,s0,s21             ;220
00022a  ed9d0a00          VLDR     s0,[sp,#0]            ;220
00022e  ee300a80          VADD.F32 s0,s1,s0              ;220
000232  edd00a01          VLDR     s1,[r0,#4]            ;220
000236  ee308a20          VADD.F32 s16,s0,s1             ;220
00023a  dd7c              BLE      |L87.822|
                  |L87.572|
00023c  ee380aae          VADD.F32 s0,s17,s29            ;223
000240  f7fffffe          BL       __hardfp_floorf
000244  eef09a40          VMOV.F32 s19,s0                ;223
000248  eeb00a68          VMOV.F32 s0,s17                ;224
00024c  f7fffffe          BL       __hardfp_ceilf
000250  eeb0ca40          VMOV.F32 s24,s0                ;224
000254  ee380a2e          VADD.F32 s0,s16,s29            ;226
000258  f7fffffe          BL       __hardfp_floorf
00025c  eeb09a40          VMOV.F32 s18,s0                ;226
000260  eeb00a48          VMOV.F32 s0,s16                ;227
000264  f7fffffe          BL       __hardfp_ceilf
000268  eef59ac0          VCMPE.F32 s19,#0.0              ;230
00026c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;230
000270  d30e              BCC      |L87.656|
000272  eeb4cacd          VCMPE.F32 s24,s26               ;230
000276  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;230
00027a  dc09              BGT      |L87.656|
00027c  eeb59ac0          VCMPE.F32 s18,#0.0              ;230
000280  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;230
000284  d304              BCC      |L87.656|
000286  eeb40aec          VCMPE.F32 s0,s25                ;230
00028a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;230
00028e  dd06              BLE      |L87.670|
                  |L87.656|
000290  9824              LDR      r0,[sp,#0x90]         ;235
000292  ee788a8b          VADD.F32 s17,s17,s22           ;232
000296  ee388a2b          VADD.F32 s16,s16,s23           ;233
00029a  5528              STRB     r0,[r5,r4]            ;235
00029c  e061              B        |L87.866|
                  |L87.670|
00029e  ee780ae9          VSUB.F32 s1,s17,s19            ;239
0002a2  ee381a49          VSUB.F32 s2,s16,s18            ;242
0002a6  eeb59ac0          VCMPE.F32 s18,#0.0              ;242
0002aa  ee7e1a60          VSUB.F32 s3,s28,s1             ;240
0002ae  ee7e2a41          VSUB.F32 s5,s28,s2             ;243
0002b2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;243
0002b6  bfcc              ITE      GT                    ;243
0002b8  ee392a0a          VADDGT.F32 s4,s18,s20            ;243
0002bc  ee392a4a          VSUBLE.F32 s4,s18,s20            ;243
0002c0  eebd2ac2          VCVT.S32.F32 s4,s4                 ;243
0002c4  eeb50ac0          VCMPE.F32 s0,#0.0               ;243
0002c8  ee123a10          VMOV     r3,s4                 ;243
0002cc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;243
0002d0  e000              B        |L87.724|
                  |L87.722|
0002d2  e051              B        |L87.888|
                  |L87.724|
0002d4  bfcc              ITE      GT                    ;243
0002d6  ee300a0a          VADDGT.F32 s0,s0,s20             ;243
0002da  ee300a4a          VSUBLE.F32 s0,s0,s20             ;243
0002de  eebd0ac0          VCVT.S32.F32 s0,s0                 ;243
0002e2  eef59ac0          VCMPE.F32 s19,#0.0              ;243
0002e6  ee10ca10          VMOV     r12,s0                ;243
0002ea  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;243
0002ee  bfcc              ITE      GT                    ;243
0002f0  ee390a8a          VADDGT.F32 s0,s19,s20            ;243
0002f4  ee390aca          VSUBLE.F32 s0,s19,s20            ;243
0002f8  eebd0ac0          VCVT.S32.F32 s0,s0                 ;243
0002fc  6932              LDR      r2,[r6,#0x10]         ;243
0002fe  68b0              LDR      r0,[r6,#8]            ;243
000300  ee101a10          VMOV     r1,s0                 ;243
000304  fb032300          MLA      r3,r3,r0,r2           ;243
000308  fb0c2000          MLA      r0,r12,r0,r2          ;243
00030c  440b              ADD      r3,r3,r1              ;243
00030e  4408              ADD      r0,r0,r1              ;243
000310  7819              LDRB     r1,[r3,#0]            ;252
000312  ee001a10          VMOV     s0,r1                 ;252
000316  7859              LDRB     r1,[r3,#1]            ;253
000318  eeb83a40          VCVT.F32.U32 s6,s0                 ;252
00031c  ee001a10          VMOV     s0,r1                 ;253
000320  7801              LDRB     r1,[r0,#0]            ;254
000322  7840              LDRB     r0,[r0,#1]            ;255
000324  eeb82a40          VCVT.F32.U32 s4,s0                 ;253
000328  ee001a10          VMOV     s0,r1                 ;254
00032c  ee030a90          VMOV     s7,r0                 ;255
000330  eeb80a40          VCVT.F32.U32 s0,s0                 ;254
000334  e000              B        |L87.824|
                  |L87.822|
000336  e018              B        |L87.874|
                  |L87.824|
000338  ee213a83          VMUL.F32 s6,s3,s6              ;255
00033c  eef83a63          VCVT.F32.U32 s7,s7                 ;255
000340  ee611a80          VMUL.F32 s3,s3,s0              ;255
000344  ee003a82          VMLA.F32 s6,s1,s4              ;255
000348  ee401aa3          VMLA.F32 s3,s1,s7              ;255
00034c  ee220a83          VMUL.F32 s0,s5,s6              ;255
000350  ee010a21          VMLA.F32 s0,s2,s3              ;255
000354  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
000358  ee788a8b          VADD.F32 s17,s17,s22           ;264
00035c  ee388a2b          VADD.F32 s16,s16,s23           ;265
000360  5528              STRB     r0,[r5,r4]            ;261
                  |L87.866|
000362  1c64              ADDS     r4,r4,#1              ;222
000364  42bc              CMP      r4,r7                 ;222
000366  f6ffaf69          BLT      |L87.572|
                  |L87.874|
00036a  ee7aaaad          VADD.F32 s21,s21,s27           ;268
00036e  f1090901          ADD      r9,r9,#1              ;207
000372  45d9              CMP      r9,r11                ;207
000374  f6ffaf37          BLT      |L87.486|
                  |L87.888|
000378  2000              MOVS     r0,#0                 ;271
00037a  e659              B        |L87.48|
;;;273    
                          ENDP

                  |L87.892|
                          DCD      _ZZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2_Affine<unsigned char, unsigned char>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Meshgrid<float>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Point<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
                  |L87.896|
000380  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/interp"
000384  6f726574
000388  6563685c
00038c  636f6d6d
000390  6f6e5c69
000394  6e636c75
000398  64655c61
00039c  6e6b692f
0003a0  636f6d6d
0003a4  6f6e2f72
0003a8  6f626f74
0003ac  2f696e74
0003b0  657270  
0003b3  6f6c6174          DCB      "olate.h",0
0003b7  652e6800
0003bb  00                DCB      0
                  |L87.956|
0003bc  4f6e6c79          DCB      "Only INTERPOLATE_LINEAR is supported",0
0003c0  20494e54
0003c4  4552504f
0003c8  4c415445
0003cc  5f4c494e
0003d0  45415220
0003d4  69732073
0003d8  7570706f
0003dc  72746564
0003e0  00      
0003e1  00                DCB      0
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L87.996|
0003e4  496e7465          DCB      "Interp2_Affine",0
0003e8  7270325f
0003ec  41666669
0003f0  6e6500  
0003f3  00                DCB      0
                  |L87.1012|
0003f4  496e7661          DCB      "Invalid objects",0
0003f8  6c696420
0003fc  6f626a65
000400  63747300
                  |L87.1028|
000404  72656665          DCB      "reference cannot be the same as out",0
000408  72656e63
00040c  65206361
000410  6e6e6f74
000414  20626520
000418  74686520
00041c  73616d65
000420  20617320
000424  6f757400
                  |L87.1064|
                          DCD      0x01000003
                  |L87.1068|
00042c  6f726967          DCB      "originalCoordinates is the wrong size",0
000430  696e616c
000434  436f6f72
000438  64696e61
00043c  74657320
000440  69732074
000444  68652077
000448  726f6e67
00044c  2073697a
000450  6500    
000452  00                DCB      0
000453  00                DCB      0
                  |L87.1108|
000454  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||area_number.88||, COMGROUP=_ZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_, LINKORDER=||t._ZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.88||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i PROC ; Anki::Embedded::Linspace<float>(T1, T1, int)
;;;162    
;;;163        template<typename Type> LinearSequence<Type> Linspace(const Type start, const Type end, const s32 size)
000000  b086              SUB      sp,sp,#0x18
000002  f04f32ff          MOV      r2,#0xffffffff
000006  eebf1a00          VMOV.F32 s2,#-1.00000000
00000a  9200              STR      r2,[sp,#0]
00000c  ed8d1a01          VSTR     s2,[sp,#4]
000010  ed8d1a02          VSTR     s2,[sp,#8]
;;;164        {
;;;165          Type increment;
;;;166    
;;;167          LinearSequence<Type> sequence;
;;;168    
;;;169          if(ABS(end-start) <= Flags::numeric_limits<Type>::epsilon()) {
000014  ee301ac0          VSUB.F32 s2,s1,s0
000018  ed9f2a2e          VLDR     s4,|L94.212|
00001c  eeb51ac0          VCMPE.F32 s2,#0.0
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR
000024  bfac              ITE      GE
000026  eef01a41          VMOVGE.F32 s3,s2
00002a  ee701a60          VSUBLT.F32 s3,s0,s1
00002e  eef41ac2          VCMPE.F32 s3,s4
000032  eef1fa10          VMRS     APSR_nzcv,FPSCR
000036  d810              BHI      |L94.90|
000038  9103              STR      r1,[sp,#0xc]          ;164
;;;170            sequence = LinearSequence<Type>(start, 0, end, size);
00003a  eddf0a27          VLDR     s1,|L94.216|
00003e  ed8d0a04          VSTR     s0,[sp,#0x10]
000042  edcd0a05          VSTR     s1,[sp,#0x14]
000046  9100              STR      r1,[sp,#0]
000048  ed8d0a01          VSTR     s0,[sp,#4]
00004c  ee102a10          VMOV     r2,s0
000050  ee103a90          VMOV     r3,s1
000054  edcd0a02          VSTR     s1,[sp,#8]
;;;171          } else {
000058  e028              B        |L94.172|
                  |L94.90|
;;;172            if(size <= 0) {
;;;173              // Empty sequence
;;;174              sequence = LinearSequence<Type>(start, 1, end, 0);
00005a  eef71a00          VMOV.F32 s3,#1.00000000
00005e  2900              CMP      r1,#0                 ;172
000060  dc0d              BGT      |L94.126|
000062  2100              MOVS     r1,#0
000064  9103              STR      r1,[sp,#0xc]
000066  ed8d0a04          VSTR     s0,[sp,#0x10]
00006a  edcd1a05          VSTR     s3,[sp,#0x14]
00006e  9100              STR      r1,[sp,#0]
000070  ee102a10          VMOV     r2,s0
000074  ee113a90          VMOV     r3,s3
000078  ed8d0a01          VSTR     s0,[sp,#4]
;;;175            } else if(size == 1) {
00007c  e027              B        |L94.206|
                  |L94.126|
00007e  2901              CMP      r1,#1
000080  d019              BEQ      |L94.182|
;;;176              // If size == 1, match output with Matlab
;;;177              sequence = LinearSequence<Type>(end, 1, end, size);
;;;178            } else {
;;;179              increment = (end-start) / (size-1);
000082  1e4a              SUBS     r2,r1,#1
000084  ee002a90          VMOV     s1,r2
000088  9103              STR      r1,[sp,#0xc]
00008a  ed8d0a04          VSTR     s0,[sp,#0x10]
00008e  eef81ae0          VCVT.F32.S32 s3,s1
;;;180              sequence = LinearSequence<Type>(start, increment, end, size);
000092  ee102a10          VMOV     r2,s0
000096  eec10a21          VDIV.F32 s1,s2,s3              ;179
00009a  edcd0a05          VSTR     s1,[sp,#0x14]         ;179
00009e  ee103a90          VMOV     r3,s1
0000a2  9100              STR      r1,[sp,#0]
0000a4  ed8d0a01          VSTR     s0,[sp,#4]
0000a8  edcd0a02          VSTR     s1,[sp,#8]
                  |L94.172|
;;;181            }
;;;182          }
;;;183    
;;;184          return sequence;
0000ac  6083              STR      r3,[r0,#8]
0000ae  e9c01200          STRD     r1,r2,[r0,#0]
;;;185        }
0000b2  b006              ADD      sp,sp,#0x18
0000b4  4770              BX       lr
                  |L94.182|
0000b6  9103              STR      r1,[sp,#0xc]
0000b8  edcd0a04          VSTR     s1,[sp,#0x10]
0000bc  edcd1a05          VSTR     s3,[sp,#0x14]
0000c0  ee102a90          VMOV     r2,s1                 ;177
0000c4  ee113a90          VMOV     r3,s3                 ;177
0000c8  9100              STR      r1,[sp,#0]            ;177
0000ca  edcd0a01          VSTR     s1,[sp,#4]            ;177
                  |L94.206|
0000ce  edcd1a02          VSTR     s3,[sp,#8]            ;177
0000d2  e7eb              B        |L94.172|
;;;186    
                          ENDP

                  |L94.212|
0000d4  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L94.216|
0000d8  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.95||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, LINKORDER=||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.95||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Array<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L101.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L101.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L101.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L101.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L101.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L101.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L101.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L101.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L101.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L101.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::set_size(int)
0000b2  e009              B        |L101.200|
                  |L101.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L101.118|
                  |L101.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L101.140|
                  |L101.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L101.162|
                  |L101.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::set_size(int)
                  |L101.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.102||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.102||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L108.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L108.56|
00000e  4b0b              LDR      r3,|L108.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L108.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L108.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L108.60|
                          DCD      ||.constdata||+0x174

                          AREA ||area_number.109||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.109||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L115.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L115.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L115.384|
000044  a25c              ADR      r2,|L115.440|
000046  a160              ADR      r1,|L115.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L115.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0140              LSLS     r0,r0,#5
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L115.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L115.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L115.384|
000080  a24d              ADR      r2,|L115.440|
000082  a157              ADR      r1,|L115.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L115.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L115.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L115.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L115.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L115.384|
0000c8  a251              ADR      r2,|L115.528|
0000ca  a156              ADR      r1,|L115.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L115.372|
                  |L115.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L115.384|
0000e0  a258              ADR      r2,|L115.580|
0000e2  a15f              ADR      r1,|L115.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L115.372|
                  |L115.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L115.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L115.384|
000110  a259              ADR      r2,|L115.632|
000112  a144              ADR      r1,|L115.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L115.372|
                  |L115.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0171              LSLS     r1,r6,#5
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L115.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L115.384|
00015a  a251              ADR      r2,|L115.672|
00015c  a140              ADR      r1,|L115.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L115.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L115.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L115.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L115.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L115.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L115.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L115.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L115.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L115.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L115.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L115.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L115.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L115.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L115.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.116||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.116||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L122.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L122.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.123||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.123||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS1_IhEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L129.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L129.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L129.392|
000044  a25e              ADR      r2,|L129.448|
000046  a162              ADR      r1,|L129.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L129.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  0080              LSLS     r0,r0,#2
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L129.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L129.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L129.392|
000084  a24e              ADR      r2,|L129.448|
000086  a158              ADR      r1,|L129.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L129.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L129.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L129.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L129.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L129.392|
0000cc  a252              ADR      r2,|L129.536|
0000ce  a157              ADR      r1,|L129.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L129.380|
                  |L129.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L129.392|
0000e4  a259              ADR      r2,|L129.588|
0000e6  a160              ADR      r1,|L129.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L129.380|
                  |L129.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L129.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L129.392|
000114  a25a              ADR      r2,|L129.640|
000116  a145              ADR      r1,|L129.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L129.380|
                  |L129.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060186          ADD      r1,r6,r6,LSL #2
00013e  0089              LSLS     r1,r1,#2
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L129.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L129.392|
000162  a251              ADR      r2,|L129.680|
000164  a140              ADR      r1,|L129.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L129.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L129.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L129.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L129.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L129.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L129.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L129.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L129.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L129.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L129.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L129.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L129.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L129.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L129.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.130||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.130||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b570              PUSH     {r4-r6,lr}
000002  f04f34ff          MOV      r4,#0xffffffff
000006  6004              STR      r4,[r0,#0]
000008  6044              STR      r4,[r0,#4]
00000a  4601              MOV      r1,r0
00000c  6084              STR      r4,[r0,#8]
00000e  f8404f0c          STR      r4,[r0,#0xc]!
000012  2500              MOVS     r5,#0
000014  6044              STR      r4,[r0,#4]
000016  6084              STR      r4,[r0,#8]
000018  f1010024          ADD      r0,r1,#0x24
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000020  f8404d0c          STR      r4,[r0,#-0xc]!
000024  2100              MOVS     r1,#0
000026  6044              STR      r4,[r0,#4]
000028  6105              STR      r5,[r0,#0x10]
00002a  6084              STR      r4,[r0,#8]
00002c  6145              STR      r5,[r0,#0x14]
00002e  f1a00418          SUB      r4,r0,#0x18
000032  6185              STR      r5,[r0,#0x18]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
00003a  4620              MOV      r0,r4
00003c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.137||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.137||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L143.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L143.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L143.392|
000044  a25e              ADR      r2,|L143.448|
000046  a162              ADR      r1,|L143.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L143.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000040          ADD      r0,r0,r0,LSL #1
000066  00c0              LSLS     r0,r0,#3
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L143.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L143.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L143.392|
000084  a24e              ADR      r2,|L143.448|
000086  a158              ADR      r1,|L143.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L143.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L143.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L143.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L143.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L143.392|
0000cc  a252              ADR      r2,|L143.536|
0000ce  a157              ADR      r1,|L143.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L143.380|
                  |L143.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L143.392|
0000e4  a259              ADR      r2,|L143.588|
0000e6  a160              ADR      r1,|L143.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L143.380|
                  |L143.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L143.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L143.392|
000114  a25a              ADR      r2,|L143.640|
000116  a145              ADR      r1,|L143.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L143.380|
                  |L143.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060146          ADD      r1,r6,r6,LSL #1
00013e  00c9              LSLS     r1,r1,#3
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L143.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L143.392|
000162  a251              ADR      r2,|L143.680|
000164  a140              ADR      r1,|L143.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L143.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L143.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L143.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L143.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L143.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L143.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L143.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L143.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L143.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L143.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L143.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L143.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L143.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L143.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.144||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.144||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b570              PUSH     {r4-r6,lr}
000002  f04f34ff          MOV      r4,#0xffffffff
000006  6004              STR      r4,[r0,#0]
000008  6044              STR      r4,[r0,#4]
00000a  4601              MOV      r1,r0
00000c  6084              STR      r4,[r0,#8]
00000e  f8404f0c          STR      r4,[r0,#0xc]!
000012  2500              MOVS     r5,#0
000014  6044              STR      r4,[r0,#4]
000016  6084              STR      r4,[r0,#8]
000018  f1010024          ADD      r0,r1,#0x24
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000020  f8404d0c          STR      r4,[r0,#-0xc]!
000024  2100              MOVS     r1,#0
000026  6044              STR      r4,[r0,#4]
000028  6105              STR      r5,[r0,#0x10]
00002a  6084              STR      r4,[r0,#8]
00002c  6145              STR      r5,[r0,#0x14]
00002e  f1a00418          SUB      r4,r0,#0x18
000032  6185              STR      r5,[r0,#0x18]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
00003a  4620              MOV      r0,r4
00003c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.151||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.151||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_||, COMGROUP=_ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_ PROC ; Anki::Embedded::AreEqualSize<Anki::Embedded::Array<unsigned char>, Anki::Embedded::Array<short>>(const T1&, const T2&)
;;;144    
;;;145        template<typename Type1, typename Type2> bool AreEqualSize(const Type1 &object1, const Type2 &object2)
000000  b570              PUSH     {r4-r6,lr}
;;;146        {
000002  4605              MOV      r5,r0
000004  6900              LDR      r0,[r0,#0x10]
000006  460c              MOV      r4,r1
000008  b1e8              CBZ      r0,|L157.70|
00000a  6828              LDR      r0,[r5,#0]
00000c  2800              CMP      r0,#0
00000e  bfa4              ITT      GE
000010  6868              LDRGE    r0,[r5,#4]
000012  2800              CMPGE    r0,#0
000014  db17              BLT      |L157.70|
000016  6920              LDR      r0,[r4,#0x10]
000018  b1a8              CBZ      r0,|L157.70|
00001a  6820              LDR      r0,[r4,#0]
00001c  2800              CMP      r0,#0
00001e  bfa4              ITT      GE
000020  6860              LDRGE    r0,[r4,#4]
000022  2800              CMPGE    r0,#0
000024  db0f              BLT      |L157.70|
;;;147          if(!AreValid(object1, object2))
;;;148            return false;
;;;149    
;;;150          if(object1.get_size(0) != object2.get_size(0) || object1.get_size(1) != object2.get_size(1))
000026  2100              MOVS     r1,#0
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00002e  6821              LDR      r1,[r4,#0]
000030  4288              CMP      r0,r1
000032  d108              BNE      |L157.70|
000034  2101              MOVS     r1,#1
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00003c  6861              LDR      r1,[r4,#4]
00003e  4288              CMP      r0,r1
;;;151            return false;
;;;152    
;;;153          return true;
000040  bf04              ITT      EQ
000042  2001              MOVEQ    r0,#1
;;;154        }
000044  bd70              POPEQ    {r4-r6,pc}
                  |L157.70|
000046  2000              MOVS     r0,#0                 ;151
000048  bd70              POP      {r4-r6,pc}
;;;155    
                          ENDP


                          AREA ||area_number.158||, COMGROUP=_ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_, LINKORDER=||t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.158||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded5RoundIiEET_f||, COMGROUP=_ZN4Anki8Embedded5RoundIiEET_f, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5RoundIiEET_f PROC ; Anki::Embedded::Round<int>(float)
;;;222        template<> inline u64 Round<u64> (const f32 v) { return (v > 0) ? static_cast<u64>(v + 0.5f) : 0; }
;;;223        template<> inline s32 Round<s32> (const f32 v) { return (v > 0) ? static_cast<s32>(v + 0.5f) : static_cast<s32>(v - 0.5f); }
000000  eeb50ac0          VCMPE.F32 s0,#0.0
000004  eef60a00          VMOV.F32 s1,#0.50000000
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  dd06              BLE      |L164.28|
00000e  ee300a20          VADD.F32 s0,s0,s1
000012  eebd0ac0          VCVT.S32.F32 s0,s0
000016  ee100a10          VMOV     r0,s0
00001a  4770              BX       lr
                  |L164.28|
00001c  ee300a60          VSUB.F32 s0,s0,s1
000020  eebd0ac0          VCVT.S32.F32 s0,s0
000024  ee100a10          VMOV     r0,s0
000028  4770              BX       lr
;;;224        template<> inline s64 Round<s64> (const f32 v) { return (v > 0) ? static_cast<s64>(v + 0.5f) : static_cast<s64>(v - 0.5f); }
                          ENDP


                          AREA ||area_number.165||, COMGROUP=_ZN4Anki8Embedded5RoundIiEET_f, LINKORDER=||i._ZN4Anki8Embedded5RoundIiEET_f||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.165||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded5RoundIiEET_f||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<short>>::IsValid() const
;;;91     
;;;92         template<typename Type> bool FixedLengthList<Type>::IsValid() const
000000  68c2              LDR      r2,[r0,#0xc]
;;;93         {
;;;94           if(this->get_size() > this->get_maximumSize()) {
000002  69c1              LDR      r1,[r0,#0x1c]
000004  428a              CMP      r2,r1
000006  dc07              BGT      |L171.24|
000008  6a82              LDR      r2,[r0,#0x28]         ;93
00000a  b12a              CBZ      r2,|L171.24|
00000c  6980              LDR      r0,[r0,#0x18]         ;93
00000e  2800              CMP      r0,#0                 ;93
000010  bfa2              ITTT     GE                    ;93
000012  2900              CMPGE    r1,#0                 ;93
000014  2001              MOVGE    r0,#1                 ;93
;;;95             return false;
;;;96           }
;;;97     
;;;98           return ArraySlice<Type>::IsValid();
;;;99         } // bool FixedLengthList<Type>::IsValid() const
000016  4770              BXGE     lr
                  |L171.24|
000018  2000              MOVS     r0,#0
00001a  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||area_number.172||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.172||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIsEEE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS1_IsEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Array<short>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Array<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L178.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L178.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L178.392|
000044  a25e              ADR      r2,|L178.448|
000046  a162              ADR      r1,|L178.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L178.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  0080              LSLS     r0,r0,#2
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L178.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L178.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L178.392|
000084  a24e              ADR      r2,|L178.448|
000086  a158              ADR      r1,|L178.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L178.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L178.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L178.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L178.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L178.392|
0000cc  a252              ADR      r2,|L178.536|
0000ce  a157              ADR      r1,|L178.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L178.380|
                  |L178.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L178.392|
0000e4  a259              ADR      r2,|L178.588|
0000e6  a160              ADR      r1,|L178.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L178.380|
                  |L178.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L178.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L178.392|
000114  a25a              ADR      r2,|L178.640|
000116  a145              ADR      r1,|L178.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L178.380|
                  |L178.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060186          ADD      r1,r6,r6,LSL #2
00013e  0089              LSLS     r1,r1,#2
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L178.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L178.392|
000162  a251              ADR      r2,|L178.680|
000164  a140              ADR      r1,|L178.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L178.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L178.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L178.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L178.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L178.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L178.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L178.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L178.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L178.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L178.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L178.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L178.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L178.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L178.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.179||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.179||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642063          DCB      0x65,0x64,0x20,0x63
000090  6861725d          DCB      0x68,0x61,0x72,0x5d
000094  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  20636861          DCB      0x20,0x63,0x68,0x61
0000c4  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  63686172          DCB      0x63,0x68,0x61,0x72
0000a0  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d207369          DCB      0x3d,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  2073686f          DCB      0x20,0x73,0x68,0x6f
000090  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIsE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIsE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIsE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000bc  65642073          DCB      0x65,0x64,0x20,0x73
0000c0  686f7274          DCB      0x68,0x6f,0x72,0x74
0000c4  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIsE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIsE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIsE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2073          DCB      0x20,0x3d,0x20,0x73
000094  69676e65          DCB      0x69,0x67,0x6e,0x65
000098  64207368          DCB      0x64,0x20,0x73,0x68
00009c  6f72745d          DCB      0x6f,0x72,0x74,0x5d
0000a0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5175          DCB      0x3a,0x3a,0x51,0x75
000098  61647269          DCB      0x61,0x64,0x72,0x69
00009c  6c617465          DCB      0x6c,0x61,0x74,0x65
0000a0  72616c3c          DCB      0x72,0x61,0x6c,0x3c
0000a4  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a8  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  51756164          DCB      0x51,0x75,0x61,0x64
0000cc  72696c61          DCB      0x72,0x69,0x6c,0x61
0000d0  74657261          DCB      0x74,0x65,0x72,0x61
0000d4  6c3c666c          DCB      0x6c,0x3c,0x66,0x6c
0000d8  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0000dc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a51          DCB      0x64,0x3a,0x3a,0x51
0000a4  75616472          DCB      0x75,0x61,0x64,0x72
0000a8  696c6174          DCB      0x69,0x6c,0x61,0x74
0000ac  6572616c          DCB      0x65,0x72,0x61,0x6c
0000b0  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000b4  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000b8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000098  7261793c          DCB      0x72,0x61,0x79,0x3c
00009c  756e7369          DCB      0x75,0x6e,0x73,0x69
0000a0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a4  20636861          DCB      0x20,0x63,0x68,0x61
0000a8  723e5d00          DCB      0x72,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  41727261          DCB      0x41,0x72,0x72,0x61
0000cc  793c756e          DCB      0x79,0x3c,0x75,0x6e
0000d0  7369676e          DCB      0x73,0x69,0x67,0x6e
0000d4  65642063          DCB      0x65,0x64,0x20,0x63
0000d8  6861723e          DCB      0x68,0x61,0x72,0x3e
0000dc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000a4  72726179          DCB      0x72,0x72,0x61,0x79
0000a8  3c756e73          DCB      0x3c,0x75,0x6e,0x73
0000ac  69676e65          DCB      0x69,0x67,0x6e,0x65
0000b0  64206368          DCB      0x64,0x20,0x63,0x68
0000b4  61723e5d          DCB      0x61,0x72,0x3e,0x5d
0000b8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
000098  73686772          DCB      0x73,0x68,0x67,0x72
00009c  69643c66          DCB      0x69,0x64,0x3c,0x66
0000a0  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000a4  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  4d657368          DCB      0x4d,0x65,0x73,0x68
0000cc  67726964          DCB      0x67,0x72,0x69,0x64
0000d0  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000d4  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000d8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
0000a4  65736867          DCB      0x65,0x73,0x68,0x67
0000a8  7269643c          DCB      0x72,0x69,0x64,0x3c
0000ac  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000b0  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IsEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<short>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000098  7261793c          DCB      0x72,0x61,0x79,0x3c
00009c  7369676e          DCB      0x73,0x69,0x67,0x6e
0000a0  65642073          DCB      0x65,0x64,0x20,0x73
0000a4  686f7274          DCB      0x68,0x6f,0x72,0x74
0000a8  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IsEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<short>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  41727261          DCB      0x41,0x72,0x72,0x61
0000cc  793c7369          DCB      0x79,0x3c,0x73,0x69
0000d0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000d4  2073686f          DCB      0x20,0x73,0x68,0x6f
0000d8  72743e5d          DCB      0x72,0x74,0x3e,0x5d
0000dc  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IsEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<short>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000a4  72726179          DCB      0x72,0x72,0x61,0x79
0000a8  3c736967          DCB      0x3c,0x73,0x69,0x67
0000ac  6e656420          DCB      0x6e,0x65,0x64,0x20
0000b0  73686f72          DCB      0x73,0x68,0x6f,0x72
0000b4  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeXGradient<unsigned char, short, short>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000030  6d707574          DCB      0x6d,0x70,0x75,0x74
000034  65584772          DCB      0x65,0x58,0x47,0x72
000038  61646965          DCB      0x61,0x64,0x69,0x65
00003c  6e742863          DCB      0x6e,0x74,0x28,0x63
000040  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000044  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000048  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00004c  6d626564          DCB      0x6d,0x62,0x65,0x64
000050  6465643a          DCB      0x64,0x65,0x64,0x3a
000054  3a417272          DCB      0x3a,0x41,0x72,0x72
000058  61793c54          DCB      0x61,0x79,0x3c,0x54
00005c  7970653e          DCB      0x79,0x70,0x65,0x3e
000060  20262c20          DCB      0x20,0x26,0x2c,0x20
000064  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000068  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00006c  62656464          DCB      0x62,0x65,0x64,0x64
000070  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000074  41727261          DCB      0x41,0x72,0x72,0x61
000078  793c4f75          DCB      0x79,0x3c,0x4f,0x75
00007c  74547970          DCB      0x74,0x54,0x79,0x70
000080  653e2026          DCB      0x65,0x3e,0x20,0x26
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  496e5479          DCB      0x49,0x6e,0x54,0x79
000090  7065203d          DCB      0x70,0x65,0x20,0x3d
000094  20756e73          DCB      0x20,0x75,0x6e,0x73
000098  69676e65          DCB      0x69,0x67,0x6e,0x65
00009c  64206368          DCB      0x64,0x20,0x63,0x68
0000a0  61722c20          DCB      0x61,0x72,0x2c,0x20
0000a4  496e7465          DCB      0x49,0x6e,0x74,0x65
0000a8  726d6564          DCB      0x72,0x6d,0x65,0x64
0000ac  69617465          DCB      0x69,0x61,0x74,0x65
0000b0  54797065          DCB      0x54,0x79,0x70,0x65
0000b4  203d2073          DCB      0x20,0x3d,0x20,0x73
0000b8  69676e65          DCB      0x69,0x67,0x6e,0x65
0000bc  64207368          DCB      0x64,0x20,0x73,0x68
0000c0  6f72742c          DCB      0x6f,0x72,0x74,0x2c
0000c4  204f7574          DCB      0x20,0x4f,0x75,0x74
0000c8  54797065          DCB      0x54,0x79,0x70,0x65
0000cc  203d2073          DCB      0x20,0x3d,0x20,0x73
0000d0  69676e65          DCB      0x69,0x67,0x6e,0x65
0000d4  64207368          DCB      0x64,0x20,0x73,0x68
0000d8  6f72745d          DCB      0x6f,0x72,0x74,0x5d
0000dc  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeYGradient<unsigned char, short, short>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000030  6d707574          DCB      0x6d,0x70,0x75,0x74
000034  65594772          DCB      0x65,0x59,0x47,0x72
000038  61646965          DCB      0x61,0x64,0x69,0x65
00003c  6e742863          DCB      0x6e,0x74,0x28,0x63
000040  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000044  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000048  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00004c  6d626564          DCB      0x6d,0x62,0x65,0x64
000050  6465643a          DCB      0x64,0x65,0x64,0x3a
000054  3a417272          DCB      0x3a,0x41,0x72,0x72
000058  61793c54          DCB      0x61,0x79,0x3c,0x54
00005c  7970653e          DCB      0x79,0x70,0x65,0x3e
000060  20262c20          DCB      0x20,0x26,0x2c,0x20
000064  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000068  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00006c  62656464          DCB      0x62,0x65,0x64,0x64
000070  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000074  41727261          DCB      0x41,0x72,0x72,0x61
000078  793c4f75          DCB      0x79,0x3c,0x4f,0x75
00007c  74547970          DCB      0x74,0x54,0x79,0x70
000080  653e2026          DCB      0x65,0x3e,0x20,0x26
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  496e5479          DCB      0x49,0x6e,0x54,0x79
000090  7065203d          DCB      0x70,0x65,0x20,0x3d
000094  20756e73          DCB      0x20,0x75,0x6e,0x73
000098  69676e65          DCB      0x69,0x67,0x6e,0x65
00009c  64206368          DCB      0x64,0x20,0x63,0x68
0000a0  61722c20          DCB      0x61,0x72,0x2c,0x20
0000a4  496e7465          DCB      0x49,0x6e,0x74,0x65
0000a8  726d6564          DCB      0x72,0x6d,0x65,0x64
0000ac  69617465          DCB      0x69,0x61,0x74,0x65
0000b0  54797065          DCB      0x54,0x79,0x70,0x65
0000b4  203d2073          DCB      0x20,0x3d,0x20,0x73
0000b8  69676e65          DCB      0x69,0x67,0x6e,0x65
0000bc  64207368          DCB      0x64,0x20,0x73,0x68
0000c0  6f72742c          DCB      0x6f,0x72,0x74,0x2c
0000c4  204f7574          DCB      0x20,0x4f,0x75,0x74
0000c8  54797065          DCB      0x54,0x79,0x70,0x65
0000cc  203d2073          DCB      0x20,0x3d,0x20,0x73
0000d0  69676e65          DCB      0x69,0x67,0x6e,0x65
0000d4  64207368          DCB      0x64,0x20,0x73,0x68
0000d8  6f72745d          DCB      0x6f,0x72,0x74,0x5d
0000dc  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14Interp2_AffineIhhEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2_Affine<unsigned char, unsigned char>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Meshgrid<float>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Point<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496e74          DCB      0x3a,0x49,0x6e,0x74
000020  65727032          DCB      0x65,0x72,0x70,0x32
000024  5f416666          DCB      0x5f,0x41,0x66,0x66
000028  696e6528          DCB      0x69,0x6e,0x65,0x28
00002c  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000030  7420416e          DCB      0x74,0x20,0x41,0x6e
000034  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000038  456d6265          DCB      0x45,0x6d,0x62,0x65
00003c  64646564          DCB      0x64,0x64,0x65,0x64
000040  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000044  7261793c          DCB      0x72,0x61,0x79,0x3c
000048  54797065          DCB      0x54,0x79,0x70,0x65
00004c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000050  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000054  73742041          DCB      0x73,0x74,0x20,0x41
000058  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00005c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000060  65646465          DCB      0x65,0x64,0x64,0x65
000064  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000068  65736867          DCB      0x65,0x73,0x68,0x67
00006c  7269643c          DCB      0x72,0x69,0x64,0x3c
000070  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000074  743e2026          DCB      0x74,0x3e,0x20,0x26
000078  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00007c  6e737420          DCB      0x6e,0x73,0x74,0x20
000080  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000084  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000088  62656464          DCB      0x62,0x65,0x64,0x64
00008c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000090  41727261          DCB      0x41,0x72,0x72,0x61
000094  793c666c          DCB      0x79,0x3c,0x66,0x6c
000098  6f61743e          DCB      0x6f,0x61,0x74,0x3e
00009c  20262c20          DCB      0x20,0x26,0x2c,0x20
0000a0  636f6e73          DCB      0x63,0x6f,0x6e,0x73
0000a4  7420416e          DCB      0x74,0x20,0x41,0x6e
0000a8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000ac  456d6265          DCB      0x45,0x6d,0x62,0x65
0000b0  64646564          DCB      0x64,0x64,0x65,0x64
0000b4  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
0000b8  696e743c          DCB      0x69,0x6e,0x74,0x3c
0000bc  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000c0  743e2026          DCB      0x74,0x3e,0x20,0x26
0000c4  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0000c8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000cc  456d6265          DCB      0x45,0x6d,0x62,0x65
0000d0  64646564          DCB      0x64,0x64,0x65,0x64
0000d4  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
0000d8  7261793c          DCB      0x72,0x61,0x79,0x3c
0000dc  4f757454          DCB      0x4f,0x75,0x74,0x54
0000e0  7970653e          DCB      0x79,0x70,0x65,0x3e
0000e4  20262c20          DCB      0x20,0x26,0x2c,0x20
0000e8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000ec  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000f0  62656464          DCB      0x62,0x65,0x64,0x64
0000f4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000f8  496e7465          DCB      0x49,0x6e,0x74,0x65
0000fc  72706f6c          DCB      0x72,0x70,0x6f,0x6c
000100  6174696f          DCB      0x61,0x74,0x69,0x6f
000104  6e547970          DCB      0x6e,0x54,0x79,0x70
000108  652c204f          DCB      0x65,0x2c,0x20,0x4f
00010c  75745479          DCB      0x75,0x74,0x54,0x79
000110  70652920          DCB      0x70,0x65,0x29,0x20
000114  5b776974          DCB      0x5b,0x77,0x69,0x74
000118  6820496e          DCB      0x68,0x20,0x49,0x6e
00011c  54797065          DCB      0x54,0x79,0x70,0x65
000120  203d2075          DCB      0x20,0x3d,0x20,0x75
000124  6e736967          DCB      0x6e,0x73,0x69,0x67
000128  6e656420          DCB      0x6e,0x65,0x64,0x20
00012c  63686172          DCB      0x63,0x68,0x61,0x72
000130  2c204f75          DCB      0x2c,0x20,0x4f,0x75
000134  74547970          DCB      0x74,0x54,0x79,0x70
000138  65203d20          DCB      0x65,0x20,0x3d,0x20
00013c  756e7369          DCB      0x75,0x6e,0x73,0x69
000140  676e6564          DCB      0x67,0x6e,0x65,0x64
000144  20636861          DCB      0x20,0x63,0x68,0x61
000148  725d00            DCB      0x72,0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\lucasKanade_Fast.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_lucasKanade_Fast_cpp_8941f05a___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___20_lucasKanade_Fast_cpp_8941f05a___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_lucasKanade_Fast_cpp_8941f05a___Z7__REVSHi|
#line 144
|__asm___20_lucasKanade_Fast_cpp_8941f05a___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
