; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\lucaskanade_general.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\lucaskanade_general.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\lucaskanade_general.crf ..\coretech\vision\robot\src\lucasKanade_General.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
;;;29         {
;;;30           f32 UpdatePreviousCorners(
000000  b570              PUSH     {r4-r6,lr}
;;;31             const Transformations::PlanarTransformation_f32 &transformation,
;;;32             FixedLengthList<Quadrilateral<f32> > &previousCorners,
;;;33             MemoryStack scratch)
;;;34           {
000002  4614              MOV      r4,r2
000004  ed2d8b04          VPUSH    {d8-d9}
000008  b0a0              SUB      sp,sp,#0x80
00000a  460d              MOV      r5,r1
00000c  4606              MOV      r6,r0
;;;35             const f32 baseImageHalfWidth = static_cast<f32>(BASE_IMAGE_WIDTH) / 2.0f;
00000e  eddf0a5f          VLDR     s1,|L1.396|
;;;36             const f32 baseImageHalfHeight = static_cast<f32>(BASE_IMAGE_HEIGHT) / 2.0f;
000012  ed9f0a5f          VLDR     s0,|L1.400|
;;;37     
;;;38             Quadrilateral<f32> in(
000016  a808              ADD      r0,sp,#0x20
000018  eddf1a5e          VLDR     s3,|L1.404|
00001c  ed9f1a5e          VLDR     s2,|L1.408|
000020  edcd1a10          VSTR     s3,[sp,#0x40]
000024  ed8d1a11          VSTR     s2,[sp,#0x44]
000028  edcd0a12          VSTR     s1,[sp,#0x48]
00002c  ed8d1a13          VSTR     s2,[sp,#0x4c]
000030  edcd0a14          VSTR     s1,[sp,#0x50]
000034  ed8d0a15          VSTR     s0,[sp,#0x54]
000038  edcd1a16          VSTR     s3,[sp,#0x58]
00003c  ed8d0a17          VSTR     s0,[sp,#0x5c]
000040  2304              MOVS     r3,#4
000042  2208              MOVS     r2,#8
000044  4955              LDR      r1,|L1.412|
000046  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00004a  ed9d0a10          VLDR     s0,[sp,#0x40]
;;;39               Point<f32>(-baseImageHalfWidth,-baseImageHalfHeight),
;;;40               Point<f32>(baseImageHalfWidth,-baseImageHalfHeight),
;;;41               Point<f32>(baseImageHalfWidth,baseImageHalfHeight),
;;;42               Point<f32>(-baseImageHalfWidth,baseImageHalfHeight));
;;;43     
;;;44             Quadrilateral<f32> newCorners = transformation.Transform(in, scratch, 1.0f);
00004e  4621              MOV      r1,r4
000050  ed800a00          VSTR     s0,[r0,#0]
000054  ed9d0a11          VLDR     s0,[sp,#0x44]
000058  ed800a01          VSTR     s0,[r0,#4]
00005c  ed9d0a12          VLDR     s0,[sp,#0x48]
000060  ed800a02          VSTR     s0,[r0,#8]
000064  ed9d0a13          VLDR     s0,[sp,#0x4c]
000068  ed800a03          VSTR     s0,[r0,#0xc]
00006c  ed9d0a14          VLDR     s0,[sp,#0x50]
000070  ed800a04          VSTR     s0,[r0,#0x10]
000074  ed9d0a15          VLDR     s0,[sp,#0x54]
000078  ed800a05          VSTR     s0,[r0,#0x14]
00007c  ed9d0a16          VLDR     s0,[sp,#0x58]
000080  ed800a06          VSTR     s0,[r0,#0x18]
000084  ed9d0a17          VLDR     s0,[sp,#0x5c]
000088  ed800a07          VSTR     s0,[r0,#0x1c]
00008c  a818              ADD      r0,sp,#0x60
00008e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000092  4603              MOV      r3,r0
000094  eeb70a00          VMOV.F32 s0,#1.00000000
000098  aa08              ADD      r2,sp,#0x20
00009a  4631              MOV      r1,r6
00009c  4668              MOV      r0,sp
00009e  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f329TransformERKNS0_13QuadrilateralIfEENS0_11MemoryStackEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::Transform(const Anki::Embedded::Quadrilateral<float>&, Anki::Embedded::MemoryStack, float) const
;;;45     
;;;46             //const f32 change = sqrtf(Matrix::Mean<f32,f32>(tmp1));
;;;47             f32 minChange = 1e10f;
0000a2  eddf8a3f          VLDR     s17,|L1.416|
;;;48             for(s32 iPrevious=0; iPrevious<NUM_PREVIOUS_QUADS_TO_COMPARE; iPrevious++) {
;;;49               f32 change = 0.0f;
0000a6  ed9f9a3f          VLDR     s18,|L1.420|
0000aa  2600              MOVS     r6,#0                 ;48
;;;50               for(s32 i=0; i<4; i++) {
;;;51                 const f32 dx = previousCorners[iPrevious][i].x - newCorners[i].x;
;;;52                 const f32 dy = previousCorners[iPrevious][i].y - newCorners[i].y;
;;;53                 change += sqrtf(dx*dx + dy*dy);
;;;54               }
;;;55               change /= 4;
0000ac  eef59a00          VMOV.F32 s19,#0.25000000
                  |L1.176|
0000b0  eeb08a49          VMOV.F32 s16,s18               ;49
0000b4  2400              MOVS     r4,#0                 ;50
                  |L1.182|
0000b6  6b28              LDR      r0,[r5,#0x30]         ;50
0000b8  4669              MOV      r1,sp                 ;51
0000ba  eb001046          ADD      r0,r0,r6,LSL #5       ;51
0000be  eb0000c4          ADD      r0,r0,r4,LSL #3       ;51
0000c2  eb0101c4          ADD      r1,r1,r4,LSL #3       ;51
0000c6  ed900a00          VLDR     s0,[r0,#0]            ;51
0000ca  edd10a00          VLDR     s1,[r1,#0]            ;51
0000ce  ed911a01          VLDR     s2,[r1,#4]            ;52
0000d2  ee300a60          VSUB.F32 s0,s0,s1              ;51
0000d6  edd00a01          VLDR     s1,[r0,#4]            ;52
0000da  ee700ac1          VSUB.F32 s1,s1,s2              ;52
0000de  ee200a00          VMUL.F32 s0,s0,s0              ;53
0000e2  ee000aa0          VMLA.F32 s0,s1,s1              ;53
0000e6  eef10ac0          VSQRT.F32 s1,s0                 ;53
0000ea  eef40a60          VCMP.F32 s1,s1                 ;53
0000ee  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;53
0000f2  d003              BEQ      |L1.252|
0000f4  f7fffffe          BL       __hardfp_sqrtf
0000f8  eef00a40          VMOV.F32 s1,s0                 ;53
                  |L1.252|
0000fc  1c64              ADDS     r4,r4,#1              ;50
0000fe  ee308a88          VADD.F32 s16,s1,s16            ;53
000102  2c04              CMP      r4,#4                 ;50
000104  dbd7              BLT      |L1.182|
000106  ee280a29          VMUL.F32 s0,s16,s19
;;;56     
;;;57               minChange = MIN(minChange, change);
00010a  eef48ac0          VCMPE.F32 s17,s0
00010e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000112  bf38              IT       CC
000114  eeb00a68          VMOVCC.F32 s0,s17
000118  eef08a40          VMOV.F32 s17,s0
00011c  1c76              ADDS     r6,r6,#1              ;48
00011e  2e02              CMP      r6,#2                 ;48
000120  dbc6              BLT      |L1.176|
;;;58             }
;;;59     
;;;60             for(s32 iPrevious=0; iPrevious<(NUM_PREVIOUS_QUADS_TO_COMPARE-1); iPrevious++) {
000122  2300              MOVS     r3,#0
                  |L1.292|
000124  6b28              LDR      r0,[r5,#0x30]
;;;61               previousCorners[iPrevious] = previousCorners[iPrevious+1];
000126  1c59              ADDS     r1,r3,#1
000128  eb001443          ADD      r4,r0,r3,LSL #5
00012c  eb001c41          ADD      r12,r0,r1,LSL #5
000130  2000              MOVS     r0,#0
                  |L1.306|
000132  eb0c01c0          ADD      r1,r12,r0,LSL #3
000136  eb0402c0          ADD      r2,r4,r0,LSL #3
00013a  ed910a00          VLDR     s0,[r1,#0]
00013e  1c40              ADDS     r0,r0,#1
000140  ed820a00          VSTR     s0,[r2,#0]
000144  ed910a01          VLDR     s0,[r1,#4]
000148  2804              CMP      r0,#4
00014a  ed820a01          VSTR     s0,[r2,#4]
00014e  dbf0              BLT      |L1.306|
000150  1c5b              ADDS     r3,r3,#1              ;60
000152  2b01              CMP      r3,#1                 ;60
000154  dbe6              BLT      |L1.292|
000156  6b28              LDR      r0,[r5,#0x30]         ;60
;;;62             }
;;;63             previousCorners[NUM_PREVIOUS_QUADS_TO_COMPARE-1] = newCorners;
000158  466b              MOV      r3,sp
00015a  f1000c20          ADD      r12,r0,#0x20
00015e  2000              MOVS     r0,#0
                  |L1.352|
000160  eb0302c0          ADD      r2,r3,r0,LSL #3
000164  eb0c01c0          ADD      r1,r12,r0,LSL #3
000168  ed920a00          VLDR     s0,[r2,#0]
00016c  1c40              ADDS     r0,r0,#1
00016e  ed810a00          VSTR     s0,[r1,#0]
000172  ed920a01          VLDR     s0,[r2,#4]
000176  2804              CMP      r0,#4
000178  ed810a01          VSTR     s0,[r1,#4]
00017c  dbf0              BLT      |L1.352|
;;;64     
;;;65             return minChange;
;;;66           } // f32 UpdatePreviousCorners()
00017e  b020              ADD      sp,sp,#0x80
000180  eeb00a68          VMOV.F32 s0,s17                ;65
000184  ecbd8b04          VPOP     {d8-d9}
000188  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

00018a  0000              DCW      0x0000
                  |L1.396|
00018c  43200000          DCFS     0x43200000 ; 160
                  |L1.400|
000190  42f00000          DCFS     0x42f00000 ; 120
                  |L1.404|
000194  c3200000          DCFS     0xc3200000 ; -160
                  |L1.408|
000198  c2f00000          DCFS     0xc2f00000 ; -120
                  |L1.412|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L1.416|
0001a0  501502f9          DCFS     0x501502f9 ; 10000000000
                  |L1.420|
0001a4  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18set_transformationERKNS0_15Transformations24PlanarTransformation_f32E||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18set_transformationERKNS0_15Transformations24PlanarTransformation_f32E PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::set_transformation(const Anki::Embedded::Transformations::PlanarTransformation_f32&)
;;;147    
;;;148          Result LucasKanadeTracker_Generic::set_transformation(const Transformations::PlanarTransformation_f32 &transformation)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149          {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;150            Result lastResult;
;;;151    
;;;152            const Transformations::TransformType originalType = this->transformation.get_transformType();
000008  3018              ADDS     r0,r0,#0x18
00000a  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
00000e  4605              MOV      r5,r0
;;;153    
;;;154            if((lastResult = this->transformation.set_transformType(transformation.get_transformType())) != RESULT_OK) {
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000016  4601              MOV      r1,r0
000018  f1040018          ADD      r0,r4,#0x18
00001c  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f3217set_transformTypeENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::set_transformType(Anki::Embedded::Transformations::TransformType)
000020  0007              MOVS     r7,r0
000022  d007              BEQ      |L2.52|
;;;155              this->transformation.set_transformType(originalType);
000024  4629              MOV      r1,r5
000026  f1040018          ADD      r0,r4,#0x18
00002a  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f3217set_transformTypeENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::set_transformType(Anki::Embedded::Transformations::TransformType)
;;;156              return lastResult;
00002e  4638              MOV      r0,r7
;;;157            }
;;;158    
;;;159            if((lastResult = this->transformation.set_homography(transformation.get_homography())) != RESULT_OK) {
;;;160              this->transformation.set_transformType(originalType);
;;;161              return lastResult;
;;;162            }
;;;163    
;;;164            return RESULT_OK;
;;;165          }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L2.52|
000034  4630              MOV      r0,r6                 ;159
000036  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
00003a  4601              MOV      r1,r0                 ;159
00003c  f1040018          ADD      r0,r4,#0x18           ;159
000040  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f3214set_homographyERKNS0_5ArrayIfEE ; Anki::Embedded::Transformations::PlanarTransformation_f32::set_homography(const Anki::Embedded::Array<float>&)
000044  0006              MOVS     r6,r0                 ;159
000046  bf08              IT       EQ
000048  e8bd81f0          POPEQ    {r4-r8,pc}
00004c  4629              MOV      r1,r5                 ;160
00004e  f1040018          ADD      r0,r4,#0x18           ;160
000052  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f3217set_transformTypeENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::set_transformType(Anki::Embedded::Transformations::TransformType)
000056  4630              MOV      r0,r6                 ;161
000058  e8bd81f0          POP      {r4-r8,pc}
;;;166    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic20UpdateTransformationERKNS0_5ArrayIfEEfNS0_11MemoryStackENS0_15Transformations13TransformTypeE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic20UpdateTransformationERKNS0_5ArrayIfEEfNS0_11MemoryStackENS0_15Transformations13TransformTypeE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::UpdateTransformation(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
;;;137    
;;;138          Result LucasKanadeTracker_Generic::UpdateTransformation(const Array<f32> &update, const f32 scale, MemoryStack scratch, Transformations::TransformType updateType)
000000  b570              PUSH     {r4-r6,lr}
;;;139          {
000002  460e              MOV      r6,r1
000004  ed2d8b02          VPUSH    {d8}
000008  b088              SUB      sp,sp,#0x20
00000a  4604              MOV      r4,r0
00000c  461d              MOV      r5,r3
00000e  eeb08a40          VMOV.F32 s16,s0
;;;140            return this->transformation.Update(update, scale, scratch, updateType);
000012  4611              MOV      r1,r2
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00001a  4602              MOV      r2,r0
00001c  462b              MOV      r3,r5
00001e  eeb00a48          VMOV.F32 s0,s16
000022  4631              MOV      r1,r6
000024  f1040018          ADD      r0,r4,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
;;;141          }
00002c  b008              ADD      sp,sp,#0x20
00002e  ecbd8b02          VPOP     {d8}
000032  bd70              POP      {r4-r6,pc}
;;;142    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC2ENS0_15Transformations13TransformTypeE                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic__sub_object(Anki::Embedded::Transformations::TransformType)
                  _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType)
;;;67     
;;;68           LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(const Transformations::TransformType maxSupportedTransformType)
;;;69             : maxSupportedTransformType(maxSupportedTransformType), isValid(false)
;;;70           {
;;;71           }
;;;72     
000000  b510              PUSH     {r4,lr}
000002  f8201b18          STRH     r1,[r0],#0x18
000006  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1Ev ; Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32()
00000a  3818              SUBS     r0,r0,#0x18
00000c  ed9f0a06          VLDR     s0,|L4.40|
000010  2100              MOVS     r1,#0
000012  ed800a17          VSTR     s0,[r0,#0x5c]
000016  ed800a18          VSTR     s0,[r0,#0x60]
00001a  ed800a19          VSTR     s0,[r0,#0x64]
00001e  ed800a1a          VSTR     s0,[r0,#0x68]
000022  f8801070          STRB     r1,[r0,#0x70]
000026  bd10              POP      {r4,pc}
                          ENDP

                  |L4.40|
000028  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC2ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic__sub_object(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
                  _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
;;;72     
;;;73           LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(
;;;74             const Transformations::TransformType maxSupportedTransformType,
;;;75             const Array<u8> &templateImage,
;;;76             const Quadrilateral<f32> &templateQuad,
;;;77             const f32 scaleTemplateRegionPercent,
;;;78             const s32 numPyramidLevels,
;;;79             const Transformations::TransformType transformType,
;;;80             MemoryStack &memory)
;;;81             : maxSupportedTransformType(maxSupportedTransformType), numPyramidLevels(numPyramidLevels), templateImageHeight(templateImage.get_size(0)), templateImageWidth(templateImage.get_size(1)), isValid(false)
;;;82           {
;;;83             BeginBenchmark("LucasKanadeTracker_Generic");
;;;84     
;;;85             AnkiConditionalErrorAndReturn(templateImageHeight > 0 && templateImageWidth > 0,
;;;86               "LucasKanadeTracker_Generic::LucasKanadeTracker_Generic", "template widths and heights must be greater than zero, and multiples of %d", ANKI_VISION_IMAGE_WIDTH_MULTIPLE);
;;;87     
;;;88             AnkiConditionalErrorAndReturn(numPyramidLevels > 0,
;;;89               "LucasKanadeTracker_Generic::LucasKanadeTracker_Generic", "numPyramidLevels must be greater than zero");
;;;90     
;;;91             AnkiConditionalErrorAndReturn(transformType <= maxSupportedTransformType,
;;;92               "LucasKanadeTracker_Generic::LucasKanadeTracker_Generic", "Transform type %d not supported", transformType);
;;;93     
;;;94             const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / templateImage.get_size(1);
;;;95             const s32 initialImagePowerS32 = Log2u32(static_cast<u32>(initialImageScaleS32));
;;;96             initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
;;;97     
;;;98             AnkiConditionalErrorAndReturn(((1<<initialImagePowerS32)*templateImage.get_size(1)) == BASE_IMAGE_WIDTH,
;;;99               "LucasKanadeTracker_Generic::LucasKanadeTracker_Generic", "The templateImage must be a power of two smaller than BASE_IMAGE_WIDTH");
;;;100    
;;;101            templateRegion = templateQuad.ComputeBoundingRectangle<f32>().ComputeScaledRectangle<f32>(scaleTemplateRegionPercent);
;;;102    
;;;103            templateRegion.left /= initialImageScaleF32;
;;;104            templateRegion.right /= initialImageScaleF32;
;;;105            templateRegion.top /= initialImageScaleF32;
;;;106            templateRegion.bottom /= initialImageScaleF32;
;;;107    
;;;108            // All pyramid width except the last one must be divisible by two
;;;109            for(s32 i=0; i<(numPyramidLevels-1); i++) {
;;;110              const s32 curTemplateHeight = templateImageHeight >> i;
;;;111              const s32 curTemplateWidth = templateImageWidth >> i;
;;;112    
;;;113              AnkiConditionalErrorAndReturn(!IsOdd(curTemplateHeight) && !IsOdd(curTemplateWidth),
;;;114                "LucasKanadeTracker_Generic::LucasKanadeTracker_Generic", "Template widths and height must divisible by 2^numPyramidLevels");
;;;115            }
;;;116    
;;;117            this->templateRegionHeight = templateRegion.bottom - templateRegion.top + 1.0f;
;;;118            this->templateRegionWidth = templateRegion.right - templateRegion.left + 1.0f;
;;;119    
;;;120            this->transformation = Transformations::PlanarTransformation_f32(transformType, templateQuad, memory);
;;;121    
;;;122            //this->isValid = true;
;;;123    
;;;124            EndBenchmark("LucasKanadeTracker_Generic");
;;;125          }
;;;126    
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  460d              MOV      r5,r1
000006  ed2d0b02          VPUSH    {d0}
00000a  4604              MOV      r4,r0
00000c  4699              MOV      r9,r3
00000e  ed2d8b02          VPUSH    {d8}
000012  b09f              SUB      sp,sp,#0x7c
000014  eeb08a40          VMOV.F32 s16,s0
000018  e9dd6730          LDRD     r6,r7,[sp,#0xc0]
00001c  f8dda0c8          LDR      r10,[sp,#0xc8]
000020  8001              STRH     r1,[r0,#0]
000022  6046              STR      r6,[r0,#4]
000024  2100              MOVS     r1,#0
000026  9825              LDR      r0,[sp,#0x94]
000028  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00002c  60a0              STR      r0,[r4,#8]
00002e  2101              MOVS     r1,#1
000030  9825              LDR      r0,[sp,#0x94]
000032  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000036  60e0              STR      r0,[r4,#0xc]
000038  f1040018          ADD      r0,r4,#0x18
00003c  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1Ev ; Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32()
000040  f1a00418          SUB      r4,r0,#0x18
000044  3044              ADDS     r0,r0,#0x44
000046  ed9f0abb          VLDR     s0,|L5.820|
00004a  ed800a00          VSTR     s0,[r0,#0]
00004e  ed800a01          VSTR     s0,[r0,#4]
000052  ed800a02          VSTR     s0,[r0,#8]
000056  ed800a03          VSTR     s0,[r0,#0xc]
00005a  2000              MOVS     r0,#0
00005c  f8840070          STRB     r0,[r4,#0x70]
000060  a0b5              ADR      r0,|L5.824|
000062  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000066  68a0              LDR      r0,[r4,#8]
000068  f8df82e8          LDR      r8,|L5.852|
00006c  2800              CMP      r0,#0
00006e  bfc4              ITT      GT
000070  68e0              LDRGT    r0,[r4,#0xc]
000072  2800              CMPGT    r0,#0
000074  dc0c              BGT      |L5.144|
000076  2010              MOVS     r0,#0x10
000078  2155              MOVS     r1,#0x55
00007a  f8cd8000          STR      r8,[sp,#0]
00007e  e9cd1001          STRD     r1,r0,[sp,#4]
000082  a3b5              ADR      r3,|L5.856|
000084  4ac2              LDR      r2,|L5.912|
000086  a1c3              ADR      r1,|L5.916|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
00008e  e00a              B        |L5.166|
                  |L5.144|
000090  2e00              CMP      r6,#0
000092  dc0f              BGT      |L5.180|
000094  2058              MOVS     r0,#0x58
000096  e9cd8000          STRD     r8,r0,[sp,#0]
00009a  a3af              ADR      r3,|L5.856|
00009c  a2cb              ADR      r2,|L5.972|
00009e  a1bd              ADR      r1,|L5.916|
0000a0  2005              MOVS     r0,#5
0000a2  f7fffffe          BL       _Anki_Log
                  |L5.166|
0000a6  b01f              ADD      sp,sp,#0x7c
0000a8  4620              MOV      r0,r4
0000aa  ecbd8b02          VPOP     {d8}
0000ae  b006              ADD      sp,sp,#0x18
0000b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.180|
0000b4  42af              CMP      r7,r5
0000b6  d90b              BLS      |L5.208|
0000b8  205b              MOVS     r0,#0x5b
0000ba  f8cd8000          STR      r8,[sp,#0]
0000be  e9cd0701          STRD     r0,r7,[sp,#4]
0000c2  a3a5              ADR      r3,|L5.856|
0000c4  a2cc              ADR      r2,|L5.1016|
0000c6  a1b3              ADR      r1,|L5.916|
0000c8  2005              MOVS     r0,#5
0000ca  f7fffffe          BL       _Anki_Log
0000ce  e7ea              B        |L5.166|
                  |L5.208|
0000d0  2101              MOVS     r1,#1
0000d2  9825              LDR      r0,[sp,#0x94]
0000d4  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000d8  f44f71a0          MOV      r1,#0x140
0000dc  fb91f5f0          SDIV     r5,r1,r0
0000e0  4628              MOV      r0,r5
0000e2  f7fffffe          BL       Log2u32
0000e6  ee005a10          VMOV     s0,r5
0000ea  4683              MOV      r11,r0
0000ec  2101              MOVS     r1,#1
0000ee  eeb80ac0          VCVT.F32.S32 s0,s0
0000f2  ed840a1b          VSTR     s0,[r4,#0x6c]
0000f6  9825              LDR      r0,[sp,#0x94]
0000f8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000fc  fa00f00b          LSL      r0,r0,r11
000100  f5b07fa0          CMP      r0,#0x140
000104  d009              BEQ      |L5.282|
000106  2062              MOVS     r0,#0x62
000108  e9cd8000          STRD     r8,r0,[sp,#0]
00010c  a392              ADR      r3,|L5.856|
00010e  4ac2              LDR      r2,|L5.1048|
000110  a1a0              ADR      r1,|L5.916|
000112  2005              MOVS     r0,#5
000114  f7fffffe          BL       _Anki_Log
000118  e7c5              B        |L5.166|
                  |L5.282|
00011a  ed990a00          VLDR     s0,[r9,#0]
00011e  edd90a01          VLDR     s1,[r9,#4]
000122  ed8d0a04          VSTR     s0,[sp,#0x10]
000126  ed8d0a05          VSTR     s0,[sp,#0x14]
00012a  edcd0a06          VSTR     s1,[sp,#0x18]
00012e  f1040c5c          ADD      r12,r4,#0x5c
000132  ab1a              ADD      r3,sp,#0x68
000134  a804              ADD      r0,sp,#0x10
000136  edcd0a07          VSTR     s1,[sp,#0x1c]
00013a  2101              MOVS     r1,#1
                  |L5.316|
00013c  eb0902c1          ADD      r2,r9,r1,LSL #3
000140  edd00a00          VLDR     s1,[r0,#0]
000144  ed921a00          VLDR     s2,[r2,#0]
000148  eef40ac1          VCMPE.F32 s1,s2
00014c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000150  bf28              IT       CS
000152  eef00a41          VMOVCS.F32 s1,s2
000156  edc00a00          VSTR     s1,[r0,#0]
00015a  edd00a01          VLDR     s1,[r0,#4]
00015e  ed921a00          VLDR     s2,[r2,#0]
000162  eef40ac1          VCMPE.F32 s1,s2
000166  eef1fa10          VMRS     APSR_nzcv,FPSCR
00016a  bfd8              IT       LE
00016c  eef00a41          VMOVLE.F32 s1,s2
000170  edc00a01          VSTR     s1,[r0,#4]
000174  edd00a02          VLDR     s1,[r0,#8]
000178  ed921a01          VLDR     s2,[r2,#4]
00017c  eef40ac1          VCMPE.F32 s1,s2
000180  eef1fa10          VMRS     APSR_nzcv,FPSCR
000184  bf28              IT       CS
000186  eef00a41          VMOVCS.F32 s1,s2
00018a  edc00a02          VSTR     s1,[r0,#8]
00018e  edd00a03          VLDR     s1,[r0,#0xc]
000192  ed921a01          VLDR     s2,[r2,#4]
000196  eef40ac1          VCMPE.F32 s1,s2
00019a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00019e  bfd8              IT       LE
0001a0  eef00a41          VMOVLE.F32 s1,s2
0001a4  edc00a03          VSTR     s1,[r0,#0xc]
0001a8  1c49              ADDS     r1,r1,#1
0001aa  2904              CMP      r1,#4
0001ac  dbc6              BLT      |L5.316|
0001ae  ed9d2a05          VLDR     s4,[sp,#0x14]
0001b2  eddd2a04          VLDR     s5,[sp,#0x10]
0001b6  ed9d1a07          VLDR     s2,[sp,#0x1c]
0001ba  eddd1a06          VLDR     s3,[sp,#0x18]
0001be  ee720a62          VSUB.F32 s1,s4,s5
0001c2  2500              MOVS     r5,#0
0001c4  ee310a61          VSUB.F32 s0,s2,s3
0001c8  1e76              SUBS     r6,r6,#1
0001ca  ee203a88          VMUL.F32 s6,s1,s16
0001ce  2e00              CMP      r6,#0
0001d0  ee603a08          VMUL.F32 s7,s0,s16
0001d4  ee730a60          VSUB.F32 s1,s6,s1
0001d8  eeb63a00          VMOV.F32 s6,#0.50000000
0001dc  ee330ac0          VSUB.F32 s0,s7,s0
0001e0  ee600a83          VMUL.F32 s1,s1,s6
0001e4  ee200a03          VMUL.F32 s0,s0,s6
0001e8  ee722ae0          VSUB.F32 s5,s5,s1
0001ec  ee720a20          VADD.F32 s1,s4,s1
0001f0  ee711ac0          VSUB.F32 s3,s3,s0
0001f4  ee310a00          VADD.F32 s0,s2,s0
0001f8  edc32a00          VSTR     s5,[r3,#0]
0001fc  edc30a01          VSTR     s1,[r3,#4]
000200  edc31a02          VSTR     s3,[r3,#8]
000204  ed830a03          VSTR     s0,[r3,#0xc]
000208  ed9d0a1a          VLDR     s0,[sp,#0x68]
00020c  ed8c0a00          VSTR     s0,[r12,#0]
000210  ed9d0a1b          VLDR     s0,[sp,#0x6c]
000214  ed8c0a01          VSTR     s0,[r12,#4]
000218  ed9d0a1c          VLDR     s0,[sp,#0x70]
00021c  ed8c0a02          VSTR     s0,[r12,#8]
000220  ed9d0a1d          VLDR     s0,[sp,#0x74]
000224  ed8c0a03          VSTR     s0,[r12,#0xc]
000228  edd40a17          VLDR     s1,[r4,#0x5c]
00022c  ed940a1b          VLDR     s0,[r4,#0x6c]
000230  ee801a80          VDIV.F32 s2,s1,s0
000234  ed841a17          VSTR     s2,[r4,#0x5c]
000238  edd40a18          VLDR     s1,[r4,#0x60]
00023c  ee801a80          VDIV.F32 s2,s1,s0
000240  ed841a18          VSTR     s2,[r4,#0x60]
000244  edd40a19          VLDR     s1,[r4,#0x64]
000248  ee801a80          VDIV.F32 s2,s1,s0
00024c  ed841a19          VSTR     s2,[r4,#0x64]
000250  edd40a1a          VLDR     s1,[r4,#0x68]
000254  ee801a80          VDIV.F32 s2,s1,s0
000258  ed841a1a          VSTR     s2,[r4,#0x68]
00025c  dd19              BLE      |L5.658|
                  |L5.606|
00025e  68a0              LDR      r0,[r4,#8]
000260  68e1              LDR      r1,[r4,#0xc]
000262  4128              ASRS     r0,r0,r5
000264  fa41fb05          ASR      r11,r1,r5
000268  f7fffffe          BL       IsOdd
00026c  b920              CBNZ     r0,|L5.632|
00026e  4658              MOV      r0,r11
000270  f7fffffe          BL       IsOdd
000274  2800              CMP      r0,#0
000276  d009              BEQ      |L5.652|
                  |L5.632|
000278  2071              MOVS     r0,#0x71
00027a  e9cd8000          STRD     r8,r0,[sp,#0]
00027e  a336              ADR      r3,|L5.856|
000280  a266              ADR      r2,|L5.1052|
000282  a144              ADR      r1,|L5.916|
000284  2005              MOVS     r0,#5
000286  f7fffffe          BL       _Anki_Log
00028a  e70c              B        |L5.166|
                  |L5.652|
00028c  1c6d              ADDS     r5,r5,#1
00028e  42b5              CMP      r5,r6
000290  dbe5              BLT      |L5.606|
                  |L5.658|
000292  ed940a1a          VLDR     s0,[r4,#0x68]
000296  edd40a19          VLDR     s1,[r4,#0x64]
00029a  f1040518          ADD      r5,r4,#0x18
00029e  4653              MOV      r3,r10
0002a0  ee700a60          VSUB.F32 s1,s0,s1
0002a4  eeb70a00          VMOV.F32 s0,#1.00000000
0002a8  464a              MOV      r2,r9
0002aa  4639              MOV      r1,r7
0002ac  ee700a80          VADD.F32 s1,s1,s0
0002b0  a808              ADD      r0,sp,#0x20
0002b2  edc40a04          VSTR     s1,[r4,#0x10]
0002b6  edd40a18          VLDR     s1,[r4,#0x60]
0002ba  ed941a17          VLDR     s2,[r4,#0x5c]
0002be  ee700ac1          VSUB.F32 s1,s1,s2
0002c2  ee300a80          VADD.F32 s0,s1,s0
0002c6  ed840a05          VSTR     s0,[r4,#0x14]
0002ca  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERKNS0_13QuadrilateralIfEERNS0_11MemoryStackE ; Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral<float>&, Anki::Embedded::MemoryStack&)
0002ce  7801              LDRB     r1,[r0,#0]
0002d0  7029              STRB     r1,[r5,#0]
0002d2  8841              LDRH     r1,[r0,#2]
0002d4  8069              STRH     r1,[r5,#2]
0002d6  6842              LDR      r2,[r0,#4]
0002d8  606a              STR      r2,[r5,#4]
0002da  6882              LDR      r2,[r0,#8]
0002dc  60aa              STR      r2,[r5,#8]
0002de  68c2              LDR      r2,[r0,#0xc]
0002e0  60ea              STR      r2,[r5,#0xc]
0002e2  6902              LDR      r2,[r0,#0x10]
0002e4  612a              STR      r2,[r5,#0x10]
0002e6  6942              LDR      r2,[r0,#0x14]
0002e8  f1050618          ADD      r6,r5,#0x18
0002ec  f1000c18          ADD      r12,r0,#0x18
0002f0  2100              MOVS     r1,#0
0002f2  616a              STR      r2,[r5,#0x14]
                  |L5.756|
0002f4  eb0c02c1          ADD      r2,r12,r1,LSL #3
0002f8  eb0603c1          ADD      r3,r6,r1,LSL #3
0002fc  ed920a00          VLDR     s0,[r2,#0]
000300  1c49              ADDS     r1,r1,#1
000302  ed830a00          VSTR     s0,[r3,#0]
000306  ed920a01          VLDR     s0,[r2,#4]
00030a  2904              CMP      r1,#4
00030c  ed830a01          VSTR     s0,[r3,#4]
000310  dbf0              BLT      |L5.756|
000312  f8901038          LDRB     r1,[r0,#0x38]
000316  f8851038          STRB     r1,[r5,#0x38]
00031a  ed900a0f          VLDR     s0,[r0,#0x3c]
00031e  ed850a0f          VSTR     s0,[r5,#0x3c]
000322  ed900a10          VLDR     s0,[r0,#0x40]
000326  a004              ADR      r0,|L5.824|
000328  ed850a10          VSTR     s0,[r5,#0x40]
00032c  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000330  e6b9              B        |L5.166|
                          ENDP

000332  0000              DCW      0x0000
                  |L5.820|
000334  00000000          DCFS     0x00000000 ; 0
                  |L5.824|
000338  4c756361          DCB      "LucasKanadeTracker_Generic",0
00033c  734b616e
000340  61646554
000344  7261636b
000348  65725f47
00034c  656e6572
000350  696300  
000353  00                DCB      0
                  |L5.852|
                          DCD      ||.constdata||
                  |L5.856|
000358  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\lucasKanade_General.c"
00035c  6f726574
000360  6563685c
000364  76697369
000368  6f6e5c72
00036c  6f626f74
000370  5c737263
000374  5c6c7563
000378  61734b61
00037c  6e616465
000380  5f47656e
000384  6572616c
000388  2e63    
00038a  707000            DCB      "pp",0
00038d  00                DCB      0
00038e  00                DCB      0
00038f  00                DCB      0
                  |L5.912|
                          DCD      ||.constdata||+0x1ac
                  |L5.916|
000394  4c756361          DCB      "LucasKanadeTracker_Generic::LucasKanadeTracker_Generic",0
000398  734b616e
00039c  61646554
0003a0  7261636b
0003a4  65725f47
0003a8  656e6572
0003ac  69633a3a
0003b0  4c756361
0003b4  734b616e
0003b8  61646554
0003bc  7261636b
0003c0  65725f47
0003c4  656e6572
0003c8  696300  
0003cb  00                DCB      0
                  |L5.972|
0003cc  6e756d50          DCB      "numPyramidLevels must be greater than zero",0
0003d0  7972616d
0003d4  69644c65
0003d8  76656c73
0003dc  206d7573
0003e0  74206265
0003e4  20677265
0003e8  61746572
0003ec  20746861
0003f0  6e207a65
0003f4  726f00  
0003f7  00                DCB      0
                  |L5.1016|
0003f8  5472616e          DCB      "Transform type %d not supported",0
0003fc  73666f72
000400  6d207479
000404  70652025
000408  64206e6f
00040c  74207375
000410  70706f72
000414  74656400
                  |L5.1048|
                          DCD      ||.constdata||+0x1f8
                  |L5.1052|
00041c  54656d70          DCB      "Template widths and height must divisible by 2^numPyram"
000420  6c617465
000424  20776964
000428  74687320
00042c  616e6420
000430  68656967
000434  6874206d
000438  75737420
00043c  64697669
000440  7369626c
000444  65206279
000448  20325e6e
00044c  756d5079
000450  72616d  
000453  69644c65          DCB      "idLevels",0
000457  76656c73
00045b  00      

                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18get_transformationEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18get_transformationEv PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::get_transformation() const
;;;166    
;;;167          Transformations::PlanarTransformation_f32 LucasKanadeTracker_Generic::get_transformation() const
000000  b570              PUSH     {r4-r6,lr}
;;;168          {
;;;169            return transformation;
000002  f1010418          ADD      r4,r1,#0x18
000006  7e09              LDRB     r1,[r1,#0x18]
000008  7001              STRB     r1,[r0,#0]
00000a  8861              LDRH     r1,[r4,#2]
00000c  8041              STRH     r1,[r0,#2]
00000e  1d22              ADDS     r2,r4,#4
000010  1d06              ADDS     r6,r0,#4
000012  e892102e          LDM      r2,{r1-r3,r5,r12}
000016  e8a6102e          STM      r6!,{r1-r3,r5,r12}
00001a  3018              ADDS     r0,r0,#0x18
00001c  f1040518          ADD      r5,r4,#0x18
000020  2304              MOVS     r3,#4
000022  2208              MOVS     r2,#8
000024  490f              LDR      r1,|L6.100|
000026  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00002a  2200              MOVS     r2,#0
                  |L6.44|
00002c  eb0501c2          ADD      r1,r5,r2,LSL #3
000030  eb0003c2          ADD      r3,r0,r2,LSL #3
000034  ed910a00          VLDR     s0,[r1,#0]
000038  1c52              ADDS     r2,r2,#1
00003a  ed830a00          VSTR     s0,[r3,#0]
00003e  ed910a01          VLDR     s0,[r1,#4]
000042  2a04              CMP      r2,#4
000044  ed830a01          VSTR     s0,[r3,#4]
000048  dbf0              BLT      |L6.44|
00004a  f8942038          LDRB     r2,[r4,#0x38]
00004e  f8802020          STRB     r2,[r0,#0x20]
000052  ed940a0f          VLDR     s0,[r4,#0x3c]
000056  ed800a09          VSTR     s0,[r0,#0x24]
00005a  ed940a10          VLDR     s0,[r4,#0x40]
00005e  ed800a0a          VSTR     s0,[r0,#0x28]
;;;170          }
000062  bd70              POP      {r4-r6,pc}
;;;171        } // namespace TemplateTracker
                          ENDP

                  |L6.100|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()

                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic20get_numPyramidLevelsEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic20get_numPyramidLevelsEv PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::get_numPyramidLevels() const
;;;142    
;;;143          s32 LucasKanadeTracker_Generic::get_numPyramidLevels() const
000000  6840              LDR      r0,[r0,#4]
;;;144          {
;;;145            return numPyramidLevels;
;;;146          }
000002  4770              BX       lr
;;;147    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic7IsValidEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic7IsValidEv PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const
;;;126    
;;;127          bool LucasKanadeTracker_Generic::IsValid() const
000000  f8901070          LDRB     r1,[r0,#0x70]
;;;128          {
;;;129            if(!this->isValid)
000004  2900              CMP      r1,#0
;;;130              return false;
000006  bf04              ITT      EQ
000008  2000              MOVEQ    r0,#0
;;;131    
;;;132            if(!this->transformation.IsValid())
;;;133              return false;
;;;134    
;;;135            return true;
;;;136          }
00000a  4770              BXEQ     lr
00000c  b510              PUSH     {r4,lr}               ;128
00000e  3018              ADDS     r0,r0,#0x18           ;132
000010  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f327IsValidEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::IsValid() const
000014  2800              CMP      r0,#0                 ;132
000016  bf18              IT       NE                    ;135
000018  2001              MOVNE    r0,#1                 ;135
00001a  bd10              POP      {r4,pc}
;;;137    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeE||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic7IsValidEv||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic20UpdateTransformationERKNS0_5ArrayIfEEfNS0_11MemoryStackENS0_15Transformations13TransformTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic20UpdateTransformationERKNS0_5ArrayIfEEfNS0_11MemoryStackENS0_15Transformations13TransformTypeE||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic20get_numPyramidLevelsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic20get_numPyramidLevelsEv||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18set_transformationERKNS0_15Transformations24PlanarTransformation_f32E||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18set_transformationERKNS0_15Transformations24PlanarTransformation_f32E||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18get_transformationEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic18get_transformationEv||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  54656d70          DCB      0x54,0x65,0x6d,0x70
000014  6c617465          DCB      0x6c,0x61,0x74,0x65
000018  54726163          DCB      0x54,0x72,0x61,0x63
00001c  6b65723a          DCB      0x6b,0x65,0x72,0x3a
000020  3a4c7563          DCB      0x3a,0x4c,0x75,0x63
000024  61734b61          DCB      0x61,0x73,0x4b,0x61
000028  6e616465          DCB      0x6e,0x61,0x64,0x65
00002c  54726163          DCB      0x54,0x72,0x61,0x63
000030  6b65725f          DCB      0x6b,0x65,0x72,0x5f
000034  47656e65          DCB      0x47,0x65,0x6e,0x65
000038  7269633a          DCB      0x72,0x69,0x63,0x3a
00003c  3a4c7563          DCB      0x3a,0x4c,0x75,0x63
000040  61734b61          DCB      0x61,0x73,0x4b,0x61
000044  6e616465          DCB      0x6e,0x61,0x64,0x65
000048  54726163          DCB      0x54,0x72,0x61,0x63
00004c  6b65725f          DCB      0x6b,0x65,0x72,0x5f
000050  47656e65          DCB      0x47,0x65,0x6e,0x65
000054  72696328          DCB      0x72,0x69,0x63,0x28
000058  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00005c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000060  62656464          DCB      0x62,0x65,0x64,0x64
000064  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000068  5472616e          DCB      0x54,0x72,0x61,0x6e
00006c  73666f72          DCB      0x73,0x66,0x6f,0x72
000070  6d617469          DCB      0x6d,0x61,0x74,0x69
000074  6f6e733a          DCB      0x6f,0x6e,0x73,0x3a
000078  3a547261          DCB      0x3a,0x54,0x72,0x61
00007c  6e73666f          DCB      0x6e,0x73,0x66,0x6f
000080  726d5479          DCB      0x72,0x6d,0x54,0x79
000084  70652c20          DCB      0x70,0x65,0x2c,0x20
000088  636f6e73          DCB      0x63,0x6f,0x6e,0x73
00008c  7420416e          DCB      0x74,0x20,0x41,0x6e
000090  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000094  456d6265          DCB      0x45,0x6d,0x62,0x65
000098  64646564          DCB      0x64,0x64,0x65,0x64
00009c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
0000a0  7261793c          DCB      0x72,0x61,0x79,0x3c
0000a4  756e7369          DCB      0x75,0x6e,0x73,0x69
0000a8  676e6564          DCB      0x67,0x6e,0x65,0x64
0000ac  20636861          DCB      0x20,0x63,0x68,0x61
0000b0  723e2026          DCB      0x72,0x3e,0x20,0x26
0000b4  2c20636f          DCB      0x2c,0x20,0x63,0x6f
0000b8  6e737420          DCB      0x6e,0x73,0x74,0x20
0000bc  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000c0  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c4  62656464          DCB      0x62,0x65,0x64,0x64
0000c8  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000cc  51756164          DCB      0x51,0x75,0x61,0x64
0000d0  72696c61          DCB      0x72,0x69,0x6c,0x61
0000d4  74657261          DCB      0x74,0x65,0x72,0x61
0000d8  6c3c666c          DCB      0x6c,0x3c,0x66,0x6c
0000dc  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0000e0  20262c20          DCB      0x20,0x26,0x2c,0x20
0000e4  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000e8  742c2073          DCB      0x74,0x2c,0x20,0x73
0000ec  69676e65          DCB      0x69,0x67,0x6e,0x65
0000f0  6420696e          DCB      0x64,0x20,0x69,0x6e
0000f4  742c2041          DCB      0x74,0x2c,0x20,0x41
0000f8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000fc  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000100  65646465          DCB      0x65,0x64,0x64,0x65
000104  643a3a54          DCB      0x64,0x3a,0x3a,0x54
000108  72616e73          DCB      0x72,0x61,0x6e,0x73
00010c  666f726d          DCB      0x66,0x6f,0x72,0x6d
000110  6174696f          DCB      0x61,0x74,0x69,0x6f
000114  6e733a3a          DCB      0x6e,0x73,0x3a,0x3a
000118  5472616e          DCB      0x54,0x72,0x61,0x6e
00011c  73666f72          DCB      0x73,0x66,0x6f,0x72
000120  6d547970          DCB      0x6d,0x54,0x79,0x70
000124  652c2041          DCB      0x65,0x2c,0x20,0x41
000128  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00012c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000130  65646465          DCB      0x65,0x64,0x64,0x65
000134  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000138  656d6f72          DCB      0x65,0x6d,0x6f,0x72
00013c  79537461          DCB      0x79,0x53,0x74,0x61
000140  636b2026          DCB      0x63,0x6b,0x20,0x26
000144  29000000          DCB      0x29,0x00,0x00,0x00
000148  41727261          DCB      0x41,0x72,0x72,0x61
00014c  793c5479          DCB      0x79,0x3c,0x54,0x79
000150  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000154  3a676574          DCB      0x3a,0x67,0x65,0x74
000158  5f73697a          DCB      0x5f,0x73,0x69,0x7a
00015c  65000000          DCB      0x65,0x00,0x00,0x00
000160  4e656761          DCB      0x4e,0x65,0x67,0x61
000164  74697665          DCB      0x74,0x69,0x76,0x65
000168  2064696d          DCB      0x20,0x64,0x69,0x6d
00016c  656e7369          DCB      0x65,0x6e,0x73,0x69
000170  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000174  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000178  6f726574          DCB      0x6f,0x72,0x65,0x74
00017c  6563685c          DCB      0x65,0x63,0x68,0x5c
000180  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000184  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000188  6e636c75          DCB      0x6e,0x63,0x6c,0x75
00018c  64655c61          DCB      0x64,0x65,0x5c,0x61
000190  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000194  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000198  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
00019c  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0001a0  2f617272          DCB      0x2f,0x61,0x72,0x72
0001a4  61793264          DCB      0x61,0x79,0x32,0x64
0001a8  2e680000          DCB      0x2e,0x68,0x00,0x00
0001ac  74656d70          DCB      0x74,0x65,0x6d,0x70
0001b0  6c617465          DCB      0x6c,0x61,0x74,0x65
0001b4  20776964          DCB      0x20,0x77,0x69,0x64
0001b8  74687320          DCB      0x74,0x68,0x73,0x20
0001bc  616e6420          DCB      0x61,0x6e,0x64,0x20
0001c0  68656967          DCB      0x68,0x65,0x69,0x67
0001c4  68747320          DCB      0x68,0x74,0x73,0x20
0001c8  6d757374          DCB      0x6d,0x75,0x73,0x74
0001cc  20626520          DCB      0x20,0x62,0x65,0x20
0001d0  67726561          DCB      0x67,0x72,0x65,0x61
0001d4  74657220          DCB      0x74,0x65,0x72,0x20
0001d8  7468616e          DCB      0x74,0x68,0x61,0x6e
0001dc  207a6572          DCB      0x20,0x7a,0x65,0x72
0001e0  6f2c2061          DCB      0x6f,0x2c,0x20,0x61
0001e4  6e64206d          DCB      0x6e,0x64,0x20,0x6d
0001e8  756c7469          DCB      0x75,0x6c,0x74,0x69
0001ec  706c6573          DCB      0x70,0x6c,0x65,0x73
0001f0  206f6620          DCB      0x20,0x6f,0x66,0x20
0001f4  25640000          DCB      0x25,0x64,0x00,0x00
0001f8  54686520          DCB      0x54,0x68,0x65,0x20
0001fc  74656d70          DCB      0x74,0x65,0x6d,0x70
000200  6c617465          DCB      0x6c,0x61,0x74,0x65
000204  496d6167          DCB      0x49,0x6d,0x61,0x67
000208  65206d75          DCB      0x65,0x20,0x6d,0x75
00020c  73742062          DCB      0x73,0x74,0x20,0x62
000210  65206120          DCB      0x65,0x20,0x61,0x20
000214  706f7765          DCB      0x70,0x6f,0x77,0x65
000218  72206f66          DCB      0x72,0x20,0x6f,0x66
00021c  2074776f          DCB      0x20,0x74,0x77,0x6f
000220  20736d61          DCB      0x20,0x73,0x6d,0x61
000224  6c6c6572          DCB      0x6c,0x6c,0x65,0x72
000228  20746861          DCB      0x20,0x74,0x68,0x61
00022c  6e204241          DCB      0x6e,0x20,0x42,0x41
000230  53455f49          DCB      0x53,0x45,0x5f,0x49
000234  4d414745          DCB      0x4d,0x41,0x47,0x45
000238  5f574944          DCB      0x5f,0x57,0x49,0x44
00023c  544800            DCB      0x54,0x48,0x00

                          AREA ||t._ZN4Anki8Embedded5PointIfEC1Ev||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5PointIfEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point<float>::Point__sub_object()
                  _ZN4Anki8Embedded5PointIfEC1Ev PROC ; Anki::Embedded::Point<float>::Point()
;;;28     #endif
;;;29         template<typename Type> Point<Type>::Point()
;;;30           : x(static_cast<Type>(0)), y(static_cast<Type>(0))
;;;31         {
;;;32         }
;;;33     
000000  ed9f0a03          VLDR     s0,|L56.16|
000004  ed800a00          VSTR     s0,[r0,#0]
000008  ed800a01          VSTR     s0,[r0,#4]
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L56.16|
000010  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.57||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5PointIfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5PointIfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L63.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L63.56|
00000e  4b0b              LDR      r3,|L63.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L63.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L63.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L63.60|
                          DCD      ||.constdata||+0x174

                          AREA ||area_number.64||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\lucasKanade_General.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___23_lucasKanade_General_cpp_97ee21f6___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___23_lucasKanade_General_cpp_97ee21f6___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___23_lucasKanade_General_cpp_97ee21f6___Z7__REVSHi|
#line 144
|__asm___23_lucasKanade_General_cpp_97ee21f6___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
