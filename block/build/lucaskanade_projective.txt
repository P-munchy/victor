; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\lucaskanade_projective.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\lucaskanade_projective.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\lucaskanade_projective.crf ..\coretech\vision\robot\src\lucasKanade_Projective.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::UpdateTrack(const Anki::Embedded::Array<unsigned char>&, int, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
;;;48     
;;;49           Result LucasKanadeTracker_Projective::UpdateTrack(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;50             const Array<u8> &nextImage,
;;;51             const s32 maxIterations,
;;;52             const f32 convergenceTolerance,
;;;53             const u8 verify_maxPixelDifference,
;;;54             bool &verify_converged,
;;;55             s32 &verify_meanAbsoluteDifference,
;;;56             s32 &verify_numInBounds,
;;;57             s32 &verify_numSimilarPixels,
;;;58             MemoryStack scratch)
;;;59           {
000004  4606              MOV      r6,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  ed2d8b02          VPUSH    {d8}
00000e  b099              SUB      sp,sp,#0x64
;;;60             Result lastResult;
;;;61     
;;;62             for(s32 iScale=numPyramidLevels-1; iScale>=0; iScale--) {
000010  6840              LDR      r0,[r0,#4]
000012  e9dd872c          LDRD     r8,r7,[sp,#0xb0]      ;59
000016  9d2a              LDR      r5,[sp,#0xa8]
000018  1e44              SUBS     r4,r0,#1
00001a  eeb08a40          VMOV.F32 s16,s0                ;59
00001e  2c00              CMP      r4,#0
000020  bfa4              ITT      GE
000022  f04f0900          MOVGE    r9,#0
;;;63               verify_converged = false;
;;;64     
;;;65               BeginBenchmark("UpdateTrack.refineTranslation");
;;;66               if((lastResult = IterativelyRefineTrack(nextImage, maxIterations, iScale, convergenceTolerance, Transformations::TRANSFORM_TRANSLATION, verify_converged, scratch)) != RESULT_OK)
000026  f44f7a00          MOVGE    r10,#0x200
00002a  db45              BLT      |L1.184|
                  |L1.44|
00002c  f8859000          STRB     r9,[r5,#0]            ;63
000030  a02b              ADR      r0,|L1.224|
000032  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000036  a80a              ADD      r0,sp,#0x28
000038  992e              LDR      r1,[sp,#0xb8]
00003a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00003e  f8cda000          STR      r10,[sp,#0]
000042  e9cd5001          STRD     r5,r0,[sp,#4]
000046  e9dd121e          LDRD     r1,r2,[sp,#0x78]
00004a  eeb00a48          VMOV.F32 s0,s16
00004e  4623              MOV      r3,r4
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
000056  2800              CMP      r0,#0
;;;67                 return lastResult;
;;;68               EndBenchmark("UpdateTrack.refineTranslation");
;;;69     
;;;70               if(this->transformation.get_transformType() != Transformations::TRANSFORM_TRANSLATION) {
;;;71                 BeginBenchmark("UpdateTrack.refineOther");
;;;72                 if((lastResult = IterativelyRefineTrack(nextImage, maxIterations, iScale, convergenceTolerance, this->transformation.get_transformType(), verify_converged, scratch)) != RESULT_OK)
;;;73                   return lastResult;
;;;74                 EndBenchmark("UpdateTrack.refineOther");
;;;75               }
;;;76             } // for(s32 iScale=numPyramidLevels; iScale>=0; iScale--)
;;;77     
;;;78             lastResult = this->VerifyTrack_Projective(
;;;79               nextImage,
;;;80               verify_maxPixelDifference,
;;;81               verify_meanAbsoluteDifference, verify_numInBounds, verify_numSimilarPixels,
;;;82               scratch);
;;;83     
;;;84             return lastResult;
;;;85           }
000058  bf1f              ITTTT    NE
00005a  b019              ADDNE    sp,sp,#0x64
00005c  ecbd8b02          VPOPNE   {d8}
000060  b006              ADDNE    sp,sp,#0x18
000062  e8bd8ff0          POPNE    {r4-r11,pc}
000066  a01e              ADR      r0,|L1.224|
000068  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00006c  f1060018          ADD      r0,r6,#0x18           ;70
000070  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000074  f5b07f00          CMP      r0,#0x200             ;70
000078  d01c              BEQ      |L1.180|
00007a  a021              ADR      r0,|L1.256|
00007c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000080  a811              ADD      r0,sp,#0x44           ;72
000082  992e              LDR      r1,[sp,#0xb8]         ;72
000084  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000088  4683              MOV      r11,r0                ;72
00008a  f1060018          ADD      r0,r6,#0x18           ;72
00008e  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000092  e9cd0500          STRD     r0,r5,[sp,#0]         ;72
000096  e9dd121e          LDRD     r1,r2,[sp,#0x78]      ;72
00009a  eeb00a48          VMOV.F32 s0,s16                ;72
00009e  4623              MOV      r3,r4                 ;72
0000a0  f8cdb008          STR      r11,[sp,#8]           ;72
0000a4  4630              MOV      r0,r6                 ;72
0000a6  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
0000aa  2800              CMP      r0,#0                 ;72
0000ac  d112              BNE      |L1.212|
0000ae  a014              ADR      r0,|L1.256|
0000b0  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
                  |L1.180|
0000b4  1e64              SUBS     r4,r4,#1              ;62
0000b6  d5b9              BPL      |L1.44|
                  |L1.184|
0000b8  a803              ADD      r0,sp,#0xc            ;78
0000ba  992e              LDR      r1,[sp,#0xb8]         ;78
0000bc  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0000c0  f8cd8000          STR      r8,[sp,#0]            ;78
0000c4  e9cd7001          STRD     r7,r0,[sp,#4]         ;78
0000c8  4630              MOV      r0,r6                 ;78
0000ca  9b2b              LDR      r3,[sp,#0xac]         ;78
0000cc  9a20              LDR      r2,[sp,#0x80]         ;78
0000ce  991e              LDR      r1,[sp,#0x78]         ;78
0000d0  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::VerifyTrack_Projective(const Anki::Embedded::Array<unsigned char>&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const
                  |L1.212|
0000d4  b019              ADD      sp,sp,#0x64
0000d6  ecbd8b02          VPOP     {d8}
0000da  b006              ADD      sp,sp,#0x18
0000dc  e8bd8ff0          POP      {r4-r11,pc}
;;;86     
                          ENDP

                  |L1.224|
0000e0  55706461          DCB      "UpdateTrack.refineTranslation",0
0000e4  74655472
0000e8  61636b2e
0000ec  72656669
0000f0  6e655472
0000f4  616e736c
0000f8  6174696f
0000fc  6e00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L1.256|
000100  55706461          DCB      "UpdateTrack.refineOther",0
000104  74655472
000108  61636b2e
00010c  72656669
000110  6e654f74
000114  68657200

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
;;;86     
;;;87           Result LucasKanadeTracker_Projective::IterativelyRefineTrack(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, const Transformations::TransformType curTransformType, bool &verify_converged, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;88           {
000004  460e              MOV      r6,r1
000006  ed2d8b02          VPUSH    {d8}
00000a  b089              SUB      sp,sp,#0x24
00000c  4607              MOV      r7,r0
00000e  e9dd5414          LDRD     r5,r4,[sp,#0x50]
000012  eeb08a40          VMOV.F32 s16,s0
000016  469a              MOV      r10,r3
000018  4693              MOV      r11,r2
;;;89             const s32 nextImageHeight = nextImage.get_size(0);
00001a  2100              MOVS     r1,#0
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;90             const s32 nextImageWidth = nextImage.get_size(1);
000022  9000              STR      r0,[sp,#0]
000024  2101              MOVS     r1,#1
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00002c  4681              MOV      r9,r0
;;;91     
;;;92             AnkiConditionalErrorAndReturnValue(this->IsValid() == true,
00002e  4638              MOV      r0,r7
000030  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Fast7IsValidEv ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::IsValid() const
000034  f8df817c          LDR      r8,|L2.436|
000038  2800              CMP      r0,#0
00003a  d01f              BEQ      |L2.124|
00003c  6930              LDR      r0,[r6,#0x10]
00003e  2800              CMP      r0,#0
000040  d027              BEQ      |L2.146|
000042  6830              LDR      r0,[r6,#0]
000044  2800              CMP      r0,#0
000046  bfa4              ITT      GE
000048  6870              LDRGE    r0,[r6,#4]
00004a  2800              CMPGE    r0,#0
00004c  db21              BLT      |L2.146|
;;;93               RESULT_FAIL, "LucasKanadeTracker_Projective::IterativelyRefineTrack", "This object is not initialized");
;;;94     
;;;95             AnkiConditionalErrorAndReturnValue(nextImage.IsValid(),
;;;96               RESULT_FAIL_INVALID_OBJECT, "LucasKanadeTracker_Projective::IterativelyRefineTrack", "nextImage is not valid");
;;;97     
;;;98             AnkiConditionalErrorAndReturnValue(maxIterations > 0 && maxIterations < 1000,
00004e  f1bb0f00          CMP      r11,#0
000052  dd03              BLE      |L2.92|
000054  f5bb7f7a          CMP      r11,#0x3e8
000058  f2c08027          BLT.W    |L2.170|
                  |L2.92|
00005c  2062              MOVS     r0,#0x62
00005e  e9cd8000          STRD     r8,r0,[sp,#0]
000062  a355              ADR      r3,|L2.440|
000064  a262              ADR      r2,|L2.496|
000066  a171              ADR      r1,|L2.556|
000068  2005              MOVS     r0,#5
00006a  f7fffffe          BL       _Anki_Log
00006e  f04f7040          MOV      r0,#0x3000000
                  |L2.114|
;;;99               RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_Projective::IterativelyRefineTrack", "maxIterations must be greater than zero and less than 1000");
;;;100    
;;;101            AnkiConditionalErrorAndReturnValue(whichScale >= 0 && whichScale < this->numPyramidLevels,
;;;102              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_Projective::IterativelyRefineTrack", "whichScale is invalid");
;;;103    
;;;104            AnkiConditionalErrorAndReturnValue(convergenceTolerance > 0.0f,
;;;105              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_Projective::IterativelyRefineTrack", "convergenceTolerance must be greater than zero");
;;;106    
;;;107            AnkiConditionalErrorAndReturnValue(nextImageHeight == templateImageHeight && nextImageWidth == templateImageWidth,
;;;108              RESULT_FAIL_INVALID_SIZE, "LucasKanadeTracker_Projective::IterativelyRefineTrack", "nextImage must be the same size as the template");
;;;109    
;;;110            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
;;;111            const s32 initialImagePowerS32 = Log2u32(static_cast<u32>(initialImageScaleS32));
;;;112    
;;;113            AnkiConditionalErrorAndReturnValue(((1<<initialImagePowerS32)*nextImageWidth) == BASE_IMAGE_WIDTH,
;;;114              RESULT_FAIL_INVALID_SIZE, "LucasKanadeTracker_Projective::IterativelyRefineTrack", "The templateImage must be a power of two smaller than BASE_IMAGE_WIDTH");
;;;115    
;;;116            if(curTransformType == Transformations::TRANSFORM_TRANSLATION) {
;;;117              return IterativelyRefineTrack_Translation(nextImage, maxIterations, whichScale, convergenceTolerance, verify_converged, scratch);
;;;118            } else if(curTransformType == Transformations::TRANSFORM_AFFINE) {
;;;119              return IterativelyRefineTrack_Affine(nextImage, maxIterations, whichScale, convergenceTolerance, verify_converged, scratch);
;;;120            } else if(curTransformType == Transformations::TRANSFORM_PROJECTIVE) {
;;;121              return IterativelyRefineTrack_Projective(nextImage, maxIterations, whichScale, convergenceTolerance, verify_converged, scratch);
;;;122            }
;;;123    
;;;124            return RESULT_FAIL;
;;;125          } // Result LucasKanadeTracker_Projective::IterativelyRefineTrack(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, const TransformType curTransformType, bool &verify_converged, MemoryStack scratch)
000072  b009              ADD      sp,sp,#0x24
000074  ecbd8b02          VPOP     {d8}
000078  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.124|
00007c  205c              MOVS     r0,#0x5c              ;92
00007e  e9cd8000          STRD     r8,r0,[sp,#0]         ;92
000082  a34d              ADR      r3,|L2.440|
000084  a277              ADR      r2,|L2.612|
000086  a169              ADR      r1,|L2.556|
000088  2005              MOVS     r0,#5                 ;92
00008a  f7fffffe          BL       _Anki_Log
00008e  2001              MOVS     r0,#1                 ;92
000090  e7ef              B        |L2.114|
                  |L2.146|
000092  205f              MOVS     r0,#0x5f              ;95
000094  e9cd8000          STRD     r8,r0,[sp,#0]         ;95
000098  a347              ADR      r3,|L2.440|
00009a  a27a              ADR      r2,|L2.644|
00009c  a163              ADR      r1,|L2.556|
00009e  2005              MOVS     r0,#5                 ;95
0000a0  f7fffffe          BL       _Anki_Log
0000a4  f04f6080          MOV      r0,#0x4000000         ;95
0000a8  e7e3              B        |L2.114|
                  |L2.170|
0000aa  f1ba0f00          CMP      r10,#0                ;101
0000ae  bfa4              ITT      GE                    ;101
0000b0  6878              LDRGE    r0,[r7,#4]            ;101
0000b2  4550              CMPGE    r0,r10                ;101
0000b4  dc0b              BGT      |L2.206|
0000b6  2065              MOVS     r0,#0x65              ;101
0000b8  e9cd8000          STRD     r8,r0,[sp,#0]         ;101
0000bc  a33e              ADR      r3,|L2.440|
0000be  a277              ADR      r2,|L2.668|
0000c0  a15a              ADR      r1,|L2.556|
0000c2  2005              MOVS     r0,#5                 ;101
0000c4  f7fffffe          BL       _Anki_Log
0000c8  f04f7040          MOV      r0,#0x3000000         ;101
0000cc  e7d1              B        |L2.114|
                  |L2.206|
0000ce  eeb58ac0          VCMPE.F32 s16,#0.0              ;104
0000d2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;104
0000d6  d80b              BHI      |L2.240|
0000d8  2068              MOVS     r0,#0x68              ;104
0000da  e9cd8000          STRD     r8,r0,[sp,#0]         ;104
0000de  a336              ADR      r3,|L2.440|
0000e0  a274              ADR      r2,|L2.692|
0000e2  a152              ADR      r1,|L2.556|
0000e4  2005              MOVS     r0,#5                 ;104
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f04f7040          MOV      r0,#0x3000000         ;104
0000ee  e7c0              B        |L2.114|
                  |L2.240|
0000f0  68b9              LDR      r1,[r7,#8]            ;107
0000f2  9800              LDR      r0,[sp,#0]            ;107
0000f4  4281              CMP      r1,r0                 ;107
0000f6  bf04              ITT      EQ                    ;107
0000f8  68f8              LDREQ    r0,[r7,#0xc]          ;107
0000fa  4548              CMPEQ    r0,r9                 ;107
0000fc  d00b              BEQ      |L2.278|
0000fe  206b              MOVS     r0,#0x6b              ;107
000100  e9cd8000          STRD     r8,r0,[sp,#0]         ;107
000104  a32c              ADR      r3,|L2.440|
000106  a277              ADR      r2,|L2.740|
000108  a148              ADR      r1,|L2.556|
00010a  2005              MOVS     r0,#5                 ;107
00010c  f7fffffe          BL       _Anki_Log
000110  f04f60a0          MOV      r0,#0x5000000         ;107
000114  e7ad              B        |L2.114|
                  |L2.278|
000116  f44f70a0          MOV      r0,#0x140             ;110
00011a  fb90f0f9          SDIV     r0,r0,r9              ;110
00011e  f7fffffe          BL       Log2u32
000122  fa09f000          LSL      r0,r9,r0              ;113
000126  f5b07fa0          CMP      r0,#0x140             ;113
00012a  d00b              BEQ      |L2.324|
00012c  2071              MOVS     r0,#0x71              ;113
00012e  e9cd8000          STRD     r8,r0,[sp,#0]         ;113
000132  a321              ADR      r3,|L2.440|
000134  4a77              LDR      r2,|L2.788|
000136  a13d              ADR      r1,|L2.556|
000138  2005              MOVS     r0,#5                 ;113
00013a  f7fffffe          BL       _Anki_Log
00013e  f04f60a0          MOV      r0,#0x5000000         ;113
000142  e796              B        |L2.114|
                  |L2.324|
000144  f5b57f00          CMP      r5,#0x200             ;116
000148  d016              BEQ      |L2.376|
00014a  f5b56fc0          CMP      r5,#0x600             ;118
00014e  d022              BEQ      |L2.406|
000150  f5b56f00          CMP      r5,#0x800             ;120
000154  bf18              IT       NE                    ;124
000156  2001              MOVNE    r0,#1                 ;124
000158  d18b              BNE      |L2.114|
00015a  a802              ADD      r0,sp,#8              ;121
00015c  9916              LDR      r1,[sp,#0x58]         ;121
00015e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000162  e9cd4000          STRD     r4,r0,[sp,#0]         ;121
000166  eeb00a48          VMOV.F32 s0,s16                ;121
00016a  4653              MOV      r3,r10                ;121
00016c  465a              MOV      r2,r11                ;121
00016e  4631              MOV      r1,r6                 ;121
000170  4638              MOV      r0,r7                 ;121
000172  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::IterativelyRefineTrack_Projective(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
000176  e77c              B        |L2.114|
                  |L2.376|
000178  a802              ADD      r0,sp,#8              ;117
00017a  9916              LDR      r1,[sp,#0x58]         ;117
00017c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000180  e9cd4000          STRD     r4,r0,[sp,#0]         ;117
000184  eeb00a48          VMOV.F32 s0,s16                ;117
000188  4653              MOV      r3,r10                ;117
00018a  465a              MOV      r2,r11                ;117
00018c  4631              MOV      r1,r6                 ;117
00018e  4638              MOV      r0,r7                 ;117
000190  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::IterativelyRefineTrack_Translation(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
000194  e76d              B        |L2.114|
                  |L2.406|
000196  a802              ADD      r0,sp,#8              ;119
000198  9916              LDR      r1,[sp,#0x58]         ;119
00019a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00019e  e9cd4000          STRD     r4,r0,[sp,#0]         ;119
0001a2  eeb00a48          VMOV.F32 s0,s16                ;119
0001a6  4653              MOV      r3,r10                ;119
0001a8  465a              MOV      r2,r11                ;119
0001aa  4631              MOV      r1,r6                 ;119
0001ac  4638              MOV      r0,r7                 ;119
0001ae  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::IterativelyRefineTrack_Affine(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
0001b2  e75e              B        |L2.114|
;;;126    
                          ENDP

                  |L2.436|
                          DCD      ||.constdata||
                  |L2.440|
0001b8  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\lucasKanade_Projectiv"
0001bc  6f726574
0001c0  6563685c
0001c4  76697369
0001c8  6f6e5c72
0001cc  6f626f74
0001d0  5c737263
0001d4  5c6c7563
0001d8  61734b61
0001dc  6e616465
0001e0  5f50726f
0001e4  6a656374
0001e8  6976    
0001ea  652e6370          DCB      "e.cpp",0
0001ee  7000    
                  |L2.496|
0001f0  6d617849          DCB      "maxIterations must be greater than zero and less than 1"
0001f4  74657261
0001f8  74696f6e
0001fc  73206d75
000200  73742062
000204  65206772
000208  65617465
00020c  72207468
000210  616e207a
000214  65726f20
000218  616e6420
00021c  6c657373
000220  20746861
000224  6e2031  
000227  30303000          DCB      "000",0
00022b  00                DCB      0
                  |L2.556|
00022c  4c756361          DCB      "LucasKanadeTracker_Projective::IterativelyRefineTrack",0
000230  734b616e
000234  61646554
000238  7261636b
00023c  65725f50
000240  726f6a65
000244  63746976
000248  653a3a49
00024c  74657261
000250  74697665
000254  6c795265
000258  66696e65
00025c  54726163
000260  6b00    
000262  00                DCB      0
000263  00                DCB      0
                  |L2.612|
000264  54686973          DCB      "This object is not initialized",0
000268  206f626a
00026c  65637420
000270  6973206e
000274  6f742069
000278  6e697469
00027c  616c697a
000280  656400  
000283  00                DCB      0
                  |L2.644|
000284  6e657874          DCB      "nextImage is not valid",0
000288  496d6167
00028c  65206973
000290  206e6f74
000294  2076616c
000298  696400  
00029b  00                DCB      0
                  |L2.668|
00029c  77686963          DCB      "whichScale is invalid",0
0002a0  68536361
0002a4  6c652069
0002a8  7320696e
0002ac  76616c69
0002b0  6400    
0002b2  00                DCB      0
0002b3  00                DCB      0
                  |L2.692|
0002b4  636f6e76          DCB      "convergenceTolerance must be greater than zero",0
0002b8  65726765
0002bc  6e636554
0002c0  6f6c6572
0002c4  616e6365
0002c8  206d7573
0002cc  74206265
0002d0  20677265
0002d4  61746572
0002d8  20746861
0002dc  6e207a65
0002e0  726f00  
0002e3  00                DCB      0
                  |L2.740|
0002e4  6e657874          DCB      "nextImage must be the same size as the template",0
0002e8  496d6167
0002ec  65206d75
0002f0  73742062
0002f4  65207468
0002f8  65207361
0002fc  6d652073
000300  697a6520
000304  61732074
000308  68652074
00030c  656d706c
000310  61746500
                  |L2.788|
                          DCD      ||.constdata||+0x24c

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::IterativelyRefineTrack_Affine(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
;;;314    
;;;315          Result LucasKanadeTracker_Projective::IterativelyRefineTrack_Affine(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;316          {
000004  461c              MOV      r4,r3
000006  ed2d0b02          VPUSH    {d0}
00000a  4688              MOV      r8,r1
00000c  4681              MOV      r9,r0
00000e  ed2d8b10          VPUSH    {d8-d15}
000012  b0f1              SUB      sp,sp,#0x1c4
;;;317            // This method is heavily based on Interp2_Projective
;;;318            // The call would be like: Interp2_Projective<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;319    
;;;320            Result lastResult;
;;;321    
;;;322            Array<f32> AWAt(6, 6, scratch);
000014  2300              MOVS     r3,#0
000016  461a              MOV      r2,r3
000018  2101              MOVS     r1,#1
00001a  a86f              ADD      r0,sp,#0x1bc
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000020  6800              LDR      r0,[r0,#0]
000022  9000              STR      r0,[sp,#0]
000024  2206              MOVS     r2,#6
000026  4611              MOV      r1,r2
000028  a83a              ADD      r0,sp,#0xe8
00002a  9b91              LDR      r3,[sp,#0x244]
00002c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;323            Array<f32> b(1, 6, scratch);
000030  2300              MOVS     r3,#0
000032  461a              MOV      r2,r3
000034  2101              MOVS     r1,#1
000036  a86e              ADD      r0,sp,#0x1b8
000038  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00003c  6800              LDR      r0,[r0,#0]
00003e  9000              STR      r0,[sp,#0]
000040  2206              MOVS     r2,#6
000042  2101              MOVS     r1,#1
000044  a83f              ADD      r0,sp,#0xfc
000046  9b91              LDR      r3,[sp,#0x244]
000048  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;324    
;;;325            // These addresses should be known at compile time, so should be faster
;;;326            f32 AWAt_raw[6][6];
;;;327            f32 b_raw[6];
;;;328    
;;;329            verify_converged = false;
00004c  9890              LDR      r0,[sp,#0x240]
00004e  2100              MOVS     r1,#0
000050  7001              STRB     r1,[r0,#0]
;;;330    
;;;331            const s32 nextImageHeight = nextImage.get_size(0);
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000058  ee090a10          VMOV     s18,r0
;;;332            const s32 nextImageWidth = nextImage.get_size(1);
00005c  2101              MOVS     r1,#1
00005e  4640              MOV      r0,r8
000060  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000064  4607              MOV      r7,r0
;;;333    
;;;334            const f32 scale = static_cast<f32>(1 << whichScale);
000066  2001              MOVS     r0,#1
000068  40a0              LSLS     r0,r0,r4
00006a  ee000a10          VMOV     s0,r0
;;;335    
;;;336            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
00006e  f44f70a0          MOV      r0,#0x140
000072  fb90f0f7          SDIV     r0,r0,r7
000076  eef89ac0          VCVT.F32.S32 s19,s0                ;334
;;;337            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
00007a  ee000a10          VMOV     s0,r0
00007e  eeb80ac0          VCVT.F32.S32 s0,s0
000082  ed8d0a00          VSTR     s0,[sp,#0]
;;;338    
;;;339            const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
;;;340            const f32 scaleOverFiveTen = scale / (2.0f*255.0f);
000086  ed9f0afe          VLDR     s0,|L3.1152|
;;;341    
;;;342            //const Point<f32>& centerOffset = this->transformation.get_centerOffset();
;;;343            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
00008a  f1090118          ADD      r1,r9,#0x18
00008e  a854              ADD      r0,sp,#0x150
000090  eec9ba80          VDIV.F32 s23,s19,s0            ;340
000094  ed9d0a00          VLDR     s0,[sp,#0]
000098  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;344    
;;;345            // Initialize with some very extreme coordinates
;;;346            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
00009c  2300              MOVS     r3,#0
00009e  461a              MOV      r2,r3
0000a0  2101              MOVS     r1,#1
0000a2  a86e              ADD      r0,sp,#0x1b8
0000a4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000a8  6803              LDR      r3,[r0,#0]
0000aa  2102              MOVS     r1,#2
0000ac  a826              ADD      r0,sp,#0x98
0000ae  9a91              LDR      r2,[sp,#0x244]
0000b0  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;347    
;;;348            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
0000b4  2500              MOVS     r5,#0
;;;349              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
0000b6  ed9f8af3          VLDR     s16,|L3.1156|
                  |L3.186|
0000ba  9832              LDR      r0,[sp,#0xc8]
0000bc  ed8d8a4c          VSTR     s16,[sp,#0x130]
0000c0  ed8d8a4d          VSTR     s16,[sp,#0x134]
0000c4  ed8d8a4e          VSTR     s16,[sp,#0x138]
0000c8  ed8d8a4f          VSTR     s16,[sp,#0x13c]
0000cc  ed8d8a50          VSTR     s16,[sp,#0x140]
0000d0  ed8d8a51          VSTR     s16,[sp,#0x144]
0000d4  eb001645          ADD      r6,r0,r5,LSL #5
0000d8  ed8d8a52          VSTR     s16,[sp,#0x148]
0000dc  a844              ADD      r0,sp,#0x110
0000de  ed8d8a53          VSTR     s16,[sp,#0x14c]
0000e2  2304              MOVS     r3,#4
0000e4  2208              MOVS     r2,#8
0000e6  49e8              LDR      r1,|L3.1160|
0000e8  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0000ec  ed9d0a4c          VLDR     s0,[sp,#0x130]
0000f0  4603              MOV      r3,r0
0000f2  ed800a00          VSTR     s0,[r0,#0]
0000f6  ed9d0a4d          VLDR     s0,[sp,#0x134]
0000fa  ed800a01          VSTR     s0,[r0,#4]
0000fe  3008              ADDS     r0,r0,#8
000100  ed9d0a4e          VLDR     s0,[sp,#0x138]
000104  ed800a00          VSTR     s0,[r0,#0]
000108  ed9d0a4f          VLDR     s0,[sp,#0x13c]
00010c  ed800a01          VSTR     s0,[r0,#4]
000110  ed9d0a50          VLDR     s0,[sp,#0x140]
000114  2000              MOVS     r0,#0
000116  ed830a04          VSTR     s0,[r3,#0x10]
00011a  ed9d0a51          VLDR     s0,[sp,#0x144]
00011e  ed830a05          VSTR     s0,[r3,#0x14]
000122  ed9d0a52          VLDR     s0,[sp,#0x148]
000126  ed830a06          VSTR     s0,[r3,#0x18]
00012a  ed9d0a53          VLDR     s0,[sp,#0x14c]
00012e  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L3.306|
000132  eb0301c0          ADD      r1,r3,r0,LSL #3
000136  eb0602c0          ADD      r2,r6,r0,LSL #3
00013a  ed910a00          VLDR     s0,[r1,#0]
00013e  1c40              ADDS     r0,r0,#1
000140  ed820a00          VSTR     s0,[r2,#0]
000144  ed910a01          VLDR     s0,[r1,#4]
000148  2804              CMP      r0,#4
00014a  ed820a01          VSTR     s0,[r2,#4]
00014e  dbf0              BLT      |L3.306|
000150  1c6d              ADDS     r5,r5,#1              ;348
000152  2d02              CMP      r5,#2                 ;348
000154  dbb1              BLT      |L3.186|
;;;350            }
;;;351    
;;;352            Meshgrid<f32> originalCoordinates(
000156  ed998a05          VLDR     s16,[r9,#0x14]
00015a  ee880a29          VDIV.F32 s0,s16,s19
00015e  ed9faacb          VLDR     s20,|L3.1164|
000162  ee300a0a          VADD.F32 s0,s0,s20
000166  f7fffffe          BL       __hardfp_floorf
00016a  eebd0ac0          VCVT.S32.F32 s0,s0
00016e  eeb6ba00          VMOV.F32 s22,#0.50000000
000172  eefeaa00          VMOV.F32 s21,#-0.50000000
000176  ee101a10          VMOV     r1,s0
00017a  ee680a0b          VMUL.F32 s1,s16,s22
00017e  ee280a2a          VMUL.F32 s0,s16,s21
000182  a844              ADD      r0,sp,#0x110
000184  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
000188  ed998a04          VLDR     s16,[r9,#0x10]
00018c  e9dd5644          LDRD     r5,r6,[sp,#0x110]
000190  ee880a29          VDIV.F32 s0,s16,s19
000194  f8dda118          LDR      r10,[sp,#0x118]
000198  ee300a0a          VADD.F32 s0,s0,s20
00019c  f7fffffe          BL       __hardfp_floorf
0001a0  eebd0ac0          VCVT.S32.F32 s0,s0
0001a4  ee680a0b          VMUL.F32 s1,s16,s22
0001a8  a847              ADD      r0,sp,#0x11c
0001aa  ee101a10          VMOV     r1,s0
0001ae  ee280a2a          VMUL.F32 s0,s16,s21
0001b2  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
0001b6  e9dd0147          LDRD     r0,r1,[sp,#0x11c]
;;;353              Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;354              Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;355    
;;;356            // Unused, remove?
;;;357            //const s32 outHeight = originalCoordinates.get_yGridVector().get_size();
;;;358            //const s32 outWidth = originalCoordinates.get_xGridVector().get_size();
;;;359    
;;;360            const f32 xyReferenceMin = 0.0f;
;;;361            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
0001ba  ee007a10          VMOV     s0,r7
0001be  9a49              LDR      r2,[sp,#0x124]
0001c0  eef7ca00          VMOV.F32 s25,#1.00000000
0001c4  eeb80ac0          VCVT.F32.S32 s0,s0
0001c8  f8cda0d8          STR      r10,[sp,#0xd8]
0001cc  9239              STR      r2,[sp,#0xe4]
0001ce  e9cd0137          STRD     r0,r1,[sp,#0xdc]
0001d2  ee300a6c          VSUB.F32 s0,s0,s25
0001d6  e9cd5634          STRD     r5,r6,[sp,#0xd0]
0001da  ed8d0a61          VSTR     s0,[sp,#0x184]
;;;362            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
0001de  eeb80ac9          VCVT.F32.S32 s0,s18
0001e2  ee300a6c          VSUB.F32 s0,s0,s25
0001e6  ed8d0a60          VSTR     s0,[sp,#0x180]
;;;363    
;;;364            const LinearSequence<f32> &yGridVector = originalCoordinates.get_yGridVector();
;;;365            const LinearSequence<f32> &xGridVector = originalCoordinates.get_xGridVector();
;;;366    
;;;367            const f32 yGridStart = yGridVector.get_start();
;;;368            const f32 xGridStart = xGridVector.get_start();
;;;369    
;;;370            const f32 yGridDelta = yGridVector.get_increment();
;;;371            const f32 xGridDelta = xGridVector.get_increment();
;;;372    
;;;373            const s32 yIterationMax = yGridVector.get_size();
0001ea  e9cd2a64          STRD     r2,r10,[sp,#0x190]
0001ee  9052              STR      r0,[sp,#0x148]
;;;374            const s32 xIterationMax = xGridVector.get_size();
;;;375    
;;;376            for(s32 iteration=0; iteration<maxIterations; iteration++) {
0001f0  e9cd1662          STRD     r1,r6,[sp,#0x188]
0001f4  2000              MOVS     r0,#0
0001f6  9051              STR      r0,[sp,#0x144]
0001f8  9885              LDR      r0,[sp,#0x214]
0001fa  46aa              MOV      r10,r5
0001fc  2800              CMP      r0,#0
0001fe  f3408226          BLE.W    |L3.1614|
000202  eb040084          ADD      r0,r4,r4,LSL #2
;;;377              const Array<f32> &homography = this->transformation.get_homography();
;;;378              const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
;;;379              const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
;;;380              const f32 h20 = homography[2][0] * initialImageScaleF32; const f32 h21 = homography[2][1] * initialImageScaleF32; //const f32 h22 = 1.0f;
;;;381    
;;;382              //AWAt.SetZero();
;;;383              //b.SetZero();
;;;384    
;;;385              for(s32 ia=0; ia<6; ia++) {
;;;386                for(s32 ja=0; ja<6; ja++) {
;;;387                  AWAt_raw[ia][ja] = 0;
;;;388                }
;;;389                b_raw[ia] = 0;
;;;390              }
;;;391    
;;;392              s32 numInBounds = 0;
;;;393    
;;;394              // TODO: make the x and y limits from 1 to end-2
;;;395    
;;;396              f32 yOriginal = yGridStart;
;;;397              for(s32 y=0; y<yIterationMax; y++) {
;;;398                const u8 * restrict pTemplateImage = this->templateImagePyramid[whichScale].Pointer(y, 0);
;;;399    
;;;400                const s16 * restrict pTemplateImageXGradient = this->templateImageXGradientPyramid[whichScale].Pointer(y, 0);
;;;401                const s16 * restrict pTemplateImageYGradient = this->templateImageYGradientPyramid[whichScale].Pointer(y, 0);
;;;402    
;;;403                f32 xOriginal = xGridStart;
;;;404    
;;;405                for(s32 x=0; x<xIterationMax; x++) {
;;;406                  // TODO: These two could be strength reduced
;;;407                  const f32 xTransformedRaw = h00*xOriginal + h01*yOriginal + h02;
;;;408                  const f32 yTransformedRaw = h10*xOriginal + h11*yOriginal + h12;
;;;409    
;;;410                  const f32 normalization = h20*xOriginal + h21*yOriginal + 1.0f;
;;;411    
;;;412                  const f32 xTransformed = (xTransformedRaw / normalization) + centerOffsetScaled.x;
;;;413                  const f32 yTransformed = (yTransformedRaw / normalization) + centerOffsetScaled.y;
;;;414    
;;;415                  xOriginal += xGridDelta;
;;;416    
;;;417                  const f32 x0 = FLT_FLOOR(xTransformed);
;;;418                  const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
;;;419    
;;;420                  const f32 y0 = FLT_FLOOR(yTransformed);
;;;421                  const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
;;;422    
;;;423                  // If out of bounds, continue
;;;424                  if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;425                    continue;
;;;426                  }
;;;427    
;;;428                  numInBounds++;
;;;429    
;;;430                  const f32 alphaX = xTransformed - x0;
;;;431                  const f32 alphaXinverse = 1 - alphaX;
;;;432    
;;;433                  const f32 alphaY = yTransformed - y0;
;;;434                  const f32 alphaYinverse = 1.0f - alphaY;
;;;435    
;;;436                  const s32 y0S32 = Round<s32>(y0);
;;;437                  const s32 y1S32 = Round<s32>(y1);
;;;438                  const s32 x0S32 = Round<s32>(x0);
;;;439    
;;;440                  const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;441                  const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;442    
;;;443                  const f32 pixelTL = *pReference_y0;
;;;444                  const f32 pixelTR = *(pReference_y0+1);
;;;445                  const f32 pixelBL = *pReference_y1;
;;;446                  const f32 pixelBR = *(pReference_y1+1);
;;;447    
;;;448                  const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;449    
;;;450                  //const u8 interpolatedPixel = static_cast<u8>(Round(interpolatedPixelF32));
;;;451    
;;;452                  // This block is the non-interpolation part of the per-sample algorithm
;;;453                  {
;;;454                    const f32 templatePixelValue = static_cast<f32>(pTemplateImage[x]);
;;;455                    const f32 xGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageXGradient[x]);
;;;456                    const f32 yGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageYGradient[x]);
;;;457    
;;;458                    const f32 tGradientValue = oneOverTwoFiftyFive * (interpolatedPixelF32 - templatePixelValue);
;;;459    
;;;460                    //CoreTechPrint("%f ", xOriginal);
;;;461                    const f32 values[6] = {
000206  af44              ADD      r7,sp,#0x110
000208  f50d7bac          ADD      r11,sp,#0x158         ;327
00020c  9033              STR      r0,[sp,#0xcc]         ;327
                  |L3.526|
00020e  f1090018          ADD      r0,r9,#0x18           ;377
000212  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
000216  6902              LDR      r2,[r0,#0x10]         ;377
000218  6881              LDR      r1,[r0,#8]            ;377
00021a  2300              MOVS     r3,#0                 ;378
00021c  fb032001          MLA      r0,r3,r1,r2           ;378
000220  ed900a00          VLDR     s0,[r0,#0]            ;378
000224  ed8d0a6d          VSTR     s0,[sp,#0x1b4]        ;378
000228  ed900a01          VLDR     s0,[r0,#4]            ;378
00022c  ed8d0a6c          VSTR     s0,[sp,#0x1b0]        ;378
000230  ed901a02          VLDR     s2,[r0,#8]            ;378
000234  eddd0a00          VLDR     s1,[sp,#0]            ;378
000238  2001              MOVS     r0,#1                 ;379
00023a  fb002001          MLA      r0,r0,r1,r2           ;379
00023e  ee810a20          VDIV.F32 s0,s2,s1              ;378
000242  ed8d0a6b          VSTR     s0,[sp,#0x1ac]        ;378
000246  ed900a00          VLDR     s0,[r0,#0]            ;379
00024a  ed8d0a6a          VSTR     s0,[sp,#0x1a8]        ;379
00024e  edd00a02          VLDR     s1,[r0,#8]            ;379
000252  ed9d0a00          VLDR     s0,[sp,#0]            ;379
000256  edd0fa01          VLDR     s31,[r0,#4]           ;379
00025a  2002              MOVS     r0,#2                 ;380
00025c  ee80fa80          VDIV.F32 s30,s1,s0             ;379
000260  fb002001          MLA      r0,r0,r1,r2           ;379
000264  2100              MOVS     r1,#0                 ;385
000266  edd00a00          VLDR     s1,[r0,#0]            ;380
00026a  ee60ea80          VMUL.F32 s29,s1,s0             ;380
00026e  edd00a01          VLDR     s1,[r0,#4]            ;380
000272  ee20ea80          VMUL.F32 s28,s1,s0             ;380
000276  ed9f0a86          VLDR     s0,|L3.1168|
00027a  ab02              ADD      r3,sp,#8              ;326
                  |L3.636|
00027c  eb010241          ADD      r2,r1,r1,LSL #1       ;387
000280  2000              MOVS     r0,#0                 ;386
000282  eb0302c2          ADD      r2,r3,r2,LSL #3       ;387
                  |L3.646|
000286  eb020c80          ADD      r12,r2,r0,LSL #2      ;387
00028a  1c40              ADDS     r0,r0,#1              ;386
00028c  ed8c0a00          VSTR     s0,[r12,#0]           ;387
000290  2806              CMP      r0,#6                 ;386
000292  dbf8              BLT      |L3.646|
000294  eb0b0081          ADD      r0,r11,r1,LSL #2      ;389
000298  1c49              ADDS     r1,r1,#1              ;385
00029a  ed800a00          VSTR     s0,[r0,#0]            ;389
00029e  2906              CMP      r1,#6                 ;385
0002a0  dbec              BLT      |L3.636|
0002a2  2600              MOVS     r6,#0                 ;392
0002a4  9852              LDR      r0,[sp,#0x148]        ;397
0002a6  eddd8a62          VLDR     s17,[sp,#0x188]       ;396
0002aa  4635              MOV      r5,r6                 ;397
0002ac  2800              CMP      r0,#0                 ;397
0002ae  f34081ce          BLE.W    |L3.1614|
0002b2  f8d900d8          LDR      r0,[r9,#0xd8]         ;397
0002b6  9933              LDR      r1,[sp,#0xcc]         ;397
0002b8  eb000081          ADD      r0,r0,r1,LSL #2       ;397
0002bc  6901              LDR      r1,[r0,#0x10]         ;397
0002be  915f              STR      r1,[sp,#0x17c]        ;397
0002c0  6880              LDR      r0,[r0,#8]            ;397
0002c2  905e              STR      r0,[sp,#0x178]        ;397
0002c4  f8d9010c          LDR      r0,[r9,#0x10c]        ;397
0002c8  9933              LDR      r1,[sp,#0xcc]         ;397
0002ca  eb000081          ADD      r0,r0,r1,LSL #2       ;397
0002ce  6901              LDR      r1,[r0,#0x10]         ;397
0002d0  915d              STR      r1,[sp,#0x174]        ;397
0002d2  6880              LDR      r0,[r0,#8]            ;397
0002d4  905c              STR      r0,[sp,#0x170]        ;397
0002d6  f8d90140          LDR      r0,[r9,#0x140]        ;397
0002da  9933              LDR      r1,[sp,#0xcc]         ;397
0002dc  eb000081          ADD      r0,r0,r1,LSL #2       ;397
0002e0  6901              LDR      r1,[r0,#0x10]         ;397
0002e2  9101              STR      r1,[sp,#4]            ;397
0002e4  6880              LDR      r0,[r0,#8]            ;397
0002e6  9053              STR      r0,[sp,#0x14c]        ;412
0002e8  edddda54          VLDR     s27,[sp,#0x150]       ;412
0002ec  ed9dda55          VLDR     s26,[sp,#0x154]       ;413
                  |L3.752|
0002f0  e9dd105e          LDRD     r1,r0,[sp,#0x178]     ;413
0002f4  fb050001          MLA      r0,r5,r1,r0           ;413
0002f8  9069              STR      r0,[sp,#0x1a4]        ;398
0002fa  e9dd105c          LDRD     r1,r0,[sp,#0x170]     ;398
0002fe  fb050001          MLA      r0,r5,r1,r0           ;398
000302  9068              STR      r0,[sp,#0x1a0]        ;400
000304  9953              LDR      r1,[sp,#0x14c]        ;400
000306  9801              LDR      r0,[sp,#4]            ;400
000308  2400              MOVS     r4,#0                 ;405
00030a  fb050001          MLA      r0,r5,r1,r0           ;405
00030e  9067              STR      r0,[sp,#0x19c]        ;403
000310  ed9d8a63          VLDR     s16,[sp,#0x18c]       ;403
000314  f1ba0f00          CMP      r10,#0                ;405
000318  f340811e          BLE.W    |L3.1368|
                  |L3.796|
00031c  ed9d0a6d          VLDR     s0,[sp,#0x1b4]        ;407
000320  eddd0a6c          VLDR     s1,[sp,#0x1b0]        ;407
000324  ee200a08          VMUL.F32 s0,s0,s16             ;407
000328  ee000aa8          VMLA.F32 s0,s1,s17             ;407
00032c  eddd0a6b          VLDR     s1,[sp,#0x1ac]        ;407
000330  ee301a20          VADD.F32 s2,s0,s1              ;407
000334  ed9d0a6a          VLDR     s0,[sp,#0x1a8]        ;408
000338  ee200a08          VMUL.F32 s0,s0,s16             ;408
00033c  ee0f0aa8          VMLA.F32 s0,s31,s17            ;408
000340  ee700a0f          VADD.F32 s1,s0,s30             ;408
000344  ee2e0a88          VMUL.F32 s0,s29,s16            ;410
000348  ee0e0a28          VMLA.F32 s0,s28,s17            ;410
00034c  ee300a2c          VADD.F32 s0,s0,s25             ;410
000350  eec11a00          VDIV.F32 s3,s2,s0              ;412
000354  ee801a80          VDIV.F32 s2,s1,s0              ;413
000358  ed9d0a65          VLDR     s0,[sp,#0x194]        ;415
00035c  ee71aaad          VADD.F32 s21,s3,s27            ;412
000360  ee388a00          VADD.F32 s16,s16,s0            ;415
000364  ee31aa0d          VADD.F32 s20,s2,s26            ;413
000368  ed9f9a48          VLDR     s18,|L3.1164|
00036c  ee3a0a89          VADD.F32 s0,s21,s18            ;417
000370  f7fffffe          BL       __hardfp_floorf
000374  eef09a40          VMOV.F32 s19,s0                ;417
000378  eeb00a6a          VMOV.F32 s0,s21                ;418
00037c  f7fffffe          BL       __hardfp_ceilf
000380  eeb0ca40          VMOV.F32 s24,s0                ;418
000384  ee3a0a09          VADD.F32 s0,s20,s18            ;420
000388  f7fffffe          BL       __hardfp_floorf
00038c  eeb09a40          VMOV.F32 s18,s0                ;420
000390  eeb00a4a          VMOV.F32 s0,s20                ;421
000394  f7fffffe          BL       __hardfp_ceilf
000398  eef59ac0          VCMPE.F32 s19,#0.0              ;424
00039c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;424
0003a0  d378              BCC      |L3.1172|
0003a2  eddd0a61          VLDR     s1,[sp,#0x184]        ;424
0003a6  eeb4cae0          VCMPE.F32 s24,s1                ;424
0003aa  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;424
0003ae  dc71              BGT      |L3.1172|
0003b0  eeb59ac0          VCMPE.F32 s18,#0.0              ;424
0003b4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;424
0003b8  d36c              BCC      |L3.1172|
0003ba  eddd0a60          VLDR     s1,[sp,#0x180]        ;424
0003be  eeb40ae0          VCMPE.F32 s0,s1                 ;424
0003c2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;424
0003c6  dc65              BGT      |L3.1172|
0003c8  ee7a0ae9          VSUB.F32 s1,s21,s19            ;430
0003cc  ee7a1a49          VSUB.F32 s3,s20,s18            ;433
0003d0  eeb59ac0          VCMPE.F32 s18,#0.0              ;433
0003d4  1c76              ADDS     r6,r6,#1              ;428
0003d6  ee3c1ae0          VSUB.F32 s2,s25,s1             ;431
0003da  ee7c2ae1          VSUB.F32 s5,s25,s3             ;434
0003de  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;434
0003e2  bfcc              ITE      GT                    ;434
0003e4  ee392a0b          VADDGT.F32 s4,s18,s22            ;434
0003e8  ee392a4b          VSUBLE.F32 s4,s18,s22            ;434
0003ec  eebd2ac2          VCVT.S32.F32 s4,s4                 ;434
0003f0  eeb50ac0          VCMPE.F32 s0,#0.0               ;434
0003f4  ee123a10          VMOV     r3,s4                 ;434
0003f8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;434
0003fc  bfcc              ITE      GT                    ;434
0003fe  ee300a0b          VADDGT.F32 s0,s0,s22             ;434
000402  ee300a4b          VSUBLE.F32 s0,s0,s22             ;434
000406  eebd0ac0          VCVT.S32.F32 s0,s0                 ;434
00040a  eef59ac0          VCMPE.F32 s19,#0.0              ;434
00040e  ee10ca10          VMOV     r12,s0                ;434
000412  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;434
000416  bfcc              ITE      GT                    ;434
000418  ee390a8b          VADDGT.F32 s0,s19,s22            ;434
00041c  ee390acb          VSUBLE.F32 s0,s19,s22            ;434
000420  eebd0ac0          VCVT.S32.F32 s0,s0                 ;434
000424  f8d82008          LDR      r2,[r8,#8]            ;434
000428  f8d81010          LDR      r1,[r8,#0x10]         ;434
00042c  ee100a10          VMOV     r0,s0                 ;434
000430  fb031302          MLA      r3,r3,r2,r1           ;434
000434  fb0c1102          MLA      r1,r12,r2,r1          ;434
000438  4403              ADD      r3,r3,r0              ;434
00043a  4408              ADD      r0,r0,r1              ;434
00043c  7819              LDRB     r1,[r3,#0]            ;443
00043e  ee001a10          VMOV     s0,r1                 ;443
000442  7859              LDRB     r1,[r3,#1]            ;444
000444  eeb82a40          VCVT.F32.U32 s4,s0                 ;443
000448  ee001a10          VMOV     s0,r1                 ;444
00044c  7801              LDRB     r1,[r0,#0]            ;445
00044e  7840              LDRB     r0,[r0,#1]            ;446
000450  eeb83a40          VCVT.F32.U32 s6,s0                 ;444
000454  ee001a10          VMOV     s0,r1                 ;445
000458  ee212a02          VMUL.F32 s4,s2,s4              ;445
00045c  eef83a40          VCVT.F32.U32 s7,s0                 ;445
000460  ee000a10          VMOV     s0,r0                 ;446
000464  ee002a83          VMLA.F32 s4,s1,s6              ;446
000468  9869              LDR      r0,[sp,#0x1a4]        ;454
00046a  eeb80a40          VCVT.F32.U32 s0,s0                 ;446
00046e  ee213a23          VMUL.F32 s6,s2,s7              ;446
000472  ee221a82          VMUL.F32 s2,s5,s4              ;446
000476  ee003a80          VMLA.F32 s6,s1,s0              ;446
00047a  ee011a83          VMLA.F32 s2,s3,s6              ;446
00047e  e00a              B        |L3.1174|
                  |L3.1152|
000480  43ff0000          DCFS     0x43ff0000 ; 510
                  |L3.1156|
000484  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L3.1160|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L3.1164|
00048c  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L3.1168|
000490  00000000          DCFS     0x00000000 ; 0
                  |L3.1172|
000494  e05c              B        |L3.1360|
                  |L3.1174|
000496  5d00              LDRB     r0,[r0,r4]            ;454
000498  ee000a10          VMOV     s0,r0                 ;454
00049c  9868              LDR      r0,[sp,#0x1a0]        ;455
00049e  eef81a40          VCVT.F32.U32 s3,s0                 ;454
0004a2  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;455
0004a6  ee000a10          VMOV     s0,r0                 ;455
0004aa  9867              LDR      r0,[sp,#0x19c]        ;456
0004ac  ee711a61          VSUB.F32 s3,s2,s3              ;458
0004b0  eeb80ac0          VCVT.F32.S32 s0,s0                 ;455
0004b4  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;456
0004b8  ee600a2b          VMUL.F32 s1,s0,s23             ;455
0004bc  ee000a10          VMOV     s0,r0                 ;456
0004c0  eeb80ac0          VCVT.F32.S32 s0,s0                 ;456
0004c4  ee200a2b          VMUL.F32 s0,s0,s23             ;456
0004c8  ed9f1a62          VLDR     s2,|L3.1620|
;;;462                      xOriginal * xGradientValue,
;;;463                      yOriginal * xGradientValue,
;;;464                      xGradientValue,
;;;465                      xOriginal * yGradientValue,
;;;466                      yOriginal * yGradientValue,
;;;467                      yGradientValue};
;;;468    
;;;469                    //for(s32 ia=0; ia<6; ia++) {
;;;470                    //  CoreTechPrint("%f ", values[ia]);
;;;471                    //}
;;;472                    //CoreTechPrint("\n");
;;;473    
;;;474                    //f32 AWAt_raw[6][6];
;;;475                    //f32 b_raw[6];
;;;476                    for(s32 ia=0; ia<6; ia++) {
0004cc  2100              MOVS     r1,#0
0004ce  f10d0e08          ADD      lr,sp,#8              ;326
0004d2  ee611a81          VMUL.F32 s3,s3,s2              ;458
0004d6  ee281a20          VMUL.F32 s2,s16,s1             ;461
0004da  ed8d1a44          VSTR     s2,[sp,#0x110]        ;461
0004de  ee281aa0          VMUL.F32 s2,s17,s1             ;461
0004e2  ed8d1a45          VSTR     s2,[sp,#0x114]        ;461
0004e6  edcd0a46          VSTR     s1,[sp,#0x118]        ;461
0004ea  ee680a00          VMUL.F32 s1,s16,s0             ;461
0004ee  edcd0a47          VSTR     s1,[sp,#0x11c]        ;461
0004f2  ee680a80          VMUL.F32 s1,s17,s0             ;461
0004f6  edcd0a48          VSTR     s1,[sp,#0x120]        ;461
0004fa  ed8d0a49          VSTR     s0,[sp,#0x124]        ;461
                  |L3.1278|
;;;477                      for(s32 ja=ia; ja<6; ja++) {
0004fe  4608              MOV      r0,r1
000500  2906              CMP      r1,#6
000502  da16              BGE      |L3.1330|
;;;478                        AWAt_raw[ia][ja] += values[ia] * values[ja];
000504  eb070281          ADD      r2,r7,r1,LSL #2
000508  ed920a00          VLDR     s0,[r2,#0]
00050c  eb010241          ADD      r2,r1,r1,LSL #1
000510  eb0e0cc2          ADD      r12,lr,r2,LSL #3
                  |L3.1300|
000514  eb0c0280          ADD      r2,r12,r0,LSL #2
000518  eb070380          ADD      r3,r7,r0,LSL #2
00051c  edd20a00          VLDR     s1,[r2,#0]
000520  ed931a00          VLDR     s2,[r3,#0]
000524  1c40              ADDS     r0,r0,#1              ;477
000526  2806              CMP      r0,#6                 ;477
000528  ee400a01          VMLA.F32 s1,s0,s2
00052c  edc20a00          VSTR     s1,[r2,#0]
000530  dbf0              BLT      |L3.1300|
                  |L3.1330|
;;;479                      }
;;;480                      b_raw[ia] += values[ia] * tGradientValue;
000532  eb0b0081          ADD      r0,r11,r1,LSL #2
000536  eb070281          ADD      r2,r7,r1,LSL #2
00053a  ed900a00          VLDR     s0,[r0,#0]
00053e  edd20a00          VLDR     s1,[r2,#0]
000542  1c49              ADDS     r1,r1,#1              ;476
000544  2906              CMP      r1,#6                 ;476
000546  ee000aa1          VMLA.F32 s0,s1,s3
00054a  ed800a00          VSTR     s0,[r0,#0]
00054e  dbd6              BLT      |L3.1278|
                  |L3.1360|
000550  1c64              ADDS     r4,r4,#1              ;405
000552  4554              CMP      r4,r10                ;405
000554  f6ffaee2          BLT      |L3.796|
                  |L3.1368|
;;;481                    }
;;;482                  }
;;;483                } // for(s32 x=0; x<xIterationMax; x++)
;;;484    
;;;485                yOriginal += yGridDelta;
000558  ed9d0a64          VLDR     s0,[sp,#0x190]
00055c  9852              LDR      r0,[sp,#0x148]        ;397
00055e  1c6d              ADDS     r5,r5,#1              ;397
000560  ee788a80          VADD.F32 s17,s17,s0
000564  4285              CMP      r5,r0                 ;397
000566  f6ffaec3          BLT      |L3.752|
;;;486              } // for(s32 y=0; y<yIterationMax; y++)
;;;487    
;;;488              if(numInBounds < 16) {
00056a  2e10              CMP      r6,#0x10
;;;489                AnkiWarn("LucasKanadeTracker_Projective::IterativelyRefineTrack_Affine", "Template drifted too far out of image.");
;;;490                return RESULT_OK;
;;;491              }
;;;492    
;;;493              for(s32 ia=0; ia<6; ia++) {
00056c  bfa4              ITT      GE
00056e  2100              MOVGE    r1,#0
000570  f10d0c08          ADDGE    r12,sp,#8             ;326
000574  db6b              BLT      |L3.1614|
                  |L3.1398|
;;;494                for(s32 ja=ia; ja<6; ja++) {
000576  4608              MOV      r0,r1
000578  2906              CMP      r1,#6
;;;495                  AWAt[ia][ja] = AWAt_raw[ia][ja];
00057a  bfbc              ITT      LT
00057c  eb010241          ADDLT    r2,r1,r1,LSL #1
000580  eb0c03c2          ADDLT    r3,r12,r2,LSL #3
000584  da0e              BGE      |L3.1444|
                  |L3.1414|
000586  9c3c              LDR      r4,[sp,#0xf0]         ;494
000588  9a3e              LDR      r2,[sp,#0xf8]         ;494
00058a  fb012204          MLA      r2,r1,r4,r2           ;494
00058e  eb030480          ADD      r4,r3,r0,LSL #2
000592  eb020280          ADD      r2,r2,r0,LSL #2
000596  ed940a00          VLDR     s0,[r4,#0]
00059a  1c40              ADDS     r0,r0,#1              ;494
00059c  ed820a00          VSTR     s0,[r2,#0]
0005a0  2806              CMP      r0,#6                 ;494
0005a2  dbf0              BLT      |L3.1414|
                  |L3.1444|
0005a4  9b41              LDR      r3,[sp,#0x104]        ;494
0005a6  9a43              LDR      r2,[sp,#0x10c]        ;494
;;;496                }
;;;497                b[0][ia] = b_raw[ia];
0005a8  2000              MOVS     r0,#0
0005aa  fb002003          MLA      r0,r0,r3,r2
0005ae  eb0b0281          ADD      r2,r11,r1,LSL #2
0005b2  eb000081          ADD      r0,r0,r1,LSL #2
0005b6  ed920a00          VLDR     s0,[r2,#0]
0005ba  1c49              ADDS     r1,r1,#1              ;493
0005bc  ed800a00          VSTR     s0,[r0,#0]
0005c0  2906              CMP      r1,#6                 ;493
0005c2  dbd8              BLT      |L3.1398|
;;;498              }
;;;499    
;;;500              Matrix::MakeSymmetric(AWAt, false);
0005c4  2100              MOVS     r1,#0
0005c6  a83a              ADD      r0,sp,#0xe8
0005c8  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)
;;;501    
;;;502              //AWAt.Print("New AWAt");
;;;503              //b.Print("New b");
;;;504    
;;;505              bool numericalFailure;
;;;506    
;;;507              if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK)
0005cc  ab66              ADD      r3,sp,#0x198
0005ce  2200              MOVS     r2,#0
0005d0  a93f              ADD      r1,sp,#0xfc
0005d2  a83a              ADD      r0,sp,#0xe8
0005d4  f7fffffe          BL       _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
0005d8  2800              CMP      r0,#0
;;;508                return lastResult;
;;;509    
;;;510              if(numericalFailure){
;;;511                AnkiWarn("LucasKanadeTracker_Projective::IterativelyRefineTrack_Affine", "numericalFailure");
;;;512                return RESULT_OK;
;;;513              }
;;;514    
;;;515              //b.Print("New update");
;;;516    
;;;517              this->transformation.Update(b, initialImageScaleF32, scratch, Transformations::TRANSFORM_AFFINE);
;;;518    
;;;519              //this->transformation.get_homography().Print("new transformation");
;;;520    
;;;521              // Check if we're done with iterations
;;;522              const f32 minChange = UpdatePreviousCorners(transformation, previousCorners, scratch);
;;;523    
;;;524              if(minChange < convergenceTolerance) {
;;;525                verify_converged = true;
;;;526                return RESULT_OK;
;;;527              }
;;;528            } // for(s32 iteration=0; iteration<maxIterations; iteration++)
;;;529    
;;;530            return RESULT_OK;
;;;531          } // Result LucasKanadeTracker_Projective::IterativelyRefineTrack_Affine()
0005da  bf1f              ITTTT    NE
0005dc  b071              ADDNE    sp,sp,#0x1c4
0005de  ecbd8b10          VPOPNE   {d8-d15}
0005e2  b006              ADDNE    sp,sp,#0x18
0005e4  e8bd8ff0          POPNE    {r4-r11,pc}
0005e8  f89d0198          LDRB     r0,[sp,#0x198]        ;510
0005ec  bb78              CBNZ     r0,|L3.1614|
0005ee  a84a              ADD      r0,sp,#0x128          ;517
0005f0  9991              LDR      r1,[sp,#0x244]        ;517
0005f2  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0005f6  4602              MOV      r2,r0                 ;517
0005f8  f44f63c0          MOV      r3,#0x600             ;517
0005fc  ed9d0a00          VLDR     s0,[sp,#0]            ;517
000600  a93f              ADD      r1,sp,#0xfc           ;517
000602  f1090018          ADD      r0,r9,#0x18           ;517
000606  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
00060a  a84a              ADD      r0,sp,#0x128          ;522
00060c  9991              LDR      r1,[sp,#0x244]        ;522
00060e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000612  4602              MOV      r2,r0                 ;522
000614  a926              ADD      r1,sp,#0x98           ;522
000616  f1090018          ADD      r0,r9,#0x18           ;522
00061a  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
00061e  eddd0a81          VLDR     s1,[sp,#0x204]        ;524
000622  eeb40ae0          VCMPE.F32 s0,s1                 ;524
000626  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;524
00062a  d209              BCS      |L3.1600|
00062c  9990              LDR      r1,[sp,#0x240]        ;525
00062e  2001              MOVS     r0,#1                 ;525
000630  7008              STRB     r0,[r1,#0]            ;525
000632  2000              MOVS     r0,#0                 ;526
                  |L3.1588|
000634  b071              ADD      sp,sp,#0x1c4
000636  ecbd8b10          VPOP     {d8-d15}
00063a  b006              ADD      sp,sp,#0x18
00063c  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.1600|
000640  9851              LDR      r0,[sp,#0x144]        ;376
000642  9985              LDR      r1,[sp,#0x214]        ;376
000644  1c40              ADDS     r0,r0,#1              ;376
000646  9051              STR      r0,[sp,#0x144]        ;376
000648  4288              CMP      r0,r1                 ;376
00064a  f6ffade0          BLT      |L3.526|
                  |L3.1614|
00064e  2000              MOVS     r0,#0                 ;530
000650  e7f0              B        |L3.1588|
;;;532    
                          ENDP

000652  0000              DCW      0x0000
                  |L3.1620|
000654  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::IterativelyRefineTrack_Projective(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
;;;532    
;;;533          Result LucasKanadeTracker_Projective::IterativelyRefineTrack_Projective(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;534          {
000004  461c              MOV      r4,r3
000006  ed2d0b02          VPUSH    {d0}
00000a  460f              MOV      r7,r1
00000c  4680              MOV      r8,r0
00000e  ed2d8b10          VPUSH    {d8-d15}
000012  f5ad7d11          SUB      sp,sp,#0x244
;;;535            // This method is heavily based on Interp2_Projective
;;;536            // The call would be like: Interp2_Projective<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;537    
;;;538            Result lastResult;
;;;539    
;;;540            Array<f32> AWAt(8, 8, scratch);
000016  2300              MOVS     r3,#0
000018  461a              MOV      r2,r3
00001a  2101              MOVS     r1,#1
00001c  a890              ADD      r0,sp,#0x240
00001e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000022  6800              LDR      r0,[r0,#0]
000024  9000              STR      r0,[sp,#0]
000026  2208              MOVS     r2,#8
000028  4611              MOV      r1,r2
00002a  a85e              ADD      r0,sp,#0x178
00002c  9bb1              LDR      r3,[sp,#0x2c4]
00002e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;541            Array<f32> b(1, 8, scratch);
000032  2300              MOVS     r3,#0
000034  461a              MOV      r2,r3
000036  2101              MOVS     r1,#1
000038  a88f              ADD      r0,sp,#0x23c
00003a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00003e  6800              LDR      r0,[r0,#0]
000040  9000              STR      r0,[sp,#0]
000042  2208              MOVS     r2,#8
000044  2101              MOVS     r1,#1
000046  a863              ADD      r0,sp,#0x18c
000048  9bb1              LDR      r3,[sp,#0x2c4]
00004a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;542    
;;;543            // These addresses should be known at compile time, so should be faster
;;;544            f32 AWAt_raw[8][8];
;;;545            f32 b_raw[8];
;;;546    
;;;547            verify_converged = false;
00004e  98b0              LDR      r0,[sp,#0x2c0]
000050  2100              MOVS     r1,#0
000052  7001              STRB     r1,[r0,#0]
;;;548    
;;;549            const s32 nextImageHeight = nextImage.get_size(0);
000054  4638              MOV      r0,r7
000056  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00005a  ee090a10          VMOV     s18,r0
;;;550            const s32 nextImageWidth = nextImage.get_size(1);
00005e  2101              MOVS     r1,#1
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000066  4605              MOV      r5,r0
;;;551    
;;;552            const f32 scale = static_cast<f32>(1 << whichScale);
000068  2001              MOVS     r0,#1
00006a  40a0              LSLS     r0,r0,r4
00006c  ee000a10          VMOV     s0,r0
;;;553    
;;;554            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
000070  f44f70a0          MOV      r0,#0x140
000074  fb90f0f5          SDIV     r0,r0,r5
000078  eef89ac0          VCVT.F32.S32 s19,s0                ;552
;;;555            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
00007c  ee000a10          VMOV     s0,r0
000080  eeb80ac0          VCVT.F32.S32 s0,s0
000084  ed8d0a00          VSTR     s0,[sp,#0]
;;;556    
;;;557            const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
;;;558            const f32 scaleOverFiveTen = scale / (2.0f*255.0f);
000088  ed9f0afe          VLDR     s0,|L4.1156|
;;;559    
;;;560            //const Point<f32>& centerOffset = this->transformation.get_centerOffset();
;;;561            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
00008c  f1080118          ADD      r1,r8,#0x18
000090  a878              ADD      r0,sp,#0x1e0
000092  eec9ba80          VDIV.F32 s23,s19,s0            ;558
000096  ed9d0a00          VLDR     s0,[sp,#0]
00009a  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;562    
;;;563            // Initialize with some very extreme coordinates
;;;564            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
00009e  2300              MOVS     r3,#0
0000a0  461a              MOV      r2,r3
0000a2  2101              MOVS     r1,#1
0000a4  a88f              ADD      r0,sp,#0x23c
0000a6  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000aa  6803              LDR      r3,[r0,#0]
0000ac  2102              MOVS     r1,#2
0000ae  a842              ADD      r0,sp,#0x108
0000b0  9ab1              LDR      r2,[sp,#0x2c4]
0000b2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;565    
;;;566            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
0000b6  2600              MOVS     r6,#0
;;;567              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
0000b8  ed9f8af3          VLDR     s16,|L4.1160|
                  |L4.188|
0000bc  984e              LDR      r0,[sp,#0x138]
0000be  ed8d8a68          VSTR     s16,[sp,#0x1a0]
0000c2  ed8d8a69          VSTR     s16,[sp,#0x1a4]
0000c6  ed8d8a6a          VSTR     s16,[sp,#0x1a8]
0000ca  ed8d8a6b          VSTR     s16,[sp,#0x1ac]
0000ce  ed8d8a6c          VSTR     s16,[sp,#0x1b0]
0000d2  ed8d8a6d          VSTR     s16,[sp,#0x1b4]
0000d6  eb001946          ADD      r9,r0,r6,LSL #5
0000da  ed8d8a6e          VSTR     s16,[sp,#0x1b8]
0000de  a850              ADD      r0,sp,#0x140
0000e0  ed8d8a6f          VSTR     s16,[sp,#0x1bc]
0000e4  2304              MOVS     r3,#4
0000e6  2208              MOVS     r2,#8
0000e8  49e8              LDR      r1,|L4.1164|
0000ea  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0000ee  ed9d0a68          VLDR     s0,[sp,#0x1a0]
0000f2  4603              MOV      r3,r0
0000f4  ed800a00          VSTR     s0,[r0,#0]
0000f8  ed9d0a69          VLDR     s0,[sp,#0x1a4]
0000fc  ed800a01          VSTR     s0,[r0,#4]
000100  3008              ADDS     r0,r0,#8
000102  ed9d0a6a          VLDR     s0,[sp,#0x1a8]
000106  ed800a00          VSTR     s0,[r0,#0]
00010a  ed9d0a6b          VLDR     s0,[sp,#0x1ac]
00010e  ed800a01          VSTR     s0,[r0,#4]
000112  ed9d0a6c          VLDR     s0,[sp,#0x1b0]
000116  2000              MOVS     r0,#0
000118  ed830a04          VSTR     s0,[r3,#0x10]
00011c  ed9d0a6d          VLDR     s0,[sp,#0x1b4]
000120  ed830a05          VSTR     s0,[r3,#0x14]
000124  ed9d0a6e          VLDR     s0,[sp,#0x1b8]
000128  ed830a06          VSTR     s0,[r3,#0x18]
00012c  ed9d0a6f          VLDR     s0,[sp,#0x1bc]
000130  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L4.308|
000134  eb0301c0          ADD      r1,r3,r0,LSL #3
000138  eb0902c0          ADD      r2,r9,r0,LSL #3
00013c  ed910a00          VLDR     s0,[r1,#0]
000140  1c40              ADDS     r0,r0,#1
000142  ed820a00          VSTR     s0,[r2,#0]
000146  ed910a01          VLDR     s0,[r1,#4]
00014a  2804              CMP      r0,#4
00014c  ed820a01          VSTR     s0,[r2,#4]
000150  dbf0              BLT      |L4.308|
000152  1c76              ADDS     r6,r6,#1              ;566
000154  2e02              CMP      r6,#2                 ;566
000156  dbb1              BLT      |L4.188|
;;;568            }
;;;569    
;;;570            Meshgrid<f32> originalCoordinates(
000158  ed988a05          VLDR     s16,[r8,#0x14]
00015c  ee880a29          VDIV.F32 s0,s16,s19
000160  ed9faacb          VLDR     s20,|L4.1168|
000164  ee300a0a          VADD.F32 s0,s0,s20
000168  f7fffffe          BL       __hardfp_floorf
00016c  eebd0ac0          VCVT.S32.F32 s0,s0
000170  eeb6ba00          VMOV.F32 s22,#0.50000000
000174  eefeaa00          VMOV.F32 s21,#-0.50000000
000178  ee101a10          VMOV     r1,s0
00017c  ee680a0b          VMUL.F32 s1,s16,s22
000180  ee280a2a          VMUL.F32 s0,s16,s21
000184  a84f              ADD      r0,sp,#0x13c
000186  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
00018a  ed988a04          VLDR     s16,[r8,#0x10]
00018e  e9dd694f          LDRD     r6,r9,[sp,#0x13c]
000192  ee880a29          VDIV.F32 s0,s16,s19
000196  f8dda144          LDR      r10,[sp,#0x144]
00019a  ee300a0a          VADD.F32 s0,s0,s20
00019e  f7fffffe          BL       __hardfp_floorf
0001a2  eebd0ac0          VCVT.S32.F32 s0,s0
0001a6  ee680a0b          VMUL.F32 s1,s16,s22
0001aa  a852              ADD      r0,sp,#0x148
0001ac  ee101a10          VMOV     r1,s0
0001b0  ee280a2a          VMUL.F32 s0,s16,s21
0001b4  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
;;;571              Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;572              Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;573    
;;;574            // Unused, remove?
;;;575            //const s32 outHeight = originalCoordinates.get_yGridVector().get_size();
;;;576            //const s32 outWidth = originalCoordinates.get_xGridVector().get_size();
;;;577    
;;;578            const f32 xyReferenceMin = 0.0f;
;;;579            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
0001b8  ee005a10          VMOV     s0,r5
0001bc  e9dd0152          LDRD     r0,r1,[sp,#0x148]     ;570
0001c0  eeb80ac0          VCVT.F32.S32 s0,s0
0001c4  9a54              LDR      r2,[sp,#0x150]
0001c6  eef7fa00          VMOV.F32 s31,#1.00000000
0001ca  f8cda168          STR      r10,[sp,#0x168]
0001ce  925d              STR      r2,[sp,#0x174]
0001d0  e9cd015b          STRD     r0,r1,[sp,#0x16c]
0001d4  ee300a6f          VSUB.F32 s0,s0,s31
0001d8  e9cd6958          STRD     r6,r9,[sp,#0x160]
0001dc  ed8d0a81          VSTR     s0,[sp,#0x204]
;;;580            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
0001e0  eeb80ac9          VCVT.F32.S32 s0,s18
0001e4  ee300a6f          VSUB.F32 s0,s0,s31
0001e8  ed8d0a80          VSTR     s0,[sp,#0x200]
;;;581    
;;;582            const LinearSequence<f32> &yGridVector = originalCoordinates.get_yGridVector();
;;;583            const LinearSequence<f32> &xGridVector = originalCoordinates.get_xGridVector();
;;;584    
;;;585            const f32 yGridStart = yGridVector.get_start();
;;;586            const f32 xGridStart = xGridVector.get_start();
;;;587    
;;;588            const f32 yGridDelta = yGridVector.get_increment();
;;;589            const f32 xGridDelta = xGridVector.get_increment();
;;;590    
;;;591            const s32 yIterationMax = yGridVector.get_size();
0001ec  907a              STR      r0,[sp,#0x1e8]
0001ee  e9cd1982          STRD     r1,r9,[sp,#0x208]
;;;592            const s32 xIterationMax = xGridVector.get_size();
;;;593    
;;;594            for(s32 iteration=0; iteration<maxIterations; iteration++) {
0001f2  2000              MOVS     r0,#0
0001f4  906f              STR      r0,[sp,#0x1bc]
0001f6  e9cd2a84          STRD     r2,r10,[sp,#0x210]
0001fa  98a5              LDR      r0,[sp,#0x294]
0001fc  46b1              MOV      r9,r6
0001fe  2800              CMP      r0,#0
000200  f3408239          BLE.W    |L4.1654|
000204  eb040084          ADD      r0,r4,r4,LSL #2
000208  f50d7ae0          ADD      r10,sp,#0x1c0         ;545
00020c  904f              STR      r0,[sp,#0x13c]        ;545
                  |L4.526|
;;;595              const Array<f32> &homography = this->transformation.get_homography();
00020e  f1080018          ADD      r0,r8,#0x18
000212  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
000216  6902              LDR      r2,[r0,#0x10]
000218  6881              LDR      r1,[r0,#8]
;;;596              const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
00021a  2300              MOVS     r3,#0
00021c  fb032001          MLA      r0,r3,r1,r2
000220  ed900a00          VLDR     s0,[r0,#0]
000224  ed8d0a8e          VSTR     s0,[sp,#0x238]
000228  ed900a01          VLDR     s0,[r0,#4]
00022c  ed8d0a8d          VSTR     s0,[sp,#0x234]
000230  ed901a02          VLDR     s2,[r0,#8]
000234  ed9d0a00          VLDR     s0,[sp,#0]
;;;597              const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
000238  2001              MOVS     r0,#1
00023a  fb002001          MLA      r0,r0,r1,r2
00023e  eec10a00          VDIV.F32 s1,s2,s0              ;596
000242  edcd0a8c          VSTR     s1,[sp,#0x230]        ;596
000246  ed900a00          VLDR     s0,[r0,#0]
00024a  ed8d0a8b          VSTR     s0,[sp,#0x22c]
00024e  ed900a01          VLDR     s0,[r0,#4]
000252  ed8d0a8a          VSTR     s0,[sp,#0x228]
000256  edd00a02          VLDR     s1,[r0,#8]
00025a  ed9d0a00          VLDR     s0,[sp,#0]
;;;598              const f32 h20 = homography[2][0] * initialImageScaleF32; const f32 h21 = homography[2][1] * initialImageScaleF32; //const f32 h22 = 1.0f;
00025e  2002              MOVS     r0,#2
000260  fb002001          MLA      r0,r0,r1,r2
000264  ee80fa80          VDIV.F32 s30,s1,s0             ;597
000268  edd00a00          VLDR     s1,[r0,#0]
;;;599    
;;;600              //AWAt.SetZero();
;;;601              //b.SetZero();
;;;602    
;;;603              for(s32 ia=0; ia<8; ia++) {
00026c  2100              MOVS     r1,#0
00026e  ee60ea80          VMUL.F32 s29,s1,s0             ;598
000272  edd00a01          VLDR     s1,[r0,#4]            ;598
000276  ee20ea80          VMUL.F32 s28,s1,s0             ;598
00027a  ed9f0a86          VLDR     s0,|L4.1172|
00027e  ab02              ADD      r3,sp,#8              ;544
                  |L4.640|
;;;604                for(s32 ja=0; ja<8; ja++) {
000280  2000              MOVS     r0,#0
;;;605                  AWAt_raw[ia][ja] = 0;
000282  eb031241          ADD      r2,r3,r1,LSL #5
                  |L4.646|
000286  eb020c80          ADD      r12,r2,r0,LSL #2
00028a  1c40              ADDS     r0,r0,#1              ;604
00028c  ed8c0a00          VSTR     s0,[r12,#0]
000290  2808              CMP      r0,#8                 ;604
000292  dbf8              BLT      |L4.646|
;;;606                }
;;;607                b_raw[ia] = 0;
000294  eb0a0081          ADD      r0,r10,r1,LSL #2
000298  1c49              ADDS     r1,r1,#1              ;603
00029a  ed800a00          VSTR     s0,[r0,#0]
00029e  2908              CMP      r1,#8                 ;603
0002a0  dbee              BLT      |L4.640|
;;;608              }
;;;609    
;;;610              s32 numInBounds = 0;
0002a2  2600              MOVS     r6,#0
;;;611    
;;;612              // TODO: make the x and y limits from 1 to end-2
;;;613    
;;;614              f32 yOriginal = yGridStart;
;;;615              for(s32 y=0; y<yIterationMax; y++) {
0002a4  987a              LDR      r0,[sp,#0x1e8]
0002a6  eddd8a82          VLDR     s17,[sp,#0x208]       ;614
0002aa  4635              MOV      r5,r6
0002ac  2800              CMP      r0,#0
0002ae  f34081e2          BLE.W    |L4.1654|
0002b2  f8d800d8          LDR      r0,[r8,#0xd8]
0002b6  994f              LDR      r1,[sp,#0x13c]
0002b8  eb000081          ADD      r0,r0,r1,LSL #2
0002bc  6902              LDR      r2,[r0,#0x10]
0002be  927f              STR      r2,[sp,#0x1fc]
0002c0  6880              LDR      r0,[r0,#8]
0002c2  907e              STR      r0,[sp,#0x1f8]
0002c4  f8d8010c          LDR      r0,[r8,#0x10c]
0002c8  eb000081          ADD      r0,r0,r1,LSL #2
0002cc  6902              LDR      r2,[r0,#0x10]
0002ce  927d              STR      r2,[sp,#0x1f4]
0002d0  6880              LDR      r0,[r0,#8]
0002d2  907c              STR      r0,[sp,#0x1f0]
0002d4  f8d80140          LDR      r0,[r8,#0x140]
0002d8  eb000081          ADD      r0,r0,r1,LSL #2
0002dc  6902              LDR      r2,[r0,#0x10]
0002de  9201              STR      r2,[sp,#4]
0002e0  6880              LDR      r0,[r0,#8]
;;;616                const u8 * restrict pTemplateImage = this->templateImagePyramid[whichScale].Pointer(y, 0);
;;;617    
;;;618                const s16 * restrict pTemplateImageXGradient = this->templateImageXGradientPyramid[whichScale].Pointer(y, 0);
;;;619                const s16 * restrict pTemplateImageYGradient = this->templateImageYGradientPyramid[whichScale].Pointer(y, 0);
;;;620    
;;;621                f32 xOriginal = xGridStart;
;;;622    
;;;623                for(s32 x=0; x<xIterationMax; x++) {
;;;624                  // TODO: These two could be strength reduced
;;;625                  const f32 xTransformedRaw = h00*xOriginal + h01*yOriginal + h02;
;;;626                  const f32 yTransformedRaw = h10*xOriginal + h11*yOriginal + h12;
;;;627    
;;;628                  const f32 normalization = h20*xOriginal + h21*yOriginal + 1.0f;
;;;629    
;;;630                  const f32 xTransformed = (xTransformedRaw / normalization) + centerOffsetScaled.x;
0002e2  907b              STR      r0,[sp,#0x1ec]
0002e4  edddda78          VLDR     s27,[sp,#0x1e0]
;;;631                  const f32 yTransformed = (yTransformedRaw / normalization) + centerOffsetScaled.y;
0002e8  ed9dda79          VLDR     s26,[sp,#0x1e4]
                  |L4.748|
0002ec  e9dd107e          LDRD     r1,r0,[sp,#0x1f8]
0002f0  fb050001          MLA      r0,r5,r1,r0
0002f4  9089              STR      r0,[sp,#0x224]        ;616
0002f6  e9dd107c          LDRD     r1,r0,[sp,#0x1f0]     ;616
0002fa  fb050001          MLA      r0,r5,r1,r0           ;616
0002fe  9088              STR      r0,[sp,#0x220]        ;618
000300  997b              LDR      r1,[sp,#0x1ec]        ;618
000302  9801              LDR      r0,[sp,#4]            ;618
000304  2400              MOVS     r4,#0                 ;623
000306  fb050001          MLA      r0,r5,r1,r0           ;623
00030a  9087              STR      r0,[sp,#0x21c]        ;621
00030c  ed9d8a83          VLDR     s16,[sp,#0x20c]       ;621
000310  f1b90f00          CMP      r9,#0                 ;623
;;;632    
;;;633                  xOriginal += xGridDelta;
;;;634    
;;;635                  const f32 x0 = FLT_FLOOR(xTransformed);
;;;636                  const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
;;;637    
;;;638                  const f32 y0 = FLT_FLOOR(yTransformed);
;;;639                  const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
;;;640    
;;;641                  // If out of bounds, continue
;;;642                  if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;643                    continue;
;;;644                  }
;;;645    
;;;646                  numInBounds++;
;;;647    
;;;648                  const f32 alphaX = xTransformed - x0;
;;;649                  const f32 alphaXinverse = 1 - alphaX;
;;;650    
;;;651                  const f32 alphaY = yTransformed - y0;
;;;652                  const f32 alphaYinverse = 1.0f - alphaY;
;;;653    
;;;654                  const s32 y0S32 = Round<s32>(y0);
;;;655                  const s32 y1S32 = Round<s32>(y1);
;;;656                  const s32 x0S32 = Round<s32>(x0);
;;;657    
;;;658                  const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;659                  const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;660    
;;;661                  const f32 pixelTL = *pReference_y0;
;;;662                  const f32 pixelTR = *(pReference_y0+1);
;;;663                  const f32 pixelBL = *pReference_y1;
;;;664                  const f32 pixelBR = *(pReference_y1+1);
;;;665    
;;;666                  const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;667    
;;;668                  //const u8 interpolatedPixel = static_cast<u8>(Round(interpolatedPixelF32));
;;;669    
;;;670                  // This block is the non-interpolation part of the per-sample algorithm
;;;671                  {
;;;672                    const f32 templatePixelValue = static_cast<f32>(pTemplateImage[x]);
;;;673                    const f32 xGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageXGradient[x]);
;;;674                    const f32 yGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageYGradient[x]);
;;;675    
;;;676                    const f32 tGradientValue = oneOverTwoFiftyFive * (interpolatedPixelF32 - templatePixelValue);
;;;677    
;;;678                    //CoreTechPrint("%f ", xOriginal);
;;;679    
;;;680                    const f32 values[8] = {
000314  bfc8              IT       GT
000316  ee68caa8          VMULGT.F32 s25,s17,s17
00031a  f3408130          BLE.W    |L4.1406|
                  |L4.798|
00031e  ed9d0a8e          VLDR     s0,[sp,#0x238]        ;625
000322  ee600a08          VMUL.F32 s1,s0,s16             ;625
000326  ed9d0a8d          VLDR     s0,[sp,#0x234]        ;625
00032a  ee400a28          VMLA.F32 s1,s0,s17             ;625
00032e  ed9d0a8c          VLDR     s0,[sp,#0x230]        ;625
000332  ee301a80          VADD.F32 s2,s1,s0              ;625
000336  ed9d0a8b          VLDR     s0,[sp,#0x22c]        ;626
00033a  ee600a08          VMUL.F32 s1,s0,s16             ;626
00033e  ed9d0a8a          VLDR     s0,[sp,#0x228]        ;626
000342  ee400a28          VMLA.F32 s1,s0,s17             ;626
000346  ee2e0a88          VMUL.F32 s0,s29,s16            ;628
00034a  ee0e0a28          VMLA.F32 s0,s28,s17            ;628
00034e  ee700a8f          VADD.F32 s1,s1,s30             ;626
000352  ee300a2f          VADD.F32 s0,s0,s31             ;628
000356  eec11a00          VDIV.F32 s3,s2,s0              ;630
00035a  ee801a80          VDIV.F32 s2,s1,s0              ;631
00035e  ed9d0a85          VLDR     s0,[sp,#0x214]        ;633
000362  ee71aaad          VADD.F32 s21,s3,s27            ;630
000366  ee388a00          VADD.F32 s16,s16,s0            ;633
00036a  ee31aa0d          VADD.F32 s20,s2,s26            ;631
00036e  ed9f9a48          VLDR     s18,|L4.1168|
000372  ee3a0a89          VADD.F32 s0,s21,s18            ;635
000376  f7fffffe          BL       __hardfp_floorf
00037a  eef09a40          VMOV.F32 s19,s0                ;635
00037e  eeb00a6a          VMOV.F32 s0,s21                ;636
000382  f7fffffe          BL       __hardfp_ceilf
000386  eeb0ca40          VMOV.F32 s24,s0                ;636
00038a  ee3a0a09          VADD.F32 s0,s20,s18            ;638
00038e  f7fffffe          BL       __hardfp_floorf
000392  eeb09a40          VMOV.F32 s18,s0                ;638
000396  eeb00a4a          VMOV.F32 s0,s20                ;639
00039a  f7fffffe          BL       __hardfp_ceilf
00039e  eef59ac0          VCMPE.F32 s19,#0.0              ;642
0003a2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;642
0003a6  d377              BCC      |L4.1176|
0003a8  eddd0a81          VLDR     s1,[sp,#0x204]        ;642
0003ac  eeb4cae0          VCMPE.F32 s24,s1                ;642
0003b0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;642
0003b4  dc70              BGT      |L4.1176|
0003b6  eeb59ac0          VCMPE.F32 s18,#0.0              ;642
0003ba  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;642
0003be  d36b              BCC      |L4.1176|
0003c0  eddd0a80          VLDR     s1,[sp,#0x200]        ;642
0003c4  eeb40ae0          VCMPE.F32 s0,s1                 ;642
0003c8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;642
0003cc  dc64              BGT      |L4.1176|
0003ce  ee7a0ae9          VSUB.F32 s1,s21,s19            ;648
0003d2  ee7a1a49          VSUB.F32 s3,s20,s18            ;651
0003d6  eeb59ac0          VCMPE.F32 s18,#0.0              ;651
0003da  1c76              ADDS     r6,r6,#1              ;646
0003dc  ee3f1ae0          VSUB.F32 s2,s31,s1             ;649
0003e0  ee7f2ae1          VSUB.F32 s5,s31,s3             ;652
0003e4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;652
0003e8  bfcc              ITE      GT                    ;652
0003ea  ee392a0b          VADDGT.F32 s4,s18,s22            ;652
0003ee  ee392a4b          VSUBLE.F32 s4,s18,s22            ;652
0003f2  eebd2ac2          VCVT.S32.F32 s4,s4                 ;652
0003f6  eeb50ac0          VCMPE.F32 s0,#0.0               ;652
0003fa  ee123a10          VMOV     r3,s4                 ;652
0003fe  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;652
000402  bfcc              ITE      GT                    ;652
000404  ee300a0b          VADDGT.F32 s0,s0,s22             ;652
000408  ee300a4b          VSUBLE.F32 s0,s0,s22             ;652
00040c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;652
000410  eef59ac0          VCMPE.F32 s19,#0.0              ;652
000414  ee10ca10          VMOV     r12,s0                ;652
000418  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;652
00041c  bfcc              ITE      GT                    ;652
00041e  ee390a8b          VADDGT.F32 s0,s19,s22            ;652
000422  ee390acb          VSUBLE.F32 s0,s19,s22            ;652
000426  eebd0ac0          VCVT.S32.F32 s0,s0                 ;652
00042a  68ba              LDR      r2,[r7,#8]            ;652
00042c  6939              LDR      r1,[r7,#0x10]         ;652
00042e  ee100a10          VMOV     r0,s0                 ;652
000432  fb031302          MLA      r3,r3,r2,r1           ;652
000436  fb0c1102          MLA      r1,r12,r2,r1          ;652
00043a  4403              ADD      r3,r3,r0              ;652
00043c  4408              ADD      r0,r0,r1              ;652
00043e  7819              LDRB     r1,[r3,#0]            ;661
000440  ee001a10          VMOV     s0,r1                 ;661
000444  7859              LDRB     r1,[r3,#1]            ;662
000446  eef83a40          VCVT.F32.U32 s7,s0                 ;661
00044a  ee001a10          VMOV     s0,r1                 ;662
00044e  7801              LDRB     r1,[r0,#0]            ;663
000450  7840              LDRB     r0,[r0,#1]            ;664
000452  eeb83a40          VCVT.F32.U32 s6,s0                 ;662
000456  ee001a10          VMOV     s0,r1                 ;663
00045a  ee613a23          VMUL.F32 s7,s2,s7              ;663
00045e  eeb82a40          VCVT.F32.U32 s4,s0                 ;663
000462  ee000a10          VMOV     s0,r0                 ;664
000466  ee403a83          VMLA.F32 s7,s1,s6              ;664
00046a  9889              LDR      r0,[sp,#0x224]        ;672
00046c  eeb80a40          VCVT.F32.U32 s0,s0                 ;664
000470  ee212a02          VMUL.F32 s4,s2,s4              ;664
000474  5d00              LDRB     r0,[r0,r4]            ;672
000476  ee221aa3          VMUL.F32 s2,s5,s7              ;672
00047a  ee002a80          VMLA.F32 s4,s1,s0              ;672
00047e  ee011a82          VMLA.F32 s2,s3,s4              ;672
000482  e00a              B        |L4.1178|
                  |L4.1156|
000484  43ff0000          DCFS     0x43ff0000 ; 510
                  |L4.1160|
000488  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L4.1164|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L4.1168|
000490  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L4.1172|
000494  00000000          DCFS     0x00000000 ; 0
                  |L4.1176|
000498  e06d              B        |L4.1398|
                  |L4.1178|
00049a  ee000a10          VMOV     s0,r0                 ;672
00049e  9888              LDR      r0,[sp,#0x220]        ;673
0004a0  eef81a40          VCVT.F32.U32 s3,s0                 ;672
0004a4  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;673
0004a8  ee000a10          VMOV     s0,r0                 ;673
0004ac  9887              LDR      r0,[sp,#0x21c]        ;674
0004ae  ee711a61          VSUB.F32 s3,s2,s3              ;676
0004b2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;673
0004b6  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;674
0004ba  ee600a2b          VMUL.F32 s1,s0,s23             ;673
0004be  ee000a10          VMOV     s0,r0                 ;674
0004c2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;674
0004c6  ee200a2b          VMUL.F32 s0,s0,s23             ;674
0004ca  ed9f1a6c          VLDR     s2,|L4.1660|
0004ce  ee282a28          VMUL.F32 s4,s16,s17
;;;681                      xOriginal * xGradientValue,
;;;682                      yOriginal * xGradientValue,
;;;683                      xGradientValue,
;;;684                      xOriginal * yGradientValue,
;;;685                      yOriginal * yGradientValue,
;;;686                      yGradientValue,
;;;687                      -xOriginal*xOriginal*xGradientValue - xOriginal*yOriginal*yGradientValue,
;;;688                      -xOriginal*yOriginal*xGradientValue - yOriginal*yOriginal*yGradientValue};
;;;689    
;;;690                    for(s32 ia=0; ia<8; ia++) {
0004d2  2100              MOVS     r1,#0
0004d4  ee611a81          VMUL.F32 s3,s3,s2              ;676
0004d8  ee281a20          VMUL.F32 s2,s16,s1             ;680
0004dc  f50d7ba0          ADD      r11,sp,#0x140         ;680
0004e0  f10d0e08          ADD      lr,sp,#8              ;544
0004e4  ed8d1a50          VSTR     s2,[sp,#0x140]        ;680
0004e8  ee281aa0          VMUL.F32 s2,s17,s1             ;680
0004ec  ed8d1a51          VSTR     s2,[sp,#0x144]        ;680
0004f0  ee281a00          VMUL.F32 s2,s16,s0             ;680
0004f4  edcd0a52          VSTR     s1,[sp,#0x148]        ;680
0004f8  ed8d1a53          VSTR     s2,[sp,#0x14c]        ;680
0004fc  ee281a80          VMUL.F32 s2,s17,s0             ;680
000500  ed8d1a54          VSTR     s2,[sp,#0x150]        ;680
000504  ee281a48          VNMUL.F32 s2,s16,s16            ;680
000508  ed8d0a55          VSTR     s0,[sp,#0x154]        ;680
00050c  ee211a20          VMUL.F32 s2,s2,s1              ;680
000510  ee021a40          VMLS.F32 s2,s4,s0              ;680
000514  ed8d1a56          VSTR     s2,[sp,#0x158]        ;680
000518  ee281a68          VNMUL.F32 s2,s16,s17            ;680
00051c  ee610a20          VMUL.F32 s1,s2,s1              ;680
000520  ee4c0ac0          VMLS.F32 s1,s25,s0             ;680
000524  edcd0a57          VSTR     s1,[sp,#0x15c]        ;680
                  |L4.1320|
;;;691                      for(s32 ja=ia; ja<8; ja++) {
000528  4608              MOV      r0,r1
00052a  2908              CMP      r1,#8
00052c  da14              BGE      |L4.1368|
;;;692                        AWAt_raw[ia][ja] += values[ia] * values[ja];
00052e  eb0b0281          ADD      r2,r11,r1,LSL #2
000532  eb0e1c41          ADD      r12,lr,r1,LSL #5
000536  ed920a00          VLDR     s0,[r2,#0]
                  |L4.1338|
00053a  eb0c0280          ADD      r2,r12,r0,LSL #2
00053e  eb0b0380          ADD      r3,r11,r0,LSL #2
000542  edd20a00          VLDR     s1,[r2,#0]
000546  ed931a00          VLDR     s2,[r3,#0]
00054a  1c40              ADDS     r0,r0,#1              ;691
00054c  2808              CMP      r0,#8                 ;691
00054e  ee400a01          VMLA.F32 s1,s0,s2
000552  edc20a00          VSTR     s1,[r2,#0]
000556  dbf0              BLT      |L4.1338|
                  |L4.1368|
;;;693                      }
;;;694                      b_raw[ia] += values[ia] * tGradientValue;
000558  eb0a0081          ADD      r0,r10,r1,LSL #2
00055c  eb0b0281          ADD      r2,r11,r1,LSL #2
000560  ed900a00          VLDR     s0,[r0,#0]
000564  edd20a00          VLDR     s1,[r2,#0]
000568  1c49              ADDS     r1,r1,#1              ;690
00056a  2908              CMP      r1,#8                 ;690
00056c  ee000aa1          VMLA.F32 s0,s1,s3
000570  ed800a00          VSTR     s0,[r0,#0]
000574  dbd8              BLT      |L4.1320|
                  |L4.1398|
000576  1c64              ADDS     r4,r4,#1              ;623
000578  454c              CMP      r4,r9                 ;623
00057a  f6ffaed0          BLT      |L4.798|
                  |L4.1406|
;;;695                    }
;;;696                  }
;;;697                } // for(s32 x=0; x<xIterationMax; x++)
;;;698    
;;;699                yOriginal += yGridDelta;
00057e  ed9d0a84          VLDR     s0,[sp,#0x210]
000582  987a              LDR      r0,[sp,#0x1e8]        ;615
000584  1c6d              ADDS     r5,r5,#1              ;615
000586  ee788a80          VADD.F32 s17,s17,s0
00058a  4285              CMP      r5,r0                 ;615
00058c  f6ffaeae          BLT      |L4.748|
;;;700              } // for(s32 y=0; y<yIterationMax; y++)
;;;701    
;;;702              if(numInBounds < 16) {
000590  2e10              CMP      r6,#0x10
;;;703                AnkiWarn("LucasKanadeTracker_Projective::IterativelyRefineTrack_Projective", "Template drifted too far out of image.");
;;;704                return RESULT_OK;
;;;705              }
;;;706    
;;;707              for(s32 ia=0; ia<8; ia++) {
000592  bfa4              ITT      GE
000594  2100              MOVGE    r1,#0
000596  ab02              ADDGE    r3,sp,#8              ;544
000598  db6d              BLT      |L4.1654|
                  |L4.1434|
;;;708                for(s32 ja=ia; ja<8; ja++) {
00059a  4608              MOV      r0,r1
00059c  2908              CMP      r1,#8
;;;709                  AWAt[ia][ja] = AWAt_raw[ia][ja];
00059e  bfb8              IT       LT
0005a0  eb031241          ADDLT    r2,r3,r1,LSL #5
0005a4  da0f              BGE      |L4.1478|
                  |L4.1446|
0005a6  f8ddc188          LDR      r12,[sp,#0x188]       ;708
0005aa  9c60              LDR      r4,[sp,#0x180]        ;708
0005ac  fb01cc04          MLA      r12,r1,r4,r12         ;708
0005b0  eb020480          ADD      r4,r2,r0,LSL #2
0005b4  eb0c0c80          ADD      r12,r12,r0,LSL #2
0005b8  ed940a00          VLDR     s0,[r4,#0]
0005bc  1c40              ADDS     r0,r0,#1              ;708
0005be  ed8c0a00          VSTR     s0,[r12,#0]
0005c2  2808              CMP      r0,#8                 ;708
0005c4  dbef              BLT      |L4.1446|
                  |L4.1478|
0005c6  f8ddc194          LDR      r12,[sp,#0x194]       ;708
0005ca  9a67              LDR      r2,[sp,#0x19c]        ;708
;;;710                }
;;;711                b[0][ia] = b_raw[ia];
0005cc  2000              MOVS     r0,#0
0005ce  fb00200c          MLA      r0,r0,r12,r2
0005d2  eb0a0281          ADD      r2,r10,r1,LSL #2
0005d6  eb000081          ADD      r0,r0,r1,LSL #2
0005da  ed920a00          VLDR     s0,[r2,#0]
0005de  1c49              ADDS     r1,r1,#1              ;707
0005e0  ed800a00          VSTR     s0,[r0,#0]
0005e4  2908              CMP      r1,#8                 ;707
0005e6  dbd8              BLT      |L4.1434|
;;;712              }
;;;713    
;;;714              Matrix::MakeSymmetric(AWAt, false);
0005e8  2100              MOVS     r1,#0
0005ea  a85e              ADD      r0,sp,#0x178
0005ec  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)
;;;715    
;;;716              //AWAt.Print("New AWAt");
;;;717              //b.Print("New b");
;;;718    
;;;719              bool numericalFailure;
;;;720    
;;;721              if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK)
0005f0  ab86              ADD      r3,sp,#0x218
0005f2  2200              MOVS     r2,#0
0005f4  a963              ADD      r1,sp,#0x18c
0005f6  a85e              ADD      r0,sp,#0x178
0005f8  f7fffffe          BL       _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
0005fc  2800              CMP      r0,#0
;;;722                return lastResult;
;;;723    
;;;724              if(numericalFailure){
;;;725                AnkiWarn("LucasKanadeTracker_Projective::IterativelyRefineTrack_Projective", "numericalFailure");
;;;726                return RESULT_OK;
;;;727              }
;;;728    
;;;729              //b.Print("New update");
;;;730    
;;;731              this->transformation.Update(b, initialImageScaleF32, scratch, Transformations::TRANSFORM_PROJECTIVE);
;;;732    
;;;733              //this->transformation.get_homography().Print("new transformation");
;;;734    
;;;735              // Check if we're done with iterations
;;;736              // Check if we're done with iterations
;;;737              const f32 minChange = UpdatePreviousCorners(transformation, previousCorners, scratch);
;;;738    
;;;739              if(minChange < convergenceTolerance) {
;;;740                verify_converged = true;
;;;741                return RESULT_OK;
;;;742              }
;;;743            } // for(s32 iteration=0; iteration<maxIterations; iteration++)
;;;744    
;;;745            return RESULT_OK;
;;;746          } // Result LucasKanadeTracker_Projective::IterativelyRefineTrack_Projective()
0005fe  bf1f              ITTTT    NE
000600  f50d7d11          ADDNE    sp,sp,#0x244
000604  ecbd8b10          VPOPNE   {d8-d15}
000608  b006              ADDNE    sp,sp,#0x18
00060a  e8bd8ff0          POPNE    {r4-r11,pc}
00060e  f89d0218          LDRB     r0,[sp,#0x218]        ;724
000612  bb80              CBNZ     r0,|L4.1654|
000614  a868              ADD      r0,sp,#0x1a0          ;731
000616  99b1              LDR      r1,[sp,#0x2c4]        ;731
000618  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00061c  4602              MOV      r2,r0                 ;731
00061e  f44f6300          MOV      r3,#0x800             ;731
000622  ed9d0a00          VLDR     s0,[sp,#0]            ;731
000626  a963              ADD      r1,sp,#0x18c          ;731
000628  f1080018          ADD      r0,r8,#0x18           ;731
00062c  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
000630  a868              ADD      r0,sp,#0x1a0          ;737
000632  99b1              LDR      r1,[sp,#0x2c4]        ;737
000634  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000638  4602              MOV      r2,r0                 ;737
00063a  a942              ADD      r1,sp,#0x108          ;737
00063c  f1080018          ADD      r0,r8,#0x18           ;737
000640  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
000644  eddd0aa1          VLDR     s1,[sp,#0x284]        ;739
000648  eeb40ae0          VCMPE.F32 s0,s1                 ;739
00064c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;739
000650  d20a              BCS      |L4.1640|
000652  99b0              LDR      r1,[sp,#0x2c0]        ;740
000654  2001              MOVS     r0,#1                 ;740
000656  7008              STRB     r0,[r1,#0]            ;740
000658  2000              MOVS     r0,#0                 ;741
                  |L4.1626|
00065a  f50d7d11          ADD      sp,sp,#0x244
00065e  ecbd8b10          VPOP     {d8-d15}
000662  b006              ADD      sp,sp,#0x18
000664  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.1640|
000668  986f              LDR      r0,[sp,#0x1bc]        ;594
00066a  99a5              LDR      r1,[sp,#0x294]        ;594
00066c  1c40              ADDS     r0,r0,#1              ;594
00066e  906f              STR      r0,[sp,#0x1bc]        ;594
000670  4288              CMP      r0,r1                 ;594
000672  f6ffadcc          BLT      |L4.526|
                  |L4.1654|
000676  2000              MOVS     r0,#0                 ;745
000678  e7ef              B        |L4.1626|
;;;747        } // namespace TemplateTracker
                          ENDP

00067a  0000              DCW      0x0000
                  |L4.1660|
00067c  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::IterativelyRefineTrack_Translation(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
;;;126    
;;;127          Result LucasKanadeTracker_Projective::IterativelyRefineTrack_Translation(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;128          {
000004  461f              MOV      r7,r3
000006  ed2d0b02          VPUSH    {d0}
00000a  4606              MOV      r6,r0
;;;129            // This method is heavily based on Interp2_Projective
;;;130            // The call would be like: Interp2_Projective<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;131    
;;;132            Result lastResult;
;;;133    
;;;134            Array<f32> AWAt(2, 2, scratch);
00000c  2300              MOVS     r3,#0
00000e  ed2d8b10          VPUSH    {d8-d15}              ;128
000012  b0bb              SUB      sp,sp,#0xec           ;128
000014  461a              MOV      r2,r3
000016  2101              MOVS     r1,#1
000018  a839              ADD      r0,sp,#0xe4
00001a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00001e  6800              LDR      r0,[r0,#0]
000020  9000              STR      r0,[sp,#0]
000022  2202              MOVS     r2,#2
000024  4611              MOV      r1,r2
000026  a802              ADD      r0,sp,#8
000028  9b5b              LDR      r3,[sp,#0x16c]
00002a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;135            Array<f32> b(1, 2, scratch);
00002e  2300              MOVS     r3,#0
000030  461a              MOV      r2,r3
000032  2101              MOVS     r1,#1
000034  a834              ADD      r0,sp,#0xd0
000036  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00003a  6800              LDR      r0,[r0,#0]
00003c  9000              STR      r0,[sp,#0]
00003e  2202              MOVS     r2,#2
000040  2101              MOVS     r1,#1
000042  a807              ADD      r0,sp,#0x1c
000044  9b5b              LDR      r3,[sp,#0x16c]
000046  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00004a  9a04              LDR      r2,[sp,#0x10]
00004c  9906              LDR      r1,[sp,#0x18]
;;;136    
;;;137            f32 &AWAt00 = AWAt[0][0];
00004e  2000              MOVS     r0,#0
000050  fb001902          MLA      r9,r0,r2,r1
;;;138            f32 &AWAt01 = AWAt[0][1];
000054  f1090004          ADD      r0,r9,#4
;;;139            //f32 &AWAt10 = AWAt[1][0];
;;;140            f32 &AWAt11 = AWAt[1][1];
000058  9030              STR      r0,[sp,#0xc0]
00005a  2001              MOVS     r0,#1
00005c  fb001002          MLA      r0,r0,r2,r1
000060  f1000b04          ADD      r11,r0,#4
000064  9a09              LDR      r2,[sp,#0x24]
000066  990b              LDR      r1,[sp,#0x2c]
;;;141    
;;;142            f32 &b0 = b[0][0];
000068  2000              MOVS     r0,#0
00006a  fb001802          MLA      r8,r0,r2,r1
;;;143            f32 &b1 = b[0][1];
;;;144    
;;;145            verify_converged = false;
00006e  4601              MOV      r1,r0
000070  985a              LDR      r0,[sp,#0x168]
000072  f1080a04          ADD      r10,r8,#4             ;143
000076  7001              STRB     r1,[r0,#0]
;;;146    
;;;147            const s32 nextImageHeight = nextImage.get_size(0);
000078  2100              MOVS     r1,#0
00007a  984e              LDR      r0,[sp,#0x138]
00007c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000080  ee090a10          VMOV     s18,r0
;;;148            const s32 nextImageWidth = nextImage.get_size(1);
000084  2101              MOVS     r1,#1
000086  984e              LDR      r0,[sp,#0x138]
000088  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;149    
;;;150            const f32 scale = static_cast<f32>(1 << whichScale);
00008c  9031              STR      r0,[sp,#0xc4]
00008e  2001              MOVS     r0,#1
000090  40b8              LSLS     r0,r0,r7
000092  ee000a10          VMOV     s0,r0
;;;151    
;;;152            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
000096  9831              LDR      r0,[sp,#0xc4]
000098  f44f71a0          MOV      r1,#0x140
00009c  fb91f0f0          SDIV     r0,r1,r0
0000a0  eef89ac0          VCVT.F32.S32 s19,s0                ;150
;;;153            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
0000a4  ee000a10          VMOV     s0,r0
0000a8  eeb80ac0          VCVT.F32.S32 s0,s0
0000ac  ed8d0a19          VSTR     s0,[sp,#0x64]
;;;154    
;;;155            const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
;;;156            const f32 scaleOverFiveTen = scale / (2.0f*255.0f);
0000b0  ed9f0afe          VLDR     s0,|L5.1196|
;;;157    
;;;158            //const Point<f32>& centerOffset = this->transformation.get_centerOffset();
;;;159            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
0000b4  f1060118          ADD      r1,r6,#0x18
0000b8  a82e              ADD      r0,sp,#0xb8
0000ba  eec9ba80          VDIV.F32 s23,s19,s0            ;156
0000be  ed9d0a19          VLDR     s0,[sp,#0x64]
0000c2  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;160    
;;;161            // Initialize with some very extreme coordinates
;;;162            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
0000c6  2300              MOVS     r3,#0
0000c8  461a              MOV      r2,r3
0000ca  2101              MOVS     r1,#1
0000cc  a834              ADD      r0,sp,#0xd0
0000ce  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000d2  6803              LDR      r3,[r0,#0]
0000d4  2102              MOVS     r1,#2
0000d6  a80c              ADD      r0,sp,#0x30
0000d8  9a5b              LDR      r2,[sp,#0x16c]
0000da  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;163    
;;;164            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
0000de  2400              MOVS     r4,#0
;;;165              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
0000e0  ed9f8af3          VLDR     s16,|L5.1200|
                  |L5.228|
0000e4  9818              LDR      r0,[sp,#0x60]
0000e6  ed8d8a00          VSTR     s16,[sp,#0]
0000ea  ed8d8a01          VSTR     s16,[sp,#4]
0000ee  ed8d8a28          VSTR     s16,[sp,#0xa0]
0000f2  ed8d8a29          VSTR     s16,[sp,#0xa4]
0000f6  ed8d8a2a          VSTR     s16,[sp,#0xa8]
0000fa  ed8d8a2b          VSTR     s16,[sp,#0xac]
0000fe  eb001544          ADD      r5,r0,r4,LSL #5
000102  ed8d8a2c          VSTR     s16,[sp,#0xb0]
000106  a820              ADD      r0,sp,#0x80
000108  ed8d8a2d          VSTR     s16,[sp,#0xb4]
00010c  2304              MOVS     r3,#4
00010e  2208              MOVS     r2,#8
000110  49e8              LDR      r1,|L5.1204|
000112  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000116  ed9d0a00          VLDR     s0,[sp,#0]
00011a  4603              MOV      r3,r0
00011c  ed800a00          VSTR     s0,[r0,#0]
000120  ed9d0a01          VLDR     s0,[sp,#4]
000124  ed800a01          VSTR     s0,[r0,#4]
000128  3008              ADDS     r0,r0,#8
00012a  ed9d0a28          VLDR     s0,[sp,#0xa0]
00012e  ed800a00          VSTR     s0,[r0,#0]
000132  ed9d0a29          VLDR     s0,[sp,#0xa4]
000136  ed800a01          VSTR     s0,[r0,#4]
00013a  ed9d0a2a          VLDR     s0,[sp,#0xa8]
00013e  2000              MOVS     r0,#0
000140  ed830a04          VSTR     s0,[r3,#0x10]
000144  ed9d0a2b          VLDR     s0,[sp,#0xac]
000148  ed830a05          VSTR     s0,[r3,#0x14]
00014c  ed9d0a2c          VLDR     s0,[sp,#0xb0]
000150  ed830a06          VSTR     s0,[r3,#0x18]
000154  ed9d0a2d          VLDR     s0,[sp,#0xb4]
000158  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L5.348|
00015c  eb0301c0          ADD      r1,r3,r0,LSL #3
000160  eb0502c0          ADD      r2,r5,r0,LSL #3
000164  ed910a00          VLDR     s0,[r1,#0]
000168  1c40              ADDS     r0,r0,#1
00016a  ed820a00          VSTR     s0,[r2,#0]
00016e  ed910a01          VLDR     s0,[r1,#4]
000172  2804              CMP      r0,#4
000174  ed820a01          VSTR     s0,[r2,#4]
000178  dbf0              BLT      |L5.348|
00017a  1c64              ADDS     r4,r4,#1              ;164
00017c  2c02              CMP      r4,#2                 ;164
00017e  dbb1              BLT      |L5.228|
;;;166            }
;;;167    
;;;168            Meshgrid<f32> originalCoordinates(
000180  ed968a05          VLDR     s16,[r6,#0x14]
000184  ee880a29          VDIV.F32 s0,s16,s19
000188  ed9faacb          VLDR     s20,|L5.1208|
00018c  ee300a0a          VADD.F32 s0,s0,s20
000190  f7fffffe          BL       __hardfp_floorf
000194  eebd0ac0          VCVT.S32.F32 s0,s0
000198  eeb6ba00          VMOV.F32 s22,#0.50000000
00019c  eefeaa00          VMOV.F32 s21,#-0.50000000
0001a0  ee101a10          VMOV     r1,s0
0001a4  ee680a0b          VMUL.F32 s1,s16,s22
0001a8  ee280a2a          VMUL.F32 s0,s16,s21
0001ac  a823              ADD      r0,sp,#0x8c
0001ae  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
0001b2  e9dd5324          LDRD     r5,r3,[sp,#0x90]
0001b6  9c23              LDR      r4,[sp,#0x8c]
0001b8  9300              STR      r3,[sp,#0]
0001ba  ed968a04          VLDR     s16,[r6,#0x10]
0001be  ee880a29          VDIV.F32 s0,s16,s19
0001c2  ee300a0a          VADD.F32 s0,s0,s20
0001c6  f7fffffe          BL       __hardfp_floorf
0001ca  eebd0ac0          VCVT.S32.F32 s0,s0
0001ce  ee680a0b          VMUL.F32 s1,s16,s22
0001d2  a820              ADD      r0,sp,#0x80
0001d4  ee101a10          VMOV     r1,s0
0001d8  ee280a2a          VMUL.F32 s0,s16,s21
0001dc  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
0001e0  e9dd0120          LDRD     r0,r1,[sp,#0x80]
0001e4  9a22              LDR      r2,[sp,#0x88]
0001e6  941a              STR      r4,[sp,#0x68]
0001e8  9b00              LDR      r3,[sp,#0]
0001ea  921f              STR      r2,[sp,#0x7c]
0001ec  e9cd011d          STRD     r0,r1,[sp,#0x74]
0001f0  e9cd531b          STRD     r5,r3,[sp,#0x6c]
;;;169              Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;170              Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;171    
;;;172            const f32 xyReferenceMin = 0.0f;
;;;173            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
0001f4  9831              LDR      r0,[sp,#0xc4]
0001f6  eef7ca00          VMOV.F32 s25,#1.00000000
0001fa  ee000a10          VMOV     s0,r0
0001fe  eeb80ac0          VCVT.F32.S32 s0,s0
000202  ee300a6c          VSUB.F32 s0,s0,s25
000206  ed8d0a2c          VSTR     s0,[sp,#0xb0]
;;;174            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
00020a  eeb80ac9          VCVT.F32.S32 s0,s18
00020e  ee300a6c          VSUB.F32 s0,s0,s25
000212  ed8d0a2b          VSTR     s0,[sp,#0xac]
;;;175    
;;;176            const LinearSequence<f32> &yGridVector = originalCoordinates.get_yGridVector();
;;;177            const LinearSequence<f32> &xGridVector = originalCoordinates.get_xGridVector();
;;;178    
;;;179            const f32 yGridStart = yGridVector.get_start();
;;;180            const f32 xGridStart = xGridVector.get_start();
000216  9531              STR      r5,[sp,#0xc4]
000218  912d              STR      r1,[sp,#0xb4]
00021a  e9cd2332          STRD     r2,r3,[sp,#0xc8]
00021e  981d              LDR      r0,[sp,#0x74]
000220  e9cd0429          STRD     r0,r4,[sp,#0xa4]
;;;181    
;;;182            const f32 yGridDelta = yGridVector.get_increment();
;;;183            const f32 xGridDelta = xGridVector.get_increment();
;;;184    
;;;185            const s32 yIterationMax = yGridVector.get_size();
;;;186            const s32 xIterationMax = xGridVector.get_size();
;;;187    
;;;188            for(s32 iteration=0; iteration<maxIterations; iteration++) {
000224  2000              MOVS     r0,#0
000226  9028              STR      r0,[sp,#0xa0]
000228  984f              LDR      r0,[sp,#0x13c]
00022a  2800              CMP      r0,#0
00022c  bfc4              ITT      GT
00022e  eb070087          ADDGT    r0,r7,r7,LSL #2
000232  9027              STRGT    r0,[sp,#0x9c]
000234  f34081f2          BLE.W    |L5.1564|
                  |L5.568|
;;;189              const Array<f32> &homography = this->transformation.get_homography();
000238  f1060018          ADD      r0,r6,#0x18
00023c  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
000240  6882              LDR      r2,[r0,#8]
000242  6901              LDR      r1,[r0,#0x10]
;;;190              const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
000244  2300              MOVS     r3,#0
000246  fb031002          MLA      r0,r3,r2,r1
00024a  ed900a00          VLDR     s0,[r0,#0]
00024e  ed8d0a37          VSTR     s0,[sp,#0xdc]
000252  ed900a01          VLDR     s0,[r0,#4]
000256  ed8d0a36          VSTR     s0,[sp,#0xd8]
00025a  edd00a02          VLDR     s1,[r0,#8]
00025e  ed9d0a19          VLDR     s0,[sp,#0x64]
;;;191              const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
000262  2001              MOVS     r0,#1
000264  fb001002          MLA      r0,r0,r2,r1
000268  eec0fa80          VDIV.F32 s31,s1,s0             ;190
00026c  edd00a02          VLDR     s1,[r0,#8]
000270  ed90fa00          VLDR     s30,[r0,#0]
000274  edd0ea01          VLDR     s29,[r0,#4]
;;;192              const f32 h20 = homography[2][0] * initialImageScaleF32; const f32 h21 = homography[2][1] * initialImageScaleF32; //const f32 h22 = 1.0f;
000278  2002              MOVS     r0,#2
00027a  fb001002          MLA      r0,r0,r2,r1
00027e  9906              LDR      r1,[sp,#0x18]
000280  ee80ea80          VDIV.F32 s28,s1,s0             ;191
000284  edd00a00          VLDR     s1,[r0,#0]
000288  ee60da80          VMUL.F32 s27,s1,s0
00028c  edd00a01          VLDR     s1,[r0,#4]
;;;193    
;;;194              AWAt.SetZero();
000290  a802              ADD      r0,sp,#8
000292  ee20da80          VMUL.F32 s26,s1,s0             ;192
000296  b191              CBZ      r1,|L5.702|
000298  9902              LDR      r1,[sp,#8]            ;192
00029a  2900              CMP      r1,#0                 ;192
00029c  bfa4              ITT      GE                    ;192
00029e  9903              LDRGE    r1,[sp,#0xc]          ;192
0002a0  2900              CMPGE    r1,#0                 ;192
0002a2  db0c              BLT      |L5.702|
0002a4  2100              MOVS     r1,#0                 ;192
0002a6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0002aa  9904              LDR      r1,[sp,#0x10]         ;192
0002ac  9b04              LDR      r3,[sp,#0x10]         ;192
0002ae  4341              MULS     r1,r0,r1              ;192
0002b0  9a06              LDR      r2,[sp,#0x18]         ;192
0002b2  2000              MOVS     r0,#0                 ;192
0002b4  fb002003          MLA      r0,r0,r3,r2           ;192
0002b8  f7fffffe          BL       __aeabi_memclr4
0002bc  e00c              B        |L5.728|
                  |L5.702|
0002be  f2402176          MOV      r1,#0x276             ;192
0002c2  487e              LDR      r0,|L5.1212|
0002c4  4b7e              LDR      r3,|L5.1216|
0002c6  e9cd0100          STRD     r0,r1,[sp,#0]         ;192
0002ca  f103027c          ADD      r2,r3,#0x7c           ;192
0002ce  f1a20118          SUB      r1,r2,#0x18           ;192
0002d2  2005              MOVS     r0,#5                 ;192
0002d4  f7fffffe          BL       _Anki_Log
                  |L5.728|
0002d8  990b              LDR      r1,[sp,#0x2c]         ;192
;;;195              b.SetZero();
0002da  a807              ADD      r0,sp,#0x1c
0002dc  b191              CBZ      r1,|L5.772|
0002de  9907              LDR      r1,[sp,#0x1c]
0002e0  2900              CMP      r1,#0
0002e2  bfa4              ITT      GE
0002e4  9908              LDRGE    r1,[sp,#0x20]
0002e6  2900              CMPGE    r1,#0
0002e8  db0c              BLT      |L5.772|
0002ea  2100              MOVS     r1,#0
0002ec  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0002f0  9909              LDR      r1,[sp,#0x24]
0002f2  9b09              LDR      r3,[sp,#0x24]
0002f4  4341              MULS     r1,r0,r1
0002f6  9a0b              LDR      r2,[sp,#0x2c]
0002f8  2000              MOVS     r0,#0
0002fa  fb002003          MLA      r0,r0,r3,r2
0002fe  f7fffffe          BL       __aeabi_memclr4
000302  e00c              B        |L5.798|
                  |L5.772|
000304  f2402176          MOV      r1,#0x276
000308  486c              LDR      r0,|L5.1212|
00030a  4b6d              LDR      r3,|L5.1216|
00030c  e9cd0100          STRD     r0,r1,[sp,#0]
000310  f103027c          ADD      r2,r3,#0x7c
000314  f1a20118          SUB      r1,r2,#0x18
000318  2005              MOVS     r0,#5
00031a  f7fffffe          BL       _Anki_Log
                  |L5.798|
;;;196    
;;;197              s32 numInBounds = 0;
00031e  2700              MOVS     r7,#0
;;;198    
;;;199              // TODO: make the x and y limits from 1 to end-2
;;;200    
;;;201              f32 yOriginal = yGridStart;
;;;202              for(s32 y=0; y<yIterationMax; y++) {
000320  9829              LDR      r0,[sp,#0xa4]
000322  eddd8a2d          VLDR     s17,[sp,#0xb4]        ;201
000326  463d              MOV      r5,r7
000328  2800              CMP      r0,#0
00032a  f3408177          BLE.W    |L5.1564|
                  |L5.814|
00032e  f8d610d8          LDR      r1,[r6,#0xd8]
000332  9827              LDR      r0,[sp,#0x9c]
;;;203                const u8 * restrict pTemplateImage = this->templateImagePyramid[whichScale].Pointer(y, 0);
;;;204    
;;;205                const s16 * restrict pTemplateImageXGradient = this->templateImageXGradientPyramid[whichScale].Pointer(y, 0);
;;;206                const s16 * restrict pTemplateImageYGradient = this->templateImageYGradientPyramid[whichScale].Pointer(y, 0);
;;;207    
;;;208                f32 xOriginal = xGridStart;
;;;209    
;;;210                for(s32 x=0; x<xIterationMax; x++) {
000334  2400              MOVS     r4,#0
000336  eb010080          ADD      r0,r1,r0,LSL #2
00033a  6901              LDR      r1,[r0,#0x10]
00033c  6880              LDR      r0,[r0,#8]
00033e  fb051000          MLA      r0,r5,r0,r1
000342  9038              STR      r0,[sp,#0xe0]
000344  f8d6110c          LDR      r1,[r6,#0x10c]
000348  9827              LDR      r0,[sp,#0x9c]
00034a  eb010080          ADD      r0,r1,r0,LSL #2
00034e  6901              LDR      r1,[r0,#0x10]
000350  6880              LDR      r0,[r0,#8]
000352  fb051000          MLA      r0,r5,r0,r1
000356  9001              STR      r0,[sp,#4]
000358  f8d61140          LDR      r1,[r6,#0x140]
00035c  9827              LDR      r0,[sp,#0x9c]
00035e  eb010080          ADD      r0,r1,r0,LSL #2
000362  6901              LDR      r1,[r0,#0x10]
000364  6880              LDR      r0,[r0,#8]
000366  fb051000          MLA      r0,r5,r0,r1
00036a  9000              STR      r0,[sp,#0]            ;208
00036c  982a              LDR      r0,[sp,#0xa8]
00036e  ed9d8a31          VLDR     s16,[sp,#0xc4]        ;208
000372  2800              CMP      r0,#0
000374  dd7d              BLE      |L5.1138|
                  |L5.886|
;;;211                  // TODO: These two could be strength reduced
;;;212                  const f32 xTransformedRaw = h00*xOriginal + h01*yOriginal + h02;
000376  ed9d0a37          VLDR     s0,[sp,#0xdc]
00037a  ee600a08          VMUL.F32 s1,s0,s16
00037e  ed9d0a36          VLDR     s0,[sp,#0xd8]
000382  ee400a28          VMLA.F32 s1,s0,s17
;;;213                  const f32 yTransformedRaw = h10*xOriginal + h11*yOriginal + h12;
000386  ee2f0a08          VMUL.F32 s0,s30,s16
00038a  ee0e0aa8          VMLA.F32 s0,s29,s17
00038e  ee301aaf          VADD.F32 s2,s1,s31             ;212
000392  ee700a0e          VADD.F32 s1,s0,s28
;;;214    
;;;215                  const f32 normalization = h20*xOriginal + h21*yOriginal + 1.0f;
000396  ee2d0a88          VMUL.F32 s0,s27,s16
00039a  ee0d0a28          VMLA.F32 s0,s26,s17
00039e  ee300a2c          VADD.F32 s0,s0,s25
;;;216    
;;;217                  const f32 xTransformed = (xTransformedRaw / normalization) + centerOffsetScaled.x;
0003a2  eec11a00          VDIV.F32 s3,s2,s0
0003a6  ed9d1a2e          VLDR     s2,[sp,#0xb8]
0003aa  ee71aa81          VADD.F32 s21,s3,s2
;;;218                  const f32 yTransformed = (yTransformedRaw / normalization) + centerOffsetScaled.y;
0003ae  ee801a80          VDIV.F32 s2,s1,s0
0003b2  ed9d0a2f          VLDR     s0,[sp,#0xbc]
0003b6  ee31aa00          VADD.F32 s20,s2,s0
;;;219    
;;;220                  xOriginal += xGridDelta;
0003ba  ed9d0a33          VLDR     s0,[sp,#0xcc]
0003be  ee388a00          VADD.F32 s16,s16,s0
;;;221    
;;;222                  const f32 x0 = FLT_FLOOR(xTransformed);
0003c2  ed9f9a3d          VLDR     s18,|L5.1208|
0003c6  ee3a0a89          VADD.F32 s0,s21,s18
0003ca  f7fffffe          BL       __hardfp_floorf
0003ce  eef09a40          VMOV.F32 s19,s0
;;;223                  const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
0003d2  eeb00a6a          VMOV.F32 s0,s21
0003d6  f7fffffe          BL       __hardfp_ceilf
0003da  eeb0ca40          VMOV.F32 s24,s0
;;;224    
;;;225                  const f32 y0 = FLT_FLOOR(yTransformed);
0003de  ee3a0a09          VADD.F32 s0,s20,s18
0003e2  f7fffffe          BL       __hardfp_floorf
0003e6  eeb09a40          VMOV.F32 s18,s0
;;;226                  const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
0003ea  eeb00a4a          VMOV.F32 s0,s20
0003ee  f7fffffe          BL       __hardfp_ceilf
;;;227    
;;;228                  // If out of bounds, continue
;;;229                  if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
0003f2  eef59ac0          VCMPE.F32 s19,#0.0
0003f6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0003fa  d37d              BCC      |L5.1272|
0003fc  eddd0a2c          VLDR     s1,[sp,#0xb0]
000400  eeb4cae0          VCMPE.F32 s24,s1
000404  eef1fa10          VMRS     APSR_nzcv,FPSCR
000408  dc76              BGT      |L5.1272|
00040a  eeb59ac0          VCMPE.F32 s18,#0.0
00040e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000412  d371              BCC      |L5.1272|
000414  eddd0a2b          VLDR     s1,[sp,#0xac]
000418  eeb40ae0          VCMPE.F32 s0,s1
00041c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000420  dc6a              BGT      |L5.1272|
;;;230                    continue;
;;;231                  }
;;;232    
;;;233                  numInBounds++;
;;;234    
;;;235                  const f32 alphaX = xTransformed - x0;
000422  ee7a0ae9          VSUB.F32 s1,s21,s19
;;;236                  const f32 alphaXinverse = 1 - alphaX;
;;;237    
;;;238                  const f32 alphaY = yTransformed - y0;
000426  ee7a1a49          VSUB.F32 s3,s20,s18
00042a  eeb59ac0          VCMPE.F32 s18,#0.0
00042e  1c7f              ADDS     r7,r7,#1              ;233
000430  ee3c1ae0          VSUB.F32 s2,s25,s1             ;236
;;;239                  const f32 alphaYinverse = 1.0f - alphaY;
000434  ee7c2ae1          VSUB.F32 s5,s25,s3
000438  eef1fa10          VMRS     APSR_nzcv,FPSCR
00043c  bfcc              ITE      GT
00043e  ee392a0b          VADDGT.F32 s4,s18,s22
000442  ee392a4b          VSUBLE.F32 s4,s18,s22
000446  eebd2ac2          VCVT.S32.F32 s4,s4
00044a  eeb50ac0          VCMPE.F32 s0,#0.0
00044e  ee123a10          VMOV     r3,s4
000452  eef1fa10          VMRS     APSR_nzcv,FPSCR
000456  bfcc              ITE      GT
000458  ee300a0b          VADDGT.F32 s0,s0,s22
00045c  ee300a4b          VSUBLE.F32 s0,s0,s22
000460  eebd0ac0          VCVT.S32.F32 s0,s0
000464  eef59ac0          VCMPE.F32 s19,#0.0
000468  ee10ca10          VMOV     r12,s0
00046c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000470  e000              B        |L5.1140|
                  |L5.1138|
000472  e083              B        |L5.1404|
                  |L5.1140|
000474  bfcc              ITE      GT
000476  ee390a8b          VADDGT.F32 s0,s19,s22
00047a  ee390acb          VSUBLE.F32 s0,s19,s22
00047e  eebd0ac0          VCVT.S32.F32 s0,s0
000482  994e              LDR      r1,[sp,#0x138]
000484  9a4e              LDR      r2,[sp,#0x138]
000486  ee100a10          VMOV     r0,s0
00048a  6909              LDR      r1,[r1,#0x10]
00048c  6892              LDR      r2,[r2,#8]
00048e  fb031302          MLA      r3,r3,r2,r1
000492  fb0c1102          MLA      r1,r12,r2,r1
000496  4403              ADD      r3,r3,r0
000498  4408              ADD      r0,r0,r1
;;;240    
;;;241                  const s32 y0S32 = Round<s32>(y0);
;;;242                  const s32 y1S32 = Round<s32>(y1);
;;;243                  const s32 x0S32 = Round<s32>(x0);
;;;244    
;;;245                  const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;246                  const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;247    
;;;248                  const f32 pixelTL = *pReference_y0;
00049a  7819              LDRB     r1,[r3,#0]
00049c  ee001a10          VMOV     s0,r1
;;;249                  const f32 pixelTR = *(pReference_y0+1);
0004a0  7859              LDRB     r1,[r3,#1]
0004a2  eeb80a40          VCVT.F32.U32 s0,s0                 ;248
0004a6  ee021a10          VMOV     s4,r1
0004aa  e00b              B        |L5.1220|
                  |L5.1196|
0004ac  43ff0000          DCFS     0x43ff0000 ; 510
                  |L5.1200|
0004b0  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L5.1204|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L5.1208|
0004b8  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L5.1212|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetZero()::__PRETTY_FUNCTION__
                  |L5.1216|
                          DCD      ||.constdata||+0x1b4
                  |L5.1220|
;;;250                  const f32 pixelBL = *pReference_y1;
0004c4  7801              LDRB     r1,[r0,#0]
0004c6  eeb83a42          VCVT.F32.U32 s6,s4
0004ca  ee021a10          VMOV     s4,r1
;;;251                  const f32 pixelBR = *(pReference_y1+1);
0004ce  7840              LDRB     r0,[r0,#1]
0004d0  ee210a00          VMUL.F32 s0,s2,s0
0004d4  eeb82a42          VCVT.F32.U32 s4,s4                 ;250
0004d8  ee030a90          VMOV     s7,r0
;;;252    
;;;253                  const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;254    
;;;255                  //const u8 interpolatedPixel = static_cast<u8>(Round(interpolatedPixelF32));
;;;256    
;;;257                  // This block is the non-interpolation part of the per-sample algorithm
;;;258                  {
;;;259                    const f32 templatePixelValue = static_cast<f32>(pTemplateImage[x]);
0004dc  9838              LDR      r0,[sp,#0xe0]
0004de  ee000a83          VMLA.F32 s0,s1,s6
0004e2  eef83a63          VCVT.F32.U32 s7,s7                 ;251
0004e6  ee212a02          VMUL.F32 s4,s2,s4              ;251
0004ea  ee002aa3          VMLA.F32 s4,s1,s7              ;251
0004ee  ee221a80          VMUL.F32 s2,s5,s0              ;251
0004f2  ee011a82          VMLA.F32 s2,s3,s4              ;251
0004f6  e000              B        |L5.1274|
                  |L5.1272|
0004f8  e03b              B        |L5.1394|
                  |L5.1274|
0004fa  5d00              LDRB     r0,[r0,r4]
0004fc  ee000a10          VMOV     s0,r0
;;;260                    const f32 xGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageXGradient[x]);
000500  9801              LDR      r0,[sp,#4]
000502  eef81a40          VCVT.F32.U32 s3,s0                 ;259
000506  f9300014          LDRSH    r0,[r0,r4,LSL #1]
00050a  ee000a10          VMOV     s0,r0
;;;261                    const f32 yGradientValue = scaleOverFiveTen * static_cast<f32>(pTemplateImageYGradient[x]);
00050e  9800              LDR      r0,[sp,#0]
;;;262    
;;;263                    const f32 tGradientValue = oneOverTwoFiftyFive * (interpolatedPixelF32 - templatePixelValue);
000510  ee711a61          VSUB.F32 s3,s2,s3
000514  eeb80ac0          VCVT.F32.S32 s0,s0                 ;260
000518  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;261
00051c  ee600a2b          VMUL.F32 s1,s0,s23             ;260
000520  ee000a10          VMOV     s0,r0                 ;261
000524  eeb80ac0          VCVT.F32.S32 s0,s0                 ;261
000528  ee200a2b          VMUL.F32 s0,s0,s23             ;261
00052c  ed9f1a3c          VLDR     s2,|L5.1568|
000530  ee211a81          VMUL.F32 s2,s3,s2
;;;264    
;;;265                    //AWAt
;;;266                    //  b
;;;267                    AWAt00 += xGradientValue * xGradientValue;
000534  edd91a00          VLDR     s3,[r9,#0]
000538  ee401aa0          VMLA.F32 s3,s1,s1
00053c  edc91a00          VSTR     s3,[r9,#0]
;;;268                    AWAt01 += xGradientValue * yGradientValue;
000540  9830              LDR      r0,[sp,#0xc0]
000542  edd01a00          VLDR     s3,[r0,#0]
000546  ee401a80          VMLA.F32 s3,s1,s0
00054a  edc01a00          VSTR     s3,[r0,#0]
;;;269                    AWAt11 += yGradientValue * yGradientValue;
00054e  eddb1a00          VLDR     s3,[r11,#0]
000552  ee401a00          VMLA.F32 s3,s0,s0
000556  edcb1a00          VSTR     s3,[r11,#0]
;;;270    
;;;271                    b0 += xGradientValue * tGradientValue;
00055a  edd81a00          VLDR     s3,[r8,#0]
00055e  ee401a81          VMLA.F32 s3,s1,s2
000562  edc81a00          VSTR     s3,[r8,#0]
;;;272                    b1 += yGradientValue * tGradientValue;
000566  edda0a00          VLDR     s1,[r10,#0]
00056a  ee400a01          VMLA.F32 s1,s0,s2
00056e  edca0a00          VSTR     s1,[r10,#0]
                  |L5.1394|
000572  982a              LDR      r0,[sp,#0xa8]         ;210
000574  1c64              ADDS     r4,r4,#1              ;210
000576  4284              CMP      r4,r0                 ;210
000578  f6ffaefd          BLT      |L5.886|
                  |L5.1404|
;;;273                  }
;;;274                } // for(s32 x=0; x<xIterationMax; x++)
;;;275    
;;;276                yOriginal += yGridDelta;
00057c  ed9d0a32          VLDR     s0,[sp,#0xc8]
000580  9829              LDR      r0,[sp,#0xa4]         ;202
000582  1c6d              ADDS     r5,r5,#1              ;202
000584  ee788a80          VADD.F32 s17,s17,s0
000588  4285              CMP      r5,r0                 ;202
00058a  f6ffaed0          BLT      |L5.814|
;;;277              } // for(s32 y=0; y<yIterationMax; y++)
;;;278    
;;;279              if(numInBounds < 16) {
00058e  2f10              CMP      r7,#0x10
000590  db44              BLT      |L5.1564|
;;;280                AnkiWarn("LucasKanadeTracker_Projective::IterativelyRefineTrack_Translation", "Template drifted too far out of image.");
;;;281                return RESULT_OK;
;;;282              }
;;;283    
;;;284              Matrix::MakeSymmetric(AWAt, false);
000592  2100              MOVS     r1,#0
000594  a802              ADD      r0,sp,#8
000596  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)
;;;285    
;;;286              //AWAt.Print("New AWAt");
;;;287              //b.Print("New b");
;;;288    
;;;289              bool numericalFailure;
;;;290    
;;;291              if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK)
00059a  ab35              ADD      r3,sp,#0xd4
00059c  2200              MOVS     r2,#0
00059e  a907              ADD      r1,sp,#0x1c
0005a0  a802              ADD      r0,sp,#8
0005a2  f7fffffe          BL       _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
0005a6  2800              CMP      r0,#0
;;;292                return lastResult;
;;;293    
;;;294              if(numericalFailure){
;;;295                AnkiWarn("LucasKanadeTracker_Projective::IterativelyRefineTrack_Translation", "numericalFailure");
;;;296                return RESULT_OK;
;;;297              }
;;;298    
;;;299              //b.Print("New update");
;;;300    
;;;301              this->transformation.Update(b, initialImageScaleF32, scratch, Transformations::TRANSFORM_TRANSLATION);
;;;302    
;;;303              // Check if we're done with iterations
;;;304              const f32 minChange = UpdatePreviousCorners(transformation, previousCorners, scratch);
;;;305    
;;;306              if(minChange < convergenceTolerance) {
;;;307                verify_converged = true;
;;;308                return RESULT_OK;
;;;309              }
;;;310            } // for(s32 iteration=0; iteration<maxIterations; iteration++)
;;;311    
;;;312            return RESULT_OK;
;;;313          } // Result LucasKanadeTracker_Projective::IterativelyRefineTrack_Translation()
0005a8  bf1f              ITTTT    NE
0005aa  b03b              ADDNE    sp,sp,#0xec
0005ac  ecbd8b10          VPOPNE   {d8-d15}
0005b0  b006              ADDNE    sp,sp,#0x18
0005b2  e8bd8ff0          POPNE    {r4-r11,pc}
0005b6  f89d00d4          LDRB     r0,[sp,#0xd4]         ;294
0005ba  bb78              CBNZ     r0,|L5.1564|
0005bc  a820              ADD      r0,sp,#0x80           ;301
0005be  995b              LDR      r1,[sp,#0x16c]        ;301
0005c0  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0005c4  4602              MOV      r2,r0                 ;301
0005c6  f44f7300          MOV      r3,#0x200             ;301
0005ca  ed9d0a19          VLDR     s0,[sp,#0x64]         ;301
0005ce  a907              ADD      r1,sp,#0x1c           ;301
0005d0  f1060018          ADD      r0,r6,#0x18           ;301
0005d4  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
0005d8  a820              ADD      r0,sp,#0x80           ;304
0005da  995b              LDR      r1,[sp,#0x16c]        ;304
0005dc  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0005e0  4602              MOV      r2,r0                 ;304
0005e2  a90c              ADD      r1,sp,#0x30           ;304
0005e4  f1060018          ADD      r0,r6,#0x18           ;304
0005e8  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
0005ec  eddd0a4b          VLDR     s1,[sp,#0x12c]        ;306
0005f0  eeb40ae0          VCMPE.F32 s0,s1                 ;306
0005f4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;306
0005f8  d209              BCS      |L5.1550|
0005fa  995a              LDR      r1,[sp,#0x168]        ;307
0005fc  2001              MOVS     r0,#1                 ;307
0005fe  7008              STRB     r0,[r1,#0]            ;307
000600  2000              MOVS     r0,#0                 ;308
                  |L5.1538|
000602  b03b              ADD      sp,sp,#0xec
000604  ecbd8b10          VPOP     {d8-d15}
000608  b006              ADD      sp,sp,#0x18
00060a  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.1550|
00060e  9828              LDR      r0,[sp,#0xa0]         ;188
000610  994f              LDR      r1,[sp,#0x13c]        ;188
000612  1c40              ADDS     r0,r0,#1              ;188
000614  9028              STR      r0,[sp,#0xa0]         ;188
000616  4288              CMP      r0,r1                 ;188
000618  f6ffae0e          BLT      |L5.568|
                  |L5.1564|
00061c  2000              MOVS     r0,#0                 ;312
00061e  e7f0              B        |L5.1538|
;;;314    
                          ENDP

                  |L5.1568|
000620  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC2ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::LucasKanadeTracker_Projective__sub_object(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
                  _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::LucasKanadeTracker_Projective(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
;;;36     
;;;37           LucasKanadeTracker_Projective::LucasKanadeTracker_Projective(
;;;38             const Array<u8> &templateImage,
;;;39             const Quadrilateral<f32> &templateQuad,
;;;40             const f32 scaleTemplateRegionPercent,
;;;41             const s32 numPyramidLevels,
;;;42             const Transformations::TransformType transformType,
;;;43             MemoryStack &memory)
;;;44             : LucasKanadeTracker_Fast(Transformations::TRANSFORM_PROJECTIVE, templateImage, templateQuad, scaleTemplateRegionPercent, numPyramidLevels, transformType, memory)
;;;45           {
;;;46             this->isValid = true;
;;;47           }
;;;48     
000000  b510              PUSH     {r4,lr}
000002  b084              SUB      sp,sp,#0x10
000004  469c              MOV      r12,r3
000006  4614              MOV      r4,r2
000008  e9dd2306          LDRD     r2,r3,[sp,#0x18]
00000c  f8cdc000          STR      r12,[sp,#0]
000010  e9cd2301          STRD     r2,r3,[sp,#4]
000014  460a              MOV      r2,r1
000016  4623              MOV      r3,r4
000018  f44f6100          MOV      r1,#0x800
00001c  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::LucasKanadeTracker_Fast(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
000020  2101              MOVS     r1,#1
000022  f8801070          STRB     r1,[r0,#0x70]
000026  b004              ADD      sp,sp,#0x10
000028  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC2Ev                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::LucasKanadeTracker_Projective__sub_object()
                  _ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC1Ev PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Projective::LucasKanadeTracker_Projective()
;;;31         {
;;;32           LucasKanadeTracker_Projective::LucasKanadeTracker_Projective()
;;;33             :  LucasKanadeTracker_Fast(Transformations::TRANSFORM_PROJECTIVE)
;;;34           {
;;;35           }
;;;36     
000000  f44f6100          MOV      r1,#0x800
000004  f7ffbffe          B.W      _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_FastC1ENS0_15Transformations13TransformTypeE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Fast::LucasKanadeTracker_Fast(Anki::Embedded::Transformations::TransformType)
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_ProjectiveC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeERNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker29LucasKanadeTracker_Projective11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a54656d          DCB      0x3a,0x54,0x65,0x6d
000020  706c6174          DCB      0x70,0x6c,0x61,0x74
000024  65547261          DCB      0x65,0x54,0x72,0x61
000028  636b6572          DCB      0x63,0x6b,0x65,0x72
00002c  3a3a4c75          DCB      0x3a,0x3a,0x4c,0x75
000030  6361734b          DCB      0x63,0x61,0x73,0x4b
000034  616e6164          DCB      0x61,0x6e,0x61,0x64
000038  65547261          DCB      0x65,0x54,0x72,0x61
00003c  636b6572          DCB      0x63,0x6b,0x65,0x72
000040  5f50726f          DCB      0x5f,0x50,0x72,0x6f
000044  6a656374          DCB      0x6a,0x65,0x63,0x74
000048  6976653a          DCB      0x69,0x76,0x65,0x3a
00004c  3a497465          DCB      0x3a,0x49,0x74,0x65
000050  72617469          DCB      0x72,0x61,0x74,0x69
000054  76656c79          DCB      0x76,0x65,0x6c,0x79
000058  52656669          DCB      0x52,0x65,0x66,0x69
00005c  6e655472          DCB      0x6e,0x65,0x54,0x72
000060  61636b28          DCB      0x61,0x63,0x6b,0x28
000064  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000068  7420416e          DCB      0x74,0x20,0x41,0x6e
00006c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000070  456d6265          DCB      0x45,0x6d,0x62,0x65
000074  64646564          DCB      0x64,0x64,0x65,0x64
000078  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
00007c  7261793c          DCB      0x72,0x61,0x79,0x3c
000080  756e7369          DCB      0x75,0x6e,0x73,0x69
000084  676e6564          DCB      0x67,0x6e,0x65,0x64
000088  20636861          DCB      0x20,0x63,0x68,0x61
00008c  723e2026          DCB      0x72,0x3e,0x20,0x26
000090  2c207369          DCB      0x2c,0x20,0x73,0x69
000094  676e6564          DCB      0x67,0x6e,0x65,0x64
000098  20696e74          DCB      0x20,0x69,0x6e,0x74
00009c  2c207369          DCB      0x2c,0x20,0x73,0x69
0000a0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a4  20696e74          DCB      0x20,0x69,0x6e,0x74
0000a8  2c20666c          DCB      0x2c,0x20,0x66,0x6c
0000ac  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000b0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000b4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000b8  6d626564          DCB      0x6d,0x62,0x65,0x64
0000bc  6465643a          DCB      0x64,0x65,0x64,0x3a
0000c0  3a547261          DCB      0x3a,0x54,0x72,0x61
0000c4  6e73666f          DCB      0x6e,0x73,0x66,0x6f
0000c8  726d6174          DCB      0x72,0x6d,0x61,0x74
0000cc  696f6e73          DCB      0x69,0x6f,0x6e,0x73
0000d0  3a3a5472          DCB      0x3a,0x3a,0x54,0x72
0000d4  616e7366          DCB      0x61,0x6e,0x73,0x66
0000d8  6f726d54          DCB      0x6f,0x72,0x6d,0x54
0000dc  7970652c          DCB      0x79,0x70,0x65,0x2c
0000e0  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000e4  6c20262c          DCB      0x6c,0x20,0x26,0x2c
0000e8  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000ec  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000f0  6d626564          DCB      0x6d,0x62,0x65,0x64
0000f4  6465643a          DCB      0x64,0x65,0x64,0x3a
0000f8  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
0000fc  6f727953          DCB      0x6f,0x72,0x79,0x53
000100  7461636b          DCB      0x74,0x61,0x63,0x6b
000104  29000000          DCB      0x29,0x00,0x00,0x00
000108  4c696e65          DCB      0x4c,0x69,0x6e,0x65
00010c  61725365          DCB      0x61,0x72,0x53,0x65
000110  7175656e          DCB      0x71,0x75,0x65,0x6e
000114  63653c54          DCB      0x63,0x65,0x3c,0x54
000118  7970653e          DCB      0x79,0x70,0x65,0x3e
00011c  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000120  6d707574          DCB      0x6d,0x70,0x75,0x74
000124  6553697a          DCB      0x65,0x53,0x69,0x7a
000128  65000000          DCB      0x65,0x00,0x00,0x00
00012c  73697a65          DCB      0x73,0x69,0x7a,0x65
000130  20657374          DCB      0x20,0x65,0x73,0x74
000134  696d6174          DCB      0x69,0x6d,0x61,0x74
000138  696f6e20          DCB      0x69,0x6f,0x6e,0x20
00013c  6661696c          DCB      0x66,0x61,0x69,0x6c
000140  65640000          DCB      0x65,0x64,0x00,0x00
000144  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000148  6f726574          DCB      0x6f,0x72,0x65,0x74
00014c  6563685c          DCB      0x65,0x63,0x68,0x5c
000150  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000154  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000158  6e636c75          DCB      0x6e,0x63,0x6c,0x75
00015c  64655c61          DCB      0x64,0x65,0x5c,0x61
000160  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000164  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000168  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
00016c  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000170  2f736571          DCB      0x2f,0x73,0x65,0x71
000174  75656e63          DCB      0x75,0x65,0x6e,0x63
000178  65732e68          DCB      0x65,0x73,0x2e,0x68
00017c  00000000          DCB      0x00,0x00,0x00,0x00
000180  41727261          DCB      0x41,0x72,0x72,0x61
000184  793c5479          DCB      0x79,0x3c,0x54,0x79
000188  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00018c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000190  70757465          DCB      0x70,0x75,0x74,0x65
000194  52657175          DCB      0x52,0x65,0x71,0x75
000198  69726564          DCB      0x69,0x72,0x65,0x64
00019c  53747269          DCB      0x53,0x74,0x72,0x69
0001a0  64650000          DCB      0x64,0x65,0x00,0x00
0001a4  496e7661          DCB      0x49,0x6e,0x76,0x61
0001a8  6c696420          DCB      0x6c,0x69,0x64,0x20
0001ac  73697a65          DCB      0x73,0x69,0x7a,0x65
0001b0  00000000          DCB      0x00,0x00,0x00,0x00
0001b4  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0001b8  6f726574          DCB      0x6f,0x72,0x65,0x74
0001bc  6563685c          DCB      0x65,0x63,0x68,0x5c
0001c0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001c4  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0001c8  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0001cc  64655c61          DCB      0x64,0x65,0x5c,0x61
0001d0  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0001d4  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001d8  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0001dc  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0001e0  2f617272          DCB      0x2f,0x61,0x72,0x72
0001e4  61793264          DCB      0x61,0x79,0x32,0x64
0001e8  2e680000          DCB      0x2e,0x68,0x00,0x00
0001ec  41727261          DCB      0x41,0x72,0x72,0x61
0001f0  793c5479          DCB      0x79,0x3c,0x54,0x79
0001f4  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0001f8  3a676574          DCB      0x3a,0x67,0x65,0x74
0001fc  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000200  65000000          DCB      0x65,0x00,0x00,0x00
000204  4e656761          DCB      0x4e,0x65,0x67,0x61
000208  74697665          DCB      0x74,0x69,0x76,0x65
00020c  2064696d          DCB      0x20,0x64,0x69,0x6d
000210  656e7369          DCB      0x65,0x6e,0x73,0x69
000214  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000218  41727261          DCB      0x41,0x72,0x72,0x61
00021c  793c5479          DCB      0x79,0x3c,0x54,0x79
000220  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000224  3a536574          DCB      0x3a,0x53,0x65,0x74
000228  5a65726f          DCB      0x5a,0x65,0x72,0x6f
00022c  00000000          DCB      0x00,0x00,0x00,0x00
000230  41727261          DCB      0x41,0x72,0x72,0x61
000234  793c5479          DCB      0x79,0x3c,0x54,0x79
000238  70653e20          DCB      0x70,0x65,0x3e,0x20
00023c  6973206e          DCB      0x69,0x73,0x20,0x6e
000240  6f742076          DCB      0x6f,0x74,0x20,0x76
000244  616c6964          DCB      0x61,0x6c,0x69,0x64
000248  00000000          DCB      0x00,0x00,0x00,0x00
00024c  54686520          DCB      0x54,0x68,0x65,0x20
000250  74656d70          DCB      0x74,0x65,0x6d,0x70
000254  6c617465          DCB      0x6c,0x61,0x74,0x65
000258  496d6167          DCB      0x49,0x6d,0x61,0x67
00025c  65206d75          DCB      0x65,0x20,0x6d,0x75
000260  73742062          DCB      0x73,0x74,0x20,0x62
000264  65206120          DCB      0x65,0x20,0x61,0x20
000268  706f7765          DCB      0x70,0x6f,0x77,0x65
00026c  72206f66          DCB      0x72,0x20,0x6f,0x66
000270  2074776f          DCB      0x20,0x74,0x77,0x6f
000274  20736d61          DCB      0x20,0x73,0x6d,0x61
000278  6c6c6572          DCB      0x6c,0x6c,0x65,0x72
00027c  20746861          DCB      0x20,0x74,0x68,0x61
000280  6e204241          DCB      0x6e,0x20,0x42,0x41
000284  53455f49          DCB      0x53,0x45,0x5f,0x49
000288  4d414745          DCB      0x4d,0x41,0x47,0x45
00028c  5f574944          DCB      0x5f,0x57,0x49,0x44
000290  544800            DCB      0x54,0x48,0x00

                          AREA ||t._ZN4Anki8Embedded5PointIfEC1Ev||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5PointIfEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point<float>::Point__sub_object()
                  _ZN4Anki8Embedded5PointIfEC1Ev PROC ; Anki::Embedded::Point<float>::Point()
;;;28     #endif
;;;29         template<typename Type> Point<Type>::Point()
;;;30           : x(static_cast<Type>(0)), y(static_cast<Type>(0))
;;;31         {
;;;32         }
;;;33     
000000  ed9f0a03          VLDR     s0,|L50.16|
000004  ed800a00          VSTR     s0,[r0,#0]
000008  ed800a01          VSTR     s0,[r0,#4]
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L50.16|
000010  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.51||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5PointIfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5PointIfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L57.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L57.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L57.384|
000044  a25c              ADR      r2,|L57.440|
000046  a160              ADR      r1,|L57.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L57.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L57.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L57.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L57.384|
000080  a24d              ADR      r2,|L57.440|
000082  a157              ADR      r1,|L57.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L57.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L57.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L57.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L57.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L57.384|
0000c8  a251              ADR      r2,|L57.528|
0000ca  a156              ADR      r1,|L57.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L57.372|
                  |L57.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L57.384|
0000e0  a258              ADR      r2,|L57.580|
0000e2  a15f              ADR      r1,|L57.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L57.372|
                  |L57.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L57.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L57.384|
000110  a259              ADR      r2,|L57.632|
000112  a144              ADR      r1,|L57.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L57.372|
                  |L57.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L57.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L57.384|
00015a  a251              ADR      r2,|L57.672|
00015c  a140              ADR      r1,|L57.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L57.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L57.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L57.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L57.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L57.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L57.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L57.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L57.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L57.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L57.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L57.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L57.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L57.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L57.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.58||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L64.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L64.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L64.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L64.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L64.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L64.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L64.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L64.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L64.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L64.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
0000b2  e009              B        |L64.200|
                  |L64.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L64.118|
                  |L64.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L64.140|
                  |L64.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L64.162|
                  |L64.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
                  |L64.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.65||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb||, COMGROUP=_ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb PROC ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
;;;352    
;;;353          template<typename Type> Result SolveLeastSquaresWithCholesky(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;354            Array<Type> &A_L,       //!< Input A Matrix and Output lower-triangular L matrix
;;;355            Array<Type> &Bt_Xt,     //!< Input B-transpose matrix and Output X-transpose solution
;;;356            bool realCholesky,      //!< A real Cholesky is slower to compute, and not required if only the X solution is required
;;;357            bool &numericalFailure  //!< If true, the solver failed because of numerical instability
;;;358            )
;;;359          {
000004  460e              MOV      r6,r1
000006  ed2d8b02          VPUSH    {d8}
00000a  b083              SUB      sp,sp,#0xc
00000c  4699              MOV      r9,r3
00000e  4604              MOV      r4,r0
;;;360            const s32 matrixHeight = A_L.get_size(0);
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000016  4605              MOV      r5,r0
;;;361            const s32 numSamples = Bt_Xt.get_size(0);
000018  2100              MOVS     r1,#0
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000020  4607              MOV      r7,r0
;;;362    
;;;363            numericalFailure = false;
000022  2000              MOVS     r0,#0
000024  f8890000          STRB     r0,[r9,#0]
000028  6920              LDR      r0,[r4,#0x10]
;;;364    
;;;365            AnkiConditionalErrorAndReturnValue(AreValid(A_L, Bt_Xt),
00002a  f8df826c          LDR      r8,|L71.664|
00002e  2800              CMP      r0,#0
000030  d026              BEQ      |L71.128|
000032  6820              LDR      r0,[r4,#0]
000034  2800              CMP      r0,#0
000036  bfa4              ITT      GE
000038  6860              LDRGE    r0,[r4,#4]
00003a  2800              CMPGE    r0,#0
00003c  db20              BLT      |L71.128|
00003e  6930              LDR      r0,[r6,#0x10]
000040  2800              CMP      r0,#0
000042  d01d              BEQ      |L71.128|
000044  6830              LDR      r0,[r6,#0]
000046  2800              CMP      r0,#0
000048  bfa4              ITT      GE
00004a  6870              LDRGE    r0,[r6,#4]
00004c  2800              CMPGE    r0,#0
00004e  db17              BLT      |L71.128|
;;;366              RESULT_FAIL_INVALID_OBJECT, "CholeskyDecomposition", "Invalid objects");
;;;367    
;;;368            AnkiConditionalErrorAndReturnValue(matrixHeight == A_L.get_size(1),
000050  2101              MOVS     r1,#1
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000058  42a8              CMP      r0,r5
00005a  d01e              BEQ      |L71.154|
00005c  f44f70b8          MOV      r0,#0x170
000060  e9cd8000          STRD     r8,r0,[sp,#0]
000064  a38d              ADR      r3,|L71.668|
000066  a29b              ADR      r2,|L71.724|
000068  a19f              ADR      r1,|L71.744|
00006a  2005              MOVS     r0,#5
00006c  f7fffffe          BL       _Anki_Log
000070  f04f60a0          MOV      r0,#0x5000000
                  |L71.116|
;;;369              RESULT_FAIL_INVALID_SIZE, "CholeskyDecomposition", "A_L is not square");
;;;370    
;;;371            AnkiConditionalErrorAndReturnValue(Bt_Xt.get_size(1) == matrixHeight,
;;;372              RESULT_FAIL_INVALID_SIZE, "CholeskyDecomposition", "Xt and Bt are the wrong sizes");
;;;373    
;;;374            // TODO: check if symmetric and positive-definite
;;;375    
;;;376            const Type minStableValue = Anki::Embedded::Flags::numeric_limits<Type>::epsilon();
;;;377    
;;;378            for(s32 i = 0; i < matrixHeight; i++) {
;;;379              // First, compute the non-diagonal values
;;;380              // This uses the results from the diagonal inverse computation from previous iterations of i
;;;381              Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;382    
;;;383              for(s32 j = 0; j < i; j++) {
;;;384                Type * restrict pAL_yj = A_L.Pointer(j, 0);
;;;385    
;;;386                Type sum = pAL_yi[j];
;;;387                for(s32 k = 0; k < j; k++) {
;;;388                  const Type value1 = pAL_yi[k];
;;;389                  const Type value2 = pAL_yj[k];
;;;390                  sum -= value1*value2;
;;;391                }
;;;392    
;;;393                pAL_yi[j] = sum*pAL_yj[j];
;;;394              } // for(s32 j = 0; j < i; j++)
;;;395    
;;;396              // Second, compute the inverse of the diagonal
;;;397              {
;;;398                Type sum = pAL_yi[i];
;;;399                for(s32 k = 0; k < i; k++) {
;;;400                  const Type value = pAL_yi[k];
;;;401                  sum -= value*value;
;;;402                }
;;;403    
;;;404                if(sum < minStableValue) {
;;;405                  numericalFailure = true;
;;;406                  return RESULT_OK;
;;;407                }
;;;408    
;;;409                // TODO: change this f32 square root to f64 if Type==f64
;;;410                const Type sumRoot = static_cast<Type>(sqrtf(static_cast<f32>(sum)));
;;;411                pAL_yi[i] = static_cast<Type>(1) / sumRoot;
;;;412              }
;;;413            } // for(s32 i = 0; i < m; i++)
;;;414    
;;;415            // Solve L*y = b via forward substitution
;;;416            for(s32 i = 0; i < matrixHeight; i++) {
;;;417              const Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;418              //Type * restrict pBX_yi = Bt_Xt.Pointer(i, 0);
;;;419    
;;;420              for(s32 j = 0; j < numSamples; j++) {
;;;421                Type * restrict pBX_yj = Bt_Xt.Pointer(j, 0);
;;;422    
;;;423                Type sum = pBX_yj[i];
;;;424                for(s32 k = 0; k < i; k++) {
;;;425                  const Type value1 = pAL_yi[k];
;;;426                  const Type value2 = pBX_yj[k];
;;;427                  sum -= value1*value2;
;;;428                }
;;;429    
;;;430                pBX_yj[i] = sum*pAL_yi[i];
;;;431              }
;;;432            }
;;;433    
;;;434            // Solve L'*X = Y via back substitution
;;;435            for(s32 i = matrixHeight-1; i >= 0; i--) {
;;;436              const Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;437              //Type * restrict pBX_yi = Bt_Xt.Pointer(i, 0);
;;;438    
;;;439              for(s32 j = 0; j < numSamples; j++) {
;;;440                Type * restrict pBX_yj = Bt_Xt.Pointer(j, 0);
;;;441    
;;;442                Type sum = pBX_yj[i];
;;;443                for(s32 k = matrixHeight-1; k > i; k-- ) {
;;;444                  const Type value1 = A_L[k][i];
;;;445                  const Type value2 = pBX_yj[k];
;;;446                  sum -= value1*value2;
;;;447                }
;;;448    
;;;449                pBX_yj[i] = sum*pAL_yi[i];
;;;450              }
;;;451            }
;;;452    
;;;453            if(realCholesky) {
;;;454              // Invert the diagonal values of L, and set upper triangular to zero
;;;455              for(s32 i = 0; i < matrixHeight; i++) {
;;;456                Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;457    
;;;458                pAL_yi[i] = static_cast<Type>(1) / pAL_yi[i];
;;;459    
;;;460                for(s32 j = i+1; j < matrixHeight; j++) {
;;;461                  pAL_yi[j] = 0;
;;;462                }
;;;463              }
;;;464            }
;;;465    
;;;466            return RESULT_OK;
;;;467          } // SolveLeastSquaresWithCholesky()
000074  b003              ADD      sp,sp,#0xc
000076  ecbd8b02          VPOP     {d8}
00007a  b004              ADD      sp,sp,#0x10
00007c  e8bd8ff0          POP      {r4-r11,pc}
                  |L71.128|
000080  f240106d          MOV      r0,#0x16d             ;365
000084  e9cd8000          STRD     r8,r0,[sp,#0]         ;365
000088  a384              ADR      r3,|L71.668|
00008a  a29d              ADR      r2,|L71.768|
00008c  a196              ADR      r1,|L71.744|
00008e  2005              MOVS     r0,#5                 ;365
000090  f7fffffe          BL       _Anki_Log
000094  f04f6080          MOV      r0,#0x4000000         ;365
000098  e7ec              B        |L71.116|
                  |L71.154|
00009a  2101              MOVS     r1,#1                 ;371
00009c  4630              MOV      r0,r6                 ;371
00009e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000a2  42a8              CMP      r0,r5                 ;371
0000a4  d00c              BEQ      |L71.192|
0000a6  f2401073          MOV      r0,#0x173             ;371
0000aa  e9cd8000          STRD     r8,r0,[sp,#0]         ;371
0000ae  a37b              ADR      r3,|L71.668|
0000b0  a297              ADR      r2,|L71.784|
0000b2  a18d              ADR      r1,|L71.744|
0000b4  2005              MOVS     r0,#5                 ;371
0000b6  f7fffffe          BL       _Anki_Log
0000ba  f04f60a0          MOV      r0,#0x5000000         ;371
0000be  e7d9              B        |L71.116|
                  |L71.192|
0000c0  eddf8a9b          VLDR     s17,|L71.816|
0000c4  f04f0800          MOV      r8,#0                 ;378
0000c8  eeb78a00          VMOV.F32 s16,#1.00000000       ;411
0000cc  2d00              CMP      r5,#0                 ;378
0000ce  dd58              BLE      |L71.386|
                  |L71.208|
0000d0  68a1              LDR      r1,[r4,#8]            ;378
0000d2  6920              LDR      r0,[r4,#0x10]         ;378
0000d4  2200              MOVS     r2,#0                 ;383
0000d6  fb080101          MLA      r1,r8,r1,r0           ;383
0000da  f1b80f00          CMP      r8,#0                 ;383
0000de  dd22              BLE      |L71.294|
                  |L71.224|
0000e0  68a3              LDR      r3,[r4,#8]            ;383
0000e2  6920              LDR      r0,[r4,#0x10]         ;383
0000e4  eb010c82          ADD      r12,r1,r2,LSL #2      ;386
0000e8  fb020303          MLA      r3,r2,r3,r0           ;386
0000ec  ed9c0a00          VLDR     s0,[r12,#0]           ;386
0000f0  2000              MOVS     r0,#0                 ;387
0000f2  2a00              CMP      r2,#0                 ;387
0000f4  dd0c              BLE      |L71.272|
                  |L71.246|
0000f6  eb010a80          ADD      r10,r1,r0,LSL #2      ;388
0000fa  ed9a1a00          VLDR     s2,[r10,#0]           ;388
0000fe  eb030a80          ADD      r10,r3,r0,LSL #2      ;389
000102  1c40              ADDS     r0,r0,#1              ;387
000104  edda0a00          VLDR     s1,[r10,#0]           ;389
000108  4282              CMP      r2,r0                 ;387
00010a  ee010a60          VMLS.F32 s0,s2,s1              ;390
00010e  dcf2              BGT      |L71.246|
                  |L71.272|
000110  eb030082          ADD      r0,r3,r2,LSL #2       ;393
000114  1c52              ADDS     r2,r2,#1              ;383
000116  edd00a00          VLDR     s1,[r0,#0]            ;393
00011a  4542              CMP      r2,r8                 ;383
00011c  ee200a80          VMUL.F32 s0,s1,s0              ;393
000120  ed8c0a00          VSTR     s0,[r12,#0]           ;393
000124  dbdc              BLT      |L71.224|
                  |L71.294|
000126  eb010a88          ADD      r10,r1,r8,LSL #2      ;398
00012a  2000              MOVS     r0,#0                 ;399
00012c  ed9a0a00          VLDR     s0,[r10,#0]           ;398
000130  f1b80f00          CMP      r8,#0                 ;399
000134  dd08              BLE      |L71.328|
                  |L71.310|
000136  eb010280          ADD      r2,r1,r0,LSL #2       ;400
00013a  1c40              ADDS     r0,r0,#1              ;399
00013c  edd20a00          VLDR     s1,[r2,#0]            ;400
000140  4580              CMP      r8,r0                 ;399
000142  ee000ae0          VMLS.F32 s0,s1,s1              ;401
000146  dcf6              BGT      |L71.310|
                  |L71.328|
000148  eef48ac0          VCMPE.F32 s17,s0                ;404
00014c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;404
000150  dd04              BLE      |L71.348|
000152  2001              MOVS     r0,#1                 ;405
000154  f8890000          STRB     r0,[r9,#0]            ;405
000158  2000              MOVS     r0,#0                 ;406
00015a  e78b              B        |L71.116|
                  |L71.348|
00015c  eef10ac0          VSQRT.F32 s1,s0                 ;410
000160  eef40a60          VCMP.F32 s1,s1                 ;410
000164  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;410
000168  d003              BEQ      |L71.370|
00016a  f7fffffe          BL       __hardfp_sqrtf
00016e  eef00a40          VMOV.F32 s1,s0                 ;410
                  |L71.370|
000172  f1080801          ADD      r8,r8,#1              ;378
000176  ee880a20          VDIV.F32 s0,s16,s1             ;411
00017a  45a8              CMP      r8,r5                 ;378
00017c  ed8a0a00          VSTR     s0,[r10,#0]           ;411
000180  dba6              BLT      |L71.208|
                  |L71.386|
000182  2100              MOVS     r1,#0                 ;416
000184  2d00              CMP      r5,#0                 ;416
000186  dd2d              BLE      |L71.484|
                  |L71.392|
000188  68a2              LDR      r2,[r4,#8]            ;416
00018a  6920              LDR      r0,[r4,#0x10]         ;416
00018c  fb010c02          MLA      r12,r1,r2,r0          ;416
000190  2200              MOVS     r2,#0                 ;420
000192  2f00              CMP      r7,#0                 ;420
000194  bfc8              IT       GT                    ;430
000196  eb0c0981          ADDGT    r9,r12,r1,LSL #2      ;430
00019a  dd20              BLE      |L71.478|
                  |L71.412|
00019c  68b3              LDR      r3,[r6,#8]            ;420
00019e  6930              LDR      r0,[r6,#0x10]         ;420
0001a0  fb020303          MLA      r3,r2,r3,r0           ;420
0001a4  eb030881          ADD      r8,r3,r1,LSL #2       ;423
0001a8  2000              MOVS     r0,#0                 ;424
0001aa  ed980a00          VLDR     s0,[r8,#0]            ;423
0001ae  2900              CMP      r1,#0                 ;424
0001b0  dd0c              BLE      |L71.460|
                  |L71.434|
0001b2  eb0c0a80          ADD      r10,r12,r0,LSL #2     ;425
0001b6  ed9a1a00          VLDR     s2,[r10,#0]           ;425
0001ba  eb030a80          ADD      r10,r3,r0,LSL #2      ;426
0001be  1c40              ADDS     r0,r0,#1              ;424
0001c0  edda0a00          VLDR     s1,[r10,#0]           ;426
0001c4  4281              CMP      r1,r0                 ;424
0001c6  ee010a60          VMLS.F32 s0,s2,s1              ;427
0001ca  dcf2              BGT      |L71.434|
                  |L71.460|
0001cc  edd90a00          VLDR     s1,[r9,#0]            ;430
0001d0  1c52              ADDS     r2,r2,#1              ;420
0001d2  42ba              CMP      r2,r7                 ;420
0001d4  ee200a80          VMUL.F32 s0,s1,s0              ;430
0001d8  ed880a00          VSTR     s0,[r8,#0]            ;430
0001dc  dbde              BLT      |L71.412|
                  |L71.478|
0001de  1c49              ADDS     r1,r1,#1              ;416
0001e0  42a9              CMP      r1,r5                 ;416
0001e2  dbd1              BLT      |L71.392|
                  |L71.484|
0001e4  1e69              SUBS     r1,r5,#1              ;435
0001e6  d433              BMI      |L71.592|
                  |L71.488|
0001e8  68a2              LDR      r2,[r4,#8]            ;435
0001ea  6920              LDR      r0,[r4,#0x10]         ;435
0001ec  fb010002          MLA      r0,r1,r2,r0           ;435
0001f0  2200              MOVS     r2,#0                 ;439
0001f2  2f00              CMP      r7,#0                 ;439
0001f4  bfc8              IT       GT                    ;449
0001f6  eb000a81          ADDGT    r10,r0,r1,LSL #2      ;449
0001fa  dd27              BLE      |L71.588|
                  |L71.508|
0001fc  68b3              LDR      r3,[r6,#8]            ;439
0001fe  6930              LDR      r0,[r6,#0x10]         ;439
000200  fb020303          MLA      r3,r2,r3,r0           ;439
000204  eb030981          ADD      r9,r3,r1,LSL #2       ;442
000208  1e68              SUBS     r0,r5,#1              ;443
00020a  ed990a00          VLDR     s0,[r9,#0]            ;442
00020e  4288              CMP      r0,r1                 ;443
000210  bfc4              ITT      GT                    ;443
000212  f8d4c008          LDRGT    r12,[r4,#8]           ;443
000216  f8d48010          LDRGT    r8,[r4,#0x10]         ;443
00021a  dd0e              BLE      |L71.570|
                  |L71.540|
00021c  fb008b0c          MLA      r11,r0,r12,r8         ;443
000220  eb0b0b81          ADD      r11,r11,r1,LSL #2     ;444
000224  ed9b1a00          VLDR     s2,[r11,#0]           ;444
000228  eb030b80          ADD      r11,r3,r0,LSL #2      ;445
00022c  1e40              SUBS     r0,r0,#1              ;443
00022e  eddb0a00          VLDR     s1,[r11,#0]           ;445
000232  4288              CMP      r0,r1                 ;443
000234  ee010a60          VMLS.F32 s0,s2,s1              ;446
000238  dcf0              BGT      |L71.540|
                  |L71.570|
00023a  edda0a00          VLDR     s1,[r10,#0]           ;449
00023e  1c52              ADDS     r2,r2,#1              ;439
000240  4297              CMP      r7,r2                 ;439
000242  ee200a80          VMUL.F32 s0,s1,s0              ;449
000246  ed890a00          VSTR     s0,[r9,#0]            ;449
00024a  dcd7              BGT      |L71.508|
                  |L71.588|
00024c  1e49              SUBS     r1,r1,#1              ;435
00024e  d5cb              BPL      |L71.488|
                  |L71.592|
000250  9807              LDR      r0,[sp,#0x1c]         ;453
000252  2800              CMP      r0,#0                 ;453
000254  bf1c              ITT      NE                    ;455
000256  2100              MOVNE    r1,#0                 ;455
000258  2d00              CMPNE    r5,#0                 ;455
00025a  bfc8              IT       GT                    ;461
00025c  ed9f0a35          VLDRGT   s0,|L71.820|
000260  dd18              BLE      |L71.660|
                  |L71.610|
000262  68a2              LDR      r2,[r4,#8]            ;453
000264  6920              LDR      r0,[r4,#0x10]         ;453
000266  fb010202          MLA      r2,r1,r2,r0           ;453
00026a  eb020081          ADD      r0,r2,r1,LSL #2       ;458
00026e  edd00a00          VLDR     s1,[r0,#0]            ;458
000272  ee881a20          VDIV.F32 s2,s16,s1             ;458
000276  ed801a00          VSTR     s2,[r0,#0]            ;458
00027a  1c48              ADDS     r0,r1,#1              ;460
00027c  4285              CMP      r5,r0                 ;460
00027e  dd06              BLE      |L71.654|
                  |L71.640|
000280  eb020380          ADD      r3,r2,r0,LSL #2       ;461
000284  1c40              ADDS     r0,r0,#1              ;460
000286  ed830a00          VSTR     s0,[r3,#0]            ;461
00028a  4285              CMP      r5,r0                 ;460
00028c  dcf8              BGT      |L71.640|
                  |L71.654|
00028e  1c49              ADDS     r1,r1,#1              ;455
000290  42a9              CMP      r1,r5                 ;455
000292  dbe6              BLT      |L71.610|
                  |L71.660|
000294  2000              MOVS     r0,#0                 ;466
000296  e6ed              B        |L71.116|
;;;468    
                          ENDP

                  |L71.664|
                          DCD      _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
                  |L71.668|
00029c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
0002a0  6f726574
0002a4  6563685c
0002a8  636f6d6d
0002ac  6f6e5c69
0002b0  6e636c75
0002b4  64655c61
0002b8  6e6b692f
0002bc  636f6d6d
0002c0  6f6e2f72
0002c4  6f626f74
0002c8  2f6d6174
0002cc  726978  
0002cf  2e6800            DCB      ".h",0
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L71.724|
0002d4  415f4c20          DCB      "A_L is not square",0
0002d8  6973206e
0002dc  6f742073
0002e0  71756172
0002e4  6500    
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L71.744|
0002e8  43686f6c          DCB      "CholeskyDecomposition",0
0002ec  65736b79
0002f0  4465636f
0002f4  6d706f73
0002f8  6974696f
0002fc  6e00    
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L71.768|
000300  496e7661          DCB      "Invalid objects",0
000304  6c696420
000308  6f626a65
00030c  63747300
                  |L71.784|
000310  58742061          DCB      "Xt and Bt are the wrong sizes",0
000314  6e642042
000318  74206172
00031c  65207468
000320  65207772
000324  6f6e6720
000328  73697a65
00032c  7300    
00032e  00                DCB      0
00032f  00                DCB      0
                  |L71.816|
000330  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L71.820|
000334  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.72||, COMGROUP=_ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb, LINKORDER=||t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.72||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b||, COMGROUP=_ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b PROC ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)
;;;1798   
;;;1799         template<typename Type> Result MakeSymmetric(Type &arr, bool lowerToUpper)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1800         {
000002  460e              MOV      r6,r1
000004  b083              SUB      sp,sp,#0xc
000006  4605              MOV      r5,r0
;;;1801           AnkiConditionalErrorAndReturnValue(arr.get_size(0) == arr.get_size(1),
000008  2100              MOVS     r1,#0
00000a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00000e  4604              MOV      r4,r0
000010  2101              MOVS     r1,#1
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000018  4284              CMP      r4,r0
00001a  d00e              BEQ      |L78.58|
00001c  f2407109          MOV      r1,#0x709
000020  481a              LDR      r0,|L78.140|
000022  e9cd0100          STRD     r0,r1,[sp,#0]
000026  a31a              ADR      r3,|L78.144|
000028  a227              ADR      r2,|L78.200|
00002a  a12e              ADR      r1,|L78.228|
00002c  2005              MOVS     r0,#5
00002e  f7fffffe          BL       _Anki_Log
;;;1802             RESULT_FAIL_INVALID_SIZE, "MakeSymmetric", "Input array must be square");
;;;1803   
;;;1804           const s32 arrHeight = arr.get_size(0);
;;;1805           for(s32 y = 0; y < arrHeight; y++)
;;;1806           {
;;;1807             const s32 x0 = lowerToUpper ? (y+1)     : 0;
;;;1808             const s32 x1 = lowerToUpper ? arrHeight : y;
;;;1809   
;;;1810             for(s32 x = x0; x < x1; x++) {
;;;1811               *arr.Pointer(y,x) = *arr.Pointer(x,y);
;;;1812             }
;;;1813           }
;;;1814   
;;;1815           return RESULT_OK;
;;;1816         } // template<typename Type> Result MakeSymmetric(Type &arr, bool lowerToUpper)
000032  b003              ADD      sp,sp,#0xc
000034  f04f60a0          MOV      r0,#0x5000000         ;1801
000038  bdf0              POP      {r4-r7,pc}
                  |L78.58|
00003a  2100              MOVS     r1,#0                 ;1804
00003c  4628              MOV      r0,r5                 ;1804
00003e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000042  1e01              SUBS     r1,r0,#0              ;1804
000044  f04f0300          MOV      r3,#0                 ;1805
000048  dd1c              BLE      |L78.132|
                  |L78.74|
00004a  2e00              CMP      r6,#0                 ;1807
00004c  bf15              ITETE    NE                    ;1807
00004e  1c5a              ADDNE    r2,r3,#1              ;1807
000050  2200              MOVEQ    r2,#0                 ;1807
000052  4608              MOVNE    r0,r1                 ;1808
000054  4618              MOVEQ    r0,r3                 ;1808
000056  4282              CMP      r2,r0                 ;1810
000058  da11              BGE      |L78.126|
                  |L78.90|
00005a  f8d5c010          LDR      r12,[r5,#0x10]        ;1810
00005e  68ac              LDR      r4,[r5,#8]            ;1810
000060  fb02c704          MLA      r7,r2,r4,r12          ;1810
000064  fb03cc04          MLA      r12,r3,r4,r12         ;1810
000068  eb070783          ADD      r7,r7,r3,LSL #2       ;1810
00006c  eb0c0c82          ADD      r12,r12,r2,LSL #2     ;1810
000070  ed970a00          VLDR     s0,[r7,#0]            ;1811
000074  1c52              ADDS     r2,r2,#1              ;1810
000076  ed8c0a00          VSTR     s0,[r12,#0]           ;1811
00007a  4282              CMP      r2,r0                 ;1810
00007c  dbed              BLT      |L78.90|
                  |L78.126|
00007e  1c5b              ADDS     r3,r3,#1              ;1805
000080  428b              CMP      r3,r1                 ;1805
000082  dbe2              BLT      |L78.74|
                  |L78.132|
000084  b003              ADD      sp,sp,#0xc
000086  2000              MOVS     r0,#0                 ;1815
000088  bdf0              POP      {r4-r7,pc}
;;;1817   
                          ENDP

00008a  0000              DCW      0x0000
                  |L78.140|
                          DCD      _ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)::__PRETTY_FUNCTION__
                  |L78.144|
000090  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
000094  6f726574
000098  6563685c
00009c  636f6d6d
0000a0  6f6e5c69
0000a4  6e636c75
0000a8  64655c61
0000ac  6e6b692f
0000b0  636f6d6d
0000b4  6f6e2f72
0000b8  6f626f74
0000bc  2f6d6174
0000c0  726978  
0000c3  2e6800            DCB      ".h",0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L78.200|
0000c8  496e7075          DCB      "Input array must be square",0
0000cc  74206172
0000d0  72617920
0000d4  6d757374
0000d8  20626520
0000dc  73717561
0000e0  726500  
0000e3  00                DCB      0
                  |L78.228|
0000e4  4d616b65          DCB      "MakeSymmetric",0
0000e8  53796d6d
0000ec  65747269
0000f0  6300    
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||area_number.79||, COMGROUP=_ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b, LINKORDER=||t._ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.79||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i PROC ; Anki::Embedded::Linspace<float>(T1, T1, int)
;;;162    
;;;163        template<typename Type> LinearSequence<Type> Linspace(const Type start, const Type end, const s32 size)
000000  b086              SUB      sp,sp,#0x18
000002  f04f32ff          MOV      r2,#0xffffffff
000006  eebf1a00          VMOV.F32 s2,#-1.00000000
00000a  9200              STR      r2,[sp,#0]
00000c  ed8d1a01          VSTR     s2,[sp,#4]
000010  ed8d1a02          VSTR     s2,[sp,#8]
;;;164        {
;;;165          Type increment;
;;;166    
;;;167          LinearSequence<Type> sequence;
;;;168    
;;;169          if(ABS(end-start) <= Flags::numeric_limits<Type>::epsilon()) {
000014  ee301ac0          VSUB.F32 s2,s1,s0
000018  ed9f2a2e          VLDR     s4,|L85.212|
00001c  eeb51ac0          VCMPE.F32 s2,#0.0
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR
000024  bfac              ITE      GE
000026  eef01a41          VMOVGE.F32 s3,s2
00002a  ee701a60          VSUBLT.F32 s3,s0,s1
00002e  eef41ac2          VCMPE.F32 s3,s4
000032  eef1fa10          VMRS     APSR_nzcv,FPSCR
000036  d810              BHI      |L85.90|
000038  9103              STR      r1,[sp,#0xc]          ;164
;;;170            sequence = LinearSequence<Type>(start, 0, end, size);
00003a  eddf0a27          VLDR     s1,|L85.216|
00003e  ed8d0a04          VSTR     s0,[sp,#0x10]
000042  edcd0a05          VSTR     s1,[sp,#0x14]
000046  9100              STR      r1,[sp,#0]
000048  ed8d0a01          VSTR     s0,[sp,#4]
00004c  ee102a10          VMOV     r2,s0
000050  ee103a90          VMOV     r3,s1
000054  edcd0a02          VSTR     s1,[sp,#8]
;;;171          } else {
000058  e028              B        |L85.172|
                  |L85.90|
;;;172            if(size <= 0) {
;;;173              // Empty sequence
;;;174              sequence = LinearSequence<Type>(start, 1, end, 0);
00005a  eef71a00          VMOV.F32 s3,#1.00000000
00005e  2900              CMP      r1,#0                 ;172
000060  dc0d              BGT      |L85.126|
000062  2100              MOVS     r1,#0
000064  9103              STR      r1,[sp,#0xc]
000066  ed8d0a04          VSTR     s0,[sp,#0x10]
00006a  edcd1a05          VSTR     s3,[sp,#0x14]
00006e  9100              STR      r1,[sp,#0]
000070  ee102a10          VMOV     r2,s0
000074  ee113a90          VMOV     r3,s3
000078  ed8d0a01          VSTR     s0,[sp,#4]
;;;175            } else if(size == 1) {
00007c  e027              B        |L85.206|
                  |L85.126|
00007e  2901              CMP      r1,#1
000080  d019              BEQ      |L85.182|
;;;176              // If size == 1, match output with Matlab
;;;177              sequence = LinearSequence<Type>(end, 1, end, size);
;;;178            } else {
;;;179              increment = (end-start) / (size-1);
000082  1e4a              SUBS     r2,r1,#1
000084  ee002a90          VMOV     s1,r2
000088  9103              STR      r1,[sp,#0xc]
00008a  ed8d0a04          VSTR     s0,[sp,#0x10]
00008e  eef81ae0          VCVT.F32.S32 s3,s1
;;;180              sequence = LinearSequence<Type>(start, increment, end, size);
000092  ee102a10          VMOV     r2,s0
000096  eec10a21          VDIV.F32 s1,s2,s3              ;179
00009a  edcd0a05          VSTR     s1,[sp,#0x14]         ;179
00009e  ee103a90          VMOV     r3,s1
0000a2  9100              STR      r1,[sp,#0]
0000a4  ed8d0a01          VSTR     s0,[sp,#4]
0000a8  edcd0a02          VSTR     s1,[sp,#8]
                  |L85.172|
;;;181            }
;;;182          }
;;;183    
;;;184          return sequence;
0000ac  6083              STR      r3,[r0,#8]
0000ae  e9c01200          STRD     r1,r2,[r0,#0]
;;;185        }
0000b2  b006              ADD      sp,sp,#0x18
0000b4  4770              BX       lr
                  |L85.182|
0000b6  9103              STR      r1,[sp,#0xc]
0000b8  edcd0a04          VSTR     s1,[sp,#0x10]
0000bc  edcd1a05          VSTR     s3,[sp,#0x14]
0000c0  ee102a90          VMOV     r2,s1                 ;177
0000c4  ee113a90          VMOV     r3,s3                 ;177
0000c8  9100              STR      r1,[sp,#0]            ;177
0000ca  edcd0a01          VSTR     s1,[sp,#4]            ;177
                  |L85.206|
0000ce  edcd1a02          VSTR     s3,[sp,#8]            ;177
0000d2  e7eb              B        |L85.172|
;;;186    
                          ENDP

                  |L85.212|
0000d4  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L85.216|
0000d8  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.86||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, LINKORDER=||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.86||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d019              BEQ      |L92.68|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L92.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L92.30|
                  |L92.26|
00001a  462b              MOV      r3,r5
00001c  e012              B        |L92.68|
                  |L92.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0c              BGE      |L92.68|
00002a  2185              MOVS     r1,#0x85
00002c  4807              LDR      r0,|L92.76|
00002e  4b08              LDR      r3,|L92.80|
000030  e9cd0100          STRD     r0,r1,[sp,#0]
000034  f1a30218          SUB      r2,r3,#0x18
000038  f1a20124          SUB      r1,r2,#0x24
00003c  2005              MOVS     r0,#5
00003e  f7fffffe          BL       _Anki_Log
000042  462b              MOV      r3,r5
                  |L92.68|
000044  6023              STR      r3,[r4,#0]
000046  b003              ADD      sp,sp,#0xc
000048  4620              MOV      r0,r4
00004a  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L92.76|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L92.80|
                          DCD      ||.constdata||+0x144

                          AREA ||area_number.93||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.93||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi PROC ; Anki::Embedded::Array<float>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L99.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L99.56|
00000e  4b0b              LDR      r3,|L99.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L99.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L99.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
                  |L99.60|
                          DCD      ||.constdata||+0x1b4

                          AREA ||area_number.100||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.100||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L106.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L106.56|
00000e  4b0b              LDR      r3,|L106.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L106.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L106.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L106.60|
                          DCD      ||.constdata||+0x1b4

                          AREA ||area_number.107||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.107||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L113.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L113.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L113.384|
000044  a25c              ADR      r2,|L113.440|
000046  a160              ADR      r1,|L113.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L113.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0140              LSLS     r0,r0,#5
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L113.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L113.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L113.384|
000080  a24d              ADR      r2,|L113.440|
000082  a157              ADR      r1,|L113.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L113.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L113.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L113.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L113.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L113.384|
0000c8  a251              ADR      r2,|L113.528|
0000ca  a156              ADR      r1,|L113.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L113.372|
                  |L113.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L113.384|
0000e0  a258              ADR      r2,|L113.580|
0000e2  a15f              ADR      r1,|L113.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L113.372|
                  |L113.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L113.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L113.384|
000110  a259              ADR      r2,|L113.632|
000112  a144              ADR      r1,|L113.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L113.372|
                  |L113.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0171              LSLS     r1,r6,#5
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L113.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L113.384|
00015a  a251              ADR      r2,|L113.672|
00015c  a140              ADR      r1,|L113.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L113.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L113.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L113.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L113.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L113.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L113.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L113.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L113.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L113.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L113.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L113.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L113.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L113.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L113.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.114||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.114||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L120.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L120.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.121||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.121||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetZero()::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  5365745a          DCB      0x53,0x65,0x74,0x5a
00002c  65726f28          DCB      0x65,0x72,0x6f,0x28
000030  29205b77          DCB      0x29,0x20,0x5b,0x77
000034  69746820          DCB      0x69,0x74,0x68,0x20
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  203d2066          DCB      0x20,0x3d,0x20,0x66
000040  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000044  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000054  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5175          DCB      0x3a,0x3a,0x51,0x75
000098  61647269          DCB      0x61,0x64,0x72,0x69
00009c  6c617465          DCB      0x6c,0x61,0x74,0x65
0000a0  72616c3c          DCB      0x72,0x61,0x6c,0x3c
0000a4  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a8  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  51756164          DCB      0x51,0x75,0x61,0x64
0000cc  72696c61          DCB      0x72,0x69,0x6c,0x61
0000d0  74657261          DCB      0x74,0x65,0x72,0x61
0000d4  6c3c666c          DCB      0x6c,0x3c,0x66,0x6c
0000d8  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0000dc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a51          DCB      0x64,0x3a,0x3a,0x51
0000a4  75616472          DCB      0x75,0x61,0x64,0x72
0000a8  696c6174          DCB      0x69,0x6c,0x61,0x74
0000ac  6572616c          DCB      0x65,0x72,0x61,0x6c
0000b0  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000b4  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000b8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a4d616b          DCB      0x3a,0x4d,0x61,0x6b
000028  6553796d          DCB      0x65,0x53,0x79,0x6d
00002c  6d657472          DCB      0x6d,0x65,0x74,0x72
000030  69632854          DCB      0x69,0x63,0x28,0x54
000034  79706520          DCB      0x79,0x70,0x65,0x20
000038  262c2062          DCB      0x26,0x2c,0x20,0x62
00003c  6f6f6c29          DCB      0x6f,0x6f,0x6c,0x29
000040  205b7769          DCB      0x20,0x5b,0x77,0x69
000044  74682054          DCB      0x74,0x68,0x20,0x54
000048  79706520          DCB      0x79,0x70,0x65,0x20
00004c  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000050  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000054  456d6265          DCB      0x45,0x6d,0x62,0x65
000058  64646564          DCB      0x64,0x64,0x65,0x64
00005c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000060  7261793c          DCB      0x72,0x61,0x79,0x3c
000064  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000068  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a536f6c          DCB      0x3a,0x53,0x6f,0x6c
000028  76654c65          DCB      0x76,0x65,0x4c,0x65
00002c  61737453          DCB      0x61,0x73,0x74,0x53
000030  71756172          DCB      0x71,0x75,0x61,0x72
000034  65735769          DCB      0x65,0x73,0x57,0x69
000038  74684368          DCB      0x74,0x68,0x43,0x68
00003c  6f6c6573          DCB      0x6f,0x6c,0x65,0x73
000040  6b792841          DCB      0x6b,0x79,0x28,0x41
000044  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000048  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00004c  65646465          DCB      0x65,0x64,0x64,0x65
000050  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000054  72726179          DCB      0x72,0x72,0x61,0x79
000058  3c547970          DCB      0x3c,0x54,0x79,0x70
00005c  653e2026          DCB      0x65,0x3e,0x20,0x26
000060  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000064  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000068  456d6265          DCB      0x45,0x6d,0x62,0x65
00006c  64646564          DCB      0x64,0x64,0x65,0x64
000070  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000074  7261793c          DCB      0x72,0x61,0x79,0x3c
000078  54797065          DCB      0x54,0x79,0x70,0x65
00007c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000080  20626f6f          DCB      0x20,0x62,0x6f,0x6f
000084  6c2c2062          DCB      0x6c,0x2c,0x20,0x62
000088  6f6f6c20          DCB      0x6f,0x6f,0x6c,0x20
00008c  2629205b          DCB      0x26,0x29,0x20,0x5b
000090  77697468          DCB      0x77,0x69,0x74,0x68
000094  20547970          DCB      0x20,0x54,0x79,0x70
000098  65203d20          DCB      0x65,0x20,0x3d,0x20
00009c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a0  745d00            DCB      0x74,0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\lucasKanade_Projective.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___26_lucasKanade_Projective_cpp_80a64d2b___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___26_lucasKanade_Projective_cpp_80a64d2b___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___26_lucasKanade_Projective_cpp_80a64d2b___Z7__REVSHi|
#line 144
|__asm___26_lucasKanade_Projective_cpp_80a64d2b___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
