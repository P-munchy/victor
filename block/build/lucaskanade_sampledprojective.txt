; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\lucaskanade_sampledprojective.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\lucaskanade_sampledprojective.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\lucaskanade_sampledprojective.crf ..\coretech\vision\robot\src\lucasKanade_SampledProjective.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::UpdateTrack(const Anki::Embedded::Array<unsigned char>&, int, float, unsigned char, bool&, int&, int&, int&, Anki::Embedded::MemoryStack)
;;;285    
;;;286          Result LucasKanadeTracker_SampledProjective::UpdateTrack(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;287            const Array<u8> &nextImage,
;;;288            const s32 maxIterations,
;;;289            const f32 convergenceTolerance,
;;;290            const u8 verify_maxPixelDifference,
;;;291            bool &verify_converged,
;;;292            s32 &verify_meanAbsoluteDifference,
;;;293            s32 &verify_numInBounds,
;;;294            s32 &verify_numSimilarPixels,
;;;295            MemoryStack scratch)
;;;296          {
000004  4606              MOV      r6,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  ed2d8b02          VPUSH    {d8}
00000e  b099              SUB      sp,sp,#0x64
;;;297            Result lastResult;
;;;298    
;;;299            for(s32 iScale=numPyramidLevels-1; iScale>=0; iScale--) {
000010  6840              LDR      r0,[r0,#4]
000012  e9dd872c          LDRD     r8,r7,[sp,#0xb0]      ;296
000016  9d2a              LDR      r5,[sp,#0xa8]
000018  1e44              SUBS     r4,r0,#1
00001a  eeb08a40          VMOV.F32 s16,s0                ;296
00001e  2c00              CMP      r4,#0
000020  bfa4              ITT      GE
000022  f04f0900          MOVGE    r9,#0
;;;300              verify_converged = false;
;;;301    
;;;302              BeginBenchmark("UpdateTrack.refineTranslation");
;;;303              if((lastResult = IterativelyRefineTrack(nextImage, maxIterations, iScale, convergenceTolerance, Transformations::TRANSFORM_TRANSLATION, verify_converged, scratch)) != RESULT_OK)
000026  f44f7a00          MOVGE    r10,#0x200
00002a  db45              BLT      |L1.184|
                  |L1.44|
00002c  f8859000          STRB     r9,[r5,#0]            ;300
000030  a02b              ADR      r0,|L1.224|
000032  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000036  a80a              ADD      r0,sp,#0x28
000038  992e              LDR      r1,[sp,#0xb8]
00003a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00003e  f8cda000          STR      r10,[sp,#0]
000042  e9cd5001          STRD     r5,r0,[sp,#4]
000046  e9dd121e          LDRD     r1,r2,[sp,#0x78]
00004a  eeb00a48          VMOV.F32 s0,s16
00004e  4623              MOV      r3,r4
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
000056  2800              CMP      r0,#0
;;;304                return lastResult;
;;;305              EndBenchmark("UpdateTrack.refineTranslation");
;;;306    
;;;307              if(this->transformation.get_transformType() != Transformations::TRANSFORM_TRANSLATION) {
;;;308                BeginBenchmark("UpdateTrack.refineOther");
;;;309                if((lastResult = IterativelyRefineTrack(nextImage, maxIterations, iScale, convergenceTolerance, this->transformation.get_transformType(), verify_converged, scratch)) != RESULT_OK)
;;;310                  return lastResult;
;;;311                EndBenchmark("UpdateTrack.refineOther");
;;;312              }
;;;313            } // for(s32 iScale=numPyramidLevels; iScale>=0; iScale--)
;;;314    
;;;315            lastResult = this->VerifyTrack_Projective(nextImage, verify_maxPixelDifference, verify_meanAbsoluteDifference, verify_numInBounds, verify_numSimilarPixels, scratch);
;;;316    
;;;317            return lastResult;
;;;318          }
000058  bf1f              ITTTT    NE
00005a  b019              ADDNE    sp,sp,#0x64
00005c  ecbd8b02          VPOPNE   {d8}
000060  b006              ADDNE    sp,sp,#0x18
000062  e8bd8ff0          POPNE    {r4-r11,pc}
000066  a01e              ADR      r0,|L1.224|
000068  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00006c  f1060018          ADD      r0,r6,#0x18           ;307
000070  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000074  f5b07f00          CMP      r0,#0x200             ;307
000078  d01c              BEQ      |L1.180|
00007a  a021              ADR      r0,|L1.256|
00007c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000080  a811              ADD      r0,sp,#0x44           ;309
000082  992e              LDR      r1,[sp,#0xb8]         ;309
000084  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000088  4683              MOV      r11,r0                ;309
00008a  f1060018          ADD      r0,r6,#0x18           ;309
00008e  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000092  e9cd0500          STRD     r0,r5,[sp,#0]         ;309
000096  e9dd121e          LDRD     r1,r2,[sp,#0x78]      ;309
00009a  eeb00a48          VMOV.F32 s0,s16                ;309
00009e  4623              MOV      r3,r4                 ;309
0000a0  f8cdb008          STR      r11,[sp,#8]           ;309
0000a4  4630              MOV      r0,r6                 ;309
0000a6  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
0000aa  2800              CMP      r0,#0                 ;309
0000ac  d112              BNE      |L1.212|
0000ae  a014              ADR      r0,|L1.256|
0000b0  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
                  |L1.180|
0000b4  1e64              SUBS     r4,r4,#1              ;299
0000b6  d5b9              BPL      |L1.44|
                  |L1.184|
0000b8  a803              ADD      r0,sp,#0xc            ;315
0000ba  992e              LDR      r1,[sp,#0xb8]         ;315
0000bc  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0000c0  f8cd8000          STR      r8,[sp,#0]            ;315
0000c4  e9cd7001          STRD     r7,r0,[sp,#4]         ;315
0000c8  4630              MOV      r0,r6                 ;315
0000ca  9b2b              LDR      r3,[sp,#0xac]         ;315
0000cc  9a20              LDR      r2,[sp,#0x80]         ;315
0000ce  991e              LDR      r1,[sp,#0x78]         ;315
0000d0  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::VerifyTrack_Projective(const Anki::Embedded::Array<unsigned char>&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const
                  |L1.212|
0000d4  b019              ADD      sp,sp,#0x64
0000d6  ecbd8b02          VPOP     {d8}
0000da  b006              ADD      sp,sp,#0x18
0000dc  e8bd8ff0          POP      {r4-r11,pc}
;;;319    
                          ENDP

                  |L1.224|
0000e0  55706461          DCB      "UpdateTrack.refineTranslation",0
0000e4  74655472
0000e8  61636b2e
0000ec  72656669
0000f0  6e655472
0000f4  616e736c
0000f8  6174696f
0000fc  6e00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L1.256|
000100  55706461          DCB      "UpdateTrack.refineOther",0
000104  74655472
000108  61636b2e
00010c  72656669
000110  6e654f74
000114  68657200

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective17ApproximateSelectERKNS0_5ArrayIfEEiiRiRNS3_ItEE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective17ApproximateSelectERKNS0_5ArrayIfEEiiRiRNS3_ItEE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::ApproximateSelect(const Anki::Embedded::Array<float>&, int, int, int&, Anki::Embedded::Array<unsigned short>&)
;;;1013   
;;;1014         Result LucasKanadeTracker_SampledProjective::ApproximateSelect(const Array<f32> &magnitudeVector, const s32 numBins, const s32 numToSelect, s32 &numSelected, Array<u16> &magnitudeIndexes)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1015         {
000004  4607              MOV      r7,r0
000006  ed2d8b04          VPUSH    {d8-d9}
00000a  461c              MOV      r4,r3
00000c  4616              MOV      r6,r2
00000e  4688              MOV      r8,r1
;;;1016           const f32 maxMagnitude = Matrix::Max<f32>(magnitudeVector);
000010  e897120e          LDM      r7,{r1-r3,r9,r12}
000014  b096              SUB      sp,sp,#0x58           ;1015
000016  a809              ADD      r0,sp,#0x24
000018  9d22              LDR      r5,[sp,#0x88]
00001a  e88d120e          STM      sp,{r1-r3,r9,r12}
00001e  f04f0a00          MOV      r10,#0
000022  4669              MOV      r1,sp
000024  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000028  f880a030          STRB     r10,[r0,#0x30]
00002c  4681              MOV      r9,r0
00002e  f1000a18          ADD      r10,r0,#0x18
000032  4650              MOV      r0,r10
000034  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000038  ed9f9a6b          VLDR     s18,|L2.488|
00003c  2800              CMP      r0,#0
00003e  d079              BEQ      |L2.308|
000040  2101              MOVS     r1,#1
000042  f88d1008          STRB     r1,[sp,#8]
000046  f8d91010          LDR      r1,[r9,#0x10]
00004a  9103              STR      r1,[sp,#0xc]
00004c  f8d91014          LDR      r1,[r9,#0x14]
000050  9104              STR      r1,[sp,#0x10]
000052  f8d9000c          LDR      r0,[r9,#0xc]
000056  9005              STR      r0,[sp,#0x14]
000058  f8d90004          LDR      r0,[r9,#4]
00005c  9006              STR      r0,[sp,#0x18]
00005e  f8d90008          LDR      r0,[r9,#8]
000062  9007              STR      r0,[sp,#0x1c]
000064  f8d90000          LDR      r0,[r9,#0]
000068  9008              STR      r0,[sp,#0x20]
00006a  9906              LDR      r1,[sp,#0x18]
00006c  f8da9010          LDR      r9,[r10,#0x10]
000070  f8da3008          LDR      r3,[r10,#8]
000074  9803              LDR      r0,[sp,#0xc]
000076  fb019103          MLA      r1,r1,r3,r9
00007a  eb010080          ADD      r0,r1,r0,LSL #2
00007e  f04f0c00          MOV      r12,#0
000082  ed908a00          VLDR     s16,[r0,#0]
000086  9808              LDR      r0,[sp,#0x20]
000088  2800              CMP      r0,#0
00008a  dd21              BLE      |L2.208|
                  |L2.140|
00008c  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000090  fb0c0001          MLA      r0,r12,r1,r0
000094  fb009103          MLA      r1,r0,r3,r9
000098  9a05              LDR      r2,[sp,#0x14]
00009a  2000              MOVS     r0,#0
00009c  2a00              CMP      r2,#0
00009e  dd12              BLE      |L2.198|
                  |L2.160|
0000a0  e9dd2a03          LDRD     r2,r10,[sp,#0xc]
0000a4  fb00220a          MLA      r2,r0,r10,r2
0000a8  eb010282          ADD      r2,r1,r2,LSL #2
0000ac  ed920a00          VLDR     s0,[r2,#0]
0000b0  eeb40ac8          VCMPE.F32 s0,s16
0000b4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000b8  bf28              IT       CS
0000ba  eeb08a40          VMOVCS.F32 s16,s0
0000be  1c40              ADDS     r0,r0,#1
0000c0  9a05              LDR      r2,[sp,#0x14]
0000c2  4282              CMP      r2,r0
0000c4  dcec              BGT      |L2.160|
                  |L2.198|
0000c6  9808              LDR      r0,[sp,#0x20]
0000c8  f10c0c01          ADD      r12,r12,#1
0000cc  4560              CMP      r0,r12
0000ce  dcdd              BGT      |L2.140|
                  |L2.208|
;;;1017   
;;;1018           const f32 magnitudeIncrement = maxMagnitude / static_cast<f32>(numBins);
0000d0  ee008a10          VMOV     s0,r8
;;;1019   
;;;1020           // For each threshold, count the number above the threshold
;;;1021           // If the number is low enough, copy the appropriate indexes and return
;;;1022   
;;;1023           const s32 numMagnitudes = magnitudeVector.get_size(1);
0000d4  2101              MOVS     r1,#1
0000d6  4638              MOV      r0,r7
0000d8  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1018
0000dc  eec88a00          VDIV.F32 s17,s16,s0            ;1018
0000e0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
;;;1024   
;;;1025           const f32 * restrict pMagnitudeVector = magnitudeVector.Pointer(0,0);
;;;1026   
;;;1027           numSelected = 0;
;;;1028   
;;;1029           f32 foundThreshold = -1.0f;
;;;1030           for(f32 threshold=0; threshold<maxMagnitude; threshold+=magnitudeIncrement) {
0000e4  eeb00a49          VMOV.F32 s0,s18
0000e8  2100              MOVS     r1,#0                 ;1025
0000ea  68bb              LDR      r3,[r7,#8]            ;1025
0000ec  693a              LDR      r2,[r7,#0x10]         ;1025
0000ee  eeb40ac8          VCMPE.F32 s0,s16
0000f2  eebf1a00          VMOV.F32 s2,#-1.00000000       ;1029
0000f6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000fa  fb012203          MLA      r2,r1,r3,r2
0000fe  6021              STR      r1,[r4,#0]
000100  d22c              BCS      |L2.348|
                  |L2.258|
;;;1031             s32 numAbove = 0;
000102  f04f0c00          MOV      r12,#0
;;;1032             for(s32 i=0; i<numMagnitudes; i++) {
000106  4661              MOV      r1,r12
000108  2800              CMP      r0,#0
00010a  dd0d              BLE      |L2.296|
                  |L2.268|
;;;1033               if(pMagnitudeVector[i] > threshold) {
00010c  eb020381          ADD      r3,r2,r1,LSL #2
000110  edd30a00          VLDR     s1,[r3,#0]
000114  eef40ac0          VCMPE.F32 s1,s0
000118  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;1034                 numAbove++;
00011c  bfc8              IT       GT
00011e  f10c0c01          ADDGT    r12,r12,#1
000122  1c49              ADDS     r1,r1,#1              ;1032
000124  4281              CMP      r1,r0                 ;1032
000126  dbf1              BLT      |L2.268|
                  |L2.296|
;;;1035               }
;;;1036             }
;;;1037   
;;;1038             if(numAbove <= numToSelect) {
000128  45b4              CMP      r12,r6
00012a  dc10              BGT      |L2.334|
;;;1039               foundThreshold = threshold;
00012c  eeb01a40          VMOV.F32 s2,s0
;;;1040               break;
000130  e014              B        |L2.348|
000132  e7ff              B        |L2.308|
                  |L2.308|
000134  214e              MOVS     r1,#0x4e
000136  482d              LDR      r0,|L2.492|
000138  e9cd0100          STRD     r0,r1,[sp,#0]
00013c  a32c              ADR      r3,|L2.496|
00013e  a23a              ADR      r2,|L2.552|
000140  a140              ADR      r1,|L2.580|
000142  2005              MOVS     r0,#5
000144  f7fffffe          BL       _Anki_Log
000148  eeb08a49          VMOV.F32 s16,s18
00014c  e7c0              B        |L2.208|
                  |L2.334|
00014e  ee300a28          VADD.F32 s0,s0,s17             ;1030
000152  eeb40ac8          VCMPE.F32 s0,s16                ;1030
000156  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1030
00015a  d3d2              BCC      |L2.258|
                  |L2.348|
;;;1041             }
;;;1042           }
;;;1043   
;;;1044           if(foundThreshold < -0.1f) {
00015c  ee111a10          VMOV     r1,s2
000160  4b3b              LDR      r3,|L2.592|
000162  428b              CMP      r3,r1
000164  d21c              BCS      |L2.416|
000166  692b              LDR      r3,[r5,#0x10]
000168  b173              CBZ      r3,|L2.392|
00016a  6828              LDR      r0,[r5,#0]
00016c  2800              CMP      r0,#0
00016e  bfa4              ITT      GE
000170  6869              LDRGE    r1,[r5,#4]
000172  2900              CMPGE    r1,#0
000174  db08              BLT      |L2.392|
000176  68aa              LDR      r2,[r5,#8]
000178  fb00f102          MUL      r1,r0,r2
00017c  2000              MOVS     r0,#0
00017e  fb003002          MLA      r0,r0,r2,r3
000182  f7fffffe          BL       __aeabi_memclr
000186  e029              B        |L2.476|
                  |L2.392|
000188  f2402176          MOV      r1,#0x276
00018c  4831              LDR      r0,|L2.596|
00018e  e9cd0100          STRD     r0,r1,[sp,#0]
000192  a331              ADR      r3,|L2.600|
000194  a224              ADR      r2,|L2.552|
000196  a13e              ADR      r1,|L2.656|
000198  2005              MOVS     r0,#5
00019a  f7fffffe          BL       _Anki_Log
00019e  e01d              B        |L2.476|
                  |L2.416|
;;;1045             AnkiWarn("LucasKanadeTracker_SampledProjective::ApproximateSelect", "Could not find valid threshold");
;;;1046             magnitudeIndexes.SetZero();
;;;1047             return RESULT_OK;
;;;1048           }
;;;1049   
;;;1050           u16 * restrict pMagnitudeIndexes = magnitudeIndexes.Pointer(0,0);
0001a0  2100              MOVS     r1,#0
0001a2  f8d5c008          LDR      r12,[r5,#8]
0001a6  692b              LDR      r3,[r5,#0x10]
;;;1051   
;;;1052           for(s32 i=0; i<numMagnitudes; i++) {
0001a8  2800              CMP      r0,#0
0001aa  fb01330c          MLA      r3,r1,r12,r3
0001ae  dd15              BLE      |L2.476|
                  |L2.432|
;;;1053             if(pMagnitudeVector[i] > foundThreshold) {
0001b0  eb020c81          ADD      r12,r2,r1,LSL #2
0001b4  ed9c0a00          VLDR     s0,[r12,#0]
0001b8  eeb40ac1          VCMPE.F32 s0,s2
0001bc  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001c0  dd09              BLE      |L2.470|
;;;1054               pMagnitudeIndexes[numSelected] = static_cast<u16>(i);
0001c2  f8d4c000          LDR      r12,[r4,#0]
0001c6  f823101c          STRH     r1,[r3,r12,LSL #1]
;;;1055               numSelected++;
0001ca  f8d4c000          LDR      r12,[r4,#0]
0001ce  f10c0c01          ADD      r12,r12,#1
0001d2  f8c4c000          STR      r12,[r4,#0]
                  |L2.470|
0001d6  1c49              ADDS     r1,r1,#1              ;1052
0001d8  4281              CMP      r1,r0                 ;1052
0001da  dbe9              BLT      |L2.432|
                  |L2.476|
;;;1056             }
;;;1057           }
;;;1058   
;;;1059           return RESULT_OK;
;;;1060         }
0001dc  b016              ADD      sp,sp,#0x58
0001de  2000              MOVS     r0,#0                 ;1059
0001e0  ecbd8b04          VPOP     {d8-d9}
0001e4  e8bd87f0          POP      {r4-r10,pc}
;;;1061       } // namespace TemplateTracker
                          ENDP

                  |L2.488|
0001e8  00000000          DCFS     0x00000000 ; 0
                  |L2.492|
                          DCD      _ZZN4Anki8Embedded6Matrix3MaxIfEET_RKNS0_25ConstArraySliceExpressionIS3_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Max<float>(const Anki::Embedded::ConstArraySliceExpression<T1>&)::__PRETTY_FUNCTION__
                  |L2.496|
0001f0  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
0001f4  6f726574
0001f8  6563685c
0001fc  636f6d6d
000200  6f6e5c69
000204  6e636c75
000208  64655c61
00020c  6e6b692f
000210  636f6d6d
000214  6f6e2f72
000218  6f626f74
00021c  2f6d6174
000220  726978  
000223  2e6800            DCB      ".h",0
000226  00                DCB      0
000227  00                DCB      0
                  |L2.552|
000228  41727261          DCB      "Array<Type> is not valid",0
00022c  793c5479
000230  70653e20
000234  6973206e
000238  6f742076
00023c  616c6964
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0
                  |L2.580|
000244  4d617472          DCB      "Matrix::Max",0
000248  69783a3a
00024c  4d617800
                  |L2.592|
                          DCD      0xbdcccccd
                  |L2.596|
                          DCD      _ZZN4Anki8Embedded5ArrayItE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::SetZero()::__PRETTY_FUNCTION__
                  |L2.600|
000258  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00025c  6f726574
000260  6563685c
000264  636f6d6d
000268  6f6e5c69
00026c  6e636c75
000270  64655c61
000274  6e6b692f
000278  636f6d6d
00027c  6f6e2f72
000280  6f626f74
000284  2f617272
000288  617932  
00028b  642e6800          DCB      "d.h",0
00028f  00                DCB      0
                  |L2.656|
000290  41727261          DCB      "Array<Type>::SetZero",0
000294  793c5479
000298  70653e3a
00029c  3a536574
0002a0  5a65726f
0002a4  00      
0002a5  00                DCB      0
0002a6  00                DCB      0
0002a7  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool&, Anki::Embedded::MemoryStack)
;;;319    
;;;320          Result LucasKanadeTracker_SampledProjective::IterativelyRefineTrack(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, const Transformations::TransformType curTransformType, bool &verify_converged, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;321          {
000004  460f              MOV      r7,r1
000006  ed2d8b02          VPUSH    {d8}
00000a  b089              SUB      sp,sp,#0x24
00000c  4604              MOV      r4,r0
00000e  e9dd6514          LDRD     r6,r5,[sp,#0x50]
000012  eeb08a40          VMOV.F32 s16,s0
000016  469a              MOV      r10,r3
000018  4693              MOV      r11,r2
;;;322            const s32 nextImageHeight = nextImage.get_size(0);
00001a  2100              MOVS     r1,#0
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;323            const s32 nextImageWidth = nextImage.get_size(1);
000022  9000              STR      r0,[sp,#0]
000024  2101              MOVS     r1,#1
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00002c  4681              MOV      r9,r0
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic7IsValidEv ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const
;;;324    
;;;325            AnkiConditionalErrorAndReturnValue(this->IsValid() == true,
000034  f8df818c          LDR      r8,|L3.452|
000038  2800              CMP      r0,#0
00003a  d020              BEQ      |L3.126|
00003c  6938              LDR      r0,[r7,#0x10]
00003e  2800              CMP      r0,#0
000040  d029              BEQ      |L3.150|
000042  6838              LDR      r0,[r7,#0]
000044  2800              CMP      r0,#0
000046  bfa4              ITT      GE
000048  6878              LDRGE    r0,[r7,#4]
00004a  2800              CMPGE    r0,#0
00004c  db23              BLT      |L3.150|
;;;326              RESULT_FAIL, "LucasKanadeTracker_SampledProjective::IterativelyRefineTrack", "This object is not initialized");
;;;327    
;;;328            AnkiConditionalErrorAndReturnValue(nextImage.IsValid(),
;;;329              RESULT_FAIL_INVALID_OBJECT, "LucasKanadeTracker_SampledProjective::IterativelyRefineTrack", "nextImage is not valid");
;;;330    
;;;331            AnkiConditionalErrorAndReturnValue(maxIterations > 0 && maxIterations < 1000,
00004e  f1bb0f00          CMP      r11,#0
000052  dd03              BLE      |L3.92|
000054  f5bb7f7a          CMP      r11,#0x3e8
000058  f2c0802a          BLT.W    |L3.176|
                  |L3.92|
00005c  f240104b          MOV      r0,#0x14b
000060  e9cd8000          STRD     r8,r0,[sp,#0]
000064  a358              ADR      r3,|L3.456|
000066  a268              ADR      r2,|L3.520|
000068  a176              ADR      r1,|L3.580|
00006a  2005              MOVS     r0,#5
00006c  f7fffffe          BL       _Anki_Log
000070  f04f7040          MOV      r0,#0x3000000
                  |L3.116|
;;;332              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_SampledProjective::IterativelyRefineTrack", "maxIterations must be greater than zero and less than 1000");
;;;333    
;;;334            AnkiConditionalErrorAndReturnValue(whichScale >= 0 && whichScale < this->numPyramidLevels,
;;;335              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_SampledProjective::IterativelyRefineTrack", "whichScale is invalid");
;;;336    
;;;337            AnkiConditionalErrorAndReturnValue(convergenceTolerance > 0.0f,
;;;338              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_SampledProjective::IterativelyRefineTrack", "convergenceTolerance must be greater than zero");
;;;339    
;;;340            AnkiConditionalErrorAndReturnValue(nextImageHeight == templateImageHeight && nextImageWidth == templateImageWidth,
;;;341              RESULT_FAIL_INVALID_SIZE, "LucasKanadeTracker_SampledProjective::IterativelyRefineTrack", "nextImage must be the same size as the template");
;;;342    
;;;343            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
;;;344            const s32 initialImagePowerS32 = Log2u32(static_cast<u32>(initialImageScaleS32));
;;;345    
;;;346            AnkiConditionalErrorAndReturnValue(((1<<initialImagePowerS32)*nextImageWidth) == BASE_IMAGE_WIDTH,
;;;347              RESULT_FAIL_INVALID_SIZE, "LucasKanadeTracker_SampledProjective::IterativelyRefineTrack", "The templateImage must be a power of two smaller than BASE_IMAGE_WIDTH");
;;;348    
;;;349            if(curTransformType == Transformations::TRANSFORM_TRANSLATION) {
;;;350              return IterativelyRefineTrack_Translation(nextImage, maxIterations, whichScale, convergenceTolerance, verify_converged, scratch);
;;;351            } else if(curTransformType == Transformations::TRANSFORM_AFFINE) {
;;;352              return IterativelyRefineTrack_Affine(nextImage, maxIterations, whichScale, convergenceTolerance, verify_converged, scratch);
;;;353            } else if(curTransformType == Transformations::TRANSFORM_PROJECTIVE) {
;;;354              return IterativelyRefineTrack_Projective(nextImage, maxIterations, whichScale, convergenceTolerance, verify_converged, scratch);
;;;355            }
;;;356    
;;;357            return RESULT_FAIL;
;;;358          } // Result LucasKanadeTracker_SampledProjective::IterativelyRefineTrack(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, const TransformType curTransformType, bool &verify_converged, MemoryStack scratch)
000074  b009              ADD      sp,sp,#0x24
000076  ecbd8b02          VPOP     {d8}
00007a  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.126|
00007e  f2401045          MOV      r0,#0x145             ;325
000082  e9cd8000          STRD     r8,r0,[sp,#0]         ;325
000086  a350              ADR      r3,|L3.456|
000088  a27e              ADR      r2,|L3.644|
00008a  a16e              ADR      r1,|L3.580|
00008c  2005              MOVS     r0,#5                 ;325
00008e  f7fffffe          BL       _Anki_Log
000092  2001              MOVS     r0,#1                 ;325
000094  e7ee              B        |L3.116|
                  |L3.150|
000096  f44f70a4          MOV      r0,#0x148             ;328
00009a  e9cd8000          STRD     r8,r0,[sp,#0]         ;328
00009e  a34a              ADR      r3,|L3.456|
0000a0  a280              ADR      r2,|L3.676|
0000a2  a168              ADR      r1,|L3.580|
0000a4  2005              MOVS     r0,#5                 ;328
0000a6  f7fffffe          BL       _Anki_Log
0000aa  f04f6080          MOV      r0,#0x4000000         ;328
0000ae  e7e1              B        |L3.116|
                  |L3.176|
0000b0  f1ba0f00          CMP      r10,#0                ;334
0000b4  bfa4              ITT      GE                    ;334
0000b6  6860              LDRGE    r0,[r4,#4]            ;334
0000b8  4550              CMPGE    r0,r10                ;334
0000ba  dc0c              BGT      |L3.214|
0000bc  f44f70a7          MOV      r0,#0x14e             ;334
0000c0  e9cd8000          STRD     r8,r0,[sp,#0]         ;334
0000c4  a340              ADR      r3,|L3.456|
0000c6  a27d              ADR      r2,|L3.700|
0000c8  a15e              ADR      r1,|L3.580|
0000ca  2005              MOVS     r0,#5                 ;334
0000cc  f7fffffe          BL       _Anki_Log
0000d0  f04f7040          MOV      r0,#0x3000000         ;334
0000d4  e7ce              B        |L3.116|
                  |L3.214|
0000d6  eeb58ac0          VCMPE.F32 s16,#0.0              ;337
0000da  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;337
0000de  d80c              BHI      |L3.250|
0000e0  f2401051          MOV      r0,#0x151             ;337
0000e4  e9cd8000          STRD     r8,r0,[sp,#0]         ;337
0000e8  a337              ADR      r3,|L3.456|
0000ea  a27a              ADR      r2,|L3.724|
0000ec  a155              ADR      r1,|L3.580|
0000ee  2005              MOVS     r0,#5                 ;337
0000f0  f7fffffe          BL       _Anki_Log
0000f4  f04f7040          MOV      r0,#0x3000000         ;337
0000f8  e7bc              B        |L3.116|
                  |L3.250|
0000fa  68a1              LDR      r1,[r4,#8]            ;340
0000fc  9800              LDR      r0,[sp,#0]            ;340
0000fe  4281              CMP      r1,r0                 ;340
000100  bf04              ITT      EQ                    ;340
000102  68e0              LDREQ    r0,[r4,#0xc]          ;340
000104  4548              CMPEQ    r0,r9                 ;340
000106  d00c              BEQ      |L3.290|
000108  f44f70aa          MOV      r0,#0x154             ;340
00010c  e9cd8000          STRD     r8,r0,[sp,#0]         ;340
000110  a32d              ADR      r3,|L3.456|
000112  a27c              ADR      r2,|L3.772|
000114  a14b              ADR      r1,|L3.580|
000116  2005              MOVS     r0,#5                 ;340
000118  f7fffffe          BL       _Anki_Log
00011c  f04f60a0          MOV      r0,#0x5000000         ;340
000120  e7a8              B        |L3.116|
                  |L3.290|
000122  f44f70a0          MOV      r0,#0x140             ;343
000126  fb90f0f9          SDIV     r0,r0,r9              ;343
00012a  f7fffffe          BL       Log2u32
00012e  fa09f000          LSL      r0,r9,r0              ;346
000132  f5b07fa0          CMP      r0,#0x140             ;346
000136  d00c              BEQ      |L3.338|
000138  f44f70ad          MOV      r0,#0x15a             ;346
00013c  e9cd8000          STRD     r8,r0,[sp,#0]         ;346
000140  a321              ADR      r3,|L3.456|
000142  4a7c              LDR      r2,|L3.820|
000144  a13f              ADR      r1,|L3.580|
000146  2005              MOVS     r0,#5                 ;346
000148  f7fffffe          BL       _Anki_Log
00014c  f04f60a0          MOV      r0,#0x5000000         ;346
000150  e790              B        |L3.116|
                  |L3.338|
000152  f5b67f00          CMP      r6,#0x200             ;349
000156  d016              BEQ      |L3.390|
000158  f5b66fc0          CMP      r6,#0x600             ;351
00015c  d022              BEQ      |L3.420|
00015e  f5b66f00          CMP      r6,#0x800             ;353
000162  bf18              IT       NE                    ;357
000164  2001              MOVNE    r0,#1                 ;357
000166  d185              BNE      |L3.116|
000168  a802              ADD      r0,sp,#8              ;354
00016a  9916              LDR      r1,[sp,#0x58]         ;354
00016c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000170  e9cd5000          STRD     r5,r0,[sp,#0]         ;354
000174  eeb00a48          VMOV.F32 s0,s16                ;354
000178  4653              MOV      r3,r10                ;354
00017a  465a              MOV      r2,r11                ;354
00017c  4639              MOV      r1,r7                 ;354
00017e  4620              MOV      r0,r4                 ;354
000180  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Projective(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
000184  e776              B        |L3.116|
                  |L3.390|
000186  a802              ADD      r0,sp,#8              ;350
000188  9916              LDR      r1,[sp,#0x58]         ;350
00018a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00018e  e9cd5000          STRD     r5,r0,[sp,#0]         ;350
000192  eeb00a48          VMOV.F32 s0,s16                ;350
000196  4653              MOV      r3,r10                ;350
000198  465a              MOV      r2,r11                ;350
00019a  4639              MOV      r1,r7                 ;350
00019c  4620              MOV      r0,r4                 ;350
00019e  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Translation(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
0001a2  e767              B        |L3.116|
                  |L3.420|
0001a4  a802              ADD      r0,sp,#8              ;352
0001a6  9916              LDR      r1,[sp,#0x58]         ;352
0001a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0001ac  e9cd5000          STRD     r5,r0,[sp,#0]         ;352
0001b0  eeb00a48          VMOV.F32 s0,s16                ;352
0001b4  4653              MOV      r3,r10                ;352
0001b6  465a              MOV      r2,r11                ;352
0001b8  4639              MOV      r1,r7                 ;352
0001ba  4620              MOV      r0,r4                 ;352
0001bc  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Affine(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
0001c0  e758              B        |L3.116|
;;;359    
                          ENDP

0001c2  0000              DCW      0x0000
                  |L3.452|
                          DCD      ||.constdata||+0x170
                  |L3.456|
0001c8  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\lucasKanade_SampledPr"
0001cc  6f726574
0001d0  6563685c
0001d4  76697369
0001d8  6f6e5c72
0001dc  6f626f74
0001e0  5c737263
0001e4  5c6c7563
0001e8  61734b61
0001ec  6e616465
0001f0  5f53616d
0001f4  706c6564
0001f8  5072    
0001fa  6f6a6563          DCB      "ojective.cpp",0
0001fe  74697665
000202  2e637070
000206  00      
000207  00                DCB      0
                  |L3.520|
000208  6d617849          DCB      "maxIterations must be greater than zero and less than 1"
00020c  74657261
000210  74696f6e
000214  73206d75
000218  73742062
00021c  65206772
000220  65617465
000224  72207468
000228  616e207a
00022c  65726f20
000230  616e6420
000234  6c657373
000238  20746861
00023c  6e2031  
00023f  30303000          DCB      "000",0
000243  00                DCB      0
                  |L3.580|
000244  4c756361          DCB      "LucasKanadeTracker_SampledProjective::IterativelyRefine"
000248  734b616e
00024c  61646554
000250  7261636b
000254  65725f53
000258  616d706c
00025c  65645072
000260  6f6a6563
000264  74697665
000268  3a3a4974
00026c  65726174
000270  6976656c
000274  79526566
000278  696e65  
00027b  54726163          DCB      "Track",0
00027f  6b00    
000281  00                DCB      0
000282  00                DCB      0
000283  00                DCB      0
                  |L3.644|
000284  54686973          DCB      "This object is not initialized",0
000288  206f626a
00028c  65637420
000290  6973206e
000294  6f742069
000298  6e697469
00029c  616c697a
0002a0  656400  
0002a3  00                DCB      0
                  |L3.676|
0002a4  6e657874          DCB      "nextImage is not valid",0
0002a8  496d6167
0002ac  65206973
0002b0  206e6f74
0002b4  2076616c
0002b8  696400  
0002bb  00                DCB      0
                  |L3.700|
0002bc  77686963          DCB      "whichScale is invalid",0
0002c0  68536361
0002c4  6c652069
0002c8  7320696e
0002cc  76616c69
0002d0  6400    
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L3.724|
0002d4  636f6e76          DCB      "convergenceTolerance must be greater than zero",0
0002d8  65726765
0002dc  6e636554
0002e0  6f6c6572
0002e4  616e6365
0002e8  206d7573
0002ec  74206265
0002f0  20677265
0002f4  61746572
0002f8  20746861
0002fc  6e207a65
000300  726f00  
000303  00                DCB      0
                  |L3.772|
000304  6e657874          DCB      "nextImage must be the same size as the template",0
000308  496d6167
00030c  65206d75
000310  73742062
000314  65207468
000318  65207361
00031c  6d652073
000320  697a6520
000324  61732074
000328  68652074
00032c  656d706c
000330  61746500
                  |L3.820|
                          DCD      ||.constdata||+0x398

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Affine(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
;;;525    
;;;526          Result LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Affine(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;527          {
000004  461f              MOV      r7,r3
000006  ed2d0b02          VPUSH    {d0}
00000a  4688              MOV      r8,r1
00000c  4606              MOV      r6,r0
00000e  ed2d8b10          VPUSH    {d8-d15}
000012  b0df              SUB      sp,sp,#0x17c
;;;528            // This method is heavily based on Interp2_Projective
;;;529            // The call would be like: Interp2_Projective<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;530    
;;;531            Result lastResult;
;;;532    
;;;533            Array<f32> AWAt(6, 6, scratch);
000014  2300              MOVS     r3,#0
000016  461a              MOV      r2,r3
000018  2101              MOVS     r1,#1
00001a  a85d              ADD      r0,sp,#0x174
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000020  6800              LDR      r0,[r0,#0]
000022  9000              STR      r0,[sp,#0]
000024  2206              MOVS     r2,#6
000026  4611              MOV      r1,r2
000028  a833              ADD      r0,sp,#0xcc
00002a  9b7f              LDR      r3,[sp,#0x1fc]
00002c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;534            Array<f32> b(1, 6, scratch);
000030  2300              MOVS     r3,#0
000032  461a              MOV      r2,r3
000034  2101              MOVS     r1,#1
000036  a85c              ADD      r0,sp,#0x170
000038  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00003c  6800              LDR      r0,[r0,#0]
00003e  9000              STR      r0,[sp,#0]
000040  2206              MOVS     r2,#6
000042  2101              MOVS     r1,#1
000044  a838              ADD      r0,sp,#0xe0
000046  9b7f              LDR      r3,[sp,#0x1fc]
000048  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;535    
;;;536            // These addresses should be known at compile time, so should be faster
;;;537            f32 AWAt_raw[6][6];
;;;538            f32 b_raw[6];
;;;539    
;;;540            verify_converged = false;
00004c  997e              LDR      r1,[sp,#0x1f8]
00004e  2000              MOVS     r0,#0
000050  7008              STRB     r0,[r1,#0]
;;;541    
;;;542            const s32 nextImageHeight = nextImage.get_size(0);
000052  4601              MOV      r1,r0
000054  4640              MOV      r0,r8
000056  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00005a  ee090a10          VMOV     s18,r0
;;;543            const s32 nextImageWidth = nextImage.get_size(1);
00005e  2101              MOVS     r1,#1
000060  4640              MOV      r0,r8
000062  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000066  4681              MOV      r9,r0
;;;544    
;;;545            const f32 scale = static_cast<f32>(1 << whichScale);
000068  2001              MOVS     r0,#1
00006a  40b8              LSLS     r0,r0,r7
00006c  ee000a10          VMOV     s0,r0
;;;546    
;;;547            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
000070  f44f70a0          MOV      r0,#0x140
000074  fb90f0f9          SDIV     r0,r0,r9
;;;548            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
000078  ee000a90          VMOV     s1,r0
00007c  eeb80ac0          VCVT.F32.S32 s0,s0                 ;545
000080  eef8bae0          VCVT.F32.S32 s23,s1
;;;549    
;;;550            const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
;;;551            const f32 scaleOverFiveTen = scale / (2.0f*255.0f);
000084  eddf0afe          VLDR     s1,|L4.1152|
;;;552    
;;;553            //const Point<f32>& centerOffset = this->transformation.get_centerOffset();
;;;554            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
000088  f1060118          ADD      r1,r6,#0x18
00008c  a852              ADD      r0,sp,#0x148
00008e  ee80ca20          VDIV.F32 s24,s0,s1             ;551
000092  eeb00a6b          VMOV.F32 s0,s23
000096  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;555    
;;;556            // Initialize with some very extreme coordinates
;;;557            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
00009a  2300              MOVS     r3,#0
00009c  461a              MOV      r2,r3
00009e  2101              MOVS     r1,#1
0000a0  a85c              ADD      r0,sp,#0x170
0000a2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000a6  6803              LDR      r3,[r0,#0]
0000a8  2102              MOVS     r1,#2
0000aa  a826              ADD      r0,sp,#0x98
0000ac  9a7f              LDR      r2,[sp,#0x1fc]
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;558    
;;;559            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
0000b2  2400              MOVS     r4,#0
;;;560              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
0000b4  ed9f8af3          VLDR     s16,|L4.1156|
                  |L4.184|
0000b8  9832              LDR      r0,[sp,#0xc8]
0000ba  ed8d8a00          VSTR     s16,[sp,#0]
0000be  ed8d8a01          VSTR     s16,[sp,#4]
0000c2  ed8d8a4c          VSTR     s16,[sp,#0x130]
0000c6  ed8d8a4d          VSTR     s16,[sp,#0x134]
0000ca  ed8d8a4e          VSTR     s16,[sp,#0x138]
0000ce  ed8d8a4f          VSTR     s16,[sp,#0x13c]
0000d2  eb001544          ADD      r5,r0,r4,LSL #5
0000d6  ed8d8a50          VSTR     s16,[sp,#0x140]
0000da  a844              ADD      r0,sp,#0x110
0000dc  ed8d8a51          VSTR     s16,[sp,#0x144]
0000e0  2304              MOVS     r3,#4
0000e2  2208              MOVS     r2,#8
0000e4  49e8              LDR      r1,|L4.1160|
0000e6  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0000ea  ed9d0a00          VLDR     s0,[sp,#0]
0000ee  4603              MOV      r3,r0
0000f0  ed800a00          VSTR     s0,[r0,#0]
0000f4  ed9d0a01          VLDR     s0,[sp,#4]
0000f8  ed800a01          VSTR     s0,[r0,#4]
0000fc  3008              ADDS     r0,r0,#8
0000fe  ed9d0a4c          VLDR     s0,[sp,#0x130]
000102  ed800a00          VSTR     s0,[r0,#0]
000106  ed9d0a4d          VLDR     s0,[sp,#0x134]
00010a  ed800a01          VSTR     s0,[r0,#4]
00010e  ed9d0a4e          VLDR     s0,[sp,#0x138]
000112  2000              MOVS     r0,#0
000114  ed830a04          VSTR     s0,[r3,#0x10]
000118  ed9d0a4f          VLDR     s0,[sp,#0x13c]
00011c  ed830a05          VSTR     s0,[r3,#0x14]
000120  ed9d0a50          VLDR     s0,[sp,#0x140]
000124  ed830a06          VSTR     s0,[r3,#0x18]
000128  ed9d0a51          VLDR     s0,[sp,#0x144]
00012c  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L4.304|
000130  eb0301c0          ADD      r1,r3,r0,LSL #3
000134  eb0502c0          ADD      r2,r5,r0,LSL #3
000138  ed910a00          VLDR     s0,[r1,#0]
00013c  1c40              ADDS     r0,r0,#1
00013e  ed820a00          VSTR     s0,[r2,#0]
000142  ed910a01          VLDR     s0,[r1,#4]
000146  2804              CMP      r0,#4
000148  ed820a01          VSTR     s0,[r2,#4]
00014c  dbf0              BLT      |L4.304|
00014e  1c64              ADDS     r4,r4,#1              ;559
000150  2c02              CMP      r4,#2                 ;559
000152  dbb1              BLT      |L4.184|
;;;561            }
;;;562    
;;;563            const f32 xyReferenceMin = 0.0f;
;;;564            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
000154  ee009a10          VMOV     s0,r9
000158  eef7ea00          VMOV.F32 s29,#1.00000000
00015c  eb070187          ADD      r1,r7,r7,LSL #2
000160  eeb80ac0          VCVT.F32.S32 s0,s0
000164  eb0101c7          ADD      r1,r1,r7,LSL #3
000168  2f00              CMP      r7,#0
00016a  ee300a6e          VSUB.F32 s0,s0,s29
00016e  ed8d0a5b          VSTR     s0,[sp,#0x16c]
;;;565            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
000172  eeb80ac9          VCVT.F32.S32 s0,s18
000176  ee300a6e          VSUB.F32 s0,s0,s29
00017a  ed8d0a5a          VSTR     s0,[sp,#0x168]
00017e  f8d600a4          LDR      r0,[r6,#0xa4]
000182  eb000081          ADD      r0,r0,r1,LSL #2
;;;566    
;;;567            const TemplateSample * restrict pTemplateSamplePyramid = this->templateSamplePyramid[whichScale].Pointer(0);
000186  6b01              LDR      r1,[r0,#0x30]
000188  9159              STR      r1,[sp,#0x164]
00018a  bfa5              ITTET    GE
00018c  6871              LDRGE    r1,[r6,#4]
00018e  42b9              CMPGE    r1,r7
000190  f04f0900          MOVLT    r9,#0
000194  f8d0900c          LDRGE    r9,[r0,#0xc]
;;;568    
;;;569            const s32 numTemplateSamples = this->get_numTemplatePixels(whichScale);
;;;570    
;;;571            for(s32 iteration=0; iteration<maxIterations; iteration++) {
000198  f04f0a00          MOV      r10,#0
00019c  9873              LDR      r0,[sp,#0x1cc]
00019e  2800              CMP      r0,#0
0001a0  f34081ee          BLE.W    |L4.1408|
0001a4  eeb6ba00          VMOV.F32 s22,#0.50000000       ;569
;;;572              const Array<f32> &homography = this->transformation.get_homography();
;;;573              const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
;;;574              const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
;;;575              const f32 h20 = homography[2][0] * initialImageScaleF32; const f32 h21 = homography[2][1] * initialImageScaleF32; //const f32 h22 = 1.0f;
;;;576    
;;;577              //AWAt.SetZero();
;;;578              //b.SetZero();
;;;579    
;;;580              for(s32 ia=0; ia<6; ia++) {
;;;581                for(s32 ja=0; ja<6; ja++) {
;;;582                  AWAt_raw[ia][ja] = 0;
;;;583                }
;;;584                b_raw[ia] = 0;
;;;585              }
;;;586    
;;;587              s32 numInBounds = 0;
;;;588    
;;;589              for(s32 iSample=0; iSample<numTemplateSamples; iSample++) {
;;;590                const TemplateSample curSample = pTemplateSamplePyramid[iSample];
;;;591                const f32 yOriginal = curSample.yCoordinate;
;;;592                const f32 xOriginal = curSample.xCoordinate;
;;;593    
;;;594                // TODO: These two could be strength reduced
;;;595                const f32 xTransformedRaw = h00*xOriginal + h01*yOriginal + h02;
;;;596                const f32 yTransformedRaw = h10*xOriginal + h11*yOriginal + h12;
;;;597    
;;;598                const f32 normalization = h20*xOriginal + h21*yOriginal + 1.0f;
;;;599    
;;;600                const f32 xTransformed = (xTransformedRaw / normalization) + centerOffsetScaled.x;
;;;601                const f32 yTransformed = (yTransformedRaw / normalization) + centerOffsetScaled.y;
;;;602    
;;;603                const f32 x0 = FLT_FLOOR(xTransformed);
;;;604                const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
;;;605    
;;;606                const f32 y0 = FLT_FLOOR(yTransformed);
;;;607                const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
;;;608    
;;;609                // If out of bounds, continue
;;;610                if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;611                  continue;
;;;612                }
;;;613    
;;;614                numInBounds++;
;;;615    
;;;616                const f32 alphaX = xTransformed - x0;
;;;617                const f32 alphaXinverse = 1 - alphaX;
;;;618    
;;;619                const f32 alphaY = yTransformed - y0;
;;;620                const f32 alphaYinverse = 1.0f - alphaY;
;;;621    
;;;622                const s32 y0S32 = Round<s32>(y0);
;;;623                const s32 y1S32 = Round<s32>(y1);
;;;624                const s32 x0S32 = Round<s32>(x0);
;;;625    
;;;626                const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;627                const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;628    
;;;629                const f32 pixelTL = *pReference_y0;
;;;630                const f32 pixelTR = *(pReference_y0+1);
;;;631                const f32 pixelBL = *pReference_y1;
;;;632                const f32 pixelBR = *(pReference_y1+1);
;;;633    
;;;634                const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;635    
;;;636                //const u8 interpolatedPixel = static_cast<u8>(Round(interpolatedPixelF32));
;;;637    
;;;638                // This block is the non-interpolation part of the per-sample algorithm
;;;639                {
;;;640                  const f32 templatePixelValue = curSample.grayvalue;
;;;641                  const f32 xGradientValue = scaleOverFiveTen * curSample.xGradient;
;;;642                  const f32 yGradientValue = scaleOverFiveTen * curSample.yGradient;
;;;643    
;;;644                  const f32 tGradientValue = oneOverTwoFiftyFive * (interpolatedPixelF32 - templatePixelValue);
;;;645    
;;;646                  //CoreTechPrint("%f ", xOriginal);
;;;647                  const f32 values[6] = {
0001a8  af44              ADD      r7,sp,#0x110
0001aa  f10d0b08          ADD      r11,sp,#8             ;537
                  |L4.430|
0001ae  f1060018          ADD      r0,r6,#0x18           ;572
0001b2  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
0001b6  6882              LDR      r2,[r0,#8]            ;572
0001b8  6901              LDR      r1,[r0,#0x10]         ;572
0001ba  2300              MOVS     r3,#0                 ;573
0001bc  fb031002          MLA      r0,r3,r2,r1           ;573
0001c0  ed900a00          VLDR     s0,[r0,#0]            ;573
0001c4  ed8d0a58          VSTR     s0,[sp,#0x160]        ;573
0001c8  ed900a01          VLDR     s0,[r0,#4]            ;573
0001cc  ed8d0a57          VSTR     s0,[sp,#0x15c]        ;573
0001d0  edd00a02          VLDR     s1,[r0,#8]            ;573
0001d4  2001              MOVS     r0,#1                 ;574
0001d6  fb001002          MLA      r0,r0,r2,r1           ;574
0001da  ee800aab          VDIV.F32 s0,s1,s23             ;573
0001de  ed8d0a56          VSTR     s0,[sp,#0x158]        ;573
0001e2  ed900a00          VLDR     s0,[r0,#0]            ;574
0001e6  ed8d0a55          VSTR     s0,[sp,#0x154]        ;574
0001ea  ed900a01          VLDR     s0,[r0,#4]            ;574
0001ee  ed8d0a54          VSTR     s0,[sp,#0x150]        ;574
0001f2  edd00a02          VLDR     s1,[r0,#8]            ;574
0001f6  2002              MOVS     r0,#2                 ;575
0001f8  fb001002          MLA      r0,r0,r2,r1           ;575
0001fc  ee800aab          VDIV.F32 s0,s1,s23             ;574
000200  2100              MOVS     r1,#0                 ;580
000202  ed8d0a51          VSTR     s0,[sp,#0x144]        ;574
000206  ed900a00          VLDR     s0,[r0,#0]            ;575
00020a  ee200a2b          VMUL.F32 s0,s0,s23             ;575
00020e  ed8d0a3d          VSTR     s0,[sp,#0xf4]         ;575
000212  ed900a01          VLDR     s0,[r0,#4]            ;575
000216  ee200a2b          VMUL.F32 s0,s0,s23             ;575
00021a  ed8d0a01          VSTR     s0,[sp,#4]            ;575
00021e  ed9f0a9b          VLDR     s0,|L4.1164|
000222  ab3e              ADD      r3,sp,#0xf8           ;538
                  |L4.548|
000224  eb010241          ADD      r2,r1,r1,LSL #1       ;582
000228  2000              MOVS     r0,#0                 ;581
00022a  eb0b02c2          ADD      r2,r11,r2,LSL #3      ;582
                  |L4.558|
00022e  eb020c80          ADD      r12,r2,r0,LSL #2      ;582
000232  1c40              ADDS     r0,r0,#1              ;581
000234  ed8c0a00          VSTR     s0,[r12,#0]           ;582
000238  2806              CMP      r0,#6                 ;581
00023a  dbf8              BLT      |L4.558|
00023c  eb030081          ADD      r0,r3,r1,LSL #2       ;584
000240  1c49              ADDS     r1,r1,#1              ;580
000242  ed800a00          VSTR     s0,[r0,#0]            ;584
000246  2906              CMP      r1,#6                 ;580
000248  dbec              BLT      |L4.548|
00024a  2500              MOVS     r5,#0                 ;587
00024c  462c              MOV      r4,r5                 ;589
00024e  f1b90f00          CMP      r9,#0                 ;589
000252  bfc4              ITT      GT                    ;600
000254  edddfa52          VLDRGT   s31,[sp,#0x148]       ;600
000258  ed9dfa53          VLDRGT   s30,[sp,#0x14c]       ;601
00025c  f3408190          BLE.W    |L4.1408|
                  |L4.608|
000260  9859              LDR      r0,[sp,#0x164]        ;590
000262  eb040184          ADD      r1,r4,r4,LSL #2       ;590
000266  eb000081          ADD      r0,r0,r1,LSL #2       ;590
00026a  ed9d0a58          VLDR     s0,[sp,#0x160]        ;595
00026e  ed908a00          VLDR     s16,[r0,#0]           ;590
000272  edd08a01          VLDR     s17,[r0,#4]           ;590
000276  eddd1a01          VLDR     s3,[sp,#4]            ;598
00027a  ee600a08          VMUL.F32 s1,s0,s16             ;595
00027e  ed9d0a57          VLDR     s0,[sp,#0x15c]        ;595
000282  edd0da02          VLDR     s27,[r0,#8]           ;590
000286  ed90ea03          VLDR     s28,[r0,#0xc]         ;590
00028a  ee400a28          VMLA.F32 s1,s0,s17             ;595
00028e  ed9d0a56          VLDR     s0,[sp,#0x158]        ;595
000292  edd0ca04          VLDR     s25,[r0,#0x10]        ;590
000296  ee301a80          VADD.F32 s2,s1,s0              ;595
00029a  ed9d0a55          VLDR     s0,[sp,#0x154]        ;596
00029e  ee600a08          VMUL.F32 s1,s0,s16             ;596
0002a2  ed9d0a54          VLDR     s0,[sp,#0x150]        ;596
0002a6  ee400a28          VMLA.F32 s1,s0,s17             ;596
0002aa  ed9d0a51          VLDR     s0,[sp,#0x144]        ;596
0002ae  ee700a80          VADD.F32 s1,s1,s0              ;596
0002b2  ed9d0a3d          VLDR     s0,[sp,#0xf4]         ;598
0002b6  ee200a08          VMUL.F32 s0,s0,s16             ;598
0002ba  ee010aa8          VMLA.F32 s0,s3,s17             ;598
0002be  ee300a2e          VADD.F32 s0,s0,s29             ;598
0002c2  eec11a00          VDIV.F32 s3,s2,s0              ;600
0002c6  ee801a80          VDIV.F32 s2,s1,s0              ;601
0002ca  ee71aaaf          VADD.F32 s21,s3,s31            ;600
0002ce  ee31aa0f          VADD.F32 s20,s2,s30            ;601
0002d2  ed9f9a6f          VLDR     s18,|L4.1168|
0002d6  ee3a0a89          VADD.F32 s0,s21,s18            ;603
0002da  f7fffffe          BL       __hardfp_floorf
0002de  eef09a40          VMOV.F32 s19,s0                ;603
0002e2  eeb00a6a          VMOV.F32 s0,s21                ;604
0002e6  f7fffffe          BL       __hardfp_ceilf
0002ea  eeb0da40          VMOV.F32 s26,s0                ;604
0002ee  ee3a0a09          VADD.F32 s0,s20,s18            ;606
0002f2  f7fffffe          BL       __hardfp_floorf
0002f6  eeb09a40          VMOV.F32 s18,s0                ;606
0002fa  eeb00a4a          VMOV.F32 s0,s20                ;607
0002fe  f7fffffe          BL       __hardfp_ceilf
000302  eef59ac0          VCMPE.F32 s19,#0.0              ;610
000306  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;610
00030a  d37d              BCC      |L4.1032|
00030c  eddd0a5b          VLDR     s1,[sp,#0x16c]        ;610
000310  eeb4dae0          VCMPE.F32 s26,s1                ;610
000314  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;610
000318  dc76              BGT      |L4.1032|
00031a  eeb59ac0          VCMPE.F32 s18,#0.0              ;610
00031e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;610
000322  d371              BCC      |L4.1032|
000324  eddd0a5a          VLDR     s1,[sp,#0x168]        ;610
000328  eeb40ae0          VCMPE.F32 s0,s1                 ;610
00032c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;610
000330  dc6a              BGT      |L4.1032|
000332  ee7a0ae9          VSUB.F32 s1,s21,s19            ;616
000336  ee7a1a49          VSUB.F32 s3,s20,s18            ;619
00033a  eeb59ac0          VCMPE.F32 s18,#0.0              ;619
00033e  1c6d              ADDS     r5,r5,#1              ;614
000340  ee3e1ae0          VSUB.F32 s2,s29,s1             ;617
000344  ee7e2ae1          VSUB.F32 s5,s29,s3             ;620
000348  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;620
00034c  bfcc              ITE      GT                    ;620
00034e  ee392a0b          VADDGT.F32 s4,s18,s22            ;620
000352  ee392a4b          VSUBLE.F32 s4,s18,s22            ;620
000356  eebd2ac2          VCVT.S32.F32 s4,s4                 ;620
00035a  eeb50ac0          VCMPE.F32 s0,#0.0               ;620
00035e  ee123a10          VMOV     r3,s4                 ;620
000362  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;620
000366  bfcc              ITE      GT                    ;620
000368  ee300a0b          VADDGT.F32 s0,s0,s22             ;620
00036c  ee300a4b          VSUBLE.F32 s0,s0,s22             ;620
000370  eebd0ac0          VCVT.S32.F32 s0,s0                 ;620
000374  eef59ac0          VCMPE.F32 s19,#0.0              ;620
000378  ee10ca10          VMOV     r12,s0                ;620
00037c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;620
000380  bfcc              ITE      GT                    ;620
000382  ee390a8b          VADDGT.F32 s0,s19,s22            ;620
000386  ee390acb          VSUBLE.F32 s0,s19,s22            ;620
00038a  eebd0ac0          VCVT.S32.F32 s0,s0                 ;620
00038e  f8d82008          LDR      r2,[r8,#8]            ;620
000392  f8d81010          LDR      r1,[r8,#0x10]         ;620
000396  ee100a10          VMOV     r0,s0                 ;620
00039a  fb031302          MLA      r3,r3,r2,r1           ;620
00039e  fb0c1102          MLA      r1,r12,r2,r1          ;620
0003a2  4403              ADD      r3,r3,r0              ;620
0003a4  4408              ADD      r0,r0,r1              ;620
0003a6  7819              LDRB     r1,[r3,#0]            ;629
0003a8  ee001a10          VMOV     s0,r1                 ;629
0003ac  7859              LDRB     r1,[r3,#1]            ;630
0003ae  ee021a10          VMOV     s4,r1                 ;630
0003b2  7801              LDRB     r1,[r0,#0]            ;631
0003b4  eeb80a40          VCVT.F32.U32 s0,s0                 ;629
0003b8  eeb83a42          VCVT.F32.U32 s6,s4                 ;630
0003bc  ee021a10          VMOV     s4,r1                 ;631
0003c0  7840              LDRB     r0,[r0,#1]            ;632
0003c2  ee210a00          VMUL.F32 s0,s2,s0              ;632
0003c6  eeb82a42          VCVT.F32.U32 s4,s4                 ;631
0003ca  ee030a90          VMOV     s7,r0                 ;632
0003ce  ee000a83          VMLA.F32 s0,s1,s6              ;632
0003d2  eef83a63          VCVT.F32.U32 s7,s7                 ;632
0003d6  ee212a02          VMUL.F32 s4,s2,s4              ;632
0003da  ee002aa3          VMLA.F32 s4,s1,s7              ;632
0003de  ee221a80          VMUL.F32 s2,s5,s0              ;632
0003e2  ee2d0a8c          VMUL.F32 s0,s27,s24            ;641
0003e6  ee6e0a0c          VMUL.F32 s1,s28,s24            ;642
0003ea  ee011a82          VMLA.F32 s2,s3,s4              ;642
0003ee  ee711a6c          VSUB.F32 s3,s2,s25             ;644
0003f2  ed9f1a28          VLDR     s2,|L4.1172|
0003f6  ee611a81          VMUL.F32 s3,s3,s2              ;644
0003fa  ee281a00          VMUL.F32 s2,s16,s0
0003fe  ed8d1a44          VSTR     s2,[sp,#0x110]
000402  ee281a80          VMUL.F32 s2,s17,s0
000406  e000              B        |L4.1034|
                  |L4.1032|
000408  e039              B        |L4.1150|
                  |L4.1034|
00040a  ed8d1a45          VSTR     s2,[sp,#0x114]
00040e  ed8d0a46          VSTR     s0,[sp,#0x118]
000412  ee280a20          VMUL.F32 s0,s16,s1
;;;648                    xOriginal * xGradientValue,
;;;649                    yOriginal * xGradientValue,
;;;650                    xGradientValue,
;;;651                    xOriginal * yGradientValue,
;;;652                    yOriginal * yGradientValue,
;;;653                    yGradientValue};
;;;654    
;;;655                  //for(s32 ia=0; ia<6; ia++) {
;;;656                  //  CoreTechPrint("%f ", values[ia]);
;;;657                  //}
;;;658                  //CoreTechPrint("\n");
;;;659    
;;;660                  //f32 AWAt_raw[6][6];
;;;661                  //f32 b_raw[6];
;;;662                  for(s32 ia=0; ia<6; ia++) {
000416  2100              MOVS     r1,#0
000418  f10d0ef8          ADD      lr,sp,#0xf8           ;538
00041c  ed8d0a47          VSTR     s0,[sp,#0x11c]        ;647
000420  ee280aa0          VMUL.F32 s0,s17,s1             ;647
000424  ed8d0a48          VSTR     s0,[sp,#0x120]        ;647
000428  edcd0a49          VSTR     s1,[sp,#0x124]        ;647
                  |L4.1068|
;;;663                    for(s32 ja=ia; ja<6; ja++) {
00042c  4608              MOV      r0,r1
00042e  2906              CMP      r1,#6
000430  da16              BGE      |L4.1120|
;;;664                      AWAt_raw[ia][ja] += values[ia] * values[ja];
000432  eb070281          ADD      r2,r7,r1,LSL #2
000436  ed920a00          VLDR     s0,[r2,#0]
00043a  eb010241          ADD      r2,r1,r1,LSL #1
00043e  eb0b0cc2          ADD      r12,r11,r2,LSL #3
                  |L4.1090|
000442  eb0c0280          ADD      r2,r12,r0,LSL #2
000446  eb070380          ADD      r3,r7,r0,LSL #2
00044a  edd20a00          VLDR     s1,[r2,#0]
00044e  ed931a00          VLDR     s2,[r3,#0]
000452  1c40              ADDS     r0,r0,#1              ;663
000454  2806              CMP      r0,#6                 ;663
000456  ee400a01          VMLA.F32 s1,s0,s2
00045a  edc20a00          VSTR     s1,[r2,#0]
00045e  dbf0              BLT      |L4.1090|
                  |L4.1120|
;;;665                    }
;;;666                    b_raw[ia] += values[ia] * tGradientValue;
000460  eb0e0081          ADD      r0,lr,r1,LSL #2
000464  eb070281          ADD      r2,r7,r1,LSL #2
000468  ed900a00          VLDR     s0,[r0,#0]
00046c  edd20a00          VLDR     s1,[r2,#0]
000470  1c49              ADDS     r1,r1,#1              ;662
000472  2906              CMP      r1,#6                 ;662
000474  ee000aa1          VMLA.F32 s0,s1,s3
000478  ed800a00          VSTR     s0,[r0,#0]
00047c  dbd6              BLT      |L4.1068|
                  |L4.1150|
00047e  e00b              B        |L4.1176|
                  |L4.1152|
000480  43ff0000          DCFS     0x43ff0000 ; 510
                  |L4.1156|
000484  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L4.1160|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L4.1164|
00048c  00000000          DCFS     0x00000000 ; 0
                  |L4.1168|
000490  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L4.1172|
000494  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627
                  |L4.1176|
000498  1c64              ADDS     r4,r4,#1              ;589
00049a  454c              CMP      r4,r9                 ;589
00049c  f6ffaee0          BLT      |L4.608|
;;;667                  }
;;;668                }
;;;669              } // for(s32 iSample=0; iSample<numTemplateSamples; iSample++)
;;;670    
;;;671              if(numInBounds < 16) {
0004a0  2d10              CMP      r5,#0x10
;;;672                AnkiWarn("LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Affine", "Template drifted too far out of image.");
;;;673                return RESULT_OK;
;;;674              }
;;;675    
;;;676              for(s32 ia=0; ia<6; ia++) {
0004a2  bfa4              ITT      GE
0004a4  2100              MOVGE    r1,#0
0004a6  ac3e              ADDGE    r4,sp,#0xf8           ;538
0004a8  db6a              BLT      |L4.1408|
                  |L4.1194|
;;;677                for(s32 ja=ia; ja<6; ja++) {
0004aa  4608              MOV      r0,r1
0004ac  2906              CMP      r1,#6
;;;678                  AWAt[ia][ja] = AWAt_raw[ia][ja];
0004ae  bfbc              ITT      LT
0004b0  eb010241          ADDLT    r2,r1,r1,LSL #1
0004b4  eb0b0cc2          ADDLT    r12,r11,r2,LSL #3
0004b8  da0e              BGE      |L4.1240|
                  |L4.1210|
0004ba  9b35              LDR      r3,[sp,#0xd4]         ;677
0004bc  9a37              LDR      r2,[sp,#0xdc]         ;677
0004be  fb012203          MLA      r2,r1,r3,r2           ;677
0004c2  eb0c0380          ADD      r3,r12,r0,LSL #2
0004c6  eb020280          ADD      r2,r2,r0,LSL #2
0004ca  ed930a00          VLDR     s0,[r3,#0]
0004ce  1c40              ADDS     r0,r0,#1              ;677
0004d0  ed820a00          VSTR     s0,[r2,#0]
0004d4  2806              CMP      r0,#6                 ;677
0004d6  dbf0              BLT      |L4.1210|
                  |L4.1240|
0004d8  9b3a              LDR      r3,[sp,#0xe8]         ;677
0004da  9a3c              LDR      r2,[sp,#0xf0]         ;677
;;;679                }
;;;680                b[0][ia] = b_raw[ia];
0004dc  2000              MOVS     r0,#0
0004de  fb002003          MLA      r0,r0,r3,r2
0004e2  eb040281          ADD      r2,r4,r1,LSL #2
0004e6  eb000081          ADD      r0,r0,r1,LSL #2
0004ea  ed920a00          VLDR     s0,[r2,#0]
0004ee  1c49              ADDS     r1,r1,#1              ;676
0004f0  ed800a00          VSTR     s0,[r0,#0]
0004f4  2906              CMP      r1,#6                 ;676
0004f6  dbd8              BLT      |L4.1194|
;;;681              }
;;;682    
;;;683              Matrix::MakeSymmetric(AWAt, false);
0004f8  2100              MOVS     r1,#0
0004fa  a833              ADD      r0,sp,#0xcc
0004fc  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)
;;;684    
;;;685              //AWAt.Print("New AWAt");
;;;686              //b.Print("New b");
;;;687    
;;;688              bool numericalFailure;
;;;689    
;;;690              if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK)
000500  466b              MOV      r3,sp
000502  2200              MOVS     r2,#0
000504  a938              ADD      r1,sp,#0xe0
000506  a833              ADD      r0,sp,#0xcc
000508  f7fffffe          BL       _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
00050c  2800              CMP      r0,#0
;;;691                return lastResult;
;;;692    
;;;693              if(numericalFailure){
;;;694                AnkiWarn("LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Affine", "numericalFailure");
;;;695                return RESULT_OK;
;;;696              }
;;;697    
;;;698              //b.Print("New update");
;;;699    
;;;700              this->transformation.Update(b, initialImageScaleF32, scratch, Transformations::TRANSFORM_AFFINE);
;;;701    
;;;702              //this->transformation.get_homography().Print("new transformation");
;;;703    
;;;704              // Check if we're done with iterations
;;;705              const f32 minChange = UpdatePreviousCorners(transformation, previousCorners, scratch);
;;;706    
;;;707              if(minChange < convergenceTolerance) {
;;;708                verify_converged = true;
;;;709                return RESULT_OK;
;;;710              }
;;;711            } // for(s32 iteration=0; iteration<maxIterations; iteration++)
;;;712    
;;;713            return RESULT_OK;
;;;714          } // Result LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Affine()
00050e  bf1f              ITTTT    NE
000510  b05f              ADDNE    sp,sp,#0x17c
000512  ecbd8b10          VPOPNE   {d8-d15}
000516  b006              ADDNE    sp,sp,#0x18
000518  e8bd8ff0          POPNE    {r4-r11,pc}
00051c  f89d0000          LDRB     r0,[sp,#0]            ;693
000520  bb70              CBNZ     r0,|L4.1408|
000522  a84a              ADD      r0,sp,#0x128          ;700
000524  997f              LDR      r1,[sp,#0x1fc]        ;700
000526  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00052a  4602              MOV      r2,r0                 ;700
00052c  f44f63c0          MOV      r3,#0x600             ;700
000530  eeb00a6b          VMOV.F32 s0,s23                ;700
000534  a938              ADD      r1,sp,#0xe0           ;700
000536  f1060018          ADD      r0,r6,#0x18           ;700
00053a  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
00053e  a84a              ADD      r0,sp,#0x128          ;705
000540  997f              LDR      r1,[sp,#0x1fc]        ;705
000542  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000546  4602              MOV      r2,r0                 ;705
000548  a926              ADD      r1,sp,#0x98           ;705
00054a  f1060018          ADD      r0,r6,#0x18           ;705
00054e  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
000552  eddd0a6f          VLDR     s1,[sp,#0x1bc]        ;707
000556  eeb40ae0          VCMPE.F32 s0,s1                 ;707
00055a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;707
00055e  d209              BCS      |L4.1396|
000560  997e              LDR      r1,[sp,#0x1f8]        ;708
000562  2001              MOVS     r0,#1                 ;708
000564  7008              STRB     r0,[r1,#0]            ;708
000566  2000              MOVS     r0,#0                 ;709
                  |L4.1384|
000568  b05f              ADD      sp,sp,#0x17c
00056a  ecbd8b10          VPOP     {d8-d15}
00056e  b006              ADD      sp,sp,#0x18
000570  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.1396|
000574  9873              LDR      r0,[sp,#0x1cc]        ;571
000576  f10a0a01          ADD      r10,r10,#1            ;571
00057a  4582              CMP      r10,r0                ;571
00057c  f6ffae17          BLT      |L4.430|
                  |L4.1408|
000580  2000              MOVS     r0,#0                 ;713
000582  e7f1              B        |L4.1384|
;;;715    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Projective(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
;;;715    
;;;716          Result LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Projective(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;717          {
000004  461f              MOV      r7,r3
000006  ed2d0b02          VPUSH    {d0}
00000a  4688              MOV      r8,r1
00000c  4606              MOV      r6,r0
00000e  ed2d8b10          VPUSH    {d8-d15}
000012  b0ff              SUB      sp,sp,#0x1fc
;;;718            // This method is heavily based on Interp2_Projective
;;;719            // The call would be like: Interp2_Projective<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;720    
;;;721            Result lastResult;
;;;722    
;;;723            Array<f32> AWAt(8, 8, scratch);
000014  2300              MOVS     r3,#0
000016  461a              MOV      r2,r3
000018  2101              MOVS     r1,#1
00001a  a87d              ADD      r0,sp,#0x1f4
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000020  6800              LDR      r0,[r0,#0]
000022  9000              STR      r0,[sp,#0]
000024  2208              MOVS     r2,#8
000026  4611              MOV      r1,r2
000028  a860              ADD      r0,sp,#0x180
00002a  9b9f              LDR      r3,[sp,#0x27c]
00002c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;724            Array<f32> b(1, 8, scratch);
000030  2300              MOVS     r3,#0
000032  461a              MOV      r2,r3
000034  2101              MOVS     r1,#1
000036  a87c              ADD      r0,sp,#0x1f0
000038  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00003c  6800              LDR      r0,[r0,#0]
00003e  9000              STR      r0,[sp,#0]
000040  2208              MOVS     r2,#8
000042  2101              MOVS     r1,#1
000044  a865              ADD      r0,sp,#0x194
000046  9b9f              LDR      r3,[sp,#0x27c]
000048  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;725    
;;;726            // These addresses should be known at compile time, so should be faster
;;;727            f32 AWAt_raw[8][8];
;;;728            f32 b_raw[8];
;;;729    
;;;730            verify_converged = false;
00004c  999e              LDR      r1,[sp,#0x278]
00004e  2000              MOVS     r0,#0
000050  7008              STRB     r0,[r1,#0]
;;;731    
;;;732            const s32 nextImageHeight = nextImage.get_size(0);
000052  4601              MOV      r1,r0
000054  4640              MOV      r0,r8
000056  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00005a  ee090a10          VMOV     s18,r0
;;;733            const s32 nextImageWidth = nextImage.get_size(1);
00005e  2101              MOVS     r1,#1
000060  4640              MOV      r0,r8
000062  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000066  4681              MOV      r9,r0
;;;734    
;;;735            const f32 scale = static_cast<f32>(1 << whichScale);
000068  2001              MOVS     r0,#1
00006a  40b8              LSLS     r0,r0,r7
00006c  ee000a10          VMOV     s0,r0
;;;736    
;;;737            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
000070  f44f70a0          MOV      r0,#0x140
000074  fb90f0f9          SDIV     r0,r0,r9
;;;738            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
000078  ee000a90          VMOV     s1,r0
00007c  eeb80ac0          VCVT.F32.S32 s0,s0                 ;735
000080  eef8bae0          VCVT.F32.S32 s23,s1
;;;739    
;;;740            const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
;;;741            const f32 scaleOverFiveTen = scale / (2.0f*255.0f);
000084  eddf0afe          VLDR     s1,|L5.1152|
;;;742    
;;;743            //const Point<f32>& centerOffset = this->transformation.get_centerOffset();
;;;744            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
000088  f1060118          ADD      r1,r6,#0x18
00008c  a872              ADD      r0,sp,#0x1c8
00008e  ee80ca20          VDIV.F32 s24,s0,s1             ;741
000092  eeb00a6b          VMOV.F32 s0,s23
000096  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;745    
;;;746            // Initialize with some very extreme coordinates
;;;747            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
00009a  2300              MOVS     r3,#0
00009c  461a              MOV      r2,r3
00009e  2101              MOVS     r1,#1
0000a0  a87c              ADD      r0,sp,#0x1f0
0000a2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000a6  6803              LDR      r3,[r0,#0]
0000a8  2102              MOVS     r1,#2
0000aa  a842              ADD      r0,sp,#0x108
0000ac  9a9f              LDR      r2,[sp,#0x27c]
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;748    
;;;749            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
0000b2  2400              MOVS     r4,#0
;;;750              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
0000b4  ed9f8af3          VLDR     s16,|L5.1156|
                  |L5.184|
0000b8  984e              LDR      r0,[sp,#0x138]
0000ba  ed8d8a00          VSTR     s16,[sp,#0]
0000be  ed8d8a01          VSTR     s16,[sp,#4]
0000c2  ed8d8a6a          VSTR     s16,[sp,#0x1a8]
0000c6  ed8d8a6b          VSTR     s16,[sp,#0x1ac]
0000ca  ed8d8a6c          VSTR     s16,[sp,#0x1b0]
0000ce  ed8d8a6d          VSTR     s16,[sp,#0x1b4]
0000d2  eb001544          ADD      r5,r0,r4,LSL #5
0000d6  ed8d8a6e          VSTR     s16,[sp,#0x1b8]
0000da  a858              ADD      r0,sp,#0x160
0000dc  ed8d8a6f          VSTR     s16,[sp,#0x1bc]
0000e0  2304              MOVS     r3,#4
0000e2  2208              MOVS     r2,#8
0000e4  49e8              LDR      r1,|L5.1160|
0000e6  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0000ea  ed9d0a00          VLDR     s0,[sp,#0]
0000ee  4603              MOV      r3,r0
0000f0  ed800a00          VSTR     s0,[r0,#0]
0000f4  ed9d0a01          VLDR     s0,[sp,#4]
0000f8  ed800a01          VSTR     s0,[r0,#4]
0000fc  3008              ADDS     r0,r0,#8
0000fe  ed9d0a6a          VLDR     s0,[sp,#0x1a8]
000102  ed800a00          VSTR     s0,[r0,#0]
000106  ed9d0a6b          VLDR     s0,[sp,#0x1ac]
00010a  ed800a01          VSTR     s0,[r0,#4]
00010e  ed9d0a6c          VLDR     s0,[sp,#0x1b0]
000112  2000              MOVS     r0,#0
000114  ed830a04          VSTR     s0,[r3,#0x10]
000118  ed9d0a6d          VLDR     s0,[sp,#0x1b4]
00011c  ed830a05          VSTR     s0,[r3,#0x14]
000120  ed9d0a6e          VLDR     s0,[sp,#0x1b8]
000124  ed830a06          VSTR     s0,[r3,#0x18]
000128  ed9d0a6f          VLDR     s0,[sp,#0x1bc]
00012c  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L5.304|
000130  eb0301c0          ADD      r1,r3,r0,LSL #3
000134  eb0502c0          ADD      r2,r5,r0,LSL #3
000138  ed910a00          VLDR     s0,[r1,#0]
00013c  1c40              ADDS     r0,r0,#1
00013e  ed820a00          VSTR     s0,[r2,#0]
000142  ed910a01          VLDR     s0,[r1,#4]
000146  2804              CMP      r0,#4
000148  ed820a01          VSTR     s0,[r2,#4]
00014c  dbf0              BLT      |L5.304|
00014e  1c64              ADDS     r4,r4,#1              ;749
000150  2c02              CMP      r4,#2                 ;749
000152  dbb1              BLT      |L5.184|
;;;751            }
;;;752    
;;;753            const f32 xyReferenceMin = 0.0f;
;;;754            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
000154  ee009a10          VMOV     s0,r9
000158  eef7ea00          VMOV.F32 s29,#1.00000000
00015c  eb070187          ADD      r1,r7,r7,LSL #2
000160  eeb80ac0          VCVT.F32.S32 s0,s0
000164  eb0101c7          ADD      r1,r1,r7,LSL #3
000168  2f00              CMP      r7,#0
00016a  ee300a6e          VSUB.F32 s0,s0,s29
00016e  ed8d0a7b          VSTR     s0,[sp,#0x1ec]
;;;755            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
000172  eeb80ac9          VCVT.F32.S32 s0,s18
000176  ee300a6e          VSUB.F32 s0,s0,s29
00017a  ed8d0a7a          VSTR     s0,[sp,#0x1e8]
00017e  f8d600a4          LDR      r0,[r6,#0xa4]
000182  eb000081          ADD      r0,r0,r1,LSL #2
;;;756    
;;;757            const TemplateSample * restrict pTemplateSamplePyramid = this->templateSamplePyramid[whichScale].Pointer(0);
000186  6b01              LDR      r1,[r0,#0x30]
000188  9179              STR      r1,[sp,#0x1e4]
00018a  bfa5              ITTET    GE
00018c  6871              LDRGE    r1,[r6,#4]
00018e  42b9              CMPGE    r1,r7
000190  f04f0900          MOVLT    r9,#0
000194  f8d0900c          LDRGE    r9,[r0,#0xc]
;;;758    
;;;759            const s32 numTemplateSamples = this->get_numTemplatePixels(whichScale);
;;;760    
;;;761            for(s32 iteration=0; iteration<maxIterations; iteration++) {
000198  f04f0a00          MOV      r10,#0
00019c  9893              LDR      r0,[sp,#0x24c]
00019e  2800              CMP      r0,#0
0001a0  f34081fc          BLE.W    |L5.1436|
0001a4  eeb6ba00          VMOV.F32 s22,#0.50000000       ;759
;;;762              const Array<f32> &homography = this->transformation.get_homography();
;;;763              const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
;;;764              const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
;;;765              const f32 h20 = homography[2][0] * initialImageScaleF32; const f32 h21 = homography[2][1] * initialImageScaleF32; //const f32 h22 = 1.0f;
;;;766    
;;;767              //AWAt.SetZero();
;;;768              //b.SetZero();
;;;769    
;;;770              for(s32 ia=0; ia<8; ia++) {
;;;771                for(s32 ja=0; ja<8; ja++) {
;;;772                  AWAt_raw[ia][ja] = 0;
;;;773                }
;;;774                b_raw[ia] = 0;
;;;775              }
;;;776    
;;;777              s32 numInBounds = 0;
;;;778    
;;;779              // TODO: make the x and y limits from 1 to end-2
;;;780    
;;;781              for(s32 iSample=0; iSample<numTemplateSamples; iSample++) {
;;;782                const TemplateSample curSample = pTemplateSamplePyramid[iSample];
;;;783                const f32 yOriginal = curSample.yCoordinate;
;;;784                const f32 xOriginal = curSample.xCoordinate;
;;;785    
;;;786                // TODO: These two could be strength reduced
;;;787                const f32 xTransformedRaw = h00*xOriginal + h01*yOriginal + h02;
;;;788                const f32 yTransformedRaw = h10*xOriginal + h11*yOriginal + h12;
;;;789    
;;;790                const f32 normalization = h20*xOriginal + h21*yOriginal + 1.0f;
;;;791    
;;;792                const f32 xTransformed = (xTransformedRaw / normalization) + centerOffsetScaled.x;
;;;793                const f32 yTransformed = (yTransformedRaw / normalization) + centerOffsetScaled.y;
;;;794    
;;;795                const f32 x0 = FLT_FLOOR(xTransformed);
;;;796                const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
;;;797    
;;;798                const f32 y0 = FLT_FLOOR(yTransformed);
;;;799                const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
;;;800    
;;;801                // If out of bounds, continue
;;;802                if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;803                  continue;
;;;804                }
;;;805    
;;;806                numInBounds++;
;;;807    
;;;808                const f32 alphaX = xTransformed - x0;
;;;809                const f32 alphaXinverse = 1 - alphaX;
;;;810    
;;;811                const f32 alphaY = yTransformed - y0;
;;;812                const f32 alphaYinverse = 1.0f - alphaY;
;;;813    
;;;814                const s32 y0S32 = Round<s32>(y0);
;;;815                const s32 y1S32 = Round<s32>(y1);
;;;816                const s32 x0S32 = Round<s32>(x0);
;;;817    
;;;818                const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;819                const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;820    
;;;821                const f32 pixelTL = *pReference_y0;
;;;822                const f32 pixelTR = *(pReference_y0+1);
;;;823                const f32 pixelBL = *pReference_y1;
;;;824                const f32 pixelBR = *(pReference_y1+1);
;;;825    
;;;826                const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;827    
;;;828                //const u8 interpolatedPixel = static_cast<u8>(Round(interpolatedPixelF32));
;;;829    
;;;830                // This block is the non-interpolation part of the per-sample algorithm
;;;831                {
;;;832                  const f32 templatePixelValue = curSample.grayvalue;
;;;833                  const f32 xGradientValue = scaleOverFiveTen * curSample.xGradient;
;;;834                  const f32 yGradientValue = scaleOverFiveTen * curSample.yGradient;
;;;835    
;;;836                  const f32 tGradientValue = oneOverTwoFiftyFive * (interpolatedPixelF32 - templatePixelValue);
;;;837    
;;;838                  //CoreTechPrint("%f ", xOriginal);
;;;839    
;;;840                  const f32 values[8] = {
0001a8  af58              ADD      r7,sp,#0x160
0001aa  f10d0b08          ADD      r11,sp,#8             ;727
                  |L5.430|
0001ae  f1060018          ADD      r0,r6,#0x18           ;762
0001b2  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
0001b6  6882              LDR      r2,[r0,#8]            ;762
0001b8  6901              LDR      r1,[r0,#0x10]         ;762
0001ba  2300              MOVS     r3,#0                 ;763
0001bc  fb031002          MLA      r0,r3,r2,r1           ;763
0001c0  ed900a00          VLDR     s0,[r0,#0]            ;763
0001c4  ed8d0a78          VSTR     s0,[sp,#0x1e0]        ;763
0001c8  ed900a01          VLDR     s0,[r0,#4]            ;763
0001cc  ed8d0a77          VSTR     s0,[sp,#0x1dc]        ;763
0001d0  edd00a02          VLDR     s1,[r0,#8]            ;763
0001d4  2001              MOVS     r0,#1                 ;764
0001d6  fb001002          MLA      r0,r0,r2,r1           ;764
0001da  ee800aab          VDIV.F32 s0,s1,s23             ;763
0001de  ed8d0a76          VSTR     s0,[sp,#0x1d8]        ;763
0001e2  ed900a00          VLDR     s0,[r0,#0]            ;764
0001e6  ed8d0a75          VSTR     s0,[sp,#0x1d4]        ;764
0001ea  ed900a01          VLDR     s0,[r0,#4]            ;764
0001ee  ed8d0a74          VSTR     s0,[sp,#0x1d0]        ;764
0001f2  edd00a02          VLDR     s1,[r0,#8]            ;764
0001f6  2002              MOVS     r0,#2                 ;765
0001f8  fb001002          MLA      r0,r0,r2,r1           ;765
0001fc  ee800aab          VDIV.F32 s0,s1,s23             ;764
000200  2100              MOVS     r1,#0                 ;770
000202  ed8d0a71          VSTR     s0,[sp,#0x1c4]        ;764
000206  ed900a00          VLDR     s0,[r0,#0]            ;765
00020a  ee200a2b          VMUL.F32 s0,s0,s23             ;765
00020e  ed8d0a4f          VSTR     s0,[sp,#0x13c]        ;765
000212  ed900a01          VLDR     s0,[r0,#4]            ;765
000216  ee200a2b          VMUL.F32 s0,s0,s23             ;765
00021a  ed8d0a01          VSTR     s0,[sp,#4]            ;765
00021e  ed9f0a9b          VLDR     s0,|L5.1164|
000222  ab50              ADD      r3,sp,#0x140          ;728
                  |L5.548|
000224  2000              MOVS     r0,#0                 ;771
000226  eb0b1241          ADD      r2,r11,r1,LSL #5      ;772
                  |L5.554|
00022a  eb020c80          ADD      r12,r2,r0,LSL #2      ;772
00022e  1c40              ADDS     r0,r0,#1              ;771
000230  ed8c0a00          VSTR     s0,[r12,#0]           ;772
000234  2808              CMP      r0,#8                 ;771
000236  dbf8              BLT      |L5.554|
000238  eb030081          ADD      r0,r3,r1,LSL #2       ;774
00023c  1c49              ADDS     r1,r1,#1              ;770
00023e  ed800a00          VSTR     s0,[r0,#0]            ;774
000242  2908              CMP      r1,#8                 ;770
000244  dbee              BLT      |L5.548|
000246  2500              MOVS     r5,#0                 ;777
000248  462c              MOV      r4,r5                 ;781
00024a  f1b90f00          CMP      r9,#0                 ;781
00024e  bfc4              ITT      GT                    ;792
000250  edddfa72          VLDRGT   s31,[sp,#0x1c8]       ;792
000254  ed9dfa73          VLDRGT   s30,[sp,#0x1cc]       ;793
000258  f34081a0          BLE.W    |L5.1436|
                  |L5.604|
00025c  9879              LDR      r0,[sp,#0x1e4]        ;782
00025e  eb040184          ADD      r1,r4,r4,LSL #2       ;782
000262  eb000081          ADD      r0,r0,r1,LSL #2       ;782
000266  ed9d0a78          VLDR     s0,[sp,#0x1e0]        ;787
00026a  ed908a00          VLDR     s16,[r0,#0]           ;782
00026e  edd08a01          VLDR     s17,[r0,#4]           ;782
000272  eddd0a77          VLDR     s1,[sp,#0x1dc]        ;787
000276  ee200a08          VMUL.F32 s0,s0,s16             ;787
00027a  eddd1a01          VLDR     s3,[sp,#4]            ;790
00027e  edd0da02          VLDR     s27,[r0,#8]           ;782
000282  ed90ea03          VLDR     s28,[r0,#0xc]         ;782
000286  ee000aa8          VMLA.F32 s0,s1,s17             ;787
00028a  eddd0a76          VLDR     s1,[sp,#0x1d8]        ;787
00028e  edd0ca04          VLDR     s25,[r0,#0x10]        ;782
000292  ee301a20          VADD.F32 s2,s0,s1              ;787
000296  ed9d0a75          VLDR     s0,[sp,#0x1d4]        ;788
00029a  eddd0a74          VLDR     s1,[sp,#0x1d0]        ;788
00029e  ee200a08          VMUL.F32 s0,s0,s16             ;788
0002a2  ee000aa8          VMLA.F32 s0,s1,s17             ;788
0002a6  eddd0a71          VLDR     s1,[sp,#0x1c4]        ;788
0002aa  ee700a20          VADD.F32 s1,s0,s1              ;788
0002ae  ed9d0a4f          VLDR     s0,[sp,#0x13c]        ;790
0002b2  ee200a08          VMUL.F32 s0,s0,s16             ;790
0002b6  ee010aa8          VMLA.F32 s0,s3,s17             ;790
0002ba  ee300a2e          VADD.F32 s0,s0,s29             ;790
0002be  eec11a00          VDIV.F32 s3,s2,s0              ;792
0002c2  ee801a80          VDIV.F32 s2,s1,s0              ;793
0002c6  ee71aaaf          VADD.F32 s21,s3,s31            ;792
0002ca  ee31aa0f          VADD.F32 s20,s2,s30            ;793
0002ce  ed9f9a70          VLDR     s18,|L5.1168|
0002d2  ee3a0a89          VADD.F32 s0,s21,s18            ;795
0002d6  f7fffffe          BL       __hardfp_floorf
0002da  eef09a40          VMOV.F32 s19,s0                ;795
0002de  eeb00a6a          VMOV.F32 s0,s21                ;796
0002e2  f7fffffe          BL       __hardfp_ceilf
0002e6  eeb0da40          VMOV.F32 s26,s0                ;796
0002ea  ee3a0a09          VADD.F32 s0,s20,s18            ;798
0002ee  f7fffffe          BL       __hardfp_floorf
0002f2  eeb09a40          VMOV.F32 s18,s0                ;798
0002f6  eeb00a4a          VMOV.F32 s0,s20                ;799
0002fa  f7fffffe          BL       __hardfp_ceilf
0002fe  eef59ac0          VCMPE.F32 s19,#0.0              ;802
000302  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;802
000306  d37d              BCC      |L5.1028|
000308  eddd0a7b          VLDR     s1,[sp,#0x1ec]        ;802
00030c  eeb4dae0          VCMPE.F32 s26,s1                ;802
000310  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;802
000314  dc76              BGT      |L5.1028|
000316  eeb59ac0          VCMPE.F32 s18,#0.0              ;802
00031a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;802
00031e  d371              BCC      |L5.1028|
000320  eddd0a7a          VLDR     s1,[sp,#0x1e8]        ;802
000324  eeb40ae0          VCMPE.F32 s0,s1                 ;802
000328  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;802
00032c  dc6a              BGT      |L5.1028|
00032e  ee7a0ae9          VSUB.F32 s1,s21,s19            ;808
000332  ee7a1a49          VSUB.F32 s3,s20,s18            ;811
000336  eeb59ac0          VCMPE.F32 s18,#0.0              ;811
00033a  1c6d              ADDS     r5,r5,#1              ;806
00033c  ee3e1ae0          VSUB.F32 s2,s29,s1             ;809
000340  ee7e2ae1          VSUB.F32 s5,s29,s3             ;812
000344  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;812
000348  bfcc              ITE      GT                    ;812
00034a  ee392a0b          VADDGT.F32 s4,s18,s22            ;812
00034e  ee392a4b          VSUBLE.F32 s4,s18,s22            ;812
000352  eebd2ac2          VCVT.S32.F32 s4,s4                 ;812
000356  eeb50ac0          VCMPE.F32 s0,#0.0               ;812
00035a  ee123a10          VMOV     r3,s4                 ;812
00035e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;812
000362  bfcc              ITE      GT                    ;812
000364  ee300a0b          VADDGT.F32 s0,s0,s22             ;812
000368  ee300a4b          VSUBLE.F32 s0,s0,s22             ;812
00036c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;812
000370  eef59ac0          VCMPE.F32 s19,#0.0              ;812
000374  ee10ca10          VMOV     r12,s0                ;812
000378  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;812
00037c  bfcc              ITE      GT                    ;812
00037e  ee390a8b          VADDGT.F32 s0,s19,s22            ;812
000382  ee390acb          VSUBLE.F32 s0,s19,s22            ;812
000386  eebd0ac0          VCVT.S32.F32 s0,s0                 ;812
00038a  f8d82008          LDR      r2,[r8,#8]            ;812
00038e  f8d81010          LDR      r1,[r8,#0x10]         ;812
000392  ee100a10          VMOV     r0,s0                 ;812
000396  fb031302          MLA      r3,r3,r2,r1           ;812
00039a  fb0c1102          MLA      r1,r12,r2,r1          ;812
00039e  4403              ADD      r3,r3,r0              ;812
0003a0  4408              ADD      r0,r0,r1              ;812
0003a2  7819              LDRB     r1,[r3,#0]            ;821
0003a4  ee001a10          VMOV     s0,r1                 ;821
0003a8  7859              LDRB     r1,[r3,#1]            ;822
0003aa  eeb82a40          VCVT.F32.U32 s4,s0                 ;821
0003ae  ee001a10          VMOV     s0,r1                 ;822
0003b2  7801              LDRB     r1,[r0,#0]            ;823
0003b4  7840              LDRB     r0,[r0,#1]            ;824
0003b6  eeb83a40          VCVT.F32.U32 s6,s0                 ;822
0003ba  ee001a10          VMOV     s0,r1                 ;823
0003be  ee212a02          VMUL.F32 s4,s2,s4              ;823
0003c2  ee030a90          VMOV     s7,r0                 ;824
0003c6  eeb80a40          VCVT.F32.U32 s0,s0                 ;823
0003ca  eef83a63          VCVT.F32.U32 s7,s7                 ;824
0003ce  ee002a83          VMLA.F32 s4,s1,s6              ;824
0003d2  ee210a00          VMUL.F32 s0,s2,s0              ;824
0003d6  ee000aa3          VMLA.F32 s0,s1,s7              ;824
0003da  ee221a82          VMUL.F32 s2,s5,s4              ;824
0003de  ee6e0a0c          VMUL.F32 s1,s28,s24            ;834
0003e2  ee011a80          VMLA.F32 s2,s3,s0              ;834
0003e6  ee2d0a8c          VMUL.F32 s0,s27,s24            ;833
0003ea  ee711a6c          VSUB.F32 s3,s2,s25             ;836
0003ee  ed9f1a29          VLDR     s2,|L5.1172|
0003f2  ee611a81          VMUL.F32 s3,s3,s2              ;836
0003f6  ee281a00          VMUL.F32 s2,s16,s0
0003fa  ed8d1a58          VSTR     s2,[sp,#0x160]
0003fe  ee281a80          VMUL.F32 s2,s17,s0
000402  e000              B        |L5.1030|
                  |L5.1028|
000404  e058              B        |L5.1208|
                  |L5.1030|
000406  ed8d1a59          VSTR     s2,[sp,#0x164]
00040a  ee281a20          VMUL.F32 s2,s16,s1
00040e  ed8d0a5a          VSTR     s0,[sp,#0x168]
000412  ee282a28          VMUL.F32 s4,s16,s17
000416  ed8d1a5b          VSTR     s2,[sp,#0x16c]
00041a  ee281aa0          VMUL.F32 s2,s17,s1
;;;841                    xOriginal * xGradientValue,
;;;842                    yOriginal * xGradientValue,
;;;843                    xGradientValue,
;;;844                    xOriginal * yGradientValue,
;;;845                    yOriginal * yGradientValue,
;;;846                    yGradientValue,
;;;847                    -xOriginal*xOriginal*xGradientValue - xOriginal*yOriginal*yGradientValue,
;;;848                    -xOriginal*yOriginal*xGradientValue - yOriginal*yOriginal*yGradientValue};
;;;849    
;;;850                  for(s32 ia=0; ia<8; ia++) {
00041e  2100              MOVS     r1,#0
000420  f50d7ea0          ADD      lr,sp,#0x140          ;728
000424  ed8d1a5c          VSTR     s2,[sp,#0x170]        ;840
000428  ee281a48          VNMUL.F32 s2,s16,s16            ;840
00042c  edcd0a5d          VSTR     s1,[sp,#0x174]        ;840
000430  ee211a00          VMUL.F32 s2,s2,s0              ;840
000434  ee021a60          VMLS.F32 s2,s4,s1              ;840
000438  ed8d1a5e          VSTR     s2,[sp,#0x178]        ;840
00043c  ee281a68          VNMUL.F32 s2,s16,s17            ;840
000440  ee210a00          VMUL.F32 s0,s2,s0              ;840
000444  ee281aa8          VMUL.F32 s2,s17,s17            ;840
000448  ee010a60          VMLS.F32 s0,s2,s1              ;840
00044c  ed8d0a5f          VSTR     s0,[sp,#0x17c]        ;840
                  |L5.1104|
;;;851                    for(s32 ja=ia; ja<8; ja++) {
000450  4608              MOV      r0,r1
000452  2908              CMP      r1,#8
000454  da21              BGE      |L5.1178|
;;;852                      AWAt_raw[ia][ja] += values[ia] * values[ja];
000456  eb070281          ADD      r2,r7,r1,LSL #2
00045a  eb0b1c41          ADD      r12,r11,r1,LSL #5
00045e  ed920a00          VLDR     s0,[r2,#0]
                  |L5.1122|
000462  eb0c0280          ADD      r2,r12,r0,LSL #2
000466  eb070380          ADD      r3,r7,r0,LSL #2
00046a  edd20a00          VLDR     s1,[r2,#0]
00046e  ed931a00          VLDR     s2,[r3,#0]
000472  1c40              ADDS     r0,r0,#1              ;851
000474  2808              CMP      r0,#8                 ;851
000476  ee400a01          VMLA.F32 s1,s0,s2
00047a  edc20a00          VSTR     s1,[r2,#0]
00047e  e00b              B        |L5.1176|
                  |L5.1152|
000480  43ff0000          DCFS     0x43ff0000 ; 510
                  |L5.1156|
000484  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L5.1160|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L5.1164|
00048c  00000000          DCFS     0x00000000 ; 0
                  |L5.1168|
000490  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L5.1172|
000494  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627
                  |L5.1176|
000498  dbe3              BLT      |L5.1122|
                  |L5.1178|
;;;853                    }
;;;854                    b_raw[ia] += values[ia] * tGradientValue;
00049a  eb0e0081          ADD      r0,lr,r1,LSL #2
00049e  eb070281          ADD      r2,r7,r1,LSL #2
0004a2  ed900a00          VLDR     s0,[r0,#0]
0004a6  edd20a00          VLDR     s1,[r2,#0]
0004aa  1c49              ADDS     r1,r1,#1              ;850
0004ac  2908              CMP      r1,#8                 ;850
0004ae  ee000aa1          VMLA.F32 s0,s1,s3
0004b2  ed800a00          VSTR     s0,[r0,#0]
0004b6  dbcb              BLT      |L5.1104|
                  |L5.1208|
0004b8  1c64              ADDS     r4,r4,#1              ;781
0004ba  454c              CMP      r4,r9                 ;781
0004bc  f6ffaece          BLT      |L5.604|
;;;855                  }
;;;856                }
;;;857              } // for(s32 iSample=0; iSample<numTemplateSamples; iSample++)
;;;858    
;;;859              if(numInBounds < 16) {
0004c0  2d10              CMP      r5,#0x10
;;;860                AnkiWarn("LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Projective", "Template drifted too far out of image.");
;;;861                return RESULT_OK;
;;;862              }
;;;863    
;;;864              for(s32 ia=0; ia<8; ia++) {
0004c2  bfa4              ITT      GE
0004c4  2100              MOVGE    r1,#0
0004c6  ac50              ADDGE    r4,sp,#0x140          ;728
0004c8  db68              BLT      |L5.1436|
                  |L5.1226|
;;;865                for(s32 ja=ia; ja<8; ja++) {
0004ca  4608              MOV      r0,r1
0004cc  2908              CMP      r1,#8
;;;866                  AWAt[ia][ja] = AWAt_raw[ia][ja];
0004ce  bfb8              IT       LT
0004d0  eb0b1c41          ADDLT    r12,r11,r1,LSL #5
0004d4  da0e              BGE      |L5.1268|
                  |L5.1238|
0004d6  9b62              LDR      r3,[sp,#0x188]        ;865
0004d8  9a64              LDR      r2,[sp,#0x190]        ;865
0004da  fb012203          MLA      r2,r1,r3,r2           ;865
0004de  eb0c0380          ADD      r3,r12,r0,LSL #2
0004e2  eb020280          ADD      r2,r2,r0,LSL #2
0004e6  ed930a00          VLDR     s0,[r3,#0]
0004ea  1c40              ADDS     r0,r0,#1              ;865
0004ec  ed820a00          VSTR     s0,[r2,#0]
0004f0  2808              CMP      r0,#8                 ;865
0004f2  dbf0              BLT      |L5.1238|
                  |L5.1268|
0004f4  9b67              LDR      r3,[sp,#0x19c]        ;865
0004f6  9a69              LDR      r2,[sp,#0x1a4]        ;865
;;;867                }
;;;868                b[0][ia] = b_raw[ia];
0004f8  2000              MOVS     r0,#0
0004fa  fb002003          MLA      r0,r0,r3,r2
0004fe  eb040281          ADD      r2,r4,r1,LSL #2
000502  eb000081          ADD      r0,r0,r1,LSL #2
000506  ed920a00          VLDR     s0,[r2,#0]
00050a  1c49              ADDS     r1,r1,#1              ;864
00050c  ed800a00          VSTR     s0,[r0,#0]
000510  2908              CMP      r1,#8                 ;864
000512  dbda              BLT      |L5.1226|
;;;869              }
;;;870    
;;;871              Matrix::MakeSymmetric(AWAt, false);
000514  2100              MOVS     r1,#0
000516  a860              ADD      r0,sp,#0x180
000518  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)
;;;872    
;;;873              //AWAt.Print("New AWAt");
;;;874              //b.Print("New b");
;;;875    
;;;876              bool numericalFailure;
;;;877    
;;;878              if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK)
00051c  466b              MOV      r3,sp
00051e  2200              MOVS     r2,#0
000520  a965              ADD      r1,sp,#0x194
000522  a860              ADD      r0,sp,#0x180
000524  f7fffffe          BL       _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
000528  2800              CMP      r0,#0
;;;879                return lastResult;
;;;880    
;;;881              if(numericalFailure){
;;;882                AnkiWarn("LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Projective", "numericalFailure");
;;;883                return RESULT_OK;
;;;884              }
;;;885    
;;;886              //b.Print("New update");
;;;887    
;;;888              this->transformation.Update(b, initialImageScaleF32, scratch, Transformations::TRANSFORM_PROJECTIVE);
;;;889    
;;;890              //this->transformation.get_homography().Print("new transformation");
;;;891    
;;;892              // Check if we're done with iterations
;;;893              // Check if we're done with iterations
;;;894              const f32 minChange = UpdatePreviousCorners(transformation, previousCorners, scratch);
;;;895    
;;;896              if(minChange < convergenceTolerance) {
;;;897                verify_converged = true;
;;;898                return RESULT_OK;
;;;899              }
;;;900            } // for(s32 iteration=0; iteration<maxIterations; iteration++)
;;;901    
;;;902            return RESULT_OK;
;;;903          } // Result LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Projective()
00052a  bf1f              ITTTT    NE
00052c  b07f              ADDNE    sp,sp,#0x1fc
00052e  ecbd8b10          VPOPNE   {d8-d15}
000532  b006              ADDNE    sp,sp,#0x18
000534  e8bd8ff0          POPNE    {r4-r11,pc}
000538  f89d0000          LDRB     r0,[sp,#0]            ;881
00053c  bb70              CBNZ     r0,|L5.1436|
00053e  a86a              ADD      r0,sp,#0x1a8          ;888
000540  999f              LDR      r1,[sp,#0x27c]        ;888
000542  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000546  4602              MOV      r2,r0                 ;888
000548  f44f6300          MOV      r3,#0x800             ;888
00054c  eeb00a6b          VMOV.F32 s0,s23                ;888
000550  a965              ADD      r1,sp,#0x194          ;888
000552  f1060018          ADD      r0,r6,#0x18           ;888
000556  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
00055a  a86a              ADD      r0,sp,#0x1a8          ;894
00055c  999f              LDR      r1,[sp,#0x27c]        ;894
00055e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000562  4602              MOV      r2,r0                 ;894
000564  a942              ADD      r1,sp,#0x108          ;894
000566  f1060018          ADD      r0,r6,#0x18           ;894
00056a  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
00056e  eddd0a8f          VLDR     s1,[sp,#0x23c]        ;896
000572  eeb40ae0          VCMPE.F32 s0,s1                 ;896
000576  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;896
00057a  d209              BCS      |L5.1424|
00057c  999e              LDR      r1,[sp,#0x278]        ;897
00057e  2001              MOVS     r0,#1                 ;897
000580  7008              STRB     r0,[r1,#0]            ;897
000582  2000              MOVS     r0,#0                 ;898
                  |L5.1412|
000584  b07f              ADD      sp,sp,#0x1fc
000586  ecbd8b10          VPOP     {d8-d15}
00058a  b006              ADD      sp,sp,#0x18
00058c  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.1424|
000590  9893              LDR      r0,[sp,#0x24c]        ;761
000592  f10a0a01          ADD      r10,r10,#1            ;761
000596  4582              CMP      r10,r0                ;761
000598  f6ffae09          BLT      |L5.430|
                  |L5.1436|
00059c  2000              MOVS     r0,#0                 ;902
00059e  e7f1              B        |L5.1412|
;;;904    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Translation(const Anki::Embedded::Array<unsigned char>&, int, int, float, bool&, Anki::Embedded::MemoryStack)
;;;359    
;;;360          Result LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Translation(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;361          {
000004  4606              MOV      r6,r0
000006  ed2d0b02          VPUSH    {d0}
;;;362            // This method is heavily based on Interp2_Projective
;;;363            // The call would be like: Interp2_Projective<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;364    
;;;365            Result lastResult;
;;;366    
;;;367            Array<f32> AWAt(2, 2, scratch);
00000a  2300              MOVS     r3,#0
00000c  461a              MOV      r2,r3
00000e  ed2d8b10          VPUSH    {d8-d15}              ;361
000012  b0af              SUB      sp,sp,#0xbc           ;361
000014  2101              MOVS     r1,#1
000016  a82d              ADD      r0,sp,#0xb4
000018  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00001c  6800              LDR      r0,[r0,#0]
00001e  9000              STR      r0,[sp,#0]
000020  2202              MOVS     r2,#2
000022  4611              MOV      r1,r2
000024  a802              ADD      r0,sp,#8
000026  9b4f              LDR      r3,[sp,#0x13c]
000028  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;368            Array<f32> b(1, 2, scratch);
00002c  2300              MOVS     r3,#0
00002e  461a              MOV      r2,r3
000030  2101              MOVS     r1,#1
000032  a82a              ADD      r0,sp,#0xa8
000034  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000038  6800              LDR      r0,[r0,#0]
00003a  9000              STR      r0,[sp,#0]
00003c  2202              MOVS     r2,#2
00003e  2101              MOVS     r1,#1
000040  a807              ADD      r0,sp,#0x1c
000042  9b4f              LDR      r3,[sp,#0x13c]
000044  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000048  9a04              LDR      r2,[sp,#0x10]
00004a  9906              LDR      r1,[sp,#0x18]
;;;369    
;;;370            f32 &AWAt00 = AWAt[0][0];
00004c  2000              MOVS     r0,#0
00004e  fb001802          MLA      r8,r0,r2,r1
;;;371            f32 &AWAt01 = AWAt[0][1];
;;;372            //f32 &AWAt10 = AWAt[1][0];
;;;373            f32 &AWAt11 = AWAt[1][1];
000052  2001              MOVS     r0,#1
000054  fb001002          MLA      r0,r0,r2,r1
000058  f1000a04          ADD      r10,r0,#4
00005c  9a09              LDR      r2,[sp,#0x24]
00005e  990b              LDR      r1,[sp,#0x2c]
;;;374    
;;;375            f32 &b0 = b[0][0];
000060  2000              MOVS     r0,#0
000062  fb001702          MLA      r7,r0,r2,r1
;;;376            f32 &b1 = b[0][1];
;;;377    
;;;378            verify_converged = false;
000066  994e              LDR      r1,[sp,#0x138]
000068  f1080b04          ADD      r11,r8,#4             ;371
00006c  f1070904          ADD      r9,r7,#4              ;376
000070  7008              STRB     r0,[r1,#0]
;;;379    
;;;380            const s32 nextImageHeight = nextImage.get_size(0);
000072  4601              MOV      r1,r0
000074  9842              LDR      r0,[sp,#0x108]
000076  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00007a  ee090a10          VMOV     s18,r0
;;;381            const s32 nextImageWidth = nextImage.get_size(1);
00007e  2101              MOVS     r1,#1
000080  9842              LDR      r0,[sp,#0x108]
000082  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;382    
;;;383            const f32 scale = static_cast<f32>(1 << whichScale);
000086  9019              STR      r0,[sp,#0x64]
000088  9844              LDR      r0,[sp,#0x110]
00008a  2101              MOVS     r1,#1
00008c  fa01f000          LSL      r0,r1,r0
000090  ee000a10          VMOV     s0,r0
;;;384    
;;;385            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
000094  9819              LDR      r0,[sp,#0x64]
000096  f44f71a0          MOV      r1,#0x140
00009a  fb91f0f0          SDIV     r0,r1,r0
;;;386            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
00009e  ee000a90          VMOV     s1,r0
0000a2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;383
0000a6  eef8aae0          VCVT.F32.S32 s21,s1
;;;387    
;;;388            const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
;;;389            const f32 scaleOverFiveTen = scale / (2.0f*255.0f);
0000aa  eddf0afc          VLDR     s1,|L6.1180|
;;;390    
;;;391            //const Point<f32>& centerOffset = this->transformation.get_centerOffset();
;;;392            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
0000ae  f1060118          ADD      r1,r6,#0x18
0000b2  a828              ADD      r0,sp,#0xa0
0000b4  ee80ba20          VDIV.F32 s22,s0,s1             ;389
0000b8  eeb00a6a          VMOV.F32 s0,s21
0000bc  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;393    
;;;394            // Initialize with some very extreme coordinates
;;;395            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
0000c0  2300              MOVS     r3,#0
0000c2  461a              MOV      r2,r3
0000c4  2101              MOVS     r1,#1
0000c6  a82a              ADD      r0,sp,#0xa8
0000c8  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0000cc  6803              LDR      r3,[r0,#0]
0000ce  2102              MOVS     r1,#2
0000d0  a80c              ADD      r0,sp,#0x30
0000d2  9a4f              LDR      r2,[sp,#0x13c]
0000d4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;396    
;;;397            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
0000d8  2400              MOVS     r4,#0
;;;398              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
0000da  ed9f8af1          VLDR     s16,|L6.1184|
                  |L6.222|
0000de  9818              LDR      r0,[sp,#0x60]
0000e0  ed8d8a00          VSTR     s16,[sp,#0]
0000e4  ed8d8a01          VSTR     s16,[sp,#4]
0000e8  ed8d8a22          VSTR     s16,[sp,#0x88]
0000ec  ed8d8a23          VSTR     s16,[sp,#0x8c]
0000f0  ed8d8a24          VSTR     s16,[sp,#0x90]
0000f4  ed8d8a25          VSTR     s16,[sp,#0x94]
0000f8  eb001544          ADD      r5,r0,r4,LSL #5
0000fc  ed8d8a26          VSTR     s16,[sp,#0x98]
000100  a81a              ADD      r0,sp,#0x68
000102  ed8d8a27          VSTR     s16,[sp,#0x9c]
000106  2304              MOVS     r3,#4
000108  2208              MOVS     r2,#8
00010a  49e6              LDR      r1,|L6.1188|
00010c  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000110  ed9d0a00          VLDR     s0,[sp,#0]
000114  4603              MOV      r3,r0
000116  ed800a00          VSTR     s0,[r0,#0]
00011a  ed9d0a01          VLDR     s0,[sp,#4]
00011e  ed800a01          VSTR     s0,[r0,#4]
000122  3008              ADDS     r0,r0,#8
000124  ed9d0a22          VLDR     s0,[sp,#0x88]
000128  ed800a00          VSTR     s0,[r0,#0]
00012c  ed9d0a23          VLDR     s0,[sp,#0x8c]
000130  ed800a01          VSTR     s0,[r0,#4]
000134  ed9d0a24          VLDR     s0,[sp,#0x90]
000138  2000              MOVS     r0,#0
00013a  ed830a04          VSTR     s0,[r3,#0x10]
00013e  ed9d0a25          VLDR     s0,[sp,#0x94]
000142  ed830a05          VSTR     s0,[r3,#0x14]
000146  ed9d0a26          VLDR     s0,[sp,#0x98]
00014a  ed830a06          VSTR     s0,[r3,#0x18]
00014e  ed9d0a27          VLDR     s0,[sp,#0x9c]
000152  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L6.342|
000156  eb0301c0          ADD      r1,r3,r0,LSL #3
00015a  eb0502c0          ADD      r2,r5,r0,LSL #3
00015e  ed910a00          VLDR     s0,[r1,#0]
000162  1c40              ADDS     r0,r0,#1
000164  ed820a00          VSTR     s0,[r2,#0]
000168  ed910a01          VLDR     s0,[r1,#4]
00016c  2804              CMP      r0,#4
00016e  ed820a01          VSTR     s0,[r2,#4]
000172  dbf0              BLT      |L6.342|
000174  1c64              ADDS     r4,r4,#1              ;397
000176  2c02              CMP      r4,#2                 ;397
000178  dbb1              BLT      |L6.222|
;;;399            }
;;;400    
;;;401            const f32 xyReferenceMin = 0.0f;
;;;402            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
00017a  9819              LDR      r0,[sp,#0x64]
00017c  eef7da00          VMOV.F32 s27,#1.00000000
000180  ee000a10          VMOV     s0,r0
000184  eeb80ac0          VCVT.F32.S32 s0,s0
000188  ee300a6d          VSUB.F32 s0,s0,s27
00018c  ed8d0a2c          VSTR     s0,[sp,#0xb0]
;;;403            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
000190  eeb80ac9          VCVT.F32.S32 s0,s18
000194  ee300a6d          VSUB.F32 s0,s0,s27
000198  ed8d0a2b          VSTR     s0,[sp,#0xac]
00019c  9844              LDR      r0,[sp,#0x110]
00019e  f8d610a4          LDR      r1,[r6,#0xa4]
0001a2  eb000280          ADD      r2,r0,r0,LSL #2
0001a6  eb0200c0          ADD      r0,r2,r0,LSL #3
0001aa  eb010180          ADD      r1,r1,r0,LSL #2
;;;404    
;;;405            const TemplateSample * restrict pTemplateSamplePyramid = this->templateSamplePyramid[whichScale].Pointer(0);
0001ae  6b08              LDR      r0,[r1,#0x30]
;;;406    
;;;407            const s32 numTemplateSamples = this->get_numTemplatePixels(whichScale);
0001b0  9027              STR      r0,[sp,#0x9c]
0001b2  9844              LDR      r0,[sp,#0x110]
0001b4  2800              CMP      r0,#0
0001b6  bfa5              ITTET    GE
0001b8  6872              LDRGE    r2,[r6,#4]
0001ba  4282              CMPGE    r2,r0
0001bc  2000              MOVLT    r0,#0
0001be  68c8              LDRGE    r0,[r1,#0xc]
;;;408    
;;;409            for(s32 iteration=0; iteration<maxIterations; iteration++) {
0001c0  9021              STR      r0,[sp,#0x84]
0001c2  2000              MOVS     r0,#0
0001c4  9020              STR      r0,[sp,#0x80]
0001c6  9843              LDR      r0,[sp,#0x10c]
0001c8  2800              CMP      r0,#0
0001ca  bfc8              IT       GT
0001cc  ed9faab6          VLDRGT   s20,|L6.1192|
0001d0  f34081be          BLE.W    |L6.1360|
                  |L6.468|
;;;410              const Array<f32> &homography = this->transformation.get_homography();
0001d4  f1060018          ADD      r0,r6,#0x18
0001d8  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
0001dc  6882              LDR      r2,[r0,#8]
0001de  6901              LDR      r1,[r0,#0x10]
;;;411              const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
0001e0  2300              MOVS     r3,#0
0001e2  fb031002          MLA      r0,r3,r2,r1
;;;412              const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
;;;413              const f32 h20 = homography[2][0] * initialImageScaleF32; const f32 h21 = homography[2][1] * initialImageScaleF32; //const f32 h22 = 1.0f;
;;;414    
;;;415              AWAt.SetZero();
0001e6  ac02              ADD      r4,sp,#8
0001e8  ed900a00          VLDR     s0,[r0,#0]            ;411
0001ec  ed8d0a26          VSTR     s0,[sp,#0x98]         ;411
0001f0  ed900a01          VLDR     s0,[r0,#4]            ;411
0001f4  ed8d0a25          VSTR     s0,[sp,#0x94]         ;411
0001f8  edd00a02          VLDR     s1,[r0,#8]            ;411
0001fc  2001              MOVS     r0,#1                 ;412
0001fe  fb001002          MLA      r0,r0,r2,r1           ;412
000202  ee800aaa          VDIV.F32 s0,s1,s21             ;411
000206  ed8d0a24          VSTR     s0,[sp,#0x90]         ;411
00020a  ed900a00          VLDR     s0,[r0,#0]            ;412
00020e  ed8d0a23          VSTR     s0,[sp,#0x8c]         ;412
000212  ed900a02          VLDR     s0,[r0,#8]            ;412
000216  edd0fa01          VLDR     s31,[r0,#4]           ;412
00021a  2002              MOVS     r0,#2                 ;413
00021c  ee80fa2a          VDIV.F32 s30,s0,s21            ;412
000220  fb001002          MLA      r0,r0,r2,r1           ;412
000224  ed900a00          VLDR     s0,[r0,#0]            ;413
000228  ee60ea2a          VMUL.F32 s29,s0,s21            ;413
00022c  ed900a01          VLDR     s0,[r0,#4]            ;413
000230  4620              MOV      r0,r4                 ;413
000232  ee20ea2a          VMUL.F32 s28,s0,s21            ;413
000236  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00023a  2800              CMP      r0,#0                 ;413
00023c  f000813a          BEQ.W    |L6.1204|
000240  2100              MOVS     r1,#0                 ;413
000242  4620              MOV      r0,r4                 ;413
000244  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000248  9904              LDR      r1,[sp,#0x10]         ;413
00024a  9b04              LDR      r3,[sp,#0x10]         ;413
00024c  4341              MULS     r1,r0,r1              ;413
00024e  9a06              LDR      r2,[sp,#0x18]         ;413
000250  2000              MOVS     r0,#0                 ;413
000252  fb002003          MLA      r0,r0,r3,r2           ;413
000256  f7fffffe          BL       __aeabi_memclr4
                  |L6.602|
;;;416              b.SetZero();
00025a  ac07              ADD      r4,sp,#0x1c
00025c  4620              MOV      r0,r4
00025e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000262  2800              CMP      r0,#0
000264  f0008134          BEQ.W    |L6.1232|
000268  2100              MOVS     r1,#0
00026a  4620              MOV      r0,r4
00026c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000270  9909              LDR      r1,[sp,#0x24]
000272  9b09              LDR      r3,[sp,#0x24]
000274  4341              MULS     r1,r0,r1
000276  9a0b              LDR      r2,[sp,#0x2c]
000278  2000              MOVS     r0,#0
00027a  fb002003          MLA      r0,r0,r3,r2
00027e  f7fffffe          BL       __aeabi_memclr4
                  |L6.642|
;;;417    
;;;418              s32 numInBounds = 0;
000282  2500              MOVS     r5,#0
;;;419    
;;;420              // TODO: make the x and y limits from 1 to end-2
;;;421    
;;;422              for(s32 iSample=0; iSample<numTemplateSamples; iSample++) {
000284  9821              LDR      r0,[sp,#0x84]
000286  462c              MOV      r4,r5
000288  2800              CMP      r0,#0
00028a  f3408161          BLE.W    |L6.1360|
                  |L6.654|
;;;423                const TemplateSample curSample = pTemplateSamplePyramid[iSample];
00028e  9827              LDR      r0,[sp,#0x9c]
000290  eb040184          ADD      r1,r4,r4,LSL #2
000294  eb000081          ADD      r0,r0,r1,LSL #2
;;;424                const f32 yOriginal = curSample.yCoordinate;
;;;425                const f32 xOriginal = curSample.xCoordinate;
;;;426    
;;;427                // TODO: These two could be strength reduced
;;;428                const f32 xTransformedRaw = h00*xOriginal + h01*yOriginal + h02;
000298  ed9d1a26          VLDR     s2,[sp,#0x98]
00029c  ed900a00          VLDR     s0,[r0,#0]            ;423
0002a0  edd00a01          VLDR     s1,[r0,#4]            ;423
0002a4  edd0ca02          VLDR     s25,[r0,#8]           ;423
0002a8  ee611a00          VMUL.F32 s3,s2,s0
0002ac  ed9d1a25          VLDR     s2,[sp,#0x94]
0002b0  ed90da03          VLDR     s26,[r0,#0xc]         ;423
0002b4  edd0ba04          VLDR     s23,[r0,#0x10]        ;423
0002b8  ee411a20          VMLA.F32 s3,s2,s1
0002bc  ed9d1a24          VLDR     s2,[sp,#0x90]
0002c0  ee711a81          VADD.F32 s3,s3,s2
;;;429                const f32 yTransformedRaw = h10*xOriginal + h11*yOriginal + h12;
0002c4  ed9d1a23          VLDR     s2,[sp,#0x8c]
0002c8  ee211a00          VMUL.F32 s2,s2,s0
;;;430    
;;;431                const f32 normalization = h20*xOriginal + h21*yOriginal + 1.0f;
0002cc  ee2e0a80          VMUL.F32 s0,s29,s0
0002d0  ee0f1aa0          VMLA.F32 s2,s31,s1             ;429
0002d4  ee0e0a20          VMLA.F32 s0,s28,s1
0002d8  ee311a0f          VADD.F32 s2,s2,s30             ;429
0002dc  ee300a2d          VADD.F32 s0,s0,s27
;;;432    
;;;433                const f32 xTransformed = (xTransformedRaw / normalization) + centerOffsetScaled.x;
0002e0  eec10a80          VDIV.F32 s1,s3,s0
0002e4  eddd1a28          VLDR     s3,[sp,#0xa0]
0002e8  ee709aa1          VADD.F32 s19,s1,s3
;;;434                const f32 yTransformed = (yTransformedRaw / normalization) + centerOffsetScaled.y;
0002ec  eec10a00          VDIV.F32 s1,s2,s0
0002f0  ed9d0a29          VLDR     s0,[sp,#0xa4]
0002f4  ee309a80          VADD.F32 s18,s1,s0
;;;435    
;;;436                const f32 x0 = FLT_FLOOR(xTransformed);
0002f8  ed9f8a6c          VLDR     s16,|L6.1196|
0002fc  ee390a88          VADD.F32 s0,s19,s16
000300  f7fffffe          BL       __hardfp_floorf
000304  eef08a40          VMOV.F32 s17,s0
;;;437                const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
000308  eeb00a69          VMOV.F32 s0,s19
00030c  f7fffffe          BL       __hardfp_ceilf
000310  eeb0ca40          VMOV.F32 s24,s0
;;;438    
;;;439                const f32 y0 = FLT_FLOOR(yTransformed);
000314  ee390a08          VADD.F32 s0,s18,s16
000318  f7fffffe          BL       __hardfp_floorf
00031c  eeb08a40          VMOV.F32 s16,s0
;;;440                const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
000320  eeb00a49          VMOV.F32 s0,s18
000324  f7fffffe          BL       __hardfp_ceilf
;;;441    
;;;442                // If out of bounds, continue
;;;443                if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
000328  eef58ac0          VCMPE.F32 s17,#0.0
00032c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000330  d37d              BCC      |L6.1070|
000332  eddd0a2c          VLDR     s1,[sp,#0xb0]
000336  eeb4cae0          VCMPE.F32 s24,s1
00033a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00033e  dc76              BGT      |L6.1070|
000340  eeb58ac0          VCMPE.F32 s16,#0.0
000344  eef1fa10          VMRS     APSR_nzcv,FPSCR
000348  d371              BCC      |L6.1070|
00034a  eddd0a2b          VLDR     s1,[sp,#0xac]
00034e  eeb40ae0          VCMPE.F32 s0,s1
000352  eef1fa10          VMRS     APSR_nzcv,FPSCR
000356  dc6a              BGT      |L6.1070|
;;;444                  continue;
;;;445                }
;;;446    
;;;447                numInBounds++;
;;;448    
;;;449                const f32 alphaX = xTransformed - x0;
000358  ee790ae8          VSUB.F32 s1,s19,s17
;;;450                const f32 alphaXinverse = 1 - alphaX;
;;;451    
;;;452                const f32 alphaY = yTransformed - y0;
00035c  ee791a48          VSUB.F32 s3,s18,s16
000360  eeb58ac0          VCMPE.F32 s16,#0.0
000364  1c6d              ADDS     r5,r5,#1              ;447
000366  ee3d1ae0          VSUB.F32 s2,s27,s1             ;450
;;;453                const f32 alphaYinverse = 1.0f - alphaY;
00036a  ee7d2ae1          VSUB.F32 s5,s27,s3
00036e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000372  bfcc              ITE      GT
000374  ee382a0a          VADDGT.F32 s4,s16,s20
000378  ee382a4a          VSUBLE.F32 s4,s16,s20
00037c  eebd2ac2          VCVT.S32.F32 s4,s4
000380  eeb50ac0          VCMPE.F32 s0,#0.0
000384  ee123a10          VMOV     r3,s4
000388  eef1fa10          VMRS     APSR_nzcv,FPSCR
00038c  bfcc              ITE      GT
00038e  ee300a0a          VADDGT.F32 s0,s0,s20
000392  ee300a4a          VSUBLE.F32 s0,s0,s20
000396  eebd0ac0          VCVT.S32.F32 s0,s0
00039a  eef58ac0          VCMPE.F32 s17,#0.0
00039e  ee10ca10          VMOV     r12,s0
0003a2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0003a6  bfcc              ITE      GT
0003a8  ee380a8a          VADDGT.F32 s0,s17,s20
0003ac  ee380aca          VSUBLE.F32 s0,s17,s20
0003b0  eebd0ac0          VCVT.S32.F32 s0,s0
0003b4  9942              LDR      r1,[sp,#0x108]
0003b6  9a42              LDR      r2,[sp,#0x108]
0003b8  ee100a10          VMOV     r0,s0
0003bc  6909              LDR      r1,[r1,#0x10]
0003be  6892              LDR      r2,[r2,#8]
0003c0  fb031302          MLA      r3,r3,r2,r1
0003c4  fb0c1102          MLA      r1,r12,r2,r1
0003c8  4403              ADD      r3,r3,r0
0003ca  4408              ADD      r0,r0,r1
;;;454    
;;;455                const s32 y0S32 = Round<s32>(y0);
;;;456                const s32 y1S32 = Round<s32>(y1);
;;;457                const s32 x0S32 = Round<s32>(x0);
;;;458    
;;;459                const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;460                const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;461    
;;;462                const f32 pixelTL = *pReference_y0;
0003cc  7819              LDRB     r1,[r3,#0]
0003ce  ee001a10          VMOV     s0,r1
;;;463                const f32 pixelTR = *(pReference_y0+1);
0003d2  7859              LDRB     r1,[r3,#1]
0003d4  eef83a40          VCVT.F32.U32 s7,s0                 ;462
0003d8  ee001a10          VMOV     s0,r1
;;;464                const f32 pixelBL = *pReference_y1;
0003dc  7801              LDRB     r1,[r0,#0]
;;;465                const f32 pixelBR = *(pReference_y1+1);
0003de  7840              LDRB     r0,[r0,#1]
0003e0  eeb83a40          VCVT.F32.U32 s6,s0                 ;463
0003e4  ee001a10          VMOV     s0,r1                 ;464
0003e8  ee613a23          VMUL.F32 s7,s2,s7              ;464
0003ec  ee020a10          VMOV     s4,r0
0003f0  eeb80a40          VCVT.F32.U32 s0,s0                 ;464
0003f4  eeb82a42          VCVT.F32.U32 s4,s4
0003f8  ee403a83          VMLA.F32 s7,s1,s6
0003fc  ee210a00          VMUL.F32 s0,s2,s0
000400  ee000a82          VMLA.F32 s0,s1,s4
000404  ee221aa3          VMUL.F32 s2,s5,s7
;;;466    
;;;467                const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;468    
;;;469                //const u8 interpolatedPixel = static_cast<u8>(Round(interpolatedPixelF32));
;;;470    
;;;471                // This block is the non-interpolation part of the per-sample algorithm
;;;472                {
;;;473                  const f32 templatePixelValue = curSample.grayvalue;
;;;474                  const f32 xGradientValue = scaleOverFiveTen * curSample.xGradient;
;;;475                  const f32 yGradientValue = scaleOverFiveTen * curSample.yGradient;
000408  ee6d0a0b          VMUL.F32 s1,s26,s22
00040c  ee011a80          VMLA.F32 s2,s3,s0
000410  ee2c0a8b          VMUL.F32 s0,s25,s22            ;474
;;;476    
;;;477                  const f32 tGradientValue = oneOverTwoFiftyFive * (interpolatedPixelF32 - templatePixelValue);
000414  ee711a6b          VSUB.F32 s3,s2,s23
000418  ed9f1a25          VLDR     s2,|L6.1200|
00041c  ee211a81          VMUL.F32 s2,s3,s2
;;;478    
;;;479                  //AWAt
;;;480                  //  b
;;;481                  AWAt00 += xGradientValue * xGradientValue;
000420  edd81a00          VLDR     s3,[r8,#0]
000424  ee401a00          VMLA.F32 s3,s0,s0
000428  edc81a00          VSTR     s3,[r8,#0]
;;;482                  AWAt01 += xGradientValue * yGradientValue;
00042c  e000              B        |L6.1072|
                  |L6.1070|
00042e  e017              B        |L6.1120|
                  |L6.1072|
000430  eddb1a00          VLDR     s3,[r11,#0]
000434  ee401a20          VMLA.F32 s3,s0,s1
000438  edcb1a00          VSTR     s3,[r11,#0]
;;;483                  AWAt11 += yGradientValue * yGradientValue;
00043c  edda1a00          VLDR     s3,[r10,#0]
000440  ee401aa0          VMLA.F32 s3,s1,s1
000444  edca1a00          VSTR     s3,[r10,#0]
;;;484    
;;;485                  b0 += xGradientValue * tGradientValue;
000448  edd71a00          VLDR     s3,[r7,#0]
00044c  ee401a01          VMLA.F32 s3,s0,s2
000450  edc71a00          VSTR     s3,[r7,#0]
;;;486                  b1 += yGradientValue * tGradientValue;
000454  ed990a00          VLDR     s0,[r9,#0]
000458  ee000a81          VMLA.F32 s0,s1,s2
00045c  ed890a00          VSTR     s0,[r9,#0]
                  |L6.1120|
000460  9821              LDR      r0,[sp,#0x84]         ;422
000462  1c64              ADDS     r4,r4,#1              ;422
000464  4284              CMP      r4,r0                 ;422
000466  f6ffaf12          BLT      |L6.654|
;;;487                }
;;;488              } // for(s32 iSample=0; iSample<numTemplateSamples; iSample++)
;;;489    
;;;490              if(numInBounds < 16) {
00046a  2d10              CMP      r5,#0x10
00046c  db70              BLT      |L6.1360|
;;;491                AnkiWarn("LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Translation", "Template drifted too far out of image.");
;;;492                return RESULT_OK;
;;;493              }
;;;494    
;;;495              Matrix::MakeSymmetric(AWAt, false);
00046e  2100              MOVS     r1,#0
000470  a802              ADD      r0,sp,#8
000472  f7fffffe          BL       _ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)
;;;496    
;;;497              //AWAt.Print("New AWAt");
;;;498              //b.Print("New b");
;;;499    
;;;500              bool numericalFailure;
;;;501    
;;;502              if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK)
000476  ab22              ADD      r3,sp,#0x88
000478  2200              MOVS     r2,#0
00047a  a907              ADD      r1,sp,#0x1c
00047c  a802              ADD      r0,sp,#8
00047e  f7fffffe          BL       _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
000482  2800              CMP      r0,#0
;;;503                return lastResult;
;;;504    
;;;505              if(numericalFailure){
;;;506                AnkiWarn("LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Translation", "numericalFailure");
;;;507                return RESULT_OK;
;;;508              }
;;;509    
;;;510              //b.Print("New update");
;;;511    
;;;512              this->transformation.Update(b, initialImageScaleF32, scratch, Transformations::TRANSFORM_TRANSLATION);
;;;513    
;;;514              // Check if we're done with iterations
;;;515              const f32 minChange = UpdatePreviousCorners(transformation, previousCorners, scratch);
;;;516    
;;;517              if(minChange < convergenceTolerance) {
;;;518                verify_converged = true;
;;;519                return RESULT_OK;
;;;520              }
;;;521            } // for(s32 iteration=0; iteration<maxIterations; iteration++)
;;;522    
;;;523            return RESULT_OK;
;;;524          } // Result LucasKanadeTracker_SampledProjective::IterativelyRefineTrack_Translation()
000484  bf1f              ITTTT    NE
000486  b02f              ADDNE    sp,sp,#0xbc
000488  ecbd8b10          VPOPNE   {d8-d15}
00048c  b006              ADDNE    sp,sp,#0x18
00048e  e8bd8ff0          POPNE    {r4-r11,pc}
000492  f89d0088          LDRB     r0,[sp,#0x88]         ;505
000496  bbe8              CBNZ     r0,|L6.1300|
000498  e028              B        |L6.1260|
00049a  0000              DCW      0x0000
                  |L6.1180|
00049c  43ff0000          DCFS     0x43ff0000 ; 510
                  |L6.1184|
0004a0  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L6.1188|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L6.1192|
0004a8  3f000000          DCFS     0x3f000000 ; 0.5
                  |L6.1196|
0004ac  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L6.1200|
0004b0  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627
                  |L6.1204|
0004b4  f2402176          MOV      r1,#0x276             ;505
0004b8  4826              LDR      r0,|L6.1364|
0004ba  4b27              LDR      r3,|L6.1368|
0004bc  e9cd0100          STRD     r0,r1,[sp,#0]         ;505
0004c0  f103027c          ADD      r2,r3,#0x7c           ;505
0004c4  f1a20118          SUB      r1,r2,#0x18           ;505
0004c8  2005              MOVS     r0,#5                 ;505
0004ca  f7fffffe          BL       _Anki_Log
0004ce  e6c4              B        |L6.602|
                  |L6.1232|
0004d0  f2402176          MOV      r1,#0x276             ;505
0004d4  481f              LDR      r0,|L6.1364|
0004d6  4b20              LDR      r3,|L6.1368|
0004d8  e9cd0100          STRD     r0,r1,[sp,#0]         ;505
0004dc  f103027c          ADD      r2,r3,#0x7c           ;505
0004e0  f1a20118          SUB      r1,r2,#0x18           ;505
0004e4  2005              MOVS     r0,#5                 ;505
0004e6  f7fffffe          BL       _Anki_Log
0004ea  e6ca              B        |L6.642|
                  |L6.1260|
0004ec  a819              ADD      r0,sp,#0x64           ;512
0004ee  994f              LDR      r1,[sp,#0x13c]        ;512
0004f0  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0004f4  4602              MOV      r2,r0                 ;512
0004f6  f44f7300          MOV      r3,#0x200             ;512
0004fa  eeb00a6a          VMOV.F32 s0,s21                ;512
0004fe  a907              ADD      r1,sp,#0x1c           ;512
000500  f1060018          ADD      r0,r6,#0x18           ;512
000504  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
000508  a819              ADD      r0,sp,#0x64           ;515
00050a  994f              LDR      r1,[sp,#0x13c]        ;515
00050c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000510  4602              MOV      r2,r0                 ;515
000512  e000              B        |L6.1302|
                  |L6.1300|
000514  e01c              B        |L6.1360|
                  |L6.1302|
000516  a90c              ADD      r1,sp,#0x30           ;515
000518  f1060018          ADD      r0,r6,#0x18           ;515
00051c  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
000520  eddd0a3f          VLDR     s1,[sp,#0xfc]         ;517
000524  eeb40ae0          VCMPE.F32 s0,s1                 ;517
000528  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;517
00052c  d209              BCS      |L6.1346|
00052e  994e              LDR      r1,[sp,#0x138]        ;518
000530  2001              MOVS     r0,#1                 ;518
000532  7008              STRB     r0,[r1,#0]            ;518
000534  2000              MOVS     r0,#0                 ;519
                  |L6.1334|
000536  b02f              ADD      sp,sp,#0xbc
000538  ecbd8b10          VPOP     {d8-d15}
00053c  b006              ADD      sp,sp,#0x18
00053e  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.1346|
000542  9820              LDR      r0,[sp,#0x80]         ;409
000544  1c40              ADDS     r0,r0,#1              ;409
000546  9020              STR      r0,[sp,#0x80]         ;409
000548  9943              LDR      r1,[sp,#0x10c]        ;409
00054a  4288              CMP      r0,r1                 ;409
00054c  f6ffae42          BLT      |L6.468|
                  |L6.1360|
000550  2000              MOVS     r0,#0                 ;523
000552  e7f0              B        |L6.1334|
;;;525    
                          ENDP

                  |L6.1364|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetZero()::__PRETTY_FUNCTION__
                  |L6.1368|
                          DCD      ||.constdata||+0x2b4

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEiNS0_11MemoryStackERSD_SD_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC2ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEiNS0_11MemoryStackERSD_SD_                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective__sub_object(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, int, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEiNS0_11MemoryStackERSD_SD_ PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, int, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack&, Anki::Embedded::MemoryStack)
;;;36     
;;;37           LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective(
;;;38             const Array<u8> &templateImage,
;;;39             const Quadrilateral<f32> &templateQuad,
;;;40             const f32 scaleTemplateRegionPercent,
;;;41             const s32 numPyramidLevels,
;;;42             const Transformations::TransformType transformType,
;;;43             const s32 maxSamplesAtBaseLevel,
;;;44             MemoryStack ccmMemory,
;;;45             MemoryStack &onchipScratch,
;;;46             MemoryStack offchipScratch)
;;;47             : LucasKanadeTracker_Generic(Transformations::TRANSFORM_PROJECTIVE, templateImage, templateQuad, scaleTemplateRegionPercent, numPyramidLevels, transformType, onchipScratch)
;;;48           {
;;;49             const s32 numSelectBins = 20;
;;;50     
;;;51             Result lastResult;
;;;52     
;;;53             BeginBenchmark("LucasKanadeTracker_SampledProjective");
;;;54     
;;;55             this->templateSamplePyramid = FixedLengthList<FixedLengthList<TemplateSample> >(numPyramidLevels, onchipScratch);
;;;56     
;;;57             for(s32 iScale=0; iScale<numPyramidLevels; iScale++) {
;;;58               const f32 scale = static_cast<f32>(1 << iScale);
;;;59     
;;;60               Meshgrid<f32> curTemplateCoordinates = Meshgrid<f32>(
;;;61                 Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;62                 Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;63     
;;;64               // Half the sample at each subsequent level (not a quarter)
;;;65               const s32 maxPossibleLocations = curTemplateCoordinates.get_numElements();
;;;66               const s32 curMaxSamples = MIN(maxPossibleLocations, maxSamplesAtBaseLevel >> iScale);
;;;67     
;;;68               this->templateSamplePyramid[iScale] = FixedLengthList<TemplateSample>(curMaxSamples, onchipScratch);
;;;69               this->templateSamplePyramid[iScale].set_size(curMaxSamples);
;;;70             }
;;;71     
;;;72             //
;;;73             // Temporary allocations below this point
;;;74             //
;;;75             {
;;;76               // This section is based off lucasKanade_Fast, except uses f32 in offchip instead of integer types in onchip
;;;77     
;;;78               FixedLengthList<Meshgrid<f32> > templateCoordinates = FixedLengthList<Meshgrid<f32> >(numPyramidLevels, onchipScratch);
;;;79               FixedLengthList<Array<f32> > templateImagePyramid = FixedLengthList<Array<f32> >(numPyramidLevels, offchipScratch);
;;;80               FixedLengthList<Array<f32> > templateImageXGradientPyramid = FixedLengthList<Array<f32> >(numPyramidLevels, offchipScratch);
;;;81               FixedLengthList<Array<f32> > templateImageYGradientPyramid = FixedLengthList<Array<f32> >(numPyramidLevels, offchipScratch);
;;;82               FixedLengthList<Array<f32> > templateImageSquaredGradientMagnitudePyramid = FixedLengthList<Array<f32> >(numPyramidLevels, offchipScratch);
;;;83     
;;;84               templateCoordinates.set_size(numPyramidLevels);
;;;85               templateImagePyramid.set_size(numPyramidLevels);
;;;86               templateImageXGradientPyramid.set_size(numPyramidLevels);
;;;87               templateImageYGradientPyramid.set_size(numPyramidLevels);
;;;88               templateImageSquaredGradientMagnitudePyramid.set_size(numPyramidLevels);
;;;89     
;;;90               AnkiConditionalErrorAndReturn(templateImagePyramid.IsValid() && templateImageXGradientPyramid.IsValid() && templateImageYGradientPyramid.IsValid() && templateCoordinates.IsValid() && templateImageSquaredGradientMagnitudePyramid.IsValid(),
;;;91                 "LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective", "Could not allocate pyramid lists");
;;;92     
;;;93               // Allocate the memory for all the images
;;;94               for(s32 iScale=0; iScale<numPyramidLevels; iScale++) {
;;;95                 const f32 scale = static_cast<f32>(1 << iScale);
;;;96     
;;;97                 templateCoordinates[iScale] = Meshgrid<f32>(
;;;98                   Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;99                   Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;100    
;;;101                const s32 numPointsY = templateCoordinates[iScale].get_yGridVector().get_size();
;;;102                const s32 numPointsX = templateCoordinates[iScale].get_xGridVector().get_size();
;;;103    
;;;104                templateImagePyramid[iScale] = Array<f32>(numPointsY, numPointsX, offchipScratch);
;;;105                templateImageXGradientPyramid[iScale] = Array<f32>(numPointsY, numPointsX, offchipScratch);
;;;106                templateImageYGradientPyramid[iScale] = Array<f32>(numPointsY, numPointsX, offchipScratch);
;;;107                templateImageSquaredGradientMagnitudePyramid[iScale] = Array<f32>(numPointsY, numPointsX, offchipScratch);
;;;108    
;;;109                AnkiConditionalErrorAndReturn(templateImagePyramid[iScale].IsValid() && templateImageXGradientPyramid[iScale].IsValid() && templateImageYGradientPyramid[iScale].IsValid() && templateImageSquaredGradientMagnitudePyramid[iScale].IsValid(),
;;;110                  "LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective", "Could not allocate pyramid images");
;;;111              }
;;;112    
;;;113              // Sample all levels of the pyramid images
;;;114              for(s32 iScale=0; iScale<numPyramidLevels; iScale++) {
;;;115                if((lastResult = Interp2_Affine<u8,f32>(templateImage, templateCoordinates[iScale], transformation.get_homography(), this->transformation.get_centerOffset(initialImageScaleF32), templateImagePyramid[iScale], INTERPOLATE_LINEAR)) != RESULT_OK) {
;;;116                  AnkiError("LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective", "Interp2_Affine failed with code 0x%x", lastResult);
;;;117                  return;
;;;118                }
;;;119              }
;;;120    
;;;121              // Compute the spatial derivatives
;;;122              // TODO: compute without borders?
;;;123              for(s32 iScale=0; iScale<numPyramidLevels; iScale++) {
;;;124                PUSH_MEMORY_STACK(offchipScratch);
;;;125                PUSH_MEMORY_STACK(onchipScratch);
;;;126    
;;;127                const s32 numPointsY = templateCoordinates[iScale].get_yGridVector().get_size();
;;;128                const s32 numPointsX = templateCoordinates[iScale].get_xGridVector().get_size();
;;;129    
;;;130                if((lastResult = ImageProcessing::ComputeXGradient<f32,f32,f32>(templateImagePyramid[iScale], templateImageXGradientPyramid[iScale])) != RESULT_OK) {
;;;131                  AnkiError("LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective", "ComputeXGradient failed with code 0x%x", lastResult);
;;;132                  return;
;;;133                }
;;;134    
;;;135                if((lastResult = ImageProcessing::ComputeYGradient<f32,f32,f32>(templateImagePyramid[iScale], templateImageYGradientPyramid[iScale])) != RESULT_OK) {
;;;136                  AnkiError("LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective", "ComputeYGradient failed with code 0x%x", lastResult);
;;;137                  return;
;;;138                }
;;;139    
;;;140                // Using the computed gradients, find a set of the max values, and store them
;;;141    
;;;142                Array<f32> tmpMagnitude(numPointsY, numPointsX, offchipScratch);
;;;143    
;;;144                Matrix::DotMultiply<f32,f32,f32>(templateImageXGradientPyramid[iScale], templateImageXGradientPyramid[iScale], tmpMagnitude);
;;;145                Matrix::DotMultiply<f32,f32,f32>(templateImageYGradientPyramid[iScale], templateImageYGradientPyramid[iScale], templateImageSquaredGradientMagnitudePyramid[iScale]);
;;;146                Matrix::Add<f32,f32,f32>(tmpMagnitude, templateImageSquaredGradientMagnitudePyramid[iScale], templateImageSquaredGradientMagnitudePyramid[iScale]);
;;;147    
;;;148                //Matrix::Sqrt<f32,f32,f32>(templateImageSquaredGradientMagnitudePyramid[iScale], templateImageSquaredGradientMagnitudePyramid[iScale]);
;;;149    
;;;150                Array<f32> magnitudeVector = Matrix::Vectorize<f32,f32>(false, templateImageSquaredGradientMagnitudePyramid[iScale], offchipScratch);
;;;151                Array<u16> magnitudeIndexes = Array<u16>(1, numPointsY*numPointsX, offchipScratch);
;;;152    
;;;153                AnkiConditionalErrorAndReturn(magnitudeVector.IsValid() && magnitudeIndexes.IsValid(),
;;;154                  "LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective", "Out of memory");
;;;155    
;;;156                // Really slow
;;;157                //const f32 t0 = GetTimeF32();
;;;158                //Matrix::Sort<f32>(magnitudeVector, magnitudeIndexes, 1, false);
;;;159                //const f32 t1 = GetTimeF32();
;;;160    
;;;161                const s32 numSamples = this->templateSamplePyramid[iScale].get_size();
;;;162                s32 numSelected;
;;;163                LucasKanadeTracker_SampledProjective::ApproximateSelect(magnitudeVector, numSelectBins, numSamples, numSelected, magnitudeIndexes);
;;;164    
;;;165                //const f32 t2 = GetTimeF32();
;;;166                //CoreTechPrint("%f %f\n", t1-t0, t2-t1);
;;;167    
;;;168                if(numSelected == 0) {
;;;169                  return;
;;;170                }
;;;171    
;;;172                //{
;;;173                //  Matlab matlab(false);
;;;174                //  matlab.PutArray(magnitudeVector, "magnitudeVector");
;;;175                //  matlab.PutArray(magnitudeIndexes, "magnitudeIndexes");
;;;176                //}
;;;177    
;;;178                Array<f32> yCoordinatesVector = templateCoordinates[iScale].EvaluateY1(false, offchipScratch);
;;;179                Array<f32> xCoordinatesVector = templateCoordinates[iScale].EvaluateX1(false, offchipScratch);
;;;180    
;;;181                Array<f32> yGradientVector = Matrix::Vectorize<f32,f32>(false, templateImageYGradientPyramid[iScale], offchipScratch);
;;;182                Array<f32> xGradientVector = Matrix::Vectorize<f32,f32>(false, templateImageXGradientPyramid[iScale], offchipScratch);
;;;183                Array<f32> grayscaleVector = Matrix::Vectorize<f32,f32>(false, templateImagePyramid[iScale], offchipScratch);
;;;184    
;;;185                const f32 * restrict pYCoordinates = yCoordinatesVector.Pointer(0,0);
;;;186                const f32 * restrict pXCoordinates = xCoordinatesVector.Pointer(0,0);
;;;187                const f32 * restrict pYGradientVector = yGradientVector.Pointer(0,0);
;;;188                const f32 * restrict pXGradientVector = xGradientVector.Pointer(0,0);
;;;189                const f32 * restrict pGrayscaleVector = grayscaleVector.Pointer(0,0);
;;;190                const u16 * restrict pMagnitudeIndexes = magnitudeIndexes.Pointer(0,0);
;;;191    
;;;192                TemplateSample * restrict pTemplateSamplePyramid = this->templateSamplePyramid[iScale].Pointer(0);
;;;193    
;;;194                for(s32 iSample=0; iSample<numSamples; iSample++){
;;;195                  const s32 curIndex = pMagnitudeIndexes[iSample];
;;;196    
;;;197                  TemplateSample curSample;
;;;198                  curSample.xCoordinate = pXCoordinates[curIndex];
;;;199                  curSample.yCoordinate = pYCoordinates[curIndex];
;;;200                  curSample.xGradient = pXGradientVector[curIndex];
;;;201                  curSample.yGradient = pYGradientVector[curIndex];
;;;202                  curSample.grayvalue = pGrayscaleVector[curIndex];
;;;203    
;;;204                  pTemplateSamplePyramid[iSample] = curSample;
;;;205                }
;;;206              }
;;;207            } // PUSH_MEMORY_STACK(fastMemory);
;;;208    
;;;209            this->isValid = true;
;;;210    
;;;211            EndBenchmark("LucasKanadeTracker_SampledProjective");
;;;212          }
;;;213    
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  461d              MOV      r5,r3
000006  ed2d0b02          VPUSH    {d0}
00000a  ed2d8b06          VPUSH    {d8-d10}
00000e  f5ad7d69          SUB      sp,sp,#0x3a4
000012  f8dd3404          LDR      r3,[sp,#0x404]
000016  99fe              LDR      r1,[sp,#0x3f8]
000018  9500              STR      r5,[sp,#0]
00001a  e9cd1301          STRD     r1,r3,[sp,#4]
00001e  4613              MOV      r3,r2
000020  f44f6100          MOV      r1,#0x800
000024  9af2              LDR      r2,[sp,#0x3c8]
000026  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiS4_RNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, Anki::Embedded::MemoryStack&)
00002a  3074              ADDS     r0,r0,#0x74
00002c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::FixedLengthList()
000030  f1a00474          SUB      r4,r0,#0x74
000034  a0fc              ADR      r0,|L7.1064|
000036  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00003a  a819              ADD      r0,sp,#0x64
00003c  9001              STR      r0,[sp,#4]
00003e  2300              MOVS     r3,#0
000040  f1040a74          ADD      r10,r4,#0x74
000044  461a              MOV      r2,r3
000046  2101              MOVS     r1,#1
000048  a8e2              ADD      r0,sp,#0x388
00004a  f8dd6404          LDR      r6,[sp,#0x404]
00004e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000052  6800              LDR      r0,[r0,#0]
000054  9007              STR      r0,[sp,#0x1c]
000056  9000              STR      r0,[sp,#0]
000058  4633              MOV      r3,r6
00005a  462a              MOV      r2,r5
00005c  2101              MOVS     r1,#1
00005e  a802              ADD      r0,sp,#8
000060  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000064  f8d09010          LDR      r9,[r0,#0x10]
000068  e8b009c0          LDM      r0!,{r6-r8,r11}
00006c  2200              MOVS     r2,#0
00006e  4611              MOV      r1,r2
000070  a808              ADD      r0,sp,#0x20
000072  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000076  2200              MOVS     r2,#0
000078  9000              STR      r0,[sp,#0]
00007a  4611              MOV      r1,r2
00007c  a80b              ADD      r0,sp,#0x2c
00007e  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000082  9a00              LDR      r2,[sp,#0]
000084  4603              MOV      r3,r0
000086  2e00              CMP      r6,#0
000088  e9d20100          LDRD     r0,r1,[r2,#0]
00008c  6892              LDR      r2,[r2,#8]
00008e  921b              STR      r2,[sp,#0x6c]
000090  e9cd0119          STRD     r0,r1,[sp,#0x64]
000094  e9d30100          LDRD     r0,r1,[r3,#0]
000098  689a              LDR      r2,[r3,#8]
00009a  ab1c              ADD      r3,sp,#0x70
00009c  f8cd908c          STR      r9,[sp,#0x8c]
0000a0  e8a309c7          STM      r3!,{r0-r2,r6-r8,r11}
0000a4  bfc8              IT       GT
0000a6  2f00              CMPGT    r7,#0
0000a8  dd2b              BLE      |L7.258|
0000aa  fb06f007          MUL      r0,r6,r7
0000ae  2800              CMP      r0,#0
0000b0  bf1c              ITT      NE
0000b2  2000              MOVNE    r0,#0
0000b4  fb009008          MLANE    r0,r0,r8,r9
0000b8  d023              BEQ      |L7.258|
                  |L7.186|
0000ba  9024              STR      r0,[sp,#0x90]
0000bc  2e00              CMP      r6,#0
0000be  bfc8              IT       GT
0000c0  2f00              CMPGT    r7,#0
0000c2  dd20              BLE      |L7.262|
0000c4  fb06f007          MUL      r0,r6,r7
0000c8  2800              CMP      r0,#0
0000ca  bf1c              ITT      NE
0000cc  2000              MOVNE    r0,#0
0000ce  fb009008          MLANE    r0,r0,r8,r9
0000d2  d018              BEQ      |L7.262|
                  |L7.212|
0000d4  9025              STR      r0,[sp,#0x94]
0000d6  2e00              CMP      r6,#0
0000d8  bfc8              IT       GT
0000da  2f00              CMPGT    r7,#0
0000dc  dd15              BLE      |L7.266|
0000de  fb06f007          MUL      r0,r6,r7
0000e2  2800              CMP      r0,#0
0000e4  bf1c              ITT      NE
0000e6  2000              MOVNE    r0,#0
0000e8  fb009008          MLANE    r0,r0,r8,r9
0000ec  d00d              BEQ      |L7.266|
                  |L7.238|
0000ee  9025              STR      r0,[sp,#0x94]
0000f0  a807              ADD      r0,sp,#0x1c
0000f2  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000f6  b150              CBZ      r0,|L7.270|
0000f8  4629              MOV      r1,r5
0000fa  9801              LDR      r0,[sp,#4]
0000fc  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::set_size(int)
000100  e009              B        |L7.278|
                  |L7.258|
000102  2000              MOVS     r0,#0
000104  e7d9              B        |L7.186|
                  |L7.262|
000106  2000              MOVS     r0,#0
000108  e7e4              B        |L7.212|
                  |L7.266|
00010a  2000              MOVS     r0,#0
00010c  e7ef              B        |L7.238|
                  |L7.270|
00010e  2100              MOVS     r1,#0
000110  9801              LDR      r0,[sp,#4]
000112  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::set_size(int)
                  |L7.278|
000116  e9dd1219          LDRD     r1,r2,[sp,#0x64]
00011a  4650              MOV      r0,r10
00011c  9b1b              LDR      r3,[sp,#0x6c]
00011e  f8ca3008          STR      r3,[r10,#8]
000122  e9c01200          STRD     r1,r2,[r0,#0]
000126  e9dd121c          LDRD     r1,r2,[sp,#0x70]
00012a  9b1e              LDR      r3,[sp,#0x78]
00012c  f8ca3014          STR      r3,[r10,#0x14]
000130  e9c01203          STRD     r1,r2,[r0,#0xc]
000134  991f              LDR      r1,[sp,#0x7c]
000136  f84a1f18          STR      r1,[r10,#0x18]!
00013a  9920              LDR      r1,[sp,#0x80]
00013c  f8ca1004          STR      r1,[r10,#4]
000140  9921              LDR      r1,[sp,#0x84]
000142  f8ca1008          STR      r1,[r10,#8]
000146  9922              LDR      r1,[sp,#0x88]
000148  f8ca100c          STR      r1,[r10,#0xc]
00014c  9923              LDR      r1,[sp,#0x8c]
00014e  f8ca1010          STR      r1,[r10,#0x10]
000152  9924              LDR      r1,[sp,#0x90]
000154  62c1              STR      r1,[r0,#0x2c]
000156  9925              LDR      r1,[sp,#0x94]
000158  2600              MOVS     r6,#0
00015a  ed9f9abd          VLDR     s18,|L7.1104|
00015e  eef69a00          VMOV.F32 s19,#0.50000000
000162  eebeaa00          VMOV.F32 s20,#-0.50000000
000166  6301              STR      r1,[r0,#0x30]
000168  2d00              CMP      r5,#0
00016a  f34080fa          BLE.W    |L7.866|
                  |L7.366|
00016e  2001              MOVS     r0,#1
000170  40b0              LSLS     r0,r0,r6
000172  ee000a10          VMOV     s0,r0
000176  edd48a05          VLDR     s17,[r4,#0x14]
00017a  eeb88ac0          VCVT.F32.S32 s16,s0
00017e  ee880a88          VDIV.F32 s0,s17,s16
000182  ee300a09          VADD.F32 s0,s0,s18
000186  f7fffffe          BL       __hardfp_floorf
00018a  eebd0ac0          VCVT.S32.F32 s0,s0
00018e  ee680aa9          VMUL.F32 s1,s17,s19
000192  a814              ADD      r0,sp,#0x50
000194  ee101a10          VMOV     r1,s0
000198  ee280a8a          VMUL.F32 s0,s17,s20
00019c  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
0001a0  edd48a04          VLDR     s17,[r4,#0x10]
0001a4  e9dd7814          LDRD     r7,r8,[sp,#0x50]
0001a8  ee880a88          VDIV.F32 s0,s17,s16
0001ac  f8dd9058          LDR      r9,[sp,#0x58]
0001b0  ee300a09          VADD.F32 s0,s0,s18
0001b4  f7fffffe          BL       __hardfp_floorf
0001b8  eebd0ac0          VCVT.S32.F32 s0,s0
0001bc  ee680aa9          VMUL.F32 s1,s17,s19
0001c0  a826              ADD      r0,sp,#0x98
0001c2  ee101a10          VMOV     r1,s0
0001c6  ee280a8a          VMUL.F32 s0,s17,s20
0001ca  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
0001ce  e9dd0126          LDRD     r0,r1,[sp,#0x98]
0001d2  9a28              LDR      r2,[sp,#0xa0]
0001d4  f8cd9040          STR      r9,[sp,#0x40]
0001d8  9213              STR      r2,[sp,#0x4c]
0001da  e9cd0111          STRD     r0,r1,[sp,#0x44]
0001de  e9cd780e          STRD     r7,r8,[sp,#0x38]
0001e2  9911              LDR      r1,[sp,#0x44]
0001e4  98ff              LDR      r0,[sp,#0x3fc]
0001e6  fb07fb01          MUL      r11,r7,r1
0001ea  4130              ASRS     r0,r0,r6
0001ec  4558              CMP      r0,r11
0001ee  bfd8              IT       LE
0001f0  4683              MOVLE    r11,r0
0001f2  eb060086          ADD      r0,r6,r6,LSL #2
0001f6  eb0000c6          ADD      r0,r0,r6,LSL #3
0001fa  f8d410a4          LDR      r1,[r4,#0xa4]
0001fe  9016              STR      r0,[sp,#0x58]
000200  eb010080          ADD      r0,r1,r0,LSL #2
000204  9015              STR      r0,[sp,#0x54]
000206  a801              ADD      r0,sp,#4
000208  9014              STR      r0,[sp,#0x50]
00020a  2300              MOVS     r3,#0
00020c  461a              MOV      r2,r3
00020e  2101              MOVS     r1,#1
000210  a831              ADD      r0,sp,#0xc4
000212  f8dd7404          LDR      r7,[sp,#0x404]
000216  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00021a  6800              LDR      r0,[r0,#0]
00021c  9017              STR      r0,[sp,#0x5c]
00021e  9000              STR      r0,[sp,#0]
000220  463b              MOV      r3,r7
000222  465a              MOV      r2,r11
000224  2101              MOVS     r1,#1
000226  a826              ADD      r0,sp,#0x98
000228  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00022c  4602              MOV      r2,r0
00022e  f8d0a010          LDR      r10,[r0,#0x10]
000232  e9d29002          LDRD     r9,r0,[r2,#8]
000236  e9d27800          LDRD     r7,r8,[r2,#0]
00023a  2200              MOVS     r2,#0
00023c  9000              STR      r0,[sp,#0]
00023e  4611              MOV      r1,r2
000240  a82b              ADD      r0,sp,#0xac
000242  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000246  2200              MOVS     r2,#0
000248  9018              STR      r0,[sp,#0x60]
00024a  4611              MOV      r1,r2
00024c  a82e              ADD      r0,sp,#0xb8
00024e  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000252  9b18              LDR      r3,[sp,#0x60]
000254  4684              MOV      r12,r0
000256  2f00              CMP      r7,#0
000258  e9d30200          LDRD     r0,r2,[r3,#0]
00025c  689b              LDR      r3,[r3,#8]
00025e  9303              STR      r3,[sp,#0xc]
000260  e9cd0201          STRD     r0,r2,[sp,#4]
000264  e9dc0200          LDRD     r0,r2,[r12,#0]
000268  f8dc3008          LDR      r3,[r12,#8]
00026c  e9cd0204          STRD     r0,r2,[sp,#0x10]
000270  9306              STR      r3,[sp,#0x18]
000272  9800              LDR      r0,[sp,#0]
000274  f8cda02c          STR      r10,[sp,#0x2c]
000278  e9cd9009          STRD     r9,r0,[sp,#0x24]
00027c  e9cd7807          STRD     r7,r8,[sp,#0x1c]
000280  bfc8              IT       GT
000282  f1b80f00          CMPGT    r8,#0
000286  dd2d              BLE      |L7.740|
000288  fb07f008          MUL      r0,r7,r8
00028c  2800              CMP      r0,#0
00028e  bf1c              ITT      NE
000290  2000              MOVNE    r0,#0
000292  fb00a009          MLANE    r0,r0,r9,r10
000296  d025              BEQ      |L7.740|
                  |L7.664|
000298  900c              STR      r0,[sp,#0x30]
00029a  2f00              CMP      r7,#0
00029c  bfc8              IT       GT
00029e  f1b80f00          CMPGT    r8,#0
0002a2  dd21              BLE      |L7.744|
0002a4  fb07f008          MUL      r0,r7,r8
0002a8  2800              CMP      r0,#0
0002aa  bf1c              ITT      NE
0002ac  2000              MOVNE    r0,#0
0002ae  fb00a009          MLANE    r0,r0,r9,r10
0002b2  d019              BEQ      |L7.744|
                  |L7.692|
0002b4  900d              STR      r0,[sp,#0x34]
0002b6  2f00              CMP      r7,#0
0002b8  bfc8              IT       GT
0002ba  f1b80f00          CMPGT    r8,#0
0002be  dd15              BLE      |L7.748|
0002c0  fb07f008          MUL      r0,r7,r8
0002c4  2800              CMP      r0,#0
0002c6  bf1c              ITT      NE
0002c8  2000              MOVNE    r0,#0
0002ca  fb00a009          MLANE    r0,r0,r9,r10
0002ce  d00d              BEQ      |L7.748|
                  |L7.720|
0002d0  900d              STR      r0,[sp,#0x34]
0002d2  a817              ADD      r0,sp,#0x5c
0002d4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0002d8  b150              CBZ      r0,|L7.752|
0002da  4659              MOV      r1,r11
0002dc  9814              LDR      r0,[sp,#0x50]
0002de  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::set_size(int)
0002e2  e009              B        |L7.760|
                  |L7.740|
0002e4  2000              MOVS     r0,#0
0002e6  e7d7              B        |L7.664|
                  |L7.744|
0002e8  2000              MOVS     r0,#0
0002ea  e7e3              B        |L7.692|
                  |L7.748|
0002ec  2000              MOVS     r0,#0
0002ee  e7ef              B        |L7.720|
                  |L7.752|
0002f0  2100              MOVS     r1,#0
0002f2  9814              LDR      r0,[sp,#0x50]
0002f4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::set_size(int)
                  |L7.760|
0002f8  e9dd0201          LDRD     r0,r2,[sp,#4]
0002fc  9915              LDR      r1,[sp,#0x54]
0002fe  9b03              LDR      r3,[sp,#0xc]
000300  f1bb0f00          CMP      r11,#0
000304  608b              STR      r3,[r1,#8]
000306  e9c10200          STRD     r0,r2,[r1,#0]
00030a  e9dd0204          LDRD     r0,r2,[sp,#0x10]
00030e  9b06              LDR      r3,[sp,#0x18]
000310  614b              STR      r3,[r1,#0x14]
000312  e9c10203          STRD     r0,r2,[r1,#0xc]
000316  9a07              LDR      r2,[sp,#0x1c]
000318  618a              STR      r2,[r1,#0x18]
00031a  9a08              LDR      r2,[sp,#0x20]
00031c  61ca              STR      r2,[r1,#0x1c]
00031e  9a09              LDR      r2,[sp,#0x24]
000320  620a              STR      r2,[r1,#0x20]
000322  9a0a              LDR      r2,[sp,#0x28]
000324  624a              STR      r2,[r1,#0x24]
000326  9a0b              LDR      r2,[sp,#0x2c]
000328  628a              STR      r2,[r1,#0x28]
00032a  980c              LDR      r0,[sp,#0x30]
00032c  62c8              STR      r0,[r1,#0x2c]
00032e  980d              LDR      r0,[sp,#0x34]
000330  6308              STR      r0,[r1,#0x30]
000332  f8d410a4          LDR      r1,[r4,#0xa4]
000336  9816              LDR      r0,[sp,#0x58]
000338  eb010080          ADD      r0,r1,r0,LSL #2
00033c  69c1              LDR      r1,[r0,#0x1c]
00033e  bfb4              ITE      LT
000340  2200              MOVLT    r2,#0
000342  465a              MOVGE    r2,r11
000344  4291              CMP      r1,r2
000346  bfb8              IT       LT
000348  468b              MOVLT    r11,r1
00034a  db04              BLT      |L7.854|
00034c  f1bb0f00          CMP      r11,#0
000350  bfb8              IT       LT
000352  f04f0b00          MOVLT    r11,#0
                  |L7.854|
000356  1c76              ADDS     r6,r6,#1
000358  f8c0b00c          STR      r11,[r0,#0xc]
00035c  42ae              CMP      r6,r5
00035e  f6ffaf06          BLT      |L7.366|
                  |L7.866|
000362  a80c              ADD      r0,sp,#0x30
000364  9001              STR      r0,[sp,#4]
000366  2300              MOVS     r3,#0
000368  461a              MOV      r2,r3
00036a  2101              MOVS     r1,#1
00036c  a8e3              ADD      r0,sp,#0x38c
00036e  f8dd6404          LDR      r6,[sp,#0x404]
000372  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000376  6800              LDR      r0,[r0,#0]
000378  9007              STR      r0,[sp,#0x1c]
00037a  9000              STR      r0,[sp,#0]
00037c  4633              MOV      r3,r6
00037e  462a              MOV      r2,r5
000380  2101              MOVS     r1,#1
000382  a802              ADD      r0,sp,#8
000384  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000388  f8d09010          LDR      r9,[r0,#0x10]
00038c  e8b005c0          LDM      r0!,{r6-r8,r10}
000390  2200              MOVS     r2,#0
000392  4611              MOV      r1,r2
000394  a826              ADD      r0,sp,#0x98
000396  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00039a  4683              MOV      r11,r0
00039c  2200              MOVS     r2,#0
00039e  4611              MOV      r1,r2
0003a0  a808              ADD      r0,sp,#0x20
0003a2  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
0003a6  4602              MOV      r2,r0
0003a8  e9db0100          LDRD     r0,r1,[r11,#0]
0003ac  f8db3008          LDR      r3,[r11,#8]
0003b0  930e              STR      r3,[sp,#0x38]
0003b2  e9cd010c          STRD     r0,r1,[sp,#0x30]
0003b6  e9d20100          LDRD     r0,r1,[r2,#0]
0003ba  6892              LDR      r2,[r2,#8]
0003bc  ab0f              ADD      r3,sp,#0x3c
0003be  f8cd9058          STR      r9,[sp,#0x58]
0003c2  e8a305c7          STM      r3!,{r0-r2,r6-r8,r10}
0003c6  2e00              CMP      r6,#0
0003c8  bfc8              IT       GT
0003ca  2f00              CMPGT    r7,#0
0003cc  dd42              BLE      |L7.1108|
0003ce  fb06f007          MUL      r0,r6,r7
0003d2  2800              CMP      r0,#0
0003d4  bf1c              ITT      NE
0003d6  2000              MOVNE    r0,#0
0003d8  fb009008          MLANE    r0,r0,r8,r9
0003dc  d03a              BEQ      |L7.1108|
                  |L7.990|
0003de  9017              STR      r0,[sp,#0x5c]
0003e0  2e00              CMP      r6,#0
0003e2  bfc8              IT       GT
0003e4  2f00              CMPGT    r7,#0
0003e6  dd37              BLE      |L7.1112|
0003e8  fb06f007          MUL      r0,r6,r7
0003ec  2800              CMP      r0,#0
0003ee  bf1c              ITT      NE
0003f0  2000              MOVNE    r0,#0
0003f2  fb009008          MLANE    r0,r0,r8,r9
0003f6  d02f              BEQ      |L7.1112|
                  |L7.1016|
0003f8  9018              STR      r0,[sp,#0x60]
0003fa  2e00              CMP      r6,#0
0003fc  bfc8              IT       GT
0003fe  2f00              CMPGT    r7,#0
000400  dd2c              BLE      |L7.1116|
000402  fb06f007          MUL      r0,r6,r7
000406  2800              CMP      r0,#0
000408  bf1c              ITT      NE
00040a  2000              MOVNE    r0,#0
00040c  fb009008          MLANE    r0,r0,r8,r9
000410  d024              BEQ      |L7.1116|
                  |L7.1042|
000412  9018              STR      r0,[sp,#0x60]
000414  a807              ADD      r0,sp,#0x1c
000416  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
00041a  b308              CBZ      r0,|L7.1120|
00041c  4629              MOV      r1,r5
00041e  9801              LDR      r0,[sp,#4]
000420  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
000424  e020              B        |L7.1128|
000426  0000              DCW      0x0000
                  |L7.1064|
000428  4c756361          DCB      "LucasKanadeTracker_SampledProjective",0
00042c  734b616e
000430  61646554
000434  7261636b
000438  65725f53
00043c  616d706c
000440  65645072
000444  6f6a6563
000448  74697665
00044c  00      
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L7.1104|
000450  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L7.1108|
000454  2000              MOVS     r0,#0
000456  e7c2              B        |L7.990|
                  |L7.1112|
000458  2000              MOVS     r0,#0
00045a  e7cd              B        |L7.1016|
                  |L7.1116|
00045c  2000              MOVS     r0,#0
00045e  e7d8              B        |L7.1042|
                  |L7.1120|
000460  2100              MOVS     r1,#0
000462  9801              LDR      r0,[sp,#4]
000464  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
                  |L7.1128|
000468  2300              MOVS     r3,#0
00046a  461a              MOV      r2,r3
00046c  2101              MOVS     r1,#1
00046e  a8e4              ADD      r0,sp,#0x390
000470  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000474  6803              LDR      r3,[r0,#0]
000476  4629              MOV      r1,r5
000478  a854              ADD      r0,sp,#0x150
00047a  f8dd2408          LDR      r2,[sp,#0x408]
00047e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000482  2300              MOVS     r3,#0
000484  461a              MOV      r2,r3
000486  2101              MOVS     r1,#1
000488  a8e5              ADD      r0,sp,#0x394
00048a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00048e  6803              LDR      r3,[r0,#0]
000490  4629              MOV      r1,r5
000492  a82d              ADD      r0,sp,#0xb4
000494  f8dd2408          LDR      r2,[sp,#0x408]
000498  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00049c  2300              MOVS     r3,#0
00049e  461a              MOV      r2,r3
0004a0  2101              MOVS     r1,#1
0004a2  a8e6              ADD      r0,sp,#0x398
0004a4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0004a8  6803              LDR      r3,[r0,#0]
0004aa  4629              MOV      r1,r5
0004ac  a861              ADD      r0,sp,#0x184
0004ae  f8dd2408          LDR      r2,[sp,#0x408]
0004b2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0004b6  2300              MOVS     r3,#0
0004b8  461a              MOV      r2,r3
0004ba  2101              MOVS     r1,#1
0004bc  a8e7              ADD      r0,sp,#0x39c
0004be  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0004c2  6803              LDR      r3,[r0,#0]
0004c4  4629              MOV      r1,r5
0004c6  a83a              ADD      r0,sp,#0xe8
0004c8  f8dd2408          LDR      r2,[sp,#0x408]
0004cc  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0004d0  4629              MOV      r1,r5
0004d2  a80c              ADD      r0,sp,#0x30
0004d4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
0004d8  4629              MOV      r1,r5
0004da  a854              ADD      r0,sp,#0x150
0004dc  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
0004e0  4629              MOV      r1,r5
0004e2  a82d              ADD      r0,sp,#0xb4
0004e4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
0004e8  4629              MOV      r1,r5
0004ea  a861              ADD      r0,sp,#0x184
0004ec  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
0004f0  4629              MOV      r1,r5
0004f2  a83a              ADD      r0,sp,#0xe8
0004f4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
0004f8  a854              ADD      r0,sp,#0x150
0004fa  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
0004fe  2800              CMP      r0,#0
000500  f0008157          BEQ.W    |L7.1970|
000504  a82d              ADD      r0,sp,#0xb4
000506  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
00050a  2800              CMP      r0,#0
00050c  f0008151          BEQ.W    |L7.1970|
000510  a861              ADD      r0,sp,#0x184
000512  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
000516  2800              CMP      r0,#0
000518  f000814b          BEQ.W    |L7.1970|
00051c  990f              LDR      r1,[sp,#0x3c]
00051e  9813              LDR      r0,[sp,#0x4c]
000520  4281              CMP      r1,r0
000522  f3008146          BGT.W    |L7.1970|
000526  9816              LDR      r0,[sp,#0x58]
000528  b130              CBZ      r0,|L7.1336|
00052a  9812              LDR      r0,[sp,#0x48]
00052c  2800              CMP      r0,#0
00052e  bfa3              ITTTE    GE
000530  9813              LDRGE    r0,[sp,#0x4c]
000532  2800              CMPGE    r0,#0
000534  2001              MOVGE    r0,#1
000536  2000              MOVLT    r0,#0
                  |L7.1336|
000538  2800              CMP      r0,#0
00053a  f000813a          BEQ.W    |L7.1970|
00053e  a83a              ADD      r0,sp,#0xe8
000540  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
000544  2800              CMP      r0,#0
000546  f0008134          BEQ.W    |L7.1970|
00054a  2700              MOVS     r7,#0
00054c  2d00              CMP      r5,#0
00054e  f34080f5          BLE.W    |L7.1852|
                  |L7.1362|
000552  2001              MOVS     r0,#1
000554  40b8              LSLS     r0,r0,r7
000556  ee000a10          VMOV     s0,r0
00055a  edd48a05          VLDR     s17,[r4,#0x14]
00055e  9818              LDR      r0,[sp,#0x60]
000560  eeb88ac0          VCVT.F32.S32 s16,s0
000564  eb070b47          ADD      r11,r7,r7,LSL #1
000568  eb0006cb          ADD      r6,r0,r11,LSL #3
00056c  ee880a88          VDIV.F32 s0,s17,s16
000570  ee300a09          VADD.F32 s0,s0,s18
000574  f7fffffe          BL       __hardfp_floorf
000578  eebd0ac0          VCVT.S32.F32 s0,s0
00057c  ee680aa9          VMUL.F32 s1,s17,s19
000580  a808              ADD      r0,sp,#0x20
000582  ee101a10          VMOV     r1,s0
000586  ee280a8a          VMUL.F32 s0,s17,s20
00058a  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
00058e  e9dd8908          LDRD     r8,r9,[sp,#0x20]
000592  edd48a04          VLDR     s17,[r4,#0x10]
000596  f8dda028          LDR      r10,[sp,#0x28]
00059a  ee880a88          VDIV.F32 s0,s17,s16
00059e  ee300a09          VADD.F32 s0,s0,s18
0005a2  f7fffffe          BL       __hardfp_floorf
0005a6  eebd0ac0          VCVT.S32.F32 s0,s0
0005aa  ee680aa9          VMUL.F32 s1,s17,s19
0005ae  a847              ADD      r0,sp,#0x11c
0005b0  ee101a10          VMOV     r1,s0
0005b4  ee280a8a          VMUL.F32 s0,s17,s20
0005b8  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
0005bc  e9dd0147          LDRD     r0,r1,[sp,#0x11c]
0005c0  9a49              LDR      r2,[sp,#0x124]
0005c2  9207              STR      r2,[sp,#0x1c]
0005c4  f8cda010          STR      r10,[sp,#0x10]
0005c8  e9cd0105          STRD     r0,r1,[sp,#0x14]
0005cc  e9cd8902          STRD     r8,r9,[sp,#8]
0005d0  4640              MOV      r0,r8
0005d2  e9dd3805          LDRD     r3,r8,[sp,#0x14]
0005d6  4649              MOV      r1,r9
0005d8  4652              MOV      r2,r10
0005da  f8ddc01c          LDR      r12,[sp,#0x1c]
0005de  e8a6110f          STM      r6!,{r0-r3,r8,r12}
0005e2  9818              LDR      r0,[sp,#0x60]
0005e4  eb070887          ADD      r8,r7,r7,LSL #2
0005e8  eb0000cb          ADD      r0,r0,r11,LSL #3
0005ec  2300              MOVS     r3,#0
0005ee  f8d0a00c          LDR      r10,[r0,#0xc]
0005f2  f8d09000          LDR      r9,[r0,#0]
0005f6  9860              LDR      r0,[sp,#0x180]
0005f8  461a              MOV      r2,r3
0005fa  eb000688          ADD      r6,r0,r8,LSL #2
0005fe  2101              MOVS     r1,#1
000600  a80b              ADD      r0,sp,#0x2c
000602  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000606  6800              LDR      r0,[r0,#0]
000608  9000              STR      r0,[sp,#0]
00060a  464a              MOV      r2,r9
00060c  4651              MOV      r1,r10
00060e  a826              ADD      r0,sp,#0x98
000610  f8dd3408          LDR      r3,[sp,#0x408]
000614  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000618  6801              LDR      r1,[r0,#0]
00061a  6031              STR      r1,[r6,#0]
00061c  6841              LDR      r1,[r0,#4]
00061e  6071              STR      r1,[r6,#4]
000620  6881              LDR      r1,[r0,#8]
000622  60b1              STR      r1,[r6,#8]
000624  68c1              LDR      r1,[r0,#0xc]
000626  60f1              STR      r1,[r6,#0xc]
000628  6900              LDR      r0,[r0,#0x10]
00062a  6130              STR      r0,[r6,#0x10]
00062c  9839              LDR      r0,[sp,#0xe4]
00062e  2300              MOVS     r3,#0
000630  eb000688          ADD      r6,r0,r8,LSL #2
000634  461a              MOV      r2,r3
000636  2101              MOVS     r1,#1
000638  a80b              ADD      r0,sp,#0x2c
00063a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00063e  6800              LDR      r0,[r0,#0]
000640  9000              STR      r0,[sp,#0]
000642  464a              MOV      r2,r9
000644  4651              MOV      r1,r10
000646  a826              ADD      r0,sp,#0x98
000648  f8dd3408          LDR      r3,[sp,#0x408]
00064c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000650  6801              LDR      r1,[r0,#0]
000652  6031              STR      r1,[r6,#0]
000654  6841              LDR      r1,[r0,#4]
000656  6071              STR      r1,[r6,#4]
000658  6881              LDR      r1,[r0,#8]
00065a  60b1              STR      r1,[r6,#8]
00065c  68c1              LDR      r1,[r0,#0xc]
00065e  60f1              STR      r1,[r6,#0xc]
000660  6900              LDR      r0,[r0,#0x10]
000662  6130              STR      r0,[r6,#0x10]
000664  986d              LDR      r0,[sp,#0x1b4]
000666  2300              MOVS     r3,#0
000668  eb000688          ADD      r6,r0,r8,LSL #2
00066c  461a              MOV      r2,r3
00066e  2101              MOVS     r1,#1
000670  a80b              ADD      r0,sp,#0x2c
000672  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000676  6800              LDR      r0,[r0,#0]
000678  9000              STR      r0,[sp,#0]
00067a  464a              MOV      r2,r9
00067c  4651              MOV      r1,r10
00067e  a826              ADD      r0,sp,#0x98
000680  f8dd3408          LDR      r3,[sp,#0x408]
000684  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000688  6801              LDR      r1,[r0,#0]
00068a  6031              STR      r1,[r6,#0]
00068c  6841              LDR      r1,[r0,#4]
00068e  6071              STR      r1,[r6,#4]
000690  6881              LDR      r1,[r0,#8]
000692  60b1              STR      r1,[r6,#8]
000694  68c1              LDR      r1,[r0,#0xc]
000696  60f1              STR      r1,[r6,#0xc]
000698  6900              LDR      r0,[r0,#0x10]
00069a  6130              STR      r0,[r6,#0x10]
00069c  9846              LDR      r0,[sp,#0x118]
00069e  2300              MOVS     r3,#0
0006a0  eb000688          ADD      r6,r0,r8,LSL #2
0006a4  461a              MOV      r2,r3
0006a6  2101              MOVS     r1,#1
0006a8  a80b              ADD      r0,sp,#0x2c
0006aa  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0006ae  6800              LDR      r0,[r0,#0]
0006b0  9000              STR      r0,[sp,#0]
0006b2  464a              MOV      r2,r9
0006b4  4651              MOV      r1,r10
0006b6  a826              ADD      r0,sp,#0x98
0006b8  f8dd3408          LDR      r3,[sp,#0x408]
0006bc  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0006c0  6801              LDR      r1,[r0,#0]
0006c2  6031              STR      r1,[r6,#0]
0006c4  6841              LDR      r1,[r0,#4]
0006c6  6071              STR      r1,[r6,#4]
0006c8  6881              LDR      r1,[r0,#8]
0006ca  60b1              STR      r1,[r6,#8]
0006cc  68c1              LDR      r1,[r0,#0xc]
0006ce  60f1              STR      r1,[r6,#0xc]
0006d0  6900              LDR      r0,[r0,#0x10]
0006d2  6130              STR      r0,[r6,#0x10]
0006d4  9860              LDR      r0,[sp,#0x180]
0006d6  eb000088          ADD      r0,r0,r8,LSL #2
0006da  6901              LDR      r1,[r0,#0x10]
0006dc  2900              CMP      r1,#0
0006de  d075              BEQ      |L7.1996|
0006e0  6801              LDR      r1,[r0,#0]
0006e2  2900              CMP      r1,#0
0006e4  bfa4              ITT      GE
0006e6  6840              LDRGE    r0,[r0,#4]
0006e8  2800              CMPGE    r0,#0
0006ea  db6f              BLT      |L7.1996|
0006ec  9839              LDR      r0,[sp,#0xe4]
0006ee  eb000088          ADD      r0,r0,r8,LSL #2
0006f2  6901              LDR      r1,[r0,#0x10]
0006f4  2900              CMP      r1,#0
0006f6  d069              BEQ      |L7.1996|
0006f8  6801              LDR      r1,[r0,#0]
0006fa  2900              CMP      r1,#0
0006fc  bfa4              ITT      GE
0006fe  6840              LDRGE    r0,[r0,#4]
000700  2800              CMPGE    r0,#0
000702  db63              BLT      |L7.1996|
000704  986d              LDR      r0,[sp,#0x1b4]
000706  eb000088          ADD      r0,r0,r8,LSL #2
00070a  6901              LDR      r1,[r0,#0x10]
00070c  2900              CMP      r1,#0
00070e  d05d              BEQ      |L7.1996|
000710  6801              LDR      r1,[r0,#0]
000712  2900              CMP      r1,#0
000714  bfa4              ITT      GE
000716  6840              LDRGE    r0,[r0,#4]
000718  2800              CMPGE    r0,#0
00071a  db57              BLT      |L7.1996|
00071c  9846              LDR      r0,[sp,#0x118]
00071e  eb000088          ADD      r0,r0,r8,LSL #2
000722  6901              LDR      r1,[r0,#0x10]
000724  2900              CMP      r1,#0
000726  d051              BEQ      |L7.1996|
000728  6801              LDR      r1,[r0,#0]
00072a  2900              CMP      r1,#0
00072c  bfa4              ITT      GE
00072e  6840              LDRGE    r0,[r0,#4]
000730  2800              CMPGE    r0,#0
000732  db4b              BLT      |L7.1996|
000734  1c7f              ADDS     r7,r7,#1
000736  42af              CMP      r7,r5
000738  f6ffaf0b          BLT      |L7.1362|
                  |L7.1852|
00073c  2600              MOVS     r6,#0
00073e  ed9f8afe          VLDR     s16,|L7.2872|
000742  2d00              CMP      r5,#0
000744  bfc8              IT       GT
000746  2700              MOVGT    r7,#0
000748  dd4f              BLE      |L7.2026|
                  |L7.1866|
00074a  9860              LDR      r0,[sp,#0x180]
00074c  eb060186          ADD      r1,r6,r6,LSL #2
000750  eb000881          ADD      r8,r0,r1,LSL #2
000754  ed940a1b          VLDR     s0,[r4,#0x6c]
000758  f1040118          ADD      r1,r4,#0x18
00075c  a804              ADD      r0,sp,#0x10
00075e  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
000762  f1040018          ADD      r0,r4,#0x18
000766  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
00076a  9918              LDR      r1,[sp,#0x60]
00076c  eb060246          ADD      r2,r6,r6,LSL #1
000770  eb0101c2          ADD      r1,r1,r2,LSL #3
000774  e9cd8700          STRD     r8,r7,[sp,#0]
000778  4602              MOV      r2,r0
00077a  eeb00a48          VMOV.F32 s0,s16
00077e  ab04              ADD      r3,sp,#0x10
000780  98f2              LDR      r0,[sp,#0x3c8]
000782  f7fffffe          BL       _ZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_ ; Anki::Embedded::Interp2_Affine<unsigned char, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Meshgrid<float>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Point<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
000786  2800              CMP      r0,#0
000788  d02c              BEQ      |L7.2020|
00078a  49ec              LDR      r1,|L7.2876|
00078c  9100              STR      r1,[sp,#0]
00078e  2274              MOVS     r2,#0x74
000790  e9cd2001          STRD     r2,r0,[sp,#4]
000794  a3ea              ADR      r3,|L7.2880|
000796  a2fa              ADR      r2,|L7.2944|
000798  f5017153          ADD      r1,r1,#0x34c
00079c  2005              MOVS     r0,#5
00079e  f7fffffe          BL       _Anki_Log
0007a2  4620              MOV      r0,r4
                  |L7.1956|
0007a4  f50d7d69          ADD      sp,sp,#0x3a4
0007a8  ecbd8b06          VPOP     {d8-d10}
0007ac  b006              ADD      sp,sp,#0x18
0007ae  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.1970|
0007b2  215a              MOVS     r1,#0x5a
0007b4  48e1              LDR      r0,|L7.2876|
0007b6  e9cd0100          STRD     r0,r1,[sp,#0]
0007ba  f5007153          ADD      r1,r0,#0x34c
0007be  a3e0              ADR      r3,|L7.2880|
0007c0  a2f9              ADR      r2,|L7.2984|
0007c2  2005              MOVS     r0,#5
0007c4  f7fffffe          BL       _Anki_Log
0007c8  e0c5              B        |L7.2390|
0007ca  e7ff              B        |L7.1996|
                  |L7.1996|
0007cc  216d              MOVS     r1,#0x6d
0007ce  48db              LDR      r0,|L7.2876|
0007d0  e9cd0100          STRD     r0,r1,[sp,#0]
0007d4  f5007153          ADD      r1,r0,#0x34c
0007d8  a3d9              ADR      r3,|L7.2880|
0007da  a2fc              ADR      r2,|L7.3020|
0007dc  2005              MOVS     r0,#5
0007de  f7fffffe          BL       _Anki_Log
0007e2  e0b8              B        |L7.2390|
                  |L7.2020|
0007e4  1c76              ADDS     r6,r6,#1
0007e6  42ae              CMP      r6,r5
0007e8  dbaf              BLT      |L7.1866|
                  |L7.2026|
0007ea  2000              MOVS     r0,#0
0007ec  900b              STR      r0,[sp,#0x2c]
0007ee  2d00              CMP      r5,#0
0007f0  f3408747          BLE.W    |L7.5762|
                  |L7.2036|
0007f4  a8a4              ADD      r0,sp,#0x290
0007f6  f8dd1408          LDR      r1,[sp,#0x408]
0007fa  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
0007fe  a9a4              ADD      r1,sp,#0x290
000800  a826              ADD      r0,sp,#0x98
000802  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000806  a8ab              ADD      r0,sp,#0x2ac
000808  f8dd1404          LDR      r1,[sp,#0x404]
00080c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000810  a9ab              ADD      r1,sp,#0x2ac
000812  a8d9              ADD      r0,sp,#0x364
000814  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000818  980b              LDR      r0,[sp,#0x2c]
00081a  9918              LDR      r1,[sp,#0x60]
00081c  eb000040          ADD      r0,r0,r0,LSL #1
000820  90e0              STR      r0,[sp,#0x380]
000822  eb0100c0          ADD      r0,r1,r0,LSL #3
000826  68c1              LDR      r1,[r0,#0xc]
000828  9148              STR      r1,[sp,#0x120]
00082a  6800              LDR      r0,[r0,#0]
00082c  9047              STR      r0,[sp,#0x11c]
00082e  980b              LDR      r0,[sp,#0x2c]
000830  9960              LDR      r1,[sp,#0x180]
000832  eb000780          ADD      r7,r0,r0,LSL #2
000836  9839              LDR      r0,[sp,#0xe4]
000838  eb010887          ADD      r8,r1,r7,LSL #2
00083c  eb000687          ADD      r6,r0,r7,LSL #2
000840  2100              MOVS     r1,#0
000842  4640              MOV      r0,r8
000844  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000848  9000              STR      r0,[sp,#0]
00084a  2101              MOVS     r1,#1
00084c  4640              MOV      r0,r8
00084e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000852  4681              MOV      r9,r0
000854  4640              MOV      r0,r8
000856  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00085a  2800              CMP      r0,#0
00085c  d07f              BEQ      |L7.2398|
00085e  4630              MOV      r0,r6
000860  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000864  2800              CMP      r0,#0
000866  d07a              BEQ      |L7.2398|
000868  4640              MOV      r0,r8
00086a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00086e  2800              CMP      r0,#0
000870  d074              BEQ      |L7.2396|
000872  4630              MOV      r0,r6
000874  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000878  2800              CMP      r0,#0
00087a  d07d              BEQ      |L7.2424|
00087c  2100              MOVS     r1,#0
00087e  4640              MOV      r0,r8
000880  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000884  4682              MOV      r10,r0
000886  2100              MOVS     r1,#0
000888  4630              MOV      r0,r6
00088a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00088e  4582              CMP      r10,r0
000890  d172              BNE      |L7.2424|
000892  2101              MOVS     r1,#1
000894  4640              MOV      r0,r8
000896  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00089a  4682              MOV      r10,r0
00089c  2101              MOVS     r1,#1
00089e  4630              MOV      r0,r6
0008a0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0008a4  4582              CMP      r10,r0
0008a6  d167              BNE      |L7.2424|
0008a8  9800              LDR      r0,[sp,#0]
0008aa  2201              MOVS     r2,#1
0008ac  f1a00b01          SUB      r11,r0,#1
0008b0  f1bb0f01          CMP      r11,#1
0008b4  bfc8              IT       GT
0008b6  f1a90c01          SUBGT    r12,r9,#1
0008ba  dd25              BLE      |L7.2312|
                  |L7.2236|
0008bc  f8d81008          LDR      r1,[r8,#8]
0008c0  f8d80010          LDR      r0,[r8,#0x10]
0008c4  fb020a01          MLA      r10,r2,r1,r0
0008c8  68b1              LDR      r1,[r6,#8]
0008ca  6930              LDR      r0,[r6,#0x10]
0008cc  fb020301          MLA      r3,r2,r1,r0
0008d0  2001              MOVS     r0,#1
0008d2  ed838a00          VSTR     s16,[r3,#0]
0008d6  f1bc0f01          CMP      r12,#1
0008da  dd0e              BLE      |L7.2298|
                  |L7.2268|
0008dc  eb0a0180          ADD      r1,r10,r0,LSL #2
0008e0  edd10a01          VLDR     s1,[r1,#4]
0008e4  ed111a01          VLDR     s2,[r1,#-4]
0008e8  eb030180          ADD      r1,r3,r0,LSL #2
0008ec  1c40              ADDS     r0,r0,#1
0008ee  ee700ac1          VSUB.F32 s1,s1,s2
0008f2  4584              CMP      r12,r0
0008f4  edc10a00          VSTR     s1,[r1,#0]
0008f8  dcf0              BGT      |L7.2268|
                  |L7.2298|
0008fa  eb030089          ADD      r0,r3,r9,LSL #2
0008fe  1c52              ADDS     r2,r2,#1
000900  ed008a01          VSTR     s16,[r0,#-4]
000904  455a              CMP      r2,r11
000906  dbd9              BLT      |L7.2236|
                  |L7.2312|
000908  68b2              LDR      r2,[r6,#8]
00090a  6930              LDR      r0,[r6,#0x10]
00090c  2100              MOVS     r1,#0
00090e  9b00              LDR      r3,[sp,#0]
000910  fb010102          MLA      r1,r1,r2,r0
000914  1e5b              SUBS     r3,r3,#1
000916  fb030202          MLA      r2,r3,r2,r0
00091a  2000              MOVS     r0,#0
00091c  f1b90f00          CMP      r9,#0
000920  dd0a              BLE      |L7.2360|
                  |L7.2338|
000922  eb010380          ADD      r3,r1,r0,LSL #2
000926  ed838a00          VSTR     s16,[r3,#0]
00092a  eb020380          ADD      r3,r2,r0,LSL #2
00092e  1c40              ADDS     r0,r0,#1
000930  ed838a00          VSTR     s16,[r3,#0]
000934  4581              CMP      r9,r0
000936  dcf4              BGT      |L7.2338|
                  |L7.2360|
000938  2000              MOVS     r0,#0
                  |L7.2362|
00093a  2800              CMP      r0,#0
00093c  d029              BEQ      |L7.2450|
00093e  497f              LDR      r1,|L7.2876|
000940  9100              STR      r1,[sp,#0]
000942  2283              MOVS     r2,#0x83
000944  e9cd2001          STRD     r2,r0,[sp,#4]
000948  a37d              ADR      r3,|L7.2880|
00094a  a2a9              ADR      r2,|L7.3056|
00094c  f5017153          ADD      r1,r1,#0x34c
000950  2005              MOVS     r0,#5
000952  f7fffffe          BL       _Anki_Log
                  |L7.2390|
000956  4620              MOV      r0,r4
000958  e724              B        |L7.1956|
00095a  e000              B        |L7.2398|
                  |L7.2396|
00095c  e00c              B        |L7.2424|
                  |L7.2398|
00095e  2134              MOVS     r1,#0x34
000960  48ad              LDR      r0,|L7.3096|
000962  e9cd0100          STRD     r0,r1,[sp,#0]
000966  a3ad              ADR      r3,|L7.3100|
000968  a2bc              ADR      r2,|L7.3164|
00096a  a1c0              ADR      r1,|L7.3180|
00096c  2005              MOVS     r0,#5
00096e  f7fffffe          BL       _Anki_Log
000972  f04f6080          MOV      r0,#0x4000000
000976  e7e0              B        |L7.2362|
                  |L7.2424|
000978  2137              MOVS     r1,#0x37
00097a  48a7              LDR      r0,|L7.3096|
00097c  e9cd0100          STRD     r0,r1,[sp,#0]
000980  a3a6              ADR      r3,|L7.3100|
000982  a2bf              ADR      r2,|L7.3200|
000984  a1b9              ADR      r1,|L7.3180|
000986  2005              MOVS     r0,#5
000988  f7fffffe          BL       _Anki_Log
00098c  f04f60a0          MOV      r0,#0x5000000
000990  e7d3              B        |L7.2362|
                  |L7.2450|
000992  9860              LDR      r0,[sp,#0x180]
000994  2100              MOVS     r1,#0
000996  eb000887          ADD      r8,r0,r7,LSL #2
00099a  986d              LDR      r0,[sp,#0x1b4]
00099c  eb000687          ADD      r6,r0,r7,LSL #2
0009a0  4640              MOV      r0,r8
0009a2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0009a6  9000              STR      r0,[sp,#0]
0009a8  2101              MOVS     r1,#1
0009aa  4640              MOV      r0,r8
0009ac  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0009b0  4681              MOV      r9,r0
0009b2  4640              MOV      r0,r8
0009b4  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0009b8  2800              CMP      r0,#0
0009ba  d041              BEQ      |L7.2624|
0009bc  4630              MOV      r0,r6
0009be  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0009c2  b3e8              CBZ      r0,|L7.2624|
0009c4  4640              MOV      r0,r8
0009c6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0009ca  2800              CMP      r0,#0
0009cc  d07a              BEQ      |L7.2756|
0009ce  4630              MOV      r0,r6
0009d0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0009d4  2800              CMP      r0,#0
0009d6  d075              BEQ      |L7.2756|
0009d8  2100              MOVS     r1,#0
0009da  4640              MOV      r0,r8
0009dc  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0009e0  4682              MOV      r10,r0
0009e2  2100              MOVS     r1,#0
0009e4  4630              MOV      r0,r6
0009e6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0009ea  4582              CMP      r10,r0
0009ec  d178              BNE      |L7.2784|
0009ee  2101              MOVS     r1,#1
0009f0  4640              MOV      r0,r8
0009f2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0009f6  4682              MOV      r10,r0
0009f8  2101              MOVS     r1,#1
0009fa  4630              MOV      r0,r6
0009fc  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000a00  4582              CMP      r10,r0
000a02  d16d              BNE      |L7.2784|
000a04  9900              LDR      r1,[sp,#0]
000a06  2001              MOVS     r0,#1
000a08  f1a10b01          SUB      r11,r1,#1
000a0c  f1bb0f01          CMP      r11,#1
000a10  bfc8              IT       GT
000a12  f1a90101          SUBGT    r1,r9,#1
000a16  dd2e              BLE      |L7.2678|
                  |L7.2584|
000a18  f8d8c010          LDR      r12,[r8,#0x10]
000a1c  f8d83008          LDR      r3,[r8,#8]
000a20  1e42              SUBS     r2,r0,#1
000a22  fb02c203          MLA      r2,r2,r3,r12
000a26  f1000a01          ADD      r10,r0,#1
000a2a  fb0acc03          MLA      r12,r10,r3,r12
000a2e  f8d6a008          LDR      r10,[r6,#8]
000a32  6933              LDR      r3,[r6,#0x10]
000a34  fb003a0a          MLA      r10,r0,r10,r3
000a38  2301              MOVS     r3,#1
000a3a  ed8a8a00          VSTR     s16,[r10,#0]
000a3e  e000              B        |L7.2626|
                  |L7.2624|
000a40  e041              B        |L7.2758|
                  |L7.2626|
000a42  2901              CMP      r1,#1
000a44  dd10              BLE      |L7.2664|
                  |L7.2630|
000a46  eb0c0e83          ADD      lr,r12,r3,LSL #2
000a4a  edde0a00          VLDR     s1,[lr,#0]
000a4e  eb020e83          ADD      lr,r2,r3,LSL #2
000a52  ed9e1a00          VLDR     s2,[lr,#0]
000a56  eb0a0e83          ADD      lr,r10,r3,LSL #2
000a5a  1c5b              ADDS     r3,r3,#1
000a5c  ee700ac1          VSUB.F32 s1,s1,s2
000a60  4299              CMP      r1,r3
000a62  edce0a00          VSTR     s1,[lr,#0]
000a66  dcee              BGT      |L7.2630|
                  |L7.2664|
000a68  eb0a0289          ADD      r2,r10,r9,LSL #2
000a6c  1c40              ADDS     r0,r0,#1
000a6e  ed028a01          VSTR     s16,[r2,#-4]
000a72  4558              CMP      r0,r11
000a74  dbd0              BLT      |L7.2584|
                  |L7.2678|
000a76  68b2              LDR      r2,[r6,#8]
000a78  6930              LDR      r0,[r6,#0x10]
000a7a  2100              MOVS     r1,#0
000a7c  9b00              LDR      r3,[sp,#0]
000a7e  fb010102          MLA      r1,r1,r2,r0
000a82  1e5b              SUBS     r3,r3,#1
000a84  fb030202          MLA      r2,r3,r2,r0
000a88  2000              MOVS     r0,#0
000a8a  f1b90f00          CMP      r9,#0
000a8e  dd0a              BLE      |L7.2726|
                  |L7.2704|
000a90  eb010380          ADD      r3,r1,r0,LSL #2
000a94  ed838a00          VSTR     s16,[r3,#0]
000a98  eb020380          ADD      r3,r2,r0,LSL #2
000a9c  1c40              ADDS     r0,r0,#1
000a9e  ed838a00          VSTR     s16,[r3,#0]
000aa2  4581              CMP      r9,r0
000aa4  dcf4              BGT      |L7.2704|
                  |L7.2726|
000aa6  2000              MOVS     r0,#0
                  |L7.2728|
000aa8  b338              CBZ      r0,|L7.2810|
000aaa  4924              LDR      r1,|L7.2876|
000aac  9100              STR      r1,[sp,#0]
000aae  2288              MOVS     r2,#0x88
000ab0  e9cd2001          STRD     r2,r0,[sp,#4]
000ab4  a322              ADR      r3,|L7.2880|
000ab6  a278              ADR      r2,|L7.3224|
000ab8  f5017153          ADD      r1,r1,#0x34c
000abc  2005              MOVS     r0,#5
000abe  f7fffffe          BL       _Anki_Log
000ac2  e748              B        |L7.2390|
                  |L7.2756|
000ac4  e00c              B        |L7.2784|
                  |L7.2758|
000ac6  215a              MOVS     r1,#0x5a
000ac8  487d              LDR      r0,|L7.3264|
000aca  e9cd0100          STRD     r0,r1,[sp,#0]
000ace  a353              ADR      r3,|L7.3100|
000ad0  a262              ADR      r2,|L7.3164|
000ad2  a17c              ADR      r1,|L7.3268|
000ad4  2005              MOVS     r0,#5
000ad6  f7fffffe          BL       _Anki_Log
000ada  f04f6080          MOV      r0,#0x4000000
000ade  e7e3              B        |L7.2728|
                  |L7.2784|
000ae0  215d              MOVS     r1,#0x5d
000ae2  4877              LDR      r0,|L7.3264|
000ae4  e9cd0100          STRD     r0,r1,[sp,#0]
000ae8  a34c              ADR      r3,|L7.3100|
000aea  a265              ADR      r2,|L7.3200|
000aec  a175              ADR      r1,|L7.3268|
000aee  2005              MOVS     r0,#5
000af0  f7fffffe          BL       _Anki_Log
000af4  f04f60a0          MOV      r0,#0x5000000
000af8  e7d6              B        |L7.2728|
                  |L7.2810|
000afa  2300              MOVS     r3,#0
000afc  461a              MOV      r2,r3
000afe  2101              MOVS     r1,#1
000b00  a8d8              ADD      r0,sp,#0x360
000b02  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000b06  6800              LDR      r0,[r0,#0]
000b08  9000              STR      r0,[sp,#0]
000b0a  e9dd2147          LDRD     r2,r1,[sp,#0x11c]
000b0e  ab26              ADD      r3,sp,#0x98
000b10  a895              ADD      r0,sp,#0x254
000b12  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000b16  9839              LDR      r0,[sp,#0xe4]
000b18  aa6e              ADD      r2,sp,#0x1b8
000b1a  eb000087          ADD      r0,r0,r7,LSL #2
000b1e  4669              MOV      r1,sp
000b20  e9d0c601          LDRD     r12,r6,[r0,#4]
000b24  f8d08000          LDR      r8,[r0,#0]
000b28  68c3              LDR      r3,[r0,#0xc]
000b2a  6900              LDR      r0,[r0,#0x10]
000b2c  e9cd6302          STRD     r6,r3,[sp,#8]
000b30  9004              STR      r0,[sp,#0x10]
000b32  2600              MOVS     r6,#0
000b34  4610              MOV      r0,r2
000b36  e0cf              B        |L7.3288|
                  |L7.2872|
000b38  00000000          DCFS     0x00000000 ; 0
                  |L7.2876|
                          DCD      ||.constdata||
                  |L7.2880|
000b40  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\lucasKanade_SampledPr"
000b44  6f726574
000b48  6563685c
000b4c  76697369
000b50  6f6e5c72
000b54  6f626f74
000b58  5c737263
000b5c  5c6c7563
000b60  61734b61
000b64  6e616465
000b68  5f53616d
000b6c  706c6564
000b70  5072    
000b72  6f6a6563          DCB      "ojective.cpp",0
000b76  74697665
000b7a  2e637070
000b7e  00      
000b7f  00                DCB      0
                  |L7.2944|
000b80  496e7465          DCB      "Interp2_Affine failed with code 0x%x",0
000b84  7270325f
000b88  41666669
000b8c  6e652066
000b90  61696c65
000b94  64207769
000b98  74682063
000b9c  6f646520
000ba0  30782578
000ba4  00      
000ba5  00                DCB      0
000ba6  00                DCB      0
000ba7  00                DCB      0
                  |L7.2984|
000ba8  436f756c          DCB      "Could not allocate pyramid lists",0
000bac  64206e6f
000bb0  7420616c
000bb4  6c6f6361
000bb8  74652070
000bbc  7972616d
000bc0  6964206c
000bc4  69737473
000bc8  00      
000bc9  00                DCB      0
000bca  00                DCB      0
000bcb  00                DCB      0
                  |L7.3020|
000bcc  436f756c          DCB      "Could not allocate pyramid images",0
000bd0  64206e6f
000bd4  7420616c
000bd8  6c6f6361
000bdc  74652070
000be0  7972616d
000be4  69642069
000be8  6d616765
000bec  7300    
000bee  00                DCB      0
000bef  00                DCB      0
                  |L7.3056|
000bf0  436f6d70          DCB      "ComputeXGradient failed with code 0x%x",0
000bf4  75746558
000bf8  47726164
000bfc  69656e74
000c00  20666169
000c04  6c656420
000c08  77697468
000c0c  20636f64
000c10  65203078
000c14  257800  
000c17  00                DCB      0
                  |L7.3096|
                          DCD      _ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIfffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeXGradient<float, float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
                  |L7.3100|
000c1c  2e2e5c63          DCB      "..\\coretech\\vision\\include\\anki/vision/robot/imageP"
000c20  6f726574
000c24  6563685c
000c28  76697369
000c2c  6f6e5c69
000c30  6e636c75
000c34  64655c61
000c38  6e6b692f
000c3c  76697369
000c40  6f6e2f72
000c44  6f626f74
000c48  2f696d61
000c4c  676550  
000c4f  726f6365          DCB      "rocessing.h",0
000c53  7373696e
000c57  672e6800
000c5b  00                DCB      0
                  |L7.3164|
000c5c  496e7661          DCB      "Invalid objects",0
000c60  6c696420
000c64  6f626a65
000c68  63747300
                  |L7.3180|
000c6c  436f6d70          DCB      "ComputeXGradient",0
000c70  75746558
000c74  47726164
000c78  69656e74
000c7c  00      
000c7d  00                DCB      0
000c7e  00                DCB      0
000c7f  00                DCB      0
                  |L7.3200|
000c80  496d6167          DCB      "Image sizes don't match",0
000c84  65207369
000c88  7a657320
000c8c  646f6e27
000c90  74206d61
000c94  74636800
                  |L7.3224|
000c98  436f6d70          DCB      "ComputeYGradient failed with code 0x%x",0
000c9c  75746559
000ca0  47726164
000ca4  69656e74
000ca8  20666169
000cac  6c656420
000cb0  77697468
000cb4  20636f64
000cb8  65203078
000cbc  257800  
000cbf  00                DCB      0
                  |L7.3264|
                          DCD      _ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIfffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeYGradient<float, float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
                  |L7.3268|
000cc4  436f6d70          DCB      "ComputeYGradient",0
000cc8  75746559
000ccc  47726164
000cd0  69656e74
000cd4  00      
000cd5  00                DCB      0
000cd6  00                DCB      0
000cd7  00                DCB      0
                  |L7.3288|
000cd8  e9cd8c00          STRD     r8,r12,[sp,#0]
000cdc  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000ce0  f8806030          STRB     r6,[r0,#0x30]
000ce4  904b              STR      r0,[sp,#0x12c]
000ce6  9839              LDR      r0,[sp,#0xe4]
000ce8  aa7b              ADD      r2,sp,#0x1ec
000cea  eb000087          ADD      r0,r0,r7,LSL #2
000cee  4669              MOV      r1,sp
000cf0  e9d03802          LDRD     r3,r8,[r0,#8]
000cf4  e9d06c00          LDRD     r6,r12,[r0,#0]
000cf8  6900              LDR      r0,[r0,#0x10]
000cfa  e9cd6c00          STRD     r6,r12,[sp,#0]
000cfe  9302              STR      r3,[sp,#8]
000d00  e9cd8003          STRD     r8,r0,[sp,#0xc]
000d04  2600              MOVS     r6,#0
000d06  4610              MOV      r0,r2
000d08  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000d0c  f8806030          STRB     r6,[r0,#0x30]
000d10  904c              STR      r0,[sp,#0x130]
000d12  a995              ADD      r1,sp,#0x254
000d14  a888              ADD      r0,sp,#0x220
000d16  e8b1114c          LDM      r1!,{r2,r3,r6,r8,r12}
000d1a  e88d114c          STM      sp,{r2,r3,r6,r8,r12}
000d1e  4669              MOV      r1,sp
000d20  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000d24  9900              LDR      r1,[sp,#0]
000d26  2900              CMP      r1,#0
000d28  bfc4              ITT      GT
000d2a  9901              LDRGT    r1,[sp,#4]
000d2c  2900              CMPGT    r1,#0
000d2e  f3408156          BLE.W    |L7.4062|
000d32  e9dd1200          LDRD     r1,r2,[sp,#0]
000d36  4351              MULS     r1,r2,r1
000d38  2900              CMP      r1,#0
000d3a  f0008150          BEQ.W    |L7.4062|
000d3e  9b02              LDR      r3,[sp,#8]
000d40  9a04              LDR      r2,[sp,#0x10]
000d42  2100              MOVS     r1,#0
000d44  fb012103          MLA      r1,r1,r3,r2
                  |L7.3400|
000d48  6301              STR      r1,[r0,#0x30]
000d4a  4682              MOV      r10,r0
000d4c  f100010c          ADD      r1,r0,#0xc
000d50  f8d0b008          LDR      r11,[r0,#8]
000d54  e891100f          LDM      r1,{r0-r3,r12}
000d58  e9da6800          LDRD     r6,r8,[r10,#0]
000d5c  f8cdb000          STR      r11,[sp,#0]
000d60  e9cd6849          STRD     r6,r8,[sp,#0x124]
000d64  e9da6808          LDRD     r6,r8,[r10,#0x20]
000d68  f8dab028          LDR      r11,[r10,#0x28]
000d6c  f8da902c          LDR      r9,[r10,#0x2c]
000d70  f8daa030          LDR      r10,[r10,#0x30]
000d74  f10d0e04          ADD      lr,sp,#4
000d78  f8cdb020          STR      r11,[sp,#0x20]
000d7c  e8ae100f          STM      lr!,{r0-r3,r12}
000d80  e9cd6806          STRD     r6,r8,[sp,#0x18]
000d84  e9cd9a09          STRD     r9,r10,[sp,#0x24]
000d88  e9dd014b          LDRD     r0,r1,[sp,#0x12c]
000d8c  e9dd2349          LDRD     r2,r3,[sp,#0x124]
000d90  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
000d94  986d              LDR      r0,[sp,#0x1b4]
000d96  aa7b              ADD      r2,sp,#0x1ec
000d98  eb000087          ADD      r0,r0,r7,LSL #2
000d9c  4669              MOV      r1,sp
000d9e  e9d03800          LDRD     r3,r8,[r0,#0]
000da2  f8d0c008          LDR      r12,[r0,#8]
000da6  68c6              LDR      r6,[r0,#0xc]
000da8  6900              LDR      r0,[r0,#0x10]
000daa  f8cdc008          STR      r12,[sp,#8]
000dae  e9cd6003          STRD     r6,r0,[sp,#0xc]
000db2  e9cd3800          STRD     r3,r8,[sp,#0]
000db6  2600              MOVS     r6,#0
000db8  4610              MOV      r0,r2
000dba  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000dbe  f8806030          STRB     r6,[r0,#0x30]
000dc2  904b              STR      r0,[sp,#0x12c]
000dc4  986d              LDR      r0,[sp,#0x1b4]
000dc6  aa6e              ADD      r2,sp,#0x1b8
000dc8  eb000087          ADD      r0,r0,r7,LSL #2
000dcc  4669              MOV      r1,sp
000dce  e9d03800          LDRD     r3,r8,[r0,#0]
000dd2  f8d0c008          LDR      r12,[r0,#8]
000dd6  68c6              LDR      r6,[r0,#0xc]
000dd8  6900              LDR      r0,[r0,#0x10]
000dda  f8cdc008          STR      r12,[sp,#8]
000dde  e9cd6003          STRD     r6,r0,[sp,#0xc]
000de2  e9cd3800          STRD     r3,r8,[sp,#0]
000de6  2600              MOVS     r6,#0
000de8  4610              MOV      r0,r2
000dea  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000dee  f8806030          STRB     r6,[r0,#0x30]
000df2  904c              STR      r0,[sp,#0x130]
000df4  9846              LDR      r0,[sp,#0x118]
000df6  aa88              ADD      r2,sp,#0x220
000df8  eb000087          ADD      r0,r0,r7,LSL #2
000dfc  4669              MOV      r1,sp
000dfe  e9d06801          LDRD     r6,r8,[r0,#4]
000e02  6803              LDR      r3,[r0,#0]
000e04  e9d0c003          LDRD     r12,r0,[r0,#0xc]
000e08  f8cd8008          STR      r8,[sp,#8]
000e0c  e9cdc003          STRD     r12,r0,[sp,#0xc]
000e10  e9cd3600          STRD     r3,r6,[sp,#0]
000e14  4610              MOV      r0,r2
000e16  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000e1a  9900              LDR      r1,[sp,#0]
000e1c  2900              CMP      r1,#0
000e1e  bfc4              ITT      GT
000e20  9901              LDRGT    r1,[sp,#4]
000e22  2900              CMPGT    r1,#0
000e24  dd7d              BLE      |L7.3874|
000e26  e9dd1200          LDRD     r1,r2,[sp,#0]
000e2a  4351              MULS     r1,r2,r1
000e2c  2900              CMP      r1,#0
000e2e  d078              BEQ      |L7.3874|
000e30  9b02              LDR      r3,[sp,#8]
000e32  9a04              LDR      r2,[sp,#0x10]
000e34  2100              MOVS     r1,#0
000e36  fb012103          MLA      r1,r1,r3,r2
                  |L7.3642|
000e3a  6301              STR      r1,[r0,#0x30]
000e3c  4681              MOV      r9,r0
000e3e  f100010c          ADD      r1,r0,#0xc
000e42  f8d0a008          LDR      r10,[r0,#8]
000e46  e891100f          LDM      r1,{r0-r3,r12}
000e4a  e9d96800          LDRD     r6,r8,[r9,#0]
000e4e  f8cda000          STR      r10,[sp,#0]
000e52  e9cd6849          STRD     r6,r8,[sp,#0x124]
000e56  e9d96b08          LDRD     r6,r11,[r9,#0x20]
000e5a  e9d98a0a          LDRD     r8,r10,[r9,#0x28]
000e5e  f8d99030          LDR      r9,[r9,#0x30]
000e62  f10d0e04          ADD      lr,sp,#4
000e66  f8cda020          STR      r10,[sp,#0x20]
000e6a  e8ae100f          STM      lr!,{r0-r3,r12}
000e6e  e9cd6b06          STRD     r6,r11,[sp,#0x18]
000e72  f8dda020          LDR      r10,[sp,#0x20]
000e76  f8cd9028          STR      r9,[sp,#0x28]
000e7a  e9cd8a08          STRD     r8,r10,[sp,#0x20]
000e7e  e9dd014b          LDRD     r0,r1,[sp,#0x12c]
000e82  e9dd2349          LDRD     r2,r3,[sp,#0x124]
000e86  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
000e8a  f50d7815          ADD      r8,sp,#0x254
000e8e  a87b              ADD      r0,sp,#0x1ec
000e90  e8b8104e          LDM      r8!,{r1-r3,r6,r12}
000e94  e88d104e          STM      sp,{r1-r3,r6,r12}
000e98  2600              MOVS     r6,#0
000e9a  4669              MOV      r1,sp
000e9c  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000ea0  f8806030          STRB     r6,[r0,#0x30]
000ea4  904b              STR      r0,[sp,#0x12c]
000ea6  9846              LDR      r0,[sp,#0x118]
000ea8  aa6e              ADD      r2,sp,#0x1b8
000eaa  eb000087          ADD      r0,r0,r7,LSL #2
000eae  e9d01300          LDRD     r1,r3,[r0,#0]
000eb2  f8d0c008          LDR      r12,[r0,#8]
000eb6  68c6              LDR      r6,[r0,#0xc]
000eb8  6900              LDR      r0,[r0,#0x10]
000eba  f8cdc008          STR      r12,[sp,#8]
000ebe  e9cd6003          STRD     r6,r0,[sp,#0xc]
000ec2  e9cd1300          STRD     r1,r3,[sp,#0]
000ec6  2600              MOVS     r6,#0
000ec8  4669              MOV      r1,sp
000eca  4610              MOV      r0,r2
000ecc  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000ed0  f8806030          STRB     r6,[r0,#0x30]
000ed4  904c              STR      r0,[sp,#0x130]
000ed6  9846              LDR      r0,[sp,#0x118]
000ed8  aa88              ADD      r2,sp,#0x220
000eda  eb000087          ADD      r0,r0,r7,LSL #2
000ede  e9d01601          LDRD     r1,r6,[r0,#4]
000ee2  f8d0c000          LDR      r12,[r0,#0]
000ee6  68c3              LDR      r3,[r0,#0xc]
000ee8  6900              LDR      r0,[r0,#0x10]
000eea  f8cdc000          STR      r12,[sp,#0]
000eee  e9cd1601          STRD     r1,r6,[sp,#4]
000ef2  e9cd3003          STRD     r3,r0,[sp,#0xc]
000ef6  4669              MOV      r1,sp
000ef8  4610              MOV      r0,r2
000efa  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000efe  9900              LDR      r1,[sp,#0]
000f00  2900              CMP      r1,#0
000f02  bfc4              ITT      GT
000f04  9901              LDRGT    r1,[sp,#4]
000f06  2900              CMPGT    r1,#0
000f08  dd6d              BLE      |L7.4070|
000f0a  e9dd1200          LDRD     r1,r2,[sp,#0]
000f0e  4351              MULS     r1,r2,r1
000f10  b3e9              CBZ      r1,|L7.3982|
000f12  9b02              LDR      r3,[sp,#8]
000f14  9a04              LDR      r2,[sp,#0x10]
000f16  2100              MOVS     r1,#0
000f18  fb012103          MLA      r1,r1,r3,r2
                  |L7.3868|
000f1c  4682              MOV      r10,r0
000f1e  6301              STR      r1,[r0,#0x30]
000f20  e000              B        |L7.3876|
                  |L7.3874|
000f22  e05e              B        |L7.4066|
                  |L7.3876|
000f24  f100010c          ADD      r1,r0,#0xc
000f28  f8d0e008          LDR      lr,[r0,#8]
000f2c  e891100f          LDM      r1,{r0-r3,r12}
000f30  e9da8900          LDRD     r8,r9,[r10,#0]
000f34  f8cde000          STR      lr,[sp,#0]
000f38  e9cd8949          STRD     r8,r9,[sp,#0x124]
000f3c  e9da6809          LDRD     r6,r8,[r10,#0x24]
000f40  f8dab020          LDR      r11,[r10,#0x20]
000f44  f8da902c          LDR      r9,[r10,#0x2c]
000f48  f8daa030          LDR      r10,[r10,#0x30]
000f4c  f8cdb004          STR      r11,[sp,#4]
000f50  f10d0e04          ADD      lr,sp,#4
000f54  f8cdb018          STR      r11,[sp,#0x18]
000f58  f8cda020          STR      r10,[sp,#0x20]
000f5c  e8ae100f          STM      lr!,{r0-r3,r12}
000f60  a907              ADD      r1,sp,#0x1c
000f62  e8a10740          STM      r1!,{r6,r8-r10}
000f66  e9dd014b          LDRD     r0,r1,[sp,#0x12c]
000f6a  e9dd2349          LDRD     r2,r3,[sp,#0x124]
000f6e  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Add<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
000f72  9846              LDR      r0,[sp,#0x118]
000f74  ab26              ADD      r3,sp,#0x98
000f76  eb000287          ADD      r2,r0,r7,LSL #2
000f7a  2100              MOVS     r1,#0
000f7c  a89f              ADD      r0,sp,#0x27c
000f7e  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::MemoryStack&)
000f82  e9dd0147          LDRD     r0,r1,[sp,#0x11c]
000f86  ae9a              ADD      r6,sp,#0x268
000f88  f04f0a01          MOV      r10,#1
000f8c  e000              B        |L7.3984|
                  |L7.3982|
000f8e  e02a              B        |L7.4070|
                  |L7.3984|
000f90  fb01f900          MUL      r9,r1,r0
000f94  2300              MOVS     r3,#0
000f96  f10d0b98          ADD      r11,sp,#0x98
000f9a  461a              MOV      r2,r3
000f9c  4651              MOV      r1,r10
000f9e  a8d8              ADD      r0,sp,#0x360
000fa0  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000fa4  6800              LDR      r0,[r0,#0]
000fa6  9004              STR      r0,[sp,#0x10]
000fa8  f106000c          ADD      r0,r6,#0xc
000fac  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000fb0  f1a0060c          SUB      r6,r0,#0xc
000fb4  f04f30ff          MOV      r0,#0xffffffff
000fb8  6030              STR      r0,[r6,#0]
000fba  6070              STR      r0,[r6,#4]
000fbc  60b0              STR      r0,[r6,#8]
000fbe  2000              MOVS     r0,#0
000fc0  6130              STR      r0,[r6,#0x10]
000fc2  f1b90f00          CMP      r9,#0
000fc6  da10              BGE      |L7.4074|
000fc8  217d              MOVS     r1,#0x7d
000fca  48ee              LDR      r0,|L7.4996|
000fcc  e9cd0100          STRD     r0,r1,[sp,#0]
000fd0  a3ed              ADR      r3,|L7.5000|
000fd2  a2fb              ADR      r2,|L7.5056|
000fd4  a1fe              ADR      r1,|L7.5072|
000fd6  2005              MOVS     r0,#5
000fd8  f7fffffe          BL       _Anki_Log
000fdc  e054              B        |L7.4232|
                  |L7.4062|
000fde  2100              MOVS     r1,#0
000fe0  e6b2              B        |L7.3400|
                  |L7.4066|
000fe2  2100              MOVS     r1,#0
000fe4  e729              B        |L7.3642|
                  |L7.4070|
000fe6  2100              MOVS     r1,#0
000fe8  e798              B        |L7.3868|
                  |L7.4074|
000fea  2000              MOVS     r0,#0
000fec  9003              STR      r0,[sp,#0xc]
000fee  f1b90f01          CMP      r9,#1
000ff2  bfd4              ITE      LE
000ff4  2001              MOVLE    r0,#1
000ff6  4648              MOVGT    r0,r9
000ff8  0040              LSLS     r0,r0,#1
000ffa  300f              ADDS     r0,r0,#0xf
000ffc  f020080f          BIC      r8,r0,#0xf
001000  a803              ADD      r0,sp,#0xc
001002  9005              STR      r0,[sp,#0x14]
001004  9804              LDR      r0,[sp,#0x10]
001006  9002              STR      r0,[sp,#8]
001008  f1b80f00          CMP      r8,#0
00100c  dc0a              BGT      |L7.4132|
00100e  f240310b          MOV      r1,#0x30b
001012  48f4              LDR      r0,|L7.5092|
001014  e9cd0100          STRD     r0,r1,[sp,#0]
001018  a3db              ADR      r3,|L7.5000|
00101a  a2e9              ADR      r2,|L7.5056|
00101c  a1f2              ADR      r1,|L7.5096|
00101e  2005              MOVS     r0,#5
001020  f7fffffe          BL       _Anki_Log
                  |L7.4132|
001024  a802              ADD      r0,sp,#8
001026  f8c68008          STR      r8,[r6,#8]
00102a  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00102e  4602              MOV      r2,r0
001030  4641              MOV      r1,r8
001032  4658              MOV      r0,r11
001034  9b05              LDR      r3,[sp,#0x14]
001036  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
00103a  ea5f0800          MOVS     r8,r0
00103e  e9ddb003          LDRD     r11,r0,[sp,#0xc]
001042  9005              STR      r0,[sp,#0x14]
001044  d00e              BEQ      |L7.4196|
001046  f1bb0f10          CMP      r11,#0x10
00104a  d27c              BCS      |L7.4422|
00104c  f2403123          MOV      r1,#0x323
001050  48f0              LDR      r0,|L7.5140|
001052  e9cd0100          STRD     r0,r1,[sp,#0]
001056  a3cc              ADR      r3,|L7.5000|
001058  a2ef              ADR      r2,|L7.5144|
00105a  a1f4              ADR      r1,|L7.5164|
00105c  2005              MOVS     r0,#5
00105e  f7fffffe          BL       _Anki_Log
001062  e011              B        |L7.4232|
                  |L7.4196|
001064  f240311e          MOV      r1,#0x31e
001068  48ea              LDR      r0,|L7.5140|
00106a  e9cd0100          STRD     r0,r1,[sp,#0]
00106e  a3c6              ADR      r3,|L7.5000|
001070  a2f6              ADR      r2,|L7.5196|
001072  a1fd              ADR      r1,|L7.5224|
001074  2005              MOVS     r0,#5
001076  f7fffffe          BL       _Anki_Log
00107a  f04f30ff          MOV      r0,#0xffffffff
00107e  6030              STR      r0,[r6,#0]
001080  6070              STR      r0,[r6,#4]
001082  60b0              STR      r0,[r6,#8]
001084  2000              MOVS     r0,#0
                  |L7.4230|
001086  6130              STR      r0,[r6,#0x10]
                  |L7.4232|
001088  98a3              LDR      r0,[sp,#0x28c]
00108a  2800              CMP      r0,#0
00108c  d070              BEQ      |L7.4464|
00108e  989f              LDR      r0,[sp,#0x27c]
001090  2800              CMP      r0,#0
001092  bfa4              ITT      GE
001094  98a0              LDRGE    r0,[sp,#0x280]
001096  2800              CMPGE    r0,#0
001098  db6a              BLT      |L7.4464|
00109a  989e              LDR      r0,[sp,#0x278]
00109c  2800              CMP      r0,#0
00109e  d067              BEQ      |L7.4464|
0010a0  989a              LDR      r0,[sp,#0x268]
0010a2  2800              CMP      r0,#0
0010a4  bfa4              ITT      GE
0010a6  989b              LDRGE    r0,[sp,#0x26c]
0010a8  2800              CMPGE    r0,#0
0010aa  db61              BLT      |L7.4464|
0010ac  980b              LDR      r0,[sp,#0x2c]
0010ae  f8d410a4          LDR      r1,[r4,#0xa4]
0010b2  eb000280          ADD      r2,r0,r0,LSL #2
0010b6  eb0200c0          ADD      r0,r2,r0,LSL #3
0010ba  9009              STR      r0,[sp,#0x24]
0010bc  eb010080          ADD      r0,r1,r0,LSL #2
0010c0  abe1              ADD      r3,sp,#0x384
0010c2  68c0              LDR      r0,[r0,#0xc]
0010c4  9008              STR      r0,[sp,#0x20]
0010c6  a89a              ADD      r0,sp,#0x268
0010c8  9000              STR      r0,[sp,#0]
0010ca  2114              MOVS     r1,#0x14
0010cc  a89f              ADD      r0,sp,#0x27c
0010ce  9a08              LDR      r2,[sp,#0x20]
0010d0  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective17ApproximateSelectERKNS0_5ArrayIfEEiiRiRNS3_ItEE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::ApproximateSelect(const Anki::Embedded::Array<float>&, int, int, int&, Anki::Embedded::Array<unsigned short>&)
0010d4  98e1              LDR      r0,[sp,#0x384]
0010d6  2800              CMP      r0,#0
0010d8  f43fac3d          BEQ      |L7.2390|
0010dc  a8bf              ADD      r0,sp,#0x2fc
0010de  9002              STR      r0,[sp,#8]
0010e0  9918              LDR      r1,[sp,#0x60]
0010e2  98e0              LDR      r0,[sp,#0x380]
0010e4  2300              MOVS     r3,#0
0010e6  eb0106c0          ADD      r6,r1,r0,LSL #3
0010ea  f10d0898          ADD      r8,sp,#0x98
0010ee  461a              MOV      r2,r3
0010f0  2101              MOVS     r1,#1
0010f2  a8d8              ADD      r0,sp,#0x360
0010f4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0010f8  68f2              LDR      r2,[r6,#0xc]
0010fa  6831              LDR      r1,[r6,#0]
0010fc  6800              LDR      r0,[r0,#0]
0010fe  434a              MULS     r2,r1,r2
001100  9000              STR      r0,[sp,#0]
001102  4643              MOV      r3,r8
001104  2101              MOVS     r1,#1
001106  a803              ADD      r0,sp,#0xc
001108  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00110c  e9dd0106          LDRD     r0,r1,[sp,#0x18]
001110  e9cd0100          STRD     r0,r1,[sp,#0]
001114  e9dd1203          LDRD     r1,r2,[sp,#0xc]
001118  a8b2              ADD      r0,sp,#0x2c8
00111a  9b05              LDR      r3,[sp,#0x14]
00111c  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001120  e8901f0e          LDM      r0,{r1-r3,r8-r12}
001124  f50d7e8e          ADD      lr,sp,#0x11c
001128  e8ae1f0e          STM      lr!,{r1-r3,r8-r12}
00112c  f1000120          ADD      r1,r0,#0x20
001130  6b00              LDR      r0,[r0,#0x30]
001132  e891100e          LDM      r1,{r1-r3,r12}
001136  e9cdc052          STRD     r12,r0,[sp,#0x148]
00113a  9351              STR      r3,[sp,#0x144]
00113c  e9cd124f          STRD     r1,r2,[sp,#0x13c]
001140  f8d6900c          LDR      r9,[r6,#0xc]
001144  e000              B        |L7.4424|
                  |L7.4422|
001146  e01c              B        |L7.4482|
                  |L7.4424|
001148  f8d68000          LDR      r8,[r6,#0]
00114c  a84d              ADD      r0,sp,#0x134
00114e  fb08fa09          MUL      r10,r8,r9
001152  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
001156  2800              CMP      r0,#0
001158  d061              BEQ      |L7.4638|
00115a  9847              LDR      r0,[sp,#0x11c]
00115c  2801              CMP      r0,#1
00115e  bf04              ITT      EQ
001160  984a              LDREQ    r0,[sp,#0x128]
001162  4550              CMPEQ    r0,r10
001164  d067              BEQ      |L7.4662|
001166  f240116d          MOV      r1,#0x16d
00116a  48c5              LDR      r0,|L7.5248|
00116c  a3c5              ADR      r3,|L7.5252|
00116e  e000              B        |L7.4466|
                  |L7.4464|
001170  e047              B        |L7.4610|
                  |L7.4466|
001172  e9cd0100          STRD     r0,r1,[sp,#0]
001176  a2d2              ADR      r2,|L7.5312|
001178  a1da              ADR      r1,|L7.5348|
00117a  2005              MOVS     r0,#5
00117c  f7fffffe          BL       _Anki_Log
001180  e07b              B        |L7.4730|
                  |L7.4482|
001182  a805              ADD      r0,sp,#0x14
001184  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
001188  b158              CBZ      r0,|L7.4514|
00118a  f2403126          MOV      r1,#0x326
00118e  48a1              LDR      r0,|L7.5140|
001190  e9cd0100          STRD     r0,r1,[sp,#0]
001194  a37c              ADR      r3,|L7.5000|
001196  a2da              ADR      r2,|L7.5376|
001198  a1a4              ADR      r1,|L7.5164|
00119a  2005              MOVS     r0,#5
00119c  f7fffffe          BL       _Anki_Log
0011a0  e772              B        |L7.4232|
                  |L7.4514|
0011a2  9805              LDR      r0,[sp,#0x14]
0011a4  e9c60803          STRD     r0,r8,[r6,#0xc]
0011a8  f108000f          ADD      r0,r8,#0xf
0011ac  e9c6a900          STRD     r10,r9,[r6,#0]
0011b0  f020000f          BIC      r0,r0,#0xf
0011b4  eba00008          SUB      r0,r0,r8
0011b8  f1b90f01          CMP      r9,#1
0011bc  bfd8              IT       LE
0011be  f04f0901          MOVLE    r9,#1
0011c2  ea4f0149          LSL      r1,r9,#1
0011c6  310f              ADDS     r1,r1,#0xf
0011c8  f021010f          BIC      r1,r1,#0xf
0011cc  fb01010a          MLA      r1,r1,r10,r0
0011d0  4559              CMP      r1,r11
0011d2  bfd8              IT       LE
0011d4  4440              ADDLE    r0,r0,r8
0011d6  f77faf56          BLE      |L7.4230|
0011da  f2403035          MOV      r0,#0x335
0011de  4a8d              LDR      r2,|L7.5140|
0011e0  e9cd2000          STRD     r2,r0,[sp,#0]
0011e4  9102              STR      r1,[sp,#8]
0011e6  a368              ADR      r3,|L7.5000|
0011e8  a2cf              ADR      r2,|L7.5416|
0011ea  a19f              ADR      r1,|L7.5224|
0011ec  2005              MOVS     r0,#5
0011ee  f7fffffe          BL       _Anki_Log
0011f2  f04f30ff          MOV      r0,#0xffffffff
0011f6  6030              STR      r0,[r6,#0]
0011f8  6070              STR      r0,[r6,#4]
0011fa  60b0              STR      r0,[r6,#8]
0011fc  2000              MOVS     r0,#0
0011fe  6130              STR      r0,[r6,#0x10]
001200  e742              B        |L7.4232|
                  |L7.4610|
001202  48d9              LDR      r0,|L7.5480|
001204  2199              MOVS     r1,#0x99
001206  f2af63c8          ADR      r3,|L7.2880|
00120a  e9cd0100          STRD     r0,r1,[sp,#0]
00120e  f5007153          ADD      r1,r0,#0x34c
001212  a2d6              ADR      r2,|L7.5484|
001214  2005              MOVS     r0,#5
001216  f7fffffe          BL       _Anki_Log
00121a  f7ffbb9c          B        |L7.2390|
                  |L7.4638|
00121e  f44f71b5          MOV      r1,#0x16a
001222  4897              LDR      r0,|L7.5248|
001224  e9cd0100          STRD     r0,r1,[sp,#0]
001228  a396              ADR      r3,|L7.5252|
00122a  a2d4              ADR      r2,|L7.5500|
00122c  a1ad              ADR      r1,|L7.5348|
00122e  2005              MOVS     r0,#5
001230  f7fffffe          BL       _Anki_Log
001234  e021              B        |L7.4730|
                  |L7.4662|
001236  9848              LDR      r0,[sp,#0x120]
001238  9a4f              LDR      r2,[sp,#0x13c]
00123a  9951              LDR      r1,[sp,#0x144]
00123c  9b4c              LDR      r3,[sp,#0x130]
00123e  fb001202          MLA      r2,r0,r2,r1
001242  edd60a04          VLDR     s1,[r6,#0x10]
001246  ed960a05          VLDR     s0,[r6,#0x14]
00124a  994b              LDR      r1,[sp,#0x12c]
00124c  f04f0c00          MOV      r12,#0
001250  f1b90f00          CMP      r9,#0
001254  dd11              BLE      |L7.4730|
                  |L7.4694|
001256  2000              MOVS     r0,#0
001258  f1b80f00          CMP      r8,#0
00125c  dd07              BLE      |L7.4718|
                  |L7.4702|
00125e  eb020681          ADD      r6,r2,r1,LSL #2
001262  1c40              ADDS     r0,r0,#1
001264  edc60a00          VSTR     s1,[r6,#0]
001268  4419              ADD      r1,r1,r3
00126a  4580              CMP      r8,r0
00126c  dcf7              BGT      |L7.4702|
                  |L7.4718|
00126e  ee700a80          VADD.F32 s1,s1,s0
001272  f10c0c01          ADD      r12,r12,#1
001276  45cc              CMP      r12,r9
001278  dbed              BLT      |L7.4694|
                  |L7.4730|
00127a  f10d0808          ADD      r8,sp,#8
00127e  e8b8104f          LDM      r8!,{r0-r3,r6,r12}
001282  f10d0898          ADD      r8,sp,#0x98
001286  e8a0104e          STM      r0!,{r1-r3,r6,r12}
00128a  a8c4              ADD      r0,sp,#0x310
00128c  9002              STR      r0,[sp,#8]
00128e  9918              LDR      r1,[sp,#0x60]
001290  98e0              LDR      r0,[sp,#0x380]
001292  2300              MOVS     r3,#0
001294  eb0106c0          ADD      r6,r1,r0,LSL #3
001298  461a              MOV      r2,r3
00129a  2101              MOVS     r1,#1
00129c  a8d8              ADD      r0,sp,#0x360
00129e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0012a2  68f2              LDR      r2,[r6,#0xc]
0012a4  6831              LDR      r1,[r6,#0]
0012a6  6800              LDR      r0,[r0,#0]
0012a8  434a              MULS     r2,r1,r2
0012aa  9000              STR      r0,[sp,#0]
0012ac  4643              MOV      r3,r8
0012ae  2101              MOVS     r1,#1
0012b0  a803              ADD      r0,sp,#0xc
0012b2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0012b6  e9dd0106          LDRD     r0,r1,[sp,#0x18]
0012ba  e9cd0100          STRD     r0,r1,[sp,#0]
0012be  e9dd1203          LDRD     r1,r2,[sp,#0xc]
0012c2  a8b2              ADD      r0,sp,#0x2c8
0012c4  9b05              LDR      r3,[sp,#0x14]
0012c6  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
0012ca  e8901f0e          LDM      r0,{r1-r3,r8-r12}
0012ce  f50d7e8e          ADD      lr,sp,#0x11c
0012d2  e8ae1f0e          STM      lr!,{r1-r3,r8-r12}
0012d6  e9d02108          LDRD     r2,r1,[r0,#0x20]
0012da  e9d03c0a          LDRD     r3,r12,[r0,#0x28]
0012de  6b00              LDR      r0,[r0,#0x30]
0012e0  9351              STR      r3,[sp,#0x144]
0012e2  e9cdc052          STRD     r12,r0,[sp,#0x148]
0012e6  e9cd214f          STRD     r2,r1,[sp,#0x13c]
0012ea  f8d6900c          LDR      r9,[r6,#0xc]
0012ee  f8d68000          LDR      r8,[r6,#0]
0012f2  a84d              ADD      r0,sp,#0x134
0012f4  fb08fa09          MUL      r10,r8,r9
0012f8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0012fc  b188              CBZ      r0,|L7.4898|
0012fe  9847              LDR      r0,[sp,#0x11c]
001300  2801              CMP      r0,#1
001302  bf04              ITT      EQ
001304  984a              LDREQ    r0,[sp,#0x128]
001306  4550              CMPEQ    r0,r10
001308  d016              BEQ      |L7.4920|
00130a  f44f7180          MOV      r1,#0x100
00130e  489f              LDR      r0,|L7.5516|
001310  e9cd0100          STRD     r0,r1,[sp,#0]
001314  a35b              ADR      r3,|L7.5252|
001316  a26a              ADR      r2,|L7.5312|
001318  a172              ADR      r1,|L7.5348|
00131a  2005              MOVS     r0,#5
00131c  f7fffffe          BL       _Anki_Log
001320  e138              B        |L7.5524|
                  |L7.4898|
001322  21fd              MOVS     r1,#0xfd
001324  4899              LDR      r0,|L7.5516|
001326  e9cd0100          STRD     r0,r1,[sp,#0]
00132a  a356              ADR      r3,|L7.5252|
00132c  a293              ADR      r2,|L7.5500|
00132e  a16d              ADR      r1,|L7.5348|
001330  2005              MOVS     r0,#5
001332  f7fffffe          BL       _Anki_Log
001336  e12d              B        |L7.5524|
                  |L7.4920|
001338  9848              LDR      r0,[sp,#0x120]
00133a  9a4f              LDR      r2,[sp,#0x13c]
00133c  9951              LDR      r1,[sp,#0x144]
00133e  9b4c              LDR      r3,[sp,#0x130]
001340  fb001202          MLA      r2,r0,r2,r1
001344  ed960a01          VLDR     s0,[r6,#4]
001348  ed961a02          VLDR     s2,[r6,#8]
00134c  994b              LDR      r1,[sp,#0x12c]
00134e  f04f0c00          MOV      r12,#0
001352  f1b90f00          CMP      r9,#0
001356  dd13              BLE      |L7.4992|
                  |L7.4952|
001358  2000              MOVS     r0,#0
00135a  eef00a40          VMOV.F32 s1,s0
00135e  f1b80f00          CMP      r8,#0
001362  dd09              BLE      |L7.4984|
                  |L7.4964|
001364  eb020681          ADD      r6,r2,r1,LSL #2
001368  1c40              ADDS     r0,r0,#1
00136a  edc60a00          VSTR     s1,[r6,#0]
00136e  ee700a81          VADD.F32 s1,s1,s2
001372  4419              ADD      r1,r1,r3
001374  4580              CMP      r8,r0
001376  dcf5              BGT      |L7.4964|
                  |L7.4984|
001378  f10c0c01          ADD      r12,r12,#1
00137c  45cc              CMP      r12,r9
00137e  e107              B        |L7.5520|
                  |L7.4992|
001380  e108              B        |L7.5524|
001382  0000              DCW      0x0000
                  |L7.4996|
                          DCD      _ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L7.5000|
001388  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00138c  6f726574
001390  6563685c
001394  636f6d6d
001398  6f6e5c69
00139c  6e636c75
0013a0  64655c61
0013a4  6e6b692f
0013a8  636f6d6d
0013ac  6f6e2f72
0013b0  6f626f74
0013b4  2f617272
0013b8  617932  
0013bb  642e6800          DCB      "d.h",0
0013bf  00                DCB      0
                  |L7.5056|
0013c0  496e7661          DCB      "Invalid size",0
0013c4  6c696420
0013c8  73697a65
0013cc  00      
0013cd  00                DCB      0
0013ce  00                DCB      0
0013cf  00                DCB      0
                  |L7.5072|
0013d0  41727261          DCB      "Array<Type>::Array",0
0013d4  793c5479
0013d8  70653e3a
0013dc  3a417272
0013e0  617900  
0013e3  00                DCB      0
                  |L7.5092|
                          DCD      _ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L7.5096|
0013e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0013ec  793c5479
0013f0  70653e3a
0013f4  3a416c6c
0013f8  6f636174
0013fc  65427566
001400  66657246
001404  726f6d4d
001408  656d6f72
00140c  79537461
001410  636b00  
001413  00                DCB      0
                  |L7.5140|
                          DCD      _ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L7.5144|
001418  4e656761          DCB      "Negative dimension",0
00141c  74697665
001420  2064696d
001424  656e7369
001428  6f6e00  
00142b  00                DCB      0
                  |L7.5164|
00142c  41727261          DCB      "Array<Type>::InitializeBuffer",0
001430  793c5479
001434  70653e3a
001438  3a496e69
00143c  7469616c
001440  697a6542
001444  75666665
001448  7200    
00144a  00                DCB      0
00144b  00                DCB      0
                  |L7.5196|
00144c  696e7075          DCB      "input data buffer is NULL",0
001450  74206461
001454  74612062
001458  75666665
00145c  72206973
001460  204e554c
001464  4c00    
001466  00                DCB      0
001467  00                DCB      0
                  |L7.5224|
001468  416e6b69          DCB      "Anki.Array2d.initialize",0
00146c  2e417272
001470  61793264
001474  2e696e69
001478  7469616c
00147c  697a6500
                  |L7.5248|
                          DCD      _ZZNK4Anki8Embedded8MeshgridIfE10EvaluateY1EbNS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Meshgrid<float>::EvaluateY1(bool, Anki::Embedded::ArraySlice<float>) const::__PRETTY_FUNCTION__
                  |L7.5252|
001484  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/sequen"
001488  6f726574
00148c  6563685c
001490  636f6d6d
001494  6f6e5c69
001498  6e636c75
00149c  64655c61
0014a0  6e6b692f
0014a4  636f6d6d
0014a8  6f6e2f72
0014ac  6f626f74
0014b0  2f736571
0014b4  75656e  
0014b7  6365732e          DCB      "ces.h",0
0014bb  6800    
0014bd  00                DCB      0
0014be  00                DCB      0
0014bf  00                DCB      0
                  |L7.5312|
0014c0  41727261          DCB      "Array out is not the correct size",0
0014c4  79206f75
0014c8  74206973
0014cc  206e6f74
0014d0  20746865
0014d4  20636f72
0014d8  72656374
0014dc  2073697a
0014e0  6500    
0014e2  00                DCB      0
0014e3  00                DCB      0
                  |L7.5348|
0014e4  4d657368          DCB      "Meshgrid<Type>::Evaluate",0
0014e8  67726964
0014ec  3c547970
0014f0  653e3a3a
0014f4  4576616c
0014f8  75617465
0014fc  00      
0014fd  00                DCB      0
0014fe  00                DCB      0
0014ff  00                DCB      0
                  |L7.5376|
001500  46696c6c          DCB      "Fill patterns not supported for Array",0
001504  20706174
001508  7465726e
00150c  73206e6f
001510  74207375
001514  70706f72
001518  74656420
00151c  666f7220
001520  41727261
001524  7900    
001526  00                DCB      0
001527  00                DCB      0
                  |L7.5416|
001528  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
00152c  74206461
001530  74612062
001534  75666665
001538  72206973
00153c  206e6f74
001540  206c6172
001544  67652065
001548  6e6f7567
00154c  682e2025
001550  64206279
001554  74657320
001558  69732072
00155c  657175  
00155f  69726564          DCB      "ired.",0
001563  2e00    
001565  00                DCB      0
001566  00                DCB      0
001567  00                DCB      0
                  |L7.5480|
                          DCD      ||.constdata||
                  |L7.5484|
00156c  4f757420          DCB      "Out of memory",0
001570  6f66206d
001574  656d6f72
001578  7900    
00157a  00                DCB      0
00157b  00                DCB      0
                  |L7.5500|
00157c  496e7661          DCB      "Invalid array",0
001580  6c696420
001584  61727261
001588  7900    
00158a  00                DCB      0
00158b  00                DCB      0
                  |L7.5516|
                          DCD      _ZZNK4Anki8Embedded8MeshgridIfE10EvaluateX1EbNS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Meshgrid<float>::EvaluateX1(bool, Anki::Embedded::ArraySlice<float>) const::__PRETTY_FUNCTION__
                  |L7.5520|
001590  f6ffaee2          BLT      |L7.4952|
                  |L7.5524|
001594  f10d0808          ADD      r8,sp,#8
001598  e8b8104f          LDM      r8!,{r0-r3,r6,r12}
00159c  e8a0104e          STM      r0!,{r1-r3,r6,r12}
0015a0  986d              LDR      r0,[sp,#0x1b4]
0015a2  ab26              ADD      r3,sp,#0x98
0015a4  eb000287          ADD      r2,r0,r7,LSL #2
0015a8  2100              MOVS     r1,#0
0015aa  a8c9              ADD      r0,sp,#0x324
0015ac  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::MemoryStack&)
0015b0  9839              LDR      r0,[sp,#0xe4]
0015b2  ab26              ADD      r3,sp,#0x98
0015b4  eb000287          ADD      r2,r0,r7,LSL #2
0015b8  2100              MOVS     r1,#0
0015ba  a8ce              ADD      r0,sp,#0x338
0015bc  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::MemoryStack&)
0015c0  9860              LDR      r0,[sp,#0x180]
0015c2  ab26              ADD      r3,sp,#0x98
0015c4  eb000287          ADD      r2,r0,r7,LSL #2
0015c8  2100              MOVS     r1,#0
0015ca  a8d3              ADD      r0,sp,#0x34c
0015cc  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::MemoryStack&)
0015d0  9ac1              LDR      r2,[sp,#0x304]
0015d2  99c3              LDR      r1,[sp,#0x30c]
0015d4  2000              MOVS     r0,#0
0015d6  fb001002          MLA      r0,r0,r2,r1
0015da  9000              STR      r0,[sp,#0]
0015dc  9ac6              LDR      r2,[sp,#0x318]
0015de  99c8              LDR      r1,[sp,#0x320]
0015e0  2000              MOVS     r0,#0
0015e2  fb001002          MLA      r0,r0,r2,r1
0015e6  9001              STR      r0,[sp,#4]
0015e8  9acb              LDR      r2,[sp,#0x32c]
0015ea  99cd              LDR      r1,[sp,#0x334]
0015ec  2000              MOVS     r0,#0
0015ee  fb001b02          MLA      r11,r0,r2,r1
0015f2  9ad0              LDR      r2,[sp,#0x340]
0015f4  99d2              LDR      r1,[sp,#0x348]
0015f6  fb001a02          MLA      r10,r0,r2,r1
0015fa  9ad5              LDR      r2,[sp,#0x354]
0015fc  99d7              LDR      r1,[sp,#0x35c]
0015fe  fb001902          MLA      r9,r0,r2,r1
001602  9a9c              LDR      r2,[sp,#0x270]
001604  999e              LDR      r1,[sp,#0x278]
001606  fb001802          MLA      r8,r0,r2,r1
00160a  f8d410a4          LDR      r1,[r4,#0xa4]
00160e  9809              LDR      r0,[sp,#0x24]
001610  eb010080          ADD      r0,r1,r0,LSL #2
001614  2100              MOVS     r1,#0
001616  6b07              LDR      r7,[r0,#0x30]
001618  9808              LDR      r0,[sp,#0x20]
00161a  2800              CMP      r0,#0
00161c  dd2b              BLE      |L7.5750|
                  |L7.5662|
00161e  f8380011          LDRH     r0,[r8,r1,LSL #1]
001622  9a01              LDR      r2,[sp,#4]
001624  eb020280          ADD      r2,r2,r0,LSL #2
001628  ed920a00          VLDR     s0,[r2,#0]
00162c  9a00              LDR      r2,[sp,#0]
00162e  eb020280          ADD      r2,r2,r0,LSL #2
001632  edd20a00          VLDR     s1,[r2,#0]
001636  eb0a0280          ADD      r2,r10,r0,LSL #2
00163a  ee103a90          VMOV     r3,s1
00163e  ed921a00          VLDR     s2,[r2,#0]
001642  eb0b0280          ADD      r2,r11,r0,LSL #2
001646  eb090080          ADD      r0,r9,r0,LSL #2
00164a  edd21a00          VLDR     s3,[r2,#0]
00164e  ed902a00          VLDR     s4,[r0,#0]
001652  eb010081          ADD      r0,r1,r1,LSL #2
001656  ee102a10          VMOV     r2,s0
00165a  eb070080          ADD      r0,r7,r0,LSL #2
00165e  ee116a10          VMOV     r6,s2
001662  ee11ca90          VMOV     r12,s3
001666  ee12ea10          VMOV     lr,s4
00166a  e8a0504c          STM      r0!,{r2,r3,r6,r12,lr}
00166e  9808              LDR      r0,[sp,#0x20]
001670  1c49              ADDS     r1,r1,#1
001672  4288              CMP      r0,r1
001674  dcd3              BGT      |L7.5662|
                  |L7.5750|
001676  980b              LDR      r0,[sp,#0x2c]
001678  1c40              ADDS     r0,r0,#1
00167a  900b              STR      r0,[sp,#0x2c]
00167c  42a8              CMP      r0,r5
00167e  f6ffa8b9          BLT      |L7.2036|
                  |L7.5762|
001682  2001              MOVS     r0,#1
001684  f8840070          STRB     r0,[r4,#0x70]
001688  4802              LDR      r0,|L7.5780|
00168a  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00168e  f7ffb962          B        |L7.2390|
                          ENDP

001692  0000              DCW      0x0000
                  |L7.5780|
                          DCD      ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEiNS0_11MemoryStackERSD_SD_||+0x428

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC1Ev||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC2Ev                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective__sub_object()
                  _ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC1Ev PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective()
;;;31         {
;;;32           LucasKanadeTracker_SampledProjective::LucasKanadeTracker_SampledProjective()
;;;33             : LucasKanadeTracker_Generic(maxSupportedTransformType)
;;;34           {
;;;35           }
;;;36     
000000  b510              PUSH     {r4,lr}
000002  8801              LDRH     r1,[r0,#0]
000004  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker26LucasKanadeTracker_GenericC1ENS0_15Transformations13TransformTypeE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::LucasKanadeTracker_Generic(Anki::Embedded::Transformations::TransformType)
000008  3074              ADDS     r0,r0,#0x74
00000a  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::FixedLengthList()
00000e  3874              SUBS     r0,r0,#0x74
000010  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective12ShowTemplateEPKcbb||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective12ShowTemplateEPKcbb PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::ShowTemplate(const char*, bool, bool) const
;;;213    
;;;214          Result LucasKanadeTracker_SampledProjective::ShowTemplate(const char * windowName, const bool waitForKeypress, const bool fitImageToWindow) const
000000  2001              MOVS     r0,#1
;;;215          {
;;;216    #if !ANKICORETECH_EMBEDDED_USE_OPENCV
;;;217            return RESULT_FAIL;
;;;218    #else
;;;219            //if(!this->IsValid())
;;;220            //  return RESULT_FAIL;
;;;221    
;;;222            const s32 scratchSize = 10000000;
;;;223            MemoryStack scratch(malloc(scratchSize), scratchSize);
;;;224    
;;;225            Array<u8> image(this->templateImageHeight, this->templateImageWidth, scratch);
;;;226    
;;;227            const Point<f32> centerOffset = this->transformation.get_centerOffset(1.0f);
;;;228    
;;;229            for(s32 iScale=0; iScale<numPyramidLevels; iScale++) {
;;;230              const s32 numSamples = this->templateSamplePyramid[iScale].get_size();
;;;231    
;;;232              image.SetZero();
;;;233    
;;;234              const TemplateSample * restrict pTemplateSample = this->templateSamplePyramid[iScale].Pointer(0);
;;;235    
;;;236              for(s32 iSample=0; iSample<numSamples; iSample++) {
;;;237                const TemplateSample curTemplateSample = pTemplateSample[iSample];
;;;238    
;;;239                const s32 curY = Round<s32>(curTemplateSample.yCoordinate + centerOffset.y);
;;;240                const s32 curX = Round<s32>(curTemplateSample.xCoordinate + centerOffset.x);
;;;241    
;;;242                if(curX >= 0 && curY >= 0 && curX < this->templateImageWidth && curY < this->templateImageHeight) {
;;;243                  image[curY][curX] = 255;
;;;244                }
;;;245              }
;;;246    
;;;247              char windowNameTotal[128];
;;;248              snprintf(windowNameTotal, 128, "%s %d", windowName, iScale);
;;;249    
;;;250              if(fitImageToWindow) {
;;;251                cv::namedWindow(windowNameTotal, CV_WINDOW_NORMAL);
;;;252              } else {
;;;253                cv::namedWindow(windowNameTotal, CV_WINDOW_AUTOSIZE);
;;;254              }
;;;255    
;;;256              cv::Mat_<u8> image_cvMat;
;;;257              ArrayToCvMat(image, &image_cvMat);
;;;258              cv::imshow(windowNameTotal, image_cvMat);
;;;259            }
;;;260    
;;;261            if(waitForKeypress)
;;;262              cv::waitKey();
;;;263    
;;;264            return RESULT_OK;
;;;265    #endif // #if !ANKICORETECH_EMBEDDED_USE_OPENCV ... #else
;;;266          }
000002  4770              BX       lr
;;;267    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective21get_numTemplatePixelsEi||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective21get_numTemplatePixelsEi PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::get_numTemplatePixels(int) const
;;;277    
;;;278          s32 LucasKanadeTracker_SampledProjective::get_numTemplatePixels(const s32 whichScale) const
000000  2900              CMP      r1,#0
;;;279          {
;;;280            if(whichScale < 0 || whichScale > this->numPyramidLevels)
000002  bfa7              ITTEE    GE
000004  6842              LDRGE    r2,[r0,#4]
000006  428a              CMPGE    r2,r1
;;;281              return 0;
000008  2000              MOVLT    r0,#0
;;;282    
;;;283            return this->templateSamplePyramid[whichScale].get_size();
;;;284          }
00000a  4770              BXLT     lr
00000c  f8d000a4          LDR      r0,[r0,#0xa4]
000010  eb010281          ADD      r2,r1,r1,LSL #2
000014  eb0201c1          ADD      r1,r2,r1,LSL #3
000018  eb000081          ADD      r0,r0,r1,LSL #2
00001c  68c0              LDR      r0,[r0,#0xc]
00001e  4770              BX       lr
;;;285    
                          ENDP


                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::VerifyTrack_Projective(const Anki::Embedded::Array<unsigned char>&, unsigned char, int&, int&, int&, Anki::Embedded::MemoryStack) const
;;;904    
;;;905          Result LucasKanadeTracker_SampledProjective::VerifyTrack_Projective(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;906            const Array<u8> &nextImage,
;;;907            const u8 verify_maxPixelDifference,
;;;908            s32 &verify_meanAbsoluteDifference,
;;;909            s32 &verify_numInBounds,
;;;910            s32 &verify_numSimilarPixels,
;;;911            MemoryStack scratch) const
;;;912          {
000004  4688              MOV      r8,r1
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  b0a1              SUB      sp,sp,#0x84
00000c  4682              MOV      r10,r0
;;;913            // This method is heavily based on Interp2_Projective
;;;914            // The call would be like: Interp2_Projective<u8,u8>(nextImage, originalCoordinates, interpolationHomography, centerOffset, nextImageTransformed2d, INTERPOLATE_LINEAR, 0);
;;;915            const s32 verify_maxPixelDifferenceS32 = verify_maxPixelDifference;
;;;916    
;;;917            const s32 nextImageHeight = nextImage.get_size(0);
00000e  2100              MOVS     r1,#0
000010  4640              MOV      r0,r8
000012  e9dd743f          LDRD     r7,r4,[sp,#0xfc]      ;912
000016  9d3e              LDR      r5,[sp,#0xf8]         ;915
000018  920d              STR      r2,[sp,#0x34]
00001a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00001e  ee090a10          VMOV     s18,r0
;;;918            const s32 nextImageWidth = nextImage.get_size(1);
000022  2101              MOVS     r1,#1
000024  4640              MOV      r0,r8
000026  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00002a  4681              MOV      r9,r0
;;;919    
;;;920            const s32 whichScale = 0;
;;;921    
;;;922            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImageWidth;
00002c  f44f70a0          MOV      r0,#0x140
000030  fb90f0f9          SDIV     r0,r0,r9
;;;923            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
000034  ee000a10          VMOV     s0,r0
;;;924    
;;;925            const Point<f32> centerOffsetScaled = this->transformation.get_centerOffset(initialImageScaleF32);
000038  f10a0118          ADD      r1,r10,#0x18
00003c  a81e              ADD      r0,sp,#0x78
00003e  eef88ac0          VCVT.F32.S32 s17,s0                ;923
000042  eeb00a68          VMOV.F32 s0,s17
000046  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3216get_centerOffsetEf ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_centerOffset(float) const
;;;926    
;;;927            // Initialize with some very extreme coordinates
;;;928            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
00004a  2300              MOVS     r3,#0
00004c  461a              MOV      r2,r3
00004e  2101              MOVS     r1,#1
000050  a820              ADD      r0,sp,#0x80
000052  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000056  6803              LDR      r3,[r0,#0]
000058  4622              MOV      r2,r4
00005a  2102              MOVS     r1,#2
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;929    
;;;930            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
000062  2400              MOVS     r4,#0
;;;931              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
000064  ed9f8ac5          VLDR     s16,|L11.892|
                  |L11.104|
000068  980c              LDR      r0,[sp,#0x30]
00006a  ed8d8a16          VSTR     s16,[sp,#0x58]
00006e  ed8d8a17          VSTR     s16,[sp,#0x5c]
000072  ed8d8a18          VSTR     s16,[sp,#0x60]
000076  ed8d8a19          VSTR     s16,[sp,#0x64]
00007a  ed8d8a1a          VSTR     s16,[sp,#0x68]
00007e  ed8d8a1b          VSTR     s16,[sp,#0x6c]
000082  eb001644          ADD      r6,r0,r4,LSL #5
000086  ed8d8a1c          VSTR     s16,[sp,#0x70]
00008a  a80e              ADD      r0,sp,#0x38
00008c  ed8d8a1d          VSTR     s16,[sp,#0x74]
000090  2304              MOVS     r3,#4
000092  2208              MOVS     r2,#8
000094  49ba              LDR      r1,|L11.896|
000096  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00009a  ed9d0a16          VLDR     s0,[sp,#0x58]
00009e  4603              MOV      r3,r0
0000a0  ed800a00          VSTR     s0,[r0,#0]
0000a4  ed9d0a17          VLDR     s0,[sp,#0x5c]
0000a8  ed800a01          VSTR     s0,[r0,#4]
0000ac  3008              ADDS     r0,r0,#8
0000ae  ed9d0a18          VLDR     s0,[sp,#0x60]
0000b2  ed800a00          VSTR     s0,[r0,#0]
0000b6  ed9d0a19          VLDR     s0,[sp,#0x64]
0000ba  ed800a01          VSTR     s0,[r0,#4]
0000be  ed9d0a1a          VLDR     s0,[sp,#0x68]
0000c2  2000              MOVS     r0,#0
0000c4  ed830a04          VSTR     s0,[r3,#0x10]
0000c8  ed9d0a1b          VLDR     s0,[sp,#0x6c]
0000cc  ed830a05          VSTR     s0,[r3,#0x14]
0000d0  ed9d0a1c          VLDR     s0,[sp,#0x70]
0000d4  ed830a06          VSTR     s0,[r3,#0x18]
0000d8  ed9d0a1d          VLDR     s0,[sp,#0x74]
0000dc  ed830a07          VSTR     s0,[r3,#0x1c]
                  |L11.224|
0000e0  eb0301c0          ADD      r1,r3,r0,LSL #3
0000e4  eb0602c0          ADD      r2,r6,r0,LSL #3
0000e8  edd10a00          VLDR     s1,[r1,#0]
0000ec  1c40              ADDS     r0,r0,#1
0000ee  edc20a00          VSTR     s1,[r2,#0]
0000f2  edd10a01          VLDR     s1,[r1,#4]
0000f6  2804              CMP      r0,#4
0000f8  edc20a01          VSTR     s1,[r2,#4]
0000fc  dbf0              BLT      |L11.224|
0000fe  1c64              ADDS     r4,r4,#1              ;930
000100  2c02              CMP      r4,#2                 ;930
000102  dbb1              BLT      |L11.104|
;;;932            }
;;;933    
;;;934            const f32 xyReferenceMin = 0.0f;
;;;935            const f32 xReferenceMax = static_cast<f32>(nextImageWidth) - 1.0f;
000104  ee009a10          VMOV     s0,r9
000108  eef7ba00          VMOV.F32 s23,#1.00000000
00010c  2400              MOVS     r4,#0
00010e  eeb80ac0          VCVT.F32.S32 s0,s0
000112  ee300a6b          VSUB.F32 s0,s0,s23
000116  ed8d0a0f          VSTR     s0,[sp,#0x3c]
;;;936            const f32 yReferenceMax = static_cast<f32>(nextImageHeight) - 1.0f;
00011a  eeb80ac9          VCVT.F32.S32 s0,s18
00011e  ee300a6b          VSUB.F32 s0,s0,s23
000122  ed8d0a0e          VSTR     s0,[sp,#0x38]
000126  f8da00a4          LDR      r0,[r10,#0xa4]
00012a  f8da1004          LDR      r1,[r10,#4]
00012e  f8d0b030          LDR      r11,[r0,#0x30]
000132  2900              CMP      r1,#0
000134  bfb4              ITE      LT
000136  f04f0900          MOVLT    r9,#0
00013a  f8d0900c          LDRGE    r9,[r0,#0xc]
;;;937    
;;;938            const TemplateSample * restrict pTemplateSamplePyramid = this->templateSamplePyramid[whichScale].Pointer(0);
;;;939    
;;;940            const s32 numTemplateSamples = this->get_numTemplatePixels(whichScale);
;;;941    
;;;942            const Array<f32> &homography = this->transformation.get_homography();
00013e  f10a0018          ADD      r0,r10,#0x18
000142  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3214get_homographyEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_homography() const
000146  6882              LDR      r2,[r0,#8]
000148  6901              LDR      r1,[r0,#0x10]
;;;943            const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2] / initialImageScaleF32;
00014a  2300              MOVS     r3,#0
00014c  fb031002          MLA      r0,r3,r2,r1
;;;944            const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2] / initialImageScaleF32;
;;;945            const f32 h20 = homography[2][0] * initialImageScaleF32; const f32 h21 = homography[2][1] * initialImageScaleF32; //const f32 h22 = 1.0f;
;;;946    
;;;947            verify_numInBounds = 0;
;;;948            verify_numSimilarPixels = 0;
;;;949            s32 totalGrayvalueDifference = 0;
000150  2600              MOVS     r6,#0
000152  ed900a02          VLDR     s0,[r0,#8]            ;943
000156  edd0fa00          VLDR     s31,[r0,#0]           ;943
00015a  ed90fa01          VLDR     s30,[r0,#4]           ;943
00015e  eec0ea28          VDIV.F32 s29,s0,s17            ;943
000162  2001              MOVS     r0,#1                 ;944
000164  fb001002          MLA      r0,r0,r2,r1           ;944
000168  ed900a02          VLDR     s0,[r0,#8]            ;944
00016c  ed90ea00          VLDR     s28,[r0,#0]           ;944
000170  edd0da01          VLDR     s27,[r0,#4]           ;944
000174  2002              MOVS     r0,#2                 ;945
000176  fb001002          MLA      r0,r0,r2,r1           ;945
;;;950    
;;;951            // TODO: make the x and y limits from 1 to end-2
;;;952    
;;;953            for(s32 iSample=0; iSample<numTemplateSamples; iSample++) {
00017a  f1b90f00          CMP      r9,#0
00017e  ee80da28          VDIV.F32 s26,s0,s17            ;944
000182  ed900a00          VLDR     s0,[r0,#0]            ;945
000186  ee60ca28          VMUL.F32 s25,s0,s17            ;945
00018a  ed900a01          VLDR     s0,[r0,#4]            ;945
00018e  602c              STR      r4,[r5,#0]            ;948
000190  603c              STR      r4,[r7,#0]
000192  ee20ca28          VMUL.F32 s24,s0,s17            ;945
000196  4634              MOV      r4,r6
000198  bfc8              IT       GT
00019a  ed9f9a7a          VLDRGT   s18,|L11.900|
00019e  dd7d              BLE      |L11.668|
                  |L11.416|
;;;954              const TemplateSample curSample = pTemplateSamplePyramid[iSample];
0001a0  eb040184          ADD      r1,r4,r4,LSL #2
0001a4  eb0b0081          ADD      r0,r11,r1,LSL #2
0001a8  ed900a00          VLDR     s0,[r0,#0]
0001ac  edd00a01          VLDR     s1,[r0,#4]
0001b0  edd0aa04          VLDR     s21,[r0,#0x10]
;;;955              const f32 yOriginal = curSample.yCoordinate;
;;;956              const f32 xOriginal = curSample.xCoordinate;
;;;957    
;;;958              // TODO: These two could be strength reduced
;;;959              const f32 xTransformedRaw = h00*xOriginal + h01*yOriginal + h02;
0001b4  ee2f1a80          VMUL.F32 s2,s31,s0
0001b8  ee0f1a20          VMLA.F32 s2,s30,s1
0001bc  ee711a2e          VADD.F32 s3,s2,s29
;;;960              const f32 yTransformedRaw = h10*xOriginal + h11*yOriginal + h12;
0001c0  ee2e1a00          VMUL.F32 s2,s28,s0
;;;961    
;;;962              const f32 normalization = h20*xOriginal + h21*yOriginal + 1.0f;
0001c4  ee2c0a80          VMUL.F32 s0,s25,s0
0001c8  ee0d1aa0          VMLA.F32 s2,s27,s1             ;960
0001cc  ee0c0a20          VMLA.F32 s0,s24,s1
0001d0  ee311a0d          VADD.F32 s2,s2,s26             ;960
0001d4  ee300a2b          VADD.F32 s0,s0,s23
;;;963    
;;;964              const f32 xTransformed = (xTransformedRaw / normalization) + centerOffsetScaled.x;
0001d8  eec10a80          VDIV.F32 s1,s3,s0
0001dc  eddd1a1e          VLDR     s3,[sp,#0x78]
0001e0  ee30aaa1          VADD.F32 s20,s1,s3
;;;965              const f32 yTransformed = (yTransformedRaw / normalization) + centerOffsetScaled.y;
0001e4  eec10a00          VDIV.F32 s1,s2,s0
0001e8  ed9d0a1f          VLDR     s0,[sp,#0x7c]
0001ec  ee709a80          VADD.F32 s19,s1,s0
;;;966    
;;;967              const f32 x0 = FLT_FLOOR(xTransformed);
0001f0  ed9f8a65          VLDR     s16,|L11.904|
0001f4  ee3a0a08          VADD.F32 s0,s20,s16
0001f8  f7fffffe          BL       __hardfp_floorf
0001fc  eef08a40          VMOV.F32 s17,s0
;;;968              const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
000200  eeb00a4a          VMOV.F32 s0,s20
000204  f7fffffe          BL       __hardfp_ceilf
000208  eeb0ba40          VMOV.F32 s22,s0
;;;969    
;;;970              const f32 y0 = FLT_FLOOR(yTransformed);
00020c  ee390a88          VADD.F32 s0,s19,s16
000210  f7fffffe          BL       __hardfp_floorf
000214  eeb08a40          VMOV.F32 s16,s0
;;;971              const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
000218  eeb00a69          VMOV.F32 s0,s19
00021c  f7fffffe          BL       __hardfp_ceilf
;;;972    
;;;973              // If out of bounds, continue
;;;974              if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
000220  eef58ac0          VCMPE.F32 s17,#0.0
000224  eef1fa10          VMRS     APSR_nzcv,FPSCR
000228  d37e              BCC      |L11.808|
00022a  eddd0a0f          VLDR     s1,[sp,#0x3c]
00022e  eeb4bae0          VCMPE.F32 s22,s1
000232  eef1fa10          VMRS     APSR_nzcv,FPSCR
000236  dc77              BGT      |L11.808|
000238  eeb58ac0          VCMPE.F32 s16,#0.0
00023c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000240  d372              BCC      |L11.808|
000242  eddd0a0e          VLDR     s1,[sp,#0x38]
000246  eeb40ae0          VCMPE.F32 s0,s1
00024a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00024e  dc6b              BGT      |L11.808|
;;;975                continue;
;;;976              }
;;;977    
;;;978              verify_numInBounds++;
;;;979    
;;;980              const f32 alphaX = xTransformed - x0;
000250  ee3a1a68          VSUB.F32 s2,s20,s17
;;;981              const f32 alphaXinverse = 1 - alphaX;
;;;982    
;;;983              const f32 alphaY = yTransformed - y0;
000254  ee790ac8          VSUB.F32 s1,s19,s16
000258  6828              LDR      r0,[r5,#0]            ;978
00025a  eeb58ac0          VCMPE.F32 s16,#0.0              ;978
00025e  ee7b1ac1          VSUB.F32 s3,s23,s2             ;981
;;;984              const f32 alphaYinverse = 1.0f - alphaY;
000262  ee7b2ae0          VSUB.F32 s5,s23,s1
000266  1c40              ADDS     r0,r0,#1              ;978
000268  6028              STR      r0,[r5,#0]            ;978
00026a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;978
00026e  bfcc              ITE      GT                    ;978
000270  ee382a09          VADDGT.F32 s4,s16,s18            ;978
000274  ee382a49          VSUBLE.F32 s4,s16,s18            ;978
000278  eebd2ac2          VCVT.S32.F32 s4,s4                 ;978
00027c  eeb50ac0          VCMPE.F32 s0,#0.0               ;978
000280  ee123a10          VMOV     r3,s4                 ;978
000284  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;978
000288  bfcc              ITE      GT                    ;978
00028a  ee300a09          VADDGT.F32 s0,s0,s18             ;978
00028e  ee300a49          VSUBLE.F32 s0,s0,s18             ;978
000292  eebd0ac0          VCVT.S32.F32 s0,s0                 ;978
000296  ee10ca10          VMOV     r12,s0                ;978
00029a  e000              B        |L11.670|
                  |L11.668|
00029c  e061              B        |L11.866|
                  |L11.670|
00029e  eef58ac0          VCMPE.F32 s17,#0.0              ;978
0002a2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;978
0002a6  bfcc              ITE      GT                    ;978
0002a8  ee380a89          VADDGT.F32 s0,s17,s18            ;978
0002ac  ee380ac9          VSUBLE.F32 s0,s17,s18            ;978
0002b0  eebd0ac0          VCVT.S32.F32 s0,s0                 ;978
0002b4  f8d81008          LDR      r1,[r8,#8]            ;978
0002b8  f8d80010          LDR      r0,[r8,#0x10]         ;978
0002bc  ee102a10          VMOV     r2,s0                 ;978
0002c0  fb030301          MLA      r3,r3,r1,r0           ;978
0002c4  4413              ADD      r3,r3,r2              ;978
0002c6  fb0c0001          MLA      r0,r12,r1,r0          ;978
;;;985    
;;;986              const s32 y0S32 = Round<s32>(y0);
;;;987              const s32 y1S32 = Round<s32>(y1);
;;;988              const s32 x0S32 = Round<s32>(x0);
;;;989    
;;;990              const u8 * restrict pReference_y0 = nextImage.Pointer(y0S32, x0S32);
;;;991              const u8 * restrict pReference_y1 = nextImage.Pointer(y1S32, x0S32);
;;;992    
;;;993              const f32 pixelTL = *pReference_y0;
0002ca  7819              LDRB     r1,[r3,#0]
0002cc  4410              ADD      r0,r0,r2
0002ce  ee001a10          VMOV     s0,r1
;;;994              const f32 pixelTR = *(pReference_y0+1);
0002d2  7859              LDRB     r1,[r3,#1]
0002d4  eeb83a40          VCVT.F32.U32 s6,s0                 ;993
0002d8  ee001a10          VMOV     s0,r1
;;;995              const f32 pixelBL = *pReference_y1;
0002dc  7801              LDRB     r1,[r0,#0]
;;;996              const f32 pixelBR = *(pReference_y1+1);
0002de  7840              LDRB     r0,[r0,#1]
0002e0  ee021a10          VMOV     s4,r1                 ;995
0002e4  eeb80a40          VCVT.F32.U32 s0,s0                 ;994
0002e8  ee213a83          VMUL.F32 s6,s3,s6              ;994
0002ec  eeb82a42          VCVT.F32.U32 s4,s4                 ;995
0002f0  ee030a90          VMOV     s7,r0
0002f4  ee013a00          VMLA.F32 s6,s2,s0
0002f8  eef83a63          VCVT.F32.U32 s7,s7
0002fc  ee611a82          VMUL.F32 s3,s3,s4
000300  ee411a23          VMLA.F32 s3,s2,s7
000304  ee220a83          VMUL.F32 s0,s5,s6
000308  ee000aa1          VMLA.F32 s0,s1,s3
00030c  eeb50ac0          VCMPE.F32 s0,#0.0
000310  eef1fa10          VMRS     APSR_nzcv,FPSCR
000314  bfcc              ITE      GT
000316  ee300a09          VADDGT.F32 s0,s0,s18
00031a  ee300a49          VSUBLE.F32 s0,s0,s18
00031e  eebd0ac0          VCVT.S32.F32 s0,s0
000322  ee100a10          VMOV     r0,s0
000326  e000              B        |L11.810|
                  |L11.808|
000328  e017              B        |L11.858|
                  |L11.810|
00032a  eef5aac0          VCMPE.F32 s21,#0.0
00032e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000332  bfcc              ITE      GT
000334  ee3a0a89          VADDGT.F32 s0,s21,s18
000338  ee3a0ac9          VSUBLE.F32 s0,s21,s18
00033c  eebd0ac0          VCVT.S32.F32 s0,s0
000340  ee101a10          VMOV     r1,s0
;;;997    
;;;998              const s32 interpolatedPixelValue = Round<s32>(InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse));
;;;999              const s32 templatePixelValue = Round<s32>(curSample.grayvalue);
;;;1000             const s32 grayvalueDifference = ABS(interpolatedPixelValue - templatePixelValue);
000344  1a42              SUBS     r2,r0,r1
000346  2a00              CMP      r2,#0
000348  bfb8              IT       LT
00034a  1a0a              SUBLT    r2,r1,r0
;;;1001   
;;;1002             totalGrayvalueDifference += grayvalueDifference;
00034c  4416              ADD      r6,r6,r2
;;;1003   
;;;1004             if(grayvalueDifference <= verify_maxPixelDifferenceS32) {
00034e  980d              LDR      r0,[sp,#0x34]
000350  4282              CMP      r2,r0
000352  dc02              BGT      |L11.858|
;;;1005               verify_numSimilarPixels++;
000354  6838              LDR      r0,[r7,#0]
000356  1c40              ADDS     r0,r0,#1
000358  6038              STR      r0,[r7,#0]
                  |L11.858|
00035a  1c64              ADDS     r4,r4,#1              ;953
00035c  454c              CMP      r4,r9                 ;953
00035e  f6ffaf1f          BLT      |L11.416|
                  |L11.866|
;;;1006             }
;;;1007           } // for(s32 iSample=0; iSample<numTemplateSamples; iSample++)
;;;1008   
;;;1009           verify_meanAbsoluteDifference = totalGrayvalueDifference / verify_numInBounds;
000362  6828              LDR      r0,[r5,#0]
000364  fb96f1f0          SDIV     r1,r6,r0
000368  9834              LDR      r0,[sp,#0xd0]
;;;1010   
;;;1011           return RESULT_OK;
00036a  6001              STR      r1,[r0,#0]
;;;1012         }
00036c  b021              ADD      sp,sp,#0x84
00036e  2000              MOVS     r0,#0                 ;1011
000370  ecbd8b10          VPOP     {d8-d15}
000374  b004              ADD      sp,sp,#0x10
000376  e8bd8ff0          POP      {r4-r11,pc}
;;;1013   
                          ENDP

00037a  0000              DCW      0x0000
                  |L11.892|
00037c  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L11.896|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L11.900|
000384  3f000000          DCFS     0x3f000000 ; 0.5
                  |L11.904|
000388  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective7IsValidEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective7IsValidEv PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::IsValid() const
;;;267    
;;;268          bool LucasKanadeTracker_SampledProjective::IsValid() const
000000  b510              PUSH     {r4,lr}
;;;269          {
;;;270            if(!LucasKanadeTracker_Generic::IsValid())
000002  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker26LucasKanadeTracker_Generic7IsValidEv ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Generic::IsValid() const
000006  2800              CMP      r0,#0
;;;271              return false;
;;;272    
;;;273            // TODO: add more checks
;;;274    
;;;275            return true;
000008  bf18              IT       NE
00000a  2001              MOVNE    r0,#1
;;;276          }
00000c  bd10              POP      {r4,pc}
;;;277    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective17ApproximateSelectERKNS0_5ArrayIfEEiiRiRNS3_ItEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective17ApproximateSelectERKNS0_5ArrayIfEEiiRiRNS3_ItEE||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEiNS0_11MemoryStackERSD_SD_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjectiveC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEiNS0_11MemoryStackERSD_SD_||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective21get_numTemplatePixelsEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective21get_numTemplatePixelsEi||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22VerifyTrack_ProjectiveERKNS0_5ArrayIhEEhRiS7_S7_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective33IterativelyRefineTrack_ProjectiveERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective29IterativelyRefineTrack_AffineERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective34IterativelyRefineTrack_TranslationERKNS0_5ArrayIhEEiifRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective7IsValidEv||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeERbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective11UpdateTrackERKNS0_5ArrayIhEEifhRbRiS8_S8_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective12ShowTemplateEPKcbb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker36LucasKanadeTracker_SampledProjective12ShowTemplateEPKcbb||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  54656d70          DCB      0x54,0x65,0x6d,0x70
000014  6c617465          DCB      0x6c,0x61,0x74,0x65
000018  54726163          DCB      0x54,0x72,0x61,0x63
00001c  6b65723a          DCB      0x6b,0x65,0x72,0x3a
000020  3a4c7563          DCB      0x3a,0x4c,0x75,0x63
000024  61734b61          DCB      0x61,0x73,0x4b,0x61
000028  6e616465          DCB      0x6e,0x61,0x64,0x65
00002c  54726163          DCB      0x54,0x72,0x61,0x63
000030  6b65725f          DCB      0x6b,0x65,0x72,0x5f
000034  53616d70          DCB      0x53,0x61,0x6d,0x70
000038  6c656450          DCB      0x6c,0x65,0x64,0x50
00003c  726f6a65          DCB      0x72,0x6f,0x6a,0x65
000040  63746976          DCB      0x63,0x74,0x69,0x76
000044  653a3a4c          DCB      0x65,0x3a,0x3a,0x4c
000048  75636173          DCB      0x75,0x63,0x61,0x73
00004c  4b616e61          DCB      0x4b,0x61,0x6e,0x61
000050  64655472          DCB      0x64,0x65,0x54,0x72
000054  61636b65          DCB      0x61,0x63,0x6b,0x65
000058  725f5361          DCB      0x72,0x5f,0x53,0x61
00005c  6d706c65          DCB      0x6d,0x70,0x6c,0x65
000060  6450726f          DCB      0x64,0x50,0x72,0x6f
000064  6a656374          DCB      0x6a,0x65,0x63,0x74
000068  69766528          DCB      0x69,0x76,0x65,0x28
00006c  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000070  7420416e          DCB      0x74,0x20,0x41,0x6e
000074  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000078  456d6265          DCB      0x45,0x6d,0x62,0x65
00007c  64646564          DCB      0x64,0x64,0x65,0x64
000080  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000084  7261793c          DCB      0x72,0x61,0x79,0x3c
000088  756e7369          DCB      0x75,0x6e,0x73,0x69
00008c  676e6564          DCB      0x67,0x6e,0x65,0x64
000090  20636861          DCB      0x20,0x63,0x68,0x61
000094  723e2026          DCB      0x72,0x3e,0x20,0x26
000098  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00009c  6e737420          DCB      0x6e,0x73,0x74,0x20
0000a0  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000a4  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000a8  62656464          DCB      0x62,0x65,0x64,0x64
0000ac  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000b0  51756164          DCB      0x51,0x75,0x61,0x64
0000b4  72696c61          DCB      0x72,0x69,0x6c,0x61
0000b8  74657261          DCB      0x74,0x65,0x72,0x61
0000bc  6c3c666c          DCB      0x6c,0x3c,0x66,0x6c
0000c0  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0000c4  20262c20          DCB      0x20,0x26,0x2c,0x20
0000c8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000cc  742c2073          DCB      0x74,0x2c,0x20,0x73
0000d0  69676e65          DCB      0x69,0x67,0x6e,0x65
0000d4  6420696e          DCB      0x64,0x20,0x69,0x6e
0000d8  742c2041          DCB      0x74,0x2c,0x20,0x41
0000dc  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000e0  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000e4  65646465          DCB      0x65,0x64,0x64,0x65
0000e8  643a3a54          DCB      0x64,0x3a,0x3a,0x54
0000ec  72616e73          DCB      0x72,0x61,0x6e,0x73
0000f0  666f726d          DCB      0x66,0x6f,0x72,0x6d
0000f4  6174696f          DCB      0x61,0x74,0x69,0x6f
0000f8  6e733a3a          DCB      0x6e,0x73,0x3a,0x3a
0000fc  5472616e          DCB      0x54,0x72,0x61,0x6e
000100  73666f72          DCB      0x73,0x66,0x6f,0x72
000104  6d547970          DCB      0x6d,0x54,0x79,0x70
000108  652c2073          DCB      0x65,0x2c,0x20,0x73
00010c  69676e65          DCB      0x69,0x67,0x6e,0x65
000110  6420696e          DCB      0x64,0x20,0x69,0x6e
000114  742c2041          DCB      0x74,0x2c,0x20,0x41
000118  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00011c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000120  65646465          DCB      0x65,0x64,0x64,0x65
000124  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000128  656d6f72          DCB      0x65,0x6d,0x6f,0x72
00012c  79537461          DCB      0x79,0x53,0x74,0x61
000130  636b2c20          DCB      0x63,0x6b,0x2c,0x20
000134  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000138  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00013c  62656464          DCB      0x62,0x65,0x64,0x64
000140  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000144  4d656d6f          DCB      0x4d,0x65,0x6d,0x6f
000148  72795374          DCB      0x72,0x79,0x53,0x74
00014c  61636b20          DCB      0x61,0x63,0x6b,0x20
000150  262c2041          DCB      0x26,0x2c,0x20,0x41
000154  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000158  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00015c  65646465          DCB      0x65,0x64,0x64,0x65
000160  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000164  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000168  79537461          DCB      0x79,0x53,0x74,0x61
00016c  636b2900          DCB      0x63,0x6b,0x29,0x00
                  |symbol_number.164|
000170  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000174  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000178  73756c74          DCB      0x73,0x75,0x6c,0x74
00017c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000180  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000184  6d626564          DCB      0x6d,0x62,0x65,0x64
000188  6465643a          DCB      0x64,0x65,0x64,0x3a
00018c  3a54656d          DCB      0x3a,0x54,0x65,0x6d
000190  706c6174          DCB      0x70,0x6c,0x61,0x74
000194  65547261          DCB      0x65,0x54,0x72,0x61
000198  636b6572          DCB      0x63,0x6b,0x65,0x72
00019c  3a3a4c75          DCB      0x3a,0x3a,0x4c,0x75
0001a0  6361734b          DCB      0x63,0x61,0x73,0x4b
0001a4  616e6164          DCB      0x61,0x6e,0x61,0x64
0001a8  65547261          DCB      0x65,0x54,0x72,0x61
0001ac  636b6572          DCB      0x63,0x6b,0x65,0x72
0001b0  5f53616d          DCB      0x5f,0x53,0x61,0x6d
0001b4  706c6564          DCB      0x70,0x6c,0x65,0x64
0001b8  50726f6a          DCB      0x50,0x72,0x6f,0x6a
0001bc  65637469          DCB      0x65,0x63,0x74,0x69
0001c0  76653a3a          DCB      0x76,0x65,0x3a,0x3a
0001c4  49746572          DCB      0x49,0x74,0x65,0x72
0001c8  61746976          DCB      0x61,0x74,0x69,0x76
0001cc  656c7952          DCB      0x65,0x6c,0x79,0x52
0001d0  6566696e          DCB      0x65,0x66,0x69,0x6e
0001d4  65547261          DCB      0x65,0x54,0x72,0x61
0001d8  636b2863          DCB      0x63,0x6b,0x28,0x63
0001dc  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
0001e0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0001e4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0001e8  6d626564          DCB      0x6d,0x62,0x65,0x64
0001ec  6465643a          DCB      0x64,0x65,0x64,0x3a
0001f0  3a417272          DCB      0x3a,0x41,0x72,0x72
0001f4  61793c75          DCB      0x61,0x79,0x3c,0x75
0001f8  6e736967          DCB      0x6e,0x73,0x69,0x67
0001fc  6e656420          DCB      0x6e,0x65,0x64,0x20
000200  63686172          DCB      0x63,0x68,0x61,0x72
000204  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000208  20736967          DCB      0x20,0x73,0x69,0x67
00020c  6e656420          DCB      0x6e,0x65,0x64,0x20
000210  696e742c          DCB      0x69,0x6e,0x74,0x2c
000214  20736967          DCB      0x20,0x73,0x69,0x67
000218  6e656420          DCB      0x6e,0x65,0x64,0x20
00021c  696e742c          DCB      0x69,0x6e,0x74,0x2c
000220  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000224  61742c20          DCB      0x61,0x74,0x2c,0x20
000228  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00022c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000230  62656464          DCB      0x62,0x65,0x64,0x64
000234  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000238  5472616e          DCB      0x54,0x72,0x61,0x6e
00023c  73666f72          DCB      0x73,0x66,0x6f,0x72
000240  6d617469          DCB      0x6d,0x61,0x74,0x69
000244  6f6e733a          DCB      0x6f,0x6e,0x73,0x3a
000248  3a547261          DCB      0x3a,0x54,0x72,0x61
00024c  6e73666f          DCB      0x6e,0x73,0x66,0x6f
000250  726d5479          DCB      0x72,0x6d,0x54,0x79
000254  70652c20          DCB      0x70,0x65,0x2c,0x20
000258  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
00025c  20262c20          DCB      0x20,0x26,0x2c,0x20
000260  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000264  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000268  62656464          DCB      0x62,0x65,0x64,0x64
00026c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000270  4d656d6f          DCB      0x4d,0x65,0x6d,0x6f
000274  72795374          DCB      0x72,0x79,0x53,0x74
000278  61636b29          DCB      0x61,0x63,0x6b,0x29
00027c  00000000          DCB      0x00,0x00,0x00,0x00
000280  41727261          DCB      0x41,0x72,0x72,0x61
000284  793c5479          DCB      0x79,0x3c,0x54,0x79
000288  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00028c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000290  70757465          DCB      0x70,0x75,0x74,0x65
000294  52657175          DCB      0x52,0x65,0x71,0x75
000298  69726564          DCB      0x69,0x72,0x65,0x64
00029c  53747269          DCB      0x53,0x74,0x72,0x69
0002a0  64650000          DCB      0x64,0x65,0x00,0x00
0002a4  496e7661          DCB      0x49,0x6e,0x76,0x61
0002a8  6c696420          DCB      0x6c,0x69,0x64,0x20
0002ac  73697a65          DCB      0x73,0x69,0x7a,0x65
0002b0  00000000          DCB      0x00,0x00,0x00,0x00
0002b4  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0002b8  6f726574          DCB      0x6f,0x72,0x65,0x74
0002bc  6563685c          DCB      0x65,0x63,0x68,0x5c
0002c0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0002c4  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0002c8  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0002cc  64655c61          DCB      0x64,0x65,0x5c,0x61
0002d0  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0002d4  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0002d8  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0002dc  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0002e0  2f617272          DCB      0x2f,0x61,0x72,0x72
0002e4  61793264          DCB      0x61,0x79,0x32,0x64
0002e8  2e680000          DCB      0x2e,0x68,0x00,0x00
0002ec  41727261          DCB      0x41,0x72,0x72,0x61
0002f0  793c5479          DCB      0x79,0x3c,0x54,0x79
0002f4  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0002f8  3a676574          DCB      0x3a,0x67,0x65,0x74
0002fc  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000300  65000000          DCB      0x65,0x00,0x00,0x00
000304  4e656761          DCB      0x4e,0x65,0x67,0x61
000308  74697665          DCB      0x74,0x69,0x76,0x65
00030c  2064696d          DCB      0x20,0x64,0x69,0x6d
000310  656e7369          DCB      0x65,0x6e,0x73,0x69
000314  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000318  41727261          DCB      0x41,0x72,0x72,0x61
00031c  793c5479          DCB      0x79,0x3c,0x54,0x79
000320  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000324  3a536574          DCB      0x3a,0x53,0x65,0x74
000328  5a65726f          DCB      0x5a,0x65,0x72,0x6f
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  41727261          DCB      0x41,0x72,0x72,0x61
000334  793c5479          DCB      0x79,0x3c,0x54,0x79
000338  70653e20          DCB      0x70,0x65,0x3e,0x20
00033c  6973206e          DCB      0x69,0x73,0x20,0x6e
000340  6f742076          DCB      0x6f,0x74,0x20,0x76
000344  616c6964          DCB      0x61,0x6c,0x69,0x64
000348  00000000          DCB      0x00,0x00,0x00,0x00
00034c  4c756361          DCB      0x4c,0x75,0x63,0x61
000350  734b616e          DCB      0x73,0x4b,0x61,0x6e
000354  61646554          DCB      0x61,0x64,0x65,0x54
000358  7261636b          DCB      0x72,0x61,0x63,0x6b
00035c  65725f53          DCB      0x65,0x72,0x5f,0x53
000360  616d706c          DCB      0x61,0x6d,0x70,0x6c
000364  65645072          DCB      0x65,0x64,0x50,0x72
000368  6f6a6563          DCB      0x6f,0x6a,0x65,0x63
00036c  74697665          DCB      0x74,0x69,0x76,0x65
000370  3a3a4c75          DCB      0x3a,0x3a,0x4c,0x75
000374  6361734b          DCB      0x63,0x61,0x73,0x4b
000378  616e6164          DCB      0x61,0x6e,0x61,0x64
00037c  65547261          DCB      0x65,0x54,0x72,0x61
000380  636b6572          DCB      0x63,0x6b,0x65,0x72
000384  5f53616d          DCB      0x5f,0x53,0x61,0x6d
000388  706c6564          DCB      0x70,0x6c,0x65,0x64
00038c  50726f6a          DCB      0x50,0x72,0x6f,0x6a
000390  65637469          DCB      0x65,0x63,0x74,0x69
000394  76650000          DCB      0x76,0x65,0x00,0x00
000398  54686520          DCB      0x54,0x68,0x65,0x20
00039c  74656d70          DCB      0x74,0x65,0x6d,0x70
0003a0  6c617465          DCB      0x6c,0x61,0x74,0x65
0003a4  496d6167          DCB      0x49,0x6d,0x61,0x67
0003a8  65206d75          DCB      0x65,0x20,0x6d,0x75
0003ac  73742062          DCB      0x73,0x74,0x20,0x62
0003b0  65206120          DCB      0x65,0x20,0x61,0x20
0003b4  706f7765          DCB      0x70,0x6f,0x77,0x65
0003b8  72206f66          DCB      0x72,0x20,0x6f,0x66
0003bc  2074776f          DCB      0x20,0x74,0x77,0x6f
0003c0  20736d61          DCB      0x20,0x73,0x6d,0x61
0003c4  6c6c6572          DCB      0x6c,0x6c,0x65,0x72
0003c8  20746861          DCB      0x20,0x74,0x68,0x61
0003cc  6e204241          DCB      0x6e,0x20,0x42,0x41
0003d0  53455f49          DCB      0x53,0x45,0x5f,0x49
0003d4  4d414745          DCB      0x4d,0x41,0x47,0x45
0003d8  5f574944          DCB      0x5f,0x57,0x49,0x44
0003dc  544800            DCB      0x54,0x48,0x00

                          AREA ||t._ZN4Anki8Embedded5PointIfEC1Ev||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5PointIfEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point<float>::Point__sub_object()
                  _ZN4Anki8Embedded5PointIfEC1Ev PROC ; Anki::Embedded::Point<float>::Point()
;;;28     #endif
;;;29         template<typename Type> Point<Type>::Point()
;;;30           : x(static_cast<Type>(0)), y(static_cast<Type>(0))
;;;31         {
;;;32         }
;;;33     
000000  ed9f0a03          VLDR     s0,|L80.16|
000004  ed800a00          VSTR     s0,[r0,#0]
000008  ed800a01          VSTR     s0,[r0,#4]
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L80.16|
000010  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.81||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5PointIfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5PointIfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d017              BEQ      |L87.64|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L87.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L87.30|
                  |L87.26|
00001a  462b              MOV      r3,r5
00001c  e010              B        |L87.64|
                  |L87.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0a              BGE      |L87.64|
00002a  2185              MOVS     r1,#0x85
00002c  4806              LDR      r0,|L87.72|
00002e  e9cd0100          STRD     r0,r1,[sp,#0]
000032  a306              ADR      r3,|L87.76|
000034  a214              ADR      r2,|L87.136|
000036  a11a              ADR      r1,|L87.160|
000038  2005              MOVS     r0,#5
00003a  f7fffffe          BL       _Anki_Log
00003e  462b              MOV      r3,r5
                  |L87.64|
000040  6023              STR      r3,[r4,#0]
000042  b003              ADD      sp,sp,#0xc
000044  4620              MOV      r0,r4
000046  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L87.72|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L87.76|
00004c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/sequen"
000050  6f726574
000054  6563685c
000058  636f6d6d
00005c  6f6e5c69
000060  6e636c75
000064  64655c61
000068  6e6b692f
00006c  636f6d6d
000070  6f6e2f72
000074  6f626f74
000078  2f736571
00007c  75656e  
00007f  6365732e          DCB      "ces.h",0
000083  6800    
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L87.136|
000088  73697a65          DCB      "size estimation failed",0
00008c  20657374
000090  696d6174
000094  696f6e20
000098  6661696c
00009c  656400  
00009f  00                DCB      0
                  |L87.160|
0000a0  4c696e65          DCB      "LinearSequence<Type>::computeSize",0
0000a4  61725365
0000a8  7175656e
0000ac  63653c54
0000b0  7970653e
0000b4  3a3a636f
0000b8  6d707574
0000bc  6553697a
0000c0  6500    
0000c2  00                DCB      0
0000c3  00                DCB      0

                          AREA ||area_number.88||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.88||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC2ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_                  ; Alternate entry point ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1__sub_object(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
                  _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_ PROC ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
;;;347    
;;;348        template<typename Type> ArraySliceLimits_in2_out1<Type>::ArraySliceLimits_in2_out1(const LinearSequence<Type> &in1_ySlice, const LinearSequence<Type> &in1_xSlice, bool in1_isTransposed, const LinearSequence<Type> &in2_ySlice, const LinearSequence<Type> &in2_xSlice, bool in2_isTransposed, const LinearSequence<Type> &out1_ySlice, const LinearSequence<Type> &out1_xSlice)
;;;349          : ySize(out1_ySlice.get_size()), xSize(out1_xSlice.get_size()),
;;;350          rawOut1Limits(out1_ySlice, out1_xSlice),
;;;351          rawIn1Limits(in1_ySlice, in1_xSlice), in1_isTransposed(in1_isTransposed),
;;;352          rawIn2Limits(in2_ySlice, in2_xSlice), in2_isTransposed(in2_isTransposed)
;;;353        {
;;;354          isValid = false;
;;;355    
;;;356          this->out1_xInnerIncrement = this->rawOut1Limits.xIncrement;
;;;357          this->in1_yInnerIncrement = 0;
;;;358          this->in1_xInnerIncrement = 0;
;;;359          this->in2_yInnerIncrement = 0;
;;;360          this->in2_xInnerIncrement = 0;
;;;361    
;;;362          if(!in1_isTransposed && !in2_isTransposed) {
;;;363            const bool sizesMatch = (in1_xSlice.get_size() == in2_xSlice.get_size()) && (in1_xSlice.get_size() == out1_xSlice.get_size()) && (in1_ySlice.get_size() == in2_ySlice.get_size()) && (in1_ySlice.get_size() == out1_ySlice.get_size());
;;;364    
;;;365            if(sizesMatch) {
;;;366              isValid = true;
;;;367              isSimpleIteration = true;
;;;368    
;;;369              this->in1_xInnerIncrement = this->rawIn1Limits.xIncrement;
;;;370              this->in2_xInnerIncrement = this->rawIn2Limits.xIncrement;
;;;371    
;;;372              this->in1Y = this->rawIn1Limits.yStart;
;;;373              this->in2Y = this->rawIn2Limits.yStart;
;;;374              this->out1Y = this->rawOut1Limits.yStart;
;;;375            }
;;;376          } else { // if(!in1_isTransposed)
;;;377            isSimpleIteration = false;
;;;378    
;;;379            bool sizesMatch = false;
;;;380    
;;;381            if(in1_isTransposed && in2_isTransposed) {
;;;382              sizesMatch = (in1_xSlice.get_size() == in2_xSlice.get_size()) && (in1_xSlice.get_size() == out1_ySlice.get_size()) && (in1_ySlice.get_size() == in2_ySlice.get_size()) && (in1_ySlice.get_size() == out1_xSlice.get_size());
;;;383              this->in1_yInnerIncrement = this->rawIn1Limits.yIncrement;
;;;384              this->in2_yInnerIncrement = this->rawIn2Limits.yIncrement;
;;;385            } else if(in1_isTransposed) {
;;;386              sizesMatch = (in1_xSlice.get_size() == in2_ySlice.get_size()) && (in1_xSlice.get_size() == out1_ySlice.get_size()) && (in1_ySlice.get_size() == in2_xSlice.get_size()) && (in1_ySlice.get_size() == out1_xSlice.get_size());
;;;387              this->in1_yInnerIncrement = this->rawIn1Limits.yIncrement;
;;;388              this->in2_xInnerIncrement = this->rawIn2Limits.xIncrement;
;;;389            } else if(in2_isTransposed) {
;;;390              sizesMatch = (in1_xSlice.get_size() == in2_ySlice.get_size()) && (in1_xSlice.get_size() == out1_xSlice.get_size()) && (in1_ySlice.get_size() == in2_xSlice.get_size()) && (in1_ySlice.get_size() == out1_ySlice.get_size());
;;;391              this->in1_xInnerIncrement = this->rawIn1Limits.xIncrement;
;;;392              this->in2_yInnerIncrement = this->rawIn2Limits.yIncrement;
;;;393            } else {
;;;394              AnkiAssert(false); // should not be possible
;;;395            }
;;;396    
;;;397            if(!sizesMatch) {
;;;398              AnkiError("ArraySliceLimits_in2_out1", "Subscripted assignment dimension mismatch");
;;;399              return;
;;;400            }
;;;401    
;;;402            isValid = true;
;;;403    
;;;404            this->in1X = this->rawIn1Limits.xStart;
;;;405            this->in1Y = this->rawIn1Limits.yStart;
;;;406            this->in2X = this->rawIn2Limits.xStart;
;;;407            this->in2Y = this->rawIn2Limits.yStart;
;;;408    
;;;409            this->out1Y = this->rawOut1Limits.yStart;
;;;410          } // if(!in1_isTransposed) ... else
;;;411        } // ArraySliceLimits_in1_out1
;;;412    
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b082              SUB      sp,sp,#8
000006  4604              MOV      r4,r0
000008  e9ddc00d          LDRD     r12,r0,[sp,#0x34]
00000c  e9dd650a          LDRD     r6,r5,[sp,#0x28]
000010  f8dd8030          LDR      r8,[sp,#0x30]
000014  f8dc7000          LDR      r7,[r12,#0]
000018  61e7              STR      r7,[r4,#0x1c]
00001a  6807              LDR      r7,[r0,#0]
00001c  6227              STR      r7,[r4,#0x20]
00001e  f8d09004          LDR      r9,[r0,#4]
000022  f8c49038          STR      r9,[r4,#0x38]
000026  f8d09008          LDR      r9,[r0,#8]
00002a  f8c4903c          STR      r9,[r4,#0x3c]
00002e  f8d09000          LDR      r9,[r0,#0]
000032  f8c49040          STR      r9,[r4,#0x40]
000036  f8dc9004          LDR      r9,[r12,#4]
00003a  f8c49044          STR      r9,[r4,#0x44]
00003e  f8dc9008          LDR      r9,[r12,#8]
000042  f8c49048          STR      r9,[r4,#0x48]
000046  f8dc9000          LDR      r9,[r12,#0]
00004a  f8c4904c          STR      r9,[r4,#0x4c]
00004e  f8d2a004          LDR      r10,[r2,#4]
000052  f8c4a050          STR      r10,[r4,#0x50]
000056  f8d2a008          LDR      r10,[r2,#8]
00005a  f8c4a054          STR      r10,[r4,#0x54]
00005e  f8d2a000          LDR      r10,[r2,#0]
000062  f8c4a058          STR      r10,[r4,#0x58]
000066  f8d1a004          LDR      r10,[r1,#4]
00006a  f8c4a05c          STR      r10,[r4,#0x5c]
00006e  f8d1a008          LDR      r10,[r1,#8]
000072  f8c4a060          STR      r10,[r4,#0x60]
000076  f8d1a000          LDR      r10,[r1,#0]
00007a  f8c4a064          STR      r10,[r4,#0x64]
00007e  f8843068          STRB     r3,[r4,#0x68]
000082  f8d5a004          LDR      r10,[r5,#4]
000086  f8c4a06c          STR      r10,[r4,#0x6c]
00008a  f8d5a008          LDR      r10,[r5,#8]
00008e  f8c4a070          STR      r10,[r4,#0x70]
000092  f8d5a000          LDR      r10,[r5,#0]
000096  f8c4a074          STR      r10,[r4,#0x74]
00009a  f8d6a004          LDR      r10,[r6,#4]
00009e  f8c4a078          STR      r10,[r4,#0x78]
0000a2  f8d6a008          LDR      r10,[r6,#8]
0000a6  f8c4a07c          STR      r10,[r4,#0x7c]
0000aa  f8d6a000          LDR      r10,[r6,#0]
0000ae  f8c4a080          STR      r10,[r4,#0x80]
0000b2  f04f0900          MOV      r9,#0
0000b6  f8848084          STRB     r8,[r4,#0x84]
0000ba  f8849000          STRB     r9,[r4,#0]
0000be  6be7              LDR      r7,[r4,#0x3c]
0000c0  f8c4902c          STR      r9,[r4,#0x2c]
0000c4  e9c47909          STRD     r7,r9,[r4,#0x24]
0000c8  f8c49034          STR      r9,[r4,#0x34]
0000cc  f8c49030          STR      r9,[r4,#0x30]
0000d0  ea530a08          ORRS     r10,r3,r8
0000d4  f04f0701          MOV      r7,#1
0000d8  d01a              BEQ      |L94.272|
0000da  f8849001          STRB     r9,[r4,#1]
0000de  ea130f08          TST      r3,r8
0000e2  d035              BEQ      |L94.336|
0000e4  6812              LDR      r2,[r2,#0]
0000e6  682b              LDR      r3,[r5,#0]
0000e8  429a              CMP      r2,r3
0000ea  bf04              ITT      EQ
0000ec  f8dc3000          LDREQ    r3,[r12,#0]
0000f0  429a              CMPEQ    r2,r3
0000f2  d107              BNE      |L94.260|
0000f4  6809              LDR      r1,[r1,#0]
0000f6  6832              LDR      r2,[r6,#0]
0000f8  4291              CMP      r1,r2
0000fa  bf02              ITTT     EQ
0000fc  6800              LDREQ    r0,[r0,#0]
0000fe  4281              CMPEQ    r1,r0
000100  2001              MOVEQ    r0,#1
000102  d000              BEQ      |L94.262|
                  |L94.260|
000104  2000              MOVS     r0,#0
                  |L94.262|
000106  6e21              LDR      r1,[r4,#0x60]
000108  62e1              STR      r1,[r4,#0x2c]
00010a  6fe1              LDR      r1,[r4,#0x7c]
00010c  6361              STR      r1,[r4,#0x34]
00010e  e04e              B        |L94.430|
                  |L94.272|
000110  6812              LDR      r2,[r2,#0]
000112  682b              LDR      r3,[r5,#0]
000114  429a              CMP      r2,r3
000116  bf04              ITT      EQ
000118  6800              LDREQ    r0,[r0,#0]
00011a  4282              CMPEQ    r2,r0
00011c  d108              BNE      |L94.304|
00011e  6808              LDR      r0,[r1,#0]
000120  6831              LDR      r1,[r6,#0]
000122  4288              CMP      r0,r1
000124  bf02              ITTT     EQ
000126  f8dc1000          LDREQ    r1,[r12,#0]
00012a  4288              CMPEQ    r0,r1
00012c  2001              MOVEQ    r0,#1
00012e  d000              BEQ      |L94.306|
                  |L94.304|
000130  2000              MOVS     r0,#0
                  |L94.306|
000132  2800              CMP      r0,#0
000134  d047              BEQ      |L94.454|
000136  7027              STRB     r7,[r4,#0]
000138  7067              STRB     r7,[r4,#1]
00013a  6d60              LDR      r0,[r4,#0x54]
00013c  62a0              STR      r0,[r4,#0x28]
00013e  6f20              LDR      r0,[r4,#0x70]
000140  6320              STR      r0,[r4,#0x30]
000142  6de0              LDR      r0,[r4,#0x5c]
000144  60e0              STR      r0,[r4,#0xc]
000146  6fa0              LDR      r0,[r4,#0x78]
000148  6160              STR      r0,[r4,#0x14]
00014a  6c60              LDR      r0,[r4,#0x44]
00014c  6060              STR      r0,[r4,#4]
00014e  e03a              B        |L94.454|
                  |L94.336|
000150  b1ab              CBZ      r3,|L94.382|
000152  6812              LDR      r2,[r2,#0]
000154  6833              LDR      r3,[r6,#0]
000156  429a              CMP      r2,r3
000158  bf04              ITT      EQ
00015a  f8dc3000          LDREQ    r3,[r12,#0]
00015e  429a              CMPEQ    r2,r3
000160  d107              BNE      |L94.370|
000162  6809              LDR      r1,[r1,#0]
000164  682a              LDR      r2,[r5,#0]
000166  4291              CMP      r1,r2
000168  bf02              ITTT     EQ
00016a  6800              LDREQ    r0,[r0,#0]
00016c  4281              CMPEQ    r1,r0
00016e  2001              MOVEQ    r0,#1
000170  d000              BEQ      |L94.372|
                  |L94.370|
000172  2000              MOVS     r0,#0
                  |L94.372|
000174  6e21              LDR      r1,[r4,#0x60]
000176  62e1              STR      r1,[r4,#0x2c]
000178  6f21              LDR      r1,[r4,#0x70]
00017a  6321              STR      r1,[r4,#0x30]
00017c  e017              B        |L94.430|
                  |L94.382|
00017e  f1b80f00          CMP      r8,#0
000182  d024              BEQ      |L94.462|
000184  6812              LDR      r2,[r2,#0]
000186  6833              LDR      r3,[r6,#0]
000188  429a              CMP      r2,r3
00018a  bf04              ITT      EQ
00018c  6800              LDREQ    r0,[r0,#0]
00018e  4282              CMPEQ    r2,r0
000190  d108              BNE      |L94.420|
000192  6808              LDR      r0,[r1,#0]
000194  6829              LDR      r1,[r5,#0]
000196  4288              CMP      r0,r1
000198  bf02              ITTT     EQ
00019a  f8dc1000          LDREQ    r1,[r12,#0]
00019e  4288              CMPEQ    r0,r1
0001a0  2001              MOVEQ    r0,#1
0001a2  d000              BEQ      |L94.422|
                  |L94.420|
0001a4  2000              MOVS     r0,#0
                  |L94.422|
0001a6  6d61              LDR      r1,[r4,#0x54]
0001a8  62a1              STR      r1,[r4,#0x28]
0001aa  6fe1              LDR      r1,[r4,#0x7c]
0001ac  6361              STR      r1,[r4,#0x34]
                  |L94.430|
0001ae  b170              CBZ      r0,|L94.462|
0001b0  7027              STRB     r7,[r4,#0]
0001b2  6d20              LDR      r0,[r4,#0x50]
0001b4  6120              STR      r0,[r4,#0x10]
0001b6  6de0              LDR      r0,[r4,#0x5c]
0001b8  60e0              STR      r0,[r4,#0xc]
0001ba  6ee0              LDR      r0,[r4,#0x6c]
0001bc  61a0              STR      r0,[r4,#0x18]
0001be  6fa0              LDR      r0,[r4,#0x78]
0001c0  6160              STR      r0,[r4,#0x14]
0001c2  6c60              LDR      r0,[r4,#0x44]
0001c4  6060              STR      r0,[r4,#4]
                  |L94.454|
0001c6  b002              ADD      sp,sp,#8
0001c8  4620              MOV      r0,r4
0001ca  e8bd87f0          POP      {r4-r10,pc}
                  |L94.462|
0001ce  f44f71c7          MOV      r1,#0x18e
0001d2  4806              LDR      r0,|L94.492|
0001d4  e9cd0100          STRD     r0,r1,[sp,#0]
0001d8  a305              ADR      r3,|L94.496|
0001da  a214              ADR      r2,|L94.556|
0001dc  a11e              ADR      r1,|L94.600|
0001de  2005              MOVS     r0,#5
0001e0  f7fffffe          BL       _Anki_Log
0001e4  b002              ADD      sp,sp,#8
0001e6  4620              MOV      r0,r4
0001e8  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

                  |L94.492|
                          DCD      _ZZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)::__PRETTY_FUNCTION__
                  |L94.496|
0001f0  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0001f4  6f726574
0001f8  6563685c
0001fc  636f6d6d
000200  6f6e5c69
000204  6e636c75
000208  64655c61
00020c  6e6b692f
000210  636f6d6d
000214  6f6e2f72
000218  6f626f74
00021c  2f617272
000220  617953  
000223  6c696365          DCB      "lices.h",0
000227  732e6800
00022b  00                DCB      0
                  |L94.556|
00022c  53756273          DCB      "Subscripted assignment dimension mismatch",0
000230  63726970
000234  74656420
000238  61737369
00023c  676e6d65
000240  6e742064
000244  696d656e
000248  73696f6e
00024c  206d6973
000250  6d617463
000254  6800    
000256  00                DCB      0
000257  00                DCB      0
                  |L94.600|
000258  41727261          DCB      "ArraySliceLimits_in2_out1",0
00025c  79536c69
000260  63654c69
000264  6d697473
000268  5f696e32
00026c  5f6f7574
000270  3100    
000272  00                DCB      0
000273  00                DCB      0

                          AREA ||area_number.95||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_, LINKORDER=||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.95||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L101.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L101.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L101.384|
000044  a25c              ADR      r2,|L101.440|
000046  a160              ADR      r1,|L101.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L101.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L101.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L101.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L101.384|
000080  a24d              ADR      r2,|L101.440|
000082  a157              ADR      r1,|L101.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L101.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L101.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L101.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L101.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L101.384|
0000c8  a251              ADR      r2,|L101.528|
0000ca  a156              ADR      r1,|L101.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L101.372|
                  |L101.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L101.384|
0000e0  a258              ADR      r2,|L101.580|
0000e2  a15f              ADR      r1,|L101.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L101.372|
                  |L101.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L101.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L101.384|
000110  a259              ADR      r2,|L101.632|
000112  a144              ADR      r1,|L101.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L101.372|
                  |L101.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L101.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L101.384|
00015a  a251              ADR      r2,|L101.672|
00015c  a140              ADR      r1,|L101.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L101.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L101.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L101.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L101.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L101.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L101.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L101.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L101.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L101.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L101.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L101.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L101.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L101.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L101.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.102||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.102||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L108.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L108.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L108.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L108.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L108.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L108.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L108.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L108.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L108.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L108.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
0000b2  e009              B        |L108.200|
                  |L108.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L108.118|
                  |L108.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L108.140|
                  |L108.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L108.162|
                  |L108.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
                  |L108.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.109||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.109||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L115.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L115.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.116||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.116||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L122.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L122.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L122.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L122.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L122.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L122.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L122.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L122.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L122.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L122.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
0000b2  e009              B        |L122.200|
                  |L122.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L122.118|
                  |L122.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L122.140|
                  |L122.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L122.162|
                  |L122.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
                  |L122.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.123||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.123||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE||, COMGROUP=_ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE PROC ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::MemoryStack&)
;;;681    
;;;682          template<typename InType, typename OutType> Array<OutType> Vectorize(const bool isColumnMajor, const Array<InType> &in, MemoryStack &memory)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;683          {
000004  4689              MOV      r9,r1
000006  4682              MOV      r10,r0
000008  b089              SUB      sp,sp,#0x24
00000a  461e              MOV      r6,r3
00000c  4614              MOV      r4,r2
;;;684            const s32 inHeight = in.get_size(0);
00000e  2100              MOVS     r1,#0
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000016  4605              MOV      r5,r0
;;;685            const s32 inWidth = in.get_size(1);
000018  2101              MOVS     r1,#1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000020  4607              MOV      r7,r0
;;;686    
;;;687            Array<OutType> out(1, inHeight*inWidth, memory);
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  2101              MOVS     r1,#1
000028  a807              ADD      r0,sp,#0x1c
00002a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00002e  6800              LDR      r0,[r0,#0]
000030  9000              STR      r0,[sp,#0]
000032  fb05f207          MUL      r2,r5,r7
000036  4633              MOV      r3,r6
000038  2101              MOVS     r1,#1
00003a  a802              ADD      r0,sp,#8
00003c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;688    
;;;689            Vectorize<InType, OutType>(isColumnMajor, in, out);
000040  ad02              ADD      r5,sp,#8
000042  2100              MOVS     r1,#0
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00004a  2801              CMP      r0,#1
00004c  d00b              BEQ      |L129.102|
00004e  f44f7129          MOV      r1,#0x2a4
000052  4842              LDR      r0,|L129.348|
000054  e9cd0100          STRD     r0,r1,[sp,#0]
000058  a341              ADR      r3,|L129.352|
00005a  a24f              ADR      r2,|L129.408|
00005c  a153              ADR      r1,|L129.428|
00005e  2005              MOVS     r0,#5
000060  f7fffffe          BL       _Anki_Log
000064  e072              B        |L129.332|
                  |L129.102|
000066  2100              MOVS     r1,#0
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00006e  4680              MOV      r8,r0
000070  2101              MOVS     r1,#1
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000078  4607              MOV      r7,r0
00007a  2100              MOVS     r1,#0
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000082  4606              MOV      r6,r0
000084  2101              MOVS     r1,#1
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00008c  4603              MOV      r3,r0
00008e  fb08f007          MUL      r0,r8,r7
000092  fb06f103          MUL      r1,r6,r3
000096  4288              CMP      r0,r1
000098  d00b              BEQ      |L129.178|
00009a  f44f711b          MOV      r1,#0x26c
00009e  4846              LDR      r0,|L129.440|
0000a0  e9cd0100          STRD     r0,r1,[sp,#0]
0000a4  a32e              ADR      r3,|L129.352|
0000a6  a245              ADR      r2,|L129.444|
0000a8  a151              ADR      r1,|L129.496|
0000aa  2005              MOVS     r0,#5
0000ac  f7fffffe          BL       _Anki_Log
0000b0  e04c              B        |L129.332|
                  |L129.178|
0000b2  2100              MOVS     r1,#0
0000b4  4608              MOV      r0,r1
0000b6  f1b90f00          CMP      r9,#0
0000ba  468c              MOV      r12,r1
0000bc  d022              BEQ      |L129.260|
0000be  2e00              CMP      r6,#0
0000c0  dd44              BLE      |L129.332|
                  |L129.194|
0000c2  68af              LDR      r7,[r5,#8]
0000c4  692a              LDR      r2,[r5,#0x10]
0000c6  fb0c2b07          MLA      r11,r12,r7,r2
0000ca  2200              MOVS     r2,#0
0000cc  2b00              CMP      r3,#0
0000ce  dd14              BLE      |L129.250|
                  |L129.208|
0000d0  f8d49008          LDR      r9,[r4,#8]
0000d4  6927              LDR      r7,[r4,#0x10]
0000d6  fb017709          MLA      r7,r1,r9,r7
0000da  eb070780          ADD      r7,r7,r0,LSL #2
0000de  1c49              ADDS     r1,r1,#1
0000e0  ed970a00          VLDR     s0,[r7,#0]
0000e4  eb0b0782          ADD      r7,r11,r2,LSL #2
0000e8  4541              CMP      r1,r8
0000ea  ed870a00          VSTR     s0,[r7,#0]
0000ee  bfa4              ITT      GE
0000f0  2100              MOVGE    r1,#0
0000f2  1c40              ADDGE    r0,r0,#1
0000f4  1c52              ADDS     r2,r2,#1
0000f6  429a              CMP      r2,r3
0000f8  dbea              BLT      |L129.208|
                  |L129.250|
0000fa  f10c0c01          ADD      r12,r12,#1
0000fe  45b4              CMP      r12,r6
000100  dbdf              BLT      |L129.194|
000102  e023              B        |L129.332|
                  |L129.260|
000104  2e00              CMP      r6,#0
000106  dd21              BLE      |L129.332|
                  |L129.264|
000108  f8d58008          LDR      r8,[r5,#8]
00010c  692a              LDR      r2,[r5,#0x10]
00010e  fb0c2b08          MLA      r11,r12,r8,r2
000112  2200              MOVS     r2,#0
000114  2b00              CMP      r3,#0
000116  dd15              BLE      |L129.324|
                  |L129.280|
000118  f8d49008          LDR      r9,[r4,#8]
00011c  f8d48010          LDR      r8,[r4,#0x10]
000120  fb018809          MLA      r8,r1,r9,r8
000124  eb080880          ADD      r8,r8,r0,LSL #2
000128  1c40              ADDS     r0,r0,#1
00012a  ed980a00          VLDR     s0,[r8,#0]
00012e  eb0b0882          ADD      r8,r11,r2,LSL #2
000132  42b8              CMP      r0,r7
000134  ed880a00          VSTR     s0,[r8,#0]
000138  bfa4              ITT      GE
00013a  2000              MOVGE    r0,#0
00013c  1c49              ADDGE    r1,r1,#1
00013e  1c52              ADDS     r2,r2,#1
000140  429a              CMP      r2,r3
000142  dbe9              BLT      |L129.280|
                  |L129.324|
000144  f10c0c01          ADD      r12,r12,#1
000148  45b4              CMP      r12,r6
00014a  dbdd              BLT      |L129.264|
                  |L129.332|
00014c  ac02              ADD      r4,sp,#8
00014e  e8b4100f          LDM      r4!,{r0-r3,r12}
000152  e8aa100f          STM      r10!,{r0-r3,r12}
;;;690    
;;;691            return out;
;;;692          }
000156  b009              ADD      sp,sp,#0x24
000158  e8bd8ff0          POP      {r4-r11,pc}
;;;693    
                          ENDP

                  |L129.348|
                          DCD      _ZZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L129.352|
000160  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
000164  6f726574
000168  6563685c
00016c  636f6d6d
000170  6f6e5c69
000174  6e636c75
000178  64655c61
00017c  6e6b692f
000180  636f6d6d
000184  6f6e2f72
000188  6f626f74
00018c  2f6d6174
000190  726978  
000193  2e6800            DCB      ".h",0
000196  00                DCB      0
000197  00                DCB      0
                  |L129.408|
000198  4f757470          DCB      "Output is not 1xN",0
00019c  75742069
0001a0  73206e6f
0001a4  74203178
0001a8  4e00    
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L129.428|
0001ac  56656374          DCB      "Vectorize",0
0001b0  6f72697a
0001b4  6500    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L129.440|
                          DCD      _ZZN4Anki8Embedded6Matrix7ReshapeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Reshape<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L129.444|
0001bc  496e7075          DCB      "Input and Output matrices are incompatible sizes",0
0001c0  7420616e
0001c4  64204f75
0001c8  74707574
0001cc  206d6174
0001d0  72696365
0001d4  73206172
0001d8  6520696e
0001dc  636f6d70
0001e0  61746962
0001e4  6c652073
0001e8  697a6573
0001ec  00      
0001ed  00                DCB      0
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L129.496|
0001f0  52657368          DCB      "Reshape",0
0001f4  61706500

                          AREA ||area_number.130||, COMGROUP=_ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE, LINKORDER=||t._ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.130||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix9VectorizeIffEENS0_5ArrayIT0_EEbRKNS3_IT_EERNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_||, COMGROUP=_ZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_ PROC ; Anki::Embedded::Interp2_Affine<unsigned char, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Meshgrid<float>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Point<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
;;;141    
;;;142        template<typename InType, typename OutType> Result Interp2_Affine(const Array<InType> &reference, const Meshgrid<f32> &originalCoordinates, const Array<f32> &homography, const Point<f32> &centerOffset, Array<OutType> &out, const InterpolationType interpolationType, const OutType invalidValue)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;143        {
000004  4606              MOV      r6,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  4693              MOV      r11,r2
;;;144          AnkiConditionalErrorAndReturnValue(interpolationType == INTERPOLATE_LINEAR,
00000c  4de7              LDR      r5,|L136.940|
00000e  460f              MOV      r7,r1                 ;143
000010  ed2d8b10          VPUSH    {d8-d15}              ;143
000014  b085              SUB      sp,sp,#0x14           ;143
000016  eef0da40          VMOV.F32 s27,s0                ;143
00001a  e9dd8024          LDRD     r8,r0,[sp,#0x90]      ;143
00001e  2800              CMP      r0,#0
000020  d010              BEQ      |L136.68|
000022  2090              MOVS     r0,#0x90
000024  e9cd5000          STRD     r5,r0,[sp,#0]
000028  a3e1              ADR      r3,|L136.944|
00002a  a2f0              ADR      r2,|L136.1004|
00002c  a1f9              ADR      r1,|L136.1044|
00002e  2005              MOVS     r0,#5
000030  f7fffffe          BL       _Anki_Log
000034  f04f7040          MOV      r0,#0x3000000
                  |L136.56|
;;;145            RESULT_FAIL_INVALID_PARAMETER, "Interp2_Affine", "Only INTERPOLATE_LINEAR is supported");
;;;146    
;;;147          AnkiConditionalErrorAndReturnValue(AreValid(reference, out),
;;;148            RESULT_FAIL_INVALID_OBJECT, "Interp2_Affine", "Invalid objects");
;;;149    
;;;150          AnkiConditionalErrorAndReturnValue(NotAliased(reference, out),
;;;151            RESULT_FAIL_ALIASED_MEMORY, "Interp2_Affine", "reference cannot be the same as out");
;;;152    
;;;153          const s32 referenceHeight = reference.get_size(0);
;;;154          const s32 referenceWidth = reference.get_size(1);
;;;155    
;;;156          const s32 outHeight = out.get_size(0);
;;;157          const s32 outWidth = out.get_size(1);
;;;158    
;;;159          const bool isOutputOneDimensional = (out.get_size(0) == 1);
;;;160    
;;;161          const f32 xyReferenceMin = 0.0f;
;;;162          const f32 xReferenceMax = static_cast<f32>(referenceWidth) - 1.0f;
;;;163          const f32 yReferenceMax = static_cast<f32>(referenceHeight) - 1.0f;
;;;164    
;;;165          const f32 h00 = homography[0][0]; const f32 h01 = homography[0][1]; const f32 h02 = homography[0][2];
;;;166          const f32 h10 = homography[1][0]; const f32 h11 = homography[1][1]; const f32 h12 = homography[1][2];
;;;167    
;;;168          const LinearSequence<f32> &yGridVector = originalCoordinates.get_yGridVector();
;;;169          const LinearSequence<f32> &xGridVector = originalCoordinates.get_xGridVector();
;;;170    
;;;171          const f32 yGridStart = yGridVector.get_start();
;;;172          const f32 xGridStart = xGridVector.get_start();
;;;173    
;;;174          const f32 yGridDelta = yGridVector.get_increment();
;;;175          const f32 xGridDelta = xGridVector.get_increment();
;;;176    
;;;177          const s32 yIterationMax = yGridVector.get_size();
;;;178          const s32 xIterationMax = xGridVector.get_size();
;;;179    
;;;180          const f32 yTransformedDelta = h10 * yGridDelta;
;;;181          const f32 xTransformedDelta = h00 * xGridDelta;
;;;182    
;;;183          // One last check, to see if the sizes match
;;;184          if(isOutputOneDimensional) {
;;;185            const s32 numOutputElements = outHeight * outWidth;
;;;186            const s32 numOriginalCoordinates = xGridVector.get_size() * yGridVector.get_size();
;;;187    
;;;188            AnkiConditionalErrorAndReturnValue(
;;;189              outWidth == numOutputElements &&
;;;190              numOriginalCoordinates == numOutputElements,
;;;191              RESULT_FAIL_INVALID_SIZE, "Interp2_Affine", "originalCoordinates is the wrong size");
;;;192          } else {
;;;193            AnkiConditionalErrorAndReturnValue(
;;;194              yGridVector.get_size() == outHeight &&
;;;195              xGridVector.get_size() == outWidth,
;;;196              RESULT_FAIL_INVALID_SIZE, "Interp2_Affine", "originalCoordinates is the wrong size");
;;;197          }
;;;198    
;;;199          OutType * restrict pOut = out.Pointer(0,0);
;;;200    
;;;201          if(isOutputOneDimensional) {
;;;202            // pOut is incremented at the top of the loop, so decrement it here
;;;203            pOut -= xIterationMax;
;;;204          }
;;;205    
;;;206          f32 yOriginal = yGridStart;
;;;207          for(s32 y=0; y<yIterationMax; y++) {
;;;208            if(isOutputOneDimensional) {
;;;209              // If the output is one dimensional, then we will do the next set of x iterations later on
;;;210              // the same output row
;;;211              pOut += xIterationMax;
;;;212            } else {
;;;213              pOut = out.Pointer(y,0);
;;;214            }
;;;215    
;;;216            const f32 xOriginal = xGridStart;
;;;217    
;;;218            // TODO: This could be strength-reduced further, but it wouldn't be much faster
;;;219            f32 xTransformed = h00*xOriginal + h01*yOriginal + h02 + centerOffset.x;
;;;220            f32 yTransformed = h10*xOriginal + h11*yOriginal + h12 + centerOffset.y;
;;;221    
;;;222            for(s32 x=0; x<xIterationMax; x++) {
;;;223              const f32 x0 = FLT_FLOOR(xTransformed);
;;;224              const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
;;;225    
;;;226              const f32 y0 = FLT_FLOOR(yTransformed);
;;;227              const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
;;;228    
;;;229              // If out of bounds, set as invalid and continue
;;;230              if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;231                // strength reduction for the affine transformation along this horizontal line
;;;232                xTransformed += xTransformedDelta;
;;;233                yTransformed += yTransformedDelta;
;;;234    
;;;235                pOut[x] = invalidValue;
;;;236                continue;
;;;237              }
;;;238    
;;;239              const f32 alphaX = xTransformed - x0;
;;;240              const f32 alphaXinverse = 1 - alphaX;
;;;241    
;;;242              const f32 alphaY = yTransformed - y0;
;;;243              const f32 alphaYinverse = 1.0f - alphaY;
;;;244    
;;;245              const s32 y0S32 = Round<s32>(y0);
;;;246              const s32 y1S32 = Round<s32>(y1);
;;;247              const s32 x0S32 = Round<s32>(x0);
;;;248    
;;;249              const InType * restrict pReference_y0 = reference.Pointer(y0S32, x0S32);
;;;250              const InType * restrict pReference_y1 = reference.Pointer(y1S32, x0S32);
;;;251    
;;;252              const f32 pixelTL = *pReference_y0;
;;;253              const f32 pixelTR = *(pReference_y0+1);
;;;254              const f32 pixelBL = *pReference_y1;
;;;255              const f32 pixelBR = *(pReference_y1+1);
;;;256    
;;;257              const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;258    
;;;259              const OutType interpolatedPixel = RoundIfInteger<OutType>(interpolatedPixelF32);
;;;260    
;;;261              pOut[x] = interpolatedPixel;
;;;262    
;;;263              // strength reduction for the affine transformation along this horizontal line
;;;264              xTransformed += xTransformedDelta;
;;;265              yTransformed += yTransformedDelta;
;;;266            } // for(s32 x=0; x<xIterationMax; x++)
;;;267    
;;;268            yOriginal += yGridDelta;
;;;269          } // for(s32 y=0; y<yIterationMax; y++)
;;;270    
;;;271          return RESULT_OK;
;;;272        } // Interp2_Affine
000038  b005              ADD      sp,sp,#0x14
00003a  ecbd8b10          VPOP     {d8-d15}
00003e  b006              ADD      sp,sp,#0x18
000040  e8bd8ff0          POP      {r4-r11,pc}
                  |L136.68|
000044  6930              LDR      r0,[r6,#0x10]
000046  2800              CMP      r0,#0
000048  f00080a5          BEQ.W    |L136.406|
00004c  6830              LDR      r0,[r6,#0]
00004e  2800              CMP      r0,#0
000050  bfa4              ITT      GE
000052  6870              LDRGE    r0,[r6,#4]
000054  2800              CMPGE    r0,#0
000056  db7d              BLT      |L136.340|
000058  4640              MOV      r0,r8
00005a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00005e  2800              CMP      r0,#0
000060  d078              BEQ      |L136.340|
000062  6930              LDR      r0,[r6,#0x10]
000064  2800              CMP      r0,#0
000066  f00080a2          BEQ.W    |L136.430|
00006a  6830              LDR      r0,[r6,#0]
00006c  2800              CMP      r0,#0
00006e  bfa4              ITT      GE
000070  6870              LDRGE    r0,[r6,#4]
000072  2800              CMPGE    r0,#0
000074  f2c0809b          BLT.W    |L136.430|
000078  4640              MOV      r0,r8
00007a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00007e  2800              CMP      r0,#0
000080  f0008095          BEQ.W    |L136.430|
000084  6930              LDR      r0,[r6,#0x10]
000086  9000              STR      r0,[sp,#0]
000088  f8d80010          LDR      r0,[r8,#0x10]
00008c  2100              MOVS     r1,#0
00008e  466a              MOV      r2,sp
000090  9001              STR      r0,[sp,#4]
                  |L136.146|
000092  1c48              ADDS     r0,r1,#1
000094  2802              CMP      r0,#2
000096  bfb8              IT       LT
000098  f8523021          LDRLT    r3,[r2,r1,LSL #2]
00009c  da06              BGE      |L136.172|
                  |L136.158|
00009e  f852c020          LDR      r12,[r2,r0,LSL #2]
0000a2  4563              CMP      r3,r12
0000a4  d076              BEQ      |L136.404|
0000a6  1c40              ADDS     r0,r0,#1
0000a8  2802              CMP      r0,#2
0000aa  dbf8              BLT      |L136.158|
                  |L136.172|
0000ac  1c49              ADDS     r1,r1,#1
0000ae  2902              CMP      r1,#2
0000b0  dbef              BLT      |L136.146|
0000b2  2100              MOVS     r1,#0                 ;153
0000b4  4630              MOV      r0,r6                 ;153
0000b6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000ba  ee080a90          VMOV     s17,r0                ;153
0000be  2101              MOVS     r1,#1                 ;154
0000c0  4630              MOV      r0,r6                 ;154
0000c2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000c6  ee080a10          VMOV     s16,r0                ;154
0000ca  2100              MOVS     r1,#0                 ;156
0000cc  4640              MOV      r0,r8                 ;156
0000ce  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000d2  4681              MOV      r9,r0                 ;156
0000d4  2101              MOVS     r1,#1                 ;157
0000d6  4640              MOV      r0,r8                 ;157
0000d8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000dc  4604              MOV      r4,r0                 ;157
0000de  2100              MOVS     r1,#0                 ;159
0000e0  4640              MOV      r0,r8                 ;159
0000e2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000e6  2801              CMP      r0,#1                 ;159
0000e8  bf14              ITE      NE                    ;159
0000ea  f04f0a00          MOVNE    r10,#0                ;159
0000ee  f04f0a01          MOVEQ    r10,#1                ;159
0000f2  eeb80ac8          VCVT.F32.S32 s0,s16                ;162
0000f6  eef7ea00          VMOV.F32 s29,#1.00000000       ;162
0000fa  f8db2008          LDR      r2,[r11,#8]           ;162
0000fe  f8db1010          LDR      r1,[r11,#0x10]        ;162
000102  ee30da6e          VSUB.F32 s26,s0,s29            ;162
000106  eeb80ae8          VCVT.F32.S32 s0,s17                ;163
00010a  2000              MOVS     r0,#0                 ;165
00010c  fb001002          MLA      r0,r0,r2,r1           ;165
000110  ee70ca6e          VSUB.F32 s25,s0,s29            ;163
000114  ed900a01          VLDR     s0,[r0,#4]            ;165
000118  ed901a00          VLDR     s2,[r0,#0]            ;165
00011c  ed8d0a01          VSTR     s0,[sp,#4]            ;165
000120  ed900a02          VLDR     s0,[r0,#8]            ;165
000124  2001              MOVS     r0,#1                 ;166
000126  fb001002          MLA      r0,r0,r2,r1           ;166
00012a  ed8d0a04          VSTR     s0,[sp,#0x10]         ;165
00012e  ed900a01          VLDR     s0,[r0,#4]            ;166
000132  edd00a00          VLDR     s1,[r0,#0]            ;166
000136  ed8d0a03          VSTR     s0,[sp,#0xc]          ;166
00013a  ed900a02          VLDR     s0,[r0,#8]            ;166
00013e  ed8d0a02          VSTR     s0,[sp,#8]            ;166
000142  edd7aa04          VLDR     s21,[r7,#0x10]        ;166
000146  ed970a01          VLDR     s0,[r7,#4]            ;166
00014a  ed97ea05          VLDR     s28,[r7,#0x14]        ;166
00014e  edd71a02          VLDR     s3,[r7,#8]            ;166
000152  e000              B        |L136.342|
                  |L136.340|
000154  e01f              B        |L136.406|
                  |L136.342|
000156  f8d7b00c          LDR      r11,[r7,#0xc]         ;166
00015a  ee60ba8e          VMUL.F32 s23,s1,s28            ;180
00015e  ee21ba21          VMUL.F32 s22,s2,s3             ;181
000162  683f              LDR      r7,[r7,#0]            ;181
000164  f1ba0f00          CMP      r10,#0                ;184
000168  d02c              BEQ      |L136.452|
00016a  fb09f104          MUL      r1,r9,r4              ;185
00016e  fb07f00b          MUL      r0,r7,r11             ;186
000172  428c              CMP      r4,r1                 ;188
000174  bf08              IT       EQ                    ;188
000176  4288              CMPEQ    r0,r1                 ;188
000178  f0008034          BEQ.W    |L136.484|
00017c  20bc              MOVS     r0,#0xbc              ;188
00017e  e9cd5000          STRD     r5,r0,[sp,#0]         ;188
000182  a38b              ADR      r3,|L136.944|
000184  a2a7              ADR      r2,|L136.1060|
000186  a1a3              ADR      r1,|L136.1044|
000188  2005              MOVS     r0,#5                 ;188
00018a  f7fffffe          BL       _Anki_Log
00018e  f04f60a0          MOV      r0,#0x5000000         ;188
000192  e751              B        |L136.56|
                  |L136.404|
000194  e00b              B        |L136.430|
                  |L136.406|
000196  2093              MOVS     r0,#0x93              ;147
000198  e9cd5000          STRD     r5,r0,[sp,#0]         ;147
00019c  a384              ADR      r3,|L136.944|
00019e  a2ab              ADR      r2,|L136.1100|
0001a0  a19c              ADR      r1,|L136.1044|
0001a2  2005              MOVS     r0,#5                 ;147
0001a4  f7fffffe          BL       _Anki_Log
0001a8  f04f6080          MOV      r0,#0x4000000         ;147
0001ac  e744              B        |L136.56|
                  |L136.430|
0001ae  2096              MOVS     r0,#0x96              ;150
0001b0  e9cd5000          STRD     r5,r0,[sp,#0]         ;150
0001b4  a37e              ADR      r3,|L136.944|
0001b6  a2a9              ADR      r2,|L136.1116|
0001b8  a196              ADR      r1,|L136.1044|
0001ba  2005              MOVS     r0,#5                 ;150
0001bc  f7fffffe          BL       _Anki_Log
0001c0  48af              LDR      r0,|L136.1152|
0001c2  e739              B        |L136.56|
                  |L136.452|
0001c4  45cb              CMP      r11,r9                ;193
0001c6  bf08              IT       EQ                    ;193
0001c8  42a7              CMPEQ    r7,r4                 ;193
0001ca  d00b              BEQ      |L136.484|
0001cc  20c1              MOVS     r0,#0xc1              ;193
0001ce  e9cd5000          STRD     r5,r0,[sp,#0]         ;193
0001d2  a377              ADR      r3,|L136.944|
0001d4  a293              ADR      r2,|L136.1060|
0001d6  a18f              ADR      r1,|L136.1044|
0001d8  2005              MOVS     r0,#5                 ;193
0001da  f7fffffe          BL       _Anki_Log
0001de  f04f60a0          MOV      r0,#0x5000000         ;193
0001e2  e729              B        |L136.56|
                  |L136.484|
0001e4  2000              MOVS     r0,#0                 ;199
0001e6  f8d82008          LDR      r2,[r8,#8]            ;199
0001ea  f8d81010          LDR      r1,[r8,#0x10]         ;199
0001ee  f1ba0f00          CMP      r10,#0                ;201
0001f2  fb001502          MLA      r5,r0,r2,r1           ;201
0001f6  bf18              IT       NE                    ;203
0001f8  eba50587          SUBNE    r5,r5,r7,LSL #2       ;203
0001fc  f04f0900          MOV      r9,#0                 ;207
000200  f1bb0f00          CMP      r11,#0                ;207
000204  dd70              BLE      |L136.744|
000206  ee211a00          VMUL.F32 s2,s2,s0              ;219
00020a  ee60fa80          VMUL.F32 s31,s1,s0             ;220
00020e  ed8d1a00          VSTR     s2,[sp,#0]            ;219
000212  ed9ffa9c          VLDR     s30,|L136.1156|
000216  eeb6aa00          VMOV.F32 s20,#0.50000000       ;223
                  |L136.538|
00021a  f1ba0f00          CMP      r10,#0                ;208
00021e  bf18              IT       NE                    ;211
000220  eb050587          ADDNE    r5,r5,r7,LSL #2       ;211
000224  d105              BNE      |L136.562|
000226  f8d81008          LDR      r1,[r8,#8]            ;208
00022a  f8d80010          LDR      r0,[r8,#0x10]         ;208
00022e  fb090501          MLA      r5,r9,r1,r0           ;208
                  |L136.562|
000232  ed9d0a00          VLDR     s0,[sp,#0]            ;208
000236  eddd0a01          VLDR     s1,[sp,#4]            ;219
00023a  981a              LDR      r0,[sp,#0x68]         ;219
00023c  2400              MOVS     r4,#0                 ;222
00023e  ee000aaa          VMLA.F32 s0,s1,s21             ;219
000242  eddd0a04          VLDR     s1,[sp,#0x10]         ;219
000246  2f00              CMP      r7,#0                 ;222
000248  ee300a20          VADD.F32 s0,s0,s1              ;219
00024c  edd00a00          VLDR     s1,[r0,#0]            ;219
000250  ee708a20          VADD.F32 s17,s0,s1             ;219
000254  ed9d0a03          VLDR     s0,[sp,#0xc]          ;220
000258  eef00a6f          VMOV.F32 s1,s31                ;220
00025c  ee400a2a          VMLA.F32 s1,s0,s21             ;220
000260  ed9d0a02          VLDR     s0,[sp,#8]            ;220
000264  ee300a80          VADD.F32 s0,s1,s0              ;220
000268  edd00a01          VLDR     s1,[r0,#4]            ;220
00026c  ee308a20          VADD.F32 s16,s0,s1             ;220
000270  dd34              BLE      |L136.732|
                  |L136.626|
000272  ee380a8f          VADD.F32 s0,s17,s30            ;223
000276  f7fffffe          BL       __hardfp_floorf
00027a  eef09a40          VMOV.F32 s19,s0                ;223
00027e  eeb00a68          VMOV.F32 s0,s17                ;224
000282  f7fffffe          BL       __hardfp_ceilf
000286  eeb0ca40          VMOV.F32 s24,s0                ;224
00028a  ee380a0f          VADD.F32 s0,s16,s30            ;226
00028e  f7fffffe          BL       __hardfp_floorf
000292  eeb09a40          VMOV.F32 s18,s0                ;226
000296  eeb00a48          VMOV.F32 s0,s16                ;227
00029a  f7fffffe          BL       __hardfp_ceilf
00029e  eef59ac0          VCMPE.F32 s19,#0.0              ;230
0002a2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;230
0002a6  d30e              BCC      |L136.710|
0002a8  eeb4cacd          VCMPE.F32 s24,s26               ;230
0002ac  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;230
0002b0  dc09              BGT      |L136.710|
0002b2  eeb59ac0          VCMPE.F32 s18,#0.0              ;230
0002b6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;230
0002ba  d304              BCC      |L136.710|
0002bc  eeb40aec          VCMPE.F32 s0,s25                ;230
0002c0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;230
0002c4  dd12              BLE      |L136.748|
                  |L136.710|
0002c6  ee788a8b          VADD.F32 s17,s17,s22           ;232
0002ca  ee388a2b          VADD.F32 s16,s16,s23           ;233
0002ce  eb050084          ADD      r0,r5,r4,LSL #2       ;235
0002d2  edc0da00          VSTR     s27,[r0,#0]           ;235
                  |L136.726|
0002d6  1c64              ADDS     r4,r4,#1              ;222
0002d8  42bc              CMP      r4,r7                 ;222
0002da  dbca              BLT      |L136.626|
                  |L136.732|
0002dc  ee7aaa8e          VADD.F32 s21,s21,s28           ;268
0002e0  f1090901          ADD      r9,r9,#1              ;207
0002e4  45d9              CMP      r9,r11                ;207
0002e6  db98              BLT      |L136.538|
                  |L136.744|
0002e8  2000              MOVS     r0,#0                 ;271
0002ea  e6a5              B        |L136.56|
                  |L136.748|
0002ec  ee780ae9          VSUB.F32 s1,s17,s19            ;239
0002f0  ee381a49          VSUB.F32 s2,s16,s18            ;242
0002f4  eeb59ac0          VCMPE.F32 s18,#0.0              ;242
0002f8  ee7e1ae0          VSUB.F32 s3,s29,s1             ;240
0002fc  ee7e2ac1          VSUB.F32 s5,s29,s2             ;243
000300  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;243
000304  bfcc              ITE      GT                    ;243
000306  ee392a0a          VADDGT.F32 s4,s18,s20            ;243
00030a  ee392a4a          VSUBLE.F32 s4,s18,s20            ;243
00030e  eebd2ac2          VCVT.S32.F32 s4,s4                 ;243
000312  eeb50ac0          VCMPE.F32 s0,#0.0               ;243
000316  ee123a10          VMOV     r3,s4                 ;243
00031a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;243
00031e  bfcc              ITE      GT                    ;243
000320  ee300a0a          VADDGT.F32 s0,s0,s20             ;243
000324  ee300a4a          VSUBLE.F32 s0,s0,s20             ;243
000328  eebd0ac0          VCVT.S32.F32 s0,s0                 ;243
00032c  eef59ac0          VCMPE.F32 s19,#0.0              ;243
000330  ee10ca10          VMOV     r12,s0                ;243
000334  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;243
000338  bfcc              ITE      GT                    ;243
00033a  ee390a8a          VADDGT.F32 s0,s19,s20            ;243
00033e  ee390aca          VSUBLE.F32 s0,s19,s20            ;243
000342  eebd0ac0          VCVT.S32.F32 s0,s0                 ;243
000346  68b2              LDR      r2,[r6,#8]            ;243
000348  6931              LDR      r1,[r6,#0x10]         ;243
00034a  ee100a10          VMOV     r0,s0                 ;243
00034e  fb031302          MLA      r3,r3,r2,r1           ;243
000352  fb0c1102          MLA      r1,r12,r2,r1          ;243
000356  4403              ADD      r3,r3,r0              ;243
000358  4408              ADD      r0,r0,r1              ;243
00035a  7819              LDRB     r1,[r3,#0]            ;252
00035c  ee788a8b          VADD.F32 s17,s17,s22           ;264
000360  ee001a10          VMOV     s0,r1                 ;252
000364  7859              LDRB     r1,[r3,#1]            ;253
000366  ee388a2b          VADD.F32 s16,s16,s23           ;265
00036a  eeb83a40          VCVT.F32.U32 s6,s0                 ;252
00036e  ee001a10          VMOV     s0,r1                 ;253
000372  7801              LDRB     r1,[r0,#0]            ;254
000374  7840              LDRB     r0,[r0,#1]            ;255
000376  ee021a10          VMOV     s4,r1                 ;254
00037a  eeb80a40          VCVT.F32.U32 s0,s0                 ;253
00037e  ee213a83          VMUL.F32 s6,s3,s6              ;253
000382  eeb82a42          VCVT.F32.U32 s4,s4                 ;254
000386  ee030a90          VMOV     s7,r0                 ;255
00038a  eb050084          ADD      r0,r5,r4,LSL #2       ;261
00038e  ee003a80          VMLA.F32 s6,s1,s0              ;261
000392  eef83a63          VCVT.F32.U32 s7,s7                 ;255
000396  ee611a82          VMUL.F32 s3,s3,s4              ;255
00039a  ee401aa3          VMLA.F32 s3,s1,s7              ;255
00039e  ee220a83          VMUL.F32 s0,s5,s6              ;255
0003a2  ee010a21          VMLA.F32 s0,s2,s3              ;255
0003a6  ed800a00          VSTR     s0,[r0,#0]            ;261
0003aa  e794              B        |L136.726|
                  |L136.940|
                          DCD      _ZZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2_Affine<unsigned char, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Meshgrid<float>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Point<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
                  |L136.944|
0003b0  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/interp"
0003b4  6f726574
0003b8  6563685c
0003bc  636f6d6d
0003c0  6f6e5c69
0003c4  6e636c75
0003c8  64655c61
0003cc  6e6b692f
0003d0  636f6d6d
0003d4  6f6e2f72
0003d8  6f626f74
0003dc  2f696e74
0003e0  657270  
0003e3  6f6c6174          DCB      "olate.h",0
0003e7  652e6800
0003eb  00                DCB      0
                  |L136.1004|
0003ec  4f6e6c79          DCB      "Only INTERPOLATE_LINEAR is supported",0
0003f0  20494e54
0003f4  4552504f
0003f8  4c415445
0003fc  5f4c494e
000400  45415220
000404  69732073
000408  7570706f
00040c  72746564
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
                  |L136.1044|
000414  496e7465          DCB      "Interp2_Affine",0
000418  7270325f
00041c  41666669
000420  6e6500  
000423  00                DCB      0
                  |L136.1060|
000424  6f726967          DCB      "originalCoordinates is the wrong size",0
000428  696e616c
00042c  436f6f72
000430  64696e61
000434  74657320
000438  69732074
00043c  68652077
000440  726f6e67
000444  2073697a
000448  6500    
00044a  00                DCB      0
00044b  00                DCB      0
                  |L136.1100|
00044c  496e7661          DCB      "Invalid objects",0
000450  6c696420
000454  6f626a65
000458  63747300
                  |L136.1116|
00045c  72656665          DCB      "reference cannot be the same as out",0
000460  72656e63
000464  65206361
000468  6e6e6f74
00046c  20626520
000470  74686520
000474  73616d65
000478  20617320
00047c  6f757400
                  |L136.1152|
                          DCD      0x01000003
                  |L136.1156|
000484  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                          ENDP


                          AREA ||area_number.137||, COMGROUP=_ZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_, LINKORDER=||t._ZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.137||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i PROC ; Anki::Embedded::Linspace<float>(T1, T1, int)
;;;162    
;;;163        template<typename Type> LinearSequence<Type> Linspace(const Type start, const Type end, const s32 size)
000000  b086              SUB      sp,sp,#0x18
000002  f04f32ff          MOV      r2,#0xffffffff
000006  eebf1a00          VMOV.F32 s2,#-1.00000000
00000a  9200              STR      r2,[sp,#0]
00000c  ed8d1a01          VSTR     s2,[sp,#4]
000010  ed8d1a02          VSTR     s2,[sp,#8]
;;;164        {
;;;165          Type increment;
;;;166    
;;;167          LinearSequence<Type> sequence;
;;;168    
;;;169          if(ABS(end-start) <= Flags::numeric_limits<Type>::epsilon()) {
000014  ee301ac0          VSUB.F32 s2,s1,s0
000018  ed9f2a2e          VLDR     s4,|L143.212|
00001c  eeb51ac0          VCMPE.F32 s2,#0.0
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR
000024  bfac              ITE      GE
000026  eef01a41          VMOVGE.F32 s3,s2
00002a  ee701a60          VSUBLT.F32 s3,s0,s1
00002e  eef41ac2          VCMPE.F32 s3,s4
000032  eef1fa10          VMRS     APSR_nzcv,FPSCR
000036  d810              BHI      |L143.90|
000038  9103              STR      r1,[sp,#0xc]          ;164
;;;170            sequence = LinearSequence<Type>(start, 0, end, size);
00003a  eddf0a27          VLDR     s1,|L143.216|
00003e  ed8d0a04          VSTR     s0,[sp,#0x10]
000042  edcd0a05          VSTR     s1,[sp,#0x14]
000046  9100              STR      r1,[sp,#0]
000048  ed8d0a01          VSTR     s0,[sp,#4]
00004c  ee102a10          VMOV     r2,s0
000050  ee103a90          VMOV     r3,s1
000054  edcd0a02          VSTR     s1,[sp,#8]
;;;171          } else {
000058  e028              B        |L143.172|
                  |L143.90|
;;;172            if(size <= 0) {
;;;173              // Empty sequence
;;;174              sequence = LinearSequence<Type>(start, 1, end, 0);
00005a  eef71a00          VMOV.F32 s3,#1.00000000
00005e  2900              CMP      r1,#0                 ;172
000060  dc0d              BGT      |L143.126|
000062  2100              MOVS     r1,#0
000064  9103              STR      r1,[sp,#0xc]
000066  ed8d0a04          VSTR     s0,[sp,#0x10]
00006a  edcd1a05          VSTR     s3,[sp,#0x14]
00006e  9100              STR      r1,[sp,#0]
000070  ee102a10          VMOV     r2,s0
000074  ee113a90          VMOV     r3,s3
000078  ed8d0a01          VSTR     s0,[sp,#4]
;;;175            } else if(size == 1) {
00007c  e027              B        |L143.206|
                  |L143.126|
00007e  2901              CMP      r1,#1
000080  d019              BEQ      |L143.182|
;;;176              // If size == 1, match output with Matlab
;;;177              sequence = LinearSequence<Type>(end, 1, end, size);
;;;178            } else {
;;;179              increment = (end-start) / (size-1);
000082  1e4a              SUBS     r2,r1,#1
000084  ee002a90          VMOV     s1,r2
000088  9103              STR      r1,[sp,#0xc]
00008a  ed8d0a04          VSTR     s0,[sp,#0x10]
00008e  eef81ae0          VCVT.F32.S32 s3,s1
;;;180              sequence = LinearSequence<Type>(start, increment, end, size);
000092  ee102a10          VMOV     r2,s0
000096  eec10a21          VDIV.F32 s1,s2,s3              ;179
00009a  edcd0a05          VSTR     s1,[sp,#0x14]         ;179
00009e  ee103a90          VMOV     r3,s1
0000a2  9100              STR      r1,[sp,#0]
0000a4  ed8d0a01          VSTR     s0,[sp,#4]
0000a8  edcd0a02          VSTR     s1,[sp,#8]
                  |L143.172|
;;;181            }
;;;182          }
;;;183    
;;;184          return sequence;
0000ac  6083              STR      r3,[r0,#8]
0000ae  e9c01200          STRD     r1,r2,[r0,#0]
;;;185        }
0000b2  b006              ADD      sp,sp,#0x18
0000b4  4770              BX       lr
                  |L143.182|
0000b6  9103              STR      r1,[sp,#0xc]
0000b8  edcd0a04          VSTR     s1,[sp,#0x10]
0000bc  edcd1a05          VSTR     s3,[sp,#0x14]
0000c0  ee102a90          VMOV     r2,s1                 ;177
0000c4  ee113a90          VMOV     r3,s3                 ;177
0000c8  9100              STR      r1,[sp,#0]            ;177
0000ca  edcd0a01          VSTR     s1,[sp,#4]            ;177
                  |L143.206|
0000ce  edcd1a02          VSTR     s3,[sp,#8]            ;177
0000d2  e7eb              B        |L143.172|
;;;186    
                          ENDP

                  |L143.212|
0000d4  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L143.216|
0000d8  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.144||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, LINKORDER=||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.144||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb||, COMGROUP=_ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb PROC ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)
;;;352    
;;;353          template<typename Type> Result SolveLeastSquaresWithCholesky(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;354            Array<Type> &A_L,       //!< Input A Matrix and Output lower-triangular L matrix
;;;355            Array<Type> &Bt_Xt,     //!< Input B-transpose matrix and Output X-transpose solution
;;;356            bool realCholesky,      //!< A real Cholesky is slower to compute, and not required if only the X solution is required
;;;357            bool &numericalFailure  //!< If true, the solver failed because of numerical instability
;;;358            )
;;;359          {
000004  460e              MOV      r6,r1
000006  ed2d8b02          VPUSH    {d8}
00000a  b083              SUB      sp,sp,#0xc
00000c  4699              MOV      r9,r3
00000e  4604              MOV      r4,r0
;;;360            const s32 matrixHeight = A_L.get_size(0);
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000016  4605              MOV      r5,r0
;;;361            const s32 numSamples = Bt_Xt.get_size(0);
000018  2100              MOVS     r1,#0
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000020  4607              MOV      r7,r0
;;;362    
;;;363            numericalFailure = false;
000022  2000              MOVS     r0,#0
000024  f8890000          STRB     r0,[r9,#0]
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
;;;364    
;;;365            AnkiConditionalErrorAndReturnValue(AreValid(A_L, Bt_Xt),
00002e  f8df8258          LDR      r8,|L150.648|
000032  2800              CMP      r0,#0
000034  d01c              BEQ      |L150.112|
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00003c  2800              CMP      r0,#0
00003e  d017              BEQ      |L150.112|
;;;366              RESULT_FAIL_INVALID_OBJECT, "CholeskyDecomposition", "Invalid objects");
;;;367    
;;;368            AnkiConditionalErrorAndReturnValue(matrixHeight == A_L.get_size(1),
000040  2101              MOVS     r1,#1
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000048  42a8              CMP      r0,r5
00004a  d01e              BEQ      |L150.138|
00004c  f44f70b8          MOV      r0,#0x170
000050  e9cd8000          STRD     r8,r0,[sp,#0]
000054  a38d              ADR      r3,|L150.652|
000056  a29b              ADR      r2,|L150.708|
000058  a19f              ADR      r1,|L150.728|
00005a  2005              MOVS     r0,#5
00005c  f7fffffe          BL       _Anki_Log
000060  f04f60a0          MOV      r0,#0x5000000
                  |L150.100|
;;;369              RESULT_FAIL_INVALID_SIZE, "CholeskyDecomposition", "A_L is not square");
;;;370    
;;;371            AnkiConditionalErrorAndReturnValue(Bt_Xt.get_size(1) == matrixHeight,
;;;372              RESULT_FAIL_INVALID_SIZE, "CholeskyDecomposition", "Xt and Bt are the wrong sizes");
;;;373    
;;;374            // TODO: check if symmetric and positive-definite
;;;375    
;;;376            const Type minStableValue = Anki::Embedded::Flags::numeric_limits<Type>::epsilon();
;;;377    
;;;378            for(s32 i = 0; i < matrixHeight; i++) {
;;;379              // First, compute the non-diagonal values
;;;380              // This uses the results from the diagonal inverse computation from previous iterations of i
;;;381              Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;382    
;;;383              for(s32 j = 0; j < i; j++) {
;;;384                Type * restrict pAL_yj = A_L.Pointer(j, 0);
;;;385    
;;;386                Type sum = pAL_yi[j];
;;;387                for(s32 k = 0; k < j; k++) {
;;;388                  const Type value1 = pAL_yi[k];
;;;389                  const Type value2 = pAL_yj[k];
;;;390                  sum -= value1*value2;
;;;391                }
;;;392    
;;;393                pAL_yi[j] = sum*pAL_yj[j];
;;;394              } // for(s32 j = 0; j < i; j++)
;;;395    
;;;396              // Second, compute the inverse of the diagonal
;;;397              {
;;;398                Type sum = pAL_yi[i];
;;;399                for(s32 k = 0; k < i; k++) {
;;;400                  const Type value = pAL_yi[k];
;;;401                  sum -= value*value;
;;;402                }
;;;403    
;;;404                if(sum < minStableValue) {
;;;405                  numericalFailure = true;
;;;406                  return RESULT_OK;
;;;407                }
;;;408    
;;;409                // TODO: change this f32 square root to f64 if Type==f64
;;;410                const Type sumRoot = static_cast<Type>(sqrtf(static_cast<f32>(sum)));
;;;411                pAL_yi[i] = static_cast<Type>(1) / sumRoot;
;;;412              }
;;;413            } // for(s32 i = 0; i < m; i++)
;;;414    
;;;415            // Solve L*y = b via forward substitution
;;;416            for(s32 i = 0; i < matrixHeight; i++) {
;;;417              const Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;418              //Type * restrict pBX_yi = Bt_Xt.Pointer(i, 0);
;;;419    
;;;420              for(s32 j = 0; j < numSamples; j++) {
;;;421                Type * restrict pBX_yj = Bt_Xt.Pointer(j, 0);
;;;422    
;;;423                Type sum = pBX_yj[i];
;;;424                for(s32 k = 0; k < i; k++) {
;;;425                  const Type value1 = pAL_yi[k];
;;;426                  const Type value2 = pBX_yj[k];
;;;427                  sum -= value1*value2;
;;;428                }
;;;429    
;;;430                pBX_yj[i] = sum*pAL_yi[i];
;;;431              }
;;;432            }
;;;433    
;;;434            // Solve L'*X = Y via back substitution
;;;435            for(s32 i = matrixHeight-1; i >= 0; i--) {
;;;436              const Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;437              //Type * restrict pBX_yi = Bt_Xt.Pointer(i, 0);
;;;438    
;;;439              for(s32 j = 0; j < numSamples; j++) {
;;;440                Type * restrict pBX_yj = Bt_Xt.Pointer(j, 0);
;;;441    
;;;442                Type sum = pBX_yj[i];
;;;443                for(s32 k = matrixHeight-1; k > i; k-- ) {
;;;444                  const Type value1 = A_L[k][i];
;;;445                  const Type value2 = pBX_yj[k];
;;;446                  sum -= value1*value2;
;;;447                }
;;;448    
;;;449                pBX_yj[i] = sum*pAL_yi[i];
;;;450              }
;;;451            }
;;;452    
;;;453            if(realCholesky) {
;;;454              // Invert the diagonal values of L, and set upper triangular to zero
;;;455              for(s32 i = 0; i < matrixHeight; i++) {
;;;456                Type * restrict pAL_yi = A_L.Pointer(i, 0);
;;;457    
;;;458                pAL_yi[i] = static_cast<Type>(1) / pAL_yi[i];
;;;459    
;;;460                for(s32 j = i+1; j < matrixHeight; j++) {
;;;461                  pAL_yi[j] = 0;
;;;462                }
;;;463              }
;;;464            }
;;;465    
;;;466            return RESULT_OK;
;;;467          } // SolveLeastSquaresWithCholesky()
000064  b003              ADD      sp,sp,#0xc
000066  ecbd8b02          VPOP     {d8}
00006a  b004              ADD      sp,sp,#0x10
00006c  e8bd8ff0          POP      {r4-r11,pc}
                  |L150.112|
000070  f240106d          MOV      r0,#0x16d             ;365
000074  e9cd8000          STRD     r8,r0,[sp,#0]         ;365
000078  a384              ADR      r3,|L150.652|
00007a  a29d              ADR      r2,|L150.752|
00007c  a196              ADR      r1,|L150.728|
00007e  2005              MOVS     r0,#5                 ;365
000080  f7fffffe          BL       _Anki_Log
000084  f04f6080          MOV      r0,#0x4000000         ;365
000088  e7ec              B        |L150.100|
                  |L150.138|
00008a  2101              MOVS     r1,#1                 ;371
00008c  4630              MOV      r0,r6                 ;371
00008e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000092  42a8              CMP      r0,r5                 ;371
000094  d00c              BEQ      |L150.176|
000096  f2401073          MOV      r0,#0x173             ;371
00009a  e9cd8000          STRD     r8,r0,[sp,#0]         ;371
00009e  a37b              ADR      r3,|L150.652|
0000a0  a297              ADR      r2,|L150.768|
0000a2  a18d              ADR      r1,|L150.728|
0000a4  2005              MOVS     r0,#5                 ;371
0000a6  f7fffffe          BL       _Anki_Log
0000aa  f04f60a0          MOV      r0,#0x5000000         ;371
0000ae  e7d9              B        |L150.100|
                  |L150.176|
0000b0  eddf8a9b          VLDR     s17,|L150.800|
0000b4  f04f0800          MOV      r8,#0                 ;378
0000b8  eeb78a00          VMOV.F32 s16,#1.00000000       ;411
0000bc  2d00              CMP      r5,#0                 ;378
0000be  dd58              BLE      |L150.370|
                  |L150.192|
0000c0  68a1              LDR      r1,[r4,#8]            ;378
0000c2  6920              LDR      r0,[r4,#0x10]         ;378
0000c4  2200              MOVS     r2,#0                 ;383
0000c6  fb080101          MLA      r1,r8,r1,r0           ;383
0000ca  f1b80f00          CMP      r8,#0                 ;383
0000ce  dd22              BLE      |L150.278|
                  |L150.208|
0000d0  68a3              LDR      r3,[r4,#8]            ;383
0000d2  6920              LDR      r0,[r4,#0x10]         ;383
0000d4  eb010c82          ADD      r12,r1,r2,LSL #2      ;386
0000d8  fb020303          MLA      r3,r2,r3,r0           ;386
0000dc  ed9c0a00          VLDR     s0,[r12,#0]           ;386
0000e0  2000              MOVS     r0,#0                 ;387
0000e2  2a00              CMP      r2,#0                 ;387
0000e4  dd0c              BLE      |L150.256|
                  |L150.230|
0000e6  eb010a80          ADD      r10,r1,r0,LSL #2      ;388
0000ea  ed9a1a00          VLDR     s2,[r10,#0]           ;388
0000ee  eb030a80          ADD      r10,r3,r0,LSL #2      ;389
0000f2  1c40              ADDS     r0,r0,#1              ;387
0000f4  edda0a00          VLDR     s1,[r10,#0]           ;389
0000f8  4282              CMP      r2,r0                 ;387
0000fa  ee010a60          VMLS.F32 s0,s2,s1              ;390
0000fe  dcf2              BGT      |L150.230|
                  |L150.256|
000100  eb030082          ADD      r0,r3,r2,LSL #2       ;393
000104  1c52              ADDS     r2,r2,#1              ;383
000106  edd00a00          VLDR     s1,[r0,#0]            ;393
00010a  4542              CMP      r2,r8                 ;383
00010c  ee200a80          VMUL.F32 s0,s1,s0              ;393
000110  ed8c0a00          VSTR     s0,[r12,#0]           ;393
000114  dbdc              BLT      |L150.208|
                  |L150.278|
000116  eb010a88          ADD      r10,r1,r8,LSL #2      ;398
00011a  2000              MOVS     r0,#0                 ;399
00011c  ed9a0a00          VLDR     s0,[r10,#0]           ;398
000120  f1b80f00          CMP      r8,#0                 ;399
000124  dd08              BLE      |L150.312|
                  |L150.294|
000126  eb010280          ADD      r2,r1,r0,LSL #2       ;400
00012a  1c40              ADDS     r0,r0,#1              ;399
00012c  edd20a00          VLDR     s1,[r2,#0]            ;400
000130  4580              CMP      r8,r0                 ;399
000132  ee000ae0          VMLS.F32 s0,s1,s1              ;401
000136  dcf6              BGT      |L150.294|
                  |L150.312|
000138  eef48ac0          VCMPE.F32 s17,s0                ;404
00013c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;404
000140  dd04              BLE      |L150.332|
000142  2001              MOVS     r0,#1                 ;405
000144  f8890000          STRB     r0,[r9,#0]            ;405
000148  2000              MOVS     r0,#0                 ;406
00014a  e78b              B        |L150.100|
                  |L150.332|
00014c  eef10ac0          VSQRT.F32 s1,s0                 ;410
000150  eef40a60          VCMP.F32 s1,s1                 ;410
000154  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;410
000158  d003              BEQ      |L150.354|
00015a  f7fffffe          BL       __hardfp_sqrtf
00015e  eef00a40          VMOV.F32 s1,s0                 ;410
                  |L150.354|
000162  f1080801          ADD      r8,r8,#1              ;378
000166  ee880a20          VDIV.F32 s0,s16,s1             ;411
00016a  45a8              CMP      r8,r5                 ;378
00016c  ed8a0a00          VSTR     s0,[r10,#0]           ;411
000170  dba6              BLT      |L150.192|
                  |L150.370|
000172  2100              MOVS     r1,#0                 ;416
000174  2d00              CMP      r5,#0                 ;416
000176  dd2d              BLE      |L150.468|
                  |L150.376|
000178  68a2              LDR      r2,[r4,#8]            ;416
00017a  6920              LDR      r0,[r4,#0x10]         ;416
00017c  fb010c02          MLA      r12,r1,r2,r0          ;416
000180  2200              MOVS     r2,#0                 ;420
000182  2f00              CMP      r7,#0                 ;420
000184  bfc8              IT       GT                    ;430
000186  eb0c0981          ADDGT    r9,r12,r1,LSL #2      ;430
00018a  dd20              BLE      |L150.462|
                  |L150.396|
00018c  68b3              LDR      r3,[r6,#8]            ;420
00018e  6930              LDR      r0,[r6,#0x10]         ;420
000190  fb020303          MLA      r3,r2,r3,r0           ;420
000194  eb030881          ADD      r8,r3,r1,LSL #2       ;423
000198  2000              MOVS     r0,#0                 ;424
00019a  ed980a00          VLDR     s0,[r8,#0]            ;423
00019e  2900              CMP      r1,#0                 ;424
0001a0  dd0c              BLE      |L150.444|
                  |L150.418|
0001a2  eb0c0a80          ADD      r10,r12,r0,LSL #2     ;425
0001a6  ed9a1a00          VLDR     s2,[r10,#0]           ;425
0001aa  eb030a80          ADD      r10,r3,r0,LSL #2      ;426
0001ae  1c40              ADDS     r0,r0,#1              ;424
0001b0  edda0a00          VLDR     s1,[r10,#0]           ;426
0001b4  4281              CMP      r1,r0                 ;424
0001b6  ee010a60          VMLS.F32 s0,s2,s1              ;427
0001ba  dcf2              BGT      |L150.418|
                  |L150.444|
0001bc  edd90a00          VLDR     s1,[r9,#0]            ;430
0001c0  1c52              ADDS     r2,r2,#1              ;420
0001c2  42ba              CMP      r2,r7                 ;420
0001c4  ee200a80          VMUL.F32 s0,s1,s0              ;430
0001c8  ed880a00          VSTR     s0,[r8,#0]            ;430
0001cc  dbde              BLT      |L150.396|
                  |L150.462|
0001ce  1c49              ADDS     r1,r1,#1              ;416
0001d0  42a9              CMP      r1,r5                 ;416
0001d2  dbd1              BLT      |L150.376|
                  |L150.468|
0001d4  1e69              SUBS     r1,r5,#1              ;435
0001d6  d433              BMI      |L150.576|
                  |L150.472|
0001d8  68a2              LDR      r2,[r4,#8]            ;435
0001da  6920              LDR      r0,[r4,#0x10]         ;435
0001dc  fb010002          MLA      r0,r1,r2,r0           ;435
0001e0  2200              MOVS     r2,#0                 ;439
0001e2  2f00              CMP      r7,#0                 ;439
0001e4  bfc8              IT       GT                    ;449
0001e6  eb000a81          ADDGT    r10,r0,r1,LSL #2      ;449
0001ea  dd27              BLE      |L150.572|
                  |L150.492|
0001ec  68b3              LDR      r3,[r6,#8]            ;439
0001ee  6930              LDR      r0,[r6,#0x10]         ;439
0001f0  fb020303          MLA      r3,r2,r3,r0           ;439
0001f4  eb030981          ADD      r9,r3,r1,LSL #2       ;442
0001f8  1e68              SUBS     r0,r5,#1              ;443
0001fa  ed990a00          VLDR     s0,[r9,#0]            ;442
0001fe  4288              CMP      r0,r1                 ;443
000200  bfc4              ITT      GT                    ;443
000202  f8d4c010          LDRGT    r12,[r4,#0x10]        ;443
000206  f8d48008          LDRGT    r8,[r4,#8]            ;443
00020a  dd0e              BLE      |L150.554|
                  |L150.524|
00020c  fb00cb08          MLA      r11,r0,r8,r12         ;443
000210  eb0b0b81          ADD      r11,r11,r1,LSL #2     ;444
000214  ed9b1a00          VLDR     s2,[r11,#0]           ;444
000218  eb030b80          ADD      r11,r3,r0,LSL #2      ;445
00021c  1e40              SUBS     r0,r0,#1              ;443
00021e  eddb0a00          VLDR     s1,[r11,#0]           ;445
000222  4288              CMP      r0,r1                 ;443
000224  ee010a60          VMLS.F32 s0,s2,s1              ;446
000228  dcf0              BGT      |L150.524|
                  |L150.554|
00022a  edda0a00          VLDR     s1,[r10,#0]           ;449
00022e  1c52              ADDS     r2,r2,#1              ;439
000230  4297              CMP      r7,r2                 ;439
000232  ee200a80          VMUL.F32 s0,s1,s0              ;449
000236  ed890a00          VSTR     s0,[r9,#0]            ;449
00023a  dcd7              BGT      |L150.492|
                  |L150.572|
00023c  1e49              SUBS     r1,r1,#1              ;435
00023e  d5cb              BPL      |L150.472|
                  |L150.576|
000240  9807              LDR      r0,[sp,#0x1c]         ;453
000242  2800              CMP      r0,#0                 ;453
000244  bf1c              ITT      NE                    ;455
000246  2100              MOVNE    r1,#0                 ;455
000248  2d00              CMPNE    r5,#0                 ;455
00024a  bfc8              IT       GT                    ;461
00024c  ed9f0a35          VLDRGT   s0,|L150.804|
000250  dd18              BLE      |L150.644|
                  |L150.594|
000252  68a2              LDR      r2,[r4,#8]            ;453
000254  6920              LDR      r0,[r4,#0x10]         ;453
000256  fb010202          MLA      r2,r1,r2,r0           ;453
00025a  eb020081          ADD      r0,r2,r1,LSL #2       ;458
00025e  edd00a00          VLDR     s1,[r0,#0]            ;458
000262  ee881a20          VDIV.F32 s2,s16,s1             ;458
000266  ed801a00          VSTR     s2,[r0,#0]            ;458
00026a  1c48              ADDS     r0,r1,#1              ;460
00026c  4285              CMP      r5,r0                 ;460
00026e  dd06              BLE      |L150.638|
                  |L150.624|
000270  eb020380          ADD      r3,r2,r0,LSL #2       ;461
000274  1c40              ADDS     r0,r0,#1              ;460
000276  ed830a00          VSTR     s0,[r3,#0]            ;461
00027a  4285              CMP      r5,r0                 ;460
00027c  dcf8              BGT      |L150.624|
                  |L150.638|
00027e  1c49              ADDS     r1,r1,#1              ;455
000280  42a9              CMP      r1,r5                 ;455
000282  dbe6              BLT      |L150.594|
                  |L150.644|
000284  2000              MOVS     r0,#0                 ;466
000286  e6ed              B        |L150.100|
;;;468    
                          ENDP

                  |L150.648|
                          DCD      _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
                  |L150.652|
00028c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
000290  6f726574
000294  6563685c
000298  636f6d6d
00029c  6f6e5c69
0002a0  6e636c75
0002a4  64655c61
0002a8  6e6b692f
0002ac  636f6d6d
0002b0  6f6e2f72
0002b4  6f626f74
0002b8  2f6d6174
0002bc  726978  
0002bf  2e6800            DCB      ".h",0
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L150.708|
0002c4  415f4c20          DCB      "A_L is not square",0
0002c8  6973206e
0002cc  6f742073
0002d0  71756172
0002d4  6500    
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L150.728|
0002d8  43686f6c          DCB      "CholeskyDecomposition",0
0002dc  65736b79
0002e0  4465636f
0002e4  6d706f73
0002e8  6974696f
0002ec  6e00    
0002ee  00                DCB      0
0002ef  00                DCB      0
                  |L150.752|
0002f0  496e7661          DCB      "Invalid objects",0
0002f4  6c696420
0002f8  6f626a65
0002fc  63747300
                  |L150.768|
000300  58742061          DCB      "Xt and Bt are the wrong sizes",0
000304  6e642042
000308  74206172
00030c  65207468
000310  65207772
000314  6f6e6720
000318  73697a65
00031c  7300    
00031e  00                DCB      0
00031f  00                DCB      0
                  |L150.800|
000320  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L150.804|
000324  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.151||, COMGROUP=_ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb, LINKORDER=||t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.151||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRb||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b||, COMGROUP=_ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b PROC ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)
;;;1798   
;;;1799         template<typename Type> Result MakeSymmetric(Type &arr, bool lowerToUpper)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1800         {
000002  460e              MOV      r6,r1
000004  b083              SUB      sp,sp,#0xc
000006  4605              MOV      r5,r0
;;;1801           AnkiConditionalErrorAndReturnValue(arr.get_size(0) == arr.get_size(1),
000008  2100              MOVS     r1,#0
00000a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00000e  4604              MOV      r4,r0
000010  2101              MOVS     r1,#1
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000018  4284              CMP      r4,r0
00001a  d00e              BEQ      |L157.58|
00001c  f2407109          MOV      r1,#0x709
000020  481a              LDR      r0,|L157.140|
000022  e9cd0100          STRD     r0,r1,[sp,#0]
000026  a31a              ADR      r3,|L157.144|
000028  a227              ADR      r2,|L157.200|
00002a  a12e              ADR      r1,|L157.228|
00002c  2005              MOVS     r0,#5
00002e  f7fffffe          BL       _Anki_Log
;;;1802             RESULT_FAIL_INVALID_SIZE, "MakeSymmetric", "Input array must be square");
;;;1803   
;;;1804           const s32 arrHeight = arr.get_size(0);
;;;1805           for(s32 y = 0; y < arrHeight; y++)
;;;1806           {
;;;1807             const s32 x0 = lowerToUpper ? (y+1)     : 0;
;;;1808             const s32 x1 = lowerToUpper ? arrHeight : y;
;;;1809   
;;;1810             for(s32 x = x0; x < x1; x++) {
;;;1811               *arr.Pointer(y,x) = *arr.Pointer(x,y);
;;;1812             }
;;;1813           }
;;;1814   
;;;1815           return RESULT_OK;
;;;1816         } // template<typename Type> Result MakeSymmetric(Type &arr, bool lowerToUpper)
000032  b003              ADD      sp,sp,#0xc
000034  f04f60a0          MOV      r0,#0x5000000         ;1801
000038  bdf0              POP      {r4-r7,pc}
                  |L157.58|
00003a  2100              MOVS     r1,#0                 ;1804
00003c  4628              MOV      r0,r5                 ;1804
00003e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000042  1e01              SUBS     r1,r0,#0              ;1804
000044  f04f0300          MOV      r3,#0                 ;1805
000048  dd1c              BLE      |L157.132|
                  |L157.74|
00004a  2e00              CMP      r6,#0                 ;1807
00004c  bf15              ITETE    NE                    ;1807
00004e  1c5a              ADDNE    r2,r3,#1              ;1807
000050  2200              MOVEQ    r2,#0                 ;1807
000052  4608              MOVNE    r0,r1                 ;1808
000054  4618              MOVEQ    r0,r3                 ;1808
000056  4282              CMP      r2,r0                 ;1810
000058  da11              BGE      |L157.126|
                  |L157.90|
00005a  f8d5c010          LDR      r12,[r5,#0x10]        ;1810
00005e  68ac              LDR      r4,[r5,#8]            ;1810
000060  fb02c704          MLA      r7,r2,r4,r12          ;1810
000064  fb03cc04          MLA      r12,r3,r4,r12         ;1810
000068  eb070783          ADD      r7,r7,r3,LSL #2       ;1810
00006c  eb0c0c82          ADD      r12,r12,r2,LSL #2     ;1810
000070  ed970a00          VLDR     s0,[r7,#0]            ;1811
000074  1c52              ADDS     r2,r2,#1              ;1810
000076  ed8c0a00          VSTR     s0,[r12,#0]           ;1811
00007a  4282              CMP      r2,r0                 ;1810
00007c  dbed              BLT      |L157.90|
                  |L157.126|
00007e  1c5b              ADDS     r3,r3,#1              ;1805
000080  428b              CMP      r3,r1                 ;1805
000082  dbe2              BLT      |L157.74|
                  |L157.132|
000084  b003              ADD      sp,sp,#0xc
000086  2000              MOVS     r0,#0                 ;1815
000088  bdf0              POP      {r4-r7,pc}
;;;1817   
                          ENDP

00008a  0000              DCW      0x0000
                  |L157.140|
                          DCD      _ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)::__PRETTY_FUNCTION__
                  |L157.144|
000090  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
000094  6f726574
000098  6563685c
00009c  636f6d6d
0000a0  6f6e5c69
0000a4  6e636c75
0000a8  64655c61
0000ac  6e6b692f
0000b0  636f6d6d
0000b4  6f6e2f72
0000b8  6f626f74
0000bc  2f6d6174
0000c0  726978  
0000c3  2e6800            DCB      ".h",0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L157.200|
0000c8  496e7075          DCB      "Input array must be square",0
0000cc  74206172
0000d0  72617920
0000d4  6d757374
0000d8  20626520
0000dc  73717561
0000e0  726500  
0000e3  00                DCB      0
                  |L157.228|
0000e4  4d616b65          DCB      "MakeSymmetric",0
0000e8  53796d6d
0000ec  65747269
0000f0  6300    
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||area_number.158||, COMGROUP=_ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b, LINKORDER=||t._ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.158||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_b||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIfE7IsValidEv PROC ; Anki::Embedded::Array<float>::IsValid() const
;;;590    
;;;591        template<typename Type> bool Array<Type>::IsValid() const
000000  6901              LDR      r1,[r0,#0x10]
;;;592        {
000002  b131              CBZ      r1,|L164.18|
;;;593          if(this->data == NULL) {
;;;594            return false;
;;;595          }
;;;596    
;;;597          if(size[0] < 0 || size[1] < 0) {
000004  6801              LDR      r1,[r0,#0]
000006  2900              CMP      r1,#0
000008  bfa1              ITTTT    GE
00000a  6840              LDRGE    r0,[r0,#4]
00000c  2800              CMPGE    r0,#0
;;;598            return false;
;;;599          }
;;;600    
;;;601          return true;
00000e  2001              MOVGE    r0,#1
;;;602        }
000010  4770              BXGE     lr
                  |L164.18|
000012  2000              MOVS     r0,#0                 ;598
000014  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||area_number.165||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.165||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi PROC ; Anki::Embedded::Array<float>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L171.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L171.56|
00000e  4b0b              LDR      r3,|L171.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L171.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L171.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
                  |L171.60|
                          DCD      ||.constdata||+0x2b4

                          AREA ||area_number.172||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.172||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L178.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L178.56|
00000e  4b0b              LDR      r3,|L178.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1030250          ADD      r2,r3,#0x50
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L178.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L178.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L178.60|
                          DCD      ||.constdata||+0x2b4

                          AREA ||area_number.179||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.179||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE||, COMGROUP=_ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15ConstArraySliceIfEC2ERKNS0_5ArrayIfEE                  ; Alternate entry point ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice__sub_object(const Anki::Embedded::Array<float>&)
                  _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE PROC ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
;;;26     
;;;27         template<typename Type> ConstArraySlice<Type>::ConstArraySlice(const Array<Type> &array)
;;;28           : ySlice(LinearSequence<s32>(0,array.get_size(0)-1)), xSlice(LinearSequence<s32>(0,array.get_size(1)-1)), array(array)
;;;29         {
;;;30           if(array.get_numElements() == 0) {
;;;31             this->constArrayData = NULL;
;;;32           } else {
;;;33             this->constArrayData = array.Pointer(0,0);
;;;34           }
;;;35         }
;;;36     
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00000e  1e42              SUBS     r2,r0,#1
000010  2100              MOVS     r1,#0
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000018  4605              MOV      r5,r0
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000022  1e42              SUBS     r2,r0,#1
000024  2100              MOVS     r1,#0
000026  f105000c          ADD      r0,r5,#0xc
00002a  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002e  e894102e          LDM      r4,{r1-r3,r5,r12}
000032  380c              SUBS     r0,r0,#0xc
000034  f1000618          ADD      r6,r0,#0x18
000038  e8a6102e          STM      r6!,{r1-r3,r5,r12}
00003c  6821              LDR      r1,[r4,#0]
00003e  2900              CMP      r1,#0
000040  bfc4              ITT      GT
000042  6862              LDRGT    r2,[r4,#4]
000044  2a00              CMPGT    r2,#0
000046  dd08              BLE      |L185.90|
000048  4351              MULS     r1,r2,r1
00004a  b131              CBZ      r1,|L185.90|
00004c  68a3              LDR      r3,[r4,#8]
00004e  6922              LDR      r2,[r4,#0x10]
000050  2100              MOVS     r1,#0
000052  fb012103          MLA      r1,r1,r3,r2
                  |L185.86|
000056  62c1              STR      r1,[r0,#0x2c]
000058  bd70              POP      {r4-r6,pc}
                  |L185.90|
00005a  2100              MOVS     r1,#0
00005c  e7fb              B        |L185.86|
                          ENDP


                          AREA ||area_number.186||, COMGROUP=_ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE, LINKORDER=||t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.186||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded10ArraySliceIfEC2ENS0_5ArrayIfEE                  ; Alternate entry point ; Anki::Embedded::ArraySlice<float>::ArraySlice__sub_object(Anki::Embedded::Array<float>)
                  _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE PROC ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
;;;78     
;;;79         template<typename Type> ArraySlice<Type>::ArraySlice(Array<Type> array)
;;;80           : ConstArraySlice<Type>(array)
;;;81         {
;;;82           if(array.get_numElements() == 0) {
;;;83             this->arrayData = NULL;
;;;84           } else {
;;;85             this->arrayData = array.Pointer(0,0);
;;;86           }
;;;87         }
;;;88     
000000  b40f              PUSH     {r0-r3}
000002  b510              PUSH     {r4,lr}
000004  a903              ADD      r1,sp,#0xc
000006  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00000a  9903              LDR      r1,[sp,#0xc]
00000c  2900              CMP      r1,#0
00000e  bfc4              ITT      GT
000010  9904              LDRGT    r1,[sp,#0x10]
000012  2900              CMPGT    r1,#0
000014  dd0c              BLE      |L192.48|
000016  e9dd1203          LDRD     r1,r2,[sp,#0xc]
00001a  4351              MULS     r1,r2,r1
00001c  b141              CBZ      r1,|L192.48|
00001e  9b05              LDR      r3,[sp,#0x14]
000020  9a07              LDR      r2,[sp,#0x1c]
000022  2100              MOVS     r1,#0
000024  fb012103          MLA      r1,r1,r3,r2
                  |L192.40|
000028  6301              STR      r1,[r0,#0x30]
00002a  bc10              POP      {r4}
00002c  f85dfb14          LDR      pc,[sp],#0x14
                  |L192.48|
000030  2100              MOVS     r1,#0
000032  e7f9              B        |L192.40|
                          ENDP


                          AREA ||area_number.193||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.193||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L199.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L199.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L199.392|
000044  a25e              ADR      r2,|L199.448|
000046  a162              ADR      r1,|L199.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L199.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  0080              LSLS     r0,r0,#2
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L199.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L199.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L199.392|
000084  a24e              ADR      r2,|L199.448|
000086  a158              ADR      r1,|L199.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L199.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L199.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L199.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L199.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L199.392|
0000cc  a252              ADR      r2,|L199.536|
0000ce  a157              ADR      r1,|L199.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L199.380|
                  |L199.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L199.392|
0000e4  a259              ADR      r2,|L199.588|
0000e6  a160              ADR      r1,|L199.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L199.380|
                  |L199.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L199.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L199.392|
000114  a25a              ADR      r2,|L199.640|
000116  a145              ADR      r1,|L199.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L199.380|
                  |L199.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060186          ADD      r1,r6,r6,LSL #2
00013e  0089              LSLS     r1,r1,#2
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L199.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L199.392|
000162  a251              ADR      r2,|L199.680|
000164  a140              ADR      r1,|L199.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L199.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L199.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L199.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L199.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L199.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L199.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L199.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L199.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L199.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L199.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L199.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L199.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L199.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L199.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.200||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.200||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L206.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L206.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.207||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.207||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L213.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L213.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L213.384|
000044  a25c              ADR      r2,|L213.440|
000046  a160              ADR      r1,|L213.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L213.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0140              LSLS     r0,r0,#5
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L213.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L213.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L213.384|
000080  a24d              ADR      r2,|L213.440|
000082  a157              ADR      r1,|L213.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L213.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L213.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L213.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L213.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L213.384|
0000c8  a251              ADR      r2,|L213.528|
0000ca  a156              ADR      r1,|L213.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L213.372|
                  |L213.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L213.384|
0000e0  a258              ADR      r2,|L213.580|
0000e2  a15f              ADR      r1,|L213.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L213.372|
                  |L213.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L213.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L213.384|
000110  a259              ADR      r2,|L213.632|
000112  a144              ADR      r1,|L213.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L213.372|
                  |L213.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0171              LSLS     r1,r6,#5
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L213.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L213.384|
00015a  a251              ADR      r2,|L213.672|
00015c  a140              ADR      r1,|L213.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L213.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L213.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L213.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L213.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L213.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L213.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L213.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L213.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L213.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L213.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L213.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L213.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L213.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L213.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.214||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.214||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L220.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L220.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.221||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.221||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS1_IfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L227.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L227.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L227.392|
000044  a25e              ADR      r2,|L227.448|
000046  a162              ADR      r1,|L227.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L227.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  0080              LSLS     r0,r0,#2
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L227.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L227.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L227.392|
000084  a24e              ADR      r2,|L227.448|
000086  a158              ADR      r1,|L227.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L227.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L227.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L227.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L227.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L227.392|
0000cc  a252              ADR      r2,|L227.536|
0000ce  a157              ADR      r1,|L227.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L227.380|
                  |L227.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L227.392|
0000e4  a259              ADR      r2,|L227.588|
0000e6  a160              ADR      r1,|L227.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L227.380|
                  |L227.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L227.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L227.392|
000114  a25a              ADR      r2,|L227.640|
000116  a145              ADR      r1,|L227.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L227.380|
                  |L227.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060186          ADD      r1,r6,r6,LSL #2
00013e  0089              LSLS     r1,r1,#2
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L227.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L227.392|
000162  a251              ADR      r2,|L227.680|
000164  a140              ADR      r1,|L227.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L227.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L227.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L227.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L227.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L227.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L227.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L227.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L227.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L227.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L227.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L227.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L227.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L227.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L227.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.228||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.228||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
;;;91     
;;;92         template<typename Type> bool FixedLengthList<Type>::IsValid() const
000000  68c2              LDR      r2,[r0,#0xc]
;;;93         {
;;;94           if(this->get_size() > this->get_maximumSize()) {
000002  69c1              LDR      r1,[r0,#0x1c]
000004  428a              CMP      r2,r1
000006  dc07              BGT      |L234.24|
000008  6a82              LDR      r2,[r0,#0x28]         ;93
00000a  b12a              CBZ      r2,|L234.24|
00000c  6980              LDR      r0,[r0,#0x18]         ;93
00000e  2800              CMP      r0,#0                 ;93
000010  bfa2              ITTT     GE                    ;93
000012  2900              CMPGE    r1,#0                 ;93
000014  2001              MOVGE    r0,#1                 ;93
;;;95             return false;
;;;96           }
;;;97     
;;;98           return ArraySlice<Type>::IsValid();
;;;99         } // bool FixedLengthList<Type>::IsValid() const
000016  4770              BXGE     lr
                  |L234.24|
000018  2000              MOVS     r0,#0
00001a  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||area_number.235||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.235||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L241.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L241.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L241.392|
000044  a25e              ADR      r2,|L241.448|
000046  a162              ADR      r1,|L241.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L241.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000040          ADD      r0,r0,r0,LSL #1
000066  00c0              LSLS     r0,r0,#3
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L241.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L241.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L241.392|
000084  a24e              ADR      r2,|L241.448|
000086  a158              ADR      r1,|L241.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L241.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L241.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L241.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L241.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L241.392|
0000cc  a252              ADR      r2,|L241.536|
0000ce  a157              ADR      r1,|L241.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L241.380|
                  |L241.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L241.392|
0000e4  a259              ADR      r2,|L241.588|
0000e6  a160              ADR      r1,|L241.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L241.380|
                  |L241.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L241.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L241.392|
000114  a25a              ADR      r2,|L241.640|
000116  a145              ADR      r1,|L241.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L241.380|
                  |L241.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060146          ADD      r1,r6,r6,LSL #1
00013e  00c9              LSLS     r1,r1,#3
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L241.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L241.392|
000162  a251              ADR      r2,|L241.680|
000164  a140              ADR      r1,|L241.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L241.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L241.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L241.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L241.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L241.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L241.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L241.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L241.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L241.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L241.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L241.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L241.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L241.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L241.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.242||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.242||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L248.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L248.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.249||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.249||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L255.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L255.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.256||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.256||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b570              PUSH     {r4-r6,lr}
000002  f04f34ff          MOV      r4,#0xffffffff
000006  6004              STR      r4,[r0,#0]
000008  6044              STR      r4,[r0,#4]
00000a  4601              MOV      r1,r0
00000c  6084              STR      r4,[r0,#8]
00000e  f8404f0c          STR      r4,[r0,#0xc]!
000012  2500              MOVS     r5,#0
000014  6044              STR      r4,[r0,#4]
000016  6084              STR      r4,[r0,#8]
000018  f1010024          ADD      r0,r1,#0x24
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000020  f8404d0c          STR      r4,[r0,#-0xc]!
000024  2100              MOVS     r1,#0
000026  6044              STR      r4,[r0,#4]
000028  6105              STR      r5,[r0,#0x10]
00002a  6084              STR      r4,[r0,#8]
00002c  6145              STR      r5,[r0,#0x14]
00002e  f1a00418          SUB      r4,r0,#0x18
000032  6185              STR      r5,[r0,#0x18]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::set_size(int)
00003a  4620              MOV      r0,r4
00003c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.263||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.263||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS1_INS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE PROC ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Add<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
;;;1819         {
;;;1820           template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
000000  b40f              PUSH     {r0-r3}
;;;1821           {
000002  e92d47f0          PUSH     {r4-r10,lr}
000006  b0a8              SUB      sp,sp,#0xa0
000008  4607              MOV      r7,r0
00000a  f1000518          ADD      r5,r0,#0x18
00000e  4688              MOV      r8,r1
000010  f1010418          ADD      r4,r1,#0x18
000014  ae38              ADD      r6,sp,#0xe0
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
;;;1822             const Array<InType> &in1Array = in1.get_array();
;;;1823             const Array<InType> &in2Array = in2.get_array();
;;;1824             Array<OutType> &out1Array = out.get_array();
;;;1825   
;;;1826             AnkiConditionalErrorAndReturnValue(AreValid(in1Array, in2Array, out1Array),
00001c  f8df92e4          LDR      r9,|L269.772|
000020  2800              CMP      r0,#0
000022  d07d              BEQ      |L269.288|
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00002a  2800              CMP      r0,#0
00002c  d078              BEQ      |L269.288|
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000034  2800              CMP      r0,#0
000036  d073              BEQ      |L269.288|
000038  f8981030          LDRB     r1,[r8,#0x30]
00003c  f8973030          LDRB     r3,[r7,#0x30]
;;;1827               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Invalid objects");
;;;1828   
;;;1829             ArraySliceLimits_in2_out1<s32> limits(
000040  a832              ADD      r0,sp,#0xc8
000042  e9cd1002          STRD     r1,r0,[sp,#8]
000046  f1080c0c          ADD      r12,r8,#0xc
00004a  e9cd8c00          STRD     r8,r12,[sp,#0]
00004e  f10d0ad4          ADD      r10,sp,#0xd4
000052  f107020c          ADD      r2,r7,#0xc
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  4639              MOV      r1,r7
00005c  a806              ADD      r0,sp,#0x18
00005e  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
;;;1830               in1.get_ySlice(), in1.get_xSlice(), in1.get_isTransposed(),
;;;1831               in2.get_ySlice(), in2.get_xSlice(), in2.get_isTransposed(),
;;;1832               out.get_ySlice(), out.get_xSlice());
;;;1833   
;;;1834             AnkiConditionalErrorAndReturnValue(limits.isValid,
000062  f89d0018          LDRB     r0,[sp,#0x18]
000066  2800              CMP      r0,#0
000068  d06f              BEQ      |L269.330|
;;;1835               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Limits is not valid");
;;;1836   
;;;1837             if(limits.isSimpleIteration) {
00006a  f89d0019          LDRB     r0,[sp,#0x19]
00006e  2800              CMP      r0,#0
000070  f00080b8          BEQ.W    |L269.484|
;;;1838               // If the input isn't transposed, we will do the maximally efficient loop iteration
;;;1839   
;;;1840               for(s32 y=0; y<limits.ySize; y++) {
000074  980d              LDR      r0,[sp,#0x34]
000076  2700              MOVS     r7,#0
000078  2800              CMP      r0,#0
00007a  f3408112          BLE.W    |L269.674|
                  |L269.126|
00007e  9809              LDR      r0,[sp,#0x24]
000080  68aa              LDR      r2,[r5,#8]
000082  6929              LDR      r1,[r5,#0x10]
000084  68a3              LDR      r3,[r4,#8]
000086  fb001102          MLA      r1,r0,r2,r1
00008a  980b              LDR      r0,[sp,#0x2c]
00008c  6922              LDR      r2,[r4,#0x10]
00008e  f8d6c008          LDR      r12,[r6,#8]
000092  fb002203          MLA      r2,r0,r3,r2
000096  9807              LDR      r0,[sp,#0x1c]
000098  6933              LDR      r3,[r6,#0x10]
00009a  fb00330c          MLA      r3,r0,r12,r3
00009e  f89d0019          LDRB     r0,[sp,#0x19]
0000a2  2800              CMP      r0,#0
0000a4  9814              LDR      r0,[sp,#0x50]
0000a6  9008              STR      r0,[sp,#0x20]
0000a8  d06e              BEQ      |L269.392|
0000aa  981a              LDR      r0,[sp,#0x68]
0000ac  900a              STR      r0,[sp,#0x28]
0000ae  9821              LDR      r0,[sp,#0x84]
0000b0  900c              STR      r0,[sp,#0x30]
                  |L269.178|
;;;1841                 const InType * const pIn1 = in1Array.Pointer(limits.in1Y, 0);
;;;1842                 const InType * const pIn2 = in2Array.Pointer(limits.in2Y, 0);
;;;1843                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1844   
;;;1845                 limits.OuterIncrementTop();
;;;1846   
;;;1847                 for(s32 x=0; x<limits.xSize; x++) {
0000b2  f8ddc038          LDR      r12,[sp,#0x38]
0000b6  2000              MOVS     r0,#0
0000b8  f1bc0f00          CMP      r12,#0
0000bc  dd2d              BLE      |L269.282|
                  |L269.190|
;;;1848                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(pIn1[limits.in1X], pIn2[limits.in2X]);
0000be  f8ddc028          LDR      r12,[sp,#0x28]
0000c2  1c40              ADDS     r0,r0,#1              ;1847
0000c4  eb010c8c          ADD      r12,r1,r12,LSL #2
0000c8  eddc0a00          VLDR     s1,[r12,#0]
0000cc  f8ddc030          LDR      r12,[sp,#0x30]
0000d0  eb020c8c          ADD      r12,r2,r12,LSL #2
0000d4  ed9c0a00          VLDR     s0,[r12,#0]
0000d8  f8ddc020          LDR      r12,[sp,#0x20]
0000dc  ee300a80          VADD.F32 s0,s1,s0
0000e0  eb030c8c          ADD      r12,r3,r12,LSL #2
0000e4  ed8c0a00          VSTR     s0,[r12,#0]
;;;1849   
;;;1850                   limits.in1X += limits.in1_xInnerIncrement;
0000e8  f8ddc028          LDR      r12,[sp,#0x28]
0000ec  f8dd8040          LDR      r8,[sp,#0x40]
0000f0  44c4              ADD      r12,r12,r8
;;;1851                   limits.in2X += limits.in2_xInnerIncrement;
0000f2  f8cdc028          STR      r12,[sp,#0x28]
0000f6  f8ddc030          LDR      r12,[sp,#0x30]
0000fa  f8dd8048          LDR      r8,[sp,#0x48]
0000fe  44c4              ADD      r12,r12,r8
;;;1852                   limits.out1X += limits.out1_xInnerIncrement;
000100  f8cdc030          STR      r12,[sp,#0x30]
000104  f8ddc020          LDR      r12,[sp,#0x20]
000108  f8dd803c          LDR      r8,[sp,#0x3c]
00010c  44c4              ADD      r12,r12,r8
00010e  f8cdc020          STR      r12,[sp,#0x20]        ;1847
000112  f8ddc038          LDR      r12,[sp,#0x38]        ;1847
000116  4584              CMP      r12,r0                ;1847
000118  dcd1              BGT      |L269.190|
                  |L269.282|
00011a  f89d0019          LDRB     r0,[sp,#0x19]         ;1847
00011e  e000              B        |L269.290|
                  |L269.288|
000120  e014              B        |L269.332|
                  |L269.290|
000122  2800              CMP      r0,#0                 ;1847
000124  d041              BEQ      |L269.426|
000126  991e              LDR      r1,[sp,#0x78]         ;1847
000128  9809              LDR      r0,[sp,#0x24]         ;1847
00012a  4408              ADD      r0,r0,r1              ;1847
00012c  9009              STR      r0,[sp,#0x24]         ;1847
00012e  9925              LDR      r1,[sp,#0x94]         ;1847
000130  980b              LDR      r0,[sp,#0x2c]         ;1847
000132  4408              ADD      r0,r0,r1              ;1847
000134  900b              STR      r0,[sp,#0x2c]         ;1847
000136  9918              LDR      r1,[sp,#0x60]         ;1847
000138  9807              LDR      r0,[sp,#0x1c]         ;1847
00013a  4408              ADD      r0,r0,r1              ;1847
00013c  9007              STR      r0,[sp,#0x1c]         ;1847
                  |L269.318|
00013e  980d              LDR      r0,[sp,#0x34]         ;1840
000140  1c7f              ADDS     r7,r7,#1              ;1840
000142  42b8              CMP      r0,r7                 ;1840
000144  dc9b              BGT      |L269.126|
000146  f000b8ac          B.W      |L269.674|
                  |L269.330|
00014a  e010              B        |L269.366|
                  |L269.332|
00014c  f2407022          MOV      r0,#0x722             ;1826
000150  e9cd9000          STRD     r9,r0,[sp,#0]         ;1826
000154  a36c              ADR      r3,|L269.776|
000156  a27a              ADR      r2,|L269.832|
000158  a17d              ADR      r1,|L269.848|
00015a  2005              MOVS     r0,#5                 ;1826
00015c  f7fffffe          BL       _Anki_Log
000160  f04f6080          MOV      r0,#0x4000000         ;1826
                  |L269.356|
;;;1853                 }
;;;1854   
;;;1855                 limits.OuterIncrementBottom();
;;;1856               }
;;;1857             } else { // if(limits.isSimpleIteration)
;;;1858               // If either input is transposed is allowed, then we will do an inefficent loop iteration
;;;1859   
;;;1860               for(s32 y=0; y<limits.ySize; y++) {
;;;1861                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1862   
;;;1863                 limits.OuterIncrementTop();
;;;1864   
;;;1865                 for(s32 x=0; x<limits.xSize; x++) {
;;;1866                   const InType valIn1 = *in1Array.Pointer(limits.in1Y, limits.in1X);
;;;1867                   const InType valIn2 = *in2Array.Pointer(limits.in2Y, limits.in2X);
;;;1868   
;;;1869                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(valIn1, valIn2);
;;;1870   
;;;1871                   limits.in1X += limits.in1_xInnerIncrement;
;;;1872                   limits.in1Y += limits.in1_yInnerIncrement;
;;;1873                   limits.in2X += limits.in2_xInnerIncrement;
;;;1874                   limits.in2Y += limits.in2_yInnerIncrement;
;;;1875                   limits.out1X += limits.out1_xInnerIncrement;
;;;1876                 }
;;;1877   
;;;1878                 limits.OuterIncrementBottom();
;;;1879               }
;;;1880             } //   if(limits.isSimpleIteration)  ... else
;;;1881   
;;;1882             return RESULT_OK;
;;;1883           } // template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
000164  b028              ADD      sp,sp,#0xa0
000166  e8bd07f0          POP      {r4-r10}
00016a  f85dfb14          LDR      pc,[sp],#0x14
                  |L269.366|
00016e  f240702a          MOV      r0,#0x72a             ;1834
000172  e9cd9000          STRD     r9,r0,[sp,#0]         ;1834
000176  a364              ADR      r3,|L269.776|
000178  a27e              ADR      r2,|L269.884|
00017a  a175              ADR      r1,|L269.848|
00017c  2005              MOVS     r0,#5                 ;1834
00017e  f7fffffe          BL       _Anki_Log
000182  f04f6080          MOV      r0,#0x4000000         ;1834
000186  e7ed              B        |L269.356|
                  |L269.392|
000188  f89d0080          LDRB     r0,[sp,#0x80]         ;1834
00018c  2800              CMP      r0,#0                 ;1834
00018e  bf19              ITTEE    NE                    ;1834
000190  981d              LDRNE    r0,[sp,#0x74]         ;1834
000192  9009              STRNE    r0,[sp,#0x24]         ;1834
000194  981a              LDREQ    r0,[sp,#0x68]         ;1834
000196  900a              STREQ    r0,[sp,#0x28]         ;1834
000198  f89d009c          LDRB     r0,[sp,#0x9c]         ;1834
00019c  2800              CMP      r0,#0                 ;1834
00019e  bf19              ITTEE    NE                    ;1834
0001a0  9824              LDRNE    r0,[sp,#0x90]         ;1834
0001a2  900b              STRNE    r0,[sp,#0x2c]         ;1834
0001a4  9821              LDREQ    r0,[sp,#0x84]         ;1834
0001a6  900c              STREQ    r0,[sp,#0x30]         ;1834
0001a8  e783              B        |L269.178|
                  |L269.426|
0001aa  9918              LDR      r1,[sp,#0x60]         ;1834
0001ac  9807              LDR      r0,[sp,#0x1c]         ;1834
0001ae  4408              ADD      r0,r0,r1              ;1834
0001b0  9007              STR      r0,[sp,#0x1c]         ;1834
0001b2  f89d0080          LDRB     r0,[sp,#0x80]         ;1834
0001b6  2800              CMP      r0,#0                 ;1834
0001b8  bf19              ITTEE    NE                    ;1834
0001ba  991b              LDRNE    r1,[sp,#0x6c]         ;1834
0001bc  980a              LDRNE    r0,[sp,#0x28]         ;1834
0001be  991e              LDREQ    r1,[sp,#0x78]         ;1834
0001c0  9809              LDREQ    r0,[sp,#0x24]         ;1834
0001c2  4408              ADD      r0,r0,r1              ;1834
0001c4  bf14              ITE      NE                    ;1834
0001c6  900a              STRNE    r0,[sp,#0x28]         ;1834
0001c8  9009              STREQ    r0,[sp,#0x24]         ;1834
0001ca  f89d009c          LDRB     r0,[sp,#0x9c]         ;1834
0001ce  2800              CMP      r0,#0                 ;1834
0001d0  bf19              ITTEE    NE                    ;1834
0001d2  9922              LDRNE    r1,[sp,#0x88]         ;1834
0001d4  980c              LDRNE    r0,[sp,#0x30]         ;1834
0001d6  9925              LDREQ    r1,[sp,#0x94]         ;1834
0001d8  980b              LDREQ    r0,[sp,#0x2c]         ;1834
0001da  4408              ADD      r0,r0,r1              ;1834
0001dc  bf14              ITE      NE                    ;1834
0001de  900c              STRNE    r0,[sp,#0x30]         ;1834
0001e0  900b              STREQ    r0,[sp,#0x2c]         ;1834
0001e2  e7ac              B        |L269.318|
                  |L269.484|
0001e4  980d              LDR      r0,[sp,#0x34]         ;1860
0001e6  2300              MOVS     r3,#0                 ;1860
0001e8  2800              CMP      r0,#0                 ;1860
0001ea  dd5a              BLE      |L269.674|
                  |L269.492|
0001ec  9807              LDR      r0,[sp,#0x1c]         ;1860
0001ee  68b2              LDR      r2,[r6,#8]            ;1860
0001f0  6931              LDR      r1,[r6,#0x10]         ;1860
0001f2  fb001c02          MLA      r12,r0,r2,r1          ;1860
0001f6  f89d0019          LDRB     r0,[sp,#0x19]         ;1860
0001fa  2800              CMP      r0,#0                 ;1860
0001fc  9814              LDR      r0,[sp,#0x50]         ;1860
0001fe  9008              STR      r0,[sp,#0x20]         ;1860
000200  d051              BEQ      |L269.678|
000202  981a              LDR      r0,[sp,#0x68]         ;1860
000204  900a              STR      r0,[sp,#0x28]         ;1860
000206  9821              LDR      r0,[sp,#0x84]         ;1860
000208  900c              STR      r0,[sp,#0x30]         ;1860
                  |L269.522|
00020a  990e              LDR      r1,[sp,#0x38]         ;1865
00020c  2000              MOVS     r0,#0                 ;1865
00020e  2900              CMP      r1,#0                 ;1865
000210  dd34              BLE      |L269.636|
                  |L269.530|
000212  e9dd2109          LDRD     r2,r1,[sp,#0x24]      ;1865
000216  f8d58008          LDR      r8,[r5,#8]            ;1865
00021a  692f              LDR      r7,[r5,#0x10]         ;1865
00021c  1c40              ADDS     r0,r0,#1              ;1865
00021e  fb027208          MLA      r2,r2,r8,r7           ;1865
000222  eb020181          ADD      r1,r2,r1,LSL #2       ;1865
000226  f8d48008          LDR      r8,[r4,#8]            ;1865
00022a  ed910a00          VLDR     s0,[r1,#0]            ;1866
00022e  e9dd210b          LDRD     r2,r1,[sp,#0x2c]      ;1866
000232  6927              LDR      r7,[r4,#0x10]         ;1866
000234  fb027208          MLA      r2,r2,r8,r7           ;1866
000238  eb020181          ADD      r1,r2,r1,LSL #2       ;1866
00023c  edd10a00          VLDR     s1,[r1,#0]            ;1867
000240  9908              LDR      r1,[sp,#0x20]         ;1869
000242  ee300a20          VADD.F32 s0,s0,s1              ;1869
000246  eb0c0181          ADD      r1,r12,r1,LSL #2      ;1869
00024a  ed810a00          VSTR     s0,[r1,#0]            ;1869
00024e  9a10              LDR      r2,[sp,#0x40]         ;1871
000250  990a              LDR      r1,[sp,#0x28]         ;1871
000252  4411              ADD      r1,r1,r2              ;1871
000254  910a              STR      r1,[sp,#0x28]         ;1872
000256  9a11              LDR      r2,[sp,#0x44]         ;1872
000258  9909              LDR      r1,[sp,#0x24]         ;1872
00025a  4411              ADD      r1,r1,r2              ;1872
00025c  9109              STR      r1,[sp,#0x24]         ;1873
00025e  9a12              LDR      r2,[sp,#0x48]         ;1873
000260  990c              LDR      r1,[sp,#0x30]         ;1873
000262  4411              ADD      r1,r1,r2              ;1873
000264  910c              STR      r1,[sp,#0x30]         ;1874
000266  9a13              LDR      r2,[sp,#0x4c]         ;1874
000268  990b              LDR      r1,[sp,#0x2c]         ;1874
00026a  4411              ADD      r1,r1,r2              ;1874
00026c  910b              STR      r1,[sp,#0x2c]         ;1875
00026e  9a0f              LDR      r2,[sp,#0x3c]         ;1875
000270  9908              LDR      r1,[sp,#0x20]         ;1875
000272  4411              ADD      r1,r1,r2              ;1875
000274  9108              STR      r1,[sp,#0x20]         ;1865
000276  990e              LDR      r1,[sp,#0x38]         ;1865
000278  4281              CMP      r1,r0                 ;1865
00027a  dcca              BGT      |L269.530|
                  |L269.636|
00027c  f89d0019          LDRB     r0,[sp,#0x19]         ;1865
000280  b310              CBZ      r0,|L269.712|
000282  991e              LDR      r1,[sp,#0x78]         ;1865
000284  9809              LDR      r0,[sp,#0x24]         ;1865
000286  4408              ADD      r0,r0,r1              ;1865
000288  9009              STR      r0,[sp,#0x24]         ;1865
00028a  9925              LDR      r1,[sp,#0x94]         ;1865
00028c  980b              LDR      r0,[sp,#0x2c]         ;1865
00028e  4408              ADD      r0,r0,r1              ;1865
000290  900b              STR      r0,[sp,#0x2c]         ;1865
000292  9918              LDR      r1,[sp,#0x60]         ;1865
000294  9807              LDR      r0,[sp,#0x1c]         ;1865
000296  4408              ADD      r0,r0,r1              ;1865
000298  9007              STR      r0,[sp,#0x1c]         ;1865
                  |L269.666|
00029a  980d              LDR      r0,[sp,#0x34]         ;1860
00029c  1c5b              ADDS     r3,r3,#1              ;1860
00029e  4298              CMP      r0,r3                 ;1860
0002a0  dca4              BGT      |L269.492|
                  |L269.674|
0002a2  2000              MOVS     r0,#0                 ;1882
0002a4  e75e              B        |L269.356|
                  |L269.678|
0002a6  f89d0080          LDRB     r0,[sp,#0x80]         ;1882
0002aa  2800              CMP      r0,#0                 ;1882
0002ac  bf19              ITTEE    NE                    ;1882
0002ae  981d              LDRNE    r0,[sp,#0x74]         ;1882
0002b0  9009              STRNE    r0,[sp,#0x24]         ;1882
0002b2  981a              LDREQ    r0,[sp,#0x68]         ;1882
0002b4  900a              STREQ    r0,[sp,#0x28]         ;1882
0002b6  f89d009c          LDRB     r0,[sp,#0x9c]         ;1882
0002ba  2800              CMP      r0,#0                 ;1882
0002bc  bf19              ITTEE    NE                    ;1882
0002be  9824              LDRNE    r0,[sp,#0x90]         ;1882
0002c0  900b              STRNE    r0,[sp,#0x2c]         ;1882
0002c2  9821              LDREQ    r0,[sp,#0x84]         ;1882
0002c4  900c              STREQ    r0,[sp,#0x30]         ;1882
0002c6  e7a0              B        |L269.522|
                  |L269.712|
0002c8  9918              LDR      r1,[sp,#0x60]         ;1882
0002ca  9807              LDR      r0,[sp,#0x1c]         ;1882
0002cc  4408              ADD      r0,r0,r1              ;1882
0002ce  9007              STR      r0,[sp,#0x1c]         ;1882
0002d0  f89d0080          LDRB     r0,[sp,#0x80]         ;1882
0002d4  2800              CMP      r0,#0                 ;1882
0002d6  bf19              ITTEE    NE                    ;1882
0002d8  991b              LDRNE    r1,[sp,#0x6c]         ;1882
0002da  980a              LDRNE    r0,[sp,#0x28]         ;1882
0002dc  991e              LDREQ    r1,[sp,#0x78]         ;1882
0002de  9809              LDREQ    r0,[sp,#0x24]         ;1882
0002e0  4408              ADD      r0,r0,r1              ;1882
0002e2  bf14              ITE      NE                    ;1882
0002e4  900a              STRNE    r0,[sp,#0x28]         ;1882
0002e6  9009              STREQ    r0,[sp,#0x24]         ;1882
0002e8  f89d009c          LDRB     r0,[sp,#0x9c]         ;1882
0002ec  2800              CMP      r0,#0                 ;1882
0002ee  bf19              ITTEE    NE                    ;1882
0002f0  9922              LDRNE    r1,[sp,#0x88]         ;1882
0002f2  980c              LDRNE    r0,[sp,#0x30]         ;1882
0002f4  9925              LDREQ    r1,[sp,#0x94]         ;1882
0002f6  980b              LDREQ    r0,[sp,#0x2c]         ;1882
0002f8  4408              ADD      r0,r0,r1              ;1882
0002fa  bf14              ITE      NE                    ;1882
0002fc  900c              STRNE    r0,[sp,#0x30]         ;1882
0002fe  900b              STREQ    r0,[sp,#0x2c]         ;1882
000300  e7cb              B        |L269.666|
;;;1884   
                          ENDP

000302  0000              DCW      0x0000
                  |L269.772|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Add<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L269.776|
000308  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
00030c  6f726574
000310  6563685c
000314  636f6d6d
000318  6f6e5c69
00031c  6e636c75
000320  64655c61
000324  6e6b692f
000328  636f6d6d
00032c  6f6e2f72
000330  6f626f74
000334  2f6d6174
000338  726978  
00033b  2e6800            DCB      ".h",0
00033e  00                DCB      0
00033f  00                DCB      0
                  |L269.832|
000340  496e7661          DCB      "Invalid objects",0
000344  6c696420
000348  6f626a65
00034c  63747300
                  |L269.848|
000350  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
000354  69783a3a
000358  456c656d
00035c  656e7477
000360  6973653a
000364  3a417070
000368  6c794f70
00036c  65726174
000370  696f6e00
                  |L269.884|
000374  4c696d69          DCB      "Limits is not valid",0
000378  74732069
00037c  73206e6f
000380  74207661
000384  6c696400

                          AREA ||area_number.270||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.270||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE PROC ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
;;;1819         {
;;;1820           template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
000000  b40f              PUSH     {r0-r3}
;;;1821           {
000002  e92d47f0          PUSH     {r4-r10,lr}
000006  b0a8              SUB      sp,sp,#0xa0
000008  4607              MOV      r7,r0
00000a  f1000518          ADD      r5,r0,#0x18
00000e  4688              MOV      r8,r1
000010  f1010418          ADD      r4,r1,#0x18
000014  ae38              ADD      r6,sp,#0xe0
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
;;;1822             const Array<InType> &in1Array = in1.get_array();
;;;1823             const Array<InType> &in2Array = in2.get_array();
;;;1824             Array<OutType> &out1Array = out.get_array();
;;;1825   
;;;1826             AnkiConditionalErrorAndReturnValue(AreValid(in1Array, in2Array, out1Array),
00001c  f8df92e4          LDR      r9,|L276.772|
000020  2800              CMP      r0,#0
000022  d07d              BEQ      |L276.288|
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00002a  2800              CMP      r0,#0
00002c  d078              BEQ      |L276.288|
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000034  2800              CMP      r0,#0
000036  d073              BEQ      |L276.288|
000038  f8981030          LDRB     r1,[r8,#0x30]
00003c  f8973030          LDRB     r3,[r7,#0x30]
;;;1827               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Invalid objects");
;;;1828   
;;;1829             ArraySliceLimits_in2_out1<s32> limits(
000040  a832              ADD      r0,sp,#0xc8
000042  e9cd1002          STRD     r1,r0,[sp,#8]
000046  f1080c0c          ADD      r12,r8,#0xc
00004a  e9cd8c00          STRD     r8,r12,[sp,#0]
00004e  f10d0ad4          ADD      r10,sp,#0xd4
000052  f107020c          ADD      r2,r7,#0xc
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  4639              MOV      r1,r7
00005c  a806              ADD      r0,sp,#0x18
00005e  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
;;;1830               in1.get_ySlice(), in1.get_xSlice(), in1.get_isTransposed(),
;;;1831               in2.get_ySlice(), in2.get_xSlice(), in2.get_isTransposed(),
;;;1832               out.get_ySlice(), out.get_xSlice());
;;;1833   
;;;1834             AnkiConditionalErrorAndReturnValue(limits.isValid,
000062  f89d0018          LDRB     r0,[sp,#0x18]
000066  2800              CMP      r0,#0
000068  d06f              BEQ      |L276.330|
;;;1835               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Limits is not valid");
;;;1836   
;;;1837             if(limits.isSimpleIteration) {
00006a  f89d0019          LDRB     r0,[sp,#0x19]
00006e  2800              CMP      r0,#0
000070  f00080b8          BEQ.W    |L276.484|
;;;1838               // If the input isn't transposed, we will do the maximally efficient loop iteration
;;;1839   
;;;1840               for(s32 y=0; y<limits.ySize; y++) {
000074  980d              LDR      r0,[sp,#0x34]
000076  2700              MOVS     r7,#0
000078  2800              CMP      r0,#0
00007a  f3408112          BLE.W    |L276.674|
                  |L276.126|
00007e  9809              LDR      r0,[sp,#0x24]
000080  68aa              LDR      r2,[r5,#8]
000082  6929              LDR      r1,[r5,#0x10]
000084  68a3              LDR      r3,[r4,#8]
000086  fb001102          MLA      r1,r0,r2,r1
00008a  980b              LDR      r0,[sp,#0x2c]
00008c  6922              LDR      r2,[r4,#0x10]
00008e  f8d6c008          LDR      r12,[r6,#8]
000092  fb002203          MLA      r2,r0,r3,r2
000096  9807              LDR      r0,[sp,#0x1c]
000098  6933              LDR      r3,[r6,#0x10]
00009a  fb00330c          MLA      r3,r0,r12,r3
00009e  f89d0019          LDRB     r0,[sp,#0x19]
0000a2  2800              CMP      r0,#0
0000a4  9814              LDR      r0,[sp,#0x50]
0000a6  9008              STR      r0,[sp,#0x20]
0000a8  d06e              BEQ      |L276.392|
0000aa  981a              LDR      r0,[sp,#0x68]
0000ac  900a              STR      r0,[sp,#0x28]
0000ae  9821              LDR      r0,[sp,#0x84]
0000b0  900c              STR      r0,[sp,#0x30]
                  |L276.178|
;;;1841                 const InType * const pIn1 = in1Array.Pointer(limits.in1Y, 0);
;;;1842                 const InType * const pIn2 = in2Array.Pointer(limits.in2Y, 0);
;;;1843                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1844   
;;;1845                 limits.OuterIncrementTop();
;;;1846   
;;;1847                 for(s32 x=0; x<limits.xSize; x++) {
0000b2  f8ddc038          LDR      r12,[sp,#0x38]
0000b6  2000              MOVS     r0,#0
0000b8  f1bc0f00          CMP      r12,#0
0000bc  dd2d              BLE      |L276.282|
                  |L276.190|
;;;1848                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(pIn1[limits.in1X], pIn2[limits.in2X]);
0000be  f8ddc028          LDR      r12,[sp,#0x28]
0000c2  1c40              ADDS     r0,r0,#1              ;1847
0000c4  eb010c8c          ADD      r12,r1,r12,LSL #2
0000c8  eddc0a00          VLDR     s1,[r12,#0]
0000cc  f8ddc030          LDR      r12,[sp,#0x30]
0000d0  eb020c8c          ADD      r12,r2,r12,LSL #2
0000d4  ed9c0a00          VLDR     s0,[r12,#0]
0000d8  f8ddc020          LDR      r12,[sp,#0x20]
0000dc  ee200a80          VMUL.F32 s0,s1,s0
0000e0  eb030c8c          ADD      r12,r3,r12,LSL #2
0000e4  ed8c0a00          VSTR     s0,[r12,#0]
;;;1849   
;;;1850                   limits.in1X += limits.in1_xInnerIncrement;
0000e8  f8ddc028          LDR      r12,[sp,#0x28]
0000ec  f8dd8040          LDR      r8,[sp,#0x40]
0000f0  44c4              ADD      r12,r12,r8
;;;1851                   limits.in2X += limits.in2_xInnerIncrement;
0000f2  f8cdc028          STR      r12,[sp,#0x28]
0000f6  f8ddc030          LDR      r12,[sp,#0x30]
0000fa  f8dd8048          LDR      r8,[sp,#0x48]
0000fe  44c4              ADD      r12,r12,r8
;;;1852                   limits.out1X += limits.out1_xInnerIncrement;
000100  f8cdc030          STR      r12,[sp,#0x30]
000104  f8ddc020          LDR      r12,[sp,#0x20]
000108  f8dd803c          LDR      r8,[sp,#0x3c]
00010c  44c4              ADD      r12,r12,r8
00010e  f8cdc020          STR      r12,[sp,#0x20]        ;1847
000112  f8ddc038          LDR      r12,[sp,#0x38]        ;1847
000116  4584              CMP      r12,r0                ;1847
000118  dcd1              BGT      |L276.190|
                  |L276.282|
00011a  f89d0019          LDRB     r0,[sp,#0x19]         ;1847
00011e  e000              B        |L276.290|
                  |L276.288|
000120  e014              B        |L276.332|
                  |L276.290|
000122  2800              CMP      r0,#0                 ;1847
000124  d041              BEQ      |L276.426|
000126  991e              LDR      r1,[sp,#0x78]         ;1847
000128  9809              LDR      r0,[sp,#0x24]         ;1847
00012a  4408              ADD      r0,r0,r1              ;1847
00012c  9009              STR      r0,[sp,#0x24]         ;1847
00012e  9925              LDR      r1,[sp,#0x94]         ;1847
000130  980b              LDR      r0,[sp,#0x2c]         ;1847
000132  4408              ADD      r0,r0,r1              ;1847
000134  900b              STR      r0,[sp,#0x2c]         ;1847
000136  9918              LDR      r1,[sp,#0x60]         ;1847
000138  9807              LDR      r0,[sp,#0x1c]         ;1847
00013a  4408              ADD      r0,r0,r1              ;1847
00013c  9007              STR      r0,[sp,#0x1c]         ;1847
                  |L276.318|
00013e  980d              LDR      r0,[sp,#0x34]         ;1840
000140  1c7f              ADDS     r7,r7,#1              ;1840
000142  42b8              CMP      r0,r7                 ;1840
000144  dc9b              BGT      |L276.126|
000146  f000b8ac          B.W      |L276.674|
                  |L276.330|
00014a  e010              B        |L276.366|
                  |L276.332|
00014c  f2407022          MOV      r0,#0x722             ;1826
000150  e9cd9000          STRD     r9,r0,[sp,#0]         ;1826
000154  a36c              ADR      r3,|L276.776|
000156  a27a              ADR      r2,|L276.832|
000158  a17d              ADR      r1,|L276.848|
00015a  2005              MOVS     r0,#5                 ;1826
00015c  f7fffffe          BL       _Anki_Log
000160  f04f6080          MOV      r0,#0x4000000         ;1826
                  |L276.356|
;;;1853                 }
;;;1854   
;;;1855                 limits.OuterIncrementBottom();
;;;1856               }
;;;1857             } else { // if(limits.isSimpleIteration)
;;;1858               // If either input is transposed is allowed, then we will do an inefficent loop iteration
;;;1859   
;;;1860               for(s32 y=0; y<limits.ySize; y++) {
;;;1861                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1862   
;;;1863                 limits.OuterIncrementTop();
;;;1864   
;;;1865                 for(s32 x=0; x<limits.xSize; x++) {
;;;1866                   const InType valIn1 = *in1Array.Pointer(limits.in1Y, limits.in1X);
;;;1867                   const InType valIn2 = *in2Array.Pointer(limits.in2Y, limits.in2X);
;;;1868   
;;;1869                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(valIn1, valIn2);
;;;1870   
;;;1871                   limits.in1X += limits.in1_xInnerIncrement;
;;;1872                   limits.in1Y += limits.in1_yInnerIncrement;
;;;1873                   limits.in2X += limits.in2_xInnerIncrement;
;;;1874                   limits.in2Y += limits.in2_yInnerIncrement;
;;;1875                   limits.out1X += limits.out1_xInnerIncrement;
;;;1876                 }
;;;1877   
;;;1878                 limits.OuterIncrementBottom();
;;;1879               }
;;;1880             } //   if(limits.isSimpleIteration)  ... else
;;;1881   
;;;1882             return RESULT_OK;
;;;1883           } // template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
000164  b028              ADD      sp,sp,#0xa0
000166  e8bd07f0          POP      {r4-r10}
00016a  f85dfb14          LDR      pc,[sp],#0x14
                  |L276.366|
00016e  f240702a          MOV      r0,#0x72a             ;1834
000172  e9cd9000          STRD     r9,r0,[sp,#0]         ;1834
000176  a364              ADR      r3,|L276.776|
000178  a27e              ADR      r2,|L276.884|
00017a  a175              ADR      r1,|L276.848|
00017c  2005              MOVS     r0,#5                 ;1834
00017e  f7fffffe          BL       _Anki_Log
000182  f04f6080          MOV      r0,#0x4000000         ;1834
000186  e7ed              B        |L276.356|
                  |L276.392|
000188  f89d0080          LDRB     r0,[sp,#0x80]         ;1834
00018c  2800              CMP      r0,#0                 ;1834
00018e  bf19              ITTEE    NE                    ;1834
000190  981d              LDRNE    r0,[sp,#0x74]         ;1834
000192  9009              STRNE    r0,[sp,#0x24]         ;1834
000194  981a              LDREQ    r0,[sp,#0x68]         ;1834
000196  900a              STREQ    r0,[sp,#0x28]         ;1834
000198  f89d009c          LDRB     r0,[sp,#0x9c]         ;1834
00019c  2800              CMP      r0,#0                 ;1834
00019e  bf19              ITTEE    NE                    ;1834
0001a0  9824              LDRNE    r0,[sp,#0x90]         ;1834
0001a2  900b              STRNE    r0,[sp,#0x2c]         ;1834
0001a4  9821              LDREQ    r0,[sp,#0x84]         ;1834
0001a6  900c              STREQ    r0,[sp,#0x30]         ;1834
0001a8  e783              B        |L276.178|
                  |L276.426|
0001aa  9918              LDR      r1,[sp,#0x60]         ;1834
0001ac  9807              LDR      r0,[sp,#0x1c]         ;1834
0001ae  4408              ADD      r0,r0,r1              ;1834
0001b0  9007              STR      r0,[sp,#0x1c]         ;1834
0001b2  f89d0080          LDRB     r0,[sp,#0x80]         ;1834
0001b6  2800              CMP      r0,#0                 ;1834
0001b8  bf19              ITTEE    NE                    ;1834
0001ba  991b              LDRNE    r1,[sp,#0x6c]         ;1834
0001bc  980a              LDRNE    r0,[sp,#0x28]         ;1834
0001be  991e              LDREQ    r1,[sp,#0x78]         ;1834
0001c0  9809              LDREQ    r0,[sp,#0x24]         ;1834
0001c2  4408              ADD      r0,r0,r1              ;1834
0001c4  bf14              ITE      NE                    ;1834
0001c6  900a              STRNE    r0,[sp,#0x28]         ;1834
0001c8  9009              STREQ    r0,[sp,#0x24]         ;1834
0001ca  f89d009c          LDRB     r0,[sp,#0x9c]         ;1834
0001ce  2800              CMP      r0,#0                 ;1834
0001d0  bf19              ITTEE    NE                    ;1834
0001d2  9922              LDRNE    r1,[sp,#0x88]         ;1834
0001d4  980c              LDRNE    r0,[sp,#0x30]         ;1834
0001d6  9925              LDREQ    r1,[sp,#0x94]         ;1834
0001d8  980b              LDREQ    r0,[sp,#0x2c]         ;1834
0001da  4408              ADD      r0,r0,r1              ;1834
0001dc  bf14              ITE      NE                    ;1834
0001de  900c              STRNE    r0,[sp,#0x30]         ;1834
0001e0  900b              STREQ    r0,[sp,#0x2c]         ;1834
0001e2  e7ac              B        |L276.318|
                  |L276.484|
0001e4  980d              LDR      r0,[sp,#0x34]         ;1860
0001e6  2300              MOVS     r3,#0                 ;1860
0001e8  2800              CMP      r0,#0                 ;1860
0001ea  dd5a              BLE      |L276.674|
                  |L276.492|
0001ec  9807              LDR      r0,[sp,#0x1c]         ;1860
0001ee  68b2              LDR      r2,[r6,#8]            ;1860
0001f0  6931              LDR      r1,[r6,#0x10]         ;1860
0001f2  fb001c02          MLA      r12,r0,r2,r1          ;1860
0001f6  f89d0019          LDRB     r0,[sp,#0x19]         ;1860
0001fa  2800              CMP      r0,#0                 ;1860
0001fc  9814              LDR      r0,[sp,#0x50]         ;1860
0001fe  9008              STR      r0,[sp,#0x20]         ;1860
000200  d051              BEQ      |L276.678|
000202  981a              LDR      r0,[sp,#0x68]         ;1860
000204  900a              STR      r0,[sp,#0x28]         ;1860
000206  9821              LDR      r0,[sp,#0x84]         ;1860
000208  900c              STR      r0,[sp,#0x30]         ;1860
                  |L276.522|
00020a  990e              LDR      r1,[sp,#0x38]         ;1865
00020c  2000              MOVS     r0,#0                 ;1865
00020e  2900              CMP      r1,#0                 ;1865
000210  dd34              BLE      |L276.636|
                  |L276.530|
000212  e9dd2109          LDRD     r2,r1,[sp,#0x24]      ;1865
000216  f8d58008          LDR      r8,[r5,#8]            ;1865
00021a  692f              LDR      r7,[r5,#0x10]         ;1865
00021c  1c40              ADDS     r0,r0,#1              ;1865
00021e  fb027208          MLA      r2,r2,r8,r7           ;1865
000222  eb020181          ADD      r1,r2,r1,LSL #2       ;1865
000226  f8d48008          LDR      r8,[r4,#8]            ;1865
00022a  ed910a00          VLDR     s0,[r1,#0]            ;1866
00022e  e9dd210b          LDRD     r2,r1,[sp,#0x2c]      ;1866
000232  6927              LDR      r7,[r4,#0x10]         ;1866
000234  fb027208          MLA      r2,r2,r8,r7           ;1866
000238  eb020181          ADD      r1,r2,r1,LSL #2       ;1866
00023c  edd10a00          VLDR     s1,[r1,#0]            ;1867
000240  9908              LDR      r1,[sp,#0x20]         ;1869
000242  ee200a20          VMUL.F32 s0,s0,s1              ;1869
000246  eb0c0181          ADD      r1,r12,r1,LSL #2      ;1869
00024a  ed810a00          VSTR     s0,[r1,#0]            ;1869
00024e  9a10              LDR      r2,[sp,#0x40]         ;1871
000250  990a              LDR      r1,[sp,#0x28]         ;1871
000252  4411              ADD      r1,r1,r2              ;1871
000254  910a              STR      r1,[sp,#0x28]         ;1872
000256  9a11              LDR      r2,[sp,#0x44]         ;1872
000258  9909              LDR      r1,[sp,#0x24]         ;1872
00025a  4411              ADD      r1,r1,r2              ;1872
00025c  9109              STR      r1,[sp,#0x24]         ;1873
00025e  9a12              LDR      r2,[sp,#0x48]         ;1873
000260  990c              LDR      r1,[sp,#0x30]         ;1873
000262  4411              ADD      r1,r1,r2              ;1873
000264  910c              STR      r1,[sp,#0x30]         ;1874
000266  9a13              LDR      r2,[sp,#0x4c]         ;1874
000268  990b              LDR      r1,[sp,#0x2c]         ;1874
00026a  4411              ADD      r1,r1,r2              ;1874
00026c  910b              STR      r1,[sp,#0x2c]         ;1875
00026e  9a0f              LDR      r2,[sp,#0x3c]         ;1875
000270  9908              LDR      r1,[sp,#0x20]         ;1875
000272  4411              ADD      r1,r1,r2              ;1875
000274  9108              STR      r1,[sp,#0x20]         ;1865
000276  990e              LDR      r1,[sp,#0x38]         ;1865
000278  4281              CMP      r1,r0                 ;1865
00027a  dcca              BGT      |L276.530|
                  |L276.636|
00027c  f89d0019          LDRB     r0,[sp,#0x19]         ;1865
000280  b310              CBZ      r0,|L276.712|
000282  991e              LDR      r1,[sp,#0x78]         ;1865
000284  9809              LDR      r0,[sp,#0x24]         ;1865
000286  4408              ADD      r0,r0,r1              ;1865
000288  9009              STR      r0,[sp,#0x24]         ;1865
00028a  9925              LDR      r1,[sp,#0x94]         ;1865
00028c  980b              LDR      r0,[sp,#0x2c]         ;1865
00028e  4408              ADD      r0,r0,r1              ;1865
000290  900b              STR      r0,[sp,#0x2c]         ;1865
000292  9918              LDR      r1,[sp,#0x60]         ;1865
000294  9807              LDR      r0,[sp,#0x1c]         ;1865
000296  4408              ADD      r0,r0,r1              ;1865
000298  9007              STR      r0,[sp,#0x1c]         ;1865
                  |L276.666|
00029a  980d              LDR      r0,[sp,#0x34]         ;1860
00029c  1c5b              ADDS     r3,r3,#1              ;1860
00029e  4298              CMP      r0,r3                 ;1860
0002a0  dca4              BGT      |L276.492|
                  |L276.674|
0002a2  2000              MOVS     r0,#0                 ;1882
0002a4  e75e              B        |L276.356|
                  |L276.678|
0002a6  f89d0080          LDRB     r0,[sp,#0x80]         ;1882
0002aa  2800              CMP      r0,#0                 ;1882
0002ac  bf19              ITTEE    NE                    ;1882
0002ae  981d              LDRNE    r0,[sp,#0x74]         ;1882
0002b0  9009              STRNE    r0,[sp,#0x24]         ;1882
0002b2  981a              LDREQ    r0,[sp,#0x68]         ;1882
0002b4  900a              STREQ    r0,[sp,#0x28]         ;1882
0002b6  f89d009c          LDRB     r0,[sp,#0x9c]         ;1882
0002ba  2800              CMP      r0,#0                 ;1882
0002bc  bf19              ITTEE    NE                    ;1882
0002be  9824              LDRNE    r0,[sp,#0x90]         ;1882
0002c0  900b              STRNE    r0,[sp,#0x2c]         ;1882
0002c2  9821              LDREQ    r0,[sp,#0x84]         ;1882
0002c4  900c              STREQ    r0,[sp,#0x30]         ;1882
0002c6  e7a0              B        |L276.522|
                  |L276.712|
0002c8  9918              LDR      r1,[sp,#0x60]         ;1882
0002ca  9807              LDR      r0,[sp,#0x1c]         ;1882
0002cc  4408              ADD      r0,r0,r1              ;1882
0002ce  9007              STR      r0,[sp,#0x1c]         ;1882
0002d0  f89d0080          LDRB     r0,[sp,#0x80]         ;1882
0002d4  2800              CMP      r0,#0                 ;1882
0002d6  bf19              ITTEE    NE                    ;1882
0002d8  991b              LDRNE    r1,[sp,#0x6c]         ;1882
0002da  980a              LDRNE    r0,[sp,#0x28]         ;1882
0002dc  991e              LDREQ    r1,[sp,#0x78]         ;1882
0002de  9809              LDREQ    r0,[sp,#0x24]         ;1882
0002e0  4408              ADD      r0,r0,r1              ;1882
0002e2  bf14              ITE      NE                    ;1882
0002e4  900a              STRNE    r0,[sp,#0x28]         ;1882
0002e6  9009              STREQ    r0,[sp,#0x24]         ;1882
0002e8  f89d009c          LDRB     r0,[sp,#0x9c]         ;1882
0002ec  2800              CMP      r0,#0                 ;1882
0002ee  bf19              ITTEE    NE                    ;1882
0002f0  9922              LDRNE    r1,[sp,#0x88]         ;1882
0002f2  980c              LDRNE    r0,[sp,#0x30]         ;1882
0002f4  9925              LDREQ    r1,[sp,#0x94]         ;1882
0002f6  980b              LDREQ    r0,[sp,#0x2c]         ;1882
0002f8  4408              ADD      r0,r0,r1              ;1882
0002fa  bf14              ITE      NE                    ;1882
0002fc  900c              STRNE    r0,[sp,#0x30]         ;1882
0002fe  900b              STREQ    r0,[sp,#0x2c]         ;1882
000300  e7cb              B        |L276.666|
;;;1884   
                          ENDP

000302  0000              DCW      0x0000
                  |L276.772|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L276.776|
000308  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
00030c  6f726574
000310  6563685c
000314  636f6d6d
000318  6f6e5c69
00031c  6e636c75
000320  64655c61
000324  6e6b692f
000328  636f6d6d
00032c  6f6e2f72
000330  6f626f74
000334  2f6d6174
000338  726978  
00033b  2e6800            DCB      ".h",0
00033e  00                DCB      0
00033f  00                DCB      0
                  |L276.832|
000340  496e7661          DCB      "Invalid objects",0
000344  6c696420
000348  6f626a65
00034c  63747300
                  |L276.848|
000350  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
000354  69783a3a
000358  456c656d
00035c  656e7477
000360  6973653a
000364  3a417070
000368  6c794f70
00036c  65726174
000370  696f6e00
                  |L276.884|
000374  4c696d69          DCB      "Limits is not valid",0
000378  74732069
00037c  73206e6f
000380  74207661
000384  6c696400

                          AREA ||area_number.277||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.277||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L283.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4850              LDR      r0,|L283.384|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a350              ADR      r3,|L283.388|
000044  a25d              ADR      r2,|L283.444|
000046  a161              ADR      r1,|L283.460|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L283.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  2134              MOVS     r1,#0x34
000064  4348              MULS     r0,r1,r0
000066  300f              ADDS     r0,r0,#0xf
000068  f020050f          BIC      r5,r0,#0xf
00006c  a804              ADD      r0,sp,#0x10
00006e  e9cd0902          STRD     r0,r9,[sp,#8]
000072  2d00              CMP      r5,#0
000074  dc0a              BGT      |L283.140|
000076  f240310b          MOV      r1,#0x30b
00007a  4859              LDR      r0,|L283.480|
00007c  e9cd0100          STRD     r0,r1,[sp,#0]
000080  a340              ADR      r3,|L283.388|
000082  a24e              ADR      r2,|L283.444|
000084  a157              ADR      r1,|L283.484|
000086  2005              MOVS     r0,#5
000088  f7fffffe          BL       _Anki_Log
                  |L283.140|
00008c  4638              MOV      r0,r7
00008e  2f01              CMP      r7,#1
000090  bfd8              IT       LE
000092  2001              MOVLE    r0,#1
000094  60a5              STR      r5,[r4,#8]
000096  4345              MULS     r5,r0,r5
000098  a803              ADD      r0,sp,#0xc
00009a  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009e  4602              MOV      r2,r0
0000a0  4629              MOV      r1,r5
0000a2  4640              MOV      r0,r8
0000a4  9b02              LDR      r3,[sp,#8]
0000a6  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000aa  f8cd900c          STR      r9,[sp,#0xc]
0000ae  f8dd8010          LDR      r8,[sp,#0x10]
0000b2  f8df915c          LDR      r9,|L283.528|
0000b6  0005              MOVS     r5,r0
0000b8  d00e              BEQ      |L283.216|
0000ba  f1b80f10          CMP      r8,#0x10
0000be  d21e              BCS      |L283.254|
0000c0  f2403023          MOV      r0,#0x323
0000c4  e9cd9000          STRD     r9,r0,[sp,#0]
0000c8  a32e              ADR      r3,|L283.388|
0000ca  a252              ADR      r2,|L283.532|
0000cc  a156              ADR      r1,|L283.552|
0000ce  2005              MOVS     r0,#5
0000d0  f7fffffe          BL       _Anki_Log
0000d4  f000b850          B.W      |L283.376|
                  |L283.216|
0000d8  f240301e          MOV      r0,#0x31e
0000dc  e9cd9000          STRD     r9,r0,[sp,#0]
0000e0  a328              ADR      r3,|L283.388|
0000e2  a259              ADR      r2,|L283.584|
0000e4  a15f              ADR      r1,|L283.612|
0000e6  2005              MOVS     r0,#5
0000e8  f7fffffe          BL       _Anki_Log
0000ec  f8c4b000          STR      r11,[r4,#0]
0000f0  f8c4b004          STR      r11,[r4,#4]
0000f4  f8c4b008          STR      r11,[r4,#8]
0000f8  f8c4a010          STR      r10,[r4,#0x10]
0000fc  e03c              B        |L283.376|
                  |L283.254|
0000fe  a803              ADD      r0,sp,#0xc
000100  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000104  2800              CMP      r0,#0
000106  d00a              BEQ      |L283.286|
000108  f2403026          MOV      r0,#0x326
00010c  e9cd9000          STRD     r9,r0,[sp,#0]
000110  a31c              ADR      r3,|L283.388|
000112  a25a              ADR      r2,|L283.636|
000114  a144              ADR      r1,|L283.552|
000116  2005              MOVS     r0,#5
000118  f7fffffe          BL       _Anki_Log
00011c  e02c              B        |L283.376|
                  |L283.286|
00011e  9903              LDR      r1,[sp,#0xc]
000120  e9c41503          STRD     r1,r5,[r4,#0xc]
000124  f105000f          ADD      r0,r5,#0xf
000128  f020000f          BIC      r0,r0,#0xf
00012c  e9c47600          STRD     r7,r6,[r4,#0]
000130  1b40              SUBS     r0,r0,r5
000132  2e01              CMP      r6,#1
000134  bfd8              IT       LE
000136  2601              MOVLE    r6,#1
000138  2134              MOVS     r1,#0x34
00013a  4371              MULS     r1,r6,r1
00013c  310f              ADDS     r1,r1,#0xf
00013e  f021010f          BIC      r1,r1,#0xf
000142  fb010107          MLA      r1,r1,r7,r0
000146  4541              CMP      r1,r8
000148  bfdc              ITT      LE
00014a  1829              ADDLE    r1,r5,r0
00014c  6121              STRLE    r1,[r4,#0x10]
00014e  dd13              BLE      |L283.376|
000150  f2403035          MOV      r0,#0x335
000154  f8cd9000          STR      r9,[sp,#0]
000158  e9cd0101          STRD     r0,r1,[sp,#4]
00015c  a309              ADR      r3,|L283.388|
00015e  a251              ADR      r2,|L283.676|
000160  a140              ADR      r1,|L283.612|
000162  2005              MOVS     r0,#5
000164  f7fffffe          BL       _Anki_Log
000168  f8c4b000          STR      r11,[r4,#0]
00016c  f8c4b004          STR      r11,[r4,#4]
000170  f8c4b008          STR      r11,[r4,#8]
000174  f8c4a010          STR      r10,[r4,#0x10]
                  |L283.376|
000178  b005              ADD      sp,sp,#0x14
00017a  4620              MOV      r0,r4
00017c  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L283.384|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L283.388|
000184  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000188  6f726574
00018c  6563685c
000190  636f6d6d
000194  6f6e5c69
000198  6e636c75
00019c  64655c61
0001a0  6e6b692f
0001a4  636f6d6d
0001a8  6f6e2f72
0001ac  6f626f74
0001b0  2f617272
0001b4  617932  
0001b7  642e6800          DCB      "d.h",0
0001bb  00                DCB      0
                  |L283.444|
0001bc  496e7661          DCB      "Invalid size",0
0001c0  6c696420
0001c4  73697a65
0001c8  00      
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L283.460|
0001cc  41727261          DCB      "Array<Type>::Array",0
0001d0  793c5479
0001d4  70653e3a
0001d8  3a417272
0001dc  617900  
0001df  00                DCB      0
                  |L283.480|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L283.484|
0001e4  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e8  793c5479
0001ec  70653e3a
0001f0  3a416c6c
0001f4  6f636174
0001f8  65427566
0001fc  66657246
000200  726f6d4d
000204  656d6f72
000208  79537461
00020c  636b00  
00020f  00                DCB      0
                  |L283.528|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L283.532|
000214  4e656761          DCB      "Negative dimension",0
000218  74697665
00021c  2064696d
000220  656e7369
000224  6f6e00  
000227  00                DCB      0
                  |L283.552|
000228  41727261          DCB      "Array<Type>::InitializeBuffer",0
00022c  793c5479
000230  70653e3a
000234  3a496e69
000238  7469616c
00023c  697a6542
000240  75666665
000244  7200    
000246  00                DCB      0
000247  00                DCB      0
                  |L283.584|
000248  696e7075          DCB      "input data buffer is NULL",0
00024c  74206461
000250  74612062
000254  75666665
000258  72206973
00025c  204e554c
000260  4c00    
000262  00                DCB      0
000263  00                DCB      0
                  |L283.612|
000264  416e6b69          DCB      "Anki.Array2d.initialize",0
000268  2e417272
00026c  61793264
000270  2e696e69
000274  7469616c
000278  697a6500
                  |L283.636|
00027c  46696c6c          DCB      "Fill patterns not supported for Array",0
000280  20706174
000284  7465726e
000288  73206e6f
00028c  74207375
000290  70706f72
000294  74656420
000298  666f7220
00029c  41727261
0002a0  7900    
0002a2  00                DCB      0
0002a3  00                DCB      0
                  |L283.676|
0002a4  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a8  74206461
0002ac  74612062
0002b0  75666665
0002b4  72206973
0002b8  206e6f74
0002bc  206c6172
0002c0  67652065
0002c4  6e6f7567
0002c8  682e2025
0002cc  64206279
0002d0  74657320
0002d4  69732072
0002d8  657175  
0002db  69726564          DCB      "ired.",0
0002df  2e00    
0002e1  00                DCB      0
0002e2  00                DCB      0
0002e3  00                DCB      0

                          AREA ||area_number.284||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.284||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  79536c69          DCB      0x79,0x53,0x6c,0x69
000018  63654c69          DCB      0x63,0x65,0x4c,0x69
00001c  6d697473          DCB      0x6d,0x69,0x74,0x73
000020  5f696e32          DCB      0x5f,0x69,0x6e,0x32
000024  5f6f7574          DCB      0x5f,0x6f,0x75,0x74
000028  313c5479          DCB      0x31,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a417272          DCB      0x3a,0x41,0x72,0x72
000034  6179536c          DCB      0x61,0x79,0x53,0x6c
000038  6963654c          DCB      0x69,0x63,0x65,0x4c
00003c  696d6974          DCB      0x69,0x6d,0x69,0x74
000040  735f696e          DCB      0x73,0x5f,0x69,0x6e
000044  325f6f75          DCB      0x32,0x5f,0x6f,0x75
000048  74312863          DCB      0x74,0x31,0x28,0x63
00004c  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000050  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000054  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000058  6d626564          DCB      0x6d,0x62,0x65,0x64
00005c  6465643a          DCB      0x64,0x65,0x64,0x3a
000060  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
000064  65617253          DCB      0x65,0x61,0x72,0x53
000068  65717565          DCB      0x65,0x71,0x75,0x65
00006c  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000070  54797065          DCB      0x54,0x79,0x70,0x65
000074  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000078  20636f6e          DCB      0x20,0x63,0x6f,0x6e
00007c  73742041          DCB      0x73,0x74,0x20,0x41
000080  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000084  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000088  65646465          DCB      0x65,0x64,0x64,0x65
00008c  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
000090  696e6561          DCB      0x69,0x6e,0x65,0x61
000094  72536571          DCB      0x72,0x53,0x65,0x71
000098  75656e63          DCB      0x75,0x65,0x6e,0x63
00009c  653c5479          DCB      0x65,0x3c,0x54,0x79
0000a0  70653e20          DCB      0x70,0x65,0x3e,0x20
0000a4  262c2062          DCB      0x26,0x2c,0x20,0x62
0000a8  6f6f6c2c          DCB      0x6f,0x6f,0x6c,0x2c
0000ac  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0000b0  73742041          DCB      0x73,0x74,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
0000c4  696e6561          DCB      0x69,0x6e,0x65,0x61
0000c8  72536571          DCB      0x72,0x53,0x65,0x71
0000cc  75656e63          DCB      0x75,0x65,0x6e,0x63
0000d0  653c5479          DCB      0x65,0x3c,0x54,0x79
0000d4  70653e20          DCB      0x70,0x65,0x3e,0x20
0000d8  262c2063          DCB      0x26,0x2c,0x20,0x63
0000dc  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
0000e0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000e4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000e8  6d626564          DCB      0x6d,0x62,0x65,0x64
0000ec  6465643a          DCB      0x64,0x65,0x64,0x3a
0000f0  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
0000f4  65617253          DCB      0x65,0x61,0x72,0x53
0000f8  65717565          DCB      0x65,0x71,0x75,0x65
0000fc  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000100  54797065          DCB      0x54,0x79,0x70,0x65
000104  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000108  20626f6f          DCB      0x20,0x62,0x6f,0x6f
00010c  6c2c2063          DCB      0x6c,0x2c,0x20,0x63
000110  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000114  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000118  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00011c  6d626564          DCB      0x6d,0x62,0x65,0x64
000120  6465643a          DCB      0x64,0x65,0x64,0x3a
000124  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
000128  65617253          DCB      0x65,0x61,0x72,0x53
00012c  65717565          DCB      0x65,0x71,0x75,0x65
000130  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000134  54797065          DCB      0x54,0x79,0x70,0x65
000138  3e20262c          DCB      0x3e,0x20,0x26,0x2c
00013c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000140  73742041          DCB      0x73,0x74,0x20,0x41
000144  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000148  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00014c  65646465          DCB      0x65,0x64,0x64,0x65
000150  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
000154  696e6561          DCB      0x69,0x6e,0x65,0x61
000158  72536571          DCB      0x72,0x53,0x65,0x71
00015c  75656e63          DCB      0x75,0x65,0x6e,0x63
000160  653c5479          DCB      0x65,0x3c,0x54,0x79
000164  70653e20          DCB      0x70,0x65,0x3e,0x20
000168  2629205b          DCB      0x26,0x29,0x20,0x5b
00016c  77697468          DCB      0x77,0x69,0x74,0x68
000170  20547970          DCB      0x20,0x54,0x79,0x70
000174  65203d20          DCB      0x65,0x20,0x3d,0x20
000178  7369676e          DCB      0x73,0x69,0x67,0x6e
00017c  65642069          DCB      0x65,0x64,0x20,0x69
000180  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetZero()::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  5365745a          DCB      0x53,0x65,0x74,0x5a
00002c  65726f28          DCB      0x65,0x72,0x6f,0x28
000030  29205b77          DCB      0x29,0x20,0x5b,0x77
000034  69746820          DCB      0x69,0x74,0x68,0x20
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  203d2066          DCB      0x20,0x3d,0x20,0x66
000040  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000044  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000054  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642073          DCB      0x65,0x64,0x20,0x73
000090  686f7274          DCB      0x68,0x6f,0x72,0x74
000094  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItE7SetZeroEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItE7SetZeroEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::SetZero()::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  5365745a          DCB      0x53,0x65,0x74,0x5a
00002c  65726f28          DCB      0x65,0x72,0x6f,0x28
000030  29205b77          DCB      0x29,0x20,0x5b,0x77
000034  69746820          DCB      0x69,0x74,0x68,0x20
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  203d2075          DCB      0x20,0x3d,0x20,0x75
000040  6e736967          DCB      0x6e,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  73686f72          DCB      0x73,0x68,0x6f,0x72
00004c  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  2073686f          DCB      0x20,0x73,0x68,0x6f
0000c4  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayItE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  73686f72          DCB      0x73,0x68,0x6f,0x72
0000a0  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded8MeshgridIfE10EvaluateX1EbNS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded8MeshgridIfE10EvaluateX1EbNS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded8MeshgridIfE10EvaluateX1EbNS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Meshgrid<float>::EvaluateX1(bool, Anki::Embedded::ArraySlice<float>) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6573          DCB      0x3a,0x4d,0x65,0x73
000020  68677269          DCB      0x68,0x67,0x72,0x69
000024  643c5479          DCB      0x64,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a457661          DCB      0x3a,0x45,0x76,0x61
000030  6c756174          DCB      0x6c,0x75,0x61,0x74
000034  65583128          DCB      0x65,0x58,0x31,0x28
000038  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
00003c  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000040  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000044  456d6265          DCB      0x45,0x6d,0x62,0x65
000048  64646564          DCB      0x64,0x64,0x65,0x64
00004c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000050  72617953          DCB      0x72,0x61,0x79,0x53
000054  6c696365          DCB      0x6c,0x69,0x63,0x65
000058  3c547970          DCB      0x3c,0x54,0x79,0x70
00005c  653e2920          DCB      0x65,0x3e,0x29,0x20
000060  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000064  74205b77          DCB      0x74,0x20,0x5b,0x77
000068  69746820          DCB      0x69,0x74,0x68,0x20
00006c  54797065          DCB      0x54,0x79,0x70,0x65
000070  203d2066          DCB      0x20,0x3d,0x20,0x66
000074  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000078  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded8MeshgridIfE10EvaluateY1EbNS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded8MeshgridIfE10EvaluateY1EbNS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded8MeshgridIfE10EvaluateY1EbNS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Meshgrid<float>::EvaluateY1(bool, Anki::Embedded::ArraySlice<float>) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6573          DCB      0x3a,0x4d,0x65,0x73
000020  68677269          DCB      0x68,0x67,0x72,0x69
000024  643c5479          DCB      0x64,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a457661          DCB      0x3a,0x45,0x76,0x61
000030  6c756174          DCB      0x6c,0x75,0x61,0x74
000034  65593128          DCB      0x65,0x59,0x31,0x28
000038  626f6f6c          DCB      0x62,0x6f,0x6f,0x6c
00003c  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000040  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000044  456d6265          DCB      0x45,0x6d,0x62,0x65
000048  64646564          DCB      0x64,0x64,0x65,0x64
00004c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000050  72617953          DCB      0x72,0x61,0x79,0x53
000054  6c696365          DCB      0x6c,0x69,0x63,0x65
000058  3c547970          DCB      0x3c,0x54,0x79,0x70
00005c  653e2920          DCB      0x65,0x3e,0x29,0x20
000060  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000064  74205b77          DCB      0x74,0x20,0x5b,0x77
000068  69746820          DCB      0x69,0x74,0x68,0x20
00006c  54797065          DCB      0x54,0x79,0x70,0x65
000070  203d2066          DCB      0x20,0x3d,0x20,0x66
000074  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000078  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5465          DCB      0x3a,0x3a,0x54,0x65
000098  6d706c61          DCB      0x6d,0x70,0x6c,0x61
00009c  74655472          DCB      0x74,0x65,0x54,0x72
0000a0  61636b65          DCB      0x61,0x63,0x6b,0x65
0000a4  723a3a4c          DCB      0x72,0x3a,0x3a,0x4c
0000a8  75636173          DCB      0x75,0x63,0x61,0x73
0000ac  4b616e61          DCB      0x4b,0x61,0x6e,0x61
0000b0  64655472          DCB      0x64,0x65,0x54,0x72
0000b4  61636b65          DCB      0x61,0x63,0x6b,0x65
0000b8  725f5361          DCB      0x72,0x5f,0x53,0x61
0000bc  6d706c65          DCB      0x6d,0x70,0x6c,0x65
0000c0  6450726f          DCB      0x64,0x50,0x72,0x6f
0000c4  6a656374          DCB      0x6a,0x65,0x63,0x74
0000c8  6976653a          DCB      0x69,0x76,0x65,0x3a
0000cc  3a54656d          DCB      0x3a,0x54,0x65,0x6d
0000d0  706c6174          DCB      0x70,0x6c,0x61,0x74
0000d4  6553616d          DCB      0x65,0x53,0x61,0x6d
0000d8  706c655d          DCB      0x70,0x6c,0x65,0x5d
0000dc  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  54656d70          DCB      0x54,0x65,0x6d,0x70
0000cc  6c617465          DCB      0x6c,0x61,0x74,0x65
0000d0  54726163          DCB      0x54,0x72,0x61,0x63
0000d4  6b65723a          DCB      0x6b,0x65,0x72,0x3a
0000d8  3a4c7563          DCB      0x3a,0x4c,0x75,0x63
0000dc  61734b61          DCB      0x61,0x73,0x4b,0x61
0000e0  6e616465          DCB      0x6e,0x61,0x64,0x65
0000e4  54726163          DCB      0x54,0x72,0x61,0x63
0000e8  6b65725f          DCB      0x6b,0x65,0x72,0x5f
0000ec  53616d70          DCB      0x53,0x61,0x6d,0x70
0000f0  6c656450          DCB      0x6c,0x65,0x64,0x50
0000f4  726f6a65          DCB      0x72,0x6f,0x6a,0x65
0000f8  63746976          DCB      0x63,0x74,0x69,0x76
0000fc  653a3a54          DCB      0x65,0x3a,0x3a,0x54
000100  656d706c          DCB      0x65,0x6d,0x70,0x6c
000104  61746553          DCB      0x61,0x74,0x65,0x53
000108  616d706c          DCB      0x61,0x6d,0x70,0x6c
00010c  655d00            DCB      0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a54          DCB      0x64,0x3a,0x3a,0x54
0000a4  656d706c          DCB      0x65,0x6d,0x70,0x6c
0000a8  61746554          DCB      0x61,0x74,0x65,0x54
0000ac  7261636b          DCB      0x72,0x61,0x63,0x6b
0000b0  65723a3a          DCB      0x65,0x72,0x3a,0x3a
0000b4  4c756361          DCB      0x4c,0x75,0x63,0x61
0000b8  734b616e          DCB      0x73,0x4b,0x61,0x6e
0000bc  61646554          DCB      0x61,0x64,0x65,0x54
0000c0  7261636b          DCB      0x72,0x61,0x63,0x6b
0000c4  65725f53          DCB      0x65,0x72,0x5f,0x53
0000c8  616d706c          DCB      0x61,0x6d,0x70,0x6c
0000cc  65645072          DCB      0x65,0x64,0x50,0x72
0000d0  6f6a6563          DCB      0x6f,0x6a,0x65,0x63
0000d4  74697665          DCB      0x74,0x69,0x76,0x65
0000d8  3a3a5465          DCB      0x3a,0x3a,0x54,0x65
0000dc  6d706c61          DCB      0x6d,0x70,0x6c,0x61
0000e0  74655361          DCB      0x74,0x65,0x53,0x61
0000e4  6d706c65          DCB      0x6d,0x70,0x6c,0x65
0000e8  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5175          DCB      0x3a,0x3a,0x51,0x75
000098  61647269          DCB      0x61,0x64,0x72,0x69
00009c  6c617465          DCB      0x6c,0x61,0x74,0x65
0000a0  72616c3c          DCB      0x72,0x61,0x6c,0x3c
0000a4  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a8  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  51756164          DCB      0x51,0x75,0x61,0x64
0000cc  72696c61          DCB      0x72,0x69,0x6c,0x61
0000d0  74657261          DCB      0x74,0x65,0x72,0x61
0000d4  6c3c666c          DCB      0x6c,0x3c,0x66,0x6c
0000d8  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0000dc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a51          DCB      0x64,0x3a,0x3a,0x51
0000a4  75616472          DCB      0x75,0x61,0x64,0x72
0000a8  696c6174          DCB      0x69,0x6c,0x61,0x74
0000ac  6572616c          DCB      0x65,0x72,0x61,0x6c
0000b0  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000b4  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000b8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000098  7261793c          DCB      0x72,0x61,0x79,0x3c
00009c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a0  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  41727261          DCB      0x41,0x72,0x72,0x61
0000cc  793c666c          DCB      0x79,0x3c,0x66,0x6c
0000d0  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0000d4  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000a4  72726179          DCB      0x72,0x72,0x61,0x79
0000a8  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000ac  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000b0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
000098  73686772          DCB      0x73,0x68,0x67,0x72
00009c  69643c66          DCB      0x69,0x64,0x3c,0x66
0000a0  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000a4  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  4d657368          DCB      0x4d,0x65,0x73,0x68
0000cc  67726964          DCB      0x67,0x72,0x69,0x64
0000d0  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000d4  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000d8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
0000a4  65736867          DCB      0x65,0x73,0x68,0x67
0000a8  7269643c          DCB      0x72,0x69,0x64,0x3c
0000ac  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000b0  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
000098  7865644c          DCB      0x78,0x65,0x64,0x4c
00009c  656e6774          DCB      0x65,0x6e,0x67,0x74
0000a0  684c6973          DCB      0x68,0x4c,0x69,0x73
0000a4  743c416e          DCB      0x74,0x3c,0x41,0x6e
0000a8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000ac  456d6265          DCB      0x45,0x6d,0x62,0x65
0000b0  64646564          DCB      0x64,0x64,0x65,0x64
0000b4  3a3a5465          DCB      0x3a,0x3a,0x54,0x65
0000b8  6d706c61          DCB      0x6d,0x70,0x6c,0x61
0000bc  74655472          DCB      0x74,0x65,0x54,0x72
0000c0  61636b65          DCB      0x61,0x63,0x6b,0x65
0000c4  723a3a4c          DCB      0x72,0x3a,0x3a,0x4c
0000c8  75636173          DCB      0x75,0x63,0x61,0x73
0000cc  4b616e61          DCB      0x4b,0x61,0x6e,0x61
0000d0  64655472          DCB      0x64,0x65,0x54,0x72
0000d4  61636b65          DCB      0x61,0x63,0x6b,0x65
0000d8  725f5361          DCB      0x72,0x5f,0x53,0x61
0000dc  6d706c65          DCB      0x6d,0x70,0x6c,0x65
0000e0  6450726f          DCB      0x64,0x50,0x72,0x6f
0000e4  6a656374          DCB      0x6a,0x65,0x63,0x74
0000e8  6976653a          DCB      0x69,0x76,0x65,0x3a
0000ec  3a54656d          DCB      0x3a,0x54,0x65,0x6d
0000f0  706c6174          DCB      0x70,0x6c,0x61,0x74
0000f4  6553616d          DCB      0x65,0x53,0x61,0x6d
0000f8  706c653e          DCB      0x70,0x6c,0x65,0x3e
0000fc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  46697865          DCB      0x46,0x69,0x78,0x65
0000cc  644c656e          DCB      0x64,0x4c,0x65,0x6e
0000d0  6774684c          DCB      0x67,0x74,0x68,0x4c
0000d4  6973743c          DCB      0x69,0x73,0x74,0x3c
0000d8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000dc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000e0  62656464          DCB      0x62,0x65,0x64,0x64
0000e4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000e8  54656d70          DCB      0x54,0x65,0x6d,0x70
0000ec  6c617465          DCB      0x6c,0x61,0x74,0x65
0000f0  54726163          DCB      0x54,0x72,0x61,0x63
0000f4  6b65723a          DCB      0x6b,0x65,0x72,0x3a
0000f8  3a4c7563          DCB      0x3a,0x4c,0x75,0x63
0000fc  61734b61          DCB      0x61,0x73,0x4b,0x61
000100  6e616465          DCB      0x6e,0x61,0x64,0x65
000104  54726163          DCB      0x54,0x72,0x61,0x63
000108  6b65725f          DCB      0x6b,0x65,0x72,0x5f
00010c  53616d70          DCB      0x53,0x61,0x6d,0x70
000110  6c656450          DCB      0x6c,0x65,0x64,0x50
000114  726f6a65          DCB      0x72,0x6f,0x6a,0x65
000118  63746976          DCB      0x63,0x74,0x69,0x76
00011c  653a3a54          DCB      0x65,0x3a,0x3a,0x54
000120  656d706c          DCB      0x65,0x6d,0x70,0x6c
000124  61746553          DCB      0x61,0x74,0x65,0x53
000128  616d706c          DCB      0x61,0x6d,0x70,0x6c
00012c  653e5d00          DCB      0x65,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_15FixedLengthListINS0_15TemplateTracker36LucasKanadeTracker_SampledProjective14TemplateSampleEEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::FixedLengthList<Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledProjective::TemplateSample>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a46          DCB      0x64,0x3a,0x3a,0x46
0000a4  69786564          DCB      0x69,0x78,0x65,0x64
0000a8  4c656e67          DCB      0x4c,0x65,0x6e,0x67
0000ac  74684c69          DCB      0x74,0x68,0x4c,0x69
0000b0  73743c41          DCB      0x73,0x74,0x3c,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a54          DCB      0x64,0x3a,0x3a,0x54
0000c4  656d706c          DCB      0x65,0x6d,0x70,0x6c
0000c8  61746554          DCB      0x61,0x74,0x65,0x54
0000cc  7261636b          DCB      0x72,0x61,0x63,0x6b
0000d0  65723a3a          DCB      0x65,0x72,0x3a,0x3a
0000d4  4c756361          DCB      0x4c,0x75,0x63,0x61
0000d8  734b616e          DCB      0x73,0x4b,0x61,0x6e
0000dc  61646554          DCB      0x61,0x64,0x65,0x54
0000e0  7261636b          DCB      0x72,0x61,0x63,0x6b
0000e4  65725f53          DCB      0x65,0x72,0x5f,0x53
0000e8  616d706c          DCB      0x61,0x6d,0x70,0x6c
0000ec  65645072          DCB      0x65,0x64,0x50,0x72
0000f0  6f6a6563          DCB      0x6f,0x6a,0x65,0x63
0000f4  74697665          DCB      0x74,0x69,0x76,0x65
0000f8  3a3a5465          DCB      0x3a,0x3a,0x54,0x65
0000fc  6d706c61          DCB      0x6d,0x70,0x6c,0x61
000100  74655361          DCB      0x74,0x65,0x53,0x61
000104  6d706c65          DCB      0x6d,0x70,0x6c,0x65
000108  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000044  73742041          DCB      0x73,0x74,0x20,0x41
000048  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00004c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000050  65646465          DCB      0x65,0x64,0x64,0x65
000054  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000058  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00005c  41727261          DCB      0x41,0x72,0x72,0x61
000060  79536c69          DCB      0x79,0x53,0x6c,0x69
000064  63654578          DCB      0x63,0x65,0x45,0x78
000068  70726573          DCB      0x70,0x72,0x65,0x73
00006c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000070  3c547970          DCB      0x3c,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00007c  6e737420          DCB      0x6e,0x73,0x74,0x20
000080  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000084  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000088  62656464          DCB      0x62,0x65,0x64,0x64
00008c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000090  436f6e73          DCB      0x43,0x6f,0x6e,0x73
000094  74417272          DCB      0x74,0x41,0x72,0x72
000098  6179536c          DCB      0x61,0x79,0x53,0x6c
00009c  69636545          DCB      0x69,0x63,0x65,0x45
0000a0  78707265          DCB      0x78,0x70,0x72,0x65
0000a4  7373696f          DCB      0x73,0x73,0x69,0x6f
0000a8  6e3c5479          DCB      0x6e,0x3c,0x54,0x79
0000ac  70653e20          DCB      0x70,0x65,0x3e,0x20
0000b0  262c2041          DCB      0x26,0x2c,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000c4  72726179          DCB      0x72,0x72,0x61,0x79
0000c8  536c6963          DCB      0x53,0x6c,0x69,0x63
0000cc  653c4f75          DCB      0x65,0x3c,0x4f,0x75
0000d0  74547970          DCB      0x74,0x54,0x79,0x70
0000d4  653e2920          DCB      0x65,0x3e,0x29,0x20
0000d8  5b776974          DCB      0x5b,0x77,0x69,0x74
0000dc  6820496e          DCB      0x68,0x20,0x49,0x6e
0000e0  54797065          DCB      0x54,0x79,0x70,0x65
0000e4  203d2066          DCB      0x20,0x3d,0x20,0x66
0000e8  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000ec  2c204f70          DCB      0x2c,0x20,0x4f,0x70
0000f0  65726174          DCB      0x65,0x72,0x61,0x74
0000f4  6f72203d          DCB      0x6f,0x72,0x20,0x3d
0000f8  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000fc  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000100  6d626564          DCB      0x6d,0x62,0x65,0x64
000104  6465643a          DCB      0x64,0x65,0x64,0x3a
000108  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
00010c  7269783a          DCB      0x72,0x69,0x78,0x3a
000110  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000114  6d656e74          DCB      0x6d,0x65,0x6e,0x74
000118  77697365          DCB      0x77,0x69,0x73,0x65
00011c  3a3a446f          DCB      0x3a,0x3a,0x44,0x6f
000120  744d756c          DCB      0x74,0x4d,0x75,0x6c
000124  7469706c          DCB      0x74,0x69,0x70,0x6c
000128  793c666c          DCB      0x79,0x3c,0x66,0x6c
00012c  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000130  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000134  61742c20          DCB      0x61,0x74,0x2c,0x20
000138  666c6f61          DCB      0x66,0x6c,0x6f,0x61
00013c  743e2c20          DCB      0x74,0x3e,0x2c,0x20
000140  4f757454          DCB      0x4f,0x75,0x74,0x54
000144  79706520          DCB      0x79,0x70,0x65,0x20
000148  3d20666c          DCB      0x3d,0x20,0x66,0x6c
00014c  6f61745d          DCB      0x6f,0x61,0x74,0x5d
000150  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Add<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000044  73742041          DCB      0x73,0x74,0x20,0x41
000048  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00004c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000050  65646465          DCB      0x65,0x64,0x64,0x65
000054  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000058  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00005c  41727261          DCB      0x41,0x72,0x72,0x61
000060  79536c69          DCB      0x79,0x53,0x6c,0x69
000064  63654578          DCB      0x63,0x65,0x45,0x78
000068  70726573          DCB      0x70,0x72,0x65,0x73
00006c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000070  3c547970          DCB      0x3c,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00007c  6e737420          DCB      0x6e,0x73,0x74,0x20
000080  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000084  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000088  62656464          DCB      0x62,0x65,0x64,0x64
00008c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000090  436f6e73          DCB      0x43,0x6f,0x6e,0x73
000094  74417272          DCB      0x74,0x41,0x72,0x72
000098  6179536c          DCB      0x61,0x79,0x53,0x6c
00009c  69636545          DCB      0x69,0x63,0x65,0x45
0000a0  78707265          DCB      0x78,0x70,0x72,0x65
0000a4  7373696f          DCB      0x73,0x73,0x69,0x6f
0000a8  6e3c5479          DCB      0x6e,0x3c,0x54,0x79
0000ac  70653e20          DCB      0x70,0x65,0x3e,0x20
0000b0  262c2041          DCB      0x26,0x2c,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000c4  72726179          DCB      0x72,0x72,0x61,0x79
0000c8  536c6963          DCB      0x53,0x6c,0x69,0x63
0000cc  653c4f75          DCB      0x65,0x3c,0x4f,0x75
0000d0  74547970          DCB      0x74,0x54,0x79,0x70
0000d4  653e2920          DCB      0x65,0x3e,0x29,0x20
0000d8  5b776974          DCB      0x5b,0x77,0x69,0x74
0000dc  6820496e          DCB      0x68,0x20,0x49,0x6e
0000e0  54797065          DCB      0x54,0x79,0x70,0x65
0000e4  203d2066          DCB      0x20,0x3d,0x20,0x66
0000e8  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000ec  2c204f70          DCB      0x2c,0x20,0x4f,0x70
0000f0  65726174          DCB      0x65,0x72,0x61,0x74
0000f4  6f72203d          DCB      0x6f,0x72,0x20,0x3d
0000f8  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000fc  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000100  6d626564          DCB      0x6d,0x62,0x65,0x64
000104  6465643a          DCB      0x64,0x65,0x64,0x3a
000108  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
00010c  7269783a          DCB      0x72,0x69,0x78,0x3a
000110  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000114  6d656e74          DCB      0x6d,0x65,0x6e,0x74
000118  77697365          DCB      0x77,0x69,0x73,0x65
00011c  3a3a4164          DCB      0x3a,0x3a,0x41,0x64
000120  643c666c          DCB      0x64,0x3c,0x66,0x6c
000124  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000128  20666c6f          DCB      0x20,0x66,0x6c,0x6f
00012c  61742c20          DCB      0x61,0x74,0x2c,0x20
000130  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000134  743e2c20          DCB      0x74,0x3e,0x2c,0x20
000138  4f757454          DCB      0x4f,0x75,0x74,0x54
00013c  79706520          DCB      0x79,0x70,0x65,0x20
000140  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000144  6f61745d          DCB      0x6f,0x61,0x74,0x5d
000148  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a4d616b          DCB      0x3a,0x4d,0x61,0x6b
000028  6553796d          DCB      0x65,0x53,0x79,0x6d
00002c  6d657472          DCB      0x6d,0x65,0x74,0x72
000030  69632854          DCB      0x69,0x63,0x28,0x54
000034  79706520          DCB      0x79,0x70,0x65,0x20
000038  262c2062          DCB      0x26,0x2c,0x20,0x62
00003c  6f6f6c29          DCB      0x6f,0x6f,0x6c,0x29
000040  205b7769          DCB      0x20,0x5b,0x77,0x69
000044  74682054          DCB      0x74,0x68,0x20,0x54
000048  79706520          DCB      0x79,0x70,0x65,0x20
00004c  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000050  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000054  456d6265          DCB      0x45,0x6d,0x62,0x65
000058  64646564          DCB      0x64,0x64,0x65,0x64
00005c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000060  7261793c          DCB      0x72,0x61,0x79,0x3c
000064  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000068  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a536f6c          DCB      0x3a,0x53,0x6f,0x6c
000028  76654c65          DCB      0x76,0x65,0x4c,0x65
00002c  61737453          DCB      0x61,0x73,0x74,0x53
000030  71756172          DCB      0x71,0x75,0x61,0x72
000034  65735769          DCB      0x65,0x73,0x57,0x69
000038  74684368          DCB      0x74,0x68,0x43,0x68
00003c  6f6c6573          DCB      0x6f,0x6c,0x65,0x73
000040  6b792841          DCB      0x6b,0x79,0x28,0x41
000044  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000048  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00004c  65646465          DCB      0x65,0x64,0x64,0x65
000050  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000054  72726179          DCB      0x72,0x72,0x61,0x79
000058  3c547970          DCB      0x3c,0x54,0x79,0x70
00005c  653e2026          DCB      0x65,0x3e,0x20,0x26
000060  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000064  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000068  456d6265          DCB      0x45,0x6d,0x62,0x65
00006c  64646564          DCB      0x64,0x64,0x65,0x64
000070  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000074  7261793c          DCB      0x72,0x61,0x79,0x3c
000078  54797065          DCB      0x54,0x79,0x70,0x65
00007c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000080  20626f6f          DCB      0x20,0x62,0x6f,0x6f
000084  6c2c2062          DCB      0x6c,0x2c,0x20,0x62
000088  6f6f6c20          DCB      0x6f,0x6f,0x6c,0x20
00008c  2629205b          DCB      0x26,0x29,0x20,0x5b
000090  77697468          DCB      0x77,0x69,0x74,0x68
000094  20547970          DCB      0x20,0x54,0x79,0x70
000098  65203d20          DCB      0x65,0x20,0x3d,0x20
00009c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a0  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix3MaxIfEET_RKNS0_25ConstArraySliceExpressionIS3_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix3MaxIfEET_RKNS0_25ConstArraySliceExpressionIS3_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix3MaxIfEET_RKNS0_25ConstArraySliceExpressionIS3_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Max<float>(const Anki::Embedded::ConstArraySliceExpression<T1>&)::__PRETTY_FUNCTION__
000000  54797065          DCB      0x54,0x79,0x70,0x65
000004  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000008  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00000c  6d626564          DCB      0x6d,0x62,0x65,0x64
000010  6465643a          DCB      0x64,0x65,0x64,0x3a
000014  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000018  7269783a          DCB      0x72,0x69,0x78,0x3a
00001c  3a4d6178          DCB      0x3a,0x4d,0x61,0x78
000020  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000024  73742041          DCB      0x73,0x74,0x20,0x41
000028  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00002c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000030  65646465          DCB      0x65,0x64,0x64,0x65
000034  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000038  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00003c  41727261          DCB      0x41,0x72,0x72,0x61
000040  79536c69          DCB      0x79,0x53,0x6c,0x69
000044  63654578          DCB      0x63,0x65,0x45,0x78
000048  70726573          DCB      0x70,0x72,0x65,0x73
00004c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000050  3c547970          DCB      0x3c,0x54,0x79,0x70
000054  653e2026          DCB      0x65,0x3e,0x20,0x26
000058  29205b77          DCB      0x29,0x20,0x5b,0x77
00005c  69746820          DCB      0x69,0x74,0x68,0x20
000060  54797065          DCB      0x54,0x79,0x70,0x65
000064  203d2066          DCB      0x20,0x3d,0x20,0x66
000068  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00006c  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a566563          DCB      0x3a,0x56,0x65,0x63
000028  746f7269          DCB      0x74,0x6f,0x72,0x69
00002c  7a652862          DCB      0x7a,0x65,0x28,0x62
000030  6f6f6c2c          DCB      0x6f,0x6f,0x6c,0x2c
000034  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000038  73742041          DCB      0x73,0x74,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00004c  72726179          DCB      0x72,0x72,0x61,0x79
000050  3c547970          DCB      0x3c,0x54,0x79,0x70
000054  653e2026          DCB      0x65,0x3e,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
00006c  7261793c          DCB      0x72,0x61,0x79,0x3c
000070  4f757454          DCB      0x4f,0x75,0x74,0x54
000074  7970653e          DCB      0x79,0x70,0x65,0x3e
000078  20262920          DCB      0x20,0x26,0x29,0x20
00007c  5b776974          DCB      0x5b,0x77,0x69,0x74
000080  6820496e          DCB      0x68,0x20,0x49,0x6e
000084  54797065          DCB      0x54,0x79,0x70,0x65
000088  203d2066          DCB      0x20,0x3d,0x20,0x66
00008c  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000090  2c204f75          DCB      0x2c,0x20,0x4f,0x75
000094  74547970          DCB      0x74,0x54,0x79,0x70
000098  65203d20          DCB      0x65,0x20,0x3d,0x20
00009c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a0  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix7ReshapeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix7ReshapeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix7ReshapeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Reshape<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a526573          DCB      0x3a,0x52,0x65,0x73
000028  68617065          DCB      0x68,0x61,0x70,0x65
00002c  28626f6f          DCB      0x28,0x62,0x6f,0x6f
000030  6c2c2063          DCB      0x6c,0x2c,0x20,0x63
000034  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000038  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00003c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000040  6d626564          DCB      0x6d,0x62,0x65,0x64
000044  6465643a          DCB      0x64,0x65,0x64,0x3a
000048  3a417272          DCB      0x3a,0x41,0x72,0x72
00004c  61793c54          DCB      0x61,0x79,0x3c,0x54
000050  7970653e          DCB      0x79,0x70,0x65,0x3e
000054  20262c20          DCB      0x20,0x26,0x2c,0x20
000058  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00005c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000060  62656464          DCB      0x62,0x65,0x64,0x64
000064  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000068  41727261          DCB      0x41,0x72,0x72,0x61
00006c  793c4f75          DCB      0x79,0x3c,0x4f,0x75
000070  74547970          DCB      0x74,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  29205b77          DCB      0x29,0x20,0x5b,0x77
00007c  69746820          DCB      0x69,0x74,0x68,0x20
000080  496e5479          DCB      0x49,0x6e,0x54,0x79
000084  7065203d          DCB      0x70,0x65,0x20,0x3d
000088  20666c6f          DCB      0x20,0x66,0x6c,0x6f
00008c  61742c20          DCB      0x61,0x74,0x2c,0x20
000090  4f757454          DCB      0x4f,0x75,0x74,0x54
000094  79706520          DCB      0x79,0x70,0x65,0x20
000098  3d20666c          DCB      0x3d,0x20,0x66,0x6c
00009c  6f61745d          DCB      0x6f,0x61,0x74,0x5d
0000a0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIfffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIfffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIfffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeXGradient<float, float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000030  6d707574          DCB      0x6d,0x70,0x75,0x74
000034  65584772          DCB      0x65,0x58,0x47,0x72
000038  61646965          DCB      0x61,0x64,0x69,0x65
00003c  6e742863          DCB      0x6e,0x74,0x28,0x63
000040  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000044  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000048  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00004c  6d626564          DCB      0x6d,0x62,0x65,0x64
000050  6465643a          DCB      0x64,0x65,0x64,0x3a
000054  3a417272          DCB      0x3a,0x41,0x72,0x72
000058  61793c54          DCB      0x61,0x79,0x3c,0x54
00005c  7970653e          DCB      0x79,0x70,0x65,0x3e
000060  20262c20          DCB      0x20,0x26,0x2c,0x20
000064  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000068  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00006c  62656464          DCB      0x62,0x65,0x64,0x64
000070  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000074  41727261          DCB      0x41,0x72,0x72,0x61
000078  793c4f75          DCB      0x79,0x3c,0x4f,0x75
00007c  74547970          DCB      0x74,0x54,0x79,0x70
000080  653e2026          DCB      0x65,0x3e,0x20,0x26
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  496e5479          DCB      0x49,0x6e,0x54,0x79
000090  7065203d          DCB      0x70,0x65,0x20,0x3d
000094  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000098  61742c20          DCB      0x61,0x74,0x2c,0x20
00009c  496e7465          DCB      0x49,0x6e,0x74,0x65
0000a0  726d6564          DCB      0x72,0x6d,0x65,0x64
0000a4  69617465          DCB      0x69,0x61,0x74,0x65
0000a8  54797065          DCB      0x54,0x79,0x70,0x65
0000ac  203d2066          DCB      0x20,0x3d,0x20,0x66
0000b0  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000b4  2c204f75          DCB      0x2c,0x20,0x4f,0x75
0000b8  74547970          DCB      0x74,0x54,0x79,0x70
0000bc  65203d20          DCB      0x65,0x20,0x3d,0x20
0000c0  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000c4  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIfffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIfffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIfffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeYGradient<float, float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000030  6d707574          DCB      0x6d,0x70,0x75,0x74
000034  65594772          DCB      0x65,0x59,0x47,0x72
000038  61646965          DCB      0x61,0x64,0x69,0x65
00003c  6e742863          DCB      0x6e,0x74,0x28,0x63
000040  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000044  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000048  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00004c  6d626564          DCB      0x6d,0x62,0x65,0x64
000050  6465643a          DCB      0x64,0x65,0x64,0x3a
000054  3a417272          DCB      0x3a,0x41,0x72,0x72
000058  61793c54          DCB      0x61,0x79,0x3c,0x54
00005c  7970653e          DCB      0x79,0x70,0x65,0x3e
000060  20262c20          DCB      0x20,0x26,0x2c,0x20
000064  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000068  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00006c  62656464          DCB      0x62,0x65,0x64,0x64
000070  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000074  41727261          DCB      0x41,0x72,0x72,0x61
000078  793c4f75          DCB      0x79,0x3c,0x4f,0x75
00007c  74547970          DCB      0x74,0x54,0x79,0x70
000080  653e2026          DCB      0x65,0x3e,0x20,0x26
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  496e5479          DCB      0x49,0x6e,0x54,0x79
000090  7065203d          DCB      0x70,0x65,0x20,0x3d
000094  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000098  61742c20          DCB      0x61,0x74,0x2c,0x20
00009c  496e7465          DCB      0x49,0x6e,0x74,0x65
0000a0  726d6564          DCB      0x72,0x6d,0x65,0x64
0000a4  69617465          DCB      0x69,0x61,0x74,0x65
0000a8  54797065          DCB      0x54,0x79,0x70,0x65
0000ac  203d2066          DCB      0x20,0x3d,0x20,0x66
0000b0  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000b4  2c204f75          DCB      0x2c,0x20,0x4f,0x75
0000b8  74547970          DCB      0x74,0x54,0x79,0x70
0000bc  65203d20          DCB      0x65,0x20,0x3d,0x20
0000c0  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000c4  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14Interp2_AffineIhfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_8MeshgridIfEERKNS3_IfEERKNS0_5PointIfEERNS3_IT0_EENS0_17InterpolationTypeESJ_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2_Affine<unsigned char, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Meshgrid<float>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Point<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496e74          DCB      0x3a,0x49,0x6e,0x74
000020  65727032          DCB      0x65,0x72,0x70,0x32
000024  5f416666          DCB      0x5f,0x41,0x66,0x66
000028  696e6528          DCB      0x69,0x6e,0x65,0x28
00002c  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000030  7420416e          DCB      0x74,0x20,0x41,0x6e
000034  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000038  456d6265          DCB      0x45,0x6d,0x62,0x65
00003c  64646564          DCB      0x64,0x64,0x65,0x64
000040  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000044  7261793c          DCB      0x72,0x61,0x79,0x3c
000048  54797065          DCB      0x54,0x79,0x70,0x65
00004c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000050  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000054  73742041          DCB      0x73,0x74,0x20,0x41
000058  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00005c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000060  65646465          DCB      0x65,0x64,0x64,0x65
000064  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000068  65736867          DCB      0x65,0x73,0x68,0x67
00006c  7269643c          DCB      0x72,0x69,0x64,0x3c
000070  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000074  743e2026          DCB      0x74,0x3e,0x20,0x26
000078  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00007c  6e737420          DCB      0x6e,0x73,0x74,0x20
000080  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000084  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000088  62656464          DCB      0x62,0x65,0x64,0x64
00008c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000090  41727261          DCB      0x41,0x72,0x72,0x61
000094  793c666c          DCB      0x79,0x3c,0x66,0x6c
000098  6f61743e          DCB      0x6f,0x61,0x74,0x3e
00009c  20262c20          DCB      0x20,0x26,0x2c,0x20
0000a0  636f6e73          DCB      0x63,0x6f,0x6e,0x73
0000a4  7420416e          DCB      0x74,0x20,0x41,0x6e
0000a8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000ac  456d6265          DCB      0x45,0x6d,0x62,0x65
0000b0  64646564          DCB      0x64,0x64,0x65,0x64
0000b4  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
0000b8  696e743c          DCB      0x69,0x6e,0x74,0x3c
0000bc  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000c0  743e2026          DCB      0x74,0x3e,0x20,0x26
0000c4  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0000c8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000cc  456d6265          DCB      0x45,0x6d,0x62,0x65
0000d0  64646564          DCB      0x64,0x64,0x65,0x64
0000d4  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
0000d8  7261793c          DCB      0x72,0x61,0x79,0x3c
0000dc  4f757454          DCB      0x4f,0x75,0x74,0x54
0000e0  7970653e          DCB      0x79,0x70,0x65,0x3e
0000e4  20262c20          DCB      0x20,0x26,0x2c,0x20
0000e8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000ec  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000f0  62656464          DCB      0x62,0x65,0x64,0x64
0000f4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000f8  496e7465          DCB      0x49,0x6e,0x74,0x65
0000fc  72706f6c          DCB      0x72,0x70,0x6f,0x6c
000100  6174696f          DCB      0x61,0x74,0x69,0x6f
000104  6e547970          DCB      0x6e,0x54,0x79,0x70
000108  652c204f          DCB      0x65,0x2c,0x20,0x4f
00010c  75745479          DCB      0x75,0x74,0x54,0x79
000110  70652920          DCB      0x70,0x65,0x29,0x20
000114  5b776974          DCB      0x5b,0x77,0x69,0x74
000118  6820496e          DCB      0x68,0x20,0x49,0x6e
00011c  54797065          DCB      0x54,0x79,0x70,0x65
000120  203d2075          DCB      0x20,0x3d,0x20,0x75
000124  6e736967          DCB      0x6e,0x73,0x69,0x67
000128  6e656420          DCB      0x6e,0x65,0x64,0x20
00012c  63686172          DCB      0x63,0x68,0x61,0x72
000130  2c204f75          DCB      0x2c,0x20,0x4f,0x75
000134  74547970          DCB      0x74,0x54,0x79,0x70
000138  65203d20          DCB      0x65,0x20,0x3d,0x20
00013c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000140  745d00            DCB      0x74,0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\lucasKanade_SampledProjective.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___33_lucasKanade_SampledProjective_cpp_59354520___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___33_lucasKanade_SampledProjective_cpp_59354520___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___33_lucasKanade_SampledProjective_cpp_59354520___Z7__REVSHi|
#line 144
|__asm___33_lucasKanade_SampledProjective_cpp_59354520___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
