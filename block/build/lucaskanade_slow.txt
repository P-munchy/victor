; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\lucaskanade_slow.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\lucaskanade_slow.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\lucaskanade_slow.crf ..\coretech\vision\robot\src\lucasKanade_Slow.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow11UpdateTrackERKNS0_5ArrayIhEEifbRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow11UpdateTrackERKNS0_5ArrayIhEEifbRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::UpdateTrack(const Anki::Embedded::Array<unsigned char>&, int, float, bool, bool&, Anki::Embedded::MemoryStack)
;;;377    
;;;378          Result LucasKanadeTracker_Slow::UpdateTrack(const Array<u8> &nextImage, const s32 maxIterations, const f32 convergenceTolerance, const bool useWeights, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;379          {
000004  4606              MOV      r6,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  461f              MOV      r7,r3
00000c  ed2d8b02          VPUSH    {d8}
000010  b093              SUB      sp,sp,#0x4c
;;;380            Result lastResult;
;;;381    
;;;382            for(s32 iScale=numPyramidLevels-1; iScale>=0; iScale--) {
000012  f8d000d0          LDR      r0,[r0,#0xd0]
000016  e9dd5a24          LDRD     r5,r10,[sp,#0x90]     ;379
00001a  1e44              SUBS     r4,r0,#1
00001c  eeb08a40          VMOV.F32 s16,s0                ;379
000020  2c00              CMP      r4,#0
000022  bfa4              ITT      GE
000024  f04f0800          MOVGE    r8,#0
;;;383              // TODO: remove
;;;384              //for(s32 iScale=0; iScale>=0; iScale--) {
;;;385              verify_converged = false;
;;;386    
;;;387              BeginBenchmark("UpdateTrack.refineTranslation");
;;;388              if((lastResult = IterativelyRefineTrack(nextImage, maxIterations, iScale, convergenceTolerance, Transformations::TRANSFORM_TRANSLATION, useWeights, verify_converged, scratch)) != RESULT_OK)
000028  f44f7900          MOVGE    r9,#0x200
00002c  db45              BLT      |L1.186|
                  |L1.46|
00002e  f8858000          STRB     r8,[r5,#0]            ;385
000032  a025              ADR      r0,|L1.200|
000034  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000038  4651              MOV      r1,r10
00003a  a804              ADD      r0,sp,#0x10
00003c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000040  e9cd9700          STRD     r9,r7,[sp,#0]
000044  e9cd5002          STRD     r5,r0,[sp,#8]
000048  e9dd1218          LDRD     r1,r2,[sp,#0x60]
00004c  eeb00a48          VMOV.F32 s0,s16
000050  4623              MOV      r3,r4
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeEbRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool, bool&, Anki::Embedded::MemoryStack)
000058  2800              CMP      r0,#0
;;;389                return lastResult;
;;;390              EndBenchmark("UpdateTrack.refineTranslation");
;;;391    
;;;392              //this->get_transformation().Print("Translation");
;;;393    
;;;394              if(this->transformation.get_transformType() != Transformations::TRANSFORM_TRANSLATION) {
;;;395                BeginBenchmark("UpdateTrack.refineOther");
;;;396                if((lastResult = IterativelyRefineTrack(nextImage, maxIterations, iScale, convergenceTolerance, this->transformation.get_transformType(), useWeights, verify_converged, scratch)) != RESULT_OK)
;;;397                  return lastResult;
;;;398                EndBenchmark("UpdateTrack.refineOther");
;;;399    
;;;400                //this->get_transformation().Print("Other");
;;;401              }
;;;402            } // for(s32 iScale=numPyramidLevels; iScale>=0; iScale--)
;;;403    
;;;404            return RESULT_OK;
;;;405          }
00005a  bf1f              ITTTT    NE
00005c  b013              ADDNE    sp,sp,#0x4c
00005e  ecbd8b02          VPOPNE   {d8}
000062  b006              ADDNE    sp,sp,#0x18
000064  e8bd8ff0          POPNE    {r4-r11,pc}
000068  a017              ADR      r0,|L1.200|
00006a  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00006e  f10600e4          ADD      r0,r6,#0xe4           ;394
000072  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000076  f5b07f00          CMP      r0,#0x200             ;394
00007a  d01c              BEQ      |L1.182|
00007c  a01a              ADR      r0,|L1.232|
00007e  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000082  4651              MOV      r1,r10                ;396
000084  a80b              ADD      r0,sp,#0x2c           ;396
000086  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00008a  4683              MOV      r11,r0                ;396
00008c  f10600e4          ADD      r0,r6,#0xe4           ;396
000090  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000094  e9cd0700          STRD     r0,r7,[sp,#0]         ;396
000098  e9cd5b02          STRD     r5,r11,[sp,#8]        ;396
00009c  e9dd1218          LDRD     r1,r2,[sp,#0x60]      ;396
0000a0  eeb00a48          VMOV.F32 s0,s16                ;396
0000a4  4623              MOV      r3,r4                 ;396
0000a6  4630              MOV      r0,r6                 ;396
0000a8  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeEbRbNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool, bool&, Anki::Embedded::MemoryStack)
0000ac  2800              CMP      r0,#0                 ;396
0000ae  d105              BNE      |L1.188|
0000b0  a00d              ADR      r0,|L1.232|
0000b2  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
                  |L1.182|
0000b6  1e64              SUBS     r4,r4,#1              ;382
0000b8  d5b9              BPL      |L1.46|
                  |L1.186|
0000ba  2000              MOVS     r0,#0                 ;404
                  |L1.188|
0000bc  b013              ADD      sp,sp,#0x4c
0000be  ecbd8b02          VPOP     {d8}
0000c2  b006              ADD      sp,sp,#0x18
0000c4  e8bd8ff0          POP      {r4-r11,pc}
;;;406    
                          ENDP

                  |L1.200|
0000c8  55706461          DCB      "UpdateTrack.refineTranslation",0
0000cc  74655472
0000d0  61636b2e
0000d4  72656669
0000d8  6e655472
0000dc  616e736c
0000e0  6174696f
0000e4  6e00    
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L1.232|
0000e8  55706461          DCB      "UpdateTrack.refineOther",0
0000ec  74655472
0000f0  61636b2e
0000f4  72656669
0000f8  6e654f74
0000fc  68657200

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18InitializeTemplateERKNS0_5ArrayIhEERNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18InitializeTemplateERKNS0_5ArrayIhEERNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::InitializeTemplate(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::MemoryStack&)
;;;116    
;;;117          Result LucasKanadeTracker_Slow::InitializeTemplate(const Array<u8> &templateImage, MemoryStack &memory)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;118          {
000004  4604              MOV      r4,r0
000006  ed2d8b08          VPUSH    {d8-d11}
00000a  f5ad6dbc          SUB      sp,sp,#0x5e0
;;;119            const bool isOutColumnMajor = false; // TODO: change to false, which will probably be faster
;;;120    
;;;121            Result lastResult;
;;;122    
;;;123            AnkiConditionalErrorAndReturnValue(this->isValid,
00000e  f8900140          LDRB     r0,[r0,#0x140]
000012  2800              CMP      r0,#0
000014  d015              BEQ      |L2.66|
;;;124              RESULT_FAIL_INVALID_OBJECT, "LucasKanadeTracker_Slow::InitializeTemplate", "This object's constructor failed, so it cannot be initialized");
;;;125    
;;;126            AnkiConditionalErrorAndReturnValue(this->isInitialized == false,
000016  f8940141          LDRB     r0,[r4,#0x141]
00001a  2800              CMP      r0,#0
00001c  d01e              BEQ      |L2.92|
00001e  217e              MOVS     r1,#0x7e
000020  48e3              LDR      r0,|L2.944|
000022  e9cd0100          STRD     r0,r1,[sp,#0]
000026  a3e3              ADR      r3,|L2.948|
000028  a2ef              ADR      r2,|L2.1000|
00002a  a1fa              ADR      r1,|L2.1044|
00002c  2005              MOVS     r0,#5
00002e  f7fffffe          BL       _Anki_Log
000032  2001              MOVS     r0,#1
                  |L2.52|
;;;127              RESULT_FAIL, "LucasKanadeTracker_Slow::InitializeTemplate", "This object has already been initialized");
;;;128    
;;;129            AnkiConditionalErrorAndReturnValue(templateImageHeight == templateImage.get_size(0) && templateImageWidth == templateImage.get_size(1),
;;;130              RESULT_FAIL_INVALID_SIZE, "LucasKanadeTracker_Slow::InitializeTemplate", "template size doesn't match constructor");
;;;131    
;;;132            AnkiConditionalErrorAndReturnValue(templateRegion.left < templateRegion.right && templateRegion.left >=0 && templateRegion.right < templateImage.get_size(1) &&
;;;133              templateRegion.top < templateRegion.bottom && templateRegion.top >=0 && templateRegion.bottom < templateImage.get_size(0),
;;;134              RESULT_FAIL, "LucasKanadeTracker_Slow::InitializeTemplate", "template rectangle is invalid or out of bounds");
;;;135    
;;;136            // We do this early, before any memory is allocated This way, an early return won't be able
;;;137            // to leak memory with multiple calls to this object
;;;138            this->isInitialized = true;
;;;139            this->isValid = false;
;;;140    
;;;141            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / templateImage.get_size(1) ;
;;;142            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32); // TODO: check that this is integer
;;;143    
;;;144            const s32 numTransformationParameters = transformation.get_transformType() >> 8;
;;;145    
;;;146            this->templateRegionHeight = templateRegion.bottom - templateRegion.top  + 1;
;;;147            this->templateRegionWidth  = templateRegion.right  - templateRegion.left + 1;
;;;148    
;;;149            this->templateWeightsSigma = sqrtf(this->templateRegionWidth*this->templateRegionWidth + this->templateRegionHeight*this->templateRegionHeight) / 2.0f;
;;;150    
;;;151            // Allocate all permanent memory
;;;152            BeginBenchmark("InitializeTemplate.allocate");
;;;153            for(s32 iScale=0; iScale<this->numPyramidLevels; iScale++) {
;;;154              const f32 scale = static_cast<f32>(1 << iScale);
;;;155    
;;;156              templateCoordinates[iScale] = Meshgrid<f32>(
;;;157                Linspace(-this->templateRegionWidth/2.0f, this->templateRegionWidth/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionWidth/scale))),
;;;158                Linspace(-this->templateRegionHeight/2.0f, this->templateRegionHeight/2.0f, static_cast<s32>(FLT_FLOOR(this->templateRegionHeight/scale))));
;;;159    
;;;160              const s32 numValidPoints = templateCoordinates[iScale].get_numElements();
;;;161    
;;;162              this->A_full[iScale] = Array<f32>(numTransformationParameters, numValidPoints, memory);
;;;163              AnkiConditionalErrorAndReturnValue(this->A_full[iScale].IsValid(),
;;;164                RESULT_FAIL_INVALID_OBJECT, "LucasKanadeTracker_Slow::InitializeTemplate", "Could not allocate A_full[iScale]");
;;;165    
;;;166              const s32 numPointsY = templateCoordinates[iScale].get_yGridVector().get_size();
;;;167              const s32 numPointsX = templateCoordinates[iScale].get_xGridVector().get_size();
;;;168    
;;;169              this->templateImagePyramid[iScale] = Array<u8>(numPointsY, numPointsX, memory);
;;;170    
;;;171              AnkiConditionalErrorAndReturnValue(this->templateImagePyramid[iScale].IsValid(),
;;;172                RESULT_FAIL_INVALID_OBJECT, "LucasKanadeTracker_Slow::InitializeTemplate", "Could not allocate templateImagePyramid[i]");
;;;173    
;;;174              this->templateWeights[iScale] = Array<f32>(1, numPointsY*numPointsX, memory);
;;;175    
;;;176              AnkiConditionalErrorAndReturnValue(this->templateWeights[iScale].IsValid(),
;;;177                RESULT_FAIL_INVALID_OBJECT, "LucasKanadeTracker_Slow::InitializeTemplate", "Could not allocate templateWeights[i]");
;;;178    
;;;179              //templateImage.Show("templateImage", true);
;;;180            }
;;;181            EndBenchmark("InitializeTemplate.allocate");
;;;182    
;;;183            BeginBenchmark("InitializeTemplate.initA");
;;;184            // Everything below here is temporary
;;;185            {
;;;186              PUSH_MEMORY_STACK(memory);
;;;187    
;;;188              BeginBenchmark("InitializeTemplate.setTemplateMask");
;;;189              Array<f32> templateMask = Array<f32>(templateImageHeight, templateImageWidth, memory);
;;;190              templateMask.SetZero();
;;;191              templateMask(
;;;192                Round<s32>(templateRegion.top),
;;;193                Round<s32>(templateRegion.bottom),
;;;194                Round<s32>(templateRegion.left),
;;;195                Round<s32>(templateRegion.right)).Set(1.0f);
;;;196              EndBenchmark("InitializeTemplate.setTemplateMask");
;;;197    
;;;198              for(s32 iScale=0; iScale<this->numPyramidLevels; iScale++) {
;;;199                PUSH_MEMORY_STACK(memory);
;;;200    
;;;201                const s32 numPointsY = templateCoordinates[iScale].get_yGridVector().get_size();
;;;202                const s32 numPointsX = templateCoordinates[iScale].get_xGridVector().get_size();
;;;203    
;;;204                const f32 scale = static_cast<f32>(1 << iScale);
;;;205    
;;;206                BeginBenchmark("InitializeTemplate.evaluateMeshgrid");
;;;207                Array<f32> xIn = templateCoordinates[iScale].EvaluateX2(memory);
;;;208                Array<f32> yIn = templateCoordinates[iScale].EvaluateY2(memory);
;;;209                EndBenchmark("InitializeTemplate.evaluateMeshgrid");
;;;210    
;;;211                AnkiAssert(AreEqualSize(xIn, yIn));
;;;212    
;;;213                Array<f32> xTransformed(numPointsY, numPointsX, memory);
;;;214                Array<f32> yTransformed(numPointsY, numPointsX, memory);
;;;215    
;;;216                BeginBenchmark("InitializeTemplate.transformPoints");
;;;217                // Compute the warped coordinates (for later)
;;;218                //if((lastResult = transformation.TransformPoints(xIn, yIn, scale*initialImageScaleF32, xTransformed, yTransformed)) != RESULT_OK)
;;;219                if((lastResult = transformation.TransformPoints(xIn, yIn, initialImageScaleF32, true, false, xTransformed, yTransformed)) != RESULT_OK)
;;;220                  return lastResult;
;;;221                EndBenchmark("InitializeTemplate.transformPoints");
;;;222    
;;;223                Array<f32> templateDerivativeX(numPointsY, numPointsX, memory);
;;;224                Array<f32> templateDerivativeY(numPointsY, numPointsX, memory);
;;;225    
;;;226                BeginBenchmark("InitializeTemplate.image.interp2");
;;;227                if((lastResult = Interp2<u8,u8>(templateImage, xTransformed, yTransformed, this->templateImagePyramid[iScale], INTERPOLATE_LINEAR)) != RESULT_OK)
;;;228                  return lastResult;
;;;229                EndBenchmark("InitializeTemplate.image.interp2");
;;;230    
;;;231                BeginBenchmark("InitializeTemplate.ComputeImageGradients");
;;;232                // Ix = (image_right(targetBlur) - image_left(targetBlur))/2 * spacing;
;;;233                // Iy = (image_down(targetBlur) - image_up(targetBlur))/2 * spacing;
;;;234                Matrix::Subtract<u8,f32,f32>(templateImagePyramid[iScale](1,-2,2,-1), templateImagePyramid[iScale](1,-2,0,-3), templateDerivativeX(1,-2,1,-2));
;;;235                //Matrix::DotMultiply<f32,f32,f32>(templateDerivativeX, scale / 2.0f, templateDerivativeX);
;;;236                Matrix::DotMultiply<f32,f32,f32>(templateDerivativeX, scale / (2.0f*255.0f), templateDerivativeX);
;;;237    
;;;238                Matrix::Subtract<u8,f32,f32>(templateImagePyramid[iScale](2,-1,1,-2), templateImagePyramid[iScale](0,-3,1,-2), templateDerivativeY(1,-2,1,-2));
;;;239                //Matrix::DotMultiply<f32,f32,f32>(templateDerivativeY, scale / 2.0f, templateDerivativeY);
;;;240                Matrix::DotMultiply<f32,f32,f32>(templateDerivativeY, scale / (2.0f*255.0f), templateDerivativeY);
;;;241                EndBenchmark("InitializeTemplate.ComputeImageGradients");
;;;242    
;;;243                // Create the A matrix
;;;244                BeginBenchmark("InitializeTemplate.ComputeA");
;;;245                if(transformation.get_transformType() == Transformations::TRANSFORM_TRANSLATION) {
;;;246                  Array<f32> tmp(1, numPointsY*numPointsX, memory);
;;;247    
;;;248                  Matrix::Vectorize(isOutColumnMajor, templateDerivativeX, tmp);
;;;249                  this->A_full[iScale](0,0,0,-1).Set(tmp);
;;;250    
;;;251                  Matrix::Vectorize(isOutColumnMajor, templateDerivativeY, tmp);
;;;252                  this->A_full[iScale](1,1,0,-1).Set(tmp);
;;;253                } else if(transformation.get_transformType() == Transformations::TRANSFORM_AFFINE || transformation.get_transformType() == Transformations::TRANSFORM_PROJECTIVE) {
;;;254                  // The first six terms of affine and projective are the same
;;;255    
;;;256                  Array<f32> xInV(1, numPointsY*numPointsX, memory);
;;;257                  Array<f32> yInV(1, numPointsY*numPointsX, memory);
;;;258                  Matrix::Vectorize(isOutColumnMajor, xIn, xInV);
;;;259                  Matrix::Vectorize(isOutColumnMajor, yIn, yInV);
;;;260    
;;;261                  Array<f32> tmp1(1, numPointsY*numPointsX, memory);
;;;262    
;;;263                  //xInV.Print("xInV");
;;;264    
;;;265                  // X.*Ix(:)
;;;266                  Matrix::Vectorize(isOutColumnMajor, templateDerivativeX, tmp1);
;;;267                  Matrix::DotMultiply<f32,f32,f32>(tmp1, xInV, tmp1);
;;;268                  this->A_full[iScale](0,0,0,-1).Set(tmp1);
;;;269    
;;;270                  // Y.*Ix(:)
;;;271                  Matrix::Vectorize(isOutColumnMajor, templateDerivativeX, tmp1);
;;;272                  Matrix::DotMultiply<f32,f32,f32>(tmp1, yInV, tmp1);
;;;273                  this->A_full[iScale](1,1,0,-1).Set(tmp1);
;;;274    
;;;275                  // Ix(:)
;;;276                  Matrix::Vectorize(isOutColumnMajor, templateDerivativeX, tmp1);
;;;277                  this->A_full[iScale](2,2,0,-1).Set(tmp1);
;;;278    
;;;279                  // X.*Iy(:)
;;;280                  Matrix::Vectorize(isOutColumnMajor, templateDerivativeY, tmp1);
;;;281                  Matrix::DotMultiply<f32,f32,f32>(tmp1, xInV, tmp1);
;;;282                  this->A_full[iScale](3,3,0,-1).Set(tmp1);
;;;283    
;;;284                  // Y.*Iy(:)
;;;285                  Matrix::Vectorize(isOutColumnMajor, templateDerivativeY, tmp1);
;;;286                  Matrix::DotMultiply<f32,f32,f32>(tmp1, yInV, tmp1);
;;;287                  this->A_full[iScale](4,4,0,-1).Set(tmp1);
;;;288    
;;;289                  // Iy(:)
;;;290                  Matrix::Vectorize(isOutColumnMajor, templateDerivativeY, tmp1);
;;;291                  this->A_full[iScale](5,5,0,-1).Set(tmp1);
;;;292    
;;;293                  if(transformation.get_transformType() == Transformations::TRANSFORM_PROJECTIVE) {
;;;294                    //The seventh and eights terms are for projective only, not for affine
;;;295    
;;;296                    Array<f32> tmp2(1, numPointsY*numPointsX, memory);
;;;297    
;;;298                    // -X.^2.*Ix(:) - X.*Y.*Iy(:)
;;;299                    Matrix::Vectorize(isOutColumnMajor, templateDerivativeX, tmp1); // Ix(:)
;;;300                    Matrix::DotMultiply<f32,f32,f32>(tmp1, xInV, tmp1); // Ix(:).*X
;;;301                    Matrix::DotMultiply<f32,f32,f32>(tmp1, xInV, tmp1); // Ix(:).*X.^2
;;;302                    Matrix::Subtract<f32,f32,f32>(0.0f, tmp1, tmp1); // -Ix(:).*X.^2
;;;303    
;;;304                    Matrix::Vectorize(isOutColumnMajor, templateDerivativeY, tmp2); // Iy(:)
;;;305                    Matrix::DotMultiply<f32,f32,f32>(tmp2, xInV, tmp2); // Iy(:).*X
;;;306                    Matrix::DotMultiply<f32,f32,f32>(tmp2, yInV, tmp2); // Iy(:).*X.*Y
;;;307    
;;;308                    Matrix::Subtract<f32,f32,f32>(tmp1,tmp2,tmp1);
;;;309                    this->A_full[iScale](6,6,0,-1).Set(tmp1);
;;;310    
;;;311                    // -X.*Y.*Ix(:) - Y.^2.*Iy(:)
;;;312                    Matrix::Vectorize(isOutColumnMajor, templateDerivativeX, tmp1); // Ix(:)
;;;313                    Matrix::DotMultiply<f32,f32,f32>(tmp1, xInV, tmp1); // Ix(:).*X
;;;314                    Matrix::DotMultiply<f32,f32,f32>(tmp1, yInV, tmp1); // Ix(:).*X.*Y
;;;315                    Matrix::Subtract<f32,f32,f32>(0.0f, tmp1, tmp1); // -Ix(:).*X.*Y
;;;316    
;;;317                    Matrix::Vectorize(isOutColumnMajor, templateDerivativeY, tmp2); // Iy(:)
;;;318                    Matrix::DotMultiply<f32,f32,f32>(tmp2, yInV, tmp2); // Iy(:).*Y
;;;319                    Matrix::DotMultiply<f32,f32,f32>(tmp2, yInV, tmp2); // Iy(:).*Y.^2
;;;320    
;;;321                    Matrix::Subtract<f32,f32,f32>(tmp1,tmp2,tmp1);
;;;322                    this->A_full[iScale](7,7,0,-1).Set(tmp1);
;;;323                  } // if(transformation.get_transformType() == Transformations::TRANSFORM_PROJECTIVE)
;;;324                } // else if(transformation.get_transformType() == Transformations::TRANSFORM_AFFINE || transformation.get_transformType() == Transformations::TRANSFORM_PROJECTIVE)
;;;325                EndBenchmark("InitializeTemplate.ComputeA");
;;;326    
;;;327                {
;;;328                  PUSH_MEMORY_STACK(memory);
;;;329    
;;;330                  Array<f32> GaussianTmp(numPointsY, numPointsX, memory);
;;;331    
;;;332                  BeginBenchmark("InitializeTemplate.weights.compute");
;;;333                  // GaussianTmp = exp(-((this.xgrid{i_scale}).^2 + (this.ygrid{i_scale}).^2) / (2*(W_sigma)^2));
;;;334                  {
;;;335                    PUSH_MEMORY_STACK(memory);
;;;336    
;;;337                    Array<f32> tmp(numPointsY, numPointsX, memory);
;;;338    
;;;339                    Matrix::DotMultiply<f32,f32,f32>(xIn, xIn, GaussianTmp);
;;;340                    Matrix::DotMultiply<f32,f32,f32>(yIn, yIn, tmp);
;;;341                    Matrix::Add<f32,f32,f32>(GaussianTmp, tmp, GaussianTmp);
;;;342                    Matrix::Subtract<f32,f32,f32>(0.0f, GaussianTmp, GaussianTmp);
;;;343                    Matrix::DotMultiply<f32,f32,f32>(GaussianTmp, 1.0f/(2.0f*templateWeightsSigma*templateWeightsSigma), GaussianTmp);
;;;344                    Matrix::Exp<f32,f32,f32>(GaussianTmp, GaussianTmp);
;;;345                  }
;;;346                  EndBenchmark("InitializeTemplate.weights.compute");
;;;347    
;;;348                  Array<f32> templateWeightsTmp(numPointsY, numPointsX, memory);
;;;349    
;;;350                  BeginBenchmark("InitializeTemplate.weights.interp2");
;;;351                  // W_mask = interp2(double(targetMask), xi, yi, 'linear', 0);
;;;352                  if((lastResult = Interp2<f32,f32>(templateMask, xTransformed, yTransformed, templateWeightsTmp, INTERPOLATE_LINEAR)) != RESULT_OK)
;;;353                    return lastResult;
;;;354                  EndBenchmark("InitializeTemplate.weights.interp2");
;;;355    
;;;356                  BeginBenchmark("InitializeTemplate.weights.vectorize");
;;;357                  // W_ = W_mask .* GaussianTmp;
;;;358                  Matrix::DotMultiply<f32,f32,f32>(templateWeightsTmp, GaussianTmp, templateWeightsTmp);
;;;359    
;;;360                  // Set the boundaries to zero, since these won't be correctly estimated
;;;361                  templateWeightsTmp(0,0,0,0).Set(0);
;;;362                  templateWeightsTmp(-1,-1,0,0).Set(0);
;;;363                  templateWeightsTmp(0,0,-1,-1).Set(0);
;;;364                  templateWeightsTmp(-1,-1,-1,-1).Set(0);
;;;365    
;;;366                  Matrix::Vectorize(isOutColumnMajor, templateWeightsTmp, templateWeights[iScale]);
;;;367                  EndBenchmark("InitializeTemplate.weights.vectorize");
;;;368                } // PUSH_MEMORY_STACK(memory);
;;;369              } // for(s32 iScale=0; iScale<this->numPyramidLevels; iScale++, fScale++)
;;;370            } // PUSH_MEMORY_STACK(memory);
;;;371            EndBenchmark("InitializeTemplate.initA");
;;;372    
;;;373            this->isValid = true;
;;;374    
;;;375            return RESULT_OK;
;;;376          }
000034  f50d6dbc          ADD      sp,sp,#0x5e0
000038  ecbd8b08          VPOP     {d8-d11}
00003c  b003              ADD      sp,sp,#0xc
00003e  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.66|
000042  217b              MOVS     r1,#0x7b              ;123
000044  48da              LDR      r0,|L2.944|
000046  e9cd0100          STRD     r0,r1,[sp,#0]         ;123
00004a  a3da              ADR      r3,|L2.948|
00004c  a2fc              ADR      r2,|L2.1088|
00004e  a1f1              ADR      r1,|L2.1044|
000050  2005              MOVS     r0,#5                 ;123
000052  f7fffffe          BL       _Anki_Log
000056  f04f6080          MOV      r0,#0x4000000         ;123
00005a  e7eb              B        |L2.52|
                  |L2.92|
00005c  2100              MOVS     r1,#0                 ;129
00005e  f8dd0604          LDR      r0,[sp,#0x604]        ;129
000062  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000066  f8d410d4          LDR      r1,[r4,#0xd4]         ;129
00006a  4288              CMP      r0,r1                 ;129
00006c  d108              BNE      |L2.128|
00006e  2101              MOVS     r1,#1                 ;129
000070  f8dd0604          LDR      r0,[sp,#0x604]        ;129
000074  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000078  f8d410d8          LDR      r1,[r4,#0xd8]         ;129
00007c  4288              CMP      r0,r1                 ;129
00007e  d00c              BEQ      |L2.154|
                  |L2.128|
000080  2181              MOVS     r1,#0x81              ;129
000082  48cb              LDR      r0,|L2.944|
000084  e9cd0100          STRD     r0,r1,[sp,#0]         ;129
000088  a3ca              ADR      r3,|L2.948|
00008a  a2fd              ADR      r2,|L2.1152|
00008c  a1e1              ADR      r1,|L2.1044|
00008e  2005              MOVS     r0,#5                 ;129
000090  f7fffffe          BL       _Anki_Log
000094  f04f60a0          MOV      r0,#0x5000000         ;129
000098  e7cc              B        |L2.52|
                  |L2.154|
00009a  ed940a4c          VLDR     s0,[r4,#0x130]        ;132
00009e  edd40a4d          VLDR     s1,[r4,#0x134]        ;132
0000a2  eeb40ae0          VCMPE.F32 s0,s1                 ;132
0000a6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;132
0000aa  da32              BGE      |L2.274|
0000ac  eeb50ac0          VCMPE.F32 s0,#0.0               ;132
0000b0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;132
0000b4  d32d              BCC      |L2.274|
0000b6  2101              MOVS     r1,#1                 ;132
0000b8  f8dd0604          LDR      r0,[sp,#0x604]        ;132
0000bc  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000c0  ee000a10          VMOV     s0,r0                 ;132
0000c4  edd40a4d          VLDR     s1,[r4,#0x134]        ;132
0000c8  eeb80ac0          VCVT.F32.S32 s0,s0                 ;132
0000cc  eeb40ae0          VCMPE.F32 s0,s1                 ;132
0000d0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;132
0000d4  d91d              BLS      |L2.274|
0000d6  ed940a4e          VLDR     s0,[r4,#0x138]        ;132
0000da  edd40a4f          VLDR     s1,[r4,#0x13c]        ;132
0000de  eeb40ae0          VCMPE.F32 s0,s1                 ;132
0000e2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;132
0000e6  da14              BGE      |L2.274|
0000e8  eeb50ac0          VCMPE.F32 s0,#0.0               ;132
0000ec  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;132
0000f0  d30f              BCC      |L2.274|
0000f2  2100              MOVS     r1,#0                 ;132
0000f4  f8dd0604          LDR      r0,[sp,#0x604]        ;132
0000f8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000fc  ee000a10          VMOV     s0,r0                 ;132
000100  edd40a4f          VLDR     s1,[r4,#0x13c]        ;132
000104  eeb80ac0          VCVT.F32.S32 s0,s0                 ;132
000108  eeb40ae0          VCMPE.F32 s0,s1                 ;132
00010c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;132
000110  d80b              BHI      |L2.298|
                  |L2.274|
000112  2184              MOVS     r1,#0x84              ;132
000114  48a6              LDR      r0,|L2.944|
000116  e9cd0100          STRD     r0,r1,[sp,#0]         ;132
00011a  a3a6              ADR      r3,|L2.948|
00011c  a2e2              ADR      r2,|L2.1192|
00011e  a1bd              ADR      r1,|L2.1044|
000120  2005              MOVS     r0,#5                 ;132
000122  f7fffffe          BL       _Anki_Log
000126  2001              MOVS     r0,#1                 ;132
000128  e784              B        |L2.52|
                  |L2.298|
00012a  2001              MOVS     r0,#1                 ;138
00012c  f8840141          STRB     r0,[r4,#0x141]        ;138
000130  2000              MOVS     r0,#0                 ;139
000132  f8840140          STRB     r0,[r4,#0x140]        ;139
000136  2101              MOVS     r1,#1                 ;141
000138  f8dd0604          LDR      r0,[sp,#0x604]        ;141
00013c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000140  f44f71a0          MOV      r1,#0x140             ;141
000144  fb91f0f0          SDIV     r0,r1,r0              ;141
000148  ee000a10          VMOV     s0,r0                 ;142
00014c  f10400e4          ADD      r0,r4,#0xe4           ;144
000150  eef89ac0          VCVT.F32.S32 s19,s0                ;142
000154  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000158  0a00              LSRS     r0,r0,#8              ;144
00015a  9018              STR      r0,[sp,#0x60]         ;146
00015c  ed940a4f          VLDR     s0,[r4,#0x13c]        ;146
000160  edd40a4e          VLDR     s1,[r4,#0x138]        ;146
000164  eeb79a00          VMOV.F32 s18,#1.00000000       ;146
000168  ee300a60          VSUB.F32 s0,s0,s1              ;146
00016c  ee300a09          VADD.F32 s0,s0,s18             ;146
000170  ed840a37          VSTR     s0,[r4,#0xdc]         ;146
000174  edd40a4d          VLDR     s1,[r4,#0x134]        ;147
000178  ed941a4c          VLDR     s2,[r4,#0x130]        ;147
00017c  ee700ac1          VSUB.F32 s1,s1,s2              ;147
000180  ee700a89          VADD.F32 s1,s1,s18             ;147
000184  edc40a38          VSTR     s1,[r4,#0xe0]         ;147
000188  ee600aa0          VMUL.F32 s1,s1,s1              ;149
00018c  ee400a00          VMLA.F32 s1,s0,s0              ;149
000190  eeb10ae0          VSQRT.F32 s0,s1                 ;149
000194  eeb40a40          VCMP.F32 s0,s0                 ;149
000198  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;149
00019c  bf1c              ITT      NE                    ;149
00019e  eeb00a60          VMOVNE.F32 s0,s1                 ;149
0001a2  f7fffffe          BLNE     __hardfp_sqrtf
0001a6  eeb6aa00          VMOV.F32 s20,#0.50000000       ;149
0001aa  a0cb              ADR      r0,|L2.1240|
0001ac  ee200a0a          VMUL.F32 s0,s0,s20             ;149
0001b0  ed840a4b          VSTR     s0,[r4,#0x12c]        ;149
0001b4  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0001b8  f8d400d0          LDR      r0,[r4,#0xd0]         ;153
0001bc  2600              MOVS     r6,#0                 ;153
0001be  2800              CMP      r0,#0                 ;153
0001c0  bfc4              ITT      GT                    ;156
0001c2  eddfaacc          VLDRGT   s21,|L2.1268|
0001c6  ed9fbacc          VLDRGT   s22,|L2.1272|
0001ca  f34082a5          BLE.W    |L2.1816|
                  |L2.462|
0001ce  2001              MOVS     r0,#1                 ;154
0001d0  40b0              LSLS     r0,r0,r6              ;154
0001d2  ee000a10          VMOV     s0,r0                 ;154
0001d6  edd48a38          VLDR     s17,[r4,#0xe0]        ;156
0001da  f8d40098          LDR      r0,[r4,#0x98]         ;156
0001de  eeb88ac0          VCVT.F32.S32 s16,s0                ;154
0001e2  eb060746          ADD      r7,r6,r6,LSL #1       ;154
0001e6  eb0005c7          ADD      r5,r0,r7,LSL #3       ;154
0001ea  ee880a88          VDIV.F32 s0,s17,s16            ;156
0001ee  ee300a2a          VADD.F32 s0,s0,s21             ;156
0001f2  f7fffffe          BL       __hardfp_floorf
0001f6  eebd0ac0          VCVT.S32.F32 s0,s0                 ;156
0001fa  ee680a8a          VMUL.F32 s1,s17,s20            ;156
0001fe  4668              MOV      r0,sp                 ;156
000200  ee101a10          VMOV     r1,s0                 ;156
000204  ee280a8b          VMUL.F32 s0,s17,s22            ;156
000208  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
00020c  e9dd8900          LDRD     r8,r9,[sp,#0]         ;156
000210  edd48a37          VLDR     s17,[r4,#0xdc]        ;156
000214  f8dda008          LDR      r10,[sp,#8]           ;156
000218  ee880a88          VDIV.F32 s0,s17,s16            ;156
00021c  ee300a2a          VADD.F32 s0,s0,s21             ;156
000220  f7fffffe          BL       __hardfp_floorf
000224  eebd0ac0          VCVT.S32.F32 s0,s0                 ;156
000228  ee680a8a          VMUL.F32 s1,s17,s20            ;156
00022c  a80f              ADD      r0,sp,#0x3c           ;156
00022e  ee101a10          VMOV     r1,s0                 ;156
000232  ee280a8b          VMUL.F32 s0,s17,s22            ;156
000236  f7fffffe          BL       _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i ; Anki::Embedded::Linspace<float>(T1, T1, int)
00023a  e9dd010f          LDRD     r0,r1,[sp,#0x3c]      ;156
00023e  9a11              LDR      r2,[sp,#0x44]         ;156
000240  f8cda018          STR      r10,[sp,#0x18]        ;156
000244  9209              STR      r2,[sp,#0x24]         ;156
000246  e9cd0107          STRD     r0,r1,[sp,#0x1c]      ;156
00024a  e9cd8904          STRD     r8,r9,[sp,#0x10]      ;156
00024e  f8ddc024          LDR      r12,[sp,#0x24]        ;156
000252  9a07              LDR      r2,[sp,#0x1c]         ;156
000254  f8c5c014          STR      r12,[r5,#0x14]        ;156
000258  f8c5a008          STR      r10,[r5,#8]           ;156
00025c  e9c58900          STRD     r8,r9,[r5,#0]         ;156
000260  e9c52103          STRD     r2,r1,[r5,#0xc]       ;156
000264  f8d40098          LDR      r0,[r4,#0x98]         ;156
000268  eb060986          ADD      r9,r6,r6,LSL #2       ;156
00026c  eb0000c7          ADD      r0,r0,r7,LSL #3       ;156
000270  2300              MOVS     r3,#0                 ;162
000272  6801              LDR      r1,[r0,#0]            ;162
000274  68c0              LDR      r0,[r0,#0xc]          ;162
000276  461a              MOV      r2,r3                 ;162
000278  fb01f800          MUL      r8,r1,r0              ;162
00027c  6b20              LDR      r0,[r4,#0x30]         ;162
00027e  2101              MOVS     r1,#1                 ;162
000280  eb000589          ADD      r5,r0,r9,LSL #2       ;162
000284  a812              ADD      r0,sp,#0x48           ;162
000286  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00028a  6800              LDR      r0,[r0,#0]            ;162
00028c  9000              STR      r0,[sp,#0]            ;162
00028e  4642              MOV      r2,r8                 ;162
000290  a80a              ADD      r0,sp,#0x28           ;162
000292  f8dd3608          LDR      r3,[sp,#0x608]        ;162
000296  9918              LDR      r1,[sp,#0x60]         ;162
000298  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00029c  6801              LDR      r1,[r0,#0]            ;162
00029e  6029              STR      r1,[r5,#0]            ;162
0002a0  6841              LDR      r1,[r0,#4]            ;162
0002a2  6069              STR      r1,[r5,#4]            ;162
0002a4  6881              LDR      r1,[r0,#8]            ;162
0002a6  60a9              STR      r1,[r5,#8]            ;162
0002a8  68c1              LDR      r1,[r0,#0xc]          ;162
0002aa  60e9              STR      r1,[r5,#0xc]          ;162
0002ac  6900              LDR      r0,[r0,#0x10]         ;162
0002ae  6128              STR      r0,[r5,#0x10]         ;162
0002b0  6b20              LDR      r0,[r4,#0x30]         ;162
0002b2  eb000089          ADD      r0,r0,r9,LSL #2       ;162
0002b6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0002ba  2800              CMP      r0,#0                 ;163
0002bc  d039              BEQ      |L2.818|
0002be  f8d40098          LDR      r0,[r4,#0x98]         ;163
0002c2  2300              MOVS     r3,#0                 ;169
0002c4  eb0000c7          ADD      r0,r0,r7,LSL #3       ;169
0002c8  ad13              ADD      r5,sp,#0x4c           ;169
0002ca  f8d0b00c          LDR      r11,[r0,#0xc]         ;166
0002ce  f8cdb00c          STR      r11,[sp,#0xc]         ;166
0002d2  f8d0a000          LDR      r10,[r0,#0]           ;167
0002d6  f8cda03c          STR      r10,[sp,#0x3c]        ;167
0002da  6e60              LDR      r0,[r4,#0x64]         ;167
0002dc  461a              MOV      r2,r3                 ;169
0002de  eb000889          ADD      r8,r0,r9,LSL #2       ;169
0002e2  f8dd0608          LDR      r0,[sp,#0x608]        ;169
0002e6  9000              STR      r0,[sp,#0]            ;169
0002e8  2101              MOVS     r1,#1                 ;169
0002ea  a812              ADD      r0,sp,#0x48           ;169
0002ec  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0002f0  6800              LDR      r0,[r0,#0]            ;169
0002f2  9002              STR      r0,[sp,#8]            ;169
0002f4  f105000c          ADD      r0,r5,#0xc            ;169
0002f8  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
0002fc  f1a0050c          SUB      r5,r0,#0xc            ;169
000300  f04f30ff          MOV      r0,#0xffffffff        ;169
000304  6028              STR      r0,[r5,#0]            ;169
000306  6068              STR      r0,[r5,#4]            ;169
000308  60a8              STR      r0,[r5,#8]            ;169
00030a  2000              MOVS     r0,#0                 ;169
00030c  6128              STR      r0,[r5,#0x10]         ;169
00030e  f1ba0f00          CMP      r10,#0                ;169
000312  bfa8              IT       GE                    ;169
000314  f1bb0f00          CMPGE    r11,#0                ;169
000318  da18              BGE      |L2.844|
00031a  217d              MOVS     r1,#0x7d              ;169
00031c  4877              LDR      r0,|L2.1276|
00031e  e9cd0100          STRD     r0,r1,[sp,#0]         ;169
000322  a377              ADR      r3,|L2.1280|
000324  a284              ADR      r2,|L2.1336|
000326  a188              ADR      r1,|L2.1352|
000328  2005              MOVS     r0,#5                 ;169
00032a  f7fffffe          BL       _Anki_Log
00032e  f000b9a7          B.W      |L2.1664|
                  |L2.818|
000332  21a3              MOVS     r1,#0xa3              ;163
000334  481e              LDR      r0,|L2.944|
000336  e9cd0100          STRD     r0,r1,[sp,#0]         ;163
00033a  a31e              ADR      r3,|L2.948|
00033c  a287              ADR      r2,|L2.1372|
00033e  a135              ADR      r1,|L2.1044|
000340  2005              MOVS     r0,#5                 ;163
000342  f7fffffe          BL       _Anki_Log
000346  f04f6080          MOV      r0,#0x4000000         ;163
00034a  e673              B        |L2.52|
                  |L2.844|
00034c  2000              MOVS     r0,#0                 ;163
00034e  9010              STR      r0,[sp,#0x40]         ;163
000350  f1ba0f01          CMP      r10,#1                ;163
000354  bfcc              ITE      GT                    ;163
000356  4650              MOVGT    r0,r10                ;163
000358  2001              MOVLE    r0,#1                 ;163
00035a  300f              ADDS     r0,r0,#0xf            ;163
00035c  f020070f          BIC      r7,r0,#0xf            ;163
000360  9800              LDR      r0,[sp,#0]            ;163
000362  901a              STR      r0,[sp,#0x68]         ;163
000364  a810              ADD      r0,sp,#0x40           ;163
000366  9019              STR      r0,[sp,#0x64]         ;163
000368  9802              LDR      r0,[sp,#8]            ;163
00036a  9011              STR      r0,[sp,#0x44]         ;163
00036c  2f00              CMP      r7,#0                 ;163
00036e  dc0a              BGT      |L2.902|
000370  f240310b          MOV      r1,#0x30b             ;163
000374  4882              LDR      r0,|L2.1408|
000376  e9cd0100          STRD     r0,r1,[sp,#0]         ;163
00037a  a361              ADR      r3,|L2.1280|
00037c  a26e              ADR      r2,|L2.1336|
00037e  a181              ADR      r1,|L2.1412|
000380  2005              MOVS     r0,#5                 ;163
000382  f7fffffe          BL       _Anki_Log
                  |L2.902|
000386  4658              MOV      r0,r11                ;163
000388  f1bb0f01          CMP      r11,#1                ;163
00038c  bfcc              ITE      GT                    ;163
00038e  4601              MOVGT    r1,r0                 ;163
000390  2101              MOVLE    r1,#1                 ;163
000392  60af              STR      r7,[r5,#8]            ;163
000394  434f              MULS     r7,r1,r7              ;163
000396  a811              ADD      r0,sp,#0x44           ;163
000398  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00039c  4602              MOV      r2,r0                 ;163
00039e  e9dd3019          LDRD     r3,r0,[sp,#0x64]      ;163
0003a2  4639              MOV      r1,r7                 ;163
0003a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0003a8  9910              LDR      r1,[sp,#0x40]         ;163
0003aa  0007              MOVS     r7,r0                 ;163
0003ac  9100              STR      r1,[sp,#0]            ;163
0003ae  e0ff              B        |L2.1456|
                  |L2.944|
                          DCD      ||.constdata||+0x117
                  |L2.948|
0003b4  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\lucasKanade_Slow.cpp",0
0003b8  6f726574
0003bc  6563685c
0003c0  76697369
0003c4  6f6e5c72
0003c8  6f626f74
0003cc  5c737263
0003d0  5c6c7563
0003d4  61734b61
0003d8  6e616465
0003dc  5f536c6f
0003e0  772e6370
0003e4  7000    
0003e6  00                DCB      0
0003e7  00                DCB      0
                  |L2.1000|
0003e8  54686973          DCB      "This object has already been initialized",0
0003ec  206f626a
0003f0  65637420
0003f4  68617320
0003f8  616c7265
0003fc  61647920
000400  6265656e
000404  20696e69
000408  7469616c
00040c  697a6564
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
                  |L2.1044|
000414  4c756361          DCB      "LucasKanadeTracker_Slow::InitializeTemplate",0
000418  734b616e
00041c  61646554
000420  7261636b
000424  65725f53
000428  6c6f773a
00042c  3a496e69
000430  7469616c
000434  697a6554
000438  656d706c
00043c  61746500
                  |L2.1088|
000440  54686973          DCB      "This object's constructor failed, so it cannot be initi"
000444  206f626a
000448  65637427
00044c  7320636f
000450  6e737472
000454  7563746f
000458  72206661
00045c  696c6564
000460  2c20736f
000464  20697420
000468  63616e6e
00046c  6f742062
000470  6520696e
000474  697469  
000477  616c697a          DCB      "alized",0
00047b  656400  
00047e  00                DCB      0
00047f  00                DCB      0
                  |L2.1152|
000480  74656d70          DCB      "template size doesn't match constructor",0
000484  6c617465
000488  2073697a
00048c  6520646f
000490  65736e27
000494  74206d61
000498  74636820
00049c  636f6e73
0004a0  74727563
0004a4  746f7200
                  |L2.1192|
0004a8  74656d70          DCB      "template rectangle is invalid or out of bounds",0
0004ac  6c617465
0004b0  20726563
0004b4  74616e67
0004b8  6c652069
0004bc  7320696e
0004c0  76616c69
0004c4  64206f72
0004c8  206f7574
0004cc  206f6620
0004d0  626f756e
0004d4  647300  
0004d7  00                DCB      0
                  |L2.1240|
0004d8  496e6974          DCB      "InitializeTemplate.allocate",0
0004dc  69616c69
0004e0  7a655465
0004e4  6d706c61
0004e8  74652e61
0004ec  6c6c6f63
0004f0  61746500
                  |L2.1268|
0004f4  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L2.1272|
0004f8  bf000000          DCFS     0xbf000000 ; -0.5
                  |L2.1276|
                          DCD      _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L2.1280|
000500  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000504  6f726574
000508  6563685c
00050c  636f6d6d
000510  6f6e5c69
000514  6e636c75
000518  64655c61
00051c  6e6b692f
000520  636f6d6d
000524  6f6e2f72
000528  6f626f74
00052c  2f617272
000530  617932  
000533  642e6800          DCB      "d.h",0
000537  00                DCB      0
                  |L2.1336|
000538  496e7661          DCB      "Invalid size",0
00053c  6c696420
000540  73697a65
000544  00      
000545  00                DCB      0
000546  00                DCB      0
000547  00                DCB      0
                  |L2.1352|
000548  41727261          DCB      "Array<Type>::Array",0
00054c  793c5479
000550  70653e3a
000554  3a417272
000558  617900  
00055b  00                DCB      0
                  |L2.1372|
00055c  436f756c          DCB      "Could not allocate A_full[iScale]",0
000560  64206e6f
000564  7420616c
000568  6c6f6361
00056c  74652041
000570  5f66756c
000574  6c5b6953
000578  63616c65
00057c  5d00    
00057e  00                DCB      0
00057f  00                DCB      0
                  |L2.1408|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L2.1412|
000584  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
000588  793c5479
00058c  70653e3a
000590  3a416c6c
000594  6f636174
000598  65427566
00059c  66657246
0005a0  726f6d4d
0005a4  656d6f72
0005a8  79537461
0005ac  636b00  
0005af  00                DCB      0
                  |L2.1456|
0005b0  9902              LDR      r1,[sp,#8]            ;163
0005b2  9111              STR      r1,[sp,#0x44]         ;163
0005b4  d010              BEQ      |L2.1496|
0005b6  9800              LDR      r0,[sp,#0]            ;163
0005b8  2810              CMP      r0,#0x10              ;163
0005ba  d221              BCS      |L2.1536|
0005bc  48f4              LDR      r0,|L2.2448|
0005be  f2403123          MOV      r1,#0x323             ;163
0005c2  f2af03c4          ADR      r3,|L2.1280|
0005c6  e9cd0100          STRD     r0,r1,[sp,#0]         ;163
0005ca  a2f2              ADR      r2,|L2.2452|
0005cc  a1f6              ADR      r1,|L2.2472|
0005ce  2005              MOVS     r0,#5                 ;163
0005d0  f7fffffe          BL       _Anki_Log
0005d4  f000b854          B.W      |L2.1664|
                  |L2.1496|
0005d8  48ed              LDR      r0,|L2.2448|
0005da  f240311e          MOV      r1,#0x31e             ;163
0005de  f2af03e0          ADR      r3,|L2.1280|
0005e2  e9cd0100          STRD     r0,r1,[sp,#0]         ;163
0005e6  a2f8              ADR      r2,|L2.2504|
0005e8  a1fe              ADR      r1,|L2.2532|
0005ea  2005              MOVS     r0,#5                 ;163
0005ec  f7fffffe          BL       _Anki_Log
0005f0  f04f30ff          MOV      r0,#0xffffffff        ;163
0005f4  6028              STR      r0,[r5,#0]            ;163
0005f6  6068              STR      r0,[r5,#4]            ;163
0005f8  60a8              STR      r0,[r5,#8]            ;163
0005fa  2000              MOVS     r0,#0                 ;163
0005fc  6128              STR      r0,[r5,#0x10]         ;163
0005fe  e03f              B        |L2.1664|
                  |L2.1536|
000600  a811              ADD      r0,sp,#0x44           ;163
000602  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000606  b160              CBZ      r0,|L2.1570|
000608  48e1              LDR      r0,|L2.2448|
00060a  f2403126          MOV      r1,#0x326             ;163
00060e  f2af1310          ADR      r3,|L2.1280|
000612  e9cd0100          STRD     r0,r1,[sp,#0]         ;163
000616  a2f9              ADR      r2,|L2.2556|
000618  a1e3              ADR      r1,|L2.2472|
00061a  2005              MOVS     r0,#5                 ;163
00061c  f7fffffe          BL       _Anki_Log
000620  e02e              B        |L2.1664|
                  |L2.1570|
000622  9911              LDR      r1,[sp,#0x44]         ;163
000624  e9c51703          STRD     r1,r7,[r5,#0xc]       ;163
000628  f107000f          ADD      r0,r7,#0xf            ;163
00062c  f020000f          BIC      r0,r0,#0xf            ;163
000630  e9c5ba00          STRD     r11,r10,[r5,#0]       ;163
000634  1bc0              SUBS     r0,r0,r7              ;163
000636  f1ba0f01          CMP      r10,#1                ;163
00063a  bfd8              IT       LE                    ;163
00063c  f04f0a01          MOVLE    r10,#1                ;163
000640  f10a010f          ADD      r1,r10,#0xf           ;163
000644  f021010f          BIC      r1,r1,#0xf            ;163
000648  fb01010b          MLA      r1,r1,r11,r0          ;163
00064c  9a00              LDR      r2,[sp,#0]            ;163
00064e  4291              CMP      r1,r2                 ;163
000650  bfdc              ITT      LE                    ;163
000652  1839              ADDLE    r1,r7,r0              ;163
000654  6129              STRLE    r1,[r5,#0x10]         ;163
000656  dd13              BLE      |L2.1664|
000658  4acd              LDR      r2,|L2.2448|
00065a  f2403035          MOV      r0,#0x335             ;163
00065e  f2af1360          ADR      r3,|L2.1280|
000662  e9cd2000          STRD     r2,r0,[sp,#0]         ;163
000666  9102              STR      r1,[sp,#8]            ;163
000668  a2ee              ADR      r2,|L2.2596|
00066a  a1de              ADR      r1,|L2.2532|
00066c  2005              MOVS     r0,#5                 ;163
00066e  f7fffffe          BL       _Anki_Log
000672  f04f30ff          MOV      r0,#0xffffffff        ;163
000676  6028              STR      r0,[r5,#0]            ;163
000678  6068              STR      r0,[r5,#4]            ;163
00067a  60a8              STR      r0,[r5,#8]            ;163
00067c  2000              MOVS     r0,#0                 ;163
00067e  6128              STR      r0,[r5,#0x10]         ;163
                  |L2.1664|
000680  6828              LDR      r0,[r5,#0]            ;163
000682  f8c80000          STR      r0,[r8,#0]            ;163
000686  6868              LDR      r0,[r5,#4]            ;163
000688  f8c80004          STR      r0,[r8,#4]            ;163
00068c  68a8              LDR      r0,[r5,#8]            ;163
00068e  f8c80008          STR      r0,[r8,#8]            ;163
000692  68e8              LDR      r0,[r5,#0xc]          ;163
000694  f8c8000c          STR      r0,[r8,#0xc]          ;163
000698  6928              LDR      r0,[r5,#0x10]         ;163
00069a  f8c80010          STR      r0,[r8,#0x10]         ;163
00069e  6e60              LDR      r0,[r4,#0x64]         ;163
0006a0  eb000089          ADD      r0,r0,r9,LSL #2       ;163
0006a4  6901              LDR      r1,[r0,#0x10]         ;163
0006a6  2900              CMP      r1,#0                 ;163
0006a8  f00083fc          BEQ.W    |L2.3748|
0006ac  6801              LDR      r1,[r0,#0]            ;163
0006ae  2900              CMP      r1,#0                 ;163
0006b0  bfa4              ITT      GE                    ;163
0006b2  6840              LDRGE    r0,[r0,#4]            ;163
0006b4  2800              CMPGE    r0,#0                 ;163
0006b6  f2c083f5          BLT.W    |L2.3748|
0006ba  f8d400cc          LDR      r0,[r4,#0xcc]         ;163
0006be  2300              MOVS     r3,#0                 ;174
0006c0  eb000589          ADD      r5,r0,r9,LSL #2       ;174
0006c4  461a              MOV      r2,r3                 ;174
0006c6  2101              MOVS     r1,#1                 ;174
0006c8  a812              ADD      r0,sp,#0x48           ;174
0006ca  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0006ce  6800              LDR      r0,[r0,#0]            ;174
0006d0  9000              STR      r0,[sp,#0]            ;174
0006d2  990f              LDR      r1,[sp,#0x3c]         ;174
0006d4  9803              LDR      r0,[sp,#0xc]          ;174
0006d6  f8dd3608          LDR      r3,[sp,#0x608]        ;174
0006da  fb00f201          MUL      r2,r0,r1              ;174
0006de  2101              MOVS     r1,#1                 ;174
0006e0  a80a              ADD      r0,sp,#0x28           ;174
0006e2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0006e6  6801              LDR      r1,[r0,#0]            ;174
0006e8  6029              STR      r1,[r5,#0]            ;174
0006ea  6841              LDR      r1,[r0,#4]            ;174
0006ec  6069              STR      r1,[r5,#4]            ;174
0006ee  6881              LDR      r1,[r0,#8]            ;174
0006f0  60a9              STR      r1,[r5,#8]            ;174
0006f2  68c1              LDR      r1,[r0,#0xc]          ;174
0006f4  60e9              STR      r1,[r5,#0xc]          ;174
0006f6  6900              LDR      r0,[r0,#0x10]         ;174
0006f8  6128              STR      r0,[r5,#0x10]         ;174
0006fa  f8d400cc          LDR      r0,[r4,#0xcc]         ;174
0006fe  eb000089          ADD      r0,r0,r9,LSL #2       ;174
000702  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000706  2800              CMP      r0,#0                 ;176
000708  f00083dc          BEQ.W    |L2.3780|
00070c  f8d400d0          LDR      r0,[r4,#0xd0]         ;153
000710  1c76              ADDS     r6,r6,#1              ;153
000712  42b0              CMP      r0,r6                 ;153
000714  f73fad5b          BGT      |L2.462|
                  |L2.1816|
000718  f2af2044          ADR      r0,|L2.1240|
00071c  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000720  a0d0              ADR      r0,|L2.2660|
000722  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000726  f20d5064          ADD      r0,sp,#0x564          ;186
00072a  f8dd1608          LDR      r1,[sp,#0x608]        ;186
00072e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000732  f20d5164          ADD      r1,sp,#0x564          ;186
000736  f50d60a4          ADD      r0,sp,#0x520          ;186
00073a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00073e  a0d0              ADR      r0,|L2.2688|
000740  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000744  2300              MOVS     r3,#0                 ;189
000746  461a              MOV      r2,r3                 ;189
000748  2101              MOVS     r1,#1                 ;189
00074a  f50d60bb          ADD      r0,sp,#0x5d8          ;189
00074e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000752  6800              LDR      r0,[r0,#0]            ;189
000754  9000              STR      r0,[sp,#0]            ;189
000756  e9d41235          LDRD     r1,r2,[r4,#0xd4]      ;189
00075a  f50d63a4          ADD      r3,sp,#0x520          ;189
00075e  a818              ADD      r0,sp,#0x60           ;189
000760  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000764  ad18              ADD      r5,sp,#0x60           ;190
000766  4628              MOV      r0,r5                 ;190
000768  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00076c  2800              CMP      r0,#0                 ;190
00076e  f00083b9          BEQ.W    |L2.3812|
000772  2100              MOVS     r1,#0                 ;190
000774  4628              MOV      r0,r5                 ;190
000776  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00077a  4601              MOV      r1,r0                 ;190
00077c  981a              LDR      r0,[sp,#0x68]         ;190
00077e  9b1c              LDR      r3,[sp,#0x70]         ;190
000780  4341              MULS     r1,r0,r1              ;190
000782  9a1a              LDR      r2,[sp,#0x68]         ;190
000784  2000              MOVS     r0,#0                 ;190
000786  fb003002          MLA      r0,r0,r2,r3           ;190
00078a  f7fffffe          BL       __aeabi_memclr4
                  |L2.1934|
00078e  ed940a4d          VLDR     s0,[r4,#0x134]        ;191
000792  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
000796  4606              MOV      r6,r0                 ;191
000798  ed940a4c          VLDR     s0,[r4,#0x130]        ;191
00079c  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
0007a0  4605              MOV      r5,r0                 ;191
0007a2  ed940a4f          VLDR     s0,[r4,#0x13c]        ;191
0007a6  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
0007aa  4607              MOV      r7,r0                 ;191
0007ac  ed940a4e          VLDR     s0,[r4,#0x138]        ;191
0007b0  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
0007b4  e9cd5600          STRD     r5,r6,[sp,#0]         ;191
0007b8  4602              MOV      r2,r0                 ;191
0007ba  463b              MOV      r3,r7                 ;191
0007bc  a918              ADD      r1,sp,#0x60           ;191
0007be  a81d              ADD      r0,sp,#0x74           ;191
0007c0  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
0007c4  f10d0974          ADD      r9,sp,#0x74           ;191
0007c8  eeb70a00          VMOV.F32 s0,#1.00000000        ;191
0007cc  e8b901ef          LDM      r9!,{r0-r3,r5-r8}     ;191
0007d0  f10d092c          ADD      r9,sp,#0x2c           ;191
0007d4  e8a901ef          STM      r9!,{r0-r3,r5-r8}     ;191
0007d8  ae25              ADD      r6,sp,#0x94           ;191
0007da  ce2f              LDM      r6!,{r0-r3,r5}        ;191
0007dc  ae13              ADD      r6,sp,#0x4c           ;191
0007de  c62f              STM      r6!,{r0-r3,r5}        ;191
0007e0  a80b              ADD      r0,sp,#0x2c           ;191
0007e2  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE3SetEf ; Anki::Embedded::ArraySlice<float>::Set(float)
0007e6  a0a6              ADR      r0,|L2.2688|
0007e8  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0007ec  f8d400d0          LDR      r0,[r4,#0xd0]         ;198
0007f0  2600              MOVS     r6,#0                 ;198
0007f2  2800              CMP      r0,#0                 ;198
0007f4  f3418571          BLE.W    |L2.8922|
0007f8  ed9faaaa          VLDR     s20,|L2.2724|
0007fc  eef0aa00          VMOV.F32 s21,#2.00000000       ;343
000800  eddf8aa9          VLDR     s17,|L2.2728|
                  |L2.2052|
000804  f50d61a4          ADD      r1,sp,#0x520          ;199
000808  f50d60b0          ADD      r0,sp,#0x580          ;199
00080c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000810  f50d61b0          ADD      r1,sp,#0x580          ;199
000814  a85b              ADD      r0,sp,#0x16c          ;199
000816  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00081a  f8d40098          LDR      r0,[r4,#0x98]         ;199
00081e  eb060546          ADD      r5,r6,r6,LSL #1       ;199
000822  eb0000c5          ADD      r0,r0,r5,LSL #3       ;199
000826  2701              MOVS     r7,#1                 ;204
000828  68c1              LDR      r1,[r0,#0xc]          ;201
00082a  f8cd1480          STR      r1,[sp,#0x480]        ;201
00082e  6800              LDR      r0,[r0,#0]            ;201
000830  f8cd047c          STR      r0,[sp,#0x47c]        ;204
000834  fa07f006          LSL      r0,r7,r6              ;204
000838  ee000a10          VMOV     s0,r0                 ;204
00083c  a09b              ADR      r0,|L2.2732|
00083e  eeb8bac0          VCVT.F32.S32 s22,s0                ;204
000842  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000846  2300              MOVS     r3,#0                 ;207
000848  461a              MOV      r2,r3                 ;207
00084a  2101              MOVS     r1,#1                 ;207
00084c  f50d60ba          ADD      r0,sp,#0x5d0          ;207
000850  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000854  f8d41098          LDR      r1,[r4,#0x98]         ;207
000858  6803              LDR      r3,[r0,#0]            ;207
00085a  eb0101c5          ADD      r1,r1,r5,LSL #3       ;207
00085e  aa5b              ADD      r2,sp,#0x16c          ;207
000860  a8a5              ADD      r0,sp,#0x294          ;207
000862  f7fffffe          BL       _ZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ERNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Meshgrid<float>::EvaluateX2(Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
000866  2300              MOVS     r3,#0                 ;208
000868  461a              MOV      r2,r3                 ;208
00086a  2101              MOVS     r1,#1                 ;208
00086c  f50d60ba          ADD      r0,sp,#0x5d0          ;208
000870  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000874  f8d41098          LDR      r1,[r4,#0x98]         ;208
000878  6803              LDR      r3,[r0,#0]            ;208
00087a  eb0101c5          ADD      r1,r1,r5,LSL #3       ;208
00087e  aa5b              ADD      r2,sp,#0x16c          ;208
000880  a8a0              ADD      r0,sp,#0x280          ;208
000882  f7fffffe          BL       _ZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ERNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Meshgrid<float>::EvaluateY2(Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
000886  a089              ADR      r0,|L2.2732|
000888  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00088c  2300              MOVS     r3,#0                 ;213
00088e  461a              MOV      r2,r3                 ;213
000890  2101              MOVS     r1,#1                 ;213
000892  f50d60ba          ADD      r0,sp,#0x5d0          ;213
000896  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00089a  6800              LDR      r0,[r0,#0]            ;213
00089c  9000              STR      r0,[sp,#0]            ;213
00089e  ab5b              ADD      r3,sp,#0x16c          ;213
0008a0  f20d503c          ADD      r0,sp,#0x53c          ;213
0008a4  f8dd247c          LDR      r2,[sp,#0x47c]        ;213
0008a8  f8dd1480          LDR      r1,[sp,#0x480]        ;213
0008ac  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0008b0  2300              MOVS     r3,#0                 ;214
0008b2  461a              MOV      r2,r3                 ;214
0008b4  2101              MOVS     r1,#1                 ;214
0008b6  f20d50d4          ADD      r0,sp,#0x5d4          ;214
0008ba  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0008be  6800              LDR      r0,[r0,#0]            ;214
0008c0  9000              STR      r0,[sp,#0]            ;214
0008c2  ab5b              ADD      r3,sp,#0x16c          ;214
0008c4  f50d60aa          ADD      r0,sp,#0x550          ;214
0008c8  f8dd247c          LDR      r2,[sp,#0x47c]        ;214
0008cc  f8dd1480          LDR      r1,[sp,#0x480]        ;214
0008d0  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0008d4  a07e              ADR      r0,|L2.2768|
0008d6  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0008da  f04f0800          MOV      r8,#0                 ;219
0008de  f50d60aa          ADD      r0,sp,#0x550          ;219
0008e2  f20d513c          ADD      r1,sp,#0x53c          ;219
0008e6  f8cd8000          STR      r8,[sp,#0]            ;219
0008ea  e9cd1001          STRD     r1,r0,[sp,#4]         ;219
0008ee  2301              MOVS     r3,#1                 ;219
0008f0  eeb00a69          VMOV.F32 s0,s19                ;219
0008f4  aaa0              ADD      r2,sp,#0x280          ;219
0008f6  a9a5              ADD      r1,sp,#0x294          ;219
0008f8  f10400e4          ADD      r0,r4,#0xe4           ;219
0008fc  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3215TransformPointsERKNS0_5ArrayIfEES6_fbbRS4_S7_ ; Anki::Embedded::Transformations::PlanarTransformation_f32::TransformPoints(const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, float, bool, bool, Anki::Embedded::Array<float>&, Anki::Embedded::Array<float>&) const
000900  2800              CMP      r0,#0                 ;219
000902  f47fab97          BNE      |L2.52|
000906  a072              ADR      r0,|L2.2768|
000908  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00090c  2300              MOVS     r3,#0                 ;223
00090e  461a              MOV      r2,r3                 ;223
000910  2101              MOVS     r1,#1                 ;223
000912  f20d50d4          ADD      r0,sp,#0x5d4          ;223
000916  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00091a  6800              LDR      r0,[r0,#0]            ;223
00091c  9000              STR      r0,[sp,#0]            ;223
00091e  ab5b              ADD      r3,sp,#0x16c          ;223
000920  a88e              ADD      r0,sp,#0x238          ;223
000922  f8dd247c          LDR      r2,[sp,#0x47c]        ;223
000926  f8dd1480          LDR      r1,[sp,#0x480]        ;223
00092a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00092e  2300              MOVS     r3,#0                 ;224
000930  461a              MOV      r2,r3                 ;224
000932  2101              MOVS     r1,#1                 ;224
000934  f50d60ba          ADD      r0,sp,#0x5d0          ;224
000938  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00093c  6800              LDR      r0,[r0,#0]            ;224
00093e  9000              STR      r0,[sp,#0]            ;224
000940  ab5b              ADD      r3,sp,#0x16c          ;224
000942  a889              ADD      r0,sp,#0x224          ;224
000944  f8dd247c          LDR      r2,[sp,#0x47c]        ;224
000948  f8dd1480          LDR      r1,[sp,#0x480]        ;224
00094c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000950  a068              ADR      r0,|L2.2804|
000952  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000956  6e60              LDR      r0,[r4,#0x64]         ;226
000958  eb060586          ADD      r5,r6,r6,LSL #2       ;226
00095c  eb000385          ADD      r3,r0,r5,LSL #2       ;226
000960  f8cd8000          STR      r8,[sp,#0]            ;227
000964  f50d62aa          ADD      r2,sp,#0x550          ;227
000968  f20d513c          ADD      r1,sp,#0x53c          ;227
00096c  f8cd8004          STR      r8,[sp,#4]            ;227
000970  f8dd0604          LDR      r0,[sp,#0x604]        ;227
000974  f7fffffe          BL       _ZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_ ; Anki::Embedded::Interp2<unsigned char, unsigned char>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
000978  2800              CMP      r0,#0                 ;227
00097a  f47fab5b          BNE      |L2.52|
00097e  a05d              ADR      r0,|L2.2804|
000980  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000984  a064              ADR      r0,|L2.2840|
000986  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00098a  1ef9              SUBS     r1,r7,#3              ;234
00098c  2001              MOVS     r0,#1                 ;234
00098e  e0d9              B        |L2.2884|
                  |L2.2448|
                          DCD      _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L2.2452|
000994  4e656761          DCB      "Negative dimension",0
000998  74697665
00099c  2064696d
0009a0  656e7369
0009a4  6f6e00  
0009a7  00                DCB      0
                  |L2.2472|
0009a8  41727261          DCB      "Array<Type>::InitializeBuffer",0
0009ac  793c5479
0009b0  70653e3a
0009b4  3a496e69
0009b8  7469616c
0009bc  697a6542
0009c0  75666665
0009c4  7200    
0009c6  00                DCB      0
0009c7  00                DCB      0
                  |L2.2504|
0009c8  696e7075          DCB      "input data buffer is NULL",0
0009cc  74206461
0009d0  74612062
0009d4  75666665
0009d8  72206973
0009dc  204e554c
0009e0  4c00    
0009e2  00                DCB      0
0009e3  00                DCB      0
                  |L2.2532|
0009e4  416e6b69          DCB      "Anki.Array2d.initialize",0
0009e8  2e417272
0009ec  61793264
0009f0  2e696e69
0009f4  7469616c
0009f8  697a6500
                  |L2.2556|
0009fc  46696c6c          DCB      "Fill patterns not supported for Array",0
000a00  20706174
000a04  7465726e
000a08  73206e6f
000a0c  74207375
000a10  70706f72
000a14  74656420
000a18  666f7220
000a1c  41727261
000a20  7900    
000a22  00                DCB      0
000a23  00                DCB      0
                  |L2.2596|
000a24  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
000a28  74206461
000a2c  74612062
000a30  75666665
000a34  72206973
000a38  206e6f74
000a3c  206c6172
000a40  67652065
000a44  6e6f7567
000a48  682e2025
000a4c  64206279
000a50  74657320
000a54  69732072
000a58  657175  
000a5b  69726564          DCB      "ired.",0
000a5f  2e00    
000a61  00                DCB      0
000a62  00                DCB      0
000a63  00                DCB      0
                  |L2.2660|
000a64  496e6974          DCB      "InitializeTemplate.initA",0
000a68  69616c69
000a6c  7a655465
000a70  6d706c61
000a74  74652e69
000a78  6e697441
000a7c  00      
000a7d  00                DCB      0
000a7e  00                DCB      0
000a7f  00                DCB      0
                  |L2.2688|
000a80  496e6974          DCB      "InitializeTemplate.setTemplateMask",0
000a84  69616c69
000a88  7a655465
000a8c  6d706c61
000a90  74652e73
000a94  65745465
000a98  6d706c61
000a9c  74654d61
000aa0  736b00  
000aa3  00                DCB      0
                  |L2.2724|
000aa4  43ff0000          DCFS     0x43ff0000 ; 510
                  |L2.2728|
000aa8  00000000          DCFS     0x00000000 ; 0
                  |L2.2732|
000aac  496e6974          DCB      "InitializeTemplate.evaluateMeshgrid",0
000ab0  69616c69
000ab4  7a655465
000ab8  6d706c61
000abc  74652e65
000ac0  76616c75
000ac4  6174654d
000ac8  65736867
000acc  72696400
                  |L2.2768|
000ad0  496e6974          DCB      "InitializeTemplate.transformPoints",0
000ad4  69616c69
000ad8  7a655465
000adc  6d706c61
000ae0  74652e74
000ae4  72616e73
000ae8  666f726d
000aec  506f696e
000af0  747300  
000af3  00                DCB      0
                  |L2.2804|
000af4  496e6974          DCB      "InitializeTemplate.image.interp2",0
000af8  69616c69
000afc  7a655465
000b00  6d706c61
000b04  74652e69
000b08  6d616765
000b0c  2e696e74
000b10  65727032
000b14  00      
000b15  00                DCB      0
000b16  00                DCB      0
000b17  00                DCB      0
                  |L2.2840|
000b18  496e6974          DCB      "InitializeTemplate.ComputeImageGradients",0
000b1c  69616c69
000b20  7a655465
000b24  6d706c61
000b28  74652e43
000b2c  6f6d7075
000b30  7465496d
000b34  61676547
000b38  72616469
000b3c  656e7473
000b40  00      
000b41  00                DCB      0
000b42  00                DCB      0
000b43  00                DCB      0
                  |L2.2884|
000b44  e9cd0100          STRD     r0,r1,[sp,#0]         ;234
000b48  460b              MOV      r3,r1                 ;234
000b4a  4602              MOV      r2,r0                 ;234
000b4c  a98e              ADD      r1,sp,#0x238          ;234
000b4e  a81d              ADD      r0,sp,#0x74           ;234
000b50  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
000b54  a87c              ADD      r0,sp,#0x1f0          ;234
000b56  9006              STR      r0,[sp,#0x18]         ;234
000b58  6e60              LDR      r0,[r4,#0x64]         ;234
000b5a  2201              MOVS     r2,#1                 ;234
000b5c  eb000185          ADD      r1,r0,r5,LSL #2       ;234
000b60  1f38              SUBS     r0,r7,#4              ;234
000b62  2700              MOVS     r7,#0                 ;234
000b64  e9cd7000          STRD     r7,r0,[sp,#0]         ;234
000b68  1043              ASRS     r3,r0,#1              ;234
000b6a  a837              ADD      r0,sp,#0xdc           ;234
000b6c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIhEclEiiii ; Anki::Embedded::Array<unsigned char>::operator ()(int, int, int, int)
000b70  f10d0cec          ADD      r12,sp,#0xec          ;234
000b74  f10d0efc          ADD      lr,sp,#0xfc           ;234
000b78  e8bc000f          LDM      r12!,{r0-r3}          ;234
000b7c  f10d0cdc          ADD      r12,sp,#0xdc          ;234
000b80  e8bc0f00          LDM      r12!,{r8-r11}         ;234
000b84  f8cdb014          STR      r11,[sp,#0x14]        ;234
000b88  e9cd9a03          STRD     r9,r10,[sp,#0xc]      ;234
000b8c  e8be1e00          LDM      lr!,{r9-r12}          ;234
000b90  e9cd9a00          STRD     r9,r10,[sp,#0]        ;234
000b94  f8cdb008          STR      r11,[sp,#8]           ;234
000b98  e9dd9a03          LDRD     r9,r10,[sp,#0xc]      ;234
000b9c  f50d7e00          ADD      lr,sp,#0x200          ;234
000ba0  f8ddb014          LDR      r11,[sp,#0x14]        ;234
000ba4  e8ae000f          STM      lr!,{r0-r3}           ;234
000ba8  a87c              ADD      r0,sp,#0x1f0          ;234
000baa  1e7a              SUBS     r2,r7,#1              ;234
000bac  e8a00f00          STM      r0!,{r8-r11}          ;234
000bb0  e9dd9a00          LDRD     r9,r10,[sp,#0]        ;234
000bb4  a884              ADD      r0,sp,#0x210          ;234
000bb6  f8ddb008          LDR      r11,[sp,#8]           ;234
000bba  e8a01e00          STM      r0!,{r9-r12}          ;234
000bbe  f88d7220          STRB     r7,[sp,#0x220]        ;234
000bc2  9806              LDR      r0,[sp,#0x18]         ;234
000bc4  9044              STR      r0,[sp,#0x110]        ;234
000bc6  a86f              ADD      r0,sp,#0x1bc          ;234
000bc8  9006              STR      r0,[sp,#0x18]         ;234
000bca  6e60              LDR      r0,[r4,#0x64]         ;234
000bcc  eb000185          ADD      r1,r0,r5,LSL #2       ;234
000bd0  2002              MOVS     r0,#2                 ;234
000bd2  e9cd0200          STRD     r0,r2,[sp,#0]         ;234
000bd6  1f03              SUBS     r3,r0,#4              ;234
000bd8  2201              MOVS     r2,#1                 ;234
000bda  a82a              ADD      r0,sp,#0xa8           ;234
000bdc  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIhEclEiiii ; Anki::Embedded::Array<unsigned char>::operator ()(int, int, int, int)
000be0  f10d0cb8          ADD      r12,sp,#0xb8          ;234
000be4  f50d7ee6          ADD      lr,sp,#0x1cc          ;234
000be8  e8bc000f          LDM      r12!,{r0-r3}          ;234
000bec  f10d0ca8          ADD      r12,sp,#0xa8          ;234
000bf0  e8bc0f00          LDM      r12!,{r8-r11}         ;234
000bf4  f8cdb014          STR      r11,[sp,#0x14]        ;234
000bf8  e9cd9a03          STRD     r9,r10,[sp,#0xc]      ;234
000bfc  e9dd9a33          LDRD     r9,r10,[sp,#0xcc]     ;234
000c00  f8ddc0c8          LDR      r12,[sp,#0xc8]        ;234
000c04  e9cd9a00          STRD     r9,r10,[sp,#0]        ;234
000c08  f8ddb0d4          LDR      r11,[sp,#0xd4]        ;234
000c0c  f8cdb008          STR      r11,[sp,#8]           ;234
000c10  e9dd9a03          LDRD     r9,r10,[sp,#0xc]      ;234
000c14  f8ddb014          LDR      r11,[sp,#0x14]        ;234
000c18  e8ae000f          STM      lr!,{r0-r3}           ;234
000c1c  a86f              ADD      r0,sp,#0x1bc          ;234
000c1e  f10d0e7c          ADD      lr,sp,#0x7c           ;234
000c22  e8a00f00          STM      r0!,{r8-r11}          ;234
000c26  e9dd9a00          LDRD     r9,r10,[sp,#0]        ;234
000c2a  e9cd9a78          STRD     r9,r10,[sp,#0x1e0]    ;234
000c2e  f8ddb008          LDR      r11,[sp,#8]           ;234
000c32  f8cdc1dc          STR      r12,[sp,#0x1dc]       ;234
000c36  f8cdb1e8          STR      r11,[sp,#0x1e8]       ;234
000c3a  f88d71ec          STRB     r7,[sp,#0x1ec]        ;234
000c3e  e8be100e          LDM      lr!,{r1-r3,r12}       ;234
000c42  9806              LDR      r0,[sp,#0x18]         ;234
000c44  e89e0f00          LDM      lr,{r8-r11}           ;234
000c48  e88d100e          STM      sp,{r1-r3,r12}        ;234
000c4c  a904              ADD      r1,sp,#0x10           ;234
000c4e  e8a10f00          STM      r1!,{r8-r11}          ;234
000c52  e9dd1227          LDRD     r1,r2,[sp,#0x9c]      ;234
000c56  e9cd1208          STRD     r1,r2,[sp,#0x20]      ;234
000c5a  9b29              LDR      r3,[sp,#0xa4]         ;234
000c5c  930a              STR      r3,[sp,#0x28]         ;234
000c5e  e9dd231d          LDRD     r2,r3,[sp,#0x74]      ;234
000c62  9944              LDR      r1,[sp,#0x110]        ;234
000c64  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8SubtractIhffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Subtract<unsigned char, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
000c68  f50d790e          ADD      r9,sp,#0x238          ;236
000c6c  f50d6097          ADD      r0,sp,#0x4b8          ;236
000c70  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;236
000c74  e88d110e          STM      sp,{r1-r3,r8,r12}     ;236
000c78  4669              MOV      r1,sp                 ;236
000c7a  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000c7e  ee8b8a0a          VDIV.F32 s16,s22,s20           ;236
000c82  f8807030          STRB     r7,[r0,#0x30]         ;236
000c86  901f              STR      r0,[sp,#0x7c]         ;236
000c88  e9dd0191          LDRD     r0,r1,[sp,#0x244]     ;236
000c8c  e9cd0100          STRD     r0,r1,[sp,#0]         ;236
000c90  e9dd128e          LDRD     r1,r2,[sp,#0x238]     ;236
000c94  f20d40ec          ADD      r0,sp,#0x4ec          ;236
000c98  9b90              LDR      r3,[sp,#0x240]        ;236
000c9a  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
000c9e  f1000110          ADD      r1,r0,#0x10           ;236
000ca2  e8900f00          LDM      r0,{r8-r11}           ;236
000ca6  e891100e          LDM      r1,{r1-r3,r12}        ;236
000caa  f8cdb000          STR      r11,[sp,#0]           ;236
000cae  f8cd8028          STR      r8,[sp,#0x28]         ;236
000cb2  e9cd9a1d          STRD     r9,r10,[sp,#0x74]     ;236
000cb6  f1000820          ADD      r8,r0,#0x20           ;236
000cba  6b00              LDR      r0,[r0,#0x30]         ;236
000cbc  e8980f00          LDM      r8,{r8-r11}           ;236
000cc0  e9cdb008          STRD     r11,r0,[sp,#0x20]     ;236
000cc4  a801              ADD      r0,sp,#4              ;236
000cc6  f8cda01c          STR      r10,[sp,#0x1c]        ;236
000cca  e8a0100e          STM      r0!,{r1-r3,r12}       ;236
000cce  e9cd8905          STRD     r8,r9,[sp,#0x14]      ;236
000cd2  e9dd301e          LDRD     r3,r0,[sp,#0x78]      ;236
000cd6  eeb00a48          VMOV.F32 s0,s16                ;236
000cda  9a1d              LDR      r2,[sp,#0x74]         ;236
000cdc  990a              LDR      r1,[sp,#0x28]         ;236
000cde  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)
000ce2  1eb9              SUBS     r1,r7,#2              ;238
000ce4  2001              MOVS     r0,#1                 ;238
000ce6  e9cd0100          STRD     r0,r1,[sp,#0]         ;238
000cea  460b              MOV      r3,r1                 ;238
000cec  4602              MOV      r2,r0                 ;238
000cee  a989              ADD      r1,sp,#0x224          ;238
000cf0  a81d              ADD      r0,sp,#0x74           ;238
000cf2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
000cf6  a86f              ADD      r0,sp,#0x1bc          ;238
000cf8  9006              STR      r0,[sp,#0x18]         ;238
000cfa  6e60              LDR      r0,[r4,#0x64]         ;238
000cfc  1eba              SUBS     r2,r7,#2              ;238
000cfe  eb000185          ADD      r1,r0,r5,LSL #2       ;238
000d02  2001              MOVS     r0,#1                 ;238
000d04  e9cd0200          STRD     r0,r2,[sp,#0]         ;238
000d08  1f03              SUBS     r3,r0,#4              ;238
000d0a  2200              MOVS     r2,#0                 ;238
000d0c  a837              ADD      r0,sp,#0xdc           ;238
000d0e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIhEclEiiii ; Anki::Embedded::Array<unsigned char>::operator ()(int, int, int, int)
000d12  f10d0bec          ADD      r11,sp,#0xec          ;238
000d16  f8ddc0dc          LDR      r12,[sp,#0xdc]        ;238
000d1a  e8bb000f          LDM      r11!,{r0-r3}          ;238
000d1e  e9dd8938          LDRD     r8,r9,[sp,#0xe0]      ;238
000d22  f8dda0e8          LDR      r10,[sp,#0xe8]        ;238
000d26  f8cda014          STR      r10,[sp,#0x14]        ;238
000d2a  f10d0efc          ADD      lr,sp,#0xfc           ;238
000d2e  e9cd8903          STRD     r8,r9,[sp,#0xc]       ;238
000d32  e8be0f00          LDM      lr!,{r8-r11}          ;238
000d36  f8cda008          STR      r10,[sp,#8]           ;238
000d3a  e9cd8900          STRD     r8,r9,[sp,#0]         ;238
000d3e  e9dd8903          LDRD     r8,r9,[sp,#0xc]       ;238
000d42  f8dda014          LDR      r10,[sp,#0x14]        ;238
000d46  f50d7ee6          ADD      lr,sp,#0x1cc          ;238
000d4a  f8cdc1bc          STR      r12,[sp,#0x1bc]       ;238
000d4e  f8cda1c8          STR      r10,[sp,#0x1c8]       ;238
000d52  e8ae000f          STM      lr!,{r0-r3}           ;238
000d56  e9cd8970          STRD     r8,r9,[sp,#0x1c0]     ;238
000d5a  e9dd8900          LDRD     r8,r9,[sp,#0]         ;238
000d5e  f8dda008          LDR      r10,[sp,#8]           ;238
000d62  e88e0f00          STM      lr,{r8-r11}           ;238
000d66  f88d71ec          STRB     r7,[sp,#0x1ec]        ;238
000d6a  9806              LDR      r0,[sp,#0x18]         ;238
000d6c  9044              STR      r0,[sp,#0x110]        ;238
000d6e  6e60              LDR      r0,[r4,#0x64]         ;238
000d70  1eba              SUBS     r2,r7,#2              ;238
000d72  eb000185          ADD      r1,r0,r5,LSL #2       ;238
000d76  2001              MOVS     r0,#1                 ;238
000d78  e9cd0200          STRD     r0,r2,[sp,#0]         ;238
000d7c  1e83              SUBS     r3,r0,#2              ;238
000d7e  f50d78f8          ADD      r8,sp,#0x1f0          ;238
000d82  2202              MOVS     r2,#2                 ;238
000d84  a82a              ADD      r0,sp,#0xa8           ;238
000d86  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIhEclEiiii ; Anki::Embedded::Array<unsigned char>::operator ()(int, int, int, int)
000d8a  e9ddb02c          LDRD     r11,r0,[sp,#0xb0]     ;238
000d8e  e9dd122f          LDRD     r1,r2,[sp,#0xbc]      ;238
000d92  e9dd9a2a          LDRD     r9,r10,[sp,#0xa8]     ;238
000d96  f10d0e10          ADD      lr,sp,#0x10           ;238
000d9a  f8ddc0b8          LDR      r12,[sp,#0xb8]        ;238
000d9e  9b31              LDR      r3,[sp,#0xc4]         ;238
000da0  e8ae1e00          STM      lr!,{r9-r12}          ;238
000da4  f10d0ec8          ADD      lr,sp,#0xc8           ;238
000da8  e8be1e00          LDM      lr!,{r9-r12}          ;238
000dac  e88d1e00          STM      sp,{r9-r12}           ;238
000db0  f10d0e10          ADD      lr,sp,#0x10           ;238
000db4  e8be1e00          LDM      lr!,{r9-r12}          ;238
000db8  9383              STR      r3,[sp,#0x20c]        ;238
000dba  e9cdb07e          STRD     r11,r0,[sp,#0x1f8]    ;238
000dbe  f8cdc200          STR      r12,[sp,#0x200]       ;238
000dc2  e9cd1281          STRD     r1,r2,[sp,#0x204]     ;238
000dc6  e9cd9a7c          STRD     r9,r10,[sp,#0x1f0]    ;238
000dca  e89d1e00          LDM      sp,{r9-r12}           ;238
000dce  a884              ADD      r0,sp,#0x210          ;238
000dd0  f10d0e7c          ADD      lr,sp,#0x7c           ;238
000dd4  e8a01e00          STM      r0!,{r9-r12}          ;238
000dd8  f88d7220          STRB     r7,[sp,#0x220]        ;238
000ddc  e8be1e0f          LDM      lr!,{r0-r3,r9-r12}    ;238
000de0  e88d1e0f          STM      sp,{r0-r3,r9-r12}     ;238
000de4  e9dd0127          LDRD     r0,r1,[sp,#0x9c]      ;238
000de8  9a29              LDR      r2,[sp,#0xa4]         ;238
000dea  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;238
000dee  920a              STR      r2,[sp,#0x28]         ;238
000df0  e9dd231d          LDRD     r2,r3,[sp,#0x74]      ;238
000df4  4640              MOV      r0,r8                 ;238
000df6  9944              LDR      r1,[sp,#0x110]        ;238
000df8  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8SubtractIhffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Subtract<unsigned char, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
000dfc  f50d7909          ADD      r9,sp,#0x224          ;240
000e00  f50d6097          ADD      r0,sp,#0x4b8          ;240
000e04  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;240
000e08  e88d110e          STM      sp,{r1-r3,r8,r12}     ;240
000e0c  4669              MOV      r1,sp                 ;240
000e0e  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000e12  f8807030          STRB     r7,[r0,#0x30]         ;240
000e16  901f              STR      r0,[sp,#0x7c]         ;240
000e18  e9dd018c          LDRD     r0,r1,[sp,#0x230]     ;240
000e1c  e9cd0100          STRD     r0,r1,[sp,#0]         ;240
000e20  e9dd1289          LDRD     r1,r2,[sp,#0x224]     ;240
000e24  f20d40ec          ADD      r0,sp,#0x4ec          ;240
000e28  9b8b              LDR      r3,[sp,#0x22c]        ;240
000e2a  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
000e2e  4683              MOV      r11,r0                ;240
000e30  f8509b0c          LDR      r9,[r0],#0xc          ;240
000e34  e9db8701          LDRD     r8,r7,[r11,#4]        ;240
000e38  e890100f          LDM      r0,{r0-r3,r12}        ;240
000e3c  970a              STR      r7,[sp,#0x28]         ;240
000e3e  e9cd981d          STRD     r9,r8,[sp,#0x74]      ;240
000e42  f10b0b20          ADD      r11,r11,#0x20         ;240
000e46  eeb00a48          VMOV.F32 s0,s16                ;240
000e4a  e89b0f80          LDM      r11,{r7-r11}          ;240
000e4e  e88d100f          STM      sp,{r0-r3,r12}        ;240
000e52  a805              ADD      r0,sp,#0x14           ;240
000e54  e8a00f80          STM      r0!,{r7-r11}          ;240
000e58  e9dd201e          LDRD     r2,r0,[sp,#0x78]      ;240
000e5c  9b0a              LDR      r3,[sp,#0x28]         ;240
000e5e  991d              LDR      r1,[sp,#0x74]         ;240
000e60  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)
000e64  f2af3050          ADR      r0,|L2.2840|
000e68  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000e6c  a0fe              ADR      r0,|L2.4712|
000e6e  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000e72  f10400e4          ADD      r0,r4,#0xe4           ;245
000e76  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000e7a  f5b07f00          CMP      r0,#0x200             ;245
000e7e  d03f              BEQ      |L2.3840|
000e80  f10400e4          ADD      r0,r4,#0xe4           ;253
000e84  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000e88  f5b06fc0          CMP      r0,#0x600             ;253
000e8c  f00080b9          BEQ.W    |L2.4098|
000e90  f10400e4          ADD      r0,r4,#0xe4           ;253
000e94  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000e98  f5b06f00          CMP      r0,#0x800             ;253
000e9c  f00080b1          BEQ.W    |L2.4098|
000ea0  f000be89          B.W      |L2.7094|
                  |L2.3748|
000ea4  48f7              LDR      r0,|L2.4740|
000ea6  21ab              MOVS     r1,#0xab              ;171
000ea8  f6af23f8          ADR      r3,|L2.948|
000eac  a2f6              ADR      r2,|L2.4744|
000eae  e9cd0100          STRD     r0,r1,[sp,#0]         ;171
000eb2  f6af21a0          ADR      r1,|L2.1044|
000eb6  2005              MOVS     r0,#5                 ;171
000eb8  f7fffffe          BL       _Anki_Log
000ebc  f04f6080          MOV      r0,#0x4000000         ;171
000ec0  f7ffb8b8          B        |L2.52|
                  |L2.3780|
000ec4  48ef              LDR      r0,|L2.4740|
000ec6  21b0              MOVS     r1,#0xb0              ;176
000ec8  f6af3318          ADR      r3,|L2.948|
000ecc  a2f9              ADR      r2,|L2.4788|
000ece  e9cd0100          STRD     r0,r1,[sp,#0]         ;176
000ed2  f6af21c0          ADR      r1,|L2.1044|
000ed6  2005              MOVS     r0,#5                 ;176
000ed8  f7fffffe          BL       _Anki_Log
000edc  f04f6080          MOV      r0,#0x4000000         ;176
000ee0  f7ffb8a8          B        |L2.52|
                  |L2.3812|
000ee4  f2402176          MOV      r1,#0x276             ;176
000ee8  48fc              LDR      r0,|L2.4828|
000eea  4bfd              LDR      r3,|L2.4832|
000eec  e9cd0100          STRD     r0,r1,[sp,#0]         ;176
000ef0  f10302a8          ADD      r2,r3,#0xa8           ;176
000ef4  f1a20118          SUB      r1,r2,#0x18           ;176
000ef8  2005              MOVS     r0,#5                 ;176
000efa  f7fffffe          BL       _Anki_Log
000efe  e446              B        |L2.1934|
                  |L2.3840|
000f00  2300              MOVS     r3,#0                 ;246
000f02  461a              MOV      r2,r3                 ;246
000f04  2101              MOVS     r1,#1                 ;246
000f06  a807              ADD      r0,sp,#0x1c           ;246
000f08  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000f0c  6800              LDR      r0,[r0,#0]            ;246
000f0e  9000              STR      r0,[sp,#0]            ;246
000f10  f8dd1480          LDR      r1,[sp,#0x480]        ;246
000f14  f8dd047c          LDR      r0,[sp,#0x47c]        ;246
000f18  ab5b              ADD      r3,sp,#0x16c          ;246
000f1a  fb01f200          MUL      r2,r1,r0              ;246
000f1e  2101              MOVS     r1,#1                 ;246
000f20  a802              ADD      r0,sp,#8              ;246
000f22  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000f26  aa02              ADD      r2,sp,#8              ;248
000f28  a98e              ADD      r1,sp,#0x238          ;248
000f2a  2000              MOVS     r0,#0                 ;248
000f2c  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000f30  6b20              LDR      r0,[r4,#0x30]         ;248
000f32  2700              MOVS     r7,#0                 ;249
000f34  eb000185          ADD      r1,r0,r5,LSL #2       ;249
000f38  f04f30ff          MOV      r0,#0xffffffff        ;249
000f3c  e9cd7000          STRD     r7,r0,[sp,#0]         ;249
000f40  463b              MOV      r3,r7                 ;249
000f42  463a              MOV      r2,r7                 ;249
000f44  a837              ADD      r0,sp,#0xdc           ;249
000f46  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
000f4a  f10d0cdc          ADD      r12,sp,#0xdc          ;249
000f4e  e8bc0f0f          LDM      r12!,{r0-r3,r8-r11}   ;249
000f52  f10d0c74          ADD      r12,sp,#0x74          ;249
000f56  e8ac0f0f          STM      r12!,{r0-r3,r8-r11}   ;249
000f5a  f10d09fc          ADD      r9,sp,#0xfc           ;249
000f5e  f10d0b08          ADD      r11,sp,#8             ;249
000f62  e8b9010f          LDM      r9!,{r0-r3,r8}        ;249
000f66  f10d0994          ADD      r9,sp,#0x94           ;249
000f6a  e8a9010f          STM      r9!,{r0-r3,r8}        ;249
000f6e  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;249
000f72  f50d7ba2          ADD      r11,sp,#0x144         ;249
000f76  f10d0874          ADD      r8,sp,#0x74           ;249
000f7a  e8ab060e          STM      r11!,{r1-r3,r9,r10}   ;249
000f7e  a844              ADD      r0,sp,#0x110          ;249
000f80  a951              ADD      r1,sp,#0x144          ;249
000f82  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000f86  f8807030          STRB     r7,[r0,#0x30]         ;249
000f8a  4601              MOV      r1,r0                 ;249
000f8c  2201              MOVS     r2,#1                 ;249
000f8e  4640              MOV      r0,r8                 ;249
000f90  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
000f94  aa02              ADD      r2,sp,#8              ;251
000f96  a989              ADD      r1,sp,#0x224          ;251
000f98  2000              MOVS     r0,#0                 ;251
000f9a  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000f9e  6b20              LDR      r0,[r4,#0x30]         ;251
000fa0  2301              MOVS     r3,#1                 ;252
000fa2  eb000185          ADD      r1,r0,r5,LSL #2       ;252
000fa6  1e78              SUBS     r0,r7,#1              ;252
000fa8  e9cd7000          STRD     r7,r0,[sp,#0]         ;252
000fac  461a              MOV      r2,r3                 ;252
000fae  a837              ADD      r0,sp,#0xdc           ;252
000fb0  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
000fb4  f10d0cdc          ADD      r12,sp,#0xdc          ;252
000fb8  e8bc0f0f          LDM      r12!,{r0-r3,r8-r11}   ;252
000fbc  f10d0ca8          ADD      r12,sp,#0xa8          ;252
000fc0  e8ac0f0f          STM      r12!,{r0-r3,r8-r11}   ;252
000fc4  f10d09fc          ADD      r9,sp,#0xfc           ;252
000fc8  f10d0b08          ADD      r11,sp,#8             ;252
000fcc  e8b9010f          LDM      r9!,{r0-r3,r8}        ;252
000fd0  f10d09c8          ADD      r9,sp,#0xc8           ;252
000fd4  e8a9010f          STM      r9!,{r0-r3,r8}        ;252
000fd8  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;252
000fdc  f50d7ba2          ADD      r11,sp,#0x144         ;252
000fe0  f10d08a8          ADD      r8,sp,#0xa8           ;252
000fe4  e8ab060e          STM      r11!,{r1-r3,r9,r10}   ;252
000fe8  a844              ADD      r0,sp,#0x110          ;252
000fea  a951              ADD      r1,sp,#0x144          ;252
000fec  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000ff0  f8807030          STRB     r7,[r0,#0x30]         ;252
000ff4  4601              MOV      r1,r0                 ;252
000ff6  2201              MOVS     r2,#1                 ;252
000ff8  4640              MOV      r0,r8                 ;252
000ffa  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
000ffe  f000bdda          B.W      |L2.7094|
                  |L2.4098|
001002  2300              MOVS     r3,#0                 ;256
001004  461a              MOV      r2,r3                 ;256
001006  2101              MOVS     r1,#1                 ;256
001008  f50d60b4          ADD      r0,sp,#0x5a0          ;256
00100c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
001010  6800              LDR      r0,[r0,#0]            ;256
001012  9000              STR      r0,[sp,#0]            ;256
001014  f8dd1480          LDR      r1,[sp,#0x480]        ;256
001018  f8dd047c          LDR      r0,[sp,#0x47c]        ;256
00101c  ab5b              ADD      r3,sp,#0x16c          ;256
00101e  fb01f200          MUL      r2,r1,r0              ;256
001022  4617              MOV      r7,r2                 ;256
001024  2101              MOVS     r1,#1                 ;256
001026  a867              ADD      r0,sp,#0x19c          ;256
001028  926c              STR      r2,[sp,#0x1b0]        ;256
00102a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00102e  2300              MOVS     r3,#0                 ;257
001030  461a              MOV      r2,r3                 ;257
001032  2101              MOVS     r1,#1                 ;257
001034  f20d509c          ADD      r0,sp,#0x59c          ;257
001038  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00103c  6800              LDR      r0,[r0,#0]            ;257
00103e  9000              STR      r0,[sp,#0]            ;257
001040  463a              MOV      r2,r7                 ;257
001042  ab5b              ADD      r3,sp,#0x16c          ;257
001044  2101              MOVS     r1,#1                 ;257
001046  a862              ADD      r0,sp,#0x188          ;257
001048  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00104c  aa67              ADD      r2,sp,#0x19c          ;258
00104e  a9a5              ADD      r1,sp,#0x294          ;258
001050  2000              MOVS     r0,#0                 ;258
001052  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
001056  aa62              ADD      r2,sp,#0x188          ;259
001058  a9a0              ADD      r1,sp,#0x280          ;259
00105a  2000              MOVS     r0,#0                 ;259
00105c  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
001060  2300              MOVS     r3,#0                 ;261
001062  461a              MOV      r2,r3                 ;261
001064  2101              MOVS     r1,#1                 ;261
001066  f20d509c          ADD      r0,sp,#0x59c          ;261
00106a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00106e  6800              LDR      r0,[r0,#0]            ;261
001070  9000              STR      r0,[sp,#0]            ;261
001072  463a              MOV      r2,r7                 ;261
001074  ab5b              ADD      r3,sp,#0x16c          ;261
001076  2101              MOVS     r1,#1                 ;261
001078  a81d              ADD      r0,sp,#0x74           ;261
00107a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00107e  aa1d              ADD      r2,sp,#0x74           ;266
001080  a98e              ADD      r1,sp,#0x238          ;266
001082  2000              MOVS     r0,#0                 ;266
001084  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
001088  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;266
00108c  e9cd0100          STRD     r0,r1,[sp,#0]         ;266
001090  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;267
001094  a8aa              ADD      r0,sp,#0x2a8          ;267
001096  9b1f              LDR      r3,[sp,#0x7c]         ;267
001098  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
00109c  f50d7ace          ADD      r10,sp,#0x19c         ;267
0010a0  4607              MOV      r7,r0                 ;267
0010a2  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;267
0010a6  e88d030e          STM      sp,{r1-r3,r8,r9}      ;267
0010aa  a83c              ADD      r0,sp,#0xf0           ;267
0010ac  f04f0800          MOV      r8,#0                 ;267
0010b0  4669              MOV      r1,sp                 ;267
0010b2  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0010b6  f8808030          STRB     r8,[r0,#0x30]         ;267
0010ba  9022              STR      r0,[sp,#0x88]         ;267
0010bc  f10d0a74          ADD      r10,sp,#0x74          ;267
0010c0  a893              ADD      r0,sp,#0x24c          ;267
0010c2  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;267
0010c6  e88d030e          STM      sp,{r1-r3,r8,r9}      ;267
0010ca  f04f0900          MOV      r9,#0                 ;267
0010ce  4669              MOV      r1,sp                 ;267
0010d0  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0010d4  f1070108          ADD      r1,r7,#8              ;267
0010d8  f8809030          STRB     r9,[r0,#0x30]         ;267
0010dc  e8915e0e          LDM      r1,{r1-r3,r9-r12,lr}  ;267
0010e0  e88d5e0e          STM      sp,{r1-r3,r9-r12,lr}  ;267
0010e4  e9d7120a          LDRD     r1,r2,[r7,#0x28]      ;267
0010e8  4680              MOV      r8,r0                 ;267
0010ea  6b38              LDR      r0,[r7,#0x30]         ;267
0010ec  9108              STR      r1,[sp,#0x20]         ;267
0010ee  e9cd2009          STRD     r2,r0,[sp,#0x24]      ;267
0010f2  e9d72300          LDRD     r2,r3,[r7,#0]         ;267
0010f6  4640              MOV      r0,r8                 ;267
0010f8  9922              LDR      r1,[sp,#0x88]         ;267
0010fa  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
0010fe  6b20              LDR      r0,[r4,#0x30]         ;267
001100  f04f0800          MOV      r8,#0                 ;268
001104  eb000185          ADD      r1,r0,r5,LSL #2       ;268
001108  f04f30ff          MOV      r0,#0xffffffff        ;268
00110c  e9cd8000          STRD     r8,r0,[sp,#0]         ;268
001110  4643              MOV      r3,r8                 ;268
001112  4642              MOV      r2,r8                 ;268
001114  a822              ADD      r0,sp,#0x88           ;268
001116  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
00111a  f10d0c88          ADD      r12,sp,#0x88          ;268
00111e  e8bc0e8f          LDM      r12!,{r0-r3,r7,r9-r11};268
001122  f50d7c37          ADD      r12,sp,#0x2dc         ;268
001126  e8ac0e8f          STM      r12!,{r0-r3,r7,r9-r11};268
00112a  f10d09a8          ADD      r9,sp,#0xa8           ;268
00112e  f10d0b74          ADD      r11,sp,#0x74          ;268
001132  e8b9008f          LDM      r9!,{r0-r3,r7}        ;268
001136  f50d793f          ADD      r9,sp,#0x2fc          ;268
00113a  e8a9008f          STM      r9!,{r0-r3,r7}        ;268
00113e  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;268
001142  e88d060e          STM      sp,{r1-r3,r9,r10}     ;268
001146  afb7              ADD      r7,sp,#0x2dc          ;268
001148  a83c              ADD      r0,sp,#0xf0           ;268
00114a  4669              MOV      r1,sp                 ;268
00114c  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001150  f8808030          STRB     r8,[r0,#0x30]         ;268
001154  4601              MOV      r1,r0                 ;268
001156  2201              MOVS     r2,#1                 ;268
001158  4638              MOV      r0,r7                 ;268
00115a  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
00115e  aa1d              ADD      r2,sp,#0x74           ;271
001160  a98e              ADD      r1,sp,#0x238          ;271
001162  2000              MOVS     r0,#0                 ;271
001164  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
001168  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;271
00116c  e9cd0100          STRD     r0,r1,[sp,#0]         ;271
001170  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;272
001174  a8aa              ADD      r0,sp,#0x2a8          ;272
001176  9b1f              LDR      r3,[sp,#0x7c]         ;272
001178  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
00117c  f50d7bc4          ADD      r11,sp,#0x188         ;272
001180  4607              MOV      r7,r0                 ;272
001182  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;272
001186  e88d060e          STM      sp,{r1-r3,r9,r10}     ;272
00118a  a893              ADD      r0,sp,#0x24c          ;272
00118c  4669              MOV      r1,sp                 ;272
00118e  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001192  f8808030          STRB     r8,[r0,#0x30]         ;272
001196  9022              STR      r0,[sp,#0x88]         ;272
001198  f10d0b74          ADD      r11,sp,#0x74          ;272
00119c  a83c              ADD      r0,sp,#0xf0           ;272
00119e  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;272
0011a2  e88d060e          STM      sp,{r1-r3,r9,r10}     ;272
0011a6  4669              MOV      r1,sp                 ;272
0011a8  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0011ac  f8808030          STRB     r8,[r0,#0x30]         ;272
0011b0  4686              MOV      lr,r0                 ;272
0011b2  f1070008          ADD      r0,r7,#8              ;272
0011b6  e8901e0f          LDM      r0,{r0-r3,r9-r12}     ;272
0011ba  e88d1e0f          STM      sp,{r0-r3,r9-r12}     ;272
0011be  e9d7010a          LDRD     r0,r1,[r7,#0x28]      ;272
0011c2  6b3a              LDR      r2,[r7,#0x30]         ;272
0011c4  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;272
0011c8  920a              STR      r2,[sp,#0x28]         ;272
0011ca  e9d72300          LDRD     r2,r3,[r7,#0]         ;272
0011ce  4670              MOV      r0,lr                 ;272
0011d0  9922              LDR      r1,[sp,#0x88]         ;272
0011d2  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
0011d6  6b20              LDR      r0,[r4,#0x30]         ;272
0011d8  2301              MOVS     r3,#1                 ;273
0011da  eb000185          ADD      r1,r0,r5,LSL #2       ;273
0011de  f04f30ff          MOV      r0,#0xffffffff        ;273
0011e2  e9cd8000          STRD     r8,r0,[sp,#0]         ;273
0011e6  461a              MOV      r2,r3                 ;273
0011e8  a822              ADD      r0,sp,#0x88           ;273
0011ea  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
0011ee  f10d0c88          ADD      r12,sp,#0x88          ;273
0011f2  e8bc0e8f          LDM      r12!,{r0-r3,r7,r9-r11};273
0011f6  f50d7c44          ADD      r12,sp,#0x310         ;273
0011fa  e8ac0e8f          STM      r12!,{r0-r3,r7,r9-r11};273
0011fe  f10d09a8          ADD      r9,sp,#0xa8           ;273
001202  f10d0b74          ADD      r11,sp,#0x74          ;273
001206  e8b9008f          LDM      r9!,{r0-r3,r7}        ;273
00120a  f50d794c          ADD      r9,sp,#0x330          ;273
00120e  e8a9008f          STM      r9!,{r0-r3,r7}        ;273
001212  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;273
001216  e88d060e          STM      sp,{r1-r3,r9,r10}     ;273
00121a  afc4              ADD      r7,sp,#0x310          ;273
00121c  a83c              ADD      r0,sp,#0xf0           ;273
00121e  4669              MOV      r1,sp                 ;273
001220  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001224  f8808030          STRB     r8,[r0,#0x30]         ;273
001228  4601              MOV      r1,r0                 ;273
00122a  2201              MOVS     r2,#1                 ;273
00122c  4638              MOV      r0,r7                 ;273
00122e  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
001232  aa1d              ADD      r2,sp,#0x74           ;276
001234  a98e              ADD      r1,sp,#0x238          ;276
001236  2000              MOVS     r0,#0                 ;276
001238  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
00123c  6b20              LDR      r0,[r4,#0x30]         ;276
00123e  2700              MOVS     r7,#0                 ;277
001240  eb000185          ADD      r1,r0,r5,LSL #2       ;277
001244  f04f30ff          MOV      r0,#0xffffffff        ;277
001248  e9cd7000          STRD     r7,r0,[sp,#0]         ;277
00124c  2302              MOVS     r3,#2                 ;277
00124e  461a              MOV      r2,r3                 ;277
001250  a822              ADD      r0,sp,#0x88           ;277
001252  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
001256  f10d0c88          ADD      r12,sp,#0x88          ;277
00125a  e8bc0f0f          LDM      r12!,{r0-r3,r8-r11}   ;277
00125e  f50d7c51          ADD      r12,sp,#0x344         ;277
001262  e8ac0f0f          STM      r12!,{r0-r3,r8-r11}   ;277
001266  e03d              B        |L2.4836|
                  |L2.4712|
001268  496e6974          DCB      "InitializeTemplate.ComputeA",0
00126c  69616c69
001270  7a655465
001274  6d706c61
001278  74652e43
00127c  6f6d7075
001280  74654100
                  |L2.4740|
                          DCD      ||.constdata||+0x117
                  |L2.4744|
001288  436f756c          DCB      "Could not allocate templateImagePyramid[i]",0
00128c  64206e6f
001290  7420616c
001294  6c6f6361
001298  74652074
00129c  656d706c
0012a0  61746549
0012a4  6d616765
0012a8  50797261
0012ac  6d69645b
0012b0  695d00  
0012b3  00                DCB      0
                  |L2.4788|
0012b4  436f756c          DCB      "Could not allocate templateWeights[i]",0
0012b8  64206e6f
0012bc  7420616c
0012c0  6c6f6361
0012c4  74652074
0012c8  656d706c
0012cc  61746557
0012d0  65696768
0012d4  74735b69
0012d8  5d00    
0012da  00                DCB      0
0012db  00                DCB      0
                  |L2.4828|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetZero()::__PRETTY_FUNCTION__
                  |L2.4832|
                          DCD      ||.constdata||+0x370
                  |L2.4836|
0012e4  f10d09a8          ADD      r9,sp,#0xa8           ;277
0012e8  f10d0b74          ADD      r11,sp,#0x74          ;277
0012ec  e8b9010f          LDM      r9!,{r0-r3,r8}        ;277
0012f0  f50d7959          ADD      r9,sp,#0x364          ;277
0012f4  e8a9010f          STM      r9!,{r0-r3,r8}        ;277
0012f8  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;277
0012fc  e88d060e          STM      sp,{r1-r3,r9,r10}     ;277
001300  f50d7851          ADD      r8,sp,#0x344          ;277
001304  a83c              ADD      r0,sp,#0xf0           ;277
001306  4669              MOV      r1,sp                 ;277
001308  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00130c  f8807030          STRB     r7,[r0,#0x30]         ;277
001310  4601              MOV      r1,r0                 ;277
001312  2201              MOVS     r2,#1                 ;277
001314  4640              MOV      r0,r8                 ;277
001316  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
00131a  aa1d              ADD      r2,sp,#0x74           ;280
00131c  a989              ADD      r1,sp,#0x224          ;280
00131e  2000              MOVS     r0,#0                 ;280
001320  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
001324  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;280
001328  e9cd0100          STRD     r0,r1,[sp,#0]         ;280
00132c  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;281
001330  a8aa              ADD      r0,sp,#0x2a8          ;281
001332  9b1f              LDR      r3,[sp,#0x7c]         ;281
001334  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001338  9022              STR      r0,[sp,#0x88]         ;281
00133a  f50d7ace          ADD      r10,sp,#0x19c         ;281
00133e  a893              ADD      r0,sp,#0x24c          ;281
001340  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;281
001344  e88d030e          STM      sp,{r1-r3,r8,r9}      ;281
001348  4669              MOV      r1,sp                 ;281
00134a  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00134e  f8807030          STRB     r7,[r0,#0x30]         ;281
001352  9023              STR      r0,[sp,#0x8c]         ;281
001354  f10d0a74          ADD      r10,sp,#0x74          ;281
001358  a83c              ADD      r0,sp,#0xf0           ;281
00135a  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;281
00135e  e88d030e          STM      sp,{r1-r3,r8,r9}      ;281
001362  4669              MOV      r1,sp                 ;281
001364  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001368  4680              MOV      r8,r0                 ;281
00136a  f8807030          STRB     r7,[r0,#0x30]         ;281
00136e  9822              LDR      r0,[sp,#0x88]         ;281
001370  f1000108          ADD      r1,r0,#8              ;281
001374  e8915e0e          LDM      r1,{r1-r3,r9-r12,lr}  ;281
001378  e88d5e0e          STM      sp,{r1-r3,r9-r12,lr}  ;281
00137c  6a82              LDR      r2,[r0,#0x28]         ;281
00137e  6ac1              LDR      r1,[r0,#0x2c]         ;281
001380  6b00              LDR      r0,[r0,#0x30]         ;281
001382  9208              STR      r2,[sp,#0x20]         ;281
001384  e9cd1009          STRD     r1,r0,[sp,#0x24]      ;281
001388  9822              LDR      r0,[sp,#0x88]         ;281
00138a  e9d02300          LDRD     r2,r3,[r0,#0]         ;281
00138e  4640              MOV      r0,r8                 ;281
001390  9923              LDR      r1,[sp,#0x8c]         ;281
001392  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001396  6b20              LDR      r0,[r4,#0x30]         ;281
001398  2303              MOVS     r3,#3                 ;282
00139a  eb000185          ADD      r1,r0,r5,LSL #2       ;282
00139e  1e78              SUBS     r0,r7,#1              ;282
0013a0  e9cd7000          STRD     r7,r0,[sp,#0]         ;282
0013a4  461a              MOV      r2,r3                 ;282
0013a6  a822              ADD      r0,sp,#0x88           ;282
0013a8  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
0013ac  f10d0c88          ADD      r12,sp,#0x88          ;282
0013b0  e8bc0f0f          LDM      r12!,{r0-r3,r8-r11}   ;282
0013b4  f50d7c5e          ADD      r12,sp,#0x378         ;282
0013b8  e8ac0f0f          STM      r12!,{r0-r3,r8-r11}   ;282
0013bc  f10d09a8          ADD      r9,sp,#0xa8           ;282
0013c0  f10d0b74          ADD      r11,sp,#0x74          ;282
0013c4  e8b9010f          LDM      r9!,{r0-r3,r8}        ;282
0013c8  f50d7966          ADD      r9,sp,#0x398          ;282
0013cc  e8a9010f          STM      r9!,{r0-r3,r8}        ;282
0013d0  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;282
0013d4  e88d060e          STM      sp,{r1-r3,r9,r10}     ;282
0013d8  f50d785e          ADD      r8,sp,#0x378          ;282
0013dc  a83c              ADD      r0,sp,#0xf0           ;282
0013de  4669              MOV      r1,sp                 ;282
0013e0  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0013e4  f8807030          STRB     r7,[r0,#0x30]         ;282
0013e8  4601              MOV      r1,r0                 ;282
0013ea  2201              MOVS     r2,#1                 ;282
0013ec  4640              MOV      r0,r8                 ;282
0013ee  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
0013f2  aa1d              ADD      r2,sp,#0x74           ;285
0013f4  a989              ADD      r1,sp,#0x224          ;285
0013f6  2000              MOVS     r0,#0                 ;285
0013f8  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
0013fc  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;285
001400  e9cd0100          STRD     r0,r1,[sp,#0]         ;285
001404  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;286
001408  a8aa              ADD      r0,sp,#0x2a8          ;286
00140a  9b1f              LDR      r3,[sp,#0x7c]         ;286
00140c  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001410  9022              STR      r0,[sp,#0x88]         ;286
001412  f50d7ac4          ADD      r10,sp,#0x188         ;286
001416  a893              ADD      r0,sp,#0x24c          ;286
001418  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;286
00141c  e88d030e          STM      sp,{r1-r3,r8,r9}      ;286
001420  4669              MOV      r1,sp                 ;286
001422  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001426  f8807030          STRB     r7,[r0,#0x30]         ;286
00142a  9023              STR      r0,[sp,#0x8c]         ;286
00142c  f10d0a74          ADD      r10,sp,#0x74          ;286
001430  a83c              ADD      r0,sp,#0xf0           ;286
001432  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;286
001436  e88d030e          STM      sp,{r1-r3,r8,r9}      ;286
00143a  4669              MOV      r1,sp                 ;286
00143c  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001440  4680              MOV      r8,r0                 ;286
001442  f8807030          STRB     r7,[r0,#0x30]         ;286
001446  9822              LDR      r0,[sp,#0x88]         ;286
001448  f1000108          ADD      r1,r0,#8              ;286
00144c  e8915e0e          LDM      r1,{r1-r3,r9-r12,lr}  ;286
001450  e88d5e0e          STM      sp,{r1-r3,r9-r12,lr}  ;286
001454  e9d0120a          LDRD     r1,r2,[r0,#0x28]      ;286
001458  6b00              LDR      r0,[r0,#0x30]         ;286
00145a  9108              STR      r1,[sp,#0x20]         ;286
00145c  e9cd2009          STRD     r2,r0,[sp,#0x24]      ;286
001460  9822              LDR      r0,[sp,#0x88]         ;286
001462  e9d02300          LDRD     r2,r3,[r0,#0]         ;286
001466  4640              MOV      r0,r8                 ;286
001468  9923              LDR      r1,[sp,#0x8c]         ;286
00146a  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
00146e  6b20              LDR      r0,[r4,#0x30]         ;286
001470  2304              MOVS     r3,#4                 ;287
001472  eb000185          ADD      r1,r0,r5,LSL #2       ;287
001476  1e78              SUBS     r0,r7,#1              ;287
001478  e9cd7000          STRD     r7,r0,[sp,#0]         ;287
00147c  461a              MOV      r2,r3                 ;287
00147e  a822              ADD      r0,sp,#0x88           ;287
001480  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
001484  f10d0c88          ADD      r12,sp,#0x88          ;287
001488  e8bc0f0f          LDM      r12!,{r0-r3,r8-r11}   ;287
00148c  f50d7c6b          ADD      r12,sp,#0x3ac         ;287
001490  e8ac0f0f          STM      r12!,{r0-r3,r8-r11}   ;287
001494  f10d09a8          ADD      r9,sp,#0xa8           ;287
001498  f10d0b74          ADD      r11,sp,#0x74          ;287
00149c  e8b9010f          LDM      r9!,{r0-r3,r8}        ;287
0014a0  f50d7973          ADD      r9,sp,#0x3cc          ;287
0014a4  e8a9010f          STM      r9!,{r0-r3,r8}        ;287
0014a8  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;287
0014ac  e88d060e          STM      sp,{r1-r3,r9,r10}     ;287
0014b0  f50d786b          ADD      r8,sp,#0x3ac          ;287
0014b4  a83c              ADD      r0,sp,#0xf0           ;287
0014b6  4669              MOV      r1,sp                 ;287
0014b8  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0014bc  f8807030          STRB     r7,[r0,#0x30]         ;287
0014c0  4601              MOV      r1,r0                 ;287
0014c2  2201              MOVS     r2,#1                 ;287
0014c4  4640              MOV      r0,r8                 ;287
0014c6  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
0014ca  aa1d              ADD      r2,sp,#0x74           ;290
0014cc  a989              ADD      r1,sp,#0x224          ;290
0014ce  2000              MOVS     r0,#0                 ;290
0014d0  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
0014d4  6b20              LDR      r0,[r4,#0x30]         ;290
0014d6  2305              MOVS     r3,#5                 ;291
0014d8  eb000185          ADD      r1,r0,r5,LSL #2       ;291
0014dc  1e78              SUBS     r0,r7,#1              ;291
0014de  e9cd7000          STRD     r7,r0,[sp,#0]         ;291
0014e2  461a              MOV      r2,r3                 ;291
0014e4  a822              ADD      r0,sp,#0x88           ;291
0014e6  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
0014ea  f10d0c88          ADD      r12,sp,#0x88          ;291
0014ee  e8bc0f0f          LDM      r12!,{r0-r3,r8-r11}   ;291
0014f2  f50d7c78          ADD      r12,sp,#0x3e0         ;291
0014f6  e8ac0f0f          STM      r12!,{r0-r3,r8-r11}   ;291
0014fa  f10d09a8          ADD      r9,sp,#0xa8           ;291
0014fe  f10d0b74          ADD      r11,sp,#0x74          ;291
001502  e8b9010f          LDM      r9!,{r0-r3,r8}        ;291
001506  f50d6980          ADD      r9,sp,#0x400          ;291
00150a  e8a9010f          STM      r9!,{r0-r3,r8}        ;291
00150e  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;291
001512  e88d060e          STM      sp,{r1-r3,r9,r10}     ;291
001516  f50d7878          ADD      r8,sp,#0x3e0          ;291
00151a  a83c              ADD      r0,sp,#0xf0           ;291
00151c  4669              MOV      r1,sp                 ;291
00151e  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001522  f8807030          STRB     r7,[r0,#0x30]         ;291
001526  4601              MOV      r1,r0                 ;291
001528  2201              MOVS     r2,#1                 ;291
00152a  4640              MOV      r0,r8                 ;291
00152c  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
001530  f10400e4          ADD      r0,r4,#0xe4           ;293
001534  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
001538  f5b06f00          CMP      r0,#0x800             ;293
00153c  f040833b          BNE.W    |L2.7094|
001540  2300              MOVS     r3,#0                 ;296
001542  461a              MOV      r2,r3                 ;296
001544  2101              MOVS     r1,#1                 ;296
001546  f20d50a4          ADD      r0,sp,#0x5a4          ;296
00154a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00154e  6800              LDR      r0,[r0,#0]            ;296
001550  9000              STR      r0,[sp,#0]            ;296
001552  ab5b              ADD      r3,sp,#0x16c          ;296
001554  2101              MOVS     r1,#1                 ;296
001556  a856              ADD      r0,sp,#0x158          ;296
001558  9a6c              LDR      r2,[sp,#0x1b0]        ;296
00155a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00155e  aa1d              ADD      r2,sp,#0x74           ;299
001560  a98e              ADD      r1,sp,#0x238          ;299
001562  2000              MOVS     r0,#0                 ;299
001564  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
001568  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;299
00156c  e9cd0100          STRD     r0,r1,[sp,#0]         ;299
001570  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;300
001574  a82f              ADD      r0,sp,#0xbc           ;300
001576  9b1f              LDR      r3,[sp,#0x7c]         ;300
001578  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
00157c  f50d79ce          ADD      r9,sp,#0x19c          ;300
001580  4607              MOV      r7,r0                 ;300
001582  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;300
001586  e88d110e          STM      sp,{r1-r3,r8,r12}     ;300
00158a  a822              ADD      r0,sp,#0x88           ;300
00158c  f04f0900          MOV      r9,#0                 ;300
001590  4669              MOV      r1,sp                 ;300
001592  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001596  f8809030          STRB     r9,[r0,#0x30]         ;300
00159a  f10d0a74          ADD      r10,sp,#0x74          ;300
00159e  4680              MOV      r8,r0                 ;300
0015a0  e8ba120e          LDM      r10!,{r1-r3,r9,r12}   ;300
0015a4  e88d120e          STM      sp,{r1-r3,r9,r12}     ;300
0015a8  a849              ADD      r0,sp,#0x124          ;300
0015aa  f04f0a00          MOV      r10,#0                ;300
0015ae  4669              MOV      r1,sp                 ;300
0015b0  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0015b4  f880a030          STRB     r10,[r0,#0x30]        ;300
0015b8  4681              MOV      r9,r0                 ;300
0015ba  f1070008          ADD      r0,r7,#8              ;300
0015be  e8905c0f          LDM      r0,{r0-r3,r10-r12,lr} ;300
0015c2  e88d5c0f          STM      sp,{r0-r3,r10-r12,lr} ;300
0015c6  e9d7010a          LDRD     r0,r1,[r7,#0x28]      ;300
0015ca  6b3a              LDR      r2,[r7,#0x30]         ;300
0015cc  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;300
0015d0  920a              STR      r2,[sp,#0x28]         ;300
0015d2  e9d72300          LDRD     r2,r3,[r7,#0]         ;300
0015d6  4641              MOV      r1,r8                 ;300
0015d8  4648              MOV      r0,r9                 ;300
0015da  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
0015de  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;300
0015e2  e9cd0100          STRD     r0,r1,[sp,#0]         ;300
0015e6  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;301
0015ea  a82f              ADD      r0,sp,#0xbc           ;301
0015ec  9b1f              LDR      r3,[sp,#0x7c]         ;301
0015ee  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
0015f2  f50d79ce          ADD      r9,sp,#0x19c          ;301
0015f6  4607              MOV      r7,r0                 ;301
0015f8  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;301
0015fc  e88d110e          STM      sp,{r1-r3,r8,r12}     ;301
001600  a849              ADD      r0,sp,#0x124          ;301
001602  f04f0900          MOV      r9,#0                 ;301
001606  4669              MOV      r1,sp                 ;301
001608  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00160c  f8809030          STRB     r9,[r0,#0x30]         ;301
001610  f10d0a74          ADD      r10,sp,#0x74          ;301
001614  4680              MOV      r8,r0                 ;301
001616  e8ba120e          LDM      r10!,{r1-r3,r9,r12}   ;301
00161a  e88d120e          STM      sp,{r1-r3,r9,r12}     ;301
00161e  a822              ADD      r0,sp,#0x88           ;301
001620  f04f0a00          MOV      r10,#0                ;301
001624  4669              MOV      r1,sp                 ;301
001626  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00162a  f880a030          STRB     r10,[r0,#0x30]        ;301
00162e  4681              MOV      r9,r0                 ;301
001630  f1070008          ADD      r0,r7,#8              ;301
001634  e8905c0f          LDM      r0,{r0-r3,r10-r12,lr} ;301
001638  e88d5c0f          STM      sp,{r0-r3,r10-r12,lr} ;301
00163c  e9d7010a          LDRD     r0,r1,[r7,#0x28]      ;301
001640  6b3a              LDR      r2,[r7,#0x30]         ;301
001642  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;301
001646  920a              STR      r2,[sp,#0x28]         ;301
001648  e9d72300          LDRD     r2,r3,[r7,#0]         ;301
00164c  4641              MOV      r1,r8                 ;301
00164e  4648              MOV      r0,r9                 ;301
001650  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001654  f10d0874          ADD      r8,sp,#0x74           ;302
001658  eeb08a68          VMOV.F32 s16,s17               ;302
00165c  e8b8108e          LDM      r8!,{r1-r3,r7,r12}    ;302
001660  e88d108e          STM      sp,{r1-r3,r7,r12}     ;302
001664  a822              ADD      r0,sp,#0x88           ;302
001666  2700              MOVS     r7,#0                 ;302
001668  4669              MOV      r1,sp                 ;302
00166a  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00166e  f8807030          STRB     r7,[r0,#0x30]         ;302
001672  906e              STR      r0,[sp,#0x1b8]        ;302
001674  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;302
001678  e9cd0100          STRD     r0,r1,[sp,#0]         ;302
00167c  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;302
001680  a82f              ADD      r0,sp,#0xbc           ;302
001682  9b1f              LDR      r3,[sp,#0x7c]         ;302
001684  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001688  4682              MOV      r10,r0                ;302
00168a  f8509b0c          LDR      r9,[r0],#0xc          ;302
00168e  e9da7801          LDRD     r7,r8,[r10,#4]        ;302
001692  e890100f          LDM      r0,{r0-r3,r12}        ;302
001696  e9cd976c          STRD     r9,r7,[sp,#0x1b0]     ;302
00169a  f8cd8028          STR      r8,[sp,#0x28]         ;302
00169e  e9da7b08          LDRD     r7,r11,[r10,#0x20]    ;302
0016a2  e9da890a          LDRD     r8,r9,[r10,#0x28]     ;302
0016a6  f8daa030          LDR      r10,[r10,#0x30]       ;302
0016aa  f8cda024          STR      r10,[sp,#0x24]        ;302
0016ae  e88d100f          STM      sp,{r0-r3,r12}        ;302
0016b2  e9cd7b05          STRD     r7,r11,[sp,#0x14]     ;302
0016b6  e9cd8907          STRD     r8,r9,[sp,#0x1c]      ;302
0016ba  e9dd206d          LDRD     r2,r0,[sp,#0x1b4]     ;302
0016be  eeb00a48          VMOV.F32 s0,s16                ;302
0016c2  9b0a              LDR      r3,[sp,#0x28]         ;302
0016c4  996c              LDR      r1,[sp,#0x1b0]        ;302
0016c6  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Subtract<float, float, float>, float>(T1, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
0016ca  aa56              ADD      r2,sp,#0x158          ;304
0016cc  a989              ADD      r1,sp,#0x224          ;304
0016ce  2000              MOVS     r0,#0                 ;304
0016d0  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
0016d4  e9dd0159          LDRD     r0,r1,[sp,#0x164]     ;304
0016d8  e9cd0100          STRD     r0,r1,[sp,#0]         ;304
0016dc  e9dd1256          LDRD     r1,r2,[sp,#0x158]     ;305
0016e0  a82f              ADD      r0,sp,#0xbc           ;305
0016e2  9b58              LDR      r3,[sp,#0x160]        ;305
0016e4  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
0016e8  f50d79ce          ADD      r9,sp,#0x19c          ;305
0016ec  4607              MOV      r7,r0                 ;305
0016ee  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;305
0016f2  e88d110e          STM      sp,{r1-r3,r8,r12}     ;305
0016f6  a849              ADD      r0,sp,#0x124          ;305
0016f8  f04f0900          MOV      r9,#0                 ;305
0016fc  4669              MOV      r1,sp                 ;305
0016fe  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001702  f8809030          STRB     r9,[r0,#0x30]         ;305
001706  f50d7aac          ADD      r10,sp,#0x158         ;305
00170a  4680              MOV      r8,r0                 ;305
00170c  e8ba120e          LDM      r10!,{r1-r3,r9,r12}   ;305
001710  e88d120e          STM      sp,{r1-r3,r9,r12}     ;305
001714  a822              ADD      r0,sp,#0x88           ;305
001716  f04f0a00          MOV      r10,#0                ;305
00171a  4669              MOV      r1,sp                 ;305
00171c  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001720  f880a030          STRB     r10,[r0,#0x30]        ;305
001724  4681              MOV      r9,r0                 ;305
001726  f1070008          ADD      r0,r7,#8              ;305
00172a  e8905c0f          LDM      r0,{r0-r3,r10-r12,lr} ;305
00172e  e88d5c0f          STM      sp,{r0-r3,r10-r12,lr} ;305
001732  e9d7010a          LDRD     r0,r1,[r7,#0x28]      ;305
001736  6b3a              LDR      r2,[r7,#0x30]         ;305
001738  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;305
00173c  920a              STR      r2,[sp,#0x28]         ;305
00173e  e9d72300          LDRD     r2,r3,[r7,#0]         ;305
001742  4641              MOV      r1,r8                 ;305
001744  4648              MOV      r0,r9                 ;305
001746  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
00174a  e9dd0159          LDRD     r0,r1,[sp,#0x164]     ;305
00174e  e9cd0100          STRD     r0,r1,[sp,#0]         ;305
001752  e9dd1256          LDRD     r1,r2,[sp,#0x158]     ;306
001756  a82f              ADD      r0,sp,#0xbc           ;306
001758  9b58              LDR      r3,[sp,#0x160]        ;306
00175a  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
00175e  f50d79c4          ADD      r9,sp,#0x188          ;306
001762  4607              MOV      r7,r0                 ;306
001764  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;306
001768  e88d110e          STM      sp,{r1-r3,r8,r12}     ;306
00176c  a849              ADD      r0,sp,#0x124          ;306
00176e  f04f0900          MOV      r9,#0                 ;306
001772  4669              MOV      r1,sp                 ;306
001774  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001778  f8809030          STRB     r9,[r0,#0x30]         ;306
00177c  f50d7aac          ADD      r10,sp,#0x158         ;306
001780  4680              MOV      r8,r0                 ;306
001782  e8ba120e          LDM      r10!,{r1-r3,r9,r12}   ;306
001786  e88d120e          STM      sp,{r1-r3,r9,r12}     ;306
00178a  a822              ADD      r0,sp,#0x88           ;306
00178c  f04f0a00          MOV      r10,#0                ;306
001790  4669              MOV      r1,sp                 ;306
001792  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001796  f880a030          STRB     r10,[r0,#0x30]        ;306
00179a  4681              MOV      r9,r0                 ;306
00179c  f1070008          ADD      r0,r7,#8              ;306
0017a0  e8905c0f          LDM      r0,{r0-r3,r10-r12,lr} ;306
0017a4  e88d5c0f          STM      sp,{r0-r3,r10-r12,lr} ;306
0017a8  e9d7010a          LDRD     r0,r1,[r7,#0x28]      ;306
0017ac  6b3a              LDR      r2,[r7,#0x30]         ;306
0017ae  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;306
0017b2  920a              STR      r2,[sp,#0x28]         ;306
0017b4  e9d72300          LDRD     r2,r3,[r7,#0]         ;306
0017b8  4641              MOV      r1,r8                 ;306
0017ba  4648              MOV      r0,r9                 ;306
0017bc  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
0017c0  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;306
0017c4  e9cd0100          STRD     r0,r1,[sp,#0]         ;306
0017c8  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;308
0017cc  a82f              ADD      r0,sp,#0xbc           ;308
0017ce  9b1f              LDR      r3,[sp,#0x7c]         ;308
0017d0  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
0017d4  f50d79ac          ADD      r9,sp,#0x158          ;308
0017d8  4607              MOV      r7,r0                 ;308
0017da  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;308
0017de  e88d110e          STM      sp,{r1-r3,r8,r12}     ;308
0017e2  a849              ADD      r0,sp,#0x124          ;308
0017e4  f04f0900          MOV      r9,#0                 ;308
0017e8  4669              MOV      r1,sp                 ;308
0017ea  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0017ee  f8809030          STRB     r9,[r0,#0x30]         ;308
0017f2  f10d0a74          ADD      r10,sp,#0x74          ;308
0017f6  4680              MOV      r8,r0                 ;308
0017f8  e8ba120e          LDM      r10!,{r1-r3,r9,r12}   ;308
0017fc  e88d120e          STM      sp,{r1-r3,r9,r12}     ;308
001800  a822              ADD      r0,sp,#0x88           ;308
001802  f04f0a00          MOV      r10,#0                ;308
001806  4669              MOV      r1,sp                 ;308
001808  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00180c  f880a030          STRB     r10,[r0,#0x30]        ;308
001810  4681              MOV      r9,r0                 ;308
001812  f1070008          ADD      r0,r7,#8              ;308
001816  e8905c0f          LDM      r0,{r0-r3,r10-r12,lr} ;308
00181a  e88d5c0f          STM      sp,{r0-r3,r10-r12,lr} ;308
00181e  e9d7010a          LDRD     r0,r1,[r7,#0x28]      ;308
001822  6b3a              LDR      r2,[r7,#0x30]         ;308
001824  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;308
001828  920a              STR      r2,[sp,#0x28]         ;308
00182a  e9d72300          LDRD     r2,r3,[r7,#0]         ;308
00182e  4641              MOV      r1,r8                 ;308
001830  4648              MOV      r0,r9                 ;308
001832  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8SubtractIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Subtract<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001836  6b20              LDR      r0,[r4,#0x30]         ;308
001838  2700              MOVS     r7,#0                 ;309
00183a  eb000185          ADD      r1,r0,r5,LSL #2       ;309
00183e  f04f30ff          MOV      r0,#0xffffffff        ;309
001842  e9cd7000          STRD     r7,r0,[sp,#0]         ;309
001846  2306              MOVS     r3,#6                 ;309
001848  461a              MOV      r2,r3                 ;309
00184a  f20d4084          ADD      r0,sp,#0x484          ;309
00184e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
001852  f20d4b84          ADD      r11,sp,#0x484         ;309
001856  e8bb170f          LDM      r11!,{r0-r3,r8-r10,r12};309
00185a  f20d4b14          ADD      r11,sp,#0x414         ;309
00185e  e8ab170f          STM      r11!,{r0-r3,r8-r10,r12};309
001862  f20d48a4          ADD      r8,sp,#0x4a4          ;309
001866  f20d4934          ADD      r9,sp,#0x434          ;309
00186a  e8b8100f          LDM      r8!,{r0-r3,r12}       ;309
00186e  e8a9100f          STM      r9!,{r0-r3,r12}       ;309
001872  f10d0a74          ADD      r10,sp,#0x74          ;309
001876  f20d4814          ADD      r8,sp,#0x414          ;309
00187a  e8ba120e          LDM      r10!,{r1-r3,r9,r12}   ;309
00187e  e88d120e          STM      sp,{r1-r3,r9,r12}     ;309
001882  a822              ADD      r0,sp,#0x88           ;309
001884  4669              MOV      r1,sp                 ;309
001886  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00188a  f8807030          STRB     r7,[r0,#0x30]         ;309
00188e  4601              MOV      r1,r0                 ;309
001890  2201              MOVS     r2,#1                 ;309
001892  4640              MOV      r0,r8                 ;309
001894  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
001898  aa1d              ADD      r2,sp,#0x74           ;312
00189a  a98e              ADD      r1,sp,#0x238          ;312
00189c  2000              MOVS     r0,#0                 ;312
00189e  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
0018a2  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;312
0018a6  e9cd0100          STRD     r0,r1,[sp,#0]         ;312
0018aa  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;313
0018ae  a82f              ADD      r0,sp,#0xbc           ;313
0018b0  9b1f              LDR      r3,[sp,#0x7c]         ;313
0018b2  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
0018b6  906c              STR      r0,[sp,#0x1b0]        ;313
0018b8  f50d79ce          ADD      r9,sp,#0x19c          ;313
0018bc  a849              ADD      r0,sp,#0x124          ;313
0018be  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;313
0018c2  e88d110e          STM      sp,{r1-r3,r8,r12}     ;313
0018c6  4669              MOV      r1,sp                 ;313
0018c8  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0018cc  f8807030          STRB     r7,[r0,#0x30]         ;313
0018d0  906d              STR      r0,[sp,#0x1b4]        ;313
0018d2  f10d0974          ADD      r9,sp,#0x74           ;313
0018d6  a822              ADD      r0,sp,#0x88           ;313
0018d8  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;313
0018dc  e88d110e          STM      sp,{r1-r3,r8,r12}     ;313
0018e0  4669              MOV      r1,sp                 ;313
0018e2  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0018e6  4684              MOV      r12,r0                ;313
0018e8  f8807030          STRB     r7,[r0,#0x30]         ;313
0018ec  986c              LDR      r0,[sp,#0x1b0]        ;313
0018ee  f1000108          ADD      r1,r0,#8              ;313
0018f2  e8914f0e          LDM      r1,{r1-r3,r8-r11,lr}  ;313
0018f6  e88d4f0e          STM      sp,{r1-r3,r8-r11,lr}  ;313
0018fa  6a82              LDR      r2,[r0,#0x28]         ;313
0018fc  6ac1              LDR      r1,[r0,#0x2c]         ;313
0018fe  6b00              LDR      r0,[r0,#0x30]         ;313
001900  9208              STR      r2,[sp,#0x20]         ;313
001902  e9cd1009          STRD     r1,r0,[sp,#0x24]      ;313
001906  986c              LDR      r0,[sp,#0x1b0]        ;313
001908  e9d02300          LDRD     r2,r3,[r0,#0]         ;313
00190c  4660              MOV      r0,r12                ;313
00190e  996d              LDR      r1,[sp,#0x1b4]        ;313
001910  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001914  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;313
001918  e9cd0100          STRD     r0,r1,[sp,#0]         ;313
00191c  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;314
001920  a82f              ADD      r0,sp,#0xbc           ;314
001922  9b1f              LDR      r3,[sp,#0x7c]         ;314
001924  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001928  906c              STR      r0,[sp,#0x1b0]        ;314
00192a  f50d79c4          ADD      r9,sp,#0x188          ;314
00192e  a849              ADD      r0,sp,#0x124          ;314
001930  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;314
001934  e88d110e          STM      sp,{r1-r3,r8,r12}     ;314
001938  4669              MOV      r1,sp                 ;314
00193a  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00193e  f8807030          STRB     r7,[r0,#0x30]         ;314
001942  906d              STR      r0,[sp,#0x1b4]        ;314
001944  f10d0974          ADD      r9,sp,#0x74           ;314
001948  a822              ADD      r0,sp,#0x88           ;314
00194a  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;314
00194e  e88d110e          STM      sp,{r1-r3,r8,r12}     ;314
001952  4669              MOV      r1,sp                 ;314
001954  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001958  4684              MOV      r12,r0                ;314
00195a  f8807030          STRB     r7,[r0,#0x30]         ;314
00195e  986c              LDR      r0,[sp,#0x1b0]        ;314
001960  f1000108          ADD      r1,r0,#8              ;314
001964  e8914f0e          LDM      r1,{r1-r3,r8-r11,lr}  ;314
001968  e88d4f0e          STM      sp,{r1-r3,r8-r11,lr}  ;314
00196c  6a82              LDR      r2,[r0,#0x28]         ;314
00196e  6ac1              LDR      r1,[r0,#0x2c]         ;314
001970  6b00              LDR      r0,[r0,#0x30]         ;314
001972  9208              STR      r2,[sp,#0x20]         ;314
001974  e9cd1009          STRD     r1,r0,[sp,#0x24]      ;314
001978  986c              LDR      r0,[sp,#0x1b0]        ;314
00197a  e9d02300          LDRD     r2,r3,[r0,#0]         ;314
00197e  4660              MOV      r0,r12                ;314
001980  996d              LDR      r1,[sp,#0x1b4]        ;314
001982  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001986  f10d0974          ADD      r9,sp,#0x74           ;315
00198a  a822              ADD      r0,sp,#0x88           ;315
00198c  e8b9110e          LDM      r9!,{r1-r3,r8,r12}    ;315
001990  e88d110e          STM      sp,{r1-r3,r8,r12}     ;315
001994  4669              MOV      r1,sp                 ;315
001996  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00199a  f8807030          STRB     r7,[r0,#0x30]         ;315
00199e  906e              STR      r0,[sp,#0x1b8]        ;315
0019a0  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;315
0019a4  e9cd0100          STRD     r0,r1,[sp,#0]         ;315
0019a8  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;315
0019ac  a82f              ADD      r0,sp,#0xbc           ;315
0019ae  9b1f              LDR      r3,[sp,#0x7c]         ;315
0019b0  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
0019b4  f1000110          ADD      r1,r0,#0x10           ;315
0019b8  e8900f00          LDM      r0,{r8-r11}           ;315
0019bc  e891100e          LDM      r1,{r1-r3,r12}        ;315
0019c0  f8cdb000          STR      r11,[sp,#0]           ;315
0019c4  f8cda028          STR      r10,[sp,#0x28]        ;315
0019c8  e9cd896c          STRD     r8,r9,[sp,#0x1b0]     ;315
0019cc  f1000820          ADD      r8,r0,#0x20           ;315
0019d0  6b00              LDR      r0,[r0,#0x30]         ;315
0019d2  e8980f00          LDM      r8,{r8-r11}           ;315
0019d6  e9cdb008          STRD     r11,r0,[sp,#0x20]     ;315
0019da  a801              ADD      r0,sp,#4              ;315
0019dc  f8cda01c          STR      r10,[sp,#0x1c]        ;315
0019e0  e8a0100e          STM      r0!,{r1-r3,r12}       ;315
0019e4  e9cd8905          STRD     r8,r9,[sp,#0x14]      ;315
0019e8  e9dd206d          LDRD     r2,r0,[sp,#0x1b4]     ;315
0019ec  eeb00a48          VMOV.F32 s0,s16                ;315
0019f0  9b0a              LDR      r3,[sp,#0x28]         ;315
0019f2  996c              LDR      r1,[sp,#0x1b0]        ;315
0019f4  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Subtract<float, float, float>, float>(T1, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
0019f8  aa56              ADD      r2,sp,#0x158          ;317
0019fa  a989              ADD      r1,sp,#0x224          ;317
0019fc  2000              MOVS     r0,#0                 ;317
0019fe  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
001a02  e9dd0159          LDRD     r0,r1,[sp,#0x164]     ;317
001a06  e9cd0100          STRD     r0,r1,[sp,#0]         ;317
001a0a  e9dd1256          LDRD     r1,r2,[sp,#0x158]     ;318
001a0e  a82f              ADD      r0,sp,#0xbc           ;318
001a10  9b58              LDR      r3,[sp,#0x160]        ;318
001a12  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001a16  906c              STR      r0,[sp,#0x1b0]        ;318
001a18  f50d7ac4          ADD      r10,sp,#0x188         ;318
001a1c  a849              ADD      r0,sp,#0x124          ;318
001a1e  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;318
001a22  e88d030e          STM      sp,{r1-r3,r8,r9}      ;318
001a26  4669              MOV      r1,sp                 ;318
001a28  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001a2c  f8807030          STRB     r7,[r0,#0x30]         ;318
001a30  906d              STR      r0,[sp,#0x1b4]        ;318
001a32  f50d7aac          ADD      r10,sp,#0x158         ;318
001a36  a822              ADD      r0,sp,#0x88           ;318
001a38  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;318
001a3c  e88d030e          STM      sp,{r1-r3,r8,r9}      ;318
001a40  4669              MOV      r1,sp                 ;318
001a42  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001a46  4680              MOV      r8,r0                 ;318
001a48  f8807030          STRB     r7,[r0,#0x30]         ;318
001a4c  986c              LDR      r0,[sp,#0x1b0]        ;318
001a4e  f1000108          ADD      r1,r0,#8              ;318
001a52  e8915e0e          LDM      r1,{r1-r3,r9-r12,lr}  ;318
001a56  e88d5e0e          STM      sp,{r1-r3,r9-r12,lr}  ;318
001a5a  6a82              LDR      r2,[r0,#0x28]         ;318
001a5c  6ac1              LDR      r1,[r0,#0x2c]         ;318
001a5e  6b00              LDR      r0,[r0,#0x30]         ;318
001a60  9208              STR      r2,[sp,#0x20]         ;318
001a62  e9cd1009          STRD     r1,r0,[sp,#0x24]      ;318
001a66  986c              LDR      r0,[sp,#0x1b0]        ;318
001a68  e9d02300          LDRD     r2,r3,[r0,#0]         ;318
001a6c  4640              MOV      r0,r8                 ;318
001a6e  996d              LDR      r1,[sp,#0x1b4]        ;318
001a70  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001a74  e9dd0159          LDRD     r0,r1,[sp,#0x164]     ;318
001a78  e9cd0100          STRD     r0,r1,[sp,#0]         ;318
001a7c  e9dd1256          LDRD     r1,r2,[sp,#0x158]     ;319
001a80  a82f              ADD      r0,sp,#0xbc           ;319
001a82  9b58              LDR      r3,[sp,#0x160]        ;319
001a84  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001a88  906c              STR      r0,[sp,#0x1b0]        ;319
001a8a  f50d7ac4          ADD      r10,sp,#0x188         ;319
001a8e  a849              ADD      r0,sp,#0x124          ;319
001a90  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;319
001a94  e88d030e          STM      sp,{r1-r3,r8,r9}      ;319
001a98  4669              MOV      r1,sp                 ;319
001a9a  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001a9e  f8807030          STRB     r7,[r0,#0x30]         ;319
001aa2  906d              STR      r0,[sp,#0x1b4]        ;319
001aa4  f50d7aac          ADD      r10,sp,#0x158         ;319
001aa8  a822              ADD      r0,sp,#0x88           ;319
001aaa  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;319
001aae  e88d030e          STM      sp,{r1-r3,r8,r9}      ;319
001ab2  4669              MOV      r1,sp                 ;319
001ab4  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001ab8  4680              MOV      r8,r0                 ;319
001aba  f8807030          STRB     r7,[r0,#0x30]         ;319
001abe  986c              LDR      r0,[sp,#0x1b0]        ;319
001ac0  f1000108          ADD      r1,r0,#8              ;319
001ac4  e8915e0e          LDM      r1,{r1-r3,r9-r12,lr}  ;319
001ac8  e88d5e0e          STM      sp,{r1-r3,r9-r12,lr}  ;319
001acc  e9d0120a          LDRD     r1,r2,[r0,#0x28]      ;319
001ad0  6b00              LDR      r0,[r0,#0x30]         ;319
001ad2  9108              STR      r1,[sp,#0x20]         ;319
001ad4  e9cd2009          STRD     r2,r0,[sp,#0x24]      ;319
001ad8  986c              LDR      r0,[sp,#0x1b0]        ;319
001ada  e9d02300          LDRD     r2,r3,[r0,#0]         ;319
001ade  4640              MOV      r0,r8                 ;319
001ae0  996d              LDR      r1,[sp,#0x1b4]        ;319
001ae2  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001ae6  e9dd0120          LDRD     r0,r1,[sp,#0x80]      ;319
001aea  e9cd0100          STRD     r0,r1,[sp,#0]         ;319
001aee  e9dd121d          LDRD     r1,r2,[sp,#0x74]      ;321
001af2  a82f              ADD      r0,sp,#0xbc           ;321
001af4  9b1f              LDR      r3,[sp,#0x7c]         ;321
001af6  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001afa  906c              STR      r0,[sp,#0x1b0]        ;321
001afc  f50d7aac          ADD      r10,sp,#0x158         ;321
001b00  a849              ADD      r0,sp,#0x124          ;321
001b02  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;321
001b06  e88d030e          STM      sp,{r1-r3,r8,r9}      ;321
001b0a  4669              MOV      r1,sp                 ;321
001b0c  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001b10  f8807030          STRB     r7,[r0,#0x30]         ;321
001b14  906d              STR      r0,[sp,#0x1b4]        ;321
001b16  f10d0a74          ADD      r10,sp,#0x74          ;321
001b1a  a822              ADD      r0,sp,#0x88           ;321
001b1c  e8ba030e          LDM      r10!,{r1-r3,r8,r9}    ;321
001b20  e88d030e          STM      sp,{r1-r3,r8,r9}      ;321
001b24  4669              MOV      r1,sp                 ;321
001b26  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001b2a  4680              MOV      r8,r0                 ;321
001b2c  f8807030          STRB     r7,[r0,#0x30]         ;321
001b30  986c              LDR      r0,[sp,#0x1b0]        ;321
001b32  f1000108          ADD      r1,r0,#8              ;321
001b36  e8915e0e          LDM      r1,{r1-r3,r9-r12,lr}  ;321
001b3a  e88d5e0e          STM      sp,{r1-r3,r9-r12,lr}  ;321
001b3e  6a82              LDR      r2,[r0,#0x28]         ;321
001b40  6ac1              LDR      r1,[r0,#0x2c]         ;321
001b42  6b00              LDR      r0,[r0,#0x30]         ;321
001b44  9208              STR      r2,[sp,#0x20]         ;321
001b46  e9cd1009          STRD     r1,r0,[sp,#0x24]      ;321
001b4a  986c              LDR      r0,[sp,#0x1b0]        ;321
001b4c  e9d02300          LDRD     r2,r3,[r0,#0]         ;321
001b50  4640              MOV      r0,r8                 ;321
001b52  996d              LDR      r1,[sp,#0x1b4]        ;321
001b54  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8SubtractIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Subtract<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001b58  6b20              LDR      r0,[r4,#0x30]         ;321
001b5a  2307              MOVS     r3,#7                 ;322
001b5c  eb000185          ADD      r1,r0,r5,LSL #2       ;322
001b60  1e78              SUBS     r0,r7,#1              ;322
001b62  e9cd7000          STRD     r7,r0,[sp,#0]         ;322
001b66  461a              MOV      r2,r3                 ;322
001b68  f20d4084          ADD      r0,sp,#0x484          ;322
001b6c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
001b70  f20d4c84          ADD      r12,sp,#0x484         ;322
001b74  e8bc0f0f          LDM      r12!,{r0-r3,r8-r11}   ;322
001b78  f50d6c89          ADD      r12,sp,#0x448         ;322
001b7c  e8ac0f0f          STM      r12!,{r0-r3,r8-r11}   ;322
001b80  f20d49a4          ADD      r9,sp,#0x4a4          ;322
001b84  f10d0b74          ADD      r11,sp,#0x74          ;322
001b88  e8b9010f          LDM      r9!,{r0-r3,r8}        ;322
001b8c  f50d698d          ADD      r9,sp,#0x468          ;322
001b90  e8a9010f          STM      r9!,{r0-r3,r8}        ;322
001b94  e8bb060e          LDM      r11!,{r1-r3,r9,r10}   ;322
001b98  e88d060e          STM      sp,{r1-r3,r9,r10}     ;322
001b9c  f50d6889          ADD      r8,sp,#0x448          ;322
001ba0  a822              ADD      r0,sp,#0x88           ;322
001ba2  4669              MOV      r1,sp                 ;322
001ba4  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001ba8  f8807030          STRB     r7,[r0,#0x30]         ;322
001bac  4601              MOV      r1,r0                 ;322
001bae  2201              MOVS     r2,#1                 ;322
001bb0  4640              MOV      r0,r8                 ;322
001bb2  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
                  |L2.7094|
001bb6  f6af1050          ADR      r0,|L2.4712|
001bba  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
001bbe  a95b              ADD      r1,sp,#0x16c          ;328
001bc0  a8f7              ADD      r0,sp,#0x3dc          ;328
001bc2  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
001bc6  a9f7              ADD      r1,sp,#0x3dc          ;328
001bc8  a8eb              ADD      r0,sp,#0x3ac          ;328
001bca  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
001bce  2300              MOVS     r3,#0                 ;330
001bd0  461a              MOV      r2,r3                 ;330
001bd2  2101              MOVS     r1,#1                 ;330
001bd4  a857              ADD      r0,sp,#0x15c          ;330
001bd6  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
001bda  6800              LDR      r0,[r0,#0]            ;330
001bdc  9000              STR      r0,[sp,#0]            ;330
001bde  abeb              ADD      r3,sp,#0x3ac          ;330
001be0  a840              ADD      r0,sp,#0x100          ;330
001be2  f8dd247c          LDR      r2,[sp,#0x47c]        ;330
001be6  f8dd1480          LDR      r1,[sp,#0x480]        ;330
001bea  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
001bee  a0f8              ADR      r0,|L2.8144|
001bf0  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
001bf4  a9eb              ADD      r1,sp,#0x3ac          ;335
001bf6  a8fe              ADD      r0,sp,#0x3f8          ;335
001bf8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
001bfc  a9fe              ADD      r1,sp,#0x3f8          ;335
001bfe  f20d4014          ADD      r0,sp,#0x414          ;335
001c02  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
001c06  2300              MOVS     r3,#0                 ;337
001c08  461a              MOV      r2,r3                 ;337
001c0a  2101              MOVS     r1,#1                 ;337
001c0c  a858              ADD      r0,sp,#0x160          ;337
001c0e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
001c12  6800              LDR      r0,[r0,#0]            ;337
001c14  9000              STR      r0,[sp,#0]            ;337
001c16  f20d4314          ADD      r3,sp,#0x414          ;337
001c1a  a8f2              ADD      r0,sp,#0x3c8          ;337
001c1c  f8dd247c          LDR      r2,[sp,#0x47c]        ;337
001c20  f8dd1480          LDR      r1,[sp,#0x480]        ;337
001c24  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
001c28  e9dd0143          LDRD     r0,r1,[sp,#0x10c]     ;337
001c2c  e9cd0100          STRD     r0,r1,[sp,#0]         ;337
001c30  e9dd1240          LDRD     r1,r2,[sp,#0x100]     ;339
001c34  a862              ADD      r0,sp,#0x188          ;339
001c36  9b42              LDR      r3,[sp,#0x108]        ;339
001c38  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001c3c  4607              MOV      r7,r0                 ;339
001c3e  a8a5              ADD      r0,sp,#0x294          ;339
001c40  aa45              ADD      r2,sp,#0x114          ;339
001c42  e8b0130a          LDM      r0!,{r1,r3,r8,r9,r12} ;339
001c46  e88d130a          STM      sp,{r1,r3,r8,r9,r12}  ;339
001c4a  f04f0900          MOV      r9,#0                 ;339
001c4e  4669              MOV      r1,sp                 ;339
001c50  4610              MOV      r0,r2                 ;339
001c52  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001c56  4680              MOV      r8,r0                 ;339
001c58  f8809030          STRB     r9,[r0,#0x30]         ;339
001c5c  a8a5              ADD      r0,sp,#0x294          ;339
001c5e  aaaa              ADD      r2,sp,#0x2a8          ;339
001c60  e8b0160a          LDM      r0!,{r1,r3,r9,r10,r12};339
001c64  e88d160a          STM      sp,{r1,r3,r9,r10,r12} ;339
001c68  f04f0a00          MOV      r10,#0                ;339
001c6c  4669              MOV      r1,sp                 ;339
001c6e  4610              MOV      r0,r2                 ;339
001c70  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001c74  4681              MOV      r9,r0                 ;339
001c76  f880a030          STRB     r10,[r0,#0x30]        ;339
001c7a  f1070008          ADD      r0,r7,#8              ;339
001c7e  e8905c0f          LDM      r0,{r0-r3,r10-r12,lr} ;339
001c82  e88d5c0f          STM      sp,{r0-r3,r10-r12,lr} ;339
001c86  e9d7010a          LDRD     r0,r1,[r7,#0x28]      ;339
001c8a  6b3a              LDR      r2,[r7,#0x30]         ;339
001c8c  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;339
001c90  920a              STR      r2,[sp,#0x28]         ;339
001c92  e9d72300          LDRD     r2,r3,[r7,#0]         ;339
001c96  4641              MOV      r1,r8                 ;339
001c98  4648              MOV      r0,r9                 ;339
001c9a  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001c9e  e9dd01f5          LDRD     r0,r1,[sp,#0x3d4]     ;339
001ca2  e9cd0100          STRD     r0,r1,[sp,#0]         ;339
001ca6  e9dd12f2          LDRD     r1,r2,[sp,#0x3c8]     ;340
001caa  a862              ADD      r0,sp,#0x188          ;340
001cac  9bf4              LDR      r3,[sp,#0x3d0]        ;340
001cae  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001cb2  4607              MOV      r7,r0                 ;340
001cb4  a8a0              ADD      r0,sp,#0x280          ;340
001cb6  aaaa              ADD      r2,sp,#0x2a8          ;340
001cb8  e8b0130a          LDM      r0!,{r1,r3,r8,r9,r12} ;340
001cbc  e88d130a          STM      sp,{r1,r3,r8,r9,r12}  ;340
001cc0  f04f0800          MOV      r8,#0                 ;340
001cc4  4669              MOV      r1,sp                 ;340
001cc6  4610              MOV      r0,r2                 ;340
001cc8  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001ccc  f8808030          STRB     r8,[r0,#0x30]         ;340
001cd0  901d              STR      r0,[sp,#0x74]         ;340
001cd2  a8a0              ADD      r0,sp,#0x280          ;340
001cd4  aa45              ADD      r2,sp,#0x114          ;340
001cd6  e8b0130a          LDM      r0!,{r1,r3,r8,r9,r12} ;340
001cda  e88d130a          STM      sp,{r1,r3,r8,r9,r12}  ;340
001cde  f04f0800          MOV      r8,#0                 ;340
001ce2  4669              MOV      r1,sp                 ;340
001ce4  4610              MOV      r0,r2                 ;340
001ce6  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001cea  4684              MOV      r12,r0                ;340
001cec  f8808030          STRB     r8,[r0,#0x30]         ;340
001cf0  f1070008          ADD      r0,r7,#8              ;340
001cf4  e8904f0d          LDM      r0,{r0,r2,r3,r8-r11,lr};340
001cf8  e88d4f0d          STM      sp,{r0,r2,r3,r8-r11,lr};340
001cfc  e9d7020a          LDRD     r0,r2,[r7,#0x28]      ;340
001d00  6b39              LDR      r1,[r7,#0x30]         ;340
001d02  e9cd0208          STRD     r0,r2,[sp,#0x20]      ;340
001d06  910a              STR      r1,[sp,#0x28]         ;340
001d08  e9d72300          LDRD     r2,r3,[r7,#0]         ;340
001d0c  4660              MOV      r0,r12                ;340
001d0e  991d              LDR      r1,[sp,#0x74]         ;340
001d10  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001d14  e9dd0143          LDRD     r0,r1,[sp,#0x10c]     ;340
001d18  e9cd0100          STRD     r0,r1,[sp,#0]         ;340
001d1c  e9dd1240          LDRD     r1,r2,[sp,#0x100]     ;341
001d20  a862              ADD      r0,sp,#0x188          ;341
001d22  9b42              LDR      r3,[sp,#0x108]        ;341
001d24  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001d28  4607              MOV      r7,r0                 ;341
001d2a  a8f2              ADD      r0,sp,#0x3c8          ;341
001d2c  aaaa              ADD      r2,sp,#0x2a8          ;341
001d2e  e8b0130a          LDM      r0!,{r1,r3,r8,r9,r12} ;341
001d32  e88d130a          STM      sp,{r1,r3,r8,r9,r12}  ;341
001d36  f04f0900          MOV      r9,#0                 ;341
001d3a  4669              MOV      r1,sp                 ;341
001d3c  4610              MOV      r0,r2                 ;341
001d3e  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001d42  4680              MOV      r8,r0                 ;341
001d44  f8809030          STRB     r9,[r0,#0x30]         ;341
001d48  a840              ADD      r0,sp,#0x100          ;341
001d4a  aa45              ADD      r2,sp,#0x114          ;341
001d4c  e8b0160a          LDM      r0!,{r1,r3,r9,r10,r12};341
001d50  e88d160a          STM      sp,{r1,r3,r9,r10,r12} ;341
001d54  f04f0a00          MOV      r10,#0                ;341
001d58  4669              MOV      r1,sp                 ;341
001d5a  4610              MOV      r0,r2                 ;341
001d5c  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001d60  4681              MOV      r9,r0                 ;341
001d62  f880a030          STRB     r10,[r0,#0x30]        ;341
001d66  f1070008          ADD      r0,r7,#8              ;341
001d6a  e8905c0f          LDM      r0,{r0-r3,r10-r12,lr} ;341
001d6e  e88d5c0f          STM      sp,{r0-r3,r10-r12,lr} ;341
001d72  e9d7010a          LDRD     r0,r1,[r7,#0x28]      ;341
001d76  6b3a              LDR      r2,[r7,#0x30]         ;341
001d78  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;341
001d7c  920a              STR      r2,[sp,#0x28]         ;341
001d7e  e9d72300          LDRD     r2,r3,[r7,#0]         ;341
001d82  4641              MOV      r1,r8                 ;341
001d84  4648              MOV      r0,r9                 ;341
001d86  f7fffffe          BL       _ZN4Anki8Embedded6Matrix3AddIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Add<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001d8a  f50d7980          ADD      r9,sp,#0x100          ;342
001d8e  a845              ADD      r0,sp,#0x114          ;342
001d90  e8b9118a          LDM      r9!,{r1,r3,r7,r8,r12} ;342
001d94  e88d118a          STM      sp,{r1,r3,r7,r8,r12}  ;342
001d98  2700              MOVS     r7,#0                 ;342
001d9a  4669              MOV      r1,sp                 ;342
001d9c  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001da0  f8807030          STRB     r7,[r0,#0x30]         ;342
001da4  901f              STR      r0,[sp,#0x7c]         ;342
001da6  e9dd0143          LDRD     r0,r1,[sp,#0x10c]     ;342
001daa  e9cd0100          STRD     r0,r1,[sp,#0]         ;342
001dae  e9dd1240          LDRD     r1,r2,[sp,#0x100]     ;342
001db2  a862              ADD      r0,sp,#0x188          ;342
001db4  9b42              LDR      r3,[sp,#0x108]        ;342
001db6  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001dba  4684              MOV      r12,r0                ;342
001dbc  f1000110          ADD      r1,r0,#0x10           ;342
001dc0  e9dcb802          LDRD     r11,r8,[r12,#8]       ;342
001dc4  e9dc9a00          LDRD     r9,r10,[r12,#0]       ;342
001dc8  c98e              LDM      r1,{r1-r3,r7}         ;342
001dca  f8cdb028          STR      r11,[sp,#0x28]        ;342
001dce  e9cd9a1d          STRD     r9,r10,[sp,#0x74]     ;342
001dd2  f10c0c20          ADD      r12,r12,#0x20         ;342
001dd6  4640              MOV      r0,r8                 ;342
001dd8  e8bc4f00          LDM      r12!,{r8-r11,lr}      ;342
001ddc  e88d4f8f          STM      sp,{r0-r3,r7-r11,lr}  ;342
001de0  e9dd201e          LDRD     r2,r0,[sp,#0x78]      ;342
001de4  eeb00a68          VMOV.F32 s0,s17                ;342
001de8  9b0a              LDR      r3,[sp,#0x28]         ;342
001dea  991d              LDR      r1,[sp,#0x74]         ;342
001dec  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Subtract<float, float, float>, float>(T1, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
001df0  f50d7980          ADD      r9,sp,#0x100          ;343
001df4  a845              ADD      r0,sp,#0x114          ;343
001df6  e8b9018e          LDM      r9!,{r1-r3,r7,r8}     ;343
001dfa  e88d018e          STM      sp,{r1-r3,r7,r8}      ;343
001dfe  2700              MOVS     r7,#0                 ;343
001e00  4669              MOV      r1,sp                 ;343
001e02  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001e06  f8807030          STRB     r7,[r0,#0x30]         ;343
001e0a  901f              STR      r0,[sp,#0x7c]         ;343
001e0c  ed940a4b          VLDR     s0,[r4,#0x12c]        ;343
001e10  e9dd0143          LDRD     r0,r1,[sp,#0x10c]     ;343
001e14  ee600a2a          VMUL.F32 s1,s0,s21             ;343
001e18  e9cd0100          STRD     r0,r1,[sp,#0]         ;343
001e1c  e9dd1240          LDRD     r1,r2,[sp,#0x100]     ;343
001e20  ee200a80          VMUL.F32 s0,s1,s0              ;343
001e24  a862              ADD      r0,sp,#0x188          ;343
001e26  9b42              LDR      r3,[sp,#0x108]        ;343
001e28  ee898a00          VDIV.F32 s16,s18,s0            ;343
001e2c  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001e30  e9d09102          LDRD     r9,r1,[r0,#8]         ;343
001e34  e9d02305          LDRD     r2,r3,[r0,#0x14]      ;343
001e38  e9d0a800          LDRD     r10,r8,[r0,#0]        ;343
001e3c  f8d0e010          LDR      lr,[r0,#0x10]         ;343
001e40  69c7              LDR      r7,[r0,#0x1c]         ;343
001e42  f8cd9028          STR      r9,[sp,#0x28]         ;343
001e46  e9cda81d          STRD     r10,r8,[sp,#0x74]     ;343
001e4a  f1000820          ADD      r8,r0,#0x20           ;343
001e4e  6b00              LDR      r0,[r0,#0x30]         ;343
001e50  e8980f00          LDM      r8,{r8-r11}           ;343
001e54  e9cdb008          STRD     r11,r0,[sp,#0x20]     ;343
001e58  e9cd1e00          STRD     r1,lr,[sp,#0]         ;343
001e5c  a802              ADD      r0,sp,#8              ;343
001e5e  eeb00a48          VMOV.F32 s0,s16                ;343
001e62  e8a0078c          STM      r0!,{r2,r3,r7-r10}    ;343
001e66  e9dd201e          LDRD     r2,r0,[sp,#0x78]      ;343
001e6a  9b0a              LDR      r3,[sp,#0x28]         ;343
001e6c  991d              LDR      r1,[sp,#0x74]         ;343
001e6e  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)
001e72  f50d7980          ADD      r9,sp,#0x100          ;344
001e76  a845              ADD      r0,sp,#0x114          ;344
001e78  e8b9018e          LDM      r9!,{r1-r3,r7,r8}     ;344
001e7c  e88d018e          STM      sp,{r1-r3,r7,r8}      ;344
001e80  f04f0800          MOV      r8,#0                 ;344
001e84  4669              MOV      r1,sp                 ;344
001e86  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001e8a  4607              MOV      r7,r0                 ;344
001e8c  f8808030          STRB     r8,[r0,#0x30]         ;344
001e90  e9dd0143          LDRD     r0,r1,[sp,#0x10c]     ;344
001e94  e9cd0100          STRD     r0,r1,[sp,#0]         ;344
001e98  e9dd1240          LDRD     r1,r2,[sp,#0x100]     ;344
001e9c  a862              ADD      r0,sp,#0x188          ;344
001e9e  9b42              LDR      r3,[sp,#0x108]        ;344
001ea0  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
001ea4  4686              MOV      lr,r0                 ;344
001ea6  e8900f0f          LDM      r0,{r0-r3,r8-r11}     ;344
001eaa  f10d0c10          ADD      r12,sp,#0x10          ;344
001eae  e8ac010e          STM      r12!,{r1-r3,r8}       ;344
001eb2  e9de1208          LDRD     r1,r2,[lr,#0x20]      ;344
001eb6  e9de380a          LDRD     r3,r8,[lr,#0x28]      ;344
001eba  f8dee030          LDR      lr,[lr,#0x30]         ;344
001ebe  e88d010e          STM      sp,{r1-r3,r8}         ;344
001ec2  f10d0c10          ADD      r12,sp,#0x10          ;344
001ec6  e8bc010e          LDM      r12!,{r1-r3,r8}       ;344
001eca  f50d7c13          ADD      r12,sp,#0x24c         ;344
001ece  e8ac0f0f          STM      r12!,{r0-r3,r8-r11}   ;344
001ed2  e89d010e          LDM      sp,{r1-r3,r8}         ;344
001ed6  a89b              ADD      r0,sp,#0x26c          ;344
001ed8  f50d7919          ADD      r9,sp,#0x264          ;344
001edc  e8a0410e          STM      r0!,{r1-r3,r8,lr}     ;344
001ee0  f1070818          ADD      r8,r7,#0x18           ;344
001ee4  4640              MOV      r0,r8                 ;344
001ee6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
001eea  b3e8              CBZ      r0,|L2.8040|
001eec  4640              MOV      r0,r8                 ;344
001eee  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
001ef2  b3c8              CBZ      r0,|L2.8040|
001ef4  4648              MOV      r0,r9                 ;344
001ef6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
001efa  b3a8              CBZ      r0,|L2.8040|
001efc  f8973030          LDRB     r3,[r7,#0x30]         ;344
001f00  a893              ADD      r0,sp,#0x24c          ;344
001f02  f107020c          ADD      r2,r7,#0xc            ;344
001f06  e9cd3002          STRD     r3,r0,[sp,#8]         ;344
001f0a  e9cd7200          STRD     r7,r2,[sp,#0]         ;344
001f0e  f50d7c16          ADD      r12,sp,#0x258         ;344
001f12  4639              MOV      r1,r7                 ;344
001f14  f8cdc010          STR      r12,[sp,#0x10]        ;344
001f18  a81e              ADD      r0,sp,#0x78           ;344
001f1a  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
001f1e  f89d0078          LDRB     r0,[sp,#0x78]         ;344
001f22  2800              CMP      r0,#0                 ;344
001f24  d052              BEQ      |L2.8140|
001f26  f89d0079          LDRB     r0,[sp,#0x79]         ;344
001f2a  f04f0a00          MOV      r10,#0                ;344
001f2e  2800              CMP      r0,#0                 ;344
001f30  9825              LDR      r0,[sp,#0x94]         ;344
001f32  d04c              BEQ      |L2.8142|
001f34  2800              CMP      r0,#0                 ;344
001f36  dd48              BLE      |L2.8138|
                  |L2.7992|
001f38  9821              LDR      r0,[sp,#0x84]         ;344
001f3a  f8d82008          LDR      r2,[r8,#8]            ;344
001f3e  f8d81010          LDR      r1,[r8,#0x10]         ;344
001f42  fb001002          MLA      r0,r0,r2,r1           ;344
001f46  9007              STR      r0,[sp,#0x1c]         ;344
001f48  981f              LDR      r0,[sp,#0x7c]         ;344
001f4a  f8d92008          LDR      r2,[r9,#8]            ;344
001f4e  f8d91010          LDR      r1,[r9,#0x10]         ;344
001f52  fb001b02          MLA      r11,r0,r2,r1          ;344
001f56  a81e              ADD      r0,sp,#0x78           ;344
001f58  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
001f5c  9826              LDR      r0,[sp,#0x98]         ;344
001f5e  2700              MOVS     r7,#0                 ;344
001f60  2800              CMP      r0,#0                 ;344
001f62  dd1e              BLE      |L2.8098|
                  |L2.8036|
001f64  9922              LDR      r1,[sp,#0x88]         ;344
001f66  e000              B        |L2.8042|
                  |L2.8040|
001f68  e024              B        |L2.8116|
                  |L2.8042|
001f6a  9807              LDR      r0,[sp,#0x1c]         ;344
001f6c  eb000081          ADD      r0,r0,r1,LSL #2       ;344
001f70  ed900a00          VLDR     s0,[r0,#0]            ;344
001f74  f7fffffe          BL       __hardfp_expf
001f78  9820              LDR      r0,[sp,#0x80]         ;344
001f7a  1c7f              ADDS     r7,r7,#1              ;344
001f7c  eb0b0080          ADD      r0,r11,r0,LSL #2      ;344
001f80  ed800a00          VSTR     s0,[r0,#0]            ;344
001f84  9928              LDR      r1,[sp,#0xa0]         ;344
001f86  9822              LDR      r0,[sp,#0x88]         ;344
001f88  4408              ADD      r0,r0,r1              ;344
001f8a  9022              STR      r0,[sp,#0x88]         ;344
001f8c  992a              LDR      r1,[sp,#0xa8]         ;344
001f8e  9824              LDR      r0,[sp,#0x90]         ;344
001f90  4408              ADD      r0,r0,r1              ;344
001f92  9024              STR      r0,[sp,#0x90]         ;344
001f94  9927              LDR      r1,[sp,#0x9c]         ;344
001f96  9820              LDR      r0,[sp,#0x80]         ;344
001f98  4408              ADD      r0,r0,r1              ;344
001f9a  9020              STR      r0,[sp,#0x80]         ;344
001f9c  9826              LDR      r0,[sp,#0x98]         ;344
001f9e  42b8              CMP      r0,r7                 ;344
001fa0  dce0              BGT      |L2.8036|
                  |L2.8098|
001fa2  a81e              ADD      r0,sp,#0x78           ;344
001fa4  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
001fa8  9825              LDR      r0,[sp,#0x94]         ;344
001faa  f10a0a01          ADD      r10,r10,#1            ;344
001fae  4550              CMP      r0,r10                ;344
001fb0  dcc2              BGT      |L2.7992|
001fb2  e0a8              B        |L2.8454|
                  |L2.8116|
001fb4  f2407122          MOV      r1,#0x722             ;344
001fb8  480e              LDR      r0,|L2.8180|
001fba  e9cd0100          STRD     r0,r1,[sp,#0]         ;344
001fbe  a30e              ADR      r3,|L2.8184|
001fc0  a21b              ADR      r2,|L2.8240|
001fc2  a11f              ADR      r1,|L2.8256|
001fc4  2005              MOVS     r0,#5                 ;344
001fc6  f7fffffe          BL       _Anki_Log
                  |L2.8138|
001fca  e09c              B        |L2.8454|
                  |L2.8140|
001fcc  e04a              B        |L2.8292|
                  |L2.8142|
001fce  e057              B        |L2.8320|
                  |L2.8144|
001fd0  496e6974          DCB      "InitializeTemplate.weights.compute",0
001fd4  69616c69
001fd8  7a655465
001fdc  6d706c61
001fe0  74652e77
001fe4  65696768
001fe8  74732e63
001fec  6f6d7075
001ff0  746500  
001ff3  00                DCB      0
                  |L2.8180|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3ExpIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Exp<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L2.8184|
001ff8  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
001ffc  6f726574
002000  6563685c
002004  636f6d6d
002008  6f6e5c69
00200c  6e636c75
002010  64655c61
002014  6e6b692f
002018  636f6d6d
00201c  6f6e2f72
002020  6f626f74
002024  2f6d6174
002028  726978  
00202b  2e6800            DCB      ".h",0
00202e  00                DCB      0
00202f  00                DCB      0
                  |L2.8240|
002030  496e7661          DCB      "Invalid objects",0
002034  6c696420
002038  6f626a65
00203c  63747300
                  |L2.8256|
002040  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
002044  69783a3a
002048  456c656d
00204c  656e7477
002050  6973653a
002054  3a417070
002058  6c794f70
00205c  65726174
002060  696f6e00
                  |L2.8292|
002064  48a1              LDR      r0,|L2.8940|
002066  f240712a          MOV      r1,#0x72a             ;344
00206a  f2af0374          ADR      r3,|L2.8184|
00206e  a2a0              ADR      r2,|L2.8944|
002070  e9cd0100          STRD     r0,r1,[sp,#0]         ;344
002074  f2af0138          ADR      r1,|L2.8256|
002078  2005              MOVS     r0,#5                 ;344
00207a  f7fffffe          BL       _Anki_Log
00207e  e042              B        |L2.8454|
                  |L2.8320|
002080  2800              CMP      r0,#0                 ;344
002082  dd40              BLE      |L2.8454|
                  |L2.8324|
002084  981f              LDR      r0,[sp,#0x7c]         ;344
002086  f8d92008          LDR      r2,[r9,#8]            ;344
00208a  f8d91010          LDR      r1,[r9,#0x10]         ;344
00208e  fb001b02          MLA      r11,r0,r2,r1          ;344
002092  a81e              ADD      r0,sp,#0x78           ;344
002094  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
002098  9826              LDR      r0,[sp,#0x98]         ;344
00209a  2700              MOVS     r7,#0                 ;344
00209c  2800              CMP      r0,#0                 ;344
00209e  dd2a              BLE      |L2.8438|
                  |L2.8352|
0020a0  e9dd1021          LDRD     r1,r0,[sp,#0x84]      ;344
0020a4  f8d83008          LDR      r3,[r8,#8]            ;344
0020a8  f8d82010          LDR      r2,[r8,#0x10]         ;344
0020ac  fb012103          MLA      r1,r1,r3,r2           ;344
0020b0  eb010080          ADD      r0,r1,r0,LSL #2       ;344
0020b4  ed900a00          VLDR     s0,[r0,#0]            ;344
0020b8  f7fffffe          BL       __hardfp_expf
0020bc  9820              LDR      r0,[sp,#0x80]         ;344
0020be  1c7f              ADDS     r7,r7,#1              ;344
0020c0  eb0b0080          ADD      r0,r11,r0,LSL #2      ;344
0020c4  ed800a00          VSTR     s0,[r0,#0]            ;344
0020c8  9928              LDR      r1,[sp,#0xa0]         ;344
0020ca  9822              LDR      r0,[sp,#0x88]         ;344
0020cc  4408              ADD      r0,r0,r1              ;344
0020ce  9022              STR      r0,[sp,#0x88]         ;344
0020d0  9929              LDR      r1,[sp,#0xa4]         ;344
0020d2  9821              LDR      r0,[sp,#0x84]         ;344
0020d4  4408              ADD      r0,r0,r1              ;344
0020d6  9021              STR      r0,[sp,#0x84]         ;344
0020d8  992a              LDR      r1,[sp,#0xa8]         ;344
0020da  9824              LDR      r0,[sp,#0x90]         ;344
0020dc  4408              ADD      r0,r0,r1              ;344
0020de  9024              STR      r0,[sp,#0x90]         ;344
0020e0  992b              LDR      r1,[sp,#0xac]         ;344
0020e2  9823              LDR      r0,[sp,#0x8c]         ;344
0020e4  4408              ADD      r0,r0,r1              ;344
0020e6  9023              STR      r0,[sp,#0x8c]         ;344
0020e8  9927              LDR      r1,[sp,#0x9c]         ;344
0020ea  9820              LDR      r0,[sp,#0x80]         ;344
0020ec  4408              ADD      r0,r0,r1              ;344
0020ee  9020              STR      r0,[sp,#0x80]         ;344
0020f0  9826              LDR      r0,[sp,#0x98]         ;344
0020f2  42b8              CMP      r0,r7                 ;344
0020f4  dcd4              BGT      |L2.8352|
                  |L2.8438|
0020f6  a81e              ADD      r0,sp,#0x78           ;344
0020f8  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
0020fc  9825              LDR      r0,[sp,#0x94]         ;344
0020fe  f10a0a01          ADD      r10,r10,#1            ;344
002102  4550              CMP      r0,r10                ;344
002104  dcbe              BGT      |L2.8324|
                  |L2.8454|
002106  f2af1038          ADR      r0,|L2.8144|
00210a  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00210e  2300              MOVS     r3,#0                 ;348
002110  461a              MOV      r2,r3                 ;348
002112  2101              MOVS     r1,#1                 ;348
002114  a857              ADD      r0,sp,#0x15c          ;348
002116  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00211a  6800              LDR      r0,[r0,#0]            ;348
00211c  9000              STR      r0,[sp,#0]            ;348
00211e  abeb              ADD      r3,sp,#0x3ac          ;348
002120  a852              ADD      r0,sp,#0x148          ;348
002122  f8dd247c          LDR      r2,[sp,#0x47c]        ;348
002126  f8dd1480          LDR      r1,[sp,#0x480]        ;348
00212a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00212e  a075              ADR      r0,|L2.8964|
002130  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
002134  f04f0800          MOV      r8,#0                 ;352
002138  eeb00a68          VMOV.F32 s0,s17                ;352
00213c  ab52              ADD      r3,sp,#0x148          ;352
00213e  f50d62aa          ADD      r2,sp,#0x550          ;352
002142  f20d513c          ADD      r1,sp,#0x53c          ;352
002146  a818              ADD      r0,sp,#0x60           ;352
002148  f8cd8000          STR      r8,[sp,#0]            ;352
00214c  f7fffffe          BL       _ZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_ ; Anki::Embedded::Interp2<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
002150  2800              CMP      r0,#0                 ;352
002152  f47daf6f          BNE      |L2.52|
002156  a06b              ADR      r0,|L2.8964|
002158  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00215c  a072              ADR      r0,|L2.9000|
00215e  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
002162  e9dd0155          LDRD     r0,r1,[sp,#0x154]     ;356
002166  e9cd0100          STRD     r0,r1,[sp,#0]         ;356
00216a  e9dd1252          LDRD     r1,r2,[sp,#0x148]     ;358
00216e  f20d509c          ADD      r0,sp,#0x59c          ;358
002172  9b54              LDR      r3,[sp,#0x150]        ;358
002174  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
002178  4607              MOV      r7,r0                 ;358
00217a  a840              ADD      r0,sp,#0x100          ;358
00217c  f20d4284          ADD      r2,sp,#0x484          ;358
002180  e8b0160a          LDM      r0!,{r1,r3,r9,r10,r12};358
002184  e88d160a          STM      sp,{r1,r3,r9,r10,r12} ;358
002188  46c1              MOV      r9,r8                 ;358
00218a  4669              MOV      r1,sp                 ;358
00218c  4610              MOV      r0,r2                 ;358
00218e  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
002192  f8809030          STRB     r9,[r0,#0x30]         ;358
002196  901d              STR      r0,[sp,#0x74]         ;358
002198  a852              ADD      r0,sp,#0x148          ;358
00219a  f50d6286          ADD      r2,sp,#0x430          ;358
00219e  e8b0160a          LDM      r0!,{r1,r3,r9,r10,r12};358
0021a2  e88d160a          STM      sp,{r1,r3,r9,r10,r12} ;358
0021a6  46c2              MOV      r10,r8                ;358
0021a8  4669              MOV      r1,sp                 ;358
0021aa  4610              MOV      r0,r2                 ;358
0021ac  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0021b0  4681              MOV      r9,r0                 ;358
0021b2  f880a030          STRB     r10,[r0,#0x30]        ;358
0021b6  f1070008          ADD      r0,r7,#8              ;358
0021ba  e8905c0f          LDM      r0,{r0-r3,r10-r12,lr} ;358
0021be  e88d5c0f          STM      sp,{r0-r3,r10-r12,lr} ;358
0021c2  e9d7010a          LDRD     r0,r1,[r7,#0x28]      ;358
0021c6  6b3a              LDR      r2,[r7,#0x30]         ;358
0021c8  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;358
0021cc  920a              STR      r2,[sp,#0x28]         ;358
0021ce  e9d72300          LDRD     r2,r3,[r7,#0]         ;358
0021d2  4648              MOV      r0,r9                 ;358
0021d4  991d              LDR      r1,[sp,#0x74]         ;358
0021d6  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
0021da  2300              MOVS     r3,#0                 ;361
0021dc  f8cd8000          STR      r8,[sp,#0]            ;361
0021e0  461a              MOV      r2,r3                 ;361
0021e2  a952              ADD      r1,sp,#0x148          ;361
0021e4  a81d              ADD      r0,sp,#0x74           ;361
0021e6  f8cd8004          STR      r8,[sp,#4]            ;361
0021ea  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
0021ee  a81d              ADD      r0,sp,#0x74           ;361
0021f0  eeb00a68          VMOV.F32 s0,s17                ;361
0021f4  e8b01e8e          LDM      r0!,{r1-r3,r7,r9-r12} ;361
0021f8  a8d1              ADD      r0,sp,#0x344          ;361
0021fa  e8a01e8e          STM      r0!,{r1-r3,r7,r9-r12} ;361
0021fe  a825              ADD      r0,sp,#0x94           ;361
002200  f50d7959          ADD      r9,sp,#0x364          ;361
002204  e8b0108e          LDM      r0!,{r1-r3,r7,r12}    ;361
002208  e8a9108e          STM      r9!,{r1-r3,r7,r12}    ;361
00220c  a8d1              ADD      r0,sp,#0x344          ;361
00220e  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE3SetEf ; Anki::Embedded::ArraySlice<float>::Set(float)
002212  f04f33ff          MOV      r3,#0xffffffff        ;362
002216  f8cd8000          STR      r8,[sp,#0]            ;362
00221a  461a              MOV      r2,r3                 ;362
00221c  a952              ADD      r1,sp,#0x148          ;362
00221e  a81d              ADD      r0,sp,#0x74           ;362
002220  f8cd8004          STR      r8,[sp,#4]            ;362
002224  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
002228  a81d              ADD      r0,sp,#0x74           ;362
00222a  eeb00a68          VMOV.F32 s0,s17                ;362
00222e  e8b0178e          LDM      r0!,{r1-r3,r7-r10,r12};362
002232  a8de              ADD      r0,sp,#0x378          ;362
002234  e8a0178e          STM      r0!,{r1-r3,r7-r10,r12};362
002238  a825              ADD      r0,sp,#0x94           ;362
00223a  f50d7966          ADD      r9,sp,#0x398          ;362
00223e  e8b0108e          LDM      r0!,{r1-r3,r7,r12}    ;362
002242  e8a9108e          STM      r9!,{r1-r3,r7,r12}    ;362
002246  a8de              ADD      r0,sp,#0x378          ;362
002248  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE3SetEf ; Anki::Embedded::ArraySlice<float>::Set(float)
00224c  f04f37ff          MOV      r7,#0xffffffff        ;363
002250  2300              MOVS     r3,#0                 ;363
002252  9700              STR      r7,[sp,#0]            ;363
002254  461a              MOV      r2,r3                 ;363
002256  a952              ADD      r1,sp,#0x148          ;363
002258  a81d              ADD      r0,sp,#0x74           ;363
00225a  9701              STR      r7,[sp,#4]            ;363
00225c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
002260  a81d              ADD      r0,sp,#0x74           ;363
002262  eeb00a68          VMOV.F32 s0,s17                ;363
002266  e8b01f0e          LDM      r0!,{r1-r3,r8-r12}    ;363
00226a  a8b7              ADD      r0,sp,#0x2dc          ;363
00226c  e8a01f0e          STM      r0!,{r1-r3,r8-r12}    ;363
002270  a825              ADD      r0,sp,#0x94           ;363
002272  f50d793f          ADD      r9,sp,#0x2fc          ;363
002276  e8b0110e          LDM      r0!,{r1-r3,r8,r12}    ;363
00227a  e8a9110e          STM      r9!,{r1-r3,r8,r12}    ;363
00227e  a8b7              ADD      r0,sp,#0x2dc          ;363
002280  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE3SetEf ; Anki::Embedded::ArraySlice<float>::Set(float)
002284  463b              MOV      r3,r7                 ;364
002286  9700              STR      r7,[sp,#0]            ;364
002288  461a              MOV      r2,r3                 ;364
00228a  a952              ADD      r1,sp,#0x148          ;364
00228c  a81d              ADD      r0,sp,#0x74           ;364
00228e  9701              STR      r7,[sp,#4]            ;364
002290  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
002294  a81d              ADD      r0,sp,#0x74           ;364
002296  eeb00a68          VMOV.F32 s0,s17                ;364
00229a  e8b0178e          LDM      r0!,{r1-r3,r7-r10,r12};364
00229e  a8c4              ADD      r0,sp,#0x310          ;364
0022a0  e8a0178e          STM      r0!,{r1-r3,r7-r10,r12};364
0022a4  a825              ADD      r0,sp,#0x94           ;364
0022a6  f50d794c          ADD      r9,sp,#0x330          ;364
0022aa  e8b0108e          LDM      r0!,{r1-r3,r7,r12}    ;364
0022ae  e8a9108e          STM      r9!,{r1-r3,r7,r12}    ;364
0022b2  a8c4              ADD      r0,sp,#0x310          ;364
0022b4  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE3SetEf ; Anki::Embedded::ArraySlice<float>::Set(float)
0022b8  f8d410cc          LDR      r1,[r4,#0xcc]         ;364
0022bc  2000              MOVS     r0,#0                 ;366
0022be  eb010285          ADD      r2,r1,r5,LSL #2       ;366
0022c2  a952              ADD      r1,sp,#0x148          ;366
0022c4  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
0022c8  a017              ADR      r0,|L2.9000|
0022ca  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0022ce  f8d410d0          LDR      r1,[r4,#0xd0]         ;198
0022d2  1c76              ADDS     r6,r6,#1              ;198
0022d4  42b1              CMP      r1,r6                 ;198
0022d6  f73eaa95          BGT      |L2.2052|
                  |L2.8922|
0022da  481d              LDR      r0,|L2.9040|
0022dc  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0022e0  2001              MOVS     r0,#1                 ;373
0022e2  f8840140          STRB     r0,[r4,#0x140]        ;373
0022e6  2000              MOVS     r0,#0                 ;375
0022e8  f7fdbea4          B        |L2.52|
;;;377    
                          ENDP

                  |L2.8940|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3ExpIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Exp<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L2.8944|
0022f0  4c696d69          DCB      "Limits is not valid",0
0022f4  74732069
0022f8  73206e6f
0022fc  74207661
002300  6c696400
                  |L2.8964|
002304  496e6974          DCB      "InitializeTemplate.weights.interp2",0
002308  69616c69
00230c  7a655465
002310  6d706c61
002314  74652e77
002318  65696768
00231c  74732e69
002320  6e746572
002324  703200  
002327  00                DCB      0
                  |L2.9000|
002328  496e6974          DCB      "InitializeTemplate.weights.vectorize",0
00232c  69616c69
002330  7a655465
002334  6d706c61
002338  74652e77
00233c  65696768
002340  74732e76
002344  6563746f
002348  72697a65
00234c  00      
00234d  00                DCB      0
00234e  00                DCB      0
00234f  00                DCB      0
                  |L2.9040|
                          DCD      ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18InitializeTemplateERKNS0_5ArrayIhEERNS0_11MemoryStackE||+0xa64

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18set_transformationERKNS0_15Transformations24PlanarTransformation_f32E||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18set_transformationERKNS0_15Transformations24PlanarTransformation_f32E PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::set_transformation(const Anki::Embedded::Transformations::PlanarTransformation_f32&)
;;;693    
;;;694          Result LucasKanadeTracker_Slow::set_transformation(const Transformations::PlanarTransformation_f32 &transformation)
000000  30e4              ADDS     r0,r0,#0xe4
;;;695          {
;;;696            return this->transformation.Set(transformation);
000002  f7ffbffe          B.W      _ZN4Anki8Embedded15Transformations24PlanarTransformation_f323SetERKS2_ ; Anki::Embedded::Transformations::PlanarTransformation_f32::Set(const Anki::Embedded::Transformations::PlanarTransformation_f32&)
;;;697          }
;;;698    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow20UpdateTransformationERKNS0_5ArrayIfEEfNS0_11MemoryStackENS0_15Transformations13TransformTypeE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow20UpdateTransformationERKNS0_5ArrayIfEEfNS0_11MemoryStackENS0_15Transformations13TransformTypeE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::UpdateTransformation(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
;;;688    
;;;689          Result LucasKanadeTracker_Slow::UpdateTransformation(const Array<f32> &update, const f32 scale, MemoryStack scratch, Transformations::TransformType updateType)
000000  b570              PUSH     {r4-r6,lr}
;;;690          {
000002  460e              MOV      r6,r1
000004  ed2d8b02          VPUSH    {d8}
000008  b088              SUB      sp,sp,#0x20
00000a  4604              MOV      r4,r0
00000c  461d              MOV      r5,r3
00000e  eeb08a40          VMOV.F32 s16,s0
;;;691            return this->transformation.Update(update, scale, scratch, updateType);
000012  4611              MOV      r1,r2
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00001a  4602              MOV      r2,r0
00001c  462b              MOV      r3,r5
00001e  eeb00a48          VMOV.F32 s0,s16
000022  4631              MOV      r1,r6
000024  f10400e4          ADD      r0,r4,#0xe4
000028  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
;;;692          }
00002c  b008              ADD      sp,sp,#0x20
00002e  ecbd8b02          VPOP     {d8}
000032  bd70              POP      {r4-r6,pc}
;;;693    
                          ENDP


                          AREA ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeEbRbNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeEbRbNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::IterativelyRefineTrack(const Anki::Embedded::Array<unsigned char>&, int, int, float, Anki::Embedded::Transformations::TransformType, bool, bool&, Anki::Embedded::MemoryStack)
;;;406    
;;;407          Result LucasKanadeTracker_Slow::IterativelyRefineTrack(const Array<u8> &nextImage, const s32 maxIterations, const s32 whichScale, const f32 convergenceTolerance, const Transformations::TransformType curTransformType, const bool useWeights, bool &verify_converged, MemoryStack scratch)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;408          {
000004  4680              MOV      r8,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  461c              MOV      r4,r3
;;;409            const bool isOutColumnMajor = false; // TODO: change to false, which will probably be faster
;;;410    
;;;411            Result lastResult;
;;;412    
;;;413            AnkiConditionalErrorAndReturnValue(this->isInitialized == true,
00000c  4de9              LDR      r5,|L5.948|
00000e  ed2d8b06          VPUSH    {d8-d10}              ;408
000012  f5ad7d71          SUB      sp,sp,#0x3c4          ;408
000016  eeb08a40          VMOV.F32 s16,s0                ;408
00001a  f8900141          LDRB     r0,[r0,#0x141]
00001e  2801              CMP      r0,#1
000020  d011              BEQ      |L5.70|
000022  f240109d          MOV      r0,#0x19d
000026  e9cd5000          STRD     r5,r0,[sp,#0]
00002a  a3e3              ADR      r3,|L5.952|
00002c  a2ef              ADR      r2,|L5.1004|
00002e  a1f7              ADR      r1,|L5.1036|
000030  2005              MOVS     r0,#5
000032  f7fffffe          BL       _Anki_Log
000036  2001              MOVS     r0,#1
                  |L5.56|
;;;414              RESULT_FAIL, "LucasKanadeTracker_Slow::IterativelyRefineTrack", "This object is not initialized");
;;;415    
;;;416            AnkiConditionalErrorAndReturnValue(nextImage.IsValid(),
;;;417              RESULT_FAIL_INVALID_OBJECT, "LucasKanadeTracker_Slow::IterativelyRefineTrack", "nextImage is not valid");
;;;418    
;;;419            AnkiConditionalErrorAndReturnValue(maxIterations > 0 && maxIterations < 1000,
;;;420              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_Slow::IterativelyRefineTrack", "maxIterations must be greater than zero and less than 1000");
;;;421    
;;;422            AnkiConditionalErrorAndReturnValue(whichScale >= 0 && whichScale < this->numPyramidLevels,
;;;423              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_Slow::IterativelyRefineTrack", "whichScale is invalid");
;;;424    
;;;425            AnkiConditionalErrorAndReturnValue(convergenceTolerance > 0.0f,
;;;426              RESULT_FAIL_INVALID_PARAMETER, "LucasKanadeTracker_Slow::IterativelyRefineTrack", "convergenceTolerance must be greater than zero");
;;;427    
;;;428            const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / nextImage.get_size(1) ;
;;;429            const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32); // TODO: check that this is integer
;;;430    
;;;431            const s32 numPointsY = templateCoordinates[whichScale].get_yGridVector().get_size();
;;;432            const s32 numPointsX = templateCoordinates[whichScale].get_xGridVector().get_size();
;;;433    
;;;434            Array<f32> A_part;
;;;435    
;;;436            BeginBenchmark("IterativelyRefineTrack.extractAPart");
;;;437            const s32 numSystemParameters = curTransformType >> 8;
;;;438            if(curTransformType == Transformations::TRANSFORM_TRANSLATION) {
;;;439              // Translation-only can be performed by grabbing a few rows of the A_full matrix
;;;440              if(this->get_transformation().get_transformType() == Transformations::TRANSFORM_AFFINE ||
;;;441                this->get_transformation().get_transformType() == Transformations::TRANSFORM_PROJECTIVE) {
;;;442                  A_part = Array<f32>(2, this->A_full[whichScale].get_size(1), scratch);
;;;443                  A_part(0,-1,0,-1).Set(this->A_full[whichScale](2,3,5,0,1,-1)); // grab the 2nd and 5th rows
;;;444              } else if(this->get_transformation().get_transformType() == Transformations::TRANSFORM_TRANSLATION) {
;;;445                A_part = this->A_full[whichScale];
;;;446              } else {
;;;447                AnkiAssert(false);
;;;448              }
;;;449            } else if(curTransformType == Transformations::TRANSFORM_AFFINE || curTransformType == Transformations::TRANSFORM_PROJECTIVE) {
;;;450              A_part = this->A_full[whichScale];
;;;451            } else {
;;;452              AnkiAssert(false);
;;;453            }
;;;454            EndBenchmark("IterativelyRefineTrack.extractAPart");
;;;455    
;;;456            //Array<f32> xPrevious(1, numPointsY*numPointsX, scratch);
;;;457            //Array<f32> yPrevious(1, numPointsY*numPointsX, scratch);
;;;458    
;;;459            // Initialize with some very extreme coordinates
;;;460            FixedLengthList<Quadrilateral<f32> > previousCorners(NUM_PREVIOUS_QUADS_TO_COMPARE, scratch);
;;;461    
;;;462            for(s32 i=0; i<NUM_PREVIOUS_QUADS_TO_COMPARE; i++) {
;;;463              previousCorners[i] = Quadrilateral<f32>(Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f), Point<f32>(-1e10f,-1e10f));
;;;464            }
;;;465    
;;;466            Array<f32> xIn(1, numPointsY*numPointsX, scratch);
;;;467            Array<f32> yIn(1, numPointsY*numPointsX, scratch);
;;;468    
;;;469            BeginBenchmark("IterativelyRefineTrack.vectorizeXin");
;;;470            {
;;;471              PUSH_MEMORY_STACK(scratch);
;;;472    
;;;473              Array<f32> xIn2d = templateCoordinates[whichScale].EvaluateX2(scratch);
;;;474              Array<f32> yIn2d = templateCoordinates[whichScale].EvaluateY2(scratch);
;;;475    
;;;476              Matrix::Vectorize(isOutColumnMajor, xIn2d, xIn);
;;;477              Matrix::Vectorize(isOutColumnMajor, yIn2d, yIn);
;;;478            } // PUSH_MEMORY_STACK(scratch);
;;;479            EndBenchmark("IterativelyRefineTrack.vectorizeXin");
;;;480    
;;;481            verify_converged = false;
;;;482    
;;;483            for(s32 iteration=0; iteration<maxIterations; iteration++) {
;;;484              PUSH_MEMORY_STACK(scratch);
;;;485    
;;;486              //const f32 scale = static_cast<f32>(1 << whichScale);
;;;487    
;;;488              // [xi, yi] = this.getImagePoints(i_scale);
;;;489              Array<f32> xTransformed(1, numPointsY*numPointsX, scratch);
;;;490              Array<f32> yTransformed(1, numPointsY*numPointsX, scratch);
;;;491    
;;;492              BeginBenchmark("IterativelyRefineTrack.transformPoints");
;;;493              //if((lastResult = transformation.TransformPoints(xIn, yIn, scale*initialImageScaleF32, xTransformed, yTransformed)) != RESULT_OK)
;;;494              if((lastResult = transformation.TransformPoints(xIn, yIn, initialImageScaleF32, true, false, xTransformed, yTransformed)) != RESULT_OK)
;;;495                return lastResult;
;;;496              EndBenchmark("IterativelyRefineTrack.transformPoints");
;;;497    
;;;498              Array<f32> nextImageTransformed(1, numPointsY*numPointsX, scratch);
;;;499    
;;;500              BeginBenchmark("IterativelyRefineTrack.interpTransformedCoords");
;;;501              // imgi = interp2(img, xi(:), yi(:), 'linear');
;;;502              {
;;;503                PUSH_MEMORY_STACK(scratch);
;;;504    
;;;505                Array<f32> nextImageTransformed2d(1, numPointsY*numPointsX, scratch);
;;;506    
;;;507                if((lastResult = Interp2<u8,f32>(nextImage, xTransformed, yTransformed, nextImageTransformed2d, INTERPOLATE_LINEAR, -1.0f)) != RESULT_OK)
;;;508                  return lastResult;
;;;509    
;;;510                Matrix::Vectorize<f32,f32>(isOutColumnMajor, nextImageTransformed2d, nextImageTransformed);
;;;511              } // PUSH_MEMORY_STACK(scratch);
;;;512              EndBenchmark("IterativelyRefineTrack.interpTransformedCoords");
;;;513    
;;;514              BeginBenchmark("IterativelyRefineTrack.getNumMatches");
;;;515              // inBounds = ~isnan(imgi);
;;;516              // WARNING: this is also treating real zeros as invalid, but this should not be a big problem
;;;517              Find<f32, Comparison::GreaterThanOrEqual<f32,f32>, f32> inBounds(nextImageTransformed, 0.0f);
;;;518              const s32 numInBounds = inBounds.get_numMatches();
;;;519    
;;;520              if(numInBounds < 16) {
;;;521                AnkiWarn("LucasKanadeTracker_Slow::IterativelyRefineTrack", "Template drifted too far out of image.");
;;;522                break;
;;;523              }
;;;524              EndBenchmark("IterativelyRefineTrack.getNumMatches");
;;;525    
;;;526              Array<f32> templateImage(1, numPointsY*numPointsX, scratch);
;;;527              Matrix::Vectorize(isOutColumnMajor, this->templateImagePyramid[whichScale], templateImage);
;;;528    
;;;529              BeginBenchmark("IterativelyRefineTrack.templateDerivative");
;;;530              // It = imgi - this.target{i_scale}(:);
;;;531              Array<f32> templateDerivativeT(1, numInBounds, scratch);
;;;532              {
;;;533                PUSH_MEMORY_STACK(scratch);
;;;534                Array<f32> templateDerivativeT_allPoints(1, numPointsY*numPointsX, scratch);
;;;535                Matrix::Subtract<f32,f32,f32>(nextImageTransformed, templateImage, templateDerivativeT_allPoints);
;;;536                inBounds.SetArray(templateDerivativeT, templateDerivativeT_allPoints, 1);
;;;537                Matrix::DotMultiply<f32,f32,f32>(templateDerivativeT, 1.0f/255.0f, templateDerivativeT);
;;;538              }
;;;539              EndBenchmark("IterativelyRefineTrack.templateDerivative");
;;;540    
;;;541              Array<f32> AWAt(numSystemParameters, numSystemParameters, scratch);
;;;542    
;;;543              // AtW = (A(inBounds,:).*this.W{i_scale}(inBounds,ones(1,size(A,2))))';
;;;544    
;;;545              BeginBenchmark("IterativelyRefineTrack.extractApartRows");
;;;546              Array<f32> A = inBounds.SetArray(A_part, 1, scratch);
;;;547              EndBenchmark("IterativelyRefineTrack.extractApartRows");
;;;548    
;;;549              BeginBenchmark("IterativelyRefineTrack.setAw");
;;;550              Array<f32> AW(A.get_size(0), A.get_size(1), scratch);
;;;551              AW.Set(A);
;;;552              EndBenchmark("IterativelyRefineTrack.setAw");
;;;553    
;;;554              BeginBenchmark("IterativelyRefineTrack.dotMultiplyWeights");
;;;555              if(useWeights) {
;;;556                PUSH_MEMORY_STACK(scratch);
;;;557                Array<f32> validTemplateWeights = inBounds.SetArray(templateWeights[whichScale], 1, scratch);
;;;558    
;;;559                for(s32 y=0; y<numSystemParameters; y++) {
;;;560                  Matrix::DotMultiply<f32,f32,f32>(AW(y,y,0,-1), validTemplateWeights, AW(y,y,0,-1));
;;;561                }
;;;562              } // if(useWeights)
;;;563              EndBenchmark("IterativelyRefineTrack.dotMultiplyWeights");
;;;564    
;;;565              BeginBenchmark("IterativelyRefineTrack.computeAWAt");
;;;566              // AtWA = AtW*A(inBounds,:) + diag(this.ridgeWeight*ones(1,size(A,2)));
;;;567              Matrix::MultiplyTranspose(A, AW, AWAt);
;;;568              EndBenchmark("IterativelyRefineTrack.computeAWAt");
;;;569    
;;;570              //if(curTransformType == Transformations::TRANSFORM_AFFINE) {
;;;571              //  Matlab matlab(false);
;;;572    
;;;573              //  matlab.PutArray(A, "A_tmp");
;;;574              //  matlab.PutArray(AW, "AW_tmp");
;;;575              //  matlab.PutArray(AWAt, "AWAt_tmp");
;;;576              //  matlab.EvalStringEcho("if ~exist('A', 'var') A=cell(0); AW=cell(0); AWAt=cell(0); end;");
;;;577              //  matlab.EvalStringEcho("A{end+1}=A_tmp; AW{end+1}=AW_tmp; AWAt{end+1}=AWAt_tmp;");
;;;578              //  CoreTechPrint("");
;;;579              //}
;;;580    
;;;581              Array<f32> ridgeWeightMatrix = Eye<f32>(numSystemParameters, numSystemParameters, scratch);
;;;582              Matrix::DotMultiply<f32,f32,f32>(ridgeWeightMatrix, ridgeWeight, ridgeWeightMatrix);
;;;583    
;;;584              Matrix::Add<f32,f32,f32>(AWAt, ridgeWeightMatrix, AWAt);
;;;585    
;;;586              BeginBenchmark("IterativelyRefineTrack.computeb");
;;;587              // b = AtW*It(inBounds);
;;;588              Array<f32> b(1,numSystemParameters,scratch);
;;;589              Matrix::MultiplyTranspose(templateDerivativeT, AW, b);
;;;590              EndBenchmark("IterativelyRefineTrack.computeb");
;;;591    
;;;592              //if(curTransformType == Transformations::TRANSFORM_AFFINE) {
;;;593              //  Matlab matlab(false);
;;;594    
;;;595              //  matlab.PutArray(b, "b_tmp");
;;;596              //  //matlab.PutArray(templateDerivativeT, "templateDerivativeT");
;;;597              //  //matlab.PutArray(ridgeWeightMatrix, "ridgeWeightMatrix");
;;;598              //  matlab.EvalStringEcho("if ~exist('b', 'var') b=cell(0); end;");
;;;599              //  matlab.EvalStringEcho("b{end+1}=b_tmp;");
;;;600              //  CoreTechPrint("");
;;;601              //}
;;;602    
;;;603              // update = AtWA\b;
;;;604              //AW.Print("AW");
;;;605              //AWAt.Print("Orig AWAt");
;;;606              //b.Print("Orig b");
;;;607    
;;;608              BeginBenchmark("IterativelyRefineTrack.solveForUpdate");
;;;609              bool numericalFailure;
;;;610              if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK)
;;;611                return lastResult;
;;;612    
;;;613              if(numericalFailure){
;;;614                AnkiWarn("LucasKanadeTracker_Slow::IterativelyRefineTrack", "numericalFailure");
;;;615                return RESULT_OK;
;;;616              }
;;;617              EndBenchmark("IterativelyRefineTrack.solveForUpdate");
;;;618    
;;;619              //b.Print("Orig update");
;;;620    
;;;621              BeginBenchmark("IterativelyRefineTrack.updateTransformation");
;;;622              //this->transformation.Print("t1");
;;;623              //b.Print("b");
;;;624              this->transformation.Update(b, initialImageScaleF32, scratch, curTransformType);
;;;625              //this->transformation.Print("t2");
;;;626              EndBenchmark("IterativelyRefineTrack.updateTransformation");
;;;627    
;;;628              //if(curTransformType == Transformations::TRANSFORM_AFFINE) {
;;;629              //  Matlab matlab(false);
;;;630    
;;;631              //  matlab.PutArray(b, "update_tmp");
;;;632              //  matlab.PutArray(this->transformation.get_homography(), "homography_tmp");
;;;633    
;;;634              //  matlab.EvalStringEcho("if ~exist('update', 'var') update=cell(0); homography=cell(0); end;");
;;;635              //  matlab.EvalStringEcho("update{end+1}=update_tmp; homography{end+1}=homography_tmp;");
;;;636              //  CoreTechPrint("");
;;;637              //}
;;;638    
;;;639              BeginBenchmark("IterativelyRefineTrack.checkForCompletion");
;;;640    
;;;641              // Check if we're done with iterations
;;;642              const f32 minChange = UpdatePreviousCorners(transformation, previousCorners, scratch);
;;;643    
;;;644              if(minChange < convergenceTolerance) {
;;;645                verify_converged = true;
;;;646                EndBenchmark("IterativelyRefineTrack.checkForCompletion");
;;;647                return RESULT_OK;
;;;648              }
;;;649    
;;;650              EndBenchmark("IterativelyRefineTrack.checkForCompletion");
;;;651            } // for(s32 iteration=0; iteration<maxIterations; iteration++)
;;;652    
;;;653            return RESULT_OK;
;;;654          } // Result LucasKanadeTracker_Slow::IterativelyRefineTrack()
000038  f50d7d71          ADD      sp,sp,#0x3c4
00003c  ecbd8b06          VPOP     {d8-d10}
000040  b006              ADD      sp,sp,#0x18
000042  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.70|
000046  98fa              LDR      r0,[sp,#0x3e8]        ;416
000048  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
00004c  2800              CMP      r0,#0                 ;416
00004e  d012              BEQ      |L5.118|
000050  98fb              LDR      r0,[sp,#0x3ec]        ;419
000052  2800              CMP      r0,#0                 ;419
000054  dd02              BLE      |L5.92|
000056  f5b07f7a          CMP      r0,#0x3e8             ;419
00005a  db19              BLT      |L5.144|
                  |L5.92|
00005c  f24010a3          MOV      r0,#0x1a3             ;419
000060  e9cd5000          STRD     r5,r0,[sp,#0]         ;419
000064  a3d4              ADR      r3,|L5.952|
000066  a2f5              ADR      r2,|L5.1084|
000068  a1e8              ADR      r1,|L5.1036|
00006a  2005              MOVS     r0,#5                 ;419
00006c  f7fffffe          BL       _Anki_Log
000070  f04f7040          MOV      r0,#0x3000000         ;419
000074  e7e0              B        |L5.56|
                  |L5.118|
000076  f44f70d0          MOV      r0,#0x1a0             ;416
00007a  e9cd5000          STRD     r5,r0,[sp,#0]         ;416
00007e  a3ce              ADR      r3,|L5.952|
000080  a2fd              ADR      r2,|L5.1144|
000082  a1e2              ADR      r1,|L5.1036|
000084  2005              MOVS     r0,#5                 ;416
000086  f7fffffe          BL       _Anki_Log
00008a  f04f6080          MOV      r0,#0x4000000         ;416
00008e  e7d3              B        |L5.56|
                  |L5.144|
000090  2c00              CMP      r4,#0                 ;422
000092  bfa4              ITT      GE                    ;422
000094  f8d800d0          LDRGE    r0,[r8,#0xd0]         ;422
000098  42a0              CMPGE    r0,r4                 ;422
00009a  dc0c              BGT      |L5.182|
00009c  f44f70d3          MOV      r0,#0x1a6             ;422
0000a0  e9cd5000          STRD     r5,r0,[sp,#0]         ;422
0000a4  a3c4              ADR      r3,|L5.952|
0000a6  a2fa              ADR      r2,|L5.1168|
0000a8  a1d8              ADR      r1,|L5.1036|
0000aa  2005              MOVS     r0,#5                 ;422
0000ac  f7fffffe          BL       _Anki_Log
0000b0  f04f7040          MOV      r0,#0x3000000         ;422
0000b4  e7c0              B        |L5.56|
                  |L5.182|
0000b6  eeb58ac0          VCMPE.F32 s16,#0.0              ;425
0000ba  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;425
0000be  d80c              BHI      |L5.218|
0000c0  f24010a9          MOV      r0,#0x1a9             ;425
0000c4  e9cd5000          STRD     r5,r0,[sp,#0]         ;425
0000c8  a3bb              ADR      r3,|L5.952|
0000ca  a2f7              ADR      r2,|L5.1192|
0000cc  a1cf              ADR      r1,|L5.1036|
0000ce  2005              MOVS     r0,#5                 ;425
0000d0  f7fffffe          BL       _Anki_Log
0000d4  f04f7040          MOV      r0,#0x3000000         ;425
0000d8  e7ae              B        |L5.56|
                  |L5.218|
0000da  2101              MOVS     r1,#1                 ;428
0000dc  98fa              LDR      r0,[sp,#0x3e8]        ;428
0000de  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000e2  f44f71a0          MOV      r1,#0x140             ;428
0000e6  fb91f0f0          SDIV     r0,r1,r0              ;428
0000ea  ee000a10          VMOV     s0,r0                 ;429
0000ee  f8d80098          LDR      r0,[r8,#0x98]         ;429
0000f2  eb040944          ADD      r9,r4,r4,LSL #1       ;429
0000f6  eb0000c9          ADD      r0,r0,r9,LSL #3       ;429
0000fa  eef89ac0          VCVT.F32.S32 s19,s0                ;429
0000fe  68c1              LDR      r1,[r0,#0xc]          ;431
000100  9185              STR      r1,[sp,#0x214]        ;431
000102  6800              LDR      r0,[r0,#0]            ;431
000104  9084              STR      r0,[sp,#0x210]        ;431
000106  a869              ADD      r0,sp,#0x1a4          ;431
000108  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
00010c  f04f31ff          MOV      r1,#0xffffffff        ;431
000110  f8401d0c          STR      r1,[r0,#-0xc]!        ;431
000114  6041              STR      r1,[r0,#4]            ;431
000116  6081              STR      r1,[r0,#8]            ;431
000118  2100              MOVS     r1,#0                 ;431
00011a  6101              STR      r1,[r0,#0x10]         ;436
00011c  a0ee              ADR      r0,|L5.1240|
00011e  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000122  f8dd0418          LDR      r0,[sp,#0x418]        ;437
000126  eb040184          ADD      r1,r4,r4,LSL #2       ;437
00012a  0a00              LSRS     r0,r0,#8              ;437
00012c  90cf              STR      r0,[sp,#0x33c]        ;438
00012e  f8dd0418          LDR      r0,[sp,#0x418]        ;438
000132  91ce              STR      r1,[sp,#0x338]        ;438
000134  f5b07f00          CMP      r0,#0x200             ;438
000138  d079              BEQ      |L5.558|
00013a  f5b06fc0          CMP      r0,#0x600             ;449
00013e  bf18              IT       NE                    ;449
000140  f5b06f00          CMPNE    r0,#0x800             ;449
000144  d072              BEQ      |L5.556|
                  |L5.326|
000146  a0e4              ADR      r0,|L5.1240|
000148  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00014c  a81e              ADD      r0,sp,#0x78           ;460
00014e  9002              STR      r0,[sp,#8]            ;460
000150  2002              MOVS     r0,#2                 ;460
000152  9001              STR      r0,[sp,#4]            ;460
000154  2300              MOVS     r3,#0                 ;460
000156  461a              MOV      r2,r3                 ;460
000158  2101              MOVS     r1,#1                 ;460
00015a  a8ed              ADD      r0,sp,#0x3b4          ;460
00015c  f8dd4424          LDR      r4,[sp,#0x424]        ;460
000160  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000164  6800              LDR      r0,[r0,#0]            ;460
000166  9008              STR      r0,[sp,#0x20]         ;460
000168  9000              STR      r0,[sp,#0]            ;460
00016a  4623              MOV      r3,r4                 ;460
00016c  2101              MOVS     r1,#1                 ;460
00016e  a803              ADD      r0,sp,#0xc            ;460
000170  9a01              LDR      r2,[sp,#4]            ;460
000172  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000176  6907              LDR      r7,[r0,#0x10]         ;460
000178  e8b00470          LDM      r0!,{r4-r6,r10}       ;460
00017c  2200              MOVS     r2,#0                 ;460
00017e  4611              MOV      r1,r2                 ;460
000180  a809              ADD      r0,sp,#0x24           ;460
000182  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000186  4683              MOV      r11,r0                ;460
000188  2200              MOVS     r2,#0                 ;460
00018a  4611              MOV      r1,r2                 ;460
00018c  a80c              ADD      r0,sp,#0x30           ;460
00018e  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000192  e9db2300          LDRD     r2,r3,[r11,#0]        ;460
000196  f8dbc008          LDR      r12,[r11,#8]          ;460
00019a  f8cdc080          STR      r12,[sp,#0x80]        ;460
00019e  e9cd231e          STRD     r2,r3,[sp,#0x78]      ;460
0001a2  6803              LDR      r3,[r0,#0]            ;460
0001a4  6842              LDR      r2,[r0,#4]            ;460
0001a6  6880              LDR      r0,[r0,#8]            ;460
0001a8  a923              ADD      r1,sp,#0x8c           ;460
0001aa  9728              STR      r7,[sp,#0xa0]         ;460
0001ac  e8a10471          STM      r1!,{r0,r4-r6,r10}    ;460
0001b0  e9cd3221          STRD     r3,r2,[sp,#0x84]      ;460
0001b4  2c00              CMP      r4,#0                 ;460
0001b6  bfc8              IT       GT                    ;460
0001b8  2d00              CMPGT    r5,#0                 ;460
0001ba  f34081a7          BLE.W    |L5.1292|
0001be  fb04f005          MUL      r0,r4,r5              ;460
0001c2  2800              CMP      r0,#0                 ;460
0001c4  bf1c              ITT      NE                    ;460
0001c6  2000              MOVNE    r0,#0                 ;460
0001c8  fb007006          MLANE    r0,r0,r6,r7           ;460
0001cc  f000819e          BEQ.W    |L5.1292|
                  |L5.464|
0001d0  9029              STR      r0,[sp,#0xa4]         ;460
0001d2  2c00              CMP      r4,#0                 ;460
0001d4  bfc8              IT       GT                    ;460
0001d6  2d00              CMPGT    r5,#0                 ;460
0001d8  f340819a          BLE.W    |L5.1296|
0001dc  fb04f005          MUL      r0,r4,r5              ;460
0001e0  2800              CMP      r0,#0                 ;460
0001e2  bf1c              ITT      NE                    ;460
0001e4  2000              MOVNE    r0,#0                 ;460
0001e6  fb007006          MLANE    r0,r0,r6,r7           ;460
0001ea  f0008191          BEQ.W    |L5.1296|
                  |L5.494|
0001ee  902a              STR      r0,[sp,#0xa8]         ;460
0001f0  2c00              CMP      r4,#0                 ;460
0001f2  bfc8              IT       GT                    ;460
0001f4  2d00              CMPGT    r5,#0                 ;460
0001f6  f340818d          BLE.W    |L5.1300|
0001fa  fb04f005          MUL      r0,r4,r5              ;460
0001fe  2800              CMP      r0,#0                 ;460
000200  bf1c              ITT      NE                    ;460
000202  2000              MOVNE    r0,#0                 ;460
000204  fb007006          MLANE    r0,r0,r6,r7           ;460
000208  d07e              BEQ      |L5.776|
                  |L5.522|
00020a  902a              STR      r0,[sp,#0xa8]         ;460
00020c  a808              ADD      r0,sp,#0x20           ;460
00020e  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
000212  2800              CMP      r0,#0                 ;460
000214  bf12              ITEE     NE                    ;460
000216  e9dd1001          LDRDNE   r1,r0,[sp,#4]         ;460
00021a  2100              MOVEQ    r1,#0                 ;460
00021c  9802              LDREQ    r0,[sp,#8]            ;460
00021e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
000222  2400              MOVS     r4,#0                 ;462
000224  eddf8ab5          VLDR     s17,|L5.1276|
000228  e176              B        |L5.1304|
00022a  e000              B        |L5.558|
                  |L5.556|
00022c  e01e              B        |L5.620|
                  |L5.558|
00022e  4641              MOV      r1,r8                 ;440
000230  a852              ADD      r0,sp,#0x148          ;440
000232  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18get_transformationEv ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::get_transformation() const
000236  a852              ADD      r0,sp,#0x148          ;440
000238  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
00023c  f5b06fc0          CMP      r0,#0x600             ;440
000240  d01d              BEQ      |L5.638|
000242  4641              MOV      r1,r8                 ;441
000244  a86b              ADD      r0,sp,#0x1ac          ;441
000246  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18get_transformationEv ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::get_transformation() const
00024a  a86b              ADD      r0,sp,#0x1ac          ;441
00024c  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000250  f5b06f00          CMP      r0,#0x800             ;441
000254  d013              BEQ      |L5.638|
000256  4641              MOV      r1,r8                 ;444
000258  4668              MOV      r0,sp                 ;444
00025a  f7fffffe          BL       _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18get_transformationEv ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::get_transformation() const
00025e  4668              MOV      r0,sp                 ;444
000260  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3217get_transformTypeEv ; Anki::Embedded::Transformations::PlanarTransformation_f32::get_transformType() const
000264  f5b07f00          CMP      r0,#0x200             ;444
000268  f47faf6d          BNE      |L5.326|
                  |L5.620|
00026c  f8d81030          LDR      r1,[r8,#0x30]         ;444
000270  98ce              LDR      r0,[sp,#0x338]        ;444
000272  eb010180          ADD      r1,r1,r0,LSL #2       ;444
000276  a866              ADD      r0,sp,#0x198          ;445
000278  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEaSERKS2_ ; Anki::Embedded::Array<float>::operator =(const Anki::Embedded::Array<float>&)
00027c  e763              B        |L5.326|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;442
000280  461a              MOV      r2,r3                 ;442
000282  2101              MOVS     r1,#1                 ;442
000284  a888              ADD      r0,sp,#0x220          ;442
000286  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00028a  4604              MOV      r4,r0                 ;442
00028c  f8d81030          LDR      r1,[r8,#0x30]         ;442
000290  98ce              LDR      r0,[sp,#0x338]        ;442
000292  eb010080          ADD      r0,r1,r0,LSL #2       ;442
000296  2101              MOVS     r1,#1                 ;442
000298  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00029c  6821              LDR      r1,[r4,#0]            ;442
00029e  9100              STR      r1,[sp,#0]            ;442
0002a0  4602              MOV      r2,r0                 ;442
0002a2  2102              MOVS     r1,#2                 ;442
0002a4  a87f              ADD      r0,sp,#0x1fc          ;442
0002a6  f8dd3424          LDR      r3,[sp,#0x424]        ;442
0002aa  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0002ae  4601              MOV      r1,r0                 ;442
0002b0  a866              ADD      r0,sp,#0x198          ;442
0002b2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEaSERKS2_ ; Anki::Embedded::Array<float>::operator =(const Anki::Embedded::Array<float>&)
0002b6  f04f31ff          MOV      r1,#0xffffffff        ;443
0002ba  2000              MOVS     r0,#0                 ;443
0002bc  e9cd0100          STRD     r0,r1,[sp,#0]         ;443
0002c0  460b              MOV      r3,r1                 ;443
0002c2  4602              MOV      r2,r0                 ;443
0002c4  a966              ADD      r1,sp,#0x198          ;443
0002c6  a838              ADD      r0,sp,#0xe0           ;443
0002c8  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
0002cc  ae38              ADD      r6,sp,#0xe0           ;443
0002ce  e8b610bf          LDM      r6!,{r0-r5,r7,r12}    ;443
0002d2  ae11              ADD      r6,sp,#0x44           ;443
0002d4  e8a610bf          STM      r6!,{r0-r5,r7,r12}    ;443
0002d8  ac40              ADD      r4,sp,#0x100          ;443
0002da  2601              MOVS     r6,#1                 ;443
0002dc  e8b4100f          LDM      r4!,{r0-r3,r12}       ;443
0002e0  ac19              ADD      r4,sp,#0x64           ;443
0002e2  e8a4100f          STM      r4!,{r0-r3,r12}       ;443
0002e6  a811              ADD      r0,sp,#0x44           ;443
0002e8  a945              ADD      r1,sp,#0x114          ;443
0002ea  e9cd1086          STRD     r1,r0,[sp,#0x218]     ;443
0002ee  f8d81030          LDR      r1,[r8,#0x30]         ;443
0002f2  98ce              LDR      r0,[sp,#0x338]        ;443
0002f4  2203              MOVS     r2,#3                 ;443
0002f6  eb010480          ADD      r4,r1,r0,LSL #2       ;443
0002fa  2102              MOVS     r1,#2                 ;443
0002fc  6820              LDR      r0,[r4,#0]            ;443
0002fe  2305              MOVS     r3,#5                 ;443
000300  9000              STR      r0,[sp,#0]            ;443
000302  1ecd              SUBS     r5,r1,#3              ;443
000304  a87c              ADD      r0,sp,#0x1f0          ;443
000306  e000              B        |L5.778|
                  |L5.776|
000308  e104              B        |L5.1300|
                  |L5.778|
00030a  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
00030e  6860              LDR      r0,[r4,#4]            ;443
000310  9000              STR      r0,[sp,#0]            ;443
000312  462b              MOV      r3,r5                 ;443
000314  4632              MOV      r2,r6                 ;443
000316  2100              MOVS     r1,#0                 ;443
000318  a863              ADD      r0,sp,#0x18c          ;443
00031a  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
00031e  a963              ADD      r1,sp,#0x18c          ;443
000320  a87c              ADD      r0,sp,#0x1f0          ;443
000322  e9cd0102          STRD     r0,r1,[sp,#8]         ;443
000326  e9d40103          LDRD     r0,r1,[r4,#0xc]       ;443
00032a  e9cd0100          STRD     r0,r1,[sp,#0]         ;443
00032e  e9d41200          LDRD     r1,r2,[r4,#0]         ;443
000332  a82b              ADD      r0,sp,#0xac           ;443
000334  68a3              LDR      r3,[r4,#8]            ;443
000336  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEERKNS0_14LinearSequenceIiEES8_ ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
00033a  e9dd402c          LDRD     r4,r0,[sp,#0xb0]      ;443
00033e  e9dd1230          LDRD     r1,r2,[sp,#0xc0]      ;443
000342  e9ddc52e          LDRD     r12,r5,[sp,#0xb8]     ;443
000346  9f2b              LDR      r7,[sp,#0xac]         ;443
000348  9b32              LDR      r3,[sp,#0xc8]         ;443
00034a  9704              STR      r7,[sp,#0x10]         ;443
00034c  930b              STR      r3,[sp,#0x2c]         ;443
00034e  e9cd4005          STRD     r4,r0,[sp,#0x14]      ;443
000352  e9cd1209          STRD     r1,r2,[sp,#0x24]      ;443
000356  e9cdc507          STRD     r12,r5,[sp,#0x1c]     ;443
00035a  ae33              ADD      r6,sp,#0xcc           ;443
00035c  f50d7e8c          ADD      lr,sp,#0x118          ;443
000360  e8b6100f          LDM      r6!,{r0-r3,r12}       ;443
000364  ae0c              ADD      r6,sp,#0x30           ;443
000366  e8a6100f          STM      r6!,{r0-r3,r12}       ;443
00036a  e9dd1206          LDRD     r1,r2,[sp,#0x18]      ;443
00036e  4620              MOV      r0,r4                 ;443
000370  462b              MOV      r3,r5                 ;443
000372  e9dd450a          LDRD     r4,r5,[sp,#0x28]      ;443
000376  f8ddc024          LDR      r12,[sp,#0x24]        ;443
00037a  9701              STR      r7,[sp,#4]            ;443
00037c  e9dd670d          LDRD     r6,r7,[sp,#0x34]      ;443
000380  f8ddb030          LDR      r11,[sp,#0x30]        ;443
000384  f8dda03c          LDR      r10,[sp,#0x3c]        ;443
000388  f8cdb000          STR      r11,[sp,#0]           ;443
00038c  f8ddb004          LDR      r11,[sp,#4]           ;443
000390  f8cdb114          STR      r11,[sp,#0x114]       ;443
000394  e8ae100f          STM      lr!,{r0-r3,r12}       ;443
000398  e9cd454b          STRD     r4,r5,[sp,#0x12c]     ;443
00039c  f8ddb000          LDR      r11,[sp,#0]           ;443
0003a0  f8cdb134          STR      r11,[sp,#0x134]       ;443
0003a4  f8cda140          STR      r10,[sp,#0x140]       ;443
0003a8  2000              MOVS     r0,#0                 ;443
0003aa  e9cd674e          STRD     r6,r7,[sp,#0x138]     ;443
0003ae  f88d0144          STRB     r0,[sp,#0x144]        ;443
0003b2  e0a5              B        |L5.1280|
                  |L5.948|
                          DCD      ||.constdata||+0x1be
                  |L5.952|
0003b8  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\lucasKanade_Slow.cpp",0
0003bc  6f726574
0003c0  6563685c
0003c4  76697369
0003c8  6f6e5c72
0003cc  6f626f74
0003d0  5c737263
0003d4  5c6c7563
0003d8  61734b61
0003dc  6e616465
0003e0  5f536c6f
0003e4  772e6370
0003e8  7000    
0003ea  00                DCB      0
0003eb  00                DCB      0
                  |L5.1004|
0003ec  54686973          DCB      "This object is not initialized",0
0003f0  206f626a
0003f4  65637420
0003f8  6973206e
0003fc  6f742069
000400  6e697469
000404  616c697a
000408  656400  
00040b  00                DCB      0
                  |L5.1036|
00040c  4c756361          DCB      "LucasKanadeTracker_Slow::IterativelyRefineTrack",0
000410  734b616e
000414  61646554
000418  7261636b
00041c  65725f53
000420  6c6f773a
000424  3a497465
000428  72617469
00042c  76656c79
000430  52656669
000434  6e655472
000438  61636b00
                  |L5.1084|
00043c  6d617849          DCB      "maxIterations must be greater than zero and less than 1"
000440  74657261
000444  74696f6e
000448  73206d75
00044c  73742062
000450  65206772
000454  65617465
000458  72207468
00045c  616e207a
000460  65726f20
000464  616e6420
000468  6c657373
00046c  20746861
000470  6e2031  
000473  30303000          DCB      "000",0
000477  00                DCB      0
                  |L5.1144|
000478  6e657874          DCB      "nextImage is not valid",0
00047c  496d6167
000480  65206973
000484  206e6f74
000488  2076616c
00048c  696400  
00048f  00                DCB      0
                  |L5.1168|
000490  77686963          DCB      "whichScale is invalid",0
000494  68536361
000498  6c652069
00049c  7320696e
0004a0  76616c69
0004a4  6400    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L5.1192|
0004a8  636f6e76          DCB      "convergenceTolerance must be greater than zero",0
0004ac  65726765
0004b0  6e636554
0004b4  6f6c6572
0004b8  616e6365
0004bc  206d7573
0004c0  74206265
0004c4  20677265
0004c8  61746572
0004cc  20746861
0004d0  6e207a65
0004d4  726f00  
0004d7  00                DCB      0
                  |L5.1240|
0004d8  49746572          DCB      "IterativelyRefineTrack.extractAPart",0
0004dc  61746976
0004e0  656c7952
0004e4  6566696e
0004e8  65547261
0004ec  636b2e65
0004f0  78747261
0004f4  63744150
0004f8  61727400
                  |L5.1276|
0004fc  d01502f9          DCFS     0xd01502f9 ; -10000000000
                  |L5.1280|
000500  e9dd1086          LDRD     r1,r0,[sp,#0x218]     ;443
000504  2201              MOVS     r2,#1                 ;443
000506  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
00050a  e61c              B        |L5.326|
                  |L5.1292|
00050c  2000              MOVS     r0,#0                 ;444
00050e  e65f              B        |L5.464|
                  |L5.1296|
000510  2000              MOVS     r0,#0                 ;444
000512  e66c              B        |L5.494|
                  |L5.1300|
000514  2000              MOVS     r0,#0                 ;444
000516  e678              B        |L5.522|
                  |L5.1304|
000518  982a              LDR      r0,[sp,#0xa8]         ;444
00051a  edcd8a08          VSTR     s17,[sp,#0x20]        ;444
00051e  edcd8a09          VSTR     s17,[sp,#0x24]        ;444
000522  edcd8a0a          VSTR     s17,[sp,#0x28]        ;444
000526  edcd8a0b          VSTR     s17,[sp,#0x2c]        ;444
00052a  edcd8a0c          VSTR     s17,[sp,#0x30]        ;444
00052e  edcd8a0d          VSTR     s17,[sp,#0x34]        ;444
000532  eb001544          ADD      r5,r0,r4,LSL #5       ;444
000536  edcd8a0e          VSTR     s17,[sp,#0x38]        ;444
00053a  4668              MOV      r0,sp                 ;463
00053c  edcd8a0f          VSTR     s17,[sp,#0x3c]        ;463
000540  2304              MOVS     r3,#4                 ;463
000542  2208              MOVS     r2,#8                 ;463
000544  49fe              LDR      r1,|L5.2368|
000546  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00054a  ed9d0a08          VLDR     s0,[sp,#0x20]         ;463
00054e  4603              MOV      r3,r0                 ;463
000550  ed800a00          VSTR     s0,[r0,#0]            ;463
000554  ed9d0a09          VLDR     s0,[sp,#0x24]         ;463
000558  ed800a01          VSTR     s0,[r0,#4]            ;463
00055c  3008              ADDS     r0,r0,#8              ;463
00055e  ed9d0a0a          VLDR     s0,[sp,#0x28]         ;463
000562  ed800a00          VSTR     s0,[r0,#0]            ;463
000566  ed9d0a0b          VLDR     s0,[sp,#0x2c]         ;463
00056a  ed800a01          VSTR     s0,[r0,#4]            ;463
00056e  ed9d0a0c          VLDR     s0,[sp,#0x30]         ;463
000572  2000              MOVS     r0,#0                 ;463
000574  ed830a04          VSTR     s0,[r3,#0x10]         ;463
000578  ed9d0a0d          VLDR     s0,[sp,#0x34]         ;463
00057c  ed830a05          VSTR     s0,[r3,#0x14]         ;463
000580  ed9d0a0e          VLDR     s0,[sp,#0x38]         ;463
000584  ed830a06          VSTR     s0,[r3,#0x18]         ;463
000588  ed9d0a0f          VLDR     s0,[sp,#0x3c]         ;463
00058c  ed830a07          VSTR     s0,[r3,#0x1c]         ;463
                  |L5.1424|
000590  eb0301c0          ADD      r1,r3,r0,LSL #3       ;463
000594  eb0502c0          ADD      r2,r5,r0,LSL #3       ;463
000598  ed910a00          VLDR     s0,[r1,#0]            ;463
00059c  1c40              ADDS     r0,r0,#1              ;463
00059e  ed820a00          VSTR     s0,[r2,#0]            ;463
0005a2  ed910a01          VLDR     s0,[r1,#4]            ;463
0005a6  2804              CMP      r0,#4                 ;463
0005a8  ed820a01          VSTR     s0,[r2,#4]            ;463
0005ac  dbf0              BLT      |L5.1424|
0005ae  1c64              ADDS     r4,r4,#1              ;462
0005b0  2c02              CMP      r4,#2                 ;462
0005b2  dbb1              BLT      |L5.1304|
0005b4  2300              MOVS     r3,#0                 ;466
0005b6  461a              MOV      r2,r3                 ;466
0005b8  2101              MOVS     r1,#1                 ;466
0005ba  a8ee              ADD      r0,sp,#0x3b8          ;466
0005bc  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0005c0  6800              LDR      r0,[r0,#0]            ;466
0005c2  9000              STR      r0,[sp,#0]            ;466
0005c4  e9dd0184          LDRD     r0,r1,[sp,#0x210]     ;466
0005c8  fb01fb00          MUL      r11,r1,r0             ;466
0005cc  465a              MOV      r2,r11                ;466
0005ce  2101              MOVS     r1,#1                 ;466
0005d0  a899              ADD      r0,sp,#0x264          ;466
0005d2  f8dd3424          LDR      r3,[sp,#0x424]        ;466
0005d6  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0005da  2300              MOVS     r3,#0                 ;467
0005dc  461a              MOV      r2,r3                 ;467
0005de  2101              MOVS     r1,#1                 ;467
0005e0  a8ef              ADD      r0,sp,#0x3bc          ;467
0005e2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0005e6  6800              LDR      r0,[r0,#0]            ;467
0005e8  9000              STR      r0,[sp,#0]            ;467
0005ea  465a              MOV      r2,r11                ;467
0005ec  2101              MOVS     r1,#1                 ;467
0005ee  a89e              ADD      r0,sp,#0x278          ;467
0005f0  f8dd3424          LDR      r3,[sp,#0x424]        ;467
0005f4  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0005f8  a0d2              ADR      r0,|L5.2372|
0005fa  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0005fe  a807              ADD      r0,sp,#0x1c           ;471
000600  f8dd1424          LDR      r1,[sp,#0x424]        ;471
000604  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000608  a907              ADD      r1,sp,#0x1c           ;471
00060a  4668              MOV      r0,sp                 ;471
00060c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000610  2300              MOVS     r3,#0                 ;473
000612  461a              MOV      r2,r3                 ;473
000614  2101              MOVS     r1,#1                 ;473
000616  a818              ADD      r0,sp,#0x60           ;473
000618  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00061c  f8d81098          LDR      r1,[r8,#0x98]         ;473
000620  6803              LDR      r3,[r0,#0]            ;473
000622  eb0101c9          ADD      r1,r1,r9,LSL #3       ;473
000626  466a              MOV      r2,sp                 ;473
000628  a80e              ADD      r0,sp,#0x38           ;473
00062a  f7fffffe          BL       _ZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ERNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Meshgrid<float>::EvaluateX2(Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
00062e  2300              MOVS     r3,#0                 ;474
000630  461a              MOV      r2,r3                 ;474
000632  2101              MOVS     r1,#1                 ;474
000634  a818              ADD      r0,sp,#0x60           ;474
000636  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00063a  f8d81098          LDR      r1,[r8,#0x98]         ;474
00063e  6803              LDR      r3,[r0,#0]            ;474
000640  eb0101c9          ADD      r1,r1,r9,LSL #3       ;474
000644  466a              MOV      r2,sp                 ;474
000646  a813              ADD      r0,sp,#0x4c           ;474
000648  f7fffffe          BL       _ZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ERNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Meshgrid<float>::EvaluateY2(Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
00064c  aa99              ADD      r2,sp,#0x264          ;476
00064e  a90e              ADD      r1,sp,#0x38           ;476
000650  2000              MOVS     r0,#0                 ;476
000652  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000656  aa9e              ADD      r2,sp,#0x278          ;477
000658  a913              ADD      r1,sp,#0x4c           ;477
00065a  2000              MOVS     r0,#0                 ;477
00065c  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000660  a0b8              ADR      r0,|L5.2372|
000662  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000666  f8dd1420          LDR      r1,[sp,#0x420]        ;481
00066a  2000              MOVS     r0,#0                 ;481
00066c  7008              STRB     r0,[r1,#0]            ;481
00066e  90eb              STR      r0,[sp,#0x3ac]        ;483
000670  98fb              LDR      r0,[sp,#0x3ec]        ;483
000672  2800              CMP      r0,#0                 ;483
000674  bfc8              IT       GT                    ;537
000676  ed9f9abc          VLDRGT   s18,|L5.2408|
00067a  f34086fa          BLE.W    |L5.5234|
                  |L5.1662|
00067e  a8b9              ADD      r0,sp,#0x2e4          ;484
000680  f8dd1424          LDR      r1,[sp,#0x424]        ;484
000684  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000688  a9b9              ADD      r1,sp,#0x2e4          ;484
00068a  a80b              ADD      r0,sp,#0x2c           ;484
00068c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000690  2300              MOVS     r3,#0                 ;489
000692  461a              MOV      r2,r3                 ;489
000694  2101              MOVS     r1,#1                 ;489
000696  a8f0              ADD      r0,sp,#0x3c0          ;489
000698  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00069c  6800              LDR      r0,[r0,#0]            ;489
00069e  9000              STR      r0,[sp,#0]            ;489
0006a0  ab0b              ADD      r3,sp,#0x2c           ;489
0006a2  465a              MOV      r2,r11                ;489
0006a4  2101              MOVS     r1,#1                 ;489
0006a6  a8a3              ADD      r0,sp,#0x28c          ;489
0006a8  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0006ac  2300              MOVS     r3,#0                 ;490
0006ae  461a              MOV      r2,r3                 ;490
0006b0  2101              MOVS     r1,#1                 ;490
0006b2  a8d0              ADD      r0,sp,#0x340          ;490
0006b4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0006b8  6800              LDR      r0,[r0,#0]            ;490
0006ba  9000              STR      r0,[sp,#0]            ;490
0006bc  ab0b              ADD      r3,sp,#0x2c           ;490
0006be  465a              MOV      r2,r11                ;490
0006c0  2101              MOVS     r1,#1                 ;490
0006c2  a8a8              ADD      r0,sp,#0x2a0          ;490
0006c4  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0006c8  a0a8              ADR      r0,|L5.2412|
0006ca  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0006ce  2400              MOVS     r4,#0                 ;494
0006d0  a8a8              ADD      r0,sp,#0x2a0          ;494
0006d2  a9a3              ADD      r1,sp,#0x28c          ;494
0006d4  9400              STR      r4,[sp,#0]            ;494
0006d6  e9cd1001          STRD     r1,r0,[sp,#4]         ;494
0006da  2301              MOVS     r3,#1                 ;494
0006dc  eeb00a69          VMOV.F32 s0,s19                ;494
0006e0  aa9e              ADD      r2,sp,#0x278          ;494
0006e2  a999              ADD      r1,sp,#0x264          ;494
0006e4  f10800e4          ADD      r0,r8,#0xe4           ;494
0006e8  f7fffffe          BL       _ZNK4Anki8Embedded15Transformations24PlanarTransformation_f3215TransformPointsERKNS0_5ArrayIfEES6_fbbRS4_S7_ ; Anki::Embedded::Transformations::PlanarTransformation_f32::TransformPoints(const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, float, bool, bool, Anki::Embedded::Array<float>&, Anki::Embedded::Array<float>&) const
0006ec  2800              CMP      r0,#0                 ;494
0006ee  f47faca3          BNE      |L5.56|
0006f2  a09e              ADR      r0,|L5.2412|
0006f4  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0006f8  2300              MOVS     r3,#0                 ;498
0006fa  461a              MOV      r2,r3                 ;498
0006fc  2101              MOVS     r1,#1                 ;498
0006fe  a8d0              ADD      r0,sp,#0x340          ;498
000700  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000704  6800              LDR      r0,[r0,#0]            ;498
000706  9000              STR      r0,[sp,#0]            ;498
000708  ab0b              ADD      r3,sp,#0x2c           ;498
00070a  465a              MOV      r2,r11                ;498
00070c  2101              MOVS     r1,#1                 ;498
00070e  a870              ADD      r0,sp,#0x1c0          ;498
000710  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000714  a09f              ADR      r0,|L5.2452|
000716  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00071a  a90b              ADD      r1,sp,#0x2c           ;503
00071c  a830              ADD      r0,sp,#0xc0           ;503
00071e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000722  a930              ADD      r1,sp,#0xc0           ;503
000724  a837              ADD      r0,sp,#0xdc           ;503
000726  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00072a  2300              MOVS     r3,#0                 ;505
00072c  461a              MOV      r2,r3                 ;505
00072e  2101              MOVS     r1,#1                 ;505
000730  a806              ADD      r0,sp,#0x18           ;505
000732  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000736  6800              LDR      r0,[r0,#0]            ;505
000738  9000              STR      r0,[sp,#0]            ;505
00073a  ab37              ADD      r3,sp,#0xdc           ;505
00073c  465a              MOV      r2,r11                ;505
00073e  2101              MOVS     r1,#1                 ;505
000740  a801              ADD      r0,sp,#4              ;505
000742  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000746  9400              STR      r4,[sp,#0]            ;507
000748  eebf0a00          VMOV.F32 s0,#-1.00000000       ;507
00074c  ab01              ADD      r3,sp,#4              ;507
00074e  aaa8              ADD      r2,sp,#0x2a0          ;507
000750  a9a3              ADD      r1,sp,#0x28c          ;507
000752  98fa              LDR      r0,[sp,#0x3e8]        ;507
000754  f7fffffe          BL       _ZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_ ; Anki::Embedded::Interp2<unsigned char, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
000758  2800              CMP      r0,#0                 ;507
00075a  f47fac6d          BNE      |L5.56|
00075e  aa70              ADD      r2,sp,#0x1c0          ;510
000760  a901              ADD      r1,sp,#4              ;510
000762  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000766  a08b              ADR      r0,|L5.2452|
000768  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00076c  a095              ADR      r0,|L5.2500|
00076e  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000772  a870              ADD      r0,sp,#0x1c0          ;517
000774  eddf8a9d          VLDR     s17,|L5.2540|
000778  2101              MOVS     r1,#1                 ;517
00077a  9012              STR      r0,[sp,#0x48]         ;517
00077c  9014              STR      r0,[sp,#0x50]         ;517
00077e  f88d104c          STRB     r1,[sp,#0x4c]         ;517
000782  edcd8a15          VSTR     s17,[sp,#0x54]        ;517
000786  2000              MOVS     r0,#0                 ;517
000788  9016              STR      r0,[sp,#0x58]         ;517
00078a  901a              STR      r0,[sp,#0x68]         ;517
00078c  901b              STR      r0,[sp,#0x6c]         ;517
00078e  901c              STR      r0,[sp,#0x70]         ;517
000790  901d              STR      r0,[sp,#0x74]         ;517
000792  9812              LDR      r0,[sp,#0x48]         ;517
000794  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000798  2800              CMP      r0,#0                 ;517
00079a  d04b              BEQ      |L5.2100|
00079c  2401              MOVS     r4,#1                 ;517
00079e  f88d405c          STRB     r4,[sp,#0x5c]         ;517
0007a2  2100              MOVS     r1,#0                 ;517
0007a4  9812              LDR      r0,[sp,#0x48]         ;517
0007a6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0007aa  2801              CMP      r0,#1                 ;517
0007ac  bf0e              ITEE     EQ                    ;517
0007ae  9416              STREQ    r4,[sp,#0x58]         ;517
0007b0  2002              MOVNE    r0,#2                 ;517
0007b2  9016              STRNE    r0,[sp,#0x58]         ;517
0007b4  2000              MOVS     r0,#0                 ;517
0007b6  f88d005d          STRB     r0,[sp,#0x5d]         ;517
0007ba  f88d0064          STRB     r0,[sp,#0x64]         ;517
0007be  1e40              SUBS     r0,r0,#1              ;517
0007c0  e9cd0000          STRD     r0,r0,[sp,#0]         ;517
0007c4  e9cd0002          STRD     r0,r0,[sp,#8]         ;517
0007c8  9018              STR      r0,[sp,#0x60]         ;517
0007ca  901a              STR      r0,[sp,#0x68]         ;517
0007cc  e9cd001b          STRD     r0,r0,[sp,#0x6c]      ;517
0007d0  9803              LDR      r0,[sp,#0xc]          ;517
0007d2  901d              STR      r0,[sp,#0x74]         ;517
                  |L5.2004|
0007d4  a812              ADD      r0,sp,#0x48           ;518
0007d6  f7fffffe          BL       _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE14get_numMatchesEv ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::get_numMatches() const
0007da  9002              STR      r0,[sp,#8]            ;520
0007dc  2810              CMP      r0,#0x10              ;520
0007de  f2c08648          BLT.W    |L5.5234|
0007e2  a078              ADR      r0,|L5.2500|
0007e4  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0007e8  2300              MOVS     r3,#0                 ;526
0007ea  461a              MOV      r2,r3                 ;526
0007ec  2101              MOVS     r1,#1                 ;526
0007ee  a8d0              ADD      r0,sp,#0x340          ;526
0007f0  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0007f4  6800              LDR      r0,[r0,#0]            ;526
0007f6  9000              STR      r0,[sp,#0]            ;526
0007f8  ab0b              ADD      r3,sp,#0x2c           ;526
0007fa  465a              MOV      r2,r11                ;526
0007fc  2101              MOVS     r1,#1                 ;526
0007fe  a894              ADD      r0,sp,#0x250          ;526
000800  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000804  f8d81064          LDR      r1,[r8,#0x64]         ;526
000808  98ce              LDR      r0,[sp,#0x338]        ;526
00080a  ad94              ADD      r5,sp,#0x250          ;527
00080c  eb010480          ADD      r4,r1,r0,LSL #2       ;527
000810  2100              MOVS     r1,#0                 ;527
000812  4628              MOV      r0,r5                 ;527
000814  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000818  2801              CMP      r0,#1                 ;527
00081a  d019              BEQ      |L5.2128|
00081c  f44f7129          MOV      r1,#0x2a4             ;527
000820  4873              LDR      r0,|L5.2544|
000822  e9cd0100          STRD     r0,r1,[sp,#0]         ;527
000826  a373              ADR      r3,|L5.2548|
000828  a280              ADR      r2,|L5.2604|
00082a  a185              ADR      r1,|L5.2624|
00082c  2005              MOVS     r0,#5                 ;527
00082e  f7fffffe          BL       _Anki_Log
000832  e05d              B        |L5.2288|
                  |L5.2100|
000834  2000              MOVS     r0,#0                 ;527
000836  f88d005c          STRB     r0,[sp,#0x5c]         ;527
00083a  212c              MOVS     r1,#0x2c              ;527
00083c  4883              LDR      r0,|L5.2636|
00083e  e9cd0100          STRD     r0,r1,[sp,#0]         ;527
000842  a383              ADR      r3,|L5.2640|
000844  a28f              ADR      r2,|L5.2692|
000846  a193              ADR      r1,|L5.2708|
000848  2005              MOVS     r0,#5                 ;527
00084a  f7fffffe          BL       _Anki_Log
00084e  e7c1              B        |L5.2004|
                  |L5.2128|
000850  2100              MOVS     r1,#0                 ;527
000852  4620              MOV      r0,r4                 ;527
000854  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000858  4681              MOV      r9,r0                 ;527
00085a  2101              MOVS     r1,#1                 ;527
00085c  4620              MOV      r0,r4                 ;527
00085e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000862  4606              MOV      r6,r0                 ;527
000864  2100              MOVS     r1,#0                 ;527
000866  4628              MOV      r0,r5                 ;527
000868  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00086c  9000              STR      r0,[sp,#0]            ;527
00086e  2101              MOVS     r1,#1                 ;527
000870  4628              MOV      r0,r5                 ;527
000872  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000876  4607              MOV      r7,r0                 ;527
000878  9800              LDR      r0,[sp,#0]            ;527
00087a  fb09f106          MUL      r1,r9,r6              ;527
00087e  4378              MULS     r0,r7,r0              ;527
000880  4281              CMP      r1,r0                 ;527
000882  d00b              BEQ      |L5.2204|
000884  f44f711b          MOV      r1,#0x26c             ;527
000888  4884              LDR      r0,|L5.2716|
00088a  e9cd0100          STRD     r0,r1,[sp,#0]         ;527
00088e  a359              ADR      r3,|L5.2548|
000890  a283              ADR      r2,|L5.2720|
000892  a190              ADR      r1,|L5.2772|
000894  2005              MOVS     r0,#5                 ;527
000896  f7fffffe          BL       _Anki_Log
00089a  e029              B        |L5.2288|
                  |L5.2204|
00089c  2200              MOVS     r2,#0                 ;527
00089e  9900              LDR      r1,[sp,#0]            ;527
0008a0  4610              MOV      r0,r2                 ;527
0008a2  4613              MOV      r3,r2                 ;527
0008a4  2900              CMP      r1,#0                 ;527
0008a6  dd23              BLE      |L5.2288|
                  |L5.2216|
0008a8  f8d5c008          LDR      r12,[r5,#8]           ;527
0008ac  6929              LDR      r1,[r5,#0x10]         ;527
0008ae  fb03190c          MLA      r9,r3,r12,r1          ;527
0008b2  2100              MOVS     r1,#0                 ;527
0008b4  2f00              CMP      r7,#0                 ;527
0008b6  dd17              BLE      |L5.2280|
                  |L5.2232|
0008b8  f8d4c010          LDR      r12,[r4,#0x10]        ;527
0008bc  f8d4a008          LDR      r10,[r4,#8]           ;527
0008c0  fb02cc0a          MLA      r12,r2,r10,r12        ;527
0008c4  f81cc000          LDRB     r12,[r12,r0]          ;527
0008c8  1c40              ADDS     r0,r0,#1              ;527
0008ca  ee00ca10          VMOV     s0,r12                ;527
0008ce  eb090c81          ADD      r12,r9,r1,LSL #2      ;527
0008d2  42b0              CMP      r0,r6                 ;527
0008d4  eeb80a40          VCVT.F32.U32 s0,s0                 ;527
0008d8  ed8c0a00          VSTR     s0,[r12,#0]           ;527
0008dc  bfa4              ITT      GE                    ;527
0008de  2000              MOVGE    r0,#0                 ;527
0008e0  1c52              ADDGE    r2,r2,#1              ;527
0008e2  1c49              ADDS     r1,r1,#1              ;527
0008e4  42b9              CMP      r1,r7                 ;527
0008e6  dbe7              BLT      |L5.2232|
                  |L5.2280|
0008e8  9900              LDR      r1,[sp,#0]            ;527
0008ea  1c5b              ADDS     r3,r3,#1              ;527
0008ec  428b              CMP      r3,r1                 ;527
0008ee  dbdb              BLT      |L5.2216|
                  |L5.2288|
0008f0  a07a              ADR      r0,|L5.2780|
0008f2  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0008f6  2300              MOVS     r3,#0                 ;531
0008f8  461a              MOV      r2,r3                 ;531
0008fa  2101              MOVS     r1,#1                 ;531
0008fc  a8d0              ADD      r0,sp,#0x340          ;531
0008fe  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000902  6800              LDR      r0,[r0,#0]            ;531
000904  9000              STR      r0,[sp,#0]            ;531
000906  ab0b              ADD      r3,sp,#0x2c           ;531
000908  2101              MOVS     r1,#1                 ;531
00090a  a84f              ADD      r0,sp,#0x13c          ;531
00090c  9a02              LDR      r2,[sp,#8]            ;531
00090e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000912  a90b              ADD      r1,sp,#0x2c           ;533
000914  a859              ADD      r0,sp,#0x164          ;533
000916  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00091a  a959              ADD      r1,sp,#0x164          ;533
00091c  a8c0              ADD      r0,sp,#0x300          ;533
00091e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000922  2300              MOVS     r3,#0                 ;534
000924  461a              MOV      r2,r3                 ;534
000926  2101              MOVS     r1,#1                 ;534
000928  a8ad              ADD      r0,sp,#0x2b4          ;534
00092a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00092e  6800              LDR      r0,[r0,#0]            ;534
000930  9000              STR      r0,[sp,#0]            ;534
000932  abc0              ADD      r3,sp,#0x300          ;534
000934  465a              MOV      r2,r11                ;534
000936  2101              MOVS     r1,#1                 ;534
000938  a854              ADD      r0,sp,#0x150          ;534
00093a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00093e  e0e3              B        |L5.2824|
                  |L5.2368|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L5.2372|
000944  49746572          DCB      "IterativelyRefineTrack.vectorizeXin",0
000948  61746976
00094c  656c7952
000950  6566696e
000954  65547261
000958  636b2e76
00095c  6563746f
000960  72697a65
000964  58696e00
                  |L5.2408|
000968  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627
                  |L5.2412|
00096c  49746572          DCB      "IterativelyRefineTrack.transformPoints",0
000970  61746976
000974  656c7952
000978  6566696e
00097c  65547261
000980  636b2e74
000984  72616e73
000988  666f726d
00098c  506f696e
000990  747300  
000993  00                DCB      0
                  |L5.2452|
000994  49746572          DCB      "IterativelyRefineTrack.interpTransformedCoords",0
000998  61746976
00099c  656c7952
0009a0  6566696e
0009a4  65547261
0009a8  636b2e69
0009ac  6e746572
0009b0  70547261
0009b4  6e73666f
0009b8  726d6564
0009bc  436f6f72
0009c0  647300  
0009c3  00                DCB      0
                  |L5.2500|
0009c4  49746572          DCB      "IterativelyRefineTrack.getNumMatches",0
0009c8  61746976
0009cc  656c7952
0009d0  6566696e
0009d4  65547261
0009d8  636b2e67
0009dc  65744e75
0009e0  6d4d6174
0009e4  63686573
0009e8  00      
0009e9  00                DCB      0
0009ea  00                DCB      0
0009eb  00                DCB      0
                  |L5.2540|
0009ec  00000000          DCFS     0x00000000 ; 0
                  |L5.2544|
                          DCD      _ZZN4Anki8Embedded6Matrix9VectorizeIhfEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Vectorize<unsigned char, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L5.2548|
0009f4  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
0009f8  6f726574
0009fc  6563685c
000a00  636f6d6d
000a04  6f6e5c69
000a08  6e636c75
000a0c  64655c61
000a10  6e6b692f
000a14  636f6d6d
000a18  6f6e2f72
000a1c  6f626f74
000a20  2f6d6174
000a24  726978  
000a27  2e6800            DCB      ".h",0
000a2a  00                DCB      0
000a2b  00                DCB      0
                  |L5.2604|
000a2c  4f757470          DCB      "Output is not 1xN",0
000a30  75742069
000a34  73206e6f
000a38  74203178
000a3c  4e00    
000a3e  00                DCB      0
000a3f  00                DCB      0
                  |L5.2624|
000a40  56656374          DCB      "Vectorize",0
000a44  6f72697a
000a48  6500    
000a4a  00                DCB      0
000a4b  00                DCB      0
                  |L5.2636|
                          DCD      _ZZN4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfEC1ERKNS0_5ArrayIfEERKfE19__PRETTY_FUNCTION__ ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::Find(const Anki::Embedded::Array<float>&, const float&)::__PRETTY_FUNCTION__
                  |L5.2640|
000a50  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/find.h"
000a54  6f726574
000a58  6563685c
000a5c  636f6d6d
000a60  6f6e5c69
000a64  6e636c75
000a68  64655c61
000a6c  6e6b692f
000a70  636f6d6d
000a74  6f6e2f72
000a78  6f626f74
000a7c  2f66696e
000a80  642e68  
000a83  00                DCB      0
                  |L5.2692|
000a84  496e7661          DCB      "Invalid inputs",0
000a88  6c696420
000a8c  696e7075
000a90  747300  
000a93  00                DCB      0
                  |L5.2708|
000a94  46696e64          DCB      "Find",0
000a98  00      
000a99  00                DCB      0
000a9a  00                DCB      0
000a9b  00                DCB      0
                  |L5.2716|
                          DCD      _ZZN4Anki8Embedded6Matrix7ReshapeIhfEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Reshape<unsigned char, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L5.2720|
000aa0  496e7075          DCB      "Input and Output matrices are incompatible sizes",0
000aa4  7420616e
000aa8  64204f75
000aac  74707574
000ab0  206d6174
000ab4  72696365
000ab8  73206172
000abc  6520696e
000ac0  636f6d70
000ac4  61746962
000ac8  6c652073
000acc  697a6573
000ad0  00      
000ad1  00                DCB      0
000ad2  00                DCB      0
000ad3  00                DCB      0
                  |L5.2772|
000ad4  52657368          DCB      "Reshape",0
000ad8  61706500
                  |L5.2780|
000adc  49746572          DCB      "IterativelyRefineTrack.templateDerivative",0
000ae0  61746976
000ae4  656c7952
000ae8  6566696e
000aec  65547261
000af0  636b2e74
000af4  656d706c
000af8  61746544
000afc  65726976
000b00  61746976
000b04  6500    
000b06  00                DCB      0
000b07  00                DCB      0
                  |L5.2824|
000b08  e9dd0157          LDRD     r0,r1,[sp,#0x15c]     ;534
000b0c  e9cd0100          STRD     r0,r1,[sp,#0]         ;534
000b10  e9dd1254          LDRD     r1,r2,[sp,#0x150]     ;535
000b14  a83d              ADD      r0,sp,#0xf4           ;535
000b16  9b56              LDR      r3,[sp,#0x158]        ;535
000b18  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
000b1c  ac94              ADD      r4,sp,#0x250          ;535
000b1e  4605              MOV      r5,r0                 ;535
000b20  e8b4104e          LDM      r4!,{r1-r3,r6,r12}    ;535
000b24  e88d104e          STM      sp,{r1-r3,r6,r12}     ;535
000b28  a830              ADD      r0,sp,#0xc0           ;535
000b2a  2700              MOVS     r7,#0                 ;535
000b2c  4669              MOV      r1,sp                 ;535
000b2e  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000b32  f8807030          STRB     r7,[r0,#0x30]         ;535
000b36  ac70              ADD      r4,sp,#0x1c0          ;535
000b38  4606              MOV      r6,r0                 ;535
000b3a  e8b4108e          LDM      r4!,{r1-r3,r7,r12}    ;535
000b3e  e88d108e          STM      sp,{r1-r3,r7,r12}     ;535
000b42  a8de              ADD      r0,sp,#0x378          ;535
000b44  2700              MOVS     r7,#0                 ;535
000b46  4669              MOV      r1,sp                 ;535
000b48  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000b4c  f1050108          ADD      r1,r5,#8              ;535
000b50  f8807030          STRB     r7,[r0,#0x30]         ;535
000b54  e891469e          LDM      r1,{r1-r4,r7,r9,r10,lr};535
000b58  e88d469e          STM      sp,{r1-r4,r7,r9,r10,lr};535
000b5c  e9d5120a          LDRD     r1,r2,[r5,#0x28]      ;535
000b60  4684              MOV      r12,r0                ;535
000b62  6b28              LDR      r0,[r5,#0x30]         ;535
000b64  9108              STR      r1,[sp,#0x20]         ;535
000b66  e9cd2009          STRD     r2,r0,[sp,#0x24]      ;535
000b6a  e9d52300          LDRD     r2,r3,[r5,#0]         ;535
000b6e  4631              MOV      r1,r6                 ;535
000b70  4660              MOV      r0,r12                ;535
000b72  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8SubtractIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Subtract<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
000b76  2301              MOVS     r3,#1                 ;536
000b78  aa54              ADD      r2,sp,#0x150          ;536
000b7a  a94f              ADD      r1,sp,#0x13c          ;536
000b7c  a812              ADD      r0,sp,#0x48           ;536
000b7e  f7fffffe          BL       _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_i ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::SetArray<float>(Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, int) const
000b82  ac4f              ADD      r4,sp,#0x13c          ;537
000b84  a830              ADD      r0,sp,#0xc0           ;537
000b86  e8b4102e          LDM      r4!,{r1-r3,r5,r12}    ;537
000b8a  e88d102e          STM      sp,{r1-r3,r5,r12}     ;537
000b8e  2500              MOVS     r5,#0                 ;537
000b90  4669              MOV      r1,sp                 ;537
000b92  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000b96  f8805030          STRB     r5,[r0,#0x30]         ;537
000b9a  4682              MOV      r10,r0                ;537
000b9c  e9dd0152          LDRD     r0,r1,[sp,#0x148]     ;537
000ba0  e9cd0100          STRD     r0,r1,[sp,#0]         ;537
000ba4  e9dd124f          LDRD     r1,r2,[sp,#0x13c]     ;537
000ba8  a83d              ADD      r0,sp,#0xf4           ;537
000baa  9b51              LDR      r3,[sp,#0x144]        ;537
000bac  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
000bb0  4681              MOV      r9,r0                 ;537
000bb2  f8d0e008          LDR      lr,[r0,#8]            ;537
000bb6  300c              ADDS     r0,r0,#0xc            ;537
000bb8  e9d95600          LDRD     r5,r6,[r9,#0]         ;537
000bbc  e890100f          LDM      r0,{r0-r3,r12}        ;537
000bc0  f1090920          ADD      r9,r9,#0x20           ;537
000bc4  960a              STR      r6,[sp,#0x28]         ;537
000bc6  9560              STR      r5,[sp,#0x180]        ;537
000bc8  e89902f0          LDM      r9,{r4-r7,r9}         ;537
000bcc  e88d100f          STM      sp,{r0-r3,r12}        ;537
000bd0  a805              ADD      r0,sp,#0x14           ;537
000bd2  4673              MOV      r3,lr                 ;537
000bd4  e8a002f0          STM      r0!,{r4-r7,r9}        ;537
000bd8  eeb00a49          VMOV.F32 s0,s18                ;537
000bdc  4650              MOV      r0,r10                ;537
000bde  9a0a              LDR      r2,[sp,#0x28]         ;537
000be0  9960              LDR      r1,[sp,#0x180]        ;537
000be2  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)
000be6  f2af100c          ADR      r0,|L5.2780|
000bea  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000bee  2300              MOVS     r3,#0                 ;541
000bf0  461a              MOV      r2,r3                 ;541
000bf2  2101              MOVS     r1,#1                 ;541
000bf4  a8d0              ADD      r0,sp,#0x340          ;541
000bf6  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000bfa  6800              LDR      r0,[r0,#0]            ;541
000bfc  9acf              LDR      r2,[sp,#0x33c]        ;541
000bfe  9000              STR      r0,[sp,#0]            ;541
000c00  ab0b              ADD      r3,sp,#0x2c           ;541
000c02  4611              MOV      r1,r2                 ;541
000c04  a84a              ADD      r0,sp,#0x128          ;541
000c06  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000c0a  a0fb              ADR      r0,|L5.4088|
000c0c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000c10  a80b              ADD      r0,sp,#0x2c           ;546
000c12  9000              STR      r0,[sp,#0]            ;546
000c14  2301              MOVS     r3,#1                 ;546
000c16  aa66              ADD      r2,sp,#0x198          ;546
000c18  a912              ADD      r1,sp,#0x48           ;546
000c1a  a86b              ADD      r0,sp,#0x1ac          ;546
000c1c  f7fffffe          BL       _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS0_5ArrayIT_EERKS9_iRNS0_11MemoryStackE ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::SetArray<float>(const Anki::Embedded::Array<T1>&, int, Anki::Embedded::MemoryStack&) const
000c20  a0f5              ADR      r0,|L5.4088|
000c22  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000c26  a0fe              ADR      r0,|L5.4128|
000c28  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000c2c  2300              MOVS     r3,#0                 ;550
000c2e  461a              MOV      r2,r3                 ;550
000c30  2101              MOVS     r1,#1                 ;550
000c32  a8d0              ADD      r0,sp,#0x340          ;550
000c34  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000c38  4604              MOV      r4,r0                 ;550
000c3a  2101              MOVS     r1,#1                 ;550
000c3c  a86b              ADD      r0,sp,#0x1ac          ;550
000c3e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000c42  4605              MOV      r5,r0                 ;550
000c44  2100              MOVS     r1,#0                 ;550
000c46  a86b              ADD      r0,sp,#0x1ac          ;550
000c48  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000c4c  6821              LDR      r1,[r4,#0]            ;550
000c4e  9100              STR      r1,[sp,#0]            ;550
000c50  4601              MOV      r1,r0                 ;550
000c52  ab0b              ADD      r3,sp,#0x2c           ;550
000c54  462a              MOV      r2,r5                 ;550
000c56  a82b              ADD      r0,sp,#0xac           ;550
000c58  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000c5c  ad6b              ADD      r5,sp,#0x1ac          ;551
000c5e  ac2b              ADD      r4,sp,#0xac           ;551
000c60  2100              MOVS     r1,#0                 ;551
000c62  4628              MOV      r0,r5                 ;551
000c64  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000c68  4607              MOV      r7,r0                 ;551
000c6a  2101              MOVS     r1,#1                 ;551
000c6c  4628              MOV      r0,r5                 ;551
000c6e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000c72  4606              MOV      r6,r0                 ;551
000c74  4620              MOV      r0,r4                 ;551
000c76  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000c7a  b1a8              CBZ      r0,|L5.3240|
000c7c  4628              MOV      r0,r5                 ;551
000c7e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000c82  b188              CBZ      r0,|L5.3240|
000c84  982b              LDR      r0,[sp,#0xac]         ;551
000c86  42b8              CMP      r0,r7                 ;551
000c88  bf04              ITT      EQ                    ;551
000c8a  982c              LDREQ    r0,[sp,#0xb0]         ;551
000c8c  42b0              CMPEQ    r0,r6                 ;551
000c8e  d017              BEQ      |L5.3264|
000c90  f44f7127          MOV      r1,#0x29c             ;551
000c94  48ea              LDR      r0,|L5.4160|
000c96  e9cd0100          STRD     r0,r1,[sp,#0]         ;551
000c9a  a3ea              ADR      r3,|L5.4164|
000c9c  a2f7              ADR      r2,|L5.4220|
000c9e  a1fd              ADR      r1,|L5.4244|
000ca0  2005              MOVS     r0,#5                 ;551
000ca2  f7fffffe          BL       _Anki_Log
000ca6  e02e              B        |L5.3334|
                  |L5.3240|
000ca8  f2402199          MOV      r1,#0x299             ;551
000cac  48e4              LDR      r0,|L5.4160|
000cae  e9cd0100          STRD     r0,r1,[sp,#0]         ;551
000cb2  a3e4              ADR      r3,|L5.4164|
000cb4  a2fc              ADR      r2,|L5.4264|
000cb6  a1f7              ADR      r1,|L5.4244|
000cb8  2005              MOVS     r0,#5                 ;551
000cba  f7fffffe          BL       _Anki_Log
000cbe  e022              B        |L5.3334|
                  |L5.3264|
000cc0  982b              LDR      r0,[sp,#0xac]         ;551
000cc2  2100              MOVS     r1,#0                 ;551
000cc4  2800              CMP      r0,#0                 ;551
000cc6  dd1e              BLE      |L5.3334|
                  |L5.3272|
000cc8  68aa              LDR      r2,[r5,#8]            ;551
000cca  6928              LDR      r0,[r5,#0x10]         ;551
000ccc  f8d4c004          LDR      r12,[r4,#4]           ;551
000cd0  fb010302          MLA      r3,r1,r2,r0           ;551
000cd4  68a2              LDR      r2,[r4,#8]            ;551
000cd6  6920              LDR      r0,[r4,#0x10]         ;551
000cd8  fb010202          MLA      r2,r1,r2,r0           ;551
000cdc  2000              MOVS     r0,#0                 ;551
000cde  f1bc0f00          CMP      r12,#0                ;551
000ce2  dd0c              BLE      |L5.3326|
                  |L5.3300|
000ce4  eb030c80          ADD      r12,r3,r0,LSL #2      ;551
000ce8  ed9c0a00          VLDR     s0,[r12,#0]           ;551
000cec  eb020c80          ADD      r12,r2,r0,LSL #2      ;551
000cf0  1c40              ADDS     r0,r0,#1              ;551
000cf2  ed8c0a00          VSTR     s0,[r12,#0]           ;551
000cf6  f8d4c004          LDR      r12,[r4,#4]           ;551
000cfa  4584              CMP      r12,r0                ;551
000cfc  dcf2              BGT      |L5.3300|
                  |L5.3326|
000cfe  6820              LDR      r0,[r4,#0]            ;551
000d00  1c49              ADDS     r1,r1,#1              ;551
000d02  4288              CMP      r0,r1                 ;551
000d04  dce0              BGT      |L5.3272|
                  |L5.3334|
000d06  a0c6              ADR      r0,|L5.4128|
000d08  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000d0c  a0ea              ADR      r0,|L5.4280|
000d0e  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000d12  f8dd041c          LDR      r0,[sp,#0x41c]        ;555
000d16  b3e8              CBZ      r0,|L5.3476|
000d18  a90b              ADD      r1,sp,#0x2c           ;556
000d1a  a8c0              ADD      r0,sp,#0x300          ;556
000d1c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000d20  a9c0              ADD      r1,sp,#0x300          ;556
000d22  a8c7              ADD      r0,sp,#0x31c          ;556
000d24  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
000d28  f8d810cc          LDR      r1,[r8,#0xcc]         ;556
000d2c  98ce              LDR      r0,[sp,#0x338]        ;556
000d2e  2301              MOVS     r3,#1                 ;557
000d30  eb010280          ADD      r2,r1,r0,LSL #2       ;557
000d34  a8c7              ADD      r0,sp,#0x31c          ;557
000d36  9000              STR      r0,[sp,#0]            ;557
000d38  a912              ADD      r1,sp,#0x48           ;557
000d3a  a8ad              ADD      r0,sp,#0x2b4          ;557
000d3c  f7fffffe          BL       _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS0_5ArrayIT_EERKS9_iRNS0_11MemoryStackE ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::SetArray<float>(const Anki::Embedded::Array<T1>&, int, Anki::Embedded::MemoryStack&) const
000d40  98cf              LDR      r0,[sp,#0x33c]        ;559
000d42  2400              MOVS     r4,#0                 ;559
000d44  2800              CMP      r0,#0                 ;559
000d46  bfc8              IT       GT                    ;559
000d48  2500              MOVGT    r5,#0                 ;559
000d4a  dd6a              BLE      |L5.3618|
                  |L5.3404|
000d4c  f04f36ff          MOV      r6,#0xffffffff        ;560
000d50  e9cd5600          STRD     r5,r6,[sp,#0]         ;560
000d54  4623              MOV      r3,r4                 ;560
000d56  461a              MOV      r2,r3                 ;560
000d58  a92b              ADD      r1,sp,#0xac           ;560
000d5a  a830              ADD      r0,sp,#0xc0           ;560
000d5c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
000d60  f50d792d          ADD      r9,sp,#0x2b4          ;560
000d64  a8de              ADD      r0,sp,#0x378          ;560
000d66  e8b9108e          LDM      r9!,{r1-r3,r7,r12}    ;560
000d6a  e88d108e          STM      sp,{r1-r3,r7,r12}     ;560
000d6e  4669              MOV      r1,sp                 ;560
000d70  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000d74  f8805030          STRB     r5,[r0,#0x30]         ;560
000d78  90ec              STR      r0,[sp,#0x3b0]        ;560
000d7a  a83d              ADD      r0,sp,#0xf4           ;560
000d7c  9006              STR      r0,[sp,#0x18]         ;560
000d7e  e9cd5600          STRD     r5,r6,[sp,#0]         ;560
000d82  4623              MOV      r3,r4                 ;560
000d84  461a              MOV      r2,r3                 ;560
000d86  a92b              ADD      r1,sp,#0xac           ;560
000d88  a854              ADD      r0,sp,#0x150          ;560
000d8a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEclEiiii ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
000d8e  e9dd7054          LDRD     r7,r0,[sp,#0x150]     ;560
000d92  e000              B        |L5.3478|
                  |L5.3476|
000d94  e045              B        |L5.3618|
                  |L5.3478|
000d96  e9dd2359          LDRD     r2,r3,[sp,#0x164]     ;560
000d9a  e9dd9156          LDRD     r9,r1,[sp,#0x158]     ;560
000d9e  f8dda160          LDR      r10,[sp,#0x160]       ;560
000da2  f8ddc16c          LDR      r12,[sp,#0x16c]       ;560
000da6  f8cda014          STR      r10,[sp,#0x14]        ;560
000daa  e9cd7903          STRD     r7,r9,[sp,#0xc]       ;560
000dae  f50d7eb8          ADD      lr,sp,#0x170          ;560
000db2  e8be06c0          LDM      lr!,{r6,r7,r9,r10}    ;560
000db6  e9cd7900          STRD     r7,r9,[sp,#0]         ;560
000dba  f8cda008          STR      r10,[sp,#8]           ;560
000dbe  e9dd7903          LDRD     r7,r9,[sp,#0xc]       ;560
000dc2  f8dda014          LDR      r10,[sp,#0x14]        ;560
000dc6  f8cdc110          STR      r12,[sp,#0x110]       ;560
000dca  f8cda104          STR      r10,[sp,#0x104]       ;560
000dce  e9cd703d          STRD     r7,r0,[sp,#0xf4]      ;560
000dd2  e9cd913f          STRD     r9,r1,[sp,#0xfc]      ;560
000dd6  e9cd2342          STRD     r2,r3,[sp,#0x108]     ;560
000dda  e9dd7900          LDRD     r7,r9,[sp,#0]         ;560
000dde  a845              ADD      r0,sp,#0x114          ;560
000de0  f8dda008          LDR      r10,[sp,#8]           ;560
000de4  e8a006c0          STM      r0!,{r6,r7,r9,r10}    ;560
000de8  f10d0ec8          ADD      lr,sp,#0xc8           ;560
000dec  f88d5124          STRB     r5,[sp,#0x124]        ;560
000df0  e8be100e          LDM      lr!,{r1-r3,r12}       ;560
000df4  9806              LDR      r0,[sp,#0x18]         ;560
000df6  e89e06c0          LDM      lr,{r6,r7,r9,r10}     ;560
000dfa  e88d100e          STM      sp,{r1-r3,r12}        ;560
000dfe  a904              ADD      r1,sp,#0x10           ;560
000e00  e8a106c0          STM      r1!,{r6,r7,r9,r10}    ;560
000e04  e9dd123a          LDRD     r1,r2,[sp,#0xe8]      ;560
000e08  e9cd1208          STRD     r1,r2,[sp,#0x20]      ;560
000e0c  9b3c              LDR      r3,[sp,#0xf0]         ;560
000e0e  930a              STR      r3,[sp,#0x28]         ;560
000e10  e9dd2330          LDRD     r2,r3,[sp,#0xc0]      ;560
000e14  99ec              LDR      r1,[sp,#0x3b0]        ;560
000e16  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
000e1a  98cf              LDR      r0,[sp,#0x33c]        ;559
000e1c  1c64              ADDS     r4,r4,#1              ;559
000e1e  42a0              CMP      r0,r4                 ;559
000e20  dc94              BGT      |L5.3404|
                  |L5.3618|
000e22  a0a5              ADR      r0,|L5.4280|
000e24  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000e28  a0ae              ADR      r0,|L5.4324|
000e2a  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000e2e  aa4a              ADD      r2,sp,#0x128          ;567
000e30  a92b              ADD      r1,sp,#0xac           ;567
000e32  a86b              ADD      r0,sp,#0x1ac          ;567
000e34  f7fffffe          BL       _ZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE ; Anki::Embedded::Matrix::MultiplyTranspose<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000e38  a0aa              ADR      r0,|L5.4324|
000e3a  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000e3e  2300              MOVS     r3,#0                 ;568
000e40  ad61              ADD      r5,sp,#0x184          ;581
000e42  ae0b              ADD      r6,sp,#0x2c           ;581
000e44  461a              MOV      r2,r3                 ;581
000e46  4619              MOV      r1,r3                 ;581
000e48  a807              ADD      r0,sp,#0x1c           ;581
000e4a  9ccf              LDR      r4,[sp,#0x33c]        ;581
000e4c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000e50  6800              LDR      r0,[r0,#0]            ;581
000e52  4622              MOV      r2,r4                 ;581
000e54  9000              STR      r0,[sp,#0]            ;581
000e56  4633              MOV      r3,r6                 ;581
000e58  4611              MOV      r1,r2                 ;581
000e5a  a802              ADD      r0,sp,#8              ;581
000e5c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000e60  ac02              ADD      r4,sp,#8              ;581
000e62  4620              MOV      r0,r4                 ;581
000e64  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000e68  2800              CMP      r0,#0                 ;581
000e6a  f0008192          BEQ.W    |L5.4498|
000e6e  2100              MOVS     r1,#0                 ;581
000e70  4620              MOV      r0,r4                 ;581
000e72  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000e76  4606              MOV      r6,r0                 ;581
000e78  4620              MOV      r0,r4                 ;581
000e7a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000e7e  2800              CMP      r0,#0                 ;581
000e80  f0008192          BEQ.W    |L5.4520|
000e84  2100              MOVS     r1,#0                 ;581
000e86  4620              MOV      r0,r4                 ;581
000e88  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000e8c  9904              LDR      r1,[sp,#0x10]         ;581
000e8e  9b04              LDR      r3,[sp,#0x10]         ;581
000e90  4341              MULS     r1,r0,r1              ;581
000e92  9a06              LDR      r2,[sp,#0x18]         ;581
000e94  2000              MOVS     r0,#0                 ;581
000e96  fb002003          MLA      r0,r0,r3,r2           ;581
000e9a  f7fffffe          BL       __aeabi_memclr4
                  |L5.3742|
000e9e  2000              MOVS     r0,#0                 ;581
000ea0  2e00              CMP      r6,#0                 ;581
000ea2  bfc8              IT       GT                    ;581
000ea4  ed9f0a98          VLDRGT   s0,|L5.4360|
000ea8  dd0a              BLE      |L5.3776|
                  |L5.3754|
000eaa  68a2              LDR      r2,[r4,#8]            ;581
000eac  6921              LDR      r1,[r4,#0x10]         ;581
000eae  fb001102          MLA      r1,r0,r2,r1           ;581
000eb2  eb010180          ADD      r1,r1,r0,LSL #2       ;581
000eb6  1c40              ADDS     r0,r0,#1              ;581
000eb8  ed810a00          VSTR     s0,[r1,#0]            ;581
000ebc  4286              CMP      r6,r0                 ;581
000ebe  dcf4              BGT      |L5.3754|
                  |L5.3776|
000ec0  ac02              ADD      r4,sp,#8              ;581
000ec2  e8b4100f          LDM      r4!,{r0-r3,r12}       ;581
000ec6  e8a5100f          STM      r5!,{r0-r3,r12}       ;581
000eca  ac61              ADD      r4,sp,#0x184          ;582
000ecc  a875              ADD      r0,sp,#0x1d4          ;582
000ece  e8b4102e          LDM      r4!,{r1-r3,r5,r12}    ;582
000ed2  e88d102e          STM      sp,{r1-r3,r5,r12}     ;582
000ed6  2500              MOVS     r5,#0                 ;582
000ed8  4669              MOV      r1,sp                 ;582
000eda  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000ede  f8805030          STRB     r5,[r0,#0x30]         ;582
000ee2  4682              MOV      r10,r0                ;582
000ee4  ed98aa4a          VLDR     s20,[r8,#0x128]       ;582
000ee8  e9dd0164          LDRD     r0,r1,[sp,#0x190]     ;582
000eec  e9cd0100          STRD     r0,r1,[sp,#0]         ;582
000ef0  e9dd1261          LDRD     r1,r2,[sp,#0x184]     ;582
000ef4  a882              ADD      r0,sp,#0x208          ;582
000ef6  9b63              LDR      r3,[sp,#0x18c]        ;582
000ef8  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
000efc  4681              MOV      r9,r0                 ;582
000efe  f8506b0c          LDR      r6,[r0],#0xc          ;582
000f02  e9d97501          LDRD     r7,r5,[r9,#4]         ;582
000f06  e890100f          LDM      r0,{r0-r3,r12}        ;582
000f0a  f1090920          ADD      r9,r9,#0x20           ;582
000f0e  46ae              MOV      lr,r5                 ;582
000f10  970a              STR      r7,[sp,#0x28]         ;582
000f12  9630              STR      r6,[sp,#0xc0]         ;582
000f14  e89902f0          LDM      r9,{r4-r7,r9}         ;582
000f18  e88d100f          STM      sp,{r0-r3,r12}        ;582
000f1c  a805              ADD      r0,sp,#0x14           ;582
000f1e  4673              MOV      r3,lr                 ;582
000f20  e8a002f0          STM      r0!,{r4-r7,r9}        ;582
000f24  eeb00a4a          VMOV.F32 s0,s20                ;582
000f28  4650              MOV      r0,r10                ;582
000f2a  9a0a              LDR      r2,[sp,#0x28]         ;582
000f2c  9930              LDR      r1,[sp,#0xc0]         ;582
000f2e  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)
000f32  e9dd014d          LDRD     r0,r1,[sp,#0x134]     ;582
000f36  e9cd0100          STRD     r0,r1,[sp,#0]         ;582
000f3a  e9dd124a          LDRD     r1,r2,[sp,#0x128]     ;584
000f3e  a882              ADD      r0,sp,#0x208          ;584
000f40  9b4c              LDR      r3,[sp,#0x130]        ;584
000f42  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
000f46  af61              ADD      r7,sp,#0x184          ;584
000f48  4604              MOV      r4,r0                 ;584
000f4a  cf6e              LDM      r7!,{r1-r3,r5,r6}     ;584
000f4c  e88d006e          STM      sp,{r1-r3,r5,r6}      ;584
000f50  a8d1              ADD      r0,sp,#0x344          ;584
000f52  2600              MOVS     r6,#0                 ;584
000f54  4669              MOV      r1,sp                 ;584
000f56  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000f5a  f8806030          STRB     r6,[r0,#0x30]         ;584
000f5e  f50d7994          ADD      r9,sp,#0x128          ;584
000f62  4605              MOV      r5,r0                 ;584
000f64  e8b900ce          LDM      r9!,{r1-r3,r6,r7}     ;584
000f68  e88d00ce          STM      sp,{r1-r3,r6,r7}      ;584
000f6c  a875              ADD      r0,sp,#0x1d4          ;584
000f6e  2700              MOVS     r7,#0                 ;584
000f70  4669              MOV      r1,sp                 ;584
000f72  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
000f76  f1040108          ADD      r1,r4,#8              ;584
000f7a  f8807030          STRB     r7,[r0,#0x30]         ;584
000f7e  e891568e          LDM      r1,{r1-r3,r7,r9,r10,r12,lr};584
000f82  e88d568e          STM      sp,{r1-r3,r7,r9,r10,r12,lr};584
000f86  e9d4120a          LDRD     r1,r2,[r4,#0x28]      ;584
000f8a  4606              MOV      r6,r0                 ;584
000f8c  6b20              LDR      r0,[r4,#0x30]         ;584
000f8e  9108              STR      r1,[sp,#0x20]         ;584
000f90  e9cd2009          STRD     r2,r0,[sp,#0x24]      ;584
000f94  e9d42300          LDRD     r2,r3,[r4,#0]         ;584
000f98  4629              MOV      r1,r5                 ;584
000f9a  4630              MOV      r0,r6                 ;584
000f9c  f7fffffe          BL       _ZN4Anki8Embedded6Matrix3AddIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Add<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
000fa0  a05a              ADR      r0,|L5.4364|
000fa2  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000fa6  2300              MOVS     r3,#0                 ;588
000fa8  461a              MOV      r2,r3                 ;588
000faa  2101              MOVS     r1,#1                 ;588
000fac  a8d0              ADD      r0,sp,#0x340          ;588
000fae  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000fb2  6800              LDR      r0,[r0,#0]            ;588
000fb4  9000              STR      r0,[sp,#0]            ;588
000fb6  ab0b              ADD      r3,sp,#0x2c           ;588
000fb8  2101              MOVS     r1,#1                 ;588
000fba  a88f              ADD      r0,sp,#0x23c          ;588
000fbc  9acf              LDR      r2,[sp,#0x33c]        ;588
000fbe  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000fc2  aa8f              ADD      r2,sp,#0x23c          ;589
000fc4  a92b              ADD      r1,sp,#0xac           ;589
000fc6  a84f              ADD      r0,sp,#0x13c          ;589
000fc8  f7fffffe          BL       _ZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE ; Anki::Embedded::Matrix::MultiplyTranspose<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000fcc  a04f              ADR      r0,|L5.4364|
000fce  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000fd2  a056              ADR      r0,|L5.4396|
000fd4  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000fd8  2000              MOVS     r0,#0                 ;610
000fda  ac4a              ADD      r4,sp,#0x128          ;610
000fdc  4601              MOV      r1,r0                 ;610
000fde  9001              STR      r0,[sp,#4]            ;610
000fe0  ae8f              ADD      r6,sp,#0x23c          ;610
000fe2  4620              MOV      r0,r4                 ;610
000fe4  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000fe8  4605              MOV      r5,r0                 ;610
000fea  2100              MOVS     r1,#0                 ;610
000fec  4630              MOV      r0,r6                 ;610
000fee  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000ff2  4607              MOV      r7,r0                 ;610
000ff4  2000              MOVS     r0,#0                 ;610
000ff6  e0ad              B        |L5.4436|
                  |L5.4088|
000ff8  49746572          DCB      "IterativelyRefineTrack.extractApartRows",0
000ffc  61746976
001000  656c7952
001004  6566696e
001008  65547261
00100c  636b2e65
001010  78747261
001014  63744170
001018  61727452
00101c  6f777300
                  |L5.4128|
001020  49746572          DCB      "IterativelyRefineTrack.setAw",0
001024  61746976
001028  656c7952
00102c  6566696e
001030  65547261
001034  636b2e73
001038  65744177
00103c  00      
00103d  00                DCB      0
00103e  00                DCB      0
00103f  00                DCB      0
                  |L5.4160|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
                  |L5.4164|
001044  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
001048  6f726574
00104c  6563685c
001050  636f6d6d
001054  6f6e5c69
001058  6e636c75
00105c  64655c61
001060  6e6b692f
001064  636f6d6d
001068  6f6e2f72
00106c  6f626f74
001070  2f617272
001074  617932  
001077  642e6800          DCB      "d.h",0
00107b  00                DCB      0
                  |L5.4220|
00107c  41727261          DCB      "Array sizes don't match",0
001080  79207369
001084  7a657320
001088  646f6e27
00108c  74206d61
001090  74636800
                  |L5.4244|
001094  41727261          DCB      "Array<Type>::Set",0
001098  793c5479
00109c  70653e3a
0010a0  3a536574
0010a4  00      
0010a5  00                DCB      0
0010a6  00                DCB      0
0010a7  00                DCB      0
                  |L5.4264|
0010a8  496e7661          DCB      "Invalid objects",0
0010ac  6c696420
0010b0  6f626a65
0010b4  63747300
                  |L5.4280|
0010b8  49746572          DCB      "IterativelyRefineTrack.dotMultiplyWeights",0
0010bc  61746976
0010c0  656c7952
0010c4  6566696e
0010c8  65547261
0010cc  636b2e64
0010d0  6f744d75
0010d4  6c746970
0010d8  6c795765
0010dc  69676874
0010e0  7300    
0010e2  00                DCB      0
0010e3  00                DCB      0
                  |L5.4324|
0010e4  49746572          DCB      "IterativelyRefineTrack.computeAWAt",0
0010e8  61746976
0010ec  656c7952
0010f0  6566696e
0010f4  65547261
0010f8  636b2e63
0010fc  6f6d7075
001100  74654157
001104  417400  
001107  00                DCB      0
                  |L5.4360|
001108  3f800000          DCFS     0x3f800000 ; 1
                  |L5.4364|
00110c  49746572          DCB      "IterativelyRefineTrack.computeb",0
001110  61746976
001114  656c7952
001118  6566696e
00111c  65547261
001120  636b2e63
001124  6f6d7075
001128  74656200
                  |L5.4396|
00112c  49746572          DCB      "IterativelyRefineTrack.solveForUpdate",0
001130  61746976
001134  656c7952
001138  6566696e
00113c  65547261
001140  636b2e73
001144  6f6c7665
001148  466f7255
00114c  70646174
001150  6500    
001152  00                DCB      0
001153  00                DCB      0
                  |L5.4436|
001154  9002              STR      r0,[sp,#8]            ;610
001156  4620              MOV      r0,r4                 ;610
001158  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00115c  b390              CBZ      r0,|L5.4548|
00115e  4630              MOV      r0,r6                 ;610
001160  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
001164  b370              CBZ      r0,|L5.4548|
001166  2101              MOVS     r1,#1                 ;610
001168  4620              MOV      r0,r4                 ;610
00116a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00116e  42a8              CMP      r0,r5                 ;610
001170  d039              BEQ      |L5.4582|
001172  48c1              LDR      r0,|L5.5240|
001174  f44f71b8          MOV      r1,#0x170             ;610
001178  f2af7388          ADR      r3,|L5.2548|
00117c  e9cd0100          STRD     r0,r1,[sp,#0]         ;610
001180  a2be              ADR      r2,|L5.5244|
001182  a1c3              ADR      r1,|L5.5264|
001184  2005              MOVS     r0,#5                 ;610
001186  f7fffffe          BL       _Anki_Log
00118a  f04f60a0          MOV      r0,#0x5000000         ;610
00118e  f000b92c          B.W      |L5.5098|
                  |L5.4498|
001192  213c              MOVS     r1,#0x3c              ;610
001194  48c4              LDR      r0,|L5.5288|
001196  e9cd0100          STRD     r0,r1,[sp,#0]         ;610
00119a  a3c4              ADR      r3,|L5.5292|
00119c  a2d3              ADR      r2,|L5.5356|
00119e  a1d7              ADR      r1,|L5.5372|
0011a0  2005              MOVS     r0,#5                 ;610
0011a2  f7fffffe          BL       _Anki_Log
0011a6  e68b              B        |L5.3776|
                  |L5.4520|
0011a8  f2402176          MOV      r1,#0x276             ;610
0011ac  48d4              LDR      r0,|L5.5376|
0011ae  4bd5              LDR      r3,|L5.5380|
0011b0  e9cd0100          STRD     r0,r1,[sp,#0]         ;610
0011b4  f10302a8          ADD      r2,r3,#0xa8           ;610
0011b8  f1a20118          SUB      r1,r2,#0x18           ;610
0011bc  2005              MOVS     r0,#5                 ;610
0011be  f7fffffe          BL       _Anki_Log
0011c2  e66c              B        |L5.3742|
                  |L5.4548|
0011c4  e7ff              B        |L5.4550|
                  |L5.4550|
0011c6  48ac              LDR      r0,|L5.5240|
0011c8  f240116d          MOV      r1,#0x16d             ;610
0011cc  f2af73dc          ADR      r3,|L5.2548|
0011d0  f2af122c          ADR      r2,|L5.4264|
0011d4  e9cd0100          STRD     r0,r1,[sp,#0]         ;610
0011d8  a1ad              ADR      r1,|L5.5264|
0011da  2005              MOVS     r0,#5                 ;610
0011dc  f7fffffe          BL       _Anki_Log
0011e0  f04f6080          MOV      r0,#0x4000000         ;610
0011e4  e101              B        |L5.5098|
                  |L5.4582|
0011e6  2101              MOVS     r1,#1                 ;610
0011e8  4630              MOV      r0,r6                 ;610
0011ea  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0011ee  42a8              CMP      r0,r5                 ;610
0011f0  d00e              BEQ      |L5.4624|
0011f2  48a1              LDR      r0,|L5.5240|
0011f4  f2401173          MOV      r1,#0x173             ;610
0011f8  f6af0308          ADR      r3,|L5.2548|
0011fc  e9cd0100          STRD     r0,r1,[sp,#0]         ;610
001200  a2c1              ADR      r2,|L5.5384|
001202  a1a3              ADR      r1,|L5.5264|
001204  2005              MOVS     r0,#5                 ;610
001206  f7fffffe          BL       _Anki_Log
00120a  f04f60a0          MOV      r0,#0x5000000         ;610
00120e  e0ec              B        |L5.5098|
                  |L5.4624|
001210  ed9faac5          VLDR     s20,|L5.5416|
001214  f04f0900          MOV      r9,#0                 ;610
001218  2d00              CMP      r5,#0                 ;610
00121a  bfc8              IT       GT                    ;610
00121c  ed5faa46          VLDRGT   s21,|L5.4360|
001220  dd57              BLE      |L5.4818|
                  |L5.4642|
001222  68a1              LDR      r1,[r4,#8]            ;610
001224  6920              LDR      r0,[r4,#0x10]         ;610
001226  fb090201          MLA      r2,r9,r1,r0           ;610
00122a  2100              MOVS     r1,#0                 ;610
00122c  f1b90f00          CMP      r9,#0                 ;610
001230  dd22              BLE      |L5.4728|
                  |L5.4658|
001232  68a3              LDR      r3,[r4,#8]            ;610
001234  6920              LDR      r0,[r4,#0x10]         ;610
001236  eb020c81          ADD      r12,r2,r1,LSL #2      ;610
00123a  fb010303          MLA      r3,r1,r3,r0           ;610
00123e  eddc0a00          VLDR     s1,[r12,#0]           ;610
001242  2000              MOVS     r0,#0                 ;610
001244  2900              CMP      r1,#0                 ;610
001246  dd0c              BLE      |L5.4706|
                  |L5.4680|
001248  eb020a80          ADD      r10,r2,r0,LSL #2      ;610
00124c  edda1a00          VLDR     s3,[r10,#0]           ;610
001250  eb030a80          ADD      r10,r3,r0,LSL #2      ;610
001254  1c40              ADDS     r0,r0,#1              ;610
001256  ed9a1a00          VLDR     s2,[r10,#0]           ;610
00125a  4281              CMP      r1,r0                 ;610
00125c  ee410ac1          VMLS.F32 s1,s3,s2              ;610
001260  dcf2              BGT      |L5.4680|
                  |L5.4706|
001262  eb030081          ADD      r0,r3,r1,LSL #2       ;610
001266  1c49              ADDS     r1,r1,#1              ;610
001268  ed900a00          VLDR     s0,[r0,#0]            ;610
00126c  4549              CMP      r1,r9                 ;610
00126e  ee200a20          VMUL.F32 s0,s0,s1              ;610
001272  ed8c0a00          VSTR     s0,[r12,#0]           ;610
001276  dbdc              BLT      |L5.4658|
                  |L5.4728|
001278  eb020a89          ADD      r10,r2,r9,LSL #2      ;610
00127c  2000              MOVS     r0,#0                 ;610
00127e  ed9a0a00          VLDR     s0,[r10,#0]           ;610
001282  f1b90f00          CMP      r9,#0                 ;610
001286  dd08              BLE      |L5.4762|
                  |L5.4744|
001288  eb020180          ADD      r1,r2,r0,LSL #2       ;610
00128c  1c40              ADDS     r0,r0,#1              ;610
00128e  edd10a00          VLDR     s1,[r1,#0]            ;610
001292  4581              CMP      r9,r0                 ;610
001294  ee000ae0          VMLS.F32 s0,s1,s1              ;610
001298  dcf6              BGT      |L5.4744|
                  |L5.4762|
00129a  eeb4aac0          VCMPE.F32 s20,s0                ;610
00129e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;610
0012a2  dd03              BLE      |L5.4780|
0012a4  2001              MOVS     r0,#1                 ;610
0012a6  9002              STR      r0,[sp,#8]            ;610
0012a8  2000              MOVS     r0,#0                 ;610
0012aa  e09e              B        |L5.5098|
                  |L5.4780|
0012ac  eef10ac0          VSQRT.F32 s1,s0                 ;610
0012b0  eef40a60          VCMP.F32 s1,s1                 ;610
0012b4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;610
0012b8  d003              BEQ      |L5.4802|
0012ba  f7fffffe          BL       __hardfp_sqrtf
0012be  eef00a40          VMOV.F32 s1,s0                 ;610
                  |L5.4802|
0012c2  f1090901          ADD      r9,r9,#1              ;610
0012c6  ee8a0aa0          VDIV.F32 s0,s21,s1             ;610
0012ca  45a9              CMP      r9,r5                 ;610
0012cc  ed8a0a00          VSTR     s0,[r10,#0]           ;610
0012d0  dba7              BLT      |L5.4642|
                  |L5.4818|
0012d2  2100              MOVS     r1,#0                 ;610
0012d4  2d00              CMP      r5,#0                 ;610
0012d6  dd2d              BLE      |L5.4916|
                  |L5.4824|
0012d8  68a2              LDR      r2,[r4,#8]            ;610
0012da  6920              LDR      r0,[r4,#0x10]         ;610
0012dc  fb010c02          MLA      r12,r1,r2,r0          ;610
0012e0  2200              MOVS     r2,#0                 ;610
0012e2  2f00              CMP      r7,#0                 ;610
0012e4  bfc8              IT       GT                    ;610
0012e6  eb0c0981          ADDGT    r9,r12,r1,LSL #2      ;610
0012ea  dd20              BLE      |L5.4910|
                  |L5.4844|
0012ec  68b3              LDR      r3,[r6,#8]            ;610
0012ee  6930              LDR      r0,[r6,#0x10]         ;610
0012f0  fb020303          MLA      r3,r2,r3,r0           ;610
0012f4  eb030a81          ADD      r10,r3,r1,LSL #2      ;610
0012f8  2000              MOVS     r0,#0                 ;610
0012fa  edda0a00          VLDR     s1,[r10,#0]           ;610
0012fe  2900              CMP      r1,#0                 ;610
001300  dd0c              BLE      |L5.4892|
                  |L5.4866|
001302  eb0c0e80          ADD      lr,r12,r0,LSL #2      ;610
001306  edde1a00          VLDR     s3,[lr,#0]            ;610
00130a  eb030e80          ADD      lr,r3,r0,LSL #2       ;610
00130e  1c40              ADDS     r0,r0,#1              ;610
001310  ed9e1a00          VLDR     s2,[lr,#0]            ;610
001314  4281              CMP      r1,r0                 ;610
001316  ee410ac1          VMLS.F32 s1,s3,s2              ;610
00131a  dcf2              BGT      |L5.4866|
                  |L5.4892|
00131c  ed990a00          VLDR     s0,[r9,#0]            ;610
001320  1c52              ADDS     r2,r2,#1              ;610
001322  42ba              CMP      r2,r7                 ;610
001324  ee200a20          VMUL.F32 s0,s0,s1              ;610
001328  ed8a0a00          VSTR     s0,[r10,#0]           ;610
00132c  dbde              BLT      |L5.4844|
                  |L5.4910|
00132e  1c49              ADDS     r1,r1,#1              ;610
001330  42a9              CMP      r1,r5                 ;610
001332  dbd1              BLT      |L5.4824|
                  |L5.4916|
001334  1e69              SUBS     r1,r5,#1              ;610
001336  d435              BMI      |L5.5028|
                  |L5.4920|
001338  68a2              LDR      r2,[r4,#8]            ;610
00133a  6920              LDR      r0,[r4,#0x10]         ;610
00133c  fb010002          MLA      r0,r1,r2,r0           ;610
001340  2200              MOVS     r2,#0                 ;610
001342  2f00              CMP      r7,#0                 ;610
001344  bfc4              ITT      GT                    ;610
001346  eb000081          ADDGT    r0,r0,r1,LSL #2       ;610
00134a  9000              STRGT    r0,[sp,#0]            ;610
00134c  dd28              BLE      |L5.5024|
                  |L5.4942|
00134e  68b3              LDR      r3,[r6,#8]            ;610
001350  6930              LDR      r0,[r6,#0x10]         ;610
001352  fb020303          MLA      r3,r2,r3,r0           ;610
001356  eb030a81          ADD      r10,r3,r1,LSL #2      ;610
00135a  1e68              SUBS     r0,r5,#1              ;610
00135c  edda0a00          VLDR     s1,[r10,#0]           ;610
001360  4288              CMP      r0,r1                 ;610
001362  bfc4              ITT      GT                    ;610
001364  f8d4c010          LDRGT    r12,[r4,#0x10]        ;610
001368  f8d49008          LDRGT    r9,[r4,#8]            ;610
00136c  dd0e              BLE      |L5.5004|
                  |L5.4974|
00136e  fb00ce09          MLA      lr,r0,r9,r12          ;610
001372  eb0e0e81          ADD      lr,lr,r1,LSL #2       ;610
001376  edde1a00          VLDR     s3,[lr,#0]            ;610
00137a  eb030e80          ADD      lr,r3,r0,LSL #2       ;610
00137e  1e40              SUBS     r0,r0,#1              ;610
001380  ed9e1a00          VLDR     s2,[lr,#0]            ;610
001384  4288              CMP      r0,r1                 ;610
001386  ee410ac1          VMLS.F32 s1,s3,s2              ;610
00138a  dcf0              BGT      |L5.4974|
                  |L5.5004|
00138c  9800              LDR      r0,[sp,#0]            ;610
00138e  1c52              ADDS     r2,r2,#1              ;610
001390  4297              CMP      r7,r2                 ;610
001392  ed900a00          VLDR     s0,[r0,#0]            ;610
001396  ee200a20          VMUL.F32 s0,s0,s1              ;610
00139a  ed8a0a00          VSTR     s0,[r10,#0]           ;610
00139e  dcd6              BGT      |L5.4942|
                  |L5.5024|
0013a0  1e49              SUBS     r1,r1,#1              ;610
0013a2  d5c9              BPL      |L5.4920|
                  |L5.5028|
0013a4  9801              LDR      r0,[sp,#4]            ;610
0013a6  2800              CMP      r0,#0                 ;610
0013a8  bf1c              ITT      NE                    ;610
0013aa  2100              MOVNE    r1,#0                 ;610
0013ac  2d00              CMPNE    r5,#0                 ;610
0013ae  bfc8              IT       GT                    ;610
0013b0  ed1f0aab          VLDRGT   s0,|L5.4360|
0013b4  dd18              BLE      |L5.5096|
                  |L5.5046|
0013b6  68a2              LDR      r2,[r4,#8]            ;610
0013b8  6920              LDR      r0,[r4,#0x10]         ;610
0013ba  fb010202          MLA      r2,r1,r2,r0           ;610
0013be  eb020081          ADD      r0,r2,r1,LSL #2       ;610
0013c2  edd00a00          VLDR     s1,[r0,#0]            ;610
0013c6  ee801a20          VDIV.F32 s2,s0,s1              ;610
0013ca  ed801a00          VSTR     s2,[r0,#0]            ;610
0013ce  1c48              ADDS     r0,r1,#1              ;610
0013d0  4285              CMP      r5,r0                 ;610
0013d2  dd06              BLE      |L5.5090|
                  |L5.5076|
0013d4  eb020380          ADD      r3,r2,r0,LSL #2       ;610
0013d8  1c40              ADDS     r0,r0,#1              ;610
0013da  edc38a00          VSTR     s17,[r3,#0]           ;610
0013de  4285              CMP      r5,r0                 ;610
0013e0  dcf8              BGT      |L5.5076|
                  |L5.5090|
0013e2  1c49              ADDS     r1,r1,#1              ;610
0013e4  42a9              CMP      r1,r5                 ;610
0013e6  dbe6              BLT      |L5.5046|
                  |L5.5096|
0013e8  2000              MOVS     r0,#0                 ;610
                  |L5.5098|
0013ea  2800              CMP      r0,#0                 ;610
0013ec  f47eae24          BNE      |L5.56|
0013f0  9802              LDR      r0,[sp,#8]            ;613
0013f2  bb98              CBNZ     r0,|L5.5212|
0013f4  f2af20cc          ADR      r0,|L5.4396|
0013f8  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0013fc  a04b              ADR      r0,|L5.5420|
0013fe  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
001402  a90b              ADD      r1,sp,#0x2c           ;624
001404  a8b2              ADD      r0,sp,#0x2c8          ;624
001406  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
00140a  4602              MOV      r2,r0                 ;624
00140c  eeb00a69          VMOV.F32 s0,s19                ;624
001410  a98f              ADD      r1,sp,#0x23c          ;624
001412  f10800e4          ADD      r0,r8,#0xe4           ;624
001416  f8dd3418          LDR      r3,[sp,#0x418]        ;624
00141a  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f326UpdateERKNS0_5ArrayIfEEfNS0_11MemoryStackENS1_13TransformTypeE ; Anki::Embedded::Transformations::PlanarTransformation_f32::Update(const Anki::Embedded::Array<float>&, float, Anki::Embedded::MemoryStack, Anki::Embedded::Transformations::TransformType)
00141e  a043              ADR      r0,|L5.5420|
001420  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
001424  a04c              ADR      r0,|L5.5464|
001426  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00142a  a90b              ADD      r1,sp,#0x2c           ;642
00142c  a8b2              ADD      r0,sp,#0x2c8          ;642
00142e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
001432  4602              MOV      r2,r0                 ;642
001434  a91e              ADD      r1,sp,#0x78           ;642
001436  f10800e4          ADD      r0,r8,#0xe4           ;642
00143a  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker21UpdatePreviousCornersERKNS0_15Transformations24PlanarTransformation_f32ERNS0_15FixedLengthListINS0_13QuadrilateralIfEEEENS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::UpdatePreviousCorners(const Anki::Embedded::Transformations::PlanarTransformation_f32&, Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>&, Anki::Embedded::MemoryStack)
00143e  eeb40ac8          VCMPE.F32 s0,s16                ;644
001442  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;644
001446  d20a              BCS      |L5.5214|
001448  f8dd1420          LDR      r1,[sp,#0x420]        ;645
00144c  2001              MOVS     r0,#1                 ;645
00144e  7008              STRB     r0,[r1,#0]            ;645
001450  a041              ADR      r0,|L5.5464|
001452  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
001456  2000              MOVS     r0,#0                 ;647
001458  f7febdee          B        |L5.56|
                  |L5.5212|
00145c  e009              B        |L5.5234|
                  |L5.5214|
00145e  a03e              ADR      r0,|L5.5464|
001460  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
001464  98eb              LDR      r0,[sp,#0x3ac]        ;483
001466  99fb              LDR      r1,[sp,#0x3ec]        ;483
001468  1c40              ADDS     r0,r0,#1              ;483
00146a  90eb              STR      r0,[sp,#0x3ac]        ;483
00146c  4288              CMP      r0,r1                 ;483
00146e  f6ffa906          BLT      |L5.1662|
                  |L5.5234|
001472  2000              MOVS     r0,#0                 ;653
001474  f7febde0          B        |L5.56|
;;;655    
                          ENDP

                  |L5.5240|
                          DCD      _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
                  |L5.5244|
00147c  415f4c20          DCB      "A_L is not square",0
001480  6973206e
001484  6f742073
001488  71756172
00148c  6500    
00148e  00                DCB      0
00148f  00                DCB      0
                  |L5.5264|
001490  43686f6c          DCB      "CholeskyDecomposition",0
001494  65736b79
001498  4465636f
00149c  6d706f73
0014a0  6974696f
0014a4  6e00    
0014a6  00                DCB      0
0014a7  00                DCB      0
                  |L5.5288|
                          DCD      _ZZN4Anki8Embedded3EyeIfEENS_6ResultERNS0_5ArrayIT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Eye<float>(Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
                  |L5.5292|
0014ac  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayP"
0014b0  6f726574
0014b4  6563685c
0014b8  636f6d6d
0014bc  6f6e5c69
0014c0  6e636c75
0014c4  64655c61
0014c8  6e6b692f
0014cc  636f6d6d
0014d0  6f6e2f72
0014d4  6f626f74
0014d8  2f617272
0014dc  617950  
0014df  61747465          DCB      "atterns.h",0
0014e3  726e732e
0014e7  6800    
0014e9  00                DCB      0
0014ea  00                DCB      0
0014eb  00                DCB      0
                  |L5.5356|
0014ec  6f757420          DCB      "out is invalid",0
0014f0  69732069
0014f4  6e76616c
0014f8  696400  
0014fb  00                DCB      0
                  |L5.5372|
0014fc  45796500          DCB      "Eye",0
                  |L5.5376|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetZero()::__PRETTY_FUNCTION__
                  |L5.5380|
                          DCD      ||.constdata||+0x370
                  |L5.5384|
001508  58742061          DCB      "Xt and Bt are the wrong sizes",0
00150c  6e642042
001510  74206172
001514  65207468
001518  65207772
00151c  6f6e6720
001520  73697a65
001524  7300    
001526  00                DCB      0
001527  00                DCB      0
                  |L5.5416|
001528  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L5.5420|
00152c  49746572          DCB      "IterativelyRefineTrack.updateTransformation",0
001530  61746976
001534  656c7952
001538  6566696e
00153c  65547261
001540  636b2e75
001544  70646174
001548  65547261
00154c  6e73666f
001550  726d6174
001554  696f6e00
                  |L5.5464|
001558  49746572          DCB      "IterativelyRefineTrack.checkForCompletion",0
00155c  61746976
001560  656c7952
001564  6566696e
001568  65547261
00156c  636b2e63
001570  6865636b
001574  466f7243
001578  6f6d706c
00157c  6574696f
001580  6e00    
001582  00                DCB      0
001583  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEfRNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC2ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEfRNS0_11MemoryStackE                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::LucasKanadeTracker_Slow__sub_object(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, float, Anki::Embedded::MemoryStack&)
                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEfRNS0_11MemoryStackE PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::LucasKanadeTracker_Slow(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::Quadrilateral<float>&, float, int, Anki::Embedded::Transformations::TransformType, float, Anki::Embedded::MemoryStack&)
;;;36     
;;;37           LucasKanadeTracker_Slow::LucasKanadeTracker_Slow(const Array<u8> &templateImage, const Quadrilateral<f32> &templateQuad, const f32 scaleTemplateRegionPercent, const s32 numPyramidLevels, const Transformations::TransformType transformType, const f32 ridgeWeight, MemoryStack &memory)
;;;38             : numPyramidLevels(numPyramidLevels), templateImageHeight(templateImage.get_size(0)), templateImageWidth(templateImage.get_size(1)), ridgeWeight(ridgeWeight), isValid(false), isInitialized(false)
;;;39           {
;;;40             BeginBenchmark("LucasKanadeTracker_Slow");
;;;41     
;;;42             AnkiConditionalErrorAndReturn(templateImageHeight > 0 && templateImageWidth > 0,
;;;43               "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "template widths and heights must be greater than zero, and multiples of %d", ANKI_VISION_IMAGE_WIDTH_MULTIPLE);
;;;44     
;;;45             AnkiConditionalErrorAndReturn(numPyramidLevels > 0,
;;;46               "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "numPyramidLevels must be greater than zero");
;;;47     
;;;48             AnkiConditionalErrorAndReturn(transformType==Transformations::TRANSFORM_TRANSLATION || transformType == Transformations::TRANSFORM_AFFINE || transformType==Transformations::TRANSFORM_PROJECTIVE,
;;;49               "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "Only Transformations::TRANSFORM_TRANSLATION, Transformations::TRANSFORM_AFFINE, and Transformations::TRANSFORM_PROJECTIVE are supported");
;;;50     
;;;51             AnkiConditionalErrorAndReturn(ridgeWeight >= 0.0f,
;;;52               "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "ridgeWeight must be greater or equal to zero");
;;;53     
;;;54             const s32 initialImageScaleS32 = BASE_IMAGE_WIDTH / templateImage.get_size(1);
;;;55             const s32 initialImagePowerS32 = Log2u32(static_cast<u32>(initialImageScaleS32));
;;;56             const f32 initialImageScaleF32 = static_cast<f32>(initialImageScaleS32);
;;;57     
;;;58             AnkiConditionalErrorAndReturn(((1<<initialImagePowerS32)*templateImage.get_size(1)) == BASE_IMAGE_WIDTH,
;;;59               "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "The templateImage must be a power of two smaller than BASE_IMAGE_WIDTH");
;;;60     
;;;61             templateRegion = templateQuad.ComputeBoundingRectangle<f32>().ComputeScaledRectangle<f32>(scaleTemplateRegionPercent);
;;;62     
;;;63             templateRegion.left /= initialImageScaleF32;
;;;64             templateRegion.right /= initialImageScaleF32;
;;;65             templateRegion.top /= initialImageScaleF32;
;;;66             templateRegion.bottom /= initialImageScaleF32;
;;;67     
;;;68             for(s32 i=1; i<(numPyramidLevels-1); i++) {
;;;69               const s32 curTemplateHeight = templateImageHeight >> i;
;;;70               const s32 curTemplateWidth = templateImageWidth >> i;
;;;71     
;;;72               AnkiConditionalErrorAndReturn(!IsOdd(curTemplateHeight) && !IsOdd(curTemplateWidth),
;;;73                 "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "Template widths and height must divisible by 2^numPyramidLevels");
;;;74             }
;;;75     
;;;76             A_full = FixedLengthList<Array<f32> >(numPyramidLevels, memory);
;;;77     
;;;78             AnkiConditionalErrorAndReturn(A_full.IsValid(),
;;;79               "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "Could not allocate A_full");
;;;80     
;;;81             A_full.set_size(numPyramidLevels);
;;;82     
;;;83             templateCoordinates = FixedLengthList<Meshgrid<f32> >(numPyramidLevels, memory);
;;;84     
;;;85             AnkiConditionalErrorAndReturn(templateCoordinates.IsValid(),
;;;86               "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "Could not allocate templateCoordinates");
;;;87     
;;;88             templateCoordinates.set_size(numPyramidLevels);
;;;89     
;;;90             templateImagePyramid = FixedLengthList<Array<u8> >(numPyramidLevels, memory);
;;;91     
;;;92             AnkiConditionalErrorAndReturn(templateImagePyramid.IsValid(),
;;;93               "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "Could not allocate templateImagePyramid");
;;;94     
;;;95             templateImagePyramid.set_size(numPyramidLevels);
;;;96     
;;;97             templateWeights = FixedLengthList<Array<f32> >(numPyramidLevels, memory);
;;;98     
;;;99             AnkiConditionalErrorAndReturn(templateWeights.IsValid(),
;;;100              "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow", "Could not allocate templateWeights");
;;;101    
;;;102            templateWeights.set_size(numPyramidLevels);
;;;103    
;;;104            this->transformation = Transformations::PlanarTransformation_f32(transformType, templateQuad, memory);
;;;105    
;;;106            this->isValid = true;
;;;107    
;;;108            BeginBenchmark("InitializeTemplate");
;;;109            if(LucasKanadeTracker_Slow::InitializeTemplate(templateImage, memory) != RESULT_OK) {
;;;110              this->isValid = false;
;;;111            }
;;;112            EndBenchmark("InitializeTemplate");
;;;113    
;;;114            EndBenchmark("LucasKanadeTracker_Slow");
;;;115          }
;;;116    
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  461f              MOV      r7,r3
000006  ed2d0b02          VPUSH    {d0}
00000a  ed2d8b02          VPUSH    {d8}
00000e  b0d1              SUB      sp,sp,#0x144
000010  eeb08a60          VMOV.F32 s16,s1
000014  eef08a40          VMOV.F32 s17,s0
000018  f8dda188          LDR      r10,[sp,#0x188]
00001c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList()
000020  3034              ADDS     r0,r0,#0x34
000022  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::FixedLengthList()
000026  3034              ADDS     r0,r0,#0x34
000028  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::FixedLengthList()
00002c  3034              ADDS     r0,r0,#0x34
00002e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList()
000032  f1a0049c          SUB      r4,r0,#0x9c
000036  6347              STR      r7,[r0,#0x34]
000038  2100              MOVS     r1,#0
00003a  9856              LDR      r0,[sp,#0x158]
00003c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000040  f8c400d4          STR      r0,[r4,#0xd4]
000044  2101              MOVS     r1,#1
000046  9856              LDR      r0,[sp,#0x158]
000048  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00004c  f8c400d8          STR      r0,[r4,#0xd8]
000050  f10400e4          ADD      r0,r4,#0xe4
000054  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1Ev ; Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32()
000058  f1a004e4          SUB      r4,r0,#0xe4
00005c  ed808a11          VSTR     s16,[r0,#0x44]
000060  304c              ADDS     r0,r0,#0x4c
000062  ed9f0af0          VLDR     s0,|L6.1060|
000066  ed800a00          VSTR     s0,[r0,#0]
00006a  ed800a01          VSTR     s0,[r0,#4]
00006e  ed800a02          VSTR     s0,[r0,#8]
000072  ed800a03          VSTR     s0,[r0,#0xc]
000076  2000              MOVS     r0,#0
000078  f8840140          STRB     r0,[r4,#0x140]
00007c  f8840141          STRB     r0,[r4,#0x141]
000080  a0e9              ADR      r0,|L6.1064|
000082  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000086  f8d400d4          LDR      r0,[r4,#0xd4]
00008a  f8df83b4          LDR      r8,|L6.1088|
00008e  2800              CMP      r0,#0
000090  bfc4              ITT      GT
000092  f8d400d8          LDRGT    r0,[r4,#0xd8]
000096  2800              CMPGT    r0,#0
000098  dc0d              BGT      |L6.182|
00009a  2010              MOVS     r0,#0x10
00009c  212a              MOVS     r1,#0x2a
00009e  f8cd8000          STR      r8,[sp,#0]
0000a2  e9cd1001          STRD     r1,r0,[sp,#4]
0000a6  a3e7              ADR      r3,|L6.1092|
0000a8  4af3              LDR      r2,|L6.1144|
0000aa  a1f4              ADR      r1,|L6.1148|
0000ac  2005              MOVS     r0,#5
0000ae  f7fffffe          BL       _Anki_Log
0000b2  f000bbd9          B.W      |L6.2152|
                  |L6.182|
0000b6  2f00              CMP      r7,#0
0000b8  dc0f              BGT      |L6.218|
0000ba  202d              MOVS     r0,#0x2d
0000bc  e9cd8000          STRD     r8,r0,[sp,#0]
0000c0  a3e0              ADR      r3,|L6.1092|
0000c2  a2fb              ADR      r2,|L6.1200|
0000c4  a1ed              ADR      r1,|L6.1148|
0000c6  2005              MOVS     r0,#5
0000c8  f7fffffe          BL       _Anki_Log
0000cc  4620              MOV      r0,r4
                  |L6.206|
0000ce  b051              ADD      sp,sp,#0x144
0000d0  ecbd8b02          VPOP     {d8}
0000d4  b006              ADD      sp,sp,#0x18
0000d6  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.218|
0000da  f5ba7f00          CMP      r10,#0x200
0000de  bf1c              ITT      NE
0000e0  f5ba6fc0          CMPNE    r10,#0x600
0000e4  f5ba6f00          CMPNE    r10,#0x800
0000e8  d00a              BEQ      |L6.256|
0000ea  2030              MOVS     r0,#0x30
0000ec  e9cd8000          STRD     r8,r0,[sp,#0]
0000f0  a3d4              ADR      r3,|L6.1092|
0000f2  4afa              LDR      r2,|L6.1244|
0000f4  a1e1              ADR      r1,|L6.1148|
0000f6  2005              MOVS     r0,#5
0000f8  f7fffffe          BL       _Anki_Log
0000fc  4620              MOV      r0,r4
0000fe  e7e6              B        |L6.206|
                  |L6.256|
000100  eeb58ac0          VCMPE.F32 s16,#0.0
000104  eef1fa10          VMRS     APSR_nzcv,FPSCR
000108  d20a              BCS      |L6.288|
00010a  2033              MOVS     r0,#0x33
00010c  e9cd8000          STRD     r8,r0,[sp,#0]
000110  a3cc              ADR      r3,|L6.1092|
000112  a2f3              ADR      r2,|L6.1248|
000114  a1d9              ADR      r1,|L6.1148|
000116  2005              MOVS     r0,#5
000118  f7fffffe          BL       _Anki_Log
00011c  4620              MOV      r0,r4
00011e  e7d6              B        |L6.206|
                  |L6.288|
000120  2101              MOVS     r1,#1
000122  9856              LDR      r0,[sp,#0x158]
000124  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000128  f44f71a0          MOV      r1,#0x140
00012c  fb91f5f0          SDIV     r5,r1,r0
000130  4628              MOV      r0,r5
000132  f7fffffe          BL       Log2u32
000136  ee005a10          VMOV     s0,r5
00013a  4606              MOV      r6,r0
00013c  2101              MOVS     r1,#1
00013e  eeb88ac0          VCVT.F32.S32 s16,s0
000142  9856              LDR      r0,[sp,#0x158]
000144  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000148  40b0              LSLS     r0,r0,r6
00014a  f5b07fa0          CMP      r0,#0x140
00014e  d00a              BEQ      |L6.358|
000150  203a              MOVS     r0,#0x3a
000152  e9cd8000          STRD     r8,r0,[sp,#0]
000156  a3bb              ADR      r3,|L6.1092|
000158  4aed              LDR      r2,|L6.1296|
00015a  a1c8              ADR      r1,|L6.1148|
00015c  2005              MOVS     r0,#5
00015e  f7fffffe          BL       _Anki_Log
000162  4620              MOV      r0,r4
000164  e7b3              B        |L6.206|
                  |L6.358|
000166  9d57              LDR      r5,[sp,#0x15c]
000168  f5047c98          ADD      r12,r4,#0x130
00016c  ab40              ADD      r3,sp,#0x100
00016e  ed950a00          VLDR     s0,[r5,#0]
000172  edd50a01          VLDR     s1,[r5,#4]
000176  ed8d0a2a          VSTR     s0,[sp,#0xa8]
00017a  ed8d0a2b          VSTR     s0,[sp,#0xac]
00017e  edcd0a2c          VSTR     s1,[sp,#0xb0]
000182  a82a              ADD      r0,sp,#0xa8
000184  edcd0a2d          VSTR     s1,[sp,#0xb4]
000188  2101              MOVS     r1,#1
                  |L6.394|
00018a  eb0502c1          ADD      r2,r5,r1,LSL #3
00018e  edd00a00          VLDR     s1,[r0,#0]
000192  ed921a00          VLDR     s2,[r2,#0]
000196  eef40ac1          VCMPE.F32 s1,s2
00019a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00019e  bf28              IT       CS
0001a0  eef00a41          VMOVCS.F32 s1,s2
0001a4  edc00a00          VSTR     s1,[r0,#0]
0001a8  edd00a01          VLDR     s1,[r0,#4]
0001ac  ed921a00          VLDR     s2,[r2,#0]
0001b0  eef40ac1          VCMPE.F32 s1,s2
0001b4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001b8  bfd8              IT       LE
0001ba  eef00a41          VMOVLE.F32 s1,s2
0001be  edc00a01          VSTR     s1,[r0,#4]
0001c2  edd00a02          VLDR     s1,[r0,#8]
0001c6  ed921a01          VLDR     s2,[r2,#4]
0001ca  eef40ac1          VCMPE.F32 s1,s2
0001ce  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001d2  bf28              IT       CS
0001d4  eef00a41          VMOVCS.F32 s1,s2
0001d8  edc00a02          VSTR     s1,[r0,#8]
0001dc  edd00a03          VLDR     s1,[r0,#0xc]
0001e0  ed921a01          VLDR     s2,[r2,#4]
0001e4  eef40ac1          VCMPE.F32 s1,s2
0001e8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001ec  bfd8              IT       LE
0001ee  eef00a41          VMOVLE.F32 s1,s2
0001f2  edc00a03          VSTR     s1,[r0,#0xc]
0001f6  1c49              ADDS     r1,r1,#1
0001f8  2904              CMP      r1,#4
0001fa  dbc6              BLT      |L6.394|
0001fc  ed9d2a2b          VLDR     s4,[sp,#0xac]
000200  eddd2a2a          VLDR     s5,[sp,#0xa8]
000204  ed9d1a2d          VLDR     s2,[sp,#0xb4]
000208  eddd1a2c          VLDR     s3,[sp,#0xb0]
00020c  ee720a62          VSUB.F32 s1,s4,s5
000210  2501              MOVS     r5,#1
000212  ee310a61          VSUB.F32 s0,s2,s3
000216  1e7e              SUBS     r6,r7,#1
000218  ee203aa8          VMUL.F32 s6,s1,s17
00021c  2e01              CMP      r6,#1
00021e  ee603a28          VMUL.F32 s7,s0,s17
000222  ee730a60          VSUB.F32 s1,s6,s1
000226  eeb63a00          VMOV.F32 s6,#0.50000000
00022a  ee330ac0          VSUB.F32 s0,s7,s0
00022e  ee600a83          VMUL.F32 s1,s1,s6
000232  ee200a03          VMUL.F32 s0,s0,s6
000236  ee722ae0          VSUB.F32 s5,s5,s1
00023a  ee720a20          VADD.F32 s1,s4,s1
00023e  ee711ac0          VSUB.F32 s3,s3,s0
000242  ee310a00          VADD.F32 s0,s2,s0
000246  edc32a00          VSTR     s5,[r3,#0]
00024a  edc30a01          VSTR     s1,[r3,#4]
00024e  edc31a02          VSTR     s3,[r3,#8]
000252  ed830a03          VSTR     s0,[r3,#0xc]
000256  ed9d0a40          VLDR     s0,[sp,#0x100]
00025a  ed8c0a00          VSTR     s0,[r12,#0]
00025e  ed9d0a41          VLDR     s0,[sp,#0x104]
000262  ed8c0a01          VSTR     s0,[r12,#4]
000266  ed9d0a42          VLDR     s0,[sp,#0x108]
00026a  ed8c0a02          VSTR     s0,[r12,#8]
00026e  ed9d0a43          VLDR     s0,[sp,#0x10c]
000272  ed8c0a03          VSTR     s0,[r12,#0xc]
000276  ed940a4c          VLDR     s0,[r4,#0x130]
00027a  eec00a08          VDIV.F32 s1,s0,s16
00027e  edc40a4c          VSTR     s1,[r4,#0x130]
000282  ed940a4d          VLDR     s0,[r4,#0x134]
000286  eec00a08          VDIV.F32 s1,s0,s16
00028a  edc40a4d          VSTR     s1,[r4,#0x134]
00028e  ed940a4e          VLDR     s0,[r4,#0x138]
000292  eec00a08          VDIV.F32 s1,s0,s16
000296  edc40a4e          VSTR     s1,[r4,#0x138]
00029a  ed940a4f          VLDR     s0,[r4,#0x13c]
00029e  eec00a08          VDIV.F32 s1,s0,s16
0002a2  edc40a4f          VSTR     s1,[r4,#0x13c]
0002a6  dd1c              BLE      |L6.738|
                  |L6.680|
0002a8  f8d400d4          LDR      r0,[r4,#0xd4]
0002ac  f8d410d8          LDR      r1,[r4,#0xd8]
0002b0  4128              ASRS     r0,r0,r5
0002b2  fa41f905          ASR      r9,r1,r5
0002b6  f7fffffe          BL       IsOdd
0002ba  b920              CBNZ     r0,|L6.710|
0002bc  4648              MOV      r0,r9
0002be  f7fffffe          BL       IsOdd
0002c2  2800              CMP      r0,#0
0002c4  d00a              BEQ      |L6.732|
                  |L6.710|
0002c6  2048              MOVS     r0,#0x48
0002c8  e9cd8000          STRD     r8,r0,[sp,#0]
0002cc  a35d              ADR      r3,|L6.1092|
0002ce  a291              ADR      r2,|L6.1300|
0002d0  a16a              ADR      r1,|L6.1148|
0002d2  2005              MOVS     r0,#5
0002d4  f7fffffe          BL       _Anki_Log
0002d8  4620              MOV      r0,r4
0002da  e6f8              B        |L6.206|
                  |L6.732|
0002dc  1c6d              ADDS     r5,r5,#1
0002de  42b5              CMP      r5,r6
0002e0  dbe2              BLT      |L6.680|
                  |L6.738|
0002e2  2300              MOVS     r3,#0
0002e4  461a              MOV      r2,r3
0002e6  2101              MOVS     r1,#1
0002e8  a83f              ADD      r0,sp,#0xfc
0002ea  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0002ee  6803              LDR      r3,[r0,#0]
0002f0  4639              MOV      r1,r7
0002f2  a81d              ADD      r0,sp,#0x74
0002f4  9a63              LDR      r2,[sp,#0x18c]
0002f6  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0002fa  e9d01200          LDRD     r1,r2,[r0,#0]
0002fe  6883              LDR      r3,[r0,#8]
000300  60a3              STR      r3,[r4,#8]
000302  e9c41200          STRD     r1,r2,[r4,#0]
000306  e9d01203          LDRD     r1,r2,[r0,#0xc]
00030a  6943              LDR      r3,[r0,#0x14]
00030c  6163              STR      r3,[r4,#0x14]
00030e  e9c41203          STRD     r1,r2,[r4,#0xc]
000312  6981              LDR      r1,[r0,#0x18]
000314  61a1              STR      r1,[r4,#0x18]
000316  69c1              LDR      r1,[r0,#0x1c]
000318  61e1              STR      r1,[r4,#0x1c]
00031a  6a01              LDR      r1,[r0,#0x20]
00031c  6221              STR      r1,[r4,#0x20]
00031e  6a41              LDR      r1,[r0,#0x24]
000320  6261              STR      r1,[r4,#0x24]
000322  6a81              LDR      r1,[r0,#0x28]
000324  62a1              STR      r1,[r4,#0x28]
000326  6ac1              LDR      r1,[r0,#0x2c]
000328  62e1              STR      r1,[r4,#0x2c]
00032a  6b00              LDR      r0,[r0,#0x30]
00032c  6320              STR      r0,[r4,#0x30]
00032e  4620              MOV      r0,r4
000330  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
000334  2800              CMP      r0,#0
000336  d06f              BEQ      |L6.1048|
000338  4639              MOV      r1,r7
00033a  4620              MOV      r0,r4
00033c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
000340  f1040068          ADD      r0,r4,#0x68
000344  9002              STR      r0,[sp,#8]
000346  a803              ADD      r0,sp,#0xc
000348  9001              STR      r0,[sp,#4]
00034a  2300              MOVS     r3,#0
00034c  461a              MOV      r2,r3
00034e  2101              MOVS     r1,#1
000350  a83f              ADD      r0,sp,#0xfc
000352  9d63              LDR      r5,[sp,#0x18c]
000354  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000358  6800              LDR      r0,[r0,#0]
00035a  9049              STR      r0,[sp,#0x124]
00035c  9000              STR      r0,[sp,#0]
00035e  462b              MOV      r3,r5
000360  463a              MOV      r2,r7
000362  2101              MOVS     r1,#1
000364  a844              ADD      r0,sp,#0x110
000366  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00036a  e9d09102          LDRD     r9,r1,[r0,#8]
00036e  e9d05600          LDRD     r5,r6,[r0,#0]
000372  f8d0b010          LDR      r11,[r0,#0x10]
000376  2200              MOVS     r2,#0
000378  9100              STR      r1,[sp,#0]
00037a  4611              MOV      r1,r2
00037c  a84a              ADD      r0,sp,#0x128
00037e  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000382  2200              MOVS     r2,#0
000384  9050              STR      r0,[sp,#0x140]
000386  4611              MOV      r1,r2
000388  a84d              ADD      r0,sp,#0x134
00038a  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00038e  4601              MOV      r1,r0
000390  9850              LDR      r0,[sp,#0x140]
000392  2d00              CMP      r5,#0
000394  e9d02300          LDRD     r2,r3,[r0,#0]
000398  6880              LDR      r0,[r0,#8]
00039a  9203              STR      r2,[sp,#0xc]
00039c  e9cd3004          STRD     r3,r0,[sp,#0x10]
0003a0  e9d10200          LDRD     r0,r2,[r1,#0]
0003a4  6889              LDR      r1,[r1,#8]
0003a6  9108              STR      r1,[sp,#0x20]
0003a8  e9cd0206          STRD     r0,r2,[sp,#0x18]
0003ac  9900              LDR      r1,[sp,#0]
0003ae  f8cdb034          STR      r11,[sp,#0x34]
0003b2  e9cd910b          STRD     r9,r1,[sp,#0x2c]
0003b6  e9cd5609          STRD     r5,r6,[sp,#0x24]
0003ba  bfc8              IT       GT
0003bc  2e00              CMPGT    r6,#0
0003be  dd2d              BLE      |L6.1052|
0003c0  fb05f006          MUL      r0,r5,r6
0003c4  2800              CMP      r0,#0
0003c6  bf1c              ITT      NE
0003c8  2000              MOVNE    r0,#0
0003ca  fb00b009          MLANE    r0,r0,r9,r11
0003ce  d025              BEQ      |L6.1052|
                  |L6.976|
0003d0  900e              STR      r0,[sp,#0x38]
0003d2  2d00              CMP      r5,#0
0003d4  bfc8              IT       GT
0003d6  2e00              CMPGT    r6,#0
0003d8  dd21              BLE      |L6.1054|
0003da  fb05f006          MUL      r0,r5,r6
0003de  2800              CMP      r0,#0
0003e0  bf1c              ITT      NE
0003e2  2000              MOVNE    r0,#0
0003e4  fb00b009          MLANE    r0,r0,r9,r11
0003e8  d019              BEQ      |L6.1054|
                  |L6.1002|
0003ea  900f              STR      r0,[sp,#0x3c]
0003ec  2d00              CMP      r5,#0
0003ee  bfc8              IT       GT
0003f0  2e00              CMPGT    r6,#0
0003f2  dd15              BLE      |L6.1056|
0003f4  fb05f006          MUL      r0,r5,r6
0003f8  2800              CMP      r0,#0
0003fa  bf1c              ITT      NE
0003fc  2000              MOVNE    r0,#0
0003fe  fb00b009          MLANE    r0,r0,r9,r11
000402  d00d              BEQ      |L6.1056|
                  |L6.1028|
000404  900f              STR      r0,[sp,#0x3c]
000406  a849              ADD      r0,sp,#0x124
000408  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
00040c  b128              CBZ      r0,|L6.1050|
00040e  4639              MOV      r1,r7
000410  9801              LDR      r0,[sp,#4]
000412  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
000416  e0b4              B        |L6.1410|
                  |L6.1048|
000418  e09c              B        |L6.1364|
                  |L6.1050|
00041a  e0ae              B        |L6.1402|
                  |L6.1052|
00041c  e0a7              B        |L6.1390|
                  |L6.1054|
00041e  e0a8              B        |L6.1394|
                  |L6.1056|
000420  e0a9              B        |L6.1398|
000422  0000              DCW      0x0000
                  |L6.1060|
000424  00000000          DCFS     0x00000000 ; 0
                  |L6.1064|
000428  4c756361          DCB      "LucasKanadeTracker_Slow",0
00042c  734b616e
000430  61646554
000434  7261636b
000438  65725f53
00043c  6c6f7700
                  |L6.1088|
                          DCD      ||.constdata||
                  |L6.1092|
000444  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\lucasKanade_Slow.cpp",0
000448  6f726574
00044c  6563685c
000450  76697369
000454  6f6e5c72
000458  6f626f74
00045c  5c737263
000460  5c6c7563
000464  61734b61
000468  6e616465
00046c  5f536c6f
000470  772e6370
000474  7000    
000476  00                DCB      0
000477  00                DCB      0
                  |L6.1144|
                          DCD      ||.constdata||+0x514
                  |L6.1148|
00047c  4c756361          DCB      "LucasKanadeTracker_Slow::LucasKanadeTracker_Slow",0
000480  734b616e
000484  61646554
000488  7261636b
00048c  65725f53
000490  6c6f773a
000494  3a4c7563
000498  61734b61
00049c  6e616465
0004a0  54726163
0004a4  6b65725f
0004a8  536c6f77
0004ac  00      
0004ad  00                DCB      0
0004ae  00                DCB      0
0004af  00                DCB      0
                  |L6.1200|
0004b0  6e756d50          DCB      "numPyramidLevels must be greater than zero",0
0004b4  7972616d
0004b8  69644c65
0004bc  76656c73
0004c0  206d7573
0004c4  74206265
0004c8  20677265
0004cc  61746572
0004d0  20746861
0004d4  6e207a65
0004d8  726f00  
0004db  00                DCB      0
                  |L6.1244|
                          DCD      ||.constdata||+0x560
                  |L6.1248|
0004e0  72696467          DCB      "ridgeWeight must be greater or equal to zero",0
0004e4  65576569
0004e8  67687420
0004ec  6d757374
0004f0  20626520
0004f4  67726561
0004f8  74657220
0004fc  6f722065
000500  7175616c
000504  20746f20
000508  7a65726f
00050c  00      
00050d  00                DCB      0
00050e  00                DCB      0
00050f  00                DCB      0
                  |L6.1296|
                          DCD      ||.constdata||+0x5e8
                  |L6.1300|
000514  54656d70          DCB      "Template widths and height must divisible by 2^numPyram"
000518  6c617465
00051c  20776964
000520  74687320
000524  616e6420
000528  68656967
00052c  6874206d
000530  75737420
000534  64697669
000538  7369626c
00053c  65206279
000540  20325e6e
000544  756d5079
000548  72616d  
00054b  69644c65          DCB      "idLevels",0
00054f  76656c73
000553  00      
                  |L6.1364|
000554  204e              MOVS     r0,#0x4e
000556  f2af1314          ADR      r3,|L6.1092|
00055a  a2ca              ADR      r2,|L6.2180|
00055c  f2af01e4          ADR      r1,|L6.1148|
000560  e9cd8000          STRD     r8,r0,[sp,#0]
000564  2005              MOVS     r0,#5
000566  f7fffffe          BL       _Anki_Log
00056a  4620              MOV      r0,r4
00056c  e5af              B        |L6.206|
                  |L6.1390|
00056e  2000              MOVS     r0,#0
000570  e72e              B        |L6.976|
                  |L6.1394|
000572  2000              MOVS     r0,#0
000574  e739              B        |L6.1002|
                  |L6.1398|
000576  2000              MOVS     r0,#0
000578  e744              B        |L6.1028|
                  |L6.1402|
00057a  2100              MOVS     r1,#0
00057c  9801              LDR      r0,[sp,#4]
00057e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
                  |L6.1410|
000582  e9dd1002          LDRD     r1,r0,[sp,#8]
000586  e9dd2304          LDRD     r2,r3,[sp,#0x10]
00058a  608b              STR      r3,[r1,#8]
00058c  e9c10200          STRD     r0,r2,[r1,#0]
000590  e9dd0206          LDRD     r0,r2,[sp,#0x18]
000594  9b08              LDR      r3,[sp,#0x20]
000596  614b              STR      r3,[r1,#0x14]
000598  e9c10203          STRD     r0,r2,[r1,#0xc]
00059c  9a09              LDR      r2,[sp,#0x24]
00059e  618a              STR      r2,[r1,#0x18]
0005a0  9a0a              LDR      r2,[sp,#0x28]
0005a2  61ca              STR      r2,[r1,#0x1c]
0005a4  9a0b              LDR      r2,[sp,#0x2c]
0005a6  620a              STR      r2,[r1,#0x20]
0005a8  9a0c              LDR      r2,[sp,#0x30]
0005aa  624a              STR      r2,[r1,#0x24]
0005ac  9a0d              LDR      r2,[sp,#0x34]
0005ae  628a              STR      r2,[r1,#0x28]
0005b0  980e              LDR      r0,[sp,#0x38]
0005b2  62c8              STR      r0,[r1,#0x2c]
0005b4  980f              LDR      r0,[sp,#0x3c]
0005b6  6308              STR      r0,[r1,#0x30]
0005b8  6f62              LDR      r2,[r4,#0x74]
0005ba  f8d41084          LDR      r1,[r4,#0x84]
0005be  f1040068          ADD      r0,r4,#0x68
0005c2  428a              CMP      r2,r1
0005c4  dc7c              BGT      |L6.1728|
0005c6  6a82              LDR      r2,[r0,#0x28]
0005c8  b12a              CBZ      r2,|L6.1494|
0005ca  6980              LDR      r0,[r0,#0x18]
0005cc  2800              CMP      r0,#0
0005ce  bfa4              ITT      GE
0005d0  2900              CMPGE    r1,#0
0005d2  2001              MOVGE    r0,#1
0005d4  da00              BGE      |L6.1496|
                  |L6.1494|
0005d6  2000              MOVS     r0,#0
                  |L6.1496|
0005d8  2800              CMP      r0,#0
0005da  d071              BEQ      |L6.1728|
0005dc  4639              MOV      r1,r7
0005de  f1040068          ADD      r0,r4,#0x68
0005e2  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
0005e6  f1040034          ADD      r0,r4,#0x34
0005ea  9002              STR      r0,[sp,#8]
0005ec  a810              ADD      r0,sp,#0x40
0005ee  9001              STR      r0,[sp,#4]
0005f0  2300              MOVS     r3,#0
0005f2  461a              MOV      r2,r3
0005f4  2101              MOVS     r1,#1
0005f6  a83f              ADD      r0,sp,#0xfc
0005f8  9d63              LDR      r5,[sp,#0x18c]
0005fa  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0005fe  6800              LDR      r0,[r0,#0]
000600  9049              STR      r0,[sp,#0x124]
000602  9000              STR      r0,[sp,#0]
000604  462b              MOV      r3,r5
000606  463a              MOV      r2,r7
000608  2101              MOVS     r1,#1
00060a  a844              ADD      r0,sp,#0x110
00060c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000610  e9d09102          LDRD     r9,r1,[r0,#8]
000614  e9d05600          LDRD     r5,r6,[r0,#0]
000618  f8d0b010          LDR      r11,[r0,#0x10]
00061c  2200              MOVS     r2,#0
00061e  9100              STR      r1,[sp,#0]
000620  4611              MOV      r1,r2
000622  a84a              ADD      r0,sp,#0x128
000624  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000628  2200              MOVS     r2,#0
00062a  9050              STR      r0,[sp,#0x140]
00062c  4611              MOV      r1,r2
00062e  a84d              ADD      r0,sp,#0x134
000630  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000634  4601              MOV      r1,r0
000636  9850              LDR      r0,[sp,#0x140]
000638  2d00              CMP      r5,#0
00063a  e9d02300          LDRD     r2,r3,[r0,#0]
00063e  6880              LDR      r0,[r0,#8]
000640  9210              STR      r2,[sp,#0x40]
000642  e9cd3011          STRD     r3,r0,[sp,#0x44]
000646  e9d10200          LDRD     r0,r2,[r1,#0]
00064a  6889              LDR      r1,[r1,#8]
00064c  9115              STR      r1,[sp,#0x54]
00064e  e9cd0213          STRD     r0,r2,[sp,#0x4c]
000652  9900              LDR      r1,[sp,#0]
000654  e9cd5616          STRD     r5,r6,[sp,#0x58]
000658  e9cd9118          STRD     r9,r1,[sp,#0x60]
00065c  f8cdb068          STR      r11,[sp,#0x68]
000660  bfc8              IT       GT
000662  2e00              CMPGT    r6,#0
000664  dd39              BLE      |L6.1754|
000666  fb05f006          MUL      r0,r5,r6
00066a  2800              CMP      r0,#0
00066c  bf1c              ITT      NE
00066e  2000              MOVNE    r0,#0
000670  fb00b009          MLANE    r0,r0,r9,r11
000674  d031              BEQ      |L6.1754|
                  |L6.1654|
000676  901b              STR      r0,[sp,#0x6c]
000678  2d00              CMP      r5,#0
00067a  bfc8              IT       GT
00067c  2e00              CMPGT    r6,#0
00067e  dd2e              BLE      |L6.1758|
000680  fb05f006          MUL      r0,r5,r6
000684  2800              CMP      r0,#0
000686  bf1c              ITT      NE
000688  2000              MOVNE    r0,#0
00068a  fb00b009          MLANE    r0,r0,r9,r11
00068e  d026              BEQ      |L6.1758|
                  |L6.1680|
000690  901c              STR      r0,[sp,#0x70]
000692  2d00              CMP      r5,#0
000694  bfc8              IT       GT
000696  2e00              CMPGT    r6,#0
000698  dd23              BLE      |L6.1762|
00069a  fb05f006          MUL      r0,r5,r6
00069e  2800              CMP      r0,#0
0006a0  bf1c              ITT      NE
0006a2  2000              MOVNE    r0,#0
0006a4  fb00b009          MLANE    r0,r0,r9,r11
0006a8  d01b              BEQ      |L6.1762|
                  |L6.1706|
0006aa  901c              STR      r0,[sp,#0x70]
0006ac  a849              ADD      r0,sp,#0x124
0006ae  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0006b2  b1c0              CBZ      r0,|L6.1766|
0006b4  4639              MOV      r1,r7
0006b6  9801              LDR      r0,[sp,#4]
0006b8  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
0006bc  e017              B        |L6.1774|
0006be  e7ff              B        |L6.1728|
                  |L6.1728|
0006c0  2055              MOVS     r0,#0x55
0006c2  f2af2380          ADR      r3,|L6.1092|
0006c6  a276              ADR      r2,|L6.2208|
0006c8  f2af2150          ADR      r1,|L6.1148|
0006cc  e9cd8000          STRD     r8,r0,[sp,#0]
0006d0  2005              MOVS     r0,#5
0006d2  f7fffffe          BL       _Anki_Log
0006d6  4620              MOV      r0,r4
0006d8  e4f9              B        |L6.206|
                  |L6.1754|
0006da  2000              MOVS     r0,#0
0006dc  e7cb              B        |L6.1654|
                  |L6.1758|
0006de  2000              MOVS     r0,#0
0006e0  e7d6              B        |L6.1680|
                  |L6.1762|
0006e2  2000              MOVS     r0,#0
0006e4  e7e1              B        |L6.1706|
                  |L6.1766|
0006e6  2100              MOVS     r1,#0
0006e8  9801              LDR      r0,[sp,#4]
0006ea  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
                  |L6.1774|
0006ee  e9dd0210          LDRD     r0,r2,[sp,#0x40]
0006f2  9902              LDR      r1,[sp,#8]
0006f4  9b12              LDR      r3,[sp,#0x48]
0006f6  608b              STR      r3,[r1,#8]
0006f8  e9c10200          STRD     r0,r2,[r1,#0]
0006fc  e9dd0213          LDRD     r0,r2,[sp,#0x4c]
000700  9b15              LDR      r3,[sp,#0x54]
000702  614b              STR      r3,[r1,#0x14]
000704  e9c10203          STRD     r0,r2,[r1,#0xc]
000708  9a16              LDR      r2,[sp,#0x58]
00070a  618a              STR      r2,[r1,#0x18]
00070c  9a17              LDR      r2,[sp,#0x5c]
00070e  61ca              STR      r2,[r1,#0x1c]
000710  9a18              LDR      r2,[sp,#0x60]
000712  620a              STR      r2,[r1,#0x20]
000714  9a19              LDR      r2,[sp,#0x64]
000716  624a              STR      r2,[r1,#0x24]
000718  9a1a              LDR      r2,[sp,#0x68]
00071a  628a              STR      r2,[r1,#0x28]
00071c  981b              LDR      r0,[sp,#0x6c]
00071e  62c8              STR      r0,[r1,#0x2c]
000720  981c              LDR      r0,[sp,#0x70]
000722  6308              STR      r0,[r1,#0x30]
000724  6c22              LDR      r2,[r4,#0x40]
000726  6d21              LDR      r1,[r4,#0x50]
000728  f1040034          ADD      r0,r4,#0x34
00072c  428a              CMP      r2,r1
00072e  dc7d              BGT      |L6.2092|
000730  6a82              LDR      r2,[r0,#0x28]
000732  b12a              CBZ      r2,|L6.1856|
000734  6980              LDR      r0,[r0,#0x18]
000736  2800              CMP      r0,#0
000738  bfa4              ITT      GE
00073a  2900              CMPGE    r1,#0
00073c  2001              MOVGE    r0,#1
00073e  da00              BGE      |L6.1858|
                  |L6.1856|
000740  2000              MOVS     r0,#0
                  |L6.1858|
000742  2800              CMP      r0,#0
000744  d072              BEQ      |L6.2092|
000746  4639              MOV      r1,r7
000748  f1040034          ADD      r0,r4,#0x34
00074c  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
000750  2300              MOVS     r3,#0
000752  f104069c          ADD      r6,r4,#0x9c
000756  461a              MOV      r2,r3
000758  2101              MOVS     r1,#1
00075a  a83f              ADD      r0,sp,#0xfc
00075c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000760  6803              LDR      r3,[r0,#0]
000762  4639              MOV      r1,r7
000764  a81d              ADD      r0,sp,#0x74
000766  9a63              LDR      r2,[sp,#0x18c]
000768  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00076c  e9d01200          LDRD     r1,r2,[r0,#0]
000770  6883              LDR      r3,[r0,#8]
000772  60b3              STR      r3,[r6,#8]
000774  e9c61200          STRD     r1,r2,[r6,#0]
000778  e9d01203          LDRD     r1,r2,[r0,#0xc]
00077c  6943              LDR      r3,[r0,#0x14]
00077e  6173              STR      r3,[r6,#0x14]
000780  e9c61203          STRD     r1,r2,[r6,#0xc]
000784  6981              LDR      r1,[r0,#0x18]
000786  61b1              STR      r1,[r6,#0x18]
000788  69c1              LDR      r1,[r0,#0x1c]
00078a  61f1              STR      r1,[r6,#0x1c]
00078c  6a01              LDR      r1,[r0,#0x20]
00078e  6231              STR      r1,[r6,#0x20]
000790  6a41              LDR      r1,[r0,#0x24]
000792  6271              STR      r1,[r6,#0x24]
000794  6a81              LDR      r1,[r0,#0x28]
000796  62b1              STR      r1,[r6,#0x28]
000798  6ac1              LDR      r1,[r0,#0x2c]
00079a  62f1              STR      r1,[r6,#0x2c]
00079c  6b00              LDR      r0,[r0,#0x30]
00079e  6330              STR      r0,[r6,#0x30]
0007a0  4630              MOV      r0,r6
0007a2  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
0007a6  2800              CMP      r0,#0
0007a8  d060              BEQ      |L6.2156|
0007aa  4639              MOV      r1,r7
0007ac  4630              MOV      r0,r6
0007ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
0007b2  f10405e4          ADD      r5,r4,#0xe4
0007b6  4651              MOV      r1,r10
0007b8  a82e              ADD      r0,sp,#0xb8
0007ba  9b63              LDR      r3,[sp,#0x18c]
0007bc  9a57              LDR      r2,[sp,#0x15c]
0007be  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1ENS1_13TransformTypeERKNS0_13QuadrilateralIfEERNS0_11MemoryStackE ; Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32(Anki::Embedded::Transformations::TransformType, const Anki::Embedded::Quadrilateral<float>&, Anki::Embedded::MemoryStack&)
0007c2  7801              LDRB     r1,[r0,#0]
0007c4  7029              STRB     r1,[r5,#0]
0007c6  8841              LDRH     r1,[r0,#2]
0007c8  8069              STRH     r1,[r5,#2]
0007ca  6842              LDR      r2,[r0,#4]
0007cc  606a              STR      r2,[r5,#4]
0007ce  6882              LDR      r2,[r0,#8]
0007d0  60aa              STR      r2,[r5,#8]
0007d2  68c2              LDR      r2,[r0,#0xc]
0007d4  60ea              STR      r2,[r5,#0xc]
0007d6  6902              LDR      r2,[r0,#0x10]
0007d8  612a              STR      r2,[r5,#0x10]
0007da  6942              LDR      r2,[r0,#0x14]
0007dc  f1050618          ADD      r6,r5,#0x18
0007e0  f1000c18          ADD      r12,r0,#0x18
0007e4  2100              MOVS     r1,#0
0007e6  616a              STR      r2,[r5,#0x14]
                  |L6.2024|
0007e8  eb0c02c1          ADD      r2,r12,r1,LSL #3
0007ec  eb0603c1          ADD      r3,r6,r1,LSL #3
0007f0  ed920a00          VLDR     s0,[r2,#0]
0007f4  1c49              ADDS     r1,r1,#1
0007f6  ed830a00          VSTR     s0,[r3,#0]
0007fa  ed920a01          VLDR     s0,[r2,#4]
0007fe  2904              CMP      r1,#4
000800  ed830a01          VSTR     s0,[r3,#4]
000804  dbf0              BLT      |L6.2024|
000806  f8901038          LDRB     r1,[r0,#0x38]
00080a  f8851038          STRB     r1,[r5,#0x38]
00080e  ed900a0f          VLDR     s0,[r0,#0x3c]
000812  ed850a0f          VSTR     s0,[r5,#0x3c]
000816  ed900a10          VLDR     s0,[r0,#0x40]
00081a  2001              MOVS     r0,#1
00081c  ed850a10          VSTR     s0,[r5,#0x40]
000820  f8840140          STRB     r0,[r4,#0x140]
000824  a028              ADR      r0,|L6.2248|
000826  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00082a  e000              B        |L6.2094|
                  |L6.2092|
00082c  e011              B        |L6.2130|
                  |L6.2094|
00082e  4620              MOV      r0,r4
000830  9a63              LDR      r2,[sp,#0x18c]
000832  9956              LDR      r1,[sp,#0x158]
000834  f7fffffe          BL       _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18InitializeTemplateERKNS0_5ArrayIhEERNS0_11MemoryStackE ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::InitializeTemplate(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::MemoryStack&)
000838  2800              CMP      r0,#0
00083a  bf1c              ITT      NE
00083c  2000              MOVNE    r0,#0
00083e  f8840140          STRBNE   r0,[r4,#0x140]
000842  a021              ADR      r0,|L6.2248|
000844  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000848  f2af4024          ADR      r0,|L6.1064|
00084c  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000850  e00a              B        |L6.2152|
                  |L6.2130|
000852  205c              MOVS     r0,#0x5c
000854  f2af4314          ADR      r3,|L6.1092|
000858  a220              ADR      r2,|L6.2268|
00085a  f2af31e0          ADR      r1,|L6.1148|
00085e  e9cd8000          STRD     r8,r0,[sp,#0]
000862  2005              MOVS     r0,#5
000864  f7fffffe          BL       _Anki_Log
                  |L6.2152|
000868  4620              MOV      r0,r4
00086a  e430              B        |L6.206|
                  |L6.2156|
00086c  2063              MOVS     r0,#0x63
00086e  f2af432c          ADR      r3,|L6.1092|
000872  a224              ADR      r2,|L6.2308|
000874  f2af31fc          ADR      r1,|L6.1148|
000878  e9cd8000          STRD     r8,r0,[sp,#0]
00087c  2005              MOVS     r0,#5
00087e  f7fffffe          BL       _Anki_Log
000882  e7f1              B        |L6.2152|
                          ENDP

                  |L6.2180|
000884  436f756c          DCB      "Could not allocate A_full",0
000888  64206e6f
00088c  7420616c
000890  6c6f6361
000894  74652041
000898  5f66756c
00089c  6c00    
00089e  00                DCB      0
00089f  00                DCB      0
                  |L6.2208|
0008a0  436f756c          DCB      "Could not allocate templateCoordinates",0
0008a4  64206e6f
0008a8  7420616c
0008ac  6c6f6361
0008b0  74652074
0008b4  656d706c
0008b8  61746543
0008bc  6f6f7264
0008c0  696e6174
0008c4  657300  
0008c7  00                DCB      0
                  |L6.2248|
0008c8  496e6974          DCB      "InitializeTemplate",0
0008cc  69616c69
0008d0  7a655465
0008d4  6d706c61
0008d8  746500  
0008db  00                DCB      0
                  |L6.2268|
0008dc  436f756c          DCB      "Could not allocate templateImagePyramid",0
0008e0  64206e6f
0008e4  7420616c
0008e8  6c6f6361
0008ec  74652074
0008f0  656d706c
0008f4  61746549
0008f8  6d616765
0008fc  50797261
000900  6d696400
                  |L6.2308|
000904  436f756c          DCB      "Could not allocate templateWeights",0
000908  64206e6f
00090c  7420616c
000910  6c6f6361
000914  74652074
000918  656d706c
00091c  61746557
000920  65696768
000924  747300  
000927  00                DCB      0

                          AREA ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC2Ev                  ; Alternate entry point ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::LucasKanadeTracker_Slow__sub_object()
                  _ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC1Ev PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::LucasKanadeTracker_Slow()
;;;31         {
;;;32           LucasKanadeTracker_Slow::LucasKanadeTracker_Slow()
;;;33             : isValid(false), isInitialized(false)
;;;34           {
;;;35           }
;;;36     
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList()
000006  3034              ADDS     r0,r0,#0x34
000008  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::FixedLengthList()
00000c  3034              ADDS     r0,r0,#0x34
00000e  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::FixedLengthList()
000012  3034              ADDS     r0,r0,#0x34
000014  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList()
000018  3048              ADDS     r0,r0,#0x48
00001a  f7fffffe          BL       _ZN4Anki8Embedded15Transformations24PlanarTransformation_f32C1Ev ; Anki::Embedded::Transformations::PlanarTransformation_f32::PlanarTransformation_f32()
00001e  38e4              SUBS     r0,r0,#0xe4
000020  ed9f0a07          VLDR     s0,|L7.64|
000024  2100              MOVS     r1,#0
000026  ed800a4c          VSTR     s0,[r0,#0x130]
00002a  ed800a4d          VSTR     s0,[r0,#0x134]
00002e  ed800a4e          VSTR     s0,[r0,#0x138]
000032  ed800a4f          VSTR     s0,[r0,#0x13c]
000036  f8801140          STRB     r1,[r0,#0x140]
00003a  f8801141          STRB     r1,[r0,#0x141]
00003e  bd10              POP      {r4,pc}
                          ENDP

                  |L7.64|
000040  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18get_transformationEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18get_transformationEv PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::get_transformation() const
;;;698    
;;;699          Transformations::PlanarTransformation_f32 LucasKanadeTracker_Slow::get_transformation() const
000000  b570              PUSH     {r4-r6,lr}
;;;700          {
;;;701            return transformation;
000002  f10104e4          ADD      r4,r1,#0xe4
000006  f89110e4          LDRB     r1,[r1,#0xe4]
00000a  7001              STRB     r1,[r0,#0]
00000c  8861              LDRH     r1,[r4,#2]
00000e  8041              STRH     r1,[r0,#2]
000010  1d22              ADDS     r2,r4,#4
000012  1d06              ADDS     r6,r0,#4
000014  e892102e          LDM      r2,{r1-r3,r5,r12}
000018  e8a6102e          STM      r6!,{r1-r3,r5,r12}
00001c  3018              ADDS     r0,r0,#0x18
00001e  f1040518          ADD      r5,r4,#0x18
000022  2304              MOVS     r3,#4
000024  2208              MOVS     r2,#8
000026  4910              LDR      r1,|L8.104|
000028  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00002c  2200              MOVS     r2,#0
                  |L8.46|
00002e  eb0501c2          ADD      r1,r5,r2,LSL #3
000032  eb0003c2          ADD      r3,r0,r2,LSL #3
000036  ed910a00          VLDR     s0,[r1,#0]
00003a  1c52              ADDS     r2,r2,#1
00003c  ed830a00          VSTR     s0,[r3,#0]
000040  ed910a01          VLDR     s0,[r1,#4]
000044  2a04              CMP      r2,#4
000046  ed830a01          VSTR     s0,[r3,#4]
00004a  dbf0              BLT      |L8.46|
00004c  f8942038          LDRB     r2,[r4,#0x38]
000050  f8802020          STRB     r2,[r0,#0x20]
000054  ed940a0f          VLDR     s0,[r4,#0x3c]
000058  ed800a09          VSTR     s0,[r0,#0x24]
00005c  ed940a10          VLDR     s0,[r4,#0x40]
000060  ed800a0a          VSTR     s0,[r0,#0x28]
;;;702          }
000064  bd70              POP      {r4-r6,pc}
;;;703        } // namespace TemplateTracker
                          ENDP

000066  0000              DCW      0x0000
                  |L8.104|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()

                          AREA ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow7IsValidEv||, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow7IsValidEv PROC ; Anki::Embedded::TemplateTracker::LucasKanadeTracker_Slow::IsValid() const
;;;655    
;;;656          bool LucasKanadeTracker_Slow::IsValid() const
000000  b570              PUSH     {r4-r6,lr}
;;;657          {
000002  4604              MOV      r4,r0
;;;658            if(!this->isValid)
000004  f8900140          LDRB     r0,[r0,#0x140]
000008  2800              CMP      r0,#0                 ;657
;;;659              return false;
;;;660    
;;;661            if(!A_full.IsValid())
;;;662              return false;
;;;663    
;;;664            if(!templateImagePyramid.IsValid())
;;;665              return false;
;;;666    
;;;667            if(!templateCoordinates.IsValid())
;;;668              return false;
;;;669    
;;;670            if(!templateWeights.IsValid())
;;;671              return false;
;;;672    
;;;673            if(this->isInitialized) {
;;;674              for(s32 i=0; i<numPyramidLevels; i++) {
;;;675                if(!A_full[i].IsValid())
;;;676                  return false;
;;;677    
;;;678                if(!templateImagePyramid[i].IsValid())
;;;679                  return false;
;;;680    
;;;681                if(!templateWeights[i].IsValid())
;;;682                  return false;
;;;683              }
;;;684            }
;;;685    
;;;686            return true;
;;;687          }
00000a  bf08              IT       EQ
00000c  bd70              POPEQ    {r4-r6,pc}
00000e  4620              MOV      r0,r4                 ;661
000010  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
000014  2800              CMP      r0,#0                 ;661
000016  bf08              IT       EQ
000018  bd70              POPEQ    {r4-r6,pc}
00001a  f1040034          ADD      r0,r4,#0x34           ;664
00001e  6c22              LDR      r2,[r4,#0x40]         ;664
000020  6d21              LDR      r1,[r4,#0x50]         ;664
000022  428a              CMP      r2,r1                 ;664
000024  dc50              BGT      |L9.200|
000026  6a82              LDR      r2,[r0,#0x28]         ;664
000028  b12a              CBZ      r2,|L9.54|
00002a  6980              LDR      r0,[r0,#0x18]         ;664
00002c  2800              CMP      r0,#0                 ;664
00002e  bfa4              ITT      GE                    ;664
000030  2900              CMPGE    r1,#0                 ;664
000032  2001              MOVGE    r0,#1                 ;664
000034  da00              BGE      |L9.56|
                  |L9.54|
000036  2000              MOVS     r0,#0                 ;664
                  |L9.56|
000038  2800              CMP      r0,#0                 ;664
00003a  d045              BEQ      |L9.200|
00003c  6f62              LDR      r2,[r4,#0x74]         ;664
00003e  f8d41084          LDR      r1,[r4,#0x84]         ;664
000042  f1040068          ADD      r0,r4,#0x68           ;667
000046  428a              CMP      r2,r1                 ;667
000048  dc3e              BGT      |L9.200|
00004a  6a82              LDR      r2,[r0,#0x28]         ;667
00004c  b12a              CBZ      r2,|L9.90|
00004e  6980              LDR      r0,[r0,#0x18]         ;667
000050  2800              CMP      r0,#0                 ;667
000052  bfa4              ITT      GE                    ;667
000054  2900              CMPGE    r1,#0                 ;667
000056  2001              MOVGE    r0,#1                 ;667
000058  da00              BGE      |L9.92|
                  |L9.90|
00005a  2000              MOVS     r0,#0                 ;667
                  |L9.92|
00005c  b398              CBZ      r0,|L9.198|
00005e  f104009c          ADD      r0,r4,#0x9c           ;670
000062  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
000066  2800              CMP      r0,#0                 ;670
000068  bf08              IT       EQ
00006a  bd70              POPEQ    {r4-r6,pc}
00006c  f8940141          LDRB     r0,[r4,#0x141]        ;673
000070  b338              CBZ      r0,|L9.194|
000072  f8d400d0          LDR      r0,[r4,#0xd0]         ;674
000076  2500              MOVS     r5,#0                 ;674
000078  2800              CMP      r0,#0                 ;674
00007a  dd22              BLE      |L9.194|
                  |L9.124|
00007c  6b20              LDR      r0,[r4,#0x30]         ;674
00007e  eb050685          ADD      r6,r5,r5,LSL #2       ;674
000082  eb000086          ADD      r0,r0,r6,LSL #2       ;674
000086  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00008a  2800              CMP      r0,#0                 ;675
00008c  bf08              IT       EQ
00008e  bd70              POPEQ    {r4-r6,pc}
000090  6e60              LDR      r0,[r4,#0x64]
000092  eb000086          ADD      r0,r0,r6,LSL #2
000096  6901              LDR      r1,[r0,#0x10]
000098  b1a9              CBZ      r1,|L9.198|
00009a  6801              LDR      r1,[r0,#0]
00009c  2900              CMP      r1,#0
00009e  bfa4              ITT      GE
0000a0  6840              LDRGE    r0,[r0,#4]
0000a2  2800              CMPGE    r0,#0
0000a4  db10              BLT      |L9.200|
0000a6  f8d400cc          LDR      r0,[r4,#0xcc]
0000aa  eb000086          ADD      r0,r0,r6,LSL #2
0000ae  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0000b2  2800              CMP      r0,#0                 ;681
0000b4  bf08              IT       EQ
0000b6  bd70              POPEQ    {r4-r6,pc}
0000b8  1c6d              ADDS     r5,r5,#1              ;674
0000ba  f8d400d0          LDR      r0,[r4,#0xd0]         ;674
0000be  42a8              CMP      r0,r5                 ;674
0000c0  dcdc              BGT      |L9.124|
                  |L9.194|
0000c2  2001              MOVS     r0,#1                 ;686
0000c4  bd70              POP      {r4-r6,pc}
                  |L9.198|
0000c6  e7ff              B        |L9.200|
                  |L9.200|
0000c8  2000              MOVS     r0,#0                 ;679
0000ca  bd70              POP      {r4-r6,pc}
;;;688    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18InitializeTemplateERKNS0_5ArrayIhEERNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18InitializeTemplateERKNS0_5ArrayIhEERNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEfRNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_SlowC1ERKNS0_5ArrayIhEERKNS0_13QuadrilateralIfEEfiNS0_15Transformations13TransformTypeEfRNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18get_transformationEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18get_transformationEv||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeEbRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow22IterativelyRefineTrackERKNS0_5ArrayIhEEiifNS0_15Transformations13TransformTypeEbRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow11UpdateTrackERKNS0_5ArrayIhEEifbRbNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow11UpdateTrackERKNS0_5ArrayIhEEifbRbNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow7IsValidEv||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow20UpdateTransformationERKNS0_5ArrayIfEEfNS0_11MemoryStackENS0_15Transformations13TransformTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow20UpdateTransformationERKNS0_5ArrayIfEEfNS0_11MemoryStackENS0_15Transformations13TransformTypeE||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18set_transformationERKNS0_15Transformations24PlanarTransformation_f32E||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15TemplateTracker23LucasKanadeTracker_Slow18set_transformationERKNS0_15Transformations24PlanarTransformation_f32E||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  54656d70          DCB      0x54,0x65,0x6d,0x70
000014  6c617465          DCB      0x6c,0x61,0x74,0x65
000018  54726163          DCB      0x54,0x72,0x61,0x63
00001c  6b65723a          DCB      0x6b,0x65,0x72,0x3a
000020  3a4c7563          DCB      0x3a,0x4c,0x75,0x63
000024  61734b61          DCB      0x61,0x73,0x4b,0x61
000028  6e616465          DCB      0x6e,0x61,0x64,0x65
00002c  54726163          DCB      0x54,0x72,0x61,0x63
000030  6b65725f          DCB      0x6b,0x65,0x72,0x5f
000034  536c6f77          DCB      0x53,0x6c,0x6f,0x77
000038  3a3a4c75          DCB      0x3a,0x3a,0x4c,0x75
00003c  6361734b          DCB      0x63,0x61,0x73,0x4b
000040  616e6164          DCB      0x61,0x6e,0x61,0x64
000044  65547261          DCB      0x65,0x54,0x72,0x61
000048  636b6572          DCB      0x63,0x6b,0x65,0x72
00004c  5f536c6f          DCB      0x5f,0x53,0x6c,0x6f
000050  7728636f          DCB      0x77,0x28,0x63,0x6f
000054  6e737420          DCB      0x6e,0x73,0x74,0x20
000058  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00005c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000060  62656464          DCB      0x62,0x65,0x64,0x64
000064  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000068  41727261          DCB      0x41,0x72,0x72,0x61
00006c  793c756e          DCB      0x79,0x3c,0x75,0x6e
000070  7369676e          DCB      0x73,0x69,0x67,0x6e
000074  65642063          DCB      0x65,0x64,0x20,0x63
000078  6861723e          DCB      0x68,0x61,0x72,0x3e
00007c  20262c20          DCB      0x20,0x26,0x2c,0x20
000080  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000084  7420416e          DCB      0x74,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5175          DCB      0x3a,0x3a,0x51,0x75
000098  61647269          DCB      0x61,0x64,0x72,0x69
00009c  6c617465          DCB      0x6c,0x61,0x74,0x65
0000a0  72616c3c          DCB      0x72,0x61,0x6c,0x3c
0000a4  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a8  743e2026          DCB      0x74,0x3e,0x20,0x26
0000ac  2c20666c          DCB      0x2c,0x20,0x66,0x6c
0000b0  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000b4  20736967          DCB      0x20,0x73,0x69,0x67
0000b8  6e656420          DCB      0x6e,0x65,0x64,0x20
0000bc  696e742c          DCB      0x69,0x6e,0x74,0x2c
0000c0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000c4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000c8  6d626564          DCB      0x6d,0x62,0x65,0x64
0000cc  6465643a          DCB      0x64,0x65,0x64,0x3a
0000d0  3a547261          DCB      0x3a,0x54,0x72,0x61
0000d4  6e73666f          DCB      0x6e,0x73,0x66,0x6f
0000d8  726d6174          DCB      0x72,0x6d,0x61,0x74
0000dc  696f6e73          DCB      0x69,0x6f,0x6e,0x73
0000e0  3a3a5472          DCB      0x3a,0x3a,0x54,0x72
0000e4  616e7366          DCB      0x61,0x6e,0x73,0x66
0000e8  6f726d54          DCB      0x6f,0x72,0x6d,0x54
0000ec  7970652c          DCB      0x79,0x70,0x65,0x2c
0000f0  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0000f4  61742c20          DCB      0x61,0x74,0x2c,0x20
0000f8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000fc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000100  62656464          DCB      0x62,0x65,0x64,0x64
000104  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000108  4d656d6f          DCB      0x4d,0x65,0x6d,0x6f
00010c  72795374          DCB      0x72,0x79,0x53,0x74
000110  61636b20          DCB      0x61,0x63,0x6b,0x20
000114  262900            DCB      0x26,0x29,0x00
                  |symbol_number.239|
000117  41                DCB      0x41
000118  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00011c  3a526573          DCB      0x3a,0x52,0x65,0x73
000120  756c7420          DCB      0x75,0x6c,0x74,0x20
000124  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000128  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00012c  62656464          DCB      0x62,0x65,0x64,0x64
000130  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000134  54656d70          DCB      0x54,0x65,0x6d,0x70
000138  6c617465          DCB      0x6c,0x61,0x74,0x65
00013c  54726163          DCB      0x54,0x72,0x61,0x63
000140  6b65723a          DCB      0x6b,0x65,0x72,0x3a
000144  3a4c7563          DCB      0x3a,0x4c,0x75,0x63
000148  61734b61          DCB      0x61,0x73,0x4b,0x61
00014c  6e616465          DCB      0x6e,0x61,0x64,0x65
000150  54726163          DCB      0x54,0x72,0x61,0x63
000154  6b65725f          DCB      0x6b,0x65,0x72,0x5f
000158  536c6f77          DCB      0x53,0x6c,0x6f,0x77
00015c  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
000160  69746961          DCB      0x69,0x74,0x69,0x61
000164  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000168  54656d70          DCB      0x54,0x65,0x6d,0x70
00016c  6c617465          DCB      0x6c,0x61,0x74,0x65
000170  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000174  73742041          DCB      0x73,0x74,0x20,0x41
000178  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00017c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000180  65646465          DCB      0x65,0x64,0x64,0x65
000184  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000188  72726179          DCB      0x72,0x72,0x61,0x79
00018c  3c756e73          DCB      0x3c,0x75,0x6e,0x73
000190  69676e65          DCB      0x69,0x67,0x6e,0x65
000194  64206368          DCB      0x64,0x20,0x63,0x68
000198  61723e20          DCB      0x61,0x72,0x3e,0x20
00019c  262c2041          DCB      0x26,0x2c,0x20,0x41
0001a0  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0001a4  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0001a8  65646465          DCB      0x65,0x64,0x64,0x65
0001ac  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
0001b0  656d6f72          DCB      0x65,0x6d,0x6f,0x72
0001b4  79537461          DCB      0x79,0x53,0x74,0x61
0001b8  636b2026          DCB      0x63,0x6b,0x20,0x26
0001bc  2900              DCB      0x29,0x00
                  |symbol_number.240|
0001be  416e              DCB      0x41,0x6e
0001c0  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0001c4  52657375          DCB      0x52,0x65,0x73,0x75
0001c8  6c742041          DCB      0x6c,0x74,0x20,0x41
0001cc  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0001d0  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0001d4  65646465          DCB      0x65,0x64,0x64,0x65
0001d8  643a3a54          DCB      0x64,0x3a,0x3a,0x54
0001dc  656d706c          DCB      0x65,0x6d,0x70,0x6c
0001e0  61746554          DCB      0x61,0x74,0x65,0x54
0001e4  7261636b          DCB      0x72,0x61,0x63,0x6b
0001e8  65723a3a          DCB      0x65,0x72,0x3a,0x3a
0001ec  4c756361          DCB      0x4c,0x75,0x63,0x61
0001f0  734b616e          DCB      0x73,0x4b,0x61,0x6e
0001f4  61646554          DCB      0x61,0x64,0x65,0x54
0001f8  7261636b          DCB      0x72,0x61,0x63,0x6b
0001fc  65725f53          DCB      0x65,0x72,0x5f,0x53
000200  6c6f773a          DCB      0x6c,0x6f,0x77,0x3a
000204  3a497465          DCB      0x3a,0x49,0x74,0x65
000208  72617469          DCB      0x72,0x61,0x74,0x69
00020c  76656c79          DCB      0x76,0x65,0x6c,0x79
000210  52656669          DCB      0x52,0x65,0x66,0x69
000214  6e655472          DCB      0x6e,0x65,0x54,0x72
000218  61636b28          DCB      0x61,0x63,0x6b,0x28
00021c  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000220  7420416e          DCB      0x74,0x20,0x41,0x6e
000224  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000228  456d6265          DCB      0x45,0x6d,0x62,0x65
00022c  64646564          DCB      0x64,0x64,0x65,0x64
000230  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000234  7261793c          DCB      0x72,0x61,0x79,0x3c
000238  756e7369          DCB      0x75,0x6e,0x73,0x69
00023c  676e6564          DCB      0x67,0x6e,0x65,0x64
000240  20636861          DCB      0x20,0x63,0x68,0x61
000244  723e2026          DCB      0x72,0x3e,0x20,0x26
000248  2c207369          DCB      0x2c,0x20,0x73,0x69
00024c  676e6564          DCB      0x67,0x6e,0x65,0x64
000250  20696e74          DCB      0x20,0x69,0x6e,0x74
000254  2c207369          DCB      0x2c,0x20,0x73,0x69
000258  676e6564          DCB      0x67,0x6e,0x65,0x64
00025c  20696e74          DCB      0x20,0x69,0x6e,0x74
000260  2c20666c          DCB      0x2c,0x20,0x66,0x6c
000264  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000268  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00026c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000270  6d626564          DCB      0x6d,0x62,0x65,0x64
000274  6465643a          DCB      0x64,0x65,0x64,0x3a
000278  3a547261          DCB      0x3a,0x54,0x72,0x61
00027c  6e73666f          DCB      0x6e,0x73,0x66,0x6f
000280  726d6174          DCB      0x72,0x6d,0x61,0x74
000284  696f6e73          DCB      0x69,0x6f,0x6e,0x73
000288  3a3a5472          DCB      0x3a,0x3a,0x54,0x72
00028c  616e7366          DCB      0x61,0x6e,0x73,0x66
000290  6f726d54          DCB      0x6f,0x72,0x6d,0x54
000294  7970652c          DCB      0x79,0x70,0x65,0x2c
000298  20626f6f          DCB      0x20,0x62,0x6f,0x6f
00029c  6c2c2062          DCB      0x6c,0x2c,0x20,0x62
0002a0  6f6f6c20          DCB      0x6f,0x6f,0x6c,0x20
0002a4  262c2041          DCB      0x26,0x2c,0x20,0x41
0002a8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0002ac  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0002b0  65646465          DCB      0x65,0x64,0x64,0x65
0002b4  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
0002b8  656d6f72          DCB      0x65,0x6d,0x6f,0x72
0002bc  79537461          DCB      0x79,0x53,0x74,0x61
0002c0  636b2900          DCB      0x63,0x6b,0x29,0x00
0002c4  4c696e65          DCB      0x4c,0x69,0x6e,0x65
0002c8  61725365          DCB      0x61,0x72,0x53,0x65
0002cc  7175656e          DCB      0x71,0x75,0x65,0x6e
0002d0  63653c54          DCB      0x63,0x65,0x3c,0x54
0002d4  7970653e          DCB      0x79,0x70,0x65,0x3e
0002d8  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
0002dc  6d707574          DCB      0x6d,0x70,0x75,0x74
0002e0  6553697a          DCB      0x65,0x53,0x69,0x7a
0002e4  65000000          DCB      0x65,0x00,0x00,0x00
0002e8  73697a65          DCB      0x73,0x69,0x7a,0x65
0002ec  20657374          DCB      0x20,0x65,0x73,0x74
0002f0  696d6174          DCB      0x69,0x6d,0x61,0x74
0002f4  696f6e20          DCB      0x69,0x6f,0x6e,0x20
0002f8  6661696c          DCB      0x66,0x61,0x69,0x6c
0002fc  65640000          DCB      0x65,0x64,0x00,0x00
000300  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000304  6f726574          DCB      0x6f,0x72,0x65,0x74
000308  6563685c          DCB      0x65,0x63,0x68,0x5c
00030c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000310  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000314  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000318  64655c61          DCB      0x64,0x65,0x5c,0x61
00031c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000320  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000324  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000328  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00032c  2f736571          DCB      0x2f,0x73,0x65,0x71
000330  75656e63          DCB      0x75,0x65,0x6e,0x63
000334  65732e68          DCB      0x65,0x73,0x2e,0x68
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  41727261          DCB      0x41,0x72,0x72,0x61
000340  793c5479          DCB      0x79,0x3c,0x54,0x79
000344  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000348  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
00034c  70757465          DCB      0x70,0x75,0x74,0x65
000350  52657175          DCB      0x52,0x65,0x71,0x75
000354  69726564          DCB      0x69,0x72,0x65,0x64
000358  53747269          DCB      0x53,0x74,0x72,0x69
00035c  64650000          DCB      0x64,0x65,0x00,0x00
000360  496e7661          DCB      0x49,0x6e,0x76,0x61
000364  6c696420          DCB      0x6c,0x69,0x64,0x20
000368  73697a65          DCB      0x73,0x69,0x7a,0x65
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000374  6f726574          DCB      0x6f,0x72,0x65,0x74
000378  6563685c          DCB      0x65,0x63,0x68,0x5c
00037c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000380  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000384  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000388  64655c61          DCB      0x64,0x65,0x5c,0x61
00038c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000390  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000394  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000398  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00039c  2f617272          DCB      0x2f,0x61,0x72,0x72
0003a0  61793264          DCB      0x61,0x79,0x32,0x64
0003a4  2e680000          DCB      0x2e,0x68,0x00,0x00
0003a8  41727261          DCB      0x41,0x72,0x72,0x61
0003ac  793c5479          DCB      0x79,0x3c,0x54,0x79
0003b0  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0003b4  3a416c6c          DCB      0x3a,0x41,0x6c,0x6c
0003b8  6f636174          DCB      0x6f,0x63,0x61,0x74
0003bc  65427566          DCB      0x65,0x42,0x75,0x66
0003c0  66657246          DCB      0x66,0x65,0x72,0x46
0003c4  726f6d4d          DCB      0x72,0x6f,0x6d,0x4d
0003c8  656d6f72          DCB      0x65,0x6d,0x6f,0x72
0003cc  79537461          DCB      0x79,0x53,0x74,0x61
0003d0  636b0000          DCB      0x63,0x6b,0x00,0x00
0003d4  41727261          DCB      0x41,0x72,0x72,0x61
0003d8  793c5479          DCB      0x79,0x3c,0x54,0x79
0003dc  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0003e0  3a676574          DCB      0x3a,0x67,0x65,0x74
0003e4  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0003e8  65000000          DCB      0x65,0x00,0x00,0x00
0003ec  4e656761          DCB      0x4e,0x65,0x67,0x61
0003f0  74697665          DCB      0x74,0x69,0x76,0x65
0003f4  2064696d          DCB      0x20,0x64,0x69,0x6d
0003f8  656e7369          DCB      0x65,0x6e,0x73,0x69
0003fc  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000400  41727261          DCB      0x41,0x72,0x72,0x61
000404  793c5479          DCB      0x79,0x3c,0x54,0x79
000408  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00040c  3a536574          DCB      0x3a,0x53,0x65,0x74
000410  5a65726f          DCB      0x5a,0x65,0x72,0x6f
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  41727261          DCB      0x41,0x72,0x72,0x61
00041c  793c5479          DCB      0x79,0x3c,0x54,0x79
000420  70653e20          DCB      0x70,0x65,0x3e,0x20
000424  6973206e          DCB      0x69,0x73,0x20,0x6e
000428  6f742076          DCB      0x6f,0x74,0x20,0x76
00042c  616c6964          DCB      0x61,0x6c,0x69,0x64
000430  00000000          DCB      0x00,0x00,0x00,0x00
000434  4f6e652d          DCB      0x4f,0x6e,0x65,0x2d
000438  64696d65          DCB      0x64,0x69,0x6d,0x65
00043c  6e73696f          DCB      0x6e,0x73,0x69,0x6f
000440  6e616c20          DCB      0x6e,0x61,0x6c,0x20
000444  53657441          DCB      0x53,0x65,0x74,0x41
000448  72726179          DCB      0x72,0x72,0x61,0x79
00044c  206f6e6c          DCB      0x20,0x6f,0x6e,0x6c
000450  7920776f          DCB      0x79,0x20,0x77,0x6f
000454  726b7320          DCB      0x72,0x6b,0x73,0x20
000458  77697468          DCB      0x77,0x69,0x74,0x68
00045c  206f6e65          DCB      0x20,0x6f,0x6e,0x65
000460  2d64696d          DCB      0x2d,0x64,0x69,0x6d
000464  656e7369          DCB      0x65,0x6e,0x73,0x69
000468  6f6e616c          DCB      0x6f,0x6e,0x61,0x6c
00046c  20417272          DCB      0x20,0x41,0x72,0x72
000470  61792069          DCB      0x61,0x79,0x20,0x69
000474  6e707574          DCB      0x6e,0x70,0x75,0x74
000478  00000000          DCB      0x00,0x00,0x00,0x00
00047c  4966206f          DCB      0x49,0x66,0x20,0x6f
000480  75742069          DCB      0x75,0x74,0x20,0x69
000484  73206120          DCB      0x73,0x20,0x61,0x20
000488  726f7720          DCB      0x72,0x6f,0x77,0x20
00048c  76656374          DCB      0x76,0x65,0x63,0x74
000490  6f722c20          DCB      0x6f,0x72,0x2c,0x20
000494  7468656e          DCB      0x74,0x68,0x65,0x6e
000498  206f7574          DCB      0x20,0x6f,0x75,0x74
00049c  2c207843          DCB      0x2c,0x20,0x78,0x43
0004a0  6f6f7264          DCB      0x6f,0x6f,0x72,0x64
0004a4  696e6174          DCB      0x69,0x6e,0x61,0x74
0004a8  65732c20          DCB      0x65,0x73,0x2c,0x20
0004ac  616e6420          DCB      0x61,0x6e,0x64,0x20
0004b0  79436f6f          DCB      0x79,0x43,0x6f,0x6f
0004b4  7264696e          DCB      0x72,0x64,0x69,0x6e
0004b8  61746573          DCB      0x61,0x74,0x65,0x73
0004bc  206d7573          DCB      0x20,0x6d,0x75,0x73
0004c0  7420616c          DCB      0x74,0x20,0x61,0x6c
0004c4  6c206265          DCB      0x6c,0x20,0x62,0x65
0004c8  2031784e          DCB      0x20,0x31,0x78,0x4e
0004cc  00000000          DCB      0x00,0x00,0x00,0x00
0004d0  78436f6f          DCB      0x78,0x43,0x6f,0x6f
0004d4  7264696e          DCB      0x72,0x64,0x69,0x6e
0004d8  61746573          DCB      0x61,0x74,0x65,0x73
0004dc  2c207943          DCB      0x2c,0x20,0x79,0x43
0004e0  6f6f7264          DCB      0x6f,0x6f,0x72,0x64
0004e4  696e6174          DCB      0x69,0x6e,0x61,0x74
0004e8  65732c20          DCB      0x65,0x73,0x2c,0x20
0004ec  616e6420          DCB      0x61,0x6e,0x64,0x20
0004f0  72656665          DCB      0x72,0x65,0x66,0x65
0004f4  72656e63          DCB      0x72,0x65,0x6e,0x63
0004f8  65206361          DCB      0x65,0x20,0x63,0x61
0004fc  6e6e6f74          DCB      0x6e,0x6e,0x6f,0x74
000500  20626520          DCB      0x20,0x62,0x65,0x20
000504  74686520          DCB      0x74,0x68,0x65,0x20
000508  73616d65          DCB      0x73,0x61,0x6d,0x65
00050c  20617320          DCB      0x20,0x61,0x73,0x20
000510  6f757400          DCB      0x6f,0x75,0x74,0x00
000514  74656d70          DCB      0x74,0x65,0x6d,0x70
000518  6c617465          DCB      0x6c,0x61,0x74,0x65
00051c  20776964          DCB      0x20,0x77,0x69,0x64
000520  74687320          DCB      0x74,0x68,0x73,0x20
000524  616e6420          DCB      0x61,0x6e,0x64,0x20
000528  68656967          DCB      0x68,0x65,0x69,0x67
00052c  68747320          DCB      0x68,0x74,0x73,0x20
000530  6d757374          DCB      0x6d,0x75,0x73,0x74
000534  20626520          DCB      0x20,0x62,0x65,0x20
000538  67726561          DCB      0x67,0x72,0x65,0x61
00053c  74657220          DCB      0x74,0x65,0x72,0x20
000540  7468616e          DCB      0x74,0x68,0x61,0x6e
000544  207a6572          DCB      0x20,0x7a,0x65,0x72
000548  6f2c2061          DCB      0x6f,0x2c,0x20,0x61
00054c  6e64206d          DCB      0x6e,0x64,0x20,0x6d
000550  756c7469          DCB      0x75,0x6c,0x74,0x69
000554  706c6573          DCB      0x70,0x6c,0x65,0x73
000558  206f6620          DCB      0x20,0x6f,0x66,0x20
00055c  25640000          DCB      0x25,0x64,0x00,0x00
000560  4f6e6c79          DCB      0x4f,0x6e,0x6c,0x79
000564  20547261          DCB      0x20,0x54,0x72,0x61
000568  6e73666f          DCB      0x6e,0x73,0x66,0x6f
00056c  726d6174          DCB      0x72,0x6d,0x61,0x74
000570  696f6e73          DCB      0x69,0x6f,0x6e,0x73
000574  3a3a5452          DCB      0x3a,0x3a,0x54,0x52
000578  414e5346          DCB      0x41,0x4e,0x53,0x46
00057c  4f524d5f          DCB      0x4f,0x52,0x4d,0x5f
000580  5452414e          DCB      0x54,0x52,0x41,0x4e
000584  534c4154          DCB      0x53,0x4c,0x41,0x54
000588  494f4e2c          DCB      0x49,0x4f,0x4e,0x2c
00058c  20547261          DCB      0x20,0x54,0x72,0x61
000590  6e73666f          DCB      0x6e,0x73,0x66,0x6f
000594  726d6174          DCB      0x72,0x6d,0x61,0x74
000598  696f6e73          DCB      0x69,0x6f,0x6e,0x73
00059c  3a3a5452          DCB      0x3a,0x3a,0x54,0x52
0005a0  414e5346          DCB      0x41,0x4e,0x53,0x46
0005a4  4f524d5f          DCB      0x4f,0x52,0x4d,0x5f
0005a8  41464649          DCB      0x41,0x46,0x46,0x49
0005ac  4e452c20          DCB      0x4e,0x45,0x2c,0x20
0005b0  616e6420          DCB      0x61,0x6e,0x64,0x20
0005b4  5472616e          DCB      0x54,0x72,0x61,0x6e
0005b8  73666f72          DCB      0x73,0x66,0x6f,0x72
0005bc  6d617469          DCB      0x6d,0x61,0x74,0x69
0005c0  6f6e733a          DCB      0x6f,0x6e,0x73,0x3a
0005c4  3a545241          DCB      0x3a,0x54,0x52,0x41
0005c8  4e53464f          DCB      0x4e,0x53,0x46,0x4f
0005cc  524d5f50          DCB      0x52,0x4d,0x5f,0x50
0005d0  524f4a45          DCB      0x52,0x4f,0x4a,0x45
0005d4  43544956          DCB      0x43,0x54,0x49,0x56
0005d8  45206172          DCB      0x45,0x20,0x61,0x72
0005dc  65207375          DCB      0x65,0x20,0x73,0x75
0005e0  70706f72          DCB      0x70,0x70,0x6f,0x72
0005e4  74656400          DCB      0x74,0x65,0x64,0x00
0005e8  54686520          DCB      0x54,0x68,0x65,0x20
0005ec  74656d70          DCB      0x74,0x65,0x6d,0x70
0005f0  6c617465          DCB      0x6c,0x61,0x74,0x65
0005f4  496d6167          DCB      0x49,0x6d,0x61,0x67
0005f8  65206d75          DCB      0x65,0x20,0x6d,0x75
0005fc  73742062          DCB      0x73,0x74,0x20,0x62
000600  65206120          DCB      0x65,0x20,0x61,0x20
000604  706f7765          DCB      0x70,0x6f,0x77,0x65
000608  72206f66          DCB      0x72,0x20,0x6f,0x66
00060c  2074776f          DCB      0x20,0x74,0x77,0x6f
000610  20736d61          DCB      0x20,0x73,0x6d,0x61
000614  6c6c6572          DCB      0x6c,0x6c,0x65,0x72
000618  20746861          DCB      0x20,0x74,0x68,0x61
00061c  6e204241          DCB      0x6e,0x20,0x42,0x41
000620  53455f49          DCB      0x53,0x45,0x5f,0x49
000624  4d414745          DCB      0x4d,0x41,0x47,0x45
000628  5f574944          DCB      0x5f,0x57,0x49,0x44
00062c  54480000          DCB      0x54,0x48,0x00,0x00

                          AREA ||t._ZN4Anki8Embedded5PointIfEC1Ev||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5PointIfEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point<float>::Point__sub_object()
                  _ZN4Anki8Embedded5PointIfEC1Ev PROC ; Anki::Embedded::Point<float>::Point()
;;;28     #endif
;;;29         template<typename Type> Point<Type>::Point()
;;;30           : x(static_cast<Type>(0)), y(static_cast<Type>(0))
;;;31         {
;;;32         }
;;;33     
000000  ed9f0a03          VLDR     s0,|L62.16|
000004  ed800a00          VSTR     s0,[r0,#0]
000008  ed800a01          VSTR     s0,[r0,#4]
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L62.16|
000010  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.63||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5PointIfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5PointIfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC2ERKNS0_14LinearSequenceIiEES6_bS6_S6_                  ; Alternate entry point ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1__sub_object(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
                  _ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_ PROC ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
;;;284    
;;;285        template<typename Type> ArraySliceLimits_in1_out1<Type>::ArraySliceLimits_in1_out1(const LinearSequence<Type> &in1_ySlice, const LinearSequence<Type> &in1_xSlice, bool in1_isTransposed, const LinearSequence<Type> &out1_ySlice, const LinearSequence<Type> &out1_xSlice)
;;;286          : ySize(out1_ySlice.get_size()), xSize(out1_xSlice.get_size()),
;;;287          rawOut1Limits(out1_ySlice, out1_xSlice),
;;;288          rawIn1Limits(in1_ySlice, in1_xSlice), in1_isTransposed(in1_isTransposed)
;;;289        {
;;;290          isValid = false;
;;;291    
;;;292          this->out1_xInnerIncrement = this->rawOut1Limits.xIncrement;
;;;293    
;;;294          if(!in1_isTransposed) {
;;;295            if(rawOut1Limits.xSize == rawIn1Limits.xSize && rawOut1Limits.ySize == rawIn1Limits.ySize) {
;;;296              isValid = true;
;;;297              isSimpleIteration = true;
;;;298    
;;;299              this->in1Y = this->rawIn1Limits.yStart;
;;;300              this->out1Y = this->rawOut1Limits.yStart;
;;;301    
;;;302              this->in1_xInnerIncrement = this->rawIn1Limits.xIncrement;
;;;303              this->in1_yInnerIncrement = 0;
;;;304            }
;;;305          } else { // if(!in1_isTransposed)
;;;306            if(rawOut1Limits.xSize == rawIn1Limits.ySize && rawOut1Limits.ySize == rawIn1Limits.xSize) {
;;;307              isValid = true;
;;;308              isSimpleIteration = false;
;;;309    
;;;310              this->in1X = this->rawIn1Limits.xStart;
;;;311              this->out1Y = this->rawOut1Limits.yStart;
;;;312    
;;;313              this->in1_xInnerIncrement = 0;
;;;314              this->in1_yInnerIncrement = this->rawIn1Limits.yIncrement;
;;;315            }
;;;316          } // if(!in1_isTransposed) ... else
;;;317    
;;;318          if(!isValid) {
;;;319            AnkiError("ArraySliceLimits_in1_out1", "Subscripted assignment dimension mismatch");
;;;320            return;
;;;321          }
;;;322        } // ArraySliceLimits_in1_out1
;;;323    
000000  b570              PUSH     {r4-r6,lr}
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
000006  e9dd5c06          LDRD     r5,r12,[sp,#0x18]
00000a  6828              LDR      r0,[r5,#0]
00000c  6160              STR      r0,[r4,#0x14]
00000e  f8dc0000          LDR      r0,[r12,#0]
000012  61a0              STR      r0,[r4,#0x18]
000014  f8dc6004          LDR      r6,[r12,#4]
000018  62a6              STR      r6,[r4,#0x28]
00001a  f8dc6008          LDR      r6,[r12,#8]
00001e  62e6              STR      r6,[r4,#0x2c]
000020  f8dcc000          LDR      r12,[r12,#0]
000024  f8c4c030          STR      r12,[r4,#0x30]
000028  f8d5c004          LDR      r12,[r5,#4]
00002c  f8c4c034          STR      r12,[r4,#0x34]
000030  f8d5c008          LDR      r12,[r5,#8]
000034  f8c4c038          STR      r12,[r4,#0x38]
000038  f8d5c000          LDR      r12,[r5,#0]
00003c  f8c4c03c          STR      r12,[r4,#0x3c]
000040  6855              LDR      r5,[r2,#4]
000042  6425              STR      r5,[r4,#0x40]
000044  6895              LDR      r5,[r2,#8]
000046  6465              STR      r5,[r4,#0x44]
000048  6812              LDR      r2,[r2,#0]
00004a  64a2              STR      r2,[r4,#0x48]
00004c  684a              LDR      r2,[r1,#4]
00004e  64e2              STR      r2,[r4,#0x4c]
000050  688a              LDR      r2,[r1,#8]
000052  6522              STR      r2,[r4,#0x50]
000054  6809              LDR      r1,[r1,#0]
000056  6561              STR      r1,[r4,#0x54]
000058  f04f0c00          MOV      r12,#0
00005c  f8843058          STRB     r3,[r4,#0x58]
000060  f884c000          STRB     r12,[r4,#0]
000064  6ae0              LDR      r0,[r4,#0x2c]
000066  61e0              STR      r0,[r4,#0x1c]
000068  6b22              LDR      r2,[r4,#0x30]
00006a  2001              MOVS     r0,#1
00006c  b18b              CBZ      r3,|L69.146|
00006e  428a              CMP      r2,r1
000070  d121              BNE      |L69.182|
000072  6ca2              LDR      r2,[r4,#0x48]
000074  6be1              LDR      r1,[r4,#0x3c]
000076  4291              CMP      r1,r2
000078  d11d              BNE      |L69.182|
00007a  7020              STRB     r0,[r4,#0]
00007c  f884c001          STRB     r12,[r4,#1]
000080  6c20              LDR      r0,[r4,#0x40]
000082  6120              STR      r0,[r4,#0x10]
000084  6b60              LDR      r0,[r4,#0x34]
000086  f8c4c020          STR      r12,[r4,#0x20]
00008a  6060              STR      r0,[r4,#4]
00008c  6d20              LDR      r0,[r4,#0x50]
00008e  6260              STR      r0,[r4,#0x24]
000090  e00e              B        |L69.176|
                  |L69.146|
000092  6ca3              LDR      r3,[r4,#0x48]
000094  429a              CMP      r2,r3
000096  bf04              ITT      EQ
000098  6be2              LDREQ    r2,[r4,#0x3c]
00009a  428a              CMPEQ    r2,r1
00009c  d10b              BNE      |L69.182|
00009e  7020              STRB     r0,[r4,#0]
0000a0  7060              STRB     r0,[r4,#1]
0000a2  6ce0              LDR      r0,[r4,#0x4c]
0000a4  60e0              STR      r0,[r4,#0xc]
0000a6  6b60              LDR      r0,[r4,#0x34]
0000a8  6060              STR      r0,[r4,#4]
0000aa  6c60              LDR      r0,[r4,#0x44]
0000ac  e9c40c08          STRD     r0,r12,[r4,#0x20]
                  |L69.176|
0000b0  b002              ADD      sp,sp,#8
0000b2  4620              MOV      r0,r4
0000b4  bd70              POP      {r4-r6,pc}
                  |L69.182|
0000b6  f240113f          MOV      r1,#0x13f
0000ba  4806              LDR      r0,|L69.212|
0000bc  e9cd0100          STRD     r0,r1,[sp,#0]
0000c0  a305              ADR      r3,|L69.216|
0000c2  a214              ADR      r2,|L69.276|
0000c4  a11e              ADR      r1,|L69.320|
0000c6  2005              MOVS     r0,#5
0000c8  f7fffffe          BL       _Anki_Log
0000cc  b002              ADD      sp,sp,#8
0000ce  4620              MOV      r0,r4
0000d0  bd70              POP      {r4-r6,pc}
                          ENDP

0000d2  0000              DCW      0x0000
                  |L69.212|
                          DCD      _ZZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)::__PRETTY_FUNCTION__
                  |L69.216|
0000d8  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0000dc  6f726574
0000e0  6563685c
0000e4  636f6d6d
0000e8  6f6e5c69
0000ec  6e636c75
0000f0  64655c61
0000f4  6e6b692f
0000f8  636f6d6d
0000fc  6f6e2f72
000100  6f626f74
000104  2f617272
000108  617953  
00010b  6c696365          DCB      "lices.h",0
00010f  732e6800
000113  00                DCB      0
                  |L69.276|
000114  53756273          DCB      "Subscripted assignment dimension mismatch",0
000118  63726970
00011c  74656420
000120  61737369
000124  676e6d65
000128  6e742064
00012c  696d656e
000130  73696f6e
000134  206d6973
000138  6d617463
00013c  6800    
00013e  00                DCB      0
00013f  00                DCB      0
                  |L69.320|
000140  41727261          DCB      "ArraySliceLimits_in1_out1",0
000144  79536c69
000148  63654c69
00014c  6d697473
000150  5f696e31
000154  5f6f7574
000158  3100    
00015a  00                DCB      0
00015b  00                DCB      0

                          AREA ||area_number.70||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_, LINKORDER=||t._ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.70||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC2ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_                  ; Alternate entry point ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1__sub_object(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
                  _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_ PROC ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
;;;347    
;;;348        template<typename Type> ArraySliceLimits_in2_out1<Type>::ArraySliceLimits_in2_out1(const LinearSequence<Type> &in1_ySlice, const LinearSequence<Type> &in1_xSlice, bool in1_isTransposed, const LinearSequence<Type> &in2_ySlice, const LinearSequence<Type> &in2_xSlice, bool in2_isTransposed, const LinearSequence<Type> &out1_ySlice, const LinearSequence<Type> &out1_xSlice)
;;;349          : ySize(out1_ySlice.get_size()), xSize(out1_xSlice.get_size()),
;;;350          rawOut1Limits(out1_ySlice, out1_xSlice),
;;;351          rawIn1Limits(in1_ySlice, in1_xSlice), in1_isTransposed(in1_isTransposed),
;;;352          rawIn2Limits(in2_ySlice, in2_xSlice), in2_isTransposed(in2_isTransposed)
;;;353        {
;;;354          isValid = false;
;;;355    
;;;356          this->out1_xInnerIncrement = this->rawOut1Limits.xIncrement;
;;;357          this->in1_yInnerIncrement = 0;
;;;358          this->in1_xInnerIncrement = 0;
;;;359          this->in2_yInnerIncrement = 0;
;;;360          this->in2_xInnerIncrement = 0;
;;;361    
;;;362          if(!in1_isTransposed && !in2_isTransposed) {
;;;363            const bool sizesMatch = (in1_xSlice.get_size() == in2_xSlice.get_size()) && (in1_xSlice.get_size() == out1_xSlice.get_size()) && (in1_ySlice.get_size() == in2_ySlice.get_size()) && (in1_ySlice.get_size() == out1_ySlice.get_size());
;;;364    
;;;365            if(sizesMatch) {
;;;366              isValid = true;
;;;367              isSimpleIteration = true;
;;;368    
;;;369              this->in1_xInnerIncrement = this->rawIn1Limits.xIncrement;
;;;370              this->in2_xInnerIncrement = this->rawIn2Limits.xIncrement;
;;;371    
;;;372              this->in1Y = this->rawIn1Limits.yStart;
;;;373              this->in2Y = this->rawIn2Limits.yStart;
;;;374              this->out1Y = this->rawOut1Limits.yStart;
;;;375            }
;;;376          } else { // if(!in1_isTransposed)
;;;377            isSimpleIteration = false;
;;;378    
;;;379            bool sizesMatch = false;
;;;380    
;;;381            if(in1_isTransposed && in2_isTransposed) {
;;;382              sizesMatch = (in1_xSlice.get_size() == in2_xSlice.get_size()) && (in1_xSlice.get_size() == out1_ySlice.get_size()) && (in1_ySlice.get_size() == in2_ySlice.get_size()) && (in1_ySlice.get_size() == out1_xSlice.get_size());
;;;383              this->in1_yInnerIncrement = this->rawIn1Limits.yIncrement;
;;;384              this->in2_yInnerIncrement = this->rawIn2Limits.yIncrement;
;;;385            } else if(in1_isTransposed) {
;;;386              sizesMatch = (in1_xSlice.get_size() == in2_ySlice.get_size()) && (in1_xSlice.get_size() == out1_ySlice.get_size()) && (in1_ySlice.get_size() == in2_xSlice.get_size()) && (in1_ySlice.get_size() == out1_xSlice.get_size());
;;;387              this->in1_yInnerIncrement = this->rawIn1Limits.yIncrement;
;;;388              this->in2_xInnerIncrement = this->rawIn2Limits.xIncrement;
;;;389            } else if(in2_isTransposed) {
;;;390              sizesMatch = (in1_xSlice.get_size() == in2_ySlice.get_size()) && (in1_xSlice.get_size() == out1_xSlice.get_size()) && (in1_ySlice.get_size() == in2_xSlice.get_size()) && (in1_ySlice.get_size() == out1_ySlice.get_size());
;;;391              this->in1_xInnerIncrement = this->rawIn1Limits.xIncrement;
;;;392              this->in2_yInnerIncrement = this->rawIn2Limits.yIncrement;
;;;393            } else {
;;;394              AnkiAssert(false); // should not be possible
;;;395            }
;;;396    
;;;397            if(!sizesMatch) {
;;;398              AnkiError("ArraySliceLimits_in2_out1", "Subscripted assignment dimension mismatch");
;;;399              return;
;;;400            }
;;;401    
;;;402            isValid = true;
;;;403    
;;;404            this->in1X = this->rawIn1Limits.xStart;
;;;405            this->in1Y = this->rawIn1Limits.yStart;
;;;406            this->in2X = this->rawIn2Limits.xStart;
;;;407            this->in2Y = this->rawIn2Limits.yStart;
;;;408    
;;;409            this->out1Y = this->rawOut1Limits.yStart;
;;;410          } // if(!in1_isTransposed) ... else
;;;411        } // ArraySliceLimits_in1_out1
;;;412    
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b082              SUB      sp,sp,#8
000006  4604              MOV      r4,r0
000008  e9ddc00d          LDRD     r12,r0,[sp,#0x34]
00000c  e9dd650a          LDRD     r6,r5,[sp,#0x28]
000010  f8dd8030          LDR      r8,[sp,#0x30]
000014  f8dc7000          LDR      r7,[r12,#0]
000018  61e7              STR      r7,[r4,#0x1c]
00001a  6807              LDR      r7,[r0,#0]
00001c  6227              STR      r7,[r4,#0x20]
00001e  f8d09004          LDR      r9,[r0,#4]
000022  f8c49038          STR      r9,[r4,#0x38]
000026  f8d09008          LDR      r9,[r0,#8]
00002a  f8c4903c          STR      r9,[r4,#0x3c]
00002e  f8d09000          LDR      r9,[r0,#0]
000032  f8c49040          STR      r9,[r4,#0x40]
000036  f8dc9004          LDR      r9,[r12,#4]
00003a  f8c49044          STR      r9,[r4,#0x44]
00003e  f8dc9008          LDR      r9,[r12,#8]
000042  f8c49048          STR      r9,[r4,#0x48]
000046  f8dc9000          LDR      r9,[r12,#0]
00004a  f8c4904c          STR      r9,[r4,#0x4c]
00004e  f8d2a004          LDR      r10,[r2,#4]
000052  f8c4a050          STR      r10,[r4,#0x50]
000056  f8d2a008          LDR      r10,[r2,#8]
00005a  f8c4a054          STR      r10,[r4,#0x54]
00005e  f8d2a000          LDR      r10,[r2,#0]
000062  f8c4a058          STR      r10,[r4,#0x58]
000066  f8d1a004          LDR      r10,[r1,#4]
00006a  f8c4a05c          STR      r10,[r4,#0x5c]
00006e  f8d1a008          LDR      r10,[r1,#8]
000072  f8c4a060          STR      r10,[r4,#0x60]
000076  f8d1a000          LDR      r10,[r1,#0]
00007a  f8c4a064          STR      r10,[r4,#0x64]
00007e  f8843068          STRB     r3,[r4,#0x68]
000082  f8d5a004          LDR      r10,[r5,#4]
000086  f8c4a06c          STR      r10,[r4,#0x6c]
00008a  f8d5a008          LDR      r10,[r5,#8]
00008e  f8c4a070          STR      r10,[r4,#0x70]
000092  f8d5a000          LDR      r10,[r5,#0]
000096  f8c4a074          STR      r10,[r4,#0x74]
00009a  f8d6a004          LDR      r10,[r6,#4]
00009e  f8c4a078          STR      r10,[r4,#0x78]
0000a2  f8d6a008          LDR      r10,[r6,#8]
0000a6  f8c4a07c          STR      r10,[r4,#0x7c]
0000aa  f8d6a000          LDR      r10,[r6,#0]
0000ae  f8c4a080          STR      r10,[r4,#0x80]
0000b2  f04f0900          MOV      r9,#0
0000b6  f8848084          STRB     r8,[r4,#0x84]
0000ba  f8849000          STRB     r9,[r4,#0]
0000be  6be7              LDR      r7,[r4,#0x3c]
0000c0  f8c4902c          STR      r9,[r4,#0x2c]
0000c4  e9c47909          STRD     r7,r9,[r4,#0x24]
0000c8  f8c49034          STR      r9,[r4,#0x34]
0000cc  f8c49030          STR      r9,[r4,#0x30]
0000d0  ea530a08          ORRS     r10,r3,r8
0000d4  f04f0701          MOV      r7,#1
0000d8  d01a              BEQ      |L76.272|
0000da  f8849001          STRB     r9,[r4,#1]
0000de  ea130f08          TST      r3,r8
0000e2  d035              BEQ      |L76.336|
0000e4  6812              LDR      r2,[r2,#0]
0000e6  682b              LDR      r3,[r5,#0]
0000e8  429a              CMP      r2,r3
0000ea  bf04              ITT      EQ
0000ec  f8dc3000          LDREQ    r3,[r12,#0]
0000f0  429a              CMPEQ    r2,r3
0000f2  d107              BNE      |L76.260|
0000f4  6809              LDR      r1,[r1,#0]
0000f6  6832              LDR      r2,[r6,#0]
0000f8  4291              CMP      r1,r2
0000fa  bf02              ITTT     EQ
0000fc  6800              LDREQ    r0,[r0,#0]
0000fe  4281              CMPEQ    r1,r0
000100  2001              MOVEQ    r0,#1
000102  d000              BEQ      |L76.262|
                  |L76.260|
000104  2000              MOVS     r0,#0
                  |L76.262|
000106  6e21              LDR      r1,[r4,#0x60]
000108  62e1              STR      r1,[r4,#0x2c]
00010a  6fe1              LDR      r1,[r4,#0x7c]
00010c  6361              STR      r1,[r4,#0x34]
00010e  e04e              B        |L76.430|
                  |L76.272|
000110  6812              LDR      r2,[r2,#0]
000112  682b              LDR      r3,[r5,#0]
000114  429a              CMP      r2,r3
000116  bf04              ITT      EQ
000118  6800              LDREQ    r0,[r0,#0]
00011a  4282              CMPEQ    r2,r0
00011c  d108              BNE      |L76.304|
00011e  6808              LDR      r0,[r1,#0]
000120  6831              LDR      r1,[r6,#0]
000122  4288              CMP      r0,r1
000124  bf02              ITTT     EQ
000126  f8dc1000          LDREQ    r1,[r12,#0]
00012a  4288              CMPEQ    r0,r1
00012c  2001              MOVEQ    r0,#1
00012e  d000              BEQ      |L76.306|
                  |L76.304|
000130  2000              MOVS     r0,#0
                  |L76.306|
000132  2800              CMP      r0,#0
000134  d047              BEQ      |L76.454|
000136  7027              STRB     r7,[r4,#0]
000138  7067              STRB     r7,[r4,#1]
00013a  6d60              LDR      r0,[r4,#0x54]
00013c  62a0              STR      r0,[r4,#0x28]
00013e  6f20              LDR      r0,[r4,#0x70]
000140  6320              STR      r0,[r4,#0x30]
000142  6de0              LDR      r0,[r4,#0x5c]
000144  60e0              STR      r0,[r4,#0xc]
000146  6fa0              LDR      r0,[r4,#0x78]
000148  6160              STR      r0,[r4,#0x14]
00014a  6c60              LDR      r0,[r4,#0x44]
00014c  6060              STR      r0,[r4,#4]
00014e  e03a              B        |L76.454|
                  |L76.336|
000150  b1ab              CBZ      r3,|L76.382|
000152  6812              LDR      r2,[r2,#0]
000154  6833              LDR      r3,[r6,#0]
000156  429a              CMP      r2,r3
000158  bf04              ITT      EQ
00015a  f8dc3000          LDREQ    r3,[r12,#0]
00015e  429a              CMPEQ    r2,r3
000160  d107              BNE      |L76.370|
000162  6809              LDR      r1,[r1,#0]
000164  682a              LDR      r2,[r5,#0]
000166  4291              CMP      r1,r2
000168  bf02              ITTT     EQ
00016a  6800              LDREQ    r0,[r0,#0]
00016c  4281              CMPEQ    r1,r0
00016e  2001              MOVEQ    r0,#1
000170  d000              BEQ      |L76.372|
                  |L76.370|
000172  2000              MOVS     r0,#0
                  |L76.372|
000174  6e21              LDR      r1,[r4,#0x60]
000176  62e1              STR      r1,[r4,#0x2c]
000178  6f21              LDR      r1,[r4,#0x70]
00017a  6321              STR      r1,[r4,#0x30]
00017c  e017              B        |L76.430|
                  |L76.382|
00017e  f1b80f00          CMP      r8,#0
000182  d024              BEQ      |L76.462|
000184  6812              LDR      r2,[r2,#0]
000186  6833              LDR      r3,[r6,#0]
000188  429a              CMP      r2,r3
00018a  bf04              ITT      EQ
00018c  6800              LDREQ    r0,[r0,#0]
00018e  4282              CMPEQ    r2,r0
000190  d108              BNE      |L76.420|
000192  6808              LDR      r0,[r1,#0]
000194  6829              LDR      r1,[r5,#0]
000196  4288              CMP      r0,r1
000198  bf02              ITTT     EQ
00019a  f8dc1000          LDREQ    r1,[r12,#0]
00019e  4288              CMPEQ    r0,r1
0001a0  2001              MOVEQ    r0,#1
0001a2  d000              BEQ      |L76.422|
                  |L76.420|
0001a4  2000              MOVS     r0,#0
                  |L76.422|
0001a6  6d61              LDR      r1,[r4,#0x54]
0001a8  62a1              STR      r1,[r4,#0x28]
0001aa  6fe1              LDR      r1,[r4,#0x7c]
0001ac  6361              STR      r1,[r4,#0x34]
                  |L76.430|
0001ae  b170              CBZ      r0,|L76.462|
0001b0  7027              STRB     r7,[r4,#0]
0001b2  6d20              LDR      r0,[r4,#0x50]
0001b4  6120              STR      r0,[r4,#0x10]
0001b6  6de0              LDR      r0,[r4,#0x5c]
0001b8  60e0              STR      r0,[r4,#0xc]
0001ba  6ee0              LDR      r0,[r4,#0x6c]
0001bc  61a0              STR      r0,[r4,#0x18]
0001be  6fa0              LDR      r0,[r4,#0x78]
0001c0  6160              STR      r0,[r4,#0x14]
0001c2  6c60              LDR      r0,[r4,#0x44]
0001c4  6060              STR      r0,[r4,#4]
                  |L76.454|
0001c6  b002              ADD      sp,sp,#8
0001c8  4620              MOV      r0,r4
0001ca  e8bd87f0          POP      {r4-r10,pc}
                  |L76.462|
0001ce  f44f71c7          MOV      r1,#0x18e
0001d2  4806              LDR      r0,|L76.492|
0001d4  e9cd0100          STRD     r0,r1,[sp,#0]
0001d8  a305              ADR      r3,|L76.496|
0001da  a214              ADR      r2,|L76.556|
0001dc  a11e              ADR      r1,|L76.600|
0001de  2005              MOVS     r0,#5
0001e0  f7fffffe          BL       _Anki_Log
0001e4  b002              ADD      sp,sp,#8
0001e6  4620              MOV      r0,r4
0001e8  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

                  |L76.492|
                          DCD      _ZZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)::__PRETTY_FUNCTION__
                  |L76.496|
0001f0  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0001f4  6f726574
0001f8  6563685c
0001fc  636f6d6d
000200  6f6e5c69
000204  6e636c75
000208  64655c61
00020c  6e6b692f
000210  636f6d6d
000214  6f6e2f72
000218  6f626f74
00021c  2f617272
000220  617953  
000223  6c696365          DCB      "lices.h",0
000227  732e6800
00022b  00                DCB      0
                  |L76.556|
00022c  53756273          DCB      "Subscripted assignment dimension mismatch",0
000230  63726970
000234  74656420
000238  61737369
00023c  676e6d65
000240  6e742064
000244  696d656e
000248  73696f6e
00024c  206d6973
000250  6d617463
000254  6800    
000256  00                DCB      0
000257  00                DCB      0
                  |L76.600|
000258  41727261          DCB      "ArraySliceLimits_in2_out1",0
00025c  79536c69
000260  63654c69
000264  6d697473
000268  5f696e32
00026c  5f6f7574
000270  3100    
000272  00                DCB      0
000273  00                DCB      0

                          AREA ||area_number.77||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_, LINKORDER=||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.77||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv PROC ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
;;;413        // This should be called at the top of the y-iteration loop, before the x-iteration loop. This will update the out1 and in# values for X and Y.
;;;414        template<typename Type> inline void ArraySliceLimits_in2_out1<Type>::OuterIncrementTop()
000000  7842              LDRB     r2,[r0,#1]
;;;415        {
;;;416          if(isSimpleIteration) {
;;;417            this->out1X = this->rawOut1Limits.xStart;
;;;418            this->in1X = this->rawIn1Limits.xStart;
;;;419            this->in2X = this->rawIn2Limits.xStart;
;;;420          } else { // if(isSimpleIteration)
;;;421            this->out1X = this->rawOut1Limits.xStart;
000002  6b81              LDR      r1,[r0,#0x38]
000004  6081              STR      r1,[r0,#8]            ;415
000006  b122              CBZ      r2,|L83.18|
000008  6d01              LDR      r1,[r0,#0x50]         ;418
00000a  6101              STR      r1,[r0,#0x10]         ;419
00000c  6ec1              LDR      r1,[r0,#0x6c]         ;419
00000e  6181              STR      r1,[r0,#0x18]         ;419
;;;422    
;;;423            if(in1_isTransposed) {
;;;424              this->in1Y = this->rawIn1Limits.yStart;
;;;425            } else {
;;;426              this->in1X = this->rawIn1Limits.xStart;
;;;427            }
;;;428    
;;;429            if(in2_isTransposed) {
;;;430              this->in2Y = this->rawIn2Limits.yStart;
;;;431            } else {
;;;432              this->in2X = this->rawIn2Limits.xStart;
;;;433            }
;;;434          } // if(isSimpleIteration) ... else
;;;435        } // ArraySliceLimits_in2_out1<Type>::OuterIncrementTop()
000010  4770              BX       lr
                  |L83.18|
000012  f8901068          LDRB     r1,[r0,#0x68]         ;423
000016  2900              CMP      r1,#0                 ;423
000018  bf19              ITTEE    NE                    ;424
00001a  6dc1              LDRNE    r1,[r0,#0x5c]         ;424
00001c  60c1              STRNE    r1,[r0,#0xc]          ;424
00001e  6d01              LDREQ    r1,[r0,#0x50]         ;426
000020  6101              STREQ    r1,[r0,#0x10]         ;426
000022  f8901084          LDRB     r1,[r0,#0x84]         ;429
000026  2900              CMP      r1,#0                 ;429
000028  bf19              ITTEE    NE                    ;430
00002a  6f81              LDRNE    r1,[r0,#0x78]         ;430
00002c  6141              STRNE    r1,[r0,#0x14]         ;430
00002e  6ec1              LDREQ    r1,[r0,#0x6c]         ;432
000030  6181              STREQ    r1,[r0,#0x18]         ;432
000032  4770              BX       lr
;;;436    
                          ENDP


                          AREA ||area_number.84||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv, LINKORDER=||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.84||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv PROC ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
;;;437        // This should be called at the botom of the y-iteration loop, after the x-iteration loop. This will update the out and in# values for X and Y.
;;;438        template<typename Type> inline void ArraySliceLimits_in2_out1<Type>::OuterIncrementBottom()
000000  6842              LDR      r2,[r0,#4]
;;;439        {
;;;440          if(isSimpleIteration) {
;;;441            this->in1Y += this->rawIn1Limits.yIncrement;
;;;442            this->in2Y += this->rawIn2Limits.yIncrement;
;;;443            this->out1Y += this->rawOut1Limits.yIncrement;
000002  6c81              LDR      r1,[r0,#0x48]
000004  7843              LDRB     r3,[r0,#1]            ;440
000006  4411              ADD      r1,r1,r2
000008  b14b              CBZ      r3,|L90.30|
00000a  6e03              LDR      r3,[r0,#0x60]         ;441
00000c  68c2              LDR      r2,[r0,#0xc]          ;441
00000e  441a              ADD      r2,r2,r3              ;441
000010  60c2              STR      r2,[r0,#0xc]          ;442
000012  6fc3              LDR      r3,[r0,#0x7c]         ;442
000014  6942              LDR      r2,[r0,#0x14]         ;442
000016  441a              ADD      r2,r2,r3              ;442
000018  6142              STR      r2,[r0,#0x14]
00001a  6041              STR      r1,[r0,#4]
;;;444          } else { // if(isSimpleIteration)
;;;445            this->out1Y += this->rawOut1Limits.yIncrement;
;;;446    
;;;447            if(in1_isTransposed) {
;;;448              this->in1X += this->rawIn1Limits.xIncrement;
;;;449            } else {
;;;450              this->in1Y += this->rawIn1Limits.yIncrement;
;;;451            }
;;;452    
;;;453            if(in2_isTransposed) {
;;;454              this->in2X += this->rawIn2Limits.xIncrement;
;;;455            } else {
;;;456              this->in2Y += this->rawIn2Limits.yIncrement;
;;;457            }
;;;458          } // if(isSimpleIteration) ... else
;;;459        } // ArraySliceLimits_in2_out1<Type>::OuterIncrementBottom()
00001c  4770              BX       lr
                  |L90.30|
00001e  6041              STR      r1,[r0,#4]            ;447
000020  f8901068          LDRB     r1,[r0,#0x68]         ;447
000024  2900              CMP      r1,#0                 ;447
000026  bf19              ITTEE    NE                    ;448
000028  6d42              LDRNE    r2,[r0,#0x54]         ;448
00002a  6901              LDRNE    r1,[r0,#0x10]         ;448
00002c  6e02              LDREQ    r2,[r0,#0x60]         ;450
00002e  68c1              LDREQ    r1,[r0,#0xc]          ;450
000030  4411              ADD      r1,r1,r2              ;450
000032  bf14              ITE      NE                    ;448
000034  6101              STRNE    r1,[r0,#0x10]         ;448
000036  60c1              STREQ    r1,[r0,#0xc]          ;450
000038  f8901084          LDRB     r1,[r0,#0x84]         ;453
00003c  b121              CBZ      r1,|L90.72|
00003e  6f02              LDR      r2,[r0,#0x70]         ;454
000040  6981              LDR      r1,[r0,#0x18]         ;454
000042  4411              ADD      r1,r1,r2              ;454
000044  6181              STR      r1,[r0,#0x18]         ;454
000046  4770              BX       lr
                  |L90.72|
000048  6fc2              LDR      r2,[r0,#0x7c]         ;456
00004a  6941              LDR      r1,[r0,#0x14]         ;456
00004c  4411              ADD      r1,r1,r2              ;456
00004e  6141              STR      r1,[r0,#0x14]         ;456
000050  4770              BX       lr
;;;460      } // namespace Embedded
                          ENDP


                          AREA ||area_number.91||, COMGROUP=_ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv, LINKORDER=||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.91||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)
;;;794    
;;;795        template<typename Type> Result Array<Type>::InitializeBuffer(const s32 numRows, const s32 numCols, void * const rawData, const s32 dataLength, const Flags::Buffer flags)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;796        {
000004  b083              SUB      sp,sp,#0xc
;;;797          if(!rawData) {
;;;798            AnkiError("Anki.Array2d.initialize", "input data buffer is NULL");
000006  f8df90f8          LDR      r9,|L97.256|
00000a  f8dd8030          LDR      r8,[sp,#0x30]         ;796
00000e  001d              MOVS     r5,r3                 ;796
000010  4693              MOV      r11,r2                ;796
000012  460e              MOV      r6,r1                 ;796
000014  4604              MOV      r4,r0                 ;796
000016  f04f3aff          MOV      r10,#0xffffffff       ;796
00001a  d016              BEQ      |L97.74|
;;;799            InvalidateArray();
;;;800            return RESULT_FAIL_UNINITIALIZED_MEMORY;
;;;801          }
;;;802    
;;;803          AnkiConditionalErrorAndReturnValue(numCols >= 0 && numRows >= 0 && dataLength >= MEMORY_ALIGNMENT,
00001c  f1bb0f00          CMP      r11,#0
000020  bfa8              IT       GE
000022  2e00              CMPGE    r6,#0
000024  db02              BLT      |L97.44|
000026  f1b80f10          CMP      r8,#0x10
00002a  d224              BCS      |L97.118|
                  |L97.44|
00002c  f2403023          MOV      r0,#0x323
000030  e9cd9000          STRD     r9,r0,[sp,#0]
000034  a333              ADR      r3,|L97.260|
000036  a241              ADR      r2,|L97.316|
000038  a145              ADR      r1,|L97.336|
00003a  2005              MOVS     r0,#5
00003c  f7fffffe          BL       _Anki_Log
;;;804            RESULT_FAIL_INVALID_SIZE, "Array<Type>::InitializeBuffer", "Negative dimension");
;;;805    
;;;806          AnkiConditionalErrorAndReturnValue(!flags.get_useBoundaryFillPatterns(),
;;;807            RESULT_FAIL_INVALID_PARAMETER, "Array<Type>::InitializeBuffer", "Fill patterns not supported for Array");
;;;808    
;;;809          this->flags = flags;
;;;810          this->size[0] = numRows;
;;;811          this->size[1] = numCols;
;;;812    
;;;813          // Initialize an empty array.
;;;814    
;;;815          this->data = reinterpret_cast<Type*>(rawData);
;;;816    
;;;817          const s32 extraAlignmentBytes = static_cast<s32>(RoundUp<size_t>(reinterpret_cast<size_t>(rawData), MEMORY_ALIGNMENT) - reinterpret_cast<size_t>(rawData));
;;;818          const s32 requiredBytes = ComputeRequiredStride(numCols,flags)*numRows + extraAlignmentBytes;
;;;819    
;;;820          if(requiredBytes > dataLength) {
;;;821            AnkiError("Anki.Array2d.initialize", "Input data buffer is not large enough. %d bytes is required.", requiredBytes);
;;;822            InvalidateArray();
;;;823            return RESULT_FAIL_OUT_OF_MEMORY;
;;;824          }
;;;825    
;;;826          this->data = reinterpret_cast<Type*>( reinterpret_cast<char*>(rawData) + extraAlignmentBytes );
;;;827    
;;;828          //#if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;829          //      this->UpdateCvMatMirror(*this);
;;;830          //#endif // #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;831    
;;;832          return RESULT_OK;
;;;833        } // Array<Type>::InitializeBuffer()
000040  b003              ADD      sp,sp,#0xc
000042  f04f60a0          MOV      r0,#0x5000000         ;803
000046  e8bd8ff0          POP      {r4-r11,pc}
                  |L97.74|
00004a  f240301e          MOV      r0,#0x31e             ;798
00004e  e9cd9000          STRD     r9,r0,[sp,#0]         ;798
000052  a32c              ADR      r3,|L97.260|
000054  a246              ADR      r2,|L97.368|
000056  a14d              ADR      r1,|L97.396|
000058  2005              MOVS     r0,#5                 ;798
00005a  f7fffffe          BL       _Anki_Log
00005e  f8c4a000          STR      r10,[r4,#0]           ;798
000062  f8c4a004          STR      r10,[r4,#4]           ;798
000066  2000              MOVS     r0,#0                 ;798
000068  f8c4a008          STR      r10,[r4,#8]           ;800
00006c  6120              STR      r0,[r4,#0x10]         ;800
00006e  b003              ADD      sp,sp,#0xc
000070  484c              LDR      r0,|L97.420|
000072  e8bd8ff0          POP      {r4-r11,pc}
                  |L97.118|
000076  a80d              ADD      r0,sp,#0x34           ;806
000078  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
00007c  2800              CMP      r0,#0                 ;806
00007e  d00e              BEQ      |L97.158|
000080  f2403026          MOV      r0,#0x326             ;806
000084  e9cd9000          STRD     r9,r0,[sp,#0]         ;806
000088  a31e              ADR      r3,|L97.260|
00008a  a247              ADR      r2,|L97.424|
00008c  a130              ADR      r1,|L97.336|
00008e  2005              MOVS     r0,#5                 ;806
000090  f7fffffe          BL       _Anki_Log
000094  b003              ADD      sp,sp,#0xc
000096  f04f7040          MOV      r0,#0x3000000         ;806
00009a  e8bd8ff0          POP      {r4-r11,pc}
                  |L97.158|
00009e  980d              LDR      r0,[sp,#0x34]         ;809
0000a0  e9c40503          STRD     r0,r5,[r4,#0xc]       ;809
0000a4  f105000f          ADD      r0,r5,#0xf            ;809
0000a8  e9c46b00          STRD     r6,r11,[r4,#0]        ;817
0000ac  f020000f          BIC      r0,r0,#0xf            ;817
0000b0  1b47              SUBS     r7,r0,r5              ;817
0000b2  4658              MOV      r0,r11                ;818
0000b4  990d              LDR      r1,[sp,#0x34]         ;818
0000b6  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferE ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)
0000ba  fb007006          MLA      r0,r0,r6,r7           ;818
0000be  4540              CMP      r0,r8                 ;820
0000c0  dd17              BLE      |L97.242|
0000c2  f2403135          MOV      r1,#0x335             ;821
0000c6  f8cd9000          STR      r9,[sp,#0]            ;821
0000ca  e9cd1001          STRD     r1,r0,[sp,#4]         ;821
0000ce  a30d              ADR      r3,|L97.260|
0000d0  a23f              ADR      r2,|L97.464|
0000d2  a12e              ADR      r1,|L97.396|
0000d4  2005              MOVS     r0,#5                 ;821
0000d6  f7fffffe          BL       _Anki_Log
0000da  f8c4a000          STR      r10,[r4,#0]           ;821
0000de  f8c4a004          STR      r10,[r4,#4]           ;821
0000e2  2000              MOVS     r0,#0                 ;821
0000e4  f8c4a008          STR      r10,[r4,#8]           ;823
0000e8  6120              STR      r0,[r4,#0x10]         ;823
0000ea  b003              ADD      sp,sp,#0xc
0000ec  4848              LDR      r0,|L97.528|
0000ee  e8bd8ff0          POP      {r4-r11,pc}
                  |L97.242|
0000f2  19e8              ADDS     r0,r5,r7              ;826
0000f4  6120              STR      r0,[r4,#0x10]         ;832
0000f6  b003              ADD      sp,sp,#0xc
0000f8  2000              MOVS     r0,#0                 ;832
0000fa  e8bd8ff0          POP      {r4-r11,pc}
;;;834    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L97.256|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L97.260|
000104  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000108  6f726574
00010c  6563685c
000110  636f6d6d
000114  6f6e5c69
000118  6e636c75
00011c  64655c61
000120  6e6b692f
000124  636f6d6d
000128  6f6e2f72
00012c  6f626f74
000130  2f617272
000134  617932  
000137  642e6800          DCB      "d.h",0
00013b  00                DCB      0
                  |L97.316|
00013c  4e656761          DCB      "Negative dimension",0
000140  74697665
000144  2064696d
000148  656e7369
00014c  6f6e00  
00014f  00                DCB      0
                  |L97.336|
000150  41727261          DCB      "Array<Type>::InitializeBuffer",0
000154  793c5479
000158  70653e3a
00015c  3a496e69
000160  7469616c
000164  697a6542
000168  75666665
00016c  7200    
00016e  00                DCB      0
00016f  00                DCB      0
                  |L97.368|
000170  696e7075          DCB      "input data buffer is NULL",0
000174  74206461
000178  74612062
00017c  75666665
000180  72206973
000184  204e554c
000188  4c00    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L97.396|
00018c  416e6b69          DCB      "Anki.Array2d.initialize",0
000190  2e417272
000194  61793264
000198  2e696e69
00019c  7469616c
0001a0  697a6500
                  |L97.420|
                          DCD      0x01000002
                  |L97.424|
0001a8  46696c6c          DCB      "Fill patterns not supported for Array",0
0001ac  20706174
0001b0  7465726e
0001b4  73206e6f
0001b8  74207375
0001bc  70706f72
0001c0  74656420
0001c4  666f7220
0001c8  41727261
0001cc  7900    
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L97.464|
0001d0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0001d4  74206461
0001d8  74612062
0001dc  75666665
0001e0  72206973
0001e4  206e6f74
0001e8  206c6172
0001ec  67652065
0001f0  6e6f7567
0001f4  682e2025
0001f8  64206279
0001fc  74657320
000200  69732072
000204  657175  
000207  69726564          DCB      "ired.",0
00020b  2e00    
00020d  00                DCB      0
00020e  00                DCB      0
00020f  00                DCB      0
                  |L97.528|
                          DCD      0x01000001

                          AREA ||area_number.98||, COMGROUP=_ZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.98||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4699              MOV      r9,r3
000008  4617              MOV      r7,r2
00000a  4688              MOV      r8,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  9d0c              LDR      r5,[sp,#0x30]
000010  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000014  f1a0040c          SUB      r4,r0,#0xc
000018  f04f30ff          MOV      r0,#0xffffffff
00001c  6020              STR      r0,[r4,#0]
00001e  2600              MOVS     r6,#0
000020  6060              STR      r0,[r4,#4]
000022  6126              STR      r6,[r4,#0x10]
000024  60a0              STR      r0,[r4,#8]
000026  2f00              CMP      r7,#0
000028  bfa8              IT       GE
00002a  f1b80f00          CMPGE    r8,#0
00002e  da0a              BGE      |L104.70|
000030  217d              MOVS     r1,#0x7d
000032  4813              LDR      r0,|L104.128|
000034  e9cd0100          STRD     r0,r1,[sp,#0]
000038  a312              ADR      r3,|L104.132|
00003a  a220              ADR      r2,|L104.188|
00003c  a123              ADR      r1,|L104.204|
00003e  2005              MOVS     r0,#5
000040  f7fffffe          BL       _Anki_Log
000044  e017              B        |L104.118|
                  |L104.70|
000046  4629              MOV      r1,r5
000048  4638              MOV      r0,r7
00004a  9603              STR      r6,[sp,#0xc]
00004c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferE ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)
000050  a903              ADD      r1,sp,#0xc
000052  e9cd1500          STRD     r1,r5,[sp,#0]
000056  4602              MOV      r2,r0
000058  464b              MOV      r3,r9
00005a  9602              STR      r6,[sp,#8]
00005c  4641              MOV      r1,r8
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEb ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)
000064  9903              LDR      r1,[sp,#0xc]
000066  4603              MOV      r3,r0
000068  9100              STR      r1,[sp,#0]
00006a  9501              STR      r5,[sp,#4]
00006c  463a              MOV      r2,r7
00006e  4641              MOV      r1,r8
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferE ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)
                  |L104.118|
000076  b005              ADD      sp,sp,#0x14
000078  4620              MOV      r0,r4
00007a  e8bd83f0          POP      {r4-r9,pc}
                          ENDP

00007e  0000              DCW      0x0000
                  |L104.128|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L104.132|
000084  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000088  6f726574
00008c  6563685c
000090  636f6d6d
000094  6f6e5c69
000098  6e636c75
00009c  64655c61
0000a0  6e6b692f
0000a4  636f6d6d
0000a8  6f6e2f72
0000ac  6f626f74
0000b0  2f617272
0000b4  617932  
0000b7  642e6800          DCB      "d.h",0
0000bb  00                DCB      0
                  |L104.188|
0000bc  496e7661          DCB      "Invalid size",0
0000c0  6c696420
0000c4  73697a65
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L104.204|
0000cc  41727261          DCB      "Array<Type>::Array",0
0000d0  793c5479
0000d4  70653e3a
0000d8  3a417272
0000dc  617900  
0000df  00                DCB      0

                          AREA ||area_number.105||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.105||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEclEiiii||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEclEiiii, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5ArrayIfEclEiiii PROC ; Anki::Embedded::Array<float>::operator ()(int, int, int, int)
;;;401    
;;;402        template<typename Type> ArraySlice<Type> Array<Type>::operator() (s32 minY, s32 maxY, s32 minX, s32 maxX)
000000  b5f0              PUSH     {r4-r7,lr}
;;;403        {
000002  b097              SUB      sp,sp,#0x5c
000004  460d              MOV      r5,r1
000006  e9dd671c          LDRD     r6,r7,[sp,#0x70]
00000a  4694              MOV      r12,r2
;;;404          LinearSequence<s32> ySlice = IndexSequence<s32>(minY, 1, maxY, this->size[0]);
00000c  6809              LDR      r1,[r1,#0]
00000e  4604              MOV      r4,r0                 ;403
000010  9100              STR      r1,[sp,#0]
000012  2201              MOVS     r2,#1
000014  4661              MOV      r1,r12
000016  a811              ADD      r0,sp,#0x44
000018  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
;;;405          LinearSequence<s32> xSlice = IndexSequence<s32>(minX, 1, maxX, this->size[1]);
00001c  6869              LDR      r1,[r5,#4]
00001e  9100              STR      r1,[sp,#0]
000020  463b              MOV      r3,r7
000022  2201              MOVS     r2,#1
000024  4631              MOV      r1,r6
000026  a814              ADD      r0,sp,#0x50
000028  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
;;;406    
;;;407          ArraySlice<Type> slice(*this, ySlice, xSlice);
00002c  a914              ADD      r1,sp,#0x50
00002e  a811              ADD      r0,sp,#0x44
000030  e9cd0102          STRD     r0,r1,[sp,#8]
000034  e9d50103          LDRD     r0,r1,[r5,#0xc]
000038  e9cd0100          STRD     r0,r1,[sp,#0]
00003c  e9d51200          LDRD     r1,r2,[r5,#0]
000040  a804              ADD      r0,sp,#0x10
000042  68ab              LDR      r3,[r5,#8]
000044  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEERKNS0_14LinearSequenceIiEES8_ ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
000048  f10d0e10          ADD      lr,sp,#0x10
00004c  e8be10ef          LDM      lr!,{r0-r3,r5-r7,r12}
000050  e88410ef          STM      r4,{r0-r3,r5-r7,r12}
000054  f10d0e30          ADD      lr,sp,#0x30
000058  3420              ADDS     r4,r4,#0x20
00005a  e8be100f          LDM      lr!,{r0-r3,r12}
00005e  e8a4100f          STM      r4!,{r0-r3,r12}
;;;408    
;;;409          return slice;
;;;410        }
000062  b017              ADD      sp,sp,#0x5c
000064  bdf0              POP      {r4-r7,pc}
;;;411    
                          ENDP


                          AREA ||area_number.112||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEclEiiii, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEclEiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.112||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEclEiiii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIhEclEiiii||, COMGROUP=_ZN4Anki8Embedded5ArrayIhEclEiiii, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5ArrayIhEclEiiii PROC ; Anki::Embedded::Array<unsigned char>::operator ()(int, int, int, int)
;;;401    
;;;402        template<typename Type> ArraySlice<Type> Array<Type>::operator() (s32 minY, s32 maxY, s32 minX, s32 maxX)
000000  b5f0              PUSH     {r4-r7,lr}
;;;403        {
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  e9dd671a          LDRD     r6,r7,[sp,#0x68]
;;;404          LinearSequence<s32> ySlice = IndexSequence<s32>(minY, 1, maxY, this->size[0]);
00000a  6808              LDR      r0,[r1,#0]
00000c  4694              MOV      r12,r2                ;403
00000e  460d              MOV      r5,r1                 ;403
000010  9000              STR      r0,[sp,#0]
000012  2201              MOVS     r2,#1
000014  4661              MOV      r1,r12
000016  a811              ADD      r0,sp,#0x44
000018  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
;;;405          LinearSequence<s32> xSlice = IndexSequence<s32>(minX, 1, maxX, this->size[1]);
00001c  6868              LDR      r0,[r5,#4]
00001e  9000              STR      r0,[sp,#0]
000020  463b              MOV      r3,r7
000022  2201              MOVS     r2,#1
000024  4631              MOV      r1,r6
000026  a80e              ADD      r0,sp,#0x38
000028  f7fffffe          BL       _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
00002c  e8b5104e          LDM      r5!,{r1-r3,r6,r12}
000030  e9dd0511          LDRD     r0,r5,[sp,#0x44]
000034  9f13              LDR      r7,[sp,#0x4c]
000036  9703              STR      r7,[sp,#0xc]
000038  e9cd0501          STRD     r0,r5,[sp,#4]
00003c  e9dd050e          LDRD     r0,r5,[sp,#0x38]
000040  e9cd0504          STRD     r0,r5,[sp,#0x10]
000044  9f10              LDR      r7,[sp,#0x40]
000046  a807              ADD      r0,sp,#0x1c
000048  9706              STR      r7,[sp,#0x18]
00004a  e8a0104e          STM      r0!,{r1-r3,r6,r12}
00004e  2500              MOVS     r5,#0
000050  2900              CMP      r1,#0
000052  bfc8              IT       GT
000054  2a00              CMPGT    r2,#0
000056  dd25              BLE      |L118.164|
000058  fb01f002          MUL      r0,r1,r2
00005c  b310              CBZ      r0,|L118.164|
00005e  2000              MOVS     r0,#0
000060  fb00c003          MLA      r0,r0,r3,r12
000064  900c              STR      r0,[sp,#0x30]
                  |L118.102|
000066  2900              CMP      r1,#0
000068  bfc8              IT       GT
00006a  2a00              CMPGT    r2,#0
00006c  dd1c              BLE      |L118.168|
00006e  fb01f002          MUL      r0,r1,r2
000072  b1c8              CBZ      r0,|L118.168|
000074  2000              MOVS     r0,#0
000076  fb00c003          MLA      r0,r0,r3,r12
00007a  900d              STR      r0,[sp,#0x34]
                  |L118.124|
;;;406    
;;;407          ArraySlice<Type> slice(*this, ySlice, xSlice);
;;;408    
;;;409          return slice;
00007c  f10d0e04          ADD      lr,sp,#4
000080  463d              MOV      r5,r7
000082  e8be100f          LDM      lr!,{r0-r3,r12}
000086  e9dd6707          LDRD     r6,r7,[sp,#0x1c]
00008a  61e7              STR      r7,[r4,#0x1c]
00008c  e884100f          STM      r4,{r0-r3,r12}
000090  e9c45605          STRD     r5,r6,[r4,#0x14]
000094  ad09              ADD      r5,sp,#0x24
000096  3420              ADDS     r4,r4,#0x20
000098  e8b5100f          LDM      r5!,{r0-r3,r12}
00009c  e8a4100f          STM      r4!,{r0-r3,r12}
;;;410        }
0000a0  b015              ADD      sp,sp,#0x54
0000a2  bdf0              POP      {r4-r7,pc}
                  |L118.164|
0000a4  950c              STR      r5,[sp,#0x30]
0000a6  e7de              B        |L118.102|
                  |L118.168|
0000a8  950d              STR      r5,[sp,#0x34]
0000aa  e7e7              B        |L118.124|
;;;411    
                          ENDP


                          AREA ||area_number.119||, COMGROUP=_ZN4Anki8Embedded5ArrayIhEclEiiii, LINKORDER=||t._ZN4Anki8Embedded5ArrayIhEclEiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.119||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIhEclEiiii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded10ArraySliceIfEC2ENS0_5ArrayIfEE                  ; Alternate entry point ; Anki::Embedded::ArraySlice<float>::ArraySlice__sub_object(Anki::Embedded::Array<float>)
                  _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE PROC ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
;;;78     
;;;79         template<typename Type> ArraySlice<Type>::ArraySlice(Array<Type> array)
;;;80           : ConstArraySlice<Type>(array)
;;;81         {
;;;82           if(array.get_numElements() == 0) {
;;;83             this->arrayData = NULL;
;;;84           } else {
;;;85             this->arrayData = array.Pointer(0,0);
;;;86           }
;;;87         }
;;;88     
000000  b40f              PUSH     {r0-r3}
000002  b510              PUSH     {r4,lr}
000004  a903              ADD      r1,sp,#0xc
000006  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
00000a  9903              LDR      r1,[sp,#0xc]
00000c  2900              CMP      r1,#0
00000e  bfc4              ITT      GT
000010  9904              LDRGT    r1,[sp,#0x10]
000012  2900              CMPGT    r1,#0
000014  dd0c              BLE      |L125.48|
000016  e9dd1203          LDRD     r1,r2,[sp,#0xc]
00001a  4351              MULS     r1,r2,r1
00001c  b141              CBZ      r1,|L125.48|
00001e  9b05              LDR      r3,[sp,#0x14]
000020  9a07              LDR      r2,[sp,#0x1c]
000022  2100              MOVS     r1,#0
000024  fb012103          MLA      r1,r1,r3,r2
                  |L125.40|
000028  6301              STR      r1,[r0,#0x30]
00002a  bc10              POP      {r4}
00002c  f85dfb14          LDR      pc,[sp],#0x14
                  |L125.48|
000030  2100              MOVS     r1,#0
000032  e7f9              B        |L125.40|
                          ENDP


                          AREA ||area_number.126||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.126||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ERNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ERNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ERNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Meshgrid<float>::EvaluateX2(Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
;;;208    
;;;209        template<typename Type> Array<Type> Meshgrid<Type>::EvaluateX2(MemoryStack &memory, const Flags::Buffer flags) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;210        {
000004  4688              MOV      r8,r1
000006  b0a1              SUB      sp,sp,#0x84
000008  4694              MOV      r12,r2
00000a  68c9              LDR      r1,[r1,#0xc]
;;;211          const s32 numRows = this->yGridVector.get_size();
;;;212          const s32 numCols = this->xGridVector.get_size();
;;;213    
;;;214          Array<Type> out(numRows, numCols, memory, flags);
00000c  f8d82000          LDR      r2,[r8,#0]
000010  4606              MOV      r6,r0                 ;210
000012  9300              STR      r3,[sp,#0]
000014  4663              MOV      r3,r12
000016  a80f              ADD      r0,sp,#0x3c
000018  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001c  e9dd0112          LDRD     r0,r1,[sp,#0x48]
000020  e9cd0100          STRD     r0,r1,[sp,#0]
;;;215    
;;;216          this->EvaluateX2(out);
000024  e9dd120f          LDRD     r1,r2,[sp,#0x3c]
000028  a814              ADD      r0,sp,#0x50
00002a  9b11              LDR      r3,[sp,#0x44]
00002c  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
000030  e89012be          LDM      r0,{r1-r5,r7,r9,r12}
000034  f10d0a08          ADD      r10,sp,#8
000038  e8aa12be          STM      r10!,{r1-r5,r7,r9,r12}
00003c  f1000120          ADD      r1,r0,#0x20
000040  6b00              LDR      r0,[r0,#0x30]
000042  e891100e          LDM      r1,{r1-r3,r12}
000046  930c              STR      r3,[sp,#0x30]
000048  e9cdc00d          STRD     r12,r0,[sp,#0x34]
00004c  e9cd120a          STRD     r1,r2,[sp,#0x28]
000050  af08              ADD      r7,sp,#0x20
000052  4638              MOV      r0,r7
000054  f8d8500c          LDR      r5,[r8,#0xc]
000058  f8d84000          LDR      r4,[r8,#0]
00005c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000060  0001              MOVS     r1,r0
000062  4825              LDR      r0,|L132.248|
000064  d010              BEQ      |L132.136|
000066  9902              LDR      r1,[sp,#8]
000068  42a9              CMP      r1,r5
00006a  bf04              ITT      EQ
00006c  9905              LDREQ    r1,[sp,#0x14]
00006e  42a1              CMPEQ    r1,r4
000070  d015              BEQ      |L132.158|
000072  f44f719f          MOV      r1,#0x13e
000076  e9cd0100          STRD     r0,r1,[sp,#0]
00007a  a320              ADR      r3,|L132.252|
00007c  a22e              ADR      r2,|L132.312|
00007e  a137              ADR      r1,|L132.348|
000080  2005              MOVS     r0,#5
000082  f7fffffe          BL       _Anki_Log
000086  e02f              B        |L132.232|
                  |L132.136|
000088  f240113b          MOV      r1,#0x13b
00008c  e9cd0100          STRD     r0,r1,[sp,#0]
000090  a31a              ADR      r3,|L132.252|
000092  a239              ADR      r2,|L132.376|
000094  a131              ADR      r1,|L132.348|
000096  2005              MOVS     r0,#5
000098  f7fffffe          BL       _Anki_Log
00009c  e024              B        |L132.232|
                  |L132.158|
00009e  e9dd3a03          LDRD     r3,r10,[sp,#0xc]
0000a2  e9dd9c06          LDRD     r9,r12,[sp,#0x18]
0000a6  ed981a01          VLDR     s2,[r8,#4]
0000aa  edd80a02          VLDR     s1,[r8,#8]
0000ae  f04f0800          MOV      r8,#0
0000b2  2d00              CMP      r5,#0
0000b4  dd18              BLE      |L132.232|
                  |L132.182|
0000b6  68b9              LDR      r1,[r7,#8]
0000b8  6938              LDR      r0,[r7,#0x10]
0000ba  eeb00a41          VMOV.F32 s0,s2
0000be  fb030201          MLA      r2,r3,r1,r0
0000c2  2100              MOVS     r1,#0
0000c4  4648              MOV      r0,r9
0000c6  2c00              CMP      r4,#0
0000c8  dd09              BLE      |L132.222|
                  |L132.202|
0000ca  eb020b80          ADD      r11,r2,r0,LSL #2
0000ce  1c49              ADDS     r1,r1,#1
0000d0  ed8b0a00          VSTR     s0,[r11,#0]
0000d4  ee300a20          VADD.F32 s0,s0,s1
0000d8  4460              ADD      r0,r0,r12
0000da  428c              CMP      r4,r1
0000dc  dcf5              BGT      |L132.202|
                  |L132.222|
0000de  f1080801          ADD      r8,r8,#1
0000e2  4453              ADD      r3,r3,r10
0000e4  45a8              CMP      r8,r5
0000e6  dbe6              BLT      |L132.182|
                  |L132.232|
0000e8  ac0f              ADD      r4,sp,#0x3c
0000ea  e8b4100f          LDM      r4!,{r0-r3,r12}
0000ee  e8a6100f          STM      r6!,{r0-r3,r12}
;;;217    
;;;218          return out;
;;;219        }
0000f2  b021              ADD      sp,sp,#0x84
0000f4  e8bd8ff0          POP      {r4-r11,pc}
;;;220    
                          ENDP

                  |L132.248|
                          DCD      _ZZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ENS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Meshgrid<float>::EvaluateX2(Anki::Embedded::ArraySlice<float>) const::__PRETTY_FUNCTION__
                  |L132.252|
0000fc  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/sequen"
000100  6f726574
000104  6563685c
000108  636f6d6d
00010c  6f6e5c69
000110  6e636c75
000114  64655c61
000118  6e6b692f
00011c  636f6d6d
000120  6f6e2f72
000124  6f626f74
000128  2f736571
00012c  75656e  
00012f  6365732e          DCB      "ces.h",0
000133  6800    
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L132.312|
000138  41727261          DCB      "Array out is not the correct size",0
00013c  79206f75
000140  74206973
000144  206e6f74
000148  20746865
00014c  20636f72
000150  72656374
000154  2073697a
000158  6500    
00015a  00                DCB      0
00015b  00                DCB      0
                  |L132.348|
00015c  4d657368          DCB      "Meshgrid<Type>::Evaluate",0
000160  67726964
000164  3c547970
000168  653e3a3a
00016c  4576616c
000170  75617465
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
                  |L132.376|
000178  496e7661          DCB      "Invalid array",0
00017c  6c696420
000180  61727261
000184  7900    
000186  00                DCB      0
000187  00                DCB      0

                          AREA ||area_number.133||, COMGROUP=_ZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ERNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ERNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.133||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ERNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ERNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ERNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ERNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Meshgrid<float>::EvaluateY2(Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) const
;;;232    
;;;233        template<typename Type> Array<Type> Meshgrid<Type>::EvaluateY2(MemoryStack &memory, const Flags::Buffer flags) const
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;234        {
000004  4688              MOV      r8,r1
000006  b0a1              SUB      sp,sp,#0x84
000008  4694              MOV      r12,r2
00000a  68c9              LDR      r1,[r1,#0xc]
;;;235          const s32 numRows = this->yGridVector.get_size();
;;;236          const s32 numCols = this->xGridVector.get_size();
;;;237    
;;;238          Array<Type> out(numRows, numCols, memory, flags);
00000c  f8d82000          LDR      r2,[r8,#0]
000010  4606              MOV      r6,r0                 ;234
000012  9300              STR      r3,[sp,#0]
000014  4663              MOV      r3,r12
000016  a80f              ADD      r0,sp,#0x3c
000018  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001c  e9dd0112          LDRD     r0,r1,[sp,#0x48]
000020  e9cd0100          STRD     r0,r1,[sp,#0]
;;;239    
;;;240          this->EvaluateY2(out);
000024  e9dd120f          LDRD     r1,r2,[sp,#0x3c]
000028  a814              ADD      r0,sp,#0x50
00002a  9b11              LDR      r3,[sp,#0x44]
00002c  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEE ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>)
000030  e89012be          LDM      r0,{r1-r5,r7,r9,r12}
000034  f10d0a08          ADD      r10,sp,#8
000038  e8aa12be          STM      r10!,{r1-r5,r7,r9,r12}
00003c  f1000120          ADD      r1,r0,#0x20
000040  6b00              LDR      r0,[r0,#0x30]
000042  e891100e          LDM      r1,{r1-r3,r12}
000046  930c              STR      r3,[sp,#0x30]
000048  e9cdc00d          STRD     r12,r0,[sp,#0x34]
00004c  e9cd120a          STRD     r1,r2,[sp,#0x28]
000050  af08              ADD      r7,sp,#0x20
000052  4638              MOV      r0,r7
000054  f8d8500c          LDR      r5,[r8,#0xc]
000058  f8d84000          LDR      r4,[r8,#0]
00005c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000060  0001              MOVS     r1,r0
000062  4824              LDR      r0,|L139.244|
000064  d010              BEQ      |L139.136|
000066  9902              LDR      r1,[sp,#8]
000068  42a9              CMP      r1,r5
00006a  bf04              ITT      EQ
00006c  9905              LDREQ    r1,[sp,#0x14]
00006e  42a1              CMPEQ    r1,r4
000070  d015              BEQ      |L139.158|
000072  f24011ad          MOV      r1,#0x1ad
000076  e9cd0100          STRD     r0,r1,[sp,#0]
00007a  a31f              ADR      r3,|L139.248|
00007c  a22d              ADR      r2,|L139.308|
00007e  a136              ADR      r1,|L139.344|
000080  2005              MOVS     r0,#5
000082  f7fffffe          BL       _Anki_Log
000086  e02d              B        |L139.228|
                  |L139.136|
000088  f44f71d5          MOV      r1,#0x1aa
00008c  e9cd0100          STRD     r0,r1,[sp,#0]
000090  a319              ADR      r3,|L139.248|
000092  a238              ADR      r2,|L139.372|
000094  a130              ADR      r1,|L139.344|
000096  2005              MOVS     r0,#5
000098  f7fffffe          BL       _Anki_Log
00009c  e022              B        |L139.228|
                  |L139.158|
00009e  e9dd3a03          LDRD     r3,r10,[sp,#0xc]
0000a2  e9dd9c06          LDRD     r9,r12,[sp,#0x18]
0000a6  ed980a04          VLDR     s0,[r8,#0x10]
0000aa  edd80a05          VLDR     s1,[r8,#0x14]
0000ae  f04f0800          MOV      r8,#0
0000b2  2d00              CMP      r5,#0
0000b4  dd16              BLE      |L139.228|
                  |L139.182|
0000b6  68b9              LDR      r1,[r7,#8]
0000b8  6938              LDR      r0,[r7,#0x10]
0000ba  fb030201          MLA      r2,r3,r1,r0
0000be  2100              MOVS     r1,#0
0000c0  4648              MOV      r0,r9
0000c2  2c00              CMP      r4,#0
0000c4  dd07              BLE      |L139.214|
                  |L139.198|
0000c6  eb020b80          ADD      r11,r2,r0,LSL #2
0000ca  1c49              ADDS     r1,r1,#1
0000cc  ed8b0a00          VSTR     s0,[r11,#0]
0000d0  4460              ADD      r0,r0,r12
0000d2  428c              CMP      r4,r1
0000d4  dcf7              BGT      |L139.198|
                  |L139.214|
0000d6  ee300a20          VADD.F32 s0,s0,s1
0000da  f1080801          ADD      r8,r8,#1
0000de  4453              ADD      r3,r3,r10
0000e0  45a8              CMP      r8,r5
0000e2  dbe8              BLT      |L139.182|
                  |L139.228|
0000e4  ac0f              ADD      r4,sp,#0x3c
0000e6  e8b4100f          LDM      r4!,{r0-r3,r12}
0000ea  e8a6100f          STM      r6!,{r0-r3,r12}
;;;241    
;;;242          return out;
;;;243        }
0000ee  b021              ADD      sp,sp,#0x84
0000f0  e8bd8ff0          POP      {r4-r11,pc}
;;;244    
                          ENDP

                  |L139.244|
                          DCD      _ZZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ENS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Meshgrid<float>::EvaluateY2(Anki::Embedded::ArraySlice<float>) const::__PRETTY_FUNCTION__
                  |L139.248|
0000f8  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/sequen"
0000fc  6f726574
000100  6563685c
000104  636f6d6d
000108  6f6e5c69
00010c  6e636c75
000110  64655c61
000114  6e6b692f
000118  636f6d6d
00011c  6f6e2f72
000120  6f626f74
000124  2f736571
000128  75656e  
00012b  6365732e          DCB      "ces.h",0
00012f  6800    
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
                  |L139.308|
000134  41727261          DCB      "Array out is not the correct size",0
000138  79206f75
00013c  74206973
000140  206e6f74
000144  20746865
000148  20636f72
00014c  72656374
000150  2073697a
000154  6500    
000156  00                DCB      0
000157  00                DCB      0
                  |L139.344|
000158  4d657368          DCB      "Meshgrid<Type>::Evaluate",0
00015c  67726964
000160  3c547970
000164  653e3a3a
000168  4576616c
00016c  75617465
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
                  |L139.372|
000174  496e7661          DCB      "Invalid array",0
000178  6c696420
00017c  61727261
000180  7900    
000182  00                DCB      0
000183  00                DCB      0

                          AREA ||area_number.140||, COMGROUP=_ZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ERNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ERNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.140||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ERNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE14get_numMatchesEv||, COMGROUP=_ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE14get_numMatchesEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE14get_numMatchesEv PROC ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::get_numMatches() const
;;;486    
;;;487        template<typename Type1, typename Operator, typename Type2> s32 Find<Type1,Operator,Type2>::get_numMatches() const
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;488        {
000004  4604              MOV      r4,r0
;;;489          if(!numMatchesComputed)
000006  7d40              LDRB     r0,[r0,#0x15]
000008  2800              CMP      r0,#0
00000a  d153              BNE      |L146.180|
00000c  2100              MOVS     r1,#0                 ;488
00000e  6820              LDR      r0,[r4,#0]            ;488
000010  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000014  4605              MOV      r5,r0                 ;488
000016  2101              MOVS     r1,#1                 ;488
000018  6820              LDR      r0,[r4,#0]            ;488
00001a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00001e  2200              MOVS     r2,#0                 ;488
000020  7921              LDRB     r1,[r4,#4]            ;488
000022  4613              MOV      r3,r2                 ;488
000024  b1e9              CBZ      r1,|L146.98|
000026  2d00              CMP      r5,#0                 ;488
000028  dd41              BLE      |L146.174|
00002a  6821              LDR      r1,[r4,#0]            ;488
00002c  690f              LDR      r7,[r1,#0x10]         ;488
00002e  688e              LDR      r6,[r1,#8]            ;488
                  |L146.48|
000030  2100              MOVS     r1,#0                 ;488
000032  fb037c06          MLA      r12,r3,r6,r7          ;488
000036  2800              CMP      r0,#0                 ;488
000038  bfc8              IT       GT                    ;488
00003a  ed940a03          VLDRGT   s0,[r4,#0xc]          ;488
00003e  dd0c              BLE      |L146.90|
                  |L146.64|
000040  eb0c0881          ADD      r8,r12,r1,LSL #2      ;488
000044  edd80a00          VLDR     s1,[r8,#0]            ;488
000048  eef40ac0          VCMPE.F32 s1,s0                 ;488
00004c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;488
000050  bfa8              IT       GE                    ;488
000052  1c52              ADDGE    r2,r2,#1              ;488
000054  1c49              ADDS     r1,r1,#1              ;488
000056  4281              CMP      r1,r0                 ;488
000058  dbf2              BLT      |L146.64|
                  |L146.90|
00005a  1c5b              ADDS     r3,r3,#1              ;488
00005c  42ab              CMP      r3,r5                 ;488
00005e  dbe7              BLT      |L146.48|
000060  e025              B        |L146.174|
                  |L146.98|
000062  2d00              CMP      r5,#0                 ;488
000064  dd23              BLE      |L146.174|
000066  6821              LDR      r1,[r4,#0]            ;488
000068  f8d1a010          LDR      r10,[r1,#0x10]        ;488
00006c  f8d19008          LDR      r9,[r1,#8]            ;488
000070  68a1              LDR      r1,[r4,#8]            ;488
000072  f8d18010          LDR      r8,[r1,#0x10]         ;488
000076  688f              LDR      r7,[r1,#8]            ;488
                  |L146.120|
000078  fb03ac09          MLA      r12,r3,r9,r10         ;488
00007c  fb038607          MLA      r6,r3,r7,r8           ;488
000080  2100              MOVS     r1,#0                 ;488
000082  2800              CMP      r0,#0                 ;488
000084  dd10              BLE      |L146.168|
                  |L146.134|
000086  eb0c0b81          ADD      r11,r12,r1,LSL #2     ;488
00008a  eddb0a00          VLDR     s1,[r11,#0]           ;488
00008e  eb060b81          ADD      r11,r6,r1,LSL #2      ;488
000092  ed9b0a00          VLDR     s0,[r11,#0]           ;488
000096  eef40ac0          VCMPE.F32 s1,s0                 ;488
00009a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;488
00009e  bfa8              IT       GE                    ;488
0000a0  1c52              ADDGE    r2,r2,#1              ;488
0000a2  1c49              ADDS     r1,r1,#1              ;488
0000a4  4281              CMP      r1,r0                 ;488
0000a6  dbee              BLT      |L146.134|
                  |L146.168|
0000a8  1c5b              ADDS     r3,r3,#1              ;488
0000aa  42ab              CMP      r3,r5                 ;488
0000ac  dbe4              BLT      |L146.120|
                  |L146.174|
0000ae  2001              MOVS     r0,#1                 ;488
0000b0  61a2              STR      r2,[r4,#0x18]         ;488
0000b2  7560              STRB     r0,[r4,#0x15]         ;488
                  |L146.180|
;;;490            ComputeNumMatches();
;;;491    
;;;492          return numMatches;
0000b4  69a0              LDR      r0,[r4,#0x18]
;;;493        }
0000b6  e8bd9ff0          POP      {r4-r12,pc}
;;;494    
                          ENDP


                          AREA ||area_number.147||, COMGROUP=_ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE14get_numMatchesEv, LINKORDER=||t._ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE14get_numMatchesEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.147||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE14get_numMatchesEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_i||, COMGROUP=_ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_i, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_i PROC ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::SetArray<float>(Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, int) const
;;;83           // Matlab equivalent for findWhichDimension==1: out = in(:, comparison);
;;;84           template<typename ArrayType> Result SetArray(Array<ArrayType> &out, const Array<ArrayType> &in, const s32 findWhichDimension) const;
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  4607              MOV      r7,r0
000006  7d00              LDRB     r0,[r0,#0x14]
000008  b083              SUB      sp,sp,#0xc
00000a  469a              MOV      r10,r3
00000c  460d              MOV      r5,r1
00000e  4614              MOV      r4,r2
000010  2800              CMP      r0,#0
000012  d01a              BEQ      |L153.74|
000014  4610              MOV      r0,r2
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00001a  b1b0              CBZ      r0,|L153.74|
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000022  b190              CBZ      r0,|L153.74|
000024  6938              LDR      r0,[r7,#0x10]
000026  2801              CMP      r0,#1
000028  d01f              BEQ      |L153.106|
00002a  f44f71a3          MOV      r1,#0x146
00002e  48c6              LDR      r0,|L153.840|
000030  e9cd0100          STRD     r0,r1,[sp,#0]
000034  a3c5              ADR      r3,|L153.844|
000036  4ad2              LDR      r2,|L153.896|
000038  a1d2              ADR      r1,|L153.900|
00003a  2005              MOVS     r0,#5
00003c  f7fffffe          BL       _Anki_Log
000040  b003              ADD      sp,sp,#0xc
000042  f04f60a0          MOV      r0,#0x5000000
000046  e8bd8ff0          POP      {r4-r11,pc}
                  |L153.74|
00004a  f2401143          MOV      r1,#0x143
00004e  48be              LDR      r0,|L153.840|
000050  e9cd0100          STRD     r0,r1,[sp,#0]
000054  a3bd              ADR      r3,|L153.844|
000056  a2cf              ADR      r2,|L153.916|
000058  a1ca              ADR      r1,|L153.900|
00005a  2005              MOVS     r0,#5
00005c  f7fffffe          BL       _Anki_Log
000060  b003              ADD      sp,sp,#0xc
000062  f04f6080          MOV      r0,#0x4000000
000066  e8bd8ff0          POP      {r4-r11,pc}
                  |L153.106|
00006a  f1ba0f00          CMP      r10,#0
00006e  bf18              IT       NE
000070  f1ba0f01          CMPNE    r10,#1
000074  d00f              BEQ      |L153.150|
000076  f2401149          MOV      r1,#0x149
00007a  48b3              LDR      r0,|L153.840|
00007c  e9cd0100          STRD     r0,r1,[sp,#0]
000080  a3b2              ADR      r3,|L153.844|
000082  a2c8              ADR      r2,|L153.932|
000084  a1bf              ADR      r1,|L153.900|
000086  2005              MOVS     r0,#5
000088  f7fffffe          BL       _Anki_Log
00008c  b003              ADD      sp,sp,#0xc
00008e  f04f7040          MOV      r0,#0x3000000
000092  e8bd8ff0          POP      {r4-r11,pc}
                  |L153.150|
000096  2100              MOVS     r1,#0
000098  6838              LDR      r0,[r7,#0]
00009a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00009e  4683              MOV      r11,r0
0000a0  2101              MOVS     r1,#1
0000a2  6838              LDR      r0,[r7,#0]
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000a8  4606              MOV      r6,r0
0000aa  2100              MOVS     r1,#0
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000b2  9001              STR      r0,[sp,#4]
0000b4  2101              MOVS     r1,#1
0000b6  4620              MOV      r0,r4
0000b8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000bc  9000              STR      r0,[sp,#0]
0000be  2100              MOVS     r1,#0
0000c0  4628              MOV      r0,r5
0000c2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000c6  4680              MOV      r8,r0
0000c8  2101              MOVS     r1,#1
0000ca  4628              MOV      r0,r5
0000cc  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000d0  4681              MOV      r9,r0
0000d2  4638              MOV      r0,r7
0000d4  f7fffffe          BL       _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE14get_numMatchesEv ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::get_numMatches() const
0000d8  f1ba0f00          CMP      r10,#0
0000dc  d014              BEQ      |L153.264|
0000de  9901              LDR      r1,[sp,#4]
0000e0  4588              CMP      r8,r1
0000e2  bf08              IT       EQ
0000e4  4581              CMPEQ    r9,r0
0000e6  d03a              BEQ      |L153.350|
0000e8  f44f71b0          MOV      r1,#0x160
0000ec  4896              LDR      r0,|L153.840|
0000ee  e9cd0100          STRD     r0,r1,[sp,#0]
0000f2  a396              ADR      r3,|L153.844|
0000f4  a2b5              ADR      r2,|L153.972|
0000f6  a1a3              ADR      r1,|L153.900|
0000f8  2005              MOVS     r0,#5
0000fa  f7fffffe          BL       _Anki_Log
0000fe  b003              ADD      sp,sp,#0xc
000100  f04f60a0          MOV      r0,#0x5000000
000104  e8bd8ff0          POP      {r4-r11,pc}
                  |L153.264|
000108  4580              CMP      r8,r0
00010a  bf04              ITT      EQ
00010c  9800              LDREQ    r0,[sp,#0]
00010e  4581              CMPEQ    r9,r0
000110  d00f              BEQ      |L153.306|
000112  f44f71ad          MOV      r1,#0x15a
000116  488c              LDR      r0,|L153.840|
000118  e9cd0100          STRD     r0,r1,[sp,#0]
00011c  a38b              ADR      r3,|L153.844|
00011e  a2ab              ADR      r2,|L153.972|
000120  a198              ADR      r1,|L153.900|
000122  2005              MOVS     r0,#5
000124  f7fffffe          BL       _Anki_Log
000128  b003              ADD      sp,sp,#0xc
00012a  f04f60a0          MOV      r0,#0x5000000
00012e  e8bd8ff0          POP      {r4-r11,pc}
                  |L153.306|
000132  45b3              CMP      r11,r6
000134  bfd8              IT       LE
000136  46b3              MOVLE    r11,r6
000138  9801              LDR      r0,[sp,#4]
00013a  4583              CMP      r11,r0
00013c  d025              BEQ      |L153.394|
00013e  f240115d          MOV      r1,#0x15d
000142  4881              LDR      r0,|L153.840|
000144  e9cd0100          STRD     r0,r1,[sp,#0]
000148  a380              ADR      r3,|L153.844|
00014a  a2a7              ADR      r2,|L153.1000|
00014c  a18d              ADR      r1,|L153.900|
00014e  2005              MOVS     r0,#5
000150  f7fffffe          BL       _Anki_Log
000154  b003              ADD      sp,sp,#0xc
000156  f04f60a0          MOV      r0,#0x5000000
00015a  e8bd8ff0          POP      {r4-r11,pc}
                  |L153.350|
00015e  45b3              CMP      r11,r6
000160  bfd8              IT       LE
000162  46b3              MOVLE    r11,r6
000164  9800              LDR      r0,[sp,#0]
000166  4583              CMP      r11,r0
000168  d00f              BEQ      |L153.394|
00016a  f2401163          MOV      r1,#0x163
00016e  4876              LDR      r0,|L153.840|
000170  e9cd0100          STRD     r0,r1,[sp,#0]
000174  a375              ADR      r3,|L153.844|
000176  a29c              ADR      r2,|L153.1000|
000178  a182              ADR      r1,|L153.900|
00017a  2005              MOVS     r0,#5
00017c  f7fffffe          BL       _Anki_Log
000180  b003              ADD      sp,sp,#0xc
000182  f04f60a0          MOV      r0,#0x5000000
000186  e8bd8ff0          POP      {r4-r11,pc}
                  |L153.394|
00018a  7938              LDRB     r0,[r7,#4]
00018c  2800              CMP      r0,#0
00018e  d065              BEQ      |L153.604|
000190  6838              LDR      r0,[r7,#0]
000192  f1ba0f00          CMP      r10,#0
000196  f04f0100          MOV      r1,#0
00019a  6902              LDR      r2,[r0,#0x10]
00019c  6880              LDR      r0,[r0,#8]
00019e  d02f              BEQ      |L153.512|
0001a0  fb012900          MLA      r9,r1,r0,r2
0001a4  2200              MOVS     r2,#0
0001a6  4611              MOV      r1,r2
0001a8  2e00              CMP      r6,#0
0001aa  dd56              BLE      |L153.602|
                  |L153.428|
0001ac  eb090081          ADD      r0,r9,r1,LSL #2
0001b0  ed970a03          VLDR     s0,[r7,#0xc]
0001b4  edd00a00          VLDR     s1,[r0,#0]
0001b8  eeb40ae0          VCMPE.F32 s0,s1
0001bc  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001c0  d81a              BHI      |L153.504|
0001c2  2000              MOVS     r0,#0
0001c4  f1b80f00          CMP      r8,#0
0001c8  dd15              BLE      |L153.502|
                  |L153.458|
0001ca  f8d5c008          LDR      r12,[r5,#8]
0001ce  692b              LDR      r3,[r5,#0x10]
0001d0  f8d4a008          LDR      r10,[r4,#8]
0001d4  fb00330c          MLA      r3,r0,r12,r3
0001d8  f8d4c010          LDR      r12,[r4,#0x10]
0001dc  eb030382          ADD      r3,r3,r2,LSL #2
0001e0  fb00cc0a          MLA      r12,r0,r10,r12
0001e4  eb0c0c81          ADD      r12,r12,r1,LSL #2
0001e8  1c40              ADDS     r0,r0,#1
0001ea  ed9c0a00          VLDR     s0,[r12,#0]
0001ee  4580              CMP      r8,r0
0001f0  ed830a00          VSTR     s0,[r3,#0]
0001f4  dce9              BGT      |L153.458|
                  |L153.502|
0001f6  1c52              ADDS     r2,r2,#1
                  |L153.504|
0001f8  1c49              ADDS     r1,r1,#1
0001fa  42b1              CMP      r1,r6
0001fc  dbd6              BLT      |L153.428|
0001fe  e06a              B        |L153.726|
                  |L153.512|
000200  fb012800          MLA      r8,r1,r0,r2
000204  2300              MOVS     r3,#0
000206  4619              MOV      r1,r3
000208  2e00              CMP      r6,#0
00020a  dd64              BLE      |L153.726|
                  |L153.524|
00020c  eb080081          ADD      r0,r8,r1,LSL #2
000210  ed970a03          VLDR     s0,[r7,#0xc]
000214  edd00a00          VLDR     s1,[r0,#0]
000218  eef40ac0          VCMPE.F32 s1,s0
00021c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000220  db18              BLT      |L153.596|
000222  68a2              LDR      r2,[r4,#8]
000224  6920              LDR      r0,[r4,#0x10]
000226  f8d5c008          LDR      r12,[r5,#8]
00022a  fb010202          MLA      r2,r1,r2,r0
00022e  6928              LDR      r0,[r5,#0x10]
000230  fb030c0c          MLA      r12,r3,r12,r0
000234  2000              MOVS     r0,#0
000236  f1b90f00          CMP      r9,#0
00023a  dd0a              BLE      |L153.594|
                  |L153.572|
00023c  eb020a80          ADD      r10,r2,r0,LSL #2
000240  ed9a0a00          VLDR     s0,[r10,#0]
000244  eb0c0a80          ADD      r10,r12,r0,LSL #2
000248  1c40              ADDS     r0,r0,#1
00024a  ed8a0a00          VSTR     s0,[r10,#0]
00024e  4581              CMP      r9,r0
000250  dcf4              BGT      |L153.572|
                  |L153.594|
000252  1c5b              ADDS     r3,r3,#1
                  |L153.596|
000254  1c49              ADDS     r1,r1,#1
000256  42b1              CMP      r1,r6
000258  dbd8              BLT      |L153.524|
                  |L153.602|
00025a  e03c              B        |L153.726|
                  |L153.604|
00025c  6838              LDR      r0,[r7,#0]
00025e  f1ba0f00          CMP      r10,#0
000262  f04f0100          MOV      r1,#0
000266  6902              LDR      r2,[r0,#0x10]
000268  6880              LDR      r0,[r0,#8]
00026a  d038              BEQ      |L153.734|
00026c  fb012900          MLA      r9,r1,r0,r2
000270  68b8              LDR      r0,[r7,#8]
000272  2e00              CMP      r6,#0
000274  6902              LDR      r2,[r0,#0x10]
000276  6880              LDR      r0,[r0,#8]
000278  fb012700          MLA      r7,r1,r0,r2
00027c  460a              MOV      r2,r1
00027e  dd2a              BLE      |L153.726|
                  |L153.640|
000280  eb090081          ADD      r0,r9,r1,LSL #2
000284  edd00a00          VLDR     s1,[r0,#0]
000288  eb070081          ADD      r0,r7,r1,LSL #2
00028c  ed900a00          VLDR     s0,[r0,#0]
000290  eeb40ae0          VCMPE.F32 s0,s1
000294  eef1fa10          VMRS     APSR_nzcv,FPSCR
000298  d81a              BHI      |L153.720|
00029a  2000              MOVS     r0,#0
00029c  f1b80f00          CMP      r8,#0
0002a0  dd15              BLE      |L153.718|
                  |L153.674|
0002a2  f8d5c008          LDR      r12,[r5,#8]
0002a6  692b              LDR      r3,[r5,#0x10]
0002a8  f8d4a008          LDR      r10,[r4,#8]
0002ac  fb00330c          MLA      r3,r0,r12,r3
0002b0  f8d4c010          LDR      r12,[r4,#0x10]
0002b4  eb030382          ADD      r3,r3,r2,LSL #2
0002b8  fb00cc0a          MLA      r12,r0,r10,r12
0002bc  eb0c0c81          ADD      r12,r12,r1,LSL #2
0002c0  1c40              ADDS     r0,r0,#1
0002c2  ed9c0a00          VLDR     s0,[r12,#0]
0002c6  4580              CMP      r8,r0
0002c8  ed830a00          VSTR     s0,[r3,#0]
0002cc  dce9              BGT      |L153.674|
                  |L153.718|
0002ce  1c52              ADDS     r2,r2,#1
                  |L153.720|
0002d0  1c49              ADDS     r1,r1,#1
0002d2  42b1              CMP      r1,r6
0002d4  dbd4              BLT      |L153.640|
                  |L153.726|
0002d6  b003              ADD      sp,sp,#0xc
0002d8  2000              MOVS     r0,#0
0002da  e8bd8ff0          POP      {r4-r11,pc}
                  |L153.734|
0002de  fb012800          MLA      r8,r1,r0,r2
0002e2  68b8              LDR      r0,[r7,#8]
0002e4  2100              MOVS     r1,#0
0002e6  468c              MOV      r12,r1
0002e8  6902              LDR      r2,[r0,#0x10]
0002ea  6880              LDR      r0,[r0,#8]
0002ec  2e00              CMP      r6,#0
0002ee  fb012700          MLA      r7,r1,r0,r2
0002f2  ddf0              BLE      |L153.726|
                  |L153.756|
0002f4  eb080081          ADD      r0,r8,r1,LSL #2
0002f8  edd00a00          VLDR     s1,[r0,#0]
0002fc  eb070081          ADD      r0,r7,r1,LSL #2
000300  ed900a00          VLDR     s0,[r0,#0]
000304  eef40ac0          VCMPE.F32 s1,s0
000308  eef1fa10          VMRS     APSR_nzcv,FPSCR
00030c  db18              BLT      |L153.832|
00030e  68a2              LDR      r2,[r4,#8]
000310  6920              LDR      r0,[r4,#0x10]
000312  68ab              LDR      r3,[r5,#8]
000314  fb010202          MLA      r2,r1,r2,r0
000318  6928              LDR      r0,[r5,#0x10]
00031a  fb0c0303          MLA      r3,r12,r3,r0
00031e  2000              MOVS     r0,#0
000320  f1b90f00          CMP      r9,#0
000324  dd0a              BLE      |L153.828|
                  |L153.806|
000326  eb020a80          ADD      r10,r2,r0,LSL #2
00032a  ed9a0a00          VLDR     s0,[r10,#0]
00032e  eb030a80          ADD      r10,r3,r0,LSL #2
000332  1c40              ADDS     r0,r0,#1
000334  ed8a0a00          VSTR     s0,[r10,#0]
000338  4581              CMP      r9,r0
00033a  dcf4              BGT      |L153.806|
                  |L153.828|
00033c  f10c0c01          ADD      r12,r12,#1
                  |L153.832|
000340  1c49              ADDS     r1,r1,#1
000342  42b1              CMP      r1,r6
000344  dbd6              BLT      |L153.756|
000346  e7c6              B        |L153.726|
;;;85           template<typename ArrayType> Result SetArray(Array<ArrayType> &out, const ArrayType value, const s32 findWhichDimension) const;
;;;86     
;;;87           // Same as SetArray above, but also allocates the memory for out from MemoryStack memory
;;;88           template<typename ArrayType> Array<ArrayType> SetArray(const Array<ArrayType> &in, const s32 findWhichDimension, MemoryStack &memory) const;
;;;89     
;;;90           //template<typename ArrayType> Result SetArray(Array<ArrayType> &out, const Array<ArrayType> &input, s32 findWhichDimension, bool useFindForInput=false) const;
;;;91     
;;;92           //template<typename ArrayType> Result SetArray(Array<ArrayType> &out, const ConstArraySlice<ArrayType> &in) const;
;;;93     
;;;94           bool IsValid() const;
;;;95     
;;;96           // Return the number of elements where the expression is true
;;;97           // The first time this is called, it computes the number. Subsequent times use the stored value.
;;;98           s32 get_numMatches() const;
;;;99     
;;;100          // Return the min and max values for the X and Y dimensions
;;;101          // The first time this is called, it computes the number. Subsequent times use the stored value.
;;;102          const Rectangle<s32>& get_limits() const;
;;;103    
;;;104        protected:
;;;105          const Array<Type1> &array1;
;;;106    
;;;107          const bool compareWithValue;
;;;108          const Array<Type2> &array2;
;;;109          const Type2 value;
;;;110    
;;;111          s32 numOutputDimensions;
;;;112    
;;;113          bool isValid;
;;;114    
;;;115          mutable bool numMatchesComputed;
;;;116          mutable s32 numMatches;
;;;117    
;;;118          mutable bool limitsComputed;
;;;119          mutable Rectangle<s32> limits;
;;;120    
;;;121          void Initialize();
;;;122    
;;;123          // Compute the number of matches
;;;124          Result ComputeNumMatches() const;
;;;125    
;;;126          // Compute the min and max values for the X and Y dimensions, plus the number of matches
;;;127          Result ComputeLimits() const;
;;;128        }; // class FindLazy
;;;129      } // namespace Embedded
;;;130    } // namespace Anki
;;;131    
;;;132    #endif // _ANKICORETECHEMBEDDED_COMMON_FIND_DECLARATIONS_H_
;;;16     #include "anki/common/robot/array2d.h"
;;;1      /**
;;;17     #include "anki/common/robot/geometry.h"
;;;1      /**
;;;18     #include "anki/common/robot/comparisons.h"
;;;1      /**
;;;19     
;;;20     namespace Anki
;;;21     {
;;;22       namespace Embedded
;;;23       {
;;;24         // #pragma mark
;;;25     
;;;26         template<typename Type1, typename Operator, typename Type2> Find<Type1,Operator,Type2>::Find(const Array<Type1> &array1, const Array<Type2> &array2)
;;;27           : array1(array1), compareWithValue(false), array2(array2), value(static_cast<Type2>(0)), numOutputDimensions(0)
;;;28         {
;;;29           if(!AreValid(array1, array2) || !AreEqualSize(array1, array2)) {
;;;30             this->isValid = false;
;;;31             AnkiError("Find", "Invalid inputs");
;;;32             return;
;;;33           }
;;;34     
;;;35           Initialize();
;;;36         }
;;;37     
;;;38         template<typename Type1, typename Operator, typename Type2> Find<Type1,Operator,Type2>::Find(const Array<Type1> &array, const Type2 &value)
;;;39           : array1(array), compareWithValue(true), array2(array), value(value), numOutputDimensions(0)
;;;40           // array2 is initialized to array, but this is just because it has to point to something, though it should not be accessed
;;;41         {
;;;42           if(!array1.IsValid()) {
;;;43             this->isValid = false;
;;;44             AnkiError("Find", "Invalid inputs");
;;;45             return;
;;;46           }
;;;47     
;;;48           Initialize();
;;;49         }
;;;50     
;;;51         template<typename Type1, typename Operator, typename Type2> Result Find<Type1,Operator,Type2>::Evaluate(Array<s32> &indexes, MemoryStack &memory) const
;;;52         {
;;;53           AnkiConditionalErrorAndReturnValue(AreValid(*this, memory),
;;;54             RESULT_FAIL_INVALID_OBJECT, "Find.Evaluate", "Invalid objects");
;;;55     
;;;56           AnkiConditionalErrorAndReturnValue(this->numOutputDimensions == 1,
;;;57             RESULT_FAIL_INVALID_PARAMETER, "Find.Evaluate", "One-dimensional Evaluate only works with one-dimensional Array input");
;;;58     
;;;59           const s32 arrayHeight = array1.get_size(0);
;;;60           const s32 arrayWidth = array1.get_size(1);
;;;61     
;;;62           AnkiAssert(arrayHeight == 1);
;;;63     
;;;64           indexes = Array<s32>(1, this->get_numMatches(), memory);
;;;65     
;;;66           if(this->get_numMatches() == 0)
;;;67             return RESULT_OK;
;;;68     
;;;69           AnkiConditionalErrorAndReturnValue(AreValid(indexes),
;;;70             RESULT_FAIL_OUT_OF_MEMORY, "Find.Evaluate", "Invalid objects");
;;;71     
;;;72           s32 * const pIndexes = indexes.Pointer(0,0);
;;;73     
;;;74           s32 curIndex = 0;
;;;75     
;;;76           if(this->compareWithValue) {
;;;77             const s32 y = 0;
;;;78             const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;79     
;;;80             for(s32 x=0; x<arrayWidth; x++) {
;;;81               if(Operator::Compare(pArray1[x], value)) {
;;;82                 pIndexes[curIndex] = x;
;;;83                 curIndex++;
;;;84               }
;;;85             } // for(s32 x=0; x<arrayWidth; x++)
;;;86           } else { // if(this->compareWithValue)
;;;87             // These should be checked earlier
;;;88             AnkiAssert(AreEqualSize(array1, array2));
;;;89     
;;;90             const s32 y = 0;
;;;91             const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;92             const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;93     
;;;94             for(s32 x=0; x<arrayWidth; x++) {
;;;95               if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;96                 pIndexes[curIndex] = x;
;;;97                 curIndex++;
;;;98               }
;;;99             } // for(s32 x=0; x<arrayWidth; x++)
;;;100          } // if(this->compareWithValue) ... else
;;;101    
;;;102          return RESULT_OK;
;;;103        }
;;;104    
;;;105        template<typename Type1, typename Operator, typename Type2> Result Find<Type1,Operator,Type2>::Evaluate(Array<s32> &yIndexes, Array<s32> &xIndexes, MemoryStack &memory) const
;;;106        {
;;;107          AnkiConditionalErrorAndReturnValue(AreValid(*this, memory),
;;;108            RESULT_FAIL_INVALID_OBJECT, "Find.Evaluate", "Invalid objects");
;;;109    
;;;110          const s32 arrayHeight = array1.get_size(0);
;;;111          const s32 arrayWidth = array1.get_size(1);
;;;112    
;;;113          yIndexes = Array<s32>(1, this->get_numMatches(), memory);
;;;114          xIndexes = Array<s32>(1, this->get_numMatches(), memory);
;;;115    
;;;116          if(this->get_numMatches() == 0)
;;;117            return RESULT_OK;
;;;118    
;;;119          AnkiConditionalErrorAndReturnValue(AreValid(yIndexes, xIndexes),
;;;120            RESULT_FAIL_OUT_OF_MEMORY, "Find.Evaluate", "Invalid objects");
;;;121    
;;;122          s32 * const pYIndexes = yIndexes.Pointer(0,0);
;;;123          s32 * const pXIndexes = xIndexes.Pointer(0,0);
;;;124    
;;;125          s32 curIndex = 0;
;;;126    
;;;127          if(this->compareWithValue) {
;;;128            for(s32 y=0; y<arrayHeight; y++) {
;;;129              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;130    
;;;131              for(s32 x=0; x<arrayWidth; x++) {
;;;132                if(Operator::Compare(pArray1[x], value)) {
;;;133                  pYIndexes[curIndex] = y;
;;;134                  pXIndexes[curIndex] = x;
;;;135                  curIndex++;
;;;136                }
;;;137              } // for(s32 x=0; x<arrayWidth; x++)
;;;138            } // for(s32 y=0; y<arrayHeight; y++)
;;;139          } else { // if(this->compareWithValue)
;;;140            // These should be checked earlier
;;;141            AnkiAssert(AreEqualSize(array1, array2));
;;;142    
;;;143            for(s32 y=0; y<arrayHeight; y++) {
;;;144              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;145              const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;146    
;;;147              for(s32 x=0; x<arrayWidth; x++) {
;;;148                if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;149                  pYIndexes[curIndex] = y;
;;;150                  pXIndexes[curIndex] = x;
;;;151                  curIndex++;
;;;152                }
;;;153              } // for(s32 x=0; x<arrayWidth; x++)
;;;154            } // for(s32 y=0; y<arrayHeight; y++)
;;;155          } // if(this->compareWithValue) ... else
;;;156    
;;;157          return RESULT_OK;
;;;158        }
;;;159    
;;;160        template<typename Type1, typename Operator, typename Type2> void Find<Type1,Operator,Type2>::Initialize()
;;;161        {
;;;162          this->isValid = true;
;;;163    
;;;164          // If the input is a row vector, then it can be used for 1-dimensional indexing
;;;165          if(array1.get_size(0) == 1) {
;;;166            this->numOutputDimensions = 1;
;;;167          } else {
;;;168            this->numOutputDimensions = 2;
;;;169          }
;;;170    
;;;171          this->numMatchesComputed = false;
;;;172          this->limitsComputed = false;
;;;173    
;;;174          this->numMatches = -1;
;;;175          this->limits = Rectangle<s32>(-1, -1, -1, -1);
;;;176        }
;;;177    
;;;178        template<typename Type1, typename Operator, typename Type2> Result Find<Type1,Operator,Type2>::ComputeNumMatches() const
;;;179        {
;;;180          const s32 arrayHeight = array1.get_size(0);
;;;181          const s32 arrayWidth = array1.get_size(1);
;;;182    
;;;183          s32 newNumMatches = 0;
;;;184    
;;;185          if(this->compareWithValue) {
;;;186            for(s32 y=0; y<arrayHeight; y++) {
;;;187              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;188    
;;;189              for(s32 x=0; x<arrayWidth; x++) {
;;;190                if(Operator::Compare(pArray1[x], value)) {
;;;191                  newNumMatches++;
;;;192                }
;;;193              } // for(s32 x=0; x<arrayWidth; x++)
;;;194            } // for(s32 y=0; y<arrayHeight; y++)
;;;195          } else { // if(this->compareWithValue)
;;;196            // These should be checked earlier
;;;197            AnkiAssert(AreEqualSize(array1, array2));
;;;198    
;;;199            for(s32 y=0; y<arrayHeight; y++) {
;;;200              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;201              const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;202    
;;;203              for(s32 x=0; x<arrayWidth; x++) {
;;;204                if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;205                  newNumMatches++;
;;;206                }
;;;207              } // for(s32 x=0; x<arrayWidth; x++)
;;;208            } // for(s32 y=0; y<arrayHeight; y++)
;;;209          } // if(this->compareWithValue) ... else
;;;210    
;;;211          if(this->numMatchesComputed) {
;;;212            AnkiAssert(newNumMatches == this->numMatches); // This should only happen if the data is changed, which it shouldn't be
;;;213          }
;;;214    
;;;215          this->numMatches = newNumMatches;
;;;216          this->numMatchesComputed = true;
;;;217    
;;;218          return RESULT_OK;
;;;219        } // template<typename Type1, typename Operator, typename Type2> s32 Find<Type1,Operator,Type2>::ComputeNumMatches() const
;;;220    
;;;221        template<typename Type1, typename Operator, typename Type2> Result Find<Type1,Operator,Type2>::ComputeLimits() const
;;;222        {
;;;223          const s32 arrayHeight = array1.get_size(0);
;;;224          const s32 arrayWidth = array1.get_size(1);
;;;225    
;;;226          Rectangle<s32> newLimits(arrayWidth+1, -1, arrayHeight+1, -1);
;;;227          s32 newNumMatches = 0;
;;;228    
;;;229          if(this->compareWithValue) {
;;;230            for(s32 y=0; y<arrayHeight; y++) {
;;;231              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;232              for(s32 x=0; x<arrayWidth; x++) {
;;;233                if(Operator::Compare(pArray1[x], value)) {
;;;234                  newLimits.top = MIN(newLimits.top, y);
;;;235                  newLimits.bottom = MAX(newLimits.bottom, y);
;;;236                  newLimits.left = MIN(newLimits.left, x);
;;;237                  newLimits.right = MAX(newLimits.right, x);
;;;238                  newNumMatches++;
;;;239                }
;;;240              } // for(s32 x=0; x<arrayWidth; x++)
;;;241            } // for(s32 y=0; y<arrayHeight; y++)
;;;242          } else { // if(this->compareWithValue)
;;;243            // These should be checked earlier
;;;244            AnkiAssert(AreEqualSize(array1, array2));
;;;245    
;;;246            for(s32 y=0; y<arrayHeight; y++) {
;;;247              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;248              const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;249    
;;;250              for(s32 x=0; x<arrayWidth; x++) {
;;;251                if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;252                  newLimits.top = MIN(newLimits.top, y);
;;;253                  newLimits.bottom = MAX(newLimits.bottom, y);
;;;254                  newLimits.left = MIN(newLimits.left, x);
;;;255                  newLimits.right = MAX(newLimits.right, x);
;;;256                  newNumMatches++;
;;;257                }
;;;258              } // for(s32 x=0; x<arrayWidth; x++)
;;;259            } // for(s32 y=0; y<arrayHeight; y++)
;;;260          } // if(this->compareWithValue) ... else
;;;261    
;;;262          if(this->numMatchesComputed) {
;;;263            AnkiAssert(newNumMatches == this->numMatches); // This should only happen if the data is changed, which it shouldn't be
;;;264          }
;;;265          this->numMatches = newNumMatches;
;;;266          this->numMatchesComputed = true;
;;;267    
;;;268          if(this->limitsComputed) {
;;;269            AnkiAssert(newLimits == this->limits);
;;;270          }
;;;271          this->limits = newLimits;
;;;272          this->limitsComputed = true;
;;;273    
;;;274          return RESULT_OK;
;;;275        } // template<typename Type1, typename Operator, typename Type2> Rectangle<s32> Find<Type1,Operator,Type2>::ComputeLimits() const
;;;276    
;;;277        template<typename Type1, typename Operator, typename Type2> template<typename ArrayType> Result Find<Type1,Operator,Type2>::SetArray(Array<ArrayType> &out, const ArrayType value) const
;;;278        {
;;;279          const s32 arrayHeight = array1.get_size(0);
;;;280          const s32 arrayWidth = array1.get_size(1);
;;;281    
;;;282          AnkiConditionalErrorAndReturnValue(AreValid(*this, out),
;;;283            RESULT_FAIL_INVALID_OBJECT, "Find.SetArray", "Invalid objects");
;;;284    
;;;285          AnkiConditionalErrorAndReturnValue(AreEqualSize(array1, out),
;;;286            RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "out is not the same size as the input(s)");
;;;287    
;;;288          if(this->compareWithValue) {
;;;289            for(s32 y=0; y<arrayHeight; y++) {
;;;290              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;291    
;;;292              Type1 * const pOut = out.Pointer(y, 0);
;;;293    
;;;294              for(s32 x=0; x<arrayWidth; x++) {
;;;295                if(Operator::Compare(pArray1[x], value)) {
;;;296                  pOut[x] = value;
;;;297                }
;;;298              } // for(s32 x=0; x<arrayWidth; x++)
;;;299            } // for(s32 y=0; y<arrayHeight; y++)
;;;300          } else { // if(this->compareWithValue)
;;;301            // These should be checked earlier
;;;302            AnkiAssert(AreEqualSize(array1, array2));
;;;303    
;;;304            for(s32 y=0; y<arrayHeight; y++) {
;;;305              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;306              const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;307    
;;;308              Type1 * const pOut = out.Pointer(y, 0);
;;;309    
;;;310              for(s32 x=0; x<arrayWidth; x++) {
;;;311                if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;312                  pOut[x] = value;
;;;313                }
;;;314              } // for(s32 x=0; x<arrayWidth; x++)
;;;315            } // for(s32 y=0; y<arrayHeight; y++)
;;;316          } // if(this->compareWithValue) ... else
;;;317    
;;;318          return RESULT_OK;
;;;319        }
;;;320    
;;;321        template<typename Type1, typename Operator, typename Type2> template<typename ArrayType> Result Find<Type1,Operator,Type2>::SetArray(Array<ArrayType> &out, const Array<ArrayType> &in, const s32 findWhichDimension) const
;;;322        {
;;;323          AnkiConditionalErrorAndReturnValue(AreValid(*this, in, out),
;;;324            RESULT_FAIL_INVALID_OBJECT, "Find.SetArray", "Invalid objects");
;;;325    
;;;326          AnkiConditionalErrorAndReturnValue(this->numOutputDimensions == 1,
;;;327            RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "One-dimensional SetArray only works with one-dimensional Array input");
;;;328    
;;;329          AnkiConditionalErrorAndReturnValue(findWhichDimension == 0 || findWhichDimension == 1,
;;;330            RESULT_FAIL_INVALID_PARAMETER, "Find.SetArray", "findWhichDimension must be zero or one");
;;;331    
;;;332          const s32 array1Height = array1.get_size(0);
;;;333          const s32 array1Width = array1.get_size(1);
;;;334    
;;;335          const s32 inHeight = in.get_size(0);
;;;336          const s32 inWidth = in.get_size(1);
;;;337    
;;;338          const s32 outHeight = out.get_size(0);
;;;339          const s32 outWidth = out.get_size(1);
;;;340    
;;;341          const s32 numMatches = this->get_numMatches();
;;;342    
;;;343          AnkiAssert(array1Height == 1);
;;;344    
;;;345          if(findWhichDimension == 0) {
;;;346            AnkiConditionalErrorAndReturnValue(outHeight == numMatches && outWidth == inWidth,
;;;347              RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "out is not the correct size");
;;;348    
;;;349            AnkiConditionalErrorAndReturnValue(inHeight == MAX(array1Height, array1Width),
;;;350              RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "in is not the correct size");
;;;351          } else {
;;;352            AnkiConditionalErrorAndReturnValue(outHeight == inHeight && outWidth == numMatches,
;;;353              RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "out is not the correct size");
;;;354    
;;;355            AnkiConditionalErrorAndReturnValue(inWidth == MAX(array1Height, array1Width),
;;;356              RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "in is not the correct size");
;;;357          }
;;;358    
;;;359          // This is a two-deep nested set of binary if-thens. Each of the four "leaves" will iterate
;;;360          // through the entire array, and set the appropriate values.
;;;361          //
;;;362          // Levels:
;;;363          // 1. Is this a array-to-value comparison? (versus array-to-array)
;;;364          // 2. Will we use the comparisons to set dimension 0? (versus dimension 1)
;;;365          if(this->compareWithValue) {
;;;366            if(findWhichDimension == 0) {
;;;367              const Type1 * const pArray1 = array1.Pointer(0, 0);
;;;368    
;;;369              s32 outY = 0;
;;;370    
;;;371              // i iterates on both the width of Array array1 and the height of Array in
;;;372              for(s32 i=0; i<array1Width; i++) {
;;;373                if(Operator::Compare(pArray1[i], value)) {
;;;374                  const ArrayType * const pIn = in.Pointer(i, 0);
;;;375    
;;;376                  ArrayType * const pOut = out.Pointer(outY, 0);
;;;377    
;;;378                  for(s32 x=0; x<outWidth; x++) {
;;;379                    pOut[x] = pIn[x];
;;;380                  } // for(s32 x=0; x<array1Width; x++)
;;;381    
;;;382                  outY++;
;;;383                } // if(Operator::Compare(pArray1[x], value))
;;;384              } // for(s32 i=0; i<array1Width; i++)
;;;385            } else { // if(findWhichDimension == 0)
;;;386              const Type1 * const pArray1 = array1.Pointer(0, 0);
;;;387    
;;;388              s32 outX = 0;
;;;389    
;;;390              // i iterates on both the width of Array array1 and the width of Array in
;;;391              for(s32 i=0; i<array1Width; i++) {
;;;392                if(Operator::Compare(pArray1[i], value)) {
;;;393                  for(s32 y=0; y<outHeight; y++) {
;;;394                    ArrayType * const pOut = out.Pointer(y, outX);
;;;395                    const ArrayType * const pIn = in.Pointer(y, i);
;;;396    
;;;397                    *pOut = *pIn;
;;;398                  } // for(s32 y=0; y<outHeight; y++)
;;;399    
;;;400                  outX++;
;;;401                } // if(Operator::Compare(pArray1[i], value))
;;;402              } // for(s32 i=0; i<array1Width; i++)
;;;403            } // if(findWhichDimension == 0) ... else
;;;404          } else { // if(this->compareWithValue)
;;;405            // These should be checked earlier
;;;406            AnkiAssert(AreEqualSize(array1, array2));
;;;407    
;;;408            if(findWhichDimension == 0) {
;;;409              const Type1 * const pArray1 = array1.Pointer(0, 0);
;;;410              const Type1 * const pArray2 = array2.Pointer(0, 0);
;;;411    
;;;412              s32 outY = 0;
;;;413    
;;;414              // i iterates on the widths of Array array1 and Array array2, and the height of Array in
;;;415              for(s32 i=0; i<array1Width; i++) {
;;;416                if(Operator::Compare(pArray1[i], pArray2[i])) {
;;;417                  const ArrayType * const pIn = in.Pointer(i, 0);
;;;418    
;;;419                  ArrayType * const pOut = out.Pointer(outY, 0);
;;;420    
;;;421                  for(s32 x=0; x<outWidth; x++) {
;;;422                    pOut[x] = pIn[x];
;;;423                  } // for(s32 x=0; x<array1Width; x++)
;;;424    
;;;425                  outY++;
;;;426                } // if(Operator::Compare(pArray1[x], value))
;;;427              } // for(s32 i=0; i<array1Width; i++)
;;;428            } else { // if(findWhichDimension == 0)
;;;429              const Type1 * const pArray1 = array1.Pointer(0, 0);
;;;430              const Type1 * const pArray2 = array2.Pointer(0, 0);
;;;431    
;;;432              s32 outX = 0;
;;;433    
;;;434              // i iterates on the widths of Array array1, Array array2, and Array in
;;;435              for(s32 i=0; i<array1Width; i++) {
;;;436                if(Operator::Compare(pArray1[i], pArray2[i])) {
;;;437                  for(s32 y=0; y<outHeight; y++) {
;;;438                    ArrayType * const pOut = out.Pointer(y, outX);
;;;439                    const ArrayType * const pIn = in.Pointer(y, i);
;;;440    
;;;441                    *pOut = *pIn;
;;;442                  } // for(s32 y=0; y<outHeight; y++)
;;;443    
;;;444                  outX++;
;;;445                } // if(Operator::Compare(pArray1[i], value))
;;;446              } // for(s32 i=0; i<array1Width; i++)
;;;447            } // if(findWhichDimension == 0) ... else
;;;448          } // if(this->compareWithValue) ... else
;;;449    
;;;450          return RESULT_OK;
;;;451        }
;;;452    
                          ENDP

                  |L153.840|
                          DCD      _ZZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_iE19__PRETTY_FUNCTION__ ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::SetArray<float>(Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, int) const::__PRETTY_FUNCTION__
                  |L153.844|
00034c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/find.h"
000350  6f726574
000354  6563685c
000358  636f6d6d
00035c  6f6e5c69
000360  6e636c75
000364  64655c61
000368  6e6b692f
00036c  636f6d6d
000370  6f6e2f72
000374  6f626f74
000378  2f66696e
00037c  642e68  
00037f  00                DCB      0
                  |L153.896|
                          DCD      ||.constdata||+0x434
                  |L153.900|
000384  46696e64          DCB      "Find.SetArray",0
000388  2e536574
00038c  41727261
000390  7900    
000392  00                DCB      0
000393  00                DCB      0
                  |L153.916|
000394  496e7661          DCB      "Invalid objects",0
000398  6c696420
00039c  6f626a65
0003a0  63747300
                  |L153.932|
0003a4  66696e64          DCB      "findWhichDimension must be zero or one",0
0003a8  57686963
0003ac  6844696d
0003b0  656e7369
0003b4  6f6e206d
0003b8  75737420
0003bc  6265207a
0003c0  65726f20
0003c4  6f72206f
0003c8  6e6500  
0003cb  00                DCB      0
                  |L153.972|
0003cc  6f757420          DCB      "out is not the correct size",0
0003d0  6973206e
0003d4  6f742074
0003d8  68652063
0003dc  6f727265
0003e0  63742073
0003e4  697a6500
                  |L153.1000|
0003e8  696e2069          DCB      "in is not the correct size",0
0003ec  73206e6f
0003f0  74207468
0003f4  6520636f
0003f8  72726563
0003fc  74207369
000400  7a6500  
000403  00                DCB      0

                          AREA ||area_number.154||, COMGROUP=_ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_i, LINKORDER=||t._ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.154||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_i||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS0_5ArrayIT_EERKS9_iRNS0_11MemoryStackE||, COMGROUP=_ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS0_5ArrayIT_EERKS9_iRNS0_11MemoryStackE, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS0_5ArrayIT_EERKS9_iRNS0_11MemoryStackE PROC ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::SetArray<float>(const Anki::Embedded::Array<T1>&, int, Anki::Embedded::MemoryStack&) const
;;;87           // Same as SetArray above, but also allocates the memory for out from MemoryStack memory
;;;88           template<typename ArrayType> Array<ArrayType> SetArray(const Array<ArrayType> &in, const s32 findWhichDimension, MemoryStack &memory) const;
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b08c              SUB      sp,sp,#0x30
000006  4604              MOV      r4,r0
000008  461d              MOV      r5,r3
00000a  4617              MOV      r7,r2
00000c  4688              MOV      r8,r1
00000e  4608              MOV      r0,r1
000010  9e14              LDR      r6,[sp,#0x50]
000012  f7fffffe          BL       _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE14get_numMatchesEv ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::get_numMatches() const
000016  4681              MOV      r9,r0
000018  a805              ADD      r0,sp,#0x14
00001a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
00001e  f04f31ff          MOV      r1,#0xffffffff
000022  f8401d0c          STR      r1,[r0,#-0xc]!
000026  6041              STR      r1,[r0,#4]
000028  6081              STR      r1,[r0,#8]
00002a  2100              MOVS     r1,#0
00002c  6101              STR      r1,[r0,#0x10]
00002e  460b              MOV      r3,r1
000030  460a              MOV      r2,r1
000032  2d00              CMP      r5,#0
000034  f04f0101          MOV      r1,#1
000038  a801              ADD      r0,sp,#4
00003a  d02d              BEQ      |L160.152|
00003c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000040  4682              MOV      r10,r0
000042  2100              MOVS     r1,#0
000044  4638              MOV      r0,r7
000046  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00004a  f8da1000          LDR      r1,[r10,#0]
00004e  9100              STR      r1,[sp,#0]
000050  4601              MOV      r1,r0
000052  4633              MOV      r3,r6
000054  464a              MOV      r2,r9
000056  a807              ADD      r0,sp,#0x1c
000058  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00005c  4601              MOV      r1,r0
00005e  a802              ADD      r0,sp,#8
000060  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEaSERKS2_ ; Anki::Embedded::Array<float>::operator =(const Anki::Embedded::Array<float>&)
                  |L160.100|
000064  462b              MOV      r3,r5
000066  463a              MOV      r2,r7
000068  a902              ADD      r1,sp,#8
00006a  4640              MOV      r0,r8
00006c  f7fffffe          BL       _ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_i ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::SetArray<float>(Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, int) const
000070  b150              CBZ      r0,|L160.136|
000072  f240215e          MOV      r1,#0x25e
000076  4813              LDR      r0,|L160.196|
000078  e9cd0100          STRD     r0,r1,[sp,#0]
00007c  a312              ADR      r3,|L160.200|
00007e  a220              ADR      r2,|L160.256|
000080  a123              ADR      r1,|L160.272|
000082  2005              MOVS     r0,#5
000084  f7fffffe          BL       _Anki_Log
                  |L160.136|
000088  ad02              ADD      r5,sp,#8
00008a  e8b5100f          LDM      r5!,{r0-r3,r12}
00008e  e8a4100f          STM      r4!,{r0-r3,r12}
000092  b00c              ADD      sp,sp,#0x30
000094  e8bd87f0          POP      {r4-r10,pc}
                  |L160.152|
000098  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00009c  4682              MOV      r10,r0
00009e  2101              MOVS     r1,#1
0000a0  4638              MOV      r0,r7
0000a2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000a6  f8da1000          LDR      r1,[r10,#0]
0000aa  4602              MOV      r2,r0
0000ac  9100              STR      r1,[sp,#0]
0000ae  4633              MOV      r3,r6
0000b0  4649              MOV      r1,r9
0000b2  a807              ADD      r0,sp,#0x1c
0000b4  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0000b8  4601              MOV      r1,r0
0000ba  a802              ADD      r0,sp,#8
0000bc  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEaSERKS2_ ; Anki::Embedded::Array<float>::operator =(const Anki::Embedded::Array<float>&)
0000c0  e7d0              B        |L160.100|
;;;89     
;;;90           //template<typename ArrayType> Result SetArray(Array<ArrayType> &out, const Array<ArrayType> &input, s32 findWhichDimension, bool useFindForInput=false) const;
;;;91     
;;;92           //template<typename ArrayType> Result SetArray(Array<ArrayType> &out, const ConstArraySlice<ArrayType> &in) const;
;;;93     
;;;94           bool IsValid() const;
;;;95     
;;;96           // Return the number of elements where the expression is true
;;;97           // The first time this is called, it computes the number. Subsequent times use the stored value.
;;;98           s32 get_numMatches() const;
;;;99     
;;;100          // Return the min and max values for the X and Y dimensions
;;;101          // The first time this is called, it computes the number. Subsequent times use the stored value.
;;;102          const Rectangle<s32>& get_limits() const;
;;;103    
;;;104        protected:
;;;105          const Array<Type1> &array1;
;;;106    
;;;107          const bool compareWithValue;
;;;108          const Array<Type2> &array2;
;;;109          const Type2 value;
;;;110    
;;;111          s32 numOutputDimensions;
;;;112    
;;;113          bool isValid;
;;;114    
;;;115          mutable bool numMatchesComputed;
;;;116          mutable s32 numMatches;
;;;117    
;;;118          mutable bool limitsComputed;
;;;119          mutable Rectangle<s32> limits;
;;;120    
;;;121          void Initialize();
;;;122    
;;;123          // Compute the number of matches
;;;124          Result ComputeNumMatches() const;
;;;125    
;;;126          // Compute the min and max values for the X and Y dimensions, plus the number of matches
;;;127          Result ComputeLimits() const;
;;;128        }; // class FindLazy
;;;129      } // namespace Embedded
;;;130    } // namespace Anki
;;;131    
;;;132    #endif // _ANKICORETECHEMBEDDED_COMMON_FIND_DECLARATIONS_H_
;;;16     #include "anki/common/robot/array2d.h"
;;;1      /**
;;;17     #include "anki/common/robot/geometry.h"
;;;1      /**
;;;18     #include "anki/common/robot/comparisons.h"
;;;1      /**
;;;19     
;;;20     namespace Anki
;;;21     {
;;;22       namespace Embedded
;;;23       {
;;;24         // #pragma mark
;;;25     
;;;26         template<typename Type1, typename Operator, typename Type2> Find<Type1,Operator,Type2>::Find(const Array<Type1> &array1, const Array<Type2> &array2)
;;;27           : array1(array1), compareWithValue(false), array2(array2), value(static_cast<Type2>(0)), numOutputDimensions(0)
;;;28         {
;;;29           if(!AreValid(array1, array2) || !AreEqualSize(array1, array2)) {
;;;30             this->isValid = false;
;;;31             AnkiError("Find", "Invalid inputs");
;;;32             return;
;;;33           }
;;;34     
;;;35           Initialize();
;;;36         }
;;;37     
;;;38         template<typename Type1, typename Operator, typename Type2> Find<Type1,Operator,Type2>::Find(const Array<Type1> &array, const Type2 &value)
;;;39           : array1(array), compareWithValue(true), array2(array), value(value), numOutputDimensions(0)
;;;40           // array2 is initialized to array, but this is just because it has to point to something, though it should not be accessed
;;;41         {
;;;42           if(!array1.IsValid()) {
;;;43             this->isValid = false;
;;;44             AnkiError("Find", "Invalid inputs");
;;;45             return;
;;;46           }
;;;47     
;;;48           Initialize();
;;;49         }
;;;50     
;;;51         template<typename Type1, typename Operator, typename Type2> Result Find<Type1,Operator,Type2>::Evaluate(Array<s32> &indexes, MemoryStack &memory) const
;;;52         {
;;;53           AnkiConditionalErrorAndReturnValue(AreValid(*this, memory),
;;;54             RESULT_FAIL_INVALID_OBJECT, "Find.Evaluate", "Invalid objects");
;;;55     
;;;56           AnkiConditionalErrorAndReturnValue(this->numOutputDimensions == 1,
;;;57             RESULT_FAIL_INVALID_PARAMETER, "Find.Evaluate", "One-dimensional Evaluate only works with one-dimensional Array input");
;;;58     
;;;59           const s32 arrayHeight = array1.get_size(0);
;;;60           const s32 arrayWidth = array1.get_size(1);
;;;61     
;;;62           AnkiAssert(arrayHeight == 1);
;;;63     
;;;64           indexes = Array<s32>(1, this->get_numMatches(), memory);
;;;65     
;;;66           if(this->get_numMatches() == 0)
;;;67             return RESULT_OK;
;;;68     
;;;69           AnkiConditionalErrorAndReturnValue(AreValid(indexes),
;;;70             RESULT_FAIL_OUT_OF_MEMORY, "Find.Evaluate", "Invalid objects");
;;;71     
;;;72           s32 * const pIndexes = indexes.Pointer(0,0);
;;;73     
;;;74           s32 curIndex = 0;
;;;75     
;;;76           if(this->compareWithValue) {
;;;77             const s32 y = 0;
;;;78             const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;79     
;;;80             for(s32 x=0; x<arrayWidth; x++) {
;;;81               if(Operator::Compare(pArray1[x], value)) {
;;;82                 pIndexes[curIndex] = x;
;;;83                 curIndex++;
;;;84               }
;;;85             } // for(s32 x=0; x<arrayWidth; x++)
;;;86           } else { // if(this->compareWithValue)
;;;87             // These should be checked earlier
;;;88             AnkiAssert(AreEqualSize(array1, array2));
;;;89     
;;;90             const s32 y = 0;
;;;91             const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;92             const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;93     
;;;94             for(s32 x=0; x<arrayWidth; x++) {
;;;95               if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;96                 pIndexes[curIndex] = x;
;;;97                 curIndex++;
;;;98               }
;;;99             } // for(s32 x=0; x<arrayWidth; x++)
;;;100          } // if(this->compareWithValue) ... else
;;;101    
;;;102          return RESULT_OK;
;;;103        }
;;;104    
;;;105        template<typename Type1, typename Operator, typename Type2> Result Find<Type1,Operator,Type2>::Evaluate(Array<s32> &yIndexes, Array<s32> &xIndexes, MemoryStack &memory) const
;;;106        {
;;;107          AnkiConditionalErrorAndReturnValue(AreValid(*this, memory),
;;;108            RESULT_FAIL_INVALID_OBJECT, "Find.Evaluate", "Invalid objects");
;;;109    
;;;110          const s32 arrayHeight = array1.get_size(0);
;;;111          const s32 arrayWidth = array1.get_size(1);
;;;112    
;;;113          yIndexes = Array<s32>(1, this->get_numMatches(), memory);
;;;114          xIndexes = Array<s32>(1, this->get_numMatches(), memory);
;;;115    
;;;116          if(this->get_numMatches() == 0)
;;;117            return RESULT_OK;
;;;118    
;;;119          AnkiConditionalErrorAndReturnValue(AreValid(yIndexes, xIndexes),
;;;120            RESULT_FAIL_OUT_OF_MEMORY, "Find.Evaluate", "Invalid objects");
;;;121    
;;;122          s32 * const pYIndexes = yIndexes.Pointer(0,0);
;;;123          s32 * const pXIndexes = xIndexes.Pointer(0,0);
;;;124    
;;;125          s32 curIndex = 0;
;;;126    
;;;127          if(this->compareWithValue) {
;;;128            for(s32 y=0; y<arrayHeight; y++) {
;;;129              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;130    
;;;131              for(s32 x=0; x<arrayWidth; x++) {
;;;132                if(Operator::Compare(pArray1[x], value)) {
;;;133                  pYIndexes[curIndex] = y;
;;;134                  pXIndexes[curIndex] = x;
;;;135                  curIndex++;
;;;136                }
;;;137              } // for(s32 x=0; x<arrayWidth; x++)
;;;138            } // for(s32 y=0; y<arrayHeight; y++)
;;;139          } else { // if(this->compareWithValue)
;;;140            // These should be checked earlier
;;;141            AnkiAssert(AreEqualSize(array1, array2));
;;;142    
;;;143            for(s32 y=0; y<arrayHeight; y++) {
;;;144              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;145              const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;146    
;;;147              for(s32 x=0; x<arrayWidth; x++) {
;;;148                if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;149                  pYIndexes[curIndex] = y;
;;;150                  pXIndexes[curIndex] = x;
;;;151                  curIndex++;
;;;152                }
;;;153              } // for(s32 x=0; x<arrayWidth; x++)
;;;154            } // for(s32 y=0; y<arrayHeight; y++)
;;;155          } // if(this->compareWithValue) ... else
;;;156    
;;;157          return RESULT_OK;
;;;158        }
;;;159    
;;;160        template<typename Type1, typename Operator, typename Type2> void Find<Type1,Operator,Type2>::Initialize()
;;;161        {
;;;162          this->isValid = true;
;;;163    
;;;164          // If the input is a row vector, then it can be used for 1-dimensional indexing
;;;165          if(array1.get_size(0) == 1) {
;;;166            this->numOutputDimensions = 1;
;;;167          } else {
;;;168            this->numOutputDimensions = 2;
;;;169          }
;;;170    
;;;171          this->numMatchesComputed = false;
;;;172          this->limitsComputed = false;
;;;173    
;;;174          this->numMatches = -1;
;;;175          this->limits = Rectangle<s32>(-1, -1, -1, -1);
;;;176        }
;;;177    
;;;178        template<typename Type1, typename Operator, typename Type2> Result Find<Type1,Operator,Type2>::ComputeNumMatches() const
;;;179        {
;;;180          const s32 arrayHeight = array1.get_size(0);
;;;181          const s32 arrayWidth = array1.get_size(1);
;;;182    
;;;183          s32 newNumMatches = 0;
;;;184    
;;;185          if(this->compareWithValue) {
;;;186            for(s32 y=0; y<arrayHeight; y++) {
;;;187              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;188    
;;;189              for(s32 x=0; x<arrayWidth; x++) {
;;;190                if(Operator::Compare(pArray1[x], value)) {
;;;191                  newNumMatches++;
;;;192                }
;;;193              } // for(s32 x=0; x<arrayWidth; x++)
;;;194            } // for(s32 y=0; y<arrayHeight; y++)
;;;195          } else { // if(this->compareWithValue)
;;;196            // These should be checked earlier
;;;197            AnkiAssert(AreEqualSize(array1, array2));
;;;198    
;;;199            for(s32 y=0; y<arrayHeight; y++) {
;;;200              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;201              const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;202    
;;;203              for(s32 x=0; x<arrayWidth; x++) {
;;;204                if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;205                  newNumMatches++;
;;;206                }
;;;207              } // for(s32 x=0; x<arrayWidth; x++)
;;;208            } // for(s32 y=0; y<arrayHeight; y++)
;;;209          } // if(this->compareWithValue) ... else
;;;210    
;;;211          if(this->numMatchesComputed) {
;;;212            AnkiAssert(newNumMatches == this->numMatches); // This should only happen if the data is changed, which it shouldn't be
;;;213          }
;;;214    
;;;215          this->numMatches = newNumMatches;
;;;216          this->numMatchesComputed = true;
;;;217    
;;;218          return RESULT_OK;
;;;219        } // template<typename Type1, typename Operator, typename Type2> s32 Find<Type1,Operator,Type2>::ComputeNumMatches() const
;;;220    
;;;221        template<typename Type1, typename Operator, typename Type2> Result Find<Type1,Operator,Type2>::ComputeLimits() const
;;;222        {
;;;223          const s32 arrayHeight = array1.get_size(0);
;;;224          const s32 arrayWidth = array1.get_size(1);
;;;225    
;;;226          Rectangle<s32> newLimits(arrayWidth+1, -1, arrayHeight+1, -1);
;;;227          s32 newNumMatches = 0;
;;;228    
;;;229          if(this->compareWithValue) {
;;;230            for(s32 y=0; y<arrayHeight; y++) {
;;;231              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;232              for(s32 x=0; x<arrayWidth; x++) {
;;;233                if(Operator::Compare(pArray1[x], value)) {
;;;234                  newLimits.top = MIN(newLimits.top, y);
;;;235                  newLimits.bottom = MAX(newLimits.bottom, y);
;;;236                  newLimits.left = MIN(newLimits.left, x);
;;;237                  newLimits.right = MAX(newLimits.right, x);
;;;238                  newNumMatches++;
;;;239                }
;;;240              } // for(s32 x=0; x<arrayWidth; x++)
;;;241            } // for(s32 y=0; y<arrayHeight; y++)
;;;242          } else { // if(this->compareWithValue)
;;;243            // These should be checked earlier
;;;244            AnkiAssert(AreEqualSize(array1, array2));
;;;245    
;;;246            for(s32 y=0; y<arrayHeight; y++) {
;;;247              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;248              const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;249    
;;;250              for(s32 x=0; x<arrayWidth; x++) {
;;;251                if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;252                  newLimits.top = MIN(newLimits.top, y);
;;;253                  newLimits.bottom = MAX(newLimits.bottom, y);
;;;254                  newLimits.left = MIN(newLimits.left, x);
;;;255                  newLimits.right = MAX(newLimits.right, x);
;;;256                  newNumMatches++;
;;;257                }
;;;258              } // for(s32 x=0; x<arrayWidth; x++)
;;;259            } // for(s32 y=0; y<arrayHeight; y++)
;;;260          } // if(this->compareWithValue) ... else
;;;261    
;;;262          if(this->numMatchesComputed) {
;;;263            AnkiAssert(newNumMatches == this->numMatches); // This should only happen if the data is changed, which it shouldn't be
;;;264          }
;;;265          this->numMatches = newNumMatches;
;;;266          this->numMatchesComputed = true;
;;;267    
;;;268          if(this->limitsComputed) {
;;;269            AnkiAssert(newLimits == this->limits);
;;;270          }
;;;271          this->limits = newLimits;
;;;272          this->limitsComputed = true;
;;;273    
;;;274          return RESULT_OK;
;;;275        } // template<typename Type1, typename Operator, typename Type2> Rectangle<s32> Find<Type1,Operator,Type2>::ComputeLimits() const
;;;276    
;;;277        template<typename Type1, typename Operator, typename Type2> template<typename ArrayType> Result Find<Type1,Operator,Type2>::SetArray(Array<ArrayType> &out, const ArrayType value) const
;;;278        {
;;;279          const s32 arrayHeight = array1.get_size(0);
;;;280          const s32 arrayWidth = array1.get_size(1);
;;;281    
;;;282          AnkiConditionalErrorAndReturnValue(AreValid(*this, out),
;;;283            RESULT_FAIL_INVALID_OBJECT, "Find.SetArray", "Invalid objects");
;;;284    
;;;285          AnkiConditionalErrorAndReturnValue(AreEqualSize(array1, out),
;;;286            RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "out is not the same size as the input(s)");
;;;287    
;;;288          if(this->compareWithValue) {
;;;289            for(s32 y=0; y<arrayHeight; y++) {
;;;290              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;291    
;;;292              Type1 * const pOut = out.Pointer(y, 0);
;;;293    
;;;294              for(s32 x=0; x<arrayWidth; x++) {
;;;295                if(Operator::Compare(pArray1[x], value)) {
;;;296                  pOut[x] = value;
;;;297                }
;;;298              } // for(s32 x=0; x<arrayWidth; x++)
;;;299            } // for(s32 y=0; y<arrayHeight; y++)
;;;300          } else { // if(this->compareWithValue)
;;;301            // These should be checked earlier
;;;302            AnkiAssert(AreEqualSize(array1, array2));
;;;303    
;;;304            for(s32 y=0; y<arrayHeight; y++) {
;;;305              const Type1 * const pArray1 = array1.Pointer(y, 0);
;;;306              const Type2 * const pArray2 = array2.Pointer(y, 0);
;;;307    
;;;308              Type1 * const pOut = out.Pointer(y, 0);
;;;309    
;;;310              for(s32 x=0; x<arrayWidth; x++) {
;;;311                if(Operator::Compare(pArray1[x], pArray2[x])) {
;;;312                  pOut[x] = value;
;;;313                }
;;;314              } // for(s32 x=0; x<arrayWidth; x++)
;;;315            } // for(s32 y=0; y<arrayHeight; y++)
;;;316          } // if(this->compareWithValue) ... else
;;;317    
;;;318          return RESULT_OK;
;;;319        }
;;;320    
;;;321        template<typename Type1, typename Operator, typename Type2> template<typename ArrayType> Result Find<Type1,Operator,Type2>::SetArray(Array<ArrayType> &out, const Array<ArrayType> &in, const s32 findWhichDimension) const
;;;322        {
;;;323          AnkiConditionalErrorAndReturnValue(AreValid(*this, in, out),
;;;324            RESULT_FAIL_INVALID_OBJECT, "Find.SetArray", "Invalid objects");
;;;325    
;;;326          AnkiConditionalErrorAndReturnValue(this->numOutputDimensions == 1,
;;;327            RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "One-dimensional SetArray only works with one-dimensional Array input");
;;;328    
;;;329          AnkiConditionalErrorAndReturnValue(findWhichDimension == 0 || findWhichDimension == 1,
;;;330            RESULT_FAIL_INVALID_PARAMETER, "Find.SetArray", "findWhichDimension must be zero or one");
;;;331    
;;;332          const s32 array1Height = array1.get_size(0);
;;;333          const s32 array1Width = array1.get_size(1);
;;;334    
;;;335          const s32 inHeight = in.get_size(0);
;;;336          const s32 inWidth = in.get_size(1);
;;;337    
;;;338          const s32 outHeight = out.get_size(0);
;;;339          const s32 outWidth = out.get_size(1);
;;;340    
;;;341          const s32 numMatches = this->get_numMatches();
;;;342    
;;;343          AnkiAssert(array1Height == 1);
;;;344    
;;;345          if(findWhichDimension == 0) {
;;;346            AnkiConditionalErrorAndReturnValue(outHeight == numMatches && outWidth == inWidth,
;;;347              RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "out is not the correct size");
;;;348    
;;;349            AnkiConditionalErrorAndReturnValue(inHeight == MAX(array1Height, array1Width),
;;;350              RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "in is not the correct size");
;;;351          } else {
;;;352            AnkiConditionalErrorAndReturnValue(outHeight == inHeight && outWidth == numMatches,
;;;353              RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "out is not the correct size");
;;;354    
;;;355            AnkiConditionalErrorAndReturnValue(inWidth == MAX(array1Height, array1Width),
;;;356              RESULT_FAIL_INVALID_SIZE, "Find.SetArray", "in is not the correct size");
;;;357          }
;;;358    
;;;359          // This is a two-deep nested set of binary if-thens. Each of the four "leaves" will iterate
;;;360          // through the entire array, and set the appropriate values.
;;;361          //
;;;362          // Levels:
;;;363          // 1. Is this a array-to-value comparison? (versus array-to-array)
;;;364          // 2. Will we use the comparisons to set dimension 0? (versus dimension 1)
;;;365          if(this->compareWithValue) {
;;;366            if(findWhichDimension == 0) {
;;;367              const Type1 * const pArray1 = array1.Pointer(0, 0);
;;;368    
;;;369              s32 outY = 0;
;;;370    
;;;371              // i iterates on both the width of Array array1 and the height of Array in
;;;372              for(s32 i=0; i<array1Width; i++) {
;;;373                if(Operator::Compare(pArray1[i], value)) {
;;;374                  const ArrayType * const pIn = in.Pointer(i, 0);
;;;375    
;;;376                  ArrayType * const pOut = out.Pointer(outY, 0);
;;;377    
;;;378                  for(s32 x=0; x<outWidth; x++) {
;;;379                    pOut[x] = pIn[x];
;;;380                  } // for(s32 x=0; x<array1Width; x++)
;;;381    
;;;382                  outY++;
;;;383                } // if(Operator::Compare(pArray1[x], value))
;;;384              } // for(s32 i=0; i<array1Width; i++)
;;;385            } else { // if(findWhichDimension == 0)
;;;386              const Type1 * const pArray1 = array1.Pointer(0, 0);
;;;387    
;;;388              s32 outX = 0;
;;;389    
;;;390              // i iterates on both the width of Array array1 and the width of Array in
;;;391              for(s32 i=0; i<array1Width; i++) {
;;;392                if(Operator::Compare(pArray1[i], value)) {
;;;393                  for(s32 y=0; y<outHeight; y++) {
;;;394                    ArrayType * const pOut = out.Pointer(y, outX);
;;;395                    const ArrayType * const pIn = in.Pointer(y, i);
;;;396    
;;;397                    *pOut = *pIn;
;;;398                  } // for(s32 y=0; y<outHeight; y++)
;;;399    
;;;400                  outX++;
;;;401                } // if(Operator::Compare(pArray1[i], value))
;;;402              } // for(s32 i=0; i<array1Width; i++)
;;;403            } // if(findWhichDimension == 0) ... else
;;;404          } else { // if(this->compareWithValue)
;;;405            // These should be checked earlier
;;;406            AnkiAssert(AreEqualSize(array1, array2));
;;;407    
;;;408            if(findWhichDimension == 0) {
;;;409              const Type1 * const pArray1 = array1.Pointer(0, 0);
;;;410              const Type1 * const pArray2 = array2.Pointer(0, 0);
;;;411    
;;;412              s32 outY = 0;
;;;413    
;;;414              // i iterates on the widths of Array array1 and Array array2, and the height of Array in
;;;415              for(s32 i=0; i<array1Width; i++) {
;;;416                if(Operator::Compare(pArray1[i], pArray2[i])) {
;;;417                  const ArrayType * const pIn = in.Pointer(i, 0);
;;;418    
;;;419                  ArrayType * const pOut = out.Pointer(outY, 0);
;;;420    
;;;421                  for(s32 x=0; x<outWidth; x++) {
;;;422                    pOut[x] = pIn[x];
;;;423                  } // for(s32 x=0; x<array1Width; x++)
;;;424    
;;;425                  outY++;
;;;426                } // if(Operator::Compare(pArray1[x], value))
;;;427              } // for(s32 i=0; i<array1Width; i++)
;;;428            } else { // if(findWhichDimension == 0)
;;;429              const Type1 * const pArray1 = array1.Pointer(0, 0);
;;;430              const Type1 * const pArray2 = array2.Pointer(0, 0);
;;;431    
;;;432              s32 outX = 0;
;;;433    
;;;434              // i iterates on the widths of Array array1, Array array2, and Array in
;;;435              for(s32 i=0; i<array1Width; i++) {
;;;436                if(Operator::Compare(pArray1[i], pArray2[i])) {
;;;437                  for(s32 y=0; y<outHeight; y++) {
;;;438                    ArrayType * const pOut = out.Pointer(y, outX);
;;;439                    const ArrayType * const pIn = in.Pointer(y, i);
;;;440    
;;;441                    *pOut = *pIn;
;;;442                  } // for(s32 y=0; y<outHeight; y++)
;;;443    
;;;444                  outX++;
;;;445                } // if(Operator::Compare(pArray1[i], value))
;;;446              } // for(s32 i=0; i<array1Width; i++)
;;;447            } // if(findWhichDimension == 0) ... else
;;;448          } // if(this->compareWithValue) ... else
;;;449    
;;;450          return RESULT_OK;
;;;451        }
;;;452    
;;;453        template<typename Type1, typename Operator, typename Type2> template<typename ArrayType> Result Find<Type1,Operator,Type2>::SetArray(Array<ArrayType> &out, const ArrayType value, const s32 findWhichDimension) const
;;;454        {
;;;455          return RESULT_OK;
;;;456        }
;;;457    
;;;458        template<typename Type1, typename Operator, typename Type2> template<typename ArrayType> Array<ArrayType> Find<Type1,Operator,Type2>::SetArray(const Array<ArrayType> &in, const s32 findWhichDimension, MemoryStack &memory) const
;;;459        {
;;;460          const s32 numMatches = this->get_numMatches();
;;;461    
;;;462          Array<ArrayType> out;
;;;463    
;;;464          if(findWhichDimension == 0) {
;;;465            out = Array<ArrayType>(numMatches, in.get_size(1), memory);
;;;466          } else {
;;;467            out = Array<ArrayType>(in.get_size(0), numMatches, memory);
;;;468          }
;;;469    
;;;470          if(this->SetArray<ArrayType>(out, in, findWhichDimension) != RESULT_OK) {
;;;471            out.Resize(0,0,memory);
;;;472          }
;;;473    
;;;474          return out;
;;;475        }
;;;476    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L160.196|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE6ResizeEiiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Resize(int, int, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
                  |L160.200|
0000c8  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
0000cc  6f726574
0000d0  6563685c
0000d4  636f6d6d
0000d8  6f6e5c69
0000dc  6e636c75
0000e0  64655c61
0000e4  6e6b692f
0000e8  636f6d6d
0000ec  6f6e2f72
0000f0  6f626f74
0000f4  2f617272
0000f8  617932  
0000fb  642e6800          DCB      "d.h",0
0000ff  00                DCB      0
                  |L160.256|
000100  496e7661          DCB      "Invalid size",0
000104  6c696420
000108  73697a65
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
                  |L160.272|
000110  41727261          DCB      "Array<Type>::Resize",0
000114  793c5479
000118  70653e3a
00011c  3a526573
000120  697a6500

                          AREA ||area_number.161||, COMGROUP=_ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS0_5ArrayIT_EERKS9_iRNS0_11MemoryStackE, LINKORDER=||t._ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS0_5ArrayIT_EERKS9_iRNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.161||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS0_5ArrayIT_EERKS9_iRNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L167.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L167.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.168||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.168||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b570              PUSH     {r4-r6,lr}
000002  f04f34ff          MOV      r4,#0xffffffff
000006  6004              STR      r4,[r0,#0]
000008  6044              STR      r4,[r0,#4]
00000a  4601              MOV      r1,r0
00000c  6084              STR      r4,[r0,#8]
00000e  f8404f0c          STR      r4,[r0,#0xc]!
000012  2500              MOVS     r5,#0
000014  6044              STR      r4,[r0,#4]
000016  6084              STR      r4,[r0,#8]
000018  f1010024          ADD      r0,r1,#0x24
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000020  f8404d0c          STR      r4,[r0,#-0xc]!
000024  2100              MOVS     r1,#0
000026  6044              STR      r4,[r0,#4]
000028  6105              STR      r5,[r0,#0x10]
00002a  6084              STR      r4,[r0,#8]
00002c  6145              STR      r5,[r0,#0x14]
00002e  f1a00418          SUB      r4,r0,#0x18
000032  6185              STR      r5,[r0,#0x18]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
00003a  4620              MOV      r0,r4
00003c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.175||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.175||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L181.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L181.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.182||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.182||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L188.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L188.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.189||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.189||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE PROC ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
;;;673    
;;;674          template<typename InType, typename OutType> Result Vectorize(const bool isColumnMajor, const Array<InType> &in, Array<OutType> &out)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;675          {
000004  460c              MOV      r4,r1
000006  4681              MOV      r9,r0
000008  b082              SUB      sp,sp,#8
00000a  4615              MOV      r5,r2
;;;676            AnkiConditionalErrorAndReturnValue(out.get_size(0) == 1,
00000c  2100              MOVS     r1,#0
00000e  4610              MOV      r0,r2
000010  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000014  2801              CMP      r0,#1
000016  d00f              BEQ      |L195.56|
000018  f44f7129          MOV      r1,#0x2a4
00001c  4844              LDR      r0,|L195.304|
00001e  e9cd0100          STRD     r0,r1,[sp,#0]
000022  a344              ADR      r3,|L195.308|
000024  a251              ADR      r2,|L195.364|
000026  a156              ADR      r1,|L195.384|
000028  2005              MOVS     r0,#5
00002a  f7fffffe          BL       _Anki_Log
;;;677              RESULT_FAIL_INVALID_SIZE, "Vectorize", "Output is not 1xN");
;;;678    
;;;679            return Reshape<InType, OutType>(isColumnMajor, in, out);
;;;680          }
00002e  b002              ADD      sp,sp,#8
000030  f04f60a0          MOV      r0,#0x5000000         ;676
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L195.56|
000038  2100              MOVS     r1,#0
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000040  4680              MOV      r8,r0
000042  2101              MOVS     r1,#1
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00004a  4607              MOV      r7,r0
00004c  2100              MOVS     r1,#0
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000054  4606              MOV      r6,r0
000056  2101              MOVS     r1,#1
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00005e  4601              MOV      r1,r0
000060  fb08f007          MUL      r0,r8,r7
000064  fb06f201          MUL      r2,r6,r1
000068  4290              CMP      r0,r2
00006a  d00f              BEQ      |L195.140|
00006c  f44f711b          MOV      r1,#0x26c
000070  4846              LDR      r0,|L195.396|
000072  e9cd0100          STRD     r0,r1,[sp,#0]
000076  a32f              ADR      r3,|L195.308|
000078  a245              ADR      r2,|L195.400|
00007a  a152              ADR      r1,|L195.452|
00007c  2005              MOVS     r0,#5
00007e  f7fffffe          BL       _Anki_Log
000082  b002              ADD      sp,sp,#8
000084  f04f60a0          MOV      r0,#0x5000000
000088  e8bd87f0          POP      {r4-r10,pc}
                  |L195.140|
00008c  2200              MOVS     r2,#0
00008e  4610              MOV      r0,r2
000090  f1b90f00          CMP      r9,#0
000094  4694              MOV      r12,r2
000096  d022              BEQ      |L195.222|
000098  2e00              CMP      r6,#0
00009a  dd44              BLE      |L195.294|
                  |L195.156|
00009c  68af              LDR      r7,[r5,#8]
00009e  692b              LDR      r3,[r5,#0x10]
0000a0  fb0c3a07          MLA      r10,r12,r7,r3
0000a4  2300              MOVS     r3,#0
0000a6  2900              CMP      r1,#0
0000a8  dd14              BLE      |L195.212|
                  |L195.170|
0000aa  f8d49008          LDR      r9,[r4,#8]
0000ae  6927              LDR      r7,[r4,#0x10]
0000b0  fb027709          MLA      r7,r2,r9,r7
0000b4  eb070780          ADD      r7,r7,r0,LSL #2
0000b8  1c52              ADDS     r2,r2,#1
0000ba  ed970a00          VLDR     s0,[r7,#0]
0000be  eb0a0783          ADD      r7,r10,r3,LSL #2
0000c2  4542              CMP      r2,r8
0000c4  ed870a00          VSTR     s0,[r7,#0]
0000c8  bfa4              ITT      GE
0000ca  2200              MOVGE    r2,#0
0000cc  1c40              ADDGE    r0,r0,#1
0000ce  1c5b              ADDS     r3,r3,#1
0000d0  428b              CMP      r3,r1
0000d2  dbea              BLT      |L195.170|
                  |L195.212|
0000d4  f10c0c01          ADD      r12,r12,#1
0000d8  45b4              CMP      r12,r6
0000da  dbdf              BLT      |L195.156|
0000dc  e023              B        |L195.294|
                  |L195.222|
0000de  2e00              CMP      r6,#0
0000e0  dd21              BLE      |L195.294|
                  |L195.226|
0000e2  f8d58008          LDR      r8,[r5,#8]
0000e6  692b              LDR      r3,[r5,#0x10]
0000e8  fb0c3a08          MLA      r10,r12,r8,r3
0000ec  2300              MOVS     r3,#0
0000ee  2900              CMP      r1,#0
0000f0  dd15              BLE      |L195.286|
                  |L195.242|
0000f2  f8d49008          LDR      r9,[r4,#8]
0000f6  f8d48010          LDR      r8,[r4,#0x10]
0000fa  fb028809          MLA      r8,r2,r9,r8
0000fe  eb080880          ADD      r8,r8,r0,LSL #2
000102  1c40              ADDS     r0,r0,#1
000104  ed980a00          VLDR     s0,[r8,#0]
000108  eb0a0883          ADD      r8,r10,r3,LSL #2
00010c  42b8              CMP      r0,r7
00010e  ed880a00          VSTR     s0,[r8,#0]
000112  bfa4              ITT      GE
000114  2000              MOVGE    r0,#0
000116  1c52              ADDGE    r2,r2,#1
000118  1c5b              ADDS     r3,r3,#1
00011a  428b              CMP      r3,r1
00011c  dbe9              BLT      |L195.242|
                  |L195.286|
00011e  f10c0c01          ADD      r12,r12,#1
000122  45b4              CMP      r12,r6
000124  dbdd              BLT      |L195.226|
                  |L195.294|
000126  b002              ADD      sp,sp,#8
000128  2000              MOVS     r0,#0
00012a  e8bd87f0          POP      {r4-r10,pc}
;;;681    
                          ENDP

00012e  0000              DCW      0x0000
                  |L195.304|
                          DCD      _ZZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L195.308|
000134  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
000138  6f726574
00013c  6563685c
000140  636f6d6d
000144  6f6e5c69
000148  6e636c75
00014c  64655c61
000150  6e6b692f
000154  636f6d6d
000158  6f6e2f72
00015c  6f626f74
000160  2f6d6174
000164  726978  
000167  2e6800            DCB      ".h",0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L195.364|
00016c  4f757470          DCB      "Output is not 1xN",0
000170  75742069
000174  73206e6f
000178  74203178
00017c  4e00    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L195.384|
000180  56656374          DCB      "Vectorize",0
000184  6f72697a
000188  6500    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L195.396|
                          DCD      _ZZN4Anki8Embedded6Matrix7ReshapeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Reshape<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L195.400|
000190  496e7075          DCB      "Input and Output matrices are incompatible sizes",0
000194  7420616e
000198  64204f75
00019c  74707574
0001a0  206d6174
0001a4  72696365
0001a8  73206172
0001ac  6520696e
0001b0  636f6d70
0001b4  61746962
0001b8  6c652073
0001bc  697a6573
0001c0  00      
0001c1  00                DCB      0
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L195.452|
0001c4  52657368          DCB      "Reshape",0
0001c8  61706500

                          AREA ||area_number.196||, COMGROUP=_ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.196||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceIfE3SetEf||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfE3SetEf, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10ArraySliceIfE3SetEf PROC ; Anki::Embedded::ArraySlice<float>::Set(float)
;;;109    
;;;110        template<typename Type> s32 ArraySlice<Type>::Set(const Type value)
000000  b530              PUSH     {r4,r5,lr}
;;;111        {
000002  4605              MOV      r5,r0
000004  ed2d8b02          VPUSH    {d8}
000008  f1000418          ADD      r4,r0,#0x18
00000c  b089              SUB      sp,sp,#0x24
00000e  eeb08a40          VMOV.F32 s16,s0
;;;112          Array<Type> &array = this->get_array();
;;;113    
;;;114          AnkiConditionalErrorAndReturnValue(array.IsValid(),
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000018  2800              CMP      r0,#0
00001a  d034              BEQ      |L202.134|
00001c  2101              MOVS     r1,#1
00001e  f88d1008          STRB     r1,[sp,#8]
000022  6929              LDR      r1,[r5,#0x10]
000024  9103              STR      r1,[sp,#0xc]
000026  6969              LDR      r1,[r5,#0x14]
000028  9104              STR      r1,[sp,#0x10]
00002a  68e8              LDR      r0,[r5,#0xc]
00002c  9005              STR      r0,[sp,#0x14]
00002e  6868              LDR      r0,[r5,#4]
000030  9006              STR      r0,[sp,#0x18]
000032  68a8              LDR      r0,[r5,#8]
000034  9007              STR      r0,[sp,#0x1c]
000036  6828              LDR      r0,[r5,#0]
;;;115            0, "ArraySlice<Type>::Set", "Array<Type> is not valid");
;;;116    
;;;117          const ArraySliceLimits_in1_out0<s32> limits(this->get_ySlice(), this->get_xSlice());
;;;118    
;;;119          AnkiConditionalErrorAndReturnValue(limits.isValid,
;;;120            0, "ArraySlice<Type>::Set", "Limits is not valid");
;;;121    
;;;122          for(s32 iy=0; iy<limits.rawIn1Limits.ySize; iy++) {
000038  2200              MOVS     r2,#0
00003a  9008              STR      r0,[sp,#0x20]
00003c  2800              CMP      r0,#0
00003e  dd1b              BLE      |L202.120|
                  |L202.64|
000040  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;119
;;;123            const s32 y = limits.rawIn1Limits.yStart + iy * limits.rawIn1Limits.yIncrement;
000044  fb020001          MLA      r0,r2,r1,r0
000048  68a3              LDR      r3,[r4,#8]
00004a  6921              LDR      r1,[r4,#0x10]
00004c  fb001c03          MLA      r12,r0,r3,r1
;;;124            Type * restrict pMat = array.Pointer(y, 0);
;;;125    
;;;126            for(s32 ix=0; ix<limits.rawIn1Limits.xSize; ix++) {
000050  9805              LDR      r0,[sp,#0x14]
000052  2100              MOVS     r1,#0
000054  2800              CMP      r0,#0
000056  dd0b              BLE      |L202.112|
                  |L202.88|
000058  e9dd0303          LDRD     r0,r3,[sp,#0xc]
;;;127              const s32 x = limits.rawIn1Limits.xStart + ix * limits.rawIn1Limits.xIncrement;
00005c  fb010303          MLA      r3,r1,r3,r0
;;;128              pMat[x] = value;
000060  eb0c0083          ADD      r0,r12,r3,LSL #2
000064  1c49              ADDS     r1,r1,#1              ;126
000066  ed808a00          VSTR     s16,[r0,#0]
00006a  9805              LDR      r0,[sp,#0x14]         ;126
00006c  4288              CMP      r0,r1                 ;126
00006e  dcf3              BGT      |L202.88|
                  |L202.112|
000070  9808              LDR      r0,[sp,#0x20]         ;122
000072  1c52              ADDS     r2,r2,#1              ;122
000074  4290              CMP      r0,r2                 ;122
000076  dce3              BGT      |L202.64|
                  |L202.120|
;;;129            }
;;;130          }
;;;131    
;;;132          return limits.rawIn1Limits.xSize*limits.rawIn1Limits.ySize;
000078  9908              LDR      r1,[sp,#0x20]
00007a  9805              LDR      r0,[sp,#0x14]
;;;133        }
00007c  b009              ADD      sp,sp,#0x24
00007e  4348              MULS     r0,r1,r0              ;132
000080  ecbd8b02          VPOP     {d8}
000084  bd30              POP      {r4,r5,pc}
                  |L202.134|
000086  2172              MOVS     r1,#0x72              ;114
000088  4806              LDR      r0,|L202.164|
00008a  e9cd0100          STRD     r0,r1,[sp,#0]         ;114
00008e  a306              ADR      r3,|L202.168|
000090  a214              ADR      r2,|L202.228|
000092  a11b              ADR      r1,|L202.256|
000094  2005              MOVS     r0,#5                 ;114
000096  f7fffffe          BL       _Anki_Log
00009a  b009              ADD      sp,sp,#0x24
00009c  2000              MOVS     r0,#0                 ;114
00009e  ecbd8b02          VPOP     {d8}
0000a2  bd30              POP      {r4,r5,pc}
;;;134    
                          ENDP

                  |L202.164|
                          DCD      _ZZN4Anki8Embedded10ArraySliceIfE3SetEfE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<float>::Set(float)::__PRETTY_FUNCTION__
                  |L202.168|
0000a8  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0000ac  6f726574
0000b0  6563685c
0000b4  636f6d6d
0000b8  6f6e5c69
0000bc  6e636c75
0000c0  64655c61
0000c4  6e6b692f
0000c8  636f6d6d
0000cc  6f6e2f72
0000d0  6f626f74
0000d4  2f617272
0000d8  617953  
0000db  6c696365          DCB      "lices.h",0
0000df  732e6800
0000e3  00                DCB      0
                  |L202.228|
0000e4  41727261          DCB      "Array<Type> is not valid",0
0000e8  793c5479
0000ec  70653e20
0000f0  6973206e
0000f4  6f742076
0000f8  616c6964
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L202.256|
000100  41727261          DCB      "ArraySlice<Type>::Set",0
000104  79536c69
000108  63653c54
00010c  7970653e
000110  3a3a5365
000114  7400    
000116  00                DCB      0
000117  00                DCB      0

                          AREA ||area_number.203||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfE3SetEf, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceIfE3SetEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.203||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceIfE3SetEf||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE PROC ; Anki::Embedded::Matrix::DotMultiply<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
;;;201    
;;;202          template<typename InType, typename IntermediateType, typename OutType> Result DotMultiply(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;203          {
000004  b0b5              SUB      sp,sp,#0xd4
000006  4605              MOV      r5,r0
000008  e9dde046          LDRD     lr,r0,[sp,#0x118]
00000c  460c              MOV      r4,r1
00000e  e9dd1c3e          LDRD     r1,r12,[sp,#0xf8]
000012  e9dd6740          LDRD     r6,r7,[sp,#0x100]
000016  e9dd8942          LDRD     r8,r9,[sp,#0x108]
00001a  e9ddab44          LDRD     r10,r11,[sp,#0x110]
;;;204            return Elementwise::ApplyOperation<InType, Elementwise::DotMultiply<InType, IntermediateType, OutType>, OutType>(in1, in2, out);
00001e  f8cdc0ac          STR      r12,[sp,#0xac]
000022  9228              STR      r2,[sp,#0xa0]
000024  e9cd3129          STRD     r3,r1,[sp,#0xa4]
000028  e9cd892e          STRD     r8,r9,[sp,#0xb8]
00002c  e9cd672c          STRD     r6,r7,[sp,#0xb0]
000030  9948              LDR      r1,[sp,#0x120]
000032  f8cda0c0          STR      r10,[sp,#0xc0]
000036  e9cd0133          STRD     r0,r1,[sp,#0xcc]
00003a  e9cdbe31          STRD     r11,lr,[sp,#0xc4]
00003e  f1050618          ADD      r6,r5,#0x18
000042  f1040718          ADD      r7,r4,#0x18
000046  f10d08b8          ADD      r8,sp,#0xb8
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000050  f8df91c0          LDR      r9,|L209.532|
000054  f04f6a80          MOV      r10,#0x4000000
000058  2800              CMP      r0,#0
00005a  d06c              BEQ      |L209.310|
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000062  2800              CMP      r0,#0
000064  d067              BEQ      |L209.310|
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00006c  2800              CMP      r0,#0
00006e  d062              BEQ      |L209.310|
000070  f894c030          LDRB     r12,[r4,#0x30]
000074  f8953030          LDRB     r3,[r5,#0x30]
000078  a828              ADD      r0,sp,#0xa0
00007a  f1040b0c          ADD      r11,r4,#0xc
00007e  e9cdc002          STRD     r12,r0,[sp,#8]
000082  e9cd4b00          STRD     r4,r11,[sp,#0]
000086  f10d0eac          ADD      lr,sp,#0xac
00008a  f105020c          ADD      r2,r5,#0xc
00008e  4629              MOV      r1,r5
000090  f8cde010          STR      lr,[sp,#0x10]
000094  a806              ADD      r0,sp,#0x18
000096  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
00009a  f89d0018          LDRB     r0,[sp,#0x18]
00009e  2800              CMP      r0,#0
0000a0  d057              BEQ      |L209.338|
0000a2  f89d0019          LDRB     r0,[sp,#0x19]
0000a6  2800              CMP      r0,#0
0000a8  d061              BEQ      |L209.366|
0000aa  980d              LDR      r0,[sp,#0x34]
0000ac  2500              MOVS     r5,#0
0000ae  2800              CMP      r0,#0
0000b0  f34080ab          BLE.W    |L209.522|
                  |L209.180|
0000b4  9809              LDR      r0,[sp,#0x24]
0000b6  68b2              LDR      r2,[r6,#8]
0000b8  6931              LDR      r1,[r6,#0x10]
0000ba  fb001402          MLA      r4,r0,r2,r1
0000be  980b              LDR      r0,[sp,#0x2c]
0000c0  68ba              LDR      r2,[r7,#8]
0000c2  6939              LDR      r1,[r7,#0x10]
0000c4  fb001a02          MLA      r10,r0,r2,r1
0000c8  9807              LDR      r0,[sp,#0x1c]
0000ca  f8d82008          LDR      r2,[r8,#8]
0000ce  f8d81010          LDR      r1,[r8,#0x10]
0000d2  fb001902          MLA      r9,r0,r2,r1
0000d6  a806              ADD      r0,sp,#0x18
0000d8  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
0000dc  990e              LDR      r1,[sp,#0x38]
0000de  2000              MOVS     r0,#0
0000e0  2900              CMP      r1,#0
0000e2  dd20              BLE      |L209.294|
                  |L209.228|
0000e4  990a              LDR      r1,[sp,#0x28]
0000e6  1c40              ADDS     r0,r0,#1
0000e8  eb040181          ADD      r1,r4,r1,LSL #2
0000ec  ed910a00          VLDR     s0,[r1,#0]
0000f0  990c              LDR      r1,[sp,#0x30]
0000f2  eb0a0181          ADD      r1,r10,r1,LSL #2
0000f6  edd10a00          VLDR     s1,[r1,#0]
0000fa  9908              LDR      r1,[sp,#0x20]
0000fc  ee200a20          VMUL.F32 s0,s0,s1
000100  eb090181          ADD      r1,r9,r1,LSL #2
000104  ed810a00          VSTR     s0,[r1,#0]
000108  9a10              LDR      r2,[sp,#0x40]
00010a  990a              LDR      r1,[sp,#0x28]
00010c  4411              ADD      r1,r1,r2
00010e  910a              STR      r1,[sp,#0x28]
000110  9a12              LDR      r2,[sp,#0x48]
000112  990c              LDR      r1,[sp,#0x30]
000114  4411              ADD      r1,r1,r2
000116  910c              STR      r1,[sp,#0x30]
000118  9a0f              LDR      r2,[sp,#0x3c]
00011a  9908              LDR      r1,[sp,#0x20]
00011c  4411              ADD      r1,r1,r2
00011e  9108              STR      r1,[sp,#0x20]
000120  990e              LDR      r1,[sp,#0x38]
000122  4281              CMP      r1,r0
000124  dcde              BGT      |L209.228|
                  |L209.294|
000126  a806              ADD      r0,sp,#0x18
000128  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
00012c  980d              LDR      r0,[sp,#0x34]
00012e  1c6d              ADDS     r5,r5,#1
000130  42a8              CMP      r0,r5
000132  dcbf              BGT      |L209.180|
000134  e069              B        |L209.522|
                  |L209.310|
000136  f2407022          MOV      r0,#0x722
00013a  e9cd9000          STRD     r9,r0,[sp,#0]
00013e  a336              ADR      r3,|L209.536|
000140  a243              ADR      r2,|L209.592|
000142  a147              ADR      r1,|L209.608|
000144  2005              MOVS     r0,#5
000146  f7fffffe          BL       _Anki_Log
;;;205          } // template<typename Type> Result DotMultiply(const ConstArraySliceExpression<Type> &in1, const ConstArraySliceExpression<Type> &in2, const ArraySlice<Type> &out)
00014a  b035              ADD      sp,sp,#0xd4
00014c  4650              MOV      r0,r10
00014e  e8bd8ff0          POP      {r4-r11,pc}
                  |L209.338|
000152  f240702a          MOV      r0,#0x72a
000156  e9cd9000          STRD     r9,r0,[sp,#0]
00015a  a32f              ADR      r3,|L209.536|
00015c  a249              ADR      r2,|L209.644|
00015e  a140              ADR      r1,|L209.608|
000160  2005              MOVS     r0,#5
000162  f7fffffe          BL       _Anki_Log
000166  b035              ADD      sp,sp,#0xd4
000168  4650              MOV      r0,r10
00016a  e8bd8ff0          POP      {r4-r11,pc}
                  |L209.366|
00016e  980d              LDR      r0,[sp,#0x34]
000170  2400              MOVS     r4,#0
000172  2800              CMP      r0,#0
000174  dd49              BLE      |L209.522|
                  |L209.374|
000176  9807              LDR      r0,[sp,#0x1c]
000178  f8d82008          LDR      r2,[r8,#8]
00017c  f8d81010          LDR      r1,[r8,#0x10]
000180  fb001502          MLA      r5,r0,r2,r1
000184  a806              ADD      r0,sp,#0x18
000186  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
00018a  990e              LDR      r1,[sp,#0x38]
00018c  2000              MOVS     r0,#0
00018e  2900              CMP      r1,#0
000190  dd34              BLE      |L209.508|
                  |L209.402|
000192  e9dd2109          LDRD     r2,r1,[sp,#0x24]
000196  f8d6c008          LDR      r12,[r6,#8]
00019a  6933              LDR      r3,[r6,#0x10]
00019c  1c40              ADDS     r0,r0,#1
00019e  fb02320c          MLA      r2,r2,r12,r3
0001a2  eb020181          ADD      r1,r2,r1,LSL #2
0001a6  f8d7c008          LDR      r12,[r7,#8]
0001aa  ed910a00          VLDR     s0,[r1,#0]
0001ae  e9dd210b          LDRD     r2,r1,[sp,#0x2c]
0001b2  693b              LDR      r3,[r7,#0x10]
0001b4  fb02320c          MLA      r2,r2,r12,r3
0001b8  eb020181          ADD      r1,r2,r1,LSL #2
0001bc  edd10a00          VLDR     s1,[r1,#0]
0001c0  9908              LDR      r1,[sp,#0x20]
0001c2  ee200a20          VMUL.F32 s0,s0,s1
0001c6  eb050181          ADD      r1,r5,r1,LSL #2
0001ca  ed810a00          VSTR     s0,[r1,#0]
0001ce  9a10              LDR      r2,[sp,#0x40]
0001d0  990a              LDR      r1,[sp,#0x28]
0001d2  4411              ADD      r1,r1,r2
0001d4  910a              STR      r1,[sp,#0x28]
0001d6  9a11              LDR      r2,[sp,#0x44]
0001d8  9909              LDR      r1,[sp,#0x24]
0001da  4411              ADD      r1,r1,r2
0001dc  9109              STR      r1,[sp,#0x24]
0001de  9a12              LDR      r2,[sp,#0x48]
0001e0  990c              LDR      r1,[sp,#0x30]
0001e2  4411              ADD      r1,r1,r2
0001e4  910c              STR      r1,[sp,#0x30]
0001e6  9a13              LDR      r2,[sp,#0x4c]
0001e8  990b              LDR      r1,[sp,#0x2c]
0001ea  4411              ADD      r1,r1,r2
0001ec  910b              STR      r1,[sp,#0x2c]
0001ee  9a0f              LDR      r2,[sp,#0x3c]
0001f0  9908              LDR      r1,[sp,#0x20]
0001f2  4411              ADD      r1,r1,r2
0001f4  9108              STR      r1,[sp,#0x20]
0001f6  990e              LDR      r1,[sp,#0x38]
0001f8  4281              CMP      r1,r0
0001fa  dcca              BGT      |L209.402|
                  |L209.508|
0001fc  a806              ADD      r0,sp,#0x18
0001fe  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
000202  980d              LDR      r0,[sp,#0x34]
000204  1c64              ADDS     r4,r4,#1
000206  42a0              CMP      r0,r4
000208  dcb5              BGT      |L209.374|
                  |L209.522|
00020a  b035              ADD      sp,sp,#0xd4
00020c  2000              MOVS     r0,#0
00020e  e8bd8ff0          POP      {r4-r11,pc}
;;;206    
                          ENDP

000212  0000              DCW      0x0000
                  |L209.532|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L209.536|
000218  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
00021c  6f726574
000220  6563685c
000224  636f6d6d
000228  6f6e5c69
00022c  6e636c75
000230  64655c61
000234  6e6b692f
000238  636f6d6d
00023c  6f6e2f72
000240  6f626f74
000244  2f6d6174
000248  726978  
00024b  2e6800            DCB      ".h",0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L209.592|
000250  496e7661          DCB      "Invalid objects",0
000254  6c696420
000258  6f626a65
00025c  63747300
                  |L209.608|
000260  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
000264  69783a3a
000268  456c656d
00026c  656e7477
000270  6973653a
000274  3a417070
000278  6c794f70
00027c  65726174
000280  696f6e00
                  |L209.644|
000284  4c696d69          DCB      "Limits is not valid",0
000288  74732069
00028c  73206e6f
000290  74207661
000294  6c696400

                          AREA ||area_number.210||, COMGROUP=_ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.210||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix11DotMultiplyIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_||, COMGROUP=_ZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_ PROC ; Anki::Embedded::Interp2<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
;;;49     
;;;50         template<typename InType, typename OutType> Result Interp2(const Array<InType> &reference, const Array<f32> &xCoordinates, const Array<f32> &yCoordinates, Array<OutType> &out, const InterpolationType interpolationType, const OutType invalidValue)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;51         {
000004  4604              MOV      r4,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  461d              MOV      r5,r3
;;;52           AnkiConditionalErrorAndReturnValue(interpolationType == INTERPOLATE_LINEAR,
00000c  f8df9320          LDR      r9,|L216.816|
000010  ed2d8b0c          VPUSH    {d8-d13}              ;51
000014  b085              SUB      sp,sp,#0x14           ;51
000016  eef0aa40          VMOV.F32 s21,s0                ;51
00001a  9820              LDR      r0,[sp,#0x80]
00001c  2800              CMP      r0,#0
00001e  d010              BEQ      |L216.66|
000020  2034              MOVS     r0,#0x34
000022  e9cd9000          STRD     r9,r0,[sp,#0]
000026  a3c3              ADR      r3,|L216.820|
000028  a2d1              ADR      r2,|L216.880|
00002a  a1db              ADR      r1,|L216.920|
00002c  2005              MOVS     r0,#5
00002e  f7fffffe          BL       _Anki_Log
000032  f04f7040          MOV      r0,#0x3000000
                  |L216.54|
;;;53             RESULT_FAIL_INVALID_PARAMETER, "Interp2", "Only INTERPOLATE_LINEAR is supported");
;;;54     
;;;55           AnkiConditionalErrorAndReturnValue(AreValid(reference, xCoordinates, yCoordinates, out),
;;;56             RESULT_FAIL_INVALID_OBJECT, "Interp2", "Invalid objects");
;;;57     
;;;58           const s32 referenceHeight = reference.get_size(0);
;;;59           const s32 referenceWidth = reference.get_size(1);
;;;60     
;;;61           const s32 outHeight = out.get_size(0);
;;;62           const s32 outWidth = out.get_size(1);
;;;63     
;;;64           const s32 numOutputElements = outHeight * outWidth;
;;;65     
;;;66           const bool isOutputOneDimensional = (out.get_size(0) == 1);
;;;67     
;;;68           AnkiConditionalErrorAndReturnValue(
;;;69             AreEqualSize(out, xCoordinates, yCoordinates),
;;;70             RESULT_FAIL_INVALID_SIZE, "Interp2", "xCoordinates, yCoordinates, and out must all be the same sizes");
;;;71     
;;;72           if(isOutputOneDimensional) {
;;;73             AnkiConditionalErrorAndReturnValue(
;;;74               AreEqualSize(1, numOutputElements, out),
;;;75               RESULT_FAIL_INVALID_SIZE, "Interp2", "If out is a row vector, then out, xCoordinates, and yCoordinates must all be 1xN");
;;;76           }
;;;77     
;;;78           AnkiConditionalErrorAndReturnValue(
;;;79             NotAliased(out, xCoordinates, yCoordinates, reference),
;;;80             RESULT_FAIL_ALIASED_MEMORY, "Interp2", "xCoordinates, yCoordinates, and reference cannot be the same as out");
;;;81     
;;;82           const f32 xyReferenceMin = 0.0f;
;;;83           const f32 xReferenceMax = static_cast<f32>(referenceWidth) - 1.0f;
;;;84           const f32 yReferenceMax = static_cast<f32>(referenceHeight) - 1.0f;
;;;85     
;;;86           //const s32 numValues = xCoordinates.get_size(1);
;;;87     
;;;88           const s32 yIterationMax = isOutputOneDimensional ? 1                    : outHeight;
;;;89           const s32 xIterationMax = isOutputOneDimensional ? (outHeight*outWidth) : outWidth;
;;;90     
;;;91           for(s32 y=0; y<yIterationMax; y++) {
;;;92             const f32 * restrict pXCoordinates = xCoordinates.Pointer(y,0);
;;;93             const f32 * restrict pYCoordinates = yCoordinates.Pointer(y,0);
;;;94     
;;;95             OutType * restrict pOut = out.Pointer(y,0);
;;;96     
;;;97             for(s32 x=0; x<xIterationMax; x++) {
;;;98               const f32 curX = pXCoordinates[x];
;;;99               const f32 curY = pYCoordinates[x];
;;;100    
;;;101              const f32 x0 = FLT_FLOOR(curX);
;;;102              const f32 x1 = ceilf(curX); // x0 + 1.0f;
;;;103    
;;;104              const f32 y0 = FLT_FLOOR(curY);
;;;105              const f32 y1 = ceilf(curY); // y0 + 1.0f;
;;;106    
;;;107              // If out of bounds, set as invalid and continue
;;;108              if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;109                pOut[x] = invalidValue;
;;;110                continue;
;;;111              }
;;;112    
;;;113              const f32 alphaX = curX - x0;
;;;114              const f32 alphaXinverse = 1 - alphaX;
;;;115    
;;;116              const f32 alphaY = curY - y0;
;;;117              const f32 alphaYinverse = 1.0f - alphaY;
;;;118    
;;;119              const s32 y0S32 = Round<s32>(y0);
;;;120              const s32 y1S32 = Round<s32>(y1);
;;;121              const s32 x0S32 = Round<s32>(x0);
;;;122    
;;;123              const InType * restrict pReference_y0 = reference.Pointer(y0S32, x0S32);
;;;124              const InType * restrict pReference_y1 = reference.Pointer(y1S32, x0S32);
;;;125    
;;;126              const f32 pixelTL = *pReference_y0;
;;;127              const f32 pixelTR = *(pReference_y0+1);
;;;128              const f32 pixelBL = *pReference_y1;
;;;129              const f32 pixelBR = *(pReference_y1+1);
;;;130    
;;;131              const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;132    
;;;133              const OutType interpolatedPixel = RoundIfInteger<OutType>(interpolatedPixelF32);
;;;134    
;;;135              pOut[x] = interpolatedPixel;
;;;136            } // for(s32 x=0; x<xIterationMax; x++)
;;;137          } // for(s32 y=0; y<yIterationMax; y++)
;;;138    
;;;139          return RESULT_OK;
;;;140        } // Interp2
000036  b005              ADD      sp,sp,#0x14
000038  ecbd8b0c          VPOP     {d8-d13}
00003c  b006              ADD      sp,sp,#0x18
00003e  e8bd8ff0          POP      {r4-r11,pc}
                  |L216.66|
000042  e9dd6714          LDRD     r6,r7,[sp,#0x50]
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00004c  2800              CMP      r0,#0
00004e  d047              BEQ      |L216.224|
000050  4630              MOV      r0,r6                 ;55
000052  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000056  2800              CMP      r0,#0                 ;55
000058  d042              BEQ      |L216.224|
00005a  4638              MOV      r0,r7                 ;55
00005c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000060  2800              CMP      r0,#0                 ;55
000062  d03d              BEQ      |L216.224|
000064  4628              MOV      r0,r5                 ;55
000066  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00006a  2800              CMP      r0,#0                 ;55
00006c  d038              BEQ      |L216.224|
00006e  2100              MOVS     r1,#0                 ;58
000070  4620              MOV      r0,r4                 ;58
000072  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000076  ee080a10          VMOV     s16,r0                ;58
00007a  2101              MOVS     r1,#1                 ;59
00007c  4620              MOV      r0,r4                 ;59
00007e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000082  ee080a90          VMOV     s17,r0                ;59
000086  2100              MOVS     r1,#0                 ;61
000088  4628              MOV      r0,r5                 ;61
00008a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00008e  4683              MOV      r11,r0                ;61
000090  2101              MOVS     r1,#1                 ;62
000092  4628              MOV      r0,r5                 ;62
000094  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000098  fb0bfa00          MUL      r10,r11,r0            ;64
00009c  9004              STR      r0,[sp,#0x10]         ;66
00009e  2100              MOVS     r1,#0                 ;66
0000a0  4628              MOV      r0,r5                 ;66
0000a2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000a6  2801              CMP      r0,#1                 ;66
0000a8  bf0c              ITE      EQ                    ;66
0000aa  f04f0801          MOVEQ    r8,#1                 ;66
0000ae  f04f0800          MOVNE    r8,#0                 ;66
0000b2  4628              MOV      r0,r5                 ;68
0000b4  e9dd1214          LDRD     r1,r2,[sp,#0x50]      ;68
0000b8  f7fffffe          BL       _ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIfEES3_S3_EEbRKT_RKT0_RKT1_ ; Anki::Embedded::AreEqualSize<Anki::Embedded::Array<float>, Anki::Embedded::Array<float>, Anki::Embedded::Array<float>>(const T1&, const T2&, const T3&)
0000bc  2800              CMP      r0,#0                 ;68
0000be  d01b              BEQ      |L216.248|
0000c0  f1b80f00          CMP      r8,#0                 ;72
0000c4  d036              BEQ      |L216.308|
0000c6  4656              MOV      r6,r10                ;73
0000c8  4628              MOV      r0,r5                 ;73
0000ca  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0000ce  2800              CMP      r0,#0                 ;73
0000d0  d024              BEQ      |L216.284|
0000d2  2100              MOVS     r1,#0                 ;73
0000d4  4628              MOV      r0,r5                 ;73
0000d6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000da  2801              CMP      r0,#1                 ;73
0000dc  d018              BEQ      |L216.272|
0000de  e01d              B        |L216.284|
                  |L216.224|
0000e0  2037              MOVS     r0,#0x37              ;55
0000e2  e9cd9000          STRD     r9,r0,[sp,#0]         ;55
0000e6  a393              ADR      r3,|L216.820|
0000e8  a2ad              ADR      r2,|L216.928|
0000ea  a1ab              ADR      r1,|L216.920|
0000ec  2005              MOVS     r0,#5                 ;55
0000ee  f7fffffe          BL       _Anki_Log
0000f2  f04f6080          MOV      r0,#0x4000000         ;55
0000f6  e79e              B        |L216.54|
                  |L216.248|
0000f8  2044              MOVS     r0,#0x44              ;68
0000fa  e9cd9000          STRD     r9,r0,[sp,#0]         ;68
0000fe  a38d              ADR      r3,|L216.820|
000100  a2ab              ADR      r2,|L216.944|
000102  a1a5              ADR      r1,|L216.920|
000104  2005              MOVS     r0,#5                 ;68
000106  f7fffffe          BL       _Anki_Log
00010a  f04f60a0          MOV      r0,#0x5000000         ;68
00010e  e792              B        |L216.54|
                  |L216.272|
000110  2101              MOVS     r1,#1                 ;68
000112  4628              MOV      r0,r5                 ;68
000114  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000118  42b0              CMP      r0,r6                 ;68
00011a  d00b              BEQ      |L216.308|
                  |L216.284|
00011c  2049              MOVS     r0,#0x49              ;73
00011e  e9cd9000          STRD     r9,r0,[sp,#0]         ;73
000122  a384              ADR      r3,|L216.820|
000124  4ab2              LDR      r2,|L216.1008|
000126  a19c              ADR      r1,|L216.920|
000128  2005              MOVS     r0,#5                 ;73
00012a  f7fffffe          BL       _Anki_Log
00012e  f04f60a0          MOV      r0,#0x5000000         ;73
000132  e780              B        |L216.54|
                  |L216.308|
000134  e9dd7614          LDRD     r7,r6,[sp,#0x50]      ;73
000138  4628              MOV      r0,r5                 ;73
00013a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00013e  2800              CMP      r0,#0                 ;73
000140  d07e              BEQ      |L216.576|
000142  4638              MOV      r0,r7                 ;78
000144  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000148  2800              CMP      r0,#0                 ;78
00014a  d079              BEQ      |L216.576|
00014c  4630              MOV      r0,r6                 ;78
00014e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000152  2800              CMP      r0,#0                 ;78
000154  d074              BEQ      |L216.576|
000156  4620              MOV      r0,r4                 ;78
000158  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00015c  2800              CMP      r0,#0                 ;78
00015e  d06f              BEQ      |L216.576|
000160  6928              LDR      r0,[r5,#0x10]         ;78
000162  9000              STR      r0,[sp,#0]            ;78
000164  6938              LDR      r0,[r7,#0x10]         ;78
000166  9001              STR      r0,[sp,#4]            ;78
000168  6930              LDR      r0,[r6,#0x10]         ;78
00016a  9002              STR      r0,[sp,#8]            ;78
00016c  6920              LDR      r0,[r4,#0x10]         ;78
00016e  2100              MOVS     r1,#0                 ;78
000170  466a              MOV      r2,sp                 ;78
000172  9003              STR      r0,[sp,#0xc]          ;78
                  |L216.372|
000174  1c48              ADDS     r0,r1,#1              ;78
000176  2804              CMP      r0,#4                 ;78
000178  bfb8              IT       LT                    ;78
00017a  f8523021          LDRLT    r3,[r2,r1,LSL #2]     ;78
00017e  da06              BGE      |L216.398|
                  |L216.384|
000180  f852c020          LDR      r12,[r2,r0,LSL #2]    ;78
000184  4563              CMP      r3,r12                ;78
000186  d076              BEQ      |L216.630|
000188  1c40              ADDS     r0,r0,#1              ;78
00018a  2804              CMP      r0,#4                 ;78
00018c  dbf8              BLT      |L216.384|
                  |L216.398|
00018e  1c49              ADDS     r1,r1,#1              ;78
000190  2904              CMP      r1,#4                 ;78
000192  dbef              BLT      |L216.372|
000194  eeb80ae8          VCVT.F32.S32 s0,s17                ;83
000198  eef7ba00          VMOV.F32 s23,#1.00000000       ;83
00019c  f1b80f00          CMP      r8,#0                 ;88
0001a0  ee30aa6b          VSUB.F32 s20,s0,s23            ;83
0001a4  eeb80ac8          VCVT.F32.S32 s0,s16                ;84
0001a8  ee709a6b          VSUB.F32 s19,s0,s23            ;84
0001ac  bf18              IT       NE                    ;88
0001ae  f04f0b01          MOVNE    r11,#1                ;88
0001b2  f8cdb000          STR      r11,[sp,#0]           ;88
0001b6  bf08              IT       EQ                    ;89
0001b8  f8dda010          LDREQ    r10,[sp,#0x10]        ;89
0001bc  f04f0700          MOV      r7,#0                 ;91
0001c0  f1bb0f00          CMP      r11,#0                ;91
0001c4  bfc4              ITT      GT                    ;101
0001c6  ed9fba8b          VLDRGT   s22,|L216.1012|
0001ca  ed9f9a8b          VLDRGT   s18,|L216.1016|
0001ce  dd50              BLE      |L216.626|
                  |L216.464|
0001d0  9814              LDR      r0,[sp,#0x50]         ;91
0001d2  2600              MOVS     r6,#0                 ;97
0001d4  f1ba0f00          CMP      r10,#0                ;97
0001d8  6901              LDR      r1,[r0,#0x10]         ;97
0001da  6880              LDR      r0,[r0,#8]            ;97
0001dc  fb071b00          MLA      r11,r7,r0,r1          ;97
0001e0  9815              LDR      r0,[sp,#0x54]         ;97
0001e2  6901              LDR      r1,[r0,#0x10]         ;97
0001e4  6880              LDR      r0,[r0,#8]            ;97
0001e6  fb071900          MLA      r9,r7,r0,r1           ;97
0001ea  68a9              LDR      r1,[r5,#8]            ;97
0001ec  6928              LDR      r0,[r5,#0x10]         ;97
0001ee  fb070801          MLA      r8,r7,r1,r0           ;97
0001f2  dd3a              BLE      |L216.618|
                  |L216.500|
0001f4  eb0b0086          ADD      r0,r11,r6,LSL #2      ;98
0001f8  edd0ca00          VLDR     s25,[r0,#0]           ;98
0001fc  eb090086          ADD      r0,r9,r6,LSL #2       ;99
000200  ed90ca00          VLDR     s24,[r0,#0]           ;99
000204  ee3c0a8b          VADD.F32 s0,s25,s22            ;101
000208  f7fffffe          BL       __hardfp_floorf
00020c  eeb08a40          VMOV.F32 s16,s0                ;101
000210  eeb00a6c          VMOV.F32 s0,s25                ;102
000214  f7fffffe          BL       __hardfp_ceilf
000218  eeb0da40          VMOV.F32 s26,s0                ;102
00021c  ee3c0a0b          VADD.F32 s0,s24,s22            ;104
000220  f7fffffe          BL       __hardfp_floorf
000224  eef08a40          VMOV.F32 s17,s0                ;104
000228  eeb00a4c          VMOV.F32 s0,s24                ;105
00022c  f7fffffe          BL       __hardfp_ceilf
000230  eeb58ac0          VCMPE.F32 s16,#0.0              ;108
000234  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
000238  d310              BCC      |L216.604|
00023a  eeb4daca          VCMPE.F32 s26,s20               ;108
00023e  e000              B        |L216.578|
                  |L216.576|
000240  e019              B        |L216.630|
                  |L216.578|
000242  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
000246  dc09              BGT      |L216.604|
000248  eef58ac0          VCMPE.F32 s17,#0.0              ;108
00024c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
000250  d304              BCC      |L216.604|
000252  eeb40ae9          VCMPE.F32 s0,s19                ;108
000256  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
00025a  dd17              BLE      |L216.652|
                  |L216.604|
00025c  eb080086          ADD      r0,r8,r6,LSL #2       ;109
000260  edc0aa00          VSTR     s21,[r0,#0]           ;109
                  |L216.612|
000264  1c76              ADDS     r6,r6,#1              ;97
000266  4556              CMP      r6,r10                ;97
000268  dbc4              BLT      |L216.500|
                  |L216.618|
00026a  9800              LDR      r0,[sp,#0]            ;91
00026c  1c7f              ADDS     r7,r7,#1              ;91
00026e  4287              CMP      r7,r0                 ;91
000270  dbae              BLT      |L216.464|
                  |L216.626|
000272  2000              MOVS     r0,#0                 ;139
000274  e6df              B        |L216.54|
                  |L216.630|
000276  204e              MOVS     r0,#0x4e              ;78
000278  e9cd9000          STRD     r9,r0,[sp,#0]         ;78
00027c  a32d              ADR      r3,|L216.820|
00027e  4a5f              LDR      r2,|L216.1020|
000280  a145              ADR      r1,|L216.920|
000282  2005              MOVS     r0,#5                 ;78
000284  f7fffffe          BL       _Anki_Log
000288  485d              LDR      r0,|L216.1024|
00028a  e6d4              B        |L216.54|
                  |L216.652|
00028c  ee7c0ac8          VSUB.F32 s1,s25,s16            ;113
000290  ee7c1a68          VSUB.F32 s3,s24,s17            ;116
000294  eef58ac0          VCMPE.F32 s17,#0.0              ;116
000298  ee3b1ae0          VSUB.F32 s2,s23,s1             ;114
00029c  ee7b2ae1          VSUB.F32 s5,s23,s3             ;117
0002a0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
0002a4  bfcc              ITE      GT                    ;117
0002a6  ee382a89          VADDGT.F32 s4,s17,s18            ;117
0002aa  ee382ac9          VSUBLE.F32 s4,s17,s18            ;117
0002ae  eebd2ac2          VCVT.S32.F32 s4,s4                 ;117
0002b2  eeb50ac0          VCMPE.F32 s0,#0.0               ;117
0002b6  ee121a10          VMOV     r1,s4                 ;117
0002ba  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
0002be  bfcc              ITE      GT                    ;117
0002c0  ee300a09          VADDGT.F32 s0,s0,s18             ;117
0002c4  ee300a49          VSUBLE.F32 s0,s0,s18             ;117
0002c8  eebd0ac0          VCVT.S32.F32 s0,s0                 ;117
0002cc  eeb58ac0          VCMPE.F32 s16,#0.0              ;117
0002d0  ee10ca10          VMOV     r12,s0                ;117
0002d4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
0002d8  bfcc              ITE      GT                    ;117
0002da  ee380a09          VADDGT.F32 s0,s16,s18            ;117
0002de  ee380a49          VSUBLE.F32 s0,s16,s18            ;117
0002e2  eebd0ac0          VCVT.S32.F32 s0,s0                 ;117
0002e6  68a3              LDR      r3,[r4,#8]            ;117
0002e8  6922              LDR      r2,[r4,#0x10]         ;117
0002ea  ee100a10          VMOV     r0,s0                 ;117
0002ee  fb012103          MLA      r1,r1,r3,r2           ;117
0002f2  eb010180          ADD      r1,r1,r0,LSL #2       ;117
0002f6  fb0c2203          MLA      r2,r12,r3,r2          ;117
0002fa  ed910a00          VLDR     s0,[r1,#0]            ;126
0002fe  eb020080          ADD      r0,r2,r0,LSL #2       ;126
000302  ed913a01          VLDR     s6,[r1,#4]            ;127
000306  ee210a00          VMUL.F32 s0,s2,s0              ;127
00030a  ed902a00          VLDR     s4,[r0,#0]            ;128
00030e  edd03a01          VLDR     s7,[r0,#4]            ;129
000312  eb080086          ADD      r0,r8,r6,LSL #2       ;135
000316  ee000a83          VMLA.F32 s0,s1,s6              ;135
00031a  ee211a02          VMUL.F32 s2,s2,s4              ;135
00031e  ee001aa3          VMLA.F32 s2,s1,s7              ;135
000322  ee220a80          VMUL.F32 s0,s5,s0              ;135
000326  ee010a81          VMLA.F32 s0,s3,s2              ;135
00032a  ed800a00          VSTR     s0,[r0,#0]            ;135
00032e  e799              B        |L216.612|
;;;141    
                          ENDP

                  |L216.816|
                          DCD      _ZZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
                  |L216.820|
000334  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/interp"
000338  6f726574
00033c  6563685c
000340  636f6d6d
000344  6f6e5c69
000348  6e636c75
00034c  64655c61
000350  6e6b692f
000354  636f6d6d
000358  6f6e2f72
00035c  6f626f74
000360  2f696e74
000364  657270  
000367  6f6c6174          DCB      "olate.h",0
00036b  652e6800
00036f  00                DCB      0
                  |L216.880|
000370  4f6e6c79          DCB      "Only INTERPOLATE_LINEAR is supported",0
000374  20494e54
000378  4552504f
00037c  4c415445
000380  5f4c494e
000384  45415220
000388  69732073
00038c  7570706f
000390  72746564
000394  00      
000395  00                DCB      0
000396  00                DCB      0
000397  00                DCB      0
                  |L216.920|
000398  496e7465          DCB      "Interp2",0
00039c  72703200
                  |L216.928|
0003a0  496e7661          DCB      "Invalid objects",0
0003a4  6c696420
0003a8  6f626a65
0003ac  63747300
                  |L216.944|
0003b0  78436f6f          DCB      "xCoordinates, yCoordinates, and out must all be the sam"
0003b4  7264696e
0003b8  61746573
0003bc  2c207943
0003c0  6f6f7264
0003c4  696e6174
0003c8  65732c20
0003cc  616e6420
0003d0  6f757420
0003d4  6d757374
0003d8  20616c6c
0003dc  20626520
0003e0  74686520
0003e4  73616d  
0003e7  65207369          DCB      "e sizes",0
0003eb  7a657300
0003ef  00                DCB      0
                  |L216.1008|
                          DCD      ||.constdata||+0x47c
                  |L216.1012|
0003f4  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L216.1016|
0003f8  3f000000          DCFS     0x3f000000 ; 0.5
                  |L216.1020|
                          DCD      ||.constdata||+0x4d0
                  |L216.1024|
                          DCD      0x01000003

                          AREA ||area_number.217||, COMGROUP=_ZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_, LINKORDER=||t._ZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.217||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix3AddIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix3AddIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix3AddIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE PROC ; Anki::Embedded::Matrix::Add<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
;;;171    
;;;172          template<typename InType, typename IntermediateType, typename OutType> Result Add(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;173          {
000004  b0b5              SUB      sp,sp,#0xd4
000006  4605              MOV      r5,r0
000008  e9dde046          LDRD     lr,r0,[sp,#0x118]
00000c  460c              MOV      r4,r1
00000e  e9dd1c3e          LDRD     r1,r12,[sp,#0xf8]
000012  e9dd6740          LDRD     r6,r7,[sp,#0x100]
000016  e9dd8942          LDRD     r8,r9,[sp,#0x108]
00001a  e9ddab44          LDRD     r10,r11,[sp,#0x110]
;;;174            return Elementwise::ApplyOperation<InType, Elementwise::Add<InType, IntermediateType, OutType>, OutType>(in1, in2, out);
00001e  f8cdc0ac          STR      r12,[sp,#0xac]
000022  9228              STR      r2,[sp,#0xa0]
000024  e9cd3129          STRD     r3,r1,[sp,#0xa4]
000028  e9cd892e          STRD     r8,r9,[sp,#0xb8]
00002c  e9cd672c          STRD     r6,r7,[sp,#0xb0]
000030  9948              LDR      r1,[sp,#0x120]
000032  f8cda0c0          STR      r10,[sp,#0xc0]
000036  e9cd0133          STRD     r0,r1,[sp,#0xcc]
00003a  e9cdbe31          STRD     r11,lr,[sp,#0xc4]
00003e  f1050618          ADD      r6,r5,#0x18
000042  f1040718          ADD      r7,r4,#0x18
000046  f10d08b8          ADD      r8,sp,#0xb8
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000050  f8df91c0          LDR      r9,|L223.532|
000054  f04f6a80          MOV      r10,#0x4000000
000058  2800              CMP      r0,#0
00005a  d06c              BEQ      |L223.310|
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000062  2800              CMP      r0,#0
000064  d067              BEQ      |L223.310|
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00006c  2800              CMP      r0,#0
00006e  d062              BEQ      |L223.310|
000070  f894c030          LDRB     r12,[r4,#0x30]
000074  f8953030          LDRB     r3,[r5,#0x30]
000078  a828              ADD      r0,sp,#0xa0
00007a  f1040b0c          ADD      r11,r4,#0xc
00007e  e9cdc002          STRD     r12,r0,[sp,#8]
000082  e9cd4b00          STRD     r4,r11,[sp,#0]
000086  f10d0eac          ADD      lr,sp,#0xac
00008a  f105020c          ADD      r2,r5,#0xc
00008e  4629              MOV      r1,r5
000090  f8cde010          STR      lr,[sp,#0x10]
000094  a806              ADD      r0,sp,#0x18
000096  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
00009a  f89d0018          LDRB     r0,[sp,#0x18]
00009e  2800              CMP      r0,#0
0000a0  d057              BEQ      |L223.338|
0000a2  f89d0019          LDRB     r0,[sp,#0x19]
0000a6  2800              CMP      r0,#0
0000a8  d061              BEQ      |L223.366|
0000aa  980d              LDR      r0,[sp,#0x34]
0000ac  2500              MOVS     r5,#0
0000ae  2800              CMP      r0,#0
0000b0  f34080ab          BLE.W    |L223.522|
                  |L223.180|
0000b4  9809              LDR      r0,[sp,#0x24]
0000b6  68b2              LDR      r2,[r6,#8]
0000b8  6931              LDR      r1,[r6,#0x10]
0000ba  fb001402          MLA      r4,r0,r2,r1
0000be  980b              LDR      r0,[sp,#0x2c]
0000c0  68ba              LDR      r2,[r7,#8]
0000c2  6939              LDR      r1,[r7,#0x10]
0000c4  fb001a02          MLA      r10,r0,r2,r1
0000c8  9807              LDR      r0,[sp,#0x1c]
0000ca  f8d82008          LDR      r2,[r8,#8]
0000ce  f8d81010          LDR      r1,[r8,#0x10]
0000d2  fb001902          MLA      r9,r0,r2,r1
0000d6  a806              ADD      r0,sp,#0x18
0000d8  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
0000dc  990e              LDR      r1,[sp,#0x38]
0000de  2000              MOVS     r0,#0
0000e0  2900              CMP      r1,#0
0000e2  dd20              BLE      |L223.294|
                  |L223.228|
0000e4  990a              LDR      r1,[sp,#0x28]
0000e6  1c40              ADDS     r0,r0,#1
0000e8  eb040181          ADD      r1,r4,r1,LSL #2
0000ec  ed910a00          VLDR     s0,[r1,#0]
0000f0  990c              LDR      r1,[sp,#0x30]
0000f2  eb0a0181          ADD      r1,r10,r1,LSL #2
0000f6  edd10a00          VLDR     s1,[r1,#0]
0000fa  9908              LDR      r1,[sp,#0x20]
0000fc  ee300a20          VADD.F32 s0,s0,s1
000100  eb090181          ADD      r1,r9,r1,LSL #2
000104  ed810a00          VSTR     s0,[r1,#0]
000108  9a10              LDR      r2,[sp,#0x40]
00010a  990a              LDR      r1,[sp,#0x28]
00010c  4411              ADD      r1,r1,r2
00010e  910a              STR      r1,[sp,#0x28]
000110  9a12              LDR      r2,[sp,#0x48]
000112  990c              LDR      r1,[sp,#0x30]
000114  4411              ADD      r1,r1,r2
000116  910c              STR      r1,[sp,#0x30]
000118  9a0f              LDR      r2,[sp,#0x3c]
00011a  9908              LDR      r1,[sp,#0x20]
00011c  4411              ADD      r1,r1,r2
00011e  9108              STR      r1,[sp,#0x20]
000120  990e              LDR      r1,[sp,#0x38]
000122  4281              CMP      r1,r0
000124  dcde              BGT      |L223.228|
                  |L223.294|
000126  a806              ADD      r0,sp,#0x18
000128  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
00012c  980d              LDR      r0,[sp,#0x34]
00012e  1c6d              ADDS     r5,r5,#1
000130  42a8              CMP      r0,r5
000132  dcbf              BGT      |L223.180|
000134  e069              B        |L223.522|
                  |L223.310|
000136  f2407022          MOV      r0,#0x722
00013a  e9cd9000          STRD     r9,r0,[sp,#0]
00013e  a336              ADR      r3,|L223.536|
000140  a243              ADR      r2,|L223.592|
000142  a147              ADR      r1,|L223.608|
000144  2005              MOVS     r0,#5
000146  f7fffffe          BL       _Anki_Log
;;;175          } // template<typename Type> Result Add(const ConstArraySliceExpression<Type> &in1, const ConstArraySliceExpression<Type> &in2, const ArraySlice<Type> &out)
00014a  b035              ADD      sp,sp,#0xd4
00014c  4650              MOV      r0,r10
00014e  e8bd8ff0          POP      {r4-r11,pc}
                  |L223.338|
000152  f240702a          MOV      r0,#0x72a
000156  e9cd9000          STRD     r9,r0,[sp,#0]
00015a  a32f              ADR      r3,|L223.536|
00015c  a249              ADR      r2,|L223.644|
00015e  a140              ADR      r1,|L223.608|
000160  2005              MOVS     r0,#5
000162  f7fffffe          BL       _Anki_Log
000166  b035              ADD      sp,sp,#0xd4
000168  4650              MOV      r0,r10
00016a  e8bd8ff0          POP      {r4-r11,pc}
                  |L223.366|
00016e  980d              LDR      r0,[sp,#0x34]
000170  2400              MOVS     r4,#0
000172  2800              CMP      r0,#0
000174  dd49              BLE      |L223.522|
                  |L223.374|
000176  9807              LDR      r0,[sp,#0x1c]
000178  f8d82008          LDR      r2,[r8,#8]
00017c  f8d81010          LDR      r1,[r8,#0x10]
000180  fb001502          MLA      r5,r0,r2,r1
000184  a806              ADD      r0,sp,#0x18
000186  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
00018a  990e              LDR      r1,[sp,#0x38]
00018c  2000              MOVS     r0,#0
00018e  2900              CMP      r1,#0
000190  dd34              BLE      |L223.508|
                  |L223.402|
000192  e9dd2109          LDRD     r2,r1,[sp,#0x24]
000196  f8d6c008          LDR      r12,[r6,#8]
00019a  6933              LDR      r3,[r6,#0x10]
00019c  1c40              ADDS     r0,r0,#1
00019e  fb02320c          MLA      r2,r2,r12,r3
0001a2  eb020181          ADD      r1,r2,r1,LSL #2
0001a6  f8d7c008          LDR      r12,[r7,#8]
0001aa  ed910a00          VLDR     s0,[r1,#0]
0001ae  e9dd210b          LDRD     r2,r1,[sp,#0x2c]
0001b2  693b              LDR      r3,[r7,#0x10]
0001b4  fb02320c          MLA      r2,r2,r12,r3
0001b8  eb020181          ADD      r1,r2,r1,LSL #2
0001bc  edd10a00          VLDR     s1,[r1,#0]
0001c0  9908              LDR      r1,[sp,#0x20]
0001c2  ee300a20          VADD.F32 s0,s0,s1
0001c6  eb050181          ADD      r1,r5,r1,LSL #2
0001ca  ed810a00          VSTR     s0,[r1,#0]
0001ce  9a10              LDR      r2,[sp,#0x40]
0001d0  990a              LDR      r1,[sp,#0x28]
0001d2  4411              ADD      r1,r1,r2
0001d4  910a              STR      r1,[sp,#0x28]
0001d6  9a11              LDR      r2,[sp,#0x44]
0001d8  9909              LDR      r1,[sp,#0x24]
0001da  4411              ADD      r1,r1,r2
0001dc  9109              STR      r1,[sp,#0x24]
0001de  9a12              LDR      r2,[sp,#0x48]
0001e0  990c              LDR      r1,[sp,#0x30]
0001e2  4411              ADD      r1,r1,r2
0001e4  910c              STR      r1,[sp,#0x30]
0001e6  9a13              LDR      r2,[sp,#0x4c]
0001e8  990b              LDR      r1,[sp,#0x2c]
0001ea  4411              ADD      r1,r1,r2
0001ec  910b              STR      r1,[sp,#0x2c]
0001ee  9a0f              LDR      r2,[sp,#0x3c]
0001f0  9908              LDR      r1,[sp,#0x20]
0001f2  4411              ADD      r1,r1,r2
0001f4  9108              STR      r1,[sp,#0x20]
0001f6  990e              LDR      r1,[sp,#0x38]
0001f8  4281              CMP      r1,r0
0001fa  dcca              BGT      |L223.402|
                  |L223.508|
0001fc  a806              ADD      r0,sp,#0x18
0001fe  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
000202  980d              LDR      r0,[sp,#0x34]
000204  1c64              ADDS     r4,r4,#1
000206  42a0              CMP      r0,r4
000208  dcb5              BGT      |L223.374|
                  |L223.522|
00020a  b035              ADD      sp,sp,#0xd4
00020c  2000              MOVS     r0,#0
00020e  e8bd8ff0          POP      {r4-r11,pc}
;;;176    
                          ENDP

000212  0000              DCW      0x0000
                  |L223.532|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Add<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L223.536|
000218  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
00021c  6f726574
000220  6563685c
000224  636f6d6d
000228  6f6e5c69
00022c  6e636c75
000230  64655c61
000234  6e6b692f
000238  636f6d6d
00023c  6f6e2f72
000240  6f626f74
000244  2f6d6174
000248  726978  
00024b  2e6800            DCB      ".h",0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L223.592|
000250  496e7661          DCB      "Invalid objects",0
000254  6c696420
000258  6f626a65
00025c  63747300
                  |L223.608|
000260  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
000264  69783a3a
000268  456c656d
00026c  656e7477
000270  6973653a
000274  3a417070
000278  6c794f70
00027c  65726174
000280  696f6e00
                  |L223.644|
000284  4c696d69          DCB      "Limits is not valid",0
000288  74732069
00028c  73206e6f
000290  74207661
000294  6c696400

                          AREA ||area_number.224||, COMGROUP=_ZN4Anki8Embedded6Matrix3AddIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix3AddIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.224||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix3AddIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix8SubtractIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix8SubtractIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix8SubtractIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE PROC ; Anki::Embedded::Matrix::Subtract<float, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
;;;186    
;;;187          template<typename InType, typename IntermediateType, typename OutType> Result Subtract(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;188          {
000004  b0b5              SUB      sp,sp,#0xd4
000006  4605              MOV      r5,r0
000008  e9dde046          LDRD     lr,r0,[sp,#0x118]
00000c  460c              MOV      r4,r1
00000e  e9dd1c3e          LDRD     r1,r12,[sp,#0xf8]
000012  e9dd6740          LDRD     r6,r7,[sp,#0x100]
000016  e9dd8942          LDRD     r8,r9,[sp,#0x108]
00001a  e9ddab44          LDRD     r10,r11,[sp,#0x110]
;;;189            return Elementwise::ApplyOperation<InType, Elementwise::Subtract<InType, IntermediateType, OutType>, OutType>(in1, in2, out);
00001e  f8cdc0ac          STR      r12,[sp,#0xac]
000022  9228              STR      r2,[sp,#0xa0]
000024  e9cd3129          STRD     r3,r1,[sp,#0xa4]
000028  e9cd892e          STRD     r8,r9,[sp,#0xb8]
00002c  e9cd672c          STRD     r6,r7,[sp,#0xb0]
000030  9948              LDR      r1,[sp,#0x120]
000032  f8cda0c0          STR      r10,[sp,#0xc0]
000036  e9cd0133          STRD     r0,r1,[sp,#0xcc]
00003a  e9cdbe31          STRD     r11,lr,[sp,#0xc4]
00003e  f1050618          ADD      r6,r5,#0x18
000042  f1040718          ADD      r7,r4,#0x18
000046  f10d08b8          ADD      r8,sp,#0xb8
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000050  f8df91c0          LDR      r9,|L230.532|
000054  f04f6a80          MOV      r10,#0x4000000
000058  2800              CMP      r0,#0
00005a  d06c              BEQ      |L230.310|
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000062  2800              CMP      r0,#0
000064  d067              BEQ      |L230.310|
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00006c  2800              CMP      r0,#0
00006e  d062              BEQ      |L230.310|
000070  f894c030          LDRB     r12,[r4,#0x30]
000074  f8953030          LDRB     r3,[r5,#0x30]
000078  a828              ADD      r0,sp,#0xa0
00007a  f1040b0c          ADD      r11,r4,#0xc
00007e  e9cdc002          STRD     r12,r0,[sp,#8]
000082  e9cd4b00          STRD     r4,r11,[sp,#0]
000086  f10d0eac          ADD      lr,sp,#0xac
00008a  f105020c          ADD      r2,r5,#0xc
00008e  4629              MOV      r1,r5
000090  f8cde010          STR      lr,[sp,#0x10]
000094  a806              ADD      r0,sp,#0x18
000096  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
00009a  f89d0018          LDRB     r0,[sp,#0x18]
00009e  2800              CMP      r0,#0
0000a0  d057              BEQ      |L230.338|
0000a2  f89d0019          LDRB     r0,[sp,#0x19]
0000a6  2800              CMP      r0,#0
0000a8  d061              BEQ      |L230.366|
0000aa  980d              LDR      r0,[sp,#0x34]
0000ac  2500              MOVS     r5,#0
0000ae  2800              CMP      r0,#0
0000b0  f34080ab          BLE.W    |L230.522|
                  |L230.180|
0000b4  9809              LDR      r0,[sp,#0x24]
0000b6  68b2              LDR      r2,[r6,#8]
0000b8  6931              LDR      r1,[r6,#0x10]
0000ba  fb001402          MLA      r4,r0,r2,r1
0000be  980b              LDR      r0,[sp,#0x2c]
0000c0  68ba              LDR      r2,[r7,#8]
0000c2  6939              LDR      r1,[r7,#0x10]
0000c4  fb001a02          MLA      r10,r0,r2,r1
0000c8  9807              LDR      r0,[sp,#0x1c]
0000ca  f8d82008          LDR      r2,[r8,#8]
0000ce  f8d81010          LDR      r1,[r8,#0x10]
0000d2  fb001902          MLA      r9,r0,r2,r1
0000d6  a806              ADD      r0,sp,#0x18
0000d8  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
0000dc  990e              LDR      r1,[sp,#0x38]
0000de  2000              MOVS     r0,#0
0000e0  2900              CMP      r1,#0
0000e2  dd20              BLE      |L230.294|
                  |L230.228|
0000e4  990a              LDR      r1,[sp,#0x28]
0000e6  1c40              ADDS     r0,r0,#1
0000e8  eb040181          ADD      r1,r4,r1,LSL #2
0000ec  ed910a00          VLDR     s0,[r1,#0]
0000f0  990c              LDR      r1,[sp,#0x30]
0000f2  eb0a0181          ADD      r1,r10,r1,LSL #2
0000f6  edd10a00          VLDR     s1,[r1,#0]
0000fa  9908              LDR      r1,[sp,#0x20]
0000fc  ee300a60          VSUB.F32 s0,s0,s1
000100  eb090181          ADD      r1,r9,r1,LSL #2
000104  ed810a00          VSTR     s0,[r1,#0]
000108  9a10              LDR      r2,[sp,#0x40]
00010a  990a              LDR      r1,[sp,#0x28]
00010c  4411              ADD      r1,r1,r2
00010e  910a              STR      r1,[sp,#0x28]
000110  9a12              LDR      r2,[sp,#0x48]
000112  990c              LDR      r1,[sp,#0x30]
000114  4411              ADD      r1,r1,r2
000116  910c              STR      r1,[sp,#0x30]
000118  9a0f              LDR      r2,[sp,#0x3c]
00011a  9908              LDR      r1,[sp,#0x20]
00011c  4411              ADD      r1,r1,r2
00011e  9108              STR      r1,[sp,#0x20]
000120  990e              LDR      r1,[sp,#0x38]
000122  4281              CMP      r1,r0
000124  dcde              BGT      |L230.228|
                  |L230.294|
000126  a806              ADD      r0,sp,#0x18
000128  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
00012c  980d              LDR      r0,[sp,#0x34]
00012e  1c6d              ADDS     r5,r5,#1
000130  42a8              CMP      r0,r5
000132  dcbf              BGT      |L230.180|
000134  e069              B        |L230.522|
                  |L230.310|
000136  f2407022          MOV      r0,#0x722
00013a  e9cd9000          STRD     r9,r0,[sp,#0]
00013e  a336              ADR      r3,|L230.536|
000140  a243              ADR      r2,|L230.592|
000142  a147              ADR      r1,|L230.608|
000144  2005              MOVS     r0,#5
000146  f7fffffe          BL       _Anki_Log
;;;190          } // template<typename Type> Result Subtract(const ConstArraySliceExpression<Type> &in1, const ConstArraySliceExpression<Type> &in2, const ArraySlice<Type> &out)
00014a  b035              ADD      sp,sp,#0xd4
00014c  4650              MOV      r0,r10
00014e  e8bd8ff0          POP      {r4-r11,pc}
                  |L230.338|
000152  f240702a          MOV      r0,#0x72a
000156  e9cd9000          STRD     r9,r0,[sp,#0]
00015a  a32f              ADR      r3,|L230.536|
00015c  a249              ADR      r2,|L230.644|
00015e  a140              ADR      r1,|L230.608|
000160  2005              MOVS     r0,#5
000162  f7fffffe          BL       _Anki_Log
000166  b035              ADD      sp,sp,#0xd4
000168  4650              MOV      r0,r10
00016a  e8bd8ff0          POP      {r4-r11,pc}
                  |L230.366|
00016e  980d              LDR      r0,[sp,#0x34]
000170  2400              MOVS     r4,#0
000172  2800              CMP      r0,#0
000174  dd49              BLE      |L230.522|
                  |L230.374|
000176  9807              LDR      r0,[sp,#0x1c]
000178  f8d82008          LDR      r2,[r8,#8]
00017c  f8d81010          LDR      r1,[r8,#0x10]
000180  fb001502          MLA      r5,r0,r2,r1
000184  a806              ADD      r0,sp,#0x18
000186  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
00018a  990e              LDR      r1,[sp,#0x38]
00018c  2000              MOVS     r0,#0
00018e  2900              CMP      r1,#0
000190  dd34              BLE      |L230.508|
                  |L230.402|
000192  e9dd2109          LDRD     r2,r1,[sp,#0x24]
000196  f8d6c008          LDR      r12,[r6,#8]
00019a  6933              LDR      r3,[r6,#0x10]
00019c  1c40              ADDS     r0,r0,#1
00019e  fb02320c          MLA      r2,r2,r12,r3
0001a2  eb020181          ADD      r1,r2,r1,LSL #2
0001a6  f8d7c008          LDR      r12,[r7,#8]
0001aa  ed910a00          VLDR     s0,[r1,#0]
0001ae  e9dd210b          LDRD     r2,r1,[sp,#0x2c]
0001b2  693b              LDR      r3,[r7,#0x10]
0001b4  fb02320c          MLA      r2,r2,r12,r3
0001b8  eb020181          ADD      r1,r2,r1,LSL #2
0001bc  edd10a00          VLDR     s1,[r1,#0]
0001c0  9908              LDR      r1,[sp,#0x20]
0001c2  ee300a60          VSUB.F32 s0,s0,s1
0001c6  eb050181          ADD      r1,r5,r1,LSL #2
0001ca  ed810a00          VSTR     s0,[r1,#0]
0001ce  9a10              LDR      r2,[sp,#0x40]
0001d0  990a              LDR      r1,[sp,#0x28]
0001d2  4411              ADD      r1,r1,r2
0001d4  910a              STR      r1,[sp,#0x28]
0001d6  9a11              LDR      r2,[sp,#0x44]
0001d8  9909              LDR      r1,[sp,#0x24]
0001da  4411              ADD      r1,r1,r2
0001dc  9109              STR      r1,[sp,#0x24]
0001de  9a12              LDR      r2,[sp,#0x48]
0001e0  990c              LDR      r1,[sp,#0x30]
0001e2  4411              ADD      r1,r1,r2
0001e4  910c              STR      r1,[sp,#0x30]
0001e6  9a13              LDR      r2,[sp,#0x4c]
0001e8  990b              LDR      r1,[sp,#0x2c]
0001ea  4411              ADD      r1,r1,r2
0001ec  910b              STR      r1,[sp,#0x2c]
0001ee  9a0f              LDR      r2,[sp,#0x3c]
0001f0  9908              LDR      r1,[sp,#0x20]
0001f2  4411              ADD      r1,r1,r2
0001f4  9108              STR      r1,[sp,#0x20]
0001f6  990e              LDR      r1,[sp,#0x38]
0001f8  4281              CMP      r1,r0
0001fa  dcca              BGT      |L230.402|
                  |L230.508|
0001fc  a806              ADD      r0,sp,#0x18
0001fe  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
000202  980d              LDR      r0,[sp,#0x34]
000204  1c64              ADDS     r4,r4,#1
000206  42a0              CMP      r0,r4
000208  dcb5              BGT      |L230.374|
                  |L230.522|
00020a  b035              ADD      sp,sp,#0xd4
00020c  2000              MOVS     r0,#0
00020e  e8bd8ff0          POP      {r4-r11,pc}
;;;191    
                          ENDP

000212  0000              DCW      0x0000
                  |L230.532|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Subtract<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L230.536|
000218  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
00021c  6f726574
000220  6563685c
000224  636f6d6d
000228  6f6e5c69
00022c  6e636c75
000230  64655c61
000234  6e6b692f
000238  636f6d6d
00023c  6f6e2f72
000240  6f626f74
000244  2f6d6174
000248  726978  
00024b  2e6800            DCB      ".h",0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L230.592|
000250  496e7661          DCB      "Invalid objects",0
000254  6c696420
000258  6f626a65
00025c  63747300
                  |L230.608|
000260  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
000264  69783a3a
000268  456c656d
00026c  656e7477
000270  6973653a
000274  3a417070
000278  6c794f70
00027c  65726174
000280  696f6e00
                  |L230.644|
000284  4c696d69          DCB      "Limits is not valid",0
000288  74732069
00028c  73206e6f
000290  74207661
000294  6c696400

                          AREA ||area_number.231||, COMGROUP=_ZN4Anki8Embedded6Matrix8SubtractIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix8SubtractIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.231||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix8SubtractIfffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix8SubtractIhffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix8SubtractIhffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix8SubtractIhffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE PROC ; Anki::Embedded::Matrix::Subtract<unsigned char, float, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
;;;186    
;;;187          template<typename InType, typename IntermediateType, typename OutType> Result Subtract(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;188          {
000004  b0b5              SUB      sp,sp,#0xd4
000006  4605              MOV      r5,r0
000008  e9dde046          LDRD     lr,r0,[sp,#0x118]
00000c  460c              MOV      r4,r1
00000e  e9dd1c3e          LDRD     r1,r12,[sp,#0xf8]
000012  e9dd6740          LDRD     r6,r7,[sp,#0x100]
000016  e9dd8942          LDRD     r8,r9,[sp,#0x108]
00001a  e9ddab44          LDRD     r10,r11,[sp,#0x110]
;;;189            return Elementwise::ApplyOperation<InType, Elementwise::Subtract<InType, IntermediateType, OutType>, OutType>(in1, in2, out);
00001e  f8cdc0ac          STR      r12,[sp,#0xac]
000022  9228              STR      r2,[sp,#0xa0]
000024  e9cd3129          STRD     r3,r1,[sp,#0xa4]
000028  e9cd892e          STRD     r8,r9,[sp,#0xb8]
00002c  e9cd672c          STRD     r6,r7,[sp,#0xb0]
000030  9948              LDR      r1,[sp,#0x120]
000032  f8cda0c0          STR      r10,[sp,#0xc0]
000036  e9cd0133          STRD     r0,r1,[sp,#0xcc]
00003a  e9cdbe31          STRD     r11,lr,[sp,#0xc4]
00003e  f1050618          ADD      r6,r5,#0x18
000042  f1040718          ADD      r7,r4,#0x18
000046  f10d08b8          ADD      r8,sp,#0xb8
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000050  f8df91cc          LDR      r9,|L237.544|
000054  f04f6a80          MOV      r10,#0x4000000
000058  2800              CMP      r0,#0
00005a  d072              BEQ      |L237.322|
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000062  2800              CMP      r0,#0
000064  d06d              BEQ      |L237.322|
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00006c  2800              CMP      r0,#0
00006e  d068              BEQ      |L237.322|
000070  f894c030          LDRB     r12,[r4,#0x30]
000074  f8953030          LDRB     r3,[r5,#0x30]
000078  a828              ADD      r0,sp,#0xa0
00007a  f1040b0c          ADD      r11,r4,#0xc
00007e  e9cdc002          STRD     r12,r0,[sp,#8]
000082  e9cd4b00          STRD     r4,r11,[sp,#0]
000086  f10d0eac          ADD      lr,sp,#0xac
00008a  f105020c          ADD      r2,r5,#0xc
00008e  4629              MOV      r1,r5
000090  f8cde010          STR      lr,[sp,#0x10]
000094  a806              ADD      r0,sp,#0x18
000096  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
00009a  f89d0018          LDRB     r0,[sp,#0x18]
00009e  2800              CMP      r0,#0
0000a0  d05d              BEQ      |L237.350|
0000a2  f89d0019          LDRB     r0,[sp,#0x19]
0000a6  f04f0400          MOV      r4,#0
0000aa  2800              CMP      r0,#0
0000ac  980d              LDR      r0,[sp,#0x34]
0000ae  d064              BEQ      |L237.378|
0000b0  2800              CMP      r0,#0
0000b2  f34080b1          BLE.W    |L237.536|
                  |L237.182|
0000b6  9809              LDR      r0,[sp,#0x24]
0000b8  68b2              LDR      r2,[r6,#8]
0000ba  6931              LDR      r1,[r6,#0x10]
0000bc  fb001a02          MLA      r10,r0,r2,r1
0000c0  980b              LDR      r0,[sp,#0x2c]
0000c2  68ba              LDR      r2,[r7,#8]
0000c4  6939              LDR      r1,[r7,#0x10]
0000c6  fb001902          MLA      r9,r0,r2,r1
0000ca  9807              LDR      r0,[sp,#0x1c]
0000cc  f8d82008          LDR      r2,[r8,#8]
0000d0  f8d81010          LDR      r1,[r8,#0x10]
0000d4  fb001502          MLA      r5,r0,r2,r1
0000d8  a806              ADD      r0,sp,#0x18
0000da  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
0000de  990e              LDR      r1,[sp,#0x38]
0000e0  2000              MOVS     r0,#0
0000e2  2900              CMP      r1,#0
0000e4  dd24              BLE      |L237.304|
                  |L237.230|
0000e6  990a              LDR      r1,[sp,#0x28]
0000e8  1c40              ADDS     r0,r0,#1
0000ea  f81a2001          LDRB     r2,[r10,r1]
0000ee  990c              LDR      r1,[sp,#0x30]
0000f0  ee002a10          VMOV     s0,r2
0000f4  f8191001          LDRB     r1,[r9,r1]
0000f8  eef80a40          VCVT.F32.U32 s1,s0
0000fc  ee001a10          VMOV     s0,r1
000100  9908              LDR      r1,[sp,#0x20]
000102  eeb80a40          VCVT.F32.U32 s0,s0
000106  eb050181          ADD      r1,r5,r1,LSL #2
00010a  ee300ac0          VSUB.F32 s0,s1,s0
00010e  ed810a00          VSTR     s0,[r1,#0]
000112  9a10              LDR      r2,[sp,#0x40]
000114  990a              LDR      r1,[sp,#0x28]
000116  4411              ADD      r1,r1,r2
000118  910a              STR      r1,[sp,#0x28]
00011a  9a12              LDR      r2,[sp,#0x48]
00011c  990c              LDR      r1,[sp,#0x30]
00011e  4411              ADD      r1,r1,r2
000120  910c              STR      r1,[sp,#0x30]
000122  9a0f              LDR      r2,[sp,#0x3c]
000124  9908              LDR      r1,[sp,#0x20]
000126  4411              ADD      r1,r1,r2
000128  9108              STR      r1,[sp,#0x20]
00012a  990e              LDR      r1,[sp,#0x38]
00012c  4281              CMP      r1,r0
00012e  dcda              BGT      |L237.230|
                  |L237.304|
000130  a806              ADD      r0,sp,#0x18
000132  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
000136  980d              LDR      r0,[sp,#0x34]
000138  1c64              ADDS     r4,r4,#1
00013a  42a0              CMP      r0,r4
00013c  dcbb              BGT      |L237.182|
00013e  e06b              B        |L237.536|
000140  e7ff              B        |L237.322|
                  |L237.322|
000142  f2407022          MOV      r0,#0x722
000146  e9cd9000          STRD     r9,r0,[sp,#0]
00014a  a336              ADR      r3,|L237.548|
00014c  a243              ADR      r2,|L237.604|
00014e  a147              ADR      r1,|L237.620|
000150  2005              MOVS     r0,#5
000152  f7fffffe          BL       _Anki_Log
;;;190          } // template<typename Type> Result Subtract(const ConstArraySliceExpression<Type> &in1, const ConstArraySliceExpression<Type> &in2, const ArraySlice<Type> &out)
000156  b035              ADD      sp,sp,#0xd4
000158  4650              MOV      r0,r10
00015a  e8bd8ff0          POP      {r4-r11,pc}
                  |L237.350|
00015e  f240702a          MOV      r0,#0x72a
000162  e9cd9000          STRD     r9,r0,[sp,#0]
000166  a32f              ADR      r3,|L237.548|
000168  a249              ADR      r2,|L237.656|
00016a  a140              ADR      r1,|L237.620|
00016c  2005              MOVS     r0,#5
00016e  f7fffffe          BL       _Anki_Log
000172  b035              ADD      sp,sp,#0xd4
000174  4650              MOV      r0,r10
000176  e8bd8ff0          POP      {r4-r11,pc}
                  |L237.378|
00017a  2800              CMP      r0,#0
00017c  dd4c              BLE      |L237.536|
                  |L237.382|
00017e  9807              LDR      r0,[sp,#0x1c]
000180  f8d82008          LDR      r2,[r8,#8]
000184  f8d81010          LDR      r1,[r8,#0x10]
000188  fb001502          MLA      r5,r0,r2,r1
00018c  a806              ADD      r0,sp,#0x18
00018e  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE17OuterIncrementTopEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementTop()
000192  990e              LDR      r1,[sp,#0x38]
000194  2000              MOVS     r0,#0
000196  2900              CMP      r1,#0
000198  dd37              BLE      |L237.522|
                  |L237.410|
00019a  e9dd2109          LDRD     r2,r1,[sp,#0x24]
00019e  f8d6c008          LDR      r12,[r6,#8]
0001a2  6933              LDR      r3,[r6,#0x10]
0001a4  f8d79008          LDR      r9,[r7,#8]
0001a8  fb02320c          MLA      r2,r2,r12,r3
0001ac  f8d7c010          LDR      r12,[r7,#0x10]
0001b0  5c51              LDRB     r1,[r2,r1]
0001b2  e9dd320b          LDRD     r3,r2,[sp,#0x2c]
0001b6  fb03c309          MLA      r3,r3,r9,r12
0001ba  ee001a10          VMOV     s0,r1
0001be  5c9a              LDRB     r2,[r3,r2]
0001c0  9908              LDR      r1,[sp,#0x20]
0001c2  eef80a40          VCVT.F32.U32 s1,s0
0001c6  ee002a10          VMOV     s0,r2
0001ca  eb050181          ADD      r1,r5,r1,LSL #2
0001ce  1c40              ADDS     r0,r0,#1
0001d0  eeb80a40          VCVT.F32.U32 s0,s0
0001d4  ee300ac0          VSUB.F32 s0,s1,s0
0001d8  ed810a00          VSTR     s0,[r1,#0]
0001dc  9a10              LDR      r2,[sp,#0x40]
0001de  990a              LDR      r1,[sp,#0x28]
0001e0  4411              ADD      r1,r1,r2
0001e2  910a              STR      r1,[sp,#0x28]
0001e4  9a11              LDR      r2,[sp,#0x44]
0001e6  9909              LDR      r1,[sp,#0x24]
0001e8  4411              ADD      r1,r1,r2
0001ea  9109              STR      r1,[sp,#0x24]
0001ec  9a12              LDR      r2,[sp,#0x48]
0001ee  990c              LDR      r1,[sp,#0x30]
0001f0  4411              ADD      r1,r1,r2
0001f2  910c              STR      r1,[sp,#0x30]
0001f4  9a13              LDR      r2,[sp,#0x4c]
0001f6  990b              LDR      r1,[sp,#0x2c]
0001f8  4411              ADD      r1,r1,r2
0001fa  910b              STR      r1,[sp,#0x2c]
0001fc  9a0f              LDR      r2,[sp,#0x3c]
0001fe  9908              LDR      r1,[sp,#0x20]
000200  4411              ADD      r1,r1,r2
000202  9108              STR      r1,[sp,#0x20]
000204  990e              LDR      r1,[sp,#0x38]
000206  4281              CMP      r1,r0
000208  dcc7              BGT      |L237.410|
                  |L237.522|
00020a  a806              ADD      r0,sp,#0x18
00020c  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in2_out1IiE20OuterIncrementBottomEv ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::OuterIncrementBottom()
000210  980d              LDR      r0,[sp,#0x34]
000212  1c64              ADDS     r4,r4,#1
000214  42a0              CMP      r0,r4
000216  dcb2              BGT      |L237.382|
                  |L237.536|
000218  b035              ADD      sp,sp,#0xd4
00021a  2000              MOVS     r0,#0
00021c  e8bd8ff0          POP      {r4-r11,pc}
;;;191    
                          ENDP

                  |L237.544|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIhNS2_8SubtractIhffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<unsigned char, Anki::Embedded::Matrix::Elementwise::Subtract<unsigned char, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L237.548|
000224  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
000228  6f726574
00022c  6563685c
000230  636f6d6d
000234  6f6e5c69
000238  6e636c75
00023c  64655c61
000240  6e6b692f
000244  636f6d6d
000248  6f6e2f72
00024c  6f626f74
000250  2f6d6174
000254  726978  
000257  2e6800            DCB      ".h",0
00025a  00                DCB      0
00025b  00                DCB      0
                  |L237.604|
00025c  496e7661          DCB      "Invalid objects",0
000260  6c696420
000264  6f626a65
000268  63747300
                  |L237.620|
00026c  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
000270  69783a3a
000274  456c656d
000278  656e7477
00027c  6973653a
000280  3a417070
000284  6c794f70
000288  65726174
00028c  696f6e00
                  |L237.656|
000290  4c696d69          DCB      "Limits is not valid",0
000294  74732069
000298  73206e6f
00029c  74207661
0002a0  6c696400

                          AREA ||area_number.238||, COMGROUP=_ZN4Anki8Embedded6Matrix8SubtractIhffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix8SubtractIhffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.238||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix8SubtractIhffEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_||, COMGROUP=_ZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_ PROC ; Anki::Embedded::Interp2<unsigned char, unsigned char>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
;;;49     
;;;50         template<typename InType, typename OutType> Result Interp2(const Array<InType> &reference, const Array<f32> &xCoordinates, const Array<f32> &yCoordinates, Array<OutType> &out, const InterpolationType interpolationType, const OutType invalidValue)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;51         {
000004  4606              MOV      r6,r0
000006  ed2d8b0a          VPUSH    {d8-d12}
00000a  b087              SUB      sp,sp,#0x1c
00000c  4698              MOV      r8,r3
00000e  4691              MOV      r9,r2
000010  468b              MOV      r11,r1
;;;52           AnkiConditionalErrorAndReturnValue(interpolationType == INTERPOLATE_LINEAR,
000012  981a              LDR      r0,[sp,#0x68]
000014  4de5              LDR      r5,|L244.940|
000016  2800              CMP      r0,#0
000018  d00f              BEQ      |L244.58|
00001a  2034              MOVS     r0,#0x34
00001c  e9cd5000          STRD     r5,r0,[sp,#0]
000020  a3e3              ADR      r3,|L244.944|
000022  a2f2              ADR      r2,|L244.1004|
000024  a1fb              ADR      r1,|L244.1044|
000026  2005              MOVS     r0,#5
000028  f7fffffe          BL       _Anki_Log
00002c  f04f7040          MOV      r0,#0x3000000
                  |L244.48|
;;;53             RESULT_FAIL_INVALID_PARAMETER, "Interp2", "Only INTERPOLATE_LINEAR is supported");
;;;54     
;;;55           AnkiConditionalErrorAndReturnValue(AreValid(reference, xCoordinates, yCoordinates, out),
;;;56             RESULT_FAIL_INVALID_OBJECT, "Interp2", "Invalid objects");
;;;57     
;;;58           const s32 referenceHeight = reference.get_size(0);
;;;59           const s32 referenceWidth = reference.get_size(1);
;;;60     
;;;61           const s32 outHeight = out.get_size(0);
;;;62           const s32 outWidth = out.get_size(1);
;;;63     
;;;64           const s32 numOutputElements = outHeight * outWidth;
;;;65     
;;;66           const bool isOutputOneDimensional = (out.get_size(0) == 1);
;;;67     
;;;68           AnkiConditionalErrorAndReturnValue(
;;;69             AreEqualSize(out, xCoordinates, yCoordinates),
;;;70             RESULT_FAIL_INVALID_SIZE, "Interp2", "xCoordinates, yCoordinates, and out must all be the same sizes");
;;;71     
;;;72           if(isOutputOneDimensional) {
;;;73             AnkiConditionalErrorAndReturnValue(
;;;74               AreEqualSize(1, numOutputElements, out),
;;;75               RESULT_FAIL_INVALID_SIZE, "Interp2", "If out is a row vector, then out, xCoordinates, and yCoordinates must all be 1xN");
;;;76           }
;;;77     
;;;78           AnkiConditionalErrorAndReturnValue(
;;;79             NotAliased(out, xCoordinates, yCoordinates, reference),
;;;80             RESULT_FAIL_ALIASED_MEMORY, "Interp2", "xCoordinates, yCoordinates, and reference cannot be the same as out");
;;;81     
;;;82           const f32 xyReferenceMin = 0.0f;
;;;83           const f32 xReferenceMax = static_cast<f32>(referenceWidth) - 1.0f;
;;;84           const f32 yReferenceMax = static_cast<f32>(referenceHeight) - 1.0f;
;;;85     
;;;86           //const s32 numValues = xCoordinates.get_size(1);
;;;87     
;;;88           const s32 yIterationMax = isOutputOneDimensional ? 1                    : outHeight;
;;;89           const s32 xIterationMax = isOutputOneDimensional ? (outHeight*outWidth) : outWidth;
;;;90     
;;;91           for(s32 y=0; y<yIterationMax; y++) {
;;;92             const f32 * restrict pXCoordinates = xCoordinates.Pointer(y,0);
;;;93             const f32 * restrict pYCoordinates = yCoordinates.Pointer(y,0);
;;;94     
;;;95             OutType * restrict pOut = out.Pointer(y,0);
;;;96     
;;;97             for(s32 x=0; x<xIterationMax; x++) {
;;;98               const f32 curX = pXCoordinates[x];
;;;99               const f32 curY = pYCoordinates[x];
;;;100    
;;;101              const f32 x0 = FLT_FLOOR(curX);
;;;102              const f32 x1 = ceilf(curX); // x0 + 1.0f;
;;;103    
;;;104              const f32 y0 = FLT_FLOOR(curY);
;;;105              const f32 y1 = ceilf(curY); // y0 + 1.0f;
;;;106    
;;;107              // If out of bounds, set as invalid and continue
;;;108              if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;109                pOut[x] = invalidValue;
;;;110                continue;
;;;111              }
;;;112    
;;;113              const f32 alphaX = curX - x0;
;;;114              const f32 alphaXinverse = 1 - alphaX;
;;;115    
;;;116              const f32 alphaY = curY - y0;
;;;117              const f32 alphaYinverse = 1.0f - alphaY;
;;;118    
;;;119              const s32 y0S32 = Round<s32>(y0);
;;;120              const s32 y1S32 = Round<s32>(y1);
;;;121              const s32 x0S32 = Round<s32>(x0);
;;;122    
;;;123              const InType * restrict pReference_y0 = reference.Pointer(y0S32, x0S32);
;;;124              const InType * restrict pReference_y1 = reference.Pointer(y1S32, x0S32);
;;;125    
;;;126              const f32 pixelTL = *pReference_y0;
;;;127              const f32 pixelTR = *(pReference_y0+1);
;;;128              const f32 pixelBL = *pReference_y1;
;;;129              const f32 pixelBR = *(pReference_y1+1);
;;;130    
;;;131              const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;132    
;;;133              const OutType interpolatedPixel = RoundIfInteger<OutType>(interpolatedPixelF32);
;;;134    
;;;135              pOut[x] = interpolatedPixel;
;;;136            } // for(s32 x=0; x<xIterationMax; x++)
;;;137          } // for(s32 y=0; y<yIterationMax; y++)
;;;138    
;;;139          return RESULT_OK;
;;;140        } // Interp2
000030  b007              ADD      sp,sp,#0x1c
000032  ecbd8b0a          VPOP     {d8-d12}
000036  e8bd8ff0          POP      {r4-r11,pc}
                  |L244.58|
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000040  2800              CMP      r0,#0
000042  d07b              BEQ      |L244.316|
000044  4658              MOV      r0,r11                ;55
000046  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00004a  2800              CMP      r0,#0                 ;55
00004c  d076              BEQ      |L244.316|
00004e  4648              MOV      r0,r9                 ;55
000050  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000054  2800              CMP      r0,#0                 ;55
000056  d071              BEQ      |L244.316|
000058  4640              MOV      r0,r8                 ;55
00005a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
00005e  2800              CMP      r0,#0                 ;55
000060  d06c              BEQ      |L244.316|
000062  2100              MOVS     r1,#0                 ;58
000064  4630              MOV      r0,r6                 ;58
000066  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00006a  ee080a10          VMOV     s16,r0                ;58
00006e  2101              MOVS     r1,#1                 ;59
000070  4630              MOV      r0,r6                 ;59
000072  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000076  ee080a90          VMOV     s17,r0                ;59
00007a  2100              MOVS     r1,#0                 ;61
00007c  4640              MOV      r0,r8                 ;61
00007e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000082  9004              STR      r0,[sp,#0x10]         ;62
000084  2101              MOVS     r1,#1                 ;62
000086  4640              MOV      r0,r8                 ;62
000088  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00008c  4601              MOV      r1,r0                 ;62
00008e  9005              STR      r0,[sp,#0x14]         ;64
000090  9804              LDR      r0,[sp,#0x10]         ;64
000092  fb00f701          MUL      r7,r0,r1              ;64
000096  2100              MOVS     r1,#0                 ;66
000098  4640              MOV      r0,r8                 ;66
00009a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00009e  2801              CMP      r0,#1                 ;66
0000a0  bf0c              ITE      EQ                    ;66
0000a2  2401              MOVEQ    r4,#1                 ;66
0000a4  2400              MOVNE    r4,#0                 ;66
0000a6  4640              MOV      r0,r8                 ;66
0000a8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
0000ac  2800              CMP      r0,#0                 ;66
0000ae  d051              BEQ      |L244.340|
0000b0  4658              MOV      r0,r11                ;68
0000b2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0000b6  2800              CMP      r0,#0                 ;68
0000b8  d04c              BEQ      |L244.340|
0000ba  4648              MOV      r0,r9                 ;68
0000bc  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0000c0  2800              CMP      r0,#0                 ;68
0000c2  d047              BEQ      |L244.340|
0000c4  2100              MOVS     r1,#0                 ;68
0000c6  4640              MOV      r0,r8                 ;68
0000c8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000cc  4682              MOV      r10,r0                ;68
0000ce  2100              MOVS     r1,#0                 ;68
0000d0  4658              MOV      r0,r11                ;68
0000d2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000d6  4582              CMP      r10,r0                ;68
0000d8  d13c              BNE      |L244.340|
0000da  2101              MOVS     r1,#1                 ;68
0000dc  4640              MOV      r0,r8                 ;68
0000de  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000e2  4682              MOV      r10,r0                ;68
0000e4  2101              MOVS     r1,#1                 ;68
0000e6  4658              MOV      r0,r11                ;68
0000e8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000ec  4582              CMP      r10,r0                ;68
0000ee  d131              BNE      |L244.340|
0000f0  2100              MOVS     r1,#0                 ;68
0000f2  4640              MOV      r0,r8                 ;68
0000f4  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000f8  4682              MOV      r10,r0                ;68
0000fa  2100              MOVS     r1,#0                 ;68
0000fc  4648              MOV      r0,r9                 ;68
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000102  4582              CMP      r10,r0                ;68
000104  d126              BNE      |L244.340|
000106  2101              MOVS     r1,#1                 ;68
000108  4640              MOV      r0,r8                 ;68
00010a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00010e  4682              MOV      r10,r0                ;68
000110  2101              MOVS     r1,#1                 ;68
000112  4648              MOV      r0,r9                 ;68
000114  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000118  4582              CMP      r10,r0                ;68
00011a  d11b              BNE      |L244.340|
00011c  2c00              CMP      r4,#0                 ;72
00011e  d037              BEQ      |L244.400|
000120  46ba              MOV      r10,r7                ;73
000122  4640              MOV      r0,r8                 ;73
000124  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000128  2800              CMP      r0,#0                 ;73
00012a  d025              BEQ      |L244.376|
00012c  2100              MOVS     r1,#0                 ;73
00012e  4640              MOV      r0,r8                 ;73
000130  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000134  2801              CMP      r0,#1                 ;73
000136  d019              BEQ      |L244.364|
000138  e01e              B        |L244.376|
00013a  e7ff              B        |L244.316|
                  |L244.316|
00013c  2037              MOVS     r0,#0x37              ;55
00013e  e9cd5000          STRD     r5,r0,[sp,#0]         ;55
000142  a39b              ADR      r3,|L244.944|
000144  a2b5              ADR      r2,|L244.1052|
000146  a1b3              ADR      r1,|L244.1044|
000148  2005              MOVS     r0,#5                 ;55
00014a  f7fffffe          BL       _Anki_Log
00014e  f04f6080          MOV      r0,#0x4000000         ;55
000152  e76d              B        |L244.48|
                  |L244.340|
000154  2044              MOVS     r0,#0x44              ;68
000156  e9cd5000          STRD     r5,r0,[sp,#0]         ;68
00015a  a395              ADR      r3,|L244.944|
00015c  a2b3              ADR      r2,|L244.1068|
00015e  a1ad              ADR      r1,|L244.1044|
000160  2005              MOVS     r0,#5                 ;68
000162  f7fffffe          BL       _Anki_Log
000166  f04f60a0          MOV      r0,#0x5000000         ;68
00016a  e761              B        |L244.48|
                  |L244.364|
00016c  2101              MOVS     r1,#1                 ;68
00016e  4640              MOV      r0,r8                 ;68
000170  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000174  4550              CMP      r0,r10                ;68
000176  d00b              BEQ      |L244.400|
                  |L244.376|
000178  2049              MOVS     r0,#0x49              ;73
00017a  e9cd5000          STRD     r5,r0,[sp,#0]         ;73
00017e  a38c              ADR      r3,|L244.944|
000180  4aba              LDR      r2,|L244.1132|
000182  a1a4              ADR      r1,|L244.1044|
000184  2005              MOVS     r0,#5                 ;73
000186  f7fffffe          BL       _Anki_Log
00018a  f04f60a0          MOV      r0,#0x5000000         ;73
00018e  e74f              B        |L244.48|
                  |L244.400|
000190  4640              MOV      r0,r8                 ;73
000192  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
000196  b3e8              CBZ      r0,|L244.532|
000198  4658              MOV      r0,r11                ;78
00019a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00019e  b3c8              CBZ      r0,|L244.532|
0001a0  4648              MOV      r0,r9                 ;78
0001a2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0001a6  b3a8              CBZ      r0,|L244.532|
0001a8  4630              MOV      r0,r6                 ;78
0001aa  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
0001ae  b388              CBZ      r0,|L244.532|
0001b0  f8d80010          LDR      r0,[r8,#0x10]         ;78
0001b4  9000              STR      r0,[sp,#0]            ;78
0001b6  f8db0010          LDR      r0,[r11,#0x10]        ;78
0001ba  9001              STR      r0,[sp,#4]            ;78
0001bc  f8d90010          LDR      r0,[r9,#0x10]         ;78
0001c0  9002              STR      r0,[sp,#8]            ;78
0001c2  6930              LDR      r0,[r6,#0x10]         ;78
0001c4  2100              MOVS     r1,#0                 ;78
0001c6  466a              MOV      r2,sp                 ;78
0001c8  9003              STR      r0,[sp,#0xc]          ;78
                  |L244.458|
0001ca  1c48              ADDS     r0,r1,#1              ;78
0001cc  2804              CMP      r0,#4                 ;78
0001ce  bfb8              IT       LT                    ;78
0001d0  f8523021          LDRLT    r3,[r2,r1,LSL #2]     ;78
0001d4  da06              BGE      |L244.484|
                  |L244.470|
0001d6  f852c020          LDR      r12,[r2,r0,LSL #2]    ;78
0001da  4563              CMP      r3,r12                ;78
0001dc  d023              BEQ      |L244.550|
0001de  1c40              ADDS     r0,r0,#1              ;78
0001e0  2804              CMP      r0,#4                 ;78
0001e2  dbf8              BLT      |L244.470|
                  |L244.484|
0001e4  1c49              ADDS     r1,r1,#1              ;78
0001e6  2904              CMP      r1,#4                 ;78
0001e8  dbef              BLT      |L244.458|
0001ea  eeb80ae8          VCVT.F32.S32 s0,s17                ;83
0001ee  eeb7ba00          VMOV.F32 s22,#1.00000000       ;83
0001f2  2c00              CMP      r4,#0                 ;88
0001f4  ee30aa4b          VSUB.F32 s20,s0,s22            ;83
0001f8  eeb80ac8          VCVT.F32.S32 s0,s16                ;84
0001fc  ee709a4b          VSUB.F32 s19,s0,s22            ;84
000200  bf14              ITE      NE                    ;88
000202  2001              MOVNE    r0,#1                 ;88
000204  9804              LDREQ    r0,[sp,#0x10]         ;88
000206  9000              STR      r0,[sp,#0]            ;88
000208  bf08              IT       EQ                    ;89
00020a  9f05              LDREQ    r7,[sp,#0x14]         ;89
00020c  f04f0500          MOV      r5,#0                 ;91
000210  9701              STR      r7,[sp,#4]            ;91
000212  e000              B        |L244.534|
                  |L244.532|
000214  e007              B        |L244.550|
                  |L244.534|
000216  2800              CMP      r0,#0                 ;91
000218  bfc4              ITT      GT                    ;101
00021a  eddfaa95          VLDRGT   s21,|L244.1136|
00021e  ed9f9a95          VLDRGT   s18,|L244.1140|
000222  dc0b              BGT      |L244.572|
000224  e0bf              B        |L244.934|
                  |L244.550|
000226  204e              MOVS     r0,#0x4e              ;78
000228  e9cd5000          STRD     r5,r0,[sp,#0]         ;78
00022c  a360              ADR      r3,|L244.944|
00022e  4a92              LDR      r2,|L244.1144|
000230  a178              ADR      r1,|L244.1044|
000232  2005              MOVS     r0,#5                 ;78
000234  f7fffffe          BL       _Anki_Log
000238  4890              LDR      r0,|L244.1148|
00023a  e6f9              B        |L244.48|
                  |L244.572|
00023c  f8db1008          LDR      r1,[r11,#8]           ;78
000240  f8db0010          LDR      r0,[r11,#0x10]        ;78
000244  2400              MOVS     r4,#0                 ;97
000246  fb050001          MLA      r0,r5,r1,r0           ;97
00024a  9003              STR      r0,[sp,#0xc]          ;97
00024c  f8d91008          LDR      r1,[r9,#8]            ;97
000250  f8d90010          LDR      r0,[r9,#0x10]         ;97
000254  fb050001          MLA      r0,r5,r1,r0           ;97
000258  9002              STR      r0,[sp,#8]            ;97
00025a  f8d81008          LDR      r1,[r8,#8]            ;97
00025e  f8d80010          LDR      r0,[r8,#0x10]         ;97
000262  fb050701          MLA      r7,r5,r1,r0           ;97
000266  9801              LDR      r0,[sp,#4]            ;97
000268  2800              CMP      r0,#0                 ;97
00026a  dd7d              BLE      |L244.872|
                  |L244.620|
00026c  9803              LDR      r0,[sp,#0xc]          ;98
00026e  eb000084          ADD      r0,r0,r4,LSL #2       ;98
000272  ed90ca00          VLDR     s24,[r0,#0]           ;98
000276  9802              LDR      r0,[sp,#8]            ;99
000278  eb000084          ADD      r0,r0,r4,LSL #2       ;99
00027c  ee3c0a2a          VADD.F32 s0,s24,s21            ;101
000280  edd0ba00          VLDR     s23,[r0,#0]           ;99
000284  f7fffffe          BL       __hardfp_floorf
000288  eeb08a40          VMOV.F32 s16,s0                ;101
00028c  eeb00a4c          VMOV.F32 s0,s24                ;102
000290  f7fffffe          BL       __hardfp_ceilf
000294  eef0ca40          VMOV.F32 s25,s0                ;102
000298  ee3b0aaa          VADD.F32 s0,s23,s21            ;104
00029c  f7fffffe          BL       __hardfp_floorf
0002a0  eef08a40          VMOV.F32 s17,s0                ;104
0002a4  eeb00a6b          VMOV.F32 s0,s23                ;105
0002a8  f7fffffe          BL       __hardfp_ceilf
0002ac  eeb58ac0          VCMPE.F32 s16,#0.0              ;108
0002b0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
0002b4  d30e              BCC      |L244.724|
0002b6  eef4caca          VCMPE.F32 s25,s20               ;108
0002ba  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
0002be  dc09              BGT      |L244.724|
0002c0  eef58ac0          VCMPE.F32 s17,#0.0              ;108
0002c4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
0002c8  d304              BCC      |L244.724|
0002ca  eeb40ae9          VCMPE.F32 s0,s19                ;108
0002ce  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
0002d2  dd01              BLE      |L244.728|
                  |L244.724|
0002d4  981b              LDR      r0,[sp,#0x6c]         ;110
0002d6  e05b              B        |L244.912|
                  |L244.728|
0002d8  ee7c0a48          VSUB.F32 s1,s24,s16            ;113
0002dc  ee3b1ae8          VSUB.F32 s2,s23,s17            ;116
0002e0  eef58ac0          VCMPE.F32 s17,#0.0              ;116
0002e4  ee7b1a60          VSUB.F32 s3,s22,s1             ;114
0002e8  ee7b2a41          VSUB.F32 s5,s22,s2             ;117
0002ec  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
0002f0  bfcc              ITE      GT                    ;117
0002f2  ee382a89          VADDGT.F32 s4,s17,s18            ;117
0002f6  ee382ac9          VSUBLE.F32 s4,s17,s18            ;117
0002fa  eebd2ac2          VCVT.S32.F32 s4,s4                 ;117
0002fe  eeb50ac0          VCMPE.F32 s0,#0.0               ;117
000302  ee123a10          VMOV     r3,s4                 ;117
000306  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
00030a  bfcc              ITE      GT                    ;117
00030c  ee300a09          VADDGT.F32 s0,s0,s18             ;117
000310  ee300a49          VSUBLE.F32 s0,s0,s18             ;117
000314  eebd0ac0          VCVT.S32.F32 s0,s0                 ;117
000318  eeb58ac0          VCMPE.F32 s16,#0.0              ;117
00031c  ee10aa10          VMOV     r10,s0                ;117
000320  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
000324  bfcc              ITE      GT                    ;117
000326  ee380a09          VADDGT.F32 s0,s16,s18            ;117
00032a  ee380a49          VSUBLE.F32 s0,s16,s18            ;117
00032e  eebd0ac0          VCVT.S32.F32 s0,s0                 ;117
000332  f8d6c010          LDR      r12,[r6,#0x10]        ;117
000336  68b2              LDR      r2,[r6,#8]            ;117
000338  ee100a10          VMOV     r0,s0                 ;117
00033c  fb03c102          MLA      r1,r3,r2,r12          ;117
000340  fb0ac202          MLA      r2,r10,r2,r12         ;117
000344  4401              ADD      r1,r1,r0              ;117
000346  4410              ADD      r0,r0,r2              ;117
000348  780a              LDRB     r2,[r1,#0]            ;126
00034a  7849              LDRB     r1,[r1,#1]            ;127
00034c  ee002a10          VMOV     s0,r2                 ;126
000350  eef83a40          VCVT.F32.U32 s7,s0                 ;126
000354  ee001a10          VMOV     s0,r1                 ;127
000358  7801              LDRB     r1,[r0,#0]            ;128
00035a  ee021a10          VMOV     s4,r1                 ;128
00035e  eeb80a40          VCVT.F32.U32 s0,s0                 ;127
000362  eeb83a42          VCVT.F32.U32 s6,s4                 ;128
000366  e000              B        |L244.874|
                  |L244.872|
000368  e018              B        |L244.924|
                  |L244.874|
00036a  7840              LDRB     r0,[r0,#1]            ;129
00036c  ee613aa3          VMUL.F32 s7,s3,s7              ;129
000370  ee020a10          VMOV     s4,r0                 ;129
000374  ee611a83          VMUL.F32 s3,s3,s6              ;129
000378  eeb82a42          VCVT.F32.U32 s4,s4                 ;129
00037c  ee403a80          VMLA.F32 s7,s1,s0              ;129
000380  ee401a82          VMLA.F32 s3,s1,s4              ;129
000384  ee220aa3          VMUL.F32 s0,s5,s7              ;129
000388  ee010a21          VMLA.F32 s0,s2,s3              ;129
00038c  f7fffffe          BL       _ZN4Anki8Embedded5RoundIiEET_f ; Anki::Embedded::Round<int>(float)
                  |L244.912|
000390  5538              STRB     r0,[r7,r4]            ;135
000392  9801              LDR      r0,[sp,#4]            ;97
000394  1c64              ADDS     r4,r4,#1              ;97
000396  4284              CMP      r4,r0                 ;97
000398  f6ffaf68          BLT      |L244.620|
                  |L244.924|
00039c  9800              LDR      r0,[sp,#0]            ;91
00039e  1c6d              ADDS     r5,r5,#1              ;91
0003a0  4285              CMP      r5,r0                 ;91
0003a2  f6ffaf4b          BLT      |L244.572|
                  |L244.934|
0003a6  2000              MOVS     r0,#0                 ;139
0003a8  e642              B        |L244.48|
0003aa  0000              DCW      0x0000
                  |L244.940|
                          DCD      _ZZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2<unsigned char, unsigned char>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
                  |L244.944|
0003b0  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/interp"
0003b4  6f726574
0003b8  6563685c
0003bc  636f6d6d
0003c0  6f6e5c69
0003c4  6e636c75
0003c8  64655c61
0003cc  6e6b692f
0003d0  636f6d6d
0003d4  6f6e2f72
0003d8  6f626f74
0003dc  2f696e74
0003e0  657270  
0003e3  6f6c6174          DCB      "olate.h",0
0003e7  652e6800
0003eb  00                DCB      0
                  |L244.1004|
0003ec  4f6e6c79          DCB      "Only INTERPOLATE_LINEAR is supported",0
0003f0  20494e54
0003f4  4552504f
0003f8  4c415445
0003fc  5f4c494e
000400  45415220
000404  69732073
000408  7570706f
00040c  72746564
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
                  |L244.1044|
000414  496e7465          DCB      "Interp2",0
000418  72703200
                  |L244.1052|
00041c  496e7661          DCB      "Invalid objects",0
000420  6c696420
000424  6f626a65
000428  63747300
                  |L244.1068|
00042c  78436f6f          DCB      "xCoordinates, yCoordinates, and out must all be the sam"
000430  7264696e
000434  61746573
000438  2c207943
00043c  6f6f7264
000440  696e6174
000444  65732c20
000448  616e6420
00044c  6f757420
000450  6d757374
000454  20616c6c
000458  20626520
00045c  74686520
000460  73616d  
000463  65207369          DCB      "e sizes",0
000467  7a657300
00046b  00                DCB      0
                  |L244.1132|
                          DCD      ||.constdata||+0x47c
                  |L244.1136|
000470  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L244.1140|
000474  3f000000          DCFS     0x3f000000 ; 0.5
                  |L244.1144|
                          DCD      ||.constdata||+0x4d0
                  |L244.1148|
                          DCD      0x01000003
                          ENDP


                          AREA ||area_number.245||, COMGROUP=_ZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_, LINKORDER=||t._ZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.245||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i PROC ; Anki::Embedded::Linspace<float>(T1, T1, int)
;;;162    
;;;163        template<typename Type> LinearSequence<Type> Linspace(const Type start, const Type end, const s32 size)
000000  b086              SUB      sp,sp,#0x18
000002  f04f32ff          MOV      r2,#0xffffffff
000006  eebf1a00          VMOV.F32 s2,#-1.00000000
00000a  9200              STR      r2,[sp,#0]
00000c  ed8d1a01          VSTR     s2,[sp,#4]
000010  ed8d1a02          VSTR     s2,[sp,#8]
;;;164        {
;;;165          Type increment;
;;;166    
;;;167          LinearSequence<Type> sequence;
;;;168    
;;;169          if(ABS(end-start) <= Flags::numeric_limits<Type>::epsilon()) {
000014  ee301ac0          VSUB.F32 s2,s1,s0
000018  ed9f2a2e          VLDR     s4,|L251.212|
00001c  eeb51ac0          VCMPE.F32 s2,#0.0
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR
000024  bfac              ITE      GE
000026  eef01a41          VMOVGE.F32 s3,s2
00002a  ee701a60          VSUBLT.F32 s3,s0,s1
00002e  eef41ac2          VCMPE.F32 s3,s4
000032  eef1fa10          VMRS     APSR_nzcv,FPSCR
000036  d810              BHI      |L251.90|
000038  9103              STR      r1,[sp,#0xc]          ;164
;;;170            sequence = LinearSequence<Type>(start, 0, end, size);
00003a  eddf0a27          VLDR     s1,|L251.216|
00003e  ed8d0a04          VSTR     s0,[sp,#0x10]
000042  edcd0a05          VSTR     s1,[sp,#0x14]
000046  9100              STR      r1,[sp,#0]
000048  ed8d0a01          VSTR     s0,[sp,#4]
00004c  ee102a10          VMOV     r2,s0
000050  ee103a90          VMOV     r3,s1
000054  edcd0a02          VSTR     s1,[sp,#8]
;;;171          } else {
000058  e028              B        |L251.172|
                  |L251.90|
;;;172            if(size <= 0) {
;;;173              // Empty sequence
;;;174              sequence = LinearSequence<Type>(start, 1, end, 0);
00005a  eef71a00          VMOV.F32 s3,#1.00000000
00005e  2900              CMP      r1,#0                 ;172
000060  dc0d              BGT      |L251.126|
000062  2100              MOVS     r1,#0
000064  9103              STR      r1,[sp,#0xc]
000066  ed8d0a04          VSTR     s0,[sp,#0x10]
00006a  edcd1a05          VSTR     s3,[sp,#0x14]
00006e  9100              STR      r1,[sp,#0]
000070  ee102a10          VMOV     r2,s0
000074  ee113a90          VMOV     r3,s3
000078  ed8d0a01          VSTR     s0,[sp,#4]
;;;175            } else if(size == 1) {
00007c  e027              B        |L251.206|
                  |L251.126|
00007e  2901              CMP      r1,#1
000080  d019              BEQ      |L251.182|
;;;176              // If size == 1, match output with Matlab
;;;177              sequence = LinearSequence<Type>(end, 1, end, size);
;;;178            } else {
;;;179              increment = (end-start) / (size-1);
000082  1e4a              SUBS     r2,r1,#1
000084  ee002a90          VMOV     s1,r2
000088  9103              STR      r1,[sp,#0xc]
00008a  ed8d0a04          VSTR     s0,[sp,#0x10]
00008e  eef81ae0          VCVT.F32.S32 s3,s1
;;;180              sequence = LinearSequence<Type>(start, increment, end, size);
000092  ee102a10          VMOV     r2,s0
000096  eec10a21          VDIV.F32 s1,s2,s3              ;179
00009a  edcd0a05          VSTR     s1,[sp,#0x14]         ;179
00009e  ee103a90          VMOV     r3,s1
0000a2  9100              STR      r1,[sp,#0]
0000a4  ed8d0a01          VSTR     s0,[sp,#4]
0000a8  edcd0a02          VSTR     s1,[sp,#8]
                  |L251.172|
;;;181            }
;;;182          }
;;;183    
;;;184          return sequence;
0000ac  6083              STR      r3,[r0,#8]
0000ae  e9c01200          STRD     r1,r2,[r0,#0]
;;;185        }
0000b2  b006              ADD      sp,sp,#0x18
0000b4  4770              BX       lr
                  |L251.182|
0000b6  9103              STR      r1,[sp,#0xc]
0000b8  edcd0a04          VSTR     s1,[sp,#0x10]
0000bc  edcd1a05          VSTR     s3,[sp,#0x14]
0000c0  ee102a90          VMOV     r2,s1                 ;177
0000c4  ee113a90          VMOV     r3,s3                 ;177
0000c8  9100              STR      r1,[sp,#0]            ;177
0000ca  edcd0a01          VSTR     s1,[sp,#4]            ;177
                  |L251.206|
0000ce  edcd1a02          VSTR     s3,[sp,#8]            ;177
0000d2  e7eb              B        |L251.172|
;;;186    
                          ENDP

                  |L251.212|
0000d4  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L251.216|
0000d8  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.252||, COMGROUP=_ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i, LINKORDER=||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.252||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded8LinspaceIfEENS0_14LinearSequenceIT_EES3_S3_i||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC2EiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;75     
;;;76         template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;77           : ArraySlice<Type>(Array<Type>(1, maximumSize, memory, flags), LinearSequence<s32>(0,0), LinearSequence<s32>(0,0))
;;;78         {
;;;79           if(this->array.get_numElements() == 0) {
;;;80             this->arrayData = NULL;
;;;81           } else {
;;;82             this->arrayData = this->array.Pointer(0,0);
;;;83           }
;;;84     
;;;85           if(flags.get_isFullyAllocated()) {
;;;86             this->set_size(maximumSize);
;;;87           } else {
;;;88             this->set_size(0);
;;;89           }
;;;90         } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, const Flags::Buffer flags)
;;;91     
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  9810              LDR      r0,[sp,#0x40]
00000a  4613              MOV      r3,r2
00000c  468b              MOV      r11,r1
00000e  460a              MOV      r2,r1
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       _ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00001a  f8d08010          LDR      r8,[r0,#0x10]
00001e  e8b002e0          LDM      r0!,{r5-r7,r9}
000022  2200              MOVS     r2,#0
000024  4611              MOV      r1,r2
000026  a806              ADD      r0,sp,#0x18
000028  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002c  4682              MOV      r10,r0
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  a809              ADD      r0,sp,#0x24
000034  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000038  e9da1200          LDRD     r1,r2,[r10,#0]
00003c  f8da3008          LDR      r3,[r10,#8]
000040  60a3              STR      r3,[r4,#8]
000042  e9c41200          STRD     r1,r2,[r4,#0]
000046  e9d01200          LDRD     r1,r2,[r0,#0]
00004a  6880              LDR      r0,[r0,#8]
00004c  f8c48028          STR      r8,[r4,#0x28]
000050  60e1              STR      r1,[r4,#0xc]
000052  e9c42004          STRD     r2,r0,[r4,#0x10]
000056  f1040018          ADD      r0,r4,#0x18
00005a  2200              MOVS     r2,#0
00005c  e8a002e0          STM      r0!,{r5-r7,r9}
000060  2d00              CMP      r5,#0
000062  bfc8              IT       GT
000064  2e00              CMPGT    r6,#0
000066  dd25              BLE      |L258.180|
000068  fb05f006          MUL      r0,r5,r6
00006c  b310              CBZ      r0,|L258.180|
00006e  2000              MOVS     r0,#0
000070  fb008007          MLA      r0,r0,r7,r8
000074  62e0              STR      r0,[r4,#0x2c]
                  |L258.118|
000076  2d00              CMP      r5,#0
000078  bfc8              IT       GT
00007a  2e00              CMPGT    r6,#0
00007c  dd1c              BLE      |L258.184|
00007e  fb05f006          MUL      r0,r5,r6
000082  b1c8              CBZ      r0,|L258.184|
000084  2000              MOVS     r0,#0
000086  fb008007          MLA      r0,r0,r7,r8
00008a  6320              STR      r0,[r4,#0x30]
                  |L258.140|
00008c  2d00              CMP      r5,#0
00008e  bfc8              IT       GT
000090  2e00              CMPGT    r6,#0
000092  dd13              BLE      |L258.188|
000094  fb05f006          MUL      r0,r5,r6
000098  b180              CBZ      r0,|L258.188|
00009a  2000              MOVS     r0,#0
00009c  fb008007          MLA      r0,r0,r7,r8
0000a0  6320              STR      r0,[r4,#0x30]
                  |L258.162|
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
0000a8  b150              CBZ      r0,|L258.192|
0000aa  4659              MOV      r1,r11
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
0000b2  e009              B        |L258.200|
                  |L258.180|
0000b4  62e2              STR      r2,[r4,#0x2c]
0000b6  e7de              B        |L258.118|
                  |L258.184|
0000b8  6322              STR      r2,[r4,#0x30]
0000ba  e7e7              B        |L258.140|
                  |L258.188|
0000bc  6322              STR      r2,[r4,#0x30]
0000be  e7f0              B        |L258.162|
                  |L258.192|
0000c0  2100              MOVS     r1,#0
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::set_size(int)
                  |L258.200|
0000c8  b011              ADD      sp,sp,#0x44
0000ca  4620              MOV      r0,r4
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||area_number.259||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.259||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE PROC ; Anki::Embedded::Matrix::MultiplyTranspose<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
                  ||__tagsym$$noinline||
;;;299    
;;;300          template<typename InType, typename OutType> NO_INLINE Result MultiplyTranspose(const Array<InType> &in1, const Array<InType> &in2Transposed, Array<OutType> &out)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;301          {
000004  460e              MOV      r6,r1
000006  b083              SUB      sp,sp,#0xc
000008  4615              MOV      r5,r2
00000a  4680              MOV      r8,r0
;;;302            const s32 in1Height = in1.get_size(0);
00000c  2100              MOVS     r1,#0
00000e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000012  4681              MOV      r9,r0
;;;303            const s32 in1Width = in1.get_size(1);
000014  2101              MOVS     r1,#1
000016  4640              MOV      r0,r8
000018  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00001c  4683              MOV      r11,r0
;;;304    
;;;305            const s32 in2TransposedHeight = in2Transposed.get_size(0);
00001e  2100              MOVS     r1,#0
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000026  4607              MOV      r7,r0
;;;306            const s32 in2TransposedWidth = in2Transposed.get_size(1);
000028  2101              MOVS     r1,#1
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000030  4604              MOV      r4,r0
;;;307    
;;;308            AnkiConditionalErrorAndReturnValue(in1Width == in2TransposedWidth,
000032  f8dfa124          LDR      r10,|L265.344|
000036  45a3              CMP      r11,r4
000038  d00e              BEQ      |L265.88|
00003a  f44f709a          MOV      r0,#0x134
00003e  e9cda000          STRD     r10,r0,[sp,#0]
000042  a346              ADR      r3,|L265.348|
000044  a253              ADR      r2,|L265.404|
000046  a15d              ADR      r1,|L265.444|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
;;;309              RESULT_FAIL_INVALID_SIZE, "Multiply", "Input matrices are incompatible sizes");
;;;310    
;;;311            AnkiConditionalErrorAndReturnValue(AreEqualSize(in1Height, in2TransposedHeight, out),
;;;312              RESULT_FAIL_INVALID_SIZE, "Multiply", "Input and Output matrices are incompatible sizes");
;;;313    
;;;314            for(s32 y1=0; y1<in1Height; y1++)
;;;315            {
;;;316              const InType * restrict pIn1 = in1.Pointer(y1, 0);
;;;317    
;;;318              for(s32 y2=0; y2<in2TransposedHeight; y2++) {
;;;319                const InType * restrict pIn2 = in2Transposed.Pointer(y2, 0);
;;;320    
;;;321                OutType accumulator = 0;
;;;322    
;;;323                s32 x;
;;;324                for(x=0; x<in2TransposedWidth-3; x+=4) {
;;;325                  const InType in1_0 = pIn1[x];
;;;326                  const InType in1_1 = pIn1[x+1];
;;;327                  const InType in1_2 = pIn1[x+2];
;;;328                  const InType in1_3 = pIn1[x+3];
;;;329    
;;;330                  const InType in2_0 = pIn2[x];
;;;331                  const InType in2_1 = pIn2[x+1];
;;;332                  const InType in2_2 = pIn2[x+2];
;;;333                  const InType in2_3 = pIn2[x+3];
;;;334    
;;;335                  accumulator +=
;;;336                    in1_0 * in2_0 +
;;;337                    in1_1 * in2_1 +
;;;338                    in1_2 * in2_2 +
;;;339                    in1_3 * in2_3;
;;;340                }
;;;341    
;;;342                for(; x<in2TransposedWidth; x++) {
;;;343                  accumulator += pIn1[x] * pIn2[x];
;;;344                }
;;;345    
;;;346                *out.Pointer(y1, y2) = accumulator;
;;;347              }
;;;348            }
;;;349    
;;;350            return RESULT_OK;
;;;351          } // template<typename InType, typename OutType> Result MultiplyTranspose(const Array<InType> &in1, const Array<InType> &in2Transposed, Array<OutType> &out)
00004e  b003              ADD      sp,sp,#0xc
000050  f04f60a0          MOV      r0,#0x5000000         ;308
000054  e8bd8ff0          POP      {r4-r11,pc}
                  |L265.88|
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00005e  2800              CMP      r0,#0
000060  d06b              BEQ      |L265.314|
000062  2100              MOVS     r1,#0
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00006a  4548              CMP      r0,r9
00006c  d165              BNE      |L265.314|
00006e  2101              MOVS     r1,#1
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000076  42b8              CMP      r0,r7
000078  d15f              BNE      |L265.314|
00007a  f04f0a00          MOV      r10,#0                ;314
00007e  f1b90f00          CMP      r9,#0                 ;314
000082  bfc4              ITT      GT                    ;321
000084  eddf4a50          VLDRGT   s9,|L265.456|
000088  f1a40b03          SUBGT    r11,r4,#3             ;324
00008c  dd51              BLE      |L265.306|
                  |L265.142|
00008e  f8d81008          LDR      r1,[r8,#8]            ;314
000092  f8d80010          LDR      r0,[r8,#0x10]         ;314
000096  2200              MOVS     r2,#0                 ;318
000098  fb0a0c01          MLA      r12,r10,r1,r0         ;318
00009c  2f00              CMP      r7,#0                 ;318
00009e  dd44              BLE      |L265.298|
                  |L265.160|
0000a0  68b1              LDR      r1,[r6,#8]            ;318
0000a2  6930              LDR      r0,[r6,#0x10]         ;318
0000a4  eeb00a64          VMOV.F32 s0,s9                 ;321
0000a8  fb020301          MLA      r3,r2,r1,r0           ;321
0000ac  2000              MOVS     r0,#0                 ;324
0000ae  f1bb0f00          CMP      r11,#0                ;324
0000b2  dd20              BLE      |L265.246|
                  |L265.180|
0000b4  eb0c0180          ADD      r1,r12,r0,LSL #2      ;325
0000b8  ed914a00          VLDR     s8,[r1,#0]            ;325
0000bc  edd13a01          VLDR     s7,[r1,#4]            ;326
0000c0  ed911a02          VLDR     s2,[r1,#8]            ;327
0000c4  ed913a03          VLDR     s6,[r1,#0xc]          ;328
0000c8  eb030180          ADD      r1,r3,r0,LSL #2       ;330
0000cc  1d00              ADDS     r0,r0,#4              ;324
0000ce  edd12a00          VLDR     s5,[r1,#0]            ;330
0000d2  edd10a01          VLDR     s1,[r1,#4]            ;331
0000d6  ed912a02          VLDR     s4,[r1,#8]            ;332
0000da  ee642a22          VMUL.F32 s5,s8,s5              ;335
0000de  edd11a03          VLDR     s3,[r1,#0xc]          ;333
0000e2  4583              CMP      r11,r0                ;324
0000e4  ee432aa0          VMLA.F32 s5,s7,s1              ;335
0000e8  ee412a02          VMLA.F32 s5,s2,s4              ;335
0000ec  ee432a21          VMLA.F32 s5,s6,s3              ;335
0000f0  ee320a80          VADD.F32 s0,s5,s0              ;335
0000f4  dcde              BGT      |L265.180|
                  |L265.246|
0000f6  42a0              CMP      r0,r4                 ;342
0000f8  da0c              BGE      |L265.276|
                  |L265.250|
0000fa  eb0c0180          ADD      r1,r12,r0,LSL #2      ;343
0000fe  edd10a00          VLDR     s1,[r1,#0]            ;343
000102  eb030180          ADD      r1,r3,r0,LSL #2       ;343
000106  1c40              ADDS     r0,r0,#1              ;342
000108  ed911a00          VLDR     s2,[r1,#0]            ;343
00010c  42a0              CMP      r0,r4                 ;342
00010e  ee000a81          VMLA.F32 s0,s1,s2              ;343
000112  dbf2              BLT      |L265.250|
                  |L265.276|
000114  68a9              LDR      r1,[r5,#8]            ;342
000116  6928              LDR      r0,[r5,#0x10]         ;342
000118  fb0a0001          MLA      r0,r10,r1,r0          ;342
00011c  eb000082          ADD      r0,r0,r2,LSL #2       ;342
000120  1c52              ADDS     r2,r2,#1              ;318
000122  ed800a00          VSTR     s0,[r0,#0]            ;346
000126  42ba              CMP      r2,r7                 ;318
000128  dbba              BLT      |L265.160|
                  |L265.298|
00012a  f10a0a01          ADD      r10,r10,#1            ;314
00012e  45ca              CMP      r10,r9                ;314
000130  dbad              BLT      |L265.142|
                  |L265.306|
000132  b003              ADD      sp,sp,#0xc
000134  2000              MOVS     r0,#0                 ;350
000136  e8bd8ff0          POP      {r4-r11,pc}
                  |L265.314|
00013a  f2401037          MOV      r0,#0x137             ;311
00013e  e9cda000          STRD     r10,r0,[sp,#0]        ;311
000142  a306              ADR      r3,|L265.348|
000144  a221              ADR      r2,|L265.460|
000146  a11d              ADR      r1,|L265.444|
000148  2005              MOVS     r0,#5                 ;311
00014a  f7fffffe          BL       _Anki_Log
00014e  b003              ADD      sp,sp,#0xc
000150  f04f60a0          MOV      r0,#0x5000000         ;311
000154  e8bd8ff0          POP      {r4-r11,pc}
;;;352    
                          ENDP

                  |L265.344|
                          DCD      _ZZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MultiplyTranspose<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L265.348|
00015c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
000160  6f726574
000164  6563685c
000168  636f6d6d
00016c  6f6e5c69
000170  6e636c75
000174  64655c61
000178  6e6b692f
00017c  636f6d6d
000180  6f6e2f72
000184  6f626f74
000188  2f6d6174
00018c  726978  
00018f  2e6800            DCB      ".h",0
000192  00                DCB      0
000193  00                DCB      0
                  |L265.404|
000194  496e7075          DCB      "Input matrices are incompatible sizes",0
000198  74206d61
00019c  74726963
0001a0  65732061
0001a4  72652069
0001a8  6e636f6d
0001ac  70617469
0001b0  626c6520
0001b4  73697a65
0001b8  7300    
0001ba  00                DCB      0
0001bb  00                DCB      0
                  |L265.444|
0001bc  4d756c74          DCB      "Multiply",0
0001c0  69706c79
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L265.456|
0001c8  00000000          DCFS     0x00000000 ; 0
                  |L265.460|
0001cc  496e7075          DCB      "Input and Output matrices are incompatible sizes",0
0001d0  7420616e
0001d4  64204f75
0001d8  74707574
0001dc  206d6174
0001e0  72696365
0001e4  73206172
0001e8  6520696e
0001ec  636f6d70
0001f0  61746962
0001f4  6c652073
0001f8  697a6573
0001fc  00      
0001fd  00                DCB      0
0001fe  00                DCB      0
0001ff  00                DCB      0

                          AREA ||area_number.266||, COMGROUP=_ZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.266||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_||, COMGROUP=_ZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_ PROC ; Anki::Embedded::Interp2<unsigned char, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)
;;;49     
;;;50         template<typename InType, typename OutType> Result Interp2(const Array<InType> &reference, const Array<f32> &xCoordinates, const Array<f32> &yCoordinates, Array<OutType> &out, const InterpolationType interpolationType, const OutType invalidValue)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;51         {
000004  4604              MOV      r4,r0
000006  ed2d0b02          VPUSH    {d0}
00000a  461d              MOV      r5,r3
;;;52           AnkiConditionalErrorAndReturnValue(interpolationType == INTERPOLATE_LINEAR,
00000c  f8df9334          LDR      r9,|L272.836|
000010  ed2d8b0c          VPUSH    {d8-d13}              ;51
000014  b085              SUB      sp,sp,#0x14           ;51
000016  eef0aa40          VMOV.F32 s21,s0                ;51
00001a  9820              LDR      r0,[sp,#0x80]
00001c  2800              CMP      r0,#0
00001e  d010              BEQ      |L272.66|
000020  2034              MOVS     r0,#0x34
000022  e9cd9000          STRD     r9,r0,[sp,#0]
000026  a3c8              ADR      r3,|L272.840|
000028  a2d6              ADR      r2,|L272.900|
00002a  a1e0              ADR      r1,|L272.940|
00002c  2005              MOVS     r0,#5
00002e  f7fffffe          BL       _Anki_Log
000032  f04f7040          MOV      r0,#0x3000000
                  |L272.54|
;;;53             RESULT_FAIL_INVALID_PARAMETER, "Interp2", "Only INTERPOLATE_LINEAR is supported");
;;;54     
;;;55           AnkiConditionalErrorAndReturnValue(AreValid(reference, xCoordinates, yCoordinates, out),
;;;56             RESULT_FAIL_INVALID_OBJECT, "Interp2", "Invalid objects");
;;;57     
;;;58           const s32 referenceHeight = reference.get_size(0);
;;;59           const s32 referenceWidth = reference.get_size(1);
;;;60     
;;;61           const s32 outHeight = out.get_size(0);
;;;62           const s32 outWidth = out.get_size(1);
;;;63     
;;;64           const s32 numOutputElements = outHeight * outWidth;
;;;65     
;;;66           const bool isOutputOneDimensional = (out.get_size(0) == 1);
;;;67     
;;;68           AnkiConditionalErrorAndReturnValue(
;;;69             AreEqualSize(out, xCoordinates, yCoordinates),
;;;70             RESULT_FAIL_INVALID_SIZE, "Interp2", "xCoordinates, yCoordinates, and out must all be the same sizes");
;;;71     
;;;72           if(isOutputOneDimensional) {
;;;73             AnkiConditionalErrorAndReturnValue(
;;;74               AreEqualSize(1, numOutputElements, out),
;;;75               RESULT_FAIL_INVALID_SIZE, "Interp2", "If out is a row vector, then out, xCoordinates, and yCoordinates must all be 1xN");
;;;76           }
;;;77     
;;;78           AnkiConditionalErrorAndReturnValue(
;;;79             NotAliased(out, xCoordinates, yCoordinates, reference),
;;;80             RESULT_FAIL_ALIASED_MEMORY, "Interp2", "xCoordinates, yCoordinates, and reference cannot be the same as out");
;;;81     
;;;82           const f32 xyReferenceMin = 0.0f;
;;;83           const f32 xReferenceMax = static_cast<f32>(referenceWidth) - 1.0f;
;;;84           const f32 yReferenceMax = static_cast<f32>(referenceHeight) - 1.0f;
;;;85     
;;;86           //const s32 numValues = xCoordinates.get_size(1);
;;;87     
;;;88           const s32 yIterationMax = isOutputOneDimensional ? 1                    : outHeight;
;;;89           const s32 xIterationMax = isOutputOneDimensional ? (outHeight*outWidth) : outWidth;
;;;90     
;;;91           for(s32 y=0; y<yIterationMax; y++) {
;;;92             const f32 * restrict pXCoordinates = xCoordinates.Pointer(y,0);
;;;93             const f32 * restrict pYCoordinates = yCoordinates.Pointer(y,0);
;;;94     
;;;95             OutType * restrict pOut = out.Pointer(y,0);
;;;96     
;;;97             for(s32 x=0; x<xIterationMax; x++) {
;;;98               const f32 curX = pXCoordinates[x];
;;;99               const f32 curY = pYCoordinates[x];
;;;100    
;;;101              const f32 x0 = FLT_FLOOR(curX);
;;;102              const f32 x1 = ceilf(curX); // x0 + 1.0f;
;;;103    
;;;104              const f32 y0 = FLT_FLOOR(curY);
;;;105              const f32 y1 = ceilf(curY); // y0 + 1.0f;
;;;106    
;;;107              // If out of bounds, set as invalid and continue
;;;108              if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;109                pOut[x] = invalidValue;
;;;110                continue;
;;;111              }
;;;112    
;;;113              const f32 alphaX = curX - x0;
;;;114              const f32 alphaXinverse = 1 - alphaX;
;;;115    
;;;116              const f32 alphaY = curY - y0;
;;;117              const f32 alphaYinverse = 1.0f - alphaY;
;;;118    
;;;119              const s32 y0S32 = Round<s32>(y0);
;;;120              const s32 y1S32 = Round<s32>(y1);
;;;121              const s32 x0S32 = Round<s32>(x0);
;;;122    
;;;123              const InType * restrict pReference_y0 = reference.Pointer(y0S32, x0S32);
;;;124              const InType * restrict pReference_y1 = reference.Pointer(y1S32, x0S32);
;;;125    
;;;126              const f32 pixelTL = *pReference_y0;
;;;127              const f32 pixelTR = *(pReference_y0+1);
;;;128              const f32 pixelBL = *pReference_y1;
;;;129              const f32 pixelBR = *(pReference_y1+1);
;;;130    
;;;131              const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR, alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;132    
;;;133              const OutType interpolatedPixel = RoundIfInteger<OutType>(interpolatedPixelF32);
;;;134    
;;;135              pOut[x] = interpolatedPixel;
;;;136            } // for(s32 x=0; x<xIterationMax; x++)
;;;137          } // for(s32 y=0; y<yIterationMax; y++)
;;;138    
;;;139          return RESULT_OK;
;;;140        } // Interp2
000036  b005              ADD      sp,sp,#0x14
000038  ecbd8b0c          VPOP     {d8-d13}
00003c  b006              ADD      sp,sp,#0x18
00003e  e8bd8ff0          POP      {r4-r11,pc}
                  |L272.66|
000042  e9dd6714          LDRD     r6,r7,[sp,#0x50]
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
00004c  2800              CMP      r0,#0
00004e  d047              BEQ      |L272.224|
000050  4630              MOV      r0,r6                 ;55
000052  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000056  2800              CMP      r0,#0                 ;55
000058  d042              BEQ      |L272.224|
00005a  4638              MOV      r0,r7                 ;55
00005c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000060  2800              CMP      r0,#0                 ;55
000062  d03d              BEQ      |L272.224|
000064  4628              MOV      r0,r5                 ;55
000066  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00006a  2800              CMP      r0,#0                 ;55
00006c  d038              BEQ      |L272.224|
00006e  2100              MOVS     r1,#0                 ;58
000070  4620              MOV      r0,r4                 ;58
000072  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000076  ee080a10          VMOV     s16,r0                ;58
00007a  2101              MOVS     r1,#1                 ;59
00007c  4620              MOV      r0,r4                 ;59
00007e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000082  ee080a90          VMOV     s17,r0                ;59
000086  2100              MOVS     r1,#0                 ;61
000088  4628              MOV      r0,r5                 ;61
00008a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00008e  4683              MOV      r11,r0                ;61
000090  2101              MOVS     r1,#1                 ;62
000092  4628              MOV      r0,r5                 ;62
000094  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000098  fb0bfa00          MUL      r10,r11,r0            ;64
00009c  9004              STR      r0,[sp,#0x10]         ;66
00009e  2100              MOVS     r1,#0                 ;66
0000a0  4628              MOV      r0,r5                 ;66
0000a2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000a6  2801              CMP      r0,#1                 ;66
0000a8  bf0c              ITE      EQ                    ;66
0000aa  f04f0801          MOVEQ    r8,#1                 ;66
0000ae  f04f0800          MOVNE    r8,#0                 ;66
0000b2  4628              MOV      r0,r5                 ;68
0000b4  e9dd1214          LDRD     r1,r2,[sp,#0x50]      ;68
0000b8  f7fffffe          BL       _ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIfEES3_S3_EEbRKT_RKT0_RKT1_ ; Anki::Embedded::AreEqualSize<Anki::Embedded::Array<float>, Anki::Embedded::Array<float>, Anki::Embedded::Array<float>>(const T1&, const T2&, const T3&)
0000bc  2800              CMP      r0,#0                 ;68
0000be  d01b              BEQ      |L272.248|
0000c0  f1b80f00          CMP      r8,#0                 ;72
0000c4  d036              BEQ      |L272.308|
0000c6  4656              MOV      r6,r10                ;73
0000c8  4628              MOV      r0,r5                 ;73
0000ca  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0000ce  2800              CMP      r0,#0                 ;73
0000d0  d024              BEQ      |L272.284|
0000d2  2100              MOVS     r1,#0                 ;73
0000d4  4628              MOV      r0,r5                 ;73
0000d6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
0000da  2801              CMP      r0,#1                 ;73
0000dc  d018              BEQ      |L272.272|
0000de  e01d              B        |L272.284|
                  |L272.224|
0000e0  2037              MOVS     r0,#0x37              ;55
0000e2  e9cd9000          STRD     r9,r0,[sp,#0]         ;55
0000e6  a398              ADR      r3,|L272.840|
0000e8  a2b2              ADR      r2,|L272.948|
0000ea  a1b0              ADR      r1,|L272.940|
0000ec  2005              MOVS     r0,#5                 ;55
0000ee  f7fffffe          BL       _Anki_Log
0000f2  f04f6080          MOV      r0,#0x4000000         ;55
0000f6  e79e              B        |L272.54|
                  |L272.248|
0000f8  2044              MOVS     r0,#0x44              ;68
0000fa  e9cd9000          STRD     r9,r0,[sp,#0]         ;68
0000fe  a392              ADR      r3,|L272.840|
000100  a2b0              ADR      r2,|L272.964|
000102  a1aa              ADR      r1,|L272.940|
000104  2005              MOVS     r0,#5                 ;68
000106  f7fffffe          BL       _Anki_Log
00010a  f04f60a0          MOV      r0,#0x5000000         ;68
00010e  e792              B        |L272.54|
                  |L272.272|
000110  2101              MOVS     r1,#1                 ;68
000112  4628              MOV      r0,r5                 ;68
000114  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000118  42b0              CMP      r0,r6                 ;68
00011a  d00b              BEQ      |L272.308|
                  |L272.284|
00011c  2049              MOVS     r0,#0x49              ;73
00011e  e9cd9000          STRD     r9,r0,[sp,#0]         ;73
000122  a389              ADR      r3,|L272.840|
000124  4ab7              LDR      r2,|L272.1028|
000126  a1a1              ADR      r1,|L272.940|
000128  2005              MOVS     r0,#5                 ;73
00012a  f7fffffe          BL       _Anki_Log
00012e  f04f60a0          MOV      r0,#0x5000000         ;73
000132  e780              B        |L272.54|
                  |L272.308|
000134  e9dd7614          LDRD     r7,r6,[sp,#0x50]      ;73
000138  4628              MOV      r0,r5                 ;73
00013a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00013e  2800              CMP      r0,#0                 ;73
000140  d07e              BEQ      |L272.576|
000142  4638              MOV      r0,r7                 ;78
000144  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000148  2800              CMP      r0,#0                 ;78
00014a  d079              BEQ      |L272.576|
00014c  4630              MOV      r0,r6                 ;78
00014e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000152  2800              CMP      r0,#0                 ;78
000154  d074              BEQ      |L272.576|
000156  4620              MOV      r0,r4                 ;78
000158  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE7IsValidEv ; Anki::Embedded::Array<unsigned char>::IsValid() const
00015c  2800              CMP      r0,#0                 ;78
00015e  d06f              BEQ      |L272.576|
000160  6928              LDR      r0,[r5,#0x10]         ;78
000162  9000              STR      r0,[sp,#0]            ;78
000164  6938              LDR      r0,[r7,#0x10]         ;78
000166  9001              STR      r0,[sp,#4]            ;78
000168  6930              LDR      r0,[r6,#0x10]         ;78
00016a  9002              STR      r0,[sp,#8]            ;78
00016c  6920              LDR      r0,[r4,#0x10]         ;78
00016e  2100              MOVS     r1,#0                 ;78
000170  466a              MOV      r2,sp                 ;78
000172  9003              STR      r0,[sp,#0xc]          ;78
                  |L272.372|
000174  1c48              ADDS     r0,r1,#1              ;78
000176  2804              CMP      r0,#4                 ;78
000178  bfb8              IT       LT                    ;78
00017a  f8523021          LDRLT    r3,[r2,r1,LSL #2]     ;78
00017e  da06              BGE      |L272.398|
                  |L272.384|
000180  f852c020          LDR      r12,[r2,r0,LSL #2]    ;78
000184  4563              CMP      r3,r12                ;78
000186  d076              BEQ      |L272.630|
000188  1c40              ADDS     r0,r0,#1              ;78
00018a  2804              CMP      r0,#4                 ;78
00018c  dbf8              BLT      |L272.384|
                  |L272.398|
00018e  1c49              ADDS     r1,r1,#1              ;78
000190  2904              CMP      r1,#4                 ;78
000192  dbef              BLT      |L272.372|
000194  eeb80ae8          VCVT.F32.S32 s0,s17                ;83
000198  eef7ba00          VMOV.F32 s23,#1.00000000       ;83
00019c  f1b80f00          CMP      r8,#0                 ;88
0001a0  ee30aa6b          VSUB.F32 s20,s0,s23            ;83
0001a4  eeb80ac8          VCVT.F32.S32 s0,s16                ;84
0001a8  ee709a6b          VSUB.F32 s19,s0,s23            ;84
0001ac  bf18              IT       NE                    ;88
0001ae  f04f0b01          MOVNE    r11,#1                ;88
0001b2  f8cdb000          STR      r11,[sp,#0]           ;88
0001b6  bf08              IT       EQ                    ;89
0001b8  f8dda010          LDREQ    r10,[sp,#0x10]        ;89
0001bc  f04f0700          MOV      r7,#0                 ;91
0001c0  f1bb0f00          CMP      r11,#0                ;91
0001c4  bfc4              ITT      GT                    ;101
0001c6  ed9fba90          VLDRGT   s22,|L272.1032|
0001ca  ed9f9a90          VLDRGT   s18,|L272.1036|
0001ce  dd50              BLE      |L272.626|
                  |L272.464|
0001d0  9814              LDR      r0,[sp,#0x50]         ;91
0001d2  2600              MOVS     r6,#0                 ;97
0001d4  f1ba0f00          CMP      r10,#0                ;97
0001d8  6901              LDR      r1,[r0,#0x10]         ;97
0001da  6880              LDR      r0,[r0,#8]            ;97
0001dc  fb071b00          MLA      r11,r7,r0,r1          ;97
0001e0  9815              LDR      r0,[sp,#0x54]         ;97
0001e2  6901              LDR      r1,[r0,#0x10]         ;97
0001e4  6880              LDR      r0,[r0,#8]            ;97
0001e6  fb071900          MLA      r9,r7,r0,r1           ;97
0001ea  68a9              LDR      r1,[r5,#8]            ;97
0001ec  6928              LDR      r0,[r5,#0x10]         ;97
0001ee  fb070801          MLA      r8,r7,r1,r0           ;97
0001f2  dd3a              BLE      |L272.618|
                  |L272.500|
0001f4  eb0b0086          ADD      r0,r11,r6,LSL #2      ;98
0001f8  edd0ca00          VLDR     s25,[r0,#0]           ;98
0001fc  eb090086          ADD      r0,r9,r6,LSL #2       ;99
000200  ed90ca00          VLDR     s24,[r0,#0]           ;99
000204  ee3c0a8b          VADD.F32 s0,s25,s22            ;101
000208  f7fffffe          BL       __hardfp_floorf
00020c  eeb08a40          VMOV.F32 s16,s0                ;101
000210  eeb00a6c          VMOV.F32 s0,s25                ;102
000214  f7fffffe          BL       __hardfp_ceilf
000218  eeb0da40          VMOV.F32 s26,s0                ;102
00021c  ee3c0a0b          VADD.F32 s0,s24,s22            ;104
000220  f7fffffe          BL       __hardfp_floorf
000224  eef08a40          VMOV.F32 s17,s0                ;104
000228  eeb00a4c          VMOV.F32 s0,s24                ;105
00022c  f7fffffe          BL       __hardfp_ceilf
000230  eeb58ac0          VCMPE.F32 s16,#0.0              ;108
000234  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
000238  d310              BCC      |L272.604|
00023a  eeb4daca          VCMPE.F32 s26,s20               ;108
00023e  e000              B        |L272.578|
                  |L272.576|
000240  e019              B        |L272.630|
                  |L272.578|
000242  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
000246  dc09              BGT      |L272.604|
000248  eef58ac0          VCMPE.F32 s17,#0.0              ;108
00024c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
000250  d304              BCC      |L272.604|
000252  eeb40ae9          VCMPE.F32 s0,s19                ;108
000256  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;108
00025a  dd17              BLE      |L272.652|
                  |L272.604|
00025c  eb080086          ADD      r0,r8,r6,LSL #2       ;109
000260  edc0aa00          VSTR     s21,[r0,#0]           ;109
                  |L272.612|
000264  1c76              ADDS     r6,r6,#1              ;97
000266  4556              CMP      r6,r10                ;97
000268  dbc4              BLT      |L272.500|
                  |L272.618|
00026a  9800              LDR      r0,[sp,#0]            ;91
00026c  1c7f              ADDS     r7,r7,#1              ;91
00026e  4287              CMP      r7,r0                 ;91
000270  dbae              BLT      |L272.464|
                  |L272.626|
000272  2000              MOVS     r0,#0                 ;139
000274  e6df              B        |L272.54|
                  |L272.630|
000276  204e              MOVS     r0,#0x4e              ;78
000278  e9cd9000          STRD     r9,r0,[sp,#0]         ;78
00027c  a332              ADR      r3,|L272.840|
00027e  4a64              LDR      r2,|L272.1040|
000280  a14a              ADR      r1,|L272.940|
000282  2005              MOVS     r0,#5                 ;78
000284  f7fffffe          BL       _Anki_Log
000288  4862              LDR      r0,|L272.1044|
00028a  e6d4              B        |L272.54|
                  |L272.652|
00028c  ee7c0ac8          VSUB.F32 s1,s25,s16            ;113
000290  ee7c1a68          VSUB.F32 s3,s24,s17            ;116
000294  eef58ac0          VCMPE.F32 s17,#0.0              ;116
000298  ee3b1ae0          VSUB.F32 s2,s23,s1             ;114
00029c  ee7b2ae1          VSUB.F32 s5,s23,s3             ;117
0002a0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
0002a4  bfcc              ITE      GT                    ;117
0002a6  ee382a89          VADDGT.F32 s4,s17,s18            ;117
0002aa  ee382ac9          VSUBLE.F32 s4,s17,s18            ;117
0002ae  eebd2ac2          VCVT.S32.F32 s4,s4                 ;117
0002b2  eeb50ac0          VCMPE.F32 s0,#0.0               ;117
0002b6  ee121a10          VMOV     r1,s4                 ;117
0002ba  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
0002be  bfcc              ITE      GT                    ;117
0002c0  ee300a09          VADDGT.F32 s0,s0,s18             ;117
0002c4  ee300a49          VSUBLE.F32 s0,s0,s18             ;117
0002c8  eebd0ac0          VCVT.S32.F32 s0,s0                 ;117
0002cc  eeb58ac0          VCMPE.F32 s16,#0.0              ;117
0002d0  ee10ca10          VMOV     r12,s0                ;117
0002d4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
0002d8  bfcc              ITE      GT                    ;117
0002da  ee380a09          VADDGT.F32 s0,s16,s18            ;117
0002de  ee380a49          VSUBLE.F32 s0,s16,s18            ;117
0002e2  eebd0ac0          VCVT.S32.F32 s0,s0                 ;117
0002e6  68a3              LDR      r3,[r4,#8]            ;117
0002e8  6922              LDR      r2,[r4,#0x10]         ;117
0002ea  ee100a10          VMOV     r0,s0                 ;117
0002ee  fb012103          MLA      r1,r1,r3,r2           ;117
0002f2  fb0c2203          MLA      r2,r12,r3,r2          ;117
0002f6  4401              ADD      r1,r1,r0              ;117
0002f8  4410              ADD      r0,r0,r2              ;117
0002fa  780a              LDRB     r2,[r1,#0]            ;126
0002fc  7849              LDRB     r1,[r1,#1]            ;127
0002fe  ee002a10          VMOV     s0,r2                 ;126
000302  eeb83a40          VCVT.F32.U32 s6,s0                 ;126
000306  ee001a10          VMOV     s0,r1                 ;127
00030a  7801              LDRB     r1,[r0,#0]            ;128
00030c  7840              LDRB     r0,[r0,#1]            ;129
00030e  ee021a10          VMOV     s4,r1                 ;128
000312  eeb80a40          VCVT.F32.U32 s0,s0                 ;127
000316  ee213a03          VMUL.F32 s6,s2,s6              ;127
00031a  eef83a42          VCVT.F32.U32 s7,s4                 ;128
00031e  ee020a10          VMOV     s4,r0                 ;129
000322  eb080086          ADD      r0,r8,r6,LSL #2       ;135
000326  ee003a80          VMLA.F32 s6,s1,s0              ;135
00032a  eeb82a42          VCVT.F32.U32 s4,s4                 ;129
00032e  ee211a23          VMUL.F32 s2,s2,s7              ;129
000332  ee001a82          VMLA.F32 s2,s1,s4              ;129
000336  ee220a83          VMUL.F32 s0,s5,s6              ;129
00033a  ee010a81          VMLA.F32 s0,s3,s2              ;129
00033e  ed800a00          VSTR     s0,[r0,#0]            ;135
000342  e78f              B        |L272.612|
;;;141    
                          ENDP

                  |L272.836|
                          DCD      _ZZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2<unsigned char, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
                  |L272.840|
000348  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/interp"
00034c  6f726574
000350  6563685c
000354  636f6d6d
000358  6f6e5c69
00035c  6e636c75
000360  64655c61
000364  6e6b692f
000368  636f6d6d
00036c  6f6e2f72
000370  6f626f74
000374  2f696e74
000378  657270  
00037b  6f6c6174          DCB      "olate.h",0
00037f  652e6800
000383  00                DCB      0
                  |L272.900|
000384  4f6e6c79          DCB      "Only INTERPOLATE_LINEAR is supported",0
000388  20494e54
00038c  4552504f
000390  4c415445
000394  5f4c494e
000398  45415220
00039c  69732073
0003a0  7570706f
0003a4  72746564
0003a8  00      
0003a9  00                DCB      0
0003aa  00                DCB      0
0003ab  00                DCB      0
                  |L272.940|
0003ac  496e7465          DCB      "Interp2",0
0003b0  72703200
                  |L272.948|
0003b4  496e7661          DCB      "Invalid objects",0
0003b8  6c696420
0003bc  6f626a65
0003c0  63747300
                  |L272.964|
0003c4  78436f6f          DCB      "xCoordinates, yCoordinates, and out must all be the sam"
0003c8  7264696e
0003cc  61746573
0003d0  2c207943
0003d4  6f6f7264
0003d8  696e6174
0003dc  65732c20
0003e0  616e6420
0003e4  6f757420
0003e8  6d757374
0003ec  20616c6c
0003f0  20626520
0003f4  74686520
0003f8  73616d  
0003fb  65207369          DCB      "e sizes",0
0003ff  7a657300
000403  00                DCB      0
                  |L272.1028|
                          DCD      ||.constdata||+0x47c
                  |L272.1032|
000408  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L272.1036|
00040c  3f000000          DCFS     0x3f000000 ; 0.5
                  |L272.1040|
                          DCD      ||.constdata||+0x4d0
                  |L272.1044|
                          DCD      0x01000003

                          AREA ||area_number.273||, COMGROUP=_ZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_, LINKORDER=||t._ZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.273||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4608              MOV      r0,r1
000006  2101              MOVS     r1,#1
000008  e9c40101          STRD     r0,r1,[r4,#4]
00000c  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
000010  6020              STR      r0,[r4,#0]
000012  4620              MOV      r0,r4
000014  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.280||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.280||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)
;;;55     
;;;56         template<typename Type> s32 Array<Type>::ComputeRequiredStride(const s32 numCols, const Flags::Buffer flags)
000000  b500              PUSH     {lr}
;;;57         {
000002  b083              SUB      sp,sp,#0xc
;;;58           AnkiConditionalErrorAndReturnValue(numCols >= 0,
000004  2800              CMP      r0,#0
000006  da0e              BGE      |L286.38|
000008  213a              MOVS     r1,#0x3a
00000a  480b              LDR      r0,|L286.56|
00000c  4b0b              LDR      r3,|L286.60|
00000e  e9cd0100          STRD     r0,r1,[sp,#0]
000012  f1a30210          SUB      r2,r3,#0x10
000016  f1a20124          SUB      r1,r2,#0x24
00001a  2005              MOVS     r0,#5
00001c  f7fffffe          BL       _Anki_Log
;;;59             0, "Array<Type>::ComputeRequiredStride", "Invalid size");
;;;60     
;;;61           const s32 numColsCapped = MAX(numCols, 1);
;;;62     
;;;63           const s32 bufferRequired = static_cast<s32>(RoundUp<size_t>(sizeof(Type)*numColsCapped, MEMORY_ALIGNMENT));
;;;64     
;;;65           return bufferRequired;
;;;66         }
000020  b003              ADD      sp,sp,#0xc
000022  2000              MOVS     r0,#0                 ;58
000024  bd00              POP      {pc}
                  |L286.38|
000026  2801              CMP      r0,#1                 ;61
000028  bfd8              IT       LE                    ;61
00002a  2001              MOVLE    r0,#1                 ;61
00002c  0080              LSLS     r0,r0,#2              ;63
00002e  300f              ADDS     r0,r0,#0xf            ;63
000030  b003              ADD      sp,sp,#0xc
000032  f020000f          BIC      r0,r0,#0xf
000036  bd00              POP      {pc}
;;;67     
                          ENDP

                  |L286.56|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L286.60|
                          DCD      ||.constdata||+0x370

                          AREA ||area_number.287||, COMGROUP=_ZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.287||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEb||, COMGROUP=_ZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEb, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEb PROC ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)
;;;776    
;;;777        template<typename Type> void* Array<Type>::AllocateBufferFromMemoryStack(const s32 numRows, const s32 stride, MemoryStack &memory, s32 &numBytesAllocated, const Flags::Buffer flags, bool reAllocate)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;778        {
000004  b083              SUB      sp,sp,#0xc
000006  4699              MOV      r9,r3
000008  f8dd8028          LDR      r8,[sp,#0x28]
00000c  9f0c              LDR      r7,[sp,#0x30]
00000e  4615              MOV      r5,r2
000010  1e0c              SUBS     r4,r1,#0
000012  4606              MOV      r6,r0
;;;779          AnkiConditionalError(numRows >= 0 && stride > 0,
000014  bfa8              IT       GE
000016  2d00              CMPGE    r5,#0
000018  dc0c              BGT      |L293.52|
00001a  f240310b          MOV      r1,#0x30b
00001e  4813              LDR      r0,|L293.108|
000020  4b13              LDR      r3,|L293.112|
000022  e9cd0100          STRD     r0,r1,[sp,#0]
000026  f1a30210          SUB      r2,r3,#0x10
00002a  f1020148          ADD      r1,r2,#0x48
00002e  2005              MOVS     r0,#5
000030  f7fffffe          BL       _Anki_Log
                  |L293.52|
;;;780            "Array<Type>::AllocateBufferFromMemoryStack", "Invalid size");
;;;781    
;;;782          const s32 numRowsCapped = MAX(numRows, 1);
000034  2c01              CMP      r4,#1
000036  bfd8              IT       LE
000038  2401              MOVLE    r4,#1
;;;783    
;;;784          this->stride = stride;
;;;785    
;;;786          const s32 numBytesRequested = numRowsCapped * this->stride;
00003a  436c              MULS     r4,r5,r4
00003c  60b5              STR      r5,[r6,#8]            ;782
00003e  b147              CBZ      r7,|L293.82|
;;;787    
;;;788          if(reAllocate) {
;;;789            return memory.Reallocate(this->data, numBytesRequested, numBytesAllocated);
000040  6931              LDR      r1,[r6,#0x10]
000042  b003              ADD      sp,sp,#0xc
000044  4643              MOV      r3,r8
000046  4622              MOV      r2,r4
000048  4648              MOV      r0,r9
00004a  e8bd43f0          POP      {r4-r9,lr}
00004e  f7ffbffe          B.W      _ZN4Anki8Embedded11MemoryStack10ReallocateEPviRi ; Anki::Embedded::MemoryStack::Reallocate(void*, int, int&)
                  |L293.82|
;;;790          } else {
;;;791            return memory.Allocate(numBytesRequested, flags.get_zeroAllocatedMemory(), numBytesAllocated);
000052  a80b              ADD      r0,sp,#0x2c
000054  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
000058  4602              MOV      r2,r0
00005a  b003              ADD      sp,sp,#0xc
00005c  4643              MOV      r3,r8
00005e  4621              MOV      r1,r4
000060  4648              MOV      r0,r9
000062  e8bd43f0          POP      {r4-r9,lr}
000066  f7ffbffe          B.W      _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
;;;792          }
;;;793        }
;;;794    
                          ENDP

00006a  0000              DCW      0x0000
                  |L293.108|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L293.112|
                          DCD      ||.constdata||+0x370

                          AREA ||area_number.294||, COMGROUP=_ZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEb, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.294||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEb||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEERKNS0_14LinearSequenceIiEES8_||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEERKNS0_14LinearSequenceIiEES8_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded10ArraySliceIfEC2ENS0_5ArrayIfEERKNS0_14LinearSequenceIiEES8_                  ; Alternate entry point ; Anki::Embedded::ArraySlice<float>::ArraySlice__sub_object(Anki::Embedded::Array<float>, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
                  _ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEERKNS0_14LinearSequenceIiEES8_ PROC ; Anki::Embedded::ArraySlice<float>::ArraySlice(Anki::Embedded::Array<float>, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
;;;88     
;;;89         template<typename Type> ArraySlice<Type>::ArraySlice(Array<Type> array, const LinearSequence<s32> &ySlice, const LinearSequence<s32> &xSlice)
;;;90           : ConstArraySlice<Type>(array, ySlice, xSlice)
;;;91         {
;;;92           if(array.get_numElements() == 0) {
;;;93             this->arrayData = NULL;
;;;94           } else {
;;;95             this->arrayData = array.Pointer(0,0);
;;;96           }
;;;97         }
;;;98     
000000  e92d01f0          PUSH     {r4-r8}
000004  e9dd4507          LDRD     r4,r5,[sp,#0x1c]
000008  e9dd6c05          LDRD     r6,r12,[sp,#0x14]
00000c  e9d47800          LDRD     r7,r8,[r4,#0]
000010  68a4              LDR      r4,[r4,#8]
000012  6007              STR      r7,[r0,#0]
000014  e9c08401          STRD     r8,r4,[r0,#4]
000018  e9d54700          LDRD     r4,r7,[r5,#0]
00001c  68ad              LDR      r5,[r5,#8]
00001e  e9c05105          STRD     r5,r1,[r0,#0x14]
000022  f100081c          ADD      r8,r0,#0x1c
000026  2500              MOVS     r5,#0
000028  e8a8104c          STM      r8!,{r2,r3,r6,r12}
00002c  e9c04703          STRD     r4,r7,[r0,#0xc]
000030  2900              CMP      r1,#0
000032  bfc8              IT       GT
000034  2a00              CMPGT    r2,#0
000036  dd13              BLE      |L300.96|
000038  fb01f402          MUL      r4,r1,r2
00003c  b184              CBZ      r4,|L300.96|
00003e  2400              MOVS     r4,#0
000040  fb04c403          MLA      r4,r4,r3,r12
000044  62c4              STR      r4,[r0,#0x2c]
                  |L300.70|
000046  2900              CMP      r1,#0
000048  bfc8              IT       GT
00004a  2a00              CMPGT    r2,#0
00004c  dd0a              BLE      |L300.100|
00004e  4351              MULS     r1,r2,r1
000050  b141              CBZ      r1,|L300.100|
000052  2100              MOVS     r1,#0
000054  fb01c103          MLA      r1,r1,r3,r12
000058  6301              STR      r1,[r0,#0x30]
00005a  e8bd01f0          POP      {r4-r8}
00005e  4770              BX       lr
                  |L300.96|
000060  62c5              STR      r5,[r0,#0x2c]
000062  e7f0              B        |L300.70|
                  |L300.100|
000064  6305              STR      r5,[r0,#0x30]
000066  e8bd01f0          POP      {r4-r8}
00006a  4770              BX       lr
                          ENDP


                          AREA ||area_number.301||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEERKNS0_14LinearSequenceIiEES8_, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEERKNS0_14LinearSequenceIiEES8_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.301||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceIfEC1ENS0_5ArrayIfEERKNS0_14LinearSequenceIiEES8_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i||, COMGROUP=_ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i PROC ; Anki::Embedded::IndexSequence<int>(T1, T1, T1, int)
;;;143    
;;;144        template<typename Type> LinearSequence<Type> IndexSequence(Type start, Type increment, Type end, s32 arraySize)
000000  b510              PUSH     {r4,lr}
;;;145        {
000002  b084              SUB      sp,sp,#0x10
000004  4694              MOV      r12,r2
;;;146          // A negative value means (end-value)
;;;147          if(start < 0)
000006  9a06              LDR      r2,[sp,#0x18]
000008  4604              MOV      r4,r0                 ;145
00000a  2900              CMP      r1,#0
;;;148            start += arraySize;
00000c  bfb8              IT       LT
00000e  4411              ADDLT    r1,r2
;;;149    
;;;150          AnkiAssert(start >=0 && start < arraySize);
;;;151    
;;;152          // A negative value means (end-value)
;;;153          if(end < 0)
000010  2b00              CMP      r3,#0
;;;154            end += arraySize;
000012  bfb8              IT       LT
000014  4413              ADDLT    r3,r2
000016  e9cd1c01          STRD     r1,r12,[sp,#4]
00001a  4661              MOV      r1,r12
00001c  461a              MOV      r2,r3
00001e  9801              LDR      r0,[sp,#4]
000020  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
000024  9000              STR      r0,[sp,#0]
000026  e9dd1201          LDRD     r1,r2,[sp,#4]
;;;155    
;;;156          AnkiAssert(end >=0 && end < arraySize);
;;;157    
;;;158          LinearSequence<Type> sequence(start, increment, end);
;;;159    
;;;160          return sequence;
00002a  60a2              STR      r2,[r4,#8]
00002c  e9c40100          STRD     r0,r1,[r4,#0]
;;;161        }
000030  b004              ADD      sp,sp,#0x10
000032  bd10              POP      {r4,pc}
;;;162    
                          ENDP


                          AREA ||area_number.308||, COMGROUP=_ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i, LINKORDER=||t._ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.308||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded13IndexSequenceIiEENS0_14LinearSequenceIT_EES3_S3_S3_i||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIfE7IsValidEv PROC ; Anki::Embedded::Array<float>::IsValid() const
;;;590    
;;;591        template<typename Type> bool Array<Type>::IsValid() const
000000  6901              LDR      r1,[r0,#0x10]
;;;592        {
000002  b131              CBZ      r1,|L314.18|
;;;593          if(this->data == NULL) {
;;;594            return false;
;;;595          }
;;;596    
;;;597          if(size[0] < 0 || size[1] < 0) {
000004  6801              LDR      r1,[r0,#0]
000006  2900              CMP      r1,#0
000008  bfa1              ITTTT    GE
00000a  6840              LDRGE    r0,[r0,#4]
00000c  2800              CMPGE    r0,#0
;;;598            return false;
;;;599          }
;;;600    
;;;601          return true;
00000e  2001              MOVGE    r0,#1
;;;602        }
000010  4770              BXGE     lr
                  |L314.18|
000012  2000              MOVS     r0,#0                 ;598
000014  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||area_number.315||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.315||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi PROC ; Anki::Embedded::Array<float>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L321.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L321.56|
00000e  4b0b              LDR      r3,|L321.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f103027c          ADD      r2,r3,#0x7c
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L321.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L321.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
                  |L321.60|
                          DCD      ||.constdata||+0x370

                          AREA ||area_number.322||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.322||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEaSERKS2_||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEaSERKS2_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5ArrayIfEaSERKS2_ PROC ; Anki::Embedded::Array<float>::operator =(const Anki::Embedded::Array<float>&)
;;;724    
;;;725        template<typename Type> Array<Type>& Array<Type>::operator= (const Array<Type> & rightHandSide)
000000  680a              LDR      r2,[r1,#0]
;;;726        {
;;;727          this->size[0] = rightHandSide.size[0];
;;;728          this->size[1] = rightHandSide.size[1];
000002  6002              STR      r2,[r0,#0]
000004  684a              LDR      r2,[r1,#4]
;;;729    
;;;730          this->stride = rightHandSide.stride;
000006  6042              STR      r2,[r0,#4]
000008  688a              LDR      r2,[r1,#8]
;;;731          this->flags = rightHandSide.flags;
00000a  6082              STR      r2,[r0,#8]
00000c  68ca              LDR      r2,[r1,#0xc]
;;;732          this->data = rightHandSide.data;
00000e  60c2              STR      r2,[r0,#0xc]
000010  6909              LDR      r1,[r1,#0x10]
000012  6101              STR      r1,[r0,#0x10]
;;;733    
;;;734          return *this;
;;;735        }
000014  4770              BX       lr
;;;736    
                          ENDP


                          AREA ||area_number.329||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEaSERKS2_, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEaSERKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.329||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEaSERKS2_||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIhE7IsValidEv PROC ; Anki::Embedded::Array<unsigned char>::IsValid() const
;;;590    
;;;591        template<typename Type> bool Array<Type>::IsValid() const
000000  6901              LDR      r1,[r0,#0x10]
;;;592        {
000002  b131              CBZ      r1,|L335.18|
;;;593          if(this->data == NULL) {
;;;594            return false;
;;;595          }
;;;596    
;;;597          if(size[0] < 0 || size[1] < 0) {
000004  6801              LDR      r1,[r0,#0]
000006  2900              CMP      r1,#0
000008  bfa1              ITTTT    GE
00000a  6840              LDRGE    r0,[r0,#4]
00000c  2800              CMPGE    r0,#0
;;;598            return false;
;;;599          }
;;;600    
;;;601          return true;
00000e  2001              MOVGE    r0,#1
;;;602        }
000010  4770              BXGE     lr
                  |L335.18|
000012  2000              MOVS     r0,#0                 ;598
000014  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||area_number.336||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.336||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L342.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L342.56|
00000e  4b0b              LDR      r3,|L342.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f103027c          ADD      r2,r3,#0x7c
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L342.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L342.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L342.60|
                          DCD      ||.constdata||+0x370

                          AREA ||area_number.343||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.343||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE||, COMGROUP=_ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15ConstArraySliceIfEC2ERKNS0_5ArrayIfEE                  ; Alternate entry point ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice__sub_object(const Anki::Embedded::Array<float>&)
                  _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE PROC ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
;;;26     
;;;27         template<typename Type> ConstArraySlice<Type>::ConstArraySlice(const Array<Type> &array)
;;;28           : ySlice(LinearSequence<s32>(0,array.get_size(0)-1)), xSlice(LinearSequence<s32>(0,array.get_size(1)-1)), array(array)
;;;29         {
;;;30           if(array.get_numElements() == 0) {
;;;31             this->constArrayData = NULL;
;;;32           } else {
;;;33             this->constArrayData = array.Pointer(0,0);
;;;34           }
;;;35         }
;;;36     
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00000e  1e42              SUBS     r2,r0,#1
000010  2100              MOVS     r1,#0
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000018  4605              MOV      r5,r0
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000022  1e42              SUBS     r2,r0,#1
000024  2100              MOVS     r1,#0
000026  f105000c          ADD      r0,r5,#0xc
00002a  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002e  e894102e          LDM      r4,{r1-r3,r5,r12}
000032  380c              SUBS     r0,r0,#0xc
000034  f1000618          ADD      r6,r0,#0x18
000038  e8a6102e          STM      r6!,{r1-r3,r5,r12}
00003c  6821              LDR      r1,[r4,#0]
00003e  2900              CMP      r1,#0
000040  bfc4              ITT      GT
000042  6862              LDRGT    r2,[r4,#4]
000044  2a00              CMPGT    r2,#0
000046  dd08              BLE      |L349.90|
000048  4351              MULS     r1,r2,r1
00004a  b131              CBZ      r1,|L349.90|
00004c  68a3              LDR      r3,[r4,#8]
00004e  6922              LDR      r2,[r4,#0x10]
000050  2100              MOVS     r1,#0
000052  fb012103          MLA      r1,r1,r3,r2
                  |L349.86|
000056  62c1              STR      r1,[r0,#0x2c]
000058  bd70              POP      {r4-r6,pc}
                  |L349.90|
00005a  2100              MOVS     r1,#0
00005c  e7fb              B        |L349.86|
                          ENDP


                          AREA ||area_number.350||, COMGROUP=_ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE, LINKORDER=||t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.350||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L356.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L356.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L356.384|
000044  a25c              ADR      r2,|L356.440|
000046  a160              ADR      r1,|L356.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L356.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0140              LSLS     r0,r0,#5
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L356.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L356.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L356.384|
000080  a24d              ADR      r2,|L356.440|
000082  a157              ADR      r1,|L356.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L356.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L356.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L356.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L356.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L356.384|
0000c8  a251              ADR      r2,|L356.528|
0000ca  a156              ADR      r1,|L356.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L356.372|
                  |L356.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L356.384|
0000e0  a258              ADR      r2,|L356.580|
0000e2  a15f              ADR      r1,|L356.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L356.372|
                  |L356.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L356.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L356.384|
000110  a259              ADR      r2,|L356.632|
000112  a144              ADR      r1,|L356.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L356.372|
                  |L356.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0171              LSLS     r1,r6,#5
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L356.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L356.384|
00015a  a251              ADR      r2,|L356.672|
00015c  a140              ADR      r1,|L356.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L356.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L356.380|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L356.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L356.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L356.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L356.476|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L356.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L356.524|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L356.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L356.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L356.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L356.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L356.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L356.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.357||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.357||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Quadrilateral<float>>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L363.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L363.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.364||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.364||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_13QuadrilateralIfEEE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b570              PUSH     {r4-r6,lr}
000002  f04f34ff          MOV      r4,#0xffffffff
000006  6004              STR      r4,[r0,#0]
000008  6044              STR      r4,[r0,#4]
00000a  4601              MOV      r1,r0
00000c  6084              STR      r4,[r0,#8]
00000e  f8404f0c          STR      r4,[r0,#0xc]!
000012  2500              MOVS     r5,#0
000014  6044              STR      r4,[r0,#4]
000016  6084              STR      r4,[r0,#8]
000018  f1010024          ADD      r0,r1,#0x24
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000020  f8404d0c          STR      r4,[r0,#-0xc]!
000024  2100              MOVS     r1,#0
000026  6044              STR      r4,[r0,#4]
000028  6105              STR      r5,[r0,#0x10]
00002a  6084              STR      r4,[r0,#8]
00002c  6145              STR      r5,[r0,#0x14]
00002e  f1a00418          SUB      r4,r0,#0x18
000032  6185              STR      r5,[r0,#0x18]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Meshgrid<float>>::set_size(int)
00003a  4620              MOV      r0,r4
00003c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.371||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.371||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_8MeshgridIfEEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC2Ev                  ; Alternate entry point ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::FixedLengthList__sub_object()
                  _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::FixedLengthList()
;;;52     
;;;53         template<typename Type> FixedLengthList<Type>::FixedLengthList()
;;;54           : ArraySlice<Type>()
;;;55         {
;;;56           this->arrayData = NULL;
;;;57           this->set_size(0);
;;;58         } // FixedLengthList<Type>::FixedLengthList()
;;;59     
000000  b570              PUSH     {r4-r6,lr}
000002  f04f34ff          MOV      r4,#0xffffffff
000006  6004              STR      r4,[r0,#0]
000008  6044              STR      r4,[r0,#4]
00000a  4601              MOV      r1,r0
00000c  6084              STR      r4,[r0,#8]
00000e  f8404f0c          STR      r4,[r0,#0xc]!
000012  2500              MOVS     r5,#0
000014  6044              STR      r4,[r0,#4]
000016  6084              STR      r4,[r0,#8]
000018  f1010024          ADD      r0,r1,#0x24
00001c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000020  f8404d0c          STR      r4,[r0,#-0xc]!
000024  2100              MOVS     r1,#0
000026  6044              STR      r4,[r0,#4]
000028  6105              STR      r5,[r0,#0x10]
00002a  6084              STR      r4,[r0,#8]
00002c  6145              STR      r5,[r0,#0x14]
00002e  f1a00418          SUB      r4,r0,#0x18
000032  6185              STR      r5,[r0,#0x18]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEE8set_sizeEi ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<unsigned char>>::set_size(int)
00003a  4620              MOV      r0,r4
00003c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.378||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.378||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5ArrayIhEEEC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN4Anki8Embedded5RoundIiEET_f||, COMGROUP=_ZN4Anki8Embedded5RoundIiEET_f, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5RoundIiEET_f PROC ; Anki::Embedded::Round<int>(float)
;;;222        template<> inline u64 Round<u64> (const f32 v) { return (v > 0) ? static_cast<u64>(v + 0.5f) : 0; }
;;;223        template<> inline s32 Round<s32> (const f32 v) { return (v > 0) ? static_cast<s32>(v + 0.5f) : static_cast<s32>(v - 0.5f); }
000000  eeb50ac0          VCMPE.F32 s0,#0.0
000004  eef60a00          VMOV.F32 s1,#0.50000000
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  dd06              BLE      |L384.28|
00000e  ee300a20          VADD.F32 s0,s0,s1
000012  eebd0ac0          VCVT.S32.F32 s0,s0
000016  ee100a10          VMOV     r0,s0
00001a  4770              BX       lr
                  |L384.28|
00001c  ee300a60          VSUB.F32 s0,s0,s1
000020  eebd0ac0          VCVT.S32.F32 s0,s0
000024  ee100a10          VMOV     r0,s0
000028  4770              BX       lr
;;;224        template<> inline s64 Round<s64> (const f32 v) { return (v > 0) ? static_cast<s64>(v + 0.5f) : static_cast<s64>(v - 0.5f); }
                          ENDP


                          AREA ||area_number.385||, COMGROUP=_ZN4Anki8Embedded5RoundIiEET_f, LINKORDER=||i._ZN4Anki8Embedded5RoundIiEET_f||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.385||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded5RoundIiEET_f||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIfEES3_S3_EEbRKT_RKT0_RKT1_||, COMGROUP=_ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIfEES3_S3_EEbRKT_RKT0_RKT1_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIfEES3_S3_EEbRKT_RKT0_RKT1_ PROC ; Anki::Embedded::AreEqualSize<Anki::Embedded::Array<float>, Anki::Embedded::Array<float>, Anki::Embedded::Array<float>>(const T1&, const T2&, const T3&)
;;;155    
;;;156        template<typename Type1, typename Type2, typename Type3> bool AreEqualSize(const Type1 &object1, const Type2 &object2, const Type3 &object3)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;157        {
000004  4615              MOV      r5,r2
000006  460f              MOV      r7,r1
000008  4606              MOV      r6,r0
;;;158          if(!AreValid(object1, object2, object3))
00000a  460c              MOV      r4,r1
00000c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000010  2800              CMP      r0,#0
000012  d038              BEQ      |L391.134|
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00001a  2800              CMP      r0,#0
00001c  d033              BEQ      |L391.134|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000024  2800              CMP      r0,#0
000026  d02e              BEQ      |L391.134|
;;;159            return false;
;;;160    
;;;161          if(object1.get_size(0) != object2.get_size(0) || object1.get_size(1) != object2.get_size(1) ||
000028  2100              MOVS     r1,#0
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000030  4604              MOV      r4,r0
000032  2100              MOVS     r1,#0
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00003a  4284              CMP      r4,r0
00003c  d123              BNE      |L391.134|
00003e  2101              MOVS     r1,#1
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000046  4604              MOV      r4,r0
000048  2101              MOVS     r1,#1
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000050  4284              CMP      r4,r0
000052  d118              BNE      |L391.134|
;;;162            object1.get_size(0) != object3.get_size(0) || object1.get_size(1) != object3.get_size(1))
000054  2100              MOVS     r1,#0
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00005c  4604              MOV      r4,r0
00005e  2100              MOVS     r1,#0
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000066  4284              CMP      r4,r0
000068  d10d              BNE      |L391.134|
00006a  2101              MOVS     r1,#1
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000072  4604              MOV      r4,r0
000074  2101              MOVS     r1,#1
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00007c  4284              CMP      r4,r0
;;;163            return false;
;;;164    
;;;165          return true;
00007e  bf04              ITT      EQ
000080  2001              MOVEQ    r0,#1
;;;166        }
000082  e8bd81f0          POPEQ    {r4-r8,pc}
                  |L391.134|
000086  2000              MOVS     r0,#0                 ;163
000088  e8bd81f0          POP      {r4-r8,pc}
;;;167    
                          ENDP


                          AREA ||area_number.392||, COMGROUP=_ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIfEES3_S3_EEbRKT_RKT0_RKT1_, LINKORDER=||t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIfEES3_S3_EEbRKT_RKT0_RKT1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.392||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIfEES3_S3_EEbRKT_RKT0_RKT1_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE PROC ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)
;;;1884   
;;;1885           template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const InType value2, ArraySlice<OutType> out)
000000  b40f              PUSH     {r0-r3}
;;;1886           {
000002  ed2d0b02          VPUSH    {d0}
000006  b5f0              PUSH     {r4-r7,lr}
000008  4606              MOV      r6,r0
00000a  ed2d8b02          VPUSH    {d8}
00000e  b099              SUB      sp,sp,#0x64
000010  f1000418          ADD      r4,r0,#0x18
000014  eeb08a40          VMOV.F32 s16,s0
000018  ad29              ADD      r5,sp,#0xa4
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
;;;1887             const Array<InType> &in1Array = in1.get_array();
;;;1888             Array<OutType> &out1Array = out.get_array();
;;;1889   
;;;1890             AnkiConditionalErrorAndReturnValue(AreValid(in1Array, out1Array),
000020  4f6f              LDR      r7,|L398.480|
000022  2800              CMP      r0,#0
000024  d05e              BEQ      |L398.228|
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00002c  2800              CMP      r0,#0
00002e  d059              BEQ      |L398.228|
;;;1891               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Invalid objects");
;;;1892   
;;;1893             ArraySliceLimits_in1_out1<s32> limits(
000030  a823              ADD      r0,sp,#0x8c
000032  f10d0c98          ADD      r12,sp,#0x98
000036  f8963030          LDRB     r3,[r6,#0x30]
00003a  e9cd0c00          STRD     r0,r12,[sp,#0]
00003e  f106020c          ADD      r2,r6,#0xc
000042  4631              MOV      r1,r6
000044  a802              ADD      r0,sp,#8
000046  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
;;;1894               in1.get_ySlice(), in1.get_xSlice(), in1.get_isTransposed(),
;;;1895               out.get_ySlice(), out.get_xSlice());
;;;1896   
;;;1897             AnkiConditionalErrorAndReturnValue(limits.isValid,
00004a  f89d0008          LDRB     r0,[sp,#8]
00004e  2800              CMP      r0,#0
000050  d05a              BEQ      |L398.264|
;;;1898               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Limits is not valid");
;;;1899   
;;;1900             if(limits.isSimpleIteration) {
000052  f89d0009          LDRB     r0,[sp,#9]
000056  2800              CMP      r0,#0
000058  f0008070          BEQ.W    |L398.316|
;;;1901               // If the input isn't transposed, we will do the maximally efficient loop iteration
;;;1902   
;;;1903               for(s32 y=0; y<limits.ySize; y++) {
00005c  9807              LDR      r0,[sp,#0x1c]
00005e  2600              MOVS     r6,#0
000060  2800              CMP      r0,#0
000062  f34080bb          BLE.W    |L398.476|
                  |L398.102|
000066  9805              LDR      r0,[sp,#0x14]
000068  68a2              LDR      r2,[r4,#8]
00006a  6921              LDR      r1,[r4,#0x10]
00006c  68ab              LDR      r3,[r5,#8]
00006e  fb001102          MLA      r1,r0,r2,r1
000072  9803              LDR      r0,[sp,#0xc]
000074  692a              LDR      r2,[r5,#0x10]
000076  fb002203          MLA      r2,r0,r3,r2
00007a  f89d0009          LDRB     r0,[sp,#9]
00007e  2800              CMP      r0,#0
000080  bf19              ITTEE    NE
000082  9812              LDRNE    r0,[sp,#0x48]
000084  9006              STRNE    r0,[sp,#0x18]
000086  9815              LDREQ    r0,[sp,#0x54]
000088  9005              STREQ    r0,[sp,#0x14]
00008a  980c              LDR      r0,[sp,#0x30]
;;;1904                 const InType * const pIn1 = in1Array.Pointer(limits.in1Y, 0);
;;;1905                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1906   
;;;1907                 limits.OuterIncrementTop();
;;;1908   
;;;1909                 for(s32 x=0; x<limits.xSize; x++) {
00008c  9004              STR      r0,[sp,#0x10]
00008e  9b08              LDR      r3,[sp,#0x20]
000090  2000              MOVS     r0,#0
000092  2b00              CMP      r3,#0
000094  dd19              BLE      |L398.202|
                  |L398.150|
;;;1910                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(pIn1[limits.in1X], value2);
000096  9b06              LDR      r3,[sp,#0x18]
000098  1c40              ADDS     r0,r0,#1              ;1909
00009a  eb010383          ADD      r3,r1,r3,LSL #2
00009e  ed930a00          VLDR     s0,[r3,#0]
0000a2  9b04              LDR      r3,[sp,#0x10]
0000a4  ee200a08          VMUL.F32 s0,s0,s16
0000a8  eb020383          ADD      r3,r2,r3,LSL #2
0000ac  ed830a00          VSTR     s0,[r3,#0]
;;;1911   
;;;1912                   limits.in1X += limits.in1_xInnerIncrement;
0000b0  f8ddc028          LDR      r12,[sp,#0x28]
0000b4  9b06              LDR      r3,[sp,#0x18]
0000b6  4463              ADD      r3,r3,r12
;;;1913                   limits.out1X += limits.out1_xInnerIncrement;
0000b8  9306              STR      r3,[sp,#0x18]
0000ba  f8ddc024          LDR      r12,[sp,#0x24]
0000be  9b04              LDR      r3,[sp,#0x10]
0000c0  4463              ADD      r3,r3,r12
0000c2  9304              STR      r3,[sp,#0x10]         ;1909
0000c4  9b08              LDR      r3,[sp,#0x20]         ;1909
0000c6  4283              CMP      r3,r0                 ;1909
0000c8  dce5              BGT      |L398.150|
                  |L398.202|
0000ca  f89d0009          LDRB     r0,[sp,#9]            ;1909
0000ce  2800              CMP      r0,#0                 ;1909
0000d0  d027              BEQ      |L398.290|
0000d2  9916              LDR      r1,[sp,#0x58]         ;1909
0000d4  9805              LDR      r0,[sp,#0x14]         ;1909
0000d6  4408              ADD      r0,r0,r1              ;1909
0000d8  9005              STR      r0,[sp,#0x14]         ;1909
0000da  9910              LDR      r1,[sp,#0x40]         ;1909
0000dc  9803              LDR      r0,[sp,#0xc]          ;1909
0000de  4408              ADD      r0,r0,r1              ;1909
0000e0  9003              STR      r0,[sp,#0xc]          ;1909
0000e2  e026              B        |L398.306|
                  |L398.228|
0000e4  f2407062          MOV      r0,#0x762             ;1890
0000e8  e9cd7000          STRD     r7,r0,[sp,#0]         ;1890
0000ec  a33d              ADR      r3,|L398.484|
0000ee  a24b              ADR      r2,|L398.540|
0000f0  a14e              ADR      r1,|L398.556|
0000f2  2005              MOVS     r0,#5                 ;1890
0000f4  f7fffffe          BL       _Anki_Log
0000f8  f04f6080          MOV      r0,#0x4000000         ;1890
                  |L398.252|
;;;1914                 }
;;;1915   
;;;1916                 limits.OuterIncrementBottom();
;;;1917               }
;;;1918             } else { // if(limits.isSimpleIteration)
;;;1919               // If either input is transposed is allowed, then we will do an inefficent loop iteration
;;;1920   
;;;1921               for(s32 y=0; y<limits.ySize; y++) {
;;;1922                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1923   
;;;1924                 limits.OuterIncrementTop();
;;;1925   
;;;1926                 for(s32 x=0; x<limits.xSize; x++) {
;;;1927                   const InType valIn1 = *in1Array.Pointer(limits.in1Y, limits.in1X);
;;;1928   
;;;1929                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(valIn1, value2);
;;;1930   
;;;1931                   limits.in1X += limits.in1_xInnerIncrement;
;;;1932                   limits.in1Y += limits.in1_yInnerIncrement;
;;;1933                   limits.out1X += limits.out1_xInnerIncrement;
;;;1934                 }
;;;1935   
;;;1936                 limits.OuterIncrementBottom();
;;;1937               }
;;;1938             } //   if(limits.isSimpleIteration)  ... else
;;;1939   
;;;1940             return RESULT_OK;
;;;1941           } // template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const InType value2, ArraySlice<OutType> out)
0000fc  b019              ADD      sp,sp,#0x64
0000fe  ecbd8b02          VPOP     {d8}
000102  bcf0              POP      {r4-r7}
000104  f85dfb1c          LDR      pc,[sp],#0x1c
                  |L398.264|
000108  f2407069          MOV      r0,#0x769             ;1897
00010c  e9cd7000          STRD     r7,r0,[sp,#0]         ;1897
000110  a334              ADR      r3,|L398.484|
000112  a24f              ADR      r2,|L398.592|
000114  a145              ADR      r1,|L398.556|
000116  2005              MOVS     r0,#5                 ;1897
000118  f7fffffe          BL       _Anki_Log
00011c  f04f6080          MOV      r0,#0x4000000         ;1897
000120  e7ec              B        |L398.252|
                  |L398.290|
000122  9913              LDR      r1,[sp,#0x4c]         ;1897
000124  9806              LDR      r0,[sp,#0x18]         ;1897
000126  4408              ADD      r0,r0,r1              ;1897
000128  9006              STR      r0,[sp,#0x18]         ;1897
00012a  9910              LDR      r1,[sp,#0x40]         ;1897
00012c  9803              LDR      r0,[sp,#0xc]          ;1897
00012e  4408              ADD      r0,r0,r1              ;1897
000130  9003              STR      r0,[sp,#0xc]          ;1897
                  |L398.306|
000132  9807              LDR      r0,[sp,#0x1c]         ;1903
000134  1c76              ADDS     r6,r6,#1              ;1903
000136  42b0              CMP      r0,r6                 ;1903
000138  dc95              BGT      |L398.102|
00013a  e04f              B        |L398.476|
                  |L398.316|
00013c  9807              LDR      r0,[sp,#0x1c]         ;1921
00013e  2300              MOVS     r3,#0                 ;1921
000140  2800              CMP      r0,#0                 ;1921
000142  dd4b              BLE      |L398.476|
                  |L398.324|
000144  9803              LDR      r0,[sp,#0xc]          ;1921
000146  68aa              LDR      r2,[r5,#8]            ;1921
000148  6929              LDR      r1,[r5,#0x10]         ;1921
00014a  fb001c02          MLA      r12,r0,r2,r1          ;1921
00014e  f89d0009          LDRB     r0,[sp,#9]            ;1921
000152  2800              CMP      r0,#0                 ;1921
000154  bf19              ITTEE    NE                    ;1921
000156  9812              LDRNE    r0,[sp,#0x48]         ;1921
000158  9006              STRNE    r0,[sp,#0x18]         ;1921
00015a  9815              LDREQ    r0,[sp,#0x54]         ;1921
00015c  9005              STREQ    r0,[sp,#0x14]         ;1921
00015e  980c              LDR      r0,[sp,#0x30]         ;1921
000160  9004              STR      r0,[sp,#0x10]         ;1926
000162  9908              LDR      r1,[sp,#0x20]         ;1926
000164  2000              MOVS     r0,#0                 ;1926
000166  2900              CMP      r1,#0                 ;1926
000168  dd20              BLE      |L398.428|
                  |L398.362|
00016a  e9dd2105          LDRD     r2,r1,[sp,#0x14]      ;1926
00016e  68a7              LDR      r7,[r4,#8]            ;1926
000170  6926              LDR      r6,[r4,#0x10]         ;1926
000172  1c40              ADDS     r0,r0,#1              ;1926
000174  fb026207          MLA      r2,r2,r7,r6           ;1926
000178  eb020181          ADD      r1,r2,r1,LSL #2       ;1926
00017c  ed910a00          VLDR     s0,[r1,#0]            ;1927
000180  9904              LDR      r1,[sp,#0x10]         ;1929
000182  ee200a08          VMUL.F32 s0,s0,s16             ;1929
000186  eb0c0181          ADD      r1,r12,r1,LSL #2      ;1929
00018a  ed810a00          VSTR     s0,[r1,#0]            ;1929
00018e  9a0a              LDR      r2,[sp,#0x28]         ;1931
000190  9906              LDR      r1,[sp,#0x18]         ;1931
000192  4411              ADD      r1,r1,r2              ;1931
000194  9106              STR      r1,[sp,#0x18]         ;1932
000196  9a0b              LDR      r2,[sp,#0x2c]         ;1932
000198  9905              LDR      r1,[sp,#0x14]         ;1932
00019a  4411              ADD      r1,r1,r2              ;1932
00019c  9105              STR      r1,[sp,#0x14]         ;1933
00019e  9a09              LDR      r2,[sp,#0x24]         ;1933
0001a0  9904              LDR      r1,[sp,#0x10]         ;1933
0001a2  4411              ADD      r1,r1,r2              ;1933
0001a4  9104              STR      r1,[sp,#0x10]         ;1926
0001a6  9908              LDR      r1,[sp,#0x20]         ;1926
0001a8  4281              CMP      r1,r0                 ;1926
0001aa  dcde              BGT      |L398.362|
                  |L398.428|
0001ac  f89d0009          LDRB     r0,[sp,#9]            ;1926
0001b0  b140              CBZ      r0,|L398.452|
0001b2  9916              LDR      r1,[sp,#0x58]         ;1926
0001b4  9805              LDR      r0,[sp,#0x14]         ;1926
0001b6  4408              ADD      r0,r0,r1              ;1926
0001b8  9005              STR      r0,[sp,#0x14]         ;1926
0001ba  9910              LDR      r1,[sp,#0x40]         ;1926
0001bc  9803              LDR      r0,[sp,#0xc]          ;1926
0001be  4408              ADD      r0,r0,r1              ;1926
0001c0  9003              STR      r0,[sp,#0xc]          ;1926
0001c2  e007              B        |L398.468|
                  |L398.452|
0001c4  9913              LDR      r1,[sp,#0x4c]         ;1926
0001c6  9806              LDR      r0,[sp,#0x18]         ;1926
0001c8  4408              ADD      r0,r0,r1              ;1926
0001ca  9006              STR      r0,[sp,#0x18]         ;1926
0001cc  9910              LDR      r1,[sp,#0x40]         ;1926
0001ce  9803              LDR      r0,[sp,#0xc]          ;1926
0001d0  4408              ADD      r0,r0,r1              ;1926
0001d2  9003              STR      r0,[sp,#0xc]          ;1926
                  |L398.468|
0001d4  9807              LDR      r0,[sp,#0x1c]         ;1921
0001d6  1c5b              ADDS     r3,r3,#1              ;1921
0001d8  4298              CMP      r0,r3                 ;1921
0001da  dcb3              BGT      |L398.324|
                  |L398.476|
0001dc  2000              MOVS     r0,#0                 ;1940
0001de  e78d              B        |L398.252|
;;;1942   
                          ENDP

                  |L398.480|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L398.484|
0001e4  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
0001e8  6f726574
0001ec  6563685c
0001f0  636f6d6d
0001f4  6f6e5c69
0001f8  6e636c75
0001fc  64655c61
000200  6e6b692f
000204  636f6d6d
000208  6f6e2f72
00020c  6f626f74
000210  2f6d6174
000214  726978  
000217  2e6800            DCB      ".h",0
00021a  00                DCB      0
00021b  00                DCB      0
                  |L398.540|
00021c  496e7661          DCB      "Invalid objects",0
000220  6c696420
000224  6f626a65
000228  63747300
                  |L398.556|
00022c  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
000230  69783a3a
000234  456c656d
000238  656e7477
00023c  6973653a
000240  3a417070
000244  6c794f70
000248  65726174
00024c  696f6e00
                  |L398.592|
000250  4c696d69          DCB      "Limits is not valid",0
000254  74732069
000258  73206e6f
00025c  74207661
000260  6c696400

                          AREA ||area_number.399||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.399||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EE PROC ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Subtract<float, float, float>, float>(T1, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)
;;;1942   
;;;1943           template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const InType value1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
000000  b40f              PUSH     {r0-r3}
;;;1944           {
000002  ed2d0b02          VPUSH    {d0}
000006  b5f0              PUSH     {r4-r7,lr}
000008  4606              MOV      r6,r0
00000a  ed2d8b02          VPUSH    {d8}
00000e  b099              SUB      sp,sp,#0x64
000010  f1000418          ADD      r4,r0,#0x18
000014  eeb08a40          VMOV.F32 s16,s0
000018  ad29              ADD      r5,sp,#0xa4
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
;;;1945             const Array<InType> &in2Array = in2.get_array();
;;;1946             Array<OutType> &out1Array = out.get_array();
;;;1947   
;;;1948             AnkiConditionalErrorAndReturnValue(AreValid(in2Array, out1Array),
000020  4f6f              LDR      r7,|L405.480|
000022  2800              CMP      r0,#0
000024  d05e              BEQ      |L405.228|
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00002c  2800              CMP      r0,#0
00002e  d059              BEQ      |L405.228|
;;;1949               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Invalid objects");
;;;1950   
;;;1951             ArraySliceLimits_in1_out1<s32> limits(
000030  a823              ADD      r0,sp,#0x8c
000032  f10d0c98          ADD      r12,sp,#0x98
000036  f8963030          LDRB     r3,[r6,#0x30]
00003a  e9cd0c00          STRD     r0,r12,[sp,#0]
00003e  f106020c          ADD      r2,r6,#0xc
000042  4631              MOV      r1,r6
000044  a802              ADD      r0,sp,#8
000046  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
;;;1952               in2.get_ySlice(), in2.get_xSlice(), in2.get_isTransposed(),
;;;1953               out.get_ySlice(), out.get_xSlice());
;;;1954   
;;;1955             AnkiConditionalErrorAndReturnValue(limits.isValid,
00004a  f89d0008          LDRB     r0,[sp,#8]
00004e  2800              CMP      r0,#0
000050  d05a              BEQ      |L405.264|
;;;1956               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Limits is not valid");
;;;1957   
;;;1958             if(limits.isSimpleIteration) {
000052  f89d0009          LDRB     r0,[sp,#9]
000056  2800              CMP      r0,#0
000058  f0008070          BEQ.W    |L405.316|
;;;1959               // If the input isn't transposed, we will do the maximally efficient loop iteration
;;;1960   
;;;1961               for(s32 y=0; y<limits.ySize; y++) {
00005c  9807              LDR      r0,[sp,#0x1c]
00005e  2600              MOVS     r6,#0
000060  2800              CMP      r0,#0
000062  f34080bb          BLE.W    |L405.476|
                  |L405.102|
000066  9805              LDR      r0,[sp,#0x14]
000068  68a2              LDR      r2,[r4,#8]
00006a  6921              LDR      r1,[r4,#0x10]
00006c  68ab              LDR      r3,[r5,#8]
00006e  fb001102          MLA      r1,r0,r2,r1
000072  9803              LDR      r0,[sp,#0xc]
000074  692a              LDR      r2,[r5,#0x10]
000076  fb002203          MLA      r2,r0,r3,r2
00007a  f89d0009          LDRB     r0,[sp,#9]
00007e  2800              CMP      r0,#0
000080  bf19              ITTEE    NE
000082  9812              LDRNE    r0,[sp,#0x48]
000084  9006              STRNE    r0,[sp,#0x18]
000086  9815              LDREQ    r0,[sp,#0x54]
000088  9005              STREQ    r0,[sp,#0x14]
00008a  980c              LDR      r0,[sp,#0x30]
;;;1962                 const InType * const pIn2 = in2Array.Pointer(limits.in1Y, 0);
;;;1963                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1964   
;;;1965                 limits.OuterIncrementTop();
;;;1966   
;;;1967                 for(s32 x=0; x<limits.xSize; x++) {
00008c  9004              STR      r0,[sp,#0x10]
00008e  9b08              LDR      r3,[sp,#0x20]
000090  2000              MOVS     r0,#0
000092  2b00              CMP      r3,#0
000094  dd19              BLE      |L405.202|
                  |L405.150|
;;;1968                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(value1, pIn2[limits.in1X]);
000096  9b06              LDR      r3,[sp,#0x18]
000098  1c40              ADDS     r0,r0,#1              ;1967
00009a  eb010383          ADD      r3,r1,r3,LSL #2
00009e  ed930a00          VLDR     s0,[r3,#0]
0000a2  9b04              LDR      r3,[sp,#0x10]
0000a4  ee380a40          VSUB.F32 s0,s16,s0
0000a8  eb020383          ADD      r3,r2,r3,LSL #2
0000ac  ed830a00          VSTR     s0,[r3,#0]
;;;1969   
;;;1970                   limits.in1X += limits.in1_xInnerIncrement;
0000b0  f8ddc028          LDR      r12,[sp,#0x28]
0000b4  9b06              LDR      r3,[sp,#0x18]
0000b6  4463              ADD      r3,r3,r12
;;;1971                   limits.out1X += limits.out1_xInnerIncrement;
0000b8  9306              STR      r3,[sp,#0x18]
0000ba  f8ddc024          LDR      r12,[sp,#0x24]
0000be  9b04              LDR      r3,[sp,#0x10]
0000c0  4463              ADD      r3,r3,r12
0000c2  9304              STR      r3,[sp,#0x10]         ;1967
0000c4  9b08              LDR      r3,[sp,#0x20]         ;1967
0000c6  4283              CMP      r3,r0                 ;1967
0000c8  dce5              BGT      |L405.150|
                  |L405.202|
0000ca  f89d0009          LDRB     r0,[sp,#9]            ;1967
0000ce  2800              CMP      r0,#0                 ;1967
0000d0  d027              BEQ      |L405.290|
0000d2  9916              LDR      r1,[sp,#0x58]         ;1967
0000d4  9805              LDR      r0,[sp,#0x14]         ;1967
0000d6  4408              ADD      r0,r0,r1              ;1967
0000d8  9005              STR      r0,[sp,#0x14]         ;1967
0000da  9910              LDR      r1,[sp,#0x40]         ;1967
0000dc  9803              LDR      r0,[sp,#0xc]          ;1967
0000de  4408              ADD      r0,r0,r1              ;1967
0000e0  9003              STR      r0,[sp,#0xc]          ;1967
0000e2  e026              B        |L405.306|
                  |L405.228|
0000e4  f240709c          MOV      r0,#0x79c             ;1948
0000e8  e9cd7000          STRD     r7,r0,[sp,#0]         ;1948
0000ec  a33d              ADR      r3,|L405.484|
0000ee  a24b              ADR      r2,|L405.540|
0000f0  a14e              ADR      r1,|L405.556|
0000f2  2005              MOVS     r0,#5                 ;1948
0000f4  f7fffffe          BL       _Anki_Log
0000f8  f04f6080          MOV      r0,#0x4000000         ;1948
                  |L405.252|
;;;1972                 }
;;;1973   
;;;1974                 limits.OuterIncrementBottom();
;;;1975               }
;;;1976             } else { // if(limits.isSimpleIteration)
;;;1977               // If either input is transposed, then we will do an inefficent loop iteration
;;;1978   
;;;1979               for(s32 y=0; y<limits.ySize; y++) {
;;;1980                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1981   
;;;1982                 limits.OuterIncrementTop();
;;;1983   
;;;1984                 for(s32 x=0; x<limits.xSize; x++) {
;;;1985                   const InType valIn2 = *in2Array.Pointer(limits.in1Y, limits.in1X);
;;;1986   
;;;1987                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(value1, valIn2);
;;;1988   
;;;1989                   limits.in1X += limits.in1_xInnerIncrement;
;;;1990                   limits.in1Y += limits.in1_yInnerIncrement;
;;;1991                   limits.out1X += limits.out1_xInnerIncrement;
;;;1992                 }
;;;1993   
;;;1994                 limits.OuterIncrementBottom();
;;;1995               }
;;;1996             } //   if(limits.isSimpleIteration)  ... else
;;;1997   
;;;1998             return RESULT_OK;
;;;1999           } // template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const InType value1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out)
0000fc  b019              ADD      sp,sp,#0x64
0000fe  ecbd8b02          VPOP     {d8}
000102  bcf0              POP      {r4-r7}
000104  f85dfb1c          LDR      pc,[sp],#0x1c
                  |L405.264|
000108  f24070a3          MOV      r0,#0x7a3             ;1955
00010c  e9cd7000          STRD     r7,r0,[sp,#0]         ;1955
000110  a334              ADR      r3,|L405.484|
000112  a24f              ADR      r2,|L405.592|
000114  a145              ADR      r1,|L405.556|
000116  2005              MOVS     r0,#5                 ;1955
000118  f7fffffe          BL       _Anki_Log
00011c  f04f6080          MOV      r0,#0x4000000         ;1955
000120  e7ec              B        |L405.252|
                  |L405.290|
000122  9913              LDR      r1,[sp,#0x4c]         ;1955
000124  9806              LDR      r0,[sp,#0x18]         ;1955
000126  4408              ADD      r0,r0,r1              ;1955
000128  9006              STR      r0,[sp,#0x18]         ;1955
00012a  9910              LDR      r1,[sp,#0x40]         ;1955
00012c  9803              LDR      r0,[sp,#0xc]          ;1955
00012e  4408              ADD      r0,r0,r1              ;1955
000130  9003              STR      r0,[sp,#0xc]          ;1955
                  |L405.306|
000132  9807              LDR      r0,[sp,#0x1c]         ;1961
000134  1c76              ADDS     r6,r6,#1              ;1961
000136  42b0              CMP      r0,r6                 ;1961
000138  dc95              BGT      |L405.102|
00013a  e04f              B        |L405.476|
                  |L405.316|
00013c  9807              LDR      r0,[sp,#0x1c]         ;1979
00013e  2300              MOVS     r3,#0                 ;1979
000140  2800              CMP      r0,#0                 ;1979
000142  dd4b              BLE      |L405.476|
                  |L405.324|
000144  9803              LDR      r0,[sp,#0xc]          ;1979
000146  68aa              LDR      r2,[r5,#8]            ;1979
000148  6929              LDR      r1,[r5,#0x10]         ;1979
00014a  fb001c02          MLA      r12,r0,r2,r1          ;1979
00014e  f89d0009          LDRB     r0,[sp,#9]            ;1979
000152  2800              CMP      r0,#0                 ;1979
000154  bf19              ITTEE    NE                    ;1979
000156  9812              LDRNE    r0,[sp,#0x48]         ;1979
000158  9006              STRNE    r0,[sp,#0x18]         ;1979
00015a  9815              LDREQ    r0,[sp,#0x54]         ;1979
00015c  9005              STREQ    r0,[sp,#0x14]         ;1979
00015e  980c              LDR      r0,[sp,#0x30]         ;1979
000160  9004              STR      r0,[sp,#0x10]         ;1984
000162  9908              LDR      r1,[sp,#0x20]         ;1984
000164  2000              MOVS     r0,#0                 ;1984
000166  2900              CMP      r1,#0                 ;1984
000168  dd20              BLE      |L405.428|
                  |L405.362|
00016a  e9dd2105          LDRD     r2,r1,[sp,#0x14]      ;1984
00016e  68a7              LDR      r7,[r4,#8]            ;1984
000170  6926              LDR      r6,[r4,#0x10]         ;1984
000172  1c40              ADDS     r0,r0,#1              ;1984
000174  fb026207          MLA      r2,r2,r7,r6           ;1984
000178  eb020181          ADD      r1,r2,r1,LSL #2       ;1984
00017c  ed910a00          VLDR     s0,[r1,#0]            ;1985
000180  9904              LDR      r1,[sp,#0x10]         ;1987
000182  ee380a40          VSUB.F32 s0,s16,s0             ;1987
000186  eb0c0181          ADD      r1,r12,r1,LSL #2      ;1987
00018a  ed810a00          VSTR     s0,[r1,#0]            ;1987
00018e  9a0a              LDR      r2,[sp,#0x28]         ;1989
000190  9906              LDR      r1,[sp,#0x18]         ;1989
000192  4411              ADD      r1,r1,r2              ;1989
000194  9106              STR      r1,[sp,#0x18]         ;1990
000196  9a0b              LDR      r2,[sp,#0x2c]         ;1990
000198  9905              LDR      r1,[sp,#0x14]         ;1990
00019a  4411              ADD      r1,r1,r2              ;1990
00019c  9105              STR      r1,[sp,#0x14]         ;1991
00019e  9a09              LDR      r2,[sp,#0x24]         ;1991
0001a0  9904              LDR      r1,[sp,#0x10]         ;1991
0001a2  4411              ADD      r1,r1,r2              ;1991
0001a4  9104              STR      r1,[sp,#0x10]         ;1984
0001a6  9908              LDR      r1,[sp,#0x20]         ;1984
0001a8  4281              CMP      r1,r0                 ;1984
0001aa  dcde              BGT      |L405.362|
                  |L405.428|
0001ac  f89d0009          LDRB     r0,[sp,#9]            ;1984
0001b0  b140              CBZ      r0,|L405.452|
0001b2  9916              LDR      r1,[sp,#0x58]         ;1984
0001b4  9805              LDR      r0,[sp,#0x14]         ;1984
0001b6  4408              ADD      r0,r0,r1              ;1984
0001b8  9005              STR      r0,[sp,#0x14]         ;1984
0001ba  9910              LDR      r1,[sp,#0x40]         ;1984
0001bc  9803              LDR      r0,[sp,#0xc]          ;1984
0001be  4408              ADD      r0,r0,r1              ;1984
0001c0  9003              STR      r0,[sp,#0xc]          ;1984
0001c2  e007              B        |L405.468|
                  |L405.452|
0001c4  9913              LDR      r1,[sp,#0x4c]         ;1984
0001c6  9806              LDR      r0,[sp,#0x18]         ;1984
0001c8  4408              ADD      r0,r0,r1              ;1984
0001ca  9006              STR      r0,[sp,#0x18]         ;1984
0001cc  9910              LDR      r1,[sp,#0x40]         ;1984
0001ce  9803              LDR      r0,[sp,#0xc]          ;1984
0001d0  4408              ADD      r0,r0,r1              ;1984
0001d2  9003              STR      r0,[sp,#0xc]          ;1984
                  |L405.468|
0001d4  9807              LDR      r0,[sp,#0x1c]         ;1979
0001d6  1c5b              ADDS     r3,r3,#1              ;1979
0001d8  4298              CMP      r0,r3                 ;1979
0001da  dcb3              BGT      |L405.324|
                  |L405.476|
0001dc  2000              MOVS     r0,#0                 ;1998
0001de  e78d              B        |L405.252|
;;;2000         } // namespace Elementwise
                          ENDP

                  |L405.480|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Subtract<float, float, float>, float>(T1, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L405.484|
0001e4  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
0001e8  6f726574
0001ec  6563685c
0001f0  636f6d6d
0001f4  6f6e5c69
0001f8  6e636c75
0001fc  64655c61
000200  6e6b692f
000204  636f6d6d
000208  6f6e2f72
00020c  6f626f74
000210  2f6d6174
000214  726978  
000217  2e6800            DCB      ".h",0
00021a  00                DCB      0
00021b  00                DCB      0
                  |L405.540|
00021c  496e7661          DCB      "Invalid objects",0
000220  6c696420
000224  6f626a65
000228  63747300
                  |L405.556|
00022c  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
000230  69783a3a
000234  456c656d
000238  656e7477
00023c  6973653a
000240  3a417070
000244  6c794f70
000248  65726174
00024c  696f6e00
                  |L405.592|
000250  4c696d69          DCB      "Limits is not valid",0
000254  74732069
000258  73206e6f
00025c  74207661
000260  6c696400

                          AREA ||area_number.406||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.406||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb PROC ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)
;;;110          // This should be kept explicit, to prevent accidental casting between different datatypes.
;;;111          template<typename InType> s32 SetCast(const ConstArraySliceExpression<Type> &input, bool automaticTranspose=true);
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  4607              MOV      r7,r0
000006  b0b1              SUB      sp,sp,#0xc4
000008  4692              MOV      r10,r2
00000a  460e              MOV      r6,r1
00000c  3018              ADDS     r0,r0,#0x18
00000e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000012  f8df8220          LDR      r8,|L412.564|
000016  2800              CMP      r0,#0
000018  d01a              BEQ      |L412.80|
00001a  f1060018          ADD      r0,r6,#0x18
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000022  2800              CMP      r0,#0
000024  d014              BEQ      |L412.80|
000026  6ab8              LDR      r0,[r7,#0x28]
000028  6ab1              LDR      r1,[r6,#0x28]
00002a  f1070518          ADD      r5,r7,#0x18
00002e  f1060418          ADD      r4,r6,#0x18
000032  4288              CMP      r0,r1
000034  d119              BNE      |L412.106|
000036  20ac              MOVS     r0,#0xac
000038  e9cd8000          STRD     r8,r0,[sp,#0]
00003c  a37e              ADR      r3,|L412.568|
00003e  a28d              ADR      r2,|L412.628|
000040  a198              ADR      r1,|L412.676|
000042  2005              MOVS     r0,#5
000044  f7fffffe          BL       _Anki_Log
000048  b031              ADD      sp,sp,#0xc4
00004a  2000              MOVS     r0,#0
00004c  e8bd8ff0          POP      {r4-r11,pc}
                  |L412.80|
000050  20a9              MOVS     r0,#0xa9
000052  e9cd8000          STRD     r8,r0,[sp,#0]
000056  a378              ADR      r3,|L412.568|
000058  a298              ADR      r2,|L412.700|
00005a  a192              ADR      r1,|L412.676|
00005c  2005              MOVS     r0,#5
00005e  f7fffffe          BL       _Anki_Log
000062  b031              ADD      sp,sp,#0xc4
000064  2000              MOVS     r0,#0
000066  e8bd8ff0          POP      {r4-r11,pc}
                  |L412.106|
00006a  f107090c          ADD      r9,r7,#0xc
00006e  f8963030          LDRB     r3,[r6,#0x30]
000072  e9cd7900          STRD     r7,r9,[sp,#0]
000076  f106020c          ADD      r2,r6,#0xc
00007a  4693              MOV      r11,r2
00007c  4631              MOV      r1,r6
00007e  a802              ADD      r0,sp,#8
000080  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
000084  f89d0008          LDRB     r0,[sp,#8]
000088  b9b0              CBNZ     r0,|L412.184|
00008a  f1ba0f00          CMP      r10,#0
00008e  d067              BEQ      |L412.352|
000090  f8960030          LDRB     r0,[r6,#0x30]
000094  e9cd7900          STRD     r7,r9,[sp,#0]
000098  f0800301          EOR      r3,r0,#1
00009c  465a              MOV      r2,r11
00009e  4631              MOV      r1,r6
0000a0  a819              ADD      r0,sp,#0x64
0000a2  f7fffffe          BL       _ZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_ ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)
0000a6  4601              MOV      r1,r0
0000a8  2259              MOVS     r2,#0x59
0000aa  a802              ADD      r0,sp,#8
0000ac  f7fffffe          BL       __aeabi_memcpy4
0000b0  f89d0008          LDRB     r0,[sp,#8]
0000b4  2800              CMP      r0,#0
0000b6  d046              BEQ      |L412.326|
                  |L412.184|
0000b8  f89d0009          LDRB     r0,[sp,#9]
0000bc  2800              CMP      r0,#0
0000be  f0008069          BEQ.W    |L412.404|
0000c2  9807              LDR      r0,[sp,#0x1c]
0000c4  2600              MOVS     r6,#0
0000c6  2800              CMP      r0,#0
0000c8  f34080ae          BLE.W    |L412.552|
                  |L412.204|
0000cc  9805              LDR      r0,[sp,#0x14]
0000ce  68a2              LDR      r2,[r4,#8]
0000d0  6921              LDR      r1,[r4,#0x10]
0000d2  68ab              LDR      r3,[r5,#8]
0000d4  fb001102          MLA      r1,r0,r2,r1
0000d8  9803              LDR      r0,[sp,#0xc]
0000da  692a              LDR      r2,[r5,#0x10]
0000dc  fb002203          MLA      r2,r0,r3,r2
0000e0  f89d0009          LDRB     r0,[sp,#9]
0000e4  2800              CMP      r0,#0
0000e6  bf19              ITTEE    NE
0000e8  9812              LDRNE    r0,[sp,#0x48]
0000ea  9006              STRNE    r0,[sp,#0x18]
0000ec  9815              LDREQ    r0,[sp,#0x54]
0000ee  9005              STREQ    r0,[sp,#0x14]
0000f0  980c              LDR      r0,[sp,#0x30]
0000f2  9004              STR      r0,[sp,#0x10]
0000f4  9b08              LDR      r3,[sp,#0x20]
0000f6  2000              MOVS     r0,#0
0000f8  2b00              CMP      r3,#0
0000fa  dd17              BLE      |L412.300|
                  |L412.252|
0000fc  9b06              LDR      r3,[sp,#0x18]
0000fe  1c40              ADDS     r0,r0,#1
000100  eb010383          ADD      r3,r1,r3,LSL #2
000104  ed930a00          VLDR     s0,[r3,#0]
000108  9b04              LDR      r3,[sp,#0x10]
00010a  eb020383          ADD      r3,r2,r3,LSL #2
00010e  ed830a00          VSTR     s0,[r3,#0]
000112  f8ddc024          LDR      r12,[sp,#0x24]
000116  9b04              LDR      r3,[sp,#0x10]
000118  4463              ADD      r3,r3,r12
00011a  9304              STR      r3,[sp,#0x10]
00011c  f8ddc028          LDR      r12,[sp,#0x28]
000120  9b06              LDR      r3,[sp,#0x18]
000122  4463              ADD      r3,r3,r12
000124  9306              STR      r3,[sp,#0x18]
000126  9b08              LDR      r3,[sp,#0x20]
000128  4283              CMP      r3,r0
00012a  dce7              BGT      |L412.252|
                  |L412.300|
00012c  f89d0009          LDRB     r0,[sp,#9]
000130  2800              CMP      r0,#0
000132  d022              BEQ      |L412.378|
000134  9916              LDR      r1,[sp,#0x58]
000136  9805              LDR      r0,[sp,#0x14]
000138  4408              ADD      r0,r0,r1
00013a  9005              STR      r0,[sp,#0x14]
00013c  9910              LDR      r1,[sp,#0x40]
00013e  9803              LDR      r0,[sp,#0xc]
000140  4408              ADD      r0,r0,r1
000142  9003              STR      r0,[sp,#0xc]
000144  e021              B        |L412.394|
                  |L412.326|
000146  20b9              MOVS     r0,#0xb9
000148  e9cd8000          STRD     r8,r0,[sp,#0]
00014c  a33a              ADR      r3,|L412.568|
00014e  a25f              ADR      r2,|L412.716|
000150  a154              ADR      r1,|L412.676|
000152  2005              MOVS     r0,#5
000154  f7fffffe          BL       _Anki_Log
000158  b031              ADD      sp,sp,#0xc4
00015a  2000              MOVS     r0,#0
00015c  e8bd8ff0          POP      {r4-r11,pc}
                  |L412.352|
000160  20bd              MOVS     r0,#0xbd
000162  e9cd8000          STRD     r8,r0,[sp,#0]
000166  a334              ADR      r3,|L412.568|
000168  a258              ADR      r2,|L412.716|
00016a  a14e              ADR      r1,|L412.676|
00016c  2005              MOVS     r0,#5
00016e  f7fffffe          BL       _Anki_Log
000172  b031              ADD      sp,sp,#0xc4
000174  2000              MOVS     r0,#0
000176  e8bd8ff0          POP      {r4-r11,pc}
                  |L412.378|
00017a  9913              LDR      r1,[sp,#0x4c]
00017c  9806              LDR      r0,[sp,#0x18]
00017e  4408              ADD      r0,r0,r1
000180  9006              STR      r0,[sp,#0x18]
000182  9910              LDR      r1,[sp,#0x40]
000184  9803              LDR      r0,[sp,#0xc]
000186  4408              ADD      r0,r0,r1
000188  9003              STR      r0,[sp,#0xc]
                  |L412.394|
00018a  9807              LDR      r0,[sp,#0x1c]
00018c  1c76              ADDS     r6,r6,#1
00018e  42b0              CMP      r0,r6
000190  dc9c              BGT      |L412.204|
000192  e049              B        |L412.552|
                  |L412.404|
000194  9807              LDR      r0,[sp,#0x1c]
000196  2300              MOVS     r3,#0
000198  2800              CMP      r0,#0
00019a  dd45              BLE      |L412.552|
                  |L412.412|
00019c  9803              LDR      r0,[sp,#0xc]
00019e  68aa              LDR      r2,[r5,#8]
0001a0  6929              LDR      r1,[r5,#0x10]
0001a2  fb001c02          MLA      r12,r0,r2,r1
0001a6  f89d0009          LDRB     r0,[sp,#9]
0001aa  2800              CMP      r0,#0
0001ac  bf19              ITTEE    NE
0001ae  9812              LDRNE    r0,[sp,#0x48]
0001b0  9006              STRNE    r0,[sp,#0x18]
0001b2  9815              LDREQ    r0,[sp,#0x54]
0001b4  9005              STREQ    r0,[sp,#0x14]
0001b6  980c              LDR      r0,[sp,#0x30]
0001b8  9004              STR      r0,[sp,#0x10]
0001ba  9908              LDR      r1,[sp,#0x20]
0001bc  2000              MOVS     r0,#0
0001be  2900              CMP      r1,#0
0001c0  dd1a              BLE      |L412.504|
                  |L412.450|
0001c2  e9dd2105          LDRD     r2,r1,[sp,#0x14]
0001c6  68a7              LDR      r7,[r4,#8]
0001c8  6926              LDR      r6,[r4,#0x10]
0001ca  1c40              ADDS     r0,r0,#1
0001cc  fb026207          MLA      r2,r2,r7,r6
0001d0  eb020181          ADD      r1,r2,r1,LSL #2
0001d4  ed910a00          VLDR     s0,[r1,#0]
0001d8  9904              LDR      r1,[sp,#0x10]
0001da  eb0c0181          ADD      r1,r12,r1,LSL #2
0001de  ed810a00          VSTR     s0,[r1,#0]
0001e2  9a09              LDR      r2,[sp,#0x24]
0001e4  9904              LDR      r1,[sp,#0x10]
0001e6  4411              ADD      r1,r1,r2
0001e8  9104              STR      r1,[sp,#0x10]
0001ea  9a0b              LDR      r2,[sp,#0x2c]
0001ec  9905              LDR      r1,[sp,#0x14]
0001ee  4411              ADD      r1,r1,r2
0001f0  9105              STR      r1,[sp,#0x14]
0001f2  9908              LDR      r1,[sp,#0x20]
0001f4  4281              CMP      r1,r0
0001f6  dce4              BGT      |L412.450|
                  |L412.504|
0001f8  f89d0009          LDRB     r0,[sp,#9]
0001fc  b140              CBZ      r0,|L412.528|
0001fe  9916              LDR      r1,[sp,#0x58]
000200  9805              LDR      r0,[sp,#0x14]
000202  4408              ADD      r0,r0,r1
000204  9005              STR      r0,[sp,#0x14]
000206  9910              LDR      r1,[sp,#0x40]
000208  9803              LDR      r0,[sp,#0xc]
00020a  4408              ADD      r0,r0,r1
00020c  9003              STR      r0,[sp,#0xc]
00020e  e007              B        |L412.544|
                  |L412.528|
000210  9913              LDR      r1,[sp,#0x4c]
000212  9806              LDR      r0,[sp,#0x18]
000214  4408              ADD      r0,r0,r1
000216  9006              STR      r0,[sp,#0x18]
000218  9910              LDR      r1,[sp,#0x40]
00021a  9803              LDR      r0,[sp,#0xc]
00021c  4408              ADD      r0,r0,r1
00021e  9003              STR      r0,[sp,#0xc]
                  |L412.544|
000220  9807              LDR      r0,[sp,#0x1c]
000222  1c5b              ADDS     r3,r3,#1
000224  4298              CMP      r0,r3
000226  dcb9              BGT      |L412.412|
                  |L412.552|
000228  9908              LDR      r1,[sp,#0x20]
00022a  b031              ADD      sp,sp,#0xc4
00022c  4348              MULS     r0,r1,r0
00022e  e8bd8ff0          POP      {r4-r11,pc}
;;;112          //template<typename InType> s32 SetCast(const InType * const values, const s32 numValues); // TODO: implement
;;;113    
;;;114          // Get the raw Array from the Slice. This is mainly useful for interfacing with functions that
;;;115          // don't support the full ArraySlice type, and should be used with caution.
;;;116          Array<Type>& get_array();
;;;117    
;;;118        protected:
;;;119    
;;;120          // For speed, this is a direct pointer to the Array's protected data
;;;121          Type * arrayData;
;;;122        }; // template<typename Type> class ArraySlice
;;;123    
;;;124        // An ConstArraySliceExpression is like a ConstArraySlice, but can also be transposed
;;;125        // It may have other abilities in the future, but will probably always be const
;;;126        template<typename Type> class ConstArraySliceExpression : public ConstArraySlice<Type>
;;;127        {
;;;128        public:
;;;129          ConstArraySliceExpression();
;;;130    
;;;131          ConstArraySliceExpression(const Array<Type> input, bool isTransposed=false);
;;;132    
;;;133          ConstArraySliceExpression(const ArraySlice<Type> &input, bool isTransposed=false);
;;;134    
;;;135          ConstArraySliceExpression(const ConstArraySlice<Type> &input, bool isTransposed=false);
;;;136    
;;;137          // ArraySlice Transpose doesn't modify the data, it just sets a flag
;;;138          // This object isn't modified, but the returned object is.
;;;139          ConstArraySliceExpression<Type> Transpose() const;
;;;140    
;;;141          bool get_isTransposed() const;
;;;142    
;;;143        protected:
;;;144          bool isTransposed;
;;;145        };
;;;146    
;;;147        // To simplify the creation of kernels using an ArraySlice, and to aid the compiler optimizer,
;;;148        // an ArraySliceLimits can be initialized at the beginning of the function, then used as the
;;;149        // limits for the inner loops.
;;;150    
;;;151        // The suffix of in# and out# refer to the number of input and output matrices.
;;;152        // If output == 0, then the output is a scalar.
;;;153    
;;;154        template<typename Type> class ArraySliceSimpleLimits
;;;155        {
;;;156        public:
;;;157          Type xStart;
;;;158          Type xIncrement;
;;;159          s32  xSize;
;;;160    
;;;161          Type yStart;
;;;162          Type yIncrement;
;;;163          s32  ySize;
;;;164    
;;;165          ArraySliceSimpleLimits(const LinearSequence<Type> &in1_ySlice, const LinearSequence<Type> &in1_xSlice);
;;;166        };
;;;167    
;;;168        // In1 and out0 is a special, ultra-simple case, for one matrix input and a scalar output
;;;169        template<typename Type> class ArraySliceLimits_in1_out0
;;;170        {
;;;171        public:
;;;172          // Was this ArraySliceLimits initialized?
;;;173          bool isValid;
;;;174    
;;;175          ArraySliceSimpleLimits<Type> rawIn1Limits;
;;;176    
;;;177          ArraySliceLimits_in1_out0(const LinearSequence<Type> &in1_ySlice, const LinearSequence<Type> &in1_xSlice);
;;;178        };
;;;179    
;;;180        // One input, one output
;;;181        template<typename Type> class ArraySliceLimits_in1_out1
;;;182        {
;;;183        public:
;;;184          // Was this ArraySliceLimits initialized?
;;;185          bool isValid;
;;;186    
;;;187          // Can a simple (non-transposed) iteration be performed?
;;;188          bool isSimpleIteration;
;;;189    
;;;190          // These are the current values for the coordinates in the input and output images
;;;191          s32 out1Y;
;;;192          s32 out1X;
;;;193          s32 in1Y;
;;;194          s32 in1X;
;;;195    
;;;196          // The loops will be based on these iterators (these should match with the output's and inputs' sizes)
;;;197          s32 ySize;
;;;198          s32 xSize;
;;;199    
;;;200          // Depending on whether ths input is transposed or not, either its X or Y coordinate should be
;;;201          // incremented every iteration of the inner loop
;;;202          s32 out1_xInnerIncrement;
;;;203          s32 in1_xInnerIncrement;
;;;204          s32 in1_yInnerIncrement;
;;;205    
;;;206          ArraySliceLimits_in1_out1(
;;;207            const LinearSequence<Type> &in1_ySlice, const LinearSequence<Type> &in1_xSlice, bool in1_isTransposed,
;;;208            const LinearSequence<Type> &out1_ySlice, const LinearSequence<Type> &out1_xSlice);
;;;209    
;;;210          // This should be called at the top of the y-iteration loop, before the x-iteration loop. This will update the out# and in# values for X and Y.
;;;211          inline void OuterIncrementTop();
;;;212    
;;;213          // This should be called at the botom of the y-iteration loop, after the x-iteration loop. This will update the out# and in# values for X and Y.
;;;214          inline void OuterIncrementBottom();
;;;215    
;;;216        protected:
;;;217          ArraySliceSimpleLimits<Type> rawOut1Limits;
;;;218    
;;;219          ArraySliceSimpleLimits<Type> rawIn1Limits;
;;;220          bool in1_isTransposed;
;;;221        };
;;;222    
;;;223        // Two inputs, one output
;;;224        template<typename Type> class ArraySliceLimits_in2_out1
;;;225        {
;;;226        public:
;;;227          // Was this ArraySliceLimits initialized?
;;;228          bool isValid;
;;;229    
;;;230          // Can a simple (non-transposed) iteration be performed?
;;;231          bool isSimpleIteration;
;;;232    
;;;233          // These are the current values for the coordinates in the input and output images
;;;234          s32 out1Y;
;;;235          s32 out1X;
;;;236          s32 in1Y;
;;;237          s32 in1X;
;;;238          s32 in2Y;
;;;239          s32 in2X;
;;;240    
;;;241          // The loops will be based on these iterators (these should match with the output's and inputs' sizes)
;;;242          s32 ySize;
;;;243          s32 xSize;
;;;244    
;;;245          // Depending on whether ths input is transposed or not, either its X or Y coordinate should be
;;;246          // incremented every iteration of the inner loop
;;;247          s32 out1_xInnerIncrement;
;;;248          s32 in1_xInnerIncrement;
;;;249          s32 in1_yInnerIncrement;
;;;250          s32 in2_xInnerIncrement;
;;;251          s32 in2_yInnerIncrement;
;;;252    
;;;253          ArraySliceLimits_in2_out1(
;;;254            const LinearSequence<Type> &in1_ySlice, const LinearSequence<Type> &in1_xSlice, bool in1_isTransposed,
;;;255            const LinearSequence<Type> &in2_ySlice, const LinearSequence<Type> &in2_xSlice, bool in2_isTransposed,
;;;256            const LinearSequence<Type> &out1_ySlice, const LinearSequence<Type> &out1_xSlice);
;;;257    
;;;258          // This should be called at the top of the y-iteration loop, before the x-iteration loop. This will update the out# and in# values for X and Y.
;;;259          inline void OuterIncrementTop();
;;;260    
;;;261          // This should be called at the botom of the y-iteration loop, after the x-iteration loop. This will update the out# and in# values for X and Y.
;;;262          inline void OuterIncrementBottom();
;;;263    
;;;264        protected:
;;;265          ArraySliceSimpleLimits<Type> rawOut1Limits;
;;;266    
;;;267          ArraySliceSimpleLimits<Type> rawIn1Limits;
;;;268          bool in1_isTransposed;
;;;269    
;;;270          ArraySliceSimpleLimits<Type> rawIn2Limits;
;;;271          bool in2_isTransposed;
;;;272        };
;;;273      } // namespace Embedded
;;;274    } // namespace Anki
;;;275    
;;;276    #endif // _ANKICORETECHEMBEDDED_COMMON_ARRAYSLICES_DECLARATIONS_H_
;;;18     
;;;19     namespace Anki
;;;20     {
;;;21       namespace Embedded
;;;22       {
;;;23         namespace Matrix
;;;24         {
;;;25           // #pragma mark --- Declarations ---
;;;26     
;;;27           //
;;;28           // Simple matrix statistics
;;;29           //
;;;30     
;;;31           // Return the minimum element in this Array
;;;32           template<typename Type> Type Min(const ConstArraySliceExpression<Type> &mat);
;;;33     
;;;34           // Return the maximum element in this Array
;;;35           template<typename Type> Type Max(const ConstArraySliceExpression<Type> &mat);
;;;36     
;;;37           // Return the sum of every element in the Array
;;;38           template<typename Array_Type, typename Accumulator_Type> Accumulator_Type Sum(const ConstArraySliceExpression<Array_Type> &mat);
;;;39     
;;;40           // Return the mean of every element in the Array
;;;41           template<typename Array_Type, typename Accumulator_Type> Array_Type Mean(const ConstArraySliceExpression<Array_Type> &mat);
;;;42     
;;;43           // Simultaneously compute the mean and variance of every element in the Array
;;;44           template<typename Array_Type, typename Accumulator_Type> Result MeanAndVar(const ConstArraySliceExpression<Array_Type> &mat,
;;;45             Accumulator_Type& mean, Accumulator_Type& var);
;;;46     
;;;47           //
;;;48           // Elementwise matrix operations
;;;49           //
;;;50     
;;;51           // Elementwise add two arrays. in1, in2, and out can be the same array
;;;52           template<typename InType, typename IntermediateType, typename OutType> Result Add(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;53           template<typename InType, typename IntermediateType, typename OutType> Result Add(const ConstArraySliceExpression<InType> &in1, const InType value2, ArraySlice<OutType> out);
;;;54           template<typename InType, typename IntermediateType, typename OutType> Result Add(const InType value1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;55     
;;;56           // Elementwise subtract two arrays. in1, in2, and out can be the same array
;;;57           template<typename InType, typename IntermediateType, typename OutType> Result Subtract(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;58           template<typename InType, typename IntermediateType, typename OutType> Result Subtract(const ConstArraySliceExpression<InType> &in1, const InType value2, ArraySlice<OutType> out);
;;;59           template<typename InType, typename IntermediateType, typename OutType> Result Subtract(const InType value1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;60     
;;;61           // Elementwise multiply two arrays. in1, in2, and out can be the same array
;;;62           template<typename InType, typename IntermediateType, typename OutType> Result DotMultiply(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;63           template<typename InType, typename IntermediateType, typename OutType> Result DotMultiply(const ConstArraySliceExpression<InType> &in1, const InType value2, ArraySlice<OutType> out);
;;;64           template<typename InType, typename IntermediateType, typename OutType> Result DotMultiply(const InType value1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;65     
;;;66           // Elementwise divide two arrays. in1, in2, and out can be the same array
;;;67           template<typename InType, typename IntermediateType, typename OutType> Result DotDivide(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;68           template<typename InType, typename IntermediateType, typename OutType> Result DotDivide(const ConstArraySliceExpression<InType> &in1, const InType value2, ArraySlice<OutType> out);
;;;69           template<typename InType, typename IntermediateType, typename OutType> Result DotDivide(const InType value1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;70     
;;;71           // Elementwise exponential on an array
;;;72           template<typename InType, typename IntermediateType, typename OutType> Result Exp(const ConstArraySliceExpression<InType> &in, ArraySlice<OutType> out);
;;;73     
;;;74           // Elementwise square root on an array
;;;75           template<typename InType, typename IntermediateType, typename OutType> Result Sqrt(const ConstArraySliceExpression<InType> &in, ArraySlice<OutType> out);
;;;76     
;;;77           //
;;;78           // Standard matrix operations
;;;79           //
;;;80     
;;;81           // Perform the matrix multiplication "out = in1 * in2"
;;;82           // Note that this is the naive O(n^3) Definition
;;;83           template<typename InType, typename OutType> Result Multiply(const Array<InType> &in1, const Array<InType> &in2, Array<OutType> &out);
;;;84     
;;;85           // Perform the matrix multiplication "out = in1 * in2'"
;;;86           // Note that this is the naive O(n^3) Definition
;;;87           // MultiplyTranspose has better access patterns than Multiply for certain types of arrays, so could be a lot faster (and easier to accelerate)
;;;88           template<typename InType, typename OutType> Result MultiplyTranspose(const Array<InType> &in1, const Array<InType> &in2Transposed, Array<OutType> &out);
;;;89     
;;;90           //
;;;91           // Rotation Matrices
;;;92           //
;;;93     
;;;94           // TODO: Add other rotation-related math, like Rodrigues' formula, or Pose chaining...
;;;95     
;;;96           // Compute the three Euler angles from a given 3x3 Rotation Matrix.
;;;97           Result GetEulerAngles(const Array<f32>& R, f32& angle_x, f32& angle_y, f32& angle_z);
;;;98     
;;;99           //
;;;100          // Linear Algebra and Linear Solvers
;;;101          //
;;;102    
;;;103          // Compute the Cholesky-Banachiewicz decomposition, to return a lower-triangular matrix L such that A=L*L'
;;;104          template<typename Type> Result SolveLeastSquaresWithCholesky(
;;;105            Array<Type> &A_L,      //!< Input A Matrix and Output lower-triangular L matrix
;;;106            Array<Type> &Bt_Xt,    //!< Input B-transpose matrix and Output X-transpose solution
;;;107            bool realCholesky,     //!< A real Cholesky is slower to compute, and not required if only the X solution is required
;;;108            bool &numericalFailure //!< If true, the solver failed because of numerical instability
;;;109            );
;;;110    
;;;111          // Compute the homography such that "transformedPoints = homography * originalPoints"
;;;112          //
;;;113          // WARNING: This uses the inhomogeneous solution and the Cholesky decomposition, therefore it
;;;114          //          will be incorrect if H_33 is zero, which happens in certain cases of lines at
;;;115          //          inifinty. For more details, see Multiple View Geometry 2nd Edition, Example 4.1
;;;116          template<typename Type> Result EstimateHomography(
;;;117            const FixedLengthList<Point<Type> > &originalPoints,    //!< Four points in the original coordinate system
;;;118            const FixedLengthList<Point<Type> > &transformedPoints, //!< Four points in the transformed coordinate system
;;;119            Array<Type> &homography, //!< A 3x3 transformation matrix
;;;120            bool &numericalFailure, //!< Did the homography solver fail?
;;;121            MemoryStack scratch //!< Scratch memory
;;;122            );
;;;123    
;;;124          //template<typename InType, typename IntermediateType, typename OutType> Result CholeskyDecomposition(
;;;125          //  const Array<InType> &A,                    //!< Input A Matrix
;;;126          //  Array<IntermediateType> &diagonalInverses, //!< Vector of the inverses of the diagonals of L
;;;127          //  Array<OutType> &L                          //!< Output lower-triangular L matrix
;;;128          //  );
;;;129    
;;;130          //template<typename InType, typename IntermediateType, typename OutType> Result SolveWithLowerTriangular(
;;;131          //  const Array<InType> &L,                          //!< Input lower-triangular L matrix (such as computed by CholeskyDecomposition)
;;;132          //  const Array<InType> &b,                          //!< Input b matrix
;;;133          //  const Array<IntermediateType> &diagonalInverses, //!< Vector of the inverses of the diagonals of L
;;;134          //  Array<OutType> &x                                //!< Output x solution
;;;135          //  );
;;;136    
;;;137          // Solves Ax = b
;;;138          // Specifically, it uses SVD to minimize ||Ax - b||
;;;139          // Note that the A, b, and x matrices are transposed (this is because for large numbers of samples, transposed inputs are liable to be faster)
;;;140          //Result SolveLeastSquaresWithSVD_f32(Array<f32> &At, const Array<f32> &bt, Array<f32> &xt, MemoryStack scratch);
;;;141          //Result SolveLeastSquaresWithSVD_f64(Array<f64> &At, const Array<f64> &bt, Array<f64> &xt, MemoryStack scratch);
;;;142    
;;;143          //
;;;144          // Matrix structure operations
;;;145          //
;;;146    
;;;147          // matlab equivalent: out = reshape(in, [M,N]);
;;;148          template<typename InType, typename OutType> Result Reshape(const bool isColumnMajor, const Array<InType> &in, Array<OutType> &out);
;;;149          template<typename InType, typename OutType> Array<OutType> Reshape(const bool isColumnMajor, const Array<InType> &in, const s32 newHeight, const s32 newWidth, MemoryStack &memory);
;;;150    
;;;151          // matlab equivalent: out = in(:);
;;;152          template<typename InType, typename OutType> Result Vectorize(const bool isColumnMajor, const Array<InType> &in, Array<OutType> &out);
;;;153          template<typename InType, typename OutType> Array<OutType> Vectorize(const bool isColumnMajor, const Array<InType> &in, MemoryStack &memory);
;;;154    
;;;155          // Perform an immediate matrix transpose (unlike the lazy transpose of ArraySlice)
;;;156          // in and out must be different Array objects
;;;157          template<typename InType, typename OutType> Result Transpose(const Array<InType> &in, Array<OutType> &out);
;;;158    
;;;159          // Rotate an array clockwise by 90, 180, or 270 degrees.
;;;160          // NOTE: Only works for a square matrix.
;;;161          // NOTE: In and out must be different arrays (unlike the interview question)
;;;162          template<typename InType, typename OutType> Result Rotate90( const Array<InType> &in, Array<OutType> &out);
;;;163          template<typename InType, typename OutType> Result Rotate180(const Array<InType> &in, Array<OutType> &out);
;;;164          template<typename InType, typename OutType> Result Rotate270(const Array<InType> &in, Array<OutType> &out);
;;;165    
;;;166          //
;;;167          // Misc matrix operations
;;;168          //
;;;169    
;;;170          // Works the same as the Matlab sort() for matrices.
;;;171          // InsertionSort(X) sorts each column of X in ascending order.
;;;172          // The minIndex and maxIndex are for the sortWhichDimension. maxIndex is automatically clipped to the size of the input Array.
;;;173          // NOTE: this currently uses insertion sort, so may be slow for large, badly-unsorted arrays
;;;174          template<typename Type> Result InsertionSort(Array<Type> &arr, const s32 sortWhichDimension=0, const bool sortAscending=true, const s32 minIndex=0, const s32 maxIndex=0x7FFFFFE);
;;;175    
;;;176          // Subsections less-than-or-equal-to insertionSortSize are sorted with insertion sort
;;;177          template<typename Type> Result QuickSort(Array<Type> &arr, const s32 sortWhichDimension=0, const bool sortAscending=true, const s32 minIndex=0, const s32 maxIndex=0x7FFFFFE, const s32 insertionSortSize=10);
;;;178    
;;;179          // indexes must be allocated, but will be overwritten by InsertionSort()
;;;180          template<typename Type> Result InsertionSort(Array<Type> &arr, Array<s32> &indexes, const s32 sortWhichDimension=0, const bool sortAscending=true, const s32 minIndex=0, const s32 maxIndex=0x7FFFFFE);
;;;181    
;;;182          template<typename Type> Result QuickSort(Array<Type> &arr, Array<s32> &indexes, const s32 sortWhichDimension=0, const bool sortAscending=true, const s32 minIndex=0, const s32 maxIndex=0x7FFFFFE, const s32 insertionSortSize=10);
;;;183    
;;;184          // For a square array, either:
;;;185          // 1. When lowerToUpper==true,  copies the lower (left)  triangle to the upper (right) triangle
;;;186          // 2. When lowerToUpper==false, copies the upper (right) triangle to the lower (left)  triangle
;;;187          // Functionally the same as OpenCV completeSymm()
;;;188          template<typename Type> Result MakeSymmetric(Type &arr, bool lowerToUpper = false);
;;;189    
;;;190          // There's probably no need to use these directly. Instead, use the normal Matrix:: operations, like Matrix::Add
;;;191          namespace Elementwise
;;;192          {
;;;193            template<typename InType, typename IntermediateType, typename OutType> class Add {
;;;194            public:
;;;195              static inline OutType BinaryElementwiseOperation(const InType value1, const InType value2) {return static_cast<OutType>(static_cast<IntermediateType>(value1) + static_cast<IntermediateType>(value2));}
;;;196            };
;;;197    
;;;198            template<typename InType, typename IntermediateType, typename OutType> class Subtract {
;;;199            public:
;;;200              static inline OutType BinaryElementwiseOperation(const InType value1, const InType value2) {return static_cast<OutType>(static_cast<IntermediateType>(value1) - static_cast<IntermediateType>(value2));}
;;;201            };
;;;202    
;;;203            template<typename InType, typename IntermediateType, typename OutType> class DotMultiply {
;;;204            public:
;;;205              static inline OutType BinaryElementwiseOperation(const InType value1, const InType value2) {return static_cast<OutType>(static_cast<IntermediateType>(value1) * static_cast<IntermediateType>(value2));}
;;;206            };
;;;207    
;;;208            template<typename InType, typename IntermediateType, typename OutType> class DotDivide {
;;;209            public:
;;;210              static inline OutType BinaryElementwiseOperation(const InType value1, const InType value2) {return static_cast<OutType>(static_cast<IntermediateType>(value1) / static_cast<IntermediateType>(value2));}
;;;211            };
;;;212    
;;;213            // Technically a unary operator, but we ignore the second parameter
;;;214            // TODO: if this is slow, make a unary version of ApplyOperation
;;;215            template<typename InType, typename IntermediateType, typename OutType> class Exp {
;;;216            public:
;;;217              static inline OutType BinaryElementwiseOperation(const InType value1, const InType value2) {return static_cast<OutType>(expf(static_cast<IntermediateType>(value1)));}
;;;218            };
;;;219    
;;;220            template<typename InType, typename IntermediateType, typename OutType> class Sqrt {
;;;221            public:
;;;222              static inline OutType BinaryElementwiseOperation(const InType value1, const InType value2) {return static_cast<OutType>(sqrtf(static_cast<IntermediateType>(value1)));}
;;;223            };
;;;224    
;;;225            template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;226            template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const InType value2, ArraySlice<OutType> out);
;;;227            template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const InType value1, const ConstArraySliceExpression<InType> &in2, ArraySlice<OutType> out);
;;;228          } // namespace Elementwise
;;;229        } // namespace Matrix
;;;230      } // namespace Embedded
;;;231    } // namespace Anki
;;;232    
;;;233    #endif // _ANKICORETECHEMBEDDED_COMMON_MATRIX_DECLARATIONS_H_
;;;16     #include "anki/common/robot/array2d.h"
;;;1      /**
;;;2      File: array2d.h
;;;3      Author: Peter Barnum
;;;4      Created: 2013
;;;5      
;;;6      Definitions of array2d_declarations.h
;;;7      
;;;8      Copyright Anki, Inc. 2013
;;;9      For internal use only. No part of this code may be used without a signed non-disclosure agreement with Anki, inc.
;;;10     **/
;;;11     
;;;12     #ifndef _ANKICORETECHEMBEDDED_COMMON_ARRAY2D_H_
;;;13     #define _ANKICORETECHEMBEDDED_COMMON_ARRAY2D_H_
;;;14     
;;;15     #include "anki/common/robot/array2d_declarations.h"
;;;16     
;;;17     #include "anki/common/robot/utilities.h"
;;;18     #include "anki/common/robot/memory.h"
;;;19     #include "anki/common/robot/errorHandling.h"
;;;20     #include "anki/common/robot/geometry.h"
;;;21     #include "anki/common/robot/utilities_c.h"
;;;22     #include "anki/common/robot/sequences.h"
;;;23     #include "anki/common/robot/matrix.h"
;;;24     #include "anki/common/robot/comparisons.h"
;;;25     
;;;26     #include "anki/common/shared/utilities_shared.h"
;;;27     
;;;28     #include "anki/common/robot/serialize_declarations.h"
;;;29     
;;;30     #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;31     #include "opencv2/core/core.hpp"
;;;32     #include "opencv2/highgui/highgui.hpp"
;;;33     #include "opencv2/imgproc/imgproc.hpp"
;;;34     #include "opencv2/objdetect/objdetect.hpp"
;;;35     #endif
;;;36     
;;;37     #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;38     #define ANKICORETECH_EMBEDDED_USE_MALLOC 1
;;;39     #define ANKICORETECH_EMBEDDED_USE_ZLIB 1
;;;40     #endif
;;;41     
;;;42     #if ANKICORETECH_EMBEDDED_USE_ZLIB
;;;43     #include "zlib.h"
;;;44     #endif
;;;45     
;;;46     namespace Anki
;;;47     {
;;;48       namespace Embedded
;;;49       {
;;;50         template<typename Type> class ArraySlice;
;;;51         template<typename Type> class ConstArraySlice;
;;;52         template<typename Type> class ConstArraySliceExpression;
;;;53     
;;;54         // #pragma mark --- Array Definitions ---
;;;55     
;;;56         template<typename Type> s32 Array<Type>::ComputeRequiredStride(const s32 numCols, const Flags::Buffer flags)
;;;57         {
;;;58           AnkiConditionalErrorAndReturnValue(numCols >= 0,
;;;59             0, "Array<Type>::ComputeRequiredStride", "Invalid size");
;;;60     
;;;61           const s32 numColsCapped = MAX(numCols, 1);
;;;62     
;;;63           const s32 bufferRequired = static_cast<s32>(RoundUp<size_t>(sizeof(Type)*numColsCapped, MEMORY_ALIGNMENT));
;;;64     
;;;65           return bufferRequired;
;;;66         }
;;;67     
;;;68         template<typename Type> s32 Array<Type>::ComputeMinimumRequiredMemory(const s32 numRows, const s32 numCols, const Flags::Buffer flags)
;;;69         {
;;;70           AnkiConditionalErrorAndReturnValue(numCols >= 0 && numRows >= 0,
;;;71             0, "Array<Type>::ComputeMinimumRequiredMemory", "Invalid size");
;;;72     
;;;73           const s32 numRowsCapped = MAX(numRows, 1);
;;;74     
;;;75           return numRowsCapped * Array<Type>::ComputeRequiredStride(numCols, flags);
;;;76         }
;;;77     
;;;78         template<typename Type> Array<Type>::Array()
;;;79         {
;;;80           InvalidateArray();
;;;81         }
;;;82     
;;;83         template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, void * data, const s32 dataLength, const Flags::Buffer flags)
;;;84         {
;;;85           InvalidateArray();
;;;86     
;;;87           AnkiConditionalErrorAndReturn(reinterpret_cast<size_t>(data)%MEMORY_ALIGNMENT == 0,
;;;88             "Array::Array", "If fully allocated, data must be %d byte aligned", MEMORY_ALIGNMENT);
;;;89     
;;;90           this->stride = ComputeRequiredStride(numCols, flags);
;;;91     
;;;92           AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0 && dataLength >= numRows*this->stride,
;;;93             "Array<Type>::Array", "Invalid size");
;;;94     
;;;95           if(flags.get_isFullyAllocated()) {
;;;96             if(numRows == 1) {
;;;97               // If there's only one row, the stride restrictions are less stringent, though the buffer still must round up to a multiple of 16 bytes (or more)
;;;98               AnkiConditionalErrorAndReturn(this->stride <= dataLength,
;;;99                 "Array<Type>::Array", "if the data buffer being passed in doesn't contain a raw buffer, the dataLength must be greater-than-or-equal-to the stride");
;;;100            } else {
;;;101              const s32 simpleStride = numCols * static_cast<s32>(sizeof(Type));
;;;102    
;;;103              AnkiConditionalErrorAndReturn(this->stride == simpleStride,
;;;104                "Array<Type>::Array", "if the data buffer being passed in doesn't contain a raw buffer, the stride must be simple");
;;;105    
;;;106              AnkiConditionalErrorAndReturn((numCols*sizeof(Type)) % MEMORY_ALIGNMENT == 0,
;;;107                "Array<Type>::Array", "if the data buffer being passed in doesn't contain a raw buffer, (numCols*sizeof(Type)) mod MEMORY_ALIGNMENT must equal zero");
;;;108            }
;;;109    
;;;110            AnkiConditionalErrorAndReturn(flags.get_useBoundaryFillPatterns() == false,
;;;111              "Array<Type>::Array", "if the data buffer being passed in doesn't contain a raw buffer, flags.get_useBoundaryFillPatterns must be false");
;;;112          }
;;;113    
;;;114          InitializeBuffer(numRows,
;;;115            numCols,
;;;116            data,
;;;117            dataLength,
;;;118            flags);
;;;119        }
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
;;;139        template<typename Type> Array<Type> Array<Type>::LoadImage(const char * filename, MemoryStack &memory)
;;;140        {
;;;141          Array<Type> newArray = Array<Type>();
;;;142    
;;;143    #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;144          const cv::Mat cvImage = cv::imread(filename, CV_LOAD_IMAGE_GRAYSCALE);
;;;145    
;;;146          AnkiConditionalErrorAndReturnValue(cvImage.cols >= 0 && cvImage.rows >= 0,
;;;147            newArray, "Array<Type>::LoadImage", "Invalid size");
;;;148    
;;;149          newArray = Array<Type>(cvImage.rows, cvImage.cols, memory);
;;;150    
;;;151          AnkiConditionalErrorAndReturnValue(newArray.IsValid(),
;;;152            newArray, "Array<Type>::LoadImage", "Invalid size");
;;;153    
;;;154          const u8 * restrict pCvImage = cvImage.data;
;;;155    
;;;156          for(s32 y=0; y<cvImage.rows; y++) {
;;;157            Type * restrict pNewArray = newArray.Pointer(y, 0);
;;;158    
;;;159            for(s32 x=0; x<cvImage.cols; x++) {
;;;160              pNewArray[x] = static_cast<Type>(pCvImage[x]);
;;;161            }
;;;162    
;;;163            pCvImage += cvImage.step.buf[0];
;;;164          }
;;;165    #else
;;;166          AnkiError("Array<Type>::Array", "OpenCV is required to load an image from an image file");
;;;167    #endif
;;;168    
;;;169          return newArray;
;;;170        } // Array<Type>::LoadImage(const char * filename, MemoryStack &memory)
;;;171    
;;;172        template<typename Type> Array<Type> LoadBinaryArray_Generic(const char * filename, MemoryStack *scratch, MemoryStack *memory, void * allocatedBuffer, const s32 allocatedBufferLength)
;;;173        {
;;;174          u16  basicType_sizeOfType;
;;;175          bool basicType_isBasicType;
;;;176          bool basicType_isInteger;
;;;177          bool basicType_isSigned;
;;;178          bool basicType_isFloat;
;;;179          bool basicType_isString;
;;;180    
;;;181          Array<u8> rawArray = LoadBinaryArray_UnknownType(
;;;182            filename,
;;;183            scratch, memory,
;;;184            allocatedBuffer, allocatedBufferLength,
;;;185            basicType_sizeOfType, basicType_isBasicType, basicType_isInteger, basicType_isSigned, basicType_isFloat, basicType_isString);
;;;186    
;;;187          // TODO: check that the types match
;;;188    
;;;189          Array<Type> newArray = *reinterpret_cast<Array<Type>*>( &rawArray );
;;;190    
;;;191          return newArray;
;;;192        } // / LoadBinaryArray_Generic()
;;;193    
;;;194        template<typename Type> Array<Type> Array<Type>::LoadBinary(const char * filename, MemoryStack scratch, MemoryStack &memory)
;;;195        {
;;;196          return LoadBinaryArray_Generic<Type>(filename, &scratch, &memory, NULL, -1);
;;;197        } // Array<Type>::LoadBinary(const char * filename, MemoryStack scratch, MemoryStack &memory)
;;;198    
;;;199        template<typename Type> Array<Type> Array<Type>::LoadBinary(const char * filename, void * allocatedBuffer, const s32 allocatedBufferLength) //< allocatedBuffer must be freed manually
;;;200        {
;;;201          return LoadBinaryArray_Generic<Type>(filename, NULL, NULL, allocatedBuffer, allocatedBufferLength);
;;;202        } // LoadBinaryMalloc()
;;;203    
;;;204        template<typename Type> Result Array<Type>::SaveBinary(const char * filename, const s32 compressionLevel, MemoryStack scratch) const
;;;205        {
;;;206          AnkiConditionalErrorAndReturnValue(AreValid(*this, scratch) && filename,
;;;207            RESULT_FAIL_INVALID_OBJECT, "Array<Type>::SaveBinary", "Invalid inputs");
;;;208    
;;;209          AnkiConditionalErrorAndReturnValue(compressionLevel >= 0 && compressionLevel <= 9,
;;;210            RESULT_FAIL_INVALID_PARAMETER, "Array<Type>::SaveBinary", "Invalid compression level");
;;;211    
;;;212          // If this is a string array, add the sizes of the null terminated strings (or zero otherwise)
;;;213          const s32 stringsLength = TotalArrayStringLengths<Type>(*this);
;;;214    
;;;215          const s32 serializedBufferLength = 4096 + ARRAY_FILE_HEADER_LENGTH + this->get_size(0) * this->get_stride() + stringsLength;
;;;216          void *buffer = scratch.Allocate(serializedBufferLength);
;;;217    
;;;218          AnkiConditionalErrorAndReturnValue(buffer,
;;;219            RESULT_FAIL_OUT_OF_MEMORY, "Array<Type>::SaveBinary", "Memory could not be allocated");
;;;220    
;;;221          SerializedBuffer toSave(buffer, serializedBufferLength);
;;;222    
;;;223          toSave.PushBack<Type>("Array", *this);
;;;224    
;;;225          s32 startIndex;
;;;226          u8 * bufferStart = reinterpret_cast<u8*>(toSave.get_memoryStack().get_validBufferStart(startIndex));
;;;227          const s32 validUsedBytes = toSave.get_memoryStack().get_usedBytes() - startIndex;
;;;228    
;;;229          // const s32 startDiff = static_cast<s32>( reinterpret_cast<size_t>(bufferStart) - reinterpret_cast<size_t>(toSave.get_memoryStack().get_buffer()) );
;;;230          // const s32 endDiff = toSave.get_memoryStack().get_totalBytes() - toSave.get_memoryStack().get_usedBytes();
;;;231    
;;;232          FILE *fp = fopen(filename, "wb");
;;;233    
;;;234          AnkiConditionalErrorAndReturnValue(fp,
;;;235            RESULT_FAIL_IO, "Array<Type>::SaveBinary", "Could not open file %s", filename);
;;;236    
;;;237          if(compressionLevel > 0) {
;;;238    #if ANKICORETECH_EMBEDDED_USE_ZLIB
;;;239            char tmpTextHeader[ARRAY_FILE_HEADER_LENGTH+1];
;;;240            strncpy(tmpTextHeader, &ARRAY_FILE_HEADER[0], ARRAY_FILE_HEADER_LENGTH+1);
;;;241            snprintf(tmpTextHeader+ARRAY_FILE_HEADER_VALID_LENGTH+1, ARRAY_FILE_HEADER_LENGTH-ARRAY_FILE_HEADER_VALID_LENGTH, "z%s ", ZLIB_VERSION);
;;;242    
;;;243            const s32 originalLength = validUsedBytes + SERIALIZED_BUFFER_HEADER_LENGTH + SERIALIZED_BUFFER_FOOTER_LENGTH;
;;;244    
;;;245            uLongf compressedLength = 128 + saturate_cast<s32>(1.1 * originalLength);
;;;246    
;;;247            void * uncompressed = malloc(originalLength);
;;;248            void * compressed = malloc(compressedLength + 2*sizeof(s32));
;;;249    
;;;250            if(!uncompressed || !compressed) {
;;;251              if(uncompressed)
;;;252                free(uncompressed);
;;;253    
;;;254              if(compressed)
;;;255                free(compressed);
;;;256    
;;;257              AnkiError("Array<Type>::SaveBinary", "Out of memory");
;;;258    
;;;259              return RESULT_FAIL_OUT_OF_MEMORY;
;;;260            }
;;;261    
;;;262            // Copy the uncompressed data into one buffer
;;;263            {
;;;264              char * pUncompressed = reinterpret_cast<char*>(uncompressed);
;;;265    
;;;266              memcpy(pUncompressed, &SERIALIZED_BUFFER_HEADER[0], SERIALIZED_BUFFER_HEADER_LENGTH);
;;;267              pUncompressed += SERIALIZED_BUFFER_HEADER_LENGTH;
;;;268    
;;;269              memcpy(pUncompressed, bufferStart, validUsedBytes);
;;;270              pUncompressed += validUsedBytes;
;;;271    
;;;272              memcpy(pUncompressed, &SERIALIZED_BUFFER_FOOTER[0], SERIALIZED_BUFFER_FOOTER_LENGTH);
;;;273            }
;;;274    
;;;275            const s32 compressionResult = compress2(reinterpret_cast<Bytef*>(compressed) + 2*sizeof(s32), &compressedLength, reinterpret_cast<Bytef*>(uncompressed), originalLength, compressionLevel);
;;;276    
;;;277            if(compressionResult != Z_OK) {
;;;278              if(uncompressed)
;;;279                free(uncompressed);
;;;280    
;;;281              if(compressed)
;;;282                free(compressed);
;;;283    
;;;284              AnkiError("Array<Type>::SaveBinary", "Zlib error");
;;;285              return RESULT_FAIL_IO;
;;;286            }
;;;287    
;;;288            reinterpret_cast<s32*>(compressed)[0] = static_cast<s32>(originalLength);
;;;289            reinterpret_cast<s32*>(compressed)[1] = static_cast<s32>(compressedLength);
;;;290    
;;;291            const size_t bytesWrittenForTextHeader = fwrite(tmpTextHeader, 1, ARRAY_FILE_HEADER_LENGTH, fp);
;;;292    
;;;293            const size_t bytesWritten = fwrite(compressed, 1, compressedLength + 2*sizeof(s32), fp);
;;;294    
;;;295            if(uncompressed)
;;;296              free(uncompressed);
;;;297    
;;;298            if(compressed)
;;;299              free(compressed);
;;;300    
;;;301            AnkiConditionalErrorAndReturnValue(
;;;302              bytesWrittenForTextHeader == ARRAY_FILE_HEADER_LENGTH &&
;;;303              bytesWritten == (compressedLength + 2*sizeof(s32)),
;;;304              RESULT_FAIL_IO, "Array<Type>::SaveBinary", "Save failed");
;;;305    
;;;306    #else
;;;307            AnkiError("Array<Type>::SaveBinary", "Saving with compression requires zlib");
;;;308            return RESULT_FAIL;
;;;309    #endif
;;;310          } else {
;;;311            const size_t bytesWrittenForTextHeader = fwrite(&ARRAY_FILE_HEADER[0], 1, ARRAY_FILE_HEADER_LENGTH, fp);
;;;312    
;;;313            const size_t bytesWrittenForHeader = fwrite(&SERIALIZED_BUFFER_HEADER[0], 1, SERIALIZED_BUFFER_HEADER_LENGTH, fp);
;;;314    
;;;315            const size_t bytesWritten = fwrite(bufferStart, 1, validUsedBytes, fp);
;;;316    
;;;317            const size_t bytesWrittenForFooter = fwrite(&SERIALIZED_BUFFER_FOOTER[0], 1, SERIALIZED_BUFFER_FOOTER_LENGTH, fp);
;;;318    
;;;319            AnkiConditionalErrorAndReturnValue(
;;;320              bytesWrittenForTextHeader == ARRAY_FILE_HEADER_LENGTH &&
;;;321              bytesWrittenForHeader == SERIALIZED_BUFFER_HEADER_LENGTH &&
;;;322              bytesWritten == validUsedBytes &&
;;;323              bytesWrittenForFooter == SERIALIZED_BUFFER_FOOTER_LENGTH,
;;;324              RESULT_FAIL_IO, "Array<Type>::SaveBinary", "Save failed");
;;;325          }
;;;326    
;;;327          fclose(fp);
;;;328    
;;;329          return RESULT_OK;
;;;330        } // Array<Type>::SaveBinary(const char * filename, MemoryStack scratch)
;;;331    
;;;332        template<typename Type> const Type* Array<Type>::Pointer(const s32 index0, const s32 index1) const
;;;333        {
;;;334          AnkiAssert(index0 >= 0 && index1 >= 0 && index0 < size[0] && index1 < size[1]);
;;;335          AnkiAssert(this->IsValid());
;;;336    
;;;337          return reinterpret_cast<const Type*>( reinterpret_cast<const char*>(this->data) + index0*stride ) + index1;
;;;338        }
;;;339    
;;;340        template<typename Type> Type* Array<Type>::Pointer(const s32 index0, const s32 index1)
;;;341        {
;;;342          AnkiAssert(index0 >= 0 && index1 >= 0 && index0 < size[0] && index1 < size[1]);
;;;343          AnkiAssert(this->IsValid());
;;;344    
;;;345          return reinterpret_cast<Type*>( reinterpret_cast<char*>(this->data) + index0*stride ) + index1;
;;;346        }
;;;347    
;;;348        template<typename Type> inline const Type * Array<Type>::operator[](const s32 index0) const
;;;349        {
;;;350          AnkiAssert(index0 >= 0 && index0 < this->size[0]);
;;;351    
;;;352          return reinterpret_cast<const Type*>( reinterpret_cast<const char*>(this->data) + index0*stride );
;;;353        }
;;;354    
;;;355        template<typename Type> inline Type * Array<Type>::operator[](const s32 index0)
;;;356        {
;;;357          AnkiAssert(index0 >= 0 && index0 < this->size[0]);
;;;358    
;;;359          return reinterpret_cast<Type*>( reinterpret_cast<char*>(this->data) + index0*stride );
;;;360        }
;;;361    
;;;362        template<typename Type> const Type* Array<Type>::Pointer(const Point<s16> &point) const
;;;363        {
;;;364          return Pointer(static_cast<s32>(point.y), static_cast<s32>(point.x));
;;;365        }
;;;366    
;;;367        template<typename Type> Type* Array<Type>::Pointer(const Point<s16> &point)
;;;368        {
;;;369          return Pointer(static_cast<s32>(point.y), static_cast<s32>(point.x));
;;;370        }
;;;371    
;;;372        template<typename Type> const Type& Array<Type>::Element(const s32 elementIndex) const
;;;373        {
;;;374          const s32 index1 = elementIndex % size[1];
;;;375          const s32 index0 = (elementIndex - index1) / size[1];
;;;376    
;;;377          return *Pointer(index0, index1);
;;;378        }
;;;379    
;;;380        template<typename Type> Type& Array<Type>::Element(const s32 elementIndex)
;;;381        {
;;;382          const s32 index1 = elementIndex % size[1];
;;;383          const s32 index0 = (elementIndex - index1) / size[1];
;;;384    
;;;385          return *Pointer(index0, index1);
;;;386        }
;;;387    
;;;388        template<typename Type> ArraySlice<Type> Array<Type>::operator() ()
;;;389        {
;;;390          ArraySlice<Type> slice(*this);
;;;391    
;;;392          return slice;
;;;393        }
;;;394    
;;;395        template<typename Type> ArraySlice<Type> Array<Type>::operator() (const LinearSequence<s32> &ySlice, const LinearSequence<s32> &xSlice)
;;;396        {
;;;397          ArraySlice<Type> slice(*this, ySlice, xSlice);
;;;398    
;;;399          return slice;
;;;400        }
;;;401    
;;;402        template<typename Type> ArraySlice<Type> Array<Type>::operator() (s32 minY, s32 maxY, s32 minX, s32 maxX)
;;;403        {
;;;404          LinearSequence<s32> ySlice = IndexSequence<s32>(minY, 1, maxY, this->size[0]);
;;;405          LinearSequence<s32> xSlice = IndexSequence<s32>(minX, 1, maxX, this->size[1]);
;;;406    
;;;407          ArraySlice<Type> slice(*this, ySlice, xSlice);
;;;408    
;;;409          return slice;
;;;410        }
;;;411    
;;;412        template<typename Type> ArraySlice<Type> Array<Type>::operator() (s32 minY, s32 incrementY, s32 maxY, s32 minX, s32 incrementX, s32 maxX)
;;;413        {
;;;414          LinearSequence<s32> ySlice = IndexSequence(minY, incrementY, maxY, this->size[0]);
;;;415          LinearSequence<s32> xSlice = IndexSequence(minX, incrementX, maxX, this->size[1]);
;;;416    
;;;417          ArraySlice<Type> slice(*this, ySlice, xSlice);
;;;418    
;;;419          return slice;
;;;420        }
;;;421    
;;;422        template<typename Type> ConstArraySlice<Type> Array<Type>::operator() () const
;;;423        {
;;;424          ConstArraySlice<Type> slice(*this);
;;;425    
;;;426          return slice;
;;;427        }
;;;428    
;;;429        template<typename Type> ConstArraySlice<Type> Array<Type>::operator() (const LinearSequence<s32> &ySlice, const LinearSequence<s32> &xSlice) const
;;;430        {
;;;431          ConstArraySlice<Type> slice(*this, ySlice, xSlice);
;;;432    
;;;433          return slice;
;;;434        }
;;;435    
;;;436        template<typename Type> ConstArraySlice<Type> Array<Type>::operator() (s32 minY, s32 maxY, s32 minX, s32 maxX) const
;;;437        {
;;;438          LinearSequence<s32> ySlice = IndexSequence(minY, 1, maxY, this->size[0]);
;;;439          LinearSequence<s32> xSlice = IndexSequence(minX, 1, maxX, this->size[1]);
;;;440    
;;;441          ConstArraySlice<Type> slice(*this, ySlice, xSlice);
;;;442    
;;;443          return slice;
;;;444        }
;;;445    
;;;446        template<typename Type> ConstArraySlice<Type> Array<Type>::operator() (s32 minY, s32 incrementY, s32 maxY, s32 minX, s32 incrementX, s32 maxX) const
;;;447        {
;;;448          LinearSequence<s32> ySlice = IndexSequence(minY, incrementY, maxY, this->size[0]);
;;;449          LinearSequence<s32> xSlice = IndexSequence(minX, incrementX, maxX, this->size[1]);
;;;450    
;;;451          ConstArraySlice<Type> slice(*this, ySlice, xSlice);
;;;452    
;;;453          return slice;
;;;454        }
;;;455    
;;;456        template<typename Type> ConstArraySliceExpression<Type> Array<Type>::Transpose() const
;;;457        {
;;;458          ConstArraySliceExpression<Type> expression(this->operator() ());
;;;459          expression.Transpose();
;;;460    
;;;461          return expression;
;;;462        }
;;;463    
;;;464    #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;465        template<typename Type> s32 Array<Type>::Set(const cv::Mat_<Type> &in)
;;;466        {
;;;467          const s32 inHeight = in.rows;
;;;468          const s32 inWidth = in.cols;
;;;469    
;;;470          AnkiConditionalErrorAndReturnValue(inHeight != 0,
;;;471            0, "Array<Type>::Set", "input cv::Mat is invalid. If you use the release OpenCV libraries with the debug build, lots of things like file loading don't work.");
;;;472    
;;;473          const bool isColor = in.channels() == 3 || inWidth == this->size[1]*3;
;;;474    
;;;475          if(isColor) {
;;;476            AnkiConditionalErrorAndReturnValue(inHeight == this->size[0],
;;;477              0, "Array<Type>::Set", "input cv::Mat is the incorrect size.");
;;;478          } else {
;;;479            AnkiConditionalErrorAndReturnValue(inHeight == this->size[0] && inWidth == this->size[1],
;;;480              0, "Array<Type>::Set", "input cv::Mat is the incorrect size.");
;;;481          }
;;;482    
;;;483          for(s32 y=0; y<this->size[0]; y++) {
;;;484            const Type * restrict pIn = reinterpret_cast<const Type*>(in.ptr(y,0));
;;;485            Type * restrict pThis = this->Pointer(y,0);
;;;486    
;;;487            // If grayscale, just copy. If color, convert to grayscale
;;;488            if(isColor) {
;;;489              for(s32 x=0; x<this->size[1]; x++) {
;;;490                pThis[x] = (pIn[3*x] + pIn[3*x + 1] + pIn[3*x + 2]) / 3;
;;;491              }
;;;492            } else {
;;;493              memcpy(pThis, pIn, inWidth*sizeof(Type));
;;;494            }
;;;495          }
;;;496    
;;;497          return this->size[0]*this->size[1];
;;;498        }
;;;499    #endif // #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;500    
;;;501        template<typename Type> void Array<Type>::Show(const char * const windowName, const bool waitForKeypress, const bool scaleValues, const bool fitImageToWindow) const
;;;502        {
;;;503    #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;504          AnkiConditionalError(this->IsValid(), "Array<Type>::Show", "Array<Type> is not valid");
;;;505    
;;;506          if(fitImageToWindow) {
;;;507            cv::namedWindow(windowName, CV_WINDOW_NORMAL);
;;;508          } else {
;;;509            cv::namedWindow(windowName, CV_WINDOW_AUTOSIZE);
;;;510          }
;;;511    
;;;512          if(scaleValues) {
;;;513            cv::Mat_<f64> scaledArray;
;;;514    
;;;515            if(ArrayToCvMat(*this, &scaledArray) != RESULT_OK)
;;;516              return;
;;;517    
;;;518            const f64 minValue = Matrix::Min<Type>(*this);
;;;519            const f64 maxValue = Matrix::Max<Type>(*this);
;;;520            const f64 range = maxValue - minValue;
;;;521    
;;;522            scaledArray -= minValue;
;;;523            scaledArray /= range;
;;;524    
;;;525            cv::imshow(windowName, scaledArray);
;;;526          } else {
;;;527            cv::Mat_<Type> arrayCopy;
;;;528    
;;;529            if(ArrayToCvMat(*this, &arrayCopy) != RESULT_OK)
;;;530              return;
;;;531    
;;;532            cv::imshow(windowName, arrayCopy);
;;;533          }
;;;534    
;;;535          if(waitForKeypress) {
;;;536            cv::waitKey();
;;;537          }
;;;538    #endif // #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;539        }
;;;540    
;;;541        template<typename Type> Result Array<Type>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
;;;542        {
;;;543          AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;544            RESULT_FAIL_INVALID_OBJECT, "Array<Type>::Print", "Array<Type> is not valid");
;;;545    
;;;546          CoreTechPrint(variableName);
;;;547          CoreTechPrint(":\n");
;;;548          for(s32 y=MAX(0,minY); y<MIN(maxY+1,size[0]); y++) {
;;;549            const Type * const pThisData = this->Pointer(y, 0);
;;;550            for(s32 x=MAX(0,minX); x<MIN(maxX+1,size[1]); x++) {
;;;551              pThisData[x].Print();
;;;552            }
;;;553            CoreTechPrint("\n");
;;;554          }
;;;555          CoreTechPrint("\n");
;;;556    
;;;557          return RESULT_OK;
;;;558        }
;;;559    
;;;560        template<typename Type> Result Array<Type>::PrintAlternate(const char * const variableName, const s32 version, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
;;;561        {
;;;562          return this->Print(variableName, minY, maxY, minX, maxX);
;;;563        }
;;;564    
;;;565        template<typename Type> bool Array<Type>::IsNearlyEqualTo(const Array<Type>& other, const Type epsilon) const
;;;566        {
;;;567          bool isSame = false;
;;;568          if(AreValid(*this, other)) {
;;;569            const s32 nrows = this->get_size(0);
;;;570            const s32 ncols = this->get_size(1);
;;;571    
;;;572            if(other.get_size(0)==nrows && other.get_size(1) == ncols) {
;;;573              isSame = true;
;;;574              for(s32 i=0; i<nrows && isSame; ++i) {
;;;575                const Type * restrict pThis  = this->Pointer(i,0);
;;;576                const Type * restrict pOther = other.Pointer(i,0);
;;;577    
;;;578                for(s32 j=0; j<ncols; ++j) {
;;;579                  if(!NEAR(pThis[j], pOther[j], epsilon)) {
;;;580                    isSame = false;
;;;581                    break;
;;;582                  }
;;;583                } // for j
;;;584              } // for i
;;;585            } // if sizes match
;;;586          } // if both valid
;;;587    
;;;588          return isSame;
;;;589        } // IsNearlyEqualTo()
;;;590    
;;;591        template<typename Type> bool Array<Type>::IsValid() const
;;;592        {
;;;593          if(this->data == NULL) {
;;;594            return false;
;;;595          }
;;;596    
;;;597          if(size[0] < 0 || size[1] < 0) {
;;;598            return false;
;;;599          }
;;;600    
;;;601          return true;
;;;602        }
;;;603    
;;;604        template<typename Type> Result Array<Type>::Resize(const s32 numRows, const s32 numCols, MemoryStack &memory)
;;;605        {
;;;606          AnkiConditionalErrorAndReturnValue(numCols > 0 && numRows > 0,
;;;607            RESULT_FAIL_INVALID_SIZE, "Array<Type>::Resize", "Invalid size");
;;;608    
;;;609          s32 numBytesAllocated = 0;
;;;610    
;;;611          this->data = reinterpret_cast<Type*>( AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, true) );
;;;612    
;;;613          // Don't clear the reallocated memory
;;;614          const bool clearMemory = this->flags.get_zeroAllocatedMemory();
;;;615          this->flags.set_zeroAllocatedMemory(false);
;;;616    
;;;617          const Result result = InitializeBuffer(numRows,
;;;618            numCols,
;;;619            this->data,
;;;620            numBytesAllocated,
;;;621            this->flags);
;;;622    
;;;623          this->flags.set_zeroAllocatedMemory(clearMemory);
;;;624    
;;;625          return result;
;;;626        }
;;;627    
;;;628        template<typename Type> s32 Array<Type>::SetZero()
;;;629        {
;;;630          AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;631            0, "Array<Type>::SetZero", "Array<Type> is not valid");
;;;632    
;;;633          const s32 numBytes = this->get_size(0)*this->get_stride();
;;;634    
;;;635          memset(this->Pointer(0,0), 0, numBytes);
;;;636    
;;;637          return numBytes;
;;;638        }
;;;639    
;;;640        template<typename Type> s32 Array<Type>::Set(const Type value)
;;;641        {
;;;642          AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;643            0, "Array<Type>::Set", "Array<Type> is not valid");
;;;644    
;;;645          for(s32 y=0; y<size[0]; y++) {
;;;646            Type * restrict pThisData = Pointer(y, 0);
;;;647            for(s32 x=0; x<size[1]; x++) {
;;;648              pThisData[x] = value;
;;;649            }
;;;650          }
;;;651    
;;;652          return size[0]*size[1];
;;;653        }
;;;654    
;;;655        template<typename Type> s32 Array<Type>::Set(const Array<Type> &in)
;;;656        {
;;;657          return this->SetCast<Type>(in);
;;;658        }
;;;659    
;;;660        template<typename Type> template<typename InType> s32 Array<Type>::SetCast(const Array<InType> &in)
;;;661        {
;;;662          const s32 inHeight = in.get_size(0);
;;;663          const s32 inWidth = in.get_size(1);
;;;664    
;;;665          AnkiConditionalErrorAndReturnValue(AreValid(*this, in),
;;;666            0, "Array<Type>::Set", "Invalid objects");
;;;667    
;;;668          AnkiConditionalErrorAndReturnValue(inHeight == this->size[0] && inWidth == this->size[1],
;;;669            0, "Array<Type>::Set", "Array sizes don't match");
;;;670    
;;;671          for(s32 y=0; y<size[0]; y++) {
;;;672            const InType * restrict pIn = in.Pointer(y, 0);
;;;673            Type * restrict pThisData = Pointer(y, 0);
;;;674    
;;;675            for(s32 x=0; x<size[1]; x++) {
;;;676              pThisData[x] = saturate_cast<Type>(pIn[x]);
;;;677            }
;;;678          }
;;;679    
;;;680          return size[0]*size[1];
;;;681        }
;;;682    
;;;683        template<typename InType> s32 SetCast(const InType * const values, const s32 numValues)
;;;684        {
;;;685          // This is a little tough to write a general case for, so this method should be specialized
;;;686          // for each relevant case
;;;687          AnkiAssert(false);
;;;688    
;;;689          return 0;
;;;690        }
;;;691    
;;;692        template<typename Type> s32 Array<Type>::Set(const Type * const values, const s32 numValues)
;;;693        {
;;;694          AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;695            0, "Array<Type>::Set", "Array<Type> is not valid");
;;;696    
;;;697          s32 numValuesSet = 0;
;;;698    
;;;699          for(s32 y=0; y<size[0]; y++) {
;;;700            u32 * restrict pThisData = reinterpret_cast<u32*>(Pointer(y, 0));
;;;701    
;;;702            const s32 numValuesThisRow = MAX(0, MIN(numValues - y*size[1], size[1]));
;;;703    
;;;704            if(numValuesThisRow > 0) {
;;;705              // For small data types, this may be too many bytes, but the stride padding should make
;;;706              // the writing okay (I think)
;;;707              const s32 numWordsToCopy = (sizeof(Type)*numValuesThisRow + 3) / 4;
;;;708    
;;;709              //memcpy(pThisData, values + y*size[1], numValuesThisRow*sizeof(Type));
;;;710              for(s32 x=0; x<numWordsToCopy; x++) {
;;;711                //AnkiAssert(reinterpret_cast<size_t>(values+y*size[1]) % 4 == 0);
;;;712                pThisData[x] = reinterpret_cast<const u32*>(values+y*size[1])[x];
;;;713              }
;;;714              numValuesSet += numValuesThisRow;
;;;715            }
;;;716    
;;;717            if(numValuesThisRow < size[1]) {
;;;718              memset(pThisData+numValuesThisRow*sizeof(Type), 0, (size[1]-numValuesThisRow)*sizeof(Type));
;;;719            }
;;;720          }
;;;721    
;;;722          return numValuesSet;
;;;723        }
;;;724    
;;;725        template<typename Type> Array<Type>& Array<Type>::operator= (const Array<Type> & rightHandSide)
;;;726        {
;;;727          this->size[0] = rightHandSide.size[0];
;;;728          this->size[1] = rightHandSide.size[1];
;;;729    
;;;730          this->stride = rightHandSide.stride;
;;;731          this->flags = rightHandSide.flags;
;;;732          this->data = rightHandSide.data;
;;;733    
;;;734          return *this;
;;;735        }
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
;;;738        {
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
;;;747    
;;;748        template<typename Type> s32 Array<Type>::get_stride() const
;;;749        {
;;;750          return stride;
;;;751        }
;;;752    
;;;753        template<typename Type> s32 Array<Type>::get_numElements() const
;;;754        {
;;;755          if(size[0] > 0 && size[1] > 0) {
;;;756            return size[0] * size[1];
;;;757          } else {
;;;758            return 0;
;;;759          }
;;;760        }
;;;761    
;;;762        template<typename Type> void* Array<Type>::get_buffer()
;;;763        {
;;;764          return data;
;;;765        }
;;;766    
;;;767        template<typename Type> const void* Array<Type>::get_buffer() const
;;;768        {
;;;769          return data;
;;;770        }
;;;771    
;;;772        template<typename Type> Flags::Buffer Array<Type>::get_flags() const
;;;773        {
;;;774          return flags;
;;;775        }
;;;776    
;;;777        template<typename Type> void* Array<Type>::AllocateBufferFromMemoryStack(const s32 numRows, const s32 stride, MemoryStack &memory, s32 &numBytesAllocated, const Flags::Buffer flags, bool reAllocate)
;;;778        {
;;;779          AnkiConditionalError(numRows >= 0 && stride > 0,
;;;780            "Array<Type>::AllocateBufferFromMemoryStack", "Invalid size");
;;;781    
;;;782          const s32 numRowsCapped = MAX(numRows, 1);
;;;783    
;;;784          this->stride = stride;
;;;785    
;;;786          const s32 numBytesRequested = numRowsCapped * this->stride;
;;;787    
;;;788          if(reAllocate) {
;;;789            return memory.Reallocate(this->data, numBytesRequested, numBytesAllocated);
;;;790          } else {
;;;791            return memory.Allocate(numBytesRequested, flags.get_zeroAllocatedMemory(), numBytesAllocated);
;;;792          }
;;;793        }
;;;794    
;;;795        template<typename Type> Result Array<Type>::InitializeBuffer(const s32 numRows, const s32 numCols, void * const rawData, const s32 dataLength, const Flags::Buffer flags)
;;;796        {
;;;797          if(!rawData) {
;;;798            AnkiError("Anki.Array2d.initialize", "input data buffer is NULL");
;;;799            InvalidateArray();
;;;800            return RESULT_FAIL_UNINITIALIZED_MEMORY;
;;;801          }
;;;802    
;;;803          AnkiConditionalErrorAndReturnValue(numCols >= 0 && numRows >= 0 && dataLength >= MEMORY_ALIGNMENT,
;;;804            RESULT_FAIL_INVALID_SIZE, "Array<Type>::InitializeBuffer", "Negative dimension");
;;;805    
;;;806          AnkiConditionalErrorAndReturnValue(!flags.get_useBoundaryFillPatterns(),
;;;807            RESULT_FAIL_INVALID_PARAMETER, "Array<Type>::InitializeBuffer", "Fill patterns not supported for Array");
;;;808    
;;;809          this->flags = flags;
;;;810          this->size[0] = numRows;
;;;811          this->size[1] = numCols;
;;;812    
;;;813          // Initialize an empty array.
;;;814    
;;;815          this->data = reinterpret_cast<Type*>(rawData);
;;;816    
;;;817          const s32 extraAlignmentBytes = static_cast<s32>(RoundUp<size_t>(reinterpret_cast<size_t>(rawData), MEMORY_ALIGNMENT) - reinterpret_cast<size_t>(rawData));
;;;818          const s32 requiredBytes = ComputeRequiredStride(numCols,flags)*numRows + extraAlignmentBytes;
;;;819    
;;;820          if(requiredBytes > dataLength) {
;;;821            AnkiError("Anki.Array2d.initialize", "Input data buffer is not large enough. %d bytes is required.", requiredBytes);
;;;822            InvalidateArray();
;;;823            return RESULT_FAIL_OUT_OF_MEMORY;
;;;824          }
;;;825    
;;;826          this->data = reinterpret_cast<Type*>( reinterpret_cast<char*>(rawData) + extraAlignmentBytes );
;;;827    
;;;828          //#if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;829          //      this->UpdateCvMatMirror(*this);
;;;830          //#endif // #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;831    
;;;832          return RESULT_OK;
;;;833        } // Array<Type>::InitializeBuffer()
;;;834    
;;;835        // Set all the buffers and sizes to -1, to signal an invalid array
;;;836        template<typename Type> void Array<Type>::InvalidateArray()
;;;837        {
;;;838          this->size[0] = -1;
;;;839          this->size[1] = -1;
;;;840          this->stride = -1;
;;;841          this->data = NULL;
;;;842        } // void Array<Type>::InvalidateArray()
;;;843    
;;;844        template<typename Type> Result Array<Type>::PrintBasicType(const char * const variableName, const s32 version, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX)  const
;;;845        {
;;;846          AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;847            RESULT_FAIL_INVALID_OBJECT, "Array<Type>::Print", "Array<Type> is not valid");
;;;848    
;;;849          const s32 realMinX = MAX(0,minX);
;;;850          const s32 realMaxX = MIN(maxX+1,size[1]);
;;;851          const s32 realMinY = MAX(0,minY);
;;;852          const s32 realMaxY = MIN(maxY+1,size[0]);
;;;853    
;;;854          CoreTechPrint("%s type(int:%d,signed:%d,float:%d,sizeof:%d):\n", variableName, Flags::TypeCharacteristics<Type>::isInteger, Flags::TypeCharacteristics<Type>::isSigned, Flags::TypeCharacteristics<Type>::isFloat, sizeof(Type));
;;;855    
;;;856          for(s32 y=realMinY; y<realMaxY; y++) {
;;;857            const Type * const pThisData = this->Pointer(y, 0);
;;;858            for(s32 x=realMinX; x<realMaxX; x++) {
;;;859              if(Flags::TypeCharacteristics<Type>::isBasicType) {
;;;860                if(Flags::TypeCharacteristics<Type>::isInteger) {
;;;861                  CoreTechPrint("%d ", static_cast<s32>(pThisData[x]));
;;;862                } else {
;;;863                  if(version==1) {
;;;864                    CoreTechPrint("%f ", (float)pThisData[x]);
;;;865                  } else {
;;;866                    CoreTechPrint("%e ", (float)pThisData[x]);
;;;867                  }
;;;868                }
;;;869              } else {
;;;870                CoreTechPrint("! ");
;;;871              }
;;;872            }
;;;873            CoreTechPrint("\n");
;;;874          }
;;;875          CoreTechPrint("\n");
;;;876    
;;;877          return RESULT_OK;
;;;878        }
;;;879    
;;;880        template<typename Type> Result Array<Type>::PrintString(const char * const variableName, const s32 version, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const
;;;881        {
;;;882          AnkiConditionalErrorAndReturnValue(this->IsValid(),
;;;883            RESULT_FAIL_INVALID_OBJECT, "Array<Type>::PrintString", "Array<Type> is not valid");
;;;884    
;;;885          const s32 realMinX = MAX(0,minX);
;;;886          const s32 realMaxX = MIN(maxX+1,size[1]);
;;;887          const s32 realMinY = MAX(0,minY);
;;;888          const s32 realMaxY = MIN(maxY+1,size[0]);
;;;889    
;;;890          CoreTechPrint("%s:\n", variableName);
;;;891    
;;;892          for(s32 y=realMinY; y<realMaxY; y++) {
;;;893            const char * const * pThisData = this->Pointer(y, 0);
;;;894            for(s32 x=realMinX; x<realMaxX; x++) {
;;;895              const char * curString = pThisData[x];
;;;896              if(!curString) {
;;;897                CoreTechPrint("NULL, ");
;;;898              } else {
;;;899                CoreTechPrint("\"%s\", ", curString);
;;;900              }
;;;901            }
;;;902            CoreTechPrint("\n");
;;;903          }
;;;904          CoreTechPrint("\n");
;;;905    
;;;906          return RESULT_OK;
;;;907        }
;;;908    
;;;909        // #pragma mark --- FixedPointArray Definitions ---
;;;910    
;;;911        template<typename Type> FixedPointArray<Type>::FixedPointArray()
;;;912          : Array<Type>(), numFractionalBits(-1)
;;;913        {
;;;914        }
;;;915    
;;;916        template<typename Type> FixedPointArray<Type>::FixedPointArray(const s32 numRows, const s32 numCols, void * const data, const s32 dataLength, const s32 numFractionalBits, const Flags::Buffer flags)
;;;917          : Array<Type>(numRows, numCols, data, dataLength, flags), numFractionalBits(numFractionalBits)
;;;918        {
;;;919          AnkiConditionalError(numFractionalBits >= 0 && numFractionalBits <= (sizeof(Type)*8),  "FixedPointArray<Type>", "numFractionalBits number is invalid");
;;;920        }
;;;921    
;;;922        template<typename Type> FixedPointArray<Type>::FixedPointArray(s32 numRows, s32 numCols, s32 numFractionalBits, MemoryStack &memory, const Flags::Buffer flags)
;;;923          : Array<Type>(numRows, numCols, memory, flags), numFractionalBits(numFractionalBits)
;;;924        {
;;;925          AnkiConditionalError(numFractionalBits >= 0 && numFractionalBits <= static_cast<s32>(sizeof(Type)*8),  "FixedPointArray<Type>", "numFractionalBits number is invalid");
;;;926        }
;;;927    
;;;928        template<typename Type> s32 FixedPointArray<Type>::get_numFractionalBits() const
;;;929        {
;;;930          return numFractionalBits;
;;;931        }
;;;932    
;;;933    #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;934        template<typename Type> Result ArrayToCvMat(const Array<Type> &in, cv::Mat *out)
;;;935        {
;;;936          AnkiConditionalErrorAndReturnValue(in.IsValid() && out,
;;;937            RESULT_FAIL, "ArrayToCvMat", "This Array is invalid");
;;;938    
;;;939          out->refcount = NULL;
;;;940    
;;;941          // These two should be set, because if the Mat_ constructor was not called, these will not be initialized
;;;942          out->step.p = out->step.buf;
;;;943          out->size = &out->rows;
;;;944    
;;;945          *out = cv::Mat_<Type>(in.get_size(0), in.get_size(1), const_cast<Type*>(in.Pointer(0,0)), static_cast<size_t>(in.get_stride()));
;;;946    
;;;947          return RESULT_OK;
;;;948        } // template<typename Type> Result ArrayToCvMat(const Array<Type> &in, cv::Mat *out)
;;;949    #endif // #if ANKICORETECH_EMBEDDED_USE_OPENCV
;;;950    
;;;951        // #pragma mark --- Array Specializations ---
;;;952    
;;;953        template<> Result Array<bool>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;954        template<> Result Array<u8>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;955        template<> Result Array<s8>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;956        template<> Result Array<u16>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;957        template<> Result Array<s16>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;958        template<> Result Array<u32>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;959        template<> Result Array<s32>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;960        template<> Result Array<u64>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;961        template<> Result Array<s64>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;962        template<> Result Array<f32>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;963        template<> Result Array<f64>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;964        template<> Result Array<const char *>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;965        template<> Result Array<char *>::Print(const char * const variableName, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;966    
;;;967        template<> Result Array<f32>::PrintAlternate(const char * const variableName, const s32 version, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;968        template<> Result Array<f64>::PrintAlternate(const char * const variableName, const s32 version, const s32 minY, const s32 maxY, const s32 minX, const s32 maxX) const;
;;;969    
;;;970        template<> template<> s32 Array<u8>::SetCast(const s32 * const values, const s32 numValues);
;;;971        template<> template<> s32 Array<s16>::SetCast(const s32 * const values, const s32 numValues);
;;;972      } // namespace Embedded
;;;973    } //namespace Anki
;;;974    
;;;975    #endif // _ANKICORETECHEMBEDDED_COMMON_ARRAY2D_H_
;;;17     #include "anki/common/robot/arraySlices.h"
;;;1      /**
;;;2      File: arraySlices.h
;;;3      Author: Peter Barnum
;;;4      Created: 2013
;;;5      
;;;6      Definitions of arraySlices_declarations.h
;;;7      
;;;8      Copyright Anki, Inc. 2013
;;;9      For internal use only. No part of this code may be used without a signed non-disclosure agreement with Anki, inc.
;;;10     **/
;;;11     
;;;12     #ifndef _ANKICORETECHEMBEDDED_COMMON_ARRAYSLICES_H_
;;;13     #define _ANKICORETECHEMBEDDED_COMMON_ARRAYSLICES_H_
;;;14     
;;;15     #include "anki/common/robot/arraySlices_declarations.h"
;;;1      /**
;;;16     #include "anki/common/robot/array2d.h"
;;;1      /**
;;;17     
;;;18     namespace Anki
;;;19     {
;;;20       namespace Embedded
;;;21       {
;;;22         template<typename Type> ConstArraySlice<Type>::ConstArraySlice()
;;;23           : ySlice(LinearSequence<s32>()), xSlice(LinearSequence<s32>()), array(Array<Type>()), constArrayData(NULL)
;;;24         {
;;;25         }
;;;26     
;;;27         template<typename Type> ConstArraySlice<Type>::ConstArraySlice(const Array<Type> &array)
;;;28           : ySlice(LinearSequence<s32>(0,array.get_size(0)-1)), xSlice(LinearSequence<s32>(0,array.get_size(1)-1)), array(array)
;;;29         {
;;;30           if(array.get_numElements() == 0) {
;;;31             this->constArrayData = NULL;
;;;32           } else {
;;;33             this->constArrayData = array.Pointer(0,0);
;;;34           }
;;;35         }
;;;36     
;;;37         template<typename Type> ConstArraySlice<Type>::ConstArraySlice(const Array<Type> &array, const LinearSequence<s32> &ySlice, const LinearSequence<s32> &xSlice)
;;;38           : ySlice(ySlice), xSlice(xSlice), array(array)
;;;39         {
;;;40           if(array.get_numElements() == 0) {
;;;41             this->constArrayData = NULL;
;;;42           } else {
;;;43             this->constArrayData = array.Pointer(0,0);
;;;44           }
;;;45         }
;;;46     
;;;47         template<typename Type> ConstArraySliceExpression<Type> ConstArraySlice<Type>::Transpose() const
;;;48         {
;;;49           ConstArraySliceExpression<Type> expression(*this, true);
;;;50     
;;;51           return expression;
;;;52         }
;;;53     
;;;54         template<typename Type> bool ConstArraySlice<Type>::IsValid() const
;;;55         {
;;;56           return this->array.IsValid();
;;;57         }
;;;58     
;;;59         template<typename Type> const LinearSequence<s32>& ConstArraySlice<Type>::get_ySlice() const
;;;60         {
;;;61           return ySlice;
;;;62         }
;;;63     
;;;64         template<typename Type> const LinearSequence<s32>& ConstArraySlice<Type>::get_xSlice() const
;;;65         {
;;;66           return xSlice;
;;;67         }
;;;68     
;;;69         template<typename Type> const Array<Type>& ConstArraySlice<Type>::get_array() const
;;;70         {
;;;71           return this->array;
;;;72         }
;;;73     
;;;74         template<typename Type> ArraySlice<Type>::ArraySlice()
;;;75           : ConstArraySlice<Type>(), arrayData(NULL)
;;;76         {
;;;77         }
;;;78     
;;;79         template<typename Type> ArraySlice<Type>::ArraySlice(Array<Type> array)
;;;80           : ConstArraySlice<Type>(array)
;;;81         {
;;;82           if(array.get_numElements() == 0) {
;;;83             this->arrayData = NULL;
;;;84           } else {
;;;85             this->arrayData = array.Pointer(0,0);
;;;86           }
;;;87         }
;;;88     
;;;89         template<typename Type> ArraySlice<Type>::ArraySlice(Array<Type> array, const LinearSequence<s32> &ySlice, const LinearSequence<s32> &xSlice)
;;;90           : ConstArraySlice<Type>(array, ySlice, xSlice)
;;;91         {
;;;92           if(array.get_numElements() == 0) {
;;;93             this->arrayData = NULL;
;;;94           } else {
;;;95             this->arrayData = array.Pointer(0,0);
;;;96           }
;;;97         }
;;;98     
;;;99         template<typename Type> s32 ArraySlice<Type>::Set(const ConstArraySliceExpression<Type> &input, bool automaticTranspose)
;;;100        {
;;;101          return this->SetCast<Type>(input, automaticTranspose);
;;;102        }
;;;103    
;;;104        template<typename Type> s32 ArraySlice<Type>::Set(const LinearSequence<Type> &input)
;;;105        {
;;;106          const Result result = input.Evaluate(*this);
;;;107          return (result==RESULT_OK) ? input.get_size() : 0;
;;;108        }
;;;109    
;;;110        template<typename Type> s32 ArraySlice<Type>::Set(const Type value)
;;;111        {
;;;112          Array<Type> &array = this->get_array();
;;;113    
;;;114          AnkiConditionalErrorAndReturnValue(array.IsValid(),
;;;115            0, "ArraySlice<Type>::Set", "Array<Type> is not valid");
;;;116    
;;;117          const ArraySliceLimits_in1_out0<s32> limits(this->get_ySlice(), this->get_xSlice());
;;;118    
;;;119          AnkiConditionalErrorAndReturnValue(limits.isValid,
;;;120            0, "ArraySlice<Type>::Set", "Limits is not valid");
;;;121    
;;;122          for(s32 iy=0; iy<limits.rawIn1Limits.ySize; iy++) {
;;;123            const s32 y = limits.rawIn1Limits.yStart + iy * limits.rawIn1Limits.yIncrement;
;;;124            Type * restrict pMat = array.Pointer(y, 0);
;;;125    
;;;126            for(s32 ix=0; ix<limits.rawIn1Limits.xSize; ix++) {
;;;127              const s32 x = limits.rawIn1Limits.xStart + ix * limits.rawIn1Limits.xIncrement;
;;;128              pMat[x] = value;
;;;129            }
;;;130          }
;;;131    
;;;132          return limits.rawIn1Limits.xSize*limits.rawIn1Limits.ySize;
;;;133        }
;;;134    
;;;135        template<typename Type> s32 ArraySlice<Type>::Set(const Type * const values, const s32 numValues)
;;;136        {
;;;137          Array<Type> &array = this->get_array();
;;;138    
;;;139          AnkiConditionalErrorAndReturnValue(array.IsValid(),
;;;140            0, "ArraySlice<Type>::Set", "Array<Type> is not valid");
;;;141    
;;;142          const ArraySliceLimits_in1_out0<s32> limits(this->get_ySlice(), this->get_xSlice());
;;;143    
;;;144          AnkiConditionalErrorAndReturnValue(limits.isValid,
;;;145            0, "ArraySlice<Type>::Set", "Limits is not valid");
;;;146    
;;;147          AnkiConditionalErrorAndReturnValue(limits.rawIn1Limits.ySize * limits.rawIn1Limits.xSize == numValues,
;;;148            0, "ArraySlice<Type>::Set", "Limits is not valid");
;;;149    
;;;150          s32 ci = 0;
;;;151          for(s32 iy=0; iy<limits.rawIn1Limits.ySize; iy++) {
;;;152            const s32 y = limits.rawIn1Limits.yStart + iy * limits.rawIn1Limits.yIncrement;
;;;153            Type * restrict pMat = array.Pointer(y, 0);
;;;154    
;;;155            for(s32 ix=0; ix<limits.rawIn1Limits.xSize; ix++) {
;;;156              const s32 x = limits.rawIn1Limits.xStart + ix * limits.rawIn1Limits.xIncrement;
;;;157              pMat[x] = values[ci];
;;;158              ci++;
;;;159            }
;;;160          }
;;;161    
;;;162          AnkiAssert(ci == limits.rawIn1Limits.ySize * limits.rawIn1Limits.xSize);
;;;163    
;;;164          return limits.rawIn1Limits.xSize*limits.rawIn1Limits.ySize;
;;;165        }
;;;166    
;;;167        template<typename Type> template<typename InType> s32 ArraySlice<Type>::SetCast(const ConstArraySliceExpression<Type> &input, bool automaticTranspose)
;;;168        {
;;;169          AnkiConditionalErrorAndReturnValue(AreValid(*this, input),
;;;170            0, "ArraySlice<Type>::Set", "Invalid objects");
;;;171    
;;;172          AnkiConditionalErrorAndReturnValue(this->get_array().get_buffer() != input.get_array().get_buffer(),
;;;173            0, "ArraySlice<Type>::Set", "Arrays must be in different memory locations");
;;;174    
;;;175          ArraySliceLimits_in1_out1<s32> limits(
;;;176            input.get_ySlice(), input.get_xSlice(), input.get_isTransposed(),
;;;177            this->get_ySlice(), this->get_xSlice());
;;;178    
;;;179          if(!limits.isValid) {
;;;180            if(automaticTranspose) {
;;;181              // If we're allowed to transpose, give it another shot
;;;182              limits = ArraySliceLimits_in1_out1<s32> (input.get_ySlice(), input.get_xSlice(), !input.get_isTransposed(), this->get_ySlice(), this->get_xSlice());
;;;183    
;;;184              if(!limits.isValid) {
;;;185                AnkiError("ArraySlice<Type>::Set", "Subscripted assignment dimension mismatch");
;;;186                return 0;
;;;187              }
;;;188            } else {
;;;189              AnkiError("ArraySlice<Type>::Set", "Subscripted assignment dimension mismatch");
;;;190              return 0;
;;;191            }
;;;192          }
;;;193    
;;;194          Array<Type> &out1Array = this->get_array();
;;;195          const Array<InType> &in1Array = input.get_array();
;;;196    
;;;197          if(limits.isSimpleIteration) {
;;;198            // If the input isn't transposed, we will do the maximally efficient loop iteration
;;;199    
;;;200            for(s32 y=0; y<limits.ySize; y++) {
;;;201              const InType * restrict pIn1 = in1Array.Pointer(limits.in1Y, 0);
;;;202              Type * restrict pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;203    
;;;204              limits.OuterIncrementTop();
;;;205    
;;;206              for(s32 x=0; x<limits.xSize; x++) {
;;;207                pOut1[limits.out1X] = static_cast<Type>( pIn1[limits.in1X] );
;;;208    
;;;209                limits.out1X += limits.out1_xInnerIncrement;
;;;210                limits.in1X += limits.in1_xInnerIncrement;
;;;211              }
;;;212    
;;;213              limits.OuterIncrementBottom();
;;;214            }
;;;215          } else {
;;;216            for(s32 y=0; y<limits.ySize; y++) {
;;;217              Type * restrict pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;218    
;;;219              limits.OuterIncrementTop();
;;;220    
;;;221              for(s32 x=0; x<limits.xSize; x++) {
;;;222                const InType pIn1 = *in1Array.Pointer(limits.in1Y, limits.in1X);
;;;223    
;;;224                pOut1[limits.out1X] = static_cast<Type>( pIn1 );
;;;225    
;;;226                limits.out1X += limits.out1_xInnerIncrement;
;;;227                limits.in1Y += limits.in1_yInnerIncrement;
;;;228              }
;;;229    
;;;230              limits.OuterIncrementBottom();
;;;231            }
;;;232          }
;;;233    
;;;234          return limits.ySize*limits.xSize;
;;;235        }
;;;236    
                          ENDP

000232  0000              DCW      0x0000
                  |L412.564|
                          DCD      _ZZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)::__PRETTY_FUNCTION__
                  |L412.568|
000238  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
00023c  6f726574
000240  6563685c
000244  636f6d6d
000248  6f6e5c69
00024c  6e636c75
000250  64655c61
000254  6e6b692f
000258  636f6d6d
00025c  6f6e2f72
000260  6f626f74
000264  2f617272
000268  617953  
00026b  6c696365          DCB      "lices.h",0
00026f  732e6800
000273  00                DCB      0
                  |L412.628|
000274  41727261          DCB      "Arrays must be in different memory locations",0
000278  7973206d
00027c  75737420
000280  62652069
000284  6e206469
000288  66666572
00028c  656e7420
000290  6d656d6f
000294  7279206c
000298  6f636174
00029c  696f6e73
0002a0  00      
0002a1  00                DCB      0
0002a2  00                DCB      0
0002a3  00                DCB      0
                  |L412.676|
0002a4  41727261          DCB      "ArraySlice<Type>::Set",0
0002a8  79536c69
0002ac  63653c54
0002b0  7970653e
0002b4  3a3a5365
0002b8  7400    
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L412.700|
0002bc  496e7661          DCB      "Invalid objects",0
0002c0  6c696420
0002c4  6f626a65
0002c8  63747300
                  |L412.716|
0002cc  53756273          DCB      "Subscripted assignment dimension mismatch",0
0002d0  63726970
0002d4  74656420
0002d8  61737369
0002dc  676e6d65
0002e0  6e742064
0002e4  696d656e
0002e8  73696f6e
0002ec  206d6973
0002f0  6d617463
0002f4  6800    
0002f6  00                DCB      0
0002f7  00                DCB      0

                          AREA ||area_number.413||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.413||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEb||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Array<float>>::IsValid() const
;;;91     
;;;92         template<typename Type> bool FixedLengthList<Type>::IsValid() const
000000  68c2              LDR      r2,[r0,#0xc]
;;;93         {
;;;94           if(this->get_size() > this->get_maximumSize()) {
000002  69c1              LDR      r1,[r0,#0x1c]
000004  428a              CMP      r2,r1
000006  dc07              BGT      |L419.24|
000008  6a82              LDR      r2,[r0,#0x28]         ;93
00000a  b12a              CBZ      r2,|L419.24|
00000c  6980              LDR      r0,[r0,#0x18]         ;93
00000e  2800              CMP      r0,#0                 ;93
000010  bfa2              ITTT     GE                    ;93
000012  2900              CMPGE    r1,#0                 ;93
000014  2001              MOVGE    r0,#1                 ;93
;;;95             return false;
;;;96           }
;;;97     
;;;98           return ArraySlice<Type>::IsValid();
;;;99         } // bool FixedLengthList<Type>::IsValid() const
000016  4770              BXGE     lr
                  |L419.24|
000018  2000              MOVS     r0,#0
00001a  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||area_number.420||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.420||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_5ArrayIfEEE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS1_IfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L426.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L426.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L426.392|
000044  a25e              ADR      r2,|L426.448|
000046  a162              ADR      r1,|L426.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L426.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  0080              LSLS     r0,r0,#2
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L426.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L426.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L426.392|
000084  a24e              ADR      r2,|L426.448|
000086  a158              ADR      r1,|L426.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L426.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L426.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L426.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L426.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L426.392|
0000cc  a252              ADR      r2,|L426.536|
0000ce  a157              ADR      r1,|L426.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L426.380|
                  |L426.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L426.392|
0000e4  a259              ADR      r2,|L426.588|
0000e6  a160              ADR      r1,|L426.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L426.380|
                  |L426.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L426.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L426.392|
000114  a25a              ADR      r2,|L426.640|
000116  a145              ADR      r1,|L426.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L426.380|
                  |L426.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060186          ADD      r1,r6,r6,LSL #2
00013e  0089              LSLS     r1,r1,#2
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L426.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L426.392|
000162  a251              ADR      r2,|L426.680|
000164  a140              ADR      r1,|L426.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L426.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L426.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L426.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L426.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L426.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L426.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L426.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L426.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L426.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L426.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L426.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L426.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L426.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L426.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.427||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.427||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS1_IhEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L433.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L433.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L433.392|
000044  a25e              ADR      r2,|L433.448|
000046  a162              ADR      r1,|L433.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L433.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  0080              LSLS     r0,r0,#2
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L433.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L433.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L433.392|
000084  a24e              ADR      r2,|L433.448|
000086  a158              ADR      r1,|L433.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L433.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L433.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L433.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L433.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L433.392|
0000cc  a252              ADR      r2,|L433.536|
0000ce  a157              ADR      r1,|L433.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L433.380|
                  |L433.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L433.392|
0000e4  a259              ADR      r2,|L433.588|
0000e6  a160              ADR      r1,|L433.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L433.380|
                  |L433.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L433.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L433.392|
000114  a25a              ADR      r2,|L433.640|
000116  a145              ADR      r1,|L433.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L433.380|
                  |L433.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060186          ADD      r1,r6,r6,LSL #2
00013e  0089              LSLS     r1,r1,#2
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L433.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L433.392|
000162  a251              ADR      r2,|L433.680|
000164  a140              ADR      r1,|L433.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L433.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L433.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L433.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L433.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L433.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L433.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L433.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L433.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L433.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L433.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L433.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L433.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L433.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L433.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.434||, COMGROUP=_ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.434||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L440.86|
00003a  217d              MOVS     r1,#0x7d
00003c  4851              LDR      r0,|L440.388|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a351              ADR      r3,|L440.392|
000044  a25e              ADR      r2,|L440.448|
000046  a162              ADR      r1,|L440.464|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L440.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  eb000040          ADD      r0,r0,r0,LSL #1
000066  00c0              LSLS     r0,r0,#3
000068  300f              ADDS     r0,r0,#0xf
00006a  f020050f          BIC      r5,r0,#0xf
00006e  a804              ADD      r0,sp,#0x10
000070  e9cd0902          STRD     r0,r9,[sp,#8]
000074  2d00              CMP      r5,#0
000076  dc0a              BGT      |L440.142|
000078  f240310b          MOV      r1,#0x30b
00007c  4859              LDR      r0,|L440.484|
00007e  e9cd0100          STRD     r0,r1,[sp,#0]
000082  a341              ADR      r3,|L440.392|
000084  a24e              ADR      r2,|L440.448|
000086  a158              ADR      r1,|L440.488|
000088  2005              MOVS     r0,#5
00008a  f7fffffe          BL       _Anki_Log
                  |L440.142|
00008e  4638              MOV      r0,r7
000090  2f01              CMP      r7,#1
000092  bfd8              IT       LE
000094  2001              MOVLE    r0,#1
000096  60a5              STR      r5,[r4,#8]
000098  4345              MULS     r5,r0,r5
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
0000a0  4602              MOV      r2,r0
0000a2  4629              MOV      r1,r5
0000a4  4640              MOV      r0,r8
0000a6  9b02              LDR      r3,[sp,#8]
0000a8  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000ac  f8cd900c          STR      r9,[sp,#0xc]
0000b0  f8dd8010          LDR      r8,[sp,#0x10]
0000b4  f8df915c          LDR      r9,|L440.532|
0000b8  0005              MOVS     r5,r0
0000ba  d00e              BEQ      |L440.218|
0000bc  f1b80f10          CMP      r8,#0x10
0000c0  d21e              BCS      |L440.256|
0000c2  f2403023          MOV      r0,#0x323
0000c6  e9cd9000          STRD     r9,r0,[sp,#0]
0000ca  a32f              ADR      r3,|L440.392|
0000cc  a252              ADR      r2,|L440.536|
0000ce  a157              ADR      r1,|L440.556|
0000d0  2005              MOVS     r0,#5
0000d2  f7fffffe          BL       _Anki_Log
0000d6  f000b851          B.W      |L440.380|
                  |L440.218|
0000da  f240301e          MOV      r0,#0x31e
0000de  e9cd9000          STRD     r9,r0,[sp,#0]
0000e2  a329              ADR      r3,|L440.392|
0000e4  a259              ADR      r2,|L440.588|
0000e6  a160              ADR      r1,|L440.616|
0000e8  2005              MOVS     r0,#5
0000ea  f7fffffe          BL       _Anki_Log
0000ee  f8c4b000          STR      r11,[r4,#0]
0000f2  f8c4b004          STR      r11,[r4,#4]
0000f6  f8c4b008          STR      r11,[r4,#8]
0000fa  f8c4a010          STR      r10,[r4,#0x10]
0000fe  e03d              B        |L440.380|
                  |L440.256|
000100  a803              ADD      r0,sp,#0xc
000102  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000106  2800              CMP      r0,#0
000108  d00a              BEQ      |L440.288|
00010a  f2403026          MOV      r0,#0x326
00010e  e9cd9000          STRD     r9,r0,[sp,#0]
000112  a31d              ADR      r3,|L440.392|
000114  a25a              ADR      r2,|L440.640|
000116  a145              ADR      r1,|L440.556|
000118  2005              MOVS     r0,#5
00011a  f7fffffe          BL       _Anki_Log
00011e  e02d              B        |L440.380|
                  |L440.288|
000120  9903              LDR      r1,[sp,#0xc]
000122  e9c41503          STRD     r1,r5,[r4,#0xc]
000126  f105000f          ADD      r0,r5,#0xf
00012a  f020000f          BIC      r0,r0,#0xf
00012e  e9c47600          STRD     r7,r6,[r4,#0]
000132  1b40              SUBS     r0,r0,r5
000134  2e01              CMP      r6,#1
000136  bfd8              IT       LE
000138  2601              MOVLE    r6,#1
00013a  eb060146          ADD      r1,r6,r6,LSL #1
00013e  00c9              LSLS     r1,r1,#3
000140  310f              ADDS     r1,r1,#0xf
000142  f021010f          BIC      r1,r1,#0xf
000146  fb010107          MLA      r1,r1,r7,r0
00014a  4541              CMP      r1,r8
00014c  bfdc              ITT      LE
00014e  1829              ADDLE    r1,r5,r0
000150  6121              STRLE    r1,[r4,#0x10]
000152  dd13              BLE      |L440.380|
000154  f2403035          MOV      r0,#0x335
000158  f8cd9000          STR      r9,[sp,#0]
00015c  e9cd0101          STRD     r0,r1,[sp,#4]
000160  a309              ADR      r3,|L440.392|
000162  a251              ADR      r2,|L440.680|
000164  a140              ADR      r1,|L440.616|
000166  2005              MOVS     r0,#5
000168  f7fffffe          BL       _Anki_Log
00016c  f8c4b000          STR      r11,[r4,#0]
000170  f8c4b004          STR      r11,[r4,#4]
000174  f8c4b008          STR      r11,[r4,#8]
000178  f8c4a010          STR      r10,[r4,#0x10]
                  |L440.380|
00017c  b005              ADD      sp,sp,#0x14
00017e  4620              MOV      r0,r4
000180  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L440.388|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L440.392|
000188  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
00018c  6f726574
000190  6563685c
000194  636f6d6d
000198  6f6e5c69
00019c  6e636c75
0001a0  64655c61
0001a4  6e6b692f
0001a8  636f6d6d
0001ac  6f6e2f72
0001b0  6f626f74
0001b4  2f617272
0001b8  617932  
0001bb  642e6800          DCB      "d.h",0
0001bf  00                DCB      0
                  |L440.448|
0001c0  496e7661          DCB      "Invalid size",0
0001c4  6c696420
0001c8  73697a65
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L440.464|
0001d0  41727261          DCB      "Array<Type>::Array",0
0001d4  793c5479
0001d8  70653e3a
0001dc  3a417272
0001e0  617900  
0001e3  00                DCB      0
                  |L440.484|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L440.488|
0001e8  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001ec  793c5479
0001f0  70653e3a
0001f4  3a416c6c
0001f8  6f636174
0001fc  65427566
000200  66657246
000204  726f6d4d
000208  656d6f72
00020c  79537461
000210  636b00  
000213  00                DCB      0
                  |L440.532|
                          DCD      _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L440.536|
000218  4e656761          DCB      "Negative dimension",0
00021c  74697665
000220  2064696d
000224  656e7369
000228  6f6e00  
00022b  00                DCB      0
                  |L440.556|
00022c  41727261          DCB      "Array<Type>::InitializeBuffer",0
000230  793c5479
000234  70653e3a
000238  3a496e69
00023c  7469616c
000240  697a6542
000244  75666665
000248  7200    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L440.588|
00024c  696e7075          DCB      "input data buffer is NULL",0
000250  74206461
000254  74612062
000258  75666665
00025c  72206973
000260  204e554c
000264  4c00    
000266  00                DCB      0
000267  00                DCB      0
                  |L440.616|
000268  416e6b69          DCB      "Anki.Array2d.initialize",0
00026c  2e417272
000270  61793264
000274  2e696e69
000278  7469616c
00027c  697a6500
                  |L440.640|
000280  46696c6c          DCB      "Fill patterns not supported for Array",0
000284  20706174
000288  7465726e
00028c  73206e6f
000290  74207375
000294  70706f72
000298  74656420
00029c  666f7220
0002a0  41727261
0002a4  7900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L440.680|
0002a8  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002ac  74206461
0002b0  74612062
0002b4  75666665
0002b8  72206973
0002bc  206e6f74
0002c0  206c6172
0002c4  67652065
0002c8  6e6f7567
0002cc  682e2025
0002d0  64206279
0002d4  74657320
0002d8  69732072
0002dc  657175  
0002df  69726564          DCB      "ired.",0
0002e3  2e00    
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0

                          AREA ||area_number.441||, COMGROUP=_ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.441||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii PROC ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
;;;105    
;;;106        template<typename Type> s32 LinearSequence<Type>::computeSize(const Type start, const Type increment, const Type end)
000000  4290              CMP      r0,r2
;;;107        {
;;;108          if(start == end) {
;;;109            return 1;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;110          } else {
;;;111            if(ABS(increment) <= Flags::numeric_limits<Type>::epsilon()) {
;;;112              return 0;
;;;113            }
;;;114          }
;;;115    
;;;116          // 10:-1:12
;;;117          if(increment < 0 && start < end) {
;;;118            return 0;
;;;119          }
;;;120    
;;;121          // 12:1:10
;;;122          if(increment > 0 && start > end) {
;;;123            return 0;
;;;124          }
;;;125    
;;;126          const Type minLimit = MIN(start, end);
;;;127          const Type maxLimit = MAX(start, end);
;;;128          const Type incrementMagnitude = ABS(increment);
;;;129    
;;;130          const Type validRange = maxLimit - minLimit;
;;;131          const s32 size = (validRange+incrementMagnitude) / incrementMagnitude;
;;;132    
;;;133          AnkiConditionalErrorAndReturnValue(size >= 0,
;;;134            0, "LinearSequence<Type>::computeSize", "size estimation failed");
;;;135    
;;;136          return size;
;;;137        }
000006  4770              BXEQ     lr
000008  b510              PUSH     {r4,lr}               ;107
00000a  2400              MOVS     r4,#0                 ;107
00000c  424b              RSBS     r3,r1,#0              ;111
00000e  b082              SUB      sp,sp,#8              ;107
000010  2900              CMP      r1,#0                 ;111
000012  bfac              ITE      GE                    ;111
000014  468c              MOVGE    r12,r1                ;111
000016  469c              MOVLT    r12,r3                ;111
000018  4564              CMP      r4,r12                ;111
00001a  da03              BGE      |L447.36|
00001c  2900              CMP      r1,#0                 ;117
00001e  da04              BGE      |L447.42|
000020  4290              CMP      r0,r2                 ;117
000022  da05              BGE      |L447.48|
                  |L447.36|
000024  b002              ADD      sp,sp,#8
000026  2000              MOVS     r0,#0                 ;123
000028  bd10              POP      {r4,pc}
                  |L447.42|
00002a  bf18              IT       NE                    ;122
00002c  4290              CMPNE    r0,r2                 ;122
00002e  dcf9              BGT      |L447.36|
                  |L447.48|
000030  4290              CMP      r0,r2                 ;126
000032  bfb4              ITE      LT                    ;126
000034  4684              MOVLT    r12,r0                ;126
000036  4694              MOVGE    r12,r2                ;126
000038  bfd8              IT       LE                    ;127
00003a  4610              MOVLE    r0,r2                 ;127
00003c  2900              CMP      r1,#0                 ;128
00003e  bfb8              IT       LT                    ;128
000040  4619              MOVLT    r1,r3                 ;128
000042  eba0000c          SUB      r0,r0,r12             ;130
000046  4408              ADD      r0,r0,r1              ;131
000048  fb90f0f1          SDIV     r0,r0,r1              ;131
00004c  2800              CMP      r0,#0                 ;133
00004e  bfa4              ITT      GE
000050  b002              ADDGE    sp,sp,#8
000052  bd10              POPGE    {r4,pc}
000054  2185              MOVS     r1,#0x85              ;133
000056  4807              LDR      r0,|L447.116|
000058  4b07              LDR      r3,|L447.120|
00005a  e9cd0100          STRD     r0,r1,[sp,#0]         ;133
00005e  f1a30218          SUB      r2,r3,#0x18           ;133
000062  f1a20124          SUB      r1,r2,#0x24           ;133
000066  2005              MOVS     r0,#5                 ;133
000068  f7fffffe          BL       _Anki_Log
00006c  b002              ADD      sp,sp,#8
00006e  2000              MOVS     r0,#0                 ;133
000070  bd10              POP      {r4,pc}
;;;138    
                          ENDP

000072  0000              DCW      0x0000
                  |L447.116|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L447.120|
                          DCD      ||.constdata||+0x300

                          AREA ||area_number.448||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.448||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  79536c69          DCB      0x79,0x53,0x6c,0x69
000018  63654c69          DCB      0x63,0x65,0x4c,0x69
00001c  6d697473          DCB      0x6d,0x69,0x74,0x73
000020  5f696e31          DCB      0x5f,0x69,0x6e,0x31
000024  5f6f7574          DCB      0x5f,0x6f,0x75,0x74
000028  313c5479          DCB      0x31,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a417272          DCB      0x3a,0x41,0x72,0x72
000034  6179536c          DCB      0x61,0x79,0x53,0x6c
000038  6963654c          DCB      0x69,0x63,0x65,0x4c
00003c  696d6974          DCB      0x69,0x6d,0x69,0x74
000040  735f696e          DCB      0x73,0x5f,0x69,0x6e
000044  315f6f75          DCB      0x31,0x5f,0x6f,0x75
000048  74312863          DCB      0x74,0x31,0x28,0x63
00004c  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000050  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000054  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000058  6d626564          DCB      0x6d,0x62,0x65,0x64
00005c  6465643a          DCB      0x64,0x65,0x64,0x3a
000060  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
000064  65617253          DCB      0x65,0x61,0x72,0x53
000068  65717565          DCB      0x65,0x71,0x75,0x65
00006c  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000070  54797065          DCB      0x54,0x79,0x70,0x65
000074  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000078  20636f6e          DCB      0x20,0x63,0x6f,0x6e
00007c  73742041          DCB      0x73,0x74,0x20,0x41
000080  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000084  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000088  65646465          DCB      0x65,0x64,0x64,0x65
00008c  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
000090  696e6561          DCB      0x69,0x6e,0x65,0x61
000094  72536571          DCB      0x72,0x53,0x65,0x71
000098  75656e63          DCB      0x75,0x65,0x6e,0x63
00009c  653c5479          DCB      0x65,0x3c,0x54,0x79
0000a0  70653e20          DCB      0x70,0x65,0x3e,0x20
0000a4  262c2062          DCB      0x26,0x2c,0x20,0x62
0000a8  6f6f6c2c          DCB      0x6f,0x6f,0x6c,0x2c
0000ac  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0000b0  73742041          DCB      0x73,0x74,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
0000c4  696e6561          DCB      0x69,0x6e,0x65,0x61
0000c8  72536571          DCB      0x72,0x53,0x65,0x71
0000cc  75656e63          DCB      0x75,0x65,0x6e,0x63
0000d0  653c5479          DCB      0x65,0x3c,0x54,0x79
0000d4  70653e20          DCB      0x70,0x65,0x3e,0x20
0000d8  262c2063          DCB      0x26,0x2c,0x20,0x63
0000dc  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
0000e0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000e4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000e8  6d626564          DCB      0x6d,0x62,0x65,0x64
0000ec  6465643a          DCB      0x64,0x65,0x64,0x3a
0000f0  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
0000f4  65617253          DCB      0x65,0x61,0x72,0x53
0000f8  65717565          DCB      0x65,0x71,0x75,0x65
0000fc  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000100  54797065          DCB      0x54,0x79,0x70,0x65
000104  3e202629          DCB      0x3e,0x20,0x26,0x29
000108  205b7769          DCB      0x20,0x5b,0x77,0x69
00010c  74682054          DCB      0x74,0x68,0x20,0x54
000110  79706520          DCB      0x79,0x70,0x65,0x20
000114  3d207369          DCB      0x3d,0x20,0x73,0x69
000118  676e6564          DCB      0x67,0x6e,0x65,0x64
00011c  20696e74          DCB      0x20,0x69,0x6e,0x74
000120  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded25ArraySliceLimits_in2_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_bS6_S6_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySliceLimits_in2_out1<int>::ArraySliceLimits_in2_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  79536c69          DCB      0x79,0x53,0x6c,0x69
000018  63654c69          DCB      0x63,0x65,0x4c,0x69
00001c  6d697473          DCB      0x6d,0x69,0x74,0x73
000020  5f696e32          DCB      0x5f,0x69,0x6e,0x32
000024  5f6f7574          DCB      0x5f,0x6f,0x75,0x74
000028  313c5479          DCB      0x31,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a417272          DCB      0x3a,0x41,0x72,0x72
000034  6179536c          DCB      0x61,0x79,0x53,0x6c
000038  6963654c          DCB      0x69,0x63,0x65,0x4c
00003c  696d6974          DCB      0x69,0x6d,0x69,0x74
000040  735f696e          DCB      0x73,0x5f,0x69,0x6e
000044  325f6f75          DCB      0x32,0x5f,0x6f,0x75
000048  74312863          DCB      0x74,0x31,0x28,0x63
00004c  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000050  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000054  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000058  6d626564          DCB      0x6d,0x62,0x65,0x64
00005c  6465643a          DCB      0x64,0x65,0x64,0x3a
000060  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
000064  65617253          DCB      0x65,0x61,0x72,0x53
000068  65717565          DCB      0x65,0x71,0x75,0x65
00006c  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000070  54797065          DCB      0x54,0x79,0x70,0x65
000074  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000078  20636f6e          DCB      0x20,0x63,0x6f,0x6e
00007c  73742041          DCB      0x73,0x74,0x20,0x41
000080  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000084  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000088  65646465          DCB      0x65,0x64,0x64,0x65
00008c  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
000090  696e6561          DCB      0x69,0x6e,0x65,0x61
000094  72536571          DCB      0x72,0x53,0x65,0x71
000098  75656e63          DCB      0x75,0x65,0x6e,0x63
00009c  653c5479          DCB      0x65,0x3c,0x54,0x79
0000a0  70653e20          DCB      0x70,0x65,0x3e,0x20
0000a4  262c2062          DCB      0x26,0x2c,0x20,0x62
0000a8  6f6f6c2c          DCB      0x6f,0x6f,0x6c,0x2c
0000ac  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0000b0  73742041          DCB      0x73,0x74,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
0000c4  696e6561          DCB      0x69,0x6e,0x65,0x61
0000c8  72536571          DCB      0x72,0x53,0x65,0x71
0000cc  75656e63          DCB      0x75,0x65,0x6e,0x63
0000d0  653c5479          DCB      0x65,0x3c,0x54,0x79
0000d4  70653e20          DCB      0x70,0x65,0x3e,0x20
0000d8  262c2063          DCB      0x26,0x2c,0x20,0x63
0000dc  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
0000e0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000e4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000e8  6d626564          DCB      0x6d,0x62,0x65,0x64
0000ec  6465643a          DCB      0x64,0x65,0x64,0x3a
0000f0  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
0000f4  65617253          DCB      0x65,0x61,0x72,0x53
0000f8  65717565          DCB      0x65,0x71,0x75,0x65
0000fc  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000100  54797065          DCB      0x54,0x79,0x70,0x65
000104  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000108  20626f6f          DCB      0x20,0x62,0x6f,0x6f
00010c  6c2c2063          DCB      0x6c,0x2c,0x20,0x63
000110  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000114  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000118  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00011c  6d626564          DCB      0x6d,0x62,0x65,0x64
000120  6465643a          DCB      0x64,0x65,0x64,0x3a
000124  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
000128  65617253          DCB      0x65,0x61,0x72,0x53
00012c  65717565          DCB      0x65,0x71,0x75,0x65
000130  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000134  54797065          DCB      0x54,0x79,0x70,0x65
000138  3e20262c          DCB      0x3e,0x20,0x26,0x2c
00013c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000140  73742041          DCB      0x73,0x74,0x20,0x41
000144  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000148  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00014c  65646465          DCB      0x65,0x64,0x64,0x65
000150  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
000154  696e6561          DCB      0x69,0x6e,0x65,0x61
000158  72536571          DCB      0x72,0x53,0x65,0x71
00015c  75656e63          DCB      0x75,0x65,0x6e,0x63
000160  653c5479          DCB      0x65,0x3c,0x54,0x79
000164  70653e20          DCB      0x70,0x65,0x3e,0x20
000168  2629205b          DCB      0x26,0x29,0x20,0x5b
00016c  77697468          DCB      0x77,0x69,0x74,0x68
000170  20547970          DCB      0x20,0x54,0x79,0x70
000174  65203d20          DCB      0x65,0x20,0x3d,0x20
000178  7369676e          DCB      0x73,0x69,0x67,0x6e
00017c  65642069          DCB      0x65,0x64,0x20,0x69
000180  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  436f6d70          DCB      0x43,0x6f,0x6d,0x70
00002c  75746552          DCB      0x75,0x74,0x65,0x52
000030  65717569          DCB      0x65,0x71,0x75,0x69
000034  72656453          DCB      0x72,0x65,0x64,0x53
000038  74726964          DCB      0x74,0x72,0x69,0x64
00003c  65287369          DCB      0x65,0x28,0x73,0x69
000040  676e6564          DCB      0x67,0x6e,0x65,0x64
000044  20696e74          DCB      0x20,0x69,0x6e,0x74
000048  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00004c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000050  456d6265          DCB      0x45,0x6d,0x62,0x65
000054  64646564          DCB      0x64,0x64,0x65,0x64
000058  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00005c  6167733a          DCB      0x61,0x67,0x73,0x3a
000060  3a427566          DCB      0x3a,0x42,0x75,0x66
000064  66657229          DCB      0x66,0x65,0x72,0x29
000068  205b7769          DCB      0x20,0x5b,0x77,0x69
00006c  74682054          DCB      0x74,0x68,0x20,0x54
000070  79706520          DCB      0x79,0x70,0x65,0x20
000074  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000078  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00007c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE6ResizeEiiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE6ResizeEiiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE6ResizeEiiRNS0_11MemoryStackEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Resize(int, int, Anki::Embedded::MemoryStack&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e742c          DCB      0x69,0x6e,0x74,0x2c
00003c  20736967          DCB      0x20,0x73,0x69,0x67
000040  6e656420          DCB      0x6e,0x65,0x64,0x20
000044  696e742c          DCB      0x69,0x6e,0x74,0x2c
000048  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00004c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000050  6d626564          DCB      0x6d,0x62,0x65,0x64
000054  6465643a          DCB      0x64,0x65,0x64,0x3a
000058  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00005c  6f727953          DCB      0x6f,0x72,0x79,0x53
000060  7461636b          DCB      0x74,0x61,0x63,0x6b
000064  20262920          DCB      0x20,0x26,0x29,0x20
000068  5b776974          DCB      0x5b,0x77,0x69,0x74
00006c  68205479          DCB      0x68,0x20,0x54,0x79
000070  7065203d          DCB      0x70,0x65,0x20,0x3d
000074  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000078  61745d00          DCB      0x61,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetZeroEvE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetZero()::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  5365745a          DCB      0x53,0x65,0x74,0x5a
00002c  65726f28          DCB      0x65,0x72,0x6f,0x28
000030  29205b77          DCB      0x29,0x20,0x5b,0x77
000034  69746820          DCB      0x69,0x74,0x68,0x20
000038  54797065          DCB      0x54,0x79,0x70,0x65
00003c  203d2066          DCB      0x20,0x3d,0x20,0x66
000040  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000044  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000054  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  53657443          DCB      0x53,0x65,0x74,0x43
00002c  61737428          DCB      0x61,0x73,0x74,0x28
000030  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000034  7420416e          DCB      0x74,0x20,0x41,0x6e
000038  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00003c  456d6265          DCB      0x45,0x6d,0x62,0x65
000040  64646564          DCB      0x64,0x64,0x65,0x64
000044  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000048  7261793c          DCB      0x72,0x61,0x79,0x3c
00004c  496e5479          DCB      0x49,0x6e,0x54,0x79
000050  70653e20          DCB      0x70,0x65,0x3e,0x20
000054  2629205b          DCB      0x26,0x29,0x20,0x5b
000058  77697468          DCB      0x77,0x69,0x74,0x68
00005c  20496e54          DCB      0x20,0x49,0x6e,0x54
000060  79706520          DCB      0x79,0x70,0x65,0x20
000064  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000068  6f61742c          DCB      0x6f,0x61,0x74,0x2c
00006c  20547970          DCB      0x20,0x54,0x79,0x70
000070  65203d20          DCB      0x65,0x20,0x3d,0x20
000074  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000078  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642063          DCB      0x65,0x64,0x20,0x63
000090  6861725d          DCB      0x68,0x61,0x72,0x5d
000094  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  20636861          DCB      0x20,0x63,0x68,0x61
0000c4  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  63686172          DCB      0x63,0x68,0x61,0x72
0000a0  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ENS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ENS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded8MeshgridIfE10EvaluateX2ENS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Meshgrid<float>::EvaluateX2(Anki::Embedded::ArraySlice<float>) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6573          DCB      0x3a,0x4d,0x65,0x73
000020  68677269          DCB      0x68,0x67,0x72,0x69
000024  643c5479          DCB      0x64,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a457661          DCB      0x3a,0x45,0x76,0x61
000030  6c756174          DCB      0x6c,0x75,0x61,0x74
000034  65583228          DCB      0x65,0x58,0x32,0x28
000038  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00003c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000040  62656464          DCB      0x62,0x65,0x64,0x64
000044  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000048  41727261          DCB      0x41,0x72,0x72,0x61
00004c  79536c69          DCB      0x79,0x53,0x6c,0x69
000050  63653c54          DCB      0x63,0x65,0x3c,0x54
000054  7970653e          DCB      0x79,0x70,0x65,0x3e
000058  2920636f          DCB      0x29,0x20,0x63,0x6f
00005c  6e737420          DCB      0x6e,0x73,0x74,0x20
000060  5b776974          DCB      0x5b,0x77,0x69,0x74
000064  68205479          DCB      0x68,0x20,0x54,0x79
000068  7065203d          DCB      0x70,0x65,0x20,0x3d
00006c  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000070  61745d00          DCB      0x61,0x74,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ENS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ENS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded8MeshgridIfE10EvaluateY2ENS0_10ArraySliceIfEEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Meshgrid<float>::EvaluateY2(Anki::Embedded::ArraySlice<float>) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6573          DCB      0x3a,0x4d,0x65,0x73
000020  68677269          DCB      0x68,0x67,0x72,0x69
000024  643c5479          DCB      0x64,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a457661          DCB      0x3a,0x45,0x76,0x61
000030  6c756174          DCB      0x6c,0x75,0x61,0x74
000034  65593228          DCB      0x65,0x59,0x32,0x28
000038  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00003c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000040  62656464          DCB      0x62,0x65,0x64,0x64
000044  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000048  41727261          DCB      0x41,0x72,0x72,0x61
00004c  79536c69          DCB      0x79,0x53,0x6c,0x69
000050  63653c54          DCB      0x63,0x65,0x3c,0x54
000054  7970653e          DCB      0x79,0x70,0x65,0x3e
000058  2920636f          DCB      0x29,0x20,0x63,0x6f
00005c  6e737420          DCB      0x6e,0x73,0x74,0x20
000060  5b776974          DCB      0x5b,0x77,0x69,0x74
000064  68205479          DCB      0x68,0x20,0x54,0x79
000068  7065203d          DCB      0x70,0x65,0x20,0x3d
00006c  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000070  61745d00          DCB      0x61,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a5175          DCB      0x3a,0x3a,0x51,0x75
000098  61647269          DCB      0x61,0x64,0x72,0x69
00009c  6c617465          DCB      0x6c,0x61,0x74,0x65
0000a0  72616c3c          DCB      0x72,0x61,0x6c,0x3c
0000a4  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a8  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  51756164          DCB      0x51,0x75,0x61,0x64
0000cc  72696c61          DCB      0x72,0x69,0x6c,0x61
0000d0  74657261          DCB      0x74,0x65,0x72,0x61
0000d4  6c3c666c          DCB      0x6c,0x3c,0x66,0x6c
0000d8  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0000dc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_13QuadrilateralIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Quadrilateral<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a51          DCB      0x64,0x3a,0x3a,0x51
0000a4  75616472          DCB      0x75,0x61,0x64,0x72
0000a8  696c6174          DCB      0x69,0x6c,0x61,0x74
0000ac  6572616c          DCB      0x65,0x72,0x61,0x6c
0000b0  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000b4  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000b8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfEC1ERKNS0_5ArrayIfEERKfE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfEC1ERKNS0_5ArrayIfEERKfE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfEC1ERKNS0_5ArrayIfEERKfE19__PRETTY_FUNCTION__ ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::Find(const Anki::Embedded::Array<float>&, const float&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  46696e64          DCB      0x46,0x69,0x6e,0x64
000014  3c547970          DCB      0x3c,0x54,0x79,0x70
000018  65312c20          DCB      0x65,0x31,0x2c,0x20
00001c  4f706572          DCB      0x4f,0x70,0x65,0x72
000020  61746f72          DCB      0x61,0x74,0x6f,0x72
000024  2c205479          DCB      0x2c,0x20,0x54,0x79
000028  7065323e          DCB      0x70,0x65,0x32,0x3e
00002c  3a3a4669          DCB      0x3a,0x3a,0x46,0x69
000030  6e642863          DCB      0x6e,0x64,0x28,0x63
000034  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000038  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00003c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000040  6d626564          DCB      0x6d,0x62,0x65,0x64
000044  6465643a          DCB      0x64,0x65,0x64,0x3a
000048  3a417272          DCB      0x3a,0x41,0x72,0x72
00004c  61793c54          DCB      0x61,0x79,0x3c,0x54
000050  7970653e          DCB      0x79,0x70,0x65,0x3e
000054  20262c20          DCB      0x20,0x26,0x2c,0x20
000058  636f6e73          DCB      0x63,0x6f,0x6e,0x73
00005c  74205479          DCB      0x74,0x20,0x54,0x79
000060  70653220          DCB      0x70,0x65,0x32,0x20
000064  2629205b          DCB      0x26,0x29,0x20,0x5b
000068  77697468          DCB      0x77,0x69,0x74,0x68
00006c  20547970          DCB      0x20,0x54,0x79,0x70
000070  6531203d          DCB      0x65,0x31,0x20,0x3d
000074  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000078  61742c20          DCB      0x61,0x74,0x2c,0x20
00007c  4f706572          DCB      0x4f,0x70,0x65,0x72
000080  61746f72          DCB      0x61,0x74,0x6f,0x72
000084  203d2041          DCB      0x20,0x3d,0x20,0x41
000088  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00008c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000090  65646465          DCB      0x65,0x64,0x64,0x65
000094  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000098  6f6d7061          DCB      0x6f,0x6d,0x70,0x61
00009c  7269736f          DCB      0x72,0x69,0x73,0x6f
0000a0  6e3a3a47          DCB      0x6e,0x3a,0x3a,0x47
0000a4  72656174          DCB      0x72,0x65,0x61,0x74
0000a8  65725468          DCB      0x65,0x72,0x54,0x68
0000ac  616e4f72          DCB      0x61,0x6e,0x4f,0x72
0000b0  45717561          DCB      0x45,0x71,0x75,0x61
0000b4  6c3c666c          DCB      0x6c,0x3c,0x66,0x6c
0000b8  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000bc  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0000c0  61743e2c          DCB      0x61,0x74,0x3e,0x2c
0000c4  20547970          DCB      0x20,0x54,0x79,0x70
0000c8  6532203d          DCB      0x65,0x32,0x20,0x3d
0000cc  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0000d0  61745d00          DCB      0x61,0x74,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_iE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_iE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded4FindIfNS0_10Comparison18GreaterThanOrEqualIffEEfE8SetArrayIfEENS_6ResultERNS0_5ArrayIT_EERKSA_iE19__PRETTY_FUNCTION__ ; Anki::Embedded::Find<float, Anki::Embedded::Comparison::GreaterThanOrEqual<float, float>, float>::SetArray<float>(Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, int) const::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a46696e          DCB      0x3a,0x46,0x69,0x6e
000020  643c5479          DCB      0x64,0x3c,0x54,0x79
000024  7065312c          DCB      0x70,0x65,0x31,0x2c
000028  204f7065          DCB      0x20,0x4f,0x70,0x65
00002c  7261746f          DCB      0x72,0x61,0x74,0x6f
000030  722c2054          DCB      0x72,0x2c,0x20,0x54
000034  79706532          DCB      0x79,0x70,0x65,0x32
000038  3e3a3a53          DCB      0x3e,0x3a,0x3a,0x53
00003c  65744172          DCB      0x65,0x74,0x41,0x72
000040  72617928          DCB      0x72,0x61,0x79,0x28
000044  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000048  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00004c  62656464          DCB      0x62,0x65,0x64,0x64
000050  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000054  41727261          DCB      0x41,0x72,0x72,0x61
000058  793c496e          DCB      0x79,0x3c,0x49,0x6e
00005c  54797065          DCB      0x54,0x79,0x70,0x65
000060  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000064  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000068  73742041          DCB      0x73,0x74,0x20,0x41
00006c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000070  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000074  65646465          DCB      0x65,0x64,0x64,0x65
000078  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00007c  72726179          DCB      0x72,0x72,0x61,0x79
000080  3c496e54          DCB      0x3c,0x49,0x6e,0x54
000084  7970653e          DCB      0x79,0x70,0x65,0x3e
000088  20262c20          DCB      0x20,0x26,0x2c,0x20
00008c  7369676e          DCB      0x73,0x69,0x67,0x6e
000090  65642069          DCB      0x65,0x64,0x20,0x69
000094  6e742920          DCB      0x6e,0x74,0x29,0x20
000098  636f6e73          DCB      0x63,0x6f,0x6e,0x73
00009c  74205b77          DCB      0x74,0x20,0x5b,0x77
0000a0  69746820          DCB      0x69,0x74,0x68,0x20
0000a4  41727261          DCB      0x41,0x72,0x72,0x61
0000a8  79547970          DCB      0x79,0x54,0x79,0x70
0000ac  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b0  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000b4  742c2054          DCB      0x74,0x2c,0x20,0x54
0000b8  79706531          DCB      0x79,0x70,0x65,0x31
0000bc  203d2066          DCB      0x20,0x3d,0x20,0x66
0000c0  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000c4  2c204f70          DCB      0x2c,0x20,0x4f,0x70
0000c8  65726174          DCB      0x65,0x72,0x61,0x74
0000cc  6f72203d          DCB      0x6f,0x72,0x20,0x3d
0000d0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000d4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000d8  6d626564          DCB      0x6d,0x62,0x65,0x64
0000dc  6465643a          DCB      0x64,0x65,0x64,0x3a
0000e0  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
0000e4  70617269          DCB      0x70,0x61,0x72,0x69
0000e8  736f6e3a          DCB      0x73,0x6f,0x6e,0x3a
0000ec  3a477265          DCB      0x3a,0x47,0x72,0x65
0000f0  61746572          DCB      0x61,0x74,0x65,0x72
0000f4  5468616e          DCB      0x54,0x68,0x61,0x6e
0000f8  4f724571          DCB      0x4f,0x72,0x45,0x71
0000fc  75616c3c          DCB      0x75,0x61,0x6c,0x3c
000100  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000104  742c2066          DCB      0x74,0x2c,0x20,0x66
000108  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00010c  3e2c2054          DCB      0x3e,0x2c,0x20,0x54
000110  79706532          DCB      0x79,0x70,0x65,0x32
000114  203d2066          DCB      0x20,0x3d,0x20,0x66
000118  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00011c  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000098  7261793c          DCB      0x72,0x61,0x79,0x3c
00009c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a0  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  41727261          DCB      0x41,0x72,0x72,0x61
0000cc  793c666c          DCB      0x79,0x3c,0x66,0x6c
0000d0  6f61743e          DCB      0x6f,0x61,0x74,0x3e
0000d4  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000a4  72726179          DCB      0x72,0x72,0x61,0x79
0000a8  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000ac  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000b0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IhEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000098  7261793c          DCB      0x72,0x61,0x79,0x3c
00009c  756e7369          DCB      0x75,0x6e,0x73,0x69
0000a0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a4  20636861          DCB      0x20,0x63,0x68,0x61
0000a8  723e5d00          DCB      0x72,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IhEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  41727261          DCB      0x41,0x72,0x72,0x61
0000cc  793c756e          DCB      0x79,0x3c,0x75,0x6e
0000d0  7369676e          DCB      0x73,0x69,0x67,0x6e
0000d4  65642063          DCB      0x65,0x64,0x20,0x63
0000d8  6861723e          DCB      0x68,0x61,0x72,0x3e
0000dc  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS1_IhEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Array<unsigned char>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000a4  72726179          DCB      0x72,0x72,0x61,0x79
0000a8  3c756e73          DCB      0x3c,0x75,0x6e,0x73
0000ac  69676e65          DCB      0x69,0x67,0x6e,0x65
0000b0  64206368          DCB      0x64,0x20,0x63,0x68
0000b4  61723e5d          DCB      0x61,0x72,0x3e,0x5d
0000b8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
000098  73686772          DCB      0x73,0x68,0x67,0x72
00009c  69643c66          DCB      0x69,0x64,0x3c,0x66
0000a0  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000a4  3e5d00            DCB      0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  4d657368          DCB      0x4d,0x65,0x73,0x68
0000cc  67726964          DCB      0x67,0x72,0x69,0x64
0000d0  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000d4  61743e5d          DCB      0x61,0x74,0x3e,0x5d
0000d8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayINS0_8MeshgridIfEEE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<Anki::Embedded::Meshgrid<float>>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2041          DCB      0x20,0x3d,0x20,0x41
000094  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000098  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00009c  65646465          DCB      0x65,0x64,0x64,0x65
0000a0  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
0000a4  65736867          DCB      0x65,0x73,0x68,0x67
0000a8  7269643c          DCB      0x72,0x69,0x64,0x3c
0000ac  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000b0  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded10ArraySliceIfE3SetEfE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded10ArraySliceIfE3SetEfE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded10ArraySliceIfE3SetEfE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<float>::Set(float)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  536c6963          DCB      0x53,0x6c,0x69,0x63
000024  653c5479          DCB      0x65,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a536574          DCB      0x3a,0x53,0x65,0x74
000030  28547970          DCB      0x28,0x54,0x79,0x70
000034  6529205b          DCB      0x65,0x29,0x20,0x5b
000038  77697468          DCB      0x77,0x69,0x74,0x68
00003c  20547970          DCB      0x20,0x54,0x79,0x70
000040  65203d20          DCB      0x65,0x20,0x3d,0x20
000044  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000048  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded10ArraySliceIfE7SetCastIfEEiRKNS0_25ConstArraySliceExpressionIfEEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<float>::SetCast<float>(const Anki::Embedded::ConstArraySliceExpression<float>&, bool)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  536c6963          DCB      0x53,0x6c,0x69,0x63
000024  653c5479          DCB      0x65,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a536574          DCB      0x3a,0x53,0x65,0x74
000030  43617374          DCB      0x43,0x61,0x73,0x74
000034  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000038  73742041          DCB      0x73,0x74,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a43          DCB      0x64,0x3a,0x3a,0x43
00004c  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000050  41727261          DCB      0x41,0x72,0x72,0x61
000054  79536c69          DCB      0x79,0x53,0x6c,0x69
000058  63654578          DCB      0x63,0x65,0x45,0x78
00005c  70726573          DCB      0x70,0x72,0x65,0x73
000060  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000064  3c547970          DCB      0x3c,0x54,0x79,0x70
000068  653e2026          DCB      0x65,0x3e,0x20,0x26
00006c  2c20626f          DCB      0x2c,0x20,0x62,0x6f
000070  6f6c2920          DCB      0x6f,0x6c,0x29,0x20
000074  5b776974          DCB      0x5b,0x77,0x69,0x74
000078  6820496e          DCB      0x68,0x20,0x49,0x6e
00007c  54797065          DCB      0x54,0x79,0x70,0x65
000080  203d2066          DCB      0x20,0x3d,0x20,0x66
000084  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000088  2c205479          DCB      0x2c,0x20,0x54,0x79
00008c  7065203d          DCB      0x70,0x65,0x20,0x3d
000090  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000094  61745d00          DCB      0x61,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIhNS2_8SubtractIhffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIhNS2_8SubtractIhffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIhNS2_8SubtractIhffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<unsigned char, Anki::Embedded::Matrix::Elementwise::Subtract<unsigned char, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000044  73742041          DCB      0x73,0x74,0x20,0x41
000048  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00004c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000050  65646465          DCB      0x65,0x64,0x64,0x65
000054  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000058  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00005c  41727261          DCB      0x41,0x72,0x72,0x61
000060  79536c69          DCB      0x79,0x53,0x6c,0x69
000064  63654578          DCB      0x63,0x65,0x45,0x78
000068  70726573          DCB      0x70,0x72,0x65,0x73
00006c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000070  3c547970          DCB      0x3c,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00007c  6e737420          DCB      0x6e,0x73,0x74,0x20
000080  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000084  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000088  62656464          DCB      0x62,0x65,0x64,0x64
00008c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000090  436f6e73          DCB      0x43,0x6f,0x6e,0x73
000094  74417272          DCB      0x74,0x41,0x72,0x72
000098  6179536c          DCB      0x61,0x79,0x53,0x6c
00009c  69636545          DCB      0x69,0x63,0x65,0x45
0000a0  78707265          DCB      0x78,0x70,0x72,0x65
0000a4  7373696f          DCB      0x73,0x73,0x69,0x6f
0000a8  6e3c5479          DCB      0x6e,0x3c,0x54,0x79
0000ac  70653e20          DCB      0x70,0x65,0x3e,0x20
0000b0  262c2041          DCB      0x26,0x2c,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000c4  72726179          DCB      0x72,0x72,0x61,0x79
0000c8  536c6963          DCB      0x53,0x6c,0x69,0x63
0000cc  653c4f75          DCB      0x65,0x3c,0x4f,0x75
0000d0  74547970          DCB      0x74,0x54,0x79,0x70
0000d4  653e2920          DCB      0x65,0x3e,0x29,0x20
0000d8  5b776974          DCB      0x5b,0x77,0x69,0x74
0000dc  6820496e          DCB      0x68,0x20,0x49,0x6e
0000e0  54797065          DCB      0x54,0x79,0x70,0x65
0000e4  203d2075          DCB      0x20,0x3d,0x20,0x75
0000e8  6e736967          DCB      0x6e,0x73,0x69,0x67
0000ec  6e656420          DCB      0x6e,0x65,0x64,0x20
0000f0  63686172          DCB      0x63,0x68,0x61,0x72
0000f4  2c204f70          DCB      0x2c,0x20,0x4f,0x70
0000f8  65726174          DCB      0x65,0x72,0x61,0x74
0000fc  6f72203d          DCB      0x6f,0x72,0x20,0x3d
000100  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000104  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000108  6d626564          DCB      0x6d,0x62,0x65,0x64
00010c  6465643a          DCB      0x64,0x65,0x64,0x3a
000110  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000114  7269783a          DCB      0x72,0x69,0x78,0x3a
000118  3a456c65          DCB      0x3a,0x45,0x6c,0x65
00011c  6d656e74          DCB      0x6d,0x65,0x6e,0x74
000120  77697365          DCB      0x77,0x69,0x73,0x65
000124  3a3a5375          DCB      0x3a,0x3a,0x53,0x75
000128  62747261          DCB      0x62,0x74,0x72,0x61
00012c  63743c75          DCB      0x63,0x74,0x3c,0x75
000130  6e736967          DCB      0x6e,0x73,0x69,0x67
000134  6e656420          DCB      0x6e,0x65,0x64,0x20
000138  63686172          DCB      0x63,0x68,0x61,0x72
00013c  2c20666c          DCB      0x2c,0x20,0x66,0x6c
000140  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000144  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000148  61743e2c          DCB      0x61,0x74,0x3e,0x2c
00014c  204f7574          DCB      0x20,0x4f,0x75,0x74
000150  54797065          DCB      0x54,0x79,0x70,0x65
000154  203d2066          DCB      0x20,0x3d,0x20,0x66
000158  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00015c  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000044  73742041          DCB      0x73,0x74,0x20,0x41
000048  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00004c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000050  65646465          DCB      0x65,0x64,0x64,0x65
000054  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000058  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00005c  41727261          DCB      0x41,0x72,0x72,0x61
000060  79536c69          DCB      0x79,0x53,0x6c,0x69
000064  63654578          DCB      0x63,0x65,0x45,0x78
000068  70726573          DCB      0x70,0x72,0x65,0x73
00006c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000070  3c547970          DCB      0x3c,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  2c20496e          DCB      0x2c,0x20,0x49,0x6e
00007c  54797065          DCB      0x54,0x79,0x70,0x65
000080  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000084  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000088  456d6265          DCB      0x45,0x6d,0x62,0x65
00008c  64646564          DCB      0x64,0x64,0x65,0x64
000090  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000094  72617953          DCB      0x72,0x61,0x79,0x53
000098  6c696365          DCB      0x6c,0x69,0x63,0x65
00009c  3c4f7574          DCB      0x3c,0x4f,0x75,0x74
0000a0  54797065          DCB      0x54,0x79,0x70,0x65
0000a4  3e29205b          DCB      0x3e,0x29,0x20,0x5b
0000a8  77697468          DCB      0x77,0x69,0x74,0x68
0000ac  20496e54          DCB      0x20,0x49,0x6e,0x54
0000b0  79706520          DCB      0x79,0x70,0x65,0x20
0000b4  3d20666c          DCB      0x3d,0x20,0x66,0x6c
0000b8  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000bc  204f7065          DCB      0x20,0x4f,0x70,0x65
0000c0  7261746f          DCB      0x72,0x61,0x74,0x6f
0000c4  72203d20          DCB      0x72,0x20,0x3d,0x20
0000c8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000cc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000d0  62656464          DCB      0x62,0x65,0x64,0x64
0000d4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000d8  4d617472          DCB      0x4d,0x61,0x74,0x72
0000dc  69783a3a          DCB      0x69,0x78,0x3a,0x3a
0000e0  456c656d          DCB      0x45,0x6c,0x65,0x6d
0000e4  656e7477          DCB      0x65,0x6e,0x74,0x77
0000e8  6973653a          DCB      0x69,0x73,0x65,0x3a
0000ec  3a446f74          DCB      0x3a,0x44,0x6f,0x74
0000f0  4d756c74          DCB      0x4d,0x75,0x6c,0x74
0000f4  69706c79          DCB      0x69,0x70,0x6c,0x79
0000f8  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
0000fc  61742c20          DCB      0x61,0x74,0x2c,0x20
000100  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000104  742c2066          DCB      0x74,0x2c,0x20,0x66
000108  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00010c  3e2c204f          DCB      0x3e,0x2c,0x20,0x4f
000110  75745479          DCB      0x75,0x74,0x54,0x79
000114  7065203d          DCB      0x70,0x65,0x20,0x3d
000118  20666c6f          DCB      0x20,0x66,0x6c,0x6f
00011c  61745d00          DCB      0x61,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_11DotMultiplyIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotMultiply<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000044  73742041          DCB      0x73,0x74,0x20,0x41
000048  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00004c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000050  65646465          DCB      0x65,0x64,0x64,0x65
000054  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000058  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00005c  41727261          DCB      0x41,0x72,0x72,0x61
000060  79536c69          DCB      0x79,0x53,0x6c,0x69
000064  63654578          DCB      0x63,0x65,0x45,0x78
000068  70726573          DCB      0x70,0x72,0x65,0x73
00006c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000070  3c547970          DCB      0x3c,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00007c  6e737420          DCB      0x6e,0x73,0x74,0x20
000080  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000084  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000088  62656464          DCB      0x62,0x65,0x64,0x64
00008c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000090  436f6e73          DCB      0x43,0x6f,0x6e,0x73
000094  74417272          DCB      0x74,0x41,0x72,0x72
000098  6179536c          DCB      0x61,0x79,0x53,0x6c
00009c  69636545          DCB      0x69,0x63,0x65,0x45
0000a0  78707265          DCB      0x78,0x70,0x72,0x65
0000a4  7373696f          DCB      0x73,0x73,0x69,0x6f
0000a8  6e3c5479          DCB      0x6e,0x3c,0x54,0x79
0000ac  70653e20          DCB      0x70,0x65,0x3e,0x20
0000b0  262c2041          DCB      0x26,0x2c,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000c4  72726179          DCB      0x72,0x72,0x61,0x79
0000c8  536c6963          DCB      0x53,0x6c,0x69,0x63
0000cc  653c4f75          DCB      0x65,0x3c,0x4f,0x75
0000d0  74547970          DCB      0x74,0x54,0x79,0x70
0000d4  653e2920          DCB      0x65,0x3e,0x29,0x20
0000d8  5b776974          DCB      0x5b,0x77,0x69,0x74
0000dc  6820496e          DCB      0x68,0x20,0x49,0x6e
0000e0  54797065          DCB      0x54,0x79,0x70,0x65
0000e4  203d2066          DCB      0x20,0x3d,0x20,0x66
0000e8  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000ec  2c204f70          DCB      0x2c,0x20,0x4f,0x70
0000f0  65726174          DCB      0x65,0x72,0x61,0x74
0000f4  6f72203d          DCB      0x6f,0x72,0x20,0x3d
0000f8  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000fc  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000100  6d626564          DCB      0x6d,0x62,0x65,0x64
000104  6465643a          DCB      0x64,0x65,0x64,0x3a
000108  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
00010c  7269783a          DCB      0x72,0x69,0x78,0x3a
000110  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000114  6d656e74          DCB      0x6d,0x65,0x6e,0x74
000118  77697365          DCB      0x77,0x69,0x73,0x65
00011c  3a3a446f          DCB      0x3a,0x3a,0x44,0x6f
000120  744d756c          DCB      0x74,0x4d,0x75,0x6c
000124  7469706c          DCB      0x74,0x69,0x70,0x6c
000128  793c666c          DCB      0x79,0x3c,0x66,0x6c
00012c  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000130  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000134  61742c20          DCB      0x61,0x74,0x2c,0x20
000138  666c6f61          DCB      0x66,0x6c,0x6f,0x61
00013c  743e2c20          DCB      0x74,0x3e,0x2c,0x20
000140  4f757454          DCB      0x4f,0x75,0x74,0x54
000144  79706520          DCB      0x79,0x70,0x65,0x20
000148  3d20666c          DCB      0x3d,0x20,0x66,0x6c
00014c  6f61745d          DCB      0x6f,0x61,0x74,0x5d
000150  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultET_RKNS0_25ConstArraySliceExpressionIS7_EENS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Subtract<float, float, float>, float>(T1, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28496e54          DCB      0x28,0x49,0x6e,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20636f6e          DCB      0x20,0x63,0x6f,0x6e
00004c  73742041          DCB      0x73,0x74,0x20,0x41
000050  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000054  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000058  65646465          DCB      0x65,0x64,0x64,0x65
00005c  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000060  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000064  41727261          DCB      0x41,0x72,0x72,0x61
000068  79536c69          DCB      0x79,0x53,0x6c,0x69
00006c  63654578          DCB      0x63,0x65,0x45,0x78
000070  70726573          DCB      0x70,0x72,0x65,0x73
000074  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000078  3c547970          DCB      0x3c,0x54,0x79,0x70
00007c  653e2026          DCB      0x65,0x3e,0x20,0x26
000080  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000084  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000088  456d6265          DCB      0x45,0x6d,0x62,0x65
00008c  64646564          DCB      0x64,0x64,0x65,0x64
000090  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000094  72617953          DCB      0x72,0x61,0x79,0x53
000098  6c696365          DCB      0x6c,0x69,0x63,0x65
00009c  3c4f7574          DCB      0x3c,0x4f,0x75,0x74
0000a0  54797065          DCB      0x54,0x79,0x70,0x65
0000a4  3e29205b          DCB      0x3e,0x29,0x20,0x5b
0000a8  77697468          DCB      0x77,0x69,0x74,0x68
0000ac  20496e54          DCB      0x20,0x49,0x6e,0x54
0000b0  79706520          DCB      0x79,0x70,0x65,0x20
0000b4  3d20666c          DCB      0x3d,0x20,0x66,0x6c
0000b8  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000bc  204f7065          DCB      0x20,0x4f,0x70,0x65
0000c0  7261746f          DCB      0x72,0x61,0x74,0x6f
0000c4  72203d20          DCB      0x72,0x20,0x3d,0x20
0000c8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000cc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000d0  62656464          DCB      0x62,0x65,0x64,0x64
0000d4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000d8  4d617472          DCB      0x4d,0x61,0x74,0x72
0000dc  69783a3a          DCB      0x69,0x78,0x3a,0x3a
0000e0  456c656d          DCB      0x45,0x6c,0x65,0x6d
0000e4  656e7477          DCB      0x65,0x6e,0x74,0x77
0000e8  6973653a          DCB      0x69,0x73,0x65,0x3a
0000ec  3a537562          DCB      0x3a,0x53,0x75,0x62
0000f0  74726163          DCB      0x74,0x72,0x61,0x63
0000f4  743c666c          DCB      0x74,0x3c,0x66,0x6c
0000f8  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000fc  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000100  61742c20          DCB      0x61,0x74,0x2c,0x20
000104  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000108  743e2c20          DCB      0x74,0x3e,0x2c,0x20
00010c  4f757454          DCB      0x4f,0x75,0x74,0x54
000110  79706520          DCB      0x79,0x70,0x65,0x20
000114  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000118  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00011c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_8SubtractIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Subtract<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000044  73742041          DCB      0x73,0x74,0x20,0x41
000048  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00004c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000050  65646465          DCB      0x65,0x64,0x64,0x65
000054  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000058  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00005c  41727261          DCB      0x41,0x72,0x72,0x61
000060  79536c69          DCB      0x79,0x53,0x6c,0x69
000064  63654578          DCB      0x63,0x65,0x45,0x78
000068  70726573          DCB      0x70,0x72,0x65,0x73
00006c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000070  3c547970          DCB      0x3c,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00007c  6e737420          DCB      0x6e,0x73,0x74,0x20
000080  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000084  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000088  62656464          DCB      0x62,0x65,0x64,0x64
00008c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000090  436f6e73          DCB      0x43,0x6f,0x6e,0x73
000094  74417272          DCB      0x74,0x41,0x72,0x72
000098  6179536c          DCB      0x61,0x79,0x53,0x6c
00009c  69636545          DCB      0x69,0x63,0x65,0x45
0000a0  78707265          DCB      0x78,0x70,0x72,0x65
0000a4  7373696f          DCB      0x73,0x73,0x69,0x6f
0000a8  6e3c5479          DCB      0x6e,0x3c,0x54,0x79
0000ac  70653e20          DCB      0x70,0x65,0x3e,0x20
0000b0  262c2041          DCB      0x26,0x2c,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000c4  72726179          DCB      0x72,0x72,0x61,0x79
0000c8  536c6963          DCB      0x53,0x6c,0x69,0x63
0000cc  653c4f75          DCB      0x65,0x3c,0x4f,0x75
0000d0  74547970          DCB      0x74,0x54,0x79,0x70
0000d4  653e2920          DCB      0x65,0x3e,0x29,0x20
0000d8  5b776974          DCB      0x5b,0x77,0x69,0x74
0000dc  6820496e          DCB      0x68,0x20,0x49,0x6e
0000e0  54797065          DCB      0x54,0x79,0x70,0x65
0000e4  203d2066          DCB      0x20,0x3d,0x20,0x66
0000e8  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000ec  2c204f70          DCB      0x2c,0x20,0x4f,0x70
0000f0  65726174          DCB      0x65,0x72,0x61,0x74
0000f4  6f72203d          DCB      0x6f,0x72,0x20,0x3d
0000f8  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000fc  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000100  6d626564          DCB      0x6d,0x62,0x65,0x64
000104  6465643a          DCB      0x64,0x65,0x64,0x3a
000108  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
00010c  7269783a          DCB      0x72,0x69,0x78,0x3a
000110  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000114  6d656e74          DCB      0x6d,0x65,0x6e,0x74
000118  77697365          DCB      0x77,0x69,0x73,0x65
00011c  3a3a5375          DCB      0x3a,0x3a,0x53,0x75
000120  62747261          DCB      0x62,0x74,0x72,0x61
000124  63743c66          DCB      0x63,0x74,0x3c,0x66
000128  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00012c  2c20666c          DCB      0x2c,0x20,0x66,0x6c
000130  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000134  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000138  61743e2c          DCB      0x61,0x74,0x3e,0x2c
00013c  204f7574          DCB      0x20,0x4f,0x75,0x74
000140  54797065          DCB      0x54,0x79,0x70,0x65
000144  203d2066          DCB      0x20,0x3d,0x20,0x66
000148  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00014c  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3AddIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Add<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000044  73742041          DCB      0x73,0x74,0x20,0x41
000048  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00004c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000050  65646465          DCB      0x65,0x64,0x64,0x65
000054  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000058  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00005c  41727261          DCB      0x41,0x72,0x72,0x61
000060  79536c69          DCB      0x79,0x53,0x6c,0x69
000064  63654578          DCB      0x63,0x65,0x45,0x78
000068  70726573          DCB      0x70,0x72,0x65,0x73
00006c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000070  3c547970          DCB      0x3c,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00007c  6e737420          DCB      0x6e,0x73,0x74,0x20
000080  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000084  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000088  62656464          DCB      0x62,0x65,0x64,0x64
00008c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000090  436f6e73          DCB      0x43,0x6f,0x6e,0x73
000094  74417272          DCB      0x74,0x41,0x72,0x72
000098  6179536c          DCB      0x61,0x79,0x53,0x6c
00009c  69636545          DCB      0x69,0x63,0x65,0x45
0000a0  78707265          DCB      0x78,0x70,0x72,0x65
0000a4  7373696f          DCB      0x73,0x73,0x69,0x6f
0000a8  6e3c5479          DCB      0x6e,0x3c,0x54,0x79
0000ac  70653e20          DCB      0x70,0x65,0x3e,0x20
0000b0  262c2041          DCB      0x26,0x2c,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000c4  72726179          DCB      0x72,0x72,0x61,0x79
0000c8  536c6963          DCB      0x53,0x6c,0x69,0x63
0000cc  653c4f75          DCB      0x65,0x3c,0x4f,0x75
0000d0  74547970          DCB      0x74,0x54,0x79,0x70
0000d4  653e2920          DCB      0x65,0x3e,0x29,0x20
0000d8  5b776974          DCB      0x5b,0x77,0x69,0x74
0000dc  6820496e          DCB      0x68,0x20,0x49,0x6e
0000e0  54797065          DCB      0x54,0x79,0x70,0x65
0000e4  203d2066          DCB      0x20,0x3d,0x20,0x66
0000e8  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000ec  2c204f70          DCB      0x2c,0x20,0x4f,0x70
0000f0  65726174          DCB      0x65,0x72,0x61,0x74
0000f4  6f72203d          DCB      0x6f,0x72,0x20,0x3d
0000f8  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000fc  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000100  6d626564          DCB      0x6d,0x62,0x65,0x64
000104  6465643a          DCB      0x64,0x65,0x64,0x3a
000108  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
00010c  7269783a          DCB      0x72,0x69,0x78,0x3a
000110  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000114  6d656e74          DCB      0x6d,0x65,0x6e,0x74
000118  77697365          DCB      0x77,0x69,0x73,0x65
00011c  3a3a4164          DCB      0x3a,0x3a,0x41,0x64
000120  643c666c          DCB      0x64,0x3c,0x66,0x6c
000124  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000128  20666c6f          DCB      0x20,0x66,0x6c,0x6f
00012c  61742c20          DCB      0x61,0x74,0x2c,0x20
000130  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000134  743e2c20          DCB      0x74,0x3e,0x2c,0x20
000138  4f757454          DCB      0x4f,0x75,0x74,0x54
00013c  79706520          DCB      0x79,0x70,0x65,0x20
000140  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000144  6f61745d          DCB      0x6f,0x61,0x74,0x5d
000148  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3ExpIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3ExpIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_3ExpIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EESB_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::Exp<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, const Anki::Embedded::ConstArraySliceExpression<T1>&, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000044  73742041          DCB      0x73,0x74,0x20,0x41
000048  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00004c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000050  65646465          DCB      0x65,0x64,0x64,0x65
000054  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000058  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00005c  41727261          DCB      0x41,0x72,0x72,0x61
000060  79536c69          DCB      0x79,0x53,0x6c,0x69
000064  63654578          DCB      0x63,0x65,0x45,0x78
000068  70726573          DCB      0x70,0x72,0x65,0x73
00006c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000070  3c547970          DCB      0x3c,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00007c  6e737420          DCB      0x6e,0x73,0x74,0x20
000080  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000084  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000088  62656464          DCB      0x62,0x65,0x64,0x64
00008c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000090  436f6e73          DCB      0x43,0x6f,0x6e,0x73
000094  74417272          DCB      0x74,0x41,0x72,0x72
000098  6179536c          DCB      0x61,0x79,0x53,0x6c
00009c  69636545          DCB      0x69,0x63,0x65,0x45
0000a0  78707265          DCB      0x78,0x70,0x72,0x65
0000a4  7373696f          DCB      0x73,0x73,0x69,0x6f
0000a8  6e3c5479          DCB      0x6e,0x3c,0x54,0x79
0000ac  70653e20          DCB      0x70,0x65,0x3e,0x20
0000b0  262c2041          DCB      0x26,0x2c,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a41          DCB      0x64,0x3a,0x3a,0x41
0000c4  72726179          DCB      0x72,0x72,0x61,0x79
0000c8  536c6963          DCB      0x53,0x6c,0x69,0x63
0000cc  653c4f75          DCB      0x65,0x3c,0x4f,0x75
0000d0  74547970          DCB      0x74,0x54,0x79,0x70
0000d4  653e2920          DCB      0x65,0x3e,0x29,0x20
0000d8  5b776974          DCB      0x5b,0x77,0x69,0x74
0000dc  6820496e          DCB      0x68,0x20,0x49,0x6e
0000e0  54797065          DCB      0x54,0x79,0x70,0x65
0000e4  203d2066          DCB      0x20,0x3d,0x20,0x66
0000e8  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000ec  2c204f70          DCB      0x2c,0x20,0x4f,0x70
0000f0  65726174          DCB      0x65,0x72,0x61,0x74
0000f4  6f72203d          DCB      0x6f,0x72,0x20,0x3d
0000f8  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000fc  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000100  6d626564          DCB      0x6d,0x62,0x65,0x64
000104  6465643a          DCB      0x64,0x65,0x64,0x3a
000108  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
00010c  7269783a          DCB      0x72,0x69,0x78,0x3a
000110  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000114  6d656e74          DCB      0x6d,0x65,0x6e,0x74
000118  77697365          DCB      0x77,0x69,0x73,0x65
00011c  3a3a4578          DCB      0x3a,0x3a,0x45,0x78
000120  703c666c          DCB      0x70,0x3c,0x66,0x6c
000124  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000128  20666c6f          DCB      0x20,0x66,0x6c,0x6f
00012c  61742c20          DCB      0x61,0x74,0x2c,0x20
000130  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000134  743e2c20          DCB      0x74,0x3e,0x2c,0x20
000138  4f757454          DCB      0x4f,0x75,0x74,0x54
00013c  79706520          DCB      0x79,0x70,0x65,0x20
000140  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000144  6f61745d          DCB      0x6f,0x61,0x74,0x5d
000148  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9VectorizeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Vectorize<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a566563          DCB      0x3a,0x56,0x65,0x63
000028  746f7269          DCB      0x74,0x6f,0x72,0x69
00002c  7a652862          DCB      0x7a,0x65,0x28,0x62
000030  6f6f6c2c          DCB      0x6f,0x6f,0x6c,0x2c
000034  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000038  73742041          DCB      0x73,0x74,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00004c  72726179          DCB      0x72,0x72,0x61,0x79
000050  3c547970          DCB      0x3c,0x54,0x79,0x70
000054  653e2026          DCB      0x65,0x3e,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
00006c  7261793c          DCB      0x72,0x61,0x79,0x3c
000070  4f757454          DCB      0x4f,0x75,0x74,0x54
000074  7970653e          DCB      0x79,0x70,0x65,0x3e
000078  20262920          DCB      0x20,0x26,0x29,0x20
00007c  5b776974          DCB      0x5b,0x77,0x69,0x74
000080  6820496e          DCB      0x68,0x20,0x49,0x6e
000084  54797065          DCB      0x54,0x79,0x70,0x65
000088  203d2066          DCB      0x20,0x3d,0x20,0x66
00008c  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000090  2c204f75          DCB      0x2c,0x20,0x4f,0x75
000094  74547970          DCB      0x74,0x54,0x79,0x70
000098  65203d20          DCB      0x65,0x20,0x3d,0x20
00009c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a0  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix9VectorizeIhfEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix9VectorizeIhfEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9VectorizeIhfEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Vectorize<unsigned char, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a566563          DCB      0x3a,0x56,0x65,0x63
000028  746f7269          DCB      0x74,0x6f,0x72,0x69
00002c  7a652862          DCB      0x7a,0x65,0x28,0x62
000030  6f6f6c2c          DCB      0x6f,0x6f,0x6c,0x2c
000034  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000038  73742041          DCB      0x73,0x74,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00004c  72726179          DCB      0x72,0x72,0x61,0x79
000050  3c547970          DCB      0x3c,0x54,0x79,0x70
000054  653e2026          DCB      0x65,0x3e,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
00006c  7261793c          DCB      0x72,0x61,0x79,0x3c
000070  4f757454          DCB      0x4f,0x75,0x74,0x54
000074  7970653e          DCB      0x79,0x70,0x65,0x3e
000078  20262920          DCB      0x20,0x26,0x29,0x20
00007c  5b776974          DCB      0x5b,0x77,0x69,0x74
000080  6820496e          DCB      0x68,0x20,0x49,0x6e
000084  54797065          DCB      0x54,0x79,0x70,0x65
000088  203d2075          DCB      0x20,0x3d,0x20,0x75
00008c  6e736967          DCB      0x6e,0x73,0x69,0x67
000090  6e656420          DCB      0x6e,0x65,0x64,0x20
000094  63686172          DCB      0x63,0x68,0x61,0x72
000098  2c204f75          DCB      0x2c,0x20,0x4f,0x75
00009c  74547970          DCB      0x74,0x54,0x79,0x70
0000a0  65203d20          DCB      0x65,0x20,0x3d,0x20
0000a4  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a8  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix17MultiplyTransposeIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MultiplyTranspose<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a4d756c          DCB      0x3a,0x4d,0x75,0x6c
000028  7469706c          DCB      0x74,0x69,0x70,0x6c
00002c  79547261          DCB      0x79,0x54,0x72,0x61
000030  6e73706f          DCB      0x6e,0x73,0x70,0x6f
000034  73652863          DCB      0x73,0x65,0x28,0x63
000038  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00003c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000040  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000044  6d626564          DCB      0x6d,0x62,0x65,0x64
000048  6465643a          DCB      0x64,0x65,0x64,0x3a
00004c  3a417272          DCB      0x3a,0x41,0x72,0x72
000050  61793c54          DCB      0x61,0x79,0x3c,0x54
000054  7970653e          DCB      0x79,0x70,0x65,0x3e
000058  20262c20          DCB      0x20,0x26,0x2c,0x20
00005c  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000060  7420416e          DCB      0x74,0x20,0x41,0x6e
000064  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000068  456d6265          DCB      0x45,0x6d,0x62,0x65
00006c  64646564          DCB      0x64,0x64,0x65,0x64
000070  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000074  7261793c          DCB      0x72,0x61,0x79,0x3c
000078  54797065          DCB      0x54,0x79,0x70,0x65
00007c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000080  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000084  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000088  6d626564          DCB      0x6d,0x62,0x65,0x64
00008c  6465643a          DCB      0x64,0x65,0x64,0x3a
000090  3a417272          DCB      0x3a,0x41,0x72,0x72
000094  61793c4f          DCB      0x61,0x79,0x3c,0x4f
000098  75745479          DCB      0x75,0x74,0x54,0x79
00009c  70653e20          DCB      0x70,0x65,0x3e,0x20
0000a0  2629205b          DCB      0x26,0x29,0x20,0x5b
0000a4  77697468          DCB      0x77,0x69,0x74,0x68
0000a8  20496e54          DCB      0x20,0x49,0x6e,0x54
0000ac  79706520          DCB      0x79,0x70,0x65,0x20
0000b0  3d20666c          DCB      0x3d,0x20,0x66,0x6c
0000b4  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000b8  204f7574          DCB      0x20,0x4f,0x75,0x74
0000bc  54797065          DCB      0x54,0x79,0x70,0x65
0000c0  203d2066          DCB      0x20,0x3d,0x20,0x66
0000c4  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000c8  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a536f6c          DCB      0x3a,0x53,0x6f,0x6c
000028  76654c65          DCB      0x76,0x65,0x4c,0x65
00002c  61737453          DCB      0x61,0x73,0x74,0x53
000030  71756172          DCB      0x71,0x75,0x61,0x72
000034  65735769          DCB      0x65,0x73,0x57,0x69
000038  74684368          DCB      0x74,0x68,0x43,0x68
00003c  6f6c6573          DCB      0x6f,0x6c,0x65,0x73
000040  6b792841          DCB      0x6b,0x79,0x28,0x41
000044  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000048  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00004c  65646465          DCB      0x65,0x64,0x64,0x65
000050  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000054  72726179          DCB      0x72,0x72,0x61,0x79
000058  3c547970          DCB      0x3c,0x54,0x79,0x70
00005c  653e2026          DCB      0x65,0x3e,0x20,0x26
000060  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000064  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000068  456d6265          DCB      0x45,0x6d,0x62,0x65
00006c  64646564          DCB      0x64,0x64,0x65,0x64
000070  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000074  7261793c          DCB      0x72,0x61,0x79,0x3c
000078  54797065          DCB      0x54,0x79,0x70,0x65
00007c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000080  20626f6f          DCB      0x20,0x62,0x6f,0x6f
000084  6c2c2062          DCB      0x6c,0x2c,0x20,0x62
000088  6f6f6c20          DCB      0x6f,0x6f,0x6c,0x20
00008c  2629205b          DCB      0x26,0x29,0x20,0x5b
000090  77697468          DCB      0x77,0x69,0x74,0x68
000094  20547970          DCB      0x20,0x54,0x79,0x70
000098  65203d20          DCB      0x65,0x20,0x3d,0x20
00009c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a0  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix7ReshapeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix7ReshapeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix7ReshapeIffEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Reshape<float, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a526573          DCB      0x3a,0x52,0x65,0x73
000028  68617065          DCB      0x68,0x61,0x70,0x65
00002c  28626f6f          DCB      0x28,0x62,0x6f,0x6f
000030  6c2c2063          DCB      0x6c,0x2c,0x20,0x63
000034  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000038  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00003c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000040  6d626564          DCB      0x6d,0x62,0x65,0x64
000044  6465643a          DCB      0x64,0x65,0x64,0x3a
000048  3a417272          DCB      0x3a,0x41,0x72,0x72
00004c  61793c54          DCB      0x61,0x79,0x3c,0x54
000050  7970653e          DCB      0x79,0x70,0x65,0x3e
000054  20262c20          DCB      0x20,0x26,0x2c,0x20
000058  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00005c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000060  62656464          DCB      0x62,0x65,0x64,0x64
000064  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000068  41727261          DCB      0x41,0x72,0x72,0x61
00006c  793c4f75          DCB      0x79,0x3c,0x4f,0x75
000070  74547970          DCB      0x74,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  29205b77          DCB      0x29,0x20,0x5b,0x77
00007c  69746820          DCB      0x69,0x74,0x68,0x20
000080  496e5479          DCB      0x49,0x6e,0x54,0x79
000084  7065203d          DCB      0x70,0x65,0x20,0x3d
000088  20666c6f          DCB      0x20,0x66,0x6c,0x6f
00008c  61742c20          DCB      0x61,0x74,0x2c,0x20
000090  4f757454          DCB      0x4f,0x75,0x74,0x54
000094  79706520          DCB      0x79,0x70,0x65,0x20
000098  3d20666c          DCB      0x3d,0x20,0x66,0x6c
00009c  6f61745d          DCB      0x6f,0x61,0x74,0x5d
0000a0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix7ReshapeIhfEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix7ReshapeIhfEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix7ReshapeIhfEENS_6ResultEbRKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Reshape<unsigned char, float>(bool, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a526573          DCB      0x3a,0x52,0x65,0x73
000028  68617065          DCB      0x68,0x61,0x70,0x65
00002c  28626f6f          DCB      0x28,0x62,0x6f,0x6f
000030  6c2c2063          DCB      0x6c,0x2c,0x20,0x63
000034  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000038  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00003c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000040  6d626564          DCB      0x6d,0x62,0x65,0x64
000044  6465643a          DCB      0x64,0x65,0x64,0x3a
000048  3a417272          DCB      0x3a,0x41,0x72,0x72
00004c  61793c54          DCB      0x61,0x79,0x3c,0x54
000050  7970653e          DCB      0x79,0x70,0x65,0x3e
000054  20262c20          DCB      0x20,0x26,0x2c,0x20
000058  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00005c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000060  62656464          DCB      0x62,0x65,0x64,0x64
000064  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000068  41727261          DCB      0x41,0x72,0x72,0x61
00006c  793c4f75          DCB      0x79,0x3c,0x4f,0x75
000070  74547970          DCB      0x74,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  29205b77          DCB      0x29,0x20,0x5b,0x77
00007c  69746820          DCB      0x69,0x74,0x68,0x20
000080  496e5479          DCB      0x49,0x6e,0x54,0x79
000084  7065203d          DCB      0x70,0x65,0x20,0x3d
000088  20756e73          DCB      0x20,0x75,0x6e,0x73
00008c  69676e65          DCB      0x69,0x67,0x6e,0x65
000090  64206368          DCB      0x64,0x20,0x63,0x68
000094  61722c20          DCB      0x61,0x72,0x2c,0x20
000098  4f757454          DCB      0x4f,0x75,0x74,0x54
00009c  79706520          DCB      0x79,0x70,0x65,0x20
0000a0  3d20666c          DCB      0x3d,0x20,0x66,0x6c
0000a4  6f61745d          DCB      0x6f,0x61,0x74,0x5d
0000a8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded7Interp2IhhEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2<unsigned char, unsigned char>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496e74          DCB      0x3a,0x49,0x6e,0x74
000020  65727032          DCB      0x65,0x72,0x70,0x32
000024  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000028  73742041          DCB      0x73,0x74,0x20,0x41
00002c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000030  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000034  65646465          DCB      0x65,0x64,0x64,0x65
000038  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00003c  72726179          DCB      0x72,0x72,0x61,0x79
000040  3c547970          DCB      0x3c,0x54,0x79,0x70
000044  653e2026          DCB      0x65,0x3e,0x20,0x26
000048  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00004c  6e737420          DCB      0x6e,0x73,0x74,0x20
000050  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000054  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000058  62656464          DCB      0x62,0x65,0x64,0x64
00005c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000060  41727261          DCB      0x41,0x72,0x72,0x61
000064  793c666c          DCB      0x79,0x3c,0x66,0x6c
000068  6f61743e          DCB      0x6f,0x61,0x74,0x3e
00006c  20262c20          DCB      0x20,0x26,0x2c,0x20
000070  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000074  7420416e          DCB      0x74,0x20,0x41,0x6e
000078  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00007c  456d6265          DCB      0x45,0x6d,0x62,0x65
000080  64646564          DCB      0x64,0x64,0x65,0x64
000084  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000088  7261793c          DCB      0x72,0x61,0x79,0x3c
00008c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000090  743e2026          DCB      0x74,0x3e,0x20,0x26
000094  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000098  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00009c  456d6265          DCB      0x45,0x6d,0x62,0x65
0000a0  64646564          DCB      0x64,0x64,0x65,0x64
0000a4  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
0000a8  7261793c          DCB      0x72,0x61,0x79,0x3c
0000ac  4f757454          DCB      0x4f,0x75,0x74,0x54
0000b0  7970653e          DCB      0x79,0x70,0x65,0x3e
0000b4  20262c20          DCB      0x20,0x26,0x2c,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  496e7465          DCB      0x49,0x6e,0x74,0x65
0000cc  72706f6c          DCB      0x72,0x70,0x6f,0x6c
0000d0  6174696f          DCB      0x61,0x74,0x69,0x6f
0000d4  6e547970          DCB      0x6e,0x54,0x79,0x70
0000d8  652c204f          DCB      0x65,0x2c,0x20,0x4f
0000dc  75745479          DCB      0x75,0x74,0x54,0x79
0000e0  70652920          DCB      0x70,0x65,0x29,0x20
0000e4  5b776974          DCB      0x5b,0x77,0x69,0x74
0000e8  6820496e          DCB      0x68,0x20,0x49,0x6e
0000ec  54797065          DCB      0x54,0x79,0x70,0x65
0000f0  203d2075          DCB      0x20,0x3d,0x20,0x75
0000f4  6e736967          DCB      0x6e,0x73,0x69,0x67
0000f8  6e656420          DCB      0x6e,0x65,0x64,0x20
0000fc  63686172          DCB      0x63,0x68,0x61,0x72
000100  2c204f75          DCB      0x2c,0x20,0x4f,0x75
000104  74547970          DCB      0x74,0x54,0x79,0x70
000108  65203d20          DCB      0x65,0x20,0x3d,0x20
00010c  756e7369          DCB      0x75,0x6e,0x73,0x69
000110  676e6564          DCB      0x67,0x6e,0x65,0x64
000114  20636861          DCB      0x20,0x63,0x68,0x61
000118  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded7Interp2IffEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496e74          DCB      0x3a,0x49,0x6e,0x74
000020  65727032          DCB      0x65,0x72,0x70,0x32
000024  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000028  73742041          DCB      0x73,0x74,0x20,0x41
00002c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000030  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000034  65646465          DCB      0x65,0x64,0x64,0x65
000038  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00003c  72726179          DCB      0x72,0x72,0x61,0x79
000040  3c547970          DCB      0x3c,0x54,0x79,0x70
000044  653e2026          DCB      0x65,0x3e,0x20,0x26
000048  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00004c  6e737420          DCB      0x6e,0x73,0x74,0x20
000050  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000054  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000058  62656464          DCB      0x62,0x65,0x64,0x64
00005c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000060  41727261          DCB      0x41,0x72,0x72,0x61
000064  793c666c          DCB      0x79,0x3c,0x66,0x6c
000068  6f61743e          DCB      0x6f,0x61,0x74,0x3e
00006c  20262c20          DCB      0x20,0x26,0x2c,0x20
000070  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000074  7420416e          DCB      0x74,0x20,0x41,0x6e
000078  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00007c  456d6265          DCB      0x45,0x6d,0x62,0x65
000080  64646564          DCB      0x64,0x64,0x65,0x64
000084  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000088  7261793c          DCB      0x72,0x61,0x79,0x3c
00008c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000090  743e2026          DCB      0x74,0x3e,0x20,0x26
000094  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000098  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00009c  456d6265          DCB      0x45,0x6d,0x62,0x65
0000a0  64646564          DCB      0x64,0x64,0x65,0x64
0000a4  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
0000a8  7261793c          DCB      0x72,0x61,0x79,0x3c
0000ac  4f757454          DCB      0x4f,0x75,0x74,0x54
0000b0  7970653e          DCB      0x79,0x70,0x65,0x3e
0000b4  20262c20          DCB      0x20,0x26,0x2c,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  496e7465          DCB      0x49,0x6e,0x74,0x65
0000cc  72706f6c          DCB      0x72,0x70,0x6f,0x6c
0000d0  6174696f          DCB      0x61,0x74,0x69,0x6f
0000d4  6e547970          DCB      0x6e,0x54,0x79,0x70
0000d8  652c204f          DCB      0x65,0x2c,0x20,0x4f
0000dc  75745479          DCB      0x75,0x74,0x54,0x79
0000e0  70652920          DCB      0x70,0x65,0x29,0x20
0000e4  5b776974          DCB      0x5b,0x77,0x69,0x74
0000e8  6820496e          DCB      0x68,0x20,0x49,0x6e
0000ec  54797065          DCB      0x54,0x79,0x70,0x65
0000f0  203d2066          DCB      0x20,0x3d,0x20,0x66
0000f4  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000f8  2c204f75          DCB      0x2c,0x20,0x4f,0x75
0000fc  74547970          DCB      0x74,0x54,0x79,0x70
000100  65203d20          DCB      0x65,0x20,0x3d,0x20
000104  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000108  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded7Interp2IhfEENS_6ResultERKNS0_5ArrayIT_EERKNS3_IfEESA_RNS3_IT0_EENS0_17InterpolationTypeESB_E19__PRETTY_FUNCTION__ ; Anki::Embedded::Interp2<unsigned char, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<float>&, Anki::Embedded::Array<T2>&, Anki::Embedded::InterpolationType, T2)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496e74          DCB      0x3a,0x49,0x6e,0x74
000020  65727032          DCB      0x65,0x72,0x70,0x32
000024  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000028  73742041          DCB      0x73,0x74,0x20,0x41
00002c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000030  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000034  65646465          DCB      0x65,0x64,0x64,0x65
000038  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00003c  72726179          DCB      0x72,0x72,0x61,0x79
000040  3c547970          DCB      0x3c,0x54,0x79,0x70
000044  653e2026          DCB      0x65,0x3e,0x20,0x26
000048  2c20636f          DCB      0x2c,0x20,0x63,0x6f
00004c  6e737420          DCB      0x6e,0x73,0x74,0x20
000050  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000054  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000058  62656464          DCB      0x62,0x65,0x64,0x64
00005c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000060  41727261          DCB      0x41,0x72,0x72,0x61
000064  793c666c          DCB      0x79,0x3c,0x66,0x6c
000068  6f61743e          DCB      0x6f,0x61,0x74,0x3e
00006c  20262c20          DCB      0x20,0x26,0x2c,0x20
000070  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000074  7420416e          DCB      0x74,0x20,0x41,0x6e
000078  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00007c  456d6265          DCB      0x45,0x6d,0x62,0x65
000080  64646564          DCB      0x64,0x64,0x65,0x64
000084  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000088  7261793c          DCB      0x72,0x61,0x79,0x3c
00008c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000090  743e2026          DCB      0x74,0x3e,0x20,0x26
000094  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000098  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00009c  456d6265          DCB      0x45,0x6d,0x62,0x65
0000a0  64646564          DCB      0x64,0x64,0x65,0x64
0000a4  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
0000a8  7261793c          DCB      0x72,0x61,0x79,0x3c
0000ac  4f757454          DCB      0x4f,0x75,0x74,0x54
0000b0  7970653e          DCB      0x79,0x70,0x65,0x3e
0000b4  20262c20          DCB      0x20,0x26,0x2c,0x20
0000b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000c0  62656464          DCB      0x62,0x65,0x64,0x64
0000c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000c8  496e7465          DCB      0x49,0x6e,0x74,0x65
0000cc  72706f6c          DCB      0x72,0x70,0x6f,0x6c
0000d0  6174696f          DCB      0x61,0x74,0x69,0x6f
0000d4  6e547970          DCB      0x6e,0x54,0x79,0x70
0000d8  652c204f          DCB      0x65,0x2c,0x20,0x4f
0000dc  75745479          DCB      0x75,0x74,0x54,0x79
0000e0  70652920          DCB      0x70,0x65,0x29,0x20
0000e4  5b776974          DCB      0x5b,0x77,0x69,0x74
0000e8  6820496e          DCB      0x68,0x20,0x49,0x6e
0000ec  54797065          DCB      0x54,0x79,0x70,0x65
0000f0  203d2075          DCB      0x20,0x3d,0x20,0x75
0000f4  6e736967          DCB      0x6e,0x73,0x69,0x67
0000f8  6e656420          DCB      0x6e,0x65,0x64,0x20
0000fc  63686172          DCB      0x63,0x68,0x61,0x72
000100  2c204f75          DCB      0x2c,0x20,0x4f,0x75
000104  74547970          DCB      0x74,0x54,0x79,0x70
000108  65203d20          DCB      0x65,0x20,0x3d,0x20
00010c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000110  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded3EyeIfEENS_6ResultERNS0_5ArrayIT_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded3EyeIfEENS_6ResultERNS0_5ArrayIT_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded3EyeIfEENS_6ResultERNS0_5ArrayIT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Eye<float>(Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a457965          DCB      0x3a,0x45,0x79,0x65
000020  28416e6b          DCB      0x28,0x41,0x6e,0x6b
000024  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000028  6d626564          DCB      0x6d,0x62,0x65,0x64
00002c  6465643a          DCB      0x64,0x65,0x64,0x3a
000030  3a417272          DCB      0x3a,0x41,0x72,0x72
000034  61793c54          DCB      0x61,0x79,0x3c,0x54
000038  7970653e          DCB      0x79,0x70,0x65,0x3e
00003c  20262920          DCB      0x20,0x26,0x29,0x20
000040  5b776974          DCB      0x5b,0x77,0x69,0x74
000044  68205479          DCB      0x68,0x20,0x54,0x79
000048  7065203d          DCB      0x70,0x65,0x20,0x3d
00004c  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000050  61745d00          DCB      0x61,0x74,0x5d,0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\lucasKanade_Slow.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_lucasKanade_Slow_cpp_13f9de26___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___20_lucasKanade_Slow_cpp_13f9de26___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_lucasKanade_Slow_cpp_13f9de26___Z7__REVSHi|
#line 144
|__asm___20_lucasKanade_Slow_cpp_13f9de26___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
