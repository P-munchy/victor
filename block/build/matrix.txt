; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\matrix.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\matrix.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\matrix.crf ..\coretech\common\robot\src\matrix.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded6Matrix14GetEulerAnglesERKNS0_5ArrayIfEERfS6_S6_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix14GetEulerAnglesERKNS0_5ArrayIfEERfS6_S6_ PROC ; Anki::Embedded::Matrix::GetEulerAngles(const Anki::Embedded::Array<float>&, float&, float&, float&)
;;;14         namespace Matrix {
;;;15           Result GetEulerAngles(const Array<f32>& R,
000000  b5f0              PUSH     {r4-r7,lr}
;;;16             f32& angle_x, f32& angle_y, f32& angle_z)
;;;17           {
000002  4615              MOV      r5,r2
000004  ed2d8b02          VPUSH    {d8}
000008  b083              SUB      sp,sp,#0xc
00000a  6902              LDR      r2,[r0,#0x10]
00000c  460e              MOV      r6,r1
00000e  4604              MOV      r4,r0
000010  461f              MOV      r7,r3
000012  b14a              CBZ      r2,|L1.40|
000014  6820              LDR      r0,[r4,#0]
000016  2800              CMP      r0,#0
000018  bfa4              ITT      GE
00001a  6861              LDRGE    r1,[r4,#4]
00001c  2900              CMPGE    r1,#0
00001e  db03              BLT      |L1.40|
000020  2803              CMP      r0,#3
000022  bf08              IT       EQ
000024  2903              CMPEQ    r1,#3
000026  d00f              BEQ      |L1.72|
                  |L1.40|
;;;18             AnkiConditionalErrorAndReturnValue(R.IsValid() && AreEqualSize(3, 3, R),
000028  2112              MOVS     r1,#0x12
00002a  4846              LDR      r0,|L1.324|
00002c  e9cd0100          STRD     r0,r1,[sp,#0]
000030  a345              ADR      r3,|L1.328|
000032  a24f              ADR      r2,|L1.368|
000034  a156              ADR      r1,|L1.400|
000036  2005              MOVS     r0,#5
000038  f7fffffe          BL       _Anki_Log
;;;19               RESULT_FAIL_INVALID_SIZE,
;;;20               "GetEulerAngles",
;;;21               "R should be a valid 3x3 Array.");
;;;22     
;;;23             if(FLT_NEAR(fabs(R[2][0]), 1.f) ){
;;;24               angle_z = 0.f;
;;;25               if(R[2][0] > 0) { // R(2,0) = +1
;;;26                 angle_y = M_PI_2;
;;;27                 angle_x = atan2_acc(R[0][1], R[0][2]);
;;;28               } else { // R(2,0) = -1
;;;29                 angle_y = -M_PI_2;
;;;30                 angle_x = atan2_acc(-R[0][1], -R[0][2]);
;;;31               }
;;;32             } else {
;;;33               angle_y = asinf(R[2][0]);
;;;34               const f32 inv_cy = 1.f / cosf(angle_y);
;;;35               angle_x = atan2_acc(-R[2][1]*inv_cy, R[2][2]*inv_cy);
;;;36               angle_z = atan2_acc(-R[1][0]*inv_cy, R[0][0]*inv_cy);
;;;37             }
;;;38     
;;;39             return RESULT_OK;
;;;40           } // GetEulerAngles()
00003c  b003              ADD      sp,sp,#0xc
00003e  f04f60a0          MOV      r0,#0x5000000         ;18
000042  ecbd8b02          VPOP     {d8}
000046  bdf0              POP      {r4-r7,pc}
                  |L1.72|
000048  68a1              LDR      r1,[r4,#8]
00004a  2002              MOVS     r0,#2                 ;23
00004c  fb002001          MLA      r0,r0,r1,r2           ;23
000050  4953              LDR      r1,|L1.416|
000052  ed900a00          VLDR     s0,[r0,#0]            ;23
000056  eef00ac0          VABS.F32 s1,s0                 ;23
00005a  ee100a90          VMOV     r0,s1                 ;23
00005e  4288              CMP      r0,r1                 ;23
000060  dd3c              BLE      |L1.220|
000062  ee100a90          VMOV     r0,s1                 ;23
000066  494f              LDR      r1,|L1.420|
000068  4281              CMP      r1,r0                 ;23
00006a  dd37              BLE      |L1.220|
00006c  ed9f0a4e          VLDR     s0,|L1.424|
000070  2002              MOVS     r0,#2                 ;25
000072  ed830a00          VSTR     s0,[r3,#0]            ;24
000076  68a2              LDR      r2,[r4,#8]            ;24
000078  6921              LDR      r1,[r4,#0x10]         ;24
00007a  fb001002          MLA      r0,r0,r2,r1           ;24
00007e  ed900a00          VLDR     s0,[r0,#0]            ;25
000082  eeb50ac0          VCMPE.F32 s0,#0.0               ;25
000086  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;25
00008a  dd11              BLE      |L1.176|
00008c  ed9f0a47          VLDR     s0,|L1.428|
000090  2000              MOVS     r0,#0                 ;27
000092  ed850a00          VSTR     s0,[r5,#0]            ;26
000096  68a2              LDR      r2,[r4,#8]            ;26
000098  6921              LDR      r1,[r4,#0x10]         ;26
00009a  fb001002          MLA      r0,r0,r2,r1           ;26
00009e  edd00a02          VLDR     s1,[r0,#8]            ;27
0000a2  ed900a01          VLDR     s0,[r0,#4]            ;27
0000a6  f7fffffe          BL       _Z9atan2_accff ; atan2_acc(float, float)
0000aa  ed860a00          VSTR     s0,[r6,#0]            ;27
0000ae  e044              B        |L1.314|
                  |L1.176|
0000b0  ed9f0a3f          VLDR     s0,|L1.432|
0000b4  2000              MOVS     r0,#0                 ;30
0000b6  ed850a00          VSTR     s0,[r5,#0]            ;29
0000ba  68a2              LDR      r2,[r4,#8]            ;29
0000bc  6921              LDR      r1,[r4,#0x10]         ;29
0000be  fb001002          MLA      r0,r0,r2,r1           ;29
0000c2  ed900a02          VLDR     s0,[r0,#8]            ;30
0000c6  eef10a40          VNEG.F32 s1,s0                 ;30
0000ca  ed900a01          VLDR     s0,[r0,#4]            ;30
0000ce  eeb10a40          VNEG.F32 s0,s0                 ;30
0000d2  f7fffffe          BL       _Z9atan2_accff ; atan2_acc(float, float)
0000d6  ed860a00          VSTR     s0,[r6,#0]            ;30
0000da  e02e              B        |L1.314|
                  |L1.220|
0000dc  f7fffffe          BL       __hardfp_asinf
0000e0  ed850a00          VSTR     s0,[r5,#0]            ;33
0000e4  f7fffffe          BL       __hardfp_cosf
0000e8  eef70a00          VMOV.F32 s1,#1.00000000        ;34
0000ec  68a2              LDR      r2,[r4,#8]            ;34
0000ee  ee808a80          VDIV.F32 s16,s1,s0             ;34
0000f2  6921              LDR      r1,[r4,#0x10]         ;34
0000f4  2002              MOVS     r0,#2                 ;35
0000f6  fb001002          MLA      r0,r0,r2,r1           ;35
0000fa  ed900a02          VLDR     s0,[r0,#8]            ;35
0000fe  ee600a08          VMUL.F32 s1,s0,s16             ;35
000102  ed900a01          VLDR     s0,[r0,#4]            ;35
000106  ee280a40          VNMUL.F32 s0,s16,s0             ;39
00010a  f7fffffe          BL       _Z9atan2_accff ; atan2_acc(float, float)
00010e  ed860a00          VSTR     s0,[r6,#0]            ;35
000112  68a1              LDR      r1,[r4,#8]            ;35
000114  6920              LDR      r0,[r4,#0x10]         ;35
000116  2200              MOVS     r2,#0                 ;36
000118  fb020201          MLA      r2,r2,r1,r0           ;36
00011c  ed920a00          VLDR     s0,[r2,#0]            ;36
000120  2201              MOVS     r2,#1                 ;36
000122  fb020001          MLA      r0,r2,r1,r0           ;36
000126  ee600a08          VMUL.F32 s1,s0,s16             ;36
00012a  ed900a00          VLDR     s0,[r0,#0]            ;36
00012e  ee280a40          VNMUL.F32 s0,s16,s0             ;39
000132  f7fffffe          BL       _Z9atan2_accff ; atan2_acc(float, float)
000136  ed870a00          VSTR     s0,[r7,#0]            ;36
                  |L1.314|
00013a  b003              ADD      sp,sp,#0xc
00013c  2000              MOVS     r0,#0                 ;39
00013e  ecbd8b02          VPOP     {d8}
000142  bdf0              POP      {r4-r7,pc}
;;;41         } // namespace Matrix
                          ENDP

                  |L1.324|
                          DCD      ||.constdata||
                  |L1.328|
000148  2e2e5c63          DCB      "..\\coretech\\common\\robot\\src\\matrix.cpp",0
00014c  6f726574
000150  6563685c
000154  636f6d6d
000158  6f6e5c72
00015c  6f626f74
000160  5c737263
000164  5c6d6174
000168  7269782e
00016c  63707000
                  |L1.368|
000170  52207368          DCB      "R should be a valid 3x3 Array.",0
000174  6f756c64
000178  20626520
00017c  61207661
000180  6c696420
000184  33783320
000188  41727261
00018c  792e00  
00018f  00                DCB      0
                  |L1.400|
000190  47657445          DCB      "GetEulerAngles",0
000194  756c6572
000198  416e676c
00019c  657300  
00019f  00                DCB      0
                  |L1.416|
                          DCD      0x3f7fff58
                  |L1.420|
                          DCD      0x3f800054
                  |L1.424|
0001a8  00000000          DCFS     0x00000000 ; 0
                  |L1.428|
0001ac  3fc90fdb          DCFS     0x3fc90fdb ; 1.5707963705062866
                  |L1.432|
0001b0  bfc90fdb          DCFS     0xbfc90fdb ; -1.5707963705062866

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded6Matrix14GetEulerAnglesERKNS0_5ArrayIfEERfS6_S6_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded6Matrix14GetEulerAnglesERKNS0_5ArrayIfEERfS6_S6_||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a476574          DCB      0x3a,0x47,0x65,0x74
000028  45756c65          DCB      0x45,0x75,0x6c,0x65
00002c  72416e67          DCB      0x72,0x41,0x6e,0x67
000030  6c657328          DCB      0x6c,0x65,0x73,0x28
000034  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000038  7420416e          DCB      0x74,0x20,0x41,0x6e
00003c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000040  456d6265          DCB      0x45,0x6d,0x62,0x65
000044  64646564          DCB      0x64,0x64,0x65,0x64
000048  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
00004c  7261793c          DCB      0x72,0x61,0x79,0x3c
000050  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000054  743e2026          DCB      0x74,0x3e,0x20,0x26
000058  2c20666c          DCB      0x2c,0x20,0x66,0x6c
00005c  6f617420          DCB      0x6f,0x61,0x74,0x20
000060  262c2066          DCB      0x26,0x2c,0x20,0x66
000064  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000068  20262c20          DCB      0x20,0x26,0x2c,0x20
00006c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000070  74202629          DCB      0x74,0x20,0x26,0x29
000074  00                DCB      0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs ; Anki::Embedded::Array<float>::get_size(int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  6500              DCB      0x65,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 2)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00
