; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\misc.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\misc.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\misc.crf arm_hal\lib\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;135      */
;;;136    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b410              PUSH     {r4}
;;;137    {
;;;138      uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
;;;139      
;;;140      /* Check the parameters */
;;;141      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;142      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;143      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;144        
;;;145      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000002  78c2              LDRB     r2,[r0,#3]
;;;146      {
;;;147        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;148        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;149        tmppre = (0x4 - tmppriority);
;;;150        tmpsub = tmpsub >> tmppriority;
;;;151    
;;;152        tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;153        tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
;;;154            
;;;155        tmppriority = tmppriority << 0x04;
;;;156            
;;;157        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000004  7801              LDRB     r1,[r0,#0]
000006  f04f0c0f          MOV      r12,#0xf              ;138
;;;158        
;;;159        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;160        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
00000a  2401              MOVS     r4,#1
00000c  b31a              CBZ      r2,|L1.86|
00000e  4a18              LDR      r2,|L1.112|
000010  6812              LDR      r2,[r2,#0]            ;148
000012  f10121e0          ADD      r1,r1,#0xe000e000     ;155
000016  f40262e0          AND      r2,r2,#0x700          ;148
00001a  f5c262e0          RSB      r2,r2,#0x700          ;148
00001e  f3c22207          UBFX     r2,r2,#8,#8           ;148
000022  f1c20304          RSB      r3,r2,#4              ;149
000026  fa2cfc02          LSR      r12,r12,r2            ;150
00002a  7842              LDRB     r2,[r0,#1]            ;152
00002c  409a              LSLS     r2,r2,r3              ;152
00002e  7883              LDRB     r3,[r0,#2]            ;153
000030  ea03030c          AND      r3,r3,r12             ;153
000034  431a              ORRS     r2,r2,r3              ;153
000036  0112              LSLS     r2,r2,#4              ;155
000038  f8812400          STRB     r2,[r1,#0x400]        ;157
00003c  7800              LDRB     r0,[r0,#0]
00003e  f000011f          AND      r1,r0,#0x1f
000042  fa04f101          LSL      r1,r4,r1
000046  0940              LSRS     r0,r0,#5
000048  0080              LSLS     r0,r0,#2
00004a  f10020e0          ADD      r0,r0,#0xe000e000
00004e  f8c01100          STR      r1,[r0,#0x100]
;;;161          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;162      }
;;;163      else
;;;164      {
;;;165        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;166        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;167          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;168      }
;;;169    }
000052  bc10              POP      {r4}
000054  4770              BX       lr
                  |L1.86|
000056  f001001f          AND      r0,r1,#0x1f           ;166
00005a  fa04f000          LSL      r0,r4,r0              ;166
00005e  0949              LSRS     r1,r1,#5              ;166
000060  0089              LSLS     r1,r1,#2              ;166
000062  f10121e0          ADD      r1,r1,#0xe000e000     ;166
000066  f8c10180          STR      r0,[r1,#0x180]        ;166
00006a  bc10              POP      {r4}
00006c  4770              BX       lr
;;;170    
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;117      */
;;;118    void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4903              LDR      r1,|L2.16|
;;;119    {
;;;120      /* Check the parameters */
;;;121      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;122      
;;;123      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;124      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  f04070fd          ORR      r0,r0,#0x1fa0000
000006  f0406080          ORR      r0,r0,#0x4000000
00000a  6008              STR      r0,[r1,#0]
;;;125    }
00000c  4770              BX       lr
;;;126    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;179      */
;;;180    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  f021017f          BIC      r1,r1,#0x7f
;;;181    { 
;;;182      /* Check the parameters */
;;;183      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;184      assert_param(IS_NVIC_OFFSET(Offset));  
;;;185       
;;;186      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000004  f0214160          BIC      r1,r1,#0xe0000000
000008  4308              ORRS     r0,r0,r1
00000a  4901              LDR      r1,|L3.16|
00000c  6008              STR      r0,[r1,#0]
;;;187    }
00000e  4770              BX       lr
;;;188    
                          ENDP

                  |L3.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;198      */
;;;199    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_NVIC_LP(LowPowerMode));
;;;203      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;204      
;;;205      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;206      {
;;;207        SCB->SCR |= LowPowerMode;
;;;208      }
;;;209      else
;;;210      {
;;;211        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;207
000008  4308              ORRNE    r0,r0,r1              ;207
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;207
;;;212      }
;;;213    }
000010  4770              BX       lr
;;;214    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0xe000ed10

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;222      */
;;;223    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;224    {
;;;225      /* Check the parameters */
;;;226      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;227      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000004  2804              CMP      r0,#4
;;;228      {
;;;229        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;230      }
;;;231      else
;;;232      {
;;;233        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000006  6908              LDR      r0,[r1,#0x10]
000008  bf0c              ITE      EQ                    ;229
00000a  f0400004          ORREQ    r0,r0,#4              ;229
00000e  f0200004          BICNE    r0,r0,#4
000012  6108              STR      r0,[r1,#0x10]         ;229
;;;234      }
;;;235    }
000014  4770              BX       lr
;;;236    
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\misc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___6_misc_c_d0fc1254____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REVSH|
#line 144
|__asm___6_misc_c_d0fc1254____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
