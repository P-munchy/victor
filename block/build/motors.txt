; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\motors.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\motors.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\motors.crf arm_hal\hal\motors.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo3HAL12MotorGetLoadEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo3HAL12MotorGetLoadEv PROC ; Anki::Cozmo::HAL::MotorGetLoad()
;;;55           
;;;56           s32 MotorGetLoad()
000000  2000              MOVS     r0,#0
;;;57           {
;;;58             return 0;
;;;59           }
000002  4770              BX       lr
;;;60         }
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE PROC ; Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
;;;37           
;;;38           f32 MotorGetSpeed(MotorID motor)
000000  2800              CMP      r0,#0
;;;39           {
;;;40             // Convert motor output from m to mm
;;;41             f32 multiplier = (motor == MOTOR_LEFT_WHEEL || motor == MOTOR_RIGHT_WHEEL) ? 1000.f : 1.f;
000002  bf16              ITET     NE
000004  2801              CMPNE    r0,#1
000006  ed9f0a09          VLDREQ   s0,|L2.44|
00000a  eeb70a00          VMOVNE.F32 s0,#1.00000000
;;;42     				
;;;43             // ASSERT(motor < MOTOR_COUNT);
;;;44             return g_dataToHead.speeds[motor] / FIXED_TO_F32 * multiplier;
00000e  4908              LDR      r1,|L2.48|
000010  eb010080          ADD      r0,r1,r0,LSL #2
000014  6840              LDR      r0,[r0,#4]
000016  ed9f1a07          VLDR     s2,|L2.52|
00001a  ee000a90          VMOV     s1,r0
00001e  eef80ae0          VCVT.F32.S32 s1,s1
000022  ee600a81          VMUL.F32 s1,s1,s2
000026  ee200a80          VMUL.F32 s0,s1,s0
;;;45           }
00002a  4770              BX       lr
;;;46           
                          ENDP

                  |L2.44|
00002c  447a0000          DCFS     0x447a0000 ; 1000
                  |L2.48|
                          DCD      _ZN4Anki5Cozmo3HAL12g_dataToHeadE ; Anki::Cozmo::HAL::g_dataToHead
                  |L2.52|
000034  37800000          DCFS     0x37800000 ; 1.52587890625e-05

                          AREA ||i._ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf PROC ; Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
;;;18           
;;;19           void MotorSetPower(MotorID motor, f32 power)
000000  ee101a10          VMOV     r1,s0
;;;20           {
;;;21             // ASSERT(motor < MOTOR_COUNT);
;;;22             
;;;23             // Change the data for the next SPI packet being sent to the body
;;;24             if (power > 1.0f)
000004  f1b15f7e          CMP      r1,#0x3f800000
;;;25               power = 1.0f;
000008  bfc8              IT       GT
00000a  eeb70a00          VMOVGT.F32 s0,#1.00000000
00000e  dc06              BGT      |L3.30|
;;;26             else if (power < -1.0f)
000010  ee101a10          VMOV     r1,s0
000014  f1114f81          CMN      r1,#0x40800000
;;;27               power = -1.0f;
000018  bf88              IT       HI
00001a  eebf0a00          VMOVHI.F32 s0,#-1.00000000
                  |L3.30|
;;;28             
;;;29             g_dataToBody.motorPWM[motor] =(s16)(power * 
00001e  2801              CMP      r0,#1
;;;30               ((motor > MOTOR_RIGHT_WHEEL) ? (f32)SHRT_MAX : (f32)(SHRT_MAX*MAX_WHEEL_SPEED)));
000020  bf8c              ITE      HI
000022  eddf0a07          VLDRHI   s1,|L3.64|
000026  eddf0a07          VLDRLS   s1,|L3.68|
00002a  ee200a80          VMUL.F32 s0,s1,s0
00002e  4a06              LDR      r2,|L3.72|
000030  eb020040          ADD      r0,r2,r0,LSL #1
000034  eebd0ac0          VCVT.S32.F32 s0,s0
000038  ee101a10          VMOV     r1,s0
00003c  8081              STRH     r1,[r0,#4]
;;;31           }
00003e  4770              BX       lr
;;;32           
                          ENDP

                  |L3.64|
000040  46fffe00          DCFS     0x46fffe00 ; 32767
                  |L3.68|
000044  467ffe00          DCFS     0x467ffe00 ; 16383.5
                  |L3.72|
                          DCD      _ZN4Anki5Cozmo3HAL12g_dataToBodyE ; Anki::Cozmo::HAL::g_dataToBody

                          AREA ||i._ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE PROC ; Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
;;;46           
;;;47           f32 MotorGetPosition(MotorID motor)
000000  2800              CMP      r0,#0
;;;48           {
;;;49             // Convert motor output from m to mm
;;;50             f32 multiplier = (motor == MOTOR_LEFT_WHEEL || motor == MOTOR_RIGHT_WHEEL) ? 1000.f : 1.f;
000002  bf16              ITET     NE
000004  2801              CMPNE    r0,#1
000006  ed9f0a09          VLDREQ   s0,|L4.44|
00000a  eeb70a00          VMOVNE.F32 s0,#1.00000000
;;;51     				
;;;52             // ASSERT(motor < MOTOR_COUNT);
;;;53             return g_dataToHead.positions[motor] / FIXED_TO_F32 * multiplier;
00000e  4908              LDR      r1,|L4.48|
000010  eb010080          ADD      r0,r1,r0,LSL #2
000014  6940              LDR      r0,[r0,#0x14]
000016  ed9f1a07          VLDR     s2,|L4.52|
00001a  ee000a90          VMOV     s1,r0
00001e  eef80ae0          VCVT.F32.S32 s1,s1
000022  ee600a81          VMUL.F32 s1,s1,s2
000026  ee200a80          VMUL.F32 s0,s1,s0
;;;54           }
00002a  4770              BX       lr
;;;55           
                          ENDP

                  |L4.44|
00002c  447a0000          DCFS     0x447a0000 ; 1000
                  |L4.48|
                          DCD      _ZN4Anki5Cozmo3HAL12g_dataToHeadE ; Anki::Cozmo::HAL::g_dataToHead
                  |L4.52|
000034  37800000          DCFS     0x37800000 ; 1.52587890625e-05

                          AREA ||i._ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE PROC ; Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)
;;;32           
;;;33           void MotorResetPosition(MotorID motor)
000000  4770              BX       lr
;;;34           {
;;;35             // ASSERT(motor < MOTOR_COUNT);
;;;36           }
;;;37           
                          ENDP


                          AREA ||i.__sti___10_motors_cpp_b251b376||, CODE, READONLY, ALIGN=2

                  __sti___10_motors_cpp_b251b376 PROC
000000  4803              LDR      r0,|L6.16|
000002  ed9f0a02          VLDR     s0,|L6.12|
000006  ed800a00          VSTR     s0,[r0,#0]
00000a  4770              BX       lr
                          ENDP

                  |L6.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L6.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN4Anki5Cozmo3HAL12MotorGetLoadEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL12MotorGetLoadEv||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i.__sti___10_motors_cpp_b251b376||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___10_motors_cpp_b251b376||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___10_motors_cpp_b251b376
