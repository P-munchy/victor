; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\opencvlight_vision.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\opencvlight_vision.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\opencvlight_vision.crf ..\coretech\vision\robot\src\opencvLight_vision.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded11cvWatershedERKNS0_5ArrayIhEERNS1_IiEENS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded11cvWatershedERKNS0_5ArrayIhEERNS1_IiEENS0_11MemoryStackE PROC ; Anki::Embedded::cvWatershed(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::Array<int>&, Anki::Embedded::MemoryStack)
;;;323    
;;;324        Result cvWatershed(const Array<u8> &src, Array<s32> &dst, MemoryStack scratch)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;325        {
000004  f5ad5d8a          SUB      sp,sp,#0x1140
;;;326          const int IN_QUEUE = -2;
;;;327          const int WSHED = -1;
;;;328          const int NQ = 256;
;;;329    
;;;330          const s32 imageHeight = src.get_size(0);
000008  f50d5280          ADD      r2,sp,#0x1000
00000c  468b              MOV      r11,r1                ;325
00000e  2100              MOVS     r1,#0
000010  f8d20140          LDR      r0,[r2,#0x140]
000014  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;331          const s32 imageWidth = src.get_size(1);
000018  f50d5280          ADD      r2,sp,#0x1000
00001c  9002              STR      r0,[sp,#8]
00001e  2101              MOVS     r1,#1
000020  f8d20140          LDR      r0,[r2,#0x140]
000024  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000028  f50d5280          ADD      r2,sp,#0x1000
00002c  9045              STR      r0,[sp,#0x114]
00002e  f8d20140          LDR      r0,[r2,#0x140]
;;;332    
;;;333          //CvMat sstub;
;;;334          //CvMat dstub;
;;;335          //CvSize size;
;;;336          CvWSNode* free_node = 0, *node;
000032  2400              MOVS     r4,#0
;;;337          CvWSQueue q[NQ];
;;;338          int active_queue;
;;;339          int i, j;
;;;340          int db, dg, dr;
;;;341          //int* mask;
;;;342          //u8* img;
;;;343          int mstep, istep;
;;;344          int subs_tab[513];
;;;345    
;;;346          // MAX(a,b) = b + MAX(a-b,0)
;;;347    #define ws_max(a,b) ((b) + subs_tab[(a)-(b)+NQ])
;;;348          // MIN(a,b) = a - MAX(a-b,0)
;;;349    #define ws_min(a,b) ((a) - subs_tab[(a)-(b)+NQ])
;;;350    
;;;351    #define ws_push(idx,mofs,iofs,storage)  \
;;;352          {                               \
;;;353          if( !free_node )            \
;;;354          free_node = icvAllocWSNodes( storage );\
;;;355          node = free_node;           \
;;;356          free_node = free_node->next;\
;;;357          node->next = 0;             \
;;;358          node->mask_ofs = mofs;      \
;;;359          node->img_ofs = iofs;       \
;;;360          if( q[idx].last )           \
;;;361          q[idx].last->next=node; \
;;;362            else                        \
;;;363            q[idx].first = node;    \
;;;364            q[idx].last = node;         \
;;;365          }
;;;366    
;;;367    #define ws_pop(idx,mofs,iofs)   \
;;;368          {                               \
;;;369          node = q[idx].first;        \
;;;370          q[idx].first = node->next;  \
;;;371          if( !node->next )           \
;;;372          q[idx].last = 0;        \
;;;373          node->next = free_node;     \
;;;374          free_node = node;           \
;;;375          mofs = node->mask_ofs;      \
;;;376          iofs = node->img_ofs;       \
;;;377          }
;;;378    
;;;379    #define c_diff(ptr1,ptr2,diff)      \
;;;380          {                                   \
;;;381          db = abs((ptr1)[0] - (ptr2)[0]);\
;;;382          dg = abs((ptr1)[1] - (ptr2)[1]);\
;;;383          dr = abs((ptr1)[2] - (ptr2)[2]);\
;;;384          diff = ws_max(db,dg);           \
;;;385          diff = ws_max(diff,dr);         \
;;;386          assert( 0 <= diff && diff <= 255 ); \
;;;387          }
;;;388    
;;;389          AnkiConditionalErrorAndReturnValue(src.IsValid() && dst.IsValid() && scratch.IsValid(),
000034  4dfe              LDR      r5,|L1.1072|
000036  6900              LDR      r0,[r0,#0x10]
000038  2800              CMP      r0,#0
00003a  d044              BEQ      |L1.198|
00003c  f8d20140          LDR      r0,[r2,#0x140]
000040  6800              LDR      r0,[r0,#0]
000042  2800              CMP      r0,#0
000044  db3f              BLT      |L1.198|
000046  f8d20140          LDR      r0,[r2,#0x140]
00004a  6840              LDR      r0,[r0,#4]
00004c  2800              CMP      r0,#0
00004e  db3a              BLT      |L1.198|
000050  f8db0010          LDR      r0,[r11,#0x10]
000054  2800              CMP      r0,#0
000056  d036              BEQ      |L1.198|
000058  f8db0000          LDR      r0,[r11,#0]
00005c  2800              CMP      r0,#0
00005e  bfa4              ITT      GE
000060  f8db0004          LDRGE    r0,[r11,#4]
000064  2800              CMPGE    r0,#0
000066  db2e              BLT      |L1.198|
000068  f8d20148          LDR      r0,[r2,#0x148]
00006c  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000070  2800              CMP      r0,#0
000072  d028              BEQ      |L1.198|
;;;390            RESULT_FAIL_INVALID_OBJECT, "CannyEdgeDetection", "Invalid objects");
;;;391    
;;;392          //AnkiConditionalErrorAndReturnValue(AreEqualSize(src, dst),
;;;393          AnkiConditionalErrorAndReturnValue(src.get_size(0) == dst.get_size(0) && src.get_size(1) == 3*dst.get_size(1),
000074  f50d5080          ADD      r0,sp,#0x1000
000078  2100              MOVS     r1,#0
00007a  f8d00140          LDR      r0,[r0,#0x140]
00007e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000082  f8db1000          LDR      r1,[r11,#0]
000086  4288              CMP      r0,r1
000088  d10c              BNE      |L1.164|
00008a  f50d5080          ADD      r0,sp,#0x1000
00008e  2101              MOVS     r1,#1
000090  f8d00140          LDR      r0,[r0,#0x140]
000094  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000098  f8db1004          LDR      r1,[r11,#4]
00009c  eb010141          ADD      r1,r1,r1,LSL #1
0000a0  4288              CMP      r0,r1
0000a2  d01d              BEQ      |L1.224|
                  |L1.164|
0000a4  f2401089          MOV      r0,#0x189
0000a8  e9cd5000          STRD     r5,r0,[sp,#0]
0000ac  a3e1              ADR      r3,|L1.1076|
0000ae  a2ee              ADR      r2,|L1.1128|
0000b0  a1f6              ADR      r1,|L1.1164|
0000b2  2005              MOVS     r0,#5
0000b4  f7fffffe          BL       _Anki_Log
0000b8  f04f60a0          MOV      r0,#0x5000000
                  |L1.188|
;;;394            RESULT_FAIL_INVALID_SIZE, "CannyEdgeDetection", "src and dst must be the same size");
;;;395    
;;;396          //size = cvGetMatSize(src);
;;;397          //storage = cvCreateMemStorage();
;;;398    
;;;399          //img = src.data.ptr;
;;;400          //mask = dst.data.i;
;;;401    
;;;402          //istep = src.step;
;;;403          //mstep = dst.step / sizeof(mask[0]);
;;;404          istep = src.get_stride();
;;;405          mstep = dst.get_stride() / sizeof(s32);
;;;406    
;;;407          memset( q, 0, NQ*sizeof(q[0]) );
;;;408    
;;;409          for( i = 0; i < 256; i++ )
;;;410            subs_tab[i] = 0;
;;;411          for( i = 256; i <= 512; i++ )
;;;412            subs_tab[i] = i - 256;
;;;413    
;;;414          // draw a pixel-wide border of dummy "watershed" (i.e. boundary) pixels
;;;415          //for( j = 0; j < imageWidth; j++ )
;;;416          //  mask[j] = mask[j + mstep*(imageHeight-1)] = WSHED;
;;;417          dst(0,0,0,-1).Set(WSHED);
;;;418          dst(-1,-1,0,-1).Set(WSHED);
;;;419          dst(0,-1,0,0).Set(WSHED);
;;;420          dst(0,-1,-1,-1).Set(WSHED);
;;;421    
;;;422          // initial phase: put all the neighbor pixels of each marker to the ordered queue -
;;;423          // determine the initial boundaries of the basins
;;;424          for( i = 1; i < imageHeight-1; i++ )
;;;425          {
;;;426            //img += istep;
;;;427            //mask += mstep;
;;;428            const u8 * restrict pSrc = src.Pointer(i, 0);
;;;429            s32 * restrict pDst = dst.Pointer(i, 0);
;;;430    
;;;431            pDst[0] = pDst[imageWidth-1] = WSHED;
;;;432    
;;;433            for( j = 1; j < imageWidth-1; j++ )
;;;434            {
;;;435              int* m = pDst + j;
;;;436              if( m[0] < 0 ) m[0] = 0;
;;;437              if( m[0] == 0 && (m[-1] > 0 || m[1] > 0 || m[-mstep] > 0 || m[mstep] > 0) )
;;;438              {
;;;439                const u8* ptr = pSrc + j*3;
;;;440                int idx = 256, t;
;;;441                if( m[-1] > 0 )
;;;442                  c_diff( ptr, ptr - 3, idx );
;;;443                if( m[1] > 0 )
;;;444                {
;;;445                  c_diff( ptr, ptr + 3, t );
;;;446                  idx = ws_min( idx, t );
;;;447                }
;;;448                if( m[-mstep] > 0 )
;;;449                {
;;;450                  c_diff( ptr, ptr - istep, t );
;;;451                  idx = ws_min( idx, t );
;;;452                }
;;;453                if( m[mstep] > 0 )
;;;454                {
;;;455                  c_diff( ptr, ptr + istep, t );
;;;456                  idx = ws_min( idx, t );
;;;457                }
;;;458                AnkiAssert( 0 <= idx && idx <= 255 );
;;;459                ws_push( idx, i*mstep + j, i*istep + j*3, scratch );
;;;460                m[0] = IN_QUEUE;
;;;461              }
;;;462            }
;;;463          }
;;;464    
;;;465          // find the first non-empty queue
;;;466          for( i = 0; i < NQ; i++ )
;;;467            if( q[i].first )
;;;468              break;
;;;469    
;;;470          // if there is no markers, exit immediately
;;;471          if( i == NQ )
;;;472            return RESULT_OK;
;;;473    
;;;474          active_queue = i;
;;;475    
;;;476          //img = src.data.ptr;
;;;477          //mask = dst.data.i;
;;;478          const u8 * restrict pSrc = src.Pointer(0, 0);
;;;479          s32 * restrict pDst = dst.Pointer(0, 0);
;;;480    
;;;481          // recursively fill the basins
;;;482          for(;;)
;;;483          {
;;;484            int mofs, iofs;
;;;485            int lab = 0, t;
;;;486            int* m;
;;;487            const u8* ptr;
;;;488    
;;;489            if( q[active_queue].first == 0 )
;;;490            {
;;;491              for( i = active_queue+1; i < NQ; i++ )
;;;492                if( q[i].first )
;;;493                  break;
;;;494              if( i == NQ )
;;;495                break;
;;;496              active_queue = i;
;;;497            }
;;;498    
;;;499            ws_pop( active_queue, mofs, iofs );
;;;500    
;;;501            m = pDst + mofs;
;;;502            ptr = pSrc + iofs;
;;;503            t = m[-1];
;;;504            if( t > 0 ) lab = t;
;;;505            t = m[1];
;;;506            if( t > 0 )
;;;507            {
;;;508              if( lab == 0 ) lab = t;
;;;509              else if( t != lab ) lab = WSHED;
;;;510            }
;;;511            t = m[-mstep];
;;;512            if( t > 0 )
;;;513            {
;;;514              if( lab == 0 ) lab = t;
;;;515              else if( t != lab ) lab = WSHED;
;;;516            }
;;;517            t = m[mstep];
;;;518            if( t > 0 )
;;;519            {
;;;520              if( lab == 0 ) lab = t;
;;;521              else if( t != lab ) lab = WSHED;
;;;522            }
;;;523            assert( lab != 0 );
;;;524            m[0] = lab;
;;;525            if( lab == WSHED )
;;;526              continue;
;;;527    
;;;528            if( m[-1] == 0 )
;;;529            {
;;;530              c_diff( ptr, ptr - 3, t );
;;;531              ws_push( t, mofs - 1, iofs - 3, scratch );
;;;532              active_queue = ws_min( active_queue, t );
;;;533              m[-1] = IN_QUEUE;
;;;534            }
;;;535            if( m[1] == 0 )
;;;536            {
;;;537              c_diff( ptr, ptr + 3, t );
;;;538              ws_push( t, mofs + 1, iofs + 3, scratch );
;;;539              active_queue = ws_min( active_queue, t );
;;;540              m[1] = IN_QUEUE;
;;;541            }
;;;542            if( m[-mstep] == 0 )
;;;543            {
;;;544              c_diff( ptr, ptr - istep, t );
;;;545              ws_push( t, mofs - mstep, iofs - istep, scratch );
;;;546              active_queue = ws_min( active_queue, t );
;;;547              m[-mstep] = IN_QUEUE;
;;;548            }
;;;549            if( m[mstep] == 0 )
;;;550            {
;;;551              c_diff( ptr, ptr + istep, t );
;;;552              ws_push( t, mofs + mstep, iofs + istep, scratch );
;;;553              active_queue = ws_min( active_queue, t );
;;;554              m[mstep] = IN_QUEUE;
;;;555            }
;;;556          }
;;;557    
;;;558          return RESULT_OK;
;;;559        } // cvWatershed
0000bc  b053              ADD      sp,sp,#0x14c
0000be  f50d5d80          ADD      sp,sp,#0x1000
0000c2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.198|
0000c6  f2401085          MOV      r0,#0x185             ;389
0000ca  e9cd5000          STRD     r5,r0,[sp,#0]         ;389
0000ce  a3d9              ADR      r3,|L1.1076|
0000d0  a2f3              ADR      r2,|L1.1184|
0000d2  a1ee              ADR      r1,|L1.1164|
0000d4  2005              MOVS     r0,#5                 ;389
0000d6  f7fffffe          BL       _Anki_Log
0000da  f04f6080          MOV      r0,#0x4000000         ;389
0000de  e7ed              B        |L1.188|
                  |L1.224|
0000e0  f50d5080          ADD      r0,sp,#0x1000         ;389
0000e4  f44f6100          MOV      r1,#0x800             ;407
0000e8  f8d00140          LDR      r0,[r0,#0x140]        ;407
0000ec  f8d08008          LDR      r8,[r0,#8]            ;407
0000f0  f8db0008          LDR      r0,[r11,#8]           ;405
0000f4  0887              LSRS     r7,r0,#2              ;405
0000f6  f50d6012          ADD      r0,sp,#0x920          ;407
0000fa  f7fffffe          BL       __aeabi_memclr4
0000fe  2000              MOVS     r0,#0                 ;409
000100  4602              MOV      r2,r0                 ;409
000102  a946              ADD      r1,sp,#0x118          ;344
                  |L1.260|
000104  f8412020          STR      r2,[r1,r0,LSL #2]     ;410
000108  1c40              ADDS     r0,r0,#1              ;409
00010a  f5b07f80          CMP      r0,#0x100             ;409
00010e  dbf9              BLT      |L1.260|
000110  f44f7080          MOV      r0,#0x100             ;411
                  |L1.276|
000114  f5a07380          SUB      r3,r0,#0x100          ;412
000118  f8413020          STR      r3,[r1,r0,LSL #2]     ;412
00011c  1c40              ADDS     r0,r0,#1              ;411
00011e  f5b07f00          CMP      r0,#0x200             ;411
000122  ddf7              BLE      |L1.276|
000124  2000              MOVS     r0,#0                 ;417
000126  f04f31ff          MOV      r1,#0xffffffff        ;417
00012a  e9cd0100          STRD     r0,r1,[sp,#0]         ;417
00012e  4603              MOV      r3,r0                 ;417
000130  4602              MOV      r2,r0                 ;417
000132  4659              MOV      r1,r11                ;417
000134  a838              ADD      r0,sp,#0xe0           ;417
000136  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEclEiiii ; Anki::Embedded::Array<int>::operator ()(int, int, int, int)
00013a  f10d0ce0          ADD      r12,sp,#0xe0          ;417
00013e  e8bc066f          LDM      r12!,{r0-r3,r5,r6,r9,r10};417
000142  f10d0c10          ADD      r12,sp,#0x10          ;417
000146  e8ac066f          STM      r12!,{r0-r3,r5,r6,r9,r10};417
00014a  ae40              ADD      r6,sp,#0x100          ;417
00014c  ce2f              LDM      r6!,{r0-r3,r5}        ;417
00014e  ae0c              ADD      r6,sp,#0x30           ;417
000150  c62f              STM      r6!,{r0-r3,r5}        ;417
000152  f04f31ff          MOV      r1,#0xffffffff        ;417
000156  a804              ADD      r0,sp,#0x10           ;417
000158  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
00015c  f04f31ff          MOV      r1,#0xffffffff        ;418
000160  2000              MOVS     r0,#0                 ;418
000162  e9cd0100          STRD     r0,r1,[sp,#0]         ;418
000166  460b              MOV      r3,r1                 ;418
000168  460a              MOV      r2,r1                 ;418
00016a  4659              MOV      r1,r11                ;418
00016c  a838              ADD      r0,sp,#0xe0           ;418
00016e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEclEiiii ; Anki::Embedded::Array<int>::operator ()(int, int, int, int)
000172  f10d0ce0          ADD      r12,sp,#0xe0          ;418
000176  e8bc066f          LDM      r12!,{r0-r3,r5,r6,r9,r10};418
00017a  f10d0c44          ADD      r12,sp,#0x44          ;418
00017e  e8ac066f          STM      r12!,{r0-r3,r5,r6,r9,r10};418
000182  ae40              ADD      r6,sp,#0x100          ;418
000184  ce2f              LDM      r6!,{r0-r3,r5}        ;418
000186  ae19              ADD      r6,sp,#0x64           ;418
000188  c62f              STM      r6!,{r0-r3,r5}        ;418
00018a  f04f31ff          MOV      r1,#0xffffffff        ;418
00018e  a811              ADD      r0,sp,#0x44           ;418
000190  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
000194  2000              MOVS     r0,#0                 ;419
000196  9000              STR      r0,[sp,#0]            ;419
000198  1e43              SUBS     r3,r0,#1              ;419
00019a  4602              MOV      r2,r0                 ;419
00019c  9001              STR      r0,[sp,#4]            ;419
00019e  4659              MOV      r1,r11                ;419
0001a0  a838              ADD      r0,sp,#0xe0           ;419
0001a2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEclEiiii ; Anki::Embedded::Array<int>::operator ()(int, int, int, int)
0001a6  f10d0ce0          ADD      r12,sp,#0xe0          ;419
0001aa  e8bc066f          LDM      r12!,{r0-r3,r5,r6,r9,r10};419
0001ae  f10d0c78          ADD      r12,sp,#0x78          ;419
0001b2  e8ac066f          STM      r12!,{r0-r3,r5,r6,r9,r10};419
0001b6  ae40              ADD      r6,sp,#0x100          ;419
0001b8  ce2f              LDM      r6!,{r0-r3,r5}        ;419
0001ba  ae26              ADD      r6,sp,#0x98           ;419
0001bc  c62f              STM      r6!,{r0-r3,r5}        ;419
0001be  f04f31ff          MOV      r1,#0xffffffff        ;419
0001c2  a81e              ADD      r0,sp,#0x78           ;419
0001c4  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
0001c8  f04f30ff          MOV      r0,#0xffffffff        ;420
0001cc  9000              STR      r0,[sp,#0]            ;420
0001ce  4603              MOV      r3,r0                 ;420
0001d0  9001              STR      r0,[sp,#4]            ;420
0001d2  2200              MOVS     r2,#0                 ;420
0001d4  4659              MOV      r1,r11                ;420
0001d6  a838              ADD      r0,sp,#0xe0           ;420
0001d8  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIiEclEiiii ; Anki::Embedded::Array<int>::operator ()(int, int, int, int)
0001dc  f10d0ce0          ADD      r12,sp,#0xe0          ;420
0001e0  e8bc066f          LDM      r12!,{r0-r3,r5,r6,r9,r10};420
0001e4  f10d0cac          ADD      r12,sp,#0xac          ;420
0001e8  e8ac066f          STM      r12!,{r0-r3,r5,r6,r9,r10};420
0001ec  ae40              ADD      r6,sp,#0x100          ;420
0001ee  ce2f              LDM      r6!,{r0-r3,r5}        ;420
0001f0  ae33              ADD      r6,sp,#0xcc           ;420
0001f2  c62f              STM      r6!,{r0-r3,r5}        ;420
0001f4  f04f31ff          MOV      r1,#0xffffffff        ;420
0001f8  a82b              ADD      r0,sp,#0xac           ;420
0001fa  f7fffffe          BL       _ZN4Anki8Embedded10ArraySliceIiE3SetEi ; Anki::Embedded::ArraySlice<int>::Set(int)
0001fe  9802              LDR      r0,[sp,#8]            ;424
000200  f04f0a01          MOV      r10,#1                ;424
000204  1e40              SUBS     r0,r0,#1              ;424
000206  9038              STR      r0,[sp,#0xe0]         ;424
000208  2801              CMP      r0,#1                 ;424
00020a  f3408180          BLE.W    |L1.1294|
00020e  9845              LDR      r0,[sp,#0x114]        ;433
000210  1e40              SUBS     r0,r0,#1              ;433
000212  9001              STR      r0,[sp,#4]            ;433
                  |L1.532|
000214  f50d5280          ADD      r2,sp,#0x1000         ;433
000218  f04f0901          MOV      r9,#1                 ;433
00021c  f8d20140          LDR      r0,[r2,#0x140]        ;433
000220  9a45              LDR      r2,[sp,#0x114]        ;431
000222  6901              LDR      r1,[r0,#0x10]         ;431
000224  6880              LDR      r0,[r0,#8]            ;431
000226  fb0a1000          MLA      r0,r10,r0,r1          ;431
00022a  9003              STR      r0,[sp,#0xc]          ;431
00022c  f8db1008          LDR      r1,[r11,#8]           ;431
000230  f8db0010          LDR      r0,[r11,#0x10]        ;431
000234  fb0a0101          MLA      r1,r10,r1,r0          ;431
000238  9100              STR      r1,[sp,#0]            ;431
00023a  eb010182          ADD      r1,r1,r2,LSL #2       ;431
00023e  f04f30ff          MOV      r0,#0xffffffff        ;431
000242  f8410c04          STR      r0,[r1,#-4]           ;431
000246  9900              LDR      r1,[sp,#0]            ;431
000248  6008              STR      r0,[r1,#0]            ;433
00024a  9801              LDR      r0,[sp,#4]            ;433
00024c  2801              CMP      r0,#1                 ;433
00024e  f3408158          BLE.W    |L1.1282|
                  |L1.594|
000252  9800              LDR      r0,[sp,#0]            ;435
000254  eb000689          ADD      r6,r0,r9,LSL #2       ;435
000258  6830              LDR      r0,[r6,#0]            ;436
00025a  2800              CMP      r0,#0                 ;436
00025c  bfbc              ITT      LT                    ;436
00025e  2000              MOVLT    r0,#0                 ;436
000260  6030              STRLT    r0,[r6,#0]            ;436
000262  f3008148          BGT.W    |L1.1270|
000266  f8561c04          LDR      r1,[r6,#-4]           ;437
00026a  2900              CMP      r1,#0                 ;437
00026c  bfdc              ITT      LE                    ;437
00026e  6870              LDRLE    r0,[r6,#4]            ;437
000270  2800              CMPLE    r0,#0                 ;437
000272  dc09              BGT      |L1.648|
000274  eba60087          SUB      r0,r6,r7,LSL #2       ;437
000278  6800              LDR      r0,[r0,#0]            ;437
00027a  2800              CMP      r0,#0                 ;437
00027c  bfdc              ITT      LE                    ;437
00027e  f8560027          LDRLE    r0,[r6,r7,LSL #2]     ;437
000282  2800              CMPLE    r0,#0                 ;437
000284  f3408137          BLE.W    |L1.1270|
                  |L1.648|
000288  eb090049          ADD      r0,r9,r9,LSL #1       ;439
00028c  9a03              LDR      r2,[sp,#0xc]          ;439
00028e  9002              STR      r0,[sp,#8]            ;439
000290  4410              ADD      r0,r0,r2              ;439
000292  f44f7580          MOV      r5,#0x100             ;440
000296  2900              CMP      r1,#0                 ;441
000298  dd26              BLE      |L1.744|
00029a  7801              LDRB     r1,[r0,#0]            ;442
00029c  f8102c03          LDRB     r2,[r0,#-3]           ;442
0002a0  1a8b              SUBS     r3,r1,r2              ;442
0002a2  2b00              CMP      r3,#0                 ;442
0002a4  bfb8              IT       LT                    ;442
0002a6  425b              RSBLT    r3,r3,#0              ;442
0002a8  7841              LDRB     r1,[r0,#1]            ;442
0002aa  f8102c02          LDRB     r2,[r0,#-2]           ;442
0002ae  1a8a              SUBS     r2,r1,r2              ;442
0002b0  2a00              CMP      r2,#0                 ;442
0002b2  bfb8              IT       LT                    ;442
0002b4  4252              RSBLT    r2,r2,#0              ;442
0002b6  7881              LDRB     r1,[r0,#2]            ;442
0002b8  f810cc01          LDRB     r12,[r0,#-1]          ;442
0002bc  eba1010c          SUB      r1,r1,r12             ;442
0002c0  2900              CMP      r1,#0                 ;442
0002c2  bfb8              IT       LT                    ;442
0002c4  4249              RSBLT    r1,r1,#0              ;442
0002c6  eba30c02          SUB      r12,r3,r2             ;442
0002ca  ab46              ADD      r3,sp,#0x118          ;442
0002cc  eb030c8c          ADD      r12,r3,r12,LSL #2     ;442
0002d0  f8dcc400          LDR      r12,[r12,#0x400]      ;442
0002d4  4462              ADD      r2,r2,r12             ;442
0002d6  1a52              SUBS     r2,r2,r1              ;442
0002d8  eb030282          ADD      r2,r3,r2,LSL #2       ;442
0002dc  f8d22400          LDR      r2,[r2,#0x400]        ;442
0002e0  1855              ADDS     r5,r2,r1              ;442
0002e2  2dff              CMP      r5,#0xff              ;442
0002e4  f20081c6          BHI.W    |L1.1652|
                  |L1.744|
0002e8  6871              LDR      r1,[r6,#4]            ;443
0002ea  2900              CMP      r1,#0                 ;443
0002ec  dd2a              BLE      |L1.836|
0002ee  7801              LDRB     r1,[r0,#0]            ;445
0002f0  78c2              LDRB     r2,[r0,#3]            ;445
0002f2  1a8b              SUBS     r3,r1,r2              ;445
0002f4  2b00              CMP      r3,#0                 ;445
0002f6  bfb8              IT       LT                    ;445
0002f8  425b              RSBLT    r3,r3,#0              ;445
0002fa  7841              LDRB     r1,[r0,#1]            ;445
0002fc  7902              LDRB     r2,[r0,#4]            ;445
0002fe  1a89              SUBS     r1,r1,r2              ;445
000300  2900              CMP      r1,#0                 ;445
000302  bfb8              IT       LT                    ;445
000304  4249              RSBLT    r1,r1,#0              ;445
000306  7882              LDRB     r2,[r0,#2]            ;445
000308  f890c005          LDRB     r12,[r0,#5]           ;445
00030c  eba2020c          SUB      r2,r2,r12             ;445
000310  2a00              CMP      r2,#0                 ;445
000312  bfb8              IT       LT                    ;445
000314  4252              RSBLT    r2,r2,#0              ;445
000316  eba30c01          SUB      r12,r3,r1             ;445
00031a  ab46              ADD      r3,sp,#0x118          ;445
00031c  eb030c8c          ADD      r12,r3,r12,LSL #2     ;445
000320  f8dcc400          LDR      r12,[r12,#0x400]      ;445
000324  4461              ADD      r1,r1,r12             ;445
000326  1a89              SUBS     r1,r1,r2              ;445
000328  eb030181          ADD      r1,r3,r1,LSL #2       ;445
00032c  f8d11400          LDR      r1,[r1,#0x400]        ;445
000330  4411              ADD      r1,r1,r2              ;445
000332  29ff              CMP      r1,#0xff              ;445
000334  f200819e          BHI.W    |L1.1652|
000338  1a69              SUBS     r1,r5,r1              ;446
00033a  eb030181          ADD      r1,r3,r1,LSL #2       ;446
00033e  f8d11400          LDR      r1,[r1,#0x400]        ;446
000342  1a6d              SUBS     r5,r5,r1              ;446
                  |L1.836|
000344  eba60187          SUB      r1,r6,r7,LSL #2       ;448
000348  6809              LDR      r1,[r1,#0]            ;448
00034a  2900              CMP      r1,#0                 ;448
00034c  dd2e              BLE      |L1.940|
00034e  eba00208          SUB      r2,r0,r8              ;450
000352  7801              LDRB     r1,[r0,#0]            ;450
000354  7813              LDRB     r3,[r2,#0]            ;450
000356  1acb              SUBS     r3,r1,r3              ;450
000358  2b00              CMP      r3,#0                 ;450
00035a  bfb8              IT       LT                    ;450
00035c  425b              RSBLT    r3,r3,#0              ;450
00035e  7841              LDRB     r1,[r0,#1]            ;450
000360  f892c001          LDRB     r12,[r2,#1]           ;450
000364  eba1010c          SUB      r1,r1,r12             ;450
000368  2900              CMP      r1,#0                 ;450
00036a  bfb8              IT       LT                    ;450
00036c  4249              RSBLT    r1,r1,#0              ;450
00036e  f890e002          LDRB     lr,[r0,#2]            ;450
000372  7892              LDRB     r2,[r2,#2]            ;450
000374  ebae0202          SUB      r2,lr,r2              ;450
000378  2a00              CMP      r2,#0                 ;450
00037a  bfb8              IT       LT                    ;450
00037c  4252              RSBLT    r2,r2,#0              ;450
00037e  eba30c01          SUB      r12,r3,r1             ;450
000382  ab46              ADD      r3,sp,#0x118          ;450
000384  eb030c8c          ADD      r12,r3,r12,LSL #2     ;450
000388  f8dcc400          LDR      r12,[r12,#0x400]      ;450
00038c  4461              ADD      r1,r1,r12             ;450
00038e  1a89              SUBS     r1,r1,r2              ;450
000390  eb030181          ADD      r1,r3,r1,LSL #2       ;450
000394  f8d11400          LDR      r1,[r1,#0x400]        ;450
000398  4411              ADD      r1,r1,r2              ;450
00039a  29ff              CMP      r1,#0xff              ;450
00039c  f200816a          BHI.W    |L1.1652|
0003a0  1a69              SUBS     r1,r5,r1              ;451
0003a2  eb030181          ADD      r1,r3,r1,LSL #2       ;451
0003a6  f8d11400          LDR      r1,[r1,#0x400]        ;451
0003aa  1a6d              SUBS     r5,r5,r1              ;451
                  |L1.940|
0003ac  f8561027          LDR      r1,[r6,r7,LSL #2]     ;453
0003b0  2900              CMP      r1,#0                 ;453
0003b2  dd2c              BLE      |L1.1038|
0003b4  7801              LDRB     r1,[r0,#0]            ;455
0003b6  f8102008          LDRB     r2,[r0,r8]            ;455
0003ba  1a8a              SUBS     r2,r1,r2              ;455
0003bc  2a00              CMP      r2,#0                 ;455
0003be  bfb8              IT       LT                    ;455
0003c0  4252              RSBLT    r2,r2,#0              ;455
0003c2  7841              LDRB     r1,[r0,#1]            ;455
0003c4  eb000308          ADD      r3,r0,r8              ;455
0003c8  f893c001          LDRB     r12,[r3,#1]           ;455
0003cc  eba1010c          SUB      r1,r1,r12             ;455
0003d0  2900              CMP      r1,#0                 ;455
0003d2  bfb8              IT       LT                    ;455
0003d4  4249              RSBLT    r1,r1,#0              ;455
0003d6  7880              LDRB     r0,[r0,#2]            ;455
0003d8  789b              LDRB     r3,[r3,#2]            ;455
0003da  1ac0              SUBS     r0,r0,r3              ;455
0003dc  2800              CMP      r0,#0                 ;455
0003de  bfb8              IT       LT                    ;455
0003e0  4240              RSBLT    r0,r0,#0              ;455
0003e2  1a53              SUBS     r3,r2,r1              ;455
0003e4  aa46              ADD      r2,sp,#0x118          ;455
0003e6  eb020383          ADD      r3,r2,r3,LSL #2       ;455
0003ea  f8d33400          LDR      r3,[r3,#0x400]        ;455
0003ee  4419              ADD      r1,r1,r3              ;455
0003f0  1a09              SUBS     r1,r1,r0              ;455
0003f2  eb020181          ADD      r1,r2,r1,LSL #2       ;455
0003f6  f8d11400          LDR      r1,[r1,#0x400]        ;455
0003fa  4408              ADD      r0,r0,r1              ;455
0003fc  28ff              CMP      r0,#0xff              ;455
0003fe  f2008139          BHI.W    |L1.1652|
000402  1a28              SUBS     r0,r5,r0              ;456
000404  eb020080          ADD      r0,r2,r0,LSL #2       ;456
000408  f8d00400          LDR      r0,[r0,#0x400]        ;456
00040c  1a2d              SUBS     r5,r5,r0              ;456
                  |L1.1038|
00040e  b96c              CBNZ     r4,|L1.1068|
000410  f50d5080          ADD      r0,sp,#0x1000         ;459
000414  f44f6196          MOV      r1,#0x4b0             ;459
000418  f8d00148          LDR      r0,[r0,#0x148]        ;459
00041c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000420  2100              MOVS     r1,#0                 ;459
                  |L1.1058|
000422  eb010241          ADD      r2,r1,r1,LSL #1       ;459
000426  eb000382          ADD      r3,r0,r2,LSL #2       ;459
00042a  e041              B        |L1.1200|
                  |L1.1068|
00042c  e04a              B        |L1.1220|
00042e  0000              DCW      0x0000
                  |L1.1072|
                          DCD      ||.constdata||+0xc7
                  |L1.1076|
000434  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\opencvLight_vision.cp"
000438  6f726574
00043c  6563685c
000440  76697369
000444  6f6e5c72
000448  6f626f74
00044c  5c737263
000450  5c6f7065
000454  6e63764c
000458  69676874
00045c  5f766973
000460  696f6e2e
000464  6370    
000466  7000              DCB      "p",0
                  |L1.1128|
000468  73726320          DCB      "src and dst must be the same size",0
00046c  616e6420
000470  64737420
000474  6d757374
000478  20626520
00047c  74686520
000480  73616d65
000484  2073697a
000488  6500    
00048a  00                DCB      0
00048b  00                DCB      0
                  |L1.1164|
00048c  43616e6e          DCB      "CannyEdgeDetection",0
000490  79456467
000494  65446574
000498  65637469
00049c  6f6e00  
00049f  00                DCB      0
                  |L1.1184|
0004a0  496e7661          DCB      "Invalid objects",0
0004a4  6c696420
0004a8  6f626a65
0004ac  63747300
                  |L1.1200|
0004b0  330c              ADDS     r3,r3,#0xc            ;459
0004b2  1c49              ADDS     r1,r1,#1              ;459
0004b4  f8403022          STR      r3,[r0,r2,LSL #2]     ;459
0004b8  2963              CMP      r1,#0x63              ;459
0004ba  dbb2              BLT      |L1.1058|
0004bc  2100              MOVS     r1,#0                 ;459
0004be  4604              MOV      r4,r0                 ;459
0004c0  f8c014a4          STR      r1,[r0,#0x4a4]        ;459
                  |L1.1220|
0004c4  4620              MOV      r0,r4                 ;459
0004c6  6824              LDR      r4,[r4,#0]            ;459
0004c8  2100              MOVS     r1,#0                 ;459
0004ca  6001              STR      r1,[r0,#0]            ;459
0004cc  fb0a9107          MLA      r1,r10,r7,r9          ;459
0004d0  6041              STR      r1,[r0,#4]            ;459
0004d2  9902              LDR      r1,[sp,#8]            ;459
0004d4  f50d6312          ADD      r3,sp,#0x920          ;459
0004d8  fb0a1108          MLA      r1,r10,r8,r1          ;459
0004dc  6081              STR      r1,[r0,#8]            ;459
0004de  eb0301c5          ADD      r1,r3,r5,LSL #3       ;459
0004e2  684a              LDR      r2,[r1,#4]            ;459
0004e4  2a00              CMP      r2,#0                 ;459
0004e6  bf14              ITE      NE                    ;459
0004e8  6010              STRNE    r0,[r2,#0]            ;459
0004ea  f8430035          STREQ    r0,[r3,r5,LSL #3]     ;459
0004ee  6048              STR      r0,[r1,#4]            ;460
0004f0  f06f0001          MVN      r0,#1                 ;460
0004f4  6030              STR      r0,[r6,#0]            ;460
                  |L1.1270|
0004f6  9801              LDR      r0,[sp,#4]            ;433
0004f8  f1090901          ADD      r9,r9,#1              ;433
0004fc  4548              CMP      r0,r9                 ;433
0004fe  f73faea8          BGT      |L1.594|
                  |L1.1282|
000502  9838              LDR      r0,[sp,#0xe0]         ;424
000504  f10a0a01          ADD      r10,r10,#1            ;424
000508  4550              CMP      r0,r10                ;424
00050a  f73fae83          BGT      |L1.532|
                  |L1.1294|
00050e  2600              MOVS     r6,#0                 ;466
000510  f50d6012          ADD      r0,sp,#0x920          ;337
                  |L1.1300|
000514  f8501036          LDR      r1,[r0,r6,LSL #3]     ;467
000518  b919              CBNZ     r1,|L1.1314|
00051a  1c76              ADDS     r6,r6,#1              ;466
00051c  f5b67f80          CMP      r6,#0x100             ;466
000520  dbf8              BLT      |L1.1300|
                  |L1.1314|
000522  f5b67f80          CMP      r6,#0x100             ;471
000526  d02d              BEQ      |L1.1412|
000528  f50d5c80          ADD      r12,sp,#0x1000        ;471
00052c  2100              MOVS     r1,#0                 ;478
00052e  f8dc2140          LDR      r2,[r12,#0x140]       ;478
000532  6913              LDR      r3,[r2,#0x10]         ;478
000534  6892              LDR      r2,[r2,#8]            ;478
000536  fb013102          MLA      r1,r1,r2,r3           ;478
00053a  9103              STR      r1,[sp,#0xc]          ;479
00053c  f8db3008          LDR      r3,[r11,#8]           ;479
000540  f8db2010          LDR      r2,[r11,#0x10]        ;479
000544  2100              MOVS     r1,#0                 ;479
000546  fb012103          MLA      r1,r1,r3,r2           ;479
00054a  9102              STR      r1,[sp,#8]            ;479
                  |L1.1356|
00054c  f50d6112          ADD      r1,sp,#0x920          ;489
000550  2000              MOVS     r0,#0                 ;485
000552  f8512036          LDR      r2,[r1,r6,LSL #3]     ;489
000556  b96a              CBNZ     r2,|L1.1396|
000558  1c76              ADDS     r6,r6,#1              ;491
00055a  f5b67f80          CMP      r6,#0x100             ;491
00055e  da06              BGE      |L1.1390|
                  |L1.1376|
000560  f8512036          LDR      r2,[r1,r6,LSL #3]     ;492
000564  b91a              CBNZ     r2,|L1.1390|
000566  1c76              ADDS     r6,r6,#1              ;491
000568  f5b67f80          CMP      r6,#0x100             ;491
00056c  dbf8              BLT      |L1.1376|
                  |L1.1390|
00056e  f5b67f80          CMP      r6,#0x100             ;494
000572  d007              BEQ      |L1.1412|
                  |L1.1396|
000574  460b              MOV      r3,r1                 ;499
000576  f8511036          LDR      r1,[r1,r6,LSL #3]     ;499
00057a  680a              LDR      r2,[r1,#0]            ;499
00057c  f8432036          STR      r2,[r3,r6,LSL #3]     ;499
000580  b932              CBNZ     r2,|L1.1424|
000582  e001              B        |L1.1416|
                  |L1.1412|
000584  2000              MOVS     r0,#0                 ;558
000586  e599              B        |L1.188|
                  |L1.1416|
000588  eb0303c6          ADD      r3,r3,r6,LSL #3       ;499
00058c  2200              MOVS     r2,#0                 ;499
00058e  605a              STR      r2,[r3,#4]            ;499
                  |L1.1424|
000590  600c              STR      r4,[r1,#0]            ;499
000592  460c              MOV      r4,r1                 ;499
000594  f8d1b004          LDR      r11,[r1,#4]           ;501
000598  f8d1a008          LDR      r10,[r1,#8]           ;501
00059c  9902              LDR      r1,[sp,#8]            ;501
00059e  eb01098b          ADD      r9,r1,r11,LSL #2      ;501
0005a2  9903              LDR      r1,[sp,#0xc]          ;502
0005a4  eb01050a          ADD      r5,r1,r10             ;502
0005a8  f8591c04          LDR      r1,[r9,#-4]           ;503
0005ac  2900              CMP      r1,#0                 ;504
0005ae  bfc8              IT       GT                    ;504
0005b0  4608              MOVGT    r0,r1                 ;504
0005b2  f8d91004          LDR      r1,[r9,#4]            ;506
0005b6  2900              CMP      r1,#0                 ;506
0005b8  dd07              BLE      |L1.1482|
0005ba  2800              CMP      r0,#0                 ;508
0005bc  bf08              IT       EQ                    ;508
0005be  4608              MOVEQ    r0,r1                 ;508
0005c0  d003              BEQ      |L1.1482|
0005c2  4281              CMP      r1,r0                 ;509
0005c4  bf18              IT       NE                    ;509
0005c6  f04f30ff          MOVNE    r0,#0xffffffff        ;509
                  |L1.1482|
0005ca  eba90187          SUB      r1,r9,r7,LSL #2       ;511
0005ce  9101              STR      r1,[sp,#4]            ;511
0005d0  6809              LDR      r1,[r1,#0]            ;511
0005d2  2900              CMP      r1,#0                 ;512
0005d4  dd07              BLE      |L1.1510|
0005d6  2800              CMP      r0,#0                 ;514
0005d8  bf08              IT       EQ                    ;514
0005da  4608              MOVEQ    r0,r1                 ;514
0005dc  d003              BEQ      |L1.1510|
0005de  4281              CMP      r1,r0                 ;515
0005e0  bf18              IT       NE                    ;515
0005e2  f04f30ff          MOVNE    r0,#0xffffffff        ;515
                  |L1.1510|
0005e6  f8591027          LDR      r1,[r9,r7,LSL #2]     ;517
0005ea  2900              CMP      r1,#0                 ;518
0005ec  dd08              BLE      |L1.1536|
0005ee  2800              CMP      r0,#0                 ;520
0005f0  bf08              IT       EQ                    ;520
0005f2  4608              MOVEQ    r0,r1                 ;520
0005f4  d004              BEQ      |L1.1536|
0005f6  4281              CMP      r1,r0                 ;521
0005f8  bf18              IT       NE                    ;521
0005fa  f04f30ff          MOVNE    r0,#0xffffffff        ;521
0005fe  e000              B        |L1.1538|
                  |L1.1536|
000600  b3c0              CBZ      r0,|L1.1652|
                  |L1.1538|
000602  f8c90000          STR      r0,[r9,#0]            ;525
000606  1c40              ADDS     r0,r0,#1              ;525
000608  d0a0              BEQ      |L1.1356|
00060a  f8590c04          LDR      r0,[r9,#-4]           ;528
00060e  b398              CBZ      r0,|L1.1656|
                  |L1.1552|
000610  f8d90004          LDR      r0,[r9,#4]            ;535
000614  2800              CMP      r0,#0                 ;535
000616  d07d              BEQ      |L1.1812|
                  |L1.1560|
000618  9801              LDR      r0,[sp,#4]            ;542
00061a  6800              LDR      r0,[r0,#0]            ;542
00061c  2800              CMP      r0,#0                 ;542
00061e  f00080ed          BEQ.W    |L1.2044|
                  |L1.1570|
000622  f8590027          LDR      r0,[r9,r7,LSL #2]     ;549
000626  2800              CMP      r0,#0                 ;549
000628  d190              BNE      |L1.1356|
00062a  7828              LDRB     r0,[r5,#0]            ;551
00062c  f8151008          LDRB     r1,[r5,r8]            ;551
000630  1a42              SUBS     r2,r0,r1              ;551
000632  2a00              CMP      r2,#0                 ;551
000634  bfb8              IT       LT                    ;551
000636  4252              RSBLT    r2,r2,#0              ;551
000638  7868              LDRB     r0,[r5,#1]            ;551
00063a  eb050108          ADD      r1,r5,r8              ;551
00063e  784b              LDRB     r3,[r1,#1]            ;551
000640  1ac0              SUBS     r0,r0,r3              ;551
000642  2800              CMP      r0,#0                 ;551
000644  bfb8              IT       LT                    ;551
000646  4240              RSBLT    r0,r0,#0              ;551
000648  78ab              LDRB     r3,[r5,#2]            ;551
00064a  7889              LDRB     r1,[r1,#2]            ;551
00064c  1a59              SUBS     r1,r3,r1              ;551
00064e  2900              CMP      r1,#0                 ;551
000650  bfb8              IT       LT                    ;551
000652  4249              RSBLT    r1,r1,#0              ;551
000654  1a13              SUBS     r3,r2,r0              ;551
000656  aa46              ADD      r2,sp,#0x118          ;551
000658  eb020383          ADD      r3,r2,r3,LSL #2       ;551
00065c  f8d33400          LDR      r3,[r3,#0x400]        ;551
000660  4418              ADD      r0,r0,r3              ;551
000662  1a40              SUBS     r0,r0,r1              ;551
000664  eb020080          ADD      r0,r2,r0,LSL #2       ;551
000668  f8d00400          LDR      r0,[r0,#0x400]        ;551
00066c  1845              ADDS     r5,r0,r1              ;551
00066e  2dff              CMP      r5,#0xff              ;551
000670  f2408125          BLS.W    |L1.2238|
                  |L1.1652|
000674  f7fffffe          BL       abort
                  |L1.1656|
000678  7828              LDRB     r0,[r5,#0]            ;530
00067a  f8151c03          LDRB     r1,[r5,#-3]           ;530
00067e  1a42              SUBS     r2,r0,r1              ;530
000680  2a00              CMP      r2,#0                 ;530
000682  bfb8              IT       LT                    ;530
000684  4252              RSBLT    r2,r2,#0              ;530
000686  7868              LDRB     r0,[r5,#1]            ;530
000688  f8151c02          LDRB     r1,[r5,#-2]           ;530
00068c  1a41              SUBS     r1,r0,r1              ;530
00068e  2900              CMP      r1,#0                 ;530
000690  bfb8              IT       LT                    ;530
000692  4249              RSBLT    r1,r1,#0              ;530
000694  78a8              LDRB     r0,[r5,#2]            ;530
000696  f8153c01          LDRB     r3,[r5,#-1]           ;530
00069a  1ac0              SUBS     r0,r0,r3              ;530
00069c  2800              CMP      r0,#0                 ;530
00069e  bfb8              IT       LT                    ;530
0006a0  4240              RSBLT    r0,r0,#0              ;530
0006a2  1a53              SUBS     r3,r2,r1              ;530
0006a4  aa46              ADD      r2,sp,#0x118          ;530
0006a6  eb020383          ADD      r3,r2,r3,LSL #2       ;530
0006aa  f8d33400          LDR      r3,[r3,#0x400]        ;530
0006ae  4419              ADD      r1,r1,r3              ;530
0006b0  1a09              SUBS     r1,r1,r0              ;530
0006b2  eb020181          ADD      r1,r2,r1,LSL #2       ;530
0006b6  f8d11400          LDR      r1,[r1,#0x400]        ;530
0006ba  4408              ADD      r0,r0,r1              ;530
0006bc  9000              STR      r0,[sp,#0]            ;530
0006be  28ff              CMP      r0,#0xff              ;530
0006c0  d8d8              BHI      |L1.1652|
0006c2  b9b4              CBNZ     r4,|L1.1778|
0006c4  f50d5080          ADD      r0,sp,#0x1000         ;531
0006c8  f44f6196          MOV      r1,#0x4b0             ;531
0006cc  f8d00148          LDR      r0,[r0,#0x148]        ;531
0006d0  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
0006d4  2100              MOVS     r1,#0                 ;531
                  |L1.1750|
0006d6  eb010241          ADD      r2,r1,r1,LSL #1       ;531
0006da  eb000382          ADD      r3,r0,r2,LSL #2       ;531
0006de  330c              ADDS     r3,r3,#0xc            ;531
0006e0  1c49              ADDS     r1,r1,#1              ;531
0006e2  f8403022          STR      r3,[r0,r2,LSL #2]     ;531
0006e6  2963              CMP      r1,#0x63              ;531
0006e8  dbf5              BLT      |L1.1750|
0006ea  2100              MOVS     r1,#0                 ;531
0006ec  4604              MOV      r4,r0                 ;531
0006ee  f8c014a4          STR      r1,[r0,#0x4a4]        ;531
                  |L1.1778|
0006f2  4620              MOV      r0,r4                 ;531
0006f4  6824              LDR      r4,[r4,#0]            ;531
0006f6  2100              MOVS     r1,#0                 ;531
0006f8  6001              STR      r1,[r0,#0]            ;531
0006fa  f1ab0101          SUB      r1,r11,#1             ;531
0006fe  6041              STR      r1,[r0,#4]            ;531
000700  f1aa0103          SUB      r1,r10,#3             ;531
000704  6081              STR      r1,[r0,#8]            ;531
000706  9900              LDR      r1,[sp,#0]            ;531
000708  f50d6312          ADD      r3,sp,#0x920          ;531
00070c  eb0301c1          ADD      r1,r3,r1,LSL #3       ;531
000710  684a              LDR      r2,[r1,#4]            ;531
000712  e000              B        |L1.1814|
                  |L1.1812|
000714  e013              B        |L1.1854|
                  |L1.1814|
000716  2a00              CMP      r2,#0                 ;531
000718  bf12              ITEE     NE                    ;531
00071a  6010              STRNE    r0,[r2,#0]            ;531
00071c  9a00              LDREQ    r2,[sp,#0]            ;531
00071e  f8430032          STREQ    r0,[r3,r2,LSL #3]     ;531
000722  6048              STR      r0,[r1,#4]            ;532
000724  9800              LDR      r0,[sp,#0]            ;532
000726  1a31              SUBS     r1,r6,r0              ;532
000728  a846              ADD      r0,sp,#0x118          ;532
00072a  eb000081          ADD      r0,r0,r1,LSL #2       ;532
00072e  f8d00400          LDR      r0,[r0,#0x400]        ;532
000732  1a36              SUBS     r6,r6,r0              ;532
000734  f06f0001          MVN      r0,#1                 ;533
000738  f8490c04          STR      r0,[r9,#-4]           ;533
00073c  e768              B        |L1.1552|
                  |L1.1854|
00073e  7828              LDRB     r0,[r5,#0]            ;537
000740  78e9              LDRB     r1,[r5,#3]            ;537
000742  1a42              SUBS     r2,r0,r1              ;537
000744  2a00              CMP      r2,#0                 ;537
000746  bfb8              IT       LT                    ;537
000748  4252              RSBLT    r2,r2,#0              ;537
00074a  7868              LDRB     r0,[r5,#1]            ;537
00074c  7929              LDRB     r1,[r5,#4]            ;537
00074e  1a41              SUBS     r1,r0,r1              ;537
000750  2900              CMP      r1,#0                 ;537
000752  bfb8              IT       LT                    ;537
000754  4249              RSBLT    r1,r1,#0              ;537
000756  78a8              LDRB     r0,[r5,#2]            ;537
000758  796b              LDRB     r3,[r5,#5]            ;537
00075a  1ac0              SUBS     r0,r0,r3              ;537
00075c  2800              CMP      r0,#0                 ;537
00075e  bfb8              IT       LT                    ;537
000760  4240              RSBLT    r0,r0,#0              ;537
000762  1a53              SUBS     r3,r2,r1              ;537
000764  aa46              ADD      r2,sp,#0x118          ;537
000766  eb020383          ADD      r3,r2,r3,LSL #2       ;537
00076a  f8d33400          LDR      r3,[r3,#0x400]        ;537
00076e  4419              ADD      r1,r1,r3              ;537
000770  1a09              SUBS     r1,r1,r0              ;537
000772  eb020181          ADD      r1,r2,r1,LSL #2       ;537
000776  f8d11400          LDR      r1,[r1,#0x400]        ;537
00077a  4408              ADD      r0,r0,r1              ;537
00077c  9000              STR      r0,[sp,#0]            ;537
00077e  28ff              CMP      r0,#0xff              ;537
000780  f63faf78          BHI      |L1.1652|
000784  b9b4              CBNZ     r4,|L1.1972|
000786  f50d5080          ADD      r0,sp,#0x1000         ;538
00078a  f44f6196          MOV      r1,#0x4b0             ;538
00078e  f8d00148          LDR      r0,[r0,#0x148]        ;538
000792  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000796  2100              MOVS     r1,#0                 ;538
                  |L1.1944|
000798  eb010241          ADD      r2,r1,r1,LSL #1       ;538
00079c  eb000382          ADD      r3,r0,r2,LSL #2       ;538
0007a0  330c              ADDS     r3,r3,#0xc            ;538
0007a2  1c49              ADDS     r1,r1,#1              ;538
0007a4  f8403022          STR      r3,[r0,r2,LSL #2]     ;538
0007a8  2963              CMP      r1,#0x63              ;538
0007aa  dbf5              BLT      |L1.1944|
0007ac  2100              MOVS     r1,#0                 ;538
0007ae  4604              MOV      r4,r0                 ;538
0007b0  f8c014a4          STR      r1,[r0,#0x4a4]        ;538
                  |L1.1972|
0007b4  4620              MOV      r0,r4                 ;538
0007b6  6824              LDR      r4,[r4,#0]            ;538
0007b8  2100              MOVS     r1,#0                 ;538
0007ba  6001              STR      r1,[r0,#0]            ;538
0007bc  f10b0101          ADD      r1,r11,#1             ;538
0007c0  6041              STR      r1,[r0,#4]            ;538
0007c2  f10a0103          ADD      r1,r10,#3             ;538
0007c6  6081              STR      r1,[r0,#8]            ;538
0007c8  9900              LDR      r1,[sp,#0]            ;538
0007ca  f50d6312          ADD      r3,sp,#0x920          ;538
0007ce  eb0301c1          ADD      r1,r3,r1,LSL #3       ;538
0007d2  684a              LDR      r2,[r1,#4]            ;538
0007d4  2a00              CMP      r2,#0                 ;538
0007d6  bf12              ITEE     NE                    ;538
0007d8  6010              STRNE    r0,[r2,#0]            ;538
0007da  9a00              LDREQ    r2,[sp,#0]            ;538
0007dc  f8430032          STREQ    r0,[r3,r2,LSL #3]     ;538
0007e0  6048              STR      r0,[r1,#4]            ;539
0007e2  9800              LDR      r0,[sp,#0]            ;539
0007e4  1a31              SUBS     r1,r6,r0              ;539
0007e6  a846              ADD      r0,sp,#0x118          ;539
0007e8  eb000081          ADD      r0,r0,r1,LSL #2       ;539
0007ec  f8d00400          LDR      r0,[r0,#0x400]        ;539
0007f0  1a36              SUBS     r6,r6,r0              ;539
0007f2  f06f0001          MVN      r0,#1                 ;540
0007f6  f8c90004          STR      r0,[r9,#4]            ;538
0007fa  e70d              B        |L1.1560|
                  |L1.2044|
0007fc  eba50008          SUB      r0,r5,r8              ;544
000800  7829              LDRB     r1,[r5,#0]            ;544
000802  7802              LDRB     r2,[r0,#0]            ;544
000804  1a8a              SUBS     r2,r1,r2              ;544
000806  2a00              CMP      r2,#0                 ;544
000808  bfb8              IT       LT                    ;544
00080a  4252              RSBLT    r2,r2,#0              ;544
00080c  7869              LDRB     r1,[r5,#1]            ;544
00080e  7843              LDRB     r3,[r0,#1]            ;544
000810  1ac9              SUBS     r1,r1,r3              ;544
000812  2900              CMP      r1,#0                 ;544
000814  bfb8              IT       LT                    ;544
000816  4249              RSBLT    r1,r1,#0              ;544
000818  78ab              LDRB     r3,[r5,#2]            ;544
00081a  7880              LDRB     r0,[r0,#2]            ;544
00081c  1a18              SUBS     r0,r3,r0              ;544
00081e  2800              CMP      r0,#0                 ;544
000820  bfb8              IT       LT                    ;544
000822  4240              RSBLT    r0,r0,#0              ;544
000824  1a53              SUBS     r3,r2,r1              ;544
000826  aa46              ADD      r2,sp,#0x118          ;544
000828  eb020383          ADD      r3,r2,r3,LSL #2       ;544
00082c  f8d33400          LDR      r3,[r3,#0x400]        ;544
000830  4419              ADD      r1,r1,r3              ;544
000832  1a09              SUBS     r1,r1,r0              ;544
000834  eb020181          ADD      r1,r2,r1,LSL #2       ;544
000838  f8d11400          LDR      r1,[r1,#0x400]        ;544
00083c  4408              ADD      r0,r0,r1              ;544
00083e  9000              STR      r0,[sp,#0]            ;544
000840  28ff              CMP      r0,#0xff              ;544
000842  f63faf17          BHI      |L1.1652|
000846  b9b4              CBNZ     r4,|L1.2166|
000848  f50d5080          ADD      r0,sp,#0x1000         ;545
00084c  f44f6196          MOV      r1,#0x4b0             ;545
000850  f8d00148          LDR      r0,[r0,#0x148]        ;545
000854  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000858  2100              MOVS     r1,#0                 ;545
                  |L1.2138|
00085a  eb010241          ADD      r2,r1,r1,LSL #1       ;545
00085e  eb000382          ADD      r3,r0,r2,LSL #2       ;545
000862  330c              ADDS     r3,r3,#0xc            ;545
000864  1c49              ADDS     r1,r1,#1              ;545
000866  f8403022          STR      r3,[r0,r2,LSL #2]     ;545
00086a  2963              CMP      r1,#0x63              ;545
00086c  dbf5              BLT      |L1.2138|
00086e  2100              MOVS     r1,#0                 ;545
000870  4604              MOV      r4,r0                 ;545
000872  f8c014a4          STR      r1,[r0,#0x4a4]        ;545
                  |L1.2166|
000876  4620              MOV      r0,r4                 ;545
000878  6824              LDR      r4,[r4,#0]            ;545
00087a  2100              MOVS     r1,#0                 ;545
00087c  6001              STR      r1,[r0,#0]            ;545
00087e  ebab0107          SUB      r1,r11,r7             ;545
000882  6041              STR      r1,[r0,#4]            ;545
000884  ebaa0108          SUB      r1,r10,r8             ;545
000888  6081              STR      r1,[r0,#8]            ;545
00088a  9900              LDR      r1,[sp,#0]            ;545
00088c  f50d6312          ADD      r3,sp,#0x920          ;545
000890  eb0301c1          ADD      r1,r3,r1,LSL #3       ;545
000894  684a              LDR      r2,[r1,#4]            ;545
000896  2a00              CMP      r2,#0                 ;545
000898  bf12              ITEE     NE                    ;545
00089a  6010              STRNE    r0,[r2,#0]            ;545
00089c  9a00              LDREQ    r2,[sp,#0]            ;545
00089e  f8430032          STREQ    r0,[r3,r2,LSL #3]     ;545
0008a2  6048              STR      r0,[r1,#4]            ;546
0008a4  9800              LDR      r0,[sp,#0]            ;546
0008a6  1a31              SUBS     r1,r6,r0              ;546
0008a8  a846              ADD      r0,sp,#0x118          ;546
0008aa  eb000081          ADD      r0,r0,r1,LSL #2       ;546
0008ae  9901              LDR      r1,[sp,#4]            ;547
0008b0  f8d00400          LDR      r0,[r0,#0x400]        ;546
0008b4  1a36              SUBS     r6,r6,r0              ;546
0008b6  f06f0001          MVN      r0,#1                 ;547
0008ba  6008              STR      r0,[r1,#0]            ;545
0008bc  e6b1              B        |L1.1570|
                  |L1.2238|
0008be  b9bc              CBNZ     r4,|L1.2288|
0008c0  f50d5080          ADD      r0,sp,#0x1000         ;552
0008c4  f44f6196          MOV      r1,#0x4b0             ;552
0008c8  f8d00148          LDR      r0,[r0,#0x148]        ;552
0008cc  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
0008d0  2100              MOVS     r1,#0                 ;552
                  |L1.2258|
0008d2  eb010241          ADD      r2,r1,r1,LSL #1       ;552
0008d6  eb000382          ADD      r3,r0,r2,LSL #2       ;552
0008da  f1030c0c          ADD      r12,r3,#0xc           ;552
0008de  1c49              ADDS     r1,r1,#1              ;552
0008e0  f840c022          STR      r12,[r0,r2,LSL #2]    ;552
0008e4  2963              CMP      r1,#0x63              ;552
0008e6  dbf4              BLT      |L1.2258|
0008e8  2100              MOVS     r1,#0                 ;552
0008ea  4604              MOV      r4,r0                 ;552
0008ec  f8c014a4          STR      r1,[r0,#0x4a4]        ;552
                  |L1.2288|
0008f0  4620              MOV      r0,r4                 ;552
0008f2  6824              LDR      r4,[r4,#0]            ;552
0008f4  2100              MOVS     r1,#0                 ;552
0008f6  6001              STR      r1,[r0,#0]            ;552
0008f8  eb0b0107          ADD      r1,r11,r7             ;552
0008fc  6041              STR      r1,[r0,#4]            ;552
0008fe  f50d6312          ADD      r3,sp,#0x920          ;552
000902  eb0a0108          ADD      r1,r10,r8             ;552
000906  eb0302c5          ADD      r2,r3,r5,LSL #3       ;552
00090a  6081              STR      r1,[r0,#8]            ;552
00090c  6851              LDR      r1,[r2,#4]            ;552
00090e  2900              CMP      r1,#0                 ;552
000910  bf14              ITE      NE                    ;552
000912  6008              STRNE    r0,[r1,#0]            ;552
000914  f8430035          STREQ    r0,[r3,r5,LSL #3]     ;552
000918  1b71              SUBS     r1,r6,r5              ;553
00091a  6050              STR      r0,[r2,#4]            ;553
00091c  a846              ADD      r0,sp,#0x118          ;553
00091e  eb000081          ADD      r0,r0,r1,LSL #2       ;553
000922  f8d00400          LDR      r0,[r0,#0x400]        ;553
000926  1a36              SUBS     r6,r6,r0              ;553
000928  f06f0001          MVN      r0,#1                 ;554
00092c  f8490027          STR      r0,[r9,r7,LSL #2]     ;554
000930  e60c              B        |L1.1356|
;;;560      } // namespace Embedded
                          ENDP


                          AREA ||i._ZN4Anki8Embedded18CannyEdgeDetectionERKNS0_5ArrayIhEERS2_iiiNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded18CannyEdgeDetectionERKNS0_5ArrayIhEERS2_iiiNS0_11MemoryStackE PROC ; Anki::Embedded::CannyEdgeDetection(const Anki::Embedded::Array<unsigned char>&, Anki::Embedded::Array<unsigned char>&, int, int, int, Anki::Embedded::MemoryStack)
;;;54       {
;;;55         Result CannyEdgeDetection(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;56           const Array<u8> &src, Array<u8> &dst,
;;;57           const s32 low_thresh, const s32 high_thresh,
;;;58           const s32 aperture_size,
;;;59           MemoryStack scratch)
;;;60         {
000004  b0b1              SUB      sp,sp,#0xc4
000006  4604              MOV      r4,r0
;;;61           BeginBenchmark("Canny_init");
000008  a0fe              ADR      r0,|L2.1028|
00000a  9f3e              LDR      r7,[sp,#0xf8]
00000c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;62     
;;;63           const s32 imageHeight = src.get_size(0);
000010  2100              MOVS     r1,#0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;64           const s32 imageWidth = src.get_size(1);
000018  9013              STR      r0,[sp,#0x4c]
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000022  4605              MOV      r5,r0
000024  6920              LDR      r0,[r4,#0x10]
000026  2800              CMP      r0,#0
000028  d056              BEQ      |L2.216|
00002a  6820              LDR      r0,[r4,#0]
00002c  2800              CMP      r0,#0
00002e  bfa4              ITT      GE
000030  6860              LDRGE    r0,[r4,#4]
000032  2800              CMPGE    r0,#0
000034  db50              BLT      |L2.216|
000036  9832              LDR      r0,[sp,#0xc8]
000038  6900              LDR      r0,[r0,#0x10]
00003a  2800              CMP      r0,#0
00003c  d04c              BEQ      |L2.216|
00003e  9832              LDR      r0,[sp,#0xc8]
000040  6800              LDR      r0,[r0,#0]
000042  2800              CMP      r0,#0
000044  db48              BLT      |L2.216|
000046  9832              LDR      r0,[sp,#0xc8]
000048  6840              LDR      r0,[r0,#4]
00004a  2800              CMP      r0,#0
00004c  db44              BLT      |L2.216|
;;;65     
;;;66           AnkiConditionalErrorAndReturnValue(src.IsValid() && dst.IsValid() && scratch.IsValid(),
00004e  983f              LDR      r0,[sp,#0xfc]
000050  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
000054  2800              CMP      r0,#0
000056  d03f              BEQ      |L2.216|
000058  6920              LDR      r0,[r4,#0x10]
00005a  9e32              LDR      r6,[sp,#0xc8]
00005c  2800              CMP      r0,#0
00005e  d04a              BEQ      |L2.246|
000060  6820              LDR      r0,[r4,#0]
000062  2800              CMP      r0,#0
000064  bfa4              ITT      GE
000066  6860              LDRGE    r0,[r4,#4]
000068  2800              CMPGE    r0,#0
00006a  db44              BLT      |L2.246|
00006c  6930              LDR      r0,[r6,#0x10]
00006e  2800              CMP      r0,#0
000070  d041              BEQ      |L2.246|
000072  6830              LDR      r0,[r6,#0]
000074  2800              CMP      r0,#0
000076  bfa4              ITT      GE
000078  6870              LDRGE    r0,[r6,#4]
00007a  2800              CMPGE    r0,#0
00007c  db3b              BLT      |L2.246|
00007e  2100              MOVS     r1,#0
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000086  4680              MOV      r8,r0
000088  2100              MOVS     r1,#0
00008a  4630              MOV      r0,r6
00008c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000090  4580              CMP      r8,r0
000092  d130              BNE      |L2.246|
000094  2101              MOVS     r1,#1
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00009c  4680              MOV      r8,r0
00009e  2101              MOVS     r1,#1
0000a0  4630              MOV      r0,r6
0000a2  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
0000a6  4580              CMP      r8,r0
0000a8  d125              BNE      |L2.246|
;;;67             RESULT_FAIL_INVALID_OBJECT, "CannyEdgeDetection", "Invalid objects");
;;;68     
;;;69           AnkiConditionalErrorAndReturnValue(AreEqualSize(src, dst),
;;;70             RESULT_FAIL_INVALID_SIZE, "CannyEdgeDetection", "src and dst must be the same size");
;;;71     
;;;72           if ((aperture_size & 1) == 0 || (aperture_size != -1 && (aperture_size < 3 || aperture_size > 7))) {
0000aa  f0170f01          TST      r7,#1
0000ae  d004              BEQ      |L2.186|
0000b0  1c78              ADDS     r0,r7,#1
0000b2  d02f              BEQ      |L2.276|
0000b4  1ef8              SUBS     r0,r7,#3
0000b6  2805              CMP      r0,#5
0000b8  d32c              BCC      |L2.276|
                  |L2.186|
;;;73             AnkiError("CannyEdgeDetection", "invalid aperture_size");
0000ba  2149              MOVS     r1,#0x49
0000bc  48d4              LDR      r0,|L2.1040|
0000be  e9cd0100          STRD     r0,r1,[sp,#0]
0000c2  a3d4              ADR      r3,|L2.1044|
0000c4  a2e0              ADR      r2,|L2.1096|
0000c6  a1e6              ADR      r1,|L2.1120|
0000c8  2005              MOVS     r0,#5
0000ca  f7fffffe          BL       _Anki_Log
;;;74             return RESULT_FAIL_INVALID_PARAMETER;
;;;75           }
;;;76     
;;;77           AnkiConditionalErrorAndReturnValue(low_thresh <= high_thresh,
;;;78             RESULT_FAIL_INVALID_PARAMETER, "CannyEdgeDetection", "Invalid threshold");
;;;79     
;;;80           Array<s16> dx(imageHeight, imageWidth, scratch, Flags::Buffer(false, false, false));
;;;81           Array<s16> dy(imageHeight, imageWidth, scratch, Flags::Buffer(false, false, false));
;;;82     
;;;83           //Sobel(src, dx, CV_16S, 1, 0, aperture_size, 1, 0, cv::BORDER_REPLICATE);
;;;84           //Sobel(src, dy, CV_16S, 0, 1, aperture_size, 1, 0, cv::BORDER_REPLICATE);
;;;85     
;;;86           BeginBenchmark("Canny_init_gradient");
;;;87     
;;;88           ImageProcessing::ComputeXGradient<u8,s16,s16>(src, dx);
;;;89           ImageProcessing::ComputeYGradient<u8,s16,s16>(src, dy);
;;;90     
;;;91           EndBenchmark("Canny_init_gradient");
;;;92     
;;;93           s32 mapstep = imageWidth + 2;
;;;94           s32 numBufferBytes;
;;;95           u8 * buffer = reinterpret_cast<u8*>( scratch.Allocate((imageWidth+2)*(imageHeight+2) + mapstep * 3 * sizeof(int), false, numBufferBytes) );
;;;96     
;;;97           int* mag_buf[3];
;;;98           mag_buf[0] = (int*)(u8*)buffer;
;;;99           mag_buf[1] = mag_buf[0] + mapstep;
;;;100          mag_buf[2] = mag_buf[1] + mapstep;
;;;101          memset(mag_buf[0], 0, /* cn* */mapstep*sizeof(int));
;;;102    
;;;103          u8* map = (u8*)(mag_buf[2] + mapstep);
;;;104          memset(map, 1, mapstep);
;;;105          memset(map + mapstep*(imageHeight + 1), 1, mapstep);
;;;106    
;;;107          //int maxsize = MAX(1 << 10, imageWidth * imageHeight / 10);
;;;108          //std::vector<u8*> stack(maxsize);
;;;109    
;;;110          const int maxsize = MAX(1 << 10, imageWidth * imageHeight / 3);
;;;111          FixedLengthList<u8*> stack(maxsize, scratch, Flags::Buffer(false, false, true));
;;;112    
;;;113          u8 **stack_top = &stack[0];
;;;114          u8 **stack_bottom = &stack[0];
;;;115    
;;;116          EndBenchmark("Canny_init");
;;;117    
;;;118          BeginBenchmark("Canny_candidateLoop");
;;;119    
;;;120          /* sector numbers
;;;121          *  (Top-Left Origin)
;;;122          *
;;;123          *   1   2   3
;;;124          *    *  *  *
;;;125          *     * * *
;;;126          *   0*******0
;;;127          *     * * *
;;;128          *    *  *  *
;;;129          *   3   2   1
;;;130          */
;;;131    
;;;132    #define CANNY_PUSH(d)    *(d) = u8(2), *stack_top++ = (d)
;;;133    #define CANNY_POP(d)     (d) = *--stack_top
;;;134    
;;;135          // calculate magnitude and angle of gradient, perform non-maxima supression.
;;;136          // fill the map with one of the following values:
;;;137          //   0 - the pixel might belong to an edge
;;;138          //   1 - the pixel can not belong to an edge
;;;139          //   2 - the pixel does belong to an edge
;;;140          for (int i = 0; i <= imageHeight; i++)
;;;141          {
;;;142            int* _norm = mag_buf[(i > 0) + 1] + 1;
;;;143            if (i < imageHeight)
;;;144            {
;;;145              short* _dx = dx.Pointer(i, 0);
;;;146              short* _dy = dy.Pointer(i, 0);
;;;147    
;;;148              for (int j = 0; j < imageWidth; j++)
;;;149                _norm[j] = int(_dx[j])*_dx[j] + int(_dy[j])*_dy[j];
;;;150    
;;;151              _norm[-1] = _norm[imageWidth] = 0;
;;;152            }
;;;153            else
;;;154              memset(_norm-1, 0, /* cn* */mapstep*sizeof(int));
;;;155    
;;;156            // at the very beginning we do not have a complete ring
;;;157            // buffer of 3 magnitude rows for non-maxima suppression
;;;158            if (i == 0)
;;;159              continue;
;;;160    
;;;161            u8* _map = map + mapstep*i + 1;
;;;162            _map[-1] = _map[imageWidth] = 1;
;;;163    
;;;164            int* _mag = mag_buf[1] + 1; // take the central row
;;;165            size_t magstep1 = mag_buf[2] - mag_buf[1];
;;;166            size_t magstep2 = mag_buf[0] - mag_buf[1];
;;;167    
;;;168            const short* _x = dx.Pointer(i-1, 0);
;;;169            const short* _y = dy.Pointer(i-1, 0);
;;;170    
;;;171            if ((stack_top - stack_bottom) + imageWidth > maxsize)
;;;172            {
;;;173              //int sz = (int)(stack_top - stack_bottom);
;;;174              //maxsize = maxsize * 3/2;
;;;175              //stack.resize(maxsize);
;;;176              //stack_bottom = &stack[0];
;;;177              //stack_top = stack_bottom + sz;
;;;178    
;;;179              AnkiError("CannyEdgeDetection", "Out of Canny stack space");
;;;180              return RESULT_FAIL_OUT_OF_MEMORY;
;;;181            }
;;;182    
;;;183            int prev_flag = 0;
;;;184            for (int j = 0; j < imageWidth; j++)
;;;185            {
;;;186    #define CANNY_SHIFT 15
;;;187              const int TG22 = (int)(0.4142135623730950488016887242097*(1<<CANNY_SHIFT) + 0.5);
;;;188    
;;;189              int m = _mag[j];
;;;190    
;;;191              if (m > low_thresh)
;;;192              {
;;;193                int xs = _x[j];
;;;194                int ys = _y[j];
;;;195                int x = ABS(xs);
;;;196                int y = ABS(ys) << CANNY_SHIFT;
;;;197    
;;;198                int tg22x = x * TG22;
;;;199    
;;;200                if (y < tg22x)
;;;201                {
;;;202                  if (m > _mag[j-1] && m >= _mag[j+1]) goto __ocv_canny_push;
;;;203                }
;;;204                else
;;;205                {
;;;206                  int tg67x = tg22x + (x << (CANNY_SHIFT+1));
;;;207                  if (y > tg67x)
;;;208                  {
;;;209                    if (m > _mag[j+magstep2] && m >= _mag[j+magstep1]) goto __ocv_canny_push;
;;;210                  }
;;;211                  else
;;;212                  {
;;;213                    int s = (xs ^ ys) < 0 ? -1 : 1;
;;;214                    if (m > _mag[j+magstep2-s] && m > _mag[j+magstep1+s]) goto __ocv_canny_push;
;;;215                  }
;;;216                }
;;;217              }
;;;218              prev_flag = 0;
;;;219              _map[j] = u8(1);
;;;220              continue;
;;;221    __ocv_canny_push:
;;;222              if (!prev_flag && m > high_thresh && _map[j-mapstep] != 2)
;;;223              {
;;;224                CANNY_PUSH(_map + j);
;;;225                prev_flag = 1;
;;;226              }
;;;227              else
;;;228                _map[j] = 0;
;;;229            }
;;;230    
;;;231            // scroll the ring buffer
;;;232            _mag = mag_buf[0];
;;;233            mag_buf[0] = mag_buf[1];
;;;234            mag_buf[1] = mag_buf[2];
;;;235            mag_buf[2] = _mag;
;;;236          }
;;;237    
;;;238          EndBenchmark("Canny_candidateLoop");
;;;239    
;;;240          BeginBenchmark("Canny_hysteresisLoop");
;;;241    
;;;242          // now track the edges (hysteresis thresholding)
;;;243          while (stack_top > stack_bottom)
;;;244          {
;;;245            u8* m;
;;;246            if ((stack_top - stack_bottom) + 8 > maxsize)
;;;247            {
;;;248              //int sz = (int)(stack_top - stack_bottom);
;;;249              //maxsize = maxsize * 3/2;
;;;250              //stack.resize(maxsize);
;;;251              //stack_bottom = &stack[0];
;;;252              //stack_top = stack_bottom + sz;
;;;253    
;;;254              AnkiError("CannyEdgeDetection", "Out of Canny stack space");
;;;255              return RESULT_FAIL_OUT_OF_MEMORY;
;;;256            }
;;;257    
;;;258            CANNY_POP(m);
;;;259    
;;;260            if (!m[-1])         CANNY_PUSH(m - 1);
;;;261            if (!m[1])          CANNY_PUSH(m + 1);
;;;262            if (!m[-mapstep-1]) CANNY_PUSH(m - mapstep - 1);
;;;263            if (!m[-mapstep])   CANNY_PUSH(m - mapstep);
;;;264            if (!m[-mapstep+1]) CANNY_PUSH(m - mapstep + 1);
;;;265            if (!m[mapstep-1])  CANNY_PUSH(m + mapstep - 1);
;;;266            if (!m[mapstep])    CANNY_PUSH(m + mapstep);
;;;267            if (!m[mapstep+1])  CANNY_PUSH(m + mapstep + 1);
;;;268          }
;;;269    
;;;270          EndBenchmark("Canny_hysteresisLoop");
;;;271    
;;;272          BeginBenchmark("Canny_finalize");
;;;273    
;;;274          // the final pass, form the final image
;;;275          const u8* pmap = map + mapstep + 1;
;;;276          u8* pdst = dst.Pointer(0, 0);
;;;277          const s32 dstStride = dst.get_stride();
;;;278          for (int i = 0; i < imageHeight; i++, pmap += mapstep, pdst += dstStride)
;;;279          {
;;;280            for (int j = 0; j < imageWidth; j++)
;;;281              pdst[j] = (u8)-(pmap[j] >> 1);
;;;282          }
;;;283    
;;;284          EndBenchmark("Canny_finalize");
;;;285    
;;;286          return RESULT_OK;
;;;287        } // CannyEdgeDetection
0000ce  b035              ADD      sp,sp,#0xd4
0000d0  f04f7040          MOV      r0,#0x3000000         ;74
0000d4  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.216|
0000d8  2142              MOVS     r1,#0x42              ;66
0000da  48cd              LDR      r0,|L2.1040|
0000dc  e9cd0100          STRD     r0,r1,[sp,#0]         ;66
0000e0  a3cc              ADR      r3,|L2.1044|
0000e2  a2e4              ADR      r2,|L2.1140|
0000e4  a1de              ADR      r1,|L2.1120|
0000e6  2005              MOVS     r0,#5                 ;66
0000e8  f7fffffe          BL       _Anki_Log
0000ec  b035              ADD      sp,sp,#0xd4
0000ee  f04f6080          MOV      r0,#0x4000000         ;66
0000f2  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.246|
0000f6  2145              MOVS     r1,#0x45              ;69
0000f8  48c5              LDR      r0,|L2.1040|
0000fa  e9cd0100          STRD     r0,r1,[sp,#0]         ;69
0000fe  a3c5              ADR      r3,|L2.1044|
000100  a2e0              ADR      r2,|L2.1156|
000102  a1d7              ADR      r1,|L2.1120|
000104  2005              MOVS     r0,#5                 ;69
000106  f7fffffe          BL       _Anki_Log
00010a  b035              ADD      sp,sp,#0xd4
00010c  f04f60a0          MOV      r0,#0x5000000         ;69
000110  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.276|
000114  e9dd0133          LDRD     r0,r1,[sp,#0xcc]
000118  4288              CMP      r0,r1                 ;77
00011a  dd0e              BLE      |L2.314|
00011c  214d              MOVS     r1,#0x4d              ;77
00011e  48bc              LDR      r0,|L2.1040|
000120  e9cd0100          STRD     r0,r1,[sp,#0]         ;77
000124  a3bb              ADR      r3,|L2.1044|
000126  a2e0              ADR      r2,|L2.1192|
000128  a1cd              ADR      r1,|L2.1120|
00012a  2005              MOVS     r0,#5                 ;77
00012c  f7fffffe          BL       _Anki_Log
000130  b035              ADD      sp,sp,#0xd4
000132  f04f7040          MOV      r0,#0x3000000         ;77
000136  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.314|
00013a  2300              MOVS     r3,#0                 ;80
00013c  461a              MOV      r2,r3                 ;80
00013e  4619              MOV      r1,r3                 ;80
000140  a82e              ADD      r0,sp,#0xb8           ;80
000142  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000146  6800              LDR      r0,[r0,#0]            ;80
000148  9000              STR      r0,[sp,#0]            ;80
00014a  462a              MOV      r2,r5                 ;80
00014c  a819              ADD      r0,sp,#0x64           ;80
00014e  9b3f              LDR      r3,[sp,#0xfc]         ;80
000150  9913              LDR      r1,[sp,#0x4c]         ;80
000152  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000156  2300              MOVS     r3,#0                 ;81
000158  461a              MOV      r2,r3                 ;81
00015a  4619              MOV      r1,r3                 ;81
00015c  a82c              ADD      r0,sp,#0xb0           ;81
00015e  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000162  6800              LDR      r0,[r0,#0]            ;81
000164  9000              STR      r0,[sp,#0]            ;81
000166  462a              MOV      r2,r5                 ;81
000168  a814              ADD      r0,sp,#0x50           ;81
00016a  9b3f              LDR      r3,[sp,#0xfc]         ;81
00016c  9913              LDR      r1,[sp,#0x4c]         ;81
00016e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000172  a0d2              ADR      r0,|L2.1212|
000174  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000178  ae19              ADD      r6,sp,#0x64           ;88
00017a  2100              MOVS     r1,#0                 ;88
00017c  4620              MOV      r0,r4                 ;88
00017e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000182  9000              STR      r0,[sp,#0]            ;88
000184  2101              MOVS     r1,#1                 ;88
000186  4620              MOV      r0,r4                 ;88
000188  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00018c  4607              MOV      r7,r0                 ;88
00018e  6920              LDR      r0,[r4,#0x10]         ;88
000190  f8df833c          LDR      r8,|L2.1232|
000194  2800              CMP      r0,#0                 ;88
000196  f000821c          BEQ.W    |L2.1490|
00019a  6820              LDR      r0,[r4,#0]            ;88
00019c  2800              CMP      r0,#0                 ;88
00019e  bfa4              ITT      GE                    ;88
0001a0  6860              LDRGE    r0,[r4,#4]            ;88
0001a2  2800              CMPGE    r0,#0                 ;88
0001a4  f2c08215          BLT.W    |L2.1490|
0001a8  981d              LDR      r0,[sp,#0x74]         ;88
0001aa  2800              CMP      r0,#0                 ;88
0001ac  f0008211          BEQ.W    |L2.1490|
0001b0  9819              LDR      r0,[sp,#0x64]         ;88
0001b2  2800              CMP      r0,#0                 ;88
0001b4  bfa4              ITT      GE                    ;88
0001b6  981a              LDRGE    r0,[sp,#0x68]         ;88
0001b8  2800              CMPGE    r0,#0                 ;88
0001ba  f2c0820a          BLT.W    |L2.1490|
0001be  4631              MOV      r1,r6                 ;88
0001c0  4620              MOV      r0,r4                 ;88
0001c2  f7fffffe          BL       _ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_ ; Anki::Embedded::AreEqualSize<Anki::Embedded::Array<unsigned char>, Anki::Embedded::Array<short>>(const T1&, const T2&)
0001c6  2800              CMP      r0,#0                 ;88
0001c8  f000820e          BEQ.W    |L2.1512|
0001cc  9800              LDR      r0,[sp,#0]            ;88
0001ce  2201              MOVS     r2,#1                 ;88
0001d0  f1a00b01          SUB      r11,r0,#1             ;88
0001d4  f1bb0f01          CMP      r11,#1                ;88
0001d8  bfc4              ITT      GT                    ;88
0001da  f1a70801          SUBGT    r8,r7,#1              ;88
0001de  f04f0a00          MOVGT    r10,#0                ;88
0001e2  dd21              BLE      |L2.552|
                  |L2.484|
0001e4  6921              LDR      r1,[r4,#0x10]         ;88
0001e6  68a0              LDR      r0,[r4,#8]            ;88
0001e8  fb021900          MLA      r9,r2,r0,r1           ;88
0001ec  68b1              LDR      r1,[r6,#8]            ;88
0001ee  6930              LDR      r0,[r6,#0x10]         ;88
0001f0  fb020301          MLA      r3,r2,r1,r0           ;88
0001f4  2001              MOVS     r0,#1                 ;88
0001f6  f8a3a000          STRH     r10,[r3,#0]           ;88
0001fa  f1b80f01          CMP      r8,#1                 ;88
0001fe  dd0c              BLE      |L2.538|
                  |L2.512|
000200  eb090c00          ADD      r12,r9,r0             ;88
000204  f89c1001          LDRB     r1,[r12,#1]           ;88
000208  f81ccc01          LDRB     r12,[r12,#-1]         ;88
00020c  eba1010c          SUB      r1,r1,r12             ;88
000210  f8231010          STRH     r1,[r3,r0,LSL #1]     ;88
000214  1c40              ADDS     r0,r0,#1              ;88
000216  4580              CMP      r8,r0                 ;88
000218  dcf2              BGT      |L2.512|
                  |L2.538|
00021a  eb030047          ADD      r0,r3,r7,LSL #1       ;88
00021e  1c52              ADDS     r2,r2,#1              ;88
000220  f820ac02          STRH     r10,[r0,#-2]          ;88
000224  455a              CMP      r2,r11                ;88
000226  dbdd              BLT      |L2.484|
                  |L2.552|
000228  68b2              LDR      r2,[r6,#8]            ;88
00022a  6930              LDR      r0,[r6,#0x10]         ;88
00022c  2100              MOVS     r1,#0                 ;88
00022e  9b00              LDR      r3,[sp,#0]            ;88
000230  fb010102          MLA      r1,r1,r2,r0           ;88
000234  1e5b              SUBS     r3,r3,#1              ;88
000236  fb030202          MLA      r2,r3,r2,r0           ;88
00023a  2000              MOVS     r0,#0                 ;88
00023c  2f00              CMP      r7,#0                 ;88
00023e  bfc8              IT       GT                    ;88
000240  2300              MOVGT    r3,#0                 ;88
000242  dd06              BLE      |L2.594|
                  |L2.580|
000244  f8213010          STRH     r3,[r1,r0,LSL #1]     ;88
000248  f8223010          STRH     r3,[r2,r0,LSL #1]     ;88
00024c  1c40              ADDS     r0,r0,#1              ;88
00024e  4287              CMP      r7,r0                 ;88
000250  dcf8              BGT      |L2.580|
                  |L2.594|
000252  af14              ADD      r7,sp,#0x50           ;89
000254  2100              MOVS     r1,#0                 ;89
000256  4620              MOV      r0,r4                 ;89
000258  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00025c  9000              STR      r0,[sp,#0]            ;89
00025e  2101              MOVS     r1,#1                 ;89
000260  4620              MOV      r0,r4                 ;89
000262  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
000266  4606              MOV      r6,r0                 ;89
000268  6920              LDR      r0,[r4,#0x10]         ;89
00026a  f8df8268          LDR      r8,|L2.1236|
00026e  2800              CMP      r0,#0                 ;89
000270  f00081c4          BEQ.W    |L2.1532|
000274  6820              LDR      r0,[r4,#0]            ;89
000276  2800              CMP      r0,#0                 ;89
000278  bfa4              ITT      GE                    ;89
00027a  6860              LDRGE    r0,[r4,#4]            ;89
00027c  2800              CMPGE    r0,#0                 ;89
00027e  f2c081bd          BLT.W    |L2.1532|
000282  9818              LDR      r0,[sp,#0x60]         ;89
000284  2800              CMP      r0,#0                 ;89
000286  f00081b9          BEQ.W    |L2.1532|
00028a  9814              LDR      r0,[sp,#0x50]         ;89
00028c  2800              CMP      r0,#0                 ;89
00028e  bfa4              ITT      GE                    ;89
000290  9815              LDRGE    r0,[sp,#0x54]         ;89
000292  2800              CMPGE    r0,#0                 ;89
000294  f2c081b2          BLT.W    |L2.1532|
000298  4639              MOV      r1,r7                 ;89
00029a  4620              MOV      r0,r4                 ;89
00029c  f7fffffe          BL       _ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_ ; Anki::Embedded::AreEqualSize<Anki::Embedded::Array<unsigned char>, Anki::Embedded::Array<short>>(const T1&, const T2&)
0002a0  2800              CMP      r0,#0                 ;89
0002a2  f00081b6          BEQ.W    |L2.1554|
0002a6  9800              LDR      r0,[sp,#0]            ;89
0002a8  2201              MOVS     r2,#1                 ;89
0002aa  f1a00e01          SUB      lr,r0,#1              ;89
0002ae  f1be0f01          CMP      lr,#1                 ;89
0002b2  bfc4              ITT      GT                    ;89
0002b4  f1a60801          SUBGT    r8,r6,#1              ;89
0002b8  f04f0a00          MOVGT    r10,#0                ;89
0002bc  dd24              BLE      |L2.776|
                  |L2.702|
0002be  68a3              LDR      r3,[r4,#8]            ;89
0002c0  6920              LDR      r0,[r4,#0x10]         ;89
0002c2  1e51              SUBS     r1,r2,#1              ;89
0002c4  f1020c01          ADD      r12,r2,#1             ;89
0002c8  fb010103          MLA      r1,r1,r3,r0           ;89
0002cc  fb0c0903          MLA      r9,r12,r3,r0          ;89
0002d0  68bb              LDR      r3,[r7,#8]            ;89
0002d2  6938              LDR      r0,[r7,#0x10]         ;89
0002d4  fb020303          MLA      r3,r2,r3,r0           ;89
0002d8  2001              MOVS     r0,#1                 ;89
0002da  f8a3a000          STRH     r10,[r3,#0]           ;89
0002de  f1b80f01          CMP      r8,#1                 ;89
0002e2  dd0a              BLE      |L2.762|
                  |L2.740|
0002e4  f819c000          LDRB     r12,[r9,r0]           ;89
0002e8  f811b000          LDRB     r11,[r1,r0]           ;89
0002ec  ebac0c0b          SUB      r12,r12,r11           ;89
0002f0  f823c010          STRH     r12,[r3,r0,LSL #1]    ;89
0002f4  1c40              ADDS     r0,r0,#1              ;89
0002f6  4580              CMP      r8,r0                 ;89
0002f8  dcf4              BGT      |L2.740|
                  |L2.762|
0002fa  eb030046          ADD      r0,r3,r6,LSL #1       ;89
0002fe  1c52              ADDS     r2,r2,#1              ;89
000300  f820ac02          STRH     r10,[r0,#-2]          ;89
000304  4572              CMP      r2,lr                 ;89
000306  dbda              BLT      |L2.702|
                  |L2.776|
000308  68b9              LDR      r1,[r7,#8]            ;89
00030a  6938              LDR      r0,[r7,#0x10]         ;89
00030c  9b00              LDR      r3,[sp,#0]            ;89
00030e  2200              MOVS     r2,#0                 ;89
000310  1e5b              SUBS     r3,r3,#1              ;89
000312  fb020201          MLA      r2,r2,r1,r0           ;89
000316  fb030301          MLA      r3,r3,r1,r0           ;89
00031a  2000              MOVS     r0,#0                 ;89
00031c  2e00              CMP      r6,#0                 ;89
00031e  bfc8              IT       GT                    ;89
000320  2100              MOVGT    r1,#0                 ;89
000322  dd06              BLE      |L2.818|
                  |L2.804|
000324  f8221010          STRH     r1,[r2,r0,LSL #1]     ;89
000328  f8231010          STRH     r1,[r3,r0,LSL #1]     ;89
00032c  1c40              ADDS     r0,r0,#1              ;89
00032e  4286              CMP      r6,r0                 ;89
000330  dcf8              BGT      |L2.804|
                  |L2.818|
000332  a062              ADR      r0,|L2.1212|
000334  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000338  9813              LDR      r0,[sp,#0x4c]         ;95
00033a  1cae              ADDS     r6,r5,#2              ;93
00033c  1c80              ADDS     r0,r0,#2              ;95
00033e  4370              MULS     r0,r6,r0              ;95
000340  eb060146          ADD      r1,r6,r6,LSL #1       ;95
000344  eb000181          ADD      r1,r0,r1,LSL #2       ;95
000348  ab2f              ADD      r3,sp,#0xbc           ;95
00034a  2200              MOVS     r2,#0                 ;95
00034c  983f              LDR      r0,[sp,#0xfc]         ;95
00034e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
000352  900f              STR      r0,[sp,#0x3c]         ;99
000354  eb000086          ADD      r0,r0,r6,LSL #2       ;99
000358  9010              STR      r0,[sp,#0x40]         ;100
00035a  eb000086          ADD      r0,r0,r6,LSL #2       ;100
00035e  00b1              LSLS     r1,r6,#2              ;101
000360  9011              STR      r0,[sp,#0x44]         ;101
000362  912b              STR      r1,[sp,#0xac]         ;101
000364  980f              LDR      r0,[sp,#0x3c]         ;101
000366  f7fffffe          BL       __aeabi_memclr4
00036a  9811              LDR      r0,[sp,#0x44]         ;103
00036c  2201              MOVS     r2,#1                 ;104
00036e  eb000086          ADD      r0,r0,r6,LSL #2       ;103
000372  4631              MOV      r1,r6                 ;104
000374  9012              STR      r0,[sp,#0x48]         ;104
000376  f7fffffe          BL       __aeabi_memset
00037a  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;104
00037e  1c49              ADDS     r1,r1,#1              ;105
000380  fb060001          MLA      r0,r6,r1,r0           ;105
000384  2201              MOVS     r2,#1                 ;105
000386  4631              MOV      r1,r6                 ;105
000388  f7fffffe          BL       __aeabi_memset
00038c  9813              LDR      r0,[sp,#0x4c]         ;110
00038e  4368              MULS     r0,r5,r0              ;110
000390  f5b06f40          CMP      r0,#0xc00             ;110
000394  bfb8              IT       LT                    ;110
000396  f44f6080          MOVLT    r0,#0x400             ;110
00039a  db04              BLT      |L2.934|
00039c  494e              LDR      r1,|L2.1240|
00039e  fb811000          SMULL    r1,r0,r1,r0           ;110
0003a2  eba070e0          SUB      r0,r0,r0,ASR #31      ;110
                  |L2.934|
0003a6  9001              STR      r0,[sp,#4]            ;111
0003a8  a802              ADD      r0,sp,#8              ;111
0003aa  9025              STR      r0,[sp,#0x94]         ;111
0003ac  9801              LDR      r0,[sp,#4]            ;111
0003ae  9024              STR      r0,[sp,#0x90]         ;111
0003b0  2200              MOVS     r2,#0                 ;111
0003b2  2301              MOVS     r3,#1                 ;111
0003b4  4611              MOV      r1,r2                 ;111
0003b6  a82c              ADD      r0,sp,#0xb0           ;111
0003b8  9c3f              LDR      r4,[sp,#0xfc]         ;111
0003ba  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0003be  6800              LDR      r0,[r0,#0]            ;111
0003c0  902d              STR      r0,[sp,#0xb4]         ;111
0003c2  9000              STR      r0,[sp,#0]            ;111
0003c4  4623              MOV      r3,r4                 ;111
0003c6  2101              MOVS     r1,#1                 ;111
0003c8  a826              ADD      r0,sp,#0x98           ;111
0003ca  9a24              LDR      r2,[sp,#0x90]         ;111
0003cc  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<unsigned char*>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0003d0  e8b00d90          LDM      r0!,{r4,r7,r8,r10,r11};111
0003d4  2000              MOVS     r0,#0                 ;111
0003d6  f04f0901          MOV      r9,#1                 ;111
0003da  e9cd0922          STRD     r0,r9,[sp,#0x88]      ;111
0003de  4602              MOV      r2,r0                 ;111
0003e0  4649              MOV      r1,r9                 ;111
0003e2  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
0003e6  9021              STR      r0,[sp,#0x84]         ;111
0003e8  2000              MOVS     r0,#0                 ;111
0003ea  e9cd091f          STRD     r0,r9,[sp,#0x7c]      ;111
0003ee  4602              MOV      r2,r0                 ;111
0003f0  4649              MOV      r1,r9                 ;111
0003f2  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
0003f6  901e              STR      r0,[sp,#0x78]         ;111
0003f8  e9dd0121          LDRD     r0,r1,[sp,#0x84]      ;111
0003fc  9a23              LDR      r2,[sp,#0x8c]         ;111
0003fe  9204              STR      r2,[sp,#0x10]         ;111
000400  e06c              B        |L2.1244|
000402  0000              DCW      0x0000
                  |L2.1028|
000404  43616e6e          DCB      "Canny_init",0
000408  795f696e
00040c  697400  
00040f  00                DCB      0
                  |L2.1040|
                          DCD      ||.constdata||
                  |L2.1044|
000414  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\opencvLight_vision.cp"
000418  6f726574
00041c  6563685c
000420  76697369
000424  6f6e5c72
000428  6f626f74
00042c  5c737263
000430  5c6f7065
000434  6e63764c
000438  69676874
00043c  5f766973
000440  696f6e2e
000444  6370    
000446  7000              DCB      "p",0
                  |L2.1096|
000448  696e7661          DCB      "invalid aperture_size",0
00044c  6c696420
000450  61706572
000454  74757265
000458  5f73697a
00045c  6500    
00045e  00                DCB      0
00045f  00                DCB      0
                  |L2.1120|
000460  43616e6e          DCB      "CannyEdgeDetection",0
000464  79456467
000468  65446574
00046c  65637469
000470  6f6e00  
000473  00                DCB      0
                  |L2.1140|
000474  496e7661          DCB      "Invalid objects",0
000478  6c696420
00047c  6f626a65
000480  63747300
                  |L2.1156|
000484  73726320          DCB      "src and dst must be the same size",0
000488  616e6420
00048c  64737420
000490  6d757374
000494  20626520
000498  74686520
00049c  73616d65
0004a0  2073697a
0004a4  6500    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L2.1192|
0004a8  496e7661          DCB      "Invalid threshold",0
0004ac  6c696420
0004b0  74687265
0004b4  73686f6c
0004b8  6400    
0004ba  00                DCB      0
0004bb  00                DCB      0
                  |L2.1212|
0004bc  43616e6e          DCB      "Canny_init_gradient",0
0004c0  795f696e
0004c4  69745f67
0004c8  72616469
0004cc  656e7400
                  |L2.1232|
                          DCD      _ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeXGradient<unsigned char, short, short>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
                  |L2.1236|
                          DCD      _ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeYGradient<unsigned char, short, short>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
                  |L2.1240|
                          DCD      0x55555556
                  |L2.1244|
0004dc  e9cd0102          STRD     r0,r1,[sp,#8]         ;111
0004e0  e9dd011e          LDRD     r0,r1,[sp,#0x78]      ;111
0004e4  ab05              ADD      r3,sp,#0x14           ;111
0004e6  9a20              LDR      r2,[sp,#0x80]         ;111
0004e8  e8a30d97          STM      r3!,{r0-r2,r4,r7,r8,r10,r11};111
0004ec  2c00              CMP      r4,#0                 ;111
0004ee  bfc8              IT       GT                    ;111
0004f0  2f00              CMPGT    r7,#0                 ;111
0004f2  f3408098          BLE.W    |L2.1574|
0004f6  fb04f007          MUL      r0,r4,r7              ;111
0004fa  2800              CMP      r0,#0                 ;111
0004fc  bf1c              ITT      NE                    ;111
0004fe  2000              MOVNE    r0,#0                 ;111
000500  fb00b008          MLANE    r0,r0,r8,r11          ;111
000504  f000808f          BEQ.W    |L2.1574|
                  |L2.1288|
000508  900d              STR      r0,[sp,#0x34]         ;111
00050a  2c00              CMP      r4,#0                 ;111
00050c  bfc8              IT       GT                    ;111
00050e  2f00              CMPGT    r7,#0                 ;111
000510  f340808b          BLE.W    |L2.1578|
000514  fb04f007          MUL      r0,r4,r7              ;111
000518  2800              CMP      r0,#0                 ;111
00051a  bf1c              ITT      NE                    ;111
00051c  2000              MOVNE    r0,#0                 ;111
00051e  fb00b008          MLANE    r0,r0,r8,r11          ;111
000522  f0008082          BEQ.W    |L2.1578|
                  |L2.1318|
000526  900e              STR      r0,[sp,#0x38]         ;111
000528  2c00              CMP      r4,#0                 ;111
00052a  bfc8              IT       GT                    ;111
00052c  2f00              CMPGT    r7,#0                 ;111
00052e  f340807e          BLE.W    |L2.1582|
000532  fb04f007          MUL      r0,r4,r7              ;111
000536  2800              CMP      r0,#0                 ;111
000538  bf1c              ITT      NE                    ;111
00053a  2000              MOVNE    r0,#0                 ;111
00053c  fb00b008          MLANE    r0,r0,r8,r11          ;111
000540  f0008075          BEQ.W    |L2.1582|
                  |L2.1348|
000544  900e              STR      r0,[sp,#0x38]         ;111
000546  a82d              ADD      r0,sp,#0xb4           ;111
000548  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv ; Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
00054c  2800              CMP      r0,#0                 ;111
00054e  bf12              ITEE     NE                    ;111
000550  e9dd1024          LDRDNE   r1,r0,[sp,#0x90]      ;111
000554  2100              MOVEQ    r1,#0                 ;111
000556  9825              LDREQ    r0,[sp,#0x94]         ;111
000558  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListIPhE8set_sizeEi ; Anki::Embedded::FixedLengthList<unsigned char*>::set_size(int)
00055c  9c0e              LDR      r4,[sp,#0x38]         ;114
00055e  f2af105c          ADR      r0,|L2.1028|
000562  9400              STR      r4,[sp,#0]            ;116
000564  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000568  a0dc              ADR      r0,|L2.2268|
00056a  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00056e  9813              LDR      r0,[sp,#0x4c]         ;140
000570  2700              MOVS     r7,#0                 ;140
000572  2800              CMP      r0,#0                 ;140
000574  f2c0811b          BLT.W    |L2.1966|
000578  9812              LDR      r0,[sp,#0x48]         ;161
00057a  1c40              ADDS     r0,r0,#1              ;161
00057c  9022              STR      r0,[sp,#0x88]         ;161
                  |L2.1406|
00057e  2f00              CMP      r7,#0                 ;142
000580  bfcc              ITE      GT                    ;142
000582  2001              MOVGT    r0,#1                 ;142
000584  2000              MOVLE    r0,#0                 ;142
000586  a90f              ADD      r1,sp,#0x3c           ;142
000588  eb010080          ADD      r0,r1,r0,LSL #2       ;142
00058c  6840              LDR      r0,[r0,#4]            ;142
00058e  1d02              ADDS     r2,r0,#4              ;142
000590  9813              LDR      r0,[sp,#0x4c]         ;143
000592  42b8              CMP      r0,r7                 ;143
000594  dd4d              BLE      |L2.1586|
000596  991b              LDR      r1,[sp,#0x6c]         ;142
000598  981d              LDR      r0,[sp,#0x74]         ;142
00059a  fb070301          MLA      r3,r7,r1,r0           ;142
00059e  9916              LDR      r1,[sp,#0x58]         ;142
0005a0  9818              LDR      r0,[sp,#0x60]         ;142
0005a2  fb070c01          MLA      r12,r7,r1,r0          ;142
0005a6  2000              MOVS     r0,#0                 ;148
0005a8  2d00              CMP      r5,#0                 ;148
0005aa  dd0c              BLE      |L2.1478|
                  |L2.1452|
0005ac  f8331010          LDRH     r1,[r3,r0,LSL #1]     ;149
0005b0  fb11f801          SMULBB   r8,r1,r1              ;149
0005b4  f83c1010          LDRH     r1,[r12,r0,LSL #1]    ;149
0005b8  fb118101          SMLABB   r1,r1,r1,r8           ;149
0005bc  f8421020          STR      r1,[r2,r0,LSL #2]     ;149
0005c0  1c40              ADDS     r0,r0,#1              ;148
0005c2  4285              CMP      r5,r0                 ;148
0005c4  dcf2              BGT      |L2.1452|
                  |L2.1478|
0005c6  2000              MOVS     r0,#0                 ;151
0005c8  f8420025          STR      r0,[r2,r5,LSL #2]     ;151
0005cc  f8420c04          STR      r0,[r2,#-4]           ;151
0005d0  e033              B        |L2.1594|
                  |L2.1490|
0005d2  2034              MOVS     r0,#0x34              ;152
0005d4  a3c6              ADR      r3,|L2.2288|
0005d6  f2af1264          ADR      r2,|L2.1140|
0005da  e9cd8000          STRD     r8,r0,[sp,#0]         ;152
0005de  a1d4              ADR      r1,|L2.2352|
0005e0  2005              MOVS     r0,#5                 ;152
0005e2  f7fffffe          BL       _Anki_Log
0005e6  e634              B        |L2.594|
                  |L2.1512|
0005e8  2037              MOVS     r0,#0x37              ;152
0005ea  e9cd8000          STRD     r8,r0,[sp,#0]         ;152
0005ee  a3c0              ADR      r3,|L2.2288|
0005f0  a2d4              ADR      r2,|L2.2372|
0005f2  a1cf              ADR      r1,|L2.2352|
0005f4  2005              MOVS     r0,#5                 ;152
0005f6  f7fffffe          BL       _Anki_Log
0005fa  e62a              B        |L2.594|
                  |L2.1532|
0005fc  205a              MOVS     r0,#0x5a              ;152
0005fe  a3bc              ADR      r3,|L2.2288|
000600  f2af1290          ADR      r2,|L2.1140|
000604  e9cd8000          STRD     r8,r0,[sp,#0]         ;152
000608  a1d4              ADR      r1,|L2.2396|
00060a  2005              MOVS     r0,#5                 ;152
00060c  f7fffffe          BL       _Anki_Log
000610  e68f              B        |L2.818|
                  |L2.1554|
000612  205d              MOVS     r0,#0x5d              ;152
000614  e9cd8000          STRD     r8,r0,[sp,#0]         ;152
000618  a3b5              ADR      r3,|L2.2288|
00061a  a2ca              ADR      r2,|L2.2372|
00061c  a1cf              ADR      r1,|L2.2396|
00061e  2005              MOVS     r0,#5                 ;152
000620  f7fffffe          BL       _Anki_Log
000624  e685              B        |L2.818|
                  |L2.1574|
000626  2000              MOVS     r0,#0                 ;152
000628  e76e              B        |L2.1288|
                  |L2.1578|
00062a  2000              MOVS     r0,#0                 ;152
00062c  e77b              B        |L2.1318|
                  |L2.1582|
00062e  2000              MOVS     r0,#0                 ;152
000630  e788              B        |L2.1348|
                  |L2.1586|
000632  1f10              SUBS     r0,r2,#4              ;154
000634  992b              LDR      r1,[sp,#0xac]         ;154
000636  f7fffffe          BL       __aeabi_memclr4
                  |L2.1594|
00063a  2f00              CMP      r7,#0                 ;158
00063c  d078              BEQ      |L2.1840|
00063e  9822              LDR      r0,[sp,#0x88]         ;161
000640  2101              MOVS     r1,#1                 ;162
000642  fb060007          MLA      r0,r6,r7,r0           ;161
000646  5541              STRB     r1,[r0,r5]            ;162
000648  f8001c01          STRB     r1,[r0,#-1]           ;162
00064c  e9ddc310          LDRD     r12,r3,[sp,#0x40]     ;164
000650  eba3030c          SUB      r3,r3,r12             ;165
000654  9a10              LDR      r2,[sp,#0x40]         ;164
000656  109b              ASRS     r3,r3,#2              ;165
000658  931f              STR      r3,[sp,#0x7c]         ;166
00065a  9b0f              LDR      r3,[sp,#0x3c]         ;166
00065c  f8dd806c          LDR      r8,[sp,#0x6c]         ;166
000660  eba3030c          SUB      r3,r3,r12             ;166
000664  109b              ASRS     r3,r3,#2              ;166
000666  931e              STR      r3,[sp,#0x78]         ;168
000668  f8ddc074          LDR      r12,[sp,#0x74]        ;168
00066c  1e7b              SUBS     r3,r7,#1              ;168
00066e  fb03c308          MLA      r3,r3,r8,r12          ;168
000672  9321              STR      r3,[sp,#0x84]         ;169
000674  f8ddc060          LDR      r12,[sp,#0x60]        ;169
000678  f8dd8058          LDR      r8,[sp,#0x58]         ;169
00067c  1e7b              SUBS     r3,r7,#1              ;169
00067e  fb03c308          MLA      r3,r3,r8,r12          ;169
000682  9320              STR      r3,[sp,#0x80]         ;171
000684  9b00              LDR      r3,[sp,#0]            ;171
000686  1d12              ADDS     r2,r2,#4              ;164
000688  1ae3              SUBS     r3,r4,r3              ;171
00068a  eb050ca3          ADD      r12,r5,r3,ASR #2      ;171
00068e  9b01              LDR      r3,[sp,#4]            ;171
000690  459c              CMP      r12,r3                ;171
000692  dd0f              BLE      |L2.1716|
000694  48b6              LDR      r0,|L2.2416|
000696  21b3              MOVS     r1,#0xb3              ;179
000698  f2af2388          ADR      r3,|L2.1044|
00069c  a2b5              ADR      r2,|L2.2420|
00069e  e9cd0100          STRD     r0,r1,[sp,#0]         ;179
0006a2  f2af2144          ADR      r1,|L2.1120|
0006a6  2005              MOVS     r0,#5                 ;179
0006a8  f7fffffe          BL       _Anki_Log
0006ac  b035              ADD      sp,sp,#0xd4
0006ae  48b8              LDR      r0,|L2.2448|
0006b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1716|
0006b4  f04f0900          MOV      r9,#0                 ;183
0006b8  464b              MOV      r3,r9                 ;184
0006ba  2d00              CMP      r5,#0                 ;184
0006bc  dd6c              BLE      |L2.1944|
                  |L2.1726|
0006be  f852c023          LDR      r12,[r2,r3,LSL #2]    ;189
0006c2  9933              LDR      r1,[sp,#0xcc]         ;191
0006c4  4561              CMP      r1,r12                ;191
0006c6  da4c              BGE      |L2.1890|
0006c8  9921              LDR      r1,[sp,#0x84]         ;193
0006ca  f9318013          LDRSH    r8,[r1,r3,LSL #1]     ;193
0006ce  9920              LDR      r1,[sp,#0x80]         ;194
0006d0  f1b80f00          CMP      r8,#0                 ;195
0006d4  f9311013          LDRSH    r1,[r1,r3,LSL #1]     ;194
0006d8  bfac              ITE      GE                    ;195
0006da  46c2              MOVGE    r10,r8                ;195
0006dc  f1c80a00          RSBLT    r10,r8,#0             ;195
0006e0  2900              CMP      r1,#0                 ;196
0006e2  bfac              ITE      GE                    ;196
0006e4  468b              MOVGE    r11,r1                ;196
0006e6  f1c10b00          RSBLT    r11,r1,#0             ;196
0006ea  ea4f3ecb          LSL      lr,r11,#15            ;196
0006ee  f2435b05          MOV      r11,#0x3505           ;198
0006f2  fb0afb0b          MUL      r11,r10,r11           ;198
0006f6  45de              CMP      lr,r11                ;200
0006f8  da09              BGE      |L2.1806|
0006fa  eb020183          ADD      r1,r2,r3,LSL #2       ;202
0006fe  f8518c04          LDR      r8,[r1,#-4]           ;202
000702  45e0              CMP      r8,r12                ;202
000704  da2d              BGE      |L2.1890|
000706  6849              LDR      r1,[r1,#4]            ;202
000708  458c              CMP      r12,r1                ;202
00070a  da2e              BGE      |L2.1898|
00070c  e029              B        |L2.1890|
                  |L2.1806|
00070e  eb0b4a0a          ADD      r10,r11,r10,LSL #16   ;206
000712  45f2              CMP      r10,lr                ;207
000714  da0d              BGE      |L2.1842|
000716  991e              LDR      r1,[sp,#0x78]         ;209
000718  4419              ADD      r1,r1,r3              ;209
00071a  f8521021          LDR      r1,[r2,r1,LSL #2]     ;209
00071e  4561              CMP      r1,r12                ;209
000720  da1f              BGE      |L2.1890|
000722  991f              LDR      r1,[sp,#0x7c]         ;209
000724  4419              ADD      r1,r1,r3              ;209
000726  f8521021          LDR      r1,[r2,r1,LSL #2]     ;209
00072a  458c              CMP      r12,r1                ;209
00072c  da1d              BGE      |L2.1898|
00072e  e018              B        |L2.1890|
                  |L2.1840|
000730  e038              B        |L2.1956|
                  |L2.1842|
000732  ea880101          EOR      r1,r8,r1              ;213
000736  2900              CMP      r1,#0                 ;213
000738  bfb4              ITE      LT                    ;213
00073a  f04f31ff          MOVLT    r1,#0xffffffff        ;213
00073e  2101              MOVGE    r1,#1                 ;213
000740  f8dd8078          LDR      r8,[sp,#0x78]         ;214
000744  4498              ADD      r8,r8,r3              ;214
000746  eba80801          SUB      r8,r8,r1              ;214
00074a  f8528028          LDR      r8,[r2,r8,LSL #2]     ;214
00074e  45e0              CMP      r8,r12                ;214
000750  da07              BGE      |L2.1890|
000752  f8dd807c          LDR      r8,[sp,#0x7c]         ;214
000756  4498              ADD      r8,r8,r3              ;214
000758  4441              ADD      r1,r1,r8              ;214
00075a  f8521021          LDR      r1,[r2,r1,LSL #2]     ;214
00075e  4561              CMP      r1,r12                ;214
000760  db03              BLT      |L2.1898|
                  |L2.1890|
000762  f04f0900          MOV      r9,#0                 ;218
000766  2101              MOVS     r1,#1                 ;219
000768  e012              B        |L2.1936|
                  |L2.1898|
00076a  f1b90f00          CMP      r9,#0                 ;222
00076e  d10e              BNE      |L2.1934|
000770  9934              LDR      r1,[sp,#0xd0]         ;222
000772  458c              CMP      r12,r1                ;222
000774  dd0b              BLE      |L2.1934|
000776  1b99              SUBS     r1,r3,r6              ;222
000778  5c41              LDRB     r1,[r0,r1]            ;222
00077a  2902              CMP      r1,#2                 ;222
00077c  d007              BEQ      |L2.1934|
00077e  2102              MOVS     r1,#2                 ;224
000780  54c1              STRB     r1,[r0,r3]            ;224
000782  18c1              ADDS     r1,r0,r3              ;224
000784  f8441b04          STR      r1,[r4],#4            ;224
000788  f04f0901          MOV      r9,#1                 ;225
00078c  e001              B        |L2.1938|
                  |L2.1934|
00078e  2100              MOVS     r1,#0                 ;228
                  |L2.1936|
000790  54c1              STRB     r1,[r0,r3]            ;228
                  |L2.1938|
000792  1c5b              ADDS     r3,r3,#1              ;184
000794  42ab              CMP      r3,r5                 ;184
000796  db92              BLT      |L2.1726|
                  |L2.1944|
000798  e9dd010f          LDRD     r0,r1,[sp,#0x3c]      ;184
00079c  910f              STR      r1,[sp,#0x3c]         ;234
00079e  9911              LDR      r1,[sp,#0x44]         ;234
0007a0  e9cd1010          STRD     r1,r0,[sp,#0x40]      ;234
                  |L2.1956|
0007a4  9813              LDR      r0,[sp,#0x4c]         ;140
0007a6  1c7f              ADDS     r7,r7,#1              ;140
0007a8  4287              CMP      r7,r0                 ;140
0007aa  f77faee8          BLE      |L2.1406|
                  |L2.1966|
0007ae  a04b              ADR      r0,|L2.2268|
0007b0  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0007b4  a077              ADR      r0,|L2.2452|
0007b6  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0007ba  9800              LDR      r0,[sp,#0]            ;243
0007bc  4284              CMP      r4,r0                 ;243
0007be  bf84              ITT      HI                    ;246
0007c0  2308              MOVHI    r3,#8                 ;246
0007c2  2202              MOVHI    r2,#2                 ;222
0007c4  d95f              BLS      |L2.2182|
                  |L2.1990|
0007c6  1a20              SUBS     r0,r4,r0              ;246
0007c8  eb0301a0          ADD      r1,r3,r0,ASR #2       ;246
0007cc  9801              LDR      r0,[sp,#4]            ;246
0007ce  4281              CMP      r1,r0                 ;246
0007d0  dd0f              BLE      |L2.2034|
0007d2  4867              LDR      r0,|L2.2416|
0007d4  21fe              MOVS     r1,#0xfe              ;254
0007d6  f2af33c4          ADR      r3,|L2.1044|
0007da  a266              ADR      r2,|L2.2420|
0007dc  e9cd0100          STRD     r0,r1,[sp,#0]         ;254
0007e0  f2af3184          ADR      r1,|L2.1120|
0007e4  2005              MOVS     r0,#5                 ;254
0007e6  f7fffffe          BL       _Anki_Log
0007ea  b035              ADD      sp,sp,#0xd4
0007ec  4868              LDR      r0,|L2.2448|
0007ee  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.2034|
0007f2  f8540d04          LDR      r0,[r4,#-4]!          ;258
0007f6  f8101c01          LDRB     r1,[r0,#-1]           ;260
0007fa  b921              CBNZ     r1,|L2.2054|
0007fc  f8002c01          STRB     r2,[r0,#-1]           ;260
000800  1e41              SUBS     r1,r0,#1              ;260
000802  f8441b04          STR      r1,[r4],#4            ;260
                  |L2.2054|
000806  7841              LDRB     r1,[r0,#1]            ;261
000808  b919              CBNZ     r1,|L2.2066|
00080a  7042              STRB     r2,[r0,#1]            ;261
00080c  1c41              ADDS     r1,r0,#1              ;261
00080e  f8441b04          STR      r1,[r4],#4            ;261
                  |L2.2066|
000812  1b81              SUBS     r1,r0,r6              ;262
000814  f811cc01          LDRB     r12,[r1,#-1]          ;262
000818  f1bc0f00          CMP      r12,#0                ;262
00081c  d105              BNE      |L2.2090|
00081e  f8012c01          STRB     r2,[r1,#-1]           ;262
000822  f1a10c01          SUB      r12,r1,#1             ;262
000826  f844cb04          STR      r12,[r4],#4           ;262
                  |L2.2090|
00082a  f891c000          LDRB     r12,[r1,#0]           ;263
00082e  f1bc0f00          CMP      r12,#0                ;263
000832  d102              BNE      |L2.2106|
000834  700a              STRB     r2,[r1,#0]            ;263
000836  f8441b04          STR      r1,[r4],#4            ;263
                  |L2.2106|
00083a  f891c001          LDRB     r12,[r1,#1]           ;264
00083e  f1bc0f00          CMP      r12,#0                ;264
000842  d103              BNE      |L2.2124|
000844  f8012f01          STRB     r2,[r1,#1]!           ;264
000848  f8441b04          STR      r1,[r4],#4            ;264
                  |L2.2124|
00084c  1981              ADDS     r1,r0,r6              ;265
00084e  f811cc01          LDRB     r12,[r1,#-1]          ;265
000852  f1bc0f00          CMP      r12,#0                ;265
000856  d105              BNE      |L2.2148|
000858  f8012c01          STRB     r2,[r1,#-1]           ;265
00085c  f1a10c01          SUB      r12,r1,#1             ;265
000860  f844cb04          STR      r12,[r4],#4           ;265
                  |L2.2148|
000864  f810c006          LDRB     r12,[r0,r6]           ;266
000868  f1bc0f00          CMP      r12,#0                ;266
00086c  d102              BNE      |L2.2164|
00086e  5582              STRB     r2,[r0,r6]            ;266
000870  f8441b04          STR      r1,[r4],#4            ;266
                  |L2.2164|
000874  7848              LDRB     r0,[r1,#1]            ;267
000876  b918              CBNZ     r0,|L2.2176|
000878  f8012f01          STRB     r2,[r1,#1]!           ;267
00087c  f8441b04          STR      r1,[r4],#4            ;267
                  |L2.2176|
000880  9800              LDR      r0,[sp,#0]            ;243
000882  4284              CMP      r4,r0                 ;243
000884  d89f              BHI      |L2.1990|
                  |L2.2182|
000886  a043              ADR      r0,|L2.2452|
000888  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00088c  a047              ADR      r0,|L2.2476|
00088e  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000892  9812              LDR      r0,[sp,#0x48]         ;275
000894  9932              LDR      r1,[sp,#0xc8]         ;275
000896  4430              ADD      r0,r0,r6              ;275
000898  1c42              ADDS     r2,r0,#1              ;275
00089a  2000              MOVS     r0,#0                 ;276
00089c  688c              LDR      r4,[r1,#8]            ;276
00089e  690b              LDR      r3,[r1,#0x10]         ;276
0008a0  4684              MOV      r12,r0                ;278
0008a2  fb003104          MLA      r1,r0,r4,r3           ;278
0008a6  9813              LDR      r0,[sp,#0x4c]         ;278
0008a8  2800              CMP      r0,#0                 ;278
0008aa  dd10              BLE      |L2.2254|
                  |L2.2220|
0008ac  2000              MOVS     r0,#0                 ;280
0008ae  2d00              CMP      r5,#0                 ;280
0008b0  dd06              BLE      |L2.2240|
                  |L2.2226|
0008b2  5c13              LDRB     r3,[r2,r0]            ;281
0008b4  085b              LSRS     r3,r3,#1              ;281
0008b6  425b              RSBS     r3,r3,#0              ;281
0008b8  540b              STRB     r3,[r1,r0]            ;281
0008ba  1c40              ADDS     r0,r0,#1              ;280
0008bc  4285              CMP      r5,r0                 ;280
0008be  dcf8              BGT      |L2.2226|
                  |L2.2240|
0008c0  9813              LDR      r0,[sp,#0x4c]         ;278
0008c2  f10c0c01          ADD      r12,r12,#1            ;278
0008c6  4432              ADD      r2,r2,r6              ;278
0008c8  4421              ADD      r1,r1,r4              ;278
0008ca  4584              CMP      r12,r0                ;278
0008cc  dbee              BLT      |L2.2220|
                  |L2.2254|
0008ce  a037              ADR      r0,|L2.2476|
0008d0  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0008d4  b035              ADD      sp,sp,#0xd4
0008d6  2000              MOVS     r0,#0                 ;286
0008d8  e8bd8ff0          POP      {r4-r11,pc}
;;;288    
                          ENDP

                  |L2.2268|
0008dc  43616e6e          DCB      "Canny_candidateLoop",0
0008e0  795f6361
0008e4  6e646964
0008e8  6174654c
0008ec  6f6f7000
                  |L2.2288|
0008f0  2e2e5c63          DCB      "..\\coretech\\vision\\include\\anki/vision/robot/imageP"
0008f4  6f726574
0008f8  6563685c
0008fc  76697369
000900  6f6e5c69
000904  6e636c75
000908  64655c61
00090c  6e6b692f
000910  76697369
000914  6f6e2f72
000918  6f626f74
00091c  2f696d61
000920  676550  
000923  726f6365          DCB      "rocessing.h",0
000927  7373696e
00092b  672e6800
00092f  00                DCB      0
                  |L2.2352|
000930  436f6d70          DCB      "ComputeXGradient",0
000934  75746558
000938  47726164
00093c  69656e74
000940  00      
000941  00                DCB      0
000942  00                DCB      0
000943  00                DCB      0
                  |L2.2372|
000944  496d6167          DCB      "Image sizes don't match",0
000948  65207369
00094c  7a657320
000950  646f6e27
000954  74206d61
000958  74636800
                  |L2.2396|
00095c  436f6d70          DCB      "ComputeYGradient",0
000960  75746559
000964  47726164
000968  69656e74
00096c  00      
00096d  00                DCB      0
00096e  00                DCB      0
00096f  00                DCB      0
                  |L2.2416|
                          DCD      ||.constdata||
                  |L2.2420|
000974  4f757420          DCB      "Out of Canny stack space",0
000978  6f662043
00097c  616e6e79
000980  20737461
000984  636b2073
000988  70616365
00098c  00      
00098d  00                DCB      0
00098e  00                DCB      0
00098f  00                DCB      0
                  |L2.2448|
                          DCD      0x01000001
                  |L2.2452|
000994  43616e6e          DCB      "Canny_hysteresisLoop",0
000998  795f6879
00099c  73746572
0009a0  65736973
0009a4  4c6f6f70
0009a8  00      
0009a9  00                DCB      0
0009aa  00                DCB      0
0009ab  00                DCB      0
                  |L2.2476|
0009ac  43616e6e          DCB      "Canny_finalize",0
0009b0  795f6669
0009b4  6e616c69
0009b8  7a6500  
0009bb  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded18CannyEdgeDetectionERKNS0_5ArrayIhEERS2_iiiNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded18CannyEdgeDetectionERKNS0_5ArrayIhEERS2_iiiNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.4||, LINKORDER=||i._ZN4Anki8Embedded11cvWatershedERKNS0_5ArrayIhEERNS1_IiEENS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded11cvWatershedERKNS0_5ArrayIhEERNS1_IiEENS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a43616e          DCB      0x3a,0x43,0x61,0x6e
000020  6e794564          DCB      0x6e,0x79,0x45,0x64
000024  67654465          DCB      0x67,0x65,0x44,0x65
000028  74656374          DCB      0x74,0x65,0x63,0x74
00002c  696f6e28          DCB      0x69,0x6f,0x6e,0x28
000030  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000034  7420416e          DCB      0x74,0x20,0x41,0x6e
000038  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00003c  456d6265          DCB      0x45,0x6d,0x62,0x65
000040  64646564          DCB      0x64,0x64,0x65,0x64
000044  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000048  7261793c          DCB      0x72,0x61,0x79,0x3c
00004c  756e7369          DCB      0x75,0x6e,0x73,0x69
000050  676e6564          DCB      0x67,0x6e,0x65,0x64
000054  20636861          DCB      0x20,0x63,0x68,0x61
000058  723e2026          DCB      0x72,0x3e,0x20,0x26
00005c  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000060  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000064  456d6265          DCB      0x45,0x6d,0x62,0x65
000068  64646564          DCB      0x64,0x64,0x65,0x64
00006c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000070  7261793c          DCB      0x72,0x61,0x79,0x3c
000074  756e7369          DCB      0x75,0x6e,0x73,0x69
000078  676e6564          DCB      0x67,0x6e,0x65,0x64
00007c  20636861          DCB      0x20,0x63,0x68,0x61
000080  723e2026          DCB      0x72,0x3e,0x20,0x26
000084  2c207369          DCB      0x2c,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  20696e74          DCB      0x20,0x69,0x6e,0x74
000090  2c207369          DCB      0x2c,0x20,0x73,0x69
000094  676e6564          DCB      0x67,0x6e,0x65,0x64
000098  20696e74          DCB      0x20,0x69,0x6e,0x74
00009c  2c207369          DCB      0x2c,0x20,0x73,0x69
0000a0  676e6564          DCB      0x67,0x6e,0x65,0x64
0000a4  20696e74          DCB      0x20,0x69,0x6e,0x74
0000a8  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0000ac  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000b0  456d6265          DCB      0x45,0x6d,0x62,0x65
0000b4  64646564          DCB      0x64,0x64,0x65,0x64
0000b8  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
0000bc  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
0000c0  53746163          DCB      0x53,0x74,0x61,0x63
0000c4  6b2900            DCB      0x6b,0x29,0x00
                  |symbol_number.46|
0000c7  41                DCB      0x41
0000c8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000cc  3a526573          DCB      0x3a,0x52,0x65,0x73
0000d0  756c7420          DCB      0x75,0x6c,0x74,0x20
0000d4  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000d8  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000dc  62656464          DCB      0x62,0x65,0x64,0x64
0000e0  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000e4  63765761          DCB      0x63,0x76,0x57,0x61
0000e8  74657273          DCB      0x74,0x65,0x72,0x73
0000ec  68656428          DCB      0x68,0x65,0x64,0x28
0000f0  636f6e73          DCB      0x63,0x6f,0x6e,0x73
0000f4  7420416e          DCB      0x74,0x20,0x41,0x6e
0000f8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000fc  456d6265          DCB      0x45,0x6d,0x62,0x65
000100  64646564          DCB      0x64,0x64,0x65,0x64
000104  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000108  7261793c          DCB      0x72,0x61,0x79,0x3c
00010c  756e7369          DCB      0x75,0x6e,0x73,0x69
000110  676e6564          DCB      0x67,0x6e,0x65,0x64
000114  20636861          DCB      0x20,0x63,0x68,0x61
000118  723e2026          DCB      0x72,0x3e,0x20,0x26
00011c  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000120  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000124  456d6265          DCB      0x45,0x6d,0x62,0x65
000128  64646564          DCB      0x64,0x64,0x65,0x64
00012c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000130  7261793c          DCB      0x72,0x61,0x79,0x3c
000134  7369676e          DCB      0x73,0x69,0x67,0x6e
000138  65642069          DCB      0x65,0x64,0x20,0x69
00013c  6e743e20          DCB      0x6e,0x74,0x3e,0x20
000140  262c2041          DCB      0x26,0x2c,0x20,0x41
000144  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000148  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00014c  65646465          DCB      0x65,0x64,0x64,0x65
000150  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
000154  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000158  79537461          DCB      0x79,0x53,0x74,0x61
00015c  636b2900          DCB      0x63,0x6b,0x29,0x00
000160  4c696e65          DCB      0x4c,0x69,0x6e,0x65
000164  61725365          DCB      0x61,0x72,0x53,0x65
000168  7175656e          DCB      0x71,0x75,0x65,0x6e
00016c  63653c54          DCB      0x63,0x65,0x3c,0x54
000170  7970653e          DCB      0x79,0x70,0x65,0x3e
000174  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000178  6d707574          DCB      0x6d,0x70,0x75,0x74
00017c  6553697a          DCB      0x65,0x53,0x69,0x7a
000180  65000000          DCB      0x65,0x00,0x00,0x00
000184  73697a65          DCB      0x73,0x69,0x7a,0x65
000188  20657374          DCB      0x20,0x65,0x73,0x74
00018c  696d6174          DCB      0x69,0x6d,0x61,0x74
000190  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000194  6661696c          DCB      0x66,0x61,0x69,0x6c
000198  65640000          DCB      0x65,0x64,0x00,0x00
00019c  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0001a0  6f726574          DCB      0x6f,0x72,0x65,0x74
0001a4  6563685c          DCB      0x65,0x63,0x68,0x5c
0001a8  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001ac  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0001b0  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0001b4  64655c61          DCB      0x64,0x65,0x5c,0x61
0001b8  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0001bc  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001c0  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0001c4  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0001c8  2f736571          DCB      0x2f,0x73,0x65,0x71
0001cc  75656e63          DCB      0x75,0x65,0x6e,0x63
0001d0  65732e68          DCB      0x65,0x73,0x2e,0x68
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
0001d8  41727261          DCB      0x41,0x72,0x72,0x61
0001dc  793c5479          DCB      0x79,0x3c,0x54,0x79
0001e0  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0001e4  3a676574          DCB      0x3a,0x67,0x65,0x74
0001e8  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0001ec  65000000          DCB      0x65,0x00,0x00,0x00
0001f0  4e656761          DCB      0x4e,0x65,0x67,0x61
0001f4  74697665          DCB      0x74,0x69,0x76,0x65
0001f8  2064696d          DCB      0x20,0x64,0x69,0x6d
0001fc  656e7369          DCB      0x65,0x6e,0x73,0x69
000200  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000204  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000208  6f726574          DCB      0x6f,0x72,0x65,0x74
00020c  6563685c          DCB      0x65,0x63,0x68,0x5c
000210  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000214  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000218  6e636c75          DCB      0x6e,0x63,0x6c,0x75
00021c  64655c61          DCB      0x64,0x65,0x5c,0x61
000220  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000224  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000228  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
00022c  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000230  2f617272          DCB      0x2f,0x61,0x72,0x72
000234  61793264          DCB      0x61,0x79,0x32,0x64
000238  2e680000          DCB      0x2e,0x68,0x00,0x00
00023c  41727261          DCB      0x41,0x72,0x72,0x61
000240  793c5479          DCB      0x79,0x3c,0x54,0x79
000244  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000248  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
00024c  70757465          DCB      0x70,0x75,0x74,0x65
000250  52657175          DCB      0x52,0x65,0x71,0x75
000254  69726564          DCB      0x69,0x72,0x65,0x64
000258  53747269          DCB      0x53,0x74,0x72,0x69
00025c  64650000          DCB      0x64,0x65,0x00,0x00
000260  496e7661          DCB      0x49,0x6e,0x76,0x61
000264  6c696420          DCB      0x6c,0x69,0x64,0x20
000268  73697a65          DCB      0x73,0x69,0x7a,0x65
00026c  00                DCB      0x00

                          AREA ||t._ZN4Anki8Embedded5ArrayIiEclEiiii||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEclEiiii, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5ArrayIiEclEiiii PROC ; Anki::Embedded::Array<int>::operator ()(int, int, int, int)
;;;401    
;;;402        template<typename Type> ArraySlice<Type> Array<Type>::operator() (s32 minY, s32 maxY, s32 minX, s32 maxX)
000000  b5f0              PUSH     {r4-r7,lr}
;;;403        {
000002  b097              SUB      sp,sp,#0x5c
000004  460d              MOV      r5,r1
000006  e9dd671c          LDRD     r6,r7,[sp,#0x70]
00000a  4604              MOV      r4,r0
;;;404          LinearSequence<s32> ySlice = IndexSequence<s32>(minY, 1, maxY, this->size[0]);
00000c  2101              MOVS     r1,#1
00000e  6828              LDR      r0,[r5,#0]
000010  2a00              CMP      r2,#0
000012  bfb8              IT       LT
000014  4402              ADDLT    r2,r0
000016  2b00              CMP      r3,#0
000018  bfb8              IT       LT
00001a  4403              ADDLT    r3,r0
00001c  4610              MOV      r0,r2
00001e  e9cd210e          STRD     r2,r1,[sp,#0x38]
000022  461a              MOV      r2,r3
000024  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
000028  e9dd120e          LDRD     r1,r2,[sp,#0x38]
00002c  900d              STR      r0,[sp,#0x34]
00002e  e9cd0110          STRD     r0,r1,[sp,#0x40]
000032  9212              STR      r2,[sp,#0x48]
;;;405          LinearSequence<s32> xSlice = IndexSequence<s32>(minX, 1, maxX, this->size[1]);
000034  2101              MOVS     r1,#1
000036  6868              LDR      r0,[r5,#4]
000038  463a              MOV      r2,r7
00003a  2e00              CMP      r6,#0
00003c  bfb8              IT       LT
00003e  4406              ADDLT    r6,r0
000040  2a00              CMP      r2,#0
000042  bfb8              IT       LT
000044  183a              ADDLT    r2,r7,r0
000046  e9cd610e          STRD     r6,r1,[sp,#0x38]
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
000050  e9dd120e          LDRD     r1,r2,[sp,#0x38]
000054  900d              STR      r0,[sp,#0x34]
000056  9215              STR      r2,[sp,#0x54]
000058  e9cd0113          STRD     r0,r1,[sp,#0x4c]
;;;406    
;;;407          ArraySlice<Type> slice(*this, ySlice, xSlice);
00005c  e9d53001          LDRD     r3,r0,[r5,#4]
000060  e9d5c103          LDRD     r12,r1,[r5,#0xc]
000064  682a              LDR      r2,[r5,#0]
000066  e9dd5610          LDRD     r5,r6,[sp,#0x40]
00006a  e9cd5600          STRD     r5,r6,[sp,#0]
00006e  9f12              LDR      r7,[sp,#0x48]
000070  9702              STR      r7,[sp,#8]
000072  e9dd5613          LDRD     r5,r6,[sp,#0x4c]
000076  9f15              LDR      r7,[sp,#0x54]
000078  e9cd5603          STRD     r5,r6,[sp,#0xc]
00007c  e9cd3007          STRD     r3,r0,[sp,#0x1c]
000080  e9cdc109          STRD     r12,r1,[sp,#0x24]
000084  e9cd7205          STRD     r7,r2,[sp,#0x14]
000088  2500              MOVS     r5,#0
00008a  2a00              CMP      r2,#0
00008c  bfc8              IT       GT
00008e  2b00              CMPGT    r3,#0
000090  dd27              BLE      |L20.226|
000092  fb02fc03          MUL      r12,r2,r3
000096  f1bc0f00          CMP      r12,#0
00009a  d022              BEQ      |L20.226|
00009c  f04f0c00          MOV      r12,#0
0000a0  fb0c1c00          MLA      r12,r12,r0,r1
0000a4  f8cdc02c          STR      r12,[sp,#0x2c]
                  |L20.168|
0000a8  2a00              CMP      r2,#0
0000aa  bfc8              IT       GT
0000ac  2b00              CMPGT    r3,#0
0000ae  dd1a              BLE      |L20.230|
0000b0  435a              MULS     r2,r3,r2
0000b2  b1c2              CBZ      r2,|L20.230|
0000b4  2200              MOVS     r2,#0
0000b6  fb021000          MLA      r0,r2,r0,r1
0000ba  900c              STR      r0,[sp,#0x30]
                  |L20.188|
;;;408    
;;;409          return slice;
0000bc  e89d000f          LDM      sp,{r0-r3}
0000c0  46b4              MOV      r12,r6
0000c2  463d              MOV      r5,r7
0000c4  e9dd6706          LDRD     r6,r7,[sp,#0x18]
0000c8  61e7              STR      r7,[r4,#0x1c]
0000ca  e884100f          STM      r4,{r0-r3,r12}
0000ce  e9c45605          STRD     r5,r6,[r4,#0x14]
0000d2  ad08              ADD      r5,sp,#0x20
0000d4  3420              ADDS     r4,r4,#0x20
0000d6  e8b5100f          LDM      r5!,{r0-r3,r12}
0000da  e8a4100f          STM      r4!,{r0-r3,r12}
;;;410        }
0000de  b017              ADD      sp,sp,#0x5c
0000e0  bdf0              POP      {r4-r7,pc}
                  |L20.226|
0000e2  950b              STR      r5,[sp,#0x2c]
0000e4  e7e0              B        |L20.168|
                  |L20.230|
0000e6  950c              STR      r5,[sp,#0x30]
0000e8  e7e8              B        |L20.188|
;;;411    
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN4Anki8Embedded5ArrayIiEclEiiii, LINKORDER=||t._ZN4Anki8Embedded5ArrayIiEclEiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIiEclEiiii||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIsEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<short>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L27.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L27.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L27.384|
000044  a25c              ADR      r2,|L27.440|
000046  a160              ADR      r1,|L27.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L27.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0040              LSLS     r0,r0,#1
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L27.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L27.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L27.384|
000080  a24d              ADR      r2,|L27.440|
000082  a157              ADR      r1,|L27.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L27.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L27.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L27.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L27.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L27.384|
0000c8  a251              ADR      r2,|L27.528|
0000ca  a156              ADR      r1,|L27.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L27.372|
                  |L27.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L27.384|
0000e0  a258              ADR      r2,|L27.580|
0000e2  a15f              ADR      r1,|L27.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L27.372|
                  |L27.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L27.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L27.384|
000110  a259              ADR      r2,|L27.632|
000112  a144              ADR      r1,|L27.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L27.372|
                  |L27.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  0071              LSLS     r1,r6,#1
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L27.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L27.384|
00015a  a251              ADR      r2,|L27.672|
00015c  a140              ADR      r1,|L27.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L27.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L27.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L27.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L27.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L27.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L27.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIsE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L27.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L27.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIsE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L27.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L27.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L27.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L27.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L27.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L27.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.28||, COMGROUP=_ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded10ArraySliceIiE3SetEi||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIiE3SetEi, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded10ArraySliceIiE3SetEi PROC ; Anki::Embedded::ArraySlice<int>::Set(int)
;;;109    
;;;110        template<typename Type> s32 ArraySlice<Type>::Set(const Type value)
000000  b530              PUSH     {r4,r5,lr}
;;;111        {
000002  6a82              LDR      r2,[r0,#0x28]
000004  b089              SUB      sp,sp,#0x24
000006  f1000318          ADD      r3,r0,#0x18
00000a  b1ea              CBZ      r2,|L34.72|
00000c  681a              LDR      r2,[r3,#0]
00000e  2a00              CMP      r2,#0
000010  bfa4              ITT      GE
000012  685a              LDRGE    r2,[r3,#4]
000014  2a00              CMPGE    r2,#0
000016  db17              BLT      |L34.72|
000018  f04f0c01          MOV      r12,#1
00001c  f88dc008          STRB     r12,[sp,#8]
000020  f8d0c010          LDR      r12,[r0,#0x10]
000024  f8cdc00c          STR      r12,[sp,#0xc]
000028  f8d0c014          LDR      r12,[r0,#0x14]
00002c  f8cdc010          STR      r12,[sp,#0x10]
000030  68c2              LDR      r2,[r0,#0xc]
000032  9205              STR      r2,[sp,#0x14]
000034  6842              LDR      r2,[r0,#4]
000036  9206              STR      r2,[sp,#0x18]
000038  6882              LDR      r2,[r0,#8]
00003a  9207              STR      r2,[sp,#0x1c]
00003c  6800              LDR      r0,[r0,#0]
;;;112          Array<Type> &array = this->get_array();
;;;113    
;;;114          AnkiConditionalErrorAndReturnValue(array.IsValid(),
;;;115            0, "ArraySlice<Type>::Set", "Array<Type> is not valid");
;;;116    
;;;117          const ArraySliceLimits_in1_out0<s32> limits(this->get_ySlice(), this->get_xSlice());
;;;118    
;;;119          AnkiConditionalErrorAndReturnValue(limits.isValid,
;;;120            0, "ArraySlice<Type>::Set", "Limits is not valid");
;;;121    
;;;122          for(s32 iy=0; iy<limits.rawIn1Limits.ySize; iy++) {
00003e  2200              MOVS     r2,#0
000040  9008              STR      r0,[sp,#0x20]
000042  2800              CMP      r0,#0
000044  dd2b              BLE      |L34.158|
000046  e00c              B        |L34.98|
                  |L34.72|
000048  2172              MOVS     r1,#0x72              ;114
00004a  4817              LDR      r0,|L34.168|
00004c  e9cd0100          STRD     r0,r1,[sp,#0]         ;114
000050  a316              ADR      r3,|L34.172|
000052  a225              ADR      r2,|L34.232|
000054  a12b              ADR      r1,|L34.260|
000056  2005              MOVS     r0,#5                 ;114
000058  f7fffffe          BL       _Anki_Log
;;;123            const s32 y = limits.rawIn1Limits.yStart + iy * limits.rawIn1Limits.yIncrement;
;;;124            Type * restrict pMat = array.Pointer(y, 0);
;;;125    
;;;126            for(s32 ix=0; ix<limits.rawIn1Limits.xSize; ix++) {
;;;127              const s32 x = limits.rawIn1Limits.xStart + ix * limits.rawIn1Limits.xIncrement;
;;;128              pMat[x] = value;
;;;129            }
;;;130          }
;;;131    
;;;132          return limits.rawIn1Limits.xSize*limits.rawIn1Limits.ySize;
;;;133        }
00005c  b009              ADD      sp,sp,#0x24
00005e  2000              MOVS     r0,#0                 ;114
000060  bd30              POP      {r4,r5,pc}
                  |L34.98|
000062  e9dd0c06          LDRD     r0,r12,[sp,#0x18]
000066  fb02000c          MLA      r0,r2,r12,r0          ;123
00006a  f8d3c010          LDR      r12,[r3,#0x10]        ;123
00006e  689c              LDR      r4,[r3,#8]            ;123
000070  fb00c404          MLA      r4,r0,r4,r12          ;123
000074  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000078  2000              MOVS     r0,#0                 ;126
00007a  f1bc0f00          CMP      r12,#0                ;126
00007e  dd0a              BLE      |L34.150|
                  |L34.128|
000080  e9ddc503          LDRD     r12,r5,[sp,#0xc]      ;126
000084  fb00cc05          MLA      r12,r0,r5,r12         ;127
000088  1c40              ADDS     r0,r0,#1              ;126
00008a  f844102c          STR      r1,[r4,r12,LSL #2]    ;128
00008e  f8ddc014          LDR      r12,[sp,#0x14]        ;126
000092  4584              CMP      r12,r0                ;126
000094  dcf4              BGT      |L34.128|
                  |L34.150|
000096  9808              LDR      r0,[sp,#0x20]         ;122
000098  1c52              ADDS     r2,r2,#1              ;122
00009a  4290              CMP      r0,r2                 ;122
00009c  dce1              BGT      |L34.98|
                  |L34.158|
00009e  9908              LDR      r1,[sp,#0x20]         ;132
0000a0  9805              LDR      r0,[sp,#0x14]         ;132
0000a2  b009              ADD      sp,sp,#0x24
0000a4  4348              MULS     r0,r1,r0              ;132
0000a6  bd30              POP      {r4,r5,pc}
;;;134    
                          ENDP

                  |L34.168|
                          DCD      _ZZN4Anki8Embedded10ArraySliceIiE3SetEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<int>::Set(int)::__PRETTY_FUNCTION__
                  |L34.172|
0000ac  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0000b0  6f726574
0000b4  6563685c
0000b8  636f6d6d
0000bc  6f6e5c69
0000c0  6e636c75
0000c4  64655c61
0000c8  6e6b692f
0000cc  636f6d6d
0000d0  6f6e2f72
0000d4  6f626f74
0000d8  2f617272
0000dc  617953  
0000df  6c696365          DCB      "lices.h",0
0000e3  732e6800
0000e7  00                DCB      0
                  |L34.232|
0000e8  41727261          DCB      "Array<Type> is not valid",0
0000ec  793c5479
0000f0  70653e20
0000f4  6973206e
0000f8  6f742076
0000fc  616c6964
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L34.260|
000104  41727261          DCB      "ArraySlice<Type>::Set",0
000108  79536c69
00010c  63653c54
000110  7970653e
000114  3a3a5365
000118  7400    
00011a  00                DCB      0
00011b  00                DCB      0

                          AREA ||area_number.35||, COMGROUP=_ZN4Anki8Embedded10ArraySliceIiE3SetEi, LINKORDER=||t._ZN4Anki8Embedded10ArraySliceIiE3SetEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded10ArraySliceIiE3SetEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii PROC ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)
;;;105    
;;;106        template<typename Type> s32 LinearSequence<Type>::computeSize(const Type start, const Type increment, const Type end)
000000  4290              CMP      r0,r2
;;;107        {
;;;108          if(start == end) {
;;;109            return 1;
000002  bf04              ITT      EQ
000004  2001              MOVEQ    r0,#1
;;;110          } else {
;;;111            if(ABS(increment) <= Flags::numeric_limits<Type>::epsilon()) {
;;;112              return 0;
;;;113            }
;;;114          }
;;;115    
;;;116          // 10:-1:12
;;;117          if(increment < 0 && start < end) {
;;;118            return 0;
;;;119          }
;;;120    
;;;121          // 12:1:10
;;;122          if(increment > 0 && start > end) {
;;;123            return 0;
;;;124          }
;;;125    
;;;126          const Type minLimit = MIN(start, end);
;;;127          const Type maxLimit = MAX(start, end);
;;;128          const Type incrementMagnitude = ABS(increment);
;;;129    
;;;130          const Type validRange = maxLimit - minLimit;
;;;131          const s32 size = (validRange+incrementMagnitude) / incrementMagnitude;
;;;132    
;;;133          AnkiConditionalErrorAndReturnValue(size >= 0,
;;;134            0, "LinearSequence<Type>::computeSize", "size estimation failed");
;;;135    
;;;136          return size;
;;;137        }
000006  4770              BXEQ     lr
000008  b510              PUSH     {r4,lr}               ;107
00000a  2400              MOVS     r4,#0                 ;107
00000c  424b              RSBS     r3,r1,#0              ;111
00000e  b082              SUB      sp,sp,#8              ;107
000010  2900              CMP      r1,#0                 ;111
000012  bfac              ITE      GE                    ;111
000014  468c              MOVGE    r12,r1                ;111
000016  469c              MOVLT    r12,r3                ;111
000018  4564              CMP      r4,r12                ;111
00001a  da03              BGE      |L41.36|
00001c  2900              CMP      r1,#0                 ;117
00001e  da04              BGE      |L41.42|
000020  4290              CMP      r0,r2                 ;117
000022  da05              BGE      |L41.48|
                  |L41.36|
000024  b002              ADD      sp,sp,#8
000026  2000              MOVS     r0,#0                 ;123
000028  bd10              POP      {r4,pc}
                  |L41.42|
00002a  bf18              IT       NE                    ;122
00002c  4290              CMPNE    r0,r2                 ;122
00002e  dcf9              BGT      |L41.36|
                  |L41.48|
000030  4290              CMP      r0,r2                 ;126
000032  bfb4              ITE      LT                    ;126
000034  4684              MOVLT    r12,r0                ;126
000036  4694              MOVGE    r12,r2                ;126
000038  bfd8              IT       LE                    ;127
00003a  4610              MOVLE    r0,r2                 ;127
00003c  2900              CMP      r1,#0                 ;128
00003e  bfb8              IT       LT                    ;128
000040  4619              MOVLT    r1,r3                 ;128
000042  eba0000c          SUB      r0,r0,r12             ;130
000046  4408              ADD      r0,r0,r1              ;131
000048  fb90f0f1          SDIV     r0,r0,r1              ;131
00004c  2800              CMP      r0,#0                 ;133
00004e  bfa4              ITT      GE
000050  b002              ADDGE    sp,sp,#8
000052  bd10              POPGE    {r4,pc}
000054  2185              MOVS     r1,#0x85              ;133
000056  4807              LDR      r0,|L41.116|
000058  4b07              LDR      r3,|L41.120|
00005a  e9cd0100          STRD     r0,r1,[sp,#0]         ;133
00005e  f1a30218          SUB      r2,r3,#0x18           ;133
000062  f1a20124          SUB      r1,r2,#0x24           ;133
000066  2005              MOVS     r0,#5                 ;133
000068  f7fffffe          BL       _Anki_Log
00006c  b002              ADD      sp,sp,#8
00006e  2000              MOVS     r0,#0                 ;133
000070  bd10              POP      {r4,pc}
;;;138    
                          ENDP

000072  0000              DCW      0x0000
                  |L41.116|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L41.120|
                          DCD      ||.constdata||+0x19c

                          AREA ||area_number.42||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiii||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi PROC ; Anki::Embedded::Array<unsigned char>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L48.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L48.56|
00000e  4b0b              LDR      r3,|L48.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L48.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L48.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
                  |L48.60|
                          DCD      ||.constdata||+0x204

                          AREA ||area_number.49||, COMGROUP=_ZNK4Anki8Embedded5ArrayIhE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIhE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIPhEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<unsigned char*>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<unsigned char*>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L55.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L55.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L55.384|
000044  a25c              ADR      r2,|L55.440|
000046  a160              ADR      r1,|L55.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L55.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L55.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L55.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L55.384|
000080  a24d              ADR      r2,|L55.440|
000082  a157              ADR      r1,|L55.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L55.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L55.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L55.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L55.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L55.384|
0000c8  a251              ADR      r2,|L55.528|
0000ca  a156              ADR      r1,|L55.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L55.372|
                  |L55.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L55.384|
0000e0  a258              ADR      r2,|L55.580|
0000e2  a15f              ADR      r1,|L55.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L55.372|
                  |L55.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L55.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L55.384|
000110  a259              ADR      r2,|L55.632|
000112  a144              ADR      r1,|L55.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L55.372|
                  |L55.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L55.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L55.384|
00015a  a251              ADR      r2,|L55.672|
00015c  a140              ADR      r1,|L55.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L55.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L55.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char*>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L55.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L55.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L55.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L55.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIPhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char*>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L55.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L55.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIPhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char*>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L55.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L55.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L55.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L55.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L55.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L55.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.56||, COMGROUP=_ZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListIPhE8set_sizeEi||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIPhE8set_sizeEi, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15FixedLengthListIPhE8set_sizeEi PROC ; Anki::Embedded::FixedLengthList<unsigned char*>::set_size(int)
;;;180        // Attempt to set the size to newSize. Returns the value that was actually set.
;;;181        template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
000000  4603              MOV      r3,r0
000002  69c0              LDR      r0,[r0,#0x1c]
;;;182        {
;;;183          newSize = MIN(this->get_maximumSize(), MAX(0,newSize));
000004  2900              CMP      r1,#0
000006  bfb4              ITE      LT
000008  2200              MOVLT    r2,#0
00000a  460a              MOVGE    r2,r1
00000c  4290              CMP      r0,r2
00000e  bfb8              IT       LT
000010  4601              MOVLT    r1,r0
000012  db02              BLT      |L62.26|
000014  2900              CMP      r1,#0
000016  bfb8              IT       LT
000018  2100              MOVLT    r1,#0
                  |L62.26|
00001a  4608              MOV      r0,r1
;;;184    
;;;185          this->xSlice.size = newSize;
00001c  60d9              STR      r1,[r3,#0xc]
;;;186    
;;;187          return newSize;
;;;188        } // s32 FixedLengthList<Type>::set_size(s32 newSize)
00001e  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||area_number.63||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListIPhE8set_sizeEi, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListIPhE8set_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListIPhE8set_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_||, COMGROUP=_ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_ PROC ; Anki::Embedded::AreEqualSize<Anki::Embedded::Array<unsigned char>, Anki::Embedded::Array<short>>(const T1&, const T2&)
;;;144    
;;;145        template<typename Type1, typename Type2> bool AreEqualSize(const Type1 &object1, const Type2 &object2)
000000  b570              PUSH     {r4-r6,lr}
;;;146        {
000002  4605              MOV      r5,r0
000004  6900              LDR      r0,[r0,#0x10]
000006  460c              MOV      r4,r1
000008  b1e8              CBZ      r0,|L69.70|
00000a  6828              LDR      r0,[r5,#0]
00000c  2800              CMP      r0,#0
00000e  bfa4              ITT      GE
000010  6868              LDRGE    r0,[r5,#4]
000012  2800              CMPGE    r0,#0
000014  db17              BLT      |L69.70|
000016  6920              LDR      r0,[r4,#0x10]
000018  b1a8              CBZ      r0,|L69.70|
00001a  6820              LDR      r0,[r4,#0]
00001c  2800              CMP      r0,#0
00001e  bfa4              ITT      GE
000020  6860              LDRGE    r0,[r4,#4]
000022  2800              CMPGE    r0,#0
000024  db0f              BLT      |L69.70|
;;;147          if(!AreValid(object1, object2))
;;;148            return false;
;;;149    
;;;150          if(object1.get_size(0) != object2.get_size(0) || object1.get_size(1) != object2.get_size(1))
000026  2100              MOVS     r1,#0
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00002e  6821              LDR      r1,[r4,#0]
000030  4288              CMP      r0,r1
000032  d108              BNE      |L69.70|
000034  2101              MOVS     r1,#1
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIhE8get_sizeEi ; Anki::Embedded::Array<unsigned char>::get_size(int) const
00003c  6861              LDR      r1,[r4,#4]
00003e  4288              CMP      r0,r1
;;;151            return false;
;;;152    
;;;153          return true;
000040  bf04              ITT      EQ
000042  2001              MOVEQ    r0,#1
;;;154        }
000044  bd70              POPEQ    {r4-r6,pc}
                  |L69.70|
000046  2000              MOVS     r0,#0                 ;151
000048  bd70              POP      {r4-r6,pc}
;;;155    
                          ENDP


                          AREA ||area_number.70||, COMGROUP=_ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_, LINKORDER=||t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.70||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded12AreEqualSizeINS0_5ArrayIhEENS2_IsEEEEbRKT_RKT0_||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIhE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  756e7369          DCB      0x75,0x6e,0x73,0x69
000054  676e6564          DCB      0x67,0x6e,0x65,0x64
000058  20636861          DCB      0x20,0x63,0x68,0x61
00005c  725d00            DCB      0x72,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIsEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d207369          DCB      0x3d,0x20,0x73,0x69
000088  676e6564          DCB      0x67,0x6e,0x65,0x64
00008c  2073686f          DCB      0x20,0x73,0x68,0x6f
000090  72745d00          DCB      0x72,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIsE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIsE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIsE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000bc  65642073          DCB      0x65,0x64,0x20,0x73
0000c0  686f7274          DCB      0x68,0x6f,0x72,0x74
0000c4  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIsE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIsE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIsE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<short>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2073          DCB      0x20,0x3d,0x20,0x73
000094  69676e65          DCB      0x69,0x67,0x6e,0x65
000098  64207368          DCB      0x64,0x20,0x73,0x68
00009c  6f72745d          DCB      0x6f,0x72,0x74,0x5d
0000a0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIPhEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char*>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20756e          DCB      0x3d,0x20,0x75,0x6e
000088  7369676e          DCB      0x73,0x69,0x67,0x6e
00008c  65642063          DCB      0x65,0x64,0x20,0x63
000090  68617220          DCB      0x68,0x61,0x72,0x20
000094  2a5d00            DCB      0x2a,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIPhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIPhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIPhE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char*>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  756e7369          DCB      0x75,0x6e,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  20636861          DCB      0x20,0x63,0x68,0x61
0000c4  72202a5d          DCB      0x72,0x20,0x2a,0x5d
0000c8  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIPhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIPhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIPhE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<unsigned char*>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2075          DCB      0x20,0x3d,0x20,0x75
000094  6e736967          DCB      0x6e,0x73,0x69,0x67
000098  6e656420          DCB      0x6e,0x65,0x64,0x20
00009c  63686172          DCB      0x63,0x68,0x61,0x72
0000a0  202a5d00          DCB      0x20,0x2a,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded10ArraySliceIiE3SetEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded10ArraySliceIiE3SetEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded10ArraySliceIiE3SetEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySlice<int>::Set(int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  536c6963          DCB      0x53,0x6c,0x69,0x63
000024  653c5479          DCB      0x65,0x3c,0x54,0x79
000028  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00002c  3a536574          DCB      0x3a,0x53,0x65,0x74
000030  28547970          DCB      0x28,0x54,0x79,0x70
000034  6529205b          DCB      0x65,0x29,0x20,0x5b
000038  77697468          DCB      0x77,0x69,0x74,0x68
00003c  20547970          DCB      0x20,0x54,0x79,0x70
000040  65203d20          DCB      0x65,0x20,0x3d,0x20
000044  7369676e          DCB      0x73,0x69,0x67,0x6e
000048  65642069          DCB      0x65,0x64,0x20,0x69
00004c  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded15ImageProcessing16ComputeXGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeXGradient<unsigned char, short, short>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000030  6d707574          DCB      0x6d,0x70,0x75,0x74
000034  65584772          DCB      0x65,0x58,0x47,0x72
000038  61646965          DCB      0x61,0x64,0x69,0x65
00003c  6e742863          DCB      0x6e,0x74,0x28,0x63
000040  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000044  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000048  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00004c  6d626564          DCB      0x6d,0x62,0x65,0x64
000050  6465643a          DCB      0x64,0x65,0x64,0x3a
000054  3a417272          DCB      0x3a,0x41,0x72,0x72
000058  61793c54          DCB      0x61,0x79,0x3c,0x54
00005c  7970653e          DCB      0x79,0x70,0x65,0x3e
000060  20262c20          DCB      0x20,0x26,0x2c,0x20
000064  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000068  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00006c  62656464          DCB      0x62,0x65,0x64,0x64
000070  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000074  41727261          DCB      0x41,0x72,0x72,0x61
000078  793c4f75          DCB      0x79,0x3c,0x4f,0x75
00007c  74547970          DCB      0x74,0x54,0x79,0x70
000080  653e2026          DCB      0x65,0x3e,0x20,0x26
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  496e5479          DCB      0x49,0x6e,0x54,0x79
000090  7065203d          DCB      0x70,0x65,0x20,0x3d
000094  20756e73          DCB      0x20,0x75,0x6e,0x73
000098  69676e65          DCB      0x69,0x67,0x6e,0x65
00009c  64206368          DCB      0x64,0x20,0x63,0x68
0000a0  61722c20          DCB      0x61,0x72,0x2c,0x20
0000a4  496e7465          DCB      0x49,0x6e,0x74,0x65
0000a8  726d6564          DCB      0x72,0x6d,0x65,0x64
0000ac  69617465          DCB      0x69,0x61,0x74,0x65
0000b0  54797065          DCB      0x54,0x79,0x70,0x65
0000b4  203d2073          DCB      0x20,0x3d,0x20,0x73
0000b8  69676e65          DCB      0x69,0x67,0x6e,0x65
0000bc  64207368          DCB      0x64,0x20,0x73,0x68
0000c0  6f72742c          DCB      0x6f,0x72,0x74,0x2c
0000c4  204f7574          DCB      0x20,0x4f,0x75,0x74
0000c8  54797065          DCB      0x54,0x79,0x70,0x65
0000cc  203d2073          DCB      0x20,0x3d,0x20,0x73
0000d0  69676e65          DCB      0x69,0x67,0x6e,0x65
0000d4  64207368          DCB      0x64,0x20,0x73,0x68
0000d8  6f72745d          DCB      0x6f,0x72,0x74,0x5d
0000dc  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded15ImageProcessing16ComputeYGradientIhssEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::ImageProcessing::ComputeYGradient<unsigned char, short, short>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T3>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a496d61          DCB      0x3a,0x49,0x6d,0x61
000020  67655072          DCB      0x67,0x65,0x50,0x72
000024  6f636573          DCB      0x6f,0x63,0x65,0x73
000028  73696e67          DCB      0x73,0x69,0x6e,0x67
00002c  3a3a436f          DCB      0x3a,0x3a,0x43,0x6f
000030  6d707574          DCB      0x6d,0x70,0x75,0x74
000034  65594772          DCB      0x65,0x59,0x47,0x72
000038  61646965          DCB      0x61,0x64,0x69,0x65
00003c  6e742863          DCB      0x6e,0x74,0x28,0x63
000040  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000044  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000048  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00004c  6d626564          DCB      0x6d,0x62,0x65,0x64
000050  6465643a          DCB      0x64,0x65,0x64,0x3a
000054  3a417272          DCB      0x3a,0x41,0x72,0x72
000058  61793c54          DCB      0x61,0x79,0x3c,0x54
00005c  7970653e          DCB      0x79,0x70,0x65,0x3e
000060  20262c20          DCB      0x20,0x26,0x2c,0x20
000064  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000068  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00006c  62656464          DCB      0x62,0x65,0x64,0x64
000070  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000074  41727261          DCB      0x41,0x72,0x72,0x61
000078  793c4f75          DCB      0x79,0x3c,0x4f,0x75
00007c  74547970          DCB      0x74,0x54,0x79,0x70
000080  653e2026          DCB      0x65,0x3e,0x20,0x26
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  496e5479          DCB      0x49,0x6e,0x54,0x79
000090  7065203d          DCB      0x70,0x65,0x20,0x3d
000094  20756e73          DCB      0x20,0x75,0x6e,0x73
000098  69676e65          DCB      0x69,0x67,0x6e,0x65
00009c  64206368          DCB      0x64,0x20,0x63,0x68
0000a0  61722c20          DCB      0x61,0x72,0x2c,0x20
0000a4  496e7465          DCB      0x49,0x6e,0x74,0x65
0000a8  726d6564          DCB      0x72,0x6d,0x65,0x64
0000ac  69617465          DCB      0x69,0x61,0x74,0x65
0000b0  54797065          DCB      0x54,0x79,0x70,0x65
0000b4  203d2073          DCB      0x20,0x3d,0x20,0x73
0000b8  69676e65          DCB      0x69,0x67,0x6e,0x65
0000bc  64207368          DCB      0x64,0x20,0x73,0x68
0000c0  6f72742c          DCB      0x6f,0x72,0x74,0x2c
0000c4  204f7574          DCB      0x20,0x4f,0x75,0x74
0000c8  54797065          DCB      0x54,0x79,0x70,0x65
0000cc  203d2073          DCB      0x20,0x3d,0x20,0x73
0000d0  69676e65          DCB      0x69,0x67,0x6e,0x65
0000d4  64207368          DCB      0x64,0x20,0x73,0x68
0000d8  6f72745d          DCB      0x6f,0x72,0x74,0x5d
0000dc  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\opencvLight_vision.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___22_opencvLight_vision_cpp_3ccef3aa___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___22_opencvLight_vision_cpp_3ccef3aa___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___22_opencvLight_vision_cpp_3ccef3aa___Z7__REVSHi|
#line 144
|__asm___22_opencvLight_vision_cpp_3ccef3aa___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
