; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\pathfollower.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\pathfollower.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\pathfollower.crf supervisor\src\pathFollower.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo12PathFollower12GetPathErrorERfS2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower12GetPathErrorERfS2_ PROC ; Anki::Cozmo::PathFollower::GetPathError(float&, float&)
;;;398          
;;;399          bool GetPathError(f32 &shortestDistanceToPath_mm, f32 &radDiff)
000000  4a09              LDR      r2,|L1.40|
000002  f9923000          LDRSB    r3,[r2,#0]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
000006  17db              ASRS     r3,r3,#31
000008  f1b33fff          CMP      r3,#0xffffffff
;;;400          {
;;;401            if (!IsTraversingPath()) {
;;;402              return false;
00000c  bf04              ITT      EQ
00000e  2000              MOVEQ    r0,#0
;;;403            }
;;;404            
;;;405            shortestDistanceToPath_mm = distToPath_mm_;
;;;406            radDiff = radToPath_;
;;;407            return true;
;;;408          }
000010  4770              BXEQ     lr
000012  ed920a02          VLDR     s0,[r2,#8]            ;405
000016  ed800a00          VSTR     s0,[r0,#0]            ;405
00001a  ed920a03          VLDR     s0,[r2,#0xc]          ;406
00001e  2001              MOVS     r0,#1                 ;407
000020  ed810a00          VSTR     s0,[r1,#0]            ;406
000024  4770              BX       lr
;;;409          
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower12PathCompleteEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower12PathCompleteEv PROC ; Anki::Cozmo::PathFollower::PathComplete()
;;;380          // Post-path completion cleanup
;;;381          void PathComplete()
000000  4805              LDR      r0,|L2.24|
;;;382          {
;;;383            pointTurnStarted_ = false;
000002  2200              MOVS     r2,#0
;;;384            currPathSegment_ = -1;
000004  1e51              SUBS     r1,r2,#1
000006  7082              STRB     r2,[r0,#2]            ;383
000008  7001              STRB     r1,[r0,#0]
;;;385            realPathSegment_ = -1;
00000a  7041              STRB     r1,[r0,#1]
;;;386            
;;;387            manualSpeedControl_ = false;
;;;388            manualPathSpeed_ = 0;
00000c  ed9f0a03          VLDR     s0,|L2.28|
000010  70c2              STRB     r2,[r0,#3]            ;387
000012  ed800a04          VSTR     s0,[r0,#0x10]
;;;389            
;;;390    #if(DEBUG_PATH_FOLLOWER)
;;;391            PRINT("*** PATH COMPLETE ***\n");
;;;392    #endif
;;;393    #if(ENABLE_PATH_VIZ)
;;;394            Viz::ErasePath(0);
;;;395    #endif
;;;396          }
000016  4770              BX       lr
;;;397          
                          ENDP

                  |L2.24|
                          DCD      ||.data||
                  |L2.28|
00001c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki5Cozmo12PathFollower13DriveStraightEffff||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo12PathFollower13DriveStraightEffff PROC ; Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
;;;545          
;;;546          bool DriveStraight(f32 dist_mm, f32 acc_start_frac, f32 acc_end_frac, f32 duration_sec)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;547          {
000004  ed2d8b0c          VPUSH    {d8-d13}
000008  b0a7              SUB      sp,sp,#0x9c
00000a  eeb08a61          VMOV.F32 s16,s3
00000e  eeb09a41          VMOV.F32 s18,s2
000012  eef09a60          VMOV.F32 s19,s1
000016  eef08a40          VMOV.F32 s17,s0
;;;548            VelocityProfileGenerator vpg;
00001a  a80e              ADD      r0,sp,#0x38
00001c  f7fffffe          BL       _ZN4Anki24VelocityProfileGeneratorC1Ev ; Anki::VelocityProfileGenerator::VelocityProfileGenerator()
;;;549            
;;;550            // Compute profile
;;;551            f32 curr_x, curr_y;
;;;552            Radians curr_angle;
000020  a822              ADD      r0,sp,#0x88
000022  f7fffffe          BL       _ZN4Anki7RadiansC1Ev ; Anki::Radians::Radians()
;;;553            Localization::GetCurrentMatPose(curr_x, curr_y, curr_angle);
000026  aa22              ADD      r2,sp,#0x88
000028  a925              ADD      r1,sp,#0x94
00002a  a824              ADD      r0,sp,#0x90
00002c  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
;;;554            f32 currSpeed = SpeedController::GetCurrentMeasuredVehicleSpeed();
000030  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController30GetCurrentMeasuredVehicleSpeedEv ; Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()
000034  ee000a10          VMOV     s0,r0
;;;555            
;;;556            if (!vpg.StartProfile_fixedDuration(0, currSpeed, acc_start_frac * duration_sec,
000038  ee292a08          VMUL.F32 s4,s18,s16
00003c  ee291a88          VMUL.F32 s2,s19,s16
000040  eef8aac0          VCVT.F32.S32 s21,s0                ;554
000044  ed9fbabe          VLDR     s22,|L3.832|
000048  eef03a48          VMOV.F32 s7,s16
00004c  eeb04a4b          VMOV.F32 s8,s22
000050  ed9faabc          VLDR     s20,|L3.836|
000054  eef01a68          VMOV.F32 s3,s17
000058  eef00a6a          VMOV.F32 s1,s21
00005c  eef02a4a          VMOV.F32 s5,s20
000060  eeb03a62          VMOV.F32 s6,s5
000064  eddfbab8          VLDR     s23,|L3.840|
000068  a80e              ADD      r0,sp,#0x38
00006a  eeb00a6b          VMOV.F32 s0,s23
00006e  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator26StartProfile_fixedDurationEfffffffff ; Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
000072  2800              CMP      r0,#0
000074  d132              BNE      |L3.220|
;;;557                                                dist_mm, acc_end_frac * duration_sec,
;;;558                                                10000, 10000,  // TODO: maxVel, maxAccel
;;;559                                                duration_sec, CONTROL_DT) ) {
;;;560              
;;;561              PRINT("PathFollower.DriveStraight.VPGRetry: Trying simple path with instantaneous accel");
000076  48b5              LDR      r0,|L3.844|
000078  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;562    
;;;563              if (!vpg.StartProfile_fixedDuration(0, currSpeed, 0.01 * duration_sec,
00007c  ee180a10          VMOV     r0,s16
000080  f7fffffe          BL       __aeabi_f2d
000084  ed9f9bb2          VLDR     d9,|L3.848|
000088  ec532b19          VMOV     r2,r3,d9
00008c  f7fffffe          BL       __aeabi_dmul
000090  f7fffffe          BL       __aeabi_d2f
000094  ee0c0a10          VMOV     s24,r0
000098  ee180a10          VMOV     r0,s16
00009c  f7fffffe          BL       __aeabi_f2d
0000a0  ec532b19          VMOV     r2,r3,d9
0000a4  f7fffffe          BL       __aeabi_dmul
0000a8  f7fffffe          BL       __aeabi_d2f
0000ac  eef02a4a          VMOV.F32 s5,s20
0000b0  ee010a10          VMOV     s2,r0
0000b4  eeb04a4b          VMOV.F32 s8,s22
0000b8  eef03a48          VMOV.F32 s7,s16
0000bc  eeb03a62          VMOV.F32 s6,s5
0000c0  eeb02a4c          VMOV.F32 s4,s24
0000c4  eef01a68          VMOV.F32 s3,s17
0000c8  eef00a6a          VMOV.F32 s1,s21
0000cc  eeb00a6b          VMOV.F32 s0,s23
0000d0  a80e              ADD      r0,sp,#0x38
0000d2  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator26StartProfile_fixedDurationEfffffffff ; Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
0000d6  2800              CMP      r0,#0
0000d8  f000812d          BEQ.W    |L3.822|
                  |L3.220|
0000dc  ed9d0a22          VLDR     s0,[sp,#0x88]
;;;564                                                  dist_mm, 0.01 * duration_sec,
;;;565                                                  10000, 10000,  // TODO: maxVel, maxAccel
;;;566                                                  duration_sec, CONTROL_DT) ) {
;;;567              
;;;568                PRINT("PathFollower.DriveStraight.VPGFail");
;;;569                return false;
;;;570              }
;;;571            }
;;;572    
;;;573            
;;;574            // Compute the destination pose
;;;575            f32 dest_x = curr_x + dist_mm * cosf(curr_angle.ToFloat());
0000e0  f7fffffe          BL       __hardfp_cosf
0000e4  eddd9a24          VLDR     s19,[sp,#0x90]
0000e8  ee489a80          VMLA.F32 s19,s17,s0
0000ec  ed9d0a22          VLDR     s0,[sp,#0x88]
;;;576            f32 dest_y = curr_y + dist_mm * sinf(curr_angle.ToFloat());
0000f0  f7fffffe          BL       __hardfp_sinf
0000f4  ed9d9a25          VLDR     s18,[sp,#0x94]
0000f8  ed9d8a21          VLDR     s16,[sp,#0x84]
;;;577    
;;;578            
;;;579            // Compute start and end acceleration distances.
;;;580            // Some compensation here for lookahead distance.
;;;581            // NOTE: PathFollower actually transitions to the speed settings of the following segment
;;;582            //       at LOOK_AHEAD_DIST_MM before it actually reaches the next segment.
;;;583            f32 startAccelDist = vpg.GetStartAccelDist();
;;;584            f32 endAccelDist = vpg.GetEndAccelDist();
;;;585            if (fabsf(endAccelDist) > LOOK_AHEAD_DIST_MM) {
0000fc  4996              LDR      r1,|L3.856|
0000fe  ee089a80          VMLA.F32 s18,s17,s0            ;576
000102  eeb00ac8          VABS.F32 s0,s16
000106  ee100a10          VMOV     r0,s0
00010a  ed9daa20          VLDR     s20,[sp,#0x80]
00010e  4281              CMP      r1,r0
000110  da0e              BGE      |L3.304|
;;;586              endAccelDist -= LOOK_AHEAD_DIST_MM * SIGN(endAccelDist);
000112  eeb58ac0          VCMPE.F32 s16,#0.0
000116  eef1fa10          VMRS     APSR_nzcv,FPSCR
00011a  bfac              ITE      GE
00011c  2001              MOVGE    r0,#1
00011e  2000              MOVLT    r0,#0
000120  ee000a10          VMOV     s0,r0
000124  eef20a04          VMOV.F32 s1,#10.00000000
000128  eeb80a40          VCVT.F32.U32 s0,s0
00012c  ee008a60          VMLS.F32 s16,s0,s1
                  |L3.304|
;;;587            }
;;;588            PRINT("DRIVE STRAIGHT: total dist %f, startDist %f, endDist %f\n", dist_mm, startAccelDist, endAccelDist);
000130  ee180a10          VMOV     r0,s16
000134  f7fffffe          BL       __aeabi_f2d
000138  4606              MOV      r6,r0
00013a  460f              MOV      r7,r1
00013c  ee1a0a10          VMOV     r0,s20
000140  f7fffffe          BL       __aeabi_f2d
000144  4604              MOV      r4,r0
000146  460d              MOV      r5,r1
000148  ee180a90          VMOV     r0,s17
00014c  f7fffffe          BL       __aeabi_f2d
000150  e88d00f0          STM      sp,{r4-r7}
000154  ec410b10          VMOV     d0,r0,r1
000158  a080              ADR      r0,|L3.860|
00015a  ec532b10          VMOV     r2,r3,d0
00015e  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
000162  ed9d0a22          VLDR     s0,[sp,#0x88]
;;;589            
;;;590            // Get intermediate poses: (1) after starting accel phase and (2) before ending accel phase
;;;591            f32 int_x1 = curr_x + startAccelDist * cosf(curr_angle.ToFloat());
000166  f7fffffe          BL       __hardfp_cosf
00016a  ed9dba24          VLDR     s22,[sp,#0x90]
00016e  ee0aba00          VMLA.F32 s22,s20,s0
000172  ed9d0a22          VLDR     s0,[sp,#0x88]
;;;592            f32 int_y1 = curr_y + startAccelDist * sinf(curr_angle.ToFloat());
000176  f7fffffe          BL       __hardfp_sinf
00017a  edddba25          VLDR     s23,[sp,#0x94]
00017e  ee4aba00          VMLA.F32 s23,s20,s0
000182  ed9d0a22          VLDR     s0,[sp,#0x88]
;;;593    
;;;594            f32 int_x2 = dest_x - endAccelDist * cosf(curr_angle.ToFloat());
000186  f7fffffe          BL       __hardfp_cosf
00018a  eeb0aa69          VMOV.F32 s20,s19
00018e  ee08aa40          VMLS.F32 s20,s16,s0
000192  ed9d0a22          VLDR     s0,[sp,#0x88]
;;;595            f32 int_y2 = dest_y - endAccelDist * sinf(curr_angle.ToFloat());
000196  f7fffffe          BL       __hardfp_sinf
00019a  eef0aa49          VMOV.F32 s21,s18
00019e  ed9d1a15          VLDR     s2,[sp,#0x54]
0001a2  ee48aa40          VMLS.F32 s21,s16,s0
0001a6  ed9d0a14          VLDR     s0,[sp,#0x50]
0001aa  edddca1a          VLDR     s25,[sp,#0x68]
0001ae  eec10a00          VDIV.F32 s1,s2,s0
0001b2  ed9d1a16          VLDR     s2,[sp,#0x58]
;;;596            
;;;597            
;;;598            // Get intermediate speed and accels
;;;599            f32 maxReachableVel = vpg.GetMaxReachableVel();
;;;600            f32 startAccel = fabsf(vpg.GetStartAccel());
;;;601            f32 endAccel = fabsf(vpg.GetEndAccel());
;;;602    
;;;603            
;;;604            // Create 3-segment path
;;;605            PRINT("DriveStraight accels: start %f, end %f, vel %f\n", startAccel, endAccel, maxReachableVel);
0001b6  ee1c0a90          VMOV     r0,s25
0001ba  eeb08ae0          VABS.F32 s16,s1                ;600
0001be  eec10a00          VDIV.F32 s1,s2,s0              ;600
0001c2  eeb0cae0          VABS.F32 s24,s1                ;601
0001c6  f7fffffe          BL       __aeabi_f2d
0001ca  4606              MOV      r6,r0
0001cc  460f              MOV      r7,r1
0001ce  ee1c0a10          VMOV     r0,s24
0001d2  f7fffffe          BL       __aeabi_f2d
0001d6  4604              MOV      r4,r0
0001d8  460d              MOV      r5,r1
0001da  ee180a10          VMOV     r0,s16
0001de  f7fffffe          BL       __aeabi_f2d
0001e2  e88d00f0          STM      sp,{r4-r7}
0001e6  ec410b10          VMOV     d0,r0,r1
0001ea  a06b              ADR      r0,|L3.920|
0001ec  ec532b10          VMOV     r2,r3,d0
0001f0  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;606            PRINT("DriveStraight path: (%f, %f) to (%f, %f) to (%f, %f) to (%f, %f)\n", curr_x, curr_y, int_x1, int_y1, int_x2, int_y2, dest_x, dest_y);
0001f4  ee190a10          VMOV     r0,s18
0001f8  f7fffffe          BL       __aeabi_f2d
0001fc  4682              MOV      r10,r0
0001fe  468b              MOV      r11,r1
000200  ee190a90          VMOV     r0,s19
000204  f7fffffe          BL       __aeabi_f2d
000208  4606              MOV      r6,r0
00020a  460f              MOV      r7,r1
00020c  ee1a0a90          VMOV     r0,s21
000210  f7fffffe          BL       __aeabi_f2d
000214  4604              MOV      r4,r0
000216  460d              MOV      r5,r1
000218  ee1a0a10          VMOV     r0,s20
00021c  f7fffffe          BL       __aeabi_f2d
000220  e9cd0104          STRD     r0,r1,[sp,#0x10]
000224  ee1b0a90          VMOV     r0,s23
000228  f7fffffe          BL       __aeabi_f2d
00022c  e9cd0102          STRD     r0,r1,[sp,#8]
000230  ee1b0a10          VMOV     r0,s22
000234  f7fffffe          BL       __aeabi_f2d
000238  e9cd0100          STRD     r0,r1,[sp,#0]
00023c  9825              LDR      r0,[sp,#0x94]
00023e  f7fffffe          BL       __aeabi_f2d
000242  4680              MOV      r8,r0
000244  4689              MOV      r9,r1
000246  9824              LDR      r0,[sp,#0x90]
000248  f7fffffe          BL       __aeabi_f2d
00024c  ec410b10          VMOV     d0,r0,r1
000250  a808              ADD      r0,sp,#0x20
000252  ec532b10          VMOV     r2,r3,d0
000256  e8800cf0          STM      r0,{r4-r7,r10,r11}
00025a  e9dd0104          LDRD     r0,r1,[sp,#0x10]
00025e  e9cd0106          STRD     r0,r1,[sp,#0x18]
000262  e9dd0102          LDRD     r0,r1,[sp,#8]
000266  e9cd0104          STRD     r0,r1,[sp,#0x10]
00026a  e9dd0100          LDRD     r0,r1,[sp,#0]
00026e  e9cd0102          STRD     r0,r1,[sp,#8]
000272  4855              LDR      r0,|L3.968|
000274  e9cd8900          STRD     r8,r9,[sp,#0]
000278  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
00027c  4853              LDR      r0,|L3.972|
00027e  f7fffffe          BL       _ZN4Anki8Planning4Path5ClearEv ; Anki::Planning::Path::Clear()
000282  4a53              LDR      r2,|L3.976|
000284  f04f30ff          MOV      r0,#0xffffffff
000288  2400              MOVS     r4,#0
00028a  7010              STRB     r0,[r2,#0]
00028c  7094              STRB     r4,[r2,#2]
00028e  7050              STRB     r0,[r2,#1]
;;;607            ClearPath();
;;;608            AppendPathSegment_Line(0, curr_x, curr_y, int_x1, int_y1, maxReachableVel, startAccel, startAccel);
000290  ed9dda24          VLDR     s26,[sp,#0x90]
000294  edddda25          VLDR     s27,[sp,#0x94]
000298  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower8TrimPathEv ; Anki::Cozmo::PathFollower::TrimPath()
00029c  eeb03a48          VMOV.F32 s6,s16
0002a0  eef02a48          VMOV.F32 s5,s16
0002a4  eeb02a6c          VMOV.F32 s4,s25
0002a8  eef01a6b          VMOV.F32 s3,s23
0002ac  eeb01a4b          VMOV.F32 s2,s22
0002b0  eef00a6d          VMOV.F32 s1,s27
0002b4  eeb00a4d          VMOV.F32 s0,s26
0002b8  4621              MOV      r1,r4
0002ba  4844              LDR      r0,|L3.972|
0002bc  f7fffffe          BL       _ZN4Anki8Planning4Path10AppendLineEjfffffff ; Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
0002c0  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower8TrimPathEv ; Anki::Cozmo::PathFollower::TrimPath()
0002c4  eeb03a48          VMOV.F32 s6,s16
0002c8  eef02a48          VMOV.F32 s5,s16
0002cc  eeb02a6c          VMOV.F32 s4,s25
0002d0  eef01a6a          VMOV.F32 s3,s21
0002d4  eeb01a4a          VMOV.F32 s2,s20
0002d8  eef00a6b          VMOV.F32 s1,s23
0002dc  eeb00a4b          VMOV.F32 s0,s22
0002e0  4621              MOV      r1,r4
0002e2  483a              LDR      r0,|L3.972|
0002e4  f7fffffe          BL       _ZN4Anki8Planning4Path10AppendLineEjfffffff ; Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
;;;609            AppendPathSegment_Line(0, int_x1, int_y1, int_x2, int_y2, maxReachableVel, startAccel, startAccel);
;;;610            AppendPathSegment_Line(0, int_x2, int_y2, dest_x, dest_y, dist_mm > 0 ? COAST_VELOCITY_MMPS : -COAST_VELOCITY_MMPS, endAccel, endAccel);
0002e8  eef58ac0          VCMPE.F32 s17,#0.0
0002ec  eef1fa10          VMRS     APSR_nzcv,FPSCR
0002f0  bfcc              ITE      GT
0002f2  eeb28a0e          VMOVGT.F32 s16,#15.00000000
0002f6  eeba8a0e          VMOVLE.F32 s16,#-15.00000000
0002fa  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower8TrimPathEv ; Anki::Cozmo::PathFollower::TrimPath()
0002fe  eeb03a4c          VMOV.F32 s6,s24
000302  eef02a4c          VMOV.F32 s5,s24
000306  eeb02a48          VMOV.F32 s4,s16
00030a  eef01a49          VMOV.F32 s3,s18
00030e  eeb01a69          VMOV.F32 s2,s19
000312  eef00a6a          VMOV.F32 s1,s21
000316  eeb00a4a          VMOV.F32 s0,s20
00031a  4621              MOV      r1,r4
00031c  482b              LDR      r0,|L3.972|
00031e  f7fffffe          BL       _ZN4Anki8Planning4Path10AppendLineEjfffffff ; Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
;;;611            StartPathTraversal();
000322  2100              MOVS     r1,#0
000324  4608              MOV      r0,r1
000326  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower18StartPathTraversalEtb ; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
;;;612    
;;;613            return true;
00032a  2001              MOVS     r0,#1
                  |L3.812|
;;;614          }
00032c  b027              ADD      sp,sp,#0x9c
00032e  ecbd8b0c          VPOP     {d8-d13}
000332  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.822|
000336  a027              ADR      r0,|L3.980|
000338  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
00033c  2000              MOVS     r0,#0                 ;569
00033e  e7f5              B        |L3.812|
;;;615          
                          ENDP

                  |L3.832|
000340  3ba3d70b          DCFS     0x3ba3d70b ; 0.0050000003539025784
                  |L3.836|
000344  461c4000          DCFS     0x461c4000 ; 10000
                  |L3.840|
000348  00000000          DCFS     0x00000000 ; 0
                  |L3.844|
                          DCD      ||.conststring||
                  |L3.848|
000350  47ae147b          DCFD     0x3f847ae147ae147b ; 0.01
000354  3f847ae1
                  |L3.856|
                          DCD      0x41200000
                  |L3.860|
00035c  44524956          DCB      "DRIVE STRAIGHT: total dist %f, startDist %f, endDist %f"
000360  45205354
000364  52414947
000368  48543a20
00036c  746f7461
000370  6c206469
000374  73742025
000378  662c2073
00037c  74617274
000380  44697374
000384  2025662c
000388  20656e64
00038c  44697374
000390  202566  
000393  0a00              DCB      "\n",0
000395  00                DCB      0
000396  00                DCB      0
000397  00                DCB      0
                  |L3.920|
000398  44726976          DCB      "DriveStraight accels: start %f, end %f, vel %f\n",0
00039c  65537472
0003a0  61696768
0003a4  74206163
0003a8  63656c73
0003ac  3a207374
0003b0  61727420
0003b4  25662c20
0003b8  656e6420
0003bc  25662c20
0003c0  76656c20
0003c4  25660a00
                  |L3.968|
                          DCD      ||.conststring||+0x54
                  |L3.972|
                          DCD      ||.bss||
                  |L3.976|
                          DCD      ||.data||
                  |L3.980|
0003d4  50617468          DCB      "PathFollower.DriveStraight.VPGFail",0
0003d8  466f6c6c
0003dc  6f776572
0003e0  2e447269
0003e4  76655374
0003e8  72616967
0003ec  68742e56
0003f0  50474661
0003f4  696c00  
0003f7  00                DCB      0

                          AREA ||i._ZN4Anki5Cozmo12PathFollower13GetLastPathIDEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower13GetLastPathIDEv PROC ; Anki::Cozmo::PathFollower::GetLastPathID()
;;;539          
;;;540          u16 GetLastPathID() {
000000  4801              LDR      r0,|L4.8|
;;;541            return lastPathID_;
000002  8880              LDRH     r0,[r0,#4]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304611lastPathID_E
;;;542          }
000004  4770              BX       lr
;;;543    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower13SetPathForVizEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12PathFollower13SetPathForVizEv PROC ; Anki::Cozmo::PathFollower::SetPathForViz()
;;;96           
;;;97           void SetPathForViz() {
000000  4770              BX       lr
;;;98     #if(ENABLE_PATH_VIZ)
;;;99             Viz::ErasePath(0);
;;;100            for (u8 i=0; i<path_.GetNumSegments(); ++i) {
;;;101              const Planning::PathSegmentDef& ps = path_[i].GetDef();
;;;102              switch(path_[i].GetType()) {
;;;103                case Planning::PST_LINE:
;;;104                  Viz::AppendPathSegmentLine(0,
;;;105                                             ps.line.startPt_x,
;;;106                                             ps.line.startPt_y,
;;;107                                             ps.line.endPt_x,
;;;108                                             ps.line.endPt_y);
;;;109                  break;
;;;110                case Planning::PST_ARC:
;;;111                  Viz::AppendPathSegmentArc(0,
;;;112                                            ps.arc.centerPt_x,
;;;113                                            ps.arc.centerPt_y,
;;;114                                            ps.arc.radius,
;;;115                                            ps.arc.startRad,
;;;116                                            ps.arc.sweepRad);
;;;117                  break;
;;;118                default:
;;;119                  break;
;;;120              }
;;;121            }
;;;122    #endif
;;;123          }
;;;124          
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12PathFollower14DrivePointTurnEffff||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo12PathFollower14DrivePointTurnEffff PROC ; Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
;;;690          
;;;691          bool DrivePointTurn(f32 sweep_rad, f32 acc_start_frac, f32 acc_end_frac, f32 duration_sec)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;692          {
000004  ed2d8b0a          VPUSH    {d8-d12}
000008  b09f              SUB      sp,sp,#0x7c
00000a  eeb08a61          VMOV.F32 s16,s3
00000e  eef08a41          VMOV.F32 s17,s2
000012  eef0aa60          VMOV.F32 s21,s1
000016  eeb0aa40          VMOV.F32 s20,s0
;;;693            VelocityProfileGenerator vpg;
00001a  a806              ADD      r0,sp,#0x18
00001c  f7fffffe          BL       _ZN4Anki24VelocityProfileGeneratorC1Ev ; Anki::VelocityProfileGenerator::VelocityProfileGenerator()
;;;694            
;;;695            f32 curr_x, curr_y;
;;;696            Radians curr_angle;
000020  a81c              ADD      r0,sp,#0x70
000022  f7fffffe          BL       _ZN4Anki7RadiansC1Ev ; Anki::Radians::Radians()
;;;697            Localization::GetCurrentMatPose(curr_x, curr_y, curr_angle);
000026  aa1c              ADD      r2,sp,#0x70
000028  a91b              ADD      r1,sp,#0x6c
00002a  a81a              ADD      r0,sp,#0x68
00002c  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
;;;698            
;;;699            
;;;700            if (!vpg.StartProfile_fixedDuration(0, 0, acc_start_frac * duration_sec,
000030  ee282a88          VMUL.F32 s4,s17,s16
000034  ee2a1a88          VMUL.F32 s2,s21,s16
000038  ed9fca8d          VLDR     s24,|L6.624|
00003c  eef03a48          VMOV.F32 s7,s16
000040  eeb04a4c          VMOV.F32 s8,s24
000044  ed9fba8b          VLDR     s22,|L6.628|
000048  eef01a4a          VMOV.F32 s3,s20
00004c  eef02a4b          VMOV.F32 s5,s22
000050  eeb03a62          VMOV.F32 s6,s5
000054  eddfba88          VLDR     s23,|L6.632|
000058  a806              ADD      r0,sp,#0x18
00005a  eeb00a6b          VMOV.F32 s0,s23
00005e  eef00a40          VMOV.F32 s1,s0
000062  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator26StartProfile_fixedDurationEfffffffff ; Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
000066  bb78              CBNZ     r0,|L6.200|
;;;701                                                sweep_rad, acc_end_frac * duration_sec,
;;;702                                                10000, 10000,  // TODO: maxVel, maxAccel
;;;703                                                duration_sec, CONTROL_DT)) {
;;;704              
;;;705              if (!vpg.StartProfile_fixedDuration(0, 0, 0.01 * duration_sec,
000068  ee180a10          VMOV     r0,s16
00006c  f7fffffe          BL       __aeabi_f2d
000070  ed9f9b83          VLDR     d9,|L6.640|
000074  ec532b19          VMOV     r2,r3,d9
000078  f7fffffe          BL       __aeabi_dmul
00007c  f7fffffe          BL       __aeabi_d2f
000080  ee0c0a90          VMOV     s25,r0
000084  ee180a10          VMOV     r0,s16
000088  f7fffffe          BL       __aeabi_f2d
00008c  ec532b19          VMOV     r2,r3,d9
000090  f7fffffe          BL       __aeabi_dmul
000094  f7fffffe          BL       __aeabi_d2f
000098  eef02a4b          VMOV.F32 s5,s22
00009c  eeb00a6b          VMOV.F32 s0,s23
0000a0  ee010a10          VMOV     s2,r0
0000a4  eeb04a4c          VMOV.F32 s8,s24
0000a8  eef03a48          VMOV.F32 s7,s16
0000ac  eeb03a62          VMOV.F32 s6,s5
0000b0  eeb02a6c          VMOV.F32 s4,s25
0000b4  eef01a4a          VMOV.F32 s3,s20
0000b8  eef00a40          VMOV.F32 s1,s0
0000bc  a806              ADD      r0,sp,#0x18
0000be  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator26StartProfile_fixedDurationEfffffffff ; Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
0000c2  2800              CMP      r0,#0
0000c4  f00080b3          BEQ.W    |L6.558|
                  |L6.200|
0000c8  ed9d2a0d          VLDR     s4,[sp,#0x34]
0000cc  ed9d0a0c          VLDR     s0,[sp,#0x30]
0000d0  edddaa1c          VLDR     s21,[sp,#0x70]
0000d4  ed9d1a18          VLDR     s2,[sp,#0x60]
0000d8  eec21a00          VDIV.F32 s3,s4,s0
0000dc  ed9d2a0e          VLDR     s4,[sp,#0x38]
;;;706                                                  sweep_rad, 0.01 * duration_sec,
;;;707                                                  10000, 10000,  // TODO: maxVel, maxAccel
;;;708                                                  duration_sec, CONTROL_DT)) {
;;;709    
;;;710                PRINT("WARN: DrivePointTurn vpg fail (sweep_rad: %f, acc_start_frac %f, acc_end_frac %f, duration_sec %f). Default to simple version \n", sweep_rad, acc_start_frac, acc_end_frac, duration_sec);
;;;711                return false;
;;;712              }
;;;713              
;;;714            }
;;;715            
;;;716            
;;;717            
;;;718            f32 targetRotVel = vpg.GetMaxReachableVel();
;;;719            f32 startAccelSweep = vpg.GetStartAccelDist();
;;;720            f32 endAccelSweep = vpg.GetEndAccelDist();
;;;721            f32 startAngAccel = fabsf(vpg.GetStartAccel());
;;;722            f32 endAngAccel = fabsf(vpg.GetEndAccel());
;;;723    
;;;724            // Compute intermediate angles
;;;725            f32 dest_ang = curr_angle.ToFloat() + sweep_rad;
0000e0  ee7a9a8a          VADD.F32 s19,s21,s20
0000e4  eddd0a19          VLDR     s1,[sp,#0x64]
0000e8  ed9d9a12          VLDR     s18,[sp,#0x48]
;;;726            f32 int_ang1 = curr_angle.ToFloat() + startAccelSweep;
0000ec  ee7aba81          VADD.F32 s23,s21,s2
;;;727            f32 int_ang2 = dest_ang - endAccelSweep;
0000f0  ee39bae0          VSUB.F32 s22,s19,s1
;;;728    
;;;729            
;;;730            PRINT("DrivePointTurn: start %f, int_ang1 %f, int_ang2 %f, dest %f\n", curr_angle.ToFloat(), int_ang1, int_ang2, dest_ang);
0000f4  ee190a90          VMOV     r0,s19
0000f8  eeb08ae1          VABS.F32 s16,s3                ;721
0000fc  eec21a00          VDIV.F32 s3,s4,s0              ;721
000100  eef08ae1          VABS.F32 s17,s3                ;722
000104  f7fffffe          BL       __aeabi_f2d
000108  4680              MOV      r8,r0
00010a  4689              MOV      r9,r1
00010c  ee1b0a10          VMOV     r0,s22
000110  f7fffffe          BL       __aeabi_f2d
000114  4606              MOV      r6,r0
000116  460f              MOV      r7,r1
000118  ee1b0a90          VMOV     r0,s23
00011c  f7fffffe          BL       __aeabi_f2d
000120  4604              MOV      r4,r0
000122  460d              MOV      r5,r1
000124  ee1a0a90          VMOV     r0,s21
000128  f7fffffe          BL       __aeabi_f2d
00012c  e88d03f0          STM      sp,{r4-r9}
000130  ec410b10          VMOV     d0,r0,r1
000134  a054              ADR      r0,|L6.648|
000136  ec532b10          VMOV     r2,r3,d0
00013a  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;731            PRINT("DriveTurn: targetRotSpeed %f, startRotAccel %f, endRotAccel %f\n", targetRotVel, startAngAccel, endAngAccel);
00013e  ee180a90          VMOV     r0,s17
000142  f7fffffe          BL       __aeabi_f2d
000146  4606              MOV      r6,r0
000148  460f              MOV      r7,r1
00014a  ee180a10          VMOV     r0,s16
00014e  f7fffffe          BL       __aeabi_f2d
000152  4604              MOV      r4,r0
000154  460d              MOV      r5,r1
000156  ee190a10          VMOV     r0,s18
00015a  f7fffffe          BL       __aeabi_f2d
00015e  e88d00f0          STM      sp,{r4-r7}
000162  ec410b10          VMOV     d0,r0,r1
000166  a058              ADR      r0,|L6.712|
000168  ec532b10          VMOV     r2,r3,d0
00016c  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
000170  4865              LDR      r0,|L6.776|
000172  f7fffffe          BL       _ZN4Anki8Planning4Path5ClearEv ; Anki::Planning::Path::Clear()
000176  4a65              LDR      r2,|L6.780|
000178  f04f30ff          MOV      r0,#0xffffffff
00017c  2400              MOVS     r4,#0
00017e  7010              STRB     r0,[r2,#0]
000180  7094              STRB     r4,[r2,#2]
000182  7050              STRB     r0,[r2,#1]
;;;732            
;;;733            // Create 3-segment path
;;;734            ClearPath();
;;;735            AppendPathSegment_PointTurn(0, curr_x, curr_y, int_ang1, targetRotVel, startAngAccel, startAngAccel);
000184  edddaa1a          VLDR     s21,[sp,#0x68]
000188  ed9dca1b          VLDR     s24,[sp,#0x6c]
00018c  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower8TrimPathEv ; Anki::Cozmo::PathFollower::TrimPath()
000190  eef02a48          VMOV.F32 s5,s16
000194  eeb02a48          VMOV.F32 s4,s16
000198  eef01a49          VMOV.F32 s3,s18
00019c  eeb01a6b          VMOV.F32 s2,s23
0001a0  eef00a4c          VMOV.F32 s1,s24
0001a4  eeb00a6a          VMOV.F32 s0,s21
0001a8  4621              MOV      r1,r4
0001aa  4857              LDR      r0,|L6.776|
0001ac  f7fffffe          BL       _ZN4Anki8Planning4Path15AppendPointTurnEjffffff ; Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float)
;;;736            AppendPathSegment_PointTurn(0, curr_x, curr_y, int_ang2, targetRotVel, startAngAccel, startAngAccel);
0001b0  edddaa1a          VLDR     s21,[sp,#0x68]
0001b4  edddba1b          VLDR     s23,[sp,#0x6c]
0001b8  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower8TrimPathEv ; Anki::Cozmo::PathFollower::TrimPath()
0001bc  eef02a48          VMOV.F32 s5,s16
0001c0  eeb02a48          VMOV.F32 s4,s16
0001c4  eef01a49          VMOV.F32 s3,s18
0001c8  eeb01a4b          VMOV.F32 s2,s22
0001cc  eef00a6b          VMOV.F32 s1,s23
0001d0  eeb00a6a          VMOV.F32 s0,s21
0001d4  4621              MOV      r1,r4
0001d6  484c              LDR      r0,|L6.776|
0001d8  f7fffffe          BL       _ZN4Anki8Planning4Path15AppendPointTurnEjffffff ; Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float)
;;;737            AppendPathSegment_PointTurn(0, curr_x, curr_y, dest_ang, sweep_rad > 0 ? COAST_VELOCITY_RADPS : -COAST_VELOCITY_RADPS, endAngAccel, endAngAccel);
0001dc  edddaa1a          VLDR     s21,[sp,#0x68]
0001e0  ed9d9a1b          VLDR     s18,[sp,#0x6c]
0001e4  eeb5aac0          VCMPE.F32 s20,#0.0
0001e8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001ec  bfcc              ITE      GT
0001ee  ed9f8a48          VLDRGT   s16,|L6.784|
0001f2  ed9f8a48          VLDRLE   s16,|L6.788|
0001f6  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower8TrimPathEv ; Anki::Cozmo::PathFollower::TrimPath()
0001fa  eef02a68          VMOV.F32 s5,s17
0001fe  eeb02a68          VMOV.F32 s4,s17
000202  eef01a48          VMOV.F32 s3,s16
000206  eeb01a69          VMOV.F32 s2,s19
00020a  eef00a49          VMOV.F32 s1,s18
00020e  eeb00a6a          VMOV.F32 s0,s21
000212  4621              MOV      r1,r4
000214  483c              LDR      r0,|L6.776|
000216  f7fffffe          BL       _ZN4Anki8Planning4Path15AppendPointTurnEjffffff ; Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float)
;;;738              
;;;739            StartPathTraversal();
00021a  2100              MOVS     r1,#0
00021c  4608              MOV      r0,r1
00021e  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower18StartPathTraversalEtb ; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
;;;740            
;;;741            return true;
000222  2001              MOVS     r0,#1
                  |L6.548|
;;;742          }
000224  b01f              ADD      sp,sp,#0x7c
000226  ecbd8b0a          VPOP     {d8-d12}
00022a  e8bd83f0          POP      {r4-r9,pc}
                  |L6.558|
00022e  ee180a10          VMOV     r0,s16                ;710
000232  f7fffffe          BL       __aeabi_f2d
000236  4680              MOV      r8,r0                 ;710
000238  4689              MOV      r9,r1                 ;710
00023a  ee180a90          VMOV     r0,s17                ;710
00023e  f7fffffe          BL       __aeabi_f2d
000242  4606              MOV      r6,r0                 ;710
000244  460f              MOV      r7,r1                 ;710
000246  ee1a0a90          VMOV     r0,s21                ;710
00024a  f7fffffe          BL       __aeabi_f2d
00024e  4604              MOV      r4,r0                 ;710
000250  460d              MOV      r5,r1                 ;710
000252  ee1a0a10          VMOV     r0,s20                ;710
000256  f7fffffe          BL       __aeabi_f2d
00025a  e88d03f0          STM      sp,{r4-r9}            ;710
00025e  ec410b10          VMOV     d0,r0,r1              ;710
000262  482d              LDR      r0,|L6.792|
000264  ec532b10          VMOV     r2,r3,d0              ;710
000268  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
00026c  2000              MOVS     r0,#0                 ;711
00026e  e7d9              B        |L6.548|
;;;743    
                          ENDP

                  |L6.624|
000270  3ba3d70b          DCFS     0x3ba3d70b ; 0.0050000003539025784
                  |L6.628|
000274  461c4000          DCFS     0x461c4000 ; 10000
                  |L6.632|
000278  00000000          DCFS     0x00000000 ; 0
                          DCD      0x00000000
                  |L6.640|
000280  47ae147b          DCFD     0x3f847ae147ae147b ; 0.01
000284  3f847ae1
                  |L6.648|
000288  44726976          DCB      "DrivePointTurn: start %f, int_ang1 %f, int_ang2 %f, des"
00028c  65506f69
000290  6e745475
000294  726e3a20
000298  73746172
00029c  74202566
0002a0  2c20696e
0002a4  745f616e
0002a8  67312025
0002ac  662c2069
0002b0  6e745f61
0002b4  6e673220
0002b8  25662c20
0002bc  646573  
0002bf  74202566          DCB      "t %f\n",0
0002c3  0a00    
0002c5  00                DCB      0
0002c6  00                DCB      0
0002c7  00                DCB      0
                  |L6.712|
0002c8  44726976          DCB      "DriveTurn: targetRotSpeed %f, startRotAccel %f, endRotA"
0002cc  65547572
0002d0  6e3a2074
0002d4  61726765
0002d8  74526f74
0002dc  53706565
0002e0  64202566
0002e4  2c207374
0002e8  61727452
0002ec  6f744163
0002f0  63656c20
0002f4  25662c20
0002f8  656e6452
0002fc  6f7441  
0002ff  6363656c          DCB      "ccel %f\n",0
000303  2025660a
000307  00      
                  |L6.776|
                          DCD      ||.bss||
                  |L6.780|
                          DCD      ||.data||
                  |L6.784|
000310  3ecccccd          DCFS     0x3ecccccd ; 0.40000000596046448
                  |L6.788|
000314  becccccd          DCFS     0xbecccccd ; -0.40000000596046448
                  |L6.792|
                          DCD      ||.conststring||+0x140

                          AREA ||i._ZN4Anki5Cozmo12PathFollower16IsTraversingPathEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower16IsTraversingPathEv PROC ; Anki::Cozmo::PathFollower::IsTraversingPath()
;;;275          
;;;276          bool IsTraversingPath()
000000  4802              LDR      r0,|L7.12|
;;;277          {
;;;278            return currPathSegment_ >= 0;
000002  f9900000          LDRSB    r0,[r0,#0]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
000006  17c0              ASRS     r0,r0,#31
000008  1c40              ADDS     r0,r0,#1
;;;279          }
00000a  4770              BX       lr
;;;280    
                          ENDP

                  |L7.12|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower16PrintPathSegmentEs||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower16PrintPathSegmentEs PROC ; Anki::Cozmo::PathFollower::PrintPathSegment(short)
;;;534          
;;;535          void PrintPathSegment(s16 segment)
000000  b2c1              UXTB     r1,r0
;;;536          {
;;;537            path_.PrintSegment(segment);
000002  4801              LDR      r0,|L8.8|
000004  f7ffbffe          B.W      _ZNK4Anki8Planning4Path12PrintSegmentEh ; Anki::Planning::Path::PrintSegment(unsigned char) const
;;;538          }
;;;539          
                          ENDP

                  |L8.8|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower17GetClosestSegmentEfff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower17GetClosestSegmentEfff PROC ; Anki::Cozmo::PathFollower::GetClosestSegment(float, float, float)
;;;176    
;;;177          u8 GetClosestSegment(const f32 x, const f32 y, const f32 angle)
000000  b570              PUSH     {r4-r6,lr}
000002  4e26              LDR      r6,|L9.156|
;;;178          {
000004  ed2d8b04          VPUSH    {d8-d9}
000008  b082              SUB      sp,sp,#8
00000a  eef08a41          VMOV.F32 s17,s2
00000e  7930              LDRB     r0,[r6,#4]
000010  eeb09a60          VMOV.F32 s18,s1
000014  eef09a40          VMOV.F32 s19,s0
;;;179            assert(path_.GetNumSegments() > 0);
000018  2800              CMP      r0,#0
00001a  d032              BEQ      |L9.130|
;;;180            
;;;181            Planning::SegmentRangeStatus res;
;;;182            f32 distToSegment, angError;
;;;183            
;;;184            u8 closestSegId = 0;
00001c  f04f0500          MOV      r5,#0
;;;185            f32 distToClosestSegment = FLT_MAX;
000020  ed9f8a1f          VLDR     s16,|L9.160|
;;;186            
;;;187            for (u8 i=0; i<path_.GetNumSegments(); ++i) {
000024  462c              MOV      r4,r5
000026  d927              BLS      |L9.120|
                  |L9.40|
000028  6830              LDR      r0,[r6,#0]
00002a  eb0401c4          ADD      r1,r4,r4,LSL #3
00002e  eb000081          ADD      r0,r0,r1,LSL #2
;;;188              res = path_[i].GetDistToSegment(x,y,angle,distToSegment,angError);
000032  aa01              ADD      r2,sp,#4
000034  4669              MOV      r1,sp
000036  eeb01a68          VMOV.F32 s2,s17
00003a  eef00a49          VMOV.F32 s1,s18
00003e  eeb00a69          VMOV.F32 s0,s19
000042  f7fffffe          BL       _ZNK4Anki8Planning11PathSegment16GetDistToSegmentEfffRfS2_ ; Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const
;;;189    #if(DEBUG_PATH_FOLLOWER)
;;;190              PRINT("PathDist: %f  (res=%d)\n", distToSegment, res);
;;;191    #endif
;;;192              if (ABS(distToSegment) < distToClosestSegment && (res == Planning::IN_SEGMENT_RANGE || res == Planning::OOR_NEAR_START)) {
000046  eddd1a00          VLDR     s3,[sp,#0]
00004a  eef51ac0          VCMPE.F32 s3,#0.0
00004e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000052  bfac              ITE      GE
000054  eeb02a61          VMOVGE.F32 s4,s3
000058  eeb12a61          VNEGLT.F32 s4,s3
00005c  eeb42ac8          VCMPE.F32 s4,s16
000060  eef1fa10          VMRS     APSR_nzcv,FPSCR
000064  d203              BCS      |L9.110|
000066  2800              CMP      r0,#0
000068  bf18              IT       NE
00006a  2801              CMPNE    r0,#1
00006c  d00b              BEQ      |L9.134|
                  |L9.110|
00006e  1c60              ADDS     r0,r4,#1              ;187
000070  b2c4              UXTB     r4,r0                 ;187
000072  7930              LDRB     r0,[r6,#4]            ;187
000074  4284              CMP      r4,r0                 ;187
000076  d3d7              BCC      |L9.40|
                  |L9.120|
;;;193                closestSegId = i;
;;;194                distToClosestSegment = ABS(distToSegment);
;;;195    #if(DEBUG_PATH_FOLLOWER)
;;;196                PRINT(" New closest seg: %d, distToSegment %f (res=%d)\n", i, distToSegment, res);
;;;197    #endif
;;;198              }
;;;199            }
;;;200            
;;;201            return closestSegId;
;;;202          }
000078  b002              ADD      sp,sp,#8
00007a  4628              MOV      r0,r5                 ;201
00007c  ecbd8b04          VPOP     {d8-d9}
000080  bd70              POP      {r4-r6,pc}
                  |L9.130|
000082  f7fffffe          BL       abort
                  |L9.134|
000086  eef51ac0          VCMPE.F32 s3,#0.0               ;194
00008a  4625              MOV      r5,r4                 ;193
00008c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;194
000090  bfb8              IT       LT                    ;194
000092  eef11a61          VNEGLT.F32 s3,s3                 ;194
000096  eeb08a61          VMOV.F32 s16,s3                ;194
00009a  e7e8              B        |L9.110|
;;;203          
                          ENDP

                  |L9.156|
                          DCD      ||.bss||
                  |L9.160|
0000a0  7f7fffff          DCFS     0x7f7fffff ; 3.4028234663852886e+38

                          AREA ||i._ZN4Anki5Cozmo12PathFollower18GenerateDubinsPathEffffffffffffPf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower18GenerateDubinsPathEffffffffffffPf PROC ; Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*)
;;;160          
;;;161          u8 GenerateDubinsPath(f32 start_x, f32 start_y, f32 start_theta,
000000  4601              MOV      r1,r0
;;;162                                f32 end_x, f32 end_y, f32 end_theta,
;;;163                                f32 start_radius, f32 end_radius,
;;;164                                f32 targetSpeed, f32 accel, f32 decel,
;;;165                                f32 final_straight_approach_length,
;;;166                                f32 *path_length)
;;;167          {
;;;168            return Planning::GenerateDubinsPath(path_,
000002  4801              LDR      r0,|L10.8|
000004  f7ffbffe          B.W      _ZN4Anki8Planning18GenerateDubinsPathERNS0_4PathEffffffffffffPf ; Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
;;;169                                                start_x, start_y, start_theta,
;;;170                                                end_x, end_y, end_theta,
;;;171                                                start_radius, end_radius,
;;;172                                                targetSpeed, accel, decel,
;;;173                                                final_straight_approach_length,
;;;174                                                path_length);
;;;175          }
;;;176    
                          ENDP

                  |L10.8|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower18GetCurrPathSegmentEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower18GetCurrPathSegmentEv PROC ; Anki::Cozmo::PathFollower::GetCurrPathSegment()
;;;293          
;;;294          s8 GetCurrPathSegment()
000000  4801              LDR      r0,|L11.8|
;;;295          {
;;;296            return realPathSegment_;// currPathSegment_;
000002  f9900001          LDRSB    r0,[r0,#1]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616realPathSegment_E
;;;297          }
000006  4770              BX       lr
;;;298          
                          ENDP

                  |L11.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower18ProcessPathSegmentERfS2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower18ProcessPathSegmentERfS2_ PROC ; Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&)
;;;303          
;;;304          Planning::SegmentRangeStatus ProcessPathSegment(f32 &shortestDistanceToPath_mm, f32 &radDiff)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;305          {
000004  4680              MOV      r8,r0
000006  ed2d8b04          VPUSH    {d8-d9}
00000a  b086              SUB      sp,sp,#0x18
00000c  460f              MOV      r7,r1
;;;306            // Get current robot pose
;;;307            f32 x, y, lookaheadX, lookaheadY;
;;;308            Radians angle;
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       _ZN4Anki7RadiansC1Ev ; Anki::Radians::Radians()
;;;309            Localization::GetCurrentMatPose(x, y, angle);
000014  466a              MOV      r2,sp
000016  a903              ADD      r1,sp,#0xc
000018  a802              ADD      r0,sp,#8
00001a  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
;;;310            
;;;311            lookaheadX = x;
;;;312            lookaheadY = y;
;;;313    
;;;314            bool checkRobotOriginStatus = false;
;;;315            Planning::PathSegmentType currType = path_[currPathSegment_].GetType();
00001e  4e38              LDR      r6,|L12.256|
000020  4d38              LDR      r5,|L12.260|
000022  eddd8a02          VLDR     s17,[sp,#8]           ;311
000026  7830              LDRB     r0,[r6,#0]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
000028  6829              LDR      r1,[r5,#0]
00002a  eb0000c0          ADD      r0,r0,r0,LSL #3
00002e  eb010380          ADD      r3,r1,r0,LSL #2
000032  ed9d8a03          VLDR     s16,[sp,#0xc]         ;312
000036  7819              LDRB     r1,[r3,#0]            ;312
000038  2400              MOVS     r4,#0                 ;314
;;;316            
;;;317            // Compute lookahead position
;;;318            if (LOOK_AHEAD_DIST_MM != 0 && (currType == Planning::PST_LINE || currType == Planning::PST_ARC) ) {
00003a  2901              CMP      r1,#1
00003c  bf18              IT       NE
00003e  2902              CMPNE    r1,#2
000040  d120              BNE      |L12.132|
000042  ed930a06          VLDR     s0,[r3,#0x18]
;;;319              if (path_[currPathSegment_].GetTargetSpeed() > 0) {
;;;320                lookaheadX += LOOK_AHEAD_DIST_MM * cosf(angle.ToFloat());
000046  eeb29a04          VMOV.F32 s18,#10.00000000
00004a  eeb50ac0          VCMPE.F32 s0,#0.0               ;319
00004e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;319
000052  ed9d0a00          VLDR     s0,[sp,#0]            ;319
000056  dd0a              BLE      |L12.110|
000058  f7fffffe          BL       __hardfp_cosf
00005c  ee408a09          VMLA.F32 s17,s0,s18
000060  ed9d0a00          VLDR     s0,[sp,#0]
;;;321                lookaheadY += LOOK_AHEAD_DIST_MM * sinf(angle.ToFloat());
000064  f7fffffe          BL       __hardfp_sinf
000068  ee008a09          VMLA.F32 s16,s0,s18
00006c  e009              B        |L12.130|
                  |L12.110|
;;;322              } else {
;;;323                lookaheadX -= LOOK_AHEAD_DIST_MM * cosf(angle.ToFloat());
00006e  f7fffffe          BL       __hardfp_cosf
000072  ee408a49          VMLS.F32 s17,s0,s18
000076  ed9d0a00          VLDR     s0,[sp,#0]
;;;324                lookaheadY -= LOOK_AHEAD_DIST_MM * sinf(angle.ToFloat());
00007a  f7fffffe          BL       __hardfp_sinf
00007e  ee008a49          VMLS.F32 s16,s0,s18
                  |L12.130|
;;;325              }
;;;326              checkRobotOriginStatus = true;
000082  2401              MOVS     r4,#1
                  |L12.132|
;;;327            }
;;;328            
;;;329            Planning::SegmentRangeStatus status = path_[currPathSegment_].GetDistToSegment(lookaheadX,lookaheadY,angle.ToFloat(),shortestDistanceToPath_mm,radDiff);
000084  7831              LDRB     r1,[r6,#0]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
000086  6828              LDR      r0,[r5,#0]
000088  eb0101c1          ADD      r1,r1,r1,LSL #3
00008c  eb000081          ADD      r0,r0,r1,LSL #2
000090  ed9d1a00          VLDR     s2,[sp,#0]
000094  463a              MOV      r2,r7
000096  4641              MOV      r1,r8
000098  eef00a48          VMOV.F32 s1,s16
00009c  eeb00a68          VMOV.F32 s0,s17
0000a0  f7fffffe          BL       _ZNK4Anki8Planning11PathSegment16GetDistToSegmentEfffRfS2_ ; Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const
;;;330            
;;;331            // If this is the last piece or the next piece is a point turn
;;;332            // check if the robot origin is out of range.
;;;333            if (status == Planning::OOR_NEAR_END &&
0000a4  2802              CMP      r0,#2
;;;334                checkRobotOriginStatus &&
;;;335                ((currPathSegment_ == path_.GetNumSegments() - 1)
;;;336                 || (path_[currPathSegment_+1].GetType() == Planning::PST_POINT_TURN))
;;;337                ) {
;;;338              
;;;339              f32 junk_mm, junk_rad;
;;;340              status = path_[currPathSegment_].GetDistToSegment(x,y,angle.ToFloat(),junk_mm, junk_rad);
;;;341            }
;;;342            
;;;343            return status;
;;;344          }
0000a6  bf1e              ITTT     NE
0000a8  b006              ADDNE    sp,sp,#0x18
0000aa  ecbd8b04          VPOPNE   {d8-d9}
0000ae  e8bd81f0          POPNE    {r4-r8,pc}
0000b2  2c00              CMP      r4,#0                 ;334
0000b4  d01e              BEQ      |L12.244|
0000b6  7929              LDRB     r1,[r5,#4]            ;334
0000b8  1e4a              SUBS     r2,r1,#1              ;335
0000ba  f9961000          LDRSB    r1,[r6,#0]            ;335  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
0000be  428a              CMP      r2,r1                 ;335
0000c0  d008              BEQ      |L12.212|
0000c2  1c4a              ADDS     r2,r1,#1              ;336
0000c4  b2d2              UXTB     r2,r2                 ;336
0000c6  682b              LDR      r3,[r5,#0]            ;336
0000c8  eb0202c2          ADD      r2,r2,r2,LSL #3       ;336
0000cc  f8132022          LDRB     r2,[r3,r2,LSL #2]     ;336
0000d0  2a03              CMP      r2,#3                 ;336
0000d2  d10f              BNE      |L12.244|
                  |L12.212|
0000d4  b2c8              UXTB     r0,r1                 ;340
0000d6  6829              LDR      r1,[r5,#0]            ;340
0000d8  eb0000c0          ADD      r0,r0,r0,LSL #3       ;340
0000dc  eb010080          ADD      r0,r1,r0,LSL #2       ;340
0000e0  ed9d1a00          VLDR     s2,[sp,#0]            ;340
0000e4  aa05              ADD      r2,sp,#0x14           ;340
0000e6  a904              ADD      r1,sp,#0x10           ;340
0000e8  eddd0a03          VLDR     s1,[sp,#0xc]          ;340
0000ec  ed9d0a02          VLDR     s0,[sp,#8]            ;340
0000f0  f7fffffe          BL       _ZNK4Anki8Planning11PathSegment16GetDistToSegmentEfffRfS2_ ; Anki::Planning::PathSegment::GetDistToSegment(float, float, float, float&, float&) const
                  |L12.244|
0000f4  b006              ADD      sp,sp,#0x18
0000f6  ecbd8b04          VPOP     {d8-d9}
0000fa  e8bd81f0          POP      {r4-r8,pc}
;;;345          
                          ENDP

0000fe  0000              DCW      0x0000
                  |L12.256|
                          DCD      ||.data||
                  |L12.260|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower18SetManualPathSpeedEfff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower18SetManualPathSpeedEfff PROC ; Anki::Cozmo::PathFollower::SetManualPathSpeed(float, float, float)
;;;285          
;;;286          void SetManualPathSpeed(f32 speed_mmps, f32 accel_mmps2, f32 decel_mmps2)
000000  4803              LDR      r0,|L13.16|
;;;287          {
;;;288            manualPathSpeed_ = speed_mmps;
000002  ed800a04          VSTR     s0,[r0,#0x10]
;;;289            manualPathAccel_ = accel_mmps2;
000006  edc00a05          VSTR     s1,[r0,#0x14]
;;;290            manualPathDecel_ = decel_mmps2;
00000a  ed801a06          VSTR     s2,[r0,#0x18]
;;;291          }
00000e  4770              BX       lr
;;;292          
                          ENDP

                  |L13.16|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower18StartPathTraversalEtb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower18StartPathTraversalEtb PROC ; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
;;;212          
;;;213          bool StartPathTraversal(u16 path_id, bool manualSpeedControl)
000000  b5f0              PUSH     {r4-r7,lr}
000002  4e39              LDR      r6,|L14.232|
;;;214          {
000004  4604              MOV      r4,r0
;;;215            // Set first path segment
;;;216            if (path_.GetNumSegments() > 0) {
;;;217              
;;;218    #if(DEBUG_PATH_FOLLOWER)
;;;219              path_.PrintPath();
;;;220    #endif
;;;221              
;;;222              if (!path_.CheckContinuity(CONTINUITY_TOL_MM2)) {
;;;223                PRINT("ERROR: Path is discontinuous\n");
;;;224                return false;
;;;225              }
;;;226              
;;;227              // Set whether or not path is traversed according to speed in path parameters
;;;228              manualSpeedControl_ = manualSpeedControl;
000006  4d39              LDR      r5,|L14.236|
000008  7930              LDRB     r0,[r6,#4]
00000a  b085              SUB      sp,sp,#0x14           ;214
00000c  460f              MOV      r7,r1                 ;214
00000e  2800              CMP      r0,#0                 ;216
000010  d064              BEQ      |L14.220|
000012  f04f31ff          MOV      r1,#0xffffffff        ;222
000016  eeb70a00          VMOV.F32 s0,#1.00000000        ;222
00001a  4630              MOV      r0,r6                 ;222
00001c  f7fffffe          BL       _ZNK4Anki8Planning4Path15CheckContinuityEfa ; Anki::Planning::Path::CheckContinuity(float, signed char) const
000020  b368              CBZ      r0,|L14.126|
000022  70ef              STRB     r7,[r5,#3]
;;;229              
;;;230              // Get current robot pose
;;;231              f32 x, y;
;;;232              Radians angle;
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       _ZN4Anki7RadiansC1Ev ; Anki::Radians::Radians()
;;;233              Localization::GetCurrentMatPose(x, y, angle);
00002a  466a              MOV      r2,sp
00002c  a903              ADD      r1,sp,#0xc
00002e  a802              ADD      r0,sp,#8
000030  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
;;;234              
;;;235              currPathSegment_ = 0;
000034  2000              MOVS     r0,#0
000036  7028              STRB     r0,[r5,#0]
;;;236              realPathSegment_ = currPathSegment_;
000038  7068              STRB     r0,[r5,#1]
00003a  6831              LDR      r1,[r6,#0]
00003c  7808              LDRB     r0,[r1,#0]
;;;237    
;;;238              // Set speed
;;;239              // (Except for point turns whose speeds are handled at the steering controller level)
;;;240              if (path_[currPathSegment_].GetType() != Planning::PST_POINT_TURN) {
00003e  2803              CMP      r0,#3
000040  d04a              BEQ      |L14.216|
;;;241                if (manualSpeedControl_) {
000042  78e8              LDRB     r0,[r5,#3]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304619manualSpeedControl_E
000044  b308              CBZ      r0,|L14.138|
;;;242                  SpeedController::SetUserCommandedDesiredVehicleSpeed( manualPathSpeed_ );
000046  ed950a04          VLDR     s0,[r5,#0x10]
00004a  eebd0ac0          VCVT.S32.F32 s0,s0
00004e  ee100a10          VMOV     r0,s0
000052  b200              SXTH     r0,r0
000054  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs ; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
;;;243                  SpeedController::SetUserCommandedAcceleration( manualPathAccel_ );
000058  ed950a05          VLDR     s0,[r5,#0x14]
00005c  eebc0ac0          VCVT.U32.F32 s0,s0
000060  ee100a10          VMOV     r0,s0
000064  b280              UXTH     r0,r0
000066  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController28SetUserCommandedAccelerationEt ; Anki::Cozmo::SpeedController::SetUserCommandedAcceleration(unsigned short)
;;;244                  SpeedController::SetUserCommandedDeceleration( manualPathDecel_ );
00006a  ed950a06          VLDR     s0,[r5,#0x18]
00006e  eebc0ac0          VCVT.U32.F32 s0,s0
000072  ee100a10          VMOV     r0,s0
000076  b280              UXTH     r0,r0
000078  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController28SetUserCommandedDecelerationEt ; Anki::Cozmo::SpeedController::SetUserCommandedDeceleration(unsigned short)
00007c  e02c              B        |L14.216|
                  |L14.126|
00007e  a01c              ADR      r0,|L14.240|
000080  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;245                } else {
;;;246                  SpeedController::SetUserCommandedDesiredVehicleSpeed( path_[currPathSegment_].GetTargetSpeed() );
;;;247                  SpeedController::SetUserCommandedAcceleration( path_[currPathSegment_].GetAccel() );
;;;248                  SpeedController::SetUserCommandedDeceleration( path_[currPathSegment_].GetDecel() );
;;;249                }
;;;250              }
;;;251    
;;;252    #if(DEBUG_PATH_FOLLOWER)
;;;253              PRINT("*** PATH START SEGMENT %d: speed = %f, accel = %f, decel = %f\n",
;;;254                    currPathSegment_,
;;;255                    path_[currPathSegment_].GetTargetSpeed(),
;;;256                    path_[currPathSegment_].GetAccel(),
;;;257                    path_[currPathSegment_].GetDecel());
;;;258    #endif
;;;259    
;;;260              //Robot::SetOperationMode(Robot::FOLLOW_PATH);
;;;261              SteeringController::SetPathFollowMode();
;;;262            }
;;;263            
;;;264            // Visualize path
;;;265            SetPathForViz();
;;;266            
;;;267            // Set id of path
;;;268            if (path_id != 0) {
;;;269              lastPathID_ = path_id;
;;;270            }
;;;271            
;;;272            return TRUE;
;;;273          }
000084  b005              ADD      sp,sp,#0x14
000086  2000              MOVS     r0,#0                 ;224
000088  bdf0              POP      {r4-r7,pc}
                  |L14.138|
00008a  ed910a06          VLDR     s0,[r1,#0x18]
00008e  eebd0ac0          VCVT.S32.F32 s0,s0                 ;246
000092  ee100a10          VMOV     r0,s0                 ;246
000096  b200              SXTH     r0,r0                 ;246
000098  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs ; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
00009c  7829              LDRB     r1,[r5,#0]            ;247  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
00009e  6830              LDR      r0,[r6,#0]            ;247
0000a0  eb0101c1          ADD      r1,r1,r1,LSL #3       ;247
0000a4  eb000081          ADD      r0,r0,r1,LSL #2       ;247
0000a8  ed900a07          VLDR     s0,[r0,#0x1c]         ;247
0000ac  eebc0ac0          VCVT.U32.F32 s0,s0                 ;247
0000b0  ee100a10          VMOV     r0,s0                 ;247
0000b4  b280              UXTH     r0,r0                 ;247
0000b6  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController28SetUserCommandedAccelerationEt ; Anki::Cozmo::SpeedController::SetUserCommandedAcceleration(unsigned short)
0000ba  7829              LDRB     r1,[r5,#0]            ;248  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
0000bc  6830              LDR      r0,[r6,#0]            ;248
0000be  eb0101c1          ADD      r1,r1,r1,LSL #3       ;248
0000c2  eb000081          ADD      r0,r0,r1,LSL #2       ;248
0000c6  ed900a08          VLDR     s0,[r0,#0x20]         ;248
0000ca  eebc0ac0          VCVT.U32.F32 s0,s0                 ;248
0000ce  ee100a10          VMOV     r0,s0                 ;248
0000d2  b280              UXTH     r0,r0                 ;248
0000d4  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController28SetUserCommandedDecelerationEt ; Anki::Cozmo::SpeedController::SetUserCommandedDeceleration(unsigned short)
                  |L14.216|
0000d8  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController17SetPathFollowModeEv ; Anki::Cozmo::SteeringController::SetPathFollowMode()
                  |L14.220|
0000dc  2c00              CMP      r4,#0                 ;268
0000de  bf18              IT       NE                    ;269
0000e0  80ac              STRHNE   r4,[r5,#4]            ;269
0000e2  2001              MOVS     r0,#1                 ;272
0000e4  b005              ADD      sp,sp,#0x14
0000e6  bdf0              POP      {r4-r7,pc}
;;;274          
                          ENDP

                  |L14.232|
                          DCD      ||.bss||
                  |L14.236|
                          DCD      ||.data||
                  |L14.240|
0000f0  4552524f          DCB      "ERROR: Path is discontinuous\n",0
0000f4  523a2050
0000f8  61746820
0000fc  69732064
000100  6973636f
000104  6e74696e
000108  756f7573
00010c  0a00    
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||i._ZN4Anki5Cozmo12PathFollower19IsInManualSpeedModeEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower19IsInManualSpeedModeEv PROC ; Anki::Cozmo::PathFollower::IsInManualSpeedMode()
;;;280    
;;;281          bool IsInManualSpeedMode()
000000  4801              LDR      r0,|L15.8|
;;;282          {
;;;283            return manualSpeedControl_;
000002  78c0              LDRB     r0,[r0,#3]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304619manualSpeedControl_E
;;;284          }
000004  4770              BX       lr
;;;285          
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower21AppendPathSegment_ArcEjffffffff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower21AppendPathSegment_ArcEjffffffff PROC ; Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
;;;143          
;;;144          bool AppendPathSegment_Arc(u32 matID, f32 x_center_mm, f32 y_center_mm, f32 radius_mm, f32 startRad, f32 sweepRad,
000000  b510              PUSH     {r4,lr}
;;;145                                     f32 targetSpeed, f32 accel, f32 decel)
;;;146          {
000002  4604              MOV      r4,r0
000004  ed2d8b08          VPUSH    {d8-d11}
000008  eeb08a63          VMOV.F32 s16,s7
00000c  eef08a43          VMOV.F32 s17,s6
000010  eeb09a62          VMOV.F32 s18,s5
000014  eef09a42          VMOV.F32 s19,s4
000018  eeb0aa61          VMOV.F32 s20,s3
00001c  eef0aa41          VMOV.F32 s21,s2
000020  eeb0ba60          VMOV.F32 s22,s1
000024  eef0ba40          VMOV.F32 s23,s0
;;;147            TrimPath();
000028  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower8TrimPathEv ; Anki::Cozmo::PathFollower::TrimPath()
;;;148            return path_.AppendArc(matID, x_center_mm, y_center_mm, radius_mm, startRad, sweepRad,
00002c  eef03a48          VMOV.F32 s7,s16
000030  eeb03a68          VMOV.F32 s6,s17
000034  eef02a49          VMOV.F32 s5,s18
000038  eeb02a69          VMOV.F32 s4,s19
00003c  eef01a4a          VMOV.F32 s3,s20
000040  eeb01a6a          VMOV.F32 s2,s21
000044  eef00a4b          VMOV.F32 s1,s22
000048  eeb00a6b          VMOV.F32 s0,s23
00004c  ecbd8b08          VPOP     {d8-d11}
000050  4621              MOV      r1,r4
000052  e8bd4010          POP      {r4,lr}
000056  4801              LDR      r0,|L16.92|
000058  f7ffbffe          B.W      _ZN4Anki8Planning4Path9AppendArcEjffffffff ; Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
;;;149                                   targetSpeed, accel, decel);
;;;150          }
;;;151          
                          ENDP

                  |L16.92|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower22AppendPathSegment_LineEjfffffff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower22AppendPathSegment_LineEjfffffff PROC ; Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
;;;134          // TODO: Change units to meters
;;;135          bool AppendPathSegment_Line(u32 matID, f32 x_start_mm, f32 y_start_mm, f32 x_end_mm, f32 y_end_mm,
000000  b510              PUSH     {r4,lr}
;;;136                                      f32 targetSpeed, f32 accel, f32 decel)
;;;137          {
000002  4604              MOV      r4,r0
000004  ed2d8b08          VPUSH    {d8-d11}
000008  eeb08a43          VMOV.F32 s16,s6
00000c  eef08a62          VMOV.F32 s17,s5
000010  eeb09a42          VMOV.F32 s18,s4
000014  eef09a61          VMOV.F32 s19,s3
000018  eeb0aa41          VMOV.F32 s20,s2
00001c  eef0aa60          VMOV.F32 s21,s1
000020  eeb0ba40          VMOV.F32 s22,s0
;;;138            TrimPath();
000024  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower8TrimPathEv ; Anki::Cozmo::PathFollower::TrimPath()
;;;139            return path_.AppendLine(matID, x_start_mm, y_start_mm, x_end_mm, y_end_mm,
000028  eeb03a48          VMOV.F32 s6,s16
00002c  eef02a68          VMOV.F32 s5,s17
000030  eeb02a49          VMOV.F32 s4,s18
000034  eef01a69          VMOV.F32 s3,s19
000038  eeb01a4a          VMOV.F32 s2,s20
00003c  eef00a6a          VMOV.F32 s1,s21
000040  eeb00a4b          VMOV.F32 s0,s22
000044  ecbd8b08          VPOP     {d8-d11}
000048  4621              MOV      r1,r4
00004a  e8bd4010          POP      {r4,lr}
00004e  4801              LDR      r0,|L17.84|
000050  f7ffbffe          B.W      _ZN4Anki8Planning4Path10AppendLineEjfffffff ; Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
;;;140                                    targetSpeed, accel, decel);
;;;141          }
;;;142          
                          ENDP

                  |L17.84|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower22GetNumFreeSegmentSlotsEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower22GetNumFreeSegmentSlotsEv PROC ; Anki::Cozmo::PathFollower::GetNumFreeSegmentSlots()
;;;298          
;;;299          u8 GetNumFreeSegmentSlots()
000000  4804              LDR      r0,|L18.20|
;;;300          {
;;;301            return MAX_NUM_PATH_SEGMENTS - (path_.GetNumSegments() - currPathSegment_ + 1);
000002  4905              LDR      r1,|L18.24|
000004  7900              LDRB     r0,[r0,#4]
000006  f9911000          LDRSB    r1,[r1,#0]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
00000a  1a40              SUBS     r0,r0,r1
00000c  f1c00009          RSB      r0,r0,#9
000010  b2c0              UXTB     r0,r0
;;;302          }
000012  4770              BX       lr
;;;303          
                          ENDP

                  |L18.20|
                          DCD      ||.bss||
                  |L18.24|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower27AppendPathSegment_PointTurnEjffffff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower27AppendPathSegment_PointTurnEjffffff PROC ; Anki::Cozmo::PathFollower::AppendPathSegment_PointTurn(unsigned, float, float, float, float, float, float)
;;;152          
;;;153          bool AppendPathSegment_PointTurn(u32 matID, f32 x, f32 y, f32 targetAngle,
000000  b510              PUSH     {r4,lr}
;;;154                                           f32 targetRotSpeed, f32 rotAccel, f32 rotDecel)
;;;155          {
000002  4604              MOV      r4,r0
000004  ed2d8b06          VPUSH    {d8-d10}
000008  eeb08a62          VMOV.F32 s16,s5
00000c  eef08a42          VMOV.F32 s17,s4
000010  eeb09a61          VMOV.F32 s18,s3
000014  eef09a41          VMOV.F32 s19,s2
000018  eeb0aa60          VMOV.F32 s20,s1
00001c  eef0aa40          VMOV.F32 s21,s0
;;;156            TrimPath();
000020  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower8TrimPathEv ; Anki::Cozmo::PathFollower::TrimPath()
;;;157            return path_.AppendPointTurn(matID, x, y, targetAngle,
000024  eef02a48          VMOV.F32 s5,s16
000028  eeb02a68          VMOV.F32 s4,s17
00002c  eef01a49          VMOV.F32 s3,s18
000030  eeb01a69          VMOV.F32 s2,s19
000034  eef00a4a          VMOV.F32 s1,s20
000038  eeb00a6a          VMOV.F32 s0,s21
00003c  ecbd8b06          VPOP     {d8-d10}
000040  4621              MOV      r1,r4
000042  e8bd4010          POP      {r4,lr}
000046  4801              LDR      r0,|L19.76|
000048  f7ffbffe          B.W      _ZN4Anki8Planning4Path15AppendPointTurnEjffffff ; Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float)
;;;158                                         targetRotSpeed, rotAccel, rotDecel);
;;;159          }
;;;160          
                          ENDP

                  |L19.76|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower27ProcessPathSegmentPointTurnERfS2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower27ProcessPathSegmentPointTurnERfS2_ PROC ; Anki::Cozmo::PathFollower::ProcessPathSegmentPointTurn(float&, float&)
;;;347    
;;;348          Planning::SegmentRangeStatus ProcessPathSegmentPointTurn(f32 &shortestDistanceToPath_mm, f32 &radDiff)
000000  b510              PUSH     {r4,lr}
;;;349          {
;;;350            const Planning::PathSegmentDef::s_turn* currSeg = &(path_[currPathSegment_].GetDef().turn);
000002  4c10              LDR      r4,|L20.68|
000004  4910              LDR      r1,|L20.72|
000006  7820              LDRB     r0,[r4,#0]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
000008  6809              LDR      r1,[r1,#0]
00000a  eb0000c0          ADD      r0,r0,r0,LSL #3
00000e  eb010080          ADD      r0,r1,r0,LSL #2
;;;351            
;;;352    #if(DEBUG_PATH_FOLLOWER)
;;;353            Radians currOrientation = Localization::GetCurrentMatOrientation();
;;;354            PRINT("currPathSeg: %d, TURN  currAngle: %f, targetAngle: %f\n",
;;;355                   currPathSegment_, currOrientation.ToFloat(), currSeg->targetAngle);
;;;356    #endif
;;;357            
;;;358            // When the car is stopped, initiate point turn
;;;359            if (!pointTurnStarted_) {
000012  78a2              LDRB     r2,[r4,#2]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304617pointTurnStarted_E
000014  1d01              ADDS     r1,r0,#4
000016  b13a              CBZ      r2,|L20.40|
;;;360    #if(DEBUG_PATH_FOLLOWER)
;;;361              PRINT("EXECUTE POINT TURN\n");
;;;362    #endif
;;;363              SteeringController::ExecutePointTurn(currSeg->targetAngle,
;;;364                                                   path_[currPathSegment_].GetTargetSpeed(),
;;;365                                                   path_[currPathSegment_].GetAccel(),
;;;366                                                   path_[currPathSegment_].GetDecel());
;;;367              pointTurnStarted_ = true;
;;;368    
;;;369            } else {
;;;370              if (SteeringController::GetMode() != SteeringController::SM_POINT_TURN) {
000018  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController7GetModeEv ; Anki::Cozmo::SteeringController::GetMode()
00001c  2802              CMP      r0,#2
00001e  d00f              BEQ      |L20.64|
;;;371                pointTurnStarted_ = false;
000020  2000              MOVS     r0,#0
000022  70a0              STRB     r0,[r4,#2]
;;;372                return Planning::OOR_NEAR_END;
000024  2002              MOVS     r0,#2
;;;373              }
;;;374            }
;;;375    
;;;376            
;;;377            return Planning::IN_SEGMENT_RANGE;
;;;378          }
000026  bd10              POP      {r4,pc}
                  |L20.40|
000028  edd01a08          VLDR     s3,[r0,#0x20]
00002c  ed901a07          VLDR     s2,[r0,#0x1c]
000030  edd00a06          VLDR     s1,[r0,#0x18]
000034  ed910a02          VLDR     s0,[r1,#8]            ;363
000038  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController16ExecutePointTurnEffff ; Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
00003c  2001              MOVS     r0,#1                 ;367
00003e  70a0              STRB     r0,[r4,#2]            ;367
                  |L20.64|
000040  2000              MOVS     r0,#0                 ;377
000042  bd10              POP      {r4,pc}
;;;379          
                          ENDP

                  |L20.68|
                          DCD      ||.data||
                  |L20.72|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower4InitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower4InitEv PROC ; Anki::Cozmo::PathFollower::Init()
;;;75           
;;;76           Result Init(void)
000000  b510              PUSH     {r4,lr}
000002  4806              LDR      r0,|L21.28|
000004  f7fffffe          BL       _ZN4Anki8Planning4Path5ClearEv ; Anki::Planning::Path::Clear()
000008  4805              LDR      r0,|L21.32|
00000a  f04f31ff          MOV      r1,#0xffffffff
00000e  2200              MOVS     r2,#0
000010  7001              STRB     r1,[r0,#0]
000012  7082              STRB     r2,[r0,#2]
000014  7041              STRB     r1,[r0,#1]
;;;77           {
;;;78             ClearPath();
;;;79             
;;;80             return RESULT_OK;
000016  4610              MOV      r0,r2
;;;81           }
000018  bd10              POP      {r4,pc}
;;;82           
                          ENDP

00001a  0000              DCW      0x0000
                  |L21.28|
                          DCD      ||.bss||
                  |L21.32|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower6UpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower6UpdateEv PROC ; Anki::Cozmo::PathFollower::Update()
;;;411          
;;;412          Result Update()
000000  b570              PUSH     {r4-r6,lr}
;;;413          {
;;;414            
;;;415    #if(FREE_DRIVE_DUBINS_TEST)
;;;416            // Test code to visualize Dubins path online
;;;417            f32 start_x,start_y;
;;;418            Radians start_theta;
;;;419            Localization::GetCurrentMatPose(start_x,start_y,start_theta);
;;;420            path_.Clear();
;;;421            
;;;422            const f32 end_x = 0;
;;;423            const f32 end_y = 250;
;;;424            const f32 end_theta = 0.5*PI;
;;;425            const f32 start_radius = 50;
;;;426            const f32 end_radius = 50;
;;;427            const f32 targetSpeed = 100;
;;;428            const f32 accel = 200;
;;;429            const f32 decel = 200;
;;;430            const f32 final_straight_approach_length = 0.1;
;;;431            f32 path_length;
;;;432            u8 numSegments = Planning::GenerateDubinsPath(path_,
;;;433                                                          start_x, start_y, start_theta.ToFloat(),
;;;434                                                          end_x, end_y, end_theta,
;;;435                                                          start_radius, end_radius,
;;;436                                                          targetSpeed, accel, decel,
;;;437                                                          final_straight_approach_length,
;;;438                                                          &path_length);
;;;439            const f32 distToTarget = sqrtf((start_x - end_x)*(start_x - end_x) + (start_y - end_y)*(start_y - end_y));
;;;440            PERIODIC_PRINT(500, "Dubins Test: pathLength %f, distToTarget %f\n", path_length, distToTarget);
;;;441            
;;;442            // Test threshold for whether to use Dubins path or not)
;;;443            
;;;444            if (path_length > 2 * distToTarget) {
;;;445              PRINT(" Dubins path exceeds 2x dist to target (%f %f)\n", path_length, distToTarget);
;;;446            }
;;;447            
;;;448            //path_.PrintPath();
;;;449    #if(ENABLE_PATH_VIZ)
;;;450            SetPathForViz();
;;;451            Viz::ShowPath(0, true);
;;;452    #endif
;;;453    #endif
;;;454            
;;;455            
;;;456            if (currPathSegment_ < 0) {
000002  4c4a              LDR      r4,|L22.300|
000004  f9940000          LDRSB    r0,[r4,#0]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
000008  2800              CMP      r0,#0
00000a  da04              BGE      |L22.22|
;;;457              SpeedController::SetUserCommandedDesiredVehicleSpeed(0);
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs ; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
                  |L22.18|
;;;458              return RESULT_FAIL;
;;;459            }
;;;460            
;;;461            Planning::SegmentRangeStatus segRes = Planning::OOR_NEAR_END;
;;;462            switch (path_[currPathSegment_].GetType()) {
;;;463              case Planning::PST_LINE:
;;;464              case Planning::PST_ARC:
;;;465                segRes = ProcessPathSegment(distToPath_mm_, radToPath_);
;;;466                break;
;;;467              case Planning::PST_POINT_TURN:
;;;468                segRes = ProcessPathSegmentPointTurn(distToPath_mm_, radToPath_);
;;;469                break;
;;;470              default:
;;;471                // TODO: Error?
;;;472                break;
;;;473            }
;;;474            
;;;475    #if(DEBUG_PATH_FOLLOWER)
;;;476            PERIODIC_PRINT(DBG_PERIOD,"PATH ERROR: %f mm, %f deg\n", distToPath_mm_, RAD_TO_DEG(radToPath_));
;;;477    #endif
;;;478            
;;;479            // Go to next path segment if no longer in range of the current one
;;;480            if (segRes == Planning::OOR_NEAR_END) {
;;;481              if (++currPathSegment_ >= path_.GetNumSegments()) {
;;;482                // Path is complete
;;;483                PathComplete();
;;;484                return RESULT_OK;
;;;485              }
;;;486              ++realPathSegment_;
;;;487              
;;;488              // Command new speed for segment
;;;489              // (Except for point turns whose speeds are handled at the steering controller level)
;;;490              if (path_[currPathSegment_].GetType() != Planning::PST_POINT_TURN) {
;;;491                SpeedController::SetUserCommandedDesiredVehicleSpeed( path_[currPathSegment_].GetTargetSpeed() );
;;;492                SpeedController::SetUserCommandedAcceleration( path_[currPathSegment_].GetAccel() );
;;;493                SpeedController::SetUserCommandedDeceleration( path_[currPathSegment_].GetDecel() );
;;;494              }
;;;495    #if(DEBUG_PATH_FOLLOWER)
;;;496              PRINT("*** PATH SEGMENT %d: speed = %f, accel = %f, decel = %f\n",
;;;497                    currPathSegment_,
;;;498                    path_[currPathSegment_].GetTargetSpeed(),
;;;499                    path_[currPathSegment_].GetAccel(),
;;;500                    path_[currPathSegment_].GetDecel());
;;;501    #endif
;;;502              WheelController::ResetIntegralGainSums();
;;;503              
;;;504            }
;;;505            
;;;506            // If in manual speed control, apply speed here
;;;507            if (manualSpeedControl_) {
;;;508              SpeedController::SetUserCommandedDesiredVehicleSpeed( manualPathSpeed_ );
;;;509              SpeedController::SetUserCommandedAcceleration( manualPathAccel_ );
;;;510              SpeedController::SetUserCommandedDeceleration( manualPathDecel_ );
;;;511            }
;;;512            
;;;513            if (!DockingController::IsBusy()) {
;;;514              // Check that starting error is not too big
;;;515              // TODO: Check for excessive heading error as well?
;;;516              if (distToPath_mm_ > TOO_FAR_FROM_PATH_DIST_MM) {
;;;517                currPathSegment_ = -1;
;;;518                realPathSegment_ = -1;
;;;519    #if(DEBUG_PATH_FOLLOWER)
;;;520                PRINT("PATH STARTING ERROR TOO LARGE (%f mm)\n", distToPath_mm_);
;;;521    #endif
;;;522                return RESULT_FAIL;
000012  2001              MOVS     r0,#1
;;;523              }
;;;524            }
;;;525            
;;;526            return RESULT_OK;
;;;527          }
000014  bd70              POP      {r4-r6,pc}
                  |L22.22|
000016  4d46              LDR      r5,|L22.304|
000018  b2c0              UXTB     r0,r0                 ;462
00001a  eb0000c0          ADD      r0,r0,r0,LSL #3       ;462
00001e  6829              LDR      r1,[r5,#0]            ;462
000020  f04f36ff          MOV      r6,#0xffffffff        ;462
000024  f8110020          LDRB     r0,[r1,r0,LSL #2]     ;462
000028  2801              CMP      r0,#1                 ;462
00002a  bf18              IT       NE                    ;462
00002c  2802              CMPNE    r0,#2                 ;462
00002e  d002              BEQ      |L22.54|
000030  2803              CMP      r0,#3                 ;462
000032  d005              BEQ      |L22.64|
000034  e00a              B        |L22.76|
                  |L22.54|
000036  493f              LDR      r1,|L22.308|
000038  1f08              SUBS     r0,r1,#4              ;465
00003a  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower18ProcessPathSegmentERfS2_ ; Anki::Cozmo::PathFollower::ProcessPathSegment(float&, float&)
00003e  e003              B        |L22.72|
                  |L22.64|
000040  493c              LDR      r1,|L22.308|
000042  1f08              SUBS     r0,r1,#4              ;468
000044  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower27ProcessPathSegmentPointTurnERfS2_ ; Anki::Cozmo::PathFollower::ProcessPathSegmentPointTurn(float&, float&)
                  |L22.72|
000048  2802              CMP      r0,#2                 ;480
00004a  d145              BNE      |L22.216|
                  |L22.76|
00004c  7820              LDRB     r0,[r4,#0]            ;481  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
00004e  7929              LDRB     r1,[r5,#4]            ;481
000050  1c40              ADDS     r0,r0,#1              ;481
000052  b240              SXTB     r0,r0                 ;481
000054  7020              STRB     r0,[r4,#0]            ;481
000056  4281              CMP      r1,r0                 ;481
000058  dc09              BGT      |L22.110|
00005a  2000              MOVS     r0,#0                 ;481
00005c  70a0              STRB     r0,[r4,#2]            ;481
00005e  7026              STRB     r6,[r4,#0]            ;481
000060  7066              STRB     r6,[r4,#1]            ;481
000062  ed9f0a35          VLDR     s0,|L22.312|
000066  70e0              STRB     r0,[r4,#3]            ;481
000068  ed840a04          VSTR     s0,[r4,#0x10]         ;481
00006c  bd70              POP      {r4-r6,pc}
                  |L22.110|
00006e  7861              LDRB     r1,[r4,#1]            ;486  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616realPathSegment_E
000070  b2c0              UXTB     r0,r0                 ;490
000072  1c49              ADDS     r1,r1,#1              ;486
000074  7061              STRB     r1,[r4,#1]            ;486
000076  6829              LDR      r1,[r5,#0]            ;486
000078  eb0000c0          ADD      r0,r0,r0,LSL #3       ;486
00007c  eb010080          ADD      r0,r1,r0,LSL #2       ;486
000080  7801              LDRB     r1,[r0,#0]            ;486
000082  2903              CMP      r1,#3                 ;490
000084  d026              BEQ      |L22.212|
000086  ed900a06          VLDR     s0,[r0,#0x18]         ;490
00008a  eebd0ac0          VCVT.S32.F32 s0,s0                 ;491
00008e  ee100a10          VMOV     r0,s0                 ;491
000092  b200              SXTH     r0,r0                 ;491
000094  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs ; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
000098  7820              LDRB     r0,[r4,#0]            ;492  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
00009a  6829              LDR      r1,[r5,#0]            ;492
00009c  eb0000c0          ADD      r0,r0,r0,LSL #3       ;492
0000a0  eb010080          ADD      r0,r1,r0,LSL #2       ;492
0000a4  ed900a07          VLDR     s0,[r0,#0x1c]         ;492
0000a8  eebc0ac0          VCVT.U32.F32 s0,s0                 ;492
0000ac  ee100a10          VMOV     r0,s0                 ;492
0000b0  b280              UXTH     r0,r0                 ;492
0000b2  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController28SetUserCommandedAccelerationEt ; Anki::Cozmo::SpeedController::SetUserCommandedAcceleration(unsigned short)
0000b6  7820              LDRB     r0,[r4,#0]            ;493  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
0000b8  6829              LDR      r1,[r5,#0]            ;493
0000ba  eb0000c0          ADD      r0,r0,r0,LSL #3       ;493
0000be  eb010080          ADD      r0,r1,r0,LSL #2       ;493
0000c2  ed900a08          VLDR     s0,[r0,#0x20]         ;493
0000c6  eebc0ac0          VCVT.U32.F32 s0,s0                 ;493
0000ca  ee100a10          VMOV     r0,s0                 ;493
0000ce  b280              UXTH     r0,r0                 ;493
0000d0  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController28SetUserCommandedDecelerationEt ; Anki::Cozmo::SpeedController::SetUserCommandedDeceleration(unsigned short)
                  |L22.212|
0000d4  f7fffffe          BL       _ZN4Anki5Cozmo15WheelController21ResetIntegralGainSumsEv ; Anki::Cozmo::WheelController::ResetIntegralGainSums()
                  |L22.216|
0000d8  78e0              LDRB     r0,[r4,#3]            ;507  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304619manualSpeedControl_E
0000da  b1d0              CBZ      r0,|L22.274|
0000dc  ed940a04          VLDR     s0,[r4,#0x10]         ;508
0000e0  eebd0ac0          VCVT.S32.F32 s0,s0                 ;508
0000e4  ee100a10          VMOV     r0,s0                 ;508
0000e8  b200              SXTH     r0,r0                 ;508
0000ea  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs ; Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
0000ee  ed940a05          VLDR     s0,[r4,#0x14]         ;509
0000f2  eebc0ac0          VCVT.U32.F32 s0,s0                 ;509
0000f6  ee100a10          VMOV     r0,s0                 ;509
0000fa  b280              UXTH     r0,r0                 ;509
0000fc  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController28SetUserCommandedAccelerationEt ; Anki::Cozmo::SpeedController::SetUserCommandedAcceleration(unsigned short)
000100  ed940a06          VLDR     s0,[r4,#0x18]         ;510
000104  eebc0ac0          VCVT.U32.F32 s0,s0                 ;510
000108  ee100a10          VMOV     r0,s0                 ;510
00010c  b280              UXTH     r0,r0                 ;510
00010e  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController28SetUserCommandedDecelerationEt ; Anki::Cozmo::SpeedController::SetUserCommandedDeceleration(unsigned short)
                  |L22.274|
000112  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController6IsBusyEv ; Anki::Cozmo::DockingController::IsBusy()
000116  b938              CBNZ     r0,|L22.296|
000118  4908              LDR      r1,|L22.316|
00011a  68a0              LDR      r0,[r4,#8]            ;516  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304614distToPath_mm_E
00011c  4288              CMP      r0,r1                 ;516
00011e  bfc4              ITT      GT                    ;517
000120  7026              STRBGT   r6,[r4,#0]            ;517
000122  7066              STRBGT   r6,[r4,#1]            ;518
000124  f73faf75          BGT      |L22.18|
                  |L22.296|
000128  2000              MOVS     r0,#0                 ;526
00012a  bd70              POP      {r4-r6,pc}
;;;528          
                          ENDP

                  |L22.300|
                          DCD      ||.data||
                  |L22.304|
                          DCD      ||.bss||
                  |L22.308|
                          DCD      ||.data||+0xc
                  |L22.312|
000138  00000000          DCFS     0x00000000 ; 0
                  |L22.316|
                          DCD      0x42480000

                          AREA ||i._ZN4Anki5Cozmo12PathFollower8DriveArcEfffff||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo12PathFollower8DriveArcEfffff PROC ; Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
;;;615          
;;;616          bool DriveArc(f32 sweep_rad, f32 radius_mm, f32 acc_start_frac, f32 acc_end_frac, f32 duration_sec)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;617          {
000004  ed2d8b0e          VPUSH    {d8-d14}
000008  b0a3              SUB      sp,sp,#0x8c
00000a  eeb08a42          VMOV.F32 s16,s4
00000e  eef09a61          VMOV.F32 s19,s3
000012  eeb09a41          VMOV.F32 s18,s2
000016  eef08a60          VMOV.F32 s17,s1
00001a  eeb0ca40          VMOV.F32 s24,s0
;;;618            VelocityProfileGenerator vpg;
00001e  a80a              ADD      r0,sp,#0x28
000020  f7fffffe          BL       _ZN4Anki24VelocityProfileGeneratorC1Ev ; Anki::VelocityProfileGenerator::VelocityProfileGenerator()
;;;619            
;;;620            // Compute profile
;;;621            f32 curr_x, curr_y;
;;;622            Radians curr_angle;
000024  a81e              ADD      r0,sp,#0x78
000026  f7fffffe          BL       _ZN4Anki7RadiansC1Ev ; Anki::Radians::Radians()
;;;623            Localization::GetCurrentMatPose(curr_x, curr_y, curr_angle);
00002a  aa1e              ADD      r2,sp,#0x78
00002c  a922              ADD      r1,sp,#0x88
00002e  a821              ADD      r0,sp,#0x84
000030  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
;;;624            f32 currAngSpeed = -SpeedController::GetCurrentMeasuredVehicleSpeed() / radius_mm;
000034  f7fffffe          BL       _ZN4Anki5Cozmo15SpeedController30GetCurrentMeasuredVehicleSpeedEv ; Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()
000038  4240              RSBS     r0,r0,#0
00003a  ee000a10          VMOV     s0,r0
;;;625            
;;;626            if (!vpg.StartProfile_fixedDuration(0, currAngSpeed, acc_start_frac * duration_sec,
00003e  ee292a88          VMUL.F32 s4,s19,s16
000042  ee291a08          VMUL.F32 s2,s18,s16
000046  eeb80ac0          VCVT.F32.S32 s0,s0                 ;624
00004a  eec0aa28          VDIV.F32 s21,s0,s17            ;624
00004e  ed9fbabc          VLDR     s22,|L23.832|
000052  eef03a48          VMOV.F32 s7,s16
000056  eeb04a4b          VMOV.F32 s8,s22
00005a  ed9faaba          VLDR     s20,|L23.836|
00005e  eef01a4c          VMOV.F32 s3,s24
000062  eef02a4a          VMOV.F32 s5,s20
000066  eeb03a62          VMOV.F32 s6,s5
00006a  eef00a6a          VMOV.F32 s1,s21
00006e  eddfbab6          VLDR     s23,|L23.840|
000072  a80a              ADD      r0,sp,#0x28
000074  eeb00a6b          VMOV.F32 s0,s23
000078  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator26StartProfile_fixedDurationEfffffffff ; Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
00007c  2800              CMP      r0,#0
00007e  d132              BNE      |L23.230|
;;;627                                                sweep_rad, acc_end_frac * duration_sec,
;;;628                                                100, 100,  // TODO: maxVel, maxAccel
;;;629                                                duration_sec, CONTROL_DT) ) {
;;;630              
;;;631              PRINT("PathFollower.DriveArc.VPGRetry: Trying simple path with instantaneous accel");
000080  48b2              LDR      r0,|L23.844|
000082  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;632              
;;;633              if (!vpg.StartProfile_fixedDuration(0, currAngSpeed, 0.01 * duration_sec,
000086  ee180a10          VMOV     r0,s16
00008a  f7fffffe          BL       __aeabi_f2d
00008e  ed9f9bb0          VLDR     d9,|L23.848|
000092  ec532b19          VMOV     r2,r3,d9
000096  f7fffffe          BL       __aeabi_dmul
00009a  f7fffffe          BL       __aeabi_d2f
00009e  ee0c0a90          VMOV     s25,r0
0000a2  ee180a10          VMOV     r0,s16
0000a6  f7fffffe          BL       __aeabi_f2d
0000aa  ec532b19          VMOV     r2,r3,d9
0000ae  f7fffffe          BL       __aeabi_dmul
0000b2  f7fffffe          BL       __aeabi_d2f
0000b6  eef02a4a          VMOV.F32 s5,s20
0000ba  ee010a10          VMOV     s2,r0
0000be  eeb04a4b          VMOV.F32 s8,s22
0000c2  eef03a48          VMOV.F32 s7,s16
0000c6  eeb03a62          VMOV.F32 s6,s5
0000ca  eeb02a6c          VMOV.F32 s4,s25
0000ce  eef01a4c          VMOV.F32 s3,s24
0000d2  eef00a6a          VMOV.F32 s1,s21
0000d6  eeb00a6b          VMOV.F32 s0,s23
0000da  a80a              ADD      r0,sp,#0x28
0000dc  f7fffffe          BL       _ZN4Anki24VelocityProfileGenerator26StartProfile_fixedDurationEfffffffff ; Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
0000e0  2800              CMP      r0,#0
0000e2  f0008128          BEQ.W    |L23.822|
                  |L23.230|
0000e6  ed9d9a1e          VLDR     s18,[sp,#0x78]
;;;634                                                  sweep_rad, 0.01 * duration_sec,
;;;635                                                  100, 100,  // TODO: maxVel, maxAccel
;;;636                                                  duration_sec, CONTROL_DT) ) {
;;;637                
;;;638                PRINT("PathFollower.DriveArc.VPGFail");
;;;639                return false;
;;;640              }
;;;641            }
;;;642            
;;;643            // Compute x_center,y_center
;;;644            f32 angToCenter = curr_angle.ToFloat() + (radius_mm > 0 ? -1 : 1) * PIDIV2_F;
0000ea  eef58ac0          VCMPE.F32 s17,#0.0
0000ee  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000f2  bfcc              ITE      GT
0000f4  f04f30ff          MOVGT    r0,#0xffffffff
0000f8  2001              MOVLE    r0,#1
0000fa  ee000a10          VMOV     s0,r0
0000fe  eeb80ac0          VCVT.F32.S32 s0,s0
000102  eddf0a95          VLDR     s1,|L23.856|
;;;645            f32 absRadius = fabsf(radius_mm);
000106  eeb08ae8          VABS.F32 s16,s17
00010a  ee009a20          VMLA.F32 s18,s0,s1             ;644
;;;646            f32 x_center = curr_x + absRadius * cosf(angToCenter);
00010e  eeb00a49          VMOV.F32 s0,s18
000112  f7fffffe          BL       __hardfp_cosf
000116  ed9dda21          VLDR     s26,[sp,#0x84]
00011a  ee08da00          VMLA.F32 s26,s16,s0
;;;647            f32 y_center = curr_y + absRadius * sinf(angToCenter);
00011e  eeb00a49          VMOV.F32 s0,s18
000122  f7fffffe          BL       __hardfp_sinf
000126  edddba22          VLDR     s23,[sp,#0x88]
00012a  eef0ea6b          VMOV.F32 s29,s23
00012e  ee48ba00          VMLA.F32 s23,s16,s0
;;;648            
;;;649            // Compute startRad relative to (x_center, y_center)
;;;650            f32 startRad = angToCenter + PI_F;
000132  ed9f0a8a          VLDR     s0,|L23.860|
000136  eddd1a11          VLDR     s3,[sp,#0x44]
00013a  ed9d2a12          VLDR     s4,[sp,#0x48]
00013e  ee399a00          VADD.F32 s18,s18,s0
000142  ed9d0a16          VLDR     s0,[sp,#0x58]
000146  ed9daa1c          VLDR     s20,[sp,#0x70]
00014a  eddd9a1d          VLDR     s19,[sp,#0x74]
;;;651            
;;;652            // Get intermediate poses: (1) after starting accel phase and (2) before ending accel phase
;;;653            f32 startAccelSweep = vpg.GetStartAccelDist();
;;;654            f32 endAccelSweep = vpg.GetEndAccelDist();
;;;655            //if (endAccelDist < -LOOK_AHEAD_DIST_MM) {
;;;656            //  endAccelDist += LOOK_AHEAD_DIST_MM;
;;;657            //}
;;;658            
;;;659            
;;;660            f32 int_ang1 = startRad + startAccelSweep;
;;;661            f32 int_ang2 = startRad + sweep_rad - endAccelSweep;
;;;662            
;;;663            // Get intermediate speed and accels.
;;;664            // Need to convert angular speeds/accel into linear speeds/accel
;;;665            f32 targetAngSpeed = fabsf(vpg.GetMaxReachableVel());
00014e  eeb01ac0          VABS.F32 s2,s0
000152  ed9d0a10          VLDR     s0,[sp,#0x40]
000156  ee39ea0c          VADD.F32 s28,s18,s24           ;661
00015a  ee39ba0a          VADD.F32 s22,s18,s20           ;660
00015e  eec10a80          VDIV.F32 s1,s3,s0              ;660
000162  ee7eaa69          VSUB.F32 s21,s28,s19           ;661
;;;666            f32 startAngAccel = fabsf(vpg.GetStartAccel());
;;;667            f32 endAngAccel = fabsf(vpg.GetEndAccel());
;;;668            
;;;669            
;;;670            u8 drivingFwd = SIGN(sweep_rad) != SIGN(radius_mm) ? 1 : -1;
000166  eeb5cac0          VCMPE.F32 s24,#0.0
00016a  eec21a00          VDIV.F32 s3,s4,s0
00016e  eef00ae0          VABS.F32 s1,s1                 ;666
000172  eeb00ae1          VABS.F32 s0,s3                 ;667
000176  eef1fa10          VMRS     APSR_nzcv,FPSCR
00017a  bfac              ITE      GE
00017c  2001              MOVGE    r0,#1
00017e  2000              MOVLT    r0,#0
000180  eef58ac0          VCMPE.F32 s17,#0.0
000184  eef1fa10          VMRS     APSR_nzcv,FPSCR
000188  bfac              ITE      GE
00018a  2101              MOVGE    r1,#1
00018c  2100              MOVLT    r1,#0
00018e  4288              CMP      r0,r1
000190  bf14              ITE      NE
000192  2001              MOVNE    r0,#1
000194  f04f30ff          MOVEQ    r0,#0xffffffff
000198  b2c0              UXTB     r0,r0
;;;671            f32 targetSpeed = drivingFwd * targetAngSpeed * absRadius;
00019a  ee010a90          VMOV     s3,r0
;;;672            f32 startAccel = startAngAccel * absRadius;
;;;673            f32 endAccel = endAngAccel * absRadius;
;;;674            
;;;675    
;;;676            PRINT("DriveArc: curr_x,y  (%f, %f), center x,y (%f, %f), radius %f\n", curr_x, curr_y, x_center, y_center, radius_mm);
00019e  9020              STR      r0,[sp,#0x80]
0001a0  ee60ca88          VMUL.F32 s25,s1,s16            ;672
0001a4  eef81a61          VCVT.F32.U32 s3,s3                 ;671
0001a8  ee20ca08          VMUL.F32 s24,s0,s16            ;673
0001ac  ee180a90          VMOV     r0,s17
0001b0  ee211a81          VMUL.F32 s2,s3,s2              ;671
0001b4  ee61da08          VMUL.F32 s27,s2,s16            ;671
0001b8  f7fffffe          BL       __aeabi_f2d
0001bc  4682              MOV      r10,r0
0001be  468b              MOV      r11,r1
0001c0  ee1b0a90          VMOV     r0,s23
0001c4  f7fffffe          BL       __aeabi_f2d
0001c8  4680              MOV      r8,r0
0001ca  4689              MOV      r9,r1
0001cc  ee1d0a10          VMOV     r0,s26
0001d0  f7fffffe          BL       __aeabi_f2d
0001d4  4606              MOV      r6,r0
0001d6  460f              MOV      r7,r1
0001d8  ee1e0a90          VMOV     r0,s29
0001dc  f7fffffe          BL       __aeabi_f2d
0001e0  4604              MOV      r4,r0
0001e2  460d              MOV      r5,r1
0001e4  9821              LDR      r0,[sp,#0x84]
0001e6  f7fffffe          BL       __aeabi_f2d
0001ea  e88d0ff0          STM      sp,{r4-r11}
0001ee  ec410b10          VMOV     d0,r0,r1
0001f2  a05b              ADR      r0,|L23.864|
0001f4  ec532b10          VMOV     r2,r3,d0
0001f8  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;677            PRINT("DriveArc: start + sweep1 = ang1 (%f + %f = %f), end + sweep2 = ang2 ang2 (%f - %f = %f)\n", startRad, startAccelSweep, int_ang1, startRad + sweep_rad, endAccelSweep, int_ang2);
0001fc  ee1a0a90          VMOV     r0,s21
000200  f7fffffe          BL       __aeabi_f2d
000204  4682              MOV      r10,r0
000206  468b              MOV      r11,r1
000208  ee190a90          VMOV     r0,s19
00020c  f7fffffe          BL       __aeabi_f2d
000210  4680              MOV      r8,r0
000212  4689              MOV      r9,r1
000214  ee1e0a10          VMOV     r0,s28
000218  f7fffffe          BL       __aeabi_f2d
00021c  4606              MOV      r6,r0
00021e  460f              MOV      r7,r1
000220  ee1b0a10          VMOV     r0,s22
000224  f7fffffe          BL       __aeabi_f2d
000228  e9cd0100          STRD     r0,r1,[sp,#0]
00022c  ee1a0a10          VMOV     r0,s20
000230  f7fffffe          BL       __aeabi_f2d
000234  4604              MOV      r4,r0
000236  460d              MOV      r5,r1
000238  ee190a10          VMOV     r0,s18
00023c  f7fffffe          BL       __aeabi_f2d
000240  ec410b10          VMOV     d0,r0,r1
000244  a904              ADD      r1,sp,#0x10
000246  ec532b10          VMOV     r2,r3,d0
00024a  e8810fc0          STM      r1,{r6-r11}
00024e  e9dd0100          LDRD     r0,r1,[sp,#0]
000252  e9cd0102          STRD     r0,r1,[sp,#8]
000256  4852              LDR      r0,|L23.928|
000258  e9cd4500          STRD     r4,r5,[sp,#0]
00025c  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;678            PRINT("DriveArc: targetSpeed %f, startAccel %f, endAccel %f\n", targetSpeed, startAccel, endAccel);
000260  ee1c0a10          VMOV     r0,s24
000264  f7fffffe          BL       __aeabi_f2d
000268  4606              MOV      r6,r0
00026a  460f              MOV      r7,r1
00026c  ee1c0a90          VMOV     r0,s25
000270  f7fffffe          BL       __aeabi_f2d
000274  4604              MOV      r4,r0
000276  460d              MOV      r5,r1
000278  ee1d0a90          VMOV     r0,s27
00027c  f7fffffe          BL       __aeabi_f2d
000280  e88d00f0          STM      sp,{r4-r7}
000284  ec410b10          VMOV     d0,r0,r1
000288  a046              ADR      r0,|L23.932|
00028a  ec532b10          VMOV     r2,r3,d0
00028e  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
000292  4852              LDR      r0,|L23.988|
000294  f7fffffe          BL       _ZN4Anki8Planning4Path5ClearEv ; Anki::Planning::Path::Clear()
000298  4851              LDR      r0,|L23.992|
00029a  f04f31ff          MOV      r1,#0xffffffff
00029e  2200              MOVS     r2,#0
0002a0  7001              STRB     r1,[r0,#0]
0002a2  7082              STRB     r2,[r0,#2]
0002a4  7041              STRB     r1,[r0,#1]
;;;679            
;;;680            // Create 3-segment path
;;;681            ClearPath();
;;;682            AppendPathSegment_Arc(0, x_center, y_center, absRadius, startRad, startAccelSweep, targetSpeed, startAccel, startAccel);
0002a6  eef03a6c          VMOV.F32 s7,s25
0002aa  eeb03a6c          VMOV.F32 s6,s25
0002ae  eef02a6d          VMOV.F32 s5,s27
0002b2  eeb02a4a          VMOV.F32 s4,s20
0002b6  eef01a49          VMOV.F32 s3,s18
0002ba  eeb01a48          VMOV.F32 s2,s16
0002be  eef00a6b          VMOV.F32 s1,s23
0002c2  eeb00a4d          VMOV.F32 s0,s26
0002c6  4610              MOV      r0,r2
0002c8  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower21AppendPathSegment_ArcEjffffffff ; Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
;;;683            AppendPathSegment_Arc(0, x_center, y_center, absRadius, int_ang1, int_ang2-int_ang1, targetSpeed, startAccel, startAccel);
0002cc  ee3a2acb          VSUB.F32 s4,s21,s22
0002d0  eef03a6c          VMOV.F32 s7,s25
0002d4  eeb03a6c          VMOV.F32 s6,s25
0002d8  eef02a6d          VMOV.F32 s5,s27
0002dc  eef01a4b          VMOV.F32 s3,s22
0002e0  eeb01a48          VMOV.F32 s2,s16
0002e4  eef00a6b          VMOV.F32 s1,s23
0002e8  eeb00a4d          VMOV.F32 s0,s26
0002ec  2000              MOVS     r0,#0
0002ee  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower21AppendPathSegment_ArcEjffffffff ; Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
;;;684            AppendPathSegment_Arc(0, x_center, y_center, absRadius, int_ang2, endAccelSweep, drivingFwd > 0 ? COAST_VELOCITY_MMPS : -COAST_VELOCITY_MMPS, endAccel, endAccel);
0002f2  9820              LDR      r0,[sp,#0x80]
0002f4  2800              CMP      r0,#0
0002f6  bf14              ITE      NE
0002f8  eef22a0e          VMOVNE.F32 s5,#15.00000000
0002fc  eefa2a0e          VMOVEQ.F32 s5,#-15.00000000
000300  eef03a4c          VMOV.F32 s7,s24
000304  eeb03a4c          VMOV.F32 s6,s24
000308  eeb02a69          VMOV.F32 s4,s19
00030c  eef01a6a          VMOV.F32 s3,s21
000310  eeb01a48          VMOV.F32 s2,s16
000314  eef00a6b          VMOV.F32 s1,s23
000318  eeb00a4d          VMOV.F32 s0,s26
00031c  2000              MOVS     r0,#0
00031e  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower21AppendPathSegment_ArcEjffffffff ; Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
;;;685            
;;;686            StartPathTraversal();
000322  2100              MOVS     r1,#0
000324  4608              MOV      r0,r1
000326  f7fffffe          BL       _ZN4Anki5Cozmo12PathFollower18StartPathTraversalEtb ; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
;;;687            
;;;688            return true;
00032a  2001              MOVS     r0,#1
                  |L23.812|
;;;689          }
00032c  b023              ADD      sp,sp,#0x8c
00032e  ecbd8b0e          VPOP     {d8-d14}
000332  e8bd8ff0          POP      {r4-r11,pc}
                  |L23.822|
000336  a02b              ADR      r0,|L23.996|
000338  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
00033c  2000              MOVS     r0,#0                 ;639
00033e  e7f5              B        |L23.812|
;;;690          
                          ENDP

                  |L23.832|
000340  3ba3d70b          DCFS     0x3ba3d70b ; 0.0050000003539025784
                  |L23.836|
000344  42c80000          DCFS     0x42c80000 ; 100
                  |L23.840|
000348  00000000          DCFS     0x00000000 ; 0
                  |L23.844|
                          DCD      ||.conststring||+0x98
                  |L23.848|
000350  47ae147b          DCFD     0x3f847ae147ae147b ; 0.01
000354  3f847ae1
                  |L23.856|
000358  3fc90fdb          DCFS     0x3fc90fdb ; 1.5707963705062866
                  |L23.860|
00035c  40490fdb          DCFS     0x40490fdb ; 3.1415927410125732
                  |L23.864|
000360  44726976          DCB      "DriveArc: curr_x,y  (%f, %f), center x,y (%f, %f), radi"
000364  65417263
000368  3a206375
00036c  72725f78
000370  2c792020
000374  2825662c
000378  20256629
00037c  2c206365
000380  6e746572
000384  20782c79
000388  20282566
00038c  2c202566
000390  292c2072
000394  616469  
000397  75732025          DCB      "us %f\n",0
00039b  660a00  
00039e  00                DCB      0
00039f  00                DCB      0
                  |L23.928|
                          DCD      ||.conststring||+0xe4
                  |L23.932|
0003a4  44726976          DCB      "DriveArc: targetSpeed %f, startAccel %f, endAccel %f\n",0
0003a8  65417263
0003ac  3a207461
0003b0  72676574
0003b4  53706565
0003b8  64202566
0003bc  2c207374
0003c0  61727441
0003c4  6363656c
0003c8  2025662c
0003cc  20656e64
0003d0  41636365
0003d4  6c202566
0003d8  0a00    
0003da  00                DCB      0
0003db  00                DCB      0
                  |L23.988|
                          DCD      ||.bss||
                  |L23.992|
                          DCD      ||.data||
                  |L23.996|
0003e4  50617468          DCB      "PathFollower.DriveArc.VPGFail",0
0003e8  466f6c6c
0003ec  6f776572
0003f0  2e447269
0003f4  76654172
0003f8  632e5650
0003fc  47466169
000400  6c00    
000402  00                DCB      0
000403  00                DCB      0

                          AREA ||i._ZN4Anki5Cozmo12PathFollower8TrimPathEhh||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower8TrimPathEhh PROC ; Anki::Cozmo::PathFollower::TrimPath(unsigned char, unsigned char)
;;;204          
;;;205          void TrimPath(const u8 numPopFrontSegments, const u8 numPopBackSegments)
000000  b510              PUSH     {r4,lr}
;;;206          {
000002  4604              MOV      r4,r0
;;;207            path_.PopBack(numPopBackSegments);
000004  4808              LDR      r0,|L24.40|
000006  f7fffffe          BL       _ZN4Anki8Planning4Path7PopBackEh ; Anki::Planning::Path::PopBack(unsigned char)
;;;208            if (path_.PopFront(numPopFrontSegments) && currPathSegment_ > 0) {
00000a  4621              MOV      r1,r4
00000c  4806              LDR      r0,|L24.40|
00000e  f7fffffe          BL       _ZN4Anki8Planning4Path8PopFrontEh ; Anki::Planning::Path::PopFront(unsigned char)
000012  2800              CMP      r0,#0
;;;209              currPathSegment_ -= numPopFrontSegments;
;;;210            }
;;;211          }
000014  bf08              IT       EQ
000016  bd10              POPEQ    {r4,pc}
000018  4a04              LDR      r2,|L24.44|
00001a  f9920000          LDRSB    r0,[r2,#0]            ;208  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
00001e  2800              CMP      r0,#0                 ;208
000020  bfc4              ITT      GT                    ;209
000022  1b00              SUBGT    r0,r0,r4              ;209
000024  7010              STRBGT   r0,[r2,#0]            ;209
000026  bd10              POP      {r4,pc}
;;;212          
                          ENDP

                  |L24.40|
                          DCD      ||.bss||
                  |L24.44|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower8TrimPathEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower8TrimPathEv PROC ; Anki::Cozmo::PathFollower::TrimPath()
;;;125          // Trims off segments that have already been traversed
;;;126          void TrimPath() {
000000  b570              PUSH     {r4-r6,lr}
;;;127            if (currPathSegment_ > 0) {
000002  4d0c              LDR      r5,|L25.52|
000004  f9950000          LDRSB    r0,[r5,#0]  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
000008  2800              CMP      r0,#0
;;;128              TrimPath(currPathSegment_, 0);
;;;129            }
;;;130          }
00000a  bfd8              IT       LE
00000c  bd70              POPLE    {r4-r6,pc}
00000e  b2c4              UXTB     r4,r0                 ;128
000010  2100              MOVS     r1,#0                 ;128
000012  4809              LDR      r0,|L25.56|
000014  f7fffffe          BL       _ZN4Anki8Planning4Path7PopBackEh ; Anki::Planning::Path::PopBack(unsigned char)
000018  4621              MOV      r1,r4                 ;128
00001a  4807              LDR      r0,|L25.56|
00001c  f7fffffe          BL       _ZN4Anki8Planning4Path8PopFrontEh ; Anki::Planning::Path::PopFront(unsigned char)
000020  2800              CMP      r0,#0                 ;128
000022  bf1c              ITT      NE                    ;128
000024  f9950000          LDRSBNE  r0,[r5,#0]            ;128  ; _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E
000028  2800              CMPNE    r0,#0                 ;128
00002a  bfc4              ITT      GT                    ;128
00002c  1b00              SUBGT    r0,r0,r4              ;128
00002e  7028              STRBGT   r0,[r5,#0]            ;128
000030  bd70              POP      {r4-r6,pc}
;;;131          
                          ENDP

000032  0000              DCW      0x0000
                  |L25.52|
                          DCD      ||.data||
                  |L25.56|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower9ClearPathEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower9ClearPathEv PROC ; Anki::Cozmo::PathFollower::ClearPath()
;;;84           // Deletes current path
;;;85           void ClearPath(void)
000000  b510              PUSH     {r4,lr}
;;;86           {
;;;87             path_.Clear();
000002  4805              LDR      r0,|L26.24|
000004  f7fffffe          BL       _ZN4Anki8Planning4Path5ClearEv ; Anki::Planning::Path::Clear()
;;;88             currPathSegment_ = -1;
000008  4804              LDR      r0,|L26.28|
00000a  f04f31ff          MOV      r1,#0xffffffff
;;;89             pointTurnStarted_ = false;
00000e  2200              MOVS     r2,#0
000010  7001              STRB     r1,[r0,#0]            ;88
000012  7082              STRB     r2,[r0,#2]
;;;90             realPathSegment_ = -1;
000014  7041              STRB     r1,[r0,#1]
;;;91     #if(ENABLE_PATH_VIZ)
;;;92             Viz::ErasePath(0);
;;;93     #endif
;;;94           } // Update()
000016  bd10              POP      {r4,pc}
;;;95           
                          ENDP

                  |L26.24|
                          DCD      ||.bss||
                  |L26.28|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo12PathFollower9PrintPathEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower9PrintPathEv PROC ; Anki::Cozmo::PathFollower::PrintPath()
;;;529          
;;;530          void PrintPath()
000000  4801              LDR      r0,|L27.8|
;;;531          {
;;;532            path_.PrintPath();
000002  f7ffbffe          B.W      _ZNK4Anki8Planning4Path9PrintPathEv ; Anki::Planning::Path::PrintPath() const
;;;533          }
;;;534          
                          ENDP

000006  0000              DCW      0x0000
                  |L27.8|
                          DCD      ||.bss||

                          AREA ||i.__sti___16_pathFollower_cpp_b5ce3046||, CODE, READONLY, ALIGN=2

                  __sti___16_pathFollower_cpp_b5ce3046 PROC
000000  4808              LDR      r0,|L28.36|
000002  b510              PUSH     {r4,lr}
000004  ed9f0a06          VLDR     s0,|L28.32|
000008  ed800a07          VSTR     s0,[r0,#0x1c]
00000c  4806              LDR      r0,|L28.40|
00000e  f7fffffe          BL       _ZN4Anki8Planning4PathC1Ev ; Anki::Planning::Path::Path()
000012  e8bd4010          POP      {r4,lr}
000016  4a05              LDR      r2,|L28.44|
000018  4905              LDR      r1,|L28.48|
00001a  f7ffbffe          B.W      __aeabi_atexit
                          ENDP

00001e  0000              DCW      0x0000
                  |L28.32|
000020  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L28.36|
                          DCD      ||.data||
                  |L28.40|
                          DCD      ||.bss||
                  |L28.44|
                          DCD      __dso_handle
                  |L28.48|
                          DCD      _ZN4Anki8Planning4PathD1Ev ; Anki::Planning::Path::~Path()

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower9ClearPathEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower9ClearPathEv||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower4InitEv||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower13SetPathForVizEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower13SetPathForVizEv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower8TrimPathEhh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower8TrimPathEhh||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower8TrimPathEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower8TrimPathEv||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower22AppendPathSegment_LineEjfffffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower22AppendPathSegment_LineEjfffffff||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower21AppendPathSegment_ArcEjffffffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower21AppendPathSegment_ArcEjffffffff||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower27AppendPathSegment_PointTurnEjffffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower27AppendPathSegment_PointTurnEjffffff||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower18GenerateDubinsPathEffffffffffffPf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower18GenerateDubinsPathEffffffffffffPf||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower17GetClosestSegmentEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower17GetClosestSegmentEfff||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower18StartPathTraversalEtb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower18StartPathTraversalEtb||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower16IsTraversingPathEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower16IsTraversingPathEv||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower19IsInManualSpeedModeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower19IsInManualSpeedModeEv||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower18SetManualPathSpeedEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower18SetManualPathSpeedEfff||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower18GetCurrPathSegmentEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower18GetCurrPathSegmentEv||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower22GetNumFreeSegmentSlotsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower22GetNumFreeSegmentSlotsEv||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower18ProcessPathSegmentERfS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower18ProcessPathSegmentERfS2_||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower27ProcessPathSegmentPointTurnERfS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower27ProcessPathSegmentPointTurnERfS2_||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower12PathCompleteEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower12PathCompleteEv||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower12GetPathErrorERfS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower12GetPathErrorERfS2_||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower6UpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower6UpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower9PrintPathEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower9PrintPathEv||
                          DCD      0x00000001

                          AREA ||area_number.51||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower16PrintPathSegmentEs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower16PrintPathSegmentEs||
                          DCD      0x00000001

                          AREA ||area_number.52||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower13GetLastPathIDEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower13GetLastPathIDEv||
                          DCD      0x00000001

                          AREA ||area_number.53||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower13DriveStraightEffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower13DriveStraightEffff||
                          DCD      0x00000001

                          AREA ||area_number.54||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower8DriveArcEfffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower8DriveArcEfffff||
                          DCD      0x00000001

                          AREA ||area_number.55||, LINKORDER=||i._ZN4Anki5Cozmo12PathFollower14DrivePointTurnEffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12PathFollower14DrivePointTurnEffff||
                          DCD      0x00000001

                          AREA ||area_number.56||, LINKORDER=||i.__sti___16_pathFollower_cpp_b5ce3046||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___16_pathFollower_cpp_b5ce3046||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce30465path_E ; Anki::Cozmo::PathFollower::<unnamed>::path_
                          %        368

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  50617468          DCB      "PathFollower.DriveStraight.VPGRetry: Trying simple path"
000004  466f6c6c
000008  6f776572
00000c  2e447269
000010  76655374
000014  72616967
000018  68742e56
00001c  50475265
000020  7472793a
000024  20547279
000028  696e6720
00002c  73696d70
000030  6c652070
000034  617468  
000037  20776974          DCB      " with instantaneous accel",0
00003b  6820696e
00003f  7374616e
000043  74616e65
000047  6f757320
00004b  61636365
00004f  6c00    
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
000054  44726976          DCB      "DriveStraight path: (%f, %f) to (%f, %f) to (%f, %f) to"
000058  65537472
00005c  61696768
000060  74207061
000064  74683a20
000068  2825662c
00006c  20256629
000070  20746f20
000074  2825662c
000078  20256629
00007c  20746f20
000080  2825662c
000084  20256629
000088  20746f  
00008b  20282566          DCB      " (%f, %f)\n",0
00008f  2c202566
000093  290a00  
000096  00                DCB      0
000097  00                DCB      0
000098  50617468          DCB      "PathFollower.DriveArc.VPGRetry: Trying simple path with"
00009c  466f6c6c
0000a0  6f776572
0000a4  2e447269
0000a8  76654172
0000ac  632e5650
0000b0  47526574
0000b4  72793a20
0000b8  54727969
0000bc  6e672073
0000c0  696d706c
0000c4  65207061
0000c8  74682077
0000cc  697468  
0000cf  20696e73          DCB      " instantaneous accel",0
0000d3  74616e74
0000d7  616e656f
0000db  75732061
0000df  6363656c
0000e3  00      
0000e4  44726976          DCB      "DriveArc: start + sweep1 = ang1 (%f + %f = %f), end + s"
0000e8  65417263
0000ec  3a207374
0000f0  61727420
0000f4  2b207377
0000f8  65657031
0000fc  203d2061
000100  6e673120
000104  28256620
000108  2b202566
00010c  203d2025
000110  66292c20
000114  656e6420
000118  2b2073  
00011b  77656570          DCB      "weep2 = ang2 ang2 (%f - %f = %f)\n",0
00011f  32203d20
000123  616e6732
000127  20616e67
00012b  32202825
00012f  66202d20
000133  2566203d
000137  20256629
00013b  0a00    
00013d  00                DCB      0
00013e  00                DCB      0
00013f  00                DCB      0
000140  5741524e          DCB      "WARN: DrivePointTurn vpg fail (sweep_rad: %f, acc_start"
000144  3a204472
000148  69766550
00014c  6f696e74
000150  5475726e
000154  20767067
000158  20666169
00015c  6c202873
000160  77656570
000164  5f726164
000168  3a202566
00016c  2c206163
000170  635f7374
000174  617274  
000177  5f667261          DCB      "_frac %f, acc_end_frac %f, duration_sec %f). Default to"
00017b  63202566
00017f  2c206163
000183  635f656e
000187  645f6672
00018b  61632025
00018f  662c2064
000193  75726174
000197  696f6e5f
00019b  73656320
00019f  2566292e
0001a3  20446566
0001a7  61756c74
0001ab  20746f  
0001ae  2073696d          DCB      " simple version \n",0
0001b2  706c6520
0001b6  76657273
0001ba  696f6e20
0001be  0a00    

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616currPathSegment_E ; Anki::Cozmo::PathFollower::<unnamed>::currPathSegment_
000000  ff                DCB      0xff
                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616realPathSegment_E ; Anki::Cozmo::PathFollower::<unnamed>::realPathSegment_
000001  ff                DCB      0xff
                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304617pointTurnStarted_E ; Anki::Cozmo::PathFollower::<unnamed>::pointTurnStarted_
000002  00                DCB      0x00
                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304619manualSpeedControl_E ; Anki::Cozmo::PathFollower::<unnamed>::manualSpeedControl_
000003  00                DCB      0x00
                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304611lastPathID_E ; Anki::Cozmo::PathFollower::<unnamed>::lastPathID_
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304614distToPath_mm_E ; Anki::Cozmo::PathFollower::<unnamed>::distToPath_mm_
000008  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304610radToPath_E ; Anki::Cozmo::PathFollower::<unnamed>::radToPath_
00000c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616manualPathSpeed_E ; Anki::Cozmo::PathFollower::<unnamed>::manualPathSpeed_
000010  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616manualPathAccel_E ; Anki::Cozmo::PathFollower::<unnamed>::manualPathAccel_
000014  42c80000          DCFS     0x42c80000 ; 100
                  _ZN4Anki5Cozmo12PathFollower40_GLOBAL__N__16_pathFollower_cpp_b5ce304616manualPathDecel_E ; Anki::Cozmo::PathFollower::<unnamed>::manualPathDecel_
000018  42c80000          DCFS     0x42c80000 ; 100
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___16_pathFollower_cpp_b5ce3046
