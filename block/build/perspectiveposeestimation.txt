; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\perspectiveposeestimation.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\perspectiveposeestimation.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\perspectiveposeestimation.crf ..\coretech\vision\robot\src\perspectivePoseEstimation.cpp]
                          THUMB

                          AREA ||.constdata__ZTVSt8numpunctIcE||, COMGROUP=_ZTVSt8numpunctIcE, DATA, READONLY, ALIGN=2

                  _ZTVSt8numpunctIcE ; vtable for std::numpunct<char>
                          DCD      0x00000000
                          DCD      _ZTISt8numpunctIcE ; typeinfo for std::numpunct<char>
                          DCD      _ZNSt8numpunctIcED1Ev ; std::numpunct<char>::~numpunct()
                          DCD      _ZNSt8numpunctIcED0Ev ; std::numpunct<char>::~numpunct__deallocating()
                          DCD      _ZNSt8numpunctIcE12_C_initfacetERKSt6locale ; std::numpunct<char>::_C_initfacet(const std::locale&)
                          DCD      _ZNKSt8numpunctIcE16do_decimal_pointEv ; std::numpunct<char>::do_decimal_point() const
                          DCD      _ZNKSt8numpunctIcE16do_thousands_sepEv ; std::numpunct<char>::do_thousands_sep() const
                          DCD      _ZNKSt8numpunctIcE11do_groupingEv ; std::numpunct<char>::do_grouping() const
                          DCD      _ZNKSt8numpunctIcE11do_truenameEv ; std::numpunct<char>::do_truename() const
                          DCD      _ZNKSt8numpunctIcE12do_falsenameEv ; std::numpunct<char>::do_falsename() const

                          AREA ||.data__ZZNSs7replaceEjjPKcjjjEs||, COMGROUP=_ZZNSs7replaceEjjPKcjjjEs, DATA, ALIGN=0

                  _ZZNSs7replaceEjjPKcjjjEs ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)::string
000000  00                DCB      0x00

                          AREA ||.data__ZZNSs9_C_getRepEjjEs||, COMGROUP=_ZZNSs9_C_getRepEjjEs, DATA, ALIGN=0

                  _ZZNSs9_C_getRepEjjEs ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_getRep(unsigned, unsigned)::string
000000  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a416c6c          DCB      0x3a,0x41,0x6c,0x6c
000010  6f636174          DCB      0x6f,0x63,0x61,0x74
000014  65427566          DCB      0x65,0x42,0x75,0x66
000018  66657246          DCB      0x66,0x65,0x72,0x46
00001c  726f6d4d          DCB      0x72,0x6f,0x6d,0x4d
000020  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000024  79537461          DCB      0x79,0x53,0x74,0x61
000028  636b00            DCB      0x63,0x6b,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000010  70757465          DCB      0x70,0x75,0x74,0x65
000014  52657175          DCB      0x52,0x65,0x71,0x75
000018  69726564          DCB      0x69,0x72,0x65,0x64
00001c  53747269          DCB      0x53,0x74,0x72,0x69
000020  646500            DCB      0x64,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  2e417272          DCB      0x2e,0x41,0x72,0x72
000008  61793264          DCB      0x61,0x79,0x32,0x64
00000c  2e696e69          DCB      0x2e,0x69,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  696e7075          DCB      0x69,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  204e554c          DCB      0x20,0x4e,0x55,0x4c
000018  4c00              DCB      0x4c,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a496e69          DCB      0x3a,0x49,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6542          DCB      0x69,0x7a,0x65,0x42
000018  75666665          DCB      0x75,0x66,0x66,0x65
00001c  7200              DCB      0x72,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
000000  46696c6c          DCB      0x46,0x69,0x6c,0x6c
000004  20706174          DCB      0x20,0x70,0x61,0x74
000008  7465726e          DCB      0x74,0x65,0x72,0x6e
00000c  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000010  74207375          DCB      0x74,0x20,0x73,0x75
000014  70706f72          DCB      0x70,0x70,0x6f,0x72
000018  74656420          DCB      0x74,0x65,0x64,0x20
00001c  666f7220          DCB      0x66,0x6f,0x72,0x20
000020  41727261          DCB      0x41,0x72,0x72,0x61
000024  7900              DCB      0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  206e6f74          DCB      0x20,0x6e,0x6f,0x74
000018  206c6172          DCB      0x20,0x6c,0x61,0x72
00001c  67652065          DCB      0x67,0x65,0x20,0x65
000020  6e6f7567          DCB      0x6e,0x6f,0x75,0x67
000024  682e2025          DCB      0x68,0x2e,0x20,0x25
000028  64206279          DCB      0x64,0x20,0x62,0x79
00002c  74657320          DCB      0x74,0x65,0x73,0x20
000030  69732072          DCB      0x69,0x73,0x20,0x72
000034  65717569          DCB      0x65,0x71,0x75,0x69
000038  7265642e          DCB      0x72,0x65,0x64,0x2e
00003c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a417272          DCB      0x3a,0x41,0x72,0x72
000010  617900            DCB      0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs ; Anki::Embedded::Array<float>::get_size(int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  6500              DCB      0x65,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 2)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
000000  5472616e          DCB      0x54,0x72,0x61,0x6e
000004  73706f73          DCB      0x73,0x70,0x6f,0x73
000008  6500              DCB      0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  6f626a65          DCB      0x6f,0x62,0x6a,0x65
00000c  63747300          DCB      0x63,0x74,0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f6d6174          DCB      0x2f,0x6d,0x61,0x74
000030  7269782e          DCB      0x72,0x69,0x78,0x2e
000034  6800              DCB      0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)
000000  6f757420          DCB      0x6f,0x75,0x74,0x20
000004  6973206e          DCB      0x69,0x73,0x20,0x6e
000008  6f742074          DCB      0x6f,0x74,0x20,0x74
00000c  68652063          DCB      0x68,0x65,0x20,0x63
000010  6f727265          DCB      0x6f,0x72,0x72,0x65
000014  63742073          DCB      0x63,0x74,0x20,0x73
000018  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 5)
000000  696e2061          DCB      0x69,0x6e,0x20,0x61
000004  6e64206f          DCB      0x6e,0x64,0x20,0x6f
000008  75742063          DCB      0x75,0x74,0x20,0x63
00000c  616e6e6f          DCB      0x61,0x6e,0x6e,0x6f
000010  74206265          DCB      0x74,0x20,0x62,0x65
000014  20746865          DCB      0x20,0x74,0x68,0x65
000018  2073616d          DCB      0x20,0x73,0x61,0x6d
00001c  65206172          DCB      0x65,0x20,0x61,0x72
000020  72617900          DCB      0x72,0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
000000  4d756c74          DCB      0x4d,0x75,0x6c,0x74
000004  69706c79          DCB      0x69,0x70,0x6c,0x79
000008  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206d61          DCB      0x74,0x20,0x6d,0x61
000008  74726963          DCB      0x74,0x72,0x69,0x63
00000c  65732061          DCB      0x65,0x73,0x20,0x61
000010  72652069          DCB      0x72,0x65,0x20,0x69
000014  6e636f6d          DCB      0x6e,0x63,0x6f,0x6d
000018  70617469          DCB      0x70,0x61,0x74,0x69
00001c  626c6520          DCB      0x62,0x6c,0x65,0x20
000020  73697a65          DCB      0x73,0x69,0x7a,0x65
000024  7300              DCB      0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f6d6174          DCB      0x2f,0x6d,0x61,0x74
000030  7269782e          DCB      0x72,0x69,0x78,0x2e
000034  6800              DCB      0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  7420616e          DCB      0x74,0x20,0x61,0x6e
000008  64204f75          DCB      0x64,0x20,0x4f,0x75
00000c  74707574          DCB      0x74,0x70,0x75,0x74
000010  206d6174          DCB      0x20,0x6d,0x61,0x74
000014  72696365          DCB      0x72,0x69,0x63,0x65
000018  73206172          DCB      0x73,0x20,0x61,0x72
00001c  6520696e          DCB      0x65,0x20,0x69,0x6e
000020  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000024  61746962          DCB      0x61,0x74,0x69,0x62
000028  6c652073          DCB      0x6c,0x65,0x20,0x73
00002c  697a6573          DCB      0x69,0x7a,0x65,0x73
000030  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
000000  63706d6c          DCB      0x63,0x70,0x6d,0x6c
000004  5f696e69          DCB      0x5f,0x69,0x6e,0x69
000008  7400              DCB      0x74,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
000000  5033503a          DCB      0x50,0x33,0x50,0x3a
000004  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000008  70757465          DCB      0x70,0x75,0x74,0x65
00000c  506f7373          DCB      0x50,0x6f,0x73,0x73
000010  69626c65          DCB      0x69,0x62,0x6c,0x65
000014  506f7365          DCB      0x50,0x6f,0x73,0x65
000018  73282900          DCB      0x73,0x28,0x29,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_1||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_1 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 3)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  54204d61          DCB      0x54,0x20,0x4d,0x61
00000c  74726978          DCB      0x74,0x72,0x69,0x78
000010  2c206f75          DCB      0x2c,0x20,0x6f,0x75
000014  74206f66          DCB      0x74,0x20,0x6f,0x66
000018  206d656d          DCB      0x20,0x6d,0x65,0x6d
00001c  6f72793f          DCB      0x6f,0x72,0x79,0x3f
000020  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  76697369          DCB      0x76,0x69,0x73,0x69
000010  6f6e5c72          DCB      0x6f,0x6e,0x5c,0x72
000014  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000018  5c737263          DCB      0x5c,0x73,0x72,0x63
00001c  5c706572          DCB      0x5c,0x70,0x65,0x72
000020  73706563          DCB      0x73,0x70,0x65,0x63
000024  74697665          DCB      0x74,0x69,0x76,0x65
000028  506f7365          DCB      0x50,0x6f,0x73,0x65
00002c  45737469          DCB      0x45,0x73,0x74,0x69
000030  6d617469          DCB      0x6d,0x61,0x74,0x69
000034  6f6e2e63          DCB      0x6f,0x6e,0x2e,0x63
000038  707000            DCB      0x70,0x70,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_3||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_3 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 5)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  4e204d61          DCB      0x4e,0x20,0x4d,0x61
00000c  74726978          DCB      0x74,0x72,0x69,0x78
000010  2c206f75          DCB      0x2c,0x20,0x6f,0x75
000014  74206f66          DCB      0x74,0x20,0x6f,0x66
000018  206d656d          DCB      0x20,0x6d,0x65,0x6d
00001c  6f72793f          DCB      0x6f,0x72,0x79,0x3f
000020  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_4||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_4 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 6)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  5474204d          DCB      0x54,0x74,0x20,0x4d
00000c  61747269          DCB      0x61,0x74,0x72,0x69
000010  782c206f          DCB      0x78,0x2c,0x20,0x6f
000014  7574206f          DCB      0x75,0x74,0x20,0x6f
000018  66206d65          DCB      0x66,0x20,0x6d,0x65
00001c  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
000020  3f00              DCB      0x3f,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_5||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_5 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 7)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  4e74204d          DCB      0x4e,0x74,0x20,0x4d
00000c  61747269          DCB      0x61,0x74,0x72,0x69
000010  782c206f          DCB      0x78,0x2c,0x20,0x6f
000014  7574206f          DCB      0x75,0x74,0x20,0x6f
000018  66206d65          DCB      0x66,0x20,0x6d,0x65
00001c  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
000020  3f00              DCB      0x3f,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_6||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_6, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_6 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 8)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  52204d61          DCB      0x52,0x20,0x4d,0x61
00000c  74726978          DCB      0x74,0x72,0x69,0x78
000010  2c206f75          DCB      0x2c,0x20,0x6f,0x75
000014  74206f66          DCB      0x74,0x20,0x6f,0x66
000018  206d656d          DCB      0x20,0x6d,0x65,0x6d
00001c  6f72793f          DCB      0x6f,0x72,0x79,0x3f
000020  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_7||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_7, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_7 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 9)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  74656d70          DCB      0x74,0x65,0x6d,0x70
00000c  204d6174          DCB      0x20,0x4d,0x61,0x74
000010  7269782c          DCB      0x72,0x69,0x78,0x2c
000014  206f7574          DCB      0x20,0x6f,0x75,0x74
000018  206f6620          DCB      0x20,0x6f,0x66,0x20
00001c  6d656d6f          DCB      0x6d,0x65,0x6d,0x6f
000020  72793f00          DCB      0x72,0x79,0x3f,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 10)
000000  63706d6c          DCB      0x63,0x70,0x6d,0x6c
000004  5f6d6169          DCB      0x5f,0x6d,0x61,0x69
000008  6e4c6f6f          DCB      0x6e,0x4c,0x6f,0x6f
00000c  7000              DCB      0x70,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<double>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a416c6c          DCB      0x3a,0x41,0x6c,0x6c
000010  6f636174          DCB      0x6f,0x63,0x61,0x74
000014  65427566          DCB      0x65,0x42,0x75,0x66
000018  66657246          DCB      0x66,0x65,0x72,0x46
00001c  726f6d4d          DCB      0x72,0x6f,0x6d,0x4d
000020  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000024  79537461          DCB      0x79,0x53,0x74,0x61
000028  636b00            DCB      0x63,0x6b,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<double>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<double>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs ; Anki::Embedded::Array<double>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000010  70757465          DCB      0x70,0x75,0x74,0x65
000014  52657175          DCB      0x52,0x65,0x71,0x75
000018  69726564          DCB      0x69,0x72,0x65,0x64
00001c  53747269          DCB      0x53,0x74,0x72,0x69
000020  646500            DCB      0x64,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<double>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE21ComputeRequiredStrideEiNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<double>::ComputeRequiredStride(int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  2e417272          DCB      0x2e,0x41,0x72,0x72
000008  61793264          DCB      0x61,0x79,0x32,0x64
00000c  2e696e69          DCB      0x2e,0x69,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  696e7075          DCB      0x69,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  204e554c          DCB      0x20,0x4e,0x55,0x4c
000018  4c00              DCB      0x4c,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a496e69          DCB      0x3a,0x49,0x6e,0x69
000010  7469616c          DCB      0x74,0x69,0x61,0x6c
000014  697a6542          DCB      0x69,0x7a,0x65,0x42
000018  75666665          DCB      0x75,0x66,0x66,0x65
00001c  7200              DCB      0x72,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
000000  46696c6c          DCB      0x46,0x69,0x6c,0x6c
000004  20706174          DCB      0x20,0x70,0x61,0x74
000008  7465726e          DCB      0x74,0x65,0x72,0x6e
00000c  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000010  74207375          DCB      0x74,0x20,0x73,0x75
000014  70706f72          DCB      0x70,0x70,0x6f,0x72
000018  74656420          DCB      0x74,0x65,0x64,0x20
00001c  666f7220          DCB      0x66,0x6f,0x72,0x20
000020  41727261          DCB      0x41,0x72,0x72,0x61
000024  7900              DCB      0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206461          DCB      0x74,0x20,0x64,0x61
000008  74612062          DCB      0x74,0x61,0x20,0x62
00000c  75666665          DCB      0x75,0x66,0x66,0x65
000010  72206973          DCB      0x72,0x20,0x69,0x73
000014  206e6f74          DCB      0x20,0x6e,0x6f,0x74
000018  206c6172          DCB      0x20,0x6c,0x61,0x72
00001c  67652065          DCB      0x67,0x65,0x20,0x65
000020  6e6f7567          DCB      0x6e,0x6f,0x75,0x67
000024  682e2025          DCB      0x68,0x2e,0x20,0x25
000028  64206279          DCB      0x64,0x20,0x62,0x79
00002c  74657320          DCB      0x74,0x65,0x73,0x20
000030  69732072          DCB      0x69,0x73,0x20,0x72
000034  65717569          DCB      0x65,0x71,0x75,0x69
000038  7265642e          DCB      0x72,0x65,0x64,0x2e
00003c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a417272          DCB      0x3a,0x41,0x72,0x72
000010  617900            DCB      0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  73697a65          DCB      0x73,0x69,0x7a,0x65
00000c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs ; Anki::Embedded::Array<double>::get_size(int) const::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a676574          DCB      0x3a,0x67,0x65,0x74
000010  5f73697a          DCB      0x5f,0x73,0x69,0x7a
000014  6500              DCB      0x65,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs_0||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs_0, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs_0 ; Anki::Embedded::Array<double>::get_size(int) const::string (instance 2)
000000  4e656761          DCB      0x4e,0x65,0x67,0x61
000004  74697665          DCB      0x74,0x69,0x76,0x65
000008  2064696d          DCB      0x20,0x64,0x69,0x6d
00000c  656e7369          DCB      0x65,0x6e,0x73,0x69
000010  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||.data__ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs_1||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs_1, DATA, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs_1 ; Anki::Embedded::Array<double>::get_size(int) const::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
000000  5472616e          DCB      0x54,0x72,0x61,0x6e
000004  73706f73          DCB      0x73,0x70,0x6f,0x73
000008  6500              DCB      0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  6f626a65          DCB      0x6f,0x62,0x6a,0x65
00000c  63747300          DCB      0x63,0x74,0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f6d6174          DCB      0x2f,0x6d,0x61,0x74
000030  7269782e          DCB      0x72,0x69,0x78,0x2e
000034  6800              DCB      0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)
000000  6f757420          DCB      0x6f,0x75,0x74,0x20
000004  6973206e          DCB      0x69,0x73,0x20,0x6e
000008  6f742074          DCB      0x6f,0x74,0x20,0x74
00000c  68652063          DCB      0x68,0x65,0x20,0x63
000010  6f727265          DCB      0x6f,0x72,0x72,0x65
000014  63742073          DCB      0x63,0x74,0x20,0x73
000018  697a6500          DCB      0x69,0x7a,0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3 ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 5)
000000  696e2061          DCB      0x69,0x6e,0x20,0x61
000004  6e64206f          DCB      0x6e,0x64,0x20,0x6f
000008  75742063          DCB      0x75,0x74,0x20,0x63
00000c  616e6e6f          DCB      0x61,0x6e,0x6e,0x6f
000010  74206265          DCB      0x74,0x20,0x62,0x65
000014  20746865          DCB      0x20,0x74,0x68,0x65
000018  2073616d          DCB      0x20,0x73,0x61,0x6d
00001c  65206172          DCB      0x65,0x20,0x61,0x72
000020  72617900          DCB      0x72,0x61,0x79,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
000000  4d756c74          DCB      0x4d,0x75,0x6c,0x74
000004  69706c79          DCB      0x69,0x70,0x6c,0x79
000008  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  74206d61          DCB      0x74,0x20,0x6d,0x61
000008  74726963          DCB      0x74,0x72,0x69,0x63
00000c  65732061          DCB      0x65,0x73,0x20,0x61
000010  72652069          DCB      0x72,0x65,0x20,0x69
000014  6e636f6d          DCB      0x6e,0x63,0x6f,0x6d
000018  70617469          DCB      0x70,0x61,0x74,0x69
00001c  626c6520          DCB      0x62,0x6c,0x65,0x20
000020  73697a65          DCB      0x73,0x69,0x7a,0x65
000024  7300              DCB      0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f6d6174          DCB      0x2f,0x6d,0x61,0x74
000030  7269782e          DCB      0x72,0x69,0x78,0x2e
000034  6800              DCB      0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)
000000  496e7075          DCB      0x49,0x6e,0x70,0x75
000004  7420616e          DCB      0x74,0x20,0x61,0x6e
000008  64204f75          DCB      0x64,0x20,0x4f,0x75
00000c  74707574          DCB      0x74,0x70,0x75,0x74
000010  206d6174          DCB      0x20,0x6d,0x61,0x74
000014  72696365          DCB      0x72,0x69,0x63,0x65
000018  73206172          DCB      0x73,0x20,0x61,0x72
00001c  6520696e          DCB      0x65,0x20,0x69,0x6e
000020  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000024  61746962          DCB      0x61,0x74,0x69,0x62
000028  6c652073          DCB      0x6c,0x65,0x20,0x73
00002c  697a6573          DCB      0x69,0x7a,0x65,0x73
000030  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
000000  63706d6c          DCB      0x63,0x70,0x6d,0x6c
000004  5f696e69          DCB      0x5f,0x69,0x6e,0x69
000008  7400              DCB      0x74,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
000000  5033503a          DCB      0x50,0x33,0x50,0x3a
000004  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000008  70757465          DCB      0x70,0x75,0x74,0x65
00000c  506f7373          DCB      0x50,0x6f,0x73,0x73
000010  69626c65          DCB      0x69,0x62,0x6c,0x65
000014  506f7365          DCB      0x50,0x6f,0x73,0x65
000018  73282900          DCB      0x73,0x28,0x29,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_1||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_1 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 3)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  54204d61          DCB      0x54,0x20,0x4d,0x61
00000c  74726978          DCB      0x74,0x72,0x69,0x78
000010  2c206f75          DCB      0x2c,0x20,0x6f,0x75
000014  74206f66          DCB      0x74,0x20,0x6f,0x66
000018  206d656d          DCB      0x20,0x6d,0x65,0x6d
00001c  6f72793f          DCB      0x6f,0x72,0x79,0x3f
000020  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  76697369          DCB      0x76,0x69,0x73,0x69
000010  6f6e5c72          DCB      0x6f,0x6e,0x5c,0x72
000014  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000018  5c737263          DCB      0x5c,0x73,0x72,0x63
00001c  5c706572          DCB      0x5c,0x70,0x65,0x72
000020  73706563          DCB      0x73,0x70,0x65,0x63
000024  74697665          DCB      0x74,0x69,0x76,0x65
000028  506f7365          DCB      0x50,0x6f,0x73,0x65
00002c  45737469          DCB      0x45,0x73,0x74,0x69
000030  6d617469          DCB      0x6d,0x61,0x74,0x69
000034  6f6e2e63          DCB      0x6f,0x6e,0x2e,0x63
000038  707000            DCB      0x70,0x70,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_3||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_3 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 5)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  4e204d61          DCB      0x4e,0x20,0x4d,0x61
00000c  74726978          DCB      0x74,0x72,0x69,0x78
000010  2c206f75          DCB      0x2c,0x20,0x6f,0x75
000014  74206f66          DCB      0x74,0x20,0x6f,0x66
000018  206d656d          DCB      0x20,0x6d,0x65,0x6d
00001c  6f72793f          DCB      0x6f,0x72,0x79,0x3f
000020  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_4||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_4 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 6)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  5474204d          DCB      0x54,0x74,0x20,0x4d
00000c  61747269          DCB      0x61,0x74,0x72,0x69
000010  782c206f          DCB      0x78,0x2c,0x20,0x6f
000014  7574206f          DCB      0x75,0x74,0x20,0x6f
000018  66206d65          DCB      0x66,0x20,0x6d,0x65
00001c  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
000020  3f00              DCB      0x3f,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_5||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_5 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 7)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  4e74204d          DCB      0x4e,0x74,0x20,0x4d
00000c  61747269          DCB      0x61,0x74,0x72,0x69
000010  782c206f          DCB      0x78,0x2c,0x20,0x6f
000014  7574206f          DCB      0x75,0x74,0x20,0x6f
000018  66206d65          DCB      0x66,0x20,0x6d,0x65
00001c  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
000020  3f00              DCB      0x3f,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_6||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_6, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_6 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 8)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  52204d61          DCB      0x52,0x20,0x4d,0x61
00000c  74726978          DCB      0x74,0x72,0x69,0x78
000010  2c206f75          DCB      0x2c,0x20,0x6f,0x75
000014  74206f66          DCB      0x74,0x20,0x6f,0x66
000018  206d656d          DCB      0x20,0x6d,0x65,0x6d
00001c  6f72793f          DCB      0x6f,0x72,0x79,0x3f
000020  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_7||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_7, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_7 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 9)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  74656d70          DCB      0x74,0x65,0x6d,0x70
00000c  204d6174          DCB      0x20,0x4d,0x61,0x74
000010  7269782c          DCB      0x72,0x69,0x78,0x2c
000014  206f7574          DCB      0x20,0x6f,0x75,0x74
000018  206f6620          DCB      0x20,0x6f,0x66,0x20
00001c  6d656d6f          DCB      0x6d,0x65,0x6d,0x6f
000020  72793f00          DCB      0x72,0x79,0x3f,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 10)
000000  63706d6c          DCB      0x63,0x70,0x6d,0x6c
000004  5f6d6169          DCB      0x5f,0x6d,0x61,0x69
000008  6e4c6f6f          DCB      0x6e,0x4c,0x6f,0x6f
00000c  7000              DCB      0x70,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a536574          DCB      0x3a,0x53,0x65,0x74
000010  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_0 ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  6f626a65          DCB      0x6f,0x62,0x6a,0x65
00000c  63747300          DCB      0x63,0x74,0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_1 ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_2 ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  79207369          DCB      0x79,0x20,0x73,0x69
000008  7a657320          DCB      0x7a,0x65,0x73,0x20
00000c  646f6e27          DCB      0x64,0x6f,0x6e,0x27
000010  74206d61          DCB      0x74,0x20,0x6d,0x61
000014  74636800          DCB      0x74,0x63,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
000000  5033503a          DCB      0x50,0x33,0x50,0x3a
000004  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000008  70757465          DCB      0x70,0x75,0x74,0x65
00000c  506f7365          DCB      0x50,0x6f,0x73,0x65
000010  282900            DCB      0x28,0x29,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_0||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_0 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
000000  526f7461          DCB      0x52,0x6f,0x74,0x61
000004  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000008  206d6174          DCB      0x20,0x6d,0x61,0x74
00000c  72697820          DCB      0x72,0x69,0x78,0x20
000010  73686f75          DCB      0x73,0x68,0x6f,0x75
000014  6c642062          DCB      0x6c,0x64,0x20,0x62
000018  65203378          DCB      0x65,0x20,0x33,0x78
00001c  332e00            DCB      0x33,0x2e,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_1||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_1 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  76697369          DCB      0x76,0x69,0x73,0x69
000010  6f6e5c72          DCB      0x6f,0x6e,0x5c,0x72
000014  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000018  5c737263          DCB      0x5c,0x73,0x72,0x63
00001c  5c706572          DCB      0x5c,0x70,0x65,0x72
000020  73706563          DCB      0x73,0x70,0x65,0x63
000024  74697665          DCB      0x74,0x69,0x76,0x65
000028  506f7365          DCB      0x50,0x6f,0x73,0x65
00002c  45737469          DCB      0x45,0x73,0x74,0x69
000030  6d617469          DCB      0x6d,0x61,0x74,0x69
000034  6f6e2e63          DCB      0x6f,0x6e,0x2e,0x63
000038  707000            DCB      0x70,0x70,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_2||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_2 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
000000  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000004  75746550          DCB      0x75,0x74,0x65,0x50
000008  6f73655f          DCB      0x6f,0x73,0x65,0x5f
00000c  696e6974          DCB      0x69,0x6e,0x69,0x74
000010  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_3||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_3 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 5)
000000  5033503a          DCB      0x50,0x33,0x50,0x3a
000004  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000008  70757465          DCB      0x70,0x75,0x74,0x65
00000c  506f7373          DCB      0x50,0x6f,0x73,0x73
000010  69626c65          DCB      0x69,0x62,0x6c,0x65
000014  506f7365          DCB      0x50,0x6f,0x73,0x65
000018  73282900          DCB      0x73,0x28,0x29,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_4||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_4 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 6)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  706f7373          DCB      0x70,0x6f,0x73,0x73
00000c  69626c65          DCB      0x69,0x62,0x6c,0x65
000010  525b2564          DCB      0x52,0x5b,0x25,0x64
000014  5d204d61          DCB      0x5d,0x20,0x4d,0x61
000018  74726978          DCB      0x74,0x72,0x69,0x78
00001c  2c206f75          DCB      0x2c,0x20,0x6f,0x75
000020  74206f66          DCB      0x74,0x20,0x6f,0x66
000024  206d656d          DCB      0x20,0x6d,0x65,0x6d
000028  6f72793f          DCB      0x6f,0x72,0x79,0x3f
00002c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_5||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_5 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 7)
000000  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000004  75746550          DCB      0x75,0x74,0x65,0x50
000008  6f73655f          DCB      0x6f,0x73,0x65,0x5f
00000c  6d61696e          DCB      0x6d,0x61,0x69,0x6e
000010  4c6f6f70          DCB      0x4c,0x6f,0x6f,0x70
000014  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::string
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  793c5479          DCB      0x79,0x3c,0x54,0x79
000008  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00000c  3a536574          DCB      0x3a,0x53,0x65,0x74
000010  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_0||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_0 ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::string (instance 2)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  6f626a65          DCB      0x6f,0x62,0x6a,0x65
00000c  63747300          DCB      0x63,0x74,0x73,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_1||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_1 ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f617272          DCB      0x2f,0x61,0x72,0x72
000030  61793264          DCB      0x61,0x79,0x32,0x64
000034  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_2||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_2 ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::string (instance 4)
000000  41727261          DCB      0x41,0x72,0x72,0x61
000004  79207369          DCB      0x79,0x20,0x73,0x69
000008  7a657320          DCB      0x7a,0x65,0x73,0x20
00000c  646f6e27          DCB      0x64,0x6f,0x6e,0x27
000010  74206d61          DCB      0x74,0x20,0x6d,0x61
000014  74636800          DCB      0x74,0x63,0x68,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
000000  5033503a          DCB      0x50,0x33,0x50,0x3a
000004  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000008  70757465          DCB      0x70,0x75,0x74,0x65
00000c  506f7365          DCB      0x50,0x6f,0x73,0x65
000010  282900            DCB      0x28,0x29,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_0||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_0 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
000000  526f7461          DCB      0x52,0x6f,0x74,0x61
000004  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000008  206d6174          DCB      0x20,0x6d,0x61,0x74
00000c  72697820          DCB      0x72,0x69,0x78,0x20
000010  73686f75          DCB      0x73,0x68,0x6f,0x75
000014  6c642062          DCB      0x6c,0x64,0x20,0x62
000018  65203378          DCB      0x65,0x20,0x33,0x78
00001c  332e00            DCB      0x33,0x2e,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_1||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_1 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  76697369          DCB      0x76,0x69,0x73,0x69
000010  6f6e5c72          DCB      0x6f,0x6e,0x5c,0x72
000014  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000018  5c737263          DCB      0x5c,0x73,0x72,0x63
00001c  5c706572          DCB      0x5c,0x70,0x65,0x72
000020  73706563          DCB      0x73,0x70,0x65,0x63
000024  74697665          DCB      0x74,0x69,0x76,0x65
000028  506f7365          DCB      0x50,0x6f,0x73,0x65
00002c  45737469          DCB      0x45,0x73,0x74,0x69
000030  6d617469          DCB      0x6d,0x61,0x74,0x69
000034  6f6e2e63          DCB      0x6f,0x6e,0x2e,0x63
000038  707000            DCB      0x70,0x70,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_2||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_2, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_2 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
000000  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000004  75746550          DCB      0x75,0x74,0x65,0x50
000008  6f73655f          DCB      0x6f,0x73,0x65,0x5f
00000c  696e6974          DCB      0x69,0x6e,0x69,0x74
000010  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_3||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_3, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_3 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 5)
000000  5033503a          DCB      0x50,0x33,0x50,0x3a
000004  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000008  70757465          DCB      0x70,0x75,0x74,0x65
00000c  506f7373          DCB      0x50,0x6f,0x73,0x73
000010  69626c65          DCB      0x69,0x62,0x6c,0x65
000014  506f7365          DCB      0x50,0x6f,0x73,0x65
000018  73282900          DCB      0x73,0x28,0x29,0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_4||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_4, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_4 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 6)
000000  496e7661          DCB      0x49,0x6e,0x76,0x61
000004  6c696420          DCB      0x6c,0x69,0x64,0x20
000008  706f7373          DCB      0x70,0x6f,0x73,0x73
00000c  69626c65          DCB      0x69,0x62,0x6c,0x65
000010  525b2564          DCB      0x52,0x5b,0x25,0x64
000014  5d204d61          DCB      0x5d,0x20,0x4d,0x61
000018  74726978          DCB      0x74,0x72,0x69,0x78
00001c  2c206f75          DCB      0x2c,0x20,0x6f,0x75
000020  74206f66          DCB      0x74,0x20,0x6f,0x66
000024  206d656d          DCB      0x20,0x6d,0x65,0x6d
000028  6f72793f          DCB      0x6f,0x72,0x79,0x3f
00002c  00                DCB      0x00

                          AREA ||.data__ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_5||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_5, DATA, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_5 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 7)
000000  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000004  75746550          DCB      0x75,0x74,0x65,0x50
000008  6f73655f          DCB      0x6f,0x73,0x65,0x5f
00000c  6d61696e          DCB      0x6d,0x61,0x69,0x6e
000010  4c6f6f70          DCB      0x4c,0x6f,0x6f,0x70
000014  00                DCB      0x00

                          AREA ||.constdata___ARM__ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA__anon0||, COMGROUP=__ARM__ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA__anon0, DATA, READONLY, ALIGN=2

                  __ARM__ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA__anon0
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000003

                          AREA ||.constdata___ARM__ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA__anon0||, COMGROUP=__ARM__ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA__anon0, DATA, READONLY, ALIGN=2

                  __ARM__ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA__anon0
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000003

                          AREA ||t._ZNSsaSERKSs||, COMGROUP=_ZNSsaSERKSs, CODE, READONLY, ALIGN=2

                  _ZNSsaSERKSs PROC ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator =(const std::basic_string<char, std::char_traits<char>, std::allocator<char>>&)
;;;233    basic_string<_CharT, _Traits, _Allocator>&
;;;234    basic_string<_CharT, _Traits, _Allocator>::operator= (const basic_string &__rhs)
000000  b5f0              PUSH     {r4-r7,lr}
;;;235    {
000002  4606              MOV      r6,r0
000004  6808              LDR      r0,[r1,#0]
000006  460d              MOV      r5,r1
000008  4604              MOV      r4,r0
00000a  f8501d0c          LDR      r1,[r0,#-0xc]!
00000e  b083              SUB      sp,sp,#0xc
000010  f1b13fff          CMP      r1,#0xffffffff
000014  d009              BEQ      |L215.42|
000016  4a2b              LDR      r2,|L215.196|
000018  4290              CMP      r0,r2
00001a  bf1c              ITT      NE
00001c  1c49              ADDNE    r1,r1,#1
00001e  6001              STRNE    r1,[r0,#0]
;;;236        if (__rhs._C_pref ()->_C_ref_count () > 0) {
;;;237            __rhs._C_pref ()->_C_inc_ref ();
;;;238            _C_unlink ();
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
;;;239            _C_data = __rhs._C_data;
000026  6828              LDR      r0,[r5,#0]
000028  e03e              B        |L215.168|
                  |L215.42|
;;;240        }
;;;241        else if (this != &__rhs)
00002a  42ae              CMP      r6,r5
00002c  d047              BEQ      |L215.190|
00002e  6830              LDR      r0,[r6,#0]
000030  f8545c04          LDR      r5,[r4,#-4]
000034  2700              MOVS     r7,#0
000036  f8502c04          LDR      r2,[r0,#-4]
00003a  f1a0010c          SUB      r1,r0,#0xc
00003e  2d00              CMP      r5,#0
000040  d02e              BEQ      |L215.160|
000042  680b              LDR      r3,[r1,#0]
000044  1c5b              ADDS     r3,r3,#1
000046  2b01              CMP      r3,#1
000048  d809              BHI      |L215.94|
00004a  6849              LDR      r1,[r1,#4]
00004c  428d              CMP      r5,r1
00004e  d806              BHI      |L215.94|
000050  2c00              CMP      r4,#0
000052  d02b              BEQ      |L215.172|
000054  42a0              CMP      r0,r4
000056  bf9c              ITT      LS
000058  1881              ADDLS    r1,r0,r2
00005a  428c              CMPLS    r4,r1
00005c  d226              BCS      |L215.172|
                  |L215.94|
00005e  4610              MOV      r0,r2
000060  eb020150          ADD      r1,r2,r0,LSR #1
000064  eb0101d0          ADD      r1,r1,r0,LSR #3
000068  3080              ADDS     r0,r0,#0x80
00006a  4288              CMP      r0,r1
00006c  bf88              IT       HI
00006e  4601              MOVHI    r1,r0
000070  9100              STR      r1,[sp,#0]
000072  9a00              LDR      r2,[sp,#0]
000074  4669              MOV      r1,sp
000076  a801              ADD      r0,sp,#4
000078  9501              STR      r5,[sp,#4]
00007a  42aa              CMP      r2,r5
00007c  bf28              IT       CS
00007e  4608              MOVCS    r0,r1
000080  462a              MOV      r2,r5
000082  6801              LDR      r1,[r0,#0]
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       _ZNSs9_C_getRepEjj ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_getRep(unsigned, unsigned)
00008a  300c              ADDS     r0,r0,#0xc
00008c  4607              MOV      r7,r0
00008e  462a              MOV      r2,r5
000090  4621              MOV      r1,r4
000092  f7fffffe          BL       __aeabi_memcpy
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
00009c  6037              STR      r7,[r6,#0]
00009e  e00e              B        |L215.190|
                  |L215.160|
0000a0  4630              MOV      r0,r6
0000a2  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
0000a6  4808              LDR      r0,|L215.200|
                  |L215.168|
0000a8  6030              STR      r0,[r6,#0]
0000aa  e008              B        |L215.190|
                  |L215.172|
0000ac  462a              MOV      r2,r5
0000ae  4621              MOV      r1,r4
0000b0  f7fffffe          BL       __aeabi_memmove
0000b4  6830              LDR      r0,[r6,#0]
0000b6  f8405c04          STR      r5,[r0,#-4]
0000ba  6830              LDR      r0,[r6,#0]
0000bc  542f              STRB     r7,[r5,r0]
                  |L215.190|
;;;242            replace (0, size (), __rhs.data (), __rhs.size ());
;;;243    
;;;244        return *this;
;;;245    }
0000be  b003              ADD      sp,sp,#0xc
0000c0  4630              MOV      r0,r6                 ;244
0000c2  bdf0              POP      {r4-r7,pc}
;;;246    
                          ENDP

                  |L215.196|
                          DCD      _ZNSs9__nullrefE ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::__nullref
                  |L215.200|
                          DCD      _ZNSs9__nullrefE+0xc ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::__nullref

                          AREA ||.ARM.exidx||, COMGROUP=_ZNSsaSERKSs, LINKORDER=||t._ZNSsaSERKSs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||t._ZNSsaSERKSs||
                          DCD      0x00000001

                          AREA ||t._ZNSt8numpunctIcE12_C_initfacetERKSt6locale||, COMGROUP=_ZNSt8numpunctIcE12_C_initfacetERKSt6locale, CODE, READONLY, ALIGN=1

                  _ZNSt8numpunctIcE12_C_initfacetERKSt6locale PROC ; std::numpunct<char>::_C_initfacet(const std::locale&)
;;;298    template <class _CharT>
;;;299    void numpunct<_CharT>::_C_initfacet (const locale &__loc)
000000  b530              PUSH     {r4,r5,lr}
;;;300    {
000002  4604              MOV      r4,r0
;;;301      this->_C_dp = do_decimal_point();
000004  6800              LDR      r0,[r0,#0]
000006  b083              SUB      sp,sp,#0xc            ;300
000008  68c1              LDR      r1,[r0,#0xc]
00000a  4620              MOV      r0,r4
00000c  4788              BLX      r1
00000e  7420              STRB     r0,[r4,#0x10]
;;;302      this->_C_ts = do_thousands_sep();
000010  6820              LDR      r0,[r4,#0]
000012  6901              LDR      r1,[r0,#0x10]
000014  4620              MOV      r0,r4
000016  4788              BLX      r1
000018  7460              STRB     r0,[r4,#0x11]
;;;303      this->_C_gr = do_grouping();
00001a  6820              LDR      r0,[r4,#0]
00001c  4621              MOV      r1,r4
00001e  6942              LDR      r2,[r0,#0x14]
000020  a801              ADD      r0,sp,#4
000022  4790              BLX      r2
000024  a901              ADD      r1,sp,#4
000026  f1040014          ADD      r0,r4,#0x14
00002a  f7fffffe          BL       _ZNSsaSERKSs ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator =(const std::basic_string<char, std::char_traits<char>, std::allocator<char>>&)
00002e  a801              ADD      r0,sp,#4
000030  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
;;;304      this->_C_fn = do_falsename();
000034  6820              LDR      r0,[r4,#0]
000036  2500              MOVS     r5,#0                 ;303
000038  4621              MOV      r1,r4
00003a  69c2              LDR      r2,[r0,#0x1c]
00003c  4668              MOV      r0,sp
00003e  4790              BLX      r2
000040  4669              MOV      r1,sp
000042  f104001c          ADD      r0,r4,#0x1c
000046  f7fffffe          BL       _ZNSsaSERKSs ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator =(const std::basic_string<char, std::char_traits<char>, std::allocator<char>>&)
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
;;;305      this->_C_tn = do_truename();
000050  6820              LDR      r0,[r4,#0]
000052  4621              MOV      r1,r4
000054  6982              LDR      r2,[r0,#0x18]
000056  4668              MOV      r0,sp
000058  4790              BLX      r2
00005a  4669              MOV      r1,sp
00005c  f1040018          ADD      r0,r4,#0x18
000060  f7fffffe          BL       _ZNSsaSERKSs ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator =(const std::basic_string<char, std::char_traits<char>, std::allocator<char>>&)
000064  4668              MOV      r0,sp
000066  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
00006a  69a0              LDR      r0,[r4,#0x18]
00006c  6220              STR      r0,[r4,#0x20]
00006e  2001              MOVS     r0,#1
000070  6260              STR      r0,[r4,#0x24]
000072  69e0              LDR      r0,[r4,#0x1c]
000074  e9c4050a          STRD     r0,r5,[r4,#0x28]
000078  2002              MOVS     r0,#2
00007a  6320              STR      r0,[r4,#0x30]
00007c  f1040020          ADD      r0,r4,#0x20
000080  6360              STR      r0,[r4,#0x34]
;;;306      this->_C_initfacetbase(__loc);
;;;307    }
000082  b003              ADD      sp,sp,#0xc
000084  bd30              POP      {r4,r5,pc}
;;;308    
                          ENDP


                          AREA ||area_number.223||, COMGROUP=_ZNSt8numpunctIcE12_C_initfacetERKSt6locale, LINKORDER=||t._ZNSt8numpunctIcE12_C_initfacetERKSt6locale||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.223||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt8numpunctIcE12_C_initfacetERKSt6locale||
                          DCD      0x00000001

                          AREA ||i._ZNSt8numpunctIcED1Ev||, COMGROUP=_ZNSt8numpunctIcED1Ev, CODE, READONLY, ALIGN=1

                  _ZNSt8numpunctIcED2Ev                  ; Alternate entry point ; std::numpunct<char>::~numpunct__sub_object()
                  _ZNSt8numpunctIcED1Ev PROC ; std::numpunct<char>::~numpunct()
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f1000410          ADD      r4,r0,#0x10
000008  301c              ADDS     r0,r0,#0x1c
00000a  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
00000e  f1040008          ADD      r0,r4,#8
000012  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
000016  1d20              ADDS     r0,r4,#4
000018  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
00001c  4628              MOV      r0,r5
00001e  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.231||, COMGROUP=_ZNSt8numpunctIcED1Ev, LINKORDER=||i._ZNSt8numpunctIcED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.231||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNSt8numpunctIcED1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Point3IfEC1Ev||, COMGROUP=_ZN4Anki8Embedded6Point3IfEC1Ev, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Point3IfEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point3<float>::Point3__sub_object()
                  _ZN4Anki8Embedded6Point3IfEC1Ev PROC ; Anki::Embedded::Point3<float>::Point3()
;;;145    
;;;146        template<typename Type> Point3<Type>::Point3()
;;;147          : x(static_cast<Type>(0)), y(static_cast<Type>(0)), z(static_cast<Type>(0))
;;;148        {
;;;149        }
;;;150    
000000  ed9f0a04          VLDR     s0,|L234.20|
000004  ed800a00          VSTR     s0,[r0,#0]
000008  ed800a01          VSTR     s0,[r0,#4]
00000c  ed800a02          VSTR     s0,[r0,#8]
000010  4770              BX       lr
                          ENDP

000012  0000              DCW      0x0000
                  |L234.20|
000014  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.235||, COMGROUP=_ZN4Anki8Embedded6Point3IfEC1Ev, LINKORDER=||t._ZN4Anki8Embedded6Point3IfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.235||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Point3IfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Point3IdEC1Ev||, COMGROUP=_ZN4Anki8Embedded6Point3IdEC1Ev, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded6Point3IdEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point3<double>::Point3__sub_object()
                  _ZN4Anki8Embedded6Point3IdEC1Ev PROC ; Anki::Embedded::Point3<double>::Point3()
;;;145    
;;;146        template<typename Type> Point3<Type>::Point3()
;;;147          : x(static_cast<Type>(0)), y(static_cast<Type>(0)), z(static_cast<Type>(0))
;;;148        {
;;;149        }
;;;150    
000000  ed9f0b05          VLDR     d0,|L241.24|
000004  ed800b00          VSTR     d0,[r0,#0]
000008  ed800b02          VSTR     d0,[r0,#8]
00000c  ed800b04          VSTR     d0,[r0,#0x10]
000010  4770              BX       lr
                          ENDP

000012  0000              DCW      0x0000
                          DCD      0x00000000
                  |L241.24|
000018  00000000          DCFD     0x0000000000000000 ; 0
00001c  00000000

                          AREA ||area_number.242||, COMGROUP=_ZN4Anki8Embedded6Point3IdEC1Ev, LINKORDER=||t._ZN4Anki8Embedded6Point3IdEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.242||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Point3IdEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1Ev||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5ArrayIfEC2Ev                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object()
                  _ZN4Anki8Embedded5ArrayIfEC1Ev PROC ; Anki::Embedded::Array<float>::Array()
;;;77     
;;;78         template<typename Type> Array<Type>::Array()
;;;79         {
;;;80           InvalidateArray();
;;;81         }
;;;82     
000000  b510              PUSH     {r4,lr}
000002  300c              ADDS     r0,r0,#0xc
000004  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  f8401d0c          STR      r1,[r0,#-0xc]!
000010  6041              STR      r1,[r0,#4]
000012  6081              STR      r1,[r0,#8]
000014  2100              MOVS     r1,#0
000016  6101              STR      r1,[r0,#0x10]
000018  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.249||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.249||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L255.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484e              LDR      r0,|L255.376|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  4b4e              LDR      r3,|L255.380|
000044  4a4e              LDR      r2,|L255.384|
000046  494f              LDR      r1,|L255.388|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L255.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L255.138|
000074  f240310b          MOV      r1,#0x30b
000078  4843              LDR      r0,|L255.392|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  4b43              LDR      r3,|L255.396|
000080  4a43              LDR      r2,|L255.400|
000082  4944              LDR      r1,|L255.404|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L255.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df90e4          LDR      r9,|L255.408|
0000b4  0005              MOVS     r5,r0
0000b6  d00d              BEQ      |L255.212|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21d              BCS      |L255.250|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  4b35              LDR      r3,|L255.412|
0000c8  4a35              LDR      r2,|L255.416|
0000ca  4936              LDR      r1,|L255.420|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  e04d              B        |L255.368|
                  |L255.212|
0000d4  f240301e          MOV      r0,#0x31e
0000d8  e9cd9000          STRD     r9,r0,[sp,#0]
0000dc  4b2f              LDR      r3,|L255.412|
0000de  4a32              LDR      r2,|L255.424|
0000e0  4932              LDR      r1,|L255.428|
0000e2  2005              MOVS     r0,#5
0000e4  f7fffffe          BL       _Anki_Log
0000e8  f8c4b000          STR      r11,[r4,#0]
0000ec  f8c4b004          STR      r11,[r4,#4]
0000f0  f8c4b008          STR      r11,[r4,#8]
0000f4  f8c4a010          STR      r10,[r4,#0x10]
0000f8  e03a              B        |L255.368|
                  |L255.250|
0000fa  a803              ADD      r0,sp,#0xc
0000fc  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000100  b150              CBZ      r0,|L255.280|
000102  f2403026          MOV      r0,#0x326
000106  e9cd9000          STRD     r9,r0,[sp,#0]
00010a  4b24              LDR      r3,|L255.412|
00010c  4a28              LDR      r2,|L255.432|
00010e  4925              LDR      r1,|L255.420|
000110  2005              MOVS     r0,#5
000112  f7fffffe          BL       _Anki_Log
000116  e02b              B        |L255.368|
                  |L255.280|
000118  9903              LDR      r1,[sp,#0xc]
00011a  e9c41503          STRD     r1,r5,[r4,#0xc]
00011e  f105000f          ADD      r0,r5,#0xf
000122  f020000f          BIC      r0,r0,#0xf
000126  e9c47600          STRD     r7,r6,[r4,#0]
00012a  1b40              SUBS     r0,r0,r5
00012c  2e01              CMP      r6,#1
00012e  bfd8              IT       LE
000130  2601              MOVLE    r6,#1
000132  00b1              LSLS     r1,r6,#2
000134  310f              ADDS     r1,r1,#0xf
000136  f021010f          BIC      r1,r1,#0xf
00013a  fb010107          MLA      r1,r1,r7,r0
00013e  4541              CMP      r1,r8
000140  bfdc              ITT      LE
000142  1829              ADDLE    r1,r5,r0
000144  6121              STRLE    r1,[r4,#0x10]
000146  dd13              BLE      |L255.368|
000148  f2403035          MOV      r0,#0x335
00014c  f8cd9000          STR      r9,[sp,#0]
000150  e9cd0101          STRD     r0,r1,[sp,#4]
000154  4b11              LDR      r3,|L255.412|
000156  4a17              LDR      r2,|L255.436|
000158  4914              LDR      r1,|L255.428|
00015a  2005              MOVS     r0,#5
00015c  f7fffffe          BL       _Anki_Log
000160  f8c4b000          STR      r11,[r4,#0]
000164  f8c4b004          STR      r11,[r4,#4]
000168  f8c4b008          STR      r11,[r4,#8]
00016c  f8c4a010          STR      r10,[r4,#0x10]
                  |L255.368|
000170  b005              ADD      sp,sp,#0x14
000172  4620              MOV      r0,r4
000174  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L255.376|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L255.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L255.384|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L255.388|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
                  |L255.392|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L255.396|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
                  |L255.400|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
                  |L255.404|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
                  |L255.408|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L255.412|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L255.416|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
                  |L255.420|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
                  |L255.424|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L255.428|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
                  |L255.432|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
                  |L255.436|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)

                          AREA ||area_number.256||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.256||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIdEC1Ev||, COMGROUP=_ZN4Anki8Embedded5ArrayIdEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded5ArrayIdEC2Ev                  ; Alternate entry point ; Anki::Embedded::Array<double>::Array__sub_object()
                  _ZN4Anki8Embedded5ArrayIdEC1Ev PROC ; Anki::Embedded::Array<double>::Array()
;;;77     
;;;78         template<typename Type> Array<Type>::Array()
;;;79         {
;;;80           InvalidateArray();
;;;81         }
;;;82     
000000  b510              PUSH     {r4,lr}
000002  300c              ADDS     r0,r0,#0xc
000004  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  f8401d0c          STR      r1,[r0,#-0xc]!
000010  6041              STR      r1,[r0,#4]
000012  6081              STR      r1,[r0,#8]
000014  2100              MOVS     r1,#0
000016  6101              STR      r1,[r0,#0x10]
000018  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.263||, COMGROUP=_ZN4Anki8Embedded5ArrayIdEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5ArrayIdEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.263||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIdEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIdEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<double>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L269.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484e              LDR      r0,|L269.376|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  4b4e              LDR      r3,|L269.380|
000044  4a4e              LDR      r2,|L269.384|
000046  494f              LDR      r1,|L269.388|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L269.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  00c0              LSLS     r0,r0,#3
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L269.138|
000074  f240310b          MOV      r1,#0x30b
000078  4843              LDR      r0,|L269.392|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  4b43              LDR      r3,|L269.396|
000080  4a43              LDR      r2,|L269.400|
000082  4944              LDR      r1,|L269.404|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L269.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df90e4          LDR      r9,|L269.408|
0000b4  0005              MOVS     r5,r0
0000b6  d00d              BEQ      |L269.212|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21d              BCS      |L269.250|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  4b35              LDR      r3,|L269.412|
0000c8  4a35              LDR      r2,|L269.416|
0000ca  4936              LDR      r1,|L269.420|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  e04d              B        |L269.368|
                  |L269.212|
0000d4  f240301e          MOV      r0,#0x31e
0000d8  e9cd9000          STRD     r9,r0,[sp,#0]
0000dc  4b2f              LDR      r3,|L269.412|
0000de  4a32              LDR      r2,|L269.424|
0000e0  4932              LDR      r1,|L269.428|
0000e2  2005              MOVS     r0,#5
0000e4  f7fffffe          BL       _Anki_Log
0000e8  f8c4b000          STR      r11,[r4,#0]
0000ec  f8c4b004          STR      r11,[r4,#4]
0000f0  f8c4b008          STR      r11,[r4,#8]
0000f4  f8c4a010          STR      r10,[r4,#0x10]
0000f8  e03a              B        |L269.368|
                  |L269.250|
0000fa  a803              ADD      r0,sp,#0xc
0000fc  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000100  b150              CBZ      r0,|L269.280|
000102  f2403026          MOV      r0,#0x326
000106  e9cd9000          STRD     r9,r0,[sp,#0]
00010a  4b24              LDR      r3,|L269.412|
00010c  4a28              LDR      r2,|L269.432|
00010e  4925              LDR      r1,|L269.420|
000110  2005              MOVS     r0,#5
000112  f7fffffe          BL       _Anki_Log
000116  e02b              B        |L269.368|
                  |L269.280|
000118  9903              LDR      r1,[sp,#0xc]
00011a  e9c41503          STRD     r1,r5,[r4,#0xc]
00011e  f105000f          ADD      r0,r5,#0xf
000122  f020000f          BIC      r0,r0,#0xf
000126  e9c47600          STRD     r7,r6,[r4,#0]
00012a  1b40              SUBS     r0,r0,r5
00012c  2e01              CMP      r6,#1
00012e  bfd8              IT       LE
000130  2601              MOVLE    r6,#1
000132  00f1              LSLS     r1,r6,#3
000134  310f              ADDS     r1,r1,#0xf
000136  f021010f          BIC      r1,r1,#0xf
00013a  fb010107          MLA      r1,r1,r7,r0
00013e  4541              CMP      r1,r8
000140  bfdc              ITT      LE
000142  1829              ADDLE    r1,r5,r0
000144  6121              STRLE    r1,[r4,#0x10]
000146  dd13              BLE      |L269.368|
000148  f2403035          MOV      r0,#0x335
00014c  f8cd9000          STR      r9,[sp,#0]
000150  e9cd0101          STRD     r0,r1,[sp,#4]
000154  4b11              LDR      r3,|L269.412|
000156  4a17              LDR      r2,|L269.436|
000158  4914              LDR      r1,|L269.428|
00015a  2005              MOVS     r0,#5
00015c  f7fffffe          BL       _Anki_Log
000160  f8c4b000          STR      r11,[r4,#0]
000164  f8c4b004          STR      r11,[r4,#4]
000168  f8c4b008          STR      r11,[r4,#8]
00016c  f8c4a010          STR      r10,[r4,#0x10]
                  |L269.368|
000170  b005              ADD      sp,sp,#0x14
000172  4620              MOV      r0,r4
000174  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L269.376|
                          DCD      _ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L269.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L269.384|
                          DCD      _ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L269.388|
                          DCD      _ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEEs ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::string
                  |L269.392|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L269.396|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_1 ; Anki::Embedded::Array<double>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 3)
                  |L269.400|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs_0 ; Anki::Embedded::Array<double>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string (instance 2)
                  |L269.404|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbEs ; Anki::Embedded::Array<double>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::string
                  |L269.408|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L269.412|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_1 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 3)
                  |L269.416|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_3 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 5)
                  |L269.420|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_2 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 4)
                  |L269.424|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_0 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 2)
                  |L269.428|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string
                  |L269.432|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_4 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 6)
                  |L269.436|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEEs_5 ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::string (instance 7)

                          AREA ||area_number.270||, COMGROUP=_ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.270||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZSt3powIfESt7complexIT_ERKS2_RKS1_||, COMGROUP=_ZSt3powIfESt7complexIT_ERKS2_RKS1_, CODE, READONLY, ALIGN=2

                  _ZSt3powIfESt7complexIT_ERKS2_RKS1_ PROC ; std::pow<float>(const std::complex<T1>&, const T1&)
;;;1152     template <class _TypeT>
;;;1153     inline complex<_TypeT> pow (const complex<_TypeT>& __a, const _TypeT& __s)
000000  b530              PUSH     {r4,r5,lr}
;;;1154     {
000002  460d              MOV      r5,r1
000004  ed2d8b06          VPUSH    {d8-d10}
000008  b08f              SUB      sp,sp,#0x3c
;;;1155       if (__a == complex<_TypeT>(0,0))
00000a  ed9f8a75          VLDR     s16,|L276.480|
;;;1156       {
;;;1157         if (__s == _TypeT(0))
;;;1158           return complex<_TypeT>(1,0);
00000e  eef71a00          VMOV.F32 s3,#1.00000000
000012  eef00a48          VMOV.F32 s1,s16                ;1155
000016  edcd0a0a          VSTR     s1,[sp,#0x28]         ;1155
00001a  edcd0a0b          VSTR     s1,[sp,#0x2c]         ;1155
00001e  ed900a00          VLDR     s0,[r0,#0]            ;1155
000022  eeb40a60          VCMP.F32 s0,s1                 ;1155
000026  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1155
00002a  bf02              ITTT     EQ                    ;1155
00002c  ed901a01          VLDREQ   s2,[r0,#4]            ;1155
000030  eeb41a60          VCMPEQ.F32 s2,s1                 ;1155
000034  eef1fa10          VMRSEQ   APSR_nzcv,FPSCR       ;1155
000038  d111              BNE      |L276.94|
00003a  ed910a00          VLDR     s0,[r1,#0]            ;1157
00003e  eeb50ac0          VCMPE.F32 s0,#0.0               ;1157
000042  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1157
000046  bf0c              ITE      EQ
000048  eef00a48          VMOVEQ.F32 s1,s16
;;;1159         else
;;;1160           return complex<_TypeT>(0,0);
00004c  eeb00a48          VMOVNE.F32 s0,s16
000050  d142              BNE      |L276.216|
                  |L276.82|
;;;1161       }
;;;1162       if (__a.imag() == 0)
;;;1163       {
;;;1164         if (__a.real() < 0)
;;;1165           return pow(__a, complex<_TypeT>(__s,0));
;;;1166         else
;;;1167   #ifndef _RWSTD_NO_OVERLOAD_C_POW
;;;1168           return complex<_TypeT>(_RWSTD_C::pow(__a.real(),__s), 0);
;;;1169   #else
;;;1170         return complex<_TypeT>(_RWSTD_C::pow(double(__a.real()),double(__s)), 0);
;;;1171   #endif /* _RWSTD_NO_OVERLOAD_C_POW */
;;;1172       }
;;;1173       return exp(__s*log(__a));
;;;1174     }   
000052  b00f              ADD      sp,sp,#0x3c
000054  eeb00a61          VMOV.F32 s0,s3                 ;1157
000058  ecbd8b06          VPOP     {d8-d10}
00005c  bd30              POP      {r4,r5,pc}
                  |L276.94|
00005e  edd00a01          VLDR     s1,[r0,#4]
000062  eef50ac0          VCMPE.F32 s1,#0.0               ;1162
000066  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1162
00006a  d17a              BNE      |L276.354|
00006c  eeb50ac0          VCMPE.F32 s0,#0.0               ;1164
000070  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1164
000074  d277              BCS      |L276.358|
000076  edd10a00          VLDR     s1,[r1,#0]            ;1164
00007a  eeb00a48          VMOV.F32 s0,s16                ;1165
00007e  edcd0a00          VSTR     s1,[sp,#0]            ;1165
000082  ed8d0a01          VSTR     s0,[sp,#4]            ;1165
000086  ed8d0a02          VSTR     s0,[sp,#8]            ;1165
00008a  ed8d0a03          VSTR     s0,[sp,#0xc]          ;1165
00008e  ed901a00          VLDR     s2,[r0,#0]            ;1165
000092  4604              MOV      r4,r0                 ;1165
000094  eeb41a40          VCMP.F32 s2,s0                 ;1165
000098  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1165
00009c  d122              BNE      |L276.228|
00009e  ed942a01          VLDR     s4,[r4,#4]            ;1165
0000a2  eef00a40          VMOV.F32 s1,s0                 ;1165
0000a6  eeb42a60          VCMP.F32 s4,s1                 ;1165
0000aa  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1165
0000ae  d119              BNE      |L276.228|
0000b0  ed8d0a08          VSTR     s0,[sp,#0x20]         ;1165
0000b4  ed8d0a09          VSTR     s0,[sp,#0x24]         ;1165
0000b8  eddd0a00          VLDR     s1,[sp,#0]            ;1165
0000bc  eef40a40          VCMP.F32 s1,s0                 ;1165
0000c0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1165
0000c4  bf12              ITEE     NE                    ;1165
0000c6  ed8d0a0c          VSTRNE   s0,[sp,#0x30]         ;1165
0000ca  edcd1a0c          VSTREQ   s3,[sp,#0x30]         ;1165
0000ce  eef00a40          VMOVEQ.F32 s1,s0                 ;1165
0000d2  ed8d0a0d          VSTR     s0,[sp,#0x34]         ;1165
0000d6  d0bc              BEQ      |L276.82|
                  |L276.216|
0000d8  b00f              ADD      sp,sp,#0x3c
0000da  eef00a40          VMOV.F32 s1,s0
0000de  ecbd8b06          VPOP     {d8-d10}
0000e2  bd30              POP      {r4,r5,pc}
                  |L276.228|
0000e4  ee210a01          VMUL.F32 s0,s2,s2
0000e8  edd40a01          VLDR     s1,[r4,#4]
0000ec  ee000aa0          VMLA.F32 s0,s1,s1
0000f0  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
0000f4  eef08a40          VMOV.F32 s17,s0
0000f8  ed9d8a00          VLDR     s16,[sp,#0]
0000fc  ed9d9a01          VLDR     s18,[sp,#4]
000100  4620              MOV      r0,r4
000102  f7fffffe          BL       _ZSt3argIfET_RKSt7complexIS0_E ; std::arg<float>(const std::complex<T1>&)
000106  eef09a40          VMOV.F32 s19,s0
00010a  eef00a48          VMOV.F32 s1,s16
00010e  eeb00a68          VMOV.F32 s0,s17
000112  f7fffffe          BL       __hardfp_powf
000116  eeb0aa40          VMOV.F32 s20,s0
00011a  ee290a69          VNMUL.F32 s0,s18,s19
00011e  f7fffffe          BL       __hardfp_expf
000122  ee2aaa00          VMUL.F32 s20,s20,s0
000126  eeb00a68          VMOV.F32 s0,s17
00012a  f7fffffe          BL       __hardfp_logf
00012e  ee608a09          VMUL.F32 s17,s0,s18
000132  ee488a29          VMLA.F32 s17,s16,s19
000136  eeb00a68          VMOV.F32 s0,s17
00013a  f7fffffe          BL       __hardfp_cosf
00013e  ee208a0a          VMUL.F32 s16,s0,s20
000142  eeb00a68          VMOV.F32 s0,s17
000146  f7fffffe          BL       __hardfp_sinf
00014a  ee600a0a          VMUL.F32 s1,s0,s20
00014e  ed8d8a02          VSTR     s16,[sp,#8]
000152  eeb00a48          VMOV.F32 s0,s16
000156  edcd0a03          VSTR     s1,[sp,#0xc]
                  |L276.346|
00015a  b00f              ADD      sp,sp,#0x3c
00015c  ecbd8b06          VPOP     {d8-d10}
000160  bd30              POP      {r4,r5,pc}
                  |L276.354|
000162  e007              B        |L276.372|
000164  e7ff              B        |L276.358|
                  |L276.358|
000166  edd10a00          VLDR     s1,[r1,#0]            ;1168
00016a  f7fffffe          BL       __hardfp_powf
00016e  eef00a48          VMOV.F32 s1,s16                ;1168
000172  e7f2              B        |L276.346|
                  |L276.372|
000174  ee200a00          VMUL.F32 s0,s0,s0              ;1168
000178  4604              MOV      r4,r0                 ;1173
00017a  ee000aa0          VMLA.F32 s0,s1,s1              ;1173
00017e  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
000182  f7fffffe          BL       __hardfp_logf
000186  eeb08a40          VMOV.F32 s16,s0                ;1173
00018a  4620              MOV      r0,r4                 ;1173
00018c  f7fffffe          BL       _ZSt3argIfET_RKSt7complexIS0_E ; std::arg<float>(const std::complex<T1>&)
000190  eef00a48          VMOV.F32 s1,s16                ;1173
000194  edcd0a00          VSTR     s1,[sp,#0]            ;1173
000198  ed8d0a01          VSTR     s0,[sp,#4]            ;1173
00019c  edcd0a06          VSTR     s1,[sp,#0x18]         ;1173
0001a0  ed8d0a07          VSTR     s0,[sp,#0x1c]         ;1173
0001a4  a906              ADD      r1,sp,#0x18           ;1173
0001a6  4628              MOV      r0,r5                 ;1173
0001a8  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
0001ac  ed8d0a04          VSTR     s0,[sp,#0x10]         ;1173
0001b0  edcd0a05          VSTR     s1,[sp,#0x14]         ;1173
0001b4  f7fffffe          BL       __hardfp_expf
0001b8  eeb08a40          VMOV.F32 s16,s0                ;1173
0001bc  ed9d0a05          VLDR     s0,[sp,#0x14]         ;1173
0001c0  f7fffffe          BL       __hardfp_cosf
0001c4  ee608a08          VMUL.F32 s17,s0,s16            ;1173
0001c8  ed9d0a05          VLDR     s0,[sp,#0x14]         ;1173
0001cc  f7fffffe          BL       __hardfp_sinf
0001d0  eef00a40          VMOV.F32 s1,s0                 ;1173
0001d4  eeb00a68          VMOV.F32 s0,s17                ;1173
0001d8  ee600a88          VMUL.F32 s1,s1,s16             ;1173
0001dc  e7bd              B        |L276.346|
;;;1175   
                          ENDP

0001de  0000              DCW      0x0000
                  |L276.480|
0001e0  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.277||, COMGROUP=_ZSt3powIfESt7complexIT_ERKS2_RKS1_, LINKORDER=||t._ZSt3powIfESt7complexIT_ERKS2_RKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.277||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZSt3powIfESt7complexIT_ERKS2_RKS1_||
                          DCD      0x00000001

                          AREA ||t._ZSt4sqrtIfESt7complexIT_ERKS2_||, COMGROUP=_ZSt4sqrtIfESt7complexIT_ERKS2_, CODE, READONLY, ALIGN=1

                  _ZSt4sqrtIfESt7complexIT_ERKS2_ PROC ; std::sqrt<float>(const std::complex<T1>&)
;;;1268     template <class _TypeT>
;;;1269     inline complex<_TypeT> sqrt (const complex<_TypeT>& __a)
000000  b510              PUSH     {r4,lr}
;;;1270     {
000002  4604              MOV      r4,r0
000004  ed2d8b04          VPUSH    {d8-d9}
000008  ed900a00          VLDR     s0,[r0,#0]
00000c  edd00a01          VLDR     s1,[r0,#4]
000010  ee200a00          VMUL.F32 s0,s0,s0
000014  ee000aa0          VMLA.F32 s0,s1,s1
000018  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
;;;1271       register _TypeT __r  = _RWSTD_C::sqrt(abs(__a));
00001c  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
000020  eef08a40          VMOV.F32 s17,s0
;;;1272       register _TypeT th = arg(__a)/2.;
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZSt3argIfET_RKSt7complexIS0_E ; std::arg<float>(const std::complex<T1>&)
00002a  eef60a00          VMOV.F32 s1,#0.50000000
00002e  ee208a20          VMUL.F32 s16,s0,s1
000032  eeb00a48          VMOV.F32 s0,s16
000036  f7fffffe          BL       __hardfp_cosf
00003a  eef00a40          VMOV.F32 s1,s0
00003e  eeb00a48          VMOV.F32 s0,s16
;;;1273       return complex<_TypeT>(__r*_RWSTD_C::cos(th), __r*_RWSTD_C::sin(th));
000042  ee209aa8          VMUL.F32 s18,s1,s17
000046  f7fffffe          BL       __hardfp_sinf
00004a  eef00a40          VMOV.F32 s1,s0
00004e  eeb00a49          VMOV.F32 s0,s18
000052  ee600aa8          VMUL.F32 s1,s1,s17
;;;1274     }
000056  ecbd8b04          VPOP     {d8-d9}
00005a  bd10              POP      {r4,pc}
;;;1275   
                          ENDP


                          AREA ||area_number.284||, COMGROUP=_ZSt4sqrtIfESt7complexIT_ERKS2_, LINKORDER=||t._ZSt4sqrtIfESt7complexIT_ERKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.284||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZSt4sqrtIfESt7complexIT_ERKS2_||
                          DCD      0x00000001

                          AREA ||t._ZSt3powIdESt7complexIT_ERKS2_RKS1_||, COMGROUP=_ZSt3powIdESt7complexIT_ERKS2_RKS1_, CODE, READONLY, ALIGN=3

                  _ZSt3powIdESt7complexIT_ERKS2_RKS1_ PROC ; std::pow<double>(const std::complex<T1>&, const T1&)
;;;1152     template <class _TypeT>
;;;1153     inline complex<_TypeT> pow (const complex<_TypeT>& __a, const _TypeT& __s)
000000  b530              PUSH     {r4,r5,lr}
;;;1154     {
000002  460d              MOV      r5,r1
000004  ed2d8b0a          VPUSH    {d8-d12}
000008  b09d              SUB      sp,sp,#0x74
00000a  4604              MOV      r4,r0
;;;1155       if (__a == complex<_TypeT>(0,0))
;;;1156       {
;;;1157         if (__s == _TypeT(0))
;;;1158           return complex<_TypeT>(1,0);
00000c  ed9f9be2          VLDR     d9,|L290.920|
000010  ed9f8be3          VLDR     d8,|L290.928|
000014  ed8d8b14          VSTR     d8,[sp,#0x50]         ;1155
000018  ed8d8b16          VSTR     d8,[sp,#0x58]         ;1155
00001c  ed900b00          VLDR     d0,[r0,#0]            ;1155
000020  ec532b18          VMOV     r2,r3,d8              ;1155
000024  ec510b10          VMOV     r0,r1,d0              ;1155
000028  f7fffffe          BL       __aeabi_cdcmpeq
00002c  d126              BNE      |L290.124|
00002e  ed9d0b16          VLDR     d0,[sp,#0x58]         ;1155
000032  ed941b02          VLDR     d1,[r4,#8]            ;1155
000036  ec532b10          VMOV     r2,r3,d0              ;1155
00003a  ec510b11          VMOV     r0,r1,d1              ;1155
00003e  f7fffffe          BL       __aeabi_cdcmpeq
000042  d11b              BNE      |L290.124|
000044  ed950b00          VLDR     d0,[r5,#0]            ;1157
000048  ec532b18          VMOV     r2,r3,d8              ;1157
00004c  ec510b10          VMOV     r0,r1,d0              ;1157
000050  f7fffffe          BL       __aeabi_cdcmpeq
000054  bf19              ITTEE    NE                    ;1157
000056  eeb00a48          VMOVNE.F32 s0,s16                ;1157
00005a  eef00a68          VMOVNE.F32 s1,s17                ;1157
00005e  eeb00a49          VMOVEQ.F32 s0,s18
000062  eef00a69          VMOVEQ.F32 s1,s19
000066  bf04              ITT      EQ
000068  eeb01a48          VMOVEQ.F32 s2,s16
00006c  eef01a68          VMOVEQ.F32 s3,s17
000070  f0408110          BNE.W    |L290.660|
;;;1159         else
;;;1160           return complex<_TypeT>(0,0);
;;;1161       }
;;;1162       if (__a.imag() == 0)
;;;1163       {
;;;1164         if (__a.real() < 0)
;;;1165           return pow(__a, complex<_TypeT>(__s,0));
;;;1166         else
;;;1167   #ifndef _RWSTD_NO_OVERLOAD_C_POW
;;;1168           return complex<_TypeT>(_RWSTD_C::pow(__a.real(),__s), 0);
;;;1169   #else
;;;1170         return complex<_TypeT>(_RWSTD_C::pow(double(__a.real()),double(__s)), 0);
;;;1171   #endif /* _RWSTD_NO_OVERLOAD_C_POW */
;;;1172       }
;;;1173       return exp(__s*log(__a));
;;;1174     }   
000074  b01d              ADD      sp,sp,#0x74
000076  ecbd8b0a          VPOP     {d8-d12}
00007a  bd30              POP      {r4,r5,pc}
                  |L290.124|
00007c  ed940b02          VLDR     d0,[r4,#8]
000080  ec532b18          VMOV     r2,r3,d8              ;1162
000084  ec510b10          VMOV     r0,r1,d0              ;1162
000088  f7fffffe          BL       __aeabi_cdcmpeq
00008c  d17b              BNE      |L290.390|
00008e  ed940b00          VLDR     d0,[r4,#0]            ;1162
000092  ec532b18          VMOV     r2,r3,d8              ;1164
000096  ec510b10          VMOV     r0,r1,d0              ;1164
00009a  f7fffffe          BL       __aeabi_cdcmple
00009e  d273              BCS      |L290.392|
0000a0  ed950b00          VLDR     d0,[r5,#0]            ;1164
0000a4  ec532b18          VMOV     r2,r3,d8              ;1164
0000a8  ed8d0b00          VSTR     d0,[sp,#0]            ;1164
0000ac  ed8d8b02          VSTR     d8,[sp,#8]            ;1164
0000b0  ed8d8b04          VSTR     d8,[sp,#0x10]         ;1164
0000b4  ed8d8b06          VSTR     d8,[sp,#0x18]         ;1164
0000b8  ed940b00          VLDR     d0,[r4,#0]            ;1164
0000bc  ec510b10          VMOV     r0,r1,d0              ;1164
0000c0  f7fffffe          BL       __aeabi_cdcmpeq
0000c4  d12b              BNE      |L290.286|
0000c6  ed9d1b06          VLDR     d1,[sp,#0x18]         ;1165
0000ca  ed940b02          VLDR     d0,[r4,#8]            ;1165
0000ce  ec532b11          VMOV     r2,r3,d1              ;1165
0000d2  ec510b10          VMOV     r0,r1,d0              ;1165
0000d6  f7fffffe          BL       __aeabi_cdcmpeq
0000da  d120              BNE      |L290.286|
0000dc  ed8d8b10          VSTR     d8,[sp,#0x40]         ;1165
0000e0  ed8d8b12          VSTR     d8,[sp,#0x48]         ;1165
0000e4  ed9d0b00          VLDR     d0,[sp,#0]            ;1165
0000e8  ec532b18          VMOV     r2,r3,d8              ;1165
0000ec  ec510b10          VMOV     r0,r1,d0              ;1165
0000f0  f7fffffe          BL       __aeabi_cdcmpeq
0000f4  d17b              BNE      |L290.494|
0000f6  ed9d1b12          VLDR     d1,[sp,#0x48]         ;1165
0000fa  ed9d0b02          VLDR     d0,[sp,#8]            ;1165
0000fe  ec532b11          VMOV     r2,r3,d1              ;1165
000102  ec510b10          VMOV     r0,r1,d0              ;1165
000106  f7fffffe          BL       __aeabi_cdcmpeq
00010a  d170              BNE      |L290.494|
00010c  ed8d9b18          VSTR     d9,[sp,#0x60]         ;1165
000110  ed8d8b1a          VSTR     d8,[sp,#0x68]         ;1165
000114  eeb00a49          VMOV.F32 s0,s18                ;1165
000118  eef00a69          VMOV.F32 s1,s19                ;1165
00011c  e0ba              B        |L290.660|
                  |L290.286|
00011e  ed940b02          VLDR     d0,[r4,#8]            ;1165
000122  ec532b10          VMOV     r2,r3,d0              ;1165
000126  ec510b10          VMOV     r0,r1,d0              ;1165
00012a  f7fffffe          BL       __aeabi_dmul
00012e  ed940b00          VLDR     d0,[r4,#0]            ;1165
000132  ec410b19          VMOV     d9,r0,r1              ;1165
000136  ec532b10          VMOV     r2,r3,d0              ;1165
00013a  ec510b10          VMOV     r0,r1,d0              ;1165
00013e  f7fffffe          BL       __aeabi_dmul
000142  ec532b19          VMOV     r2,r3,d9              ;1165
000146  f7fffffe          BL       __aeabi_dadd
00014a  ec410b10          VMOV     d0,r0,r1              ;1165
00014e  f7fffffe          BL       __hardfp_sqrt
000152  ed9dbb00          VLDR     d11,[sp,#0]           ;1165
000156  ed9d9b02          VLDR     d9,[sp,#8]            ;1165
00015a  ed8d8b10          VSTR     d8,[sp,#0x40]         ;1165
00015e  eeb0ca40          VMOV.F32 s24,s0                ;1165
000162  eef0ca60          VMOV.F32 s25,s1                ;1165
000166  ed8d8b12          VSTR     d8,[sp,#0x48]         ;1165
00016a  ed940b00          VLDR     d0,[r4,#0]            ;1165
00016e  ec532b18          VMOV     r2,r3,d8              ;1165
000172  ec510b10          VMOV     r0,r1,d0              ;1165
000176  f7fffffe          BL       __aeabi_cdcmpeq
00017a  d10d              BNE      |L290.408|
00017c  ed9d1b12          VLDR     d1,[sp,#0x48]         ;1165
000180  ed940b02          VLDR     d0,[r4,#8]            ;1165
000184  e001              B        |L290.394|
                  |L290.390|
000186  e08d              B        |L290.676|
                  |L290.392|
000188  e07e              B        |L290.648|
                  |L290.394|
00018a  ec532b11          VMOV     r2,r3,d1              ;1165
00018e  ec510b10          VMOV     r0,r1,d0              ;1165
000192  f7fffffe          BL       __aeabi_cdcmpeq
000196  d009              BEQ      |L290.428|
                  |L290.408|
000198  ed941b00          VLDR     d1,[r4,#0]            ;1165
00019c  ed940b02          VLDR     d0,[r4,#8]            ;1165
0001a0  f7fffffe          BL       __hardfp_atan2
0001a4  eeb08a40          VMOV.F32 s16,s0                ;1165
0001a8  eef08a60          VMOV.F32 s17,s1                ;1165
                  |L290.428|
0001ac  ec510b19          VMOV     r0,r1,d9              ;1165
0001b0  f7fffffe          BL       __aeabi_dneg
0001b4  ec532b18          VMOV     r2,r3,d8              ;1165
0001b8  f7fffffe          BL       __aeabi_dmul
0001bc  ec410b10          VMOV     d0,r0,r1              ;1165
0001c0  f7fffffe          BL       __hardfp_exp
0001c4  eeb0aa40          VMOV.F32 s20,s0                ;1165
0001c8  eef0aa60          VMOV.F32 s21,s1                ;1165
0001cc  eeb01a4b          VMOV.F32 s2,s22                ;1165
0001d0  eef01a6b          VMOV.F32 s3,s23                ;1165
0001d4  eeb00a4c          VMOV.F32 s0,s24                ;1165
0001d8  eef00a6c          VMOV.F32 s1,s25                ;1165
0001dc  f7fffffe          BL       __hardfp_pow
0001e0  ec532b1a          VMOV     r2,r3,d10             ;1165
0001e4  ec510b10          VMOV     r0,r1,d0              ;1165
0001e8  f7fffffe          BL       __aeabi_dmul
0001ec  e000              B        |L290.496|
                  |L290.494|
0001ee  e042              B        |L290.630|
                  |L290.496|
0001f0  ec410b1a          VMOV     d10,r0,r1             ;1165
0001f4  ec532b18          VMOV     r2,r3,d8              ;1165
0001f8  ec510b1b          VMOV     r0,r1,d11             ;1165
0001fc  f7fffffe          BL       __aeabi_dmul
000200  ec410b18          VMOV     d8,r0,r1              ;1165
000204  eeb00a4c          VMOV.F32 s0,s24                ;1165
000208  eef00a6c          VMOV.F32 s1,s25                ;1165
00020c  f7fffffe          BL       __hardfp_log
000210  ec532b19          VMOV     r2,r3,d9              ;1165
000214  ec510b10          VMOV     r0,r1,d0              ;1165
000218  f7fffffe          BL       __aeabi_dmul
00021c  ec532b18          VMOV     r2,r3,d8              ;1165
000220  f7fffffe          BL       __aeabi_dadd
000224  ec410b18          VMOV     d8,r0,r1              ;1165
000228  eeb00a48          VMOV.F32 s0,s16                ;1165
00022c  eef00a68          VMOV.F32 s1,s17                ;1165
000230  f7fffffe          BL       __hardfp_cos
000234  ec532b1a          VMOV     r2,r3,d10             ;1165
000238  ec510b10          VMOV     r0,r1,d0              ;1165
00023c  f7fffffe          BL       __aeabi_dmul
000240  460d              MOV      r5,r1                 ;1165
000242  4604              MOV      r4,r0                 ;1165
000244  eeb00a48          VMOV.F32 s0,s16                ;1165
000248  eef00a68          VMOV.F32 s1,s17                ;1165
00024c  f7fffffe          BL       __hardfp_sin
000250  ec532b1a          VMOV     r2,r3,d10             ;1165
000254  ec510b10          VMOV     r0,r1,d0              ;1165
000258  f7fffffe          BL       __aeabi_dmul
00025c  4623              MOV      r3,r4                 ;1165
00025e  e9cd3504          STRD     r3,r5,[sp,#0x10]      ;1165
000262  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;1165
000266  b01d              ADD      sp,sp,#0x74
000268  ec454b10          VMOV     d0,r4,r5
00026c  ecbd8b0a          VPOP     {d8-d12}
000270  ec410b11          VMOV     d1,r0,r1
000274  bd30              POP      {r4,r5,pc}
                  |L290.630|
000276  ed8d8b18          VSTR     d8,[sp,#0x60]
00027a  ed8d8b1a          VSTR     d8,[sp,#0x68]
00027e  eeb00a48          VMOV.F32 s0,s16
000282  eef00a68          VMOV.F32 s1,s17
000286  e005              B        |L290.660|
                  |L290.648|
000288  ed940b00          VLDR     d0,[r4,#0]
00028c  ed951b00          VLDR     d1,[r5,#0]            ;1168
000290  f7fffffe          BL       __hardfp_pow
                  |L290.660|
000294  b01d              ADD      sp,sp,#0x74
000296  eeb01a48          VMOV.F32 s2,s16                ;1168
00029a  eef01a68          VMOV.F32 s3,s17                ;1168
00029e  ecbd8b0a          VPOP     {d8-d12}
0002a2  bd30              POP      {r4,r5,pc}
                  |L290.676|
0002a4  ed940b02          VLDR     d0,[r4,#8]
0002a8  ec532b10          VMOV     r2,r3,d0
0002ac  ec510b10          VMOV     r0,r1,d0
0002b0  f7fffffe          BL       __aeabi_dmul
0002b4  ed940b00          VLDR     d0,[r4,#0]
0002b8  ec410b19          VMOV     d9,r0,r1
0002bc  ec532b10          VMOV     r2,r3,d0
0002c0  ec510b10          VMOV     r0,r1,d0
0002c4  f7fffffe          BL       __aeabi_dmul
0002c8  ec532b19          VMOV     r2,r3,d9
0002cc  f7fffffe          BL       __aeabi_dadd
0002d0  ec410b10          VMOV     d0,r0,r1
0002d4  f7fffffe          BL       __hardfp_sqrt
0002d8  f7fffffe          BL       __hardfp_log
0002dc  ed8d8b00          VSTR     d8,[sp,#0]
0002e0  eeb09a40          VMOV.F32 s18,s0
0002e4  eef09a60          VMOV.F32 s19,s1
0002e8  ed8d8b02          VSTR     d8,[sp,#8]
0002ec  ed940b00          VLDR     d0,[r4,#0]
0002f0  ec532b18          VMOV     r2,r3,d8
0002f4  ec510b10          VMOV     r0,r1,d0
0002f8  f7fffffe          BL       __aeabi_cdcmpeq
0002fc  d10f              BNE      |L290.798|
0002fe  ed9d0b02          VLDR     d0,[sp,#8]            ;1173
000302  ed941b02          VLDR     d1,[r4,#8]            ;1173
000306  ec532b10          VMOV     r2,r3,d0              ;1173
00030a  ec510b11          VMOV     r0,r1,d1              ;1173
00030e  f7fffffe          BL       __aeabi_cdcmpeq
000312  bf04              ITT      EQ                    ;1173
000314  eeb00a48          VMOVEQ.F32 s0,s16                ;1173
000318  eef00a68          VMOVEQ.F32 s1,s17                ;1173
00031c  d005              BEQ      |L290.810|
                  |L290.798|
00031e  ed941b00          VLDR     d1,[r4,#0]            ;1173
000322  ed940b02          VLDR     d0,[r4,#8]            ;1173
000326  f7fffffe          BL       __hardfp_atan2
                  |L290.810|
00032a  ed8d9b04          VSTR     d9,[sp,#0x10]         ;1173
00032e  ed8d0b06          VSTR     d0,[sp,#0x18]         ;1173
000332  ed8d9b0c          VSTR     d9,[sp,#0x30]         ;1173
000336  ed8d0b0e          VSTR     d0,[sp,#0x38]         ;1173
00033a  a90c              ADD      r1,sp,#0x30           ;1173
00033c  4628              MOV      r0,r5                 ;1173
00033e  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
000342  ed8d0b08          VSTR     d0,[sp,#0x20]         ;1173
000346  ed8d1b0a          VSTR     d1,[sp,#0x28]         ;1173
00034a  f7fffffe          BL       __hardfp_exp
00034e  eeb08a40          VMOV.F32 s16,s0                ;1173
000352  eef08a60          VMOV.F32 s17,s1                ;1173
000356  ed9d0b0a          VLDR     d0,[sp,#0x28]         ;1173
00035a  f7fffffe          BL       __hardfp_cos
00035e  ec532b18          VMOV     r2,r3,d8              ;1173
000362  ec510b10          VMOV     r0,r1,d0              ;1173
000366  f7fffffe          BL       __aeabi_dmul
00036a  ec410b19          VMOV     d9,r0,r1              ;1173
00036e  ed9d0b0a          VLDR     d0,[sp,#0x28]         ;1173
000372  f7fffffe          BL       __hardfp_sin
000376  ec532b18          VMOV     r2,r3,d8              ;1173
00037a  ec510b10          VMOV     r0,r1,d0              ;1173
00037e  f7fffffe          BL       __aeabi_dmul
000382  b01d              ADD      sp,sp,#0x74
000384  eeb00a49          VMOV.F32 s0,s18
000388  eef00a69          VMOV.F32 s1,s19
00038c  ecbd8b0a          VPOP     {d8-d12}
000390  ec410b11          VMOV     d1,r0,r1
000394  bd30              POP      {r4,r5,pc}
;;;1175   
                          ENDP

000396  0000              DCW      0x0000
                  |L290.920|
000398  00000000          DCFD     0x3ff0000000000000 ; 1
00039c  3ff00000
                  |L290.928|
0003a0  00000000          DCFD     0x0000000000000000 ; 0
0003a4  00000000

                          AREA ||area_number.291||, COMGROUP=_ZSt3powIdESt7complexIT_ERKS2_RKS1_, LINKORDER=||t._ZSt3powIdESt7complexIT_ERKS2_RKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.291||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZSt3powIdESt7complexIT_ERKS2_RKS1_||
                          DCD      0x00000001

                          AREA ||t._ZSt4sqrtIdESt7complexIT_ERKS2_||, COMGROUP=_ZSt4sqrtIdESt7complexIT_ERKS2_, CODE, READONLY, ALIGN=3

                  _ZSt4sqrtIdESt7complexIT_ERKS2_ PROC ; std::sqrt<double>(const std::complex<T1>&)
;;;1268     template <class _TypeT>
;;;1269     inline complex<_TypeT> sqrt (const complex<_TypeT>& __a)
000000  b510              PUSH     {r4,lr}
;;;1270     {
000002  4604              MOV      r4,r0
000004  ed2d8b06          VPUSH    {d8-d10}
000008  b084              SUB      sp,sp,#0x10
00000a  ed900b02          VLDR     d0,[r0,#8]
00000e  ed9f9b38          VLDR     d9,|L297.240|
000012  ec532b10          VMOV     r2,r3,d0
000016  ec510b10          VMOV     r0,r1,d0
00001a  f7fffffe          BL       __aeabi_dmul
00001e  ed940b00          VLDR     d0,[r4,#0]
000022  ec410b18          VMOV     d8,r0,r1
000026  ec532b10          VMOV     r2,r3,d0
00002a  ec510b10          VMOV     r0,r1,d0
00002e  f7fffffe          BL       __aeabi_dmul
000032  ec532b18          VMOV     r2,r3,d8
000036  f7fffffe          BL       __aeabi_dadd
00003a  ec410b10          VMOV     d0,r0,r1
00003e  f7fffffe          BL       __hardfp_sqrt
;;;1271       register _TypeT __r  = _RWSTD_C::sqrt(abs(__a));
000042  f7fffffe          BL       __hardfp_sqrt
000046  ed8d9b00          VSTR     d9,[sp,#0]
00004a  eeb08a40          VMOV.F32 s16,s0
00004e  eef08a60          VMOV.F32 s17,s1
000052  ed8d9b02          VSTR     d9,[sp,#8]
000056  ed940b00          VLDR     d0,[r4,#0]
00005a  ec532b19          VMOV     r2,r3,d9
00005e  ec510b10          VMOV     r0,r1,d0
000062  f7fffffe          BL       __aeabi_cdcmpeq
;;;1272       register _TypeT th = arg(__a)/2.;
000066  d10f              BNE      |L297.136|
000068  ed9d1b02          VLDR     d1,[sp,#8]
00006c  ed940b02          VLDR     d0,[r4,#8]
000070  ec532b11          VMOV     r2,r3,d1
000074  ec510b10          VMOV     r0,r1,d0
000078  f7fffffe          BL       __aeabi_cdcmpeq
00007c  bf04              ITT      EQ
00007e  eeb00a49          VMOVEQ.F32 s0,s18
000082  eef00a69          VMOVEQ.F32 s1,s19
000086  d005              BEQ      |L297.148|
                  |L297.136|
000088  ed941b00          VLDR     d1,[r4,#0]
00008c  ed940b02          VLDR     d0,[r4,#8]
000090  f7fffffe          BL       __hardfp_atan2
                  |L297.148|
000094  ed9f1b18          VLDR     d1,|L297.248|
000098  ec510b10          VMOV     r0,r1,d0
00009c  ec532b11          VMOV     r2,r3,d1
0000a0  f7fffffe          BL       __aeabi_dmul
0000a4  ec410b1a          VMOV     d10,r0,r1
;;;1273       return complex<_TypeT>(__r*_RWSTD_C::cos(th), __r*_RWSTD_C::sin(th));
0000a8  eeb00a4a          VMOV.F32 s0,s20
0000ac  eef00a6a          VMOV.F32 s1,s21
0000b0  f7fffffe          BL       __hardfp_cos
0000b4  ec532b18          VMOV     r2,r3,d8
0000b8  ec510b10          VMOV     r0,r1,d0
0000bc  f7fffffe          BL       __aeabi_dmul
0000c0  ec410b19          VMOV     d9,r0,r1
0000c4  eeb00a4a          VMOV.F32 s0,s20
0000c8  eef00a6a          VMOV.F32 s1,s21
0000cc  f7fffffe          BL       __hardfp_sin
0000d0  ec532b18          VMOV     r2,r3,d8
0000d4  ec510b10          VMOV     r0,r1,d0
0000d8  f7fffffe          BL       __aeabi_dmul
;;;1274     }
0000dc  b004              ADD      sp,sp,#0x10
0000de  eeb00a49          VMOV.F32 s0,s18
0000e2  eef00a69          VMOV.F32 s1,s19
0000e6  ecbd8b06          VPOP     {d8-d10}
0000ea  ec410b11          VMOV     d1,r0,r1
0000ee  bd10              POP      {r4,pc}
;;;1275   
                          ENDP

                  |L297.240|
0000f0  00000000          DCFD     0x0000000000000000 ; 0
0000f4  00000000
                  |L297.248|
0000f8  00000000          DCFD     0x3fe0000000000000 ; 0.5
0000fc  3fe00000

                          AREA ||area_number.298||, COMGROUP=_ZSt4sqrtIdESt7complexIT_ERKS2_, LINKORDER=||t._ZSt4sqrtIdESt7complexIT_ERKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.298||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZSt4sqrtIdESt7complexIT_ERKS2_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE PROC ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
;;;708    
;;;709          template<typename InType, typename OutType> Result Transpose(const Array<InType> &in, Array<OutType> &out)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;710          {
000004  460c              MOV      r4,r1
000006  b083              SUB      sp,sp,#0xc
000008  4607              MOV      r7,r0
;;;711            const s32 inHeight = in.get_size(0);
00000a  2100              MOVS     r1,#0
00000c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000010  4680              MOV      r8,r0
;;;712            const s32 inWidth = in.get_size(1);
000012  2101              MOVS     r1,#1
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00001a  4606              MOV      r6,r0
00001c  4638              MOV      r0,r7
00001e  68a5              LDR      r5,[r4,#8]
000020  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
;;;713    
;;;714            const s32 outStride = out.get_stride();
;;;715    
;;;716            AnkiConditionalErrorAndReturnValue(AreValid(in, out),
000024  f8df9168          LDR      r9,|L304.400|
000028  2800              CMP      r0,#0
00002a  d07d              BEQ      |L304.296|
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000032  2800              CMP      r0,#0
000034  d07f              BEQ      |L304.310|
;;;717              RESULT_FAIL_INVALID_OBJECT, "Transpose", "Invalid objects");
;;;718    
;;;719            AnkiConditionalErrorAndReturnValue(AreEqualSize(in.get_size(1), in.get_size(0), out),
000036  2101              MOVS     r1,#1
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00003e  4683              MOV      r11,r0
000040  2100              MOVS     r1,#0
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000048  4682              MOV      r10,r0
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000050  2800              CMP      r0,#0
000052  d07f              BEQ      |L304.340|
000054  2100              MOVS     r1,#0
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00005c  4558              CMP      r0,r11
00005e  d179              BNE      |L304.340|
000060  2101              MOVS     r1,#1
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000068  4550              CMP      r0,r10
00006a  d173              BNE      |L304.340|
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000072  2800              CMP      r0,#0
;;;720              RESULT_FAIL_INVALID_SIZE, "Transpose", "out is not the correct size");
;;;721    
;;;722            AnkiConditionalErrorAndReturnValue(NotAliased(in, out),
000074  d07e              BEQ      |L304.372|
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00007c  2800              CMP      r0,#0
00007e  d079              BEQ      |L304.372|
000080  6938              LDR      r0,[r7,#0x10]
000082  9000              STR      r0,[sp,#0]
000084  6920              LDR      r0,[r4,#0x10]
000086  9001              STR      r0,[sp,#4]
000088  2000              MOVS     r0,#0
00008a  4669              MOV      r1,sp
                  |L304.140|
00008c  1c42              ADDS     r2,r0,#1
00008e  2a02              CMP      r2,#2
000090  bfb8              IT       LT
000092  f8513020          LDRLT    r3,[r1,r0,LSL #2]
000096  da06              BGE      |L304.166|
                  |L304.152|
000098  f851c022          LDR      r12,[r1,r2,LSL #2]
00009c  4563              CMP      r3,r12
00009e  d069              BEQ      |L304.372|
0000a0  1c52              ADDS     r2,r2,#1
0000a2  2a02              CMP      r2,#2
0000a4  dbf8              BLT      |L304.152|
                  |L304.166|
0000a6  1c40              ADDS     r0,r0,#1
0000a8  2802              CMP      r0,#2
0000aa  dbef              BLT      |L304.140|
;;;723              RESULT_FAIL_ALIASED_MEMORY, "Transpose", "in and out cannot be the same array");
;;;724    
;;;725            for(s32 yIn=0; yIn<inHeight; yIn++) {
0000ac  2000              MOVS     r0,#0
0000ae  f1b80f00          CMP      r8,#0
;;;726              const InType * restrict pIn = in.Pointer(yIn, 0);
;;;727              u8 * restrict pOut = reinterpret_cast<u8*>(out.Pointer(0,yIn));
;;;728    
;;;729              s32 xIn;
;;;730              s32 outOffset0 = 0;
;;;731    
;;;732              for(xIn=0; xIn<inWidth-1; xIn+=2) {
0000b2  bfc8              IT       GT
0000b4  f1a60a01          SUBGT    r10,r6,#1
0000b8  dd39              BLE      |L304.302|
                  |L304.186|
0000ba  68ba              LDR      r2,[r7,#8]            ;725
0000bc  6939              LDR      r1,[r7,#0x10]         ;725
0000be  68a3              LDR      r3,[r4,#8]            ;725
0000c0  fb001c02          MLA      r12,r0,r2,r1          ;725
0000c4  6922              LDR      r2,[r4,#0x10]         ;725
0000c6  2100              MOVS     r1,#0                 ;727
0000c8  fb012103          MLA      r1,r1,r3,r2           ;727
0000cc  2300              MOVS     r3,#0                 ;730
0000ce  eb010980          ADD      r9,r1,r0,LSL #2       ;730
0000d2  461a              MOV      r2,r3
0000d4  f1ba0f00          CMP      r10,#0
0000d8  dd12              BLE      |L304.256|
                  |L304.218|
;;;733                const InType in0 = pIn[xIn];
0000da  eb0c0182          ADD      r1,r12,r2,LSL #2
;;;734                const InType in1 = pIn[xIn+1];
;;;735    
;;;736                const s32 outOffset1 = outOffset0 + outStride;
;;;737    
;;;738                *reinterpret_cast<OutType*>(pOut + outOffset0) = static_cast<OutType>(in0);
0000de  eb090b03          ADD      r11,r9,r3
0000e2  ed910a00          VLDR     s0,[r1,#0]            ;733
0000e6  edd10a01          VLDR     s1,[r1,#4]            ;734
0000ea  1959              ADDS     r1,r3,r5              ;736
;;;739                *reinterpret_cast<OutType*>(pOut + outOffset1) = static_cast<OutType>(in1);
0000ec  4449              ADD      r1,r1,r9
0000ee  ed8b0a00          VSTR     s0,[r11,#0]           ;738
;;;740    
;;;741                outOffset0 += 2*outStride;
0000f2  1c92              ADDS     r2,r2,#2
0000f4  edc10a00          VSTR     s1,[r1,#0]            ;739
0000f8  eb030345          ADD      r3,r3,r5,LSL #1
0000fc  4592              CMP      r10,r2                ;732
0000fe  dcec              BGT      |L304.218|
                  |L304.256|
;;;742              }
;;;743    
;;;744              for(; xIn<inWidth; xIn++) {
000100  42b2              CMP      r2,r6
000102  da0e              BGE      |L304.290|
                  |L304.260|
000104  68a3              LDR      r3,[r4,#8]
000106  6921              LDR      r1,[r4,#0x10]
000108  fb021103          MLA      r1,r2,r3,r1
;;;745                *out.Pointer(xIn,yIn) = static_cast<OutType>(pIn[xIn]);
00010c  eb0c0382          ADD      r3,r12,r2,LSL #2
000110  eb010180          ADD      r1,r1,r0,LSL #2
000114  ed930a00          VLDR     s0,[r3,#0]
000118  1c52              ADDS     r2,r2,#1
00011a  ed810a00          VSTR     s0,[r1,#0]
00011e  42b2              CMP      r2,r6                 ;744
000120  dbf0              BLT      |L304.260|
                  |L304.290|
000122  1c40              ADDS     r0,r0,#1              ;744
000124  4540              CMP      r0,r8                 ;725
000126  e001              B        |L304.300|
                  |L304.296|
000128  e005              B        |L304.310|
00012a  e013              B        |L304.340|
                  |L304.300|
00012c  dbc5              BLT      |L304.186|
                  |L304.302|
;;;746              }
;;;747            }
;;;748    
;;;749            return RESULT_OK;
;;;750          } // Transpose()
00012e  b003              ADD      sp,sp,#0xc
000130  2000              MOVS     r0,#0                 ;749
000132  e8bd8ff0          POP      {r4-r11,pc}
                  |L304.310|
000136  f44f7033          MOV      r0,#0x2cc             ;716
00013a  e9cd9000          STRD     r9,r0,[sp,#0]         ;716
00013e  4b15              LDR      r3,|L304.404|
000140  4a15              LDR      r2,|L304.408|
000142  4916              LDR      r1,|L304.412|
000144  2005              MOVS     r0,#5                 ;716
000146  f7fffffe          BL       _Anki_Log
00014a  b003              ADD      sp,sp,#0xc
00014c  f04f6080          MOV      r0,#0x4000000         ;716
000150  e8bd8ff0          POP      {r4-r11,pc}
                  |L304.340|
000154  f24020cf          MOV      r0,#0x2cf             ;719
000158  e9cd9000          STRD     r9,r0,[sp,#0]         ;719
00015c  4b0d              LDR      r3,|L304.404|
00015e  4a10              LDR      r2,|L304.416|
000160  490e              LDR      r1,|L304.412|
000162  2005              MOVS     r0,#5                 ;719
000164  f7fffffe          BL       _Anki_Log
000168  b003              ADD      sp,sp,#0xc
00016a  f04f60a0          MOV      r0,#0x5000000         ;719
00016e  e8bd8ff0          POP      {r4-r11,pc}
000172  e7ff              B        |L304.372|
                  |L304.372|
000174  f24020d2          MOV      r0,#0x2d2             ;722
000178  e9cd9000          STRD     r9,r0,[sp,#0]         ;722
00017c  4b05              LDR      r3,|L304.404|
00017e  4a09              LDR      r2,|L304.420|
000180  4906              LDR      r1,|L304.412|
000182  2005              MOVS     r0,#5                 ;722
000184  f7fffffe          BL       _Anki_Log
000188  b003              ADD      sp,sp,#0xc
00018a  4807              LDR      r0,|L304.424|
00018c  e8bd8ff0          POP      {r4-r11,pc}
;;;751    
                          ENDP

                  |L304.400|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L304.404|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
                  |L304.408|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
                  |L304.412|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
                  |L304.416|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)
                  |L304.420|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3 ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 5)
                  |L304.424|
                          DCD      0x01000003

                          AREA ||area_number.305||, COMGROUP=_ZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.305||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE PROC ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
;;;256    
;;;257          template<typename InType, typename OutType> Result Multiply(const Array<InType> &in1, const Array<InType> &in2, Array<OutType> &out)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;258          {
000004  b082              SUB      sp,sp,#8
000006  460e              MOV      r6,r1
;;;259            const s32 in1Height = in1.get_size(0);
000008  2100              MOVS     r1,#0
00000a  9802              LDR      r0,[sp,#8]
00000c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
;;;260            const s32 in1Width = in1.get_size(1);
000010  9000              STR      r0,[sp,#0]
000012  2101              MOVS     r1,#1
000014  9802              LDR      r0,[sp,#8]
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00001a  4680              MOV      r8,r0
;;;261    
;;;262            const s32 in2Height = in2.get_size(0);
00001c  2100              MOVS     r1,#0
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000024  4605              MOV      r5,r0
;;;263            const s32 in2Width = in2.get_size(1);
000026  2101              MOVS     r1,#1
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
;;;264            const s32 in2Stride = in2.get_stride();
;;;265    
;;;266            AnkiConditionalErrorAndReturnValue(in1Width == in2Height,
00002e  f8dfa138          LDR      r10,|L311.360|
000032  68b4              LDR      r4,[r6,#8]
000034  4607              MOV      r7,r0                 ;263
000036  45a8              CMP      r8,r5
000038  d00e              BEQ      |L311.88|
00003a  f44f7085          MOV      r0,#0x10a
00003e  e9cda000          STRD     r10,r0,[sp,#0]
000042  4b4a              LDR      r3,|L311.364|
000044  4a4a              LDR      r2,|L311.368|
000046  494b              LDR      r1,|L311.372|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
;;;267              RESULT_FAIL_INVALID_SIZE, "Multiply", "Input matrices are incompatible sizes");
;;;268    
;;;269            AnkiConditionalErrorAndReturnValue(AreEqualSize(in1Height, in2Width, out),
;;;270              RESULT_FAIL_INVALID_SIZE, "Multiply", "Input and Output matrices are incompatible sizes");
;;;271    
;;;272            for(s32 y1=0; y1<in1Height; y1++) {
;;;273              const InType * restrict pIn1 = in1.Pointer(y1, 0);
;;;274              OutType * restrict pOut = out.Pointer(y1, 0);
;;;275    
;;;276              for(s32 x2=0; x2<in2Width; x2++) {
;;;277                const u8 * restrict pIn2 = reinterpret_cast<const u8*>(in2.Pointer(0, x2));
;;;278    
;;;279                OutType accumulator = 0;
;;;280    
;;;281                s32 y2;
;;;282                for(y2=0; y2<in2Height-3; y2+=4) {
;;;283                  const InType in1_0 = pIn1[y2];
;;;284                  const InType in1_1 = pIn1[y2+1];
;;;285                  const InType in1_2 = pIn1[y2+2];
;;;286                  const InType in1_3 = pIn1[y2+3];
;;;287    
;;;288                  const InType in2_0 = *reinterpret_cast<const InType*>(pIn2);
;;;289                  const InType in2_1 = *reinterpret_cast<const InType*>(pIn2 + in2Stride);
;;;290                  const InType in2_2 = *reinterpret_cast<const InType*>(pIn2 + 2*in2Stride);
;;;291                  const InType in2_3 = *reinterpret_cast<const InType*>(pIn2 + 3*in2Stride);
;;;292    
;;;293                  accumulator +=
;;;294                    in1_0 * in2_0 +
;;;295                    in1_1 * in2_1 +
;;;296                    in1_2 * in2_2 +
;;;297                    in1_3 * in2_3;
;;;298    
;;;299                  pIn2 += 4*in2Stride;
;;;300                }
;;;301    
;;;302                for(; y2<in2Height; y2++) {
;;;303                  accumulator += pIn1[y2] * (*reinterpret_cast<const InType*>(pIn2));
;;;304    
;;;305                  pIn2 += in2Stride;
;;;306                }
;;;307    
;;;308                pOut[x2] = accumulator;
;;;309              }
;;;310            }
;;;311    
;;;312            return RESULT_OK;
;;;313          } // template<typename InType, typename OutType> Result Multiply(const Array<InType> &in1, const Array<InType> &in2, Array<OutType> &out)
00004e  b005              ADD      sp,sp,#0x14
000050  f04f60a0          MOV      r0,#0x5000000         ;266
000054  e8bd8ff0          POP      {r4-r11,pc}
                  |L311.88|
000058  f8dd8010          LDR      r8,[sp,#0x10]
00005c  f8dd9000          LDR      r9,[sp,#0]
000060  4640              MOV      r0,r8
000062  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000066  2800              CMP      r0,#0
000068  d06e              BEQ      |L311.328|
00006a  2100              MOVS     r1,#0
00006c  4640              MOV      r0,r8
00006e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000072  4548              CMP      r0,r9
000074  d168              BNE      |L311.328|
000076  2101              MOVS     r1,#1
000078  4640              MOV      r0,r8
00007a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00007e  42b8              CMP      r0,r7
000080  d162              BNE      |L311.328|
000082  9800              LDR      r0,[sp,#0]            ;272
000084  f04f0900          MOV      r9,#0                 ;272
000088  2800              CMP      r0,#0                 ;272
00008a  dd59              BLE      |L311.320|
00008c  f1a50803          SUB      r8,r5,#3              ;282
000090  eddf4a39          VLDR     s9,|L311.376|
000094  eb040a44          ADD      r10,r4,r4,LSL #1      ;291
                  |L311.152|
000098  9802              LDR      r0,[sp,#8]            ;291
00009a  6901              LDR      r1,[r0,#0x10]         ;291
00009c  6880              LDR      r0,[r0,#8]            ;291
00009e  fb091c00          MLA      r12,r9,r0,r1          ;291
0000a2  9804              LDR      r0,[sp,#0x10]         ;291
0000a4  6901              LDR      r1,[r0,#0x10]         ;291
0000a6  6880              LDR      r0,[r0,#8]            ;291
0000a8  fb091b00          MLA      r11,r9,r0,r1          ;291
0000ac  2100              MOVS     r1,#0                 ;276
0000ae  2f00              CMP      r7,#0                 ;276
0000b0  dd41              BLE      |L311.310|
                  |L311.178|
0000b2  68b3              LDR      r3,[r6,#8]            ;276
0000b4  6932              LDR      r2,[r6,#0x10]         ;276
0000b6  2000              MOVS     r0,#0                 ;277
0000b8  fb002003          MLA      r0,r0,r3,r2           ;277
0000bc  2200              MOVS     r2,#0                 ;282
0000be  eb000081          ADD      r0,r0,r1,LSL #2       ;282
0000c2  eeb00a64          VMOV.F32 s0,s9                 ;279
0000c6  f1b80f00          CMP      r8,#0                 ;282
0000ca  dd1f              BLE      |L311.268|
                  |L311.204|
0000cc  eb0c0382          ADD      r3,r12,r2,LSL #2      ;283
0000d0  ed902a00          VLDR     s4,[r0,#0]            ;288
0000d4  1d12              ADDS     r2,r2,#4              ;299
0000d6  ecd32a04          VLDM     r3,{s5-s8}            ;283
0000da  1903              ADDS     r3,r0,r4              ;289
0000dc  4590              CMP      r8,r2                 ;282
0000de  edd31a00          VLDR     s3,[r3,#0]            ;289
0000e2  eb000344          ADD      r3,r0,r4,LSL #1       ;290
0000e6  ee222a82          VMUL.F32 s4,s5,s4              ;293
0000ea  ed931a00          VLDR     s2,[r3,#0]            ;290
0000ee  eb0a0300          ADD      r3,r10,r0             ;291
0000f2  eb000084          ADD      r0,r0,r4,LSL #2       ;299
0000f6  ee032a21          VMLA.F32 s4,s6,s3              ;293
0000fa  edd30a00          VLDR     s1,[r3,#0]            ;291
0000fe  ee032a81          VMLA.F32 s4,s7,s2              ;293
000102  ee042a20          VMLA.F32 s4,s8,s1              ;293
000106  ee320a00          VADD.F32 s0,s4,s0              ;293
00010a  dcdf              BGT      |L311.204|
                  |L311.268|
00010c  42aa              CMP      r2,r5                 ;302
00010e  da0b              BGE      |L311.296|
                  |L311.272|
000110  eb0c0382          ADD      r3,r12,r2,LSL #2      ;303
000114  ed901a00          VLDR     s2,[r0,#0]            ;303
000118  edd30a00          VLDR     s1,[r3,#0]            ;303
00011c  1c52              ADDS     r2,r2,#1              ;305
00011e  4420              ADD      r0,r0,r4              ;305
000120  ee000a81          VMLA.F32 s0,s1,s2              ;303
000124  42aa              CMP      r2,r5                 ;302
000126  dbf3              BLT      |L311.272|
                  |L311.296|
000128  eb0b0081          ADD      r0,r11,r1,LSL #2      ;308
00012c  1c49              ADDS     r1,r1,#1              ;308
00012e  ed800a00          VSTR     s0,[r0,#0]            ;308
000132  42b9              CMP      r1,r7                 ;276
000134  dbbd              BLT      |L311.178|
                  |L311.310|
000136  9800              LDR      r0,[sp,#0]            ;272
000138  f1090901          ADD      r9,r9,#1              ;272
00013c  4581              CMP      r9,r0                 ;272
00013e  dbab              BLT      |L311.152|
                  |L311.320|
000140  b005              ADD      sp,sp,#0x14
000142  2000              MOVS     r0,#0                 ;312
000144  e8bd8ff0          POP      {r4-r11,pc}
                  |L311.328|
000148  f240100d          MOV      r0,#0x10d             ;269
00014c  e9cda000          STRD     r10,r0,[sp,#0]        ;269
000150  4b06              LDR      r3,|L311.364|
000152  4a0a              LDR      r2,|L311.380|
000154  4907              LDR      r1,|L311.372|
000156  2005              MOVS     r0,#5                 ;269
000158  f7fffffe          BL       _Anki_Log
00015c  b005              ADD      sp,sp,#0x14
00015e  f04f60a0          MOV      r0,#0x5000000         ;269
000162  e8bd8ff0          POP      {r4-r11,pc}
;;;314    
                          ENDP

000166  0000              DCW      0x0000
                  |L311.360|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L311.364|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
                  |L311.368|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
                  |L311.372|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
                  |L311.376|
000178  00000000          DCFS     0x00000000 ; 0
                  |L311.380|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)

                          AREA ||area_number.312||, COMGROUP=_ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.312||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE PROC ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
;;;708    
;;;709          template<typename InType, typename OutType> Result Transpose(const Array<InType> &in, Array<OutType> &out)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;710          {
000004  460c              MOV      r4,r1
000006  b083              SUB      sp,sp,#0xc
000008  4607              MOV      r7,r0
;;;711            const s32 inHeight = in.get_size(0);
00000a  2100              MOVS     r1,#0
00000c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
000010  4680              MOV      r8,r0
;;;712            const s32 inWidth = in.get_size(1);
000012  2101              MOVS     r1,#1
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
00001a  4606              MOV      r6,r0
00001c  4638              MOV      r0,r7
00001e  68a5              LDR      r5,[r4,#8]
000020  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
;;;713    
;;;714            const s32 outStride = out.get_stride();
;;;715    
;;;716            AnkiConditionalErrorAndReturnValue(AreValid(in, out),
000024  f8df9168          LDR      r9,|L318.400|
000028  2800              CMP      r0,#0
00002a  d07d              BEQ      |L318.296|
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
000032  2800              CMP      r0,#0
000034  d07f              BEQ      |L318.310|
;;;717              RESULT_FAIL_INVALID_OBJECT, "Transpose", "Invalid objects");
;;;718    
;;;719            AnkiConditionalErrorAndReturnValue(AreEqualSize(in.get_size(1), in.get_size(0), out),
000036  2101              MOVS     r1,#1
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
00003e  4683              MOV      r11,r0
000040  2100              MOVS     r1,#0
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
000048  4682              MOV      r10,r0
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
000050  2800              CMP      r0,#0
000052  d07f              BEQ      |L318.340|
000054  2100              MOVS     r1,#0
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
00005c  4558              CMP      r0,r11
00005e  d179              BNE      |L318.340|
000060  2101              MOVS     r1,#1
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
000068  4550              CMP      r0,r10
00006a  d173              BNE      |L318.340|
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
000072  2800              CMP      r0,#0
;;;720              RESULT_FAIL_INVALID_SIZE, "Transpose", "out is not the correct size");
;;;721    
;;;722            AnkiConditionalErrorAndReturnValue(NotAliased(in, out),
000074  d07e              BEQ      |L318.372|
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
00007c  2800              CMP      r0,#0
00007e  d079              BEQ      |L318.372|
000080  6938              LDR      r0,[r7,#0x10]
000082  9000              STR      r0,[sp,#0]
000084  6920              LDR      r0,[r4,#0x10]
000086  9001              STR      r0,[sp,#4]
000088  2000              MOVS     r0,#0
00008a  4669              MOV      r1,sp
                  |L318.140|
00008c  1c42              ADDS     r2,r0,#1
00008e  2a02              CMP      r2,#2
000090  bfb8              IT       LT
000092  f8513020          LDRLT    r3,[r1,r0,LSL #2]
000096  da06              BGE      |L318.166|
                  |L318.152|
000098  f851c022          LDR      r12,[r1,r2,LSL #2]
00009c  4563              CMP      r3,r12
00009e  d069              BEQ      |L318.372|
0000a0  1c52              ADDS     r2,r2,#1
0000a2  2a02              CMP      r2,#2
0000a4  dbf8              BLT      |L318.152|
                  |L318.166|
0000a6  1c40              ADDS     r0,r0,#1
0000a8  2802              CMP      r0,#2
0000aa  dbef              BLT      |L318.140|
;;;723              RESULT_FAIL_ALIASED_MEMORY, "Transpose", "in and out cannot be the same array");
;;;724    
;;;725            for(s32 yIn=0; yIn<inHeight; yIn++) {
0000ac  2000              MOVS     r0,#0
0000ae  f1b80f00          CMP      r8,#0
;;;726              const InType * restrict pIn = in.Pointer(yIn, 0);
;;;727              u8 * restrict pOut = reinterpret_cast<u8*>(out.Pointer(0,yIn));
;;;728    
;;;729              s32 xIn;
;;;730              s32 outOffset0 = 0;
;;;731    
;;;732              for(xIn=0; xIn<inWidth-1; xIn+=2) {
0000b2  bfc8              IT       GT
0000b4  f1a60a01          SUBGT    r10,r6,#1
0000b8  dd39              BLE      |L318.302|
                  |L318.186|
0000ba  68ba              LDR      r2,[r7,#8]            ;725
0000bc  6939              LDR      r1,[r7,#0x10]         ;725
0000be  68a3              LDR      r3,[r4,#8]            ;725
0000c0  fb001c02          MLA      r12,r0,r2,r1          ;725
0000c4  6922              LDR      r2,[r4,#0x10]         ;725
0000c6  2100              MOVS     r1,#0                 ;727
0000c8  fb012103          MLA      r1,r1,r3,r2           ;727
0000cc  2300              MOVS     r3,#0                 ;730
0000ce  eb0109c0          ADD      r9,r1,r0,LSL #3       ;730
0000d2  461a              MOV      r2,r3
0000d4  f1ba0f00          CMP      r10,#0
0000d8  dd12              BLE      |L318.256|
                  |L318.218|
;;;733                const InType in0 = pIn[xIn];
0000da  eb0c01c2          ADD      r1,r12,r2,LSL #3
;;;734                const InType in1 = pIn[xIn+1];
;;;735    
;;;736                const s32 outOffset1 = outOffset0 + outStride;
;;;737    
;;;738                *reinterpret_cast<OutType*>(pOut + outOffset0) = static_cast<OutType>(in0);
0000de  eb090b03          ADD      r11,r9,r3
0000e2  ed910b00          VLDR     d0,[r1,#0]            ;733
0000e6  ed911b02          VLDR     d1,[r1,#8]            ;734
0000ea  1959              ADDS     r1,r3,r5              ;736
;;;739                *reinterpret_cast<OutType*>(pOut + outOffset1) = static_cast<OutType>(in1);
0000ec  4449              ADD      r1,r1,r9
0000ee  ed8b0b00          VSTR     d0,[r11,#0]           ;738
;;;740    
;;;741                outOffset0 += 2*outStride;
0000f2  1c92              ADDS     r2,r2,#2
0000f4  ed811b00          VSTR     d1,[r1,#0]            ;739
0000f8  eb030345          ADD      r3,r3,r5,LSL #1
0000fc  4592              CMP      r10,r2                ;732
0000fe  dcec              BGT      |L318.218|
                  |L318.256|
;;;742              }
;;;743    
;;;744              for(; xIn<inWidth; xIn++) {
000100  42b2              CMP      r2,r6
000102  da0e              BGE      |L318.290|
                  |L318.260|
000104  68a3              LDR      r3,[r4,#8]
000106  6921              LDR      r1,[r4,#0x10]
000108  fb021103          MLA      r1,r2,r3,r1
;;;745                *out.Pointer(xIn,yIn) = static_cast<OutType>(pIn[xIn]);
00010c  eb0c03c2          ADD      r3,r12,r2,LSL #3
000110  eb0101c0          ADD      r1,r1,r0,LSL #3
000114  ed930b00          VLDR     d0,[r3,#0]
000118  1c52              ADDS     r2,r2,#1
00011a  ed810b00          VSTR     d0,[r1,#0]
00011e  42b2              CMP      r2,r6                 ;744
000120  dbf0              BLT      |L318.260|
                  |L318.290|
000122  1c40              ADDS     r0,r0,#1              ;744
000124  4540              CMP      r0,r8                 ;725
000126  e001              B        |L318.300|
                  |L318.296|
000128  e005              B        |L318.310|
00012a  e013              B        |L318.340|
                  |L318.300|
00012c  dbc5              BLT      |L318.186|
                  |L318.302|
;;;746              }
;;;747            }
;;;748    
;;;749            return RESULT_OK;
;;;750          } // Transpose()
00012e  b003              ADD      sp,sp,#0xc
000130  2000              MOVS     r0,#0                 ;749
000132  e8bd8ff0          POP      {r4-r11,pc}
                  |L318.310|
000136  f44f7033          MOV      r0,#0x2cc             ;716
00013a  e9cd9000          STRD     r9,r0,[sp,#0]         ;716
00013e  4b15              LDR      r3,|L318.404|
000140  4a15              LDR      r2,|L318.408|
000142  4916              LDR      r1,|L318.412|
000144  2005              MOVS     r0,#5                 ;716
000146  f7fffffe          BL       _Anki_Log
00014a  b003              ADD      sp,sp,#0xc
00014c  f04f6080          MOV      r0,#0x4000000         ;716
000150  e8bd8ff0          POP      {r4-r11,pc}
                  |L318.340|
000154  f24020cf          MOV      r0,#0x2cf             ;719
000158  e9cd9000          STRD     r9,r0,[sp,#0]         ;719
00015c  4b0d              LDR      r3,|L318.404|
00015e  4a10              LDR      r2,|L318.416|
000160  490e              LDR      r1,|L318.412|
000162  2005              MOVS     r0,#5                 ;719
000164  f7fffffe          BL       _Anki_Log
000168  b003              ADD      sp,sp,#0xc
00016a  f04f60a0          MOV      r0,#0x5000000         ;719
00016e  e8bd8ff0          POP      {r4-r11,pc}
000172  e7ff              B        |L318.372|
                  |L318.372|
000174  f24020d2          MOV      r0,#0x2d2             ;722
000178  e9cd9000          STRD     r9,r0,[sp,#0]         ;722
00017c  4b05              LDR      r3,|L318.404|
00017e  4a09              LDR      r2,|L318.420|
000180  4906              LDR      r1,|L318.412|
000182  2005              MOVS     r0,#5                 ;722
000184  f7fffffe          BL       _Anki_Log
000188  b003              ADD      sp,sp,#0xc
00018a  4807              LDR      r0,|L318.424|
00018c  e8bd8ff0          POP      {r4-r11,pc}
;;;751    
                          ENDP

                  |L318.400|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L318.404|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
                  |L318.408|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
                  |L318.412|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
                  |L318.416|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)
                  |L318.420|
                          DCD      _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEEs_3 ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 5)
                  |L318.424|
                          DCD      0x01000003

                          AREA ||area_number.319||, COMGROUP=_ZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.319||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE PROC ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
;;;256    
;;;257          template<typename InType, typename OutType> Result Multiply(const Array<InType> &in1, const Array<InType> &in2, Array<OutType> &out)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;258          {
;;;259            const s32 in1Height = in1.get_size(0);
000004  2100              MOVS     r1,#0
000006  ed2d8b10          VPUSH    {d8-d15}              ;258
00000a  b084              SUB      sp,sp,#0x10           ;258
00000c  9814              LDR      r0,[sp,#0x50]
00000e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
;;;260            const s32 in1Width = in1.get_size(1);
000012  9000              STR      r0,[sp,#0]
000014  2101              MOVS     r1,#1
000016  9814              LDR      r0,[sp,#0x50]
000018  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
00001c  4604              MOV      r4,r0
;;;261    
;;;262            const s32 in2Height = in2.get_size(0);
00001e  2100              MOVS     r1,#0
000020  9815              LDR      r0,[sp,#0x54]
000022  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
000026  4681              MOV      r9,r0
;;;263            const s32 in2Width = in2.get_size(1);
000028  2101              MOVS     r1,#1
00002a  9815              LDR      r0,[sp,#0x54]
00002c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
000030  9001              STR      r0,[sp,#4]
000032  9815              LDR      r0,[sp,#0x54]
;;;264            const s32 in2Stride = in2.get_stride();
;;;265    
;;;266            AnkiConditionalErrorAndReturnValue(in1Width == in2Height,
000034  f8df81b0          LDR      r8,|L325.488|
000038  454c              CMP      r4,r9
00003a  6886              LDR      r6,[r0,#8]
00003c  d011              BEQ      |L325.98|
00003e  f44f7085          MOV      r0,#0x10a
000042  e9cd8000          STRD     r8,r0,[sp,#0]
000046  4b69              LDR      r3,|L325.492|
000048  4a69              LDR      r2,|L325.496|
00004a  496a              LDR      r1,|L325.500|
00004c  2005              MOVS     r0,#5
00004e  f7fffffe          BL       _Anki_Log
000052  f04f60a0          MOV      r0,#0x5000000
                  |L325.86|
;;;267              RESULT_FAIL_INVALID_SIZE, "Multiply", "Input matrices are incompatible sizes");
;;;268    
;;;269            AnkiConditionalErrorAndReturnValue(AreEqualSize(in1Height, in2Width, out),
;;;270              RESULT_FAIL_INVALID_SIZE, "Multiply", "Input and Output matrices are incompatible sizes");
;;;271    
;;;272            for(s32 y1=0; y1<in1Height; y1++) {
;;;273              const InType * restrict pIn1 = in1.Pointer(y1, 0);
;;;274              OutType * restrict pOut = out.Pointer(y1, 0);
;;;275    
;;;276              for(s32 x2=0; x2<in2Width; x2++) {
;;;277                const u8 * restrict pIn2 = reinterpret_cast<const u8*>(in2.Pointer(0, x2));
;;;278    
;;;279                OutType accumulator = 0;
;;;280    
;;;281                s32 y2;
;;;282                for(y2=0; y2<in2Height-3; y2+=4) {
;;;283                  const InType in1_0 = pIn1[y2];
;;;284                  const InType in1_1 = pIn1[y2+1];
;;;285                  const InType in1_2 = pIn1[y2+2];
;;;286                  const InType in1_3 = pIn1[y2+3];
;;;287    
;;;288                  const InType in2_0 = *reinterpret_cast<const InType*>(pIn2);
;;;289                  const InType in2_1 = *reinterpret_cast<const InType*>(pIn2 + in2Stride);
;;;290                  const InType in2_2 = *reinterpret_cast<const InType*>(pIn2 + 2*in2Stride);
;;;291                  const InType in2_3 = *reinterpret_cast<const InType*>(pIn2 + 3*in2Stride);
;;;292    
;;;293                  accumulator +=
;;;294                    in1_0 * in2_0 +
;;;295                    in1_1 * in2_1 +
;;;296                    in1_2 * in2_2 +
;;;297                    in1_3 * in2_3;
;;;298    
;;;299                  pIn2 += 4*in2Stride;
;;;300                }
;;;301    
;;;302                for(; y2<in2Height; y2++) {
;;;303                  accumulator += pIn1[y2] * (*reinterpret_cast<const InType*>(pIn2));
;;;304    
;;;305                  pIn2 += in2Stride;
;;;306                }
;;;307    
;;;308                pOut[x2] = accumulator;
;;;309              }
;;;310            }
;;;311    
;;;312            return RESULT_OK;
;;;313          } // template<typename InType, typename OutType> Result Multiply(const Array<InType> &in1, const Array<InType> &in2, Array<OutType> &out)
000056  b004              ADD      sp,sp,#0x10
000058  ecbd8b10          VPOP     {d8-d15}
00005c  b003              ADD      sp,sp,#0xc
00005e  e8bd8ff0          POP      {r4-r11,pc}
                  |L325.98|
000062  9c16              LDR      r4,[sp,#0x58]
000064  e9dd7500          LDRD     r7,r5,[sp,#0]
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
00006e  2800              CMP      r0,#0
000070  d07e              BEQ      |L325.368|
000072  2100              MOVS     r1,#0
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
00007a  42b8              CMP      r0,r7
00007c  d178              BNE      |L325.368|
00007e  2101              MOVS     r1,#1
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
000086  42a8              CMP      r0,r5
000088  d172              BNE      |L325.368|
00008a  9800              LDR      r0,[sp,#0]            ;272
00008c  f04f0b00          MOV      r11,#0                ;272
000090  2800              CMP      r0,#0                 ;272
000092  dd6e              BLE      |L325.370|
000094  eb060046          ADD      r0,r6,r6,LSL #1       ;291
000098  f1a90a03          SUB      r10,r9,#3             ;282
00009c  9003              STR      r0,[sp,#0xc]          ;291
                  |L325.158|
00009e  9814              LDR      r0,[sp,#0x50]         ;291
0000a0  2700              MOVS     r7,#0                 ;276
0000a2  6901              LDR      r1,[r0,#0x10]         ;276
0000a4  6880              LDR      r0,[r0,#8]            ;276
0000a6  fb0b1800          MLA      r8,r11,r0,r1          ;276
0000aa  9816              LDR      r0,[sp,#0x58]         ;276
0000ac  6901              LDR      r1,[r0,#0x10]         ;276
0000ae  6880              LDR      r0,[r0,#8]            ;276
0000b0  fb0b1000          MLA      r0,r11,r0,r1          ;276
0000b4  9002              STR      r0,[sp,#8]            ;276
0000b6  9801              LDR      r0,[sp,#4]            ;276
0000b8  2800              CMP      r0,#0                 ;276
0000ba  dd7d              BLE      |L325.440|
                  |L325.188|
0000bc  9915              LDR      r1,[sp,#0x54]         ;276
0000be  2000              MOVS     r0,#0                 ;277
0000c0  690a              LDR      r2,[r1,#0x10]         ;277
0000c2  6889              LDR      r1,[r1,#8]            ;277
0000c4  fb002001          MLA      r0,r0,r1,r2           ;277
0000c8  eb0004c7          ADD      r4,r0,r7,LSL #3       ;277
0000cc  ed9f8b4a          VLDR     d8,|L325.504|
0000d0  2500              MOVS     r5,#0                 ;282
0000d2  f1ba0f00          CMP      r10,#0                ;282
0000d6  dd4e              BLE      |L325.374|
                  |L325.216|
0000d8  eb0800c5          ADD      r0,r8,r5,LSL #3       ;283
0000dc  ed94cb00          VLDR     d12,[r4,#0]           ;288
0000e0  ed90db00          VLDR     d13,[r0,#0]           ;283
0000e4  ed90eb02          VLDR     d14,[r0,#8]           ;284
0000e8  ed90fb04          VLDR     d15,[r0,#0x10]        ;285
0000ec  ed901b06          VLDR     d1,[r0,#0x18]         ;286
0000f0  19a0              ADDS     r0,r4,r6              ;289
0000f2  ed909b00          VLDR     d9,[r0,#0]            ;289
0000f6  eb040046          ADD      r0,r4,r6,LSL #1       ;290
0000fa  ed90bb00          VLDR     d11,[r0,#0]           ;290
0000fe  9803              LDR      r0,[sp,#0xc]          ;291
000100  4420              ADD      r0,r0,r4              ;291
000102  ed900b00          VLDR     d0,[r0,#0]            ;291
000106  ec510b11          VMOV     r0,r1,d1              ;293
00010a  ec532b10          VMOV     r2,r3,d0              ;293
00010e  f7fffffe          BL       __aeabi_dmul
000112  ec410b1a          VMOV     d10,r0,r1             ;293
000116  ec532b1b          VMOV     r2,r3,d11             ;293
00011a  ec510b1f          VMOV     r0,r1,d15             ;293
00011e  f7fffffe          BL       __aeabi_dmul
000122  ec410b1b          VMOV     d11,r0,r1             ;293
000126  ec532b19          VMOV     r2,r3,d9              ;293
00012a  ec510b1e          VMOV     r0,r1,d14             ;293
00012e  f7fffffe          BL       __aeabi_dmul
000132  ec410b19          VMOV     d9,r0,r1              ;293
000136  ec532b1c          VMOV     r2,r3,d12             ;293
00013a  ec510b1d          VMOV     r0,r1,d13             ;293
00013e  f7fffffe          BL       __aeabi_dmul
000142  ec532b19          VMOV     r2,r3,d9              ;293
000146  f7fffffe          BL       __aeabi_dadd
00014a  ec532b1b          VMOV     r2,r3,d11             ;293
00014e  f7fffffe          BL       __aeabi_dadd
000152  ec532b1a          VMOV     r2,r3,d10             ;293
000156  f7fffffe          BL       __aeabi_dadd
00015a  ec532b18          VMOV     r2,r3,d8              ;293
00015e  f7fffffe          BL       __aeabi_dadd
000162  1d2d              ADDS     r5,r5,#4              ;299
000164  ec410b18          VMOV     d8,r0,r1              ;293
000168  eb040486          ADD      r4,r4,r6,LSL #2       ;299
00016c  45aa              CMP      r10,r5                ;282
00016e  e001              B        |L325.372|
                  |L325.368|
000170  e02d              B        |L325.462|
                  |L325.370|
000172  e02a              B        |L325.458|
                  |L325.372|
000174  dcb0              BGT      |L325.216|
                  |L325.374|
000176  454d              CMP      r5,r9                 ;302
000178  da15              BGE      |L325.422|
                  |L325.378|
00017a  eb0800c5          ADD      r0,r8,r5,LSL #3       ;303
00017e  ed941b00          VLDR     d1,[r4,#0]            ;303
000182  ed900b00          VLDR     d0,[r0,#0]            ;303
000186  ec532b11          VMOV     r2,r3,d1              ;303
00018a  ec510b10          VMOV     r0,r1,d0              ;303
00018e  f7fffffe          BL       __aeabi_dmul
000192  ec532b18          VMOV     r2,r3,d8              ;303
000196  f7fffffe          BL       __aeabi_dadd
00019a  ec410b18          VMOV     d8,r0,r1              ;303
00019e  1c6d              ADDS     r5,r5,#1              ;305
0001a0  4434              ADD      r4,r4,r6              ;305
0001a2  454d              CMP      r5,r9                 ;302
0001a4  dbe9              BLT      |L325.378|
                  |L325.422|
0001a6  9802              LDR      r0,[sp,#8]            ;308
0001a8  eb0000c7          ADD      r0,r0,r7,LSL #3       ;308
0001ac  1c7f              ADDS     r7,r7,#1              ;276
0001ae  ed808b00          VSTR     d8,[r0,#0]            ;308
0001b2  9801              LDR      r0,[sp,#4]            ;276
0001b4  4287              CMP      r7,r0                 ;276
0001b6  e000              B        |L325.442|
                  |L325.440|
0001b8  e001              B        |L325.446|
                  |L325.442|
0001ba  f6ffaf7f          BLT      |L325.188|
                  |L325.446|
0001be  9800              LDR      r0,[sp,#0]            ;272
0001c0  f10b0b01          ADD      r11,r11,#1            ;272
0001c4  4583              CMP      r11,r0                ;272
0001c6  f6ffaf6a          BLT      |L325.158|
                  |L325.458|
0001ca  2000              MOVS     r0,#0                 ;312
0001cc  e743              B        |L325.86|
                  |L325.462|
0001ce  f240100d          MOV      r0,#0x10d             ;269
0001d2  e9cd8000          STRD     r8,r0,[sp,#0]         ;269
0001d6  4b05              LDR      r3,|L325.492|
0001d8  4a09              LDR      r2,|L325.512|
0001da  4906              LDR      r1,|L325.500|
0001dc  2005              MOVS     r0,#5                 ;269
0001de  f7fffffe          BL       _Anki_Log
0001e2  f04f60a0          MOV      r0,#0x5000000         ;269
0001e6  e736              B        |L325.86|
;;;314    
                          ENDP

                  |L325.488|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L325.492|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_1 ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 3)
                  |L325.496|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_0 ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 2)
                  |L325.500|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string
                  |L325.504|
0001f8  00000000          DCFD     0x0000000000000000 ; 0
0001fc  00000000
                  |L325.512|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEEs_2 ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::string (instance 4)

                          AREA ||area_number.326||, COMGROUP=_ZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.326||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded3P3P12solveQuarticIfEENS_6ResultEPKT_PS4_||, COMGROUP=_ZN4Anki8Embedded3P3P12solveQuarticIfEENS_6ResultEPKT_PS4_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded3P3P12solveQuarticIfEENS_6ResultEPKT_PS4_ PROC ; Anki::Embedded::P3P::solveQuartic<float>(const T1*, T1*)
;;;77           template<typename PRECISION>
;;;78           Result solveQuartic(const PRECISION* factors, //const Array<PRECISION>& factors,  // 1x5
000000  b510              PUSH     {r4,lr}
;;;79             PRECISION* realRoots) //Array<PRECISION>& realRoots)      // 1x4
;;;80           {
;;;81             //AnkiAssert(factors.get_size(0) == 1 && factors.get_size(1) == 5);
;;;82             //AnkiAssert(realRoots.get_size(0) == 1 && realRoots.get_size(1) == 4);
;;;83     
;;;84             PRECISION A = factors[0];
;;;85             PRECISION B = factors[1];
;;;86             PRECISION C = factors[2];
;;;87             PRECISION D = factors[3];
;;;88             PRECISION E = factors[4];
;;;89     
;;;90             PRECISION A_pw2 = A*A;
;;;91             PRECISION B_pw2 = B*B;
;;;92             PRECISION A_pw3 = A_pw2*A;
;;;93             PRECISION B_pw3 = B_pw2*B;
;;;94             PRECISION A_pw4 = A_pw3*A;
;;;95             PRECISION B_pw4 = B_pw3*B;
;;;96     
;;;97             PRECISION alpha = -3*B_pw2/(8*A_pw2)+C/A;
000002  eef80a08          VMOV.F32 s1,#-3.00000000
000006  ed2d8b0c          VPUSH    {d8-d13}              ;80
;;;98             PRECISION beta = B_pw3/(8*A_pw3)-B*C/(2*A_pw2)+D/A;
00000a  eef09a00          VMOV.F32 s19,#2.00000000
00000e  b0e4              SUB      sp,sp,#0x190          ;80
000010  460c              MOV      r4,r1                 ;80
000012  edd08a01          VLDR     s17,[r0,#4]           ;85
000016  ed908a00          VLDR     s16,[r0,#0]           ;84
00001a  ed902a02          VLDR     s4,[r0,#8]            ;86
00001e  ee681aa8          VMUL.F32 s3,s17,s17            ;91
000022  ee280a08          VMUL.F32 s0,s16,s16            ;90
000026  edd02a03          VLDR     s5,[r0,#0xc]          ;87
00002a  edd03a04          VLDR     s7,[r0,#0x10]         ;88
00002e  ee215aa0          VMUL.F32 s10,s3,s1             ;97
000032  eef20a00          VMOV.F32 s1,#8.00000000        ;97
000036  ee201a08          VMUL.F32 s2,s0,s16             ;92
00003a  ee605a20          VMUL.F32 s11,s0,s1             ;97
00003e  ee213aa8          VMUL.F32 s6,s3,s17             ;93
000042  ee614a08          VMUL.F32 s9,s2,s16             ;94
000046  eec50a25          VDIV.F32 s1,s10,s11            ;97
00004a  ee234a28          VMUL.F32 s8,s6,s17             ;95
00004e  ee825a08          VDIV.F32 s10,s4,s16            ;97
000052  ee700a85          VADD.F32 s1,s1,s10             ;97
000056  eeb25a00          VMOV.F32 s10,#8.00000000
00005a  ee615a05          VMUL.F32 s11,s2,s10
00005e  edcd0a0c          VSTR     s1,[sp,#0x30]         ;97
000062  ee835a25          VDIV.F32 s10,s6,s11
000066  ee283a82          VMUL.F32 s6,s17,s4
00006a  ee605a29          VMUL.F32 s11,s0,s19
00006e  ee836a25          VDIV.F32 s12,s6,s11
000072  ee353a46          VSUB.F32 s6,s10,s12
000076  ee825a88          VDIV.F32 s10,s5,s16
00007a  ee339a05          VADD.F32 s18,s6,s10
;;;99             PRECISION gamma = -3*B_pw4/(256*A_pw4)+B_pw2*C/(16*A_pw3)-B*D/(4*A_pw2)+E/A;
00007e  eeb83a08          VMOV.F32 s6,#-3.00000000
000082  ee244a03          VMUL.F32 s8,s8,s6
000086  ed9f3afe          VLDR     s6,|L332.1152|
00008a  ee611a82          VMUL.F32 s3,s3,s4
00008e  eeb32a00          VMOV.F32 s4,#16.00000000
000092  ee644a83          VMUL.F32 s9,s9,s6
000096  ee211a02          VMUL.F32 s2,s2,s4
00009a  eeb1aa00          VMOV.F32 s20,#4.00000000
00009e  ee843a24          VDIV.F32 s6,s8,s9
0000a2  ee200a0a          VMUL.F32 s0,s0,s20
0000a6  ee812a81          VDIV.F32 s4,s3,s2
0000aa  ee681aa2          VMUL.F32 s3,s17,s5
;;;100    
;;;101            PRECISION alpha_pw2 = alpha*alpha;
;;;102            PRECISION alpha_pw3 = alpha_pw2*alpha;
;;;103    
;;;104            // TODO: is std::complex kosher on embedded?
;;;105            std::complex<PRECISION> P (-alpha_pw2/12-gamma,0);
0000ae  eefa2a08          VMOV.F32 s5,#-12.00000000
0000b2  ee331a02          VADD.F32 s2,s6,s4              ;99
0000b6  ee812a80          VDIV.F32 s4,s3,s0              ;99
0000ba  ee310a42          VSUB.F32 s0,s2,s4              ;99
0000be  ee831a88          VDIV.F32 s2,s7,s16             ;99
0000c2  ee301a01          VADD.F32 s2,s0,s2              ;99
0000c6  ee200aa0          VMUL.F32 s0,s1,s1              ;101
0000ca  ee802a22          VDIV.F32 s4,s0,s5
0000ce  ee601a20          VMUL.F32 s3,s0,s1              ;102
0000d2  ee320a41          VSUB.F32 s0,s4,s2
0000d6  eddfbaeb          VLDR     s23,|L332.1156|
;;;106            std::complex<PRECISION> Q (-alpha_pw3/108+alpha*gamma/3-beta*beta/8,0);
0000da  ee600a81          VMUL.F32 s1,s1,s2
0000de  eeb0da08          VMOV.F32 s26,#3.00000000
0000e2  ed8d0a10          VSTR     s0,[sp,#0x40]
0000e6  edcdba11          VSTR     s23,[sp,#0x44]
0000ea  ee800a8d          VDIV.F32 s0,s1,s26
0000ee  eddf0ae6          VLDR     s1,|L332.1160|
0000f2  ee811aa0          VDIV.F32 s2,s3,s1
0000f6  ee690a09          VMUL.F32 s1,s18,s18
0000fa  ee300a41          VSUB.F32 s0,s0,s2
0000fe  eeb41a00          VMOV.F32 s2,#0.12500000
000102  ee000ac1          VMLS.F32 s0,s1,s2
000106  ed8d0a07          VSTR     s0,[sp,#0x1c]
00010a  edcdba0d          VSTR     s23,[sp,#0x34]
00010e  ed8d0a14          VSTR     s0,[sp,#0x50]
000112  edcdba15          VSTR     s23,[sp,#0x54]
000116  eeb10a40          VNEG.F32 s0,s0
00011a  eddfaadc          VLDR     s21,|L332.1164|
00011e  ed8d0a0a          VSTR     s0,[sp,#0x28]
000122  edcdaa0b          VSTR     s21,[sp,#0x2c]
;;;107            std::complex<PRECISION> R = -Q/PRECISION(2)+sqrt(pow(Q,PRECISION(2))/PRECISION(4)+pow(P,PRECISION(3))/PRECISION(27));
000126  eef00a00          VMOV.F32 s1,#2.00000000
00012a  edcd0a02          VSTR     s1,[sp,#8]
00012e  ee80ba20          VDIV.F32 s22,s0,s1
000132  eeb00a00          VMOV.F32 s0,#2.00000000
000136  a903              ADD      r1,sp,#0xc
000138  a814              ADD      r0,sp,#0x50
00013a  ed8dba0a          VSTR     s22,[sp,#0x28]
00013e  ed8d0a03          VSTR     s0,[sp,#0xc]
000142  f7fffffe          BL       _ZSt3powIfESt7complexIT_ERKS2_RKS1_ ; std::pow<float>(const std::complex<T1>&, const T1&)
000146  eeb01a4a          VMOV.F32 s2,s20
00014a  eec0ca8a          VDIV.F32 s25,s1,s20
00014e  ed8daa05          VSTR     s20,[sp,#0x14]
000152  a906              ADD      r1,sp,#0x18
000154  a810              ADD      r0,sp,#0x40
000156  ee80ca01          VDIV.F32 s24,s0,s2
00015a  ed8dca0a          VSTR     s24,[sp,#0x28]
00015e  edcdca0b          VSTR     s25,[sp,#0x2c]
000162  ed8dda06          VSTR     s26,[sp,#0x18]
000166  f7fffffe          BL       _ZSt3powIfESt7complexIT_ERKS2_RKS1_ ; std::pow<float>(const std::complex<T1>&, const T1&)
00016a  eeb31a0b          VMOV.F32 s2,#27.00000000
00016e  ed8d1a04          VSTR     s2,[sp,#0x10]
000172  eef01a41          VMOV.F32 s3,s2
000176  a832              ADD      r0,sp,#0xc8
000178  ee801a21          VDIV.F32 s2,s0,s3
00017c  ee800aa1          VDIV.F32 s0,s1,s3
000180  ed8d1a0a          VSTR     s2,[sp,#0x28]
000184  ee710a0c          VADD.F32 s1,s2,s24
000188  ed8d0a0b          VSTR     s0,[sp,#0x2c]
00018c  ed8dca0a          VSTR     s24,[sp,#0x28]
000190  ee300a2c          VADD.F32 s0,s0,s25
000194  edcdca0b          VSTR     s25,[sp,#0x2c]
000198  edcd0a0a          VSTR     s1,[sp,#0x28]
00019c  ed8d0a0b          VSTR     s0,[sp,#0x2c]
0001a0  edcd0a32          VSTR     s1,[sp,#0xc8]
0001a4  ed8d0a33          VSTR     s0,[sp,#0xcc]
0001a8  f7fffffe          BL       _ZSt4sqrtIfESt7complexIT_ERKS2_ ; std::sqrt<float>(const std::complex<T1>&)
0001ac  ee300a0b          VADD.F32 s0,s0,s22
0001b0  ed8dba0a          VSTR     s22,[sp,#0x28]
0001b4  ee700aaa          VADD.F32 s1,s1,s21
0001b8  edcdaa0b          VSTR     s21,[sp,#0x2c]
0001bc  ed8d0a0a          VSTR     s0,[sp,#0x28]
0001c0  edcd0a0b          VSTR     s1,[sp,#0x2c]
0001c4  ed8d0a42          VSTR     s0,[sp,#0x108]
0001c8  edcd0a43          VSTR     s1,[sp,#0x10c]
;;;108    
;;;109            std::complex<PRECISION> U = pow(R,PRECISION(1.0/3.0));
0001cc  ed9fbab0          VLDR     s22,|L332.1168|
0001d0  a904              ADD      r1,sp,#0x10
0001d2  ed8dba04          VSTR     s22,[sp,#0x10]
0001d6  a842              ADD      r0,sp,#0x108
0001d8  f7fffffe          BL       _ZSt3powIfESt7complexIT_ERKS2_RKS1_ ; std::pow<float>(const std::complex<T1>&, const T1&)
0001dc  ed8d0a12          VSTR     s0,[sp,#0x48]
0001e0  edcd0a13          VSTR     s1,[sp,#0x4c]
;;;110            std::complex<PRECISION> y;
0001e4  edcdba04          VSTR     s23,[sp,#0x10]
0001e8  edcdba06          VSTR     s23,[sp,#0x18]
0001ec  eddd0a04          VLDR     s1,[sp,#0x10]
;;;111    
;;;112            if (U.real() == 0) {
0001f0  eeb50ac0          VCMPE.F32 s0,#0.0
0001f4  edcd0a00          VSTR     s1,[sp,#0]
;;;113              y = -PRECISION(5)*alpha/PRECISION(6)-pow(Q,PRECISION(1.0/3.0));
0001f8  eeb91a04          VMOV.F32 s2,#-5.00000000
0001fc  eef10a08          VMOV.F32 s1,#6.00000000
000200  edcdba01          VSTR     s23,[sp,#4]
000204  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;112
;;;114            } else {
;;;115              y = -PRECISION(5)*alpha/PRECISION(6)-P/(PRECISION(3)*U)+U;
000208  ed9d0a0c          VLDR     s0,[sp,#0x30]
00020c  ee200a01          VMUL.F32 s0,s0,s2
000210  eec0aa20          VDIV.F32 s21,s0,s1
000214  d112              BNE      |L332.572|
000216  ed8dba62          VSTR     s22,[sp,#0x188]       ;113
00021a  a962              ADD      r1,sp,#0x188          ;113
00021c  a814              ADD      r0,sp,#0x50           ;113
00021e  f7fffffe          BL       _ZSt3powIfESt7complexIT_ERKS2_RKS1_ ; std::pow<float>(const std::complex<T1>&, const T1&)
000222  ee3a0ac0          VSUB.F32 s0,s21,s0             ;113
000226  eef10a60          VNEG.F32 s1,s1                 ;113
00022a  ed8d0a0a          VSTR     s0,[sp,#0x28]         ;113
00022e  edcd0a0b          VSTR     s1,[sp,#0x2c]         ;113
000232  ed8d0a00          VSTR     s0,[sp,#0]            ;113
000236  edcd0a01          VSTR     s1,[sp,#4]            ;113
00023a  e03d              B        |L332.696|
                  |L332.572|
00023c  eeb00a08          VMOV.F32 s0,#3.00000000
000240  ed8d0a62          VSTR     s0,[sp,#0x188]
000244  a912              ADD      r1,sp,#0x48
000246  a862              ADD      r0,sp,#0x188
000248  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
00024c  e9dd0110          LDRD     r0,r1,[sp,#0x40]
000250  ee020a90          VMOV     s5,r0
000254  ee201a00          VMUL.F32 s2,s0,s0
000258  ee021a10          VMOV     s4,r1
00025c  ee203a22          VMUL.F32 s6,s0,s5
000260  e9cd010a          STRD     r0,r1,[sp,#0x28]
000264  ee001aa0          VMLA.F32 s2,s1,s1
000268  ee023a20          VMLA.F32 s6,s4,s1
00026c  ee202a02          VMUL.F32 s4,s0,s4
000270  ee022ae0          VMLS.F32 s4,s5,s1
000274  eec31a01          VDIV.F32 s3,s6,s2
000278  ee820a01          VDIV.F32 s0,s4,s2
00027c  edcd1a0a          VSTR     s3,[sp,#0x28]
000280  ee7a0ae1          VSUB.F32 s1,s21,s3
000284  ed8d0a0b          VSTR     s0,[sp,#0x2c]
000288  eeb10a40          VNEG.F32 s0,s0
00028c  edcd0a0a          VSTR     s1,[sp,#0x28]
000290  ed8d0a0b          VSTR     s0,[sp,#0x2c]
000294  ed9d0a12          VLDR     s0,[sp,#0x48]
000298  ee300a20          VADD.F32 s0,s0,s1
00029c  ed8d0a0a          VSTR     s0,[sp,#0x28]
0002a0  eddd0a13          VLDR     s1,[sp,#0x4c]
0002a4  ed9d1a0b          VLDR     s2,[sp,#0x2c]
0002a8  ee700a81          VADD.F32 s1,s1,s2
0002ac  edcd0a0b          VSTR     s1,[sp,#0x2c]
0002b0  ed8d0a00          VSTR     s0,[sp,#0]
0002b4  edcd0a01          VSTR     s1,[sp,#4]
                  |L332.696|
;;;116            }
;;;117    
;;;118            std::complex<PRECISION> w = sqrt(alpha+PRECISION(2)*y);
0002b8  edcd9a04          VSTR     s19,[sp,#0x10]
0002bc  4669              MOV      r1,sp
0002be  a804              ADD      r0,sp,#0x10
0002c0  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
0002c4  ed8d0a48          VSTR     s0,[sp,#0x120]
0002c8  edcd0a49          VSTR     s1,[sp,#0x124]
0002cc  a948              ADD      r1,sp,#0x120
0002ce  a80c              ADD      r0,sp,#0x30
0002d0  f7fffffe          BL       _ZStplIfESt7complexIT_ERKS1_RKS2_ ; std::operator +<float>(const T1&, const std::complex<T1>&)
0002d4  ed8d0a46          VSTR     s0,[sp,#0x118]
0002d8  edcd0a47          VSTR     s1,[sp,#0x11c]
0002dc  a846              ADD      r0,sp,#0x118
0002de  f7fffffe          BL       _ZSt4sqrtIfESt7complexIT_ERKS2_ ; std::sqrt<float>(const std::complex<T1>&)
0002e2  ed8d0a0e          VSTR     s0,[sp,#0x38]
0002e6  edcd0a0f          VSTR     s1,[sp,#0x3c]
;;;119    
;;;120            std::complex<PRECISION> temp;
0002ea  edcdba04          VSTR     s23,[sp,#0x10]
0002ee  ed9f0a65          VLDR     s0,|L332.1156|
;;;121    
;;;122            temp = -B/(PRECISION(4)*A) + PRECISION(0.5)*(w+sqrt(-(PRECISION(3)*alpha+PRECISION(2)*y+PRECISION(2)*beta/w)));
0002f2  4669              MOV      r1,sp
0002f4  ed8d0a06          VSTR     s0,[sp,#0x18]         ;120
0002f8  edcdba08          VSTR     s23,[sp,#0x20]        ;120
0002fc  ed9d0a06          VLDR     s0,[sp,#0x18]         ;120
000300  a80d              ADD      r0,sp,#0x34
000302  ed8d0a09          VSTR     s0,[sp,#0x24]
000306  edcd9a0d          VSTR     s19,[sp,#0x34]
00030a  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
00030e  ed8d0a3a          VSTR     s0,[sp,#0xe8]
000312  edcd0a3b          VSTR     s1,[sp,#0xec]
000316  ed9d0a0c          VLDR     s0,[sp,#0x30]
00031a  eef0aa08          VMOV.F32 s21,#3.00000000
00031e  a93a              ADD      r1,sp,#0xe8
000320  ee200a2a          VMUL.F32 s0,s0,s21
000324  a802              ADD      r0,sp,#8
000326  ed8d0a02          VSTR     s0,[sp,#8]
00032a  f7fffffe          BL       _ZStplIfESt7complexIT_ERKS1_RKS2_ ; std::operator +<float>(const T1&, const std::complex<T1>&)
00032e  ee299a29          VMUL.F32 s18,s18,s19
000332  ed8d0a20          VSTR     s0,[sp,#0x80]
000336  edcd0a21          VSTR     s1,[sp,#0x84]
00033a  ed8d9a07          VSTR     s18,[sp,#0x1c]
00033e  a90e              ADD      r1,sp,#0x38
000340  a807              ADD      r0,sp,#0x1c
000342  f7fffffe          BL       _ZStdvIfESt7complexIT_ERKS1_RKS2_ ; std::operator /<float>(const T1&, const std::complex<T1>&)
000346  ed8d0a4c          VSTR     s0,[sp,#0x130]
00034a  edcd0a4d          VSTR     s1,[sp,#0x134]
00034e  e9dd0120          LDRD     r0,r1,[sp,#0x80]
000352  ee010a10          VMOV     s2,r0
000356  e9cd010a          STRD     r0,r1,[sp,#0x28]
00035a  a838              ADD      r0,sp,#0xe0
00035c  ee300a01          VADD.F32 s0,s0,s2
000360  ee011a10          VMOV     s2,r1
000364  ed8d0a0a          VSTR     s0,[sp,#0x28]
000368  ee700a81          VADD.F32 s1,s1,s2
00036c  edcd0a0b          VSTR     s1,[sp,#0x2c]
000370  ed8d0a58          VSTR     s0,[sp,#0x160]
000374  edcd0a59          VSTR     s1,[sp,#0x164]
000378  eeb10a40          VNEG.F32 s0,s0
00037c  eef10a60          VNEG.F32 s1,s1
000380  ed8d0a0a          VSTR     s0,[sp,#0x28]
000384  edcd0a0b          VSTR     s1,[sp,#0x2c]
000388  ed8d0a38          VSTR     s0,[sp,#0xe0]
00038c  edcd0a39          VSTR     s1,[sp,#0xe4]
000390  f7fffffe          BL       _ZSt4sqrtIfESt7complexIT_ERKS2_ ; std::sqrt<float>(const std::complex<T1>&)
000394  ed8d0a56          VSTR     s0,[sp,#0x158]
000398  edcd0a57          VSTR     s1,[sp,#0x15c]
00039c  e9dd010e          LDRD     r0,r1,[sp,#0x38]
0003a0  ee010a10          VMOV     s2,r0
0003a4  e9cd010a          STRD     r0,r1,[sp,#0x28]
0003a8  eeb6ba00          VMOV.F32 s22,#0.50000000
0003ac  ee300a01          VADD.F32 s0,s0,s2
0003b0  ee011a10          VMOV     s2,r1
0003b4  a936              ADD      r1,sp,#0xd8
0003b6  ed8d0a0a          VSTR     s0,[sp,#0x28]
0003ba  ee700a81          VADD.F32 s1,s1,s2
0003be  a803              ADD      r0,sp,#0xc
0003c0  edcd0a0b          VSTR     s1,[sp,#0x2c]
0003c4  ed8d0a36          VSTR     s0,[sp,#0xd8]
0003c8  edcd0a37          VSTR     s1,[sp,#0xdc]
0003cc  ed8dba03          VSTR     s22,[sp,#0xc]
0003d0  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
0003d4  ed8d0a34          VSTR     s0,[sp,#0xd0]
0003d8  ee280a0a          VMUL.F32 s0,s16,s20
0003dc  edcd0a35          VSTR     s1,[sp,#0xd4]
0003e0  eef10a68          VNEG.F32 s1,s17
0003e4  a934              ADD      r1,sp,#0xd0
0003e6  ee808a80          VDIV.F32 s16,s1,s0
0003ea  a805              ADD      r0,sp,#0x14
0003ec  ed8d8a05          VSTR     s16,[sp,#0x14]
0003f0  f7fffffe          BL       _ZStplIfESt7complexIT_ERKS1_RKS2_ ; std::operator +<float>(const T1&, const std::complex<T1>&)
0003f4  ed8d0a08          VSTR     s0,[sp,#0x20]
0003f8  edcd0a09          VSTR     s1,[sp,#0x24]
;;;123            realRoots[0] = temp.real();
0003fc  ed840a00          VSTR     s0,[r4,#0]
;;;124            temp = -B/(PRECISION(4)*A) + PRECISION(0.5)*(w-sqrt(-(PRECISION(3)*alpha+PRECISION(2)*y+PRECISION(2)*beta/w)));
000400  edcd9a03          VSTR     s19,[sp,#0xc]
000404  4669              MOV      r1,sp
000406  a803              ADD      r0,sp,#0xc
000408  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
00040c  ed8d0a3e          VSTR     s0,[sp,#0xf8]
000410  edcd0a3f          VSTR     s1,[sp,#0xfc]
000414  ed9d0a0c          VLDR     s0,[sp,#0x30]
000418  a93e              ADD      r1,sp,#0xf8
00041a  a805              ADD      r0,sp,#0x14
00041c  ee200a2a          VMUL.F32 s0,s0,s21
000420  ed8d0a05          VSTR     s0,[sp,#0x14]
000424  f7fffffe          BL       _ZStplIfESt7complexIT_ERKS1_RKS2_ ; std::operator +<float>(const T1&, const std::complex<T1>&)
000428  ed8d0a18          VSTR     s0,[sp,#0x60]
00042c  edcd0a19          VSTR     s1,[sp,#0x64]
000430  ed8d9a02          VSTR     s18,[sp,#8]
000434  a90e              ADD      r1,sp,#0x38
000436  a802              ADD      r0,sp,#8
000438  f7fffffe          BL       _ZStdvIfESt7complexIT_ERKS1_RKS2_ ; std::operator /<float>(const T1&, const std::complex<T1>&)
00043c  ed8d0a4e          VSTR     s0,[sp,#0x138]
000440  edcd0a4f          VSTR     s1,[sp,#0x13c]
000444  e9dd0118          LDRD     r0,r1,[sp,#0x60]
000448  ee010a10          VMOV     s2,r0
00044c  e9cd010a          STRD     r0,r1,[sp,#0x28]
000450  ee300a01          VADD.F32 s0,s0,s2
000454  ee011a10          VMOV     s2,r1
000458  ed8d0a0a          VSTR     s0,[sp,#0x28]
00045c  ee700a81          VADD.F32 s1,s1,s2
000460  edcd0a0b          VSTR     s1,[sp,#0x2c]
000464  ed8d0a5c          VSTR     s0,[sp,#0x170]
000468  edcd0a5d          VSTR     s1,[sp,#0x174]
00046c  eeb10a40          VNEG.F32 s0,s0
000470  eef10a60          VNEG.F32 s1,s1
000474  ed8d0a0a          VSTR     s0,[sp,#0x28]
000478  edcd0a0b          VSTR     s1,[sp,#0x2c]
00047c  e00a              B        |L332.1172|
00047e  0000              DCW      0x0000
                  |L332.1152|
000480  43800000          DCFS     0x43800000 ; 256
                  |L332.1156|
000484  00000000          DCFS     0x00000000 ; 0
                  |L332.1160|
000488  42d80000          DCFS     0x42d80000 ; 108
                  |L332.1164|
00048c  80000000          DCFS     0x80000000 ; -0
                  |L332.1168|
000490  3eaaaaab          DCFS     0x3eaaaaab ; 0.3333333432674408
                  |L332.1172|
000494  ed8d0a3c          VSTR     s0,[sp,#0xf0]
000498  edcd0a3d          VSTR     s1,[sp,#0xf4]
00049c  a83c              ADD      r0,sp,#0xf0
00049e  f7fffffe          BL       _ZSt4sqrtIfESt7complexIT_ERKS2_ ; std::sqrt<float>(const std::complex<T1>&)
0004a2  ed8d0a5a          VSTR     s0,[sp,#0x168]
0004a6  edcd0a5b          VSTR     s1,[sp,#0x16c]
0004aa  e9dd010e          LDRD     r0,r1,[sp,#0x38]
0004ae  ee010a10          VMOV     s2,r0
0004b2  e9cd010a          STRD     r0,r1,[sp,#0x28]
0004b6  a806              ADD      r0,sp,#0x18
0004b8  ee310a40          VSUB.F32 s0,s2,s0
0004bc  ee011a10          VMOV     s2,r1
0004c0  a924              ADD      r1,sp,#0x90
0004c2  ed8d0a0a          VSTR     s0,[sp,#0x28]
0004c6  ee710a60          VSUB.F32 s1,s2,s1
0004ca  edcd0a0b          VSTR     s1,[sp,#0x2c]
0004ce  ed8d0a24          VSTR     s0,[sp,#0x90]
0004d2  edcd0a25          VSTR     s1,[sp,#0x94]
0004d6  ed8dba06          VSTR     s22,[sp,#0x18]
0004da  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
0004de  ed8d0a22          VSTR     s0,[sp,#0x88]
0004e2  edcd0a23          VSTR     s1,[sp,#0x8c]
0004e6  ed8d8a04          VSTR     s16,[sp,#0x10]
0004ea  a922              ADD      r1,sp,#0x88
0004ec  a804              ADD      r0,sp,#0x10
0004ee  f7fffffe          BL       _ZStplIfESt7complexIT_ERKS1_RKS2_ ; std::operator +<float>(const T1&, const std::complex<T1>&)
0004f2  ed8d0a08          VSTR     s0,[sp,#0x20]
0004f6  edcd0a09          VSTR     s1,[sp,#0x24]
;;;125            realRoots[1] = temp.real();
0004fa  ed840a01          VSTR     s0,[r4,#4]
0004fe  ed9d0a0e          VLDR     s0,[sp,#0x38]
000502  eddd0a0f          VLDR     s1,[sp,#0x3c]
;;;126            temp = -B/(PRECISION(4)*A) + PRECISION(0.5)*(-w+sqrt(-(PRECISION(3)*alpha+PRECISION(2)*y-PRECISION(2)*beta/w)));
000506  4669              MOV      r1,sp
000508  eeb10a40          VNEG.F32 s0,s0
00050c  eef10a60          VNEG.F32 s1,s1
000510  ed8d0a0a          VSTR     s0,[sp,#0x28]
000514  edcd0a0b          VSTR     s1,[sp,#0x2c]
000518  ed8d0a1c          VSTR     s0,[sp,#0x70]
00051c  edcd0a1d          VSTR     s1,[sp,#0x74]
000520  edcd9a03          VSTR     s19,[sp,#0xc]
000524  a803              ADD      r0,sp,#0xc
000526  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
00052a  ed8d0a30          VSTR     s0,[sp,#0xc0]
00052e  edcd0a31          VSTR     s1,[sp,#0xc4]
000532  ed9d0a0c          VLDR     s0,[sp,#0x30]
000536  a930              ADD      r1,sp,#0xc0
000538  a805              ADD      r0,sp,#0x14
00053a  ee200a2a          VMUL.F32 s0,s0,s21
00053e  ed8d0a05          VSTR     s0,[sp,#0x14]
000542  f7fffffe          BL       _ZStplIfESt7complexIT_ERKS1_RKS2_ ; std::operator +<float>(const T1&, const std::complex<T1>&)
000546  ed8d0a16          VSTR     s0,[sp,#0x58]
00054a  edcd0a17          VSTR     s1,[sp,#0x5c]
00054e  ed8d9a02          VSTR     s18,[sp,#8]
000552  a90e              ADD      r1,sp,#0x38
000554  a802              ADD      r0,sp,#8
000556  f7fffffe          BL       _ZStdvIfESt7complexIT_ERKS1_RKS2_ ; std::operator /<float>(const T1&, const std::complex<T1>&)
00055a  ed8d0a4a          VSTR     s0,[sp,#0x128]
00055e  edcd0a4b          VSTR     s1,[sp,#0x12c]
000562  e9dd0116          LDRD     r0,r1,[sp,#0x58]
000566  ee010a10          VMOV     s2,r0
00056a  e9cd010a          STRD     r0,r1,[sp,#0x28]
00056e  a82e              ADD      r0,sp,#0xb8
000570  ee310a40          VSUB.F32 s0,s2,s0
000574  ee011a10          VMOV     s2,r1
000578  ed8d0a0a          VSTR     s0,[sp,#0x28]
00057c  ee710a60          VSUB.F32 s1,s2,s1
000580  edcd0a0b          VSTR     s1,[sp,#0x2c]
000584  ed8d0a52          VSTR     s0,[sp,#0x148]
000588  edcd0a53          VSTR     s1,[sp,#0x14c]
00058c  eeb10a40          VNEG.F32 s0,s0
000590  eef10a60          VNEG.F32 s1,s1
000594  ed8d0a0a          VSTR     s0,[sp,#0x28]
000598  edcd0a0b          VSTR     s1,[sp,#0x2c]
00059c  ed8d0a2e          VSTR     s0,[sp,#0xb8]
0005a0  edcd0a2f          VSTR     s1,[sp,#0xbc]
0005a4  f7fffffe          BL       _ZSt4sqrtIfESt7complexIT_ERKS2_ ; std::sqrt<float>(const std::complex<T1>&)
0005a8  ed8d0a50          VSTR     s0,[sp,#0x140]
0005ac  edcd0a51          VSTR     s1,[sp,#0x144]
0005b0  e9dd011c          LDRD     r0,r1,[sp,#0x70]
0005b4  ee010a10          VMOV     s2,r0
0005b8  e9cd010a          STRD     r0,r1,[sp,#0x28]
0005bc  a806              ADD      r0,sp,#0x18
0005be  ee300a01          VADD.F32 s0,s0,s2
0005c2  ee011a10          VMOV     s2,r1
0005c6  a928              ADD      r1,sp,#0xa0
0005c8  ed8d0a0a          VSTR     s0,[sp,#0x28]
0005cc  ee700a81          VADD.F32 s1,s1,s2
0005d0  edcd0a0b          VSTR     s1,[sp,#0x2c]
0005d4  ed8d0a28          VSTR     s0,[sp,#0xa0]
0005d8  edcd0a29          VSTR     s1,[sp,#0xa4]
0005dc  ed8dba06          VSTR     s22,[sp,#0x18]
0005e0  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
0005e4  ed8d0a26          VSTR     s0,[sp,#0x98]
0005e8  edcd0a27          VSTR     s1,[sp,#0x9c]
0005ec  ed8d8a04          VSTR     s16,[sp,#0x10]
0005f0  a926              ADD      r1,sp,#0x98
0005f2  a804              ADD      r0,sp,#0x10
0005f4  f7fffffe          BL       _ZStplIfESt7complexIT_ERKS1_RKS2_ ; std::operator +<float>(const T1&, const std::complex<T1>&)
0005f8  ed8d0a08          VSTR     s0,[sp,#0x20]
0005fc  edcd0a09          VSTR     s1,[sp,#0x24]
;;;127            realRoots[2] = temp.real();
000600  ed840a02          VSTR     s0,[r4,#8]
000604  ed9d0a0e          VLDR     s0,[sp,#0x38]
000608  eddd0a0f          VLDR     s1,[sp,#0x3c]
;;;128            temp = -B/(PRECISION(4)*A) + PRECISION(0.5)*(-w-sqrt(-(PRECISION(3)*alpha+PRECISION(2)*y-PRECISION(2)*beta/w)));
00060c  4669              MOV      r1,sp
00060e  eeb10a40          VNEG.F32 s0,s0
000612  eef10a60          VNEG.F32 s1,s1
000616  ed8d0a0a          VSTR     s0,[sp,#0x28]
00061a  edcd0a0b          VSTR     s1,[sp,#0x2c]
00061e  ed8d0a1e          VSTR     s0,[sp,#0x78]
000622  edcd0a1f          VSTR     s1,[sp,#0x7c]
000626  edcd9a03          VSTR     s19,[sp,#0xc]
00062a  a803              ADD      r0,sp,#0xc
00062c  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
000630  ed8d0a40          VSTR     s0,[sp,#0x100]
000634  edcd0a41          VSTR     s1,[sp,#0x104]
000638  ed9d0a0c          VLDR     s0,[sp,#0x30]
00063c  a940              ADD      r1,sp,#0x100
00063e  a805              ADD      r0,sp,#0x14
000640  ee200a2a          VMUL.F32 s0,s0,s21
000644  ed8d0a05          VSTR     s0,[sp,#0x14]
000648  f7fffffe          BL       _ZStplIfESt7complexIT_ERKS1_RKS2_ ; std::operator +<float>(const T1&, const std::complex<T1>&)
00064c  ed8d0a1a          VSTR     s0,[sp,#0x68]
000650  edcd0a1b          VSTR     s1,[sp,#0x6c]
000654  ed8d9a02          VSTR     s18,[sp,#8]
000658  a90e              ADD      r1,sp,#0x38
00065a  a802              ADD      r0,sp,#8
00065c  f7fffffe          BL       _ZStdvIfESt7complexIT_ERKS1_RKS2_ ; std::operator /<float>(const T1&, const std::complex<T1>&)
000660  ed8d0a54          VSTR     s0,[sp,#0x150]
000664  edcd0a55          VSTR     s1,[sp,#0x154]
000668  e9dd011a          LDRD     r0,r1,[sp,#0x68]
00066c  ee010a10          VMOV     s2,r0
000670  e9cd010a          STRD     r0,r1,[sp,#0x28]
000674  a844              ADD      r0,sp,#0x110
000676  ee310a40          VSUB.F32 s0,s2,s0
00067a  ee011a10          VMOV     s2,r1
00067e  ed8d0a0a          VSTR     s0,[sp,#0x28]
000682  ee710a60          VSUB.F32 s1,s2,s1
000686  edcd0a0b          VSTR     s1,[sp,#0x2c]
00068a  ed8d0a60          VSTR     s0,[sp,#0x180]
00068e  edcd0a61          VSTR     s1,[sp,#0x184]
000692  eeb10a40          VNEG.F32 s0,s0
000696  eef10a60          VNEG.F32 s1,s1
00069a  ed8d0a0a          VSTR     s0,[sp,#0x28]
00069e  edcd0a0b          VSTR     s1,[sp,#0x2c]
0006a2  ed8d0a44          VSTR     s0,[sp,#0x110]
0006a6  edcd0a45          VSTR     s1,[sp,#0x114]
0006aa  f7fffffe          BL       _ZSt4sqrtIfESt7complexIT_ERKS2_ ; std::sqrt<float>(const std::complex<T1>&)
0006ae  ed8d0a5e          VSTR     s0,[sp,#0x178]
0006b2  edcd0a5f          VSTR     s1,[sp,#0x17c]
0006b6  e9dd011e          LDRD     r0,r1,[sp,#0x78]
0006ba  ee010a10          VMOV     s2,r0
0006be  e9cd010a          STRD     r0,r1,[sp,#0x28]
0006c2  a806              ADD      r0,sp,#0x18
0006c4  ee310a40          VSUB.F32 s0,s2,s0
0006c8  ee011a10          VMOV     s2,r1
0006cc  a92c              ADD      r1,sp,#0xb0
0006ce  ed8d0a0a          VSTR     s0,[sp,#0x28]
0006d2  ee710a60          VSUB.F32 s1,s2,s1
0006d6  edcd0a0b          VSTR     s1,[sp,#0x2c]
0006da  ed8d0a2c          VSTR     s0,[sp,#0xb0]
0006de  edcd0a2d          VSTR     s1,[sp,#0xb4]
0006e2  ed8dba06          VSTR     s22,[sp,#0x18]
0006e6  f7fffffe          BL       _ZStmlIfESt7complexIT_ERKS1_RKS2_ ; std::operator *<float>(const T1&, const std::complex<T1>&)
0006ea  ed8d0a2a          VSTR     s0,[sp,#0xa8]
0006ee  edcd0a2b          VSTR     s1,[sp,#0xac]
0006f2  ed8d8a04          VSTR     s16,[sp,#0x10]
0006f6  a92a              ADD      r1,sp,#0xa8
0006f8  a804              ADD      r0,sp,#0x10
0006fa  f7fffffe          BL       _ZStplIfESt7complexIT_ERKS1_RKS2_ ; std::operator +<float>(const T1&, const std::complex<T1>&)
0006fe  edcd0a09          VSTR     s1,[sp,#0x24]
;;;129            realRoots[3] = temp.real();
000702  ed840a03          VSTR     s0,[r4,#0xc]
;;;130    
;;;131            /*
;;;132            CoreTechPrint("factors = %f, %f, %f, %f, %f\n",
;;;133            factors[0], factors[1], factors[2], factors[3], factors[4]);
;;;134    
;;;135            CoreTechPrint("realRoots = %f, %f, %f, %f\n",
;;;136            realRoots[0], realRoots[1], realRoots[2], realRoots[3]);
;;;137            */
;;;138    
;;;139            return RESULT_OK;
;;;140          } // solveQuartic()
000706  b064              ADD      sp,sp,#0x190
000708  2000              MOVS     r0,#0                 ;139
00070a  ecbd8b0c          VPOP     {d8-d13}
00070e  bd10              POP      {r4,pc}
;;;141    
                          ENDP


                          AREA ||area_number.333||, COMGROUP=_ZN4Anki8Embedded3P3P12solveQuarticIfEENS_6ResultEPKT_PS4_, LINKORDER=||t._ZN4Anki8Embedded3P3P12solveQuarticIfEENS_6ResultEPKT_PS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.333||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded3P3P12solveQuarticIfEENS_6ResultEPKT_PS4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded3P3P12solveQuarticIdEENS_6ResultEPKT_PS4_||, COMGROUP=_ZN4Anki8Embedded3P3P12solveQuarticIdEENS_6ResultEPKT_PS4_, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded3P3P12solveQuarticIdEENS_6ResultEPKT_PS4_ PROC ; Anki::Embedded::P3P::solveQuartic<double>(const T1*, T1*)
;;;77           template<typename PRECISION>
;;;78           Result solveQuartic(const PRECISION* factors, //const Array<PRECISION>& factors,  // 1x5
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;79             PRECISION* realRoots) //Array<PRECISION>& realRoots)      // 1x4
;;;80           {
000004  460c              MOV      r4,r1
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  f5ad7d3f          SUB      sp,sp,#0x2fc
;;;81             //AnkiAssert(factors.get_size(0) == 1 && factors.get_size(1) == 5);
;;;82             //AnkiAssert(realRoots.get_size(0) == 1 && realRoots.get_size(1) == 4);
;;;83     
;;;84             PRECISION A = factors[0];
00000e  ed908b00          VLDR     d8,[r0,#0]
;;;85             PRECISION B = factors[1];
;;;86             PRECISION C = factors[2];
;;;87             PRECISION D = factors[3];
000012  ed900b06          VLDR     d0,[r0,#0x18]
000016  ed90ab02          VLDR     d10,[r0,#8]           ;85
00001a  ed90fb04          VLDR     d15,[r0,#0x10]        ;86
00001e  ed8d0b22          VSTR     d0,[sp,#0x88]
;;;88             PRECISION E = factors[4];
000022  ed900b08          VLDR     d0,[r0,#0x20]
;;;89     
;;;90             PRECISION A_pw2 = A*A;
000026  ec532b18          VMOV     r2,r3,d8
00002a  ed8d0b9e          VSTR     d0,[sp,#0x278]        ;88
00002e  ec510b18          VMOV     r0,r1,d8
000032  f7fffffe          BL       __aeabi_dmul
000036  ec410b1b          VMOV     d11,r0,r1
;;;91             PRECISION B_pw2 = B*B;
00003a  ec532b1a          VMOV     r2,r3,d10
00003e  ec510b1a          VMOV     r0,r1,d10
000042  f7fffffe          BL       __aeabi_dmul
000046  ec410b1e          VMOV     d14,r0,r1
;;;92             PRECISION A_pw3 = A_pw2*A;
00004a  ec532b18          VMOV     r2,r3,d8
00004e  ec510b1b          VMOV     r0,r1,d11
000052  f7fffffe          BL       __aeabi_dmul
000056  ec410b1c          VMOV     d12,r0,r1
;;;93             PRECISION B_pw3 = B_pw2*B;
00005a  ec532b1a          VMOV     r2,r3,d10
00005e  ec510b1e          VMOV     r0,r1,d14
000062  f7fffffe          BL       __aeabi_dmul
000066  ec410b1d          VMOV     d13,r0,r1
;;;94             PRECISION A_pw4 = A_pw3*A;
00006a  ec532b18          VMOV     r2,r3,d8
00006e  ec510b1c          VMOV     r0,r1,d12
000072  f7fffffe          BL       __aeabi_dmul
000076  ec410b10          VMOV     d0,r0,r1
;;;95             PRECISION B_pw4 = B_pw3*B;
00007a  ec532b1a          VMOV     r2,r3,d10
00007e  ed8d0ba2          VSTR     d0,[sp,#0x288]        ;94
000082  ec510b1d          VMOV     r0,r1,d13
000086  f7fffffe          BL       __aeabi_dmul
00008a  ec410b10          VMOV     d0,r0,r1
;;;96     
;;;97             PRECISION alpha = -3*B_pw2/(8*A_pw2)+C/A;
00008e  ec532b18          VMOV     r2,r3,d8
000092  ed8d0b9c          VSTR     d0,[sp,#0x270]        ;95
000096  ec510b1f          VMOV     r0,r1,d15
00009a  f7fffffe          BL       __aeabi_ddiv
00009e  ec410b19          VMOV     d9,r0,r1
0000a2  ed9f0bfd          VLDR     d0,|L339.1176|
0000a6  ec510b1b          VMOV     r0,r1,d11
0000aa  ec532b10          VMOV     r2,r3,d0
0000ae  f7fffffe          BL       __aeabi_dmul
0000b2  ec410b11          VMOV     d1,r0,r1
0000b6  ed8d1b24          VSTR     d1,[sp,#0x90]
0000ba  ed9f0bf9          VLDR     d0,|L339.1184|
0000be  ec510b1e          VMOV     r0,r1,d14
0000c2  ec532b10          VMOV     r2,r3,d0
0000c6  f7fffffe          BL       __aeabi_dmul
0000ca  ed9d1b24          VLDR     d1,[sp,#0x90]
0000ce  ec532b11          VMOV     r2,r3,d1
0000d2  f7fffffe          BL       __aeabi_ddiv
0000d6  ec532b19          VMOV     r2,r3,d9
0000da  f7fffffe          BL       __aeabi_dadd
;;;98             PRECISION beta = B_pw3/(8*A_pw3)-B*C/(2*A_pw2)+D/A;
0000de  ed9d0b22          VLDR     d0,[sp,#0x88]
0000e2  ec410b19          VMOV     d9,r0,r1              ;97
0000e6  ec532b18          VMOV     r2,r3,d8
0000ea  ec510b10          VMOV     r0,r1,d0
0000ee  f7fffffe          BL       __aeabi_ddiv
0000f2  ec410b11          VMOV     d1,r0,r1
0000f6  ed8d1b24          VSTR     d1,[sp,#0x90]
0000fa  ed9f0beb          VLDR     d0,|L339.1192|
0000fe  ec510b1b          VMOV     r0,r1,d11
000102  ec532b10          VMOV     r2,r3,d0
000106  f7fffffe          BL       __aeabi_dmul
00010a  ec410b11          VMOV     d1,r0,r1
00010e  ec532b1f          VMOV     r2,r3,d15
000112  ed8d1bb8          VSTR     d1,[sp,#0x2e0]
000116  ec510b1a          VMOV     r0,r1,d10
00011a  f7fffffe          BL       __aeabi_dmul
00011e  ed9d1bb8          VLDR     d1,[sp,#0x2e0]
000122  ec532b11          VMOV     r2,r3,d1
000126  f7fffffe          BL       __aeabi_ddiv
00012a  ec410b11          VMOV     d1,r0,r1
00012e  ed8d1bb8          VSTR     d1,[sp,#0x2e0]
000132  ed9f0bd9          VLDR     d0,|L339.1176|
000136  ec510b1c          VMOV     r0,r1,d12
00013a  ec532b10          VMOV     r2,r3,d0
00013e  f7fffffe          BL       __aeabi_dmul
000142  ec410b10          VMOV     d0,r0,r1
000146  ec510b1d          VMOV     r0,r1,d13
00014a  ec532b10          VMOV     r2,r3,d0
00014e  f7fffffe          BL       __aeabi_ddiv
000152  ed9d1bb8          VLDR     d1,[sp,#0x2e0]
000156  ec532b11          VMOV     r2,r3,d1
00015a  f7fffffe          BL       __aeabi_dsub
00015e  ed9d1b24          VLDR     d1,[sp,#0x90]
000162  ec532b11          VMOV     r2,r3,d1
000166  f7fffffe          BL       __aeabi_dadd
;;;99             PRECISION gamma = -3*B_pw4/(256*A_pw4)+B_pw2*C/(16*A_pw3)-B*D/(4*A_pw2)+E/A;
00016a  ed9d0b9e          VLDR     d0,[sp,#0x278]
00016e  ec410b1d          VMOV     d13,r0,r1             ;98
000172  ec532b18          VMOV     r2,r3,d8
000176  ec510b10          VMOV     r0,r1,d0
00017a  f7fffffe          BL       __aeabi_ddiv
00017e  ec410b11          VMOV     d1,r0,r1
000182  ed8d1b24          VSTR     d1,[sp,#0x90]
000186  ed9f0bca          VLDR     d0,|L339.1200|
00018a  ec510b1b          VMOV     r0,r1,d11
00018e  ec532b10          VMOV     r2,r3,d0
000192  f7fffffe          BL       __aeabi_dmul
000196  ed9d0b22          VLDR     d0,[sp,#0x88]
00019a  ec410b1b          VMOV     d11,r0,r1
00019e  ec532b10          VMOV     r2,r3,d0
0001a2  ec510b1a          VMOV     r0,r1,d10
0001a6  f7fffffe          BL       __aeabi_dmul
0001aa  ec532b1b          VMOV     r2,r3,d11
0001ae  f7fffffe          BL       __aeabi_ddiv
0001b2  ec410b1b          VMOV     d11,r0,r1
0001b6  ed9f0bc0          VLDR     d0,|L339.1208|
0001ba  ec510b1c          VMOV     r0,r1,d12
0001be  ec532b10          VMOV     r2,r3,d0
0001c2  f7fffffe          BL       __aeabi_dmul
0001c6  ec410b1c          VMOV     d12,r0,r1
0001ca  ec532b1f          VMOV     r2,r3,d15
0001ce  ec510b1e          VMOV     r0,r1,d14
0001d2  f7fffffe          BL       __aeabi_dmul
0001d6  ec532b1c          VMOV     r2,r3,d12
0001da  f7fffffe          BL       __aeabi_ddiv
0001de  ec410b1c          VMOV     d12,r0,r1
0001e2  ed9f0bb7          VLDR     d0,|L339.1216|
0001e6  ec532b10          VMOV     r2,r3,d0
0001ea  ed9d0ba2          VLDR     d0,[sp,#0x288]
0001ee  ec510b10          VMOV     r0,r1,d0
0001f2  f7fffffe          BL       __aeabi_dmul
0001f6  ec410b1e          VMOV     d14,r0,r1
0001fa  ed9f0ba9          VLDR     d0,|L339.1184|
0001fe  ec532b10          VMOV     r2,r3,d0
000202  ed9d0b9c          VLDR     d0,[sp,#0x270]
000206  ec510b10          VMOV     r0,r1,d0
00020a  f7fffffe          BL       __aeabi_dmul
00020e  ec532b1e          VMOV     r2,r3,d14
000212  f7fffffe          BL       __aeabi_ddiv
000216  ec532b1c          VMOV     r2,r3,d12
00021a  f7fffffe          BL       __aeabi_dadd
00021e  ec532b1b          VMOV     r2,r3,d11
000222  f7fffffe          BL       __aeabi_dsub
000226  ed9d1b24          VLDR     d1,[sp,#0x90]
00022a  ec532b11          VMOV     r2,r3,d1
00022e  f7fffffe          BL       __aeabi_dadd
000232  ec410b1c          VMOV     d12,r0,r1
;;;100    
;;;101            PRECISION alpha_pw2 = alpha*alpha;
000236  ec532b19          VMOV     r2,r3,d9
00023a  ec510b19          VMOV     r0,r1,d9
00023e  f7fffffe          BL       __aeabi_dmul
000242  ec410b1b          VMOV     d11,r0,r1
;;;102            PRECISION alpha_pw3 = alpha_pw2*alpha;
000246  ec532b19          VMOV     r2,r3,d9
00024a  f7fffffe          BL       __aeabi_dmul
00024e  ec410b1f          VMOV     d15,r0,r1
;;;103    
;;;104            // TODO: is std::complex kosher on embedded?
;;;105            std::complex<PRECISION> P (-alpha_pw2/12-gamma,0);
000252  ed9f0b9d          VLDR     d0,|L339.1224|
000256  ec510b1b          VMOV     r0,r1,d11
00025a  ec532b10          VMOV     r2,r3,d0
00025e  f7fffffe          BL       __aeabi_ddiv
000262  ec532b1c          VMOV     r2,r3,d12
000266  f7fffffe          BL       __aeabi_dsub
00026a  ed9feb99          VLDR     d14,|L339.1232|
00026e  e9cd0136          STRD     r0,r1,[sp,#0xd8]
000272  ed8deb38          VSTR     d14,[sp,#0xe0]
;;;106            std::complex<PRECISION> Q (-alpha_pw3/108+alpha*gamma/3-beta*beta/8,0);
000276  ec532b1d          VMOV     r2,r3,d13
00027a  ec510b1d          VMOV     r0,r1,d13
00027e  f7fffffe          BL       __aeabi_dmul
000282  ed9f1b95          VLDR     d1,|L339.1240|
000286  ec532b11          VMOV     r2,r3,d1
00028a  f7fffffe          BL       __aeabi_dmul
00028e  ec410b1b          VMOV     d11,r0,r1
000292  ed9f0b93          VLDR     d0,|L339.1248|
000296  ec510b1f          VMOV     r0,r1,d15
00029a  ec532b10          VMOV     r2,r3,d0
00029e  f7fffffe          BL       __aeabi_ddiv
0002a2  ec410b1f          VMOV     d15,r0,r1
0002a6  ec532b1c          VMOV     r2,r3,d12
0002aa  ec510b19          VMOV     r0,r1,d9
0002ae  f7fffffe          BL       __aeabi_dmul
0002b2  ed9f1b8d          VLDR     d1,|L339.1256|
0002b6  ec532b11          VMOV     r2,r3,d1
0002ba  f7fffffe          BL       __aeabi_ddiv
0002be  ec532b1f          VMOV     r2,r3,d15
0002c2  f7fffffe          BL       __aeabi_dsub
0002c6  ec532b1b          VMOV     r2,r3,d11
0002ca  f7fffffe          BL       __aeabi_dsub
0002ce  e9cd01a0          STRD     r0,r1,[sp,#0x280]
0002d2  ed8deb52          VSTR     d14,[sp,#0x148]
0002d6  e9cd011e          STRD     r0,r1,[sp,#0x78]
0002da  ed9d0b52          VLDR     d0,[sp,#0x148]
0002de  ed8d0b20          VSTR     d0,[sp,#0x80]
;;;107            std::complex<PRECISION> R = -Q/PRECISION(2)+sqrt(pow(Q,PRECISION(2))/PRECISION(4)+pow(P,PRECISION(3))/PRECISION(27));
0002e2  ed9f0b81          VLDR     d0,|L339.1256|
0002e6  a912              ADD      r1,sp,#0x48
0002e8  ed8d0b12          VSTR     d0,[sp,#0x48]
0002ec  a836              ADD      r0,sp,#0xd8
0002ee  f7fffffe          BL       _ZSt3powIdESt7complexIT_ERKS2_RKS1_ ; std::pow<double>(const std::complex<T1>&, const T1&)
0002f2  eeb0ca41          VMOV.F32 s24,s2
0002f6  eef0ca61          VMOV.F32 s25,s3
0002fa  ed9f1b7d          VLDR     d1,|L339.1264|
0002fe  ec510b10          VMOV     r0,r1,d0
000302  ed8d1b08          VSTR     d1,[sp,#0x20]
000306  ed9dbb08          VLDR     d11,[sp,#0x20]
00030a  ec532b1b          VMOV     r2,r3,d11
00030e  f7fffffe          BL       __aeabi_ddiv
000312  4605              MOV      r5,r0
000314  460e              MOV      r6,r1
000316  ec532b1b          VMOV     r2,r3,d11
00031a  ec510b1c          VMOV     r0,r1,d12
00031e  f7fffffe          BL       __aeabi_ddiv
000322  e9cd5622          STRD     r5,r6,[sp,#0x88]
000326  e9cd0124          STRD     r0,r1,[sp,#0x90]
00032a  ed9f0b5f          VLDR     d0,|L339.1192|
00032e  e9cd0166          STRD     r0,r1,[sp,#0x198]
000332  e9cd5664          STRD     r5,r6,[sp,#0x190]
000336  ed8d0b18          VSTR     d0,[sp,#0x60]
00033a  a918              ADD      r1,sp,#0x60
00033c  a81e              ADD      r0,sp,#0x78
00033e  f7fffffe          BL       _ZSt3powIdESt7complexIT_ERKS2_RKS1_ ; std::pow<double>(const std::complex<T1>&, const T1&)
000342  eeb0ca41          VMOV.F32 s24,s2
000346  eef0ca61          VMOV.F32 s25,s3
00034a  ed9f1b59          VLDR     d1,|L339.1200|
00034e  ec510b10          VMOV     r0,r1,d0
000352  ed8d1b14          VSTR     d1,[sp,#0x50]
000356  ed9dbb14          VLDR     d11,[sp,#0x50]
00035a  ec532b1b          VMOV     r2,r3,d11
00035e  f7fffffe          BL       __aeabi_ddiv
000362  4605              MOV      r5,r0
000364  460e              MOV      r6,r1
000366  ec532b1b          VMOV     r2,r3,d11
00036a  ec510b1c          VMOV     r0,r1,d12
00036e  f7fffffe          BL       __aeabi_ddiv
000372  e9cd5622          STRD     r5,r6,[sp,#0x88]
000376  e9cd0124          STRD     r0,r1,[sp,#0x90]
00037a  e9cd0162          STRD     r0,r1,[sp,#0x188]
00037e  e9cd5660          STRD     r5,r6,[sp,#0x180]
000382  a964              ADD      r1,sp,#0x190
000384  a860              ADD      r0,sp,#0x180
000386  f7fffffe          BL       _ZStplIdESt7complexIT_ERKS2_S4_ ; std::operator +<double>(const std::complex<T1>&, const std::complex<T1>&)
00038a  ed8d0b2e          VSTR     d0,[sp,#0xb8]
00038e  ed8d1b30          VSTR     d1,[sp,#0xc0]
000392  a82e              ADD      r0,sp,#0xb8
000394  f7fffffe          BL       _ZSt4sqrtIdESt7complexIT_ERKS2_ ; std::sqrt<double>(const std::complex<T1>&)
000398  ed8d0b2a          VSTR     d0,[sp,#0xa8]
00039c  ed8d1b2c          VSTR     d1,[sp,#0xb0]
0003a0  ed9d0b1e          VLDR     d0,[sp,#0x78]
0003a4  ec510b10          VMOV     r0,r1,d0
0003a8  f7fffffe          BL       __aeabi_dneg
0003ac  ed9d0b20          VLDR     d0,[sp,#0x80]
0003b0  ec410b1c          VMOV     d12,r0,r1
0003b4  ec510b10          VMOV     r0,r1,d0
0003b8  f7fffffe          BL       __aeabi_dneg
0003bc  ec410b1f          VMOV     d15,r0,r1
0003c0  ed8dcb22          VSTR     d12,[sp,#0x88]
0003c4  ed9f0b38          VLDR     d0,|L339.1192|
0003c8  ed8dfb24          VSTR     d15,[sp,#0x90]
0003cc  ed8d0b16          VSTR     d0,[sp,#0x58]
0003d0  ed9dbb16          VLDR     d11,[sp,#0x58]
0003d4  ec510b1c          VMOV     r0,r1,d12
0003d8  ec532b1b          VMOV     r2,r3,d11
0003dc  f7fffffe          BL       __aeabi_ddiv
0003e0  4605              MOV      r5,r0
0003e2  460e              MOV      r6,r1
0003e4  ec532b1b          VMOV     r2,r3,d11
0003e8  ec510b1f          VMOV     r0,r1,d15
0003ec  f7fffffe          BL       __aeabi_ddiv
0003f0  e9cd5622          STRD     r5,r6,[sp,#0x88]
0003f4  e9cd0124          STRD     r0,r1,[sp,#0x90]
0003f8  e9cd019a          STRD     r0,r1,[sp,#0x268]
0003fc  e9cd5698          STRD     r5,r6,[sp,#0x260]
000400  a92a              ADD      r1,sp,#0xa8
000402  a898              ADD      r0,sp,#0x260
000404  f7fffffe          BL       _ZStplIdESt7complexIT_ERKS2_S4_ ; std::operator +<double>(const std::complex<T1>&, const std::complex<T1>&)
000408  ed8d0b32          VSTR     d0,[sp,#0xc8]
;;;108    
;;;109            std::complex<PRECISION> U = pow(R,PRECISION(1.0/3.0));
00040c  ed9fcb3a          VLDR     d12,|L339.1272|
000410  ed8d1b34          VSTR     d1,[sp,#0xd0]         ;107
000414  ed8dcb08          VSTR     d12,[sp,#0x20]
000418  a908              ADD      r1,sp,#0x20
00041a  a832              ADD      r0,sp,#0xc8
00041c  f7fffffe          BL       _ZSt3powIdESt7complexIT_ERKS2_RKS1_ ; std::pow<double>(const std::complex<T1>&, const T1&)
000420  ed8d0b26          VSTR     d0,[sp,#0x98]
000424  ed8d1b28          VSTR     d1,[sp,#0xa0]
;;;110            std::complex<PRECISION> y;
000428  ed8deb08          VSTR     d14,[sp,#0x20]
00042c  ed8deb12          VSTR     d14,[sp,#0x48]
000430  ed9d1b08          VLDR     d1,[sp,#0x20]
;;;111    
;;;112            if (U.real() == 0) {
000434  ec532b1e          VMOV     r2,r3,d14
000438  ed8d1b0e          VSTR     d1,[sp,#0x38]
00043c  ed9d1b12          VLDR     d1,[sp,#0x48]
000440  ec510b10          VMOV     r0,r1,d0
000444  ed8d1b10          VSTR     d1,[sp,#0x40]
000448  f7fffffe          BL       __aeabi_cdcmpeq
;;;113              y = -PRECISION(5)*alpha/PRECISION(6)-pow(Q,PRECISION(1.0/3.0));
00044c  ed9f0b2c          VLDR     d0,|L339.1280|
000450  ec510b19          VMOV     r0,r1,d9
000454  ec532b10          VMOV     r2,r3,d0
000458  d165              BNE      |L339.1318|
00045a  f7fffffe          BL       __aeabi_dmul
00045e  ed9f1b2a          VLDR     d1,|L339.1288|
000462  ec532b11          VMOV     r2,r3,d1
000466  f7fffffe          BL       __aeabi_ddiv
00046a  ec410b1b          VMOV     d11,r0,r1
00046e  ed8dcb22          VSTR     d12,[sp,#0x88]
000472  a922              ADD      r1,sp,#0x88
000474  a81e              ADD      r0,sp,#0x78
000476  f7fffffe          BL       _ZSt3powIdESt7complexIT_ERKS2_RKS1_ ; std::pow<double>(const std::complex<T1>&, const T1&)
00047a  eeb0ca41          VMOV.F32 s24,s2
00047e  eef0ca61          VMOV.F32 s25,s3
000482  ec532b1b          VMOV     r2,r3,d11
000486  ec510b10          VMOV     r0,r1,d0
00048a  f7fffffe          BL       __aeabi_drsub
00048e  4605              MOV      r5,r0
000490  460e              MOV      r6,r1
000492  ec510b1c          VMOV     r0,r1,d12
000496  e03b              B        |L339.1296|
                  |L339.1176|
000498  00000000          DCFD     0x4020000000000000 ; 8
00049c  40200000
                  |L339.1184|
0004a0  00000000          DCFD     0xc008000000000000 ; -3
0004a4  c0080000
                  |L339.1192|
0004a8  00000000          DCFD     0x4000000000000000 ; 2
0004ac  40000000
                  |L339.1200|
0004b0  00000000          DCFD     0x4010000000000000 ; 4
0004b4  40100000
                  |L339.1208|
0004b8  00000000          DCFD     0x4030000000000000 ; 16
0004bc  40300000
                  |L339.1216|
0004c0  00000000          DCFD     0x4070000000000000 ; 256
0004c4  40700000
                  |L339.1224|
0004c8  00000000          DCFD     0xc028000000000000 ; -12
0004cc  c0280000
                  |L339.1232|
0004d0  00000000          DCFD     0x0000000000000000 ; 0
0004d4  00000000
                  |L339.1240|
0004d8  00000000          DCFD     0x3fc0000000000000 ; 0.125
0004dc  3fc00000
                  |L339.1248|
0004e0  00000000          DCFD     0x405b000000000000 ; 108
0004e4  405b0000
                  |L339.1256|
0004e8  00000000          DCFD     0x4008000000000000 ; 3
0004ec  40080000
                  |L339.1264|
0004f0  00000000          DCFD     0x403b000000000000 ; 27
0004f4  403b0000
                  |L339.1272|
0004f8  55555555          DCFD     0x3fd5555555555555 ; 0.33333333333333331
0004fc  3fd55555
                  |L339.1280|
000500  00000000          DCFD     0xc014000000000000 ; -5
000504  c0140000
                  |L339.1288|
000508  00000000          DCFD     0x4018000000000000 ; 6
00050c  40180000
                  |L339.1296|
000510  f7fffffe          BL       __aeabi_dneg
000514  e9cd569c          STRD     r5,r6,[sp,#0x270]
000518  e9cd019e          STRD     r0,r1,[sp,#0x278]
00051c  e9cd560e          STRD     r5,r6,[sp,#0x38]
000520  e9cd0110          STRD     r0,r1,[sp,#0x40]
;;;114            } else {
000524  e097              B        |L339.1622|
                  |L339.1318|
;;;115              y = -PRECISION(5)*alpha/PRECISION(6)-P/(PRECISION(3)*U)+U;
000526  f7fffffe          BL       __aeabi_dmul
00052a  ed1f1b09          VLDR     d1,|L339.1288|
00052e  ec532b11          VMOV     r2,r3,d1
000532  f7fffffe          BL       __aeabi_ddiv
000536  ec410b11          VMOV     d1,r0,r1
00053a  ed1f0b15          VLDR     d0,|L339.1256|
00053e  ed8d1bb8          VSTR     d1,[sp,#0x2e0]
000542  ed8d0bba          VSTR     d0,[sp,#0x2e8]
000546  a926              ADD      r1,sp,#0x98
000548  a8ba              ADD      r0,sp,#0x2e8
00054a  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
00054e  ad36              ADD      r5,sp,#0xd8
000550  eeb0ba41          VMOV.F32 s22,s2
000554  e895000f          LDM      r5,{r0-r3}
000558  ad22              ADD      r5,sp,#0x88
00055a  eef0ba61          VMOV.F32 s23,s3
00055e  e885000f          STM      r5,{r0-r3}
000562  eeb0ca40          VMOV.F32 s24,s0
000566  eef0ca60          VMOV.F32 s25,s1
00056a  ec532b1b          VMOV     r2,r3,d11
00056e  ec510b1b          VMOV     r0,r1,d11
000572  f7fffffe          BL       __aeabi_dmul
000576  ec410b1e          VMOV     d14,r0,r1
00057a  ec532b1c          VMOV     r2,r3,d12
00057e  ec510b1c          VMOV     r0,r1,d12
000582  f7fffffe          BL       __aeabi_dmul
000586  ec532b1e          VMOV     r2,r3,d14
00058a  f7fffffe          BL       __aeabi_dadd
00058e  ed9d0b24          VLDR     d0,[sp,#0x90]
000592  ec410b1e          VMOV     d14,r0,r1
000596  ed8d0ba2          VSTR     d0,[sp,#0x288]
00059a  ec532b10          VMOV     r2,r3,d0
00059e  ec510b1b          VMOV     r0,r1,d11
0005a2  f7fffffe          BL       __aeabi_dmul
0005a6  ec410b11          VMOV     d1,r0,r1
0005aa  ec510b1c          VMOV     r0,r1,d12
0005ae  ed8d1bbc          VSTR     d1,[sp,#0x2f0]
0005b2  ed9dfb22          VLDR     d15,[sp,#0x88]
0005b6  ec532b1f          VMOV     r2,r3,d15
0005ba  f7fffffe          BL       __aeabi_dmul
0005be  ed9d1bbc          VLDR     d1,[sp,#0x2f0]
0005c2  ec532b11          VMOV     r2,r3,d1
0005c6  f7fffffe          BL       __aeabi_dadd
0005ca  ec532b1e          VMOV     r2,r3,d14
0005ce  f7fffffe          BL       __aeabi_ddiv
0005d2  ec410b10          VMOV     d0,r0,r1
0005d6  ec532b1f          VMOV     r2,r3,d15
0005da  ed8d0bbc          VSTR     d0,[sp,#0x2f0]
0005de  ec510b1b          VMOV     r0,r1,d11
0005e2  f7fffffe          BL       __aeabi_dmul
0005e6  ed9d0ba2          VLDR     d0,[sp,#0x288]
0005ea  ec410b1b          VMOV     d11,r0,r1
0005ee  ec532b10          VMOV     r2,r3,d0
0005f2  ec510b1c          VMOV     r0,r1,d12
0005f6  f7fffffe          BL       __aeabi_dmul
0005fa  ec532b1b          VMOV     r2,r3,d11
0005fe  f7fffffe          BL       __aeabi_dsub
000602  ec532b1e          VMOV     r2,r3,d14
000606  f7fffffe          BL       __aeabi_ddiv
00060a  ed9d0bbc          VLDR     d0,[sp,#0x2f0]
00060e  ec410b1b          VMOV     d11,r0,r1
000612  ed8d0b22          VSTR     d0,[sp,#0x88]
000616  ed8dbb24          VSTR     d11,[sp,#0x90]
00061a  ed9d1bb8          VLDR     d1,[sp,#0x2e0]
00061e  ec510b10          VMOV     r0,r1,d0
000622  ec532b11          VMOV     r2,r3,d1
000626  f7fffffe          BL       __aeabi_drsub
00062a  4605              MOV      r5,r0
00062c  460e              MOV      r6,r1
00062e  ec510b1b          VMOV     r0,r1,d11
000632  f7fffffe          BL       __aeabi_dneg
000636  e9cd5622          STRD     r5,r6,[sp,#0x88]
00063a  e9cd0124          STRD     r0,r1,[sp,#0x90]
00063e  e9cd019e          STRD     r0,r1,[sp,#0x278]
000642  e9cd569c          STRD     r5,r6,[sp,#0x270]
000646  a926              ADD      r1,sp,#0x98
000648  a89c              ADD      r0,sp,#0x270
00064a  f7fffffe          BL       _ZStplIdESt7complexIT_ERKS2_S4_ ; std::operator +<double>(const std::complex<T1>&, const std::complex<T1>&)
00064e  ed8d0b0e          VSTR     d0,[sp,#0x38]
000652  ed8d1b10          VSTR     d1,[sp,#0x40]
                  |L339.1622|
;;;116            }
;;;117    
;;;118            std::complex<PRECISION> w = sqrt(alpha+PRECISION(2)*y);
000656  ed1fbb6c          VLDR     d11,|L339.1192|
00065a  a90e              ADD      r1,sp,#0x38
00065c  ed8dbb08          VSTR     d11,[sp,#0x20]
000660  a808              ADD      r0,sp,#0x20
000662  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
000666  eeb0ca41          VMOV.F32 s24,s2
00066a  eef0ca61          VMOV.F32 s25,s3
00066e  ec532b19          VMOV     r2,r3,d9
000672  ec510b10          VMOV     r0,r1,d0
000676  f7fffffe          BL       __aeabi_dadd
00067a  eeb01a4c          VMOV.F32 s2,s24
00067e  eef01a6c          VMOV.F32 s3,s25
000682  e9cd0122          STRD     r0,r1,[sp,#0x88]
000686  ed8d1b24          VSTR     d1,[sp,#0x90]
00068a  e9cd0100          STRD     r0,r1,[sp,#0]
00068e  ed8d1b02          VSTR     d1,[sp,#8]
000692  4668              MOV      r0,sp
000694  f7fffffe          BL       _ZSt4sqrtIdESt7complexIT_ERKS2_ ; std::sqrt<double>(const std::complex<T1>&)
000698  ed8d0b0a          VSTR     d0,[sp,#0x28]
00069c  ed8d1b0c          VSTR     d1,[sp,#0x30]
;;;119    
;;;120            std::complex<PRECISION> temp;
0006a0  ed1f0b75          VLDR     d0,|L339.1232|
0006a4  ed8d0b08          VSTR     d0,[sp,#0x20]
0006a8  ed1f0b77          VLDR     d0,|L339.1232|
0006ac  ed8d0b12          VSTR     d0,[sp,#0x48]
0006b0  ed9d0b08          VLDR     d0,[sp,#0x20]
0006b4  ed8d0b1a          VSTR     d0,[sp,#0x68]
0006b8  ed9d0b12          VLDR     d0,[sp,#0x48]
0006bc  ed8d0b1c          VSTR     d0,[sp,#0x70]
;;;121    
;;;122            temp = -B/(PRECISION(4)*A) + PRECISION(0.5)*(w+sqrt(-(PRECISION(3)*alpha+PRECISION(2)*y+PRECISION(2)*beta/w)));
0006c0  ed1f0b85          VLDR     d0,|L339.1200|
0006c4  ec510b18          VMOV     r0,r1,d8
0006c8  ec532b10          VMOV     r2,r3,d0
0006cc  f7fffffe          BL       __aeabi_dmul
0006d0  919e              STR      r1,[sp,#0x278]
0006d2  4680              MOV      r8,r0
0006d4  ec410b18          VMOV     d8,r0,r1
0006d8  91a3              STR      r1,[sp,#0x28c]
0006da  ec510b1a          VMOV     r0,r1,d10
0006de  f7fffffe          BL       __aeabi_dneg
0006e2  468b              MOV      r11,r1
0006e4  ec4b0b10          VMOV     d0,r0,r11
0006e8  4607              MOV      r7,r0
0006ea  ec532b18          VMOV     r2,r3,d8
0006ee  ec510b10          VMOV     r0,r1,d0
0006f2  f7fffffe          BL       __aeabi_ddiv
0006f6  e9cd0114          STRD     r0,r1,[sp,#0x50]
0006fa  ec532b1b          VMOV     r2,r3,d11
0006fe  ec510b1d          VMOV     r0,r1,d13
000702  f7fffffe          BL       __aeabi_dmul
000706  919c              STR      r1,[sp,#0x270]
000708  e9cd109f          STRD     r1,r0,[sp,#0x27c]
00070c  4682              MOV      r10,r0
00070e  91a1              STR      r1,[sp,#0x284]
000710  a90a              ADD      r1,sp,#0x28
000712  a8a0              ADD      r0,sp,#0x280
000714  f7fffffe          BL       _ZStdvIdESt7complexIT_ERKS1_RKS2_ ; std::operator /<double>(const T1&, const std::complex<T1>&)
000718  ed8d0b7c          VSTR     d0,[sp,#0x1f0]
00071c  ed8d1b7e          VSTR     d1,[sp,#0x1f8]
000720  ed1f0b8f          VLDR     d0,|L339.1256|
000724  ec510b19          VMOV     r0,r1,d9
000728  ec532b10          VMOV     r2,r3,d0
00072c  f7fffffe          BL       __aeabi_dmul
000730  919d              STR      r1,[sp,#0x274]
000732  91a2              STR      r1,[sp,#0x288]
000734  e9cd0116          STRD     r0,r1,[sp,#0x58]
000738  4681              MOV      r9,r0
00073a  ed8dbb52          VSTR     d11,[sp,#0x148]
00073e  a90e              ADD      r1,sp,#0x38
000740  a852              ADD      r0,sp,#0x148
000742  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
000746  eeb08a41          VMOV.F32 s16,s2
00074a  eef08a61          VMOV.F32 s17,s3
00074e  ed9d1b16          VLDR     d1,[sp,#0x58]
000752  ec510b10          VMOV     r0,r1,d0
000756  ec532b11          VMOV     r2,r3,d1
00075a  f7fffffe          BL       __aeabi_dadd
00075e  eeb01a48          VMOV.F32 s2,s16
000762  eef01a68          VMOV.F32 s3,s17
000766  e9cd0122          STRD     r0,r1,[sp,#0x88]
00076a  ed8d1b24          VSTR     d1,[sp,#0x90]
00076e  e9cd0174          STRD     r0,r1,[sp,#0x1d0]
000772  ed8d1b76          VSTR     d1,[sp,#0x1d8]
000776  a97c              ADD      r1,sp,#0x1f0
000778  a874              ADD      r0,sp,#0x1d0
00077a  f7fffffe          BL       _ZStplIdESt7complexIT_ERKS2_S4_ ; std::operator +<double>(const std::complex<T1>&, const std::complex<T1>&)
00077e  eeb08a41          VMOV.F32 s16,s2
000782  eef08a61          VMOV.F32 s17,s3
000786  ec510b10          VMOV     r0,r1,d0
00078a  f7fffffe          BL       __aeabi_dneg
00078e  4605              MOV      r5,r0
000790  460e              MOV      r6,r1
000792  ec510b18          VMOV     r0,r1,d8
000796  f7fffffe          BL       __aeabi_dneg
00079a  e9cd5622          STRD     r5,r6,[sp,#0x88]
00079e  e9cd0124          STRD     r0,r1,[sp,#0x90]
0007a2  e9cd5670          STRD     r5,r6,[sp,#0x1c0]
0007a6  e9cd0172          STRD     r0,r1,[sp,#0x1c8]
0007aa  a870              ADD      r0,sp,#0x1c0
0007ac  f7fffffe          BL       _ZSt4sqrtIdESt7complexIT_ERKS2_ ; std::sqrt<double>(const std::complex<T1>&)
0007b0  ed8d0b6c          VSTR     d0,[sp,#0x1b0]
0007b4  ed8d1b6e          VSTR     d1,[sp,#0x1b8]
0007b8  a96c              ADD      r1,sp,#0x1b0
0007ba  a80a              ADD      r0,sp,#0x28
0007bc  f7fffffe          BL       _ZStplIdESt7complexIT_ERKS2_S4_ ; std::operator +<double>(const std::complex<T1>&, const std::complex<T1>&)
0007c0  ed8d0b68          VSTR     d0,[sp,#0x1a0]
0007c4  ed8d1b6a          VSTR     d1,[sp,#0x1a8]
0007c8  ed9fabfd          VLDR     d10,|L339.3008|
0007cc  a968              ADD      r1,sp,#0x1a0
0007ce  ed8dab18          VSTR     d10,[sp,#0x60]
0007d2  a818              ADD      r0,sp,#0x60
0007d4  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
0007d8  eeb08a41          VMOV.F32 s16,s2
0007dc  eef08a61          VMOV.F32 s17,s3
0007e0  ed9d1b14          VLDR     d1,[sp,#0x50]
0007e4  ec510b10          VMOV     r0,r1,d0
0007e8  ec532b11          VMOV     r2,r3,d1
0007ec  f7fffffe          BL       __aeabi_dadd
0007f0  eeb01a48          VMOV.F32 s2,s16
0007f4  eef01a68          VMOV.F32 s3,s17
0007f8  e9cd0122          STRD     r0,r1,[sp,#0x88]
0007fc  ed8d1b24          VSTR     d1,[sp,#0x90]
000800  e9cd011a          STRD     r0,r1,[sp,#0x68]
000804  ed8d1b1c          VSTR     d1,[sp,#0x70]
000808  e9c40100          STRD     r0,r1,[r4,#0]
00080c  99a3              LDR      r1,[sp,#0x28c]
00080e  ec4b7b10          VMOV     d0,r7,r11
000812  ec418b18          VMOV     d8,r8,r1
;;;123            realRoots[0] = temp.real();
;;;124            temp = -B/(PRECISION(4)*A) + PRECISION(0.5)*(w-sqrt(-(PRECISION(3)*alpha+PRECISION(2)*y+PRECISION(2)*beta/w)));
000816  ec510b10          VMOV     r0,r1,d0
00081a  ec532b18          VMOV     r2,r3,d8
00081e  f7fffffe          BL       __aeabi_ddiv
000822  e9cd0108          STRD     r0,r1,[sp,#0x20]
000826  999f              LDR      r1,[sp,#0x27c]
000828  a816              ADD      r0,sp,#0x58
00082a  e9cda116          STRD     r10,r1,[sp,#0x58]
00082e  a90a              ADD      r1,sp,#0x28
000830  f7fffffe          BL       _ZStdvIdESt7complexIT_ERKS1_RKS2_ ; std::operator /<double>(const T1&, const std::complex<T1>&)
000834  ed8d0b84          VSTR     d0,[sp,#0x210]
000838  ed8d1b86          VSTR     d1,[sp,#0x218]
00083c  99a2              LDR      r1,[sp,#0x288]
00083e  a818              ADD      r0,sp,#0x60
000840  e9cd9114          STRD     r9,r1,[sp,#0x50]
000844  ed8dbb18          VSTR     d11,[sp,#0x60]
000848  a90e              ADD      r1,sp,#0x38
00084a  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
00084e  eeb08a41          VMOV.F32 s16,s2
000852  eef08a61          VMOV.F32 s17,s3
000856  ed9d1b14          VLDR     d1,[sp,#0x50]
00085a  ec510b10          VMOV     r0,r1,d0
00085e  ec532b11          VMOV     r2,r3,d1
000862  f7fffffe          BL       __aeabi_dadd
000866  eeb01a48          VMOV.F32 s2,s16
00086a  eef01a68          VMOV.F32 s3,s17
00086e  e9cd0122          STRD     r0,r1,[sp,#0x88]
000872  ed8d1b24          VSTR     d1,[sp,#0x90]
000876  e9cd0178          STRD     r0,r1,[sp,#0x1e0]
00087a  ed8d1b7a          VSTR     d1,[sp,#0x1e8]
00087e  a984              ADD      r1,sp,#0x210
000880  a878              ADD      r0,sp,#0x1e0
000882  f7fffffe          BL       _ZStplIdESt7complexIT_ERKS2_S4_ ; std::operator +<double>(const std::complex<T1>&, const std::complex<T1>&)
000886  eeb08a41          VMOV.F32 s16,s2
00088a  eef08a61          VMOV.F32 s17,s3
00088e  ec510b10          VMOV     r0,r1,d0
000892  f7fffffe          BL       __aeabi_dneg
000896  4605              MOV      r5,r0
000898  460e              MOV      r6,r1
00089a  ec510b18          VMOV     r0,r1,d8
00089e  f7fffffe          BL       __aeabi_dneg
0008a2  e9cd5622          STRD     r5,r6,[sp,#0x88]
0008a6  e9cd0124          STRD     r0,r1,[sp,#0x90]
0008aa  e9cd5680          STRD     r5,r6,[sp,#0x200]
0008ae  e9cd0182          STRD     r0,r1,[sp,#0x208]
0008b2  a880              ADD      r0,sp,#0x200
0008b4  f7fffffe          BL       _ZSt4sqrtIdESt7complexIT_ERKS2_ ; std::sqrt<double>(const std::complex<T1>&)
0008b8  ad0a              ADD      r5,sp,#0x28
0008ba  eeb08a41          VMOV.F32 s16,s2
0008be  e895000f          LDM      r5,{r0-r3}
0008c2  ad22              ADD      r5,sp,#0x88
0008c4  eef08a61          VMOV.F32 s17,s3
0008c8  e885000f          STM      r5,{r0-r3}
0008cc  ed9d1b22          VLDR     d1,[sp,#0x88]
0008d0  ec510b10          VMOV     r0,r1,d0
0008d4  ec532b11          VMOV     r2,r3,d1
0008d8  f7fffffe          BL       __aeabi_drsub
0008dc  e9cd0122          STRD     r0,r1,[sp,#0x88]
0008e0  ed9d0b24          VLDR     d0,[sp,#0x90]
0008e4  4605              MOV      r5,r0
0008e6  460e              MOV      r6,r1
0008e8  ec532b10          VMOV     r2,r3,d0
0008ec  ec510b18          VMOV     r0,r1,d8
0008f0  f7fffffe          BL       __aeabi_drsub
0008f4  e9cd0124          STRD     r0,r1,[sp,#0x90]
0008f8  e9cd0156          STRD     r0,r1,[sp,#0x158]
0008fc  e9cd5654          STRD     r5,r6,[sp,#0x150]
000900  ed8dab12          VSTR     d10,[sp,#0x48]
000904  a954              ADD      r1,sp,#0x150
000906  a812              ADD      r0,sp,#0x48
000908  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
00090c  eeb08a41          VMOV.F32 s16,s2
000910  eef08a61          VMOV.F32 s17,s3
000914  ed9d1b08          VLDR     d1,[sp,#0x20]
000918  ec510b10          VMOV     r0,r1,d0
00091c  ec532b11          VMOV     r2,r3,d1
000920  f7fffffe          BL       __aeabi_dadd
000924  eeb01a48          VMOV.F32 s2,s16
000928  eef01a68          VMOV.F32 s3,s17
00092c  e9cd0122          STRD     r0,r1,[sp,#0x88]
000930  ed8d1b24          VSTR     d1,[sp,#0x90]
000934  e9cd011a          STRD     r0,r1,[sp,#0x68]
000938  ed8d1b1c          VSTR     d1,[sp,#0x70]
00093c  e9c40102          STRD     r0,r1,[r4,#8]
000940  999e              LDR      r1,[sp,#0x278]
000942  ec4b7b10          VMOV     d0,r7,r11
000946  ec418b11          VMOV     d1,r8,r1
;;;125            realRoots[1] = temp.real();
;;;126            temp = -B/(PRECISION(4)*A) + PRECISION(0.5)*(-w+sqrt(-(PRECISION(3)*alpha+PRECISION(2)*y-PRECISION(2)*beta/w)));
00094a  ec510b10          VMOV     r0,r1,d0
00094e  ec532b11          VMOV     r2,r3,d1
000952  f7fffffe          BL       __aeabi_ddiv
000956  e9cd0108          STRD     r0,r1,[sp,#0x20]
00095a  ed9fbb9b          VLDR     d11,|L339.3016|
00095e  999d              LDR      r1,[sp,#0x274]
000960  a818              ADD      r0,sp,#0x60
000962  e9cd9114          STRD     r9,r1,[sp,#0x50]
000966  ed8dbb18          VSTR     d11,[sp,#0x60]
00096a  a90e              ADD      r1,sp,#0x38
00096c  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
000970  ed8d0bac          VSTR     d0,[sp,#0x2b0]
000974  ed8d1bae          VSTR     d1,[sp,#0x2b8]
000978  eeb08a41          VMOV.F32 s16,s2
00097c  eef08a61          VMOV.F32 s17,s3
000980  ed9d1b14          VLDR     d1,[sp,#0x50]
000984  ec510b10          VMOV     r0,r1,d0
000988  ec532b11          VMOV     r2,r3,d1
00098c  f7fffffe          BL       __aeabi_dadd
000990  e9cd0122          STRD     r0,r1,[sp,#0x88]
000994  ed8d8b24          VSTR     d8,[sp,#0x90]
000998  e9cd014e          STRD     r0,r1,[sp,#0x138]
00099c  ed8d8b50          VSTR     d8,[sp,#0x140]
0009a0  999c              LDR      r1,[sp,#0x270]
0009a2  a816              ADD      r0,sp,#0x58
0009a4  e9cda116          STRD     r10,r1,[sp,#0x58]
0009a8  a90a              ADD      r1,sp,#0x28
0009aa  f7fffffe          BL       _ZStdvIdESt7complexIT_ERKS1_RKS2_ ; std::operator /<double>(const T1&, const std::complex<T1>&)
0009ae  ed8d0ba8          VSTR     d0,[sp,#0x2a0]
0009b2  ad4e              ADD      r5,sp,#0x138
0009b4  ed8d1baa          VSTR     d1,[sp,#0x2a8]
0009b8  e895000f          LDM      r5,{r0-r3}
0009bc  ad22              ADD      r5,sp,#0x88
0009be  eeb08a41          VMOV.F32 s16,s2
0009c2  e885000f          STM      r5,{r0-r3}
0009c6  eef08a61          VMOV.F32 s17,s3
0009ca  ed9d1b22          VLDR     d1,[sp,#0x88]
0009ce  ec510b10          VMOV     r0,r1,d0
0009d2  ec532b11          VMOV     r2,r3,d1
0009d6  f7fffffe          BL       __aeabi_drsub
0009da  ec410b19          VMOV     d9,r0,r1
0009de  ec510b18          VMOV     r0,r1,d8
0009e2  ed8d9b22          VSTR     d9,[sp,#0x88]
0009e6  ed9d0b24          VLDR     d0,[sp,#0x90]
0009ea  ec532b10          VMOV     r2,r3,d0
0009ee  f7fffffe          BL       __aeabi_drsub
0009f2  ec410b18          VMOV     d8,r0,r1
0009f6  ec510b19          VMOV     r0,r1,d9
0009fa  ed8d8b24          VSTR     d8,[sp,#0x90]
0009fe  ed8d9bb4          VSTR     d9,[sp,#0x2d0]
000a02  ed8d8bb6          VSTR     d8,[sp,#0x2d8]
000a06  f7fffffe          BL       __aeabi_dneg
000a0a  4605              MOV      r5,r0
000a0c  460e              MOV      r6,r1
000a0e  ec510b18          VMOV     r0,r1,d8
000a12  f7fffffe          BL       __aeabi_dneg
000a16  e9cd5622          STRD     r5,r6,[sp,#0x88]
000a1a  e9cd0124          STRD     r0,r1,[sp,#0x90]
000a1e  e9cd0192          STRD     r0,r1,[sp,#0x248]
000a22  e9cd5690          STRD     r5,r6,[sp,#0x240]
000a26  a890              ADD      r0,sp,#0x240
000a28  f7fffffe          BL       _ZSt4sqrtIdESt7complexIT_ERKS2_ ; std::sqrt<double>(const std::complex<T1>&)
000a2c  ed8d0b8c          VSTR     d0,[sp,#0x230]
000a30  ed8d1b8e          VSTR     d1,[sp,#0x238]
000a34  ed9d0b0a          VLDR     d0,[sp,#0x28]
000a38  ec510b10          VMOV     r0,r1,d0
000a3c  f7fffffe          BL       __aeabi_dneg
000a40  ed9d0b0c          VLDR     d0,[sp,#0x30]
000a44  4605              MOV      r5,r0
000a46  460e              MOV      r6,r1
000a48  ec510b10          VMOV     r0,r1,d0
000a4c  f7fffffe          BL       __aeabi_dneg
000a50  e9cd5622          STRD     r5,r6,[sp,#0x88]
000a54  e9cd0124          STRD     r0,r1,[sp,#0x90]
000a58  e9cd018a          STRD     r0,r1,[sp,#0x228]
000a5c  e9cd5688          STRD     r5,r6,[sp,#0x220]
000a60  a98c              ADD      r1,sp,#0x230
000a62  a888              ADD      r0,sp,#0x220
000a64  f7fffffe          BL       _ZStplIdESt7complexIT_ERKS2_S4_ ; std::operator +<double>(const std::complex<T1>&, const std::complex<T1>&)
000a68  ed8d0b58          VSTR     d0,[sp,#0x160]
000a6c  ed8d1b5a          VSTR     d1,[sp,#0x168]
000a70  ed8dab12          VSTR     d10,[sp,#0x48]
000a74  a958              ADD      r1,sp,#0x160
000a76  a812              ADD      r0,sp,#0x48
000a78  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
000a7c  ed8d0bb0          VSTR     d0,[sp,#0x2c0]
000a80  ed8d1bb2          VSTR     d1,[sp,#0x2c8]
000a84  eeb08a41          VMOV.F32 s16,s2
000a88  eef08a61          VMOV.F32 s17,s3
000a8c  ed9d1b08          VLDR     d1,[sp,#0x20]
000a90  ec510b10          VMOV     r0,r1,d0
000a94  ec532b11          VMOV     r2,r3,d1
000a98  f7fffffe          BL       __aeabi_dadd
000a9c  e9cd0122          STRD     r0,r1,[sp,#0x88]
000aa0  ed8d8b24          VSTR     d8,[sp,#0x90]
000aa4  e9cd011a          STRD     r0,r1,[sp,#0x68]
000aa8  ed8d8b1c          VSTR     d8,[sp,#0x70]
000aac  e9c40104          STRD     r0,r1,[r4,#0x10]
000ab0  999e              LDR      r1,[sp,#0x278]
000ab2  ec4b7b10          VMOV     d0,r7,r11
000ab6  ec418b11          VMOV     d1,r8,r1
;;;127            realRoots[2] = temp.real();
;;;128            temp = -B/(PRECISION(4)*A) + PRECISION(0.5)*(-w-sqrt(-(PRECISION(3)*alpha+PRECISION(2)*y-PRECISION(2)*beta/w)));
000aba  ec510b10          VMOV     r0,r1,d0
000abe  ec532b11          VMOV     r2,r3,d1
000ac2  f7fffffe          BL       __aeabi_ddiv
000ac6  e9cd0108          STRD     r0,r1,[sp,#0x20]
000aca  ed9d0b0a          VLDR     d0,[sp,#0x28]
000ace  ec510b10          VMOV     r0,r1,d0
000ad2  f7fffffe          BL       __aeabi_dneg
000ad6  ed9d0b0c          VLDR     d0,[sp,#0x30]
000ada  4605              MOV      r5,r0
000adc  460e              MOV      r6,r1
000ade  ec510b10          VMOV     r0,r1,d0
000ae2  f7fffffe          BL       __aeabi_dneg
000ae6  e9cd5622          STRD     r5,r6,[sp,#0x88]
000aea  e9cd0124          STRD     r0,r1,[sp,#0x90]
000aee  e9cd0144          STRD     r0,r1,[sp,#0x110]
000af2  e9cd5642          STRD     r5,r6,[sp,#0x108]
000af6  999d              LDR      r1,[sp,#0x274]
000af8  a818              ADD      r0,sp,#0x60
000afa  e9cd9114          STRD     r9,r1,[sp,#0x50]
000afe  ed8dbb18          VSTR     d11,[sp,#0x60]
000b02  a90e              ADD      r1,sp,#0x38
000b04  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
000b08  ed8d0ba4          VSTR     d0,[sp,#0x290]
000b0c  ed8d1ba6          VSTR     d1,[sp,#0x298]
000b10  eeb08a41          VMOV.F32 s16,s2
000b14  eef08a61          VMOV.F32 s17,s3
000b18  ed9d1b14          VLDR     d1,[sp,#0x50]
000b1c  ec510b10          VMOV     r0,r1,d0
000b20  ec532b11          VMOV     r2,r3,d1
000b24  f7fffffe          BL       __aeabi_dadd
000b28  e9cd0122          STRD     r0,r1,[sp,#0x88]
000b2c  ed8d8b24          VSTR     d8,[sp,#0x90]
000b30  e9cd014a          STRD     r0,r1,[sp,#0x128]
000b34  ed8d8b4c          VSTR     d8,[sp,#0x130]
000b38  999c              LDR      r1,[sp,#0x270]
000b3a  a816              ADD      r0,sp,#0x58
000b3c  e9cda116          STRD     r10,r1,[sp,#0x58]
000b40  a90a              ADD      r1,sp,#0x28
000b42  f7fffffe          BL       _ZStdvIdESt7complexIT_ERKS1_RKS2_ ; std::operator /<double>(const T1&, const std::complex<T1>&)
000b46  ed8d0b46          VSTR     d0,[sp,#0x118]
000b4a  ad4a              ADD      r5,sp,#0x128
000b4c  ed8d1b48          VSTR     d1,[sp,#0x120]
000b50  e895000f          LDM      r5,{r0-r3}
000b54  ad22              ADD      r5,sp,#0x88
000b56  eeb08a41          VMOV.F32 s16,s2
000b5a  e885000f          STM      r5,{r0-r3}
000b5e  eef08a61          VMOV.F32 s17,s3
000b62  ed9d1b22          VLDR     d1,[sp,#0x88]
000b66  ec510b10          VMOV     r0,r1,d0
000b6a  ec532b11          VMOV     r2,r3,d1
000b6e  f7fffffe          BL       __aeabi_drsub
000b72  ec410b19          VMOV     d9,r0,r1
000b76  ec510b18          VMOV     r0,r1,d8
000b7a  ed8d9b22          VSTR     d9,[sp,#0x88]
000b7e  ed9d0b24          VLDR     d0,[sp,#0x90]
000b82  ec532b10          VMOV     r2,r3,d0
000b86  f7fffffe          BL       __aeabi_drsub
000b8a  ec410b18          VMOV     d8,r0,r1
000b8e  ec510b19          VMOV     r0,r1,d9
000b92  ed8d8b24          VSTR     d8,[sp,#0x90]
000b96  ed8d9b3e          VSTR     d9,[sp,#0xf8]
000b9a  ed8d8b40          VSTR     d8,[sp,#0x100]
000b9e  f7fffffe          BL       __aeabi_dneg
000ba2  4605              MOV      r5,r0
000ba4  460e              MOV      r6,r1
000ba6  ec510b18          VMOV     r0,r1,d8
000baa  f7fffffe          BL       __aeabi_dneg
000bae  e9cd5622          STRD     r5,r6,[sp,#0x88]
000bb2  e9cd0124          STRD     r0,r1,[sp,#0x90]
000bb6  e9cd0196          STRD     r0,r1,[sp,#0x258]
000bba  a894              ADD      r0,sp,#0x250
000bbc  e008              B        |L339.3024|
000bbe  0000              DCW      0x0000
                  |L339.3008|
000bc0  00000000          DCFD     0x3fe0000000000000 ; 0.5
000bc4  3fe00000
                  |L339.3016|
000bc8  00000000          DCFD     0x4000000000000000 ; 2
000bcc  40000000
                  |L339.3024|
000bd0  e9cd5694          STRD     r5,r6,[sp,#0x250]
000bd4  f7fffffe          BL       _ZSt4sqrtIdESt7complexIT_ERKS2_ ; std::sqrt<double>(const std::complex<T1>&)
000bd8  ed8d0b3a          VSTR     d0,[sp,#0xe8]
000bdc  ad42              ADD      r5,sp,#0x108
000bde  ed8d1b3c          VSTR     d1,[sp,#0xf0]
000be2  e895000f          LDM      r5,{r0-r3}
000be6  ad22              ADD      r5,sp,#0x88
000be8  eeb08a41          VMOV.F32 s16,s2
000bec  e885000f          STM      r5,{r0-r3}
000bf0  eef08a61          VMOV.F32 s17,s3
000bf4  ed9d1b22          VLDR     d1,[sp,#0x88]
000bf8  ec510b10          VMOV     r0,r1,d0
000bfc  ec532b11          VMOV     r2,r3,d1
000c00  f7fffffe          BL       __aeabi_drsub
000c04  e9cd0122          STRD     r0,r1,[sp,#0x88]
000c08  ed9d0b24          VLDR     d0,[sp,#0x90]
000c0c  4605              MOV      r5,r0
000c0e  460e              MOV      r6,r1
000c10  ec532b10          VMOV     r2,r3,d0
000c14  ec510b18          VMOV     r0,r1,d8
000c18  f7fffffe          BL       __aeabi_drsub
000c1c  e9cd0124          STRD     r0,r1,[sp,#0x90]
000c20  e9cd015e          STRD     r0,r1,[sp,#0x178]
000c24  e9cd565c          STRD     r5,r6,[sp,#0x170]
000c28  ed8dab12          VSTR     d10,[sp,#0x48]
000c2c  a95c              ADD      r1,sp,#0x170
000c2e  a812              ADD      r0,sp,#0x48
000c30  f7fffffe          BL       _ZStmlIdESt7complexIT_ERKS1_RKS2_ ; std::operator *<double>(const T1&, const std::complex<T1>&)
000c34  ed8d0b04          VSTR     d0,[sp,#0x10]
000c38  ed8d1b06          VSTR     d1,[sp,#0x18]
000c3c  eeb08a41          VMOV.F32 s16,s2
000c40  eef08a61          VMOV.F32 s17,s3
000c44  ed9d1b08          VLDR     d1,[sp,#0x20]
000c48  ec510b10          VMOV     r0,r1,d0
000c4c  ec532b11          VMOV     r2,r3,d1
000c50  f7fffffe          BL       __aeabi_dadd
000c54  ed8d8b24          VSTR     d8,[sp,#0x90]
000c58  ed8d8b1c          VSTR     d8,[sp,#0x70]
000c5c  e9c40106          STRD     r0,r1,[r4,#0x18]
;;;129            realRoots[3] = temp.real();
;;;130    
;;;131            /*
;;;132            CoreTechPrint("factors = %f, %f, %f, %f, %f\n",
;;;133            factors[0], factors[1], factors[2], factors[3], factors[4]);
;;;134    
;;;135            CoreTechPrint("realRoots = %f, %f, %f, %f\n",
;;;136            realRoots[0], realRoots[1], realRoots[2], realRoots[3]);
;;;137            */
;;;138    
;;;139            return RESULT_OK;
;;;140          } // solveQuartic()
000c60  f50d7d3f          ADD      sp,sp,#0x2fc
000c64  2000              MOVS     r0,#0                 ;139
000c66  ecbd8b10          VPOP     {d8-d15}
000c6a  e8bd8ff0          POP      {r4-r11,pc}
;;;141    
                          ENDP


                          AREA ||area_number.340||, COMGROUP=_ZN4Anki8Embedded3P3P12solveQuarticIdEENS_6ResultEPKT_PS4_, LINKORDER=||t._ZN4Anki8Embedded3P3P12solveQuarticIdEENS_6ResultEPKT_PS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.340||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded3P3P12solveQuarticIdEENS_6ResultEPKT_PS4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_||, COMGROUP=_ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ PROC ; Anki::Embedded::operator *<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
;;;270        template<typename Type>
;;;271        Point3<Type> operator* (const Array<Type>& M, const Point3<Type>& p)
000000  b410              PUSH     {r4}
000002  f8d1c008          LDR      r12,[r1,#8]
000006  690b              LDR      r3,[r1,#0x10]
;;;272        {
;;;273          // Matrix M must be 3x3
;;;274          AnkiAssert(AreEqualSize(3, 3, M));
;;;275    
;;;276          return Point3<Type>(M[0][0]*p.x + M[0][1]*p.y + M[0][2]*p.z,
000008  2400              MOVS     r4,#0
00000a  fb04310c          MLA      r1,r4,r12,r3
00000e  ed921a00          VLDR     s2,[r2,#0]
000012  ed910a00          VLDR     s0,[r1,#0]
000016  edd20a01          VLDR     s1,[r2,#4]
00001a  edd11a02          VLDR     s3,[r1,#8]
00001e  ee202a01          VMUL.F32 s4,s0,s2
000022  ed910a01          VLDR     s0,[r1,#4]
000026  2101              MOVS     r1,#1
000028  fb01310c          MLA      r1,r1,r12,r3
00002c  ee002a20          VMLA.F32 s4,s0,s1
000030  ed920a02          VLDR     s0,[r2,#8]
000034  edd12a01          VLDR     s5,[r1,#4]
000038  ee012a80          VMLA.F32 s4,s3,s0
00003c  edd11a00          VLDR     s3,[r1,#0]
000040  ee611a81          VMUL.F32 s3,s3,s2
000044  ee421aa0          VMLA.F32 s3,s5,s1
000048  edd12a02          VLDR     s5,[r1,#8]
00004c  2102              MOVS     r1,#2
00004e  fb01310c          MLA      r1,r1,r12,r3
000052  ee421a80          VMLA.F32 s3,s5,s0
000056  edd12a00          VLDR     s5,[r1,#0]
00005a  ee221a81          VMUL.F32 s2,s5,s2
00005e  edd12a01          VLDR     s5,[r1,#4]
000062  ee021aa0          VMLA.F32 s2,s5,s1
000066  edd10a02          VLDR     s1,[r1,#8]
00006a  ed802a00          VSTR     s4,[r0,#0]
00006e  edc01a01          VSTR     s3,[r0,#4]
000072  ee001a80          VMLA.F32 s2,s1,s0
000076  ed801a02          VSTR     s2,[r0,#8]
;;;277            M[1][0]*p.x + M[1][1]*p.y + M[1][2]*p.z,
;;;278            M[2][0]*p.x + M[2][1]*p.y + M[2][2]*p.z);
;;;279        }
00007a  bc10              POP      {r4}
00007c  4770              BX       lr
;;;280    
                          ENDP


                          AREA ||area_number.347||, COMGROUP=_ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_, LINKORDER=||t._ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.347||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIfEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE||, COMGROUP=_ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIfEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIfEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE PROC ; Anki::Embedded::P3P::createIntermediateCameraFrameHelper<float>(Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&)
;;;55           template<typename PRECISION>
;;;56           Result createIntermediateCameraFrameHelper(Point3<PRECISION>& f1,
000000  b530              PUSH     {r4,r5,lr}
;;;57             Point3<PRECISION>& f2,
;;;58             Point3<PRECISION>& f3,
;;;59             Array<PRECISION>& T)
;;;60           {
000002  b08d              SUB      sp,sp,#0x34
000004  ed900a00          VLDR     s0,[r0,#0]
000008  4615              MOV      r5,r2
00000a  ed8d0a03          VSTR     s0,[sp,#0xc]
00000e  ed900a01          VLDR     s0,[r0,#4]
;;;61             Point3<PRECISION> e1 = f1;
;;;62             Point3<PRECISION> e3 = CrossProduct(f1, f2);
000012  460a              MOV      r2,r1
000014  ed8d0a04          VSTR     s0,[sp,#0x10]
000018  ed900a02          VLDR     s0,[r0,#8]
00001c  4601              MOV      r1,r0
00001e  461c              MOV      r4,r3                 ;60
000020  ed8d0a05          VSTR     s0,[sp,#0x14]         ;60
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
;;;63             if(e3.MakeUnitLength() == 0) { return RESULT_FAIL; }
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       _ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv ; Anki::Embedded::Point3<float>::MakeUnitLength()
000030  eeb50ac0          VCMPE.F32 s0,#0.0
000034  eef1fa10          VMRS     APSR_nzcv,FPSCR
000038  bf02              ITTT     EQ
00003a  2001              MOVEQ    r0,#1
;;;64             Point3<PRECISION> e2 = CrossProduct(e3, e1);
;;;65     
;;;66             // The e vectors are the rows of the T matrix (and T should already be allocated)
;;;67             AnkiAssert(AreEqualSize(3, 3, T));
;;;68             T[0][0] = e1.x;   T[0][1] = e1.y;   T[0][2] = e1.z;
;;;69             T[1][0] = e2.x;   T[1][1] = e2.y;   T[1][2] = e2.z;
;;;70             T[2][0] = e3.x;   T[2][1] = e3.y;   T[2][2] = e3.z;
;;;71     
;;;72             f3 = T * f3;
;;;73     
;;;74             return RESULT_OK;
;;;75           } // createIntermediateCameraFrameHelper()
00003c  b00d              ADDEQ    sp,sp,#0x34
00003e  bd30              POPEQ    {r4,r5,pc}
000040  aa03              ADD      r2,sp,#0xc            ;64
000042  4669              MOV      r1,sp                 ;64
000044  a809              ADD      r0,sp,#0x24           ;64
000046  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
00004a  68a2              LDR      r2,[r4,#8]            ;64
00004c  6921              LDR      r1,[r4,#0x10]         ;64
00004e  2000              MOVS     r0,#0                 ;68
000050  fb001002          MLA      r0,r0,r2,r1           ;68
000054  ed9d0a03          VLDR     s0,[sp,#0xc]          ;68
000058  ed800a00          VSTR     s0,[r0,#0]            ;68
00005c  68a2              LDR      r2,[r4,#8]            ;68
00005e  6921              LDR      r1,[r4,#0x10]         ;68
000060  2000              MOVS     r0,#0                 ;68
000062  fb001002          MLA      r0,r0,r2,r1           ;68
000066  ed9d0a04          VLDR     s0,[sp,#0x10]         ;68
00006a  ed800a01          VSTR     s0,[r0,#4]            ;68
00006e  68a2              LDR      r2,[r4,#8]            ;68
000070  6921              LDR      r1,[r4,#0x10]         ;68
000072  2000              MOVS     r0,#0                 ;68
000074  fb001002          MLA      r0,r0,r2,r1           ;68
000078  ed9d0a05          VLDR     s0,[sp,#0x14]         ;68
00007c  ed800a02          VSTR     s0,[r0,#8]            ;68
000080  68a2              LDR      r2,[r4,#8]            ;68
000082  6921              LDR      r1,[r4,#0x10]         ;68
000084  2001              MOVS     r0,#1                 ;69
000086  fb001002          MLA      r0,r0,r2,r1           ;69
00008a  ed9d0a09          VLDR     s0,[sp,#0x24]         ;69
00008e  ed800a00          VSTR     s0,[r0,#0]            ;69
000092  68a2              LDR      r2,[r4,#8]            ;69
000094  6921              LDR      r1,[r4,#0x10]         ;69
000096  2001              MOVS     r0,#1                 ;69
000098  fb001002          MLA      r0,r0,r2,r1           ;69
00009c  ed9d0a0a          VLDR     s0,[sp,#0x28]         ;69
0000a0  ed800a01          VSTR     s0,[r0,#4]            ;69
0000a4  68a2              LDR      r2,[r4,#8]            ;69
0000a6  6921              LDR      r1,[r4,#0x10]         ;69
0000a8  2001              MOVS     r0,#1                 ;69
0000aa  fb001002          MLA      r0,r0,r2,r1           ;69
0000ae  ed9d0a0b          VLDR     s0,[sp,#0x2c]         ;69
0000b2  ed800a02          VSTR     s0,[r0,#8]            ;69
0000b6  68a2              LDR      r2,[r4,#8]            ;69
0000b8  6921              LDR      r1,[r4,#0x10]         ;69
0000ba  2002              MOVS     r0,#2                 ;70
0000bc  fb001002          MLA      r0,r0,r2,r1           ;70
0000c0  ed9d0a00          VLDR     s0,[sp,#0]            ;70
0000c4  ed800a00          VSTR     s0,[r0,#0]            ;70
0000c8  68a2              LDR      r2,[r4,#8]            ;70
0000ca  6921              LDR      r1,[r4,#0x10]         ;70
0000cc  2002              MOVS     r0,#2                 ;70
0000ce  fb001002          MLA      r0,r0,r2,r1           ;70
0000d2  ed9d0a01          VLDR     s0,[sp,#4]            ;70
0000d6  ed800a01          VSTR     s0,[r0,#4]            ;70
0000da  68a2              LDR      r2,[r4,#8]            ;70
0000dc  6921              LDR      r1,[r4,#0x10]         ;70
0000de  2002              MOVS     r0,#2                 ;70
0000e0  fb001002          MLA      r0,r0,r2,r1           ;70
0000e4  ed9d0a02          VLDR     s0,[sp,#8]            ;70
0000e8  462a              MOV      r2,r5                 ;72
0000ea  ed800a02          VSTR     s0,[r0,#8]            ;70
0000ee  4621              MOV      r1,r4                 ;72
0000f0  a806              ADD      r0,sp,#0x18           ;72
0000f2  f7fffffe          BL       _ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
0000f6  ed9d0a06          VLDR     s0,[sp,#0x18]         ;72
0000fa  2000              MOVS     r0,#0                 ;74
0000fc  ed850a00          VSTR     s0,[r5,#0]            ;74
000100  ed9d0a07          VLDR     s0,[sp,#0x1c]         ;74
000104  ed850a01          VSTR     s0,[r5,#4]            ;74
000108  ed9d0a08          VLDR     s0,[sp,#0x20]         ;74
00010c  ed850a02          VSTR     s0,[r5,#8]            ;74
000110  b00d              ADD      sp,sp,#0x34
000112  bd30              POP      {r4,r5,pc}
;;;76     
                          ENDP


                          AREA ||area_number.354||, COMGROUP=_ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIfEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE, LINKORDER=||t._ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIfEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.354||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIfEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_||, COMGROUP=_ZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_ PROC ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)
;;;142          template<typename PRECISION>
;;;143          Result computePossiblePoses(const Point3<PRECISION>& worldPoint1,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;144            const Point3<PRECISION>& worldPoint2,
;;;145            const Point3<PRECISION>& worldPoint3,
;;;146            const Point3<PRECISION>& imageRay1,
;;;147            const Point3<PRECISION>& imageRay2,
;;;148            const Point3<PRECISION>& imageRay3,
;;;149            Array<PRECISION>& R1, Point3<PRECISION>& T1,
;;;150            Array<PRECISION>& R2, Point3<PRECISION>& T2,
;;;151            Array<PRECISION>& R3, Point3<PRECISION>& T3,
;;;152            Array<PRECISION>& R4, Point3<PRECISION>& T4)
;;;153          {
000004  4617              MOV      r7,r2
000006  ed2d8b0e          VPUSH    {d8-d14}
00000a  f2ad4db4          SUB      sp,sp,#0x4b4
00000e  461e              MOV      r6,r3
000010  4688              MOV      r8,r1
000012  4681              MOV      r9,r0
;;;154            Result lastResult = RESULT_OK;
;;;155    
;;;156            // Create a little memory stack for the various 3x3 matrices used below
;;;157            const s32 SCRATCH_BUFFER_SIZE = 768;
;;;158            char buffer[SCRATCH_BUFFER_SIZE];
;;;159            MemoryStack scratch(buffer, SCRATCH_BUFFER_SIZE);
000014  2201              MOVS     r2,#1
000016  2300              MOVS     r3,#0
000018  4611              MOV      r1,r2
00001a  a837              ADD      r0,sp,#0xdc
00001c  f8ddb534          LDR      r11,[sp,#0x534]
000020  f8dd5510          LDR      r5,[sp,#0x510]
000024  f8dd4514          LDR      r4,[sp,#0x514]
000028  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00002c  6803              LDR      r3,[r0,#0]
00002e  f44f7240          MOV      r2,#0x300
000032  a938              ADD      r1,sp,#0xe0
000034  a8fd              ADD      r0,sp,#0x3f4
000036  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE ; Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
;;;160    
;;;161            // Typedef the templated classes for brevity below
;;;162            typedef Point3<PRECISION> POINT;
;;;163            typedef Array<PRECISION>  MATRIX;
;;;164    
;;;165            BeginBenchmark("cpml_init");
00003a  48f8              LDR      r0,|L360.1052|
00003c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000040  ed990a00          VLDR     s0,[r9,#0]
;;;166    
;;;167            /*
;;;168            CoreTechPrint("  worldPoint1 = (%f, %f, %f)\n", worldPoint1.x, worldPoint1.y, worldPoint1.z);
;;;169            CoreTechPrint("  worldPoint2 = (%f, %f, %f)\n", worldPoint2.x, worldPoint2.y, worldPoint2.z);
;;;170            CoreTechPrint("  worldPoint3 = (%f, %f, %f)\n", worldPoint3.x, worldPoint3.y, worldPoint3.z);
;;;171    
;;;172            CoreTechPrint("  imageRay1 = (%f, %f, %f)\n", imageRay1.x, imageRay1.y, imageRay1.z);
;;;173            CoreTechPrint("  imageRay2 = (%f, %f, %f)\n", imageRay2.x, imageRay2.y, imageRay2.z);
;;;174            CoreTechPrint("  imageRay3 = (%f, %f, %f)\n", imageRay3.x, imageRay3.y, imageRay3.z);
;;;175            */
;;;176    
;;;177            POINT P1(worldPoint1);
;;;178            POINT P2(worldPoint2);
;;;179            POINT P3(worldPoint3);
;;;180    
;;;181            // Verify the world points are not colinear
;;;182            if(CrossProduct(P2 - P1, P3 - P1).Length() == 0) {
000044  aa16              ADD      r2,sp,#0x58
000046  ed8d0a16          VSTR     s0,[sp,#0x58]
00004a  ed990a01          VLDR     s0,[r9,#4]
00004e  a91c              ADD      r1,sp,#0x70
000050  ed8d0a17          VSTR     s0,[sp,#0x5c]
000054  ed990a02          VLDR     s0,[r9,#8]
000058  a819              ADD      r0,sp,#0x64
00005a  ed8d0a18          VSTR     s0,[sp,#0x60]
00005e  ed980a00          VLDR     s0,[r8,#0]
000062  ed8d0a28          VSTR     s0,[sp,#0xa0]
000066  ed980a01          VLDR     s0,[r8,#4]
00006a  ed8d0a29          VSTR     s0,[sp,#0xa4]
00006e  ed980a02          VLDR     s0,[r8,#8]
000072  ed8d0a2a          VSTR     s0,[sp,#0xa8]
000076  ed970a00          VLDR     s0,[r7,#0]
00007a  ed8d0a1c          VSTR     s0,[sp,#0x70]
00007e  ed970a01          VLDR     s0,[r7,#4]
000082  ed8d0a1d          VSTR     s0,[sp,#0x74]
000086  ed970a02          VLDR     s0,[r7,#8]
00008a  ed8d0a1e          VSTR     s0,[sp,#0x78]
00008e  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IfEmiERKS2_ ; Anki::Embedded::Point3<float>::operator -(const Anki::Embedded::Point3<float>&) const
000092  aa16              ADD      r2,sp,#0x58
000094  a928              ADD      r1,sp,#0xa0
000096  f20d4074          ADD      r0,sp,#0x474
00009a  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IfEmiERKS2_ ; Anki::Embedded::Point3<float>::operator -(const Anki::Embedded::Point3<float>&) const
00009e  aa19              ADD      r2,sp,#0x64
0000a0  f20d4174          ADD      r1,sp,#0x474
0000a4  a831              ADD      r0,sp,#0xc4
0000a6  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
0000aa  ed9d0a31          VLDR     s0,[sp,#0xc4]
0000ae  eddd0a32          VLDR     s1,[sp,#0xc8]
0000b2  ee200a00          VMUL.F32 s0,s0,s0
0000b6  ee000aa0          VMLA.F32 s0,s1,s1
0000ba  eddd0a33          VLDR     s1,[sp,#0xcc]
0000be  ee000aa0          VMLA.F32 s0,s1,s1
0000c2  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
0000c6  eeb50ac0          VCMPE.F32 s0,#0.0
0000ca  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000ce  d07d              BEQ      |L360.460|
0000d0  ed960a00          VLDR     s0,[r6,#0]
;;;183              return RESULT_FAIL;
;;;184            }
;;;185    
;;;186            POINT f1(imageRay1);
;;;187            POINT f2(imageRay2);
;;;188            POINT f3(imageRay3);
;;;189    
;;;190            // Rays should be unit length:
;;;191            AnkiAssert(NEAR(f1.Length(), 1.f, 1e-6f));
;;;192            AnkiAssert(NEAR(f2.Length(), 1.f, 1e-6f));
;;;193            AnkiAssert(NEAR(f3.Length(), 1.f, 1e-6f));
;;;194    
;;;195            MATRIX T = MATRIX(3,3,scratch);
0000d4  2300              MOVS     r3,#0
0000d6  ed8d0a22          VSTR     s0,[sp,#0x88]
0000da  ed960a01          VLDR     s0,[r6,#4]
0000de  461a              MOV      r2,r3
0000e0  ed8d0a23          VSTR     s0,[sp,#0x8c]
0000e4  ed960a02          VLDR     s0,[r6,#8]
0000e8  2101              MOVS     r1,#1
0000ea  ed8d0a24          VSTR     s0,[sp,#0x90]
0000ee  ed950a00          VLDR     s0,[r5,#0]
0000f2  a837              ADD      r0,sp,#0xdc
0000f4  ed8d0a25          VSTR     s0,[sp,#0x94]
0000f8  ed950a01          VLDR     s0,[r5,#4]
0000fc  ed8d0a26          VSTR     s0,[sp,#0x98]
000100  ed950a02          VLDR     s0,[r5,#8]
000104  ed8d0a27          VSTR     s0,[sp,#0x9c]
000108  ed940a00          VLDR     s0,[r4,#0]
00010c  ed8d0a1f          VSTR     s0,[sp,#0x7c]
000110  ed940a01          VLDR     s0,[r4,#4]
000114  ed8d0a20          VSTR     s0,[sp,#0x80]
000118  ed940a02          VLDR     s0,[r4,#8]
00011c  ed8d0a21          VSTR     s0,[sp,#0x84]
000120  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000124  6800              LDR      r0,[r0,#0]
000126  2203              MOVS     r2,#3
000128  9000              STR      r0,[sp,#0]
00012a  abfd              ADD      r3,sp,#0x3f4
00012c  4611              MOV      r1,r2
00012e  f20d4024          ADD      r0,sp,#0x424
000132  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;196            AnkiConditionalErrorAndReturnValue(T.IsValid(), RESULT_FAIL_MEMORY,
000136  f20d4024          ADD      r0,sp,#0x424
00013a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00013e  f8dfa2e0          LDR      r10,|L360.1056|
000142  2800              CMP      r0,#0
000144  d07e              BEQ      |L360.580|
;;;197              "P3P::computePossiblePoses()",
;;;198              "Invalid T Matrix, out of memory?");
;;;199    
;;;200            // Create intermediate camera frame
;;;201            if((lastResult = createIntermediateCameraFrameHelper(f1, f2, f3, T)) != RESULT_OK) {
000146  f20d4324          ADD      r3,sp,#0x424
00014a  aa1f              ADD      r2,sp,#0x7c
00014c  a925              ADD      r1,sp,#0x94
00014e  a822              ADD      r0,sp,#0x88
000150  f7fffffe          BL       _ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIfEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE ; Anki::Embedded::P3P::createIntermediateCameraFrameHelper<float>(Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&)
000154  2800              CMP      r0,#0
;;;202              return lastResult;
;;;203            }
;;;204    
;;;205            // Reinforce that f3[2] > 0 for theta in [0,pi]
;;;206            if(f3.z > 0)
;;;207            {
;;;208              f1 = imageRay2;
;;;209              f2 = imageRay1;
;;;210              f3 = imageRay3;
;;;211    
;;;212              if((lastResult = createIntermediateCameraFrameHelper(f1, f2, f3, T)) != RESULT_OK) {
;;;213                return lastResult;
;;;214              }
;;;215    
;;;216              P1 = worldPoint2;
;;;217              P2 = worldPoint1;
;;;218              P3 = worldPoint3;
;;;219            }
;;;220    
;;;221            // Creation of intermediate world frame
;;;222            POINT n1 = P2 - P1;
;;;223            if(n1.MakeUnitLength() == 0) { return RESULT_FAIL; }
;;;224    
;;;225            POINT n3(CrossProduct(n1, (P3-P1)));
;;;226            if(n3.MakeUnitLength() == 0) { return RESULT_FAIL; }
;;;227    
;;;228            POINT n2(CrossProduct(n3,n1));
;;;229    
;;;230            // the n vectors are the rows of the N matrix
;;;231            MATRIX N = MATRIX(3,3,scratch);
;;;232            AnkiConditionalErrorAndReturnValue(N.IsValid(), RESULT_FAIL_MEMORY,
;;;233              "P3P::computePossiblePoses()",
;;;234              "Invalid N Matrix, out of memory?");
;;;235            N[0][0] = n1.x; N[0][1] = n1.y; N[0][2] = n1.z;
;;;236            N[1][0] = n2.x; N[1][1] = n2.y; N[1][2] = n2.z;
;;;237            N[2][0] = n3.x; N[2][1] = n3.y; N[2][2] = n3.z;
;;;238    
;;;239            // Extraction of known parameters
;;;240    
;;;241            P3 = N*(P3-P1);
;;;242    
;;;243            PRECISION d_12 = (P2-P1).Length();
;;;244            PRECISION f_1 = f3.x/f3.z;
;;;245            PRECISION f_2 = f3.y/f3.z;
;;;246            PRECISION p_1 = P3.x;
;;;247            PRECISION p_2 = P3.y;
;;;248    
;;;249            PRECISION cos_beta = DotProduct(f1, f2);
;;;250            PRECISION b = PRECISION(1)/(PRECISION(1)-cos_beta*cos_beta) - PRECISION(1);
;;;251    
;;;252            if (cos_beta < 0) {
;;;253              b = -sqrt(b);
;;;254            }	else {
;;;255              b = sqrt(b);
;;;256            }
;;;257    
;;;258            // Definition of temporary variables for avoiding multiple computation
;;;259    
;;;260            PRECISION f_1_pw2 = f_1*f_1; //pow(f_1,2);
;;;261            PRECISION f_2_pw2 = f_2*f_2; //pow(f_2,2);
;;;262            PRECISION p_1_pw2 = p_1*p_1; //pow(p_1,2);
;;;263            PRECISION p_1_pw3 = p_1_pw2 * p_1;
;;;264            PRECISION p_1_pw4 = p_1_pw3 * p_1;
;;;265            PRECISION p_2_pw2 = p_2*p_2; //pow(p_2,2);
;;;266            PRECISION p_2_pw3 = p_2_pw2 * p_2;
;;;267            PRECISION p_2_pw4 = p_2_pw3 * p_2;
;;;268            PRECISION d_12_pw2 = d_12*d_12; //pow(d_12,2);
;;;269            PRECISION b_pw2 = b*b; //pow(b,2);
;;;270    
;;;271            // Computation of factors of 4th degree polynomial
;;;272            PRECISION factors[5];
;;;273    
;;;274            factors[0] = -f_2_pw2*p_2_pw4
;;;275              -p_2_pw4*f_1_pw2
;;;276              -p_2_pw4;
;;;277    
;;;278            factors[1] = 2*p_2_pw3*d_12*b
;;;279              +2*f_2_pw2*p_2_pw3*d_12*b
;;;280              -2*f_2*p_2_pw3*f_1*d_12;
;;;281    
;;;282            factors[2] = -f_2_pw2*p_2_pw2*p_1_pw2
;;;283              -f_2_pw2*p_2_pw2*d_12_pw2*b_pw2
;;;284              -f_2_pw2*p_2_pw2*d_12_pw2
;;;285              +f_2_pw2*p_2_pw4
;;;286              +p_2_pw4*f_1_pw2
;;;287              +2*p_1*p_2_pw2*d_12
;;;288              +2*f_1*f_2*p_1*p_2_pw2*d_12*b
;;;289              -p_2_pw2*p_1_pw2*f_1_pw2
;;;290              +2*p_1*p_2_pw2*f_2_pw2*d_12
;;;291              -p_2_pw2*d_12_pw2*b_pw2
;;;292              -2*p_1_pw2*p_2_pw2;
;;;293    
;;;294            factors[3] = 2*p_1_pw2*p_2*d_12*b
;;;295              +2*f_2*p_2_pw3*f_1*d_12
;;;296              -2*f_2_pw2*p_2_pw3*d_12*b
;;;297              -2*p_1*p_2*d_12_pw2*b;
;;;298    
;;;299            factors[4] = -2*f_2*p_2_pw2*f_1*p_1*d_12*b
;;;300              +f_2_pw2*p_2_pw2*d_12_pw2
;;;301              +2*p_1_pw3*d_12
;;;302              -p_1_pw2*d_12_pw2
;;;303              +f_2_pw2*p_2_pw2*p_1_pw2
;;;304              -p_1_pw4
;;;305              -2*f_2_pw2*p_2_pw2*p_1*d_12
;;;306              +p_2_pw2*f_1_pw2*p_1_pw2
;;;307              +f_2_pw2*p_2_pw2*d_12_pw2*b_pw2;
;;;308    
;;;309            // Computation of roots
;;;310            PRECISION realRoots[4];
;;;311            solveQuartic(factors, realRoots);
;;;312    
;;;313            // Backsubstitution of each solution
;;;314    
;;;315            // Make an array of pointers to the outputs so we can loop over them
;;;316            // to create each solution below
;;;317            Array<PRECISION>*  Rout[4] = {&R1, &R2, &R3, &R4};
;;;318            Point3<PRECISION>* Tout[4] = {&T1, &T2, &T3, &T4};
;;;319    
;;;320            MATRIX Tt = MATRIX(3,3,scratch);
;;;321            AnkiConditionalErrorAndReturnValue(Tt.IsValid(), RESULT_FAIL_MEMORY,
;;;322              "P3P::computePossiblePoses()",
;;;323              "Invalid Tt Matrix, out of memory?");
;;;324            if((lastResult = Matrix::Transpose(T, Tt)) != RESULT_OK) {
;;;325              return lastResult;
;;;326            }
;;;327    
;;;328            MATRIX Nt = MATRIX(3,3,scratch);
;;;329            AnkiConditionalErrorAndReturnValue(Nt.IsValid(), RESULT_FAIL_MEMORY,
;;;330              "P3P::computePossiblePoses()",
;;;331              "Invalid Nt Matrix, out of memory?");
;;;332            if((lastResult = Matrix::Transpose(N, Nt)) != RESULT_OK) {
;;;333              return lastResult;
;;;334            }
;;;335    
;;;336            MATRIX R = MATRIX(3,3,scratch);
;;;337            AnkiConditionalErrorAndReturnValue(R.IsValid(), RESULT_FAIL_MEMORY,
;;;338              "P3P::computePossiblePoses()",
;;;339              "Invalid R Matrix, out of memory?");
;;;340            MATRIX temp = MATRIX(3,3,scratch);
;;;341            AnkiConditionalErrorAndReturnValue(temp.IsValid(), RESULT_FAIL_MEMORY,
;;;342              "P3P::computePossiblePoses()",
;;;343              "Invalid temp Matrix, out of memory?");
;;;344    
;;;345            EndBenchmark("cpml_init");
;;;346    
;;;347            for(s32 i=0; i<4; i++)
;;;348            {
;;;349              BeginBenchmark("cpml_mainLoop");
;;;350    
;;;351              PRECISION cot_alpha = (-f_1*p_1/f_2-realRoots[i]*p_2+d_12*b)/(-f_1*realRoots[i]*p_2/f_2+p_1-d_12);
;;;352    
;;;353              PRECISION cos_theta = realRoots[i];
;;;354              PRECISION sin_theta = sqrt(1-realRoots[i]*realRoots[i]);
;;;355              PRECISION sin_alpha = sqrt(1/(cot_alpha*cot_alpha+1));
;;;356              PRECISION cos_alpha = sqrt(1-sin_alpha*sin_alpha);
;;;357    
;;;358              if (cot_alpha < 0) {
;;;359                cos_alpha = -cos_alpha;
;;;360              }
;;;361    
;;;362              // Fill in the initial R matrix
;;;363              R[0][0] = -cos_alpha;    R[0][1] = -sin_alpha*cos_theta;   R[0][2] = -sin_alpha*sin_theta;
;;;364              R[1][0] =  sin_alpha;    R[1][1] = -cos_alpha*cos_theta;   R[1][2] = -cos_alpha*sin_theta;
;;;365              R[2][0] =  0;            R[2][1] = -sin_theta;             R[2][2] = cos_theta;
;;;366    
;;;367              // Assign this solution's rotation matrix to the output
;;;368              //  Rout[i] = Tt * R * N;
;;;369              AnkiAssert(Rout[i]->get_size(0) == 3 && Rout[i]->get_size(1) == 3);
;;;370              if((lastResult = Matrix::Multiply(Tt, R, temp)) != RESULT_OK) {
;;;371                return lastResult;
;;;372              }
;;;373              if((lastResult = Matrix::Multiply(temp, N, *Rout[i])) != RESULT_OK) {
;;;374                return lastResult;
;;;375              }
;;;376    
;;;377              POINT C(d_12*cos_alpha*(sin_alpha*b+cos_alpha),
;;;378                cos_theta*d_12*sin_alpha*(sin_alpha*b+cos_alpha),
;;;379                sin_theta*d_12*sin_alpha*(sin_alpha*b+cos_alpha));
;;;380    
;;;381              // Assign this solution's translation vector to the output
;;;382              *Tout[i] = -(*Rout[i] * (P1 + Nt*C));
;;;383    
;;;384              EndBenchmark("cpml_mainLoop");
;;;385            }
;;;386    
;;;387            return RESULT_OK;
;;;388          } // computePossiblePoses(from individually-listed points)
000156  bf1e              ITTT     NE
000158  f20d4db4          ADDNE    sp,sp,#0x4b4
00015c  ecbd8b0e          VPOPNE   {d8-d14}
000160  e8bd8ff0          POPNE    {r4-r11,pc}
000164  ed9d0a21          VLDR     s0,[sp,#0x84]         ;206
000168  eeb50ac0          VCMPE.F32 s0,#0.0               ;206
00016c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;206
000170  dd52              BLE      |L360.536|
000172  ed950a00          VLDR     s0,[r5,#0]            ;206
000176  f20d4324          ADD      r3,sp,#0x424          ;212
00017a  ed8d0a22          VSTR     s0,[sp,#0x88]         ;212
00017e  ed950a01          VLDR     s0,[r5,#4]            ;212
000182  aa1f              ADD      r2,sp,#0x7c           ;212
000184  ed8d0a23          VSTR     s0,[sp,#0x8c]         ;212
000188  ed950a02          VLDR     s0,[r5,#8]            ;212
00018c  a925              ADD      r1,sp,#0x94           ;212
00018e  ed8d0a24          VSTR     s0,[sp,#0x90]         ;212
000192  ed960a00          VLDR     s0,[r6,#0]            ;212
000196  a822              ADD      r0,sp,#0x88           ;212
000198  ed8d0a25          VSTR     s0,[sp,#0x94]         ;212
00019c  ed960a01          VLDR     s0,[r6,#4]            ;212
0001a0  ed8d0a26          VSTR     s0,[sp,#0x98]         ;212
0001a4  ed960a02          VLDR     s0,[r6,#8]            ;212
0001a8  ed8d0a27          VSTR     s0,[sp,#0x9c]         ;212
0001ac  ed940a00          VLDR     s0,[r4,#0]            ;212
0001b0  ed8d0a1f          VSTR     s0,[sp,#0x7c]         ;212
0001b4  ed940a01          VLDR     s0,[r4,#4]            ;212
0001b8  ed8d0a20          VSTR     s0,[sp,#0x80]         ;212
0001bc  ed940a02          VLDR     s0,[r4,#8]            ;212
0001c0  ed8d0a21          VSTR     s0,[sp,#0x84]         ;212
0001c4  f7fffffe          BL       _ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIfEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE ; Anki::Embedded::P3P::createIntermediateCameraFrameHelper<float>(Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&)
0001c8  2800              CMP      r0,#0                 ;212
0001ca  e000              B        |L360.462|
                  |L360.460|
0001cc  e045              B        |L360.602|
                  |L360.462|
0001ce  d145              BNE      |L360.604|
0001d0  ed980a00          VLDR     s0,[r8,#0]            ;212
0001d4  ed8d0a16          VSTR     s0,[sp,#0x58]         ;212
0001d8  ed980a01          VLDR     s0,[r8,#4]            ;212
0001dc  ed8d0a17          VSTR     s0,[sp,#0x5c]         ;212
0001e0  ed980a02          VLDR     s0,[r8,#8]            ;212
0001e4  ed8d0a18          VSTR     s0,[sp,#0x60]         ;212
0001e8  ed990a00          VLDR     s0,[r9,#0]            ;212
0001ec  ed8d0a28          VSTR     s0,[sp,#0xa0]         ;212
0001f0  ed990a01          VLDR     s0,[r9,#4]            ;212
0001f4  ed8d0a29          VSTR     s0,[sp,#0xa4]         ;212
0001f8  ed990a02          VLDR     s0,[r9,#8]            ;212
0001fc  ed8d0a2a          VSTR     s0,[sp,#0xa8]         ;212
000200  ed970a00          VLDR     s0,[r7,#0]            ;212
000204  ed8d0a1c          VSTR     s0,[sp,#0x70]         ;212
000208  ed970a01          VLDR     s0,[r7,#4]            ;212
00020c  ed8d0a1d          VSTR     s0,[sp,#0x74]         ;212
000210  ed970a02          VLDR     s0,[r7,#8]            ;212
000214  ed8d0a1e          VSTR     s0,[sp,#0x78]         ;212
                  |L360.536|
000218  aa16              ADD      r2,sp,#0x58           ;222
00021a  a928              ADD      r1,sp,#0xa0           ;222
00021c  a82b              ADD      r0,sp,#0xac           ;222
00021e  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IfEmiERKS2_ ; Anki::Embedded::Point3<float>::operator -(const Anki::Embedded::Point3<float>&) const
000222  a82b              ADD      r0,sp,#0xac           ;223
000224  f7fffffe          BL       _ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv ; Anki::Embedded::Point3<float>::MakeUnitLength()
000228  eeb50ac0          VCMPE.F32 s0,#0.0               ;223
00022c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;223
000230  d013              BEQ      |L360.602|
000232  aa16              ADD      r2,sp,#0x58           ;225
000234  a91c              ADD      r1,sp,#0x70           ;225
000236  a819              ADD      r0,sp,#0x64           ;225
000238  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IfEmiERKS2_ ; Anki::Embedded::Point3<float>::operator -(const Anki::Embedded::Point3<float>&) const
00023c  aa19              ADD      r2,sp,#0x64           ;225
00023e  a92b              ADD      r1,sp,#0xac           ;225
000240  a82e              ADD      r0,sp,#0xb8           ;225
000242  e000              B        |L360.582|
                  |L360.580|
000244  e010              B        |L360.616|
                  |L360.582|
000246  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
00024a  a82e              ADD      r0,sp,#0xb8           ;226
00024c  f7fffffe          BL       _ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv ; Anki::Embedded::Point3<float>::MakeUnitLength()
000250  eeb50ac0          VCMPE.F32 s0,#0.0               ;226
000254  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;226
000258  d112              BNE      |L360.640|
                  |L360.602|
00025a  2001              MOVS     r0,#1                 ;226
                  |L360.604|
00025c  f20d4db4          ADD      sp,sp,#0x4b4
000260  ecbd8b0e          VPOP     {d8-d14}
000264  e8bd8ff0          POP      {r4-r11,pc}
                  |L360.616|
000268  20c4              MOVS     r0,#0xc4              ;196
00026a  e9cda000          STRD     r10,r0,[sp,#0]        ;196
00026e  4b6d              LDR      r3,|L360.1060|
000270  4a6d              LDR      r2,|L360.1064|
000272  496e              LDR      r1,|L360.1068|
000274  2005              MOVS     r0,#5                 ;196
000276  f7fffffe          BL       _Anki_Log
00027a  f04f7080          MOV      r0,#0x1000000         ;196
00027e  e7ed              B        |L360.604|
                  |L360.640|
000280  aa2b              ADD      r2,sp,#0xac           ;228
000282  a92e              ADD      r1,sp,#0xb8           ;228
000284  a834              ADD      r0,sp,#0xd0           ;228
000286  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
00028a  2300              MOVS     r3,#0                 ;231
00028c  461a              MOV      r2,r3                 ;231
00028e  2101              MOVS     r1,#1                 ;231
000290  a837              ADD      r0,sp,#0xdc           ;231
000292  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000296  6800              LDR      r0,[r0,#0]            ;231
000298  2203              MOVS     r2,#3                 ;231
00029a  9000              STR      r0,[sp,#0]            ;231
00029c  abfd              ADD      r3,sp,#0x3f4          ;231
00029e  4611              MOV      r1,r2                 ;231
0002a0  a8f8              ADD      r0,sp,#0x3e0          ;231
0002a2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0002a6  a8f8              ADD      r0,sp,#0x3e0          ;232
0002a8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0002ac  2800              CMP      r0,#0                 ;232
0002ae  d07c              BEQ      |L360.938|
0002b0  9afa              LDR      r2,[sp,#0x3e8]        ;232
0002b2  99fc              LDR      r1,[sp,#0x3f0]        ;232
0002b4  2000              MOVS     r0,#0                 ;235
0002b6  fb001002          MLA      r0,r0,r2,r1           ;235
0002ba  ed9d0a2b          VLDR     s0,[sp,#0xac]         ;235
0002be  ed800a00          VSTR     s0,[r0,#0]            ;235
0002c2  9afa              LDR      r2,[sp,#0x3e8]        ;235
0002c4  99fc              LDR      r1,[sp,#0x3f0]        ;235
0002c6  2000              MOVS     r0,#0                 ;235
0002c8  fb001002          MLA      r0,r0,r2,r1           ;235
0002cc  ed9d0a2c          VLDR     s0,[sp,#0xb0]         ;235
0002d0  ed800a01          VSTR     s0,[r0,#4]            ;235
0002d4  9afa              LDR      r2,[sp,#0x3e8]        ;235
0002d6  99fc              LDR      r1,[sp,#0x3f0]        ;235
0002d8  2000              MOVS     r0,#0                 ;235
0002da  fb001002          MLA      r0,r0,r2,r1           ;235
0002de  ed9d0a2d          VLDR     s0,[sp,#0xb4]         ;235
0002e2  ed800a02          VSTR     s0,[r0,#8]            ;235
0002e6  9afa              LDR      r2,[sp,#0x3e8]        ;235
0002e8  99fc              LDR      r1,[sp,#0x3f0]        ;235
0002ea  2001              MOVS     r0,#1                 ;236
0002ec  fb001002          MLA      r0,r0,r2,r1           ;236
0002f0  ed9d0a34          VLDR     s0,[sp,#0xd0]         ;236
0002f4  ed800a00          VSTR     s0,[r0,#0]            ;236
0002f8  9afa              LDR      r2,[sp,#0x3e8]        ;236
0002fa  99fc              LDR      r1,[sp,#0x3f0]        ;236
0002fc  2001              MOVS     r0,#1                 ;236
0002fe  fb001002          MLA      r0,r0,r2,r1           ;236
000302  ed9d0a35          VLDR     s0,[sp,#0xd4]         ;236
000306  ed800a01          VSTR     s0,[r0,#4]            ;236
00030a  9afa              LDR      r2,[sp,#0x3e8]        ;236
00030c  99fc              LDR      r1,[sp,#0x3f0]        ;236
00030e  2001              MOVS     r0,#1                 ;236
000310  fb001002          MLA      r0,r0,r2,r1           ;236
000314  ed9d0a36          VLDR     s0,[sp,#0xd8]         ;236
000318  ed800a02          VSTR     s0,[r0,#8]            ;236
00031c  9afa              LDR      r2,[sp,#0x3e8]        ;236
00031e  99fc              LDR      r1,[sp,#0x3f0]        ;236
000320  2002              MOVS     r0,#2                 ;237
000322  fb001002          MLA      r0,r0,r2,r1           ;237
000326  ed9d0a2e          VLDR     s0,[sp,#0xb8]         ;237
00032a  ed800a00          VSTR     s0,[r0,#0]            ;237
00032e  9afa              LDR      r2,[sp,#0x3e8]        ;237
000330  99fc              LDR      r1,[sp,#0x3f0]        ;237
000332  2002              MOVS     r0,#2                 ;237
000334  fb001002          MLA      r0,r0,r2,r1           ;237
000338  ed9d0a2f          VLDR     s0,[sp,#0xbc]         ;237
00033c  ed800a01          VSTR     s0,[r0,#4]            ;237
000340  9afa              LDR      r2,[sp,#0x3e8]        ;237
000342  99fc              LDR      r1,[sp,#0x3f0]        ;237
000344  2002              MOVS     r0,#2                 ;237
000346  fb001002          MLA      r0,r0,r2,r1           ;237
00034a  ed9d0a30          VLDR     s0,[sp,#0xc0]         ;237
00034e  aa16              ADD      r2,sp,#0x58           ;241
000350  ed800a02          VSTR     s0,[r0,#8]            ;237
000354  a91c              ADD      r1,sp,#0x70           ;241
000356  f20d4074          ADD      r0,sp,#0x474          ;241
00035a  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IfEmiERKS2_ ; Anki::Embedded::Point3<float>::operator -(const Anki::Embedded::Point3<float>&) const
00035e  f20d4274          ADD      r2,sp,#0x474          ;241
000362  a9f8              ADD      r1,sp,#0x3e0          ;241
000364  a819              ADD      r0,sp,#0x64           ;241
000366  f7fffffe          BL       _ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
00036a  ed9d0a19          VLDR     s0,[sp,#0x64]         ;241
00036e  aa16              ADD      r2,sp,#0x58           ;243
000370  ed8d0a1c          VSTR     s0,[sp,#0x70]         ;243
000374  ed9d0a1a          VLDR     s0,[sp,#0x68]         ;243
000378  a928              ADD      r1,sp,#0xa0           ;243
00037a  ed8d0a1d          VSTR     s0,[sp,#0x74]         ;243
00037e  ed9d0a1b          VLDR     s0,[sp,#0x6c]         ;243
000382  a819              ADD      r0,sp,#0x64           ;243
000384  ed8d0a1e          VSTR     s0,[sp,#0x78]         ;243
000388  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IfEmiERKS2_ ; Anki::Embedded::Point3<float>::operator -(const Anki::Embedded::Point3<float>&) const
00038c  ed9d0a19          VLDR     s0,[sp,#0x64]         ;243
000390  eddd0a1a          VLDR     s1,[sp,#0x68]         ;243
000394  ee200a00          VMUL.F32 s0,s0,s0              ;243
000398  ee000aa0          VMLA.F32 s0,s1,s1              ;243
00039c  eddd0a1b          VLDR     s1,[sp,#0x6c]         ;243
0003a0  ee000aa0          VMLA.F32 s0,s1,s1              ;243
0003a4  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
0003a8  e000              B        |L360.940|
                  |L360.938|
0003aa  e041              B        |L360.1072|
                  |L360.940|
0003ac  eeb08a40          VMOV.F32 s16,s0                ;243
0003b0  eddd0a1f          VLDR     s1,[sp,#0x7c]         ;244
0003b4  ed9d0a21          VLDR     s0,[sp,#0x84]         ;244
0003b8  ed9d1a26          VLDR     s2,[sp,#0x98]         ;244
0003bc  eef7da00          VMOV.F32 s27,#1.00000000       ;250
0003c0  eec0ca80          VDIV.F32 s25,s1,s0             ;244
0003c4  eddd0a20          VLDR     s1,[sp,#0x80]         ;245
0003c8  ed9daa1c          VLDR     s20,[sp,#0x70]        ;246
0003cc  edddba1d          VLDR     s23,[sp,#0x74]        ;247
0003d0  ee80ca80          VDIV.F32 s24,s1,s0             ;245
0003d4  ed9d0a22          VLDR     s0,[sp,#0x88]         ;245
0003d8  eddd0a25          VLDR     s1,[sp,#0x94]         ;245
0003dc  ee200a20          VMUL.F32 s0,s0,s1              ;245
0003e0  eddd0a23          VLDR     s1,[sp,#0x8c]         ;245
0003e4  ee000a81          VMLA.F32 s0,s1,s2              ;245
0003e8  eddd0a24          VLDR     s1,[sp,#0x90]         ;245
0003ec  ed9d1a27          VLDR     s2,[sp,#0x9c]         ;245
0003f0  ee000a81          VMLA.F32 s0,s1,s2              ;245
0003f4  eef00a6d          VMOV.F32 s1,s27                ;250
0003f8  ee400a40          VMLS.F32 s1,s0,s0              ;250
0003fc  eeb50ac0          VCMPE.F32 s0,#0.0               ;252
000400  ee8d1aa0          VDIV.F32 s2,s27,s1             ;250
000404  ee710a6d          VSUB.F32 s1,s2,s27             ;250
000408  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;252
00040c  eeb00a60          VMOV.F32 s0,s1                 ;255
000410  d21a              BCS      |L360.1096|
000412  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
000416  eef19a40          VNEG.F32 s19,s0                ;253
00041a  e019              B        |L360.1104|
                  |L360.1052|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
                  |L360.1056|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_E19__PRETTY_FUNCTION__ ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::__PRETTY_FUNCTION__
                  |L360.1060|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
                  |L360.1064|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_1 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 3)
                  |L360.1068|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
                  |L360.1072|
000430  20e8              MOVS     r0,#0xe8              ;232
000432  e9cda000          STRD     r10,r0,[sp,#0]        ;232
000436  4bfc              LDR      r3,|L360.2088|
000438  4afc              LDR      r2,|L360.2092|
00043a  49fd              LDR      r1,|L360.2096|
00043c  2005              MOVS     r0,#5                 ;232
00043e  f7fffffe          BL       _Anki_Log
000442  f04f7080          MOV      r0,#0x1000000         ;232
000446  e709              B        |L360.604|
                  |L360.1096|
000448  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
00044c  eef09a40          VMOV.F32 s19,s0                ;255
                  |L360.1104|
000450  ee2b0aab          VMUL.F32 s0,s23,s23            ;265
000454  ee6c1a0c          VMUL.F32 s3,s24,s24            ;261
000458  ee6c2aac          VMUL.F32 s5,s25,s25            ;260
00045c  ee6a0a0a          VMUL.F32 s1,s20,s20            ;262
000460  ee203a2b          VMUL.F32 s6,s0,s23             ;266
000464  ee281a08          VMUL.F32 s2,s16,s16            ;268
000468  ee693aa9          VMUL.F32 s7,s19,s19            ;269
00046c  ee604a8a          VMUL.F32 s9,s1,s20             ;263
000470  ee232a2b          VMUL.F32 s4,s6,s23             ;267
000474  ee647a8a          VMUL.F32 s15,s9,s20            ;264
000478  ee214ac2          VNMUL.F32 s8,s3,s4              ;274
00047c  ee024a62          VMLS.F32 s8,s4,s5              ;274
000480  ee344a42          VSUB.F32 s8,s8,s4              ;274
000484  ed8d4a02          VSTR     s8,[sp,#8]            ;274
000488  eeb04a00          VMOV.F32 s8,#2.00000000        ;278
00048c  ee235a04          VMUL.F32 s10,s6,s8             ;278
000490  ee6c6a04          VMUL.F32 s13,s24,s8            ;278
000494  ee2c9a84          VMUL.F32 s18,s25,s8            ;282
000498  ee2a7a04          VMUL.F32 s14,s20,s8            ;282
00049c  ee255a08          VMUL.F32 s10,s10,s16           ;278
0004a0  ee299a0c          VMUL.F32 s18,s18,s24           ;282
0004a4  ee256a29          VMUL.F32 s12,s10,s19           ;278
0004a8  ee215a84          VMUL.F32 s10,s3,s8             ;278
0004ac  ee299a0a          VMUL.F32 s18,s18,s20           ;282
0004b0  ee655a03          VMUL.F32 s11,s10,s6            ;278
0004b4  ee263a83          VMUL.F32 s6,s13,s6             ;278
0004b8  ee299a00          VMUL.F32 s18,s18,s0            ;282
0004bc  ee655a88          VMUL.F32 s11,s11,s16           ;278
0004c0  ee636a2c          VMUL.F32 s13,s6,s25            ;278
0004c4  ee213ac0          VNMUL.F32 s6,s3,s0              ;282
0004c8  ee299a08          VMUL.F32 s18,s18,s16           ;282
0004cc  ee056aa9          VMLA.F32 s12,s11,s19           ;278
0004d0  ee638a20          VMUL.F32 s17,s6,s1             ;282
0004d4  ee213a80          VMUL.F32 s6,s3,s0              ;282
0004d8  ee066ac8          VMLS.F32 s12,s13,s16           ;278
0004dc  ed8d6a03          VSTR     s12,[sp,#0xc]         ;278
0004e0  ee236a01          VMUL.F32 s12,s6,s2             ;282
0004e4  ee468a63          VMLS.F32 s17,s12,s7            ;282
0004e8  ee438a41          VMLS.F32 s17,s6,s2             ;282
0004ec  ee418a82          VMLA.F32 s17,s3,s4             ;282
0004f0  ee428a22          VMLA.F32 s17,s4,s5             ;282
0004f4  ee272a00          VMUL.F32 s4,s14,s0             ;282
0004f8  ee621a21          VMUL.F32 s3,s4,s3              ;282
0004fc  ee428a08          VMLA.F32 s17,s4,s16            ;282
000500  ee272a2b          VMUL.F32 s4,s14,s23            ;294
000504  ee222a01          VMUL.F32 s4,s4,s2              ;294
000508  ee498a29          VMLA.F32 s17,s18,s19           ;282
00050c  ee209a20          VMUL.F32 s18,s0,s1             ;282
000510  ee498a62          VMLS.F32 s17,s18,s5            ;282
000514  ee418a88          VMLA.F32 s17,s3,s16            ;282
000518  ee601a01          VMUL.F32 s3,s0,s2              ;282
00051c  ee418ae3          VMLS.F32 s17,s3,s7             ;282
000520  ee601a84          VMUL.F32 s3,s1,s8              ;282
000524  ee418ac0          VMLS.F32 s17,s3,s0             ;282
000528  ee611aab          VMUL.F32 s3,s3,s23             ;294
00052c  ee611a88          VMUL.F32 s3,s3,s16             ;294
000530  edcd8a04          VSTR     s17,[sp,#0x10]        ;282
000534  ee611aa9          VMUL.F32 s3,s3,s19             ;294
000538  ee461a88          VMLA.F32 s3,s13,s16            ;294
00053c  ee451ae9          VMLS.F32 s3,s11,s19            ;294
000540  ee421a69          VMLS.F32 s3,s4,s19             ;294
000544  ee242a84          VMUL.F32 s4,s9,s8              ;299
000548  edcd1a05          VSTR     s3,[sp,#0x14]         ;294
00054c  eef81a00          VMOV.F32 s3,#-2.00000000       ;299
000550  ee6c1a21          VMUL.F32 s3,s24,s3             ;299
000554  ee611a80          VMUL.F32 s3,s3,s0              ;299
000558  ee611aac          VMUL.F32 s3,s3,s25             ;299
00055c  ee611a8a          VMUL.F32 s3,s3,s20             ;299
000560  ee611a88          VMUL.F32 s3,s3,s16             ;299
000564  ee611aa9          VMUL.F32 s3,s3,s19             ;299
000568  ee431a01          VMLA.F32 s3,s6,s2              ;299
00056c  ee421a08          VMLA.F32 s3,s4,s16             ;299
000570  ee401ac1          VMLS.F32 s3,s1,s2              ;299
000574  ee431a20          VMLA.F32 s3,s6,s1              ;299
000578  ee311ae7          VSUB.F32 s2,s3,s15             ;299
00057c  ee651a00          VMUL.F32 s3,s10,s0             ;299
000580  ee200a22          VMUL.F32 s0,s0,s5              ;299
000584  f50d6194          ADD      r1,sp,#0x4a0          ;311
000588  a802              ADD      r0,sp,#8              ;311
00058a  ee611a8a          VMUL.F32 s3,s3,s20             ;299
00058e  ee011ac8          VMLS.F32 s2,s3,s16             ;299
000592  ee001a20          VMLA.F32 s2,s0,s1              ;299
000596  ee061a23          VMLA.F32 s2,s12,s7             ;299
00059a  ed8d1a06          VSTR     s2,[sp,#0x18]         ;299
00059e  f7fffffe          BL       _ZN4Anki8Embedded3P3P12solveQuarticIfEENS_6ResultEPKT_PS4_ ; Anki::Embedded::P3P::solveQuartic<float>(const T1*, T1*)
0005a2  f8dd0518          LDR      r0,[sp,#0x518]        ;317
0005a6  f8cd0480          STR      r0,[sp,#0x480]        ;317
0005aa  f8dd0520          LDR      r0,[sp,#0x520]        ;317
0005ae  f8cd0484          STR      r0,[sp,#0x484]        ;317
0005b2  f8dd0528          LDR      r0,[sp,#0x528]        ;317
0005b6  f8cd0488          STR      r0,[sp,#0x488]        ;317
0005ba  f8dd0530          LDR      r0,[sp,#0x530]        ;317
0005be  f8cd048c          STR      r0,[sp,#0x48c]        ;318
0005c2  f8dd051c          LDR      r0,[sp,#0x51c]        ;318
0005c6  f8cd0490          STR      r0,[sp,#0x490]        ;318
0005ca  f8dd0524          LDR      r0,[sp,#0x524]        ;318
0005ce  f8cd0494          STR      r0,[sp,#0x494]        ;318
0005d2  f8dd052c          LDR      r0,[sp,#0x52c]        ;318
0005d6  2300              MOVS     r3,#0                 ;320
0005d8  f8cd0498          STR      r0,[sp,#0x498]        ;320
0005dc  461a              MOV      r2,r3                 ;320
0005de  2101              MOVS     r1,#1                 ;320
0005e0  f8cdb49c          STR      r11,[sp,#0x49c]       ;320
0005e4  a837              ADD      r0,sp,#0xdc           ;320
0005e6  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0005ea  6800              LDR      r0,[r0,#0]            ;320
0005ec  2203              MOVS     r2,#3                 ;320
0005ee  9000              STR      r0,[sp,#0]            ;320
0005f0  abfd              ADD      r3,sp,#0x3f4          ;320
0005f2  4611              MOV      r1,r2                 ;320
0005f4  f50d6087          ADD      r0,sp,#0x438          ;320
0005f8  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0005fc  f50d6087          ADD      r0,sp,#0x438          ;321
000600  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000604  2800              CMP      r0,#0                 ;321
000606  f0008199          BEQ.W    |L360.2364|
00060a  f50d6187          ADD      r1,sp,#0x438          ;324
00060e  f20d4024          ADD      r0,sp,#0x424          ;324
000612  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000616  2800              CMP      r0,#0                 ;324
000618  f47fae20          BNE      |L360.604|
00061c  2300              MOVS     r3,#0                 ;328
00061e  461a              MOV      r2,r3                 ;328
000620  2101              MOVS     r1,#1                 ;328
000622  a837              ADD      r0,sp,#0xdc           ;328
000624  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000628  6800              LDR      r0,[r0,#0]            ;328
00062a  2203              MOVS     r2,#3                 ;328
00062c  9000              STR      r0,[sp,#0]            ;328
00062e  abfd              ADD      r3,sp,#0x3f4          ;328
000630  4611              MOV      r1,r2                 ;328
000632  f20d404c          ADD      r0,sp,#0x44c          ;328
000636  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
00063a  f20d404c          ADD      r0,sp,#0x44c          ;329
00063e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000642  2800              CMP      r0,#0                 ;329
000644  f0008187          BEQ.W    |L360.2390|
000648  f20d414c          ADD      r1,sp,#0x44c          ;332
00064c  a8f8              ADD      r0,sp,#0x3e0          ;332
00064e  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000652  2800              CMP      r0,#0                 ;332
000654  f47fae02          BNE      |L360.604|
000658  2300              MOVS     r3,#0                 ;336
00065a  461a              MOV      r2,r3                 ;336
00065c  2101              MOVS     r1,#1                 ;336
00065e  a837              ADD      r0,sp,#0xdc           ;336
000660  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000664  6800              LDR      r0,[r0,#0]            ;336
000666  2203              MOVS     r2,#3                 ;336
000668  9000              STR      r0,[sp,#0]            ;336
00066a  abfd              ADD      r3,sp,#0x3f4          ;336
00066c  4611              MOV      r1,r2                 ;336
00066e  f50d6082          ADD      r0,sp,#0x410          ;336
000672  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000676  f50d6082          ADD      r0,sp,#0x410          ;337
00067a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00067e  2800              CMP      r0,#0                 ;337
000680  f0008176          BEQ.W    |L360.2416|
000684  2300              MOVS     r3,#0                 ;340
000686  461a              MOV      r2,r3                 ;340
000688  2101              MOVS     r1,#1                 ;340
00068a  a837              ADD      r0,sp,#0xdc           ;340
00068c  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000690  6800              LDR      r0,[r0,#0]            ;340
000692  2203              MOVS     r2,#3                 ;340
000694  9000              STR      r0,[sp,#0]            ;340
000696  abfd              ADD      r3,sp,#0x3f4          ;340
000698  4611              MOV      r1,r2                 ;340
00069a  f50d608c          ADD      r0,sp,#0x460          ;340
00069e  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0006a2  f50d608c          ADD      r0,sp,#0x460          ;341
0006a6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0006aa  2800              CMP      r0,#0                 ;341
0006ac  f000816d          BEQ.W    |L360.2442|
0006b0  4860              LDR      r0,|L360.2100|
0006b2  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0006b6  2400              MOVS     r4,#0                 ;347
0006b8  f50d6794          ADD      r7,sp,#0x4a0          ;310
0006bc  ed9fea5e          VLDR     s28,|L360.2104|
0006c0  f50d6690          ADD      r6,sp,#0x480          ;317
0006c4  f50d6892          ADD      r8,sp,#0x490          ;318
                  |L360.1736|
0006c8  485c              LDR      r0,|L360.2108|
0006ca  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0006ce  ee6c0aca          VNMUL.F32 s1,s25,s20            ;351
0006d2  eb070084          ADD      r0,r7,r4,LSL #2       ;351
0006d6  ed90ba00          VLDR     s22,[r0,#0]           ;351
0006da  ee800a8c          VDIV.F32 s0,s1,s24             ;351
0006de  ee6c0acb          VNMUL.F32 s1,s25,s22            ;351
0006e2  ee201aab          VMUL.F32 s2,s1,s23             ;351
0006e6  eec10a0c          VDIV.F32 s1,s2,s24             ;351
0006ea  ee0b0a6b          VMLS.F32 s0,s22,s23            ;351
0006ee  ee080a29          VMLA.F32 s0,s16,s19            ;351
0006f2  ee700a8a          VADD.F32 s1,s1,s20             ;351
0006f6  ee700ac8          VSUB.F32 s1,s1,s16             ;351
0006fa  ee80da20          VDIV.F32 s26,s0,s1             ;351
0006fe  eef00a6d          VMOV.F32 s1,s27                ;354
000702  ee4b0a4b          VMLS.F32 s1,s22,s22            ;354
000706  eeb10ae0          VSQRT.F32 s0,s1                 ;354
00070a  eeb40a40          VCMP.F32 s0,s0                 ;354
00070e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;354
000712  bf1c              ITT      NE                    ;354
000714  eeb00a60          VMOVNE.F32 s0,s1                 ;354
000718  f7fffffe          BLNE     __hardfp_sqrtf
00071c  eef0aa40          VMOV.F32 s21,s0                ;354
000720  eeb00a6d          VMOV.F32 s0,s27                ;354
000724  ee0d0a0d          VMLA.F32 s0,s26,s26            ;355
000728  eecd0a80          VDIV.F32 s1,s27,s0             ;355
00072c  eeb10ae0          VSQRT.F32 s0,s1                 ;355
000730  eeb40a40          VCMP.F32 s0,s0                 ;355
000734  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;355
000738  bf1c              ITT      NE                    ;355
00073a  eeb00a60          VMOVNE.F32 s0,s1                 ;355
00073e  f7fffffe          BLNE     __hardfp_sqrtf
000742  eef08a40          VMOV.F32 s17,s0                ;355
000746  eeb09a6d          VMOV.F32 s18,s27               ;356
00074a  ee089ae8          VMLS.F32 s18,s17,s17           ;356
00074e  eeb10ac9          VSQRT.F32 s0,s18                ;356
000752  eeb40a40          VCMP.F32 s0,s0                 ;356
000756  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;356
00075a  bf1c              ITT      NE                    ;356
00075c  eeb00a49          VMOVNE.F32 s0,s18                ;356
000760  f7fffffe          BLNE     __hardfp_sqrtf
000764  eeb09a40          VMOV.F32 s18,s0                ;356
000768  eeb5dac0          VCMPE.F32 s26,#0.0              ;358
00076c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;358
000770  bf38              IT       CC                    ;359
000772  eeb19a49          VNEGCC.F32 s18,s18               ;359
000776  2000              MOVS     r0,#0                 ;363
000778  f8dd2418          LDR      r2,[sp,#0x418]        ;363
00077c  f8dd1420          LDR      r1,[sp,#0x420]        ;363
000780  eeb10a49          VNEG.F32 s0,s18                ;363
000784  fb001002          MLA      r0,r0,r2,r1           ;363
000788  ed800a00          VSTR     s0,[r0,#0]            ;363
00078c  f8dd2418          LDR      r2,[sp,#0x418]        ;363
000790  f8dd1420          LDR      r1,[sp,#0x420]        ;363
000794  2000              MOVS     r0,#0                 ;363
000796  fb001002          MLA      r0,r0,r2,r1           ;363
00079a  ee280acb          VNMUL.F32 s0,s17,s22            ;363
00079e  ed800a01          VSTR     s0,[r0,#4]            ;363
0007a2  f8dd2418          LDR      r2,[sp,#0x418]        ;363
0007a6  f8dd1420          LDR      r1,[sp,#0x420]        ;363
0007aa  2000              MOVS     r0,#0                 ;363
0007ac  fb001002          MLA      r0,r0,r2,r1           ;363
0007b0  ee280aea          VNMUL.F32 s0,s17,s21            ;363
0007b4  ed800a02          VSTR     s0,[r0,#8]            ;363
0007b8  f8dd2418          LDR      r2,[sp,#0x418]        ;363
0007bc  f8dd1420          LDR      r1,[sp,#0x420]        ;363
0007c0  2001              MOVS     r0,#1                 ;364
0007c2  fb001002          MLA      r0,r0,r2,r1           ;364
0007c6  ee290a4b          VNMUL.F32 s0,s18,s22            ;364
0007ca  edc08a00          VSTR     s17,[r0,#0]           ;364
0007ce  f8dd2418          LDR      r2,[sp,#0x418]        ;364
0007d2  f8dd1420          LDR      r1,[sp,#0x420]        ;364
0007d6  2001              MOVS     r0,#1                 ;364
0007d8  fb001002          MLA      r0,r0,r2,r1           ;364
0007dc  ed800a01          VSTR     s0,[r0,#4]            ;364
0007e0  f8dd2418          LDR      r2,[sp,#0x418]        ;364
0007e4  f8dd1420          LDR      r1,[sp,#0x420]        ;364
0007e8  2001              MOVS     r0,#1                 ;364
0007ea  fb001002          MLA      r0,r0,r2,r1           ;364
0007ee  ee290a6a          VNMUL.F32 s0,s18,s21            ;364
0007f2  ed800a02          VSTR     s0,[r0,#8]            ;364
0007f6  f8dd2418          LDR      r2,[sp,#0x418]        ;364
0007fa  f8dd1420          LDR      r1,[sp,#0x420]        ;364
0007fe  2002              MOVS     r0,#2                 ;365
000800  fb001002          MLA      r0,r0,r2,r1           ;365
000804  eeb10a6a          VNEG.F32 s0,s21                ;365
000808  ed80ea00          VSTR     s28,[r0,#0]           ;365
00080c  f8dd2418          LDR      r2,[sp,#0x418]        ;365
000810  f8dd1420          LDR      r1,[sp,#0x420]        ;365
000814  2002              MOVS     r0,#2                 ;365
000816  fb001002          MLA      r0,r0,r2,r1           ;365
00081a  ed800a01          VSTR     s0,[r0,#4]            ;365
00081e  2002              MOVS     r0,#2                 ;365
000820  f8dd2418          LDR      r2,[sp,#0x418]        ;365
000824  e00c              B        |L360.2112|
000826  0000              DCW      0x0000
                  |L360.2088|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
                  |L360.2092|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_3 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 5)
                  |L360.2096|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
                  |L360.2100|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
                  |L360.2104|
000838  00000000          DCFS     0x00000000 ; 0
                  |L360.2108|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 10)
                  |L360.2112|
000840  f8dd1420          LDR      r1,[sp,#0x420]        ;365
000844  fb001002          MLA      r0,r0,r2,r1           ;365
000848  f50d628c          ADD      r2,sp,#0x460          ;370
00084c  ed80ba02          VSTR     s22,[r0,#8]           ;365
000850  f50d6182          ADD      r1,sp,#0x410          ;370
000854  f50d6087          ADD      r0,sp,#0x438          ;370
000858  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
00085c  2800              CMP      r0,#0                 ;370
00085e  f47facfd          BNE      |L360.604|
000862  f8562024          LDR      r2,[r6,r4,LSL #2]     ;373
000866  a9f8              ADD      r1,sp,#0x3e0          ;373
000868  f50d608c          ADD      r0,sp,#0x460          ;373
00086c  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000870  2800              CMP      r0,#0                 ;373
000872  f47facf3          BNE      |L360.604|
000876  ee280a09          VMUL.F32 s0,s16,s18            ;377
00087a  ee6b0a08          VMUL.F32 s1,s22,s16            ;377
00087e  ee089aa9          VMLA.F32 s18,s17,s19           ;377
000882  ee2a1a88          VMUL.F32 s2,s21,s16            ;377
000886  aa10              ADD      r2,sp,#0x40           ;382
000888  ee600aa8          VMUL.F32 s1,s1,s17             ;377
00088c  f20d414c          ADD      r1,sp,#0x44c          ;382
000890  ee211a28          VMUL.F32 s2,s2,s17             ;377
000894  ee200a09          VMUL.F32 s0,s0,s18             ;377
000898  ee600a89          VMUL.F32 s1,s1,s18             ;377
00089c  a80a              ADD      r0,sp,#0x28           ;382
00089e  ee211a09          VMUL.F32 s2,s2,s18             ;377
0008a2  ed8d0a10          VSTR     s0,[sp,#0x40]         ;377
0008a6  edcd0a11          VSTR     s1,[sp,#0x44]         ;377
0008aa  ed8d1a12          VSTR     s2,[sp,#0x48]         ;377
0008ae  f8585024          LDR      r5,[r8,r4,LSL #2]     ;382
0008b2  f7fffffe          BL       _ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
0008b6  ed9d0a16          VLDR     s0,[sp,#0x58]         ;382
0008ba  eddd0a0a          VLDR     s1,[sp,#0x28]         ;382
0008be  eddd1a0c          VLDR     s3,[sp,#0x30]         ;382
0008c2  aa13              ADD      r2,sp,#0x4c           ;382
0008c4  ee301a20          VADD.F32 s2,s0,s1              ;382
0008c8  ed9d0a17          VLDR     s0,[sp,#0x5c]         ;382
0008cc  eddd0a0b          VLDR     s1,[sp,#0x2c]         ;382
0008d0  a80d              ADD      r0,sp,#0x34           ;382
0008d2  ee700a20          VADD.F32 s1,s0,s1              ;382
0008d6  ed9d0a18          VLDR     s0,[sp,#0x60]         ;382
0008da  ed8d1a13          VSTR     s2,[sp,#0x4c]         ;382
0008de  edcd0a14          VSTR     s1,[sp,#0x50]         ;382
0008e2  ee300a21          VADD.F32 s0,s0,s3              ;382
0008e6  ed8d0a15          VSTR     s0,[sp,#0x54]         ;382
0008ea  f8561024          LDR      r1,[r6,r4,LSL #2]     ;382
0008ee  f7fffffe          BL       _ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
0008f2  ed9d0a0d          VLDR     s0,[sp,#0x34]         ;382
0008f6  482b              LDR      r0,|L360.2468|
0008f8  eeb11a40          VNEG.F32 s2,s0                 ;384
0008fc  ed9d0a0e          VLDR     s0,[sp,#0x38]         ;384
000900  eef10a40          VNEG.F32 s1,s0                 ;384
000904  ed9d0a0f          VLDR     s0,[sp,#0x3c]         ;384
000908  ed8d1a07          VSTR     s2,[sp,#0x1c]         ;384
00090c  edcd0a08          VSTR     s1,[sp,#0x20]         ;384
000910  eeb10a40          VNEG.F32 s0,s0                 ;384
000914  ed8d0a09          VSTR     s0,[sp,#0x24]         ;384
000918  ed851a00          VSTR     s2,[r5,#0]            ;384
00091c  ed9d0a08          VLDR     s0,[sp,#0x20]         ;384
000920  ed850a01          VSTR     s0,[r5,#4]            ;384
000924  ed9d0a09          VLDR     s0,[sp,#0x24]         ;384
000928  ed850a02          VSTR     s0,[r5,#8]            ;384
00092c  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000930  1c64              ADDS     r4,r4,#1              ;384
000932  2c04              CMP      r4,#4                 ;347
000934  f6ffaec8          BLT      |L360.1736|
000938  2000              MOVS     r0,#0                 ;387
00093a  e48f              B        |L360.604|
                  |L360.2364|
00093c  f2401041          MOV      r0,#0x141             ;321
000940  e9cda000          STRD     r10,r0,[sp,#0]        ;321
000944  4b18              LDR      r3,|L360.2472|
000946  4a19              LDR      r2,|L360.2476|
000948  4919              LDR      r1,|L360.2480|
00094a  2005              MOVS     r0,#5                 ;321
00094c  f7fffffe          BL       _Anki_Log
000950  f04f7080          MOV      r0,#0x1000000         ;321
000954  e482              B        |L360.604|
                  |L360.2390|
000956  f2401049          MOV      r0,#0x149             ;329
00095a  e9cda000          STRD     r10,r0,[sp,#0]        ;329
00095e  4b12              LDR      r3,|L360.2472|
000960  4a14              LDR      r2,|L360.2484|
000962  4913              LDR      r1,|L360.2480|
000964  2005              MOVS     r0,#5                 ;329
000966  f7fffffe          BL       _Anki_Log
00096a  f04f7080          MOV      r0,#0x1000000         ;329
00096e  e475              B        |L360.604|
                  |L360.2416|
000970  f2401051          MOV      r0,#0x151             ;337
000974  e9cda000          STRD     r10,r0,[sp,#0]        ;337
000978  4b0b              LDR      r3,|L360.2472|
00097a  4a0f              LDR      r2,|L360.2488|
00097c  490c              LDR      r1,|L360.2480|
00097e  2005              MOVS     r0,#5                 ;337
000980  f7fffffe          BL       _Anki_Log
000984  f04f7080          MOV      r0,#0x1000000         ;337
000988  e468              B        |L360.604|
                  |L360.2442|
00098a  f2401055          MOV      r0,#0x155             ;341
00098e  e9cda000          STRD     r10,r0,[sp,#0]        ;341
000992  4b05              LDR      r3,|L360.2472|
000994  4a09              LDR      r2,|L360.2492|
000996  4906              LDR      r1,|L360.2480|
000998  2005              MOVS     r0,#5                 ;341
00099a  f7fffffe          BL       _Anki_Log
00099e  f04f7080          MOV      r0,#0x1000000         ;341
0009a2  e45b              B        |L360.604|
;;;389          
                          ENDP

                  |L360.2468|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 10)
                  |L360.2472|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
                  |L360.2476|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_4 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 6)
                  |L360.2480|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
                  |L360.2484|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_5 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 7)
                  |L360.2488|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_6 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 8)
                  |L360.2492|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_7 ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 9)

                          AREA ||area_number.361||, COMGROUP=_ZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_, LINKORDER=||t._ZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.361||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_||, COMGROUP=_ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ PROC ; Anki::Embedded::operator *<double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
;;;270        template<typename Type>
;;;271        Point3<Type> operator* (const Array<Type>& M, const Point3<Type>& p)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;272        {
000004  4604              MOV      r4,r0
000006  ed2d8b0a          VPUSH    {d8-d12}
;;;273          // Matrix M must be 3x3
;;;274          AnkiAssert(AreEqualSize(3, 3, M));
;;;275    
;;;276          return Point3<Type>(M[0][0]*p.x + M[0][1]*p.y + M[0][2]*p.z,
00000a  2000              MOVS     r0,#0
00000c  4615              MOV      r5,r2                 ;272
00000e  f8d1a010          LDR      r10,[r1,#0x10]        ;272
000012  f8d19008          LDR      r9,[r1,#8]            ;272
000016  ed92ab04          VLDR     d10,[r2,#0x10]
00001a  fb00a609          MLA      r6,r0,r9,r10
00001e  ec532b1a          VMOV     r2,r3,d10
000022  ed960b04          VLDR     d0,[r6,#0x10]
000026  ec510b10          VMOV     r0,r1,d0
00002a  f7fffffe          BL       __aeabi_dmul
00002e  ed960b02          VLDR     d0,[r6,#8]
000032  ed959b02          VLDR     d9,[r5,#8]
000036  ec410b1c          VMOV     d12,r0,r1
00003a  ec532b19          VMOV     r2,r3,d9
00003e  ec510b10          VMOV     r0,r1,d0
000042  f7fffffe          BL       __aeabi_dmul
000046  ed960b00          VLDR     d0,[r6,#0]
00004a  ed958b00          VLDR     d8,[r5,#0]
00004e  ec410b1b          VMOV     d11,r0,r1
000052  ec532b18          VMOV     r2,r3,d8
000056  ec510b10          VMOV     r0,r1,d0
00005a  f7fffffe          BL       __aeabi_dmul
00005e  ec532b1b          VMOV     r2,r3,d11
000062  f7fffffe          BL       __aeabi_dadd
000066  ec532b1c          VMOV     r2,r3,d12
00006a  f7fffffe          BL       __aeabi_dadd
00006e  4607              MOV      r7,r0
000070  2001              MOVS     r0,#1
000072  fb00a509          MLA      r5,r0,r9,r10
000076  4688              MOV      r8,r1
000078  ed950b04          VLDR     d0,[r5,#0x10]
00007c  ec532b1a          VMOV     r2,r3,d10
000080  ec510b10          VMOV     r0,r1,d0
000084  f7fffffe          BL       __aeabi_dmul
000088  ed950b02          VLDR     d0,[r5,#8]
00008c  ec410b1c          VMOV     d12,r0,r1
000090  ec532b19          VMOV     r2,r3,d9
000094  ec510b10          VMOV     r0,r1,d0
000098  f7fffffe          BL       __aeabi_dmul
00009c  ed950b00          VLDR     d0,[r5,#0]
0000a0  ec410b1b          VMOV     d11,r0,r1
0000a4  ec532b18          VMOV     r2,r3,d8
0000a8  ec510b10          VMOV     r0,r1,d0
0000ac  f7fffffe          BL       __aeabi_dmul
0000b0  ec532b1b          VMOV     r2,r3,d11
0000b4  f7fffffe          BL       __aeabi_dadd
0000b8  ec532b1c          VMOV     r2,r3,d12
0000bc  f7fffffe          BL       __aeabi_dadd
0000c0  4605              MOV      r5,r0
0000c2  2002              MOVS     r0,#2
0000c4  fb00a909          MLA      r9,r0,r9,r10
0000c8  460e              MOV      r6,r1
0000ca  ed990b04          VLDR     d0,[r9,#0x10]
0000ce  ec532b1a          VMOV     r2,r3,d10
0000d2  ec510b10          VMOV     r0,r1,d0
0000d6  f7fffffe          BL       __aeabi_dmul
0000da  ed990b02          VLDR     d0,[r9,#8]
0000de  ec410b1a          VMOV     d10,r0,r1
0000e2  ec532b19          VMOV     r2,r3,d9
0000e6  ec510b10          VMOV     r0,r1,d0
0000ea  f7fffffe          BL       __aeabi_dmul
0000ee  ed990b00          VLDR     d0,[r9,#0]
0000f2  ec410b19          VMOV     d9,r0,r1
0000f6  ec532b18          VMOV     r2,r3,d8
0000fa  ec510b10          VMOV     r0,r1,d0
0000fe  f7fffffe          BL       __aeabi_dmul
000102  ec532b19          VMOV     r2,r3,d9
000106  f7fffffe          BL       __aeabi_dadd
00010a  ec532b1a          VMOV     r2,r3,d10
00010e  f7fffffe          BL       __aeabi_dadd
000112  e9c40104          STRD     r0,r1,[r4,#0x10]
000116  e9c45602          STRD     r5,r6,[r4,#8]
00011a  e9c47800          STRD     r7,r8,[r4,#0]
;;;277            M[1][0]*p.x + M[1][1]*p.y + M[1][2]*p.z,
;;;278            M[2][0]*p.x + M[2][1]*p.y + M[2][2]*p.z);
;;;279        }
00011e  ecbd8b0a          VPOP     {d8-d12}
000122  e8bd87f0          POP      {r4-r10,pc}
;;;280    
                          ENDP


                          AREA ||area_number.368||, COMGROUP=_ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_, LINKORDER=||t._ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.368||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_||, COMGROUP=_ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_ PROC ; Anki::Embedded::CrossProduct<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
;;;262        template<typename Type>
;;;263        Point3<Type> CrossProduct(const Point3<Type>& point1, const Point3<Type>& point2)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;264        {
000004  4615              MOV      r5,r2
000006  ed2d8b0c          VPUSH    {d8-d13}
00000a  460e              MOV      r6,r1
00000c  4604              MOV      r4,r0
;;;265          return Point3<Type>(-point2.y*point1.z + point1.y*point2.z,
00000e  ed91bb04          VLDR     d11,[r1,#0x10]
000012  ed92ab02          VLDR     d10,[r2,#8]
000016  ec532b1b          VMOV     r2,r3,d11
00001a  ec510b1a          VMOV     r0,r1,d10
00001e  f7fffffe          BL       __aeabi_dmul
000022  ed95cb04          VLDR     d12,[r5,#0x10]
000026  ed969b02          VLDR     d9,[r6,#8]
00002a  ec410b18          VMOV     d8,r0,r1
00002e  ec532b1c          VMOV     r2,r3,d12
000032  ec510b19          VMOV     r0,r1,d9
000036  f7fffffe          BL       __aeabi_dmul
00003a  ec532b18          VMOV     r2,r3,d8
00003e  f7fffffe          BL       __aeabi_dsub
000042  ed968b00          VLDR     d8,[r6,#0]
000046  4607              MOV      r7,r0
000048  4688              MOV      r8,r1
00004a  ec532b1c          VMOV     r2,r3,d12
00004e  ec510b18          VMOV     r0,r1,d8
000052  f7fffffe          BL       __aeabi_dmul
000056  ed95cb00          VLDR     d12,[r5,#0]
00005a  ec410b1d          VMOV     d13,r0,r1
00005e  ec532b1b          VMOV     r2,r3,d11
000062  ec510b1c          VMOV     r0,r1,d12
000066  f7fffffe          BL       __aeabi_dmul
00006a  ec532b1d          VMOV     r2,r3,d13
00006e  f7fffffe          BL       __aeabi_dsub
000072  4605              MOV      r5,r0
000074  460e              MOV      r6,r1
000076  ec532b19          VMOV     r2,r3,d9
00007a  ec510b1c          VMOV     r0,r1,d12
00007e  f7fffffe          BL       __aeabi_dmul
000082  ec410b19          VMOV     d9,r0,r1
000086  ec532b1a          VMOV     r2,r3,d10
00008a  ec510b18          VMOV     r0,r1,d8
00008e  f7fffffe          BL       __aeabi_dmul
000092  ec532b19          VMOV     r2,r3,d9
000096  f7fffffe          BL       __aeabi_dsub
00009a  e9c40104          STRD     r0,r1,[r4,#0x10]
00009e  e9c45602          STRD     r5,r6,[r4,#8]
0000a2  e9c47800          STRD     r7,r8,[r4,#0]
;;;266            point2.x*point1.z - point1.x*point2.z,
;;;267            -point2.x*point1.y + point1.x*point2.y);
;;;268        }
0000a6  ecbd8b0c          VPOP     {d8-d13}
0000aa  e8bd81f0          POP      {r4-r8,pc}
;;;269    
                          ENDP


                          AREA ||area_number.375||, COMGROUP=_ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_, LINKORDER=||t._ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.375||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIdEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE||, COMGROUP=_ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIdEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIdEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE PROC ; Anki::Embedded::P3P::createIntermediateCameraFrameHelper<double>(Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&)
;;;55           template<typename PRECISION>
;;;56           Result createIntermediateCameraFrameHelper(Point3<PRECISION>& f1,
000000  b530              PUSH     {r4,r5,lr}
;;;57             Point3<PRECISION>& f2,
;;;58             Point3<PRECISION>& f3,
;;;59             Array<PRECISION>& T)
;;;60           {
000002  b099              SUB      sp,sp,#0x64
000004  ed900b00          VLDR     d0,[r0,#0]
000008  4615              MOV      r5,r2
00000a  ed8d0b06          VSTR     d0,[sp,#0x18]
00000e  ed900b02          VLDR     d0,[r0,#8]
;;;61             Point3<PRECISION> e1 = f1;
;;;62             Point3<PRECISION> e3 = CrossProduct(f1, f2);
000012  460a              MOV      r2,r1
000014  ed8d0b08          VSTR     d0,[sp,#0x20]
000018  ed900b04          VLDR     d0,[r0,#0x10]
00001c  4601              MOV      r1,r0
00001e  461c              MOV      r4,r3                 ;60
000020  ed8d0b0a          VSTR     d0,[sp,#0x28]         ;60
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
;;;63             if(e3.MakeUnitLength() == 0) { return RESULT_FAIL; }
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       _ZN4Anki8Embedded6Point3IdE14MakeUnitLengthEv ; Anki::Embedded::Point3<double>::MakeUnitLength()
000030  eeb50ac0          VCMPE.F32 s0,#0.0
000034  eef1fa10          VMRS     APSR_nzcv,FPSCR
000038  bf02              ITTT     EQ
00003a  2001              MOVEQ    r0,#1
;;;64             Point3<PRECISION> e2 = CrossProduct(e3, e1);
;;;65     
;;;66             // The e vectors are the rows of the T matrix (and T should already be allocated)
;;;67             AnkiAssert(AreEqualSize(3, 3, T));
;;;68             T[0][0] = e1.x;   T[0][1] = e1.y;   T[0][2] = e1.z;
;;;69             T[1][0] = e2.x;   T[1][1] = e2.y;   T[1][2] = e2.z;
;;;70             T[2][0] = e3.x;   T[2][1] = e3.y;   T[2][2] = e3.z;
;;;71     
;;;72             f3 = T * f3;
;;;73     
;;;74             return RESULT_OK;
;;;75           } // createIntermediateCameraFrameHelper()
00003c  b019              ADDEQ    sp,sp,#0x64
00003e  bd30              POPEQ    {r4,r5,pc}
000040  aa06              ADD      r2,sp,#0x18           ;64
000042  4669              MOV      r1,sp                 ;64
000044  a812              ADD      r0,sp,#0x48           ;64
000046  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
00004a  68a2              LDR      r2,[r4,#8]            ;64
00004c  6921              LDR      r1,[r4,#0x10]         ;64
00004e  2000              MOVS     r0,#0                 ;68
000050  fb001002          MLA      r0,r0,r2,r1           ;68
000054  ed9d0b06          VLDR     d0,[sp,#0x18]         ;68
000058  ed800b00          VSTR     d0,[r0,#0]            ;68
00005c  68a2              LDR      r2,[r4,#8]            ;68
00005e  6921              LDR      r1,[r4,#0x10]         ;68
000060  2000              MOVS     r0,#0                 ;68
000062  fb001002          MLA      r0,r0,r2,r1           ;68
000066  ed9d0b08          VLDR     d0,[sp,#0x20]         ;68
00006a  ed800b02          VSTR     d0,[r0,#8]            ;68
00006e  68a2              LDR      r2,[r4,#8]            ;68
000070  6921              LDR      r1,[r4,#0x10]         ;68
000072  2000              MOVS     r0,#0                 ;68
000074  fb001002          MLA      r0,r0,r2,r1           ;68
000078  ed9d0b0a          VLDR     d0,[sp,#0x28]         ;68
00007c  ed800b04          VSTR     d0,[r0,#0x10]         ;68
000080  68a2              LDR      r2,[r4,#8]            ;68
000082  6921              LDR      r1,[r4,#0x10]         ;68
000084  2001              MOVS     r0,#1                 ;69
000086  fb001002          MLA      r0,r0,r2,r1           ;69
00008a  ed9d0b12          VLDR     d0,[sp,#0x48]         ;69
00008e  ed800b00          VSTR     d0,[r0,#0]            ;69
000092  68a2              LDR      r2,[r4,#8]            ;69
000094  6921              LDR      r1,[r4,#0x10]         ;69
000096  2001              MOVS     r0,#1                 ;69
000098  fb001002          MLA      r0,r0,r2,r1           ;69
00009c  ed9d0b14          VLDR     d0,[sp,#0x50]         ;69
0000a0  ed800b02          VSTR     d0,[r0,#8]            ;69
0000a4  68a2              LDR      r2,[r4,#8]            ;69
0000a6  6921              LDR      r1,[r4,#0x10]         ;69
0000a8  2001              MOVS     r0,#1                 ;69
0000aa  fb001002          MLA      r0,r0,r2,r1           ;69
0000ae  ed9d0b16          VLDR     d0,[sp,#0x58]         ;69
0000b2  ed800b04          VSTR     d0,[r0,#0x10]         ;69
0000b6  68a2              LDR      r2,[r4,#8]            ;69
0000b8  6921              LDR      r1,[r4,#0x10]         ;69
0000ba  2002              MOVS     r0,#2                 ;70
0000bc  fb001002          MLA      r0,r0,r2,r1           ;70
0000c0  ed9d0b00          VLDR     d0,[sp,#0]            ;70
0000c4  ed800b00          VSTR     d0,[r0,#0]            ;70
0000c8  68a2              LDR      r2,[r4,#8]            ;70
0000ca  6921              LDR      r1,[r4,#0x10]         ;70
0000cc  2002              MOVS     r0,#2                 ;70
0000ce  fb001002          MLA      r0,r0,r2,r1           ;70
0000d2  ed9d0b02          VLDR     d0,[sp,#8]            ;70
0000d6  ed800b02          VSTR     d0,[r0,#8]            ;70
0000da  68a2              LDR      r2,[r4,#8]            ;70
0000dc  6921              LDR      r1,[r4,#0x10]         ;70
0000de  2002              MOVS     r0,#2                 ;70
0000e0  fb001002          MLA      r0,r0,r2,r1           ;70
0000e4  ed9d0b04          VLDR     d0,[sp,#0x10]         ;70
0000e8  462a              MOV      r2,r5                 ;72
0000ea  ed800b04          VSTR     d0,[r0,#0x10]         ;70
0000ee  4621              MOV      r1,r4                 ;72
0000f0  a80c              ADD      r0,sp,#0x30           ;72
0000f2  f7fffffe          BL       _ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
0000f6  ed9d0b0c          VLDR     d0,[sp,#0x30]         ;72
0000fa  2000              MOVS     r0,#0                 ;74
0000fc  ed850b00          VSTR     d0,[r5,#0]            ;74
000100  ed9d0b0e          VLDR     d0,[sp,#0x38]         ;74
000104  ed850b02          VSTR     d0,[r5,#8]            ;74
000108  ed9d0b10          VLDR     d0,[sp,#0x40]         ;74
00010c  ed850b04          VSTR     d0,[r5,#0x10]         ;74
000110  b019              ADD      sp,sp,#0x64
000112  bd30              POP      {r4,r5,pc}
;;;76     
                          ENDP


                          AREA ||area_number.382||, COMGROUP=_ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIdEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE, LINKORDER=||t._ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIdEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.382||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIdEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_||, COMGROUP=_ZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_ PROC ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)
;;;142          template<typename PRECISION>
;;;143          Result computePossiblePoses(const Point3<PRECISION>& worldPoint1,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;144            const Point3<PRECISION>& worldPoint2,
;;;145            const Point3<PRECISION>& worldPoint3,
;;;146            const Point3<PRECISION>& imageRay1,
;;;147            const Point3<PRECISION>& imageRay2,
;;;148            const Point3<PRECISION>& imageRay3,
;;;149            Array<PRECISION>& R1, Point3<PRECISION>& T1,
;;;150            Array<PRECISION>& R2, Point3<PRECISION>& T2,
;;;151            Array<PRECISION>& R3, Point3<PRECISION>& T3,
;;;152            Array<PRECISION>& R4, Point3<PRECISION>& T4)
;;;153          {
000004  4617              MOV      r7,r2
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  f2ad5dbc          SUB      sp,sp,#0x5bc
00000e  461e              MOV      r6,r3
000010  4688              MOV      r8,r1
000012  4681              MOV      r9,r0
;;;154            Result lastResult = RESULT_OK;
;;;155    
;;;156            // Create a little memory stack for the various 3x3 matrices used below
;;;157            const s32 SCRATCH_BUFFER_SIZE = 768;
;;;158            char buffer[SCRATCH_BUFFER_SIZE];
;;;159            MemoryStack scratch(buffer, SCRATCH_BUFFER_SIZE);
000014  2201              MOVS     r2,#1
000016  2300              MOVS     r3,#0
000018  4611              MOV      r1,r2
00001a  f20d5044          ADD      r0,sp,#0x544
00001e  f8ddb63c          LDR      r11,[sp,#0x63c]
000022  f8dd5620          LDR      r5,[sp,#0x620]
000026  f8dd4624          LDR      r4,[sp,#0x624]
00002a  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00002e  6803              LDR      r3,[r0,#0]
000030  f44f7240          MOV      r2,#0x300
000034  a95c              ADD      r1,sp,#0x170
000036  f20d4084          ADD      r0,sp,#0x484
00003a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE ; Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
;;;160    
;;;161            // Typedef the templated classes for brevity below
;;;162            typedef Point3<PRECISION> POINT;
;;;163            typedef Array<PRECISION>  MATRIX;
;;;164    
;;;165            BeginBenchmark("cpml_init");
00003e  48fe              LDR      r0,|L388.1080|
000040  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000044  ed990b00          VLDR     d0,[r9,#0]
;;;166    
;;;167            /*
;;;168            CoreTechPrint("  worldPoint1 = (%f, %f, %f)\n", worldPoint1.x, worldPoint1.y, worldPoint1.z);
;;;169            CoreTechPrint("  worldPoint2 = (%f, %f, %f)\n", worldPoint2.x, worldPoint2.y, worldPoint2.z);
;;;170            CoreTechPrint("  worldPoint3 = (%f, %f, %f)\n", worldPoint3.x, worldPoint3.y, worldPoint3.z);
;;;171    
;;;172            CoreTechPrint("  imageRay1 = (%f, %f, %f)\n", imageRay1.x, imageRay1.y, imageRay1.z);
;;;173            CoreTechPrint("  imageRay2 = (%f, %f, %f)\n", imageRay2.x, imageRay2.y, imageRay2.z);
;;;174            CoreTechPrint("  imageRay3 = (%f, %f, %f)\n", imageRay3.x, imageRay3.y, imageRay3.z);
;;;175            */
;;;176    
;;;177            POINT P1(worldPoint1);
;;;178            POINT P2(worldPoint2);
;;;179            POINT P3(worldPoint3);
;;;180    
;;;181            // Verify the world points are not colinear
;;;182            if(CrossProduct(P2 - P1, P3 - P1).Length() == 0) {
000048  aa16              ADD      r2,sp,#0x58
00004a  ed8d0b16          VSTR     d0,[sp,#0x58]
00004e  ed990b02          VLDR     d0,[r9,#8]
000052  a922              ADD      r1,sp,#0x88
000054  ed8d0b18          VSTR     d0,[sp,#0x60]
000058  ed990b04          VLDR     d0,[r9,#0x10]
00005c  a81c              ADD      r0,sp,#0x70
00005e  ed8d0b1a          VSTR     d0,[sp,#0x68]
000062  ed980b00          VLDR     d0,[r8,#0]
000066  ed8d0b34          VSTR     d0,[sp,#0xd0]
00006a  ed980b02          VLDR     d0,[r8,#8]
00006e  ed8d0b36          VSTR     d0,[sp,#0xd8]
000072  ed980b04          VLDR     d0,[r8,#0x10]
000076  ed8d0b38          VSTR     d0,[sp,#0xe0]
00007a  ed970b00          VLDR     d0,[r7,#0]
00007e  ed8d0b22          VSTR     d0,[sp,#0x88]
000082  ed970b02          VLDR     d0,[r7,#8]
000086  ed8d0b24          VSTR     d0,[sp,#0x90]
00008a  ed970b04          VLDR     d0,[r7,#0x10]
00008e  ed8d0b26          VSTR     d0,[sp,#0x98]
000092  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdEmiERKS2_ ; Anki::Embedded::Point3<double>::operator -(const Anki::Embedded::Point3<double>&) const
000096  aa16              ADD      r2,sp,#0x58
000098  a934              ADD      r1,sp,#0xd0
00009a  f50d6099          ADD      r0,sp,#0x4c8
00009e  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdEmiERKS2_ ; Anki::Embedded::Point3<double>::operator -(const Anki::Embedded::Point3<double>&) const
0000a2  aa1c              ADD      r2,sp,#0x70
0000a4  f50d6199          ADD      r1,sp,#0x4c8
0000a8  f50d60b0          ADD      r0,sp,#0x580
0000ac  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
0000b0  f50d60b0          ADD      r0,sp,#0x580
0000b4  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdE6LengthEv ; Anki::Embedded::Point3<double>::Length() const
0000b8  eeb50ac0          VCMPE.F32 s0,#0.0
0000bc  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000c0  d07e              BEQ      |L388.448|
0000c2  ed960b00          VLDR     d0,[r6,#0]
;;;183              return RESULT_FAIL;
;;;184            }
;;;185    
;;;186            POINT f1(imageRay1);
;;;187            POINT f2(imageRay2);
;;;188            POINT f3(imageRay3);
;;;189    
;;;190            // Rays should be unit length:
;;;191            AnkiAssert(NEAR(f1.Length(), 1.f, 1e-6f));
;;;192            AnkiAssert(NEAR(f2.Length(), 1.f, 1e-6f));
;;;193            AnkiAssert(NEAR(f3.Length(), 1.f, 1e-6f));
;;;194    
;;;195            MATRIX T = MATRIX(3,3,scratch);
0000c6  2300              MOVS     r3,#0
0000c8  ed8d0b2e          VSTR     d0,[sp,#0xb8]
0000cc  ed960b02          VLDR     d0,[r6,#8]
0000d0  461a              MOV      r2,r3
0000d2  ed8d0b30          VSTR     d0,[sp,#0xc0]
0000d6  ed960b04          VLDR     d0,[r6,#0x10]
0000da  2101              MOVS     r1,#1
0000dc  ed8d0b32          VSTR     d0,[sp,#0xc8]
0000e0  ed950b00          VLDR     d0,[r5,#0]
0000e4  f20d5044          ADD      r0,sp,#0x544
0000e8  ed8d0b4c          VSTR     d0,[sp,#0x130]
0000ec  ed950b02          VLDR     d0,[r5,#8]
0000f0  ed8d0b4e          VSTR     d0,[sp,#0x138]
0000f4  ed950b04          VLDR     d0,[r5,#0x10]
0000f8  ed8d0b50          VSTR     d0,[sp,#0x140]
0000fc  ed940b00          VLDR     d0,[r4,#0]
000100  ed8d0b28          VSTR     d0,[sp,#0xa0]
000104  ed940b02          VLDR     d0,[r4,#8]
000108  ed8d0b2a          VSTR     d0,[sp,#0xa8]
00010c  ed940b04          VLDR     d0,[r4,#0x10]
000110  ed8d0b2c          VSTR     d0,[sp,#0xb0]
000114  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000118  6800              LDR      r0,[r0,#0]
00011a  2203              MOVS     r2,#3
00011c  9000              STR      r0,[sp,#0]
00011e  f20d4384          ADD      r3,sp,#0x484
000122  4611              MOV      r1,r2
000124  f20d40b4          ADD      r0,sp,#0x4b4
000128  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;196            AnkiConditionalErrorAndReturnValue(T.IsValid(), RESULT_FAIL_MEMORY,
00012c  f20d40b4          ADD      r0,sp,#0x4b4
000130  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
000134  f8dfa304          LDR      r10,|L388.1084|
000138  2800              CMP      r0,#0
00013a  d07d              BEQ      |L388.568|
;;;197              "P3P::computePossiblePoses()",
;;;198              "Invalid T Matrix, out of memory?");
;;;199    
;;;200            // Create intermediate camera frame
;;;201            if((lastResult = createIntermediateCameraFrameHelper(f1, f2, f3, T)) != RESULT_OK) {
00013c  f20d43b4          ADD      r3,sp,#0x4b4
000140  aa28              ADD      r2,sp,#0xa0
000142  a94c              ADD      r1,sp,#0x130
000144  a82e              ADD      r0,sp,#0xb8
000146  f7fffffe          BL       _ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIdEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE ; Anki::Embedded::P3P::createIntermediateCameraFrameHelper<double>(Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&)
;;;202              return lastResult;
;;;203            }
;;;204    
;;;205            // Reinforce that f3[2] > 0 for theta in [0,pi]
;;;206            if(f3.z > 0)
00014a  ed9fabbd          VLDR     d10,|L388.1088|
00014e  2800              CMP      r0,#0                 ;201
;;;207            {
;;;208              f1 = imageRay2;
;;;209              f2 = imageRay1;
;;;210              f3 = imageRay3;
;;;211    
;;;212              if((lastResult = createIntermediateCameraFrameHelper(f1, f2, f3, T)) != RESULT_OK) {
;;;213                return lastResult;
;;;214              }
;;;215    
;;;216              P1 = worldPoint2;
;;;217              P2 = worldPoint1;
;;;218              P3 = worldPoint3;
;;;219            }
;;;220    
;;;221            // Creation of intermediate world frame
;;;222            POINT n1 = P2 - P1;
;;;223            if(n1.MakeUnitLength() == 0) { return RESULT_FAIL; }
;;;224    
;;;225            POINT n3(CrossProduct(n1, (P3-P1)));
;;;226            if(n3.MakeUnitLength() == 0) { return RESULT_FAIL; }
;;;227    
;;;228            POINT n2(CrossProduct(n3,n1));
;;;229    
;;;230            // the n vectors are the rows of the N matrix
;;;231            MATRIX N = MATRIX(3,3,scratch);
;;;232            AnkiConditionalErrorAndReturnValue(N.IsValid(), RESULT_FAIL_MEMORY,
;;;233              "P3P::computePossiblePoses()",
;;;234              "Invalid N Matrix, out of memory?");
;;;235            N[0][0] = n1.x; N[0][1] = n1.y; N[0][2] = n1.z;
;;;236            N[1][0] = n2.x; N[1][1] = n2.y; N[1][2] = n2.z;
;;;237            N[2][0] = n3.x; N[2][1] = n3.y; N[2][2] = n3.z;
;;;238    
;;;239            // Extraction of known parameters
;;;240    
;;;241            P3 = N*(P3-P1);
;;;242    
;;;243            PRECISION d_12 = (P2-P1).Length();
;;;244            PRECISION f_1 = f3.x/f3.z;
;;;245            PRECISION f_2 = f3.y/f3.z;
;;;246            PRECISION p_1 = P3.x;
;;;247            PRECISION p_2 = P3.y;
;;;248    
;;;249            PRECISION cos_beta = DotProduct(f1, f2);
;;;250            PRECISION b = PRECISION(1)/(PRECISION(1)-cos_beta*cos_beta) - PRECISION(1);
;;;251    
;;;252            if (cos_beta < 0) {
;;;253              b = -sqrt(b);
;;;254            }	else {
;;;255              b = sqrt(b);
;;;256            }
;;;257    
;;;258            // Definition of temporary variables for avoiding multiple computation
;;;259    
;;;260            PRECISION f_1_pw2 = f_1*f_1; //pow(f_1,2);
;;;261            PRECISION f_2_pw2 = f_2*f_2; //pow(f_2,2);
;;;262            PRECISION p_1_pw2 = p_1*p_1; //pow(p_1,2);
;;;263            PRECISION p_1_pw3 = p_1_pw2 * p_1;
;;;264            PRECISION p_1_pw4 = p_1_pw3 * p_1;
;;;265            PRECISION p_2_pw2 = p_2*p_2; //pow(p_2,2);
;;;266            PRECISION p_2_pw3 = p_2_pw2 * p_2;
;;;267            PRECISION p_2_pw4 = p_2_pw3 * p_2;
;;;268            PRECISION d_12_pw2 = d_12*d_12; //pow(d_12,2);
;;;269            PRECISION b_pw2 = b*b; //pow(b,2);
;;;270    
;;;271            // Computation of factors of 4th degree polynomial
;;;272            PRECISION factors[5];
;;;273    
;;;274            factors[0] = -f_2_pw2*p_2_pw4
;;;275              -p_2_pw4*f_1_pw2
;;;276              -p_2_pw4;
;;;277    
;;;278            factors[1] = 2*p_2_pw3*d_12*b
;;;279              +2*f_2_pw2*p_2_pw3*d_12*b
;;;280              -2*f_2*p_2_pw3*f_1*d_12;
;;;281    
;;;282            factors[2] = -f_2_pw2*p_2_pw2*p_1_pw2
;;;283              -f_2_pw2*p_2_pw2*d_12_pw2*b_pw2
;;;284              -f_2_pw2*p_2_pw2*d_12_pw2
;;;285              +f_2_pw2*p_2_pw4
;;;286              +p_2_pw4*f_1_pw2
;;;287              +2*p_1*p_2_pw2*d_12
;;;288              +2*f_1*f_2*p_1*p_2_pw2*d_12*b
;;;289              -p_2_pw2*p_1_pw2*f_1_pw2
;;;290              +2*p_1*p_2_pw2*f_2_pw2*d_12
;;;291              -p_2_pw2*d_12_pw2*b_pw2
;;;292              -2*p_1_pw2*p_2_pw2;
;;;293    
;;;294            factors[3] = 2*p_1_pw2*p_2*d_12*b
;;;295              +2*f_2*p_2_pw3*f_1*d_12
;;;296              -2*f_2_pw2*p_2_pw3*d_12*b
;;;297              -2*p_1*p_2*d_12_pw2*b;
;;;298    
;;;299            factors[4] = -2*f_2*p_2_pw2*f_1*p_1*d_12*b
;;;300              +f_2_pw2*p_2_pw2*d_12_pw2
;;;301              +2*p_1_pw3*d_12
;;;302              -p_1_pw2*d_12_pw2
;;;303              +f_2_pw2*p_2_pw2*p_1_pw2
;;;304              -p_1_pw4
;;;305              -2*f_2_pw2*p_2_pw2*p_1*d_12
;;;306              +p_2_pw2*f_1_pw2*p_1_pw2
;;;307              +f_2_pw2*p_2_pw2*d_12_pw2*b_pw2;
;;;308    
;;;309            // Computation of roots
;;;310            PRECISION realRoots[4];
;;;311            solveQuartic(factors, realRoots);
;;;312    
;;;313            // Backsubstitution of each solution
;;;314    
;;;315            // Make an array of pointers to the outputs so we can loop over them
;;;316            // to create each solution below
;;;317            Array<PRECISION>*  Rout[4] = {&R1, &R2, &R3, &R4};
;;;318            Point3<PRECISION>* Tout[4] = {&T1, &T2, &T3, &T4};
;;;319    
;;;320            MATRIX Tt = MATRIX(3,3,scratch);
;;;321            AnkiConditionalErrorAndReturnValue(Tt.IsValid(), RESULT_FAIL_MEMORY,
;;;322              "P3P::computePossiblePoses()",
;;;323              "Invalid Tt Matrix, out of memory?");
;;;324            if((lastResult = Matrix::Transpose(T, Tt)) != RESULT_OK) {
;;;325              return lastResult;
;;;326            }
;;;327    
;;;328            MATRIX Nt = MATRIX(3,3,scratch);
;;;329            AnkiConditionalErrorAndReturnValue(Nt.IsValid(), RESULT_FAIL_MEMORY,
;;;330              "P3P::computePossiblePoses()",
;;;331              "Invalid Nt Matrix, out of memory?");
;;;332            if((lastResult = Matrix::Transpose(N, Nt)) != RESULT_OK) {
;;;333              return lastResult;
;;;334            }
;;;335    
;;;336            MATRIX R = MATRIX(3,3,scratch);
;;;337            AnkiConditionalErrorAndReturnValue(R.IsValid(), RESULT_FAIL_MEMORY,
;;;338              "P3P::computePossiblePoses()",
;;;339              "Invalid R Matrix, out of memory?");
;;;340            MATRIX temp = MATRIX(3,3,scratch);
;;;341            AnkiConditionalErrorAndReturnValue(temp.IsValid(), RESULT_FAIL_MEMORY,
;;;342              "P3P::computePossiblePoses()",
;;;343              "Invalid temp Matrix, out of memory?");
;;;344    
;;;345            EndBenchmark("cpml_init");
;;;346    
;;;347            for(s32 i=0; i<4; i++)
;;;348            {
;;;349              BeginBenchmark("cpml_mainLoop");
;;;350    
;;;351              PRECISION cot_alpha = (-f_1*p_1/f_2-realRoots[i]*p_2+d_12*b)/(-f_1*realRoots[i]*p_2/f_2+p_1-d_12);
;;;352    
;;;353              PRECISION cos_theta = realRoots[i];
;;;354              PRECISION sin_theta = sqrt(1-realRoots[i]*realRoots[i]);
;;;355              PRECISION sin_alpha = sqrt(1/(cot_alpha*cot_alpha+1));
;;;356              PRECISION cos_alpha = sqrt(1-sin_alpha*sin_alpha);
;;;357    
;;;358              if (cot_alpha < 0) {
;;;359                cos_alpha = -cos_alpha;
;;;360              }
;;;361    
;;;362              // Fill in the initial R matrix
;;;363              R[0][0] = -cos_alpha;    R[0][1] = -sin_alpha*cos_theta;   R[0][2] = -sin_alpha*sin_theta;
;;;364              R[1][0] =  sin_alpha;    R[1][1] = -cos_alpha*cos_theta;   R[1][2] = -cos_alpha*sin_theta;
;;;365              R[2][0] =  0;            R[2][1] = -sin_theta;             R[2][2] = cos_theta;
;;;366    
;;;367              // Assign this solution's rotation matrix to the output
;;;368              //  Rout[i] = Tt * R * N;
;;;369              AnkiAssert(Rout[i]->get_size(0) == 3 && Rout[i]->get_size(1) == 3);
;;;370              if((lastResult = Matrix::Multiply(Tt, R, temp)) != RESULT_OK) {
;;;371                return lastResult;
;;;372              }
;;;373              if((lastResult = Matrix::Multiply(temp, N, *Rout[i])) != RESULT_OK) {
;;;374                return lastResult;
;;;375              }
;;;376    
;;;377              POINT C(d_12*cos_alpha*(sin_alpha*b+cos_alpha),
;;;378                cos_theta*d_12*sin_alpha*(sin_alpha*b+cos_alpha),
;;;379                sin_theta*d_12*sin_alpha*(sin_alpha*b+cos_alpha));
;;;380    
;;;381              // Assign this solution's translation vector to the output
;;;382              *Tout[i] = -(*Rout[i] * (P1 + Nt*C));
;;;383    
;;;384              EndBenchmark("cpml_mainLoop");
;;;385            }
;;;386    
;;;387            return RESULT_OK;
;;;388          } // computePossiblePoses(from individually-listed points)
000150  bf1e              ITTT     NE
000152  f20d5dbc          ADDNE    sp,sp,#0x5bc
000156  ecbd8b10          VPOPNE   {d8-d15}
00015a  e8bd8ff0          POPNE    {r4-r11,pc}
00015e  ed9d0b2c          VLDR     d0,[sp,#0xb0]         ;206
000162  ec532b1a          VMOV     r2,r3,d10             ;206
000166  ec510b10          VMOV     r0,r1,d0              ;206
00016a  f7fffffe          BL       __aeabi_cdrcmple
00016e  d253              BCS      |L388.536|
000170  ed950b00          VLDR     d0,[r5,#0]            ;206
000174  f20d43b4          ADD      r3,sp,#0x4b4          ;212
000178  ed8d0b2e          VSTR     d0,[sp,#0xb8]         ;212
00017c  ed950b02          VLDR     d0,[r5,#8]            ;212
000180  aa28              ADD      r2,sp,#0xa0           ;212
000182  ed8d0b30          VSTR     d0,[sp,#0xc0]         ;212
000186  ed950b04          VLDR     d0,[r5,#0x10]         ;212
00018a  ed8d0b32          VSTR     d0,[sp,#0xc8]         ;212
00018e  ed960b00          VLDR     d0,[r6,#0]            ;212
000192  ed8d0b4c          VSTR     d0,[sp,#0x130]        ;212
000196  ed960b02          VLDR     d0,[r6,#8]            ;212
00019a  ed8d0b4e          VSTR     d0,[sp,#0x138]        ;212
00019e  ed960b04          VLDR     d0,[r6,#0x10]         ;212
0001a2  ed8d0b50          VSTR     d0,[sp,#0x140]        ;212
0001a6  ed940b00          VLDR     d0,[r4,#0]            ;212
0001aa  ed8d0b28          VSTR     d0,[sp,#0xa0]         ;212
0001ae  ed940b02          VLDR     d0,[r4,#8]            ;212
0001b2  ed8d0b2a          VSTR     d0,[sp,#0xa8]         ;212
0001b6  ed940b04          VLDR     d0,[r4,#0x10]         ;212
0001ba  ed8d0b2c          VSTR     d0,[sp,#0xb0]         ;212
0001be  e000              B        |L388.450|
                  |L388.448|
0001c0  e04b              B        |L388.602|
                  |L388.450|
0001c2  a94c              ADD      r1,sp,#0x130          ;212
0001c4  a82e              ADD      r0,sp,#0xb8           ;212
0001c6  f7fffffe          BL       _ZN4Anki8Embedded3P3P35createIntermediateCameraFrameHelperIdEENS_6ResultERNS0_6Point3IT_EES7_S7_RNS0_5ArrayIS5_EE ; Anki::Embedded::P3P::createIntermediateCameraFrameHelper<double>(Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&)
0001ca  2800              CMP      r0,#0                 ;212
0001cc  f0408046          BNE.W    |L388.604|
0001d0  ed980b00          VLDR     d0,[r8,#0]            ;212
0001d4  ed8d0b16          VSTR     d0,[sp,#0x58]         ;212
0001d8  ed980b02          VLDR     d0,[r8,#8]            ;212
0001dc  ed8d0b18          VSTR     d0,[sp,#0x60]         ;212
0001e0  ed980b04          VLDR     d0,[r8,#0x10]         ;212
0001e4  ed8d0b1a          VSTR     d0,[sp,#0x68]         ;212
0001e8  ed990b00          VLDR     d0,[r9,#0]            ;212
0001ec  ed8d0b34          VSTR     d0,[sp,#0xd0]         ;212
0001f0  ed990b02          VLDR     d0,[r9,#8]            ;212
0001f4  ed8d0b36          VSTR     d0,[sp,#0xd8]         ;212
0001f8  ed990b04          VLDR     d0,[r9,#0x10]         ;212
0001fc  ed8d0b38          VSTR     d0,[sp,#0xe0]         ;212
000200  ed970b00          VLDR     d0,[r7,#0]            ;212
000204  ed8d0b22          VSTR     d0,[sp,#0x88]         ;212
000208  ed970b02          VLDR     d0,[r7,#8]            ;212
00020c  ed8d0b24          VSTR     d0,[sp,#0x90]         ;212
000210  ed970b04          VLDR     d0,[r7,#0x10]         ;212
000214  ed8d0b26          VSTR     d0,[sp,#0x98]         ;212
                  |L388.536|
000218  aa16              ADD      r2,sp,#0x58           ;222
00021a  a934              ADD      r1,sp,#0xd0           ;222
00021c  a83a              ADD      r0,sp,#0xe8           ;222
00021e  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdEmiERKS2_ ; Anki::Embedded::Point3<double>::operator -(const Anki::Embedded::Point3<double>&) const
000222  a83a              ADD      r0,sp,#0xe8           ;223
000224  f7fffffe          BL       _ZN4Anki8Embedded6Point3IdE14MakeUnitLengthEv ; Anki::Embedded::Point3<double>::MakeUnitLength()
000228  eeb50ac0          VCMPE.F32 s0,#0.0               ;223
00022c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;223
000230  d013              BEQ      |L388.602|
000232  aa16              ADD      r2,sp,#0x58           ;225
000234  a922              ADD      r1,sp,#0x88           ;225
000236  e000              B        |L388.570|
                  |L388.568|
000238  e016              B        |L388.616|
                  |L388.570|
00023a  a81c              ADD      r0,sp,#0x70           ;225
00023c  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdEmiERKS2_ ; Anki::Embedded::Point3<double>::operator -(const Anki::Embedded::Point3<double>&) const
000240  aa1c              ADD      r2,sp,#0x70           ;225
000242  a93a              ADD      r1,sp,#0xe8           ;225
000244  a840              ADD      r0,sp,#0x100          ;225
000246  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
00024a  a840              ADD      r0,sp,#0x100          ;226
00024c  f7fffffe          BL       _ZN4Anki8Embedded6Point3IdE14MakeUnitLengthEv ; Anki::Embedded::Point3<double>::MakeUnitLength()
000250  eeb50ac0          VCMPE.F32 s0,#0.0               ;226
000254  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;226
000258  d112              BNE      |L388.640|
                  |L388.602|
00025a  2001              MOVS     r0,#1                 ;226
                  |L388.604|
00025c  f20d5dbc          ADD      sp,sp,#0x5bc
000260  ecbd8b10          VPOP     {d8-d15}
000264  e8bd8ff0          POP      {r4-r11,pc}
                  |L388.616|
000268  20c4              MOVS     r0,#0xc4              ;196
00026a  e9cda000          STRD     r10,r0,[sp,#0]        ;196
00026e  4b76              LDR      r3,|L388.1096|
000270  4a76              LDR      r2,|L388.1100|
000272  4977              LDR      r1,|L388.1104|
000274  2005              MOVS     r0,#5                 ;196
000276  f7fffffe          BL       _Anki_Log
00027a  f04f7080          MOV      r0,#0x1000000         ;196
00027e  e7ed              B        |L388.604|
                  |L388.640|
000280  aa3a              ADD      r2,sp,#0xe8           ;228
000282  a940              ADD      r1,sp,#0x100          ;228
000284  a846              ADD      r0,sp,#0x118          ;228
000286  f7fffffe          BL       _ZN4Anki8Embedded12CrossProductIdEENS0_6Point3IT_EERKS4_S6_ ; Anki::Embedded::CrossProduct<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
00028a  2300              MOVS     r3,#0                 ;231
00028c  461a              MOV      r2,r3                 ;231
00028e  2101              MOVS     r1,#1                 ;231
000290  f20d5044          ADD      r0,sp,#0x544          ;231
000294  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000298  6800              LDR      r0,[r0,#0]            ;231
00029a  2203              MOVS     r2,#3                 ;231
00029c  9000              STR      r0,[sp,#0]            ;231
00029e  f20d4384          ADD      r3,sp,#0x484          ;231
0002a2  4611              MOV      r1,r2                 ;231
0002a4  f50d608e          ADD      r0,sp,#0x470          ;231
0002a8  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0002ac  f50d608e          ADD      r0,sp,#0x470          ;232
0002b0  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
0002b4  2800              CMP      r0,#0                 ;232
0002b6  f000810f          BEQ.W    |L388.1240|
0002ba  f8dd2478          LDR      r2,[sp,#0x478]        ;232
0002be  f8dd1480          LDR      r1,[sp,#0x480]        ;232
0002c2  2000              MOVS     r0,#0                 ;235
0002c4  fb001002          MLA      r0,r0,r2,r1           ;235
0002c8  ed9d0b3a          VLDR     d0,[sp,#0xe8]         ;235
0002cc  ed800b00          VSTR     d0,[r0,#0]            ;235
0002d0  f8dd2478          LDR      r2,[sp,#0x478]        ;235
0002d4  f8dd1480          LDR      r1,[sp,#0x480]        ;235
0002d8  2000              MOVS     r0,#0                 ;235
0002da  fb001002          MLA      r0,r0,r2,r1           ;235
0002de  ed9d0b3c          VLDR     d0,[sp,#0xf0]         ;235
0002e2  ed800b02          VSTR     d0,[r0,#8]            ;235
0002e6  f8dd2478          LDR      r2,[sp,#0x478]        ;235
0002ea  f8dd1480          LDR      r1,[sp,#0x480]        ;235
0002ee  2000              MOVS     r0,#0                 ;235
0002f0  fb001002          MLA      r0,r0,r2,r1           ;235
0002f4  ed9d0b3e          VLDR     d0,[sp,#0xf8]         ;235
0002f8  ed800b04          VSTR     d0,[r0,#0x10]         ;235
0002fc  f8dd2478          LDR      r2,[sp,#0x478]        ;235
000300  f8dd1480          LDR      r1,[sp,#0x480]        ;235
000304  2001              MOVS     r0,#1                 ;236
000306  fb001002          MLA      r0,r0,r2,r1           ;236
00030a  ed9d0b46          VLDR     d0,[sp,#0x118]        ;236
00030e  ed800b00          VSTR     d0,[r0,#0]            ;236
000312  f8dd2478          LDR      r2,[sp,#0x478]        ;236
000316  f8dd1480          LDR      r1,[sp,#0x480]        ;236
00031a  2001              MOVS     r0,#1                 ;236
00031c  fb001002          MLA      r0,r0,r2,r1           ;236
000320  ed9d0b48          VLDR     d0,[sp,#0x120]        ;236
000324  ed800b02          VSTR     d0,[r0,#8]            ;236
000328  f8dd2478          LDR      r2,[sp,#0x478]        ;236
00032c  f8dd1480          LDR      r1,[sp,#0x480]        ;236
000330  2001              MOVS     r0,#1                 ;236
000332  fb001002          MLA      r0,r0,r2,r1           ;236
000336  ed9d0b4a          VLDR     d0,[sp,#0x128]        ;236
00033a  ed800b04          VSTR     d0,[r0,#0x10]         ;236
00033e  f8dd2478          LDR      r2,[sp,#0x478]        ;236
000342  f8dd1480          LDR      r1,[sp,#0x480]        ;236
000346  2002              MOVS     r0,#2                 ;237
000348  fb001002          MLA      r0,r0,r2,r1           ;237
00034c  ed9d0b40          VLDR     d0,[sp,#0x100]        ;237
000350  ed800b00          VSTR     d0,[r0,#0]            ;237
000354  f8dd2478          LDR      r2,[sp,#0x478]        ;237
000358  f8dd1480          LDR      r1,[sp,#0x480]        ;237
00035c  2002              MOVS     r0,#2                 ;237
00035e  fb001002          MLA      r0,r0,r2,r1           ;237
000362  ed9d0b42          VLDR     d0,[sp,#0x108]        ;237
000366  ed800b02          VSTR     d0,[r0,#8]            ;237
00036a  f8dd2478          LDR      r2,[sp,#0x478]        ;237
00036e  f8dd1480          LDR      r1,[sp,#0x480]        ;237
000372  2002              MOVS     r0,#2                 ;237
000374  fb001002          MLA      r0,r0,r2,r1           ;237
000378  ed9d0b44          VLDR     d0,[sp,#0x110]        ;237
00037c  aa16              ADD      r2,sp,#0x58           ;241
00037e  ed800b04          VSTR     d0,[r0,#0x10]         ;237
000382  a922              ADD      r1,sp,#0x88           ;241
000384  f50d6099          ADD      r0,sp,#0x4c8          ;241
000388  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdEmiERKS2_ ; Anki::Embedded::Point3<double>::operator -(const Anki::Embedded::Point3<double>&) const
00038c  f50d6299          ADD      r2,sp,#0x4c8          ;241
000390  f50d618e          ADD      r1,sp,#0x470          ;241
000394  a81c              ADD      r0,sp,#0x70           ;241
000396  f7fffffe          BL       _ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
00039a  ed9d0b1c          VLDR     d0,[sp,#0x70]         ;241
00039e  aa16              ADD      r2,sp,#0x58           ;243
0003a0  ed8d0b22          VSTR     d0,[sp,#0x88]         ;243
0003a4  ed9d0b1e          VLDR     d0,[sp,#0x78]         ;243
0003a8  a934              ADD      r1,sp,#0xd0           ;243
0003aa  ed8d0b24          VSTR     d0,[sp,#0x90]         ;243
0003ae  ed9d0b20          VLDR     d0,[sp,#0x80]         ;243
0003b2  a81c              ADD      r0,sp,#0x70           ;243
0003b4  ed8d0b26          VSTR     d0,[sp,#0x98]         ;243
0003b8  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdEmiERKS2_ ; Anki::Embedded::Point3<double>::operator -(const Anki::Embedded::Point3<double>&) const
0003bc  a81c              ADD      r0,sp,#0x70           ;243
0003be  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdE6LengthEv ; Anki::Embedded::Point3<double>::Length() const
0003c2  ee100a10          VMOV     r0,s0                 ;243
0003c6  f7fffffe          BL       __aeabi_f2d
0003ca  ed9d9b2c          VLDR     d9,[sp,#0xb0]         ;244
0003ce  ed9d0b28          VLDR     d0,[sp,#0xa0]         ;244
0003d2  ec410b18          VMOV     d8,r0,r1              ;243
0003d6  ec532b19          VMOV     r2,r3,d9              ;244
0003da  ec510b10          VMOV     r0,r1,d0              ;244
0003de  f7fffffe          BL       __aeabi_ddiv
0003e2  ec410b10          VMOV     d0,r0,r1              ;244
0003e6  ec532b19          VMOV     r2,r3,d9              ;245
0003ea  ed8d0b02          VSTR     d0,[sp,#8]            ;244
0003ee  ed9d0b2a          VLDR     d0,[sp,#0xa8]         ;245
0003f2  ec510b10          VMOV     r0,r1,d0              ;245
0003f6  f7fffffe          BL       __aeabi_ddiv
0003fa  ed9d1b50          VLDR     d1,[sp,#0x140]        ;245
0003fe  ed9d0b32          VLDR     d0,[sp,#0xc8]         ;245
000402  ec410b1f          VMOV     d15,r0,r1             ;245
000406  ed9dcb22          VLDR     d12,[sp,#0x88]        ;246
00040a  ed9ddb24          VLDR     d13,[sp,#0x90]        ;247
00040e  ec532b11          VMOV     r2,r3,d1              ;247
000412  ec510b10          VMOV     r0,r1,d0              ;247
000416  f7fffffe          BL       __aeabi_dmul
00041a  ed9d1b4e          VLDR     d1,[sp,#0x138]        ;247
00041e  ed9d0b30          VLDR     d0,[sp,#0xc0]         ;247
000422  ec410b1e          VMOV     d14,r0,r1             ;247
000426  ec532b11          VMOV     r2,r3,d1              ;247
00042a  ec510b10          VMOV     r0,r1,d0              ;247
00042e  f7fffffe          BL       __aeabi_dmul
000432  ec410b19          VMOV     d9,r0,r1              ;247
000436  e00d              B        |L388.1108|
                  |L388.1080|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
                  |L388.1084|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_E19__PRETTY_FUNCTION__ ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::__PRETTY_FUNCTION__
                  |L388.1088|
000440  00000000          DCFD     0x0000000000000000 ; 0
000444  00000000
                  |L388.1096|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
                  |L388.1100|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_1 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 3)
                  |L388.1104|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
                  |L388.1108|
000454  ed9d1b4c          VLDR     d1,[sp,#0x130]        ;247
000458  ed9d0b2e          VLDR     d0,[sp,#0xb8]         ;247
00045c  ec532b11          VMOV     r2,r3,d1              ;247
000460  ec510b10          VMOV     r0,r1,d0              ;247
000464  f7fffffe          BL       __aeabi_dmul
000468  ec532b19          VMOV     r2,r3,d9              ;247
00046c  f7fffffe          BL       __aeabi_dadd
000470  ec532b1e          VMOV     r2,r3,d14             ;247
000474  f7fffffe          BL       __aeabi_dadd
000478  ec410b19          VMOV     d9,r0,r1              ;247
00047c  ec532b19          VMOV     r2,r3,d9              ;250
000480  f7fffffe          BL       __aeabi_dmul
000484  ed9fbbfe          VLDR     d11,|L388.2176|
000488  ec532b1b          VMOV     r2,r3,d11             ;250
00048c  f7fffffe          BL       __aeabi_drsub
000490  ec410b10          VMOV     d0,r0,r1              ;250
000494  ec510b1b          VMOV     r0,r1,d11             ;250
000498  ec532b10          VMOV     r2,r3,d0              ;250
00049c  f7fffffe          BL       __aeabi_ddiv
0004a0  ec532b1b          VMOV     r2,r3,d11             ;250
0004a4  f7fffffe          BL       __aeabi_dsub
0004a8  ed1f0b1b          VLDR     d0,|L388.1088|
0004ac  ec410b1b          VMOV     d11,r0,r1             ;250
0004b0  ec532b10          VMOV     r2,r3,d0              ;252
0004b4  ec510b19          VMOV     r0,r1,d9              ;252
0004b8  f7fffffe          BL       __aeabi_cdcmple
0004bc  eeb00a4b          VMOV.F32 s0,s22                ;253
0004c0  eef00a6b          VMOV.F32 s1,s23                ;253
0004c4  d214              BCS      |L388.1264|
0004c6  f7fffffe          BL       __hardfp_sqrt
0004ca  ec510b10          VMOV     r0,r1,d0              ;253
0004ce  f7fffffe          BL       __aeabi_dneg
0004d2  ec410b1b          VMOV     d11,r0,r1             ;253
0004d6  e011              B        |L388.1276|
                  |L388.1240|
0004d8  20e8              MOVS     r0,#0xe8              ;232
0004da  e9cda000          STRD     r10,r0,[sp,#0]        ;232
0004de  4bea              LDR      r3,|L388.2184|
0004e0  4aea              LDR      r2,|L388.2188|
0004e2  49eb              LDR      r1,|L388.2192|
0004e4  2005              MOVS     r0,#5                 ;232
0004e6  f7fffffe          BL       _Anki_Log
0004ea  f04f7080          MOV      r0,#0x1000000         ;232
0004ee  e6b5              B        |L388.604|
                  |L388.1264|
0004f0  f7fffffe          BL       __hardfp_sqrt
0004f4  eeb0ba40          VMOV.F32 s22,s0                ;255
0004f8  eef0ba60          VMOV.F32 s23,s1                ;255
                  |L388.1276|
0004fc  ed9d0b02          VLDR     d0,[sp,#8]            ;260
000500  ec532b10          VMOV     r2,r3,d0              ;260
000504  ec510b10          VMOV     r0,r1,d0              ;260
000508  f7fffffe          BL       __aeabi_dmul
00050c  ec410b11          VMOV     d1,r0,r1              ;260
000510  ec532b1f          VMOV     r2,r3,d15             ;261
000514  ed8d1b0a          VSTR     d1,[sp,#0x28]         ;260
000518  ec510b1f          VMOV     r0,r1,d15             ;261
00051c  f7fffffe          BL       __aeabi_dmul
000520  ec410b11          VMOV     d1,r0,r1              ;261
000524  ec532b1c          VMOV     r2,r3,d12             ;262
000528  ed8d1b04          VSTR     d1,[sp,#0x10]         ;261
00052c  ec510b1c          VMOV     r0,r1,d12             ;262
000530  f7fffffe          BL       __aeabi_dmul
000534  ec410b1e          VMOV     d14,r0,r1             ;262
000538  ec532b1c          VMOV     r2,r3,d12             ;263
00053c  f7fffffe          BL       __aeabi_dmul
000540  ec410b10          VMOV     d0,r0,r1              ;263
000544  ec532b1c          VMOV     r2,r3,d12             ;264
000548  ed8d0b0c          VSTR     d0,[sp,#0x30]         ;263
00054c  f7fffffe          BL       __aeabi_dmul
000550  ec410b10          VMOV     d0,r0,r1              ;264
000554  ec532b1d          VMOV     r2,r3,d13             ;265
000558  ed8d0b5a          VSTR     d0,[sp,#0x168]        ;264
00055c  ec510b1d          VMOV     r0,r1,d13             ;265
000560  f7fffffe          BL       __aeabi_dmul
000564  ec410b19          VMOV     d9,r0,r1              ;265
000568  ec532b1d          VMOV     r2,r3,d13             ;266
00056c  f7fffffe          BL       __aeabi_dmul
000570  ec410b11          VMOV     d1,r0,r1              ;266
000574  ec532b1d          VMOV     r2,r3,d13             ;267
000578  ed8d1b00          VSTR     d1,[sp,#0]            ;266
00057c  f7fffffe          BL       __aeabi_dmul
000580  ec410b11          VMOV     d1,r0,r1              ;267
000584  ec532b18          VMOV     r2,r3,d8              ;268
000588  ed8d1b06          VSTR     d1,[sp,#0x18]         ;267
00058c  ec510b18          VMOV     r0,r1,d8              ;268
000590  f7fffffe          BL       __aeabi_dmul
000594  ec410b1a          VMOV     d10,r0,r1             ;268
000598  ec532b1b          VMOV     r2,r3,d11             ;269
00059c  ec510b1b          VMOV     r0,r1,d11             ;269
0005a0  f7fffffe          BL       __aeabi_dmul
0005a4  ec410b11          VMOV     d1,r0,r1              ;269
0005a8  ed8d1b08          VSTR     d1,[sp,#0x20]         ;269
0005ac  ed9d1b0a          VLDR     d1,[sp,#0x28]         ;274
0005b0  ec532b11          VMOV     r2,r3,d1              ;274
0005b4  ed9d1b06          VLDR     d1,[sp,#0x18]         ;274
0005b8  ec510b11          VMOV     r0,r1,d1              ;274
0005bc  f7fffffe          BL       __aeabi_dmul
0005c0  ec410b11          VMOV     d1,r0,r1              ;274
0005c4  9158              STR      r1,[sp,#0x160]        ;274
0005c6  ed8d1b0e          VSTR     d1,[sp,#0x38]         ;274
0005ca  ed9d1b04          VLDR     d1,[sp,#0x10]         ;274
0005ce  4604              MOV      r4,r0                 ;274
0005d0  ec510b11          VMOV     r0,r1,d1              ;274
0005d4  f7fffffe          BL       __aeabi_dneg
0005d8  f8cd1574          STR      r1,[sp,#0x574]        ;274
0005dc  ed9d1b06          VLDR     d1,[sp,#0x18]         ;274
0005e0  4680              MOV      r8,r0                 ;274
0005e2  ec532b11          VMOV     r2,r3,d1              ;274
0005e6  f7fffffe          BL       __aeabi_dmul
0005ea  ed9d1b0e          VLDR     d1,[sp,#0x38]         ;274
0005ee  ec532b11          VMOV     r2,r3,d1              ;274
0005f2  f7fffffe          BL       __aeabi_dsub
0005f6  ed9d1b06          VLDR     d1,[sp,#0x18]         ;274
0005fa  ec532b11          VMOV     r2,r3,d1              ;274
0005fe  f7fffffe          BL       __aeabi_dsub
000602  ed9f0ba5          VLDR     d0,|L388.2200|
000606  f8cd14e4          STR      r1,[sp,#0x4e4]        ;278
00060a  f8cd04e0          STR      r0,[sp,#0x4e0]        ;278
00060e  ec532b10          VMOV     r2,r3,d0              ;278
000612  ec510b1f          VMOV     r0,r1,d15             ;278
000616  f7fffffe          BL       __aeabi_dmul
00061a  f8cd1570          STR      r1,[sp,#0x570]        ;278
00061e  ed9d1b00          VLDR     d1,[sp,#0]            ;278
000622  4681              MOV      r9,r0                 ;278
000624  ec532b11          VMOV     r2,r3,d1              ;278
000628  f7fffffe          BL       __aeabi_dmul
00062c  ed9d1b02          VLDR     d1,[sp,#8]            ;278
000630  ec532b11          VMOV     r2,r3,d1              ;278
000634  f7fffffe          BL       __aeabi_dmul
000638  ec532b18          VMOV     r2,r3,d8              ;278
00063c  f7fffffe          BL       __aeabi_dmul
000640  ec410b11          VMOV     d1,r0,r1              ;278
000644  ed8d1b10          VSTR     d1,[sp,#0x40]         ;278
000648  ed9f0b93          VLDR     d0,|L388.2200|
00064c  ed9d1b04          VLDR     d1,[sp,#0x10]         ;278
000650  ec532b10          VMOV     r2,r3,d0              ;278
000654  ec510b11          VMOV     r0,r1,d1              ;278
000658  f7fffffe          BL       __aeabi_dmul
00065c  f8cd156c          STR      r1,[sp,#0x56c]        ;278
000660  ed9d1b00          VLDR     d1,[sp,#0]            ;278
000664  4606              MOV      r6,r0                 ;278
000666  ec532b11          VMOV     r2,r3,d1              ;278
00066a  f7fffffe          BL       __aeabi_dmul
00066e  ec532b18          VMOV     r2,r3,d8              ;278
000672  f7fffffe          BL       __aeabi_dmul
000676  ec532b1b          VMOV     r2,r3,d11             ;278
00067a  f7fffffe          BL       __aeabi_dmul
00067e  ec410b11          VMOV     d1,r0,r1              ;278
000682  ed8d1b0e          VSTR     d1,[sp,#0x38]         ;278
000686  ed9f0b84          VLDR     d0,|L388.2200|
00068a  ed9d1b00          VLDR     d1,[sp,#0]            ;278
00068e  ec532b10          VMOV     r2,r3,d0              ;278
000692  ec510b11          VMOV     r0,r1,d1              ;278
000696  f7fffffe          BL       __aeabi_dmul
00069a  ec532b18          VMOV     r2,r3,d8              ;278
00069e  f7fffffe          BL       __aeabi_dmul
0006a2  ec532b1b          VMOV     r2,r3,d11             ;278
0006a6  f7fffffe          BL       __aeabi_dmul
0006aa  ed9d1b0e          VLDR     d1,[sp,#0x38]         ;278
0006ae  ec532b11          VMOV     r2,r3,d1              ;278
0006b2  f7fffffe          BL       __aeabi_dadd
0006b6  ed9d1b10          VLDR     d1,[sp,#0x40]         ;278
0006ba  ec532b11          VMOV     r2,r3,d1              ;278
0006be  f7fffffe          BL       __aeabi_dsub
0006c2  ed9f0b75          VLDR     d0,|L388.2200|
0006c6  f8cd14ec          STR      r1,[sp,#0x4ec]        ;282
0006ca  f8cd04e8          STR      r0,[sp,#0x4e8]        ;282
0006ce  ec532b10          VMOV     r2,r3,d0              ;282
0006d2  ec510b1e          VMOV     r0,r1,d14             ;282
0006d6  f7fffffe          BL       __aeabi_dmul
0006da  4607              MOV      r7,r0                 ;282
0006dc  ec532b19          VMOV     r2,r3,d9              ;282
0006e0  f8cd1578          STR      r1,[sp,#0x578]        ;282
0006e4  f7fffffe          BL       __aeabi_dmul
0006e8  ec410b11          VMOV     d1,r0,r1              ;282
0006ec  ec532b1a          VMOV     r2,r3,d10             ;282
0006f0  ed8d1b56          VSTR     d1,[sp,#0x158]        ;282
0006f4  ec510b19          VMOV     r0,r1,d9              ;282
0006f8  f7fffffe          BL       __aeabi_dmul
0006fc  ed9d1b08          VLDR     d1,[sp,#0x20]         ;282
000700  ec532b11          VMOV     r2,r3,d1              ;282
000704  f7fffffe          BL       __aeabi_dmul
000708  ec410b11          VMOV     d1,r0,r1              ;282
00070c  ed8d1b54          VSTR     d1,[sp,#0x150]        ;282
000710  ed9f0b61          VLDR     d0,|L388.2200|
000714  ec510b1c          VMOV     r0,r1,d12             ;282
000718  ec532b10          VMOV     r2,r3,d0              ;282
00071c  f7fffffe          BL       __aeabi_dmul
000720  4605              MOV      r5,r0                 ;282
000722  f8cd157c          STR      r1,[sp,#0x57c]        ;282
000726  ec532b19          VMOV     r2,r3,d9              ;282
00072a  910e              STR      r1,[sp,#0x38]         ;282
00072c  f7fffffe          BL       __aeabi_dmul
000730  ed9d1b04          VLDR     d1,[sp,#0x10]         ;282
000734  ec532b11          VMOV     r2,r3,d1              ;282
000738  f7fffffe          BL       __aeabi_dmul
00073c  ec532b18          VMOV     r2,r3,d8              ;282
000740  f7fffffe          BL       __aeabi_dmul
000744  ec410b11          VMOV     d1,r0,r1              ;282
000748  ec532b1e          VMOV     r2,r3,d14             ;282
00074c  ed8d1b52          VSTR     d1,[sp,#0x148]        ;282
000750  ec510b19          VMOV     r0,r1,d9              ;282
000754  f7fffffe          BL       __aeabi_dmul
000758  ed9d1b0a          VLDR     d1,[sp,#0x28]         ;282
00075c  ec532b11          VMOV     r2,r3,d1              ;282
000760  f7fffffe          BL       __aeabi_dmul
000764  ec410b11          VMOV     d1,r0,r1              ;282
000768  ed8d1b14          VSTR     d1,[sp,#0x50]         ;282
00076c  ed9f0b4a          VLDR     d0,|L388.2200|
000770  ec532b10          VMOV     r2,r3,d0              ;282
000774  ed9d0b02          VLDR     d0,[sp,#8]            ;282
000778  ec510b10          VMOV     r0,r1,d0              ;282
00077c  f7fffffe          BL       __aeabi_dmul
000780  ec532b1f          VMOV     r2,r3,d15             ;282
000784  f7fffffe          BL       __aeabi_dmul
000788  ec532b1c          VMOV     r2,r3,d12             ;282
00078c  f7fffffe          BL       __aeabi_dmul
000790  ec532b19          VMOV     r2,r3,d9              ;282
000794  f7fffffe          BL       __aeabi_dmul
000798  ec532b18          VMOV     r2,r3,d8              ;282
00079c  f7fffffe          BL       __aeabi_dmul
0007a0  ec532b1b          VMOV     r2,r3,d11             ;282
0007a4  f7fffffe          BL       __aeabi_dmul
0007a8  ec410b11          VMOV     d1,r0,r1              ;282
0007ac  ec532b19          VMOV     r2,r3,d9              ;282
0007b0  ed8d1b12          VSTR     d1,[sp,#0x48]         ;282
0007b4  990e              LDR      r1,[sp,#0x38]         ;282
0007b6  ec415b10          VMOV     d0,r5,r1              ;282
0007ba  ec510b10          VMOV     r0,r1,d0              ;282
0007be  f7fffffe          BL       __aeabi_dmul
0007c2  ec532b18          VMOV     r2,r3,d8              ;282
0007c6  f7fffffe          BL       __aeabi_dmul
0007ca  ec410b11          VMOV     d1,r0,r1              ;282
0007ce  ed8d1b10          VSTR     d1,[sp,#0x40]         ;282
0007d2  9958              LDR      r1,[sp,#0x160]        ;282
0007d4  ec414b11          VMOV     d1,r4,r1              ;282
0007d8  ed8d1b0e          VSTR     d1,[sp,#0x38]         ;282
0007dc  ed9d1b06          VLDR     d1,[sp,#0x18]         ;282
0007e0  ec532b11          VMOV     r2,r3,d1              ;282
0007e4  ed9d1b04          VLDR     d1,[sp,#0x10]         ;282
0007e8  ec510b11          VMOV     r0,r1,d1              ;282
0007ec  f7fffffe          BL       __aeabi_dmul
0007f0  ec410b11          VMOV     d1,r0,r1              ;282
0007f4  ec532b19          VMOV     r2,r3,d9              ;282
0007f8  ed8d1b06          VSTR     d1,[sp,#0x18]         ;282
0007fc  ed9d1b04          VLDR     d1,[sp,#0x10]         ;282
000800  ec510b11          VMOV     r0,r1,d1              ;282
000804  f7fffffe          BL       __aeabi_dmul
000808  4604              MOV      r4,r0                 ;282
00080a  f8cd1568          STR      r1,[sp,#0x568]        ;282
00080e  ec532b1a          VMOV     r2,r3,d10             ;282
000812  9104              STR      r1,[sp,#0x10]         ;282
000814  f7fffffe          BL       __aeabi_dmul
000818  ec410b11          VMOV     d1,r0,r1              ;282
00081c  ec532b1a          VMOV     r2,r3,d10             ;282
000820  ed8d1b58          VSTR     d1,[sp,#0x160]        ;282
000824  9904              LDR      r1,[sp,#0x10]         ;282
000826  ec414b10          VMOV     d0,r4,r1              ;282
00082a  ec510b10          VMOV     r0,r1,d0              ;282
00082e  f7fffffe          BL       __aeabi_dmul
000832  ed9d1b08          VLDR     d1,[sp,#0x20]         ;282
000836  ec532b11          VMOV     r2,r3,d1              ;282
00083a  f7fffffe          BL       __aeabi_dmul
00083e  ec410b11          VMOV     d1,r0,r1              ;282
000842  ec532b19          VMOV     r2,r3,d9              ;282
000846  ed8d1b04          VSTR     d1,[sp,#0x10]         ;282
00084a  f8dd1574          LDR      r1,[sp,#0x574]        ;282
00084e  ec418b10          VMOV     d0,r8,r1              ;282
000852  ec510b10          VMOV     r0,r1,d0              ;282
000856  f7fffffe          BL       __aeabi_dmul
00085a  ec532b1e          VMOV     r2,r3,d14             ;282
00085e  f7fffffe          BL       __aeabi_dmul
000862  ed9d1b04          VLDR     d1,[sp,#0x10]         ;282
000866  ec532b11          VMOV     r2,r3,d1              ;282
00086a  f7fffffe          BL       __aeabi_dsub
00086e  ed9d1b58          VLDR     d1,[sp,#0x160]        ;282
000872  ec532b11          VMOV     r2,r3,d1              ;282
000876  f7fffffe          BL       __aeabi_dsub
00087a  ed9d1b06          VLDR     d1,[sp,#0x18]         ;282
00087e  e00f              B        |L388.2208|
                  |L388.2176|
000880  00000000          DCFD     0x3ff0000000000000 ; 1
000884  3ff00000
                  |L388.2184|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
                  |L388.2188|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_3 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 5)
                  |L388.2192|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
                          DCD      0x00000000
                  |L388.2200|
000898  00000000          DCFD     0x4000000000000000 ; 2
00089c  40000000
                  |L388.2208|
0008a0  ec532b11          VMOV     r2,r3,d1              ;282
0008a4  f7fffffe          BL       __aeabi_dadd
0008a8  ed9d1b0e          VLDR     d1,[sp,#0x38]         ;282
0008ac  ec532b11          VMOV     r2,r3,d1              ;282
0008b0  f7fffffe          BL       __aeabi_dadd
0008b4  ed9d1b10          VLDR     d1,[sp,#0x40]         ;282
0008b8  ec532b11          VMOV     r2,r3,d1              ;282
0008bc  f7fffffe          BL       __aeabi_dadd
0008c0  ed9d1b12          VLDR     d1,[sp,#0x48]         ;282
0008c4  ec532b11          VMOV     r2,r3,d1              ;282
0008c8  f7fffffe          BL       __aeabi_dadd
0008cc  ed9d1b14          VLDR     d1,[sp,#0x50]         ;282
0008d0  ec532b11          VMOV     r2,r3,d1              ;282
0008d4  f7fffffe          BL       __aeabi_dsub
0008d8  ed9d1b52          VLDR     d1,[sp,#0x148]        ;282
0008dc  ec532b11          VMOV     r2,r3,d1              ;282
0008e0  f7fffffe          BL       __aeabi_dadd
0008e4  ed9d1b54          VLDR     d1,[sp,#0x150]        ;282
0008e8  ec532b11          VMOV     r2,r3,d1              ;282
0008ec  f7fffffe          BL       __aeabi_dsub
0008f0  ed9d1b56          VLDR     d1,[sp,#0x158]        ;282
0008f4  ec532b11          VMOV     r2,r3,d1              ;282
0008f8  f7fffffe          BL       __aeabi_dsub
0008fc  f8cd14f4          STR      r1,[sp,#0x4f4]        ;282
000900  f8cd04f0          STR      r0,[sp,#0x4f0]        ;282
000904  f8dd157c          LDR      r1,[sp,#0x57c]        ;282
000908  ec532b1d          VMOV     r2,r3,d13             ;294
00090c  ec415b10          VMOV     d0,r5,r1              ;282
000910  ec510b10          VMOV     r0,r1,d0              ;294
000914  f7fffffe          BL       __aeabi_dmul
000918  ec532b1a          VMOV     r2,r3,d10             ;294
00091c  f7fffffe          BL       __aeabi_dmul
000920  ec532b1b          VMOV     r2,r3,d11             ;294
000924  f7fffffe          BL       __aeabi_dmul
000928  ec410b11          VMOV     d1,r0,r1              ;294
00092c  ed8d1b06          VSTR     d1,[sp,#0x18]         ;294
000930  f8dd156c          LDR      r1,[sp,#0x56c]        ;294
000934  ed9d1b00          VLDR     d1,[sp,#0]            ;294
000938  ec416b10          VMOV     d0,r6,r1              ;294
00093c  ec532b11          VMOV     r2,r3,d1              ;294
000940  ec510b10          VMOV     r0,r1,d0              ;294
000944  f7fffffe          BL       __aeabi_dmul
000948  ec532b18          VMOV     r2,r3,d8              ;294
00094c  f7fffffe          BL       __aeabi_dmul
000950  ec532b1b          VMOV     r2,r3,d11             ;294
000954  f7fffffe          BL       __aeabi_dmul
000958  ec410b11          VMOV     d1,r0,r1              ;294
00095c  ed8d1b04          VSTR     d1,[sp,#0x10]         ;294
000960  f8dd1570          LDR      r1,[sp,#0x570]        ;294
000964  ed9d1b00          VLDR     d1,[sp,#0]            ;294
000968  ec419b10          VMOV     d0,r9,r1              ;294
00096c  ec532b11          VMOV     r2,r3,d1              ;294
000970  ec510b10          VMOV     r0,r1,d0              ;294
000974  f7fffffe          BL       __aeabi_dmul
000978  ed9d1b02          VLDR     d1,[sp,#8]            ;294
00097c  ec532b11          VMOV     r2,r3,d1              ;294
000980  f7fffffe          BL       __aeabi_dmul
000984  ec532b18          VMOV     r2,r3,d8              ;294
000988  f7fffffe          BL       __aeabi_dmul
00098c  ec410b11          VMOV     d1,r0,r1              ;294
000990  ec532b1d          VMOV     r2,r3,d13             ;294
000994  ed8d1b00          VSTR     d1,[sp,#0]            ;294
000998  f8dd1578          LDR      r1,[sp,#0x578]        ;294
00099c  ec417b10          VMOV     d0,r7,r1              ;294
0009a0  ec510b10          VMOV     r0,r1,d0              ;294
0009a4  f7fffffe          BL       __aeabi_dmul
0009a8  ec532b18          VMOV     r2,r3,d8              ;294
0009ac  f7fffffe          BL       __aeabi_dmul
0009b0  ec532b1b          VMOV     r2,r3,d11             ;294
0009b4  f7fffffe          BL       __aeabi_dmul
0009b8  ed9d1b00          VLDR     d1,[sp,#0]            ;294
0009bc  ec532b11          VMOV     r2,r3,d1              ;294
0009c0  f7fffffe          BL       __aeabi_dadd
0009c4  ed9d1b04          VLDR     d1,[sp,#0x10]         ;294
0009c8  ec532b11          VMOV     r2,r3,d1              ;294
0009cc  f7fffffe          BL       __aeabi_dsub
0009d0  ed9d1b06          VLDR     d1,[sp,#0x18]         ;294
0009d4  ec532b11          VMOV     r2,r3,d1              ;294
0009d8  f7fffffe          BL       __aeabi_dsub
0009dc  f8cd14fc          STR      r1,[sp,#0x4fc]        ;294
0009e0  f8dd1568          LDR      r1,[sp,#0x568]        ;294
0009e4  f8cd04f8          STR      r0,[sp,#0x4f8]        ;294
0009e8  ec414b10          VMOV     d0,r4,r1              ;294
0009ec  ec532b1a          VMOV     r2,r3,d10             ;299
0009f0  ec510b10          VMOV     r0,r1,d0              ;299
0009f4  f7fffffe          BL       __aeabi_dmul
0009f8  ed9d1b08          VLDR     d1,[sp,#0x20]         ;299
0009fc  ec532b11          VMOV     r2,r3,d1              ;299
000a00  f7fffffe          BL       __aeabi_dmul
000a04  ec410b11          VMOV     d1,r0,r1              ;299
000a08  ec510b19          VMOV     r0,r1,d9              ;299
000a0c  ed8d1b00          VSTR     d1,[sp,#0]            ;299
000a10  ed9d0b0a          VLDR     d0,[sp,#0x28]         ;299
000a14  ec532b10          VMOV     r2,r3,d0              ;299
000a18  f7fffffe          BL       __aeabi_dmul
000a1c  ec532b1e          VMOV     r2,r3,d14             ;299
000a20  f7fffffe          BL       __aeabi_dmul
000a24  ec410b11          VMOV     d1,r0,r1              ;299
000a28  ec532b19          VMOV     r2,r3,d9              ;299
000a2c  ed8d1b0a          VSTR     d1,[sp,#0x28]         ;299
000a30  f8dd156c          LDR      r1,[sp,#0x56c]        ;299
000a34  ec416b10          VMOV     d0,r6,r1              ;299
000a38  ec510b10          VMOV     r0,r1,d0              ;299
000a3c  f7fffffe          BL       __aeabi_dmul
000a40  ec532b1c          VMOV     r2,r3,d12             ;299
000a44  f7fffffe          BL       __aeabi_dmul
000a48  ec532b18          VMOV     r2,r3,d8              ;299
000a4c  f7fffffe          BL       __aeabi_dmul
000a50  ec410b11          VMOV     d1,r0,r1              ;299
000a54  ec532b1e          VMOV     r2,r3,d14             ;299
000a58  ed8d1b08          VSTR     d1,[sp,#0x20]         ;299
000a5c  f8dd1568          LDR      r1,[sp,#0x568]        ;299
000a60  ec414b10          VMOV     d0,r4,r1              ;299
000a64  ec510b10          VMOV     r0,r1,d0              ;299
000a68  f7fffffe          BL       __aeabi_dmul
000a6c  ec410b11          VMOV     d1,r0,r1              ;299
000a70  ec532b1a          VMOV     r2,r3,d10             ;299
000a74  ed8d1b06          VSTR     d1,[sp,#0x18]         ;299
000a78  ec510b1e          VMOV     r0,r1,d14             ;299
000a7c  f7fffffe          BL       __aeabi_dmul
000a80  ec410b11          VMOV     d1,r0,r1              ;299
000a84  ed8d1b04          VSTR     d1,[sp,#0x10]         ;299
000a88  ed1f0b7d          VLDR     d0,|L388.2200|
000a8c  ec532b10          VMOV     r2,r3,d0              ;299
000a90  ed9d0b0c          VLDR     d0,[sp,#0x30]         ;299
000a94  ec510b10          VMOV     r0,r1,d0              ;299
000a98  f7fffffe          BL       __aeabi_dmul
000a9c  ec532b18          VMOV     r2,r3,d8              ;299
000aa0  f7fffffe          BL       __aeabi_dmul
000aa4  ec410b1e          VMOV     d14,r0,r1             ;299
000aa8  f8dd1568          LDR      r1,[sp,#0x568]        ;299
000aac  ec532b1a          VMOV     r2,r3,d10             ;299
000ab0  ec414b10          VMOV     d0,r4,r1              ;299
000ab4  ec510b10          VMOV     r0,r1,d0              ;299
000ab8  f7fffffe          BL       __aeabi_dmul
000abc  ec410b1a          VMOV     d10,r0,r1             ;299
000ac0  ed9f0bfd          VLDR     d0,|L388.3768|
000ac4  ec510b1f          VMOV     r0,r1,d15             ;299
000ac8  ec532b10          VMOV     r2,r3,d0              ;299
000acc  f7fffffe          BL       __aeabi_dmul
000ad0  ec532b19          VMOV     r2,r3,d9              ;299
000ad4  f7fffffe          BL       __aeabi_dmul
000ad8  ed9d1b02          VLDR     d1,[sp,#8]            ;299
000adc  ec532b11          VMOV     r2,r3,d1              ;299
000ae0  f7fffffe          BL       __aeabi_dmul
000ae4  ec532b1c          VMOV     r2,r3,d12             ;299
000ae8  f7fffffe          BL       __aeabi_dmul
000aec  ec532b18          VMOV     r2,r3,d8              ;299
000af0  f7fffffe          BL       __aeabi_dmul
000af4  ec532b1b          VMOV     r2,r3,d11             ;299
000af8  f7fffffe          BL       __aeabi_dmul
000afc  ec532b1a          VMOV     r2,r3,d10             ;299
000b00  f7fffffe          BL       __aeabi_dadd
000b04  ec532b1e          VMOV     r2,r3,d14             ;299
000b08  f7fffffe          BL       __aeabi_dadd
000b0c  ed9d1b04          VLDR     d1,[sp,#0x10]         ;299
000b10  ec532b11          VMOV     r2,r3,d1              ;299
000b14  f7fffffe          BL       __aeabi_dsub
000b18  ed9d1b06          VLDR     d1,[sp,#0x18]         ;299
000b1c  ec532b11          VMOV     r2,r3,d1              ;299
000b20  f7fffffe          BL       __aeabi_dadd
000b24  ed9d1b5a          VLDR     d1,[sp,#0x168]        ;299
000b28  ec532b11          VMOV     r2,r3,d1              ;299
000b2c  f7fffffe          BL       __aeabi_dsub
000b30  ed9d1b08          VLDR     d1,[sp,#0x20]         ;299
000b34  ec532b11          VMOV     r2,r3,d1              ;299
000b38  f7fffffe          BL       __aeabi_dsub
000b3c  ed9d1b0a          VLDR     d1,[sp,#0x28]         ;299
000b40  ec532b11          VMOV     r2,r3,d1              ;299
000b44  f7fffffe          BL       __aeabi_dadd
000b48  ed9d1b00          VLDR     d1,[sp,#0]            ;299
000b4c  ec532b11          VMOV     r2,r3,d1              ;299
000b50  f7fffffe          BL       __aeabi_dadd
000b54  f8cd1504          STR      r1,[sp,#0x504]        ;311
000b58  f8cd0500          STR      r0,[sp,#0x500]        ;311
000b5c  f50d61a9          ADD      r1,sp,#0x548          ;311
000b60  f50d609c          ADD      r0,sp,#0x4e0          ;311
000b64  f7fffffe          BL       _ZN4Anki8Embedded3P3P12solveQuarticIdEENS_6ResultEPKT_PS4_ ; Anki::Embedded::P3P::solveQuartic<double>(const T1*, T1*)
000b68  f8dd0628          LDR      r0,[sp,#0x628]        ;317
000b6c  f8cd0598          STR      r0,[sp,#0x598]        ;317
000b70  f8dd0630          LDR      r0,[sp,#0x630]        ;317
000b74  f8cd059c          STR      r0,[sp,#0x59c]        ;317
000b78  f8dd0638          LDR      r0,[sp,#0x638]        ;317
000b7c  f8cd05a0          STR      r0,[sp,#0x5a0]        ;317
000b80  f8dd0640          LDR      r0,[sp,#0x640]        ;317
000b84  f8cd05a4          STR      r0,[sp,#0x5a4]        ;318
000b88  f8dd062c          LDR      r0,[sp,#0x62c]        ;318
000b8c  f8cd05a8          STR      r0,[sp,#0x5a8]        ;318
000b90  f8dd0634          LDR      r0,[sp,#0x634]        ;318
000b94  f8cd05ac          STR      r0,[sp,#0x5ac]        ;318
000b98  f8dd0644          LDR      r0,[sp,#0x644]        ;318
000b9c  2300              MOVS     r3,#0                 ;320
000b9e  f8cd05b4          STR      r0,[sp,#0x5b4]        ;320
000ba2  f8cdb5b0          STR      r11,[sp,#0x5b0]       ;318
000ba6  461a              MOV      r2,r3                 ;320
000ba8  2101              MOVS     r1,#1                 ;320
000baa  f20d5044          ADD      r0,sp,#0x544          ;320
000bae  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000bb2  6800              LDR      r0,[r0,#0]            ;320
000bb4  2203              MOVS     r2,#3                 ;320
000bb6  9000              STR      r0,[sp,#0]            ;320
000bb8  f20d4384          ADD      r3,sp,#0x484          ;320
000bbc  4611              MOV      r1,r2                 ;320
000bbe  f50d60a1          ADD      r0,sp,#0x508          ;320
000bc2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000bc6  f50d60a1          ADD      r0,sp,#0x508          ;321
000bca  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
000bce  2800              CMP      r0,#0                 ;321
000bd0  f000828a          BEQ.W    |L388.4328|
000bd4  f50d61a1          ADD      r1,sp,#0x508          ;324
000bd8  f20d40b4          ADD      r0,sp,#0x4b4          ;324
000bdc  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000be0  2800              CMP      r0,#0                 ;324
000be2  f47fab3b          BNE      |L388.604|
000be6  2300              MOVS     r3,#0                 ;328
000be8  461a              MOV      r2,r3                 ;328
000bea  2101              MOVS     r1,#1                 ;328
000bec  f20d5044          ADD      r0,sp,#0x544          ;328
000bf0  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000bf4  6800              LDR      r0,[r0,#0]            ;328
000bf6  2203              MOVS     r2,#3                 ;328
000bf8  9000              STR      r0,[sp,#0]            ;328
000bfa  f20d4384          ADD      r3,sp,#0x484          ;328
000bfe  4611              MOV      r1,r2                 ;328
000c00  f20d501c          ADD      r0,sp,#0x51c          ;328
000c04  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000c08  f20d501c          ADD      r0,sp,#0x51c          ;329
000c0c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
000c10  2800              CMP      r0,#0                 ;329
000c12  f0008277          BEQ.W    |L388.4356|
000c16  f20d511c          ADD      r1,sp,#0x51c          ;332
000c1a  f50d608e          ADD      r0,sp,#0x470          ;332
000c1e  f7fffffe          BL       _ZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EE ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000c22  2800              CMP      r0,#0                 ;332
000c24  f47fab1a          BNE      |L388.604|
000c28  2300              MOVS     r3,#0                 ;336
000c2a  461a              MOV      r2,r3                 ;336
000c2c  2101              MOVS     r1,#1                 ;336
000c2e  f20d5044          ADD      r0,sp,#0x544          ;336
000c32  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000c36  6800              LDR      r0,[r0,#0]            ;336
000c38  2203              MOVS     r2,#3                 ;336
000c3a  9000              STR      r0,[sp,#0]            ;336
000c3c  f20d4384          ADD      r3,sp,#0x484          ;336
000c40  4611              MOV      r1,r2                 ;336
000c42  f50d6094          ADD      r0,sp,#0x4a0          ;336
000c46  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000c4a  f50d6094          ADD      r0,sp,#0x4a0          ;337
000c4e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
000c52  2800              CMP      r0,#0                 ;337
000c54  f0008264          BEQ.W    |L388.4384|
000c58  2300              MOVS     r3,#0                 ;340
000c5a  461a              MOV      r2,r3                 ;340
000c5c  2101              MOVS     r1,#1                 ;340
000c5e  f20d5044          ADD      r0,sp,#0x544          ;340
000c62  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000c66  6800              LDR      r0,[r0,#0]            ;340
000c68  2203              MOVS     r2,#3                 ;340
000c6a  9000              STR      r0,[sp,#0]            ;340
000c6c  f20d4384          ADD      r3,sp,#0x484          ;340
000c70  4611              MOV      r1,r2                 ;340
000c72  f50d60a6          ADD      r0,sp,#0x530          ;340
000c76  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000c7a  f50d60a6          ADD      r0,sp,#0x530          ;341
000c7e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
000c82  2800              CMP      r0,#0                 ;341
000c84  f000825a          BEQ.W    |L388.4412|
000c88  488d              LDR      r0,|L388.3776|
000c8a  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000c8e  2400              MOVS     r4,#0                 ;347
000c90  f50d6ba9          ADD      r11,sp,#0x548         ;310
000c94  ec532b1b          VMOV     r2,r3,d11             ;310
000c98  ec510b18          VMOV     r0,r1,d8              ;310
000c9c  f7fffffe          BL       __aeabi_dmul
000ca0  f8cd15b8          STR      r1,[sp,#0x5b8]        ;244
000ca4  905b              STR      r0,[sp,#0x16c]        ;244
000ca6  ed9d0b02          VLDR     d0,[sp,#8]            ;244
000caa  f50d6ab3          ADD      r10,sp,#0x598         ;317
000cae  ec510b10          VMOV     r0,r1,d0              ;244
000cb2  f7fffffe          BL       __aeabi_dneg
000cb6  e9cd0158          STRD     r0,r1,[sp,#0x160]     ;351
                  |L388.3258|
000cba  4882              LDR      r0,|L388.3780|
000cbc  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000cc0  e9dd0158          LDRD     r0,r1,[sp,#0x160]     ;349
000cc4  ec410b10          VMOV     d0,r0,r1              ;349
000cc8  eb0b00c4          ADD      r0,r11,r4,LSL #3      ;351
000ccc  ed90eb00          VLDR     d14,[r0,#0]           ;351
000cd0  ec510b10          VMOV     r0,r1,d0              ;351
000cd4  ec532b1e          VMOV     r2,r3,d14             ;351
000cd8  f7fffffe          BL       __aeabi_dmul
000cdc  ec532b1d          VMOV     r2,r3,d13             ;351
000ce0  f7fffffe          BL       __aeabi_dmul
000ce4  ec532b1f          VMOV     r2,r3,d15             ;351
000ce8  f7fffffe          BL       __aeabi_ddiv
000cec  ec532b1c          VMOV     r2,r3,d12             ;351
000cf0  f7fffffe          BL       __aeabi_dadd
000cf4  ec532b18          VMOV     r2,r3,d8              ;351
000cf8  f7fffffe          BL       __aeabi_dsub
000cfc  ec410b11          VMOV     d1,r0,r1              ;351
000d00  ec532b1d          VMOV     r2,r3,d13             ;351
000d04  ed8d1b12          VSTR     d1,[sp,#0x48]         ;351
000d08  f8dd15b8          LDR      r1,[sp,#0x5b8]        ;351
000d0c  985b              LDR      r0,[sp,#0x16c]        ;351
000d0e  ec410b19          VMOV     d9,r0,r1              ;351
000d12  ec510b1e          VMOV     r0,r1,d14             ;351
000d16  f7fffffe          BL       __aeabi_dmul
000d1a  ec410b1a          VMOV     d10,r0,r1             ;351
000d1e  e9dd0158          LDRD     r0,r1,[sp,#0x160]     ;351
000d22  ec532b1c          VMOV     r2,r3,d12             ;351
000d26  f7fffffe          BL       __aeabi_dmul
000d2a  ec532b1f          VMOV     r2,r3,d15             ;351
000d2e  f7fffffe          BL       __aeabi_ddiv
000d32  ec532b1a          VMOV     r2,r3,d10             ;351
000d36  f7fffffe          BL       __aeabi_dsub
000d3a  ec532b19          VMOV     r2,r3,d9              ;351
000d3e  f7fffffe          BL       __aeabi_dadd
000d42  ed9d1b12          VLDR     d1,[sp,#0x48]         ;351
000d46  ec532b11          VMOV     r2,r3,d1              ;351
000d4a  f7fffffe          BL       __aeabi_ddiv
000d4e  ec410b10          VMOV     d0,r0,r1              ;351
000d52  ec532b1e          VMOV     r2,r3,d14             ;354
000d56  ed8d0b14          VSTR     d0,[sp,#0x50]         ;351
000d5a  ec510b1e          VMOV     r0,r1,d14             ;354
000d5e  f7fffffe          BL       __aeabi_dmul
000d62  ed9f9b59          VLDR     d9,|L388.3784|
000d66  ec532b19          VMOV     r2,r3,d9              ;354
000d6a  f7fffffe          BL       __aeabi_drsub
000d6e  ec410b10          VMOV     d0,r0,r1              ;354
000d72  f7fffffe          BL       __hardfp_sqrt
000d76  ed8d0b12          VSTR     d0,[sp,#0x48]         ;354
000d7a  ed9d0b14          VLDR     d0,[sp,#0x50]         ;355
000d7e  ec532b10          VMOV     r2,r3,d0              ;355
000d82  ec510b10          VMOV     r0,r1,d0              ;355
000d86  f7fffffe          BL       __aeabi_dmul
000d8a  ec532b19          VMOV     r2,r3,d9              ;355
000d8e  f7fffffe          BL       __aeabi_dadd
000d92  ec410b10          VMOV     d0,r0,r1              ;355
000d96  ec510b19          VMOV     r0,r1,d9              ;355
000d9a  ec532b10          VMOV     r2,r3,d0              ;355
000d9e  f7fffffe          BL       __aeabi_ddiv
000da2  ec410b10          VMOV     d0,r0,r1              ;355
000da6  f7fffffe          BL       __hardfp_sqrt
000daa  eeb0aa40          VMOV.F32 s20,s0                ;355
000dae  eef0aa60          VMOV.F32 s21,s1                ;355
000db2  ec532b1a          VMOV     r2,r3,d10             ;356
000db6  ec510b1a          VMOV     r0,r1,d10             ;356
000dba  f7fffffe          BL       __aeabi_dmul
000dbe  ec532b19          VMOV     r2,r3,d9              ;356
000dc2  f7fffffe          BL       __aeabi_drsub
000dc6  ec410b10          VMOV     d0,r0,r1              ;356
000dca  f7fffffe          BL       __hardfp_sqrt
000dce  eeb09a40          VMOV.F32 s18,s0                ;356
000dd2  eef09a60          VMOV.F32 s19,s1                ;356
000dd6  ed9f0b3e          VLDR     d0,|L388.3792|
000dda  ec532b10          VMOV     r2,r3,d0              ;358
000dde  ed9d0b14          VLDR     d0,[sp,#0x50]         ;358
000de2  ec510b10          VMOV     r0,r1,d0              ;358
000de6  f7fffffe          BL       __aeabi_cdcmple
000dea  d205              BCS      |L388.3576|
000dec  ec510b19          VMOV     r0,r1,d9              ;359
000df0  f7fffffe          BL       __aeabi_dneg
000df4  ec410b19          VMOV     d9,r0,r1              ;359
                  |L388.3576|
000df8  ec510b19          VMOV     r0,r1,d9              ;363
000dfc  f7fffffe          BL       __aeabi_dneg
000e00  f8ddc4a8          LDR      r12,[sp,#0x4a8]       ;363
000e04  f8dd34b0          LDR      r3,[sp,#0x4b0]        ;363
000e08  2200              MOVS     r2,#0                 ;363
000e0a  fb02320c          MLA      r2,r2,r12,r3          ;363
000e0e  460e              MOV      r6,r1                 ;363
000e10  4605              MOV      r5,r0                 ;363
000e12  e9c20100          STRD     r0,r1,[r2,#0]         ;363
000e16  ec510b1a          VMOV     r0,r1,d10             ;363
000e1a  f7fffffe          BL       __aeabi_dneg
000e1e  4688              MOV      r8,r1                 ;363
000e20  ec480b10          VMOV     d0,r0,r8              ;363
000e24  4607              MOV      r7,r0                 ;363
000e26  ec532b1e          VMOV     r2,r3,d14             ;363
000e2a  ec510b10          VMOV     r0,r1,d0              ;363
000e2e  f7fffffe          BL       __aeabi_dmul
000e32  f8ddc4a8          LDR      r12,[sp,#0x4a8]       ;363
000e36  f8dd34b0          LDR      r3,[sp,#0x4b0]        ;363
000e3a  2200              MOVS     r2,#0                 ;363
000e3c  fb02320c          MLA      r2,r2,r12,r3          ;363
000e40  ec487b10          VMOV     d0,r7,r8              ;363
000e44  e9c20102          STRD     r0,r1,[r2,#8]         ;363
000e48  ed9d1b12          VLDR     d1,[sp,#0x48]         ;363
000e4c  ec510b10          VMOV     r0,r1,d0              ;363
000e50  ec532b11          VMOV     r2,r3,d1              ;363
000e54  f7fffffe          BL       __aeabi_dmul
000e58  f8ddc4a8          LDR      r12,[sp,#0x4a8]       ;363
000e5c  f8dd34b0          LDR      r3,[sp,#0x4b0]        ;363
000e60  2200              MOVS     r2,#0                 ;363
000e62  fb02320c          MLA      r2,r2,r12,r3          ;363
000e66  ec465b10          VMOV     d0,r5,r6              ;364
000e6a  e9c20104          STRD     r0,r1,[r2,#0x10]      ;364
000e6e  f8dd24a8          LDR      r2,[sp,#0x4a8]        ;364
000e72  f8dd14b0          LDR      r1,[sp,#0x4b0]        ;364
000e76  2001              MOVS     r0,#1                 ;364
000e78  fb001002          MLA      r0,r0,r2,r1           ;364
000e7c  ec532b1e          VMOV     r2,r3,d14             ;364
000e80  ed80ab00          VSTR     d10,[r0,#0]           ;364
000e84  ec510b10          VMOV     r0,r1,d0              ;364
000e88  f7fffffe          BL       __aeabi_dmul
000e8c  f8ddc4a8          LDR      r12,[sp,#0x4a8]       ;364
000e90  f8dd34b0          LDR      r3,[sp,#0x4b0]        ;364
000e94  2201              MOVS     r2,#1                 ;364
000e96  fb02320c          MLA      r2,r2,r12,r3          ;364
000e9a  ec465b10          VMOV     d0,r5,r6              ;364
000e9e  e9c20102          STRD     r0,r1,[r2,#8]         ;364
000ea2  ed9d1b12          VLDR     d1,[sp,#0x48]         ;364
000ea6  ec510b10          VMOV     r0,r1,d0              ;364
000eaa  ec532b11          VMOV     r2,r3,d1              ;364
000eae  f7fffffe          BL       __aeabi_dmul
000eb2  2201              MOVS     r2,#1                 ;364
000eb4  e010              B        |L388.3800|
000eb6  0000              DCW      0x0000
                  |L388.3768|
000eb8  00000000          DCFD     0xc000000000000000 ; -2
000ebc  c0000000
                  |L388.3776|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
                  |L388.3780|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 10)
                  |L388.3784|
000ec8  00000000          DCFD     0x3ff0000000000000 ; 1
000ecc  3ff00000
                  |L388.3792|
000ed0  00000000          DCFD     0x0000000000000000 ; 0
000ed4  00000000
                  |L388.3800|
000ed8  f8ddc4a8          LDR      r12,[sp,#0x4a8]       ;364
000edc  f8dd34b0          LDR      r3,[sp,#0x4b0]        ;364
000ee0  ed1f0b05          VLDR     d0,|L388.3792|
000ee4  fb02320c          MLA      r2,r2,r12,r3          ;365
000ee8  e9c20104          STRD     r0,r1,[r2,#0x10]      ;365
000eec  f8dd24a8          LDR      r2,[sp,#0x4a8]        ;365
000ef0  f8dd14b0          LDR      r1,[sp,#0x4b0]        ;365
000ef4  2002              MOVS     r0,#2                 ;365
000ef6  fb001002          MLA      r0,r0,r2,r1           ;365
000efa  ed800b00          VSTR     d0,[r0,#0]            ;365
000efe  ed9d0b12          VLDR     d0,[sp,#0x48]         ;365
000f02  ec510b10          VMOV     r0,r1,d0              ;365
000f06  f7fffffe          BL       __aeabi_dneg
000f0a  f8ddc4a8          LDR      r12,[sp,#0x4a8]       ;365
000f0e  f8dd34b0          LDR      r3,[sp,#0x4b0]        ;365
000f12  2202              MOVS     r2,#2                 ;365
000f14  fb02320c          MLA      r2,r2,r12,r3          ;365
000f18  e9c20102          STRD     r0,r1,[r2,#8]         ;365
000f1c  f8dd24a8          LDR      r2,[sp,#0x4a8]        ;365
000f20  f8dd14b0          LDR      r1,[sp,#0x4b0]        ;365
000f24  2002              MOVS     r0,#2                 ;365
000f26  fb001002          MLA      r0,r0,r2,r1           ;365
000f2a  f50d62a6          ADD      r2,sp,#0x530          ;370
000f2e  ed80eb04          VSTR     d14,[r0,#0x10]        ;365
000f32  f50d6194          ADD      r1,sp,#0x4a0          ;370
000f36  f50d60a1          ADD      r0,sp,#0x508          ;370
000f3a  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000f3e  2800              CMP      r0,#0                 ;370
000f40  f47fa98c          BNE      |L388.604|
000f44  f85a2024          LDR      r2,[r10,r4,LSL #2]    ;373
000f48  f50d618e          ADD      r1,sp,#0x470          ;373
000f4c  f50d60a6          ADD      r0,sp,#0x530          ;373
000f50  f7fffffe          BL       _ZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)
000f54  2800              CMP      r0,#0                 ;373
000f56  f47fa981          BNE      |L388.604|
000f5a  ec532b1b          VMOV     r2,r3,d11             ;377
000f5e  ec510b1a          VMOV     r0,r1,d10             ;377
000f62  f7fffffe          BL       __aeabi_dmul
000f66  4681              MOV      r9,r0                 ;377
000f68  ec532b19          VMOV     r2,r3,d9              ;377
000f6c  915a              STR      r1,[sp,#0x168]        ;377
000f6e  f7fffffe          BL       __aeabi_dadd
000f72  ec410b11          VMOV     d1,r0,r1              ;377
000f76  ec532b19          VMOV     r2,r3,d9              ;377
000f7a  ed8d1b14          VSTR     d1,[sp,#0x50]         ;377
000f7e  ec510b18          VMOV     r0,r1,d8              ;377
000f82  f7fffffe          BL       __aeabi_dmul
000f86  ed9d1b14          VLDR     d1,[sp,#0x50]         ;377
000f8a  ec532b11          VMOV     r2,r3,d1              ;377
000f8e  f7fffffe          BL       __aeabi_dmul
000f92  460e              MOV      r6,r1                 ;377
000f94  995a              LDR      r1,[sp,#0x168]        ;377
000f96  4605              MOV      r5,r0                 ;377
000f98  ec419b10          VMOV     d0,r9,r1              ;377
000f9c  ec532b19          VMOV     r2,r3,d9              ;377
000fa0  ec510b10          VMOV     r0,r1,d0              ;377
000fa4  f7fffffe          BL       __aeabi_dadd
000fa8  ec410b11          VMOV     d1,r0,r1              ;377
000fac  ec532b18          VMOV     r2,r3,d8              ;377
000fb0  ed8d1b14          VSTR     d1,[sp,#0x50]         ;377
000fb4  ec510b1e          VMOV     r0,r1,d14             ;377
000fb8  f7fffffe          BL       __aeabi_dmul
000fbc  ec532b1a          VMOV     r2,r3,d10             ;377
000fc0  f7fffffe          BL       __aeabi_dmul
000fc4  ed9d1b14          VLDR     d1,[sp,#0x50]         ;377
000fc8  ec532b11          VMOV     r2,r3,d1              ;377
000fcc  f7fffffe          BL       __aeabi_dmul
000fd0  4688              MOV      r8,r1                 ;377
000fd2  995a              LDR      r1,[sp,#0x168]        ;377
000fd4  4607              MOV      r7,r0                 ;377
000fd6  ec419b10          VMOV     d0,r9,r1              ;377
000fda  ec532b19          VMOV     r2,r3,d9              ;377
000fde  ec510b10          VMOV     r0,r1,d0              ;377
000fe2  f7fffffe          BL       __aeabi_dadd
000fe6  ed9d0b12          VLDR     d0,[sp,#0x48]         ;377
000fea  ec410b19          VMOV     d9,r0,r1              ;377
000fee  ec532b18          VMOV     r2,r3,d8              ;377
000ff2  ec510b10          VMOV     r0,r1,d0              ;377
000ff6  f7fffffe          BL       __aeabi_dmul
000ffa  ec532b1a          VMOV     r2,r3,d10             ;377
000ffe  f7fffffe          BL       __aeabi_dmul
001002  ec532b19          VMOV     r2,r3,d9              ;377
001006  f7fffffe          BL       __aeabi_dmul
00100a  e9cd0156          STRD     r0,r1,[sp,#0x158]     ;377
00100e  a952              ADD      r1,sp,#0x148          ;382
001010  f50d60b5          ADD      r0,sp,#0x5a8          ;382
001014  e88101e0          STM      r1,{r5-r8}            ;382
001018  f8509024          LDR      r9,[r0,r4,LSL #2]     ;382
00101c  aa52              ADD      r2,sp,#0x148          ;382
00101e  f20d511c          ADD      r1,sp,#0x51c          ;382
001022  a806              ADD      r0,sp,#0x18           ;382
001024  f7fffffe          BL       _ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
001028  ed9d1b06          VLDR     d1,[sp,#0x18]         ;382
00102c  ed9d0b16          VLDR     d0,[sp,#0x58]         ;382
001030  ec532b11          VMOV     r2,r3,d1              ;382
001034  ec510b10          VMOV     r0,r1,d0              ;382
001038  f7fffffe          BL       __aeabi_dadd
00103c  ed9d1b08          VLDR     d1,[sp,#0x20]         ;382
001040  ed9d0b18          VLDR     d0,[sp,#0x60]         ;382
001044  4605              MOV      r5,r0                 ;382
001046  460e              MOV      r6,r1                 ;382
001048  ec532b11          VMOV     r2,r3,d1              ;382
00104c  ec510b10          VMOV     r0,r1,d0              ;382
001050  f7fffffe          BL       __aeabi_dadd
001054  ed9d1b0a          VLDR     d1,[sp,#0x28]         ;382
001058  ed9d0b1a          VLDR     d0,[sp,#0x68]         ;382
00105c  4607              MOV      r7,r0                 ;382
00105e  4688              MOV      r8,r1                 ;382
001060  ec532b11          VMOV     r2,r3,d1              ;382
001064  ec510b10          VMOV     r0,r1,d0              ;382
001068  f7fffffe          BL       __aeabi_dadd
00106c  f8cd0578          STR      r0,[sp,#0x578]        ;382
001070  f50d60ad          ADD      r0,sp,#0x568          ;382
001074  f8cd157c          STR      r1,[sp,#0x57c]        ;382
001078  e88001e0          STM      r0,{r5-r8}            ;382
00107c  4602              MOV      r2,r0                 ;382
00107e  f85a1024          LDR      r1,[r10,r4,LSL #2]    ;382
001082  a80c              ADD      r0,sp,#0x30           ;382
001084  f7fffffe          BL       _ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
001088  ed9d0b0c          VLDR     d0,[sp,#0x30]         ;382
00108c  ec510b10          VMOV     r0,r1,d0              ;382
001090  f7fffffe          BL       __aeabi_dneg
001094  ed9d0b0e          VLDR     d0,[sp,#0x38]         ;382
001098  4605              MOV      r5,r0                 ;382
00109a  460e              MOV      r6,r1                 ;382
00109c  ec510b10          VMOV     r0,r1,d0              ;382
0010a0  f7fffffe          BL       __aeabi_dneg
0010a4  ed9d0b10          VLDR     d0,[sp,#0x40]         ;382
0010a8  4607              MOV      r7,r0                 ;382
0010aa  4688              MOV      r8,r1                 ;382
0010ac  ec510b10          VMOV     r0,r1,d0              ;382
0010b0  f7fffffe          BL       __aeabi_dneg
0010b4  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;382
0010b8  e88d01e0          STM      sp,{r5-r8}            ;382
0010bc  ed9d0b00          VLDR     d0,[sp,#0]            ;382
0010c0  4825              LDR      r0,|L388.4440|
0010c2  ed890b00          VSTR     d0,[r9,#0]            ;384
0010c6  ed9d0b02          VLDR     d0,[sp,#8]            ;384
0010ca  ed890b02          VSTR     d0,[r9,#8]            ;384
0010ce  ed9d0b04          VLDR     d0,[sp,#0x10]         ;384
0010d2  ed890b04          VSTR     d0,[r9,#0x10]         ;384
0010d6  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0010da  1c64              ADDS     r4,r4,#1              ;384
0010dc  2c04              CMP      r4,#4                 ;347
0010de  f6ffadec          BLT      |L388.3258|
0010e2  2000              MOVS     r0,#0                 ;387
0010e4  f7ffb8ba          B        |L388.604|
                  |L388.4328|
0010e8  f2401041          MOV      r0,#0x141             ;321
0010ec  e9cda000          STRD     r10,r0,[sp,#0]        ;321
0010f0  4b1a              LDR      r3,|L388.4444|
0010f2  4a1b              LDR      r2,|L388.4448|
0010f4  491b              LDR      r1,|L388.4452|
0010f6  2005              MOVS     r0,#5                 ;321
0010f8  f7fffffe          BL       _Anki_Log
0010fc  f04f7080          MOV      r0,#0x1000000         ;321
001100  f7ffb8ac          B        |L388.604|
                  |L388.4356|
001104  f2401049          MOV      r0,#0x149             ;329
001108  e9cda000          STRD     r10,r0,[sp,#0]        ;329
00110c  4b13              LDR      r3,|L388.4444|
00110e  4a16              LDR      r2,|L388.4456|
001110  4914              LDR      r1,|L388.4452|
001112  2005              MOVS     r0,#5                 ;329
001114  f7fffffe          BL       _Anki_Log
001118  f04f7080          MOV      r0,#0x1000000         ;329
00111c  f7ffb89e          B        |L388.604|
                  |L388.4384|
001120  f2401051          MOV      r0,#0x151             ;337
001124  e9cda000          STRD     r10,r0,[sp,#0]        ;337
001128  4b0c              LDR      r3,|L388.4444|
00112a  4a10              LDR      r2,|L388.4460|
00112c  490d              LDR      r1,|L388.4452|
00112e  2005              MOVS     r0,#5                 ;337
001130  f7fffffe          BL       _Anki_Log
001134  f04f7080          MOV      r0,#0x1000000         ;337
001138  f7ffb890          B        |L388.604|
                  |L388.4412|
00113c  f2401055          MOV      r0,#0x155             ;341
001140  e9cda000          STRD     r10,r0,[sp,#0]        ;341
001144  4b05              LDR      r3,|L388.4444|
001146  4a0a              LDR      r2,|L388.4464|
001148  4906              LDR      r1,|L388.4452|
00114a  2005              MOVS     r0,#5                 ;341
00114c  f7fffffe          BL       _Anki_Log
001150  f04f7080          MOV      r0,#0x1000000         ;341
001154  f7ffb882          B        |L388.604|
;;;389          
                          ENDP

                  |L388.4440|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_8 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 10)
                  |L388.4444|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_2 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
                  |L388.4448|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_4 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 6)
                  |L388.4452|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_0 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
                  |L388.4456|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_5 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 7)
                  |L388.4460|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_6 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 8)
                  |L388.4464|
                          DCD      _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_Es_7 ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 9)

                          AREA ||area_number.389||, COMGROUP=_ZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_, LINKORDER=||t._ZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.389||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_||, COMGROUP=_ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_ PROC ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)
;;;418          template<typename PRECISION>
;;;419          Result computePose(const Quadrilateral<PRECISION>& imgQuad,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;420            const Point3<PRECISION>& worldPoint1,
;;;421            const Point3<PRECISION>& worldPoint2,
;;;422            const Point3<PRECISION>& worldPoint3,
;;;423            const Point3<PRECISION>& worldPoint4,
;;;424            const f32 focalLength_x, const f32 focalLength_y,
;;;425            const f32 camCenter_x,   const f32 camCenter_y,
;;;426            Array<PRECISION>& R, Point3<PRECISION>& T)
;;;427          {
000004  4616              MOV      r6,r2
000006  ed2d8b08          VPUSH    {d8-d11}
00000a  f5ad7d4d          SUB      sp,sp,#0x334
00000e  461d              MOV      r5,r3
000010  460f              MOV      r7,r1
000012  4682              MOV      r10,r0
000014  e9dd4bde          LDRD     r4,r11,[sp,#0x378]
;;;428            Result lastResult = RESULT_OK;
;;;429    
;;;430            // Create a little memory stack for the few 3x3 matrices used below
;;;431            const s32 SCRATCH_BUFFER_SIZE = 512;
;;;432            char buffer[SCRATCH_BUFFER_SIZE];
;;;433            MemoryStack scratch(buffer, SCRATCH_BUFFER_SIZE);
000018  2201              MOVS     r2,#1
00001a  eef08a61          VMOV.F32 s17,s3                ;427
00001e  eeb09a41          VMOV.F32 s18,s2                ;427
000022  eef09a60          VMOV.F32 s19,s1                ;427
000026  eeb0aa40          VMOV.F32 s20,s0                ;427
00002a  2300              MOVS     r3,#0
00002c  4611              MOV      r1,r2
00002e  a8cb              ADD      r0,sp,#0x32c
000030  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000034  6803              LDR      r3,[r0,#0]
000036  f44f7200          MOV      r2,#0x200
00003a  a91e              ADD      r1,sp,#0x78
00003c  a8be              ADD      r0,sp,#0x2f8
00003e  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE ; Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
000042  4658              MOV      r0,r11
000044  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
;;;434    
;;;435            // Output rotation should already be allocated
;;;436            AnkiConditionalErrorAndReturnValue(AreEqualSize(3, 3, R),
000048  f8df83e4          LDR      r8,|L395.1072|
00004c  b158              CBZ      r0,|L395.102|
00004e  2100              MOVS     r1,#0
000050  4658              MOV      r0,r11
000052  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000056  2803              CMP      r0,#3
000058  d105              BNE      |L395.102|
00005a  2101              MOVS     r1,#1
00005c  4658              MOV      r0,r11
00005e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000062  2803              CMP      r0,#3
000064  d011              BEQ      |L395.138|
                  |L395.102|
000066  f44f70da          MOV      r0,#0x1b4
00006a  e9cd8000          STRD     r8,r0,[sp,#0]
00006e  4bf1              LDR      r3,|L395.1076|
000070  4af1              LDR      r2,|L395.1080|
000072  49f2              LDR      r1,|L395.1084|
000074  2005              MOVS     r0,#5
000076  f7fffffe          BL       _Anki_Log
00007a  f04f60a0          MOV      r0,#0x5000000
                  |L395.126|
;;;437              RESULT_FAIL_INVALID_SIZE,
;;;438              "P3P::computePose()",
;;;439              "Rotation matrix should be 3x3.");
;;;440    
;;;441            BeginBenchmark("computePose_init");
;;;442    
;;;443            // Put the four world points into an array so we can loop over them
;;;444            // easily
;;;445            const Point3<PRECISION>* worldPoints[4] = {
;;;446              &worldPoint1, &worldPoint2, &worldPoint3, &worldPoint4
;;;447            };
;;;448    
;;;449            // Turn the three image points into unit vectors corresponding to rays
;;;450            // in the direction of the image points
;;;451            Point3<PRECISION> imgRays[4];
;;;452    
;;;453            const PRECISION invFx = PRECISION(1) / (PRECISION) focalLength_x;
;;;454            const PRECISION invFy = PRECISION(1) / (PRECISION) focalLength_y;
;;;455    
;;;456            for(s32 i_corner = 0; i_corner < 4; ++i_corner)
;;;457            {
;;;458              // Get unit vector pointing along each image ray
;;;459              //   imgRay = K^(-1) * [u v 1]^T
;;;460              imgRays[i_corner].x = invFx * (imgQuad[i_corner].x - camCenter_x);
;;;461              imgRays[i_corner].y = invFy * (imgQuad[i_corner].y - camCenter_y);
;;;462              imgRays[i_corner].z = PRECISION(1);
;;;463    
;;;464              /*
;;;465              CoreTechPrint("point %d (%f, %f) became ray (%f, %f, %f) ",
;;;466              i_corner,
;;;467              imgQuad[i_corner].x, imgQuad[i_corner].y,
;;;468              imgRays[i_corner].x, imgRays[i_corner].y, imgRays[i_corner].z);
;;;469              */
;;;470    
;;;471              imgRays[i_corner].MakeUnitLength();
;;;472    
;;;473              //CoreTechPrint(" which normalized to (%f, %f, %f)\n",
;;;474              //       imgRays[i_corner].x, imgRays[i_corner].y, imgRays[i_corner].z);
;;;475            }
;;;476    
;;;477            // Compute best pose from each subset of three corners, keeping the one
;;;478            // with the lowest error
;;;479            f32 minErrorOuter = FLT_MAX; // std::numeric_limits<float>::max();
;;;480    
;;;481            s32 cornerList[4] = {0, 1, 2, 3};
;;;482    
;;;483            Array<PRECISION> possibleR[4];
;;;484            for(s32 i=0; i<4; ++i) {
;;;485              possibleR[i] = Array<PRECISION>(3,3,scratch);
;;;486              AnkiConditionalErrorAndReturnValue(possibleR[i].IsValid(), RESULT_FAIL_MEMORY,
;;;487                "P3P::computePossiblePoses()",
;;;488                "Invalid possibleR[%d] Matrix, out of memory?", i);
;;;489            }
;;;490    
;;;491            EndBenchmark("computePose_init");
;;;492    
;;;493            Point3<PRECISION> possibleT[4]; // TODO: Kosher to create array of Point3's?
;;;494    
;;;495            for(s32 i=0; i<4; ++i)
;;;496            {
;;;497              BeginBenchmark("computePose_mainLoop");
;;;498    
;;;499              // Use the first corner in the current corner list as the validation
;;;500              // corner. Use the remaining three to estimate the pose.
;;;501              const s32 i_validate = cornerList[0];
;;;502    
;;;503              //CoreTechPrint("Validating with %d, estimating with %d, %d, %d\n",
;;;504              //       i_validate, cornerList[1], cornerList[2], cornerList[3]);
;;;505    
;;;506              if((lastResult = P3P::computePossiblePoses(*worldPoints[cornerList[1]],
;;;507                *worldPoints[cornerList[2]],
;;;508                *worldPoints[cornerList[3]],
;;;509                imgRays[cornerList[1]],
;;;510                imgRays[cornerList[2]],
;;;511                imgRays[cornerList[3]],
;;;512                possibleR[0], possibleT[0],
;;;513                possibleR[1], possibleT[1],
;;;514                possibleR[2], possibleT[2],
;;;515                possibleR[3], possibleT[3])) != RESULT_OK)
;;;516              {
;;;517                return lastResult;
;;;518              }
;;;519    
;;;520              // Find the pose with the least reprojection error for the 4th
;;;521              // validation corner (which was not used in estimating the pose)
;;;522              s32 bestSolution = -1;
;;;523              float minErrorInner = FLT_MAX;
;;;524    
;;;525              for(s32 i_solution=0; i_solution<4; ++i_solution)
;;;526              {
;;;527                // First make sure the target was in front of the camera
;;;528                if(possibleT[i_solution].z > 0)
;;;529                {
;;;530                  // Project the validation world point into the image using each
;;;531                  // possible pose
;;;532                  //   proj = K*[R T]*[worldX; worldY; worldZ; 1]
;;;533                  //   u = projX/projZ;
;;;534                  //   v = projY/projZ;
;;;535                  //
;;;536                  // NOTE: this does not take radial distortion into account, if/when
;;;537                  //       we have that for the camera
;;;538    
;;;539                  Point3<PRECISION> projectedPoint3 = (possibleR[i_solution] * (*worldPoints[i_validate])) + possibleT[i_solution];
;;;540                  projectedPoint3.x = focalLength_x*projectedPoint3.x + camCenter_x*projectedPoint3.z;
;;;541                  projectedPoint3.y = focalLength_y*projectedPoint3.y + camCenter_y*projectedPoint3.z;
;;;542    
;;;543                  AnkiAssert(fabs(projectedPoint3.z) > 1e-6);
;;;544    
;;;545                  Point<PRECISION> projectedPoint(projectedPoint3.x/projectedPoint3.z,
;;;546                    projectedPoint3.y/projectedPoint3.z);
;;;547    
;;;548                  // Compare to the validation image point
;;;549                  float error = projectedPoint.Dist(imgQuad[i_validate]);
;;;550    
;;;551                  //CoreTechPrint("Solution %d reprojection error when validating with corner %d = %f\n",
;;;552                  //        i_solution, i_validate, error);
;;;553    
;;;554                  if(error < minErrorInner) {
;;;555                    minErrorInner = error;
;;;556                    bestSolution = i_solution;
;;;557                  }
;;;558                } // if(possibleT[i_solution].z > 0)
;;;559              } // for each solution
;;;560    
;;;561              AnkiAssert(bestSolution >= 0);
;;;562    
;;;563              //CoreTechPrint("Best solution when validating with corner %d was %d with error %f\n",
;;;564              //       i_validate, bestSolution, minErrorInner);
;;;565    
;;;566              // If the pose using this validation corner is better than the
;;;567              // best so far, keep it
;;;568              if(minErrorInner < minErrorOuter) {
;;;569                minErrorOuter = minErrorInner;
;;;570                R.Set(possibleR[bestSolution]); // Don't use =, which is shallow copy!!
;;;571                T = possibleT[bestSolution];
;;;572              }
;;;573    
;;;574              if(i<3) {
;;;575                // Rearrange corner list for next loop, to get a different
;;;576                // validation corner each time
;;;577                Swap(cornerList[0], cornerList[i+1]);
;;;578              }
;;;579    
;;;580              EndBenchmark("computePose_mainLoop");
;;;581            } // for each validation corner
;;;582    
;;;583            //CoreTechPrint("Best solution had error of %f\n", minErrorOuter);
;;;584    
;;;585            return RESULT_OK;
;;;586          } // computePose()
00007e  f50d7d4d          ADD      sp,sp,#0x334
000082  ecbd8b08          VPOP     {d8-d11}
000086  e8bd8ff0          POP      {r4-r11,pc}
                  |L395.138|
00008a  48ed              LDR      r0,|L395.1088|
00008c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000090  e9cd54bc          STRD     r5,r4,[sp,#0x2f0]     ;451
000094  e9cd76ba          STRD     r7,r6,[sp,#0x2e8]     ;451
000098  2304              MOVS     r3,#4                 ;451
00009a  220c              MOVS     r2,#0xc               ;451
00009c  49e9              LDR      r1,|L395.1092|
00009e  a8aa              ADD      r0,sp,#0x2a8          ;451
0000a0  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0000a4  eeb78a00          VMOV.F32 s16,#1.00000000       ;453
0000a8  2500              MOVS     r5,#0                 ;456
0000aa  ee88ba0a          VDIV.F32 s22,s16,s20           ;453
0000ae  aeaa              ADD      r6,sp,#0x2a8          ;451
0000b0  eec8aa29          VDIV.F32 s21,s16,s19           ;454
                  |L395.180|
0000b4  eb0a00c5          ADD      r0,r10,r5,LSL #3      ;454
0000b8  eb050145          ADD      r1,r5,r5,LSL #1       ;460
0000bc  ed900a00          VLDR     s0,[r0,#0]            ;460
0000c0  eb060481          ADD      r4,r6,r1,LSL #2       ;460
0000c4  ee300a49          VSUB.F32 s0,s0,s18             ;460
0000c8  ee600a0b          VMUL.F32 s1,s0,s22             ;460
0000cc  edc40a00          VSTR     s1,[r4,#0]            ;460
0000d0  ed900a01          VLDR     s0,[r0,#4]            ;461
0000d4  ee600aa0          VMUL.F32 s1,s1,s1              ;461
0000d8  ee300a68          VSUB.F32 s0,s0,s17             ;461
0000dc  ee200a2a          VMUL.F32 s0,s0,s21             ;461
0000e0  ed840a01          VSTR     s0,[r4,#4]            ;461
0000e4  ee400a00          VMLA.F32 s1,s0,s0              ;461
0000e8  ed848a02          VSTR     s16,[r4,#8]           ;462
0000ec  ee480a08          VMLA.F32 s1,s16,s16            ;462
0000f0  eeb00a60          VMOV.F32 s0,s1                 ;462
0000f4  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
0000f8  eef00a40          VMOV.F32 s1,s0                 ;462
0000fc  eef50ac0          VCMPE.F32 s1,#0.0               ;462
000100  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;462
000104  d013              BEQ      |L395.302|
000106  ee880a20          VDIV.F32 s0,s16,s1             ;462
00010a  edd40a00          VLDR     s1,[r4,#0]            ;462
00010e  ee600a80          VMUL.F32 s1,s1,s0              ;462
000112  edc40a00          VSTR     s1,[r4,#0]            ;462
000116  edd40a01          VLDR     s1,[r4,#4]            ;462
00011a  ee600a80          VMUL.F32 s1,s1,s0              ;462
00011e  edc40a01          VSTR     s1,[r4,#4]            ;462
000122  edd40a02          VLDR     s1,[r4,#8]            ;462
000126  ee200a80          VMUL.F32 s0,s1,s0              ;462
00012a  ed840a02          VSTR     s0,[r4,#8]            ;462
                  |L395.302|
00012e  1c6d              ADDS     r5,r5,#1              ;462
000130  2d04              CMP      r5,#4                 ;456
000132  dbbf              BLT      |L395.180|
000134  eddfaac4          VLDR     s21,|L395.1096|
000138  48c4              LDR      r0,|L395.1100|
00013a  acb6              ADD      r4,sp,#0x2d8          ;481
00013c  c80f              LDM      r0,{r0-r3}            ;481
00013e  e884000f          STM      r4,{r0-r3}            ;481
000142  2304              MOVS     r3,#4                 ;483
000144  2214              MOVS     r2,#0x14              ;483
000146  49c2              LDR      r1,|L395.1104|
000148  a80a              ADD      r0,sp,#0x28           ;483
00014a  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00014e  2500              MOVS     r5,#0                 ;484
000150  af0a              ADD      r7,sp,#0x28           ;483
                  |L395.338|
000152  eb050085          ADD      r0,r5,r5,LSL #2       ;485
000156  eb070480          ADD      r4,r7,r0,LSL #2       ;485
00015a  2300              MOVS     r3,#0                 ;485
00015c  461a              MOV      r2,r3                 ;485
00015e  2101              MOVS     r1,#1                 ;485
000160  a808              ADD      r0,sp,#0x20           ;485
000162  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000166  6800              LDR      r0,[r0,#0]            ;485
000168  2203              MOVS     r2,#3                 ;485
00016a  9000              STR      r0,[sp,#0]            ;485
00016c  abbe              ADD      r3,sp,#0x2f8          ;485
00016e  4611              MOV      r1,r2                 ;485
000170  a803              ADD      r0,sp,#0xc            ;485
000172  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
000176  6801              LDR      r1,[r0,#0]            ;485
000178  6021              STR      r1,[r4,#0]            ;485
00017a  6841              LDR      r1,[r0,#4]            ;485
00017c  6061              STR      r1,[r4,#4]            ;485
00017e  6881              LDR      r1,[r0,#8]            ;485
000180  60a1              STR      r1,[r4,#8]            ;485
000182  68c1              LDR      r1,[r0,#0xc]          ;485
000184  60e1              STR      r1,[r4,#0xc]          ;485
000186  6900              LDR      r0,[r0,#0x10]         ;485
000188  6120              STR      r0,[r4,#0x10]         ;485
00018a  2800              CMP      r0,#0                 ;485
00018c  f00080e9          BEQ.W    |L395.866|
000190  6820              LDR      r0,[r4,#0]            ;485
000192  2800              CMP      r0,#0                 ;485
000194  bfa4              ITT      GE                    ;485
000196  6860              LDRGE    r0,[r4,#4]            ;485
000198  2800              CMPGE    r0,#0                 ;485
00019a  f2c080e2          BLT.W    |L395.866|
00019e  1c6d              ADDS     r5,r5,#1              ;485
0001a0  2d04              CMP      r5,#4                 ;484
0001a2  dbd6              BLT      |L395.338|
0001a4  48a6              LDR      r0,|L395.1088|
0001a6  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
0001aa  2304              MOVS     r3,#4                 ;493
0001ac  220c              MOVS     r2,#0xc               ;493
0001ae  49a5              LDR      r1,|L395.1092|
0001b0  a89e              ADD      r0,sp,#0x278          ;493
0001b2  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0001b6  a8a7              ADD      r0,sp,#0x29c          ;493
0001b8  90ca              STR      r0,[sp,#0x328]        ;483
0001ba  a819              ADD      r0,sp,#0x64           ;483
0001bc  90c9              STR      r0,[sp,#0x324]        ;506
0001be  a8a4              ADD      r0,sp,#0x290          ;506
0001c0  90c8              STR      r0,[sp,#0x320]        ;506
0001c2  a814              ADD      r0,sp,#0x50           ;506
0001c4  90c7              STR      r0,[sp,#0x31c]        ;506
0001c6  a8a1              ADD      r0,sp,#0x284          ;506
0001c8  90c6              STR      r0,[sp,#0x318]        ;506
0001ca  a80f              ADD      r0,sp,#0x3c           ;506
0001cc  2500              MOVS     r5,#0                 ;495
0001ce  eeb0ba6a          VMOV.F32 s22,s21               ;479
0001d2  90c5              STR      r0,[sp,#0x314]        ;479
                  |L395.468|
0001d4  489f              LDR      r0,|L395.1108|
0001d6  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
0001da  e9dd01c7          LDRD     r0,r1,[sp,#0x31c]     ;501
0001de  e9dd23c9          LDRD     r2,r3,[sp,#0x324]     ;501
0001e2  ac06              ADD      r4,sp,#0x18           ;501
0001e4  f8dd82d8          LDR      r8,[sp,#0x2d8]        ;501
0001e8  e884000f          STM      r4,{r0-r3}            ;501
0001ec  e9dd27c5          LDRD     r2,r7,[sp,#0x314]     ;501
0001f0  ab02              ADD      r3,sp,#8              ;506
0001f2  a99e              ADD      r1,sp,#0x278          ;506
0001f4  a80a              ADD      r0,sp,#0x28           ;506
0001f6  e8830087          STM      r3,{r0-r2,r7}         ;506
0001fa  98b9              LDR      r0,[sp,#0x2e4]        ;506
0001fc  a9aa              ADD      r1,sp,#0x2a8          ;506
0001fe  eb000040          ADD      r0,r0,r0,LSL #1       ;506
000202  eb010280          ADD      r2,r1,r0,LSL #2       ;506
000206  98b8              LDR      r0,[sp,#0x2e0]        ;506
000208  f50d793a          ADD      r9,sp,#0x2e8          ;506
00020c  eb000040          ADD      r0,r0,r0,LSL #1       ;506
000210  eb010080          ADD      r0,r1,r0,LSL #2       ;506
000214  e9cd0200          STRD     r0,r2,[sp,#0]         ;506
000218  98b7              LDR      r0,[sp,#0x2dc]        ;506
00021a  eb000040          ADD      r0,r0,r0,LSL #1       ;506
00021e  eb010380          ADD      r3,r1,r0,LSL #2       ;506
000222  98b9              LDR      r0,[sp,#0x2e4]        ;506
000224  f8592020          LDR      r2,[r9,r0,LSL #2]     ;506
000228  98b8              LDR      r0,[sp,#0x2e0]        ;506
00022a  f8591020          LDR      r1,[r9,r0,LSL #2]     ;506
00022e  98b7              LDR      r0,[sp,#0x2dc]        ;506
000230  f8590020          LDR      r0,[r9,r0,LSL #2]     ;506
000234  f7fffffe          BL       _ZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_ ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)
000238  2800              CMP      r0,#0                 ;506
00023a  f47faf20          BNE      |L395.126|
00023e  1e46              SUBS     r6,r0,#1              ;522
000240  eeb08a4b          VMOV.F32 s16,s22               ;523
000244  2400              MOVS     r4,#0                 ;525
000246  eb0a09c8          ADD      r9,r10,r8,LSL #3      ;525
                  |L395.586|
00024a  eb040144          ADD      r1,r4,r4,LSL #1       ;528
00024e  a89e              ADD      r0,sp,#0x278          ;528
000250  eb000781          ADD      r7,r0,r1,LSL #2       ;528
000254  ed970a02          VLDR     s0,[r7,#8]            ;528
000258  eeb50ac0          VCMPE.F32 s0,#0.0               ;528
00025c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;528
000260  dd4a              BLE      |L395.760|
000262  a8ba              ADD      r0,sp,#0x2e8          ;539
000264  eb040184          ADD      r1,r4,r4,LSL #2       ;539
000268  f8502028          LDR      r2,[r0,r8,LSL #2]     ;539
00026c  a80a              ADD      r0,sp,#0x28           ;539
00026e  eb000181          ADD      r1,r0,r1,LSL #2       ;539
000272  4668              MOV      r0,sp                 ;539
000274  f7fffffe          BL       _ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
000278  ed9d0a00          VLDR     s0,[sp,#0]            ;539
00027c  edd70a00          VLDR     s1,[r7,#0]            ;539
000280  ed971a01          VLDR     s2,[r7,#4]            ;539
000284  edd71a02          VLDR     s3,[r7,#8]            ;539
000288  ee300a20          VADD.F32 s0,s0,s1              ;539
00028c  eddd0a01          VLDR     s1,[sp,#4]            ;539
000290  ee700a81          VADD.F32 s1,s1,s2              ;539
000294  ed9d1a02          VLDR     s2,[sp,#8]            ;539
000298  ee312a21          VADD.F32 s4,s2,s3              ;539
00029c  ee201a0a          VMUL.F32 s2,s0,s20             ;540
0002a0  ee600aa9          VMUL.F32 s1,s1,s19             ;541
0002a4  ed8d2a05          VSTR     s4,[sp,#0x14]         ;541
0002a8  ee091a02          VMLA.F32 s2,s18,s4             ;540
0002ac  ee480a82          VMLA.F32 s1,s17,s4             ;541
0002b0  ed8d1a03          VSTR     s2,[sp,#0xc]          ;540
0002b4  ee810a02          VDIV.F32 s0,s2,s4              ;545
0002b8  edcd0a04          VSTR     s1,[sp,#0x10]         ;541
0002bc  eec02a82          VDIV.F32 s5,s1,s4              ;545
0002c0  ed8d0a06          VSTR     s0,[sp,#0x18]         ;545
0002c4  edcd2a07          VSTR     s5,[sp,#0x1c]         ;545
0002c8  edd90a00          VLDR     s1,[r9,#0]            ;545
0002cc  ee300a60          VSUB.F32 s0,s0,s1              ;545
0002d0  ee600a00          VMUL.F32 s1,s0,s0              ;545
0002d4  ed990a01          VLDR     s0,[r9,#4]            ;545
0002d8  ee320ac0          VSUB.F32 s0,s5,s0              ;545
0002dc  ee400a00          VMLA.F32 s1,s0,s0              ;545
0002e0  eeb00a60          VMOV.F32 s0,s1                 ;545
0002e4  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
0002e8  eeb40ac8          VCMPE.F32 s0,s16                ;554
0002ec  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;554
0002f0  bf3c              ITT      CC                    ;555
0002f2  eeb08a40          VMOVCC.F32 s16,s0                ;555
0002f6  4626              MOVCC    r6,r4                 ;556
                  |L395.760|
0002f8  1c64              ADDS     r4,r4,#1              ;556
0002fa  2c04              CMP      r4,#4                 ;525
0002fc  dba5              BLT      |L395.586|
0002fe  eeb48aea          VCMPE.F32 s16,s21               ;568
000302  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;568
000306  d27d              BCS      |L395.1028|
000308  eb060186          ADD      r1,r6,r6,LSL #2       ;570
00030c  a80a              ADD      r0,sp,#0x28           ;570
00030e  eb000481          ADD      r4,r0,r1,LSL #2       ;570
000312  eef0aa48          VMOV.F32 s21,s16               ;569
000316  2100              MOVS     r1,#0                 ;569
000318  4620              MOV      r0,r4                 ;569
00031a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00031e  4680              MOV      r8,r0                 ;569
000320  2101              MOVS     r1,#1                 ;569
000322  4620              MOV      r0,r4                 ;569
000324  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000328  4607              MOV      r7,r0                 ;569
00032a  4658              MOV      r0,r11                ;569
00032c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000330  b330              CBZ      r0,|L395.896|
000332  4620              MOV      r0,r4                 ;570
000334  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000338  b310              CBZ      r0,|L395.896|
00033a  f8db0000          LDR      r0,[r11,#0]           ;570
00033e  4540              CMP      r0,r8                 ;570
000340  bf04              ITT      EQ                    ;570
000342  f8db1004          LDREQ    r1,[r11,#4]           ;570
000346  42b9              CMPEQ    r1,r7                 ;570
000348  d026              BEQ      |L395.920|
00034a  f44f7127          MOV      r1,#0x29c             ;570
00034e  4842              LDR      r0,|L395.1112|
000350  e9cd0100          STRD     r0,r1,[sp,#0]         ;570
000354  4b41              LDR      r3,|L395.1116|
000356  4a42              LDR      r2,|L395.1120|
000358  4942              LDR      r1,|L395.1124|
00035a  2005              MOVS     r0,#5                 ;570
00035c  f7fffffe          BL       _Anki_Log
000360  e03f              B        |L395.994|
                  |L395.866|
000362  f44f70f3          MOV      r0,#0x1e6             ;486
000366  f8cd8000          STR      r8,[sp,#0]            ;486
00036a  e9cd0501          STRD     r0,r5,[sp,#4]         ;486
00036e  4b31              LDR      r3,|L395.1076|
000370  4a3d              LDR      r2,|L395.1128|
000372  493e              LDR      r1,|L395.1132|
000374  2005              MOVS     r0,#5                 ;486
000376  f7fffffe          BL       _Anki_Log
00037a  f04f7080          MOV      r0,#0x1000000         ;486
00037e  e67e              B        |L395.126|
                  |L395.896|
000380  f2402199          MOV      r1,#0x299             ;486
000384  4834              LDR      r0,|L395.1112|
000386  e9cd0100          STRD     r0,r1,[sp,#0]         ;486
00038a  4b34              LDR      r3,|L395.1116|
00038c  4a38              LDR      r2,|L395.1136|
00038e  4935              LDR      r1,|L395.1124|
000390  2005              MOVS     r0,#5                 ;486
000392  f7fffffe          BL       _Anki_Log
000396  e024              B        |L395.994|
                  |L395.920|
000398  2100              MOVS     r1,#0                 ;486
00039a  2800              CMP      r0,#0                 ;486
00039c  dd21              BLE      |L395.994|
                  |L395.926|
00039e  68a2              LDR      r2,[r4,#8]            ;486
0003a0  6920              LDR      r0,[r4,#0x10]         ;486
0003a2  f8db3010          LDR      r3,[r11,#0x10]        ;486
0003a6  fb010202          MLA      r2,r1,r2,r0           ;486
0003aa  f8db0008          LDR      r0,[r11,#8]           ;486
0003ae  f8dbc004          LDR      r12,[r11,#4]          ;486
0003b2  fb013300          MLA      r3,r1,r0,r3           ;486
0003b6  2000              MOVS     r0,#0                 ;486
0003b8  f1bc0f00          CMP      r12,#0                ;486
0003bc  dd0c              BLE      |L395.984|
                  |L395.958|
0003be  eb020c80          ADD      r12,r2,r0,LSL #2      ;486
0003c2  ed9c0a00          VLDR     s0,[r12,#0]           ;486
0003c6  eb030c80          ADD      r12,r3,r0,LSL #2      ;486
0003ca  1c40              ADDS     r0,r0,#1              ;486
0003cc  ed8c0a00          VSTR     s0,[r12,#0]           ;486
0003d0  f8dbc004          LDR      r12,[r11,#4]          ;486
0003d4  4584              CMP      r12,r0                ;486
0003d6  dcf2              BGT      |L395.958|
                  |L395.984|
0003d8  f8db0000          LDR      r0,[r11,#0]           ;486
0003dc  1c49              ADDS     r1,r1,#1              ;486
0003de  4288              CMP      r0,r1                 ;486
0003e0  dcdd              BGT      |L395.926|
                  |L395.994|
0003e2  eb060246          ADD      r2,r6,r6,LSL #1       ;571
0003e6  a99e              ADD      r1,sp,#0x278          ;571
0003e8  eb010182          ADD      r1,r1,r2,LSL #2       ;571
0003ec  98e0              LDR      r0,[sp,#0x380]        ;571
0003ee  ed910a00          VLDR     s0,[r1,#0]            ;571
0003f2  ed800a00          VSTR     s0,[r0,#0]            ;571
0003f6  ed910a01          VLDR     s0,[r1,#4]            ;571
0003fa  ed800a01          VSTR     s0,[r0,#4]            ;571
0003fe  ed910a02          VLDR     s0,[r1,#8]            ;571
000402  e000              B        |L395.1030|
                  |L395.1028|
000404  e001              B        |L395.1034|
                  |L395.1030|
000406  ed800a02          VSTR     s0,[r0,#8]            ;571
                  |L395.1034|
00040a  2d03              CMP      r5,#3                 ;574
00040c  da06              BGE      |L395.1052|
00040e  a8b6              ADD      r0,sp,#0x2d8          ;577
000410  eb000085          ADD      r0,r0,r5,LSL #2       ;577
000414  99b6              LDR      r1,[sp,#0x2d8]        ;577
000416  6842              LDR      r2,[r0,#4]            ;577
000418  92b6              STR      r2,[sp,#0x2d8]        ;577
00041a  6041              STR      r1,[r0,#4]            ;577
                  |L395.1052|
00041c  480d              LDR      r0,|L395.1108|
00041e  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000422  1c6d              ADDS     r5,r5,#1              ;580
000424  2d04              CMP      r5,#4                 ;495
000426  f6ffaed5          BLT      |L395.468|
00042a  2000              MOVS     r0,#0                 ;585
00042c  e627              B        |L395.126|
;;;587    
                          ENDP

00042e  0000              DCW      0x0000
                  |L395.1072|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_E19__PRETTY_FUNCTION__ ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::__PRETTY_FUNCTION__
                  |L395.1076|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_1 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 3)
                  |L395.1080|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_0 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
                  |L395.1084|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
                  |L395.1088|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_2 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
                  |L395.1092|
                          DCD      _ZN4Anki8Embedded6Point3IfEC1Ev ; Anki::Embedded::Point3<float>::Point3()
                  |L395.1096|
000448  7f7fffff          DCFS     0x7f7fffff ; 3.4028234663852886e+38
                  |L395.1100|
                          DCD      __ARM__ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA__anon0
                  |L395.1104|
                          DCD      _ZN4Anki8Embedded5ArrayIfEC1Ev ; Anki::Embedded::Array<float>::Array()
                  |L395.1108|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_5 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 7)
                  |L395.1112|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
                  |L395.1116|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_1 ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::string (instance 3)
                  |L395.1120|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_2 ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::string (instance 4)
                  |L395.1124|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::string
                  |L395.1128|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_4 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 6)
                  |L395.1132|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_3 ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 5)
                  |L395.1136|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEEs_0 ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::string (instance 2)

                          AREA ||area_number.396||, COMGROUP=_ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_, LINKORDER=||t._ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.396||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_||, COMGROUP=_ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_ PROC ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)
;;;418          template<typename PRECISION>
;;;419          Result computePose(const Quadrilateral<PRECISION>& imgQuad,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;420            const Point3<PRECISION>& worldPoint1,
;;;421            const Point3<PRECISION>& worldPoint2,
;;;422            const Point3<PRECISION>& worldPoint3,
;;;423            const Point3<PRECISION>& worldPoint4,
;;;424            const f32 focalLength_x, const f32 focalLength_y,
;;;425            const f32 camCenter_x,   const f32 camCenter_y,
;;;426            Array<PRECISION>& R, Point3<PRECISION>& T)
;;;427          {
000004  4616              MOV      r6,r2
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  f5ad7d6b          SUB      sp,sp,#0x3ac
00000e  461d              MOV      r5,r3
000010  460f              MOV      r7,r1
000012  4682              MOV      r10,r0
;;;428            Result lastResult = RESULT_OK;
;;;429    
;;;430            // Create a little memory stack for the few 3x3 matrices used below
;;;431            const s32 SCRATCH_BUFFER_SIZE = 512;
;;;432            char buffer[SCRATCH_BUFFER_SIZE];
;;;433            MemoryStack scratch(buffer, SCRATCH_BUFFER_SIZE);
000014  2201              MOVS     r2,#1
000016  eef0ca61          VMOV.F32 s25,s3                ;427
00001a  eeb0ea41          VMOV.F32 s28,s2                ;427
00001e  eef0ea60          VMOV.F32 s29,s1                ;427
000022  eeb0fa40          VMOV.F32 s30,s0                ;427
000026  2300              MOVS     r3,#0
000028  4611              MOV      r1,r2
00002a  a8e9              ADD      r0,sp,#0x3a4
00002c  f8ddb414          LDR      r11,[sp,#0x414]
000030  f8dd4410          LDR      r4,[sp,#0x410]
000034  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000038  6803              LDR      r3,[r0,#0]
00003a  f44f7200          MOV      r2,#0x200
00003e  a936              ADD      r1,sp,#0xd8
000040  a8d6              ADD      r0,sp,#0x358
000042  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE ; Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
000046  4658              MOV      r0,r11
000048  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
;;;434    
;;;435            // Output rotation should already be allocated
;;;436            AnkiConditionalErrorAndReturnValue(AreEqualSize(3, 3, R),
00004c  f8df8410          LDR      r8,|L402.1120|
000050  b158              CBZ      r0,|L402.106|
000052  2100              MOVS     r1,#0
000054  4658              MOV      r0,r11
000056  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
00005a  2803              CMP      r0,#3
00005c  d105              BNE      |L402.106|
00005e  2101              MOVS     r1,#1
000060  4658              MOV      r0,r11
000062  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
000066  2803              CMP      r0,#3
000068  d011              BEQ      |L402.142|
                  |L402.106|
00006a  f44f70da          MOV      r0,#0x1b4
00006e  e9cd8000          STRD     r8,r0,[sp,#0]
000072  4bfc              LDR      r3,|L402.1124|
000074  4afc              LDR      r2,|L402.1128|
000076  49fd              LDR      r1,|L402.1132|
000078  2005              MOVS     r0,#5
00007a  f7fffffe          BL       _Anki_Log
00007e  f04f60a0          MOV      r0,#0x5000000
                  |L402.130|
;;;437              RESULT_FAIL_INVALID_SIZE,
;;;438              "P3P::computePose()",
;;;439              "Rotation matrix should be 3x3.");
;;;440    
;;;441            BeginBenchmark("computePose_init");
;;;442    
;;;443            // Put the four world points into an array so we can loop over them
;;;444            // easily
;;;445            const Point3<PRECISION>* worldPoints[4] = {
;;;446              &worldPoint1, &worldPoint2, &worldPoint3, &worldPoint4
;;;447            };
;;;448    
;;;449            // Turn the three image points into unit vectors corresponding to rays
;;;450            // in the direction of the image points
;;;451            Point3<PRECISION> imgRays[4];
;;;452    
;;;453            const PRECISION invFx = PRECISION(1) / (PRECISION) focalLength_x;
;;;454            const PRECISION invFy = PRECISION(1) / (PRECISION) focalLength_y;
;;;455    
;;;456            for(s32 i_corner = 0; i_corner < 4; ++i_corner)
;;;457            {
;;;458              // Get unit vector pointing along each image ray
;;;459              //   imgRay = K^(-1) * [u v 1]^T
;;;460              imgRays[i_corner].x = invFx * (imgQuad[i_corner].x - camCenter_x);
;;;461              imgRays[i_corner].y = invFy * (imgQuad[i_corner].y - camCenter_y);
;;;462              imgRays[i_corner].z = PRECISION(1);
;;;463    
;;;464              /*
;;;465              CoreTechPrint("point %d (%f, %f) became ray (%f, %f, %f) ",
;;;466              i_corner,
;;;467              imgQuad[i_corner].x, imgQuad[i_corner].y,
;;;468              imgRays[i_corner].x, imgRays[i_corner].y, imgRays[i_corner].z);
;;;469              */
;;;470    
;;;471              imgRays[i_corner].MakeUnitLength();
;;;472    
;;;473              //CoreTechPrint(" which normalized to (%f, %f, %f)\n",
;;;474              //       imgRays[i_corner].x, imgRays[i_corner].y, imgRays[i_corner].z);
;;;475            }
;;;476    
;;;477            // Compute best pose from each subset of three corners, keeping the one
;;;478            // with the lowest error
;;;479            f32 minErrorOuter = FLT_MAX; // std::numeric_limits<float>::max();
;;;480    
;;;481            s32 cornerList[4] = {0, 1, 2, 3};
;;;482    
;;;483            Array<PRECISION> possibleR[4];
;;;484            for(s32 i=0; i<4; ++i) {
;;;485              possibleR[i] = Array<PRECISION>(3,3,scratch);
;;;486              AnkiConditionalErrorAndReturnValue(possibleR[i].IsValid(), RESULT_FAIL_MEMORY,
;;;487                "P3P::computePossiblePoses()",
;;;488                "Invalid possibleR[%d] Matrix, out of memory?", i);
;;;489            }
;;;490    
;;;491            EndBenchmark("computePose_init");
;;;492    
;;;493            Point3<PRECISION> possibleT[4]; // TODO: Kosher to create array of Point3's?
;;;494    
;;;495            for(s32 i=0; i<4; ++i)
;;;496            {
;;;497              BeginBenchmark("computePose_mainLoop");
;;;498    
;;;499              // Use the first corner in the current corner list as the validation
;;;500              // corner. Use the remaining three to estimate the pose.
;;;501              const s32 i_validate = cornerList[0];
;;;502    
;;;503              //CoreTechPrint("Validating with %d, estimating with %d, %d, %d\n",
;;;504              //       i_validate, cornerList[1], cornerList[2], cornerList[3]);
;;;505    
;;;506              if((lastResult = P3P::computePossiblePoses(*worldPoints[cornerList[1]],
;;;507                *worldPoints[cornerList[2]],
;;;508                *worldPoints[cornerList[3]],
;;;509                imgRays[cornerList[1]],
;;;510                imgRays[cornerList[2]],
;;;511                imgRays[cornerList[3]],
;;;512                possibleR[0], possibleT[0],
;;;513                possibleR[1], possibleT[1],
;;;514                possibleR[2], possibleT[2],
;;;515                possibleR[3], possibleT[3])) != RESULT_OK)
;;;516              {
;;;517                return lastResult;
;;;518              }
;;;519    
;;;520              // Find the pose with the least reprojection error for the 4th
;;;521              // validation corner (which was not used in estimating the pose)
;;;522              s32 bestSolution = -1;
;;;523              float minErrorInner = FLT_MAX;
;;;524    
;;;525              for(s32 i_solution=0; i_solution<4; ++i_solution)
;;;526              {
;;;527                // First make sure the target was in front of the camera
;;;528                if(possibleT[i_solution].z > 0)
;;;529                {
;;;530                  // Project the validation world point into the image using each
;;;531                  // possible pose
;;;532                  //   proj = K*[R T]*[worldX; worldY; worldZ; 1]
;;;533                  //   u = projX/projZ;
;;;534                  //   v = projY/projZ;
;;;535                  //
;;;536                  // NOTE: this does not take radial distortion into account, if/when
;;;537                  //       we have that for the camera
;;;538    
;;;539                  Point3<PRECISION> projectedPoint3 = (possibleR[i_solution] * (*worldPoints[i_validate])) + possibleT[i_solution];
;;;540                  projectedPoint3.x = focalLength_x*projectedPoint3.x + camCenter_x*projectedPoint3.z;
;;;541                  projectedPoint3.y = focalLength_y*projectedPoint3.y + camCenter_y*projectedPoint3.z;
;;;542    
;;;543                  AnkiAssert(fabs(projectedPoint3.z) > 1e-6);
;;;544    
;;;545                  Point<PRECISION> projectedPoint(projectedPoint3.x/projectedPoint3.z,
;;;546                    projectedPoint3.y/projectedPoint3.z);
;;;547    
;;;548                  // Compare to the validation image point
;;;549                  float error = projectedPoint.Dist(imgQuad[i_validate]);
;;;550    
;;;551                  //CoreTechPrint("Solution %d reprojection error when validating with corner %d = %f\n",
;;;552                  //        i_solution, i_validate, error);
;;;553    
;;;554                  if(error < minErrorInner) {
;;;555                    minErrorInner = error;
;;;556                    bestSolution = i_solution;
;;;557                  }
;;;558                } // if(possibleT[i_solution].z > 0)
;;;559              } // for each solution
;;;560    
;;;561              AnkiAssert(bestSolution >= 0);
;;;562    
;;;563              //CoreTechPrint("Best solution when validating with corner %d was %d with error %f\n",
;;;564              //       i_validate, bestSolution, minErrorInner);
;;;565    
;;;566              // If the pose using this validation corner is better than the
;;;567              // best so far, keep it
;;;568              if(minErrorInner < minErrorOuter) {
;;;569                minErrorOuter = minErrorInner;
;;;570                R.Set(possibleR[bestSolution]); // Don't use =, which is shallow copy!!
;;;571                T = possibleT[bestSolution];
;;;572              }
;;;573    
;;;574              if(i<3) {
;;;575                // Rearrange corner list for next loop, to get a different
;;;576                // validation corner each time
;;;577                Swap(cornerList[0], cornerList[i+1]);
;;;578              }
;;;579    
;;;580              EndBenchmark("computePose_mainLoop");
;;;581            } // for each validation corner
;;;582    
;;;583            //CoreTechPrint("Best solution had error of %f\n", minErrorOuter);
;;;584    
;;;585            return RESULT_OK;
;;;586          } // computePose()
000082  f50d7d6b          ADD      sp,sp,#0x3ac
000086  ecbd8b10          VPOP     {d8-d15}
00008a  e8bd8ff0          POP      {r4-r11,pc}
                  |L402.142|
00008e  48f8              LDR      r0,|L402.1136|
000090  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000094  e9cd54d4          STRD     r5,r4,[sp,#0x350]     ;451
000098  e9cd76d2          STRD     r7,r6,[sp,#0x348]     ;451
00009c  2304              MOVS     r3,#4                 ;451
00009e  2218              MOVS     r2,#0x18              ;451
0000a0  49f4              LDR      r1,|L402.1140|
0000a2  a8b6              ADD      r0,sp,#0x2d8          ;451
0000a4  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0000a8  ee1f0a10          VMOV     r0,s30                ;453
0000ac  f7fffffe          BL       __aeabi_f2d
0000b0  ec410b10          VMOV     d0,r0,r1              ;453
0000b4  ec532b10          VMOV     r2,r3,d0              ;453
0000b8  ed9fabef          VLDR     d10,|L402.1144|
0000bc  ec510b1a          VMOV     r0,r1,d10             ;453
0000c0  f7fffffe          BL       __aeabi_ddiv
0000c4  ec410b19          VMOV     d9,r0,r1              ;453
0000c8  ee1e0a90          VMOV     r0,s29                ;454
0000cc  f7fffffe          BL       __aeabi_f2d
0000d0  ec410b10          VMOV     d0,r0,r1              ;454
0000d4  ec510b1a          VMOV     r0,r1,d10             ;454
0000d8  ec532b10          VMOV     r2,r3,d0              ;454
0000dc  f7fffffe          BL       __aeabi_ddiv
0000e0  ec410b18          VMOV     d8,r0,r1              ;454
0000e4  2400              MOVS     r4,#0                 ;456
0000e6  eeb7ca00          VMOV.F32 s24,#1.00000000       ;456
0000ea  afb6              ADD      r7,sp,#0x2d8          ;451
                  |L402.236|
0000ec  eb0a1604          ADD      r6,r10,r4,LSL #4      ;451
0000f0  ee1e0a10          VMOV     r0,s28                ;460
0000f4  ed96bb00          VLDR     d11,[r6,#0]           ;460
0000f8  f7fffffe          BL       __aeabi_f2d
0000fc  ec532b1b          VMOV     r2,r3,d11             ;460
000100  f7fffffe          BL       __aeabi_drsub
000104  ec532b19          VMOV     r2,r3,d9              ;460
000108  f7fffffe          BL       __aeabi_dmul
00010c  eb040244          ADD      r2,r4,r4,LSL #1       ;460
000110  eb0705c2          ADD      r5,r7,r2,LSL #3       ;460
000114  e9c50100          STRD     r0,r1,[r5,#0]         ;460
000118  ed96bb02          VLDR     d11,[r6,#8]           ;461
00011c  ee1c0a90          VMOV     r0,s25                ;461
000120  f7fffffe          BL       __aeabi_f2d
000124  ec532b1b          VMOV     r2,r3,d11             ;461
000128  f7fffffe          BL       __aeabi_drsub
00012c  ec532b18          VMOV     r2,r3,d8              ;461
000130  f7fffffe          BL       __aeabi_dmul
000134  e9c50102          STRD     r0,r1,[r5,#8]         ;461
000138  ed85ab04          VSTR     d10,[r5,#0x10]        ;462
00013c  4628              MOV      r0,r5                 ;462
00013e  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdE6LengthEv ; Anki::Embedded::Point3<double>::Length() const
000142  eeb50ac0          VCMPE.F32 s0,#0.0               ;462
000146  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;462
00014a  d025              BEQ      |L402.408|
00014c  eecc0a00          VDIV.F32 s1,s24,s0             ;462
000150  ee100a90          VMOV     r0,s1                 ;462
000154  f7fffffe          BL       __aeabi_f2d
000158  ec410b1b          VMOV     d11,r0,r1             ;462
00015c  ed950b00          VLDR     d0,[r5,#0]            ;462
000160  ec532b1b          VMOV     r2,r3,d11             ;462
000164  ec510b10          VMOV     r0,r1,d0              ;462
000168  f7fffffe          BL       __aeabi_dmul
00016c  e9c50100          STRD     r0,r1,[r5,#0]         ;462
000170  ed950b02          VLDR     d0,[r5,#8]            ;462
000174  ec532b1b          VMOV     r2,r3,d11             ;462
000178  ec510b10          VMOV     r0,r1,d0              ;462
00017c  f7fffffe          BL       __aeabi_dmul
000180  e9c50102          STRD     r0,r1,[r5,#8]         ;462
000184  ed950b04          VLDR     d0,[r5,#0x10]         ;462
000188  ec532b1b          VMOV     r2,r3,d11             ;462
00018c  ec510b10          VMOV     r0,r1,d0              ;462
000190  f7fffffe          BL       __aeabi_dmul
000194  e9c50104          STRD     r0,r1,[r5,#0x10]      ;462
                  |L402.408|
000198  1c64              ADDS     r4,r4,#1              ;462
00019a  2c04              CMP      r4,#4                 ;456
00019c  dba6              BLT      |L402.236|
00019e  eddffab8          VLDR     s31,|L402.1152|
0001a2  48b8              LDR      r0,|L402.1156|
0001a4  acce              ADD      r4,sp,#0x338          ;481
0001a6  c80f              LDM      r0,{r0-r3}            ;481
0001a8  e884000f          STM      r4,{r0-r3}            ;481
0001ac  2304              MOVS     r3,#4                 ;483
0001ae  2214              MOVS     r2,#0x14              ;483
0001b0  49b5              LDR      r1,|L402.1160|
0001b2  a822              ADD      r0,sp,#0x88           ;483
0001b4  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0001b8  2500              MOVS     r5,#0                 ;484
0001ba  ae22              ADD      r6,sp,#0x88           ;483
                  |L402.444|
0001bc  eb050085          ADD      r0,r5,r5,LSL #2       ;485
0001c0  eb060480          ADD      r4,r6,r0,LSL #2       ;485
0001c4  2300              MOVS     r3,#0                 ;485
0001c6  461a              MOV      r2,r3                 ;485
0001c8  2101              MOVS     r1,#1                 ;485
0001ca  a808              ADD      r0,sp,#0x20           ;485
0001cc  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0001d0  6800              LDR      r0,[r0,#0]            ;485
0001d2  2203              MOVS     r2,#3                 ;485
0001d4  9000              STR      r0,[sp,#0]            ;485
0001d6  abd6              ADD      r3,sp,#0x358          ;485
0001d8  4611              MOV      r1,r2                 ;485
0001da  a803              ADD      r0,sp,#0xc            ;485
0001dc  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
0001e0  6801              LDR      r1,[r0,#0]            ;485
0001e2  6021              STR      r1,[r4,#0]            ;485
0001e4  6841              LDR      r1,[r0,#4]            ;485
0001e6  6061              STR      r1,[r4,#4]            ;485
0001e8  6881              LDR      r1,[r0,#8]            ;485
0001ea  60a1              STR      r1,[r4,#8]            ;485
0001ec  68c1              LDR      r1,[r0,#0xc]          ;485
0001ee  60e1              STR      r1,[r4,#0xc]          ;485
0001f0  6900              LDR      r0,[r0,#0x10]         ;485
0001f2  6120              STR      r0,[r4,#0x10]         ;485
0001f4  2800              CMP      r0,#0                 ;485
0001f6  f0008171          BEQ.W    |L402.1244|
0001fa  6820              LDR      r0,[r4,#0]            ;485
0001fc  2800              CMP      r0,#0                 ;485
0001fe  bfa4              ITT      GE                    ;485
000200  6860              LDRGE    r0,[r4,#4]            ;485
000202  2800              CMPGE    r0,#0                 ;485
000204  f2c0816a          BLT.W    |L402.1244|
000208  1c6d              ADDS     r5,r5,#1              ;485
00020a  2d04              CMP      r5,#4                 ;484
00020c  dbd6              BLT      |L402.444|
00020e  4898              LDR      r0,|L402.1136|
000210  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000214  2304              MOVS     r3,#4                 ;493
000216  2218              MOVS     r2,#0x18              ;493
000218  4996              LDR      r1,|L402.1140|
00021a  a80a              ADD      r0,sp,#0x28           ;493
00021c  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000220  a81c              ADD      r0,sp,#0x70           ;493
000222  90e8              STR      r0,[sp,#0x3a0]        ;483
000224  a831              ADD      r0,sp,#0xc4           ;483
000226  90e7              STR      r0,[sp,#0x39c]        ;506
000228  a816              ADD      r0,sp,#0x58           ;506
00022a  90e6              STR      r0,[sp,#0x398]        ;506
00022c  a82c              ADD      r0,sp,#0xb0           ;506
00022e  90e5              STR      r0,[sp,#0x394]        ;506
000230  a810              ADD      r0,sp,#0x40           ;506
000232  90e4              STR      r0,[sp,#0x390]        ;506
000234  2500              MOVS     r5,#0                 ;495
000236  a827              ADD      r0,sp,#0x9c           ;506
000238  ed9fdb95          VLDR     d13,|L402.1168|
00023c  90dd              STR      r0,[sp,#0x374]        ;528
                  |L402.574|
00023e  4896              LDR      r0,|L402.1176|
000240  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000244  e9dd01e5          LDRD     r0,r1,[sp,#0x394]     ;501
000248  e9dd23e7          LDRD     r2,r3,[sp,#0x39c]     ;501
00024c  ac06              ADD      r4,sp,#0x18           ;501
00024e  f8dd8338          LDR      r8,[sp,#0x338]        ;501
000252  e884000f          STM      r4,{r0-r3}            ;501
000256  ab02              ADD      r3,sp,#8              ;506
000258  a90a              ADD      r1,sp,#0x28           ;506
00025a  a822              ADD      r0,sp,#0x88           ;506
00025c  9fe4              LDR      r7,[sp,#0x390]        ;506
00025e  9add              LDR      r2,[sp,#0x374]        ;506
000260  e8830087          STM      r3,{r0-r2,r7}         ;506
000264  98d1              LDR      r0,[sp,#0x344]        ;506
000266  a9b6              ADD      r1,sp,#0x2d8          ;506
000268  eb000040          ADD      r0,r0,r0,LSL #1       ;506
00026c  eb0102c0          ADD      r2,r1,r0,LSL #3       ;506
000270  98d0              LDR      r0,[sp,#0x340]        ;506
000272  f50d7952          ADD      r9,sp,#0x348          ;506
000276  eb000040          ADD      r0,r0,r0,LSL #1       ;506
00027a  eb0100c0          ADD      r0,r1,r0,LSL #3       ;506
00027e  e9cd0200          STRD     r0,r2,[sp,#0]         ;506
000282  98cf              LDR      r0,[sp,#0x33c]        ;506
000284  eb000040          ADD      r0,r0,r0,LSL #1       ;506
000288  eb0103c0          ADD      r3,r1,r0,LSL #3       ;506
00028c  98d1              LDR      r0,[sp,#0x344]        ;506
00028e  f8592020          LDR      r2,[r9,r0,LSL #2]     ;506
000292  98d0              LDR      r0,[sp,#0x340]        ;506
000294  f8591020          LDR      r1,[r9,r0,LSL #2]     ;506
000298  98cf              LDR      r0,[sp,#0x33c]        ;506
00029a  f8590020          LDR      r0,[r9,r0,LSL #2]     ;506
00029e  f7fffffe          BL       _ZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_ ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)
0002a2  2800              CMP      r0,#0                 ;506
0002a4  f47faeed          BNE      |L402.130|
0002a8  1e46              SUBS     r6,r0,#1              ;522
0002aa  ed9fca75          VLDR     s24,|L402.1152|
0002ae  2400              MOVS     r4,#0                 ;525
0002b0  eb0a1908          ADD      r9,r10,r8,LSL #4      ;525
                  |L402.692|
0002b4  eb040144          ADD      r1,r4,r4,LSL #1       ;528
0002b8  a80a              ADD      r0,sp,#0x28           ;528
0002ba  eb0007c1          ADD      r7,r0,r1,LSL #3       ;528
0002be  eeb01a4d          VMOV.F32 s2,s26                ;528
0002c2  ed970b04          VLDR     d0,[r7,#0x10]         ;528
0002c6  eef01a6d          VMOV.F32 s3,s27                ;528
0002ca  ec532b11          VMOV     r2,r3,d1              ;528
0002ce  ec510b10          VMOV     r0,r1,d0              ;528
0002d2  f7fffffe          BL       __aeabi_cdrcmple
0002d6  d27b              BCS      |L402.976|
0002d8  a8d2              ADD      r0,sp,#0x348          ;539
0002da  eb040184          ADD      r1,r4,r4,LSL #2       ;539
0002de  f8502028          LDR      r2,[r0,r8,LSL #2]     ;539
0002e2  a822              ADD      r0,sp,#0x88           ;539
0002e4  eb000181          ADD      r1,r0,r1,LSL #2       ;539
0002e8  4668              MOV      r0,sp                 ;539
0002ea  f7fffffe          BL       _ZN4Anki8EmbeddedmlIdEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_ ; Anki::Embedded::operator *<double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Point3<T1>&)
0002ee  ed971b00          VLDR     d1,[r7,#0]            ;539
0002f2  ed9d0b00          VLDR     d0,[sp,#0]            ;539
0002f6  ec532b11          VMOV     r2,r3,d1              ;539
0002fa  ec510b10          VMOV     r0,r1,d0              ;539
0002fe  f7fffffe          BL       __aeabi_dadd
000302  ed971b02          VLDR     d1,[r7,#8]            ;539
000306  ed9d0b02          VLDR     d0,[sp,#8]            ;539
00030a  ec410b1a          VMOV     d10,r0,r1             ;539
00030e  ec532b11          VMOV     r2,r3,d1              ;539
000312  ec510b10          VMOV     r0,r1,d0              ;539
000316  f7fffffe          BL       __aeabi_dadd
00031a  ed971b04          VLDR     d1,[r7,#0x10]         ;539
00031e  ed9d0b04          VLDR     d0,[sp,#0x10]         ;539
000322  ec410b19          VMOV     d9,r0,r1              ;539
000326  ec532b11          VMOV     r2,r3,d1              ;539
00032a  ec510b10          VMOV     r0,r1,d0              ;539
00032e  f7fffffe          BL       __aeabi_dadd
000332  ec410b18          VMOV     d8,r0,r1              ;539
000336  ee1e0a10          VMOV     r0,s28                ;540
00033a  ed8d8be2          VSTR     d8,[sp,#0x388]        ;540
00033e  f7fffffe          BL       __aeabi_f2d
000342  ec532b18          VMOV     r2,r3,d8              ;540
000346  f7fffffe          BL       __aeabi_dmul
00034a  ec410b1b          VMOV     d11,r0,r1             ;540
00034e  ee1f0a10          VMOV     r0,s30                ;540
000352  f7fffffe          BL       __aeabi_f2d
000356  ec532b1a          VMOV     r2,r3,d10             ;540
00035a  f7fffffe          BL       __aeabi_dmul
00035e  ec532b1b          VMOV     r2,r3,d11             ;540
000362  f7fffffe          BL       __aeabi_dadd
000366  ec410b1b          VMOV     d11,r0,r1             ;540
00036a  ee1c0a90          VMOV     r0,s25                ;541
00036e  ed8dbbde          VSTR     d11,[sp,#0x378]       ;540
000372  f7fffffe          BL       __aeabi_f2d
000376  ec532b18          VMOV     r2,r3,d8              ;541
00037a  f7fffffe          BL       __aeabi_dmul
00037e  ec410b1a          VMOV     d10,r0,r1             ;541
000382  ee1e0a90          VMOV     r0,s29                ;541
000386  f7fffffe          BL       __aeabi_f2d
00038a  ec532b19          VMOV     r2,r3,d9              ;541
00038e  f7fffffe          BL       __aeabi_dmul
000392  ec532b1a          VMOV     r2,r3,d10             ;541
000396  f7fffffe          BL       __aeabi_dadd
00039a  ec410b1a          VMOV     d10,r0,r1             ;541
00039e  ec532b18          VMOV     r2,r3,d8              ;545
0003a2  ed8dabe0          VSTR     d10,[sp,#0x380]       ;541
0003a6  ec510b1b          VMOV     r0,r1,d11             ;545
0003aa  f7fffffe          BL       __aeabi_ddiv
0003ae  ec410b19          VMOV     d9,r0,r1              ;545
0003b2  ec532b18          VMOV     r2,r3,d8              ;545
0003b6  ec510b1a          VMOV     r0,r1,d10             ;545
0003ba  f7fffffe          BL       __aeabi_ddiv
0003be  ec410b10          VMOV     d0,r0,r1              ;545
0003c2  ed8d9b06          VSTR     d9,[sp,#0x18]         ;545
0003c6  ed8d0b08          VSTR     d0,[sp,#0x20]         ;545
0003ca  ed991b02          VLDR     d1,[r9,#8]            ;545
0003ce  e000              B        |L402.978|
                  |L402.976|
0003d0  e02f              B        |L402.1074|
                  |L402.978|
0003d2  ec532b11          VMOV     r2,r3,d1              ;545
0003d6  f7fffffe          BL       __aeabi_dsub
0003da  ec410b10          VMOV     d0,r0,r1              ;545
0003de  ec532b10          VMOV     r2,r3,d0              ;545
0003e2  f7fffffe          BL       __aeabi_dmul
0003e6  ed990b00          VLDR     d0,[r9,#0]            ;545
0003ea  ec410b18          VMOV     d8,r0,r1              ;545
0003ee  ec532b10          VMOV     r2,r3,d0              ;545
0003f2  ec510b19          VMOV     r0,r1,d9              ;545
0003f6  f7fffffe          BL       __aeabi_dsub
0003fa  ec410b10          VMOV     d0,r0,r1              ;545
0003fe  ec532b10          VMOV     r2,r3,d0              ;545
000402  f7fffffe          BL       __aeabi_dmul
000406  ec532b18          VMOV     r2,r3,d8              ;545
00040a  f7fffffe          BL       __aeabi_dadd
00040e  ec410b10          VMOV     d0,r0,r1              ;545
000412  f7fffffe          BL       __hardfp_sqrt
000416  ec510b10          VMOV     r0,r1,d0              ;545
00041a  f7fffffe          BL       __aeabi_d2f
00041e  ee000a10          VMOV     s0,r0                 ;545
000422  eeb40acc          VCMPE.F32 s0,s24                ;554
000426  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;554
00042a  bf3c              ITT      CC                    ;555
00042c  eeb0ca40          VMOVCC.F32 s24,s0                ;555
000430  4626              MOVCC    r6,r4                 ;556
                  |L402.1074|
000432  1c64              ADDS     r4,r4,#1              ;556
000434  2c04              CMP      r4,#4                 ;525
000436  f6ffaf3d          BLT      |L402.692|
00043a  eeb4caef          VCMPE.F32 s24,s31               ;568
00043e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;568
000442  d27c              BCS      |L402.1342|
000444  eb060186          ADD      r1,r6,r6,LSL #2       ;570
000448  a822              ADD      r0,sp,#0x88           ;570
00044a  eb000481          ADD      r4,r0,r1,LSL #2       ;570
00044e  eef0fa4c          VMOV.F32 s31,s24               ;569
000452  2100              MOVS     r1,#0                 ;569
000454  4620              MOV      r0,r4                 ;569
000456  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
00045a  4680              MOV      r8,r0                 ;569
00045c  2101              MOVS     r1,#1                 ;569
00045e  e01d              B        |L402.1180|
                  |L402.1120|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_E19__PRETTY_FUNCTION__ ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::__PRETTY_FUNCTION__
                  |L402.1124|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_1 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 3)
                  |L402.1128|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_0 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 2)
                  |L402.1132|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string
                  |L402.1136|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_2 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 4)
                  |L402.1140|
                          DCD      _ZN4Anki8Embedded6Point3IdEC1Ev ; Anki::Embedded::Point3<double>::Point3()
                  |L402.1144|
000478  00000000          DCFD     0x3ff0000000000000 ; 1
00047c  3ff00000
                  |L402.1152|
000480  7f7fffff          DCFS     0x7f7fffff ; 3.4028234663852886e+38
                  |L402.1156|
                          DCD      __ARM__ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA__anon0
                  |L402.1160|
                          DCD      _ZN4Anki8Embedded5ArrayIdEC1Ev ; Anki::Embedded::Array<double>::Array()
                          DCD      0x00000000
                  |L402.1168|
000490  00000000          DCFD     0x0000000000000000 ; 0
000494  00000000
                  |L402.1176|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_5 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 7)
                  |L402.1180|
00049c  4620              MOV      r0,r4                 ;569
00049e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi ; Anki::Embedded::Array<double>::get_size(int) const
0004a2  4607              MOV      r7,r0                 ;569
0004a4  4658              MOV      r0,r11                ;569
0004a6  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
0004aa  b330              CBZ      r0,|L402.1274|
0004ac  4620              MOV      r0,r4                 ;570
0004ae  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIdE7IsValidEv ; Anki::Embedded::Array<double>::IsValid() const
0004b2  b310              CBZ      r0,|L402.1274|
0004b4  f8db0000          LDR      r0,[r11,#0]           ;570
0004b8  4540              CMP      r0,r8                 ;570
0004ba  bf04              ITT      EQ                    ;570
0004bc  f8db1004          LDREQ    r1,[r11,#4]           ;570
0004c0  42b9              CMPEQ    r1,r7                 ;570
0004c2  d026              BEQ      |L402.1298|
0004c4  f44f7127          MOV      r1,#0x29c             ;570
0004c8  4838              LDR      r0,|L402.1452|
0004ca  e9cd0100          STRD     r0,r1,[sp,#0]         ;570
0004ce  4b38              LDR      r3,|L402.1456|
0004d0  4a38              LDR      r2,|L402.1460|
0004d2  4939              LDR      r1,|L402.1464|
0004d4  2005              MOVS     r0,#5                 ;570
0004d6  f7fffffe          BL       _Anki_Log
0004da  e041              B        |L402.1376|
                  |L402.1244|
0004dc  f44f70f3          MOV      r0,#0x1e6             ;486
0004e0  f8cd8000          STR      r8,[sp,#0]            ;486
0004e4  e9cd0501          STRD     r0,r5,[sp,#4]         ;486
0004e8  4b34              LDR      r3,|L402.1468|
0004ea  4a35              LDR      r2,|L402.1472|
0004ec  4935              LDR      r1,|L402.1476|
0004ee  2005              MOVS     r0,#5                 ;486
0004f0  f7fffffe          BL       _Anki_Log
0004f4  f04f7080          MOV      r0,#0x1000000         ;486
0004f8  e5c3              B        |L402.130|
                  |L402.1274|
0004fa  f2402199          MOV      r1,#0x299             ;486
0004fe  482b              LDR      r0,|L402.1452|
000500  e9cd0100          STRD     r0,r1,[sp,#0]         ;486
000504  4b2a              LDR      r3,|L402.1456|
000506  4a30              LDR      r2,|L402.1480|
000508  492b              LDR      r1,|L402.1464|
00050a  2005              MOVS     r0,#5                 ;486
00050c  f7fffffe          BL       _Anki_Log
000510  e026              B        |L402.1376|
                  |L402.1298|
000512  2100              MOVS     r1,#0                 ;486
000514  2800              CMP      r0,#0                 ;486
000516  dd23              BLE      |L402.1376|
                  |L402.1304|
000518  68a2              LDR      r2,[r4,#8]            ;486
00051a  6920              LDR      r0,[r4,#0x10]         ;486
00051c  f8db3010          LDR      r3,[r11,#0x10]        ;486
000520  fb010202          MLA      r2,r1,r2,r0           ;486
000524  f8db0008          LDR      r0,[r11,#8]           ;486
000528  f8dbc004          LDR      r12,[r11,#4]          ;486
00052c  fb013300          MLA      r3,r1,r0,r3           ;486
000530  2000              MOVS     r0,#0                 ;486
000532  f1bc0f00          CMP      r12,#0                ;486
000536  dd0e              BLE      |L402.1366|
                  |L402.1336|
000538  eb020cc0          ADD      r12,r2,r0,LSL #3      ;486
00053c  e000              B        |L402.1344|
                  |L402.1342|
00053e  e022              B        |L402.1414|
                  |L402.1344|
000540  ed9c0b00          VLDR     d0,[r12,#0]           ;486
000544  eb030cc0          ADD      r12,r3,r0,LSL #3      ;486
000548  1c40              ADDS     r0,r0,#1              ;486
00054a  ed8c0b00          VSTR     d0,[r12,#0]           ;486
00054e  f8dbc004          LDR      r12,[r11,#4]          ;486
000552  4584              CMP      r12,r0                ;486
000554  dcf0              BGT      |L402.1336|
                  |L402.1366|
000556  f8db0000          LDR      r0,[r11,#0]           ;486
00055a  1c49              ADDS     r1,r1,#1              ;486
00055c  4288              CMP      r0,r1                 ;486
00055e  dcdb              BGT      |L402.1304|
                  |L402.1376|
000560  eb060246          ADD      r2,r6,r6,LSL #1       ;571
000564  a90a              ADD      r1,sp,#0x28           ;571
000566  eb0101c2          ADD      r1,r1,r2,LSL #3       ;571
00056a  f8dd0418          LDR      r0,[sp,#0x418]        ;571
00056e  ed910b00          VLDR     d0,[r1,#0]            ;571
000572  ed800b00          VSTR     d0,[r0,#0]            ;571
000576  ed910b02          VLDR     d0,[r1,#8]            ;571
00057a  ed800b02          VSTR     d0,[r0,#8]            ;571
00057e  ed910b04          VLDR     d0,[r1,#0x10]         ;571
000582  ed800b04          VSTR     d0,[r0,#0x10]         ;571
                  |L402.1414|
000586  2d03              CMP      r5,#3                 ;574
000588  da06              BGE      |L402.1432|
00058a  a8ce              ADD      r0,sp,#0x338          ;577
00058c  eb000085          ADD      r0,r0,r5,LSL #2       ;577
000590  99ce              LDR      r1,[sp,#0x338]        ;577
000592  6842              LDR      r2,[r0,#4]            ;577
000594  92ce              STR      r2,[sp,#0x338]        ;577
000596  6041              STR      r1,[r0,#4]            ;577
                  |L402.1432|
000598  480c              LDR      r0,|L402.1484|
00059a  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00059e  1c6d              ADDS     r5,r5,#1              ;580
0005a0  2d04              CMP      r5,#4                 ;495
0005a2  f6ffae4c          BLT      |L402.574|
0005a6  2000              MOVS     r0,#0                 ;585
0005a8  e56b              B        |L402.130|
;;;587    
                          ENDP

0005aa  0000              DCW      0x0000
                  |L402.1452|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
                  |L402.1456|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_1 ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::string (instance 3)
                  |L402.1460|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_2 ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::string (instance 4)
                  |L402.1464|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::string
                  |L402.1468|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_1 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 3)
                  |L402.1472|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_4 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 6)
                  |L402.1476|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_3 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 5)
                  |L402.1480|
                          DCD      _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEEs_0 ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::string (instance 2)
                  |L402.1484|
                          DCD      _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_Es_5 ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::string (instance 7)

                          AREA ||area_number.403||, COMGROUP=_ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_, LINKORDER=||t._ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.403||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_||
                          DCD      0x00000001

                          AREA ||t._ZNSs9_C_getRepEjj||, COMGROUP=_ZNSs9_C_getRepEjj, CODE, READONLY, ALIGN=2

                  _ZNSs9_C_getRepEjj PROC ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_getRep(unsigned, unsigned)
;;;62     basic_string<_CharT, _Traits, _Allocator>::
;;;63     _C_getRep (size_type __cap, size_type __len)
000000  b538              PUSH     {r3-r5,lr}
;;;64     {
000002  4615              MOV      r5,r2
000004  460c              MOV      r4,r1
000006  f06f000e          MVN      r0,#0xe
;;;65         _RWSTD_REQUIRES (__cap <= max_size (),
00000a  f1110f0f          CMN      r1,#0xf
00000e  d906              BLS      |L409.30|
000010  4a13              LDR      r2,|L409.96|
000012  460b              MOV      r3,r1
000014  9000              STR      r0,[sp,#0]
000016  4611              MOV      r1,r2
000018  2008              MOVS     r0,#8
00001a  f7fffffe          BL       _ZN4__rw10__rw_throwEiz ; __rw::__rw_throw(int, ...)
                  |L409.30|
;;;66                          (_RWSTD_ERROR_LENGTH_ERROR,
;;;67                           _RWSTD_FUNC ("basic_string::_C_getRep(size_type, "
;;;68                                        "size_type)"), __cap, max_size ()));
;;;69     
;;;70         _RWSTD_REQUIRES (__len <= __cap,
00001e  42a5              CMP      r5,r4
000020  d906              BLS      |L409.48|
000022  4a0f              LDR      r2,|L409.96|
000024  462b              MOV      r3,r5
000026  4611              MOV      r1,r2
000028  2008              MOVS     r0,#8
00002a  9400              STR      r4,[sp,#0]
00002c  f7fffffe          BL       _ZN4__rw10__rw_throwEiz ; __rw::__rw_throw(int, ...)
                  |L409.48|
;;;71                          (_RWSTD_ERROR_LENGTH_ERROR,
;;;72                           _RWSTD_FUNC ("basic_string::_C_getRep(size_type, "
;;;73                                        "size_type)"), __len, __cap));
;;;74     
;;;75         if (!__cap) {
000030  2c00              CMP      r4,#0
;;;76             _RWSTD_ASSERT (!__len);
;;;77     
;;;78     #ifndef _RWSTD_NO_COLLAPSE_TEMPLATE_STATICS
;;;79     
;;;80             return &__nullref;
000032  bf04              ITT      EQ
000034  480b              LDREQ    r0,|L409.100|
;;;81     
;;;82     #else   // if defined (_RWSTD_NO_COLLAPSE_TEMPLATE_STATICS)
;;;83     
;;;84             return _RWSTD_REINTERPRET_CAST (_C_string_ref_type*, &_RW::__nullref);
;;;85     
;;;86     #endif   // _RWSTD_NO_COLLAPSE_TEMPLATE_STATICS
;;;87     
;;;88         }
;;;89     
;;;90         // allocate, initialize the __string_ref, and initialize each character
;;;91         _C_string_ref_type * __ret =
;;;92         _RWSTD_REINTERPRET_CAST (_C_string_ref_type*,
;;;93                 _RWSTD_VALUE_ALLOC (_C_value_alloc_type,
;;;94                                     allocate (__cap + sizeof (_C_string_ref_type) /
;;;95                                               sizeof (value_type) + 2)));
;;;96     
;;;97         // avoid copy construction (mutex isn't copy-constructible)
;;;98         // _C_ref_alloc_type (*this).construct (__ret, _C_string_ref_type ());
;;;99         new (__ret) _C_string_ref_type ();
;;;100    
;;;101    #ifndef _RWSTD_NO_STRING_REF_COUNT
;;;102    
;;;103        // set initial reference count to 1
;;;104        __ret->_C_init (1, __cap, __len);
;;;105    
;;;106    #else   // if defined (_RWSTD_NO_STRING_REF_COUNT)
;;;107    
;;;108        // initial reference count is 0 (ref counting disabled)
;;;109        __ret->_C_init (0, __cap, __len);
;;;110    
;;;111    #endif   // _RWSTD_NO_STRING_REF_COUNT
;;;112    
;;;113    
;;;114        _RWSTD_VALUE_ALLOC (_C_value_alloc_type, construct (__ret->data () + __len,
;;;115            value_type ()));
;;;116    
;;;117        return __ret;
;;;118    }
000036  bd38              POPEQ    {r3-r5,pc}
000038  f104000e          ADD      r0,r4,#0xe            ;91
00003c  2100              MOVS     r1,#0                 ;91
00003e  f7fffffe          BL       _ZN4__rw13__rw_allocateEji ; __rw::__rw_allocate(unsigned, int)
000042  2300              MOVS     r3,#0                 ;91
000044  b110              CBZ      r0,|L409.76|
000046  6003              STR      r3,[r0,#0]            ;99
000048  6043              STR      r3,[r0,#4]            ;99
00004a  6083              STR      r3,[r0,#8]            ;99
                  |L409.76|
00004c  f100010c          ADD      r1,r0,#0xc            ;99
000050  6003              STR      r3,[r0,#0]            ;99
000052  e9c04501          STRD     r4,r5,[r0,#4]         ;99
000056  1949              ADDS     r1,r1,r5              ;114
000058  bf18              IT       NE                    ;114
00005a  700b              STRBNE   r3,[r1,#0]            ;114
00005c  bd38              POP      {r3-r5,pc}
;;;119    
                          ENDP

00005e  0000              DCW      0x0000
                  |L409.96|
                          DCD      _ZZNSs9_C_getRepEjjEs ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_getRep(unsigned, unsigned)::string
                  |L409.100|
                          DCD      _ZNSs9__nullrefE ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::__nullref

                          AREA ||area_number.410||, COMGROUP=_ZNSs9_C_getRepEjj, LINKORDER=||t._ZNSs9_C_getRepEjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.410||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSs9_C_getRepEjj||
                          DCD      0x00000001

                          AREA ||t._ZNSs9_C_unlinkEv||, COMGROUP=_ZNSs9_C_unlinkEv, CODE, READONLY, ALIGN=2

                  _ZNSs9_C_unlinkEv PROC ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
;;;878    template <class _CharT, class _Traits , class _Allocator>
;;;879    inline void basic_string<_CharT, _Traits, _Allocator>::_C_unlink()
000000  4a0c              LDR      r2,|L416.52|
;;;880    {
;;;881        _RWSTD_ASSERT (0 != _C_data);
;;;882    
;;;883        if (data () == _C_null ())
000002  6801              LDR      r1,[r0,#0]
000004  4291              CMP      r1,r2
;;;884            return;
;;;885    
;;;886        if (_C_pref ()->_C_ref_count () == 0 || _C_pref ()->_C_dec_ref () == 0) {
;;;887            // Required to pass same size to deallocate as allocate (see string.cc).
;;;888            // Also note that we cannot call capacity() after the destroy() call.
;;;889            size_type __size =
;;;890                capacity () + sizeof (_C_string_ref_type) / sizeof (value_type) + 2;
;;;891    
;;;892            // explicitly destroy POD
;;;893            _C_pref ()->_C_destroy ();
;;;894            
;;;895            _C_ref_alloc_type (*this).destroy (_C_pref ());
;;;896            _RWSTD_VALUE_ALLOC (_C_value_alloc_type,
;;;897                                deallocate (_RWSTD_REINTERPRET_CAST (pointer,
;;;898                                                                     _C_pref()),
;;;899                                            __size));
;;;900        }
;;;901    }
000006  bf08              IT       EQ
000008  4770              BXEQ     lr
00000a  f8512d0c          LDR      r2,[r1,#-0xc]!
00000e  f1b23fff          CMP      r2,#0xffffffff
000012  d007              BEQ      |L416.36|
000014  4b08              LDR      r3,|L416.56|
000016  4299              CMP      r1,r3                 ;886
000018  bf08              IT       EQ
00001a  4770              BXEQ     lr
00001c  1e52              SUBS     r2,r2,#1
00001e  600a              STR      r2,[r1,#0]
000020  bf28              IT       CS
000022  4770              BXCS     lr
                  |L416.36|
000024  6800              LDR      r0,[r0,#0]
000026  2200              MOVS     r2,#0
000028  f8501c08          LDR      r1,[r0,#-8]
00002c  380c              SUBS     r0,r0,#0xc
00002e  310e              ADDS     r1,r1,#0xe
000030  f7ffbffe          B.W      _ZN4__rw15__rw_deallocateEPvji ; __rw::__rw_deallocate(void*, unsigned, int)
;;;902    
                          ENDP

                  |L416.52|
                          DCD      _ZNSs9__nullrefE+0xc ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::__nullref
                  |L416.56|
                          DCD      _ZNSs9__nullrefE ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::__nullref

                          AREA ||area_number.417||, COMGROUP=_ZNSs9_C_unlinkEv, LINKORDER=||t._ZNSs9_C_unlinkEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.417||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSs9_C_unlinkEv||
                          DCD      0x00000001

                          AREA ||t._ZNKSt8numpunctIcE16do_decimal_pointEv||, COMGROUP=_ZNKSt8numpunctIcE16do_decimal_pointEv, CODE, READONLY, ALIGN=1

                  _ZNKSt8numpunctIcE16do_decimal_pointEv PROC ; std::numpunct<char>::do_decimal_point() const
;;;508    
;;;509        virtual char_type do_decimal_point () const {
000000  7c00              LDRB     r0,[r0,#0x10]
;;;510            return this->_C_dp;
;;;511        }
000002  4770              BX       lr
;;;512    
                          ENDP


                          AREA ||area_number.424||, COMGROUP=_ZNKSt8numpunctIcE16do_decimal_pointEv, LINKORDER=||t._ZNKSt8numpunctIcE16do_decimal_pointEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.424||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt8numpunctIcE16do_decimal_pointEv||
                          DCD      0x00000001

                          AREA ||t._ZNKSt8numpunctIcE16do_thousands_sepEv||, COMGROUP=_ZNKSt8numpunctIcE16do_thousands_sepEv, CODE, READONLY, ALIGN=1

                  _ZNKSt8numpunctIcE16do_thousands_sepEv PROC ; std::numpunct<char>::do_thousands_sep() const
;;;512    
;;;513        virtual char_type do_thousands_sep () const {
000000  7c40              LDRB     r0,[r0,#0x11]
;;;514            return this->_C_ts;
;;;515        }
000002  4770              BX       lr
;;;516    
                          ENDP


                          AREA ||area_number.431||, COMGROUP=_ZNKSt8numpunctIcE16do_thousands_sepEv, LINKORDER=||t._ZNKSt8numpunctIcE16do_thousands_sepEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.431||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt8numpunctIcE16do_thousands_sepEv||
                          DCD      0x00000001

                          AREA ||t._ZNKSt8numpunctIcE11do_groupingEv||, COMGROUP=_ZNKSt8numpunctIcE11do_groupingEv, CODE, READONLY, ALIGN=2

                  _ZNKSt8numpunctIcE11do_groupingEv PROC ; std::numpunct<char>::do_grouping() const
;;;516    
;;;517        virtual string do_grouping () const {
000000  b570              PUSH     {r4-r6,lr}
000002  460d              MOV      r5,r1
000004  6949              LDR      r1,[r1,#0x14]
000006  4604              MOV      r4,r0
000008  f8510c0c          LDR      r0,[r1,#-0xc]
00000c  f1b03fff          CMP      r0,#0xffffffff
000010  d00a              BEQ      |L437.40|
000012  f1a1000c          SUB      r0,r1,#0xc
000016  6021              STR      r1,[r4,#0]
000018  490b              LDR      r1,|L437.72|
00001a  4288              CMP      r0,r1
;;;518            return this->_C_gr;
;;;519        }
00001c  bf08              IT       EQ
00001e  bd70              POPEQ    {r4-r6,pc}
000020  6801              LDR      r1,[r0,#0]
000022  1c49              ADDS     r1,r1,#1
000024  6001              STR      r1,[r0,#0]
000026  bd70              POP      {r4-r6,pc}
                  |L437.40|
000028  f8516c04          LDR      r6,[r1,#-4]
00002c  4620              MOV      r0,r4
00002e  4632              MOV      r2,r6
000030  4631              MOV      r1,r6
000032  f7fffffe          BL       _ZNSs9_C_getRepEjj ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_getRep(unsigned, unsigned)
000036  300c              ADDS     r0,r0,#0xc
000038  6020              STR      r0,[r4,#0]
00003a  4632              MOV      r2,r6
00003c  6969              LDR      r1,[r5,#0x14]
00003e  e8bd4070          POP      {r4-r6,lr}
000042  f7ffbffe          B.W      __aeabi_memcpy
;;;520    
                          ENDP

000046  0000              DCW      0x0000
                  |L437.72|
                          DCD      _ZNSs9__nullrefE ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::__nullref

                          AREA ||area_number.438||, COMGROUP=_ZNKSt8numpunctIcE11do_groupingEv, LINKORDER=||t._ZNKSt8numpunctIcE11do_groupingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.438||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt8numpunctIcE11do_groupingEv||
                          DCD      0x00000001

                          AREA ||t._ZNKSt8numpunctIcE11do_truenameEv||, COMGROUP=_ZNKSt8numpunctIcE11do_truenameEv, CODE, READONLY, ALIGN=2

                  _ZNKSt8numpunctIcE11do_truenameEv PROC ; std::numpunct<char>::do_truename() const
;;;520    
;;;521        virtual string_type do_truename () const {
000000  b570              PUSH     {r4-r6,lr}
000002  460d              MOV      r5,r1
000004  6989              LDR      r1,[r1,#0x18]
000006  4604              MOV      r4,r0
000008  f8510c0c          LDR      r0,[r1,#-0xc]
00000c  f1b03fff          CMP      r0,#0xffffffff
000010  d00a              BEQ      |L444.40|
000012  f1a1000c          SUB      r0,r1,#0xc
000016  6021              STR      r1,[r4,#0]
000018  490b              LDR      r1,|L444.72|
00001a  4288              CMP      r0,r1
;;;522            return this->_C_tn;
;;;523        }
00001c  bf08              IT       EQ
00001e  bd70              POPEQ    {r4-r6,pc}
000020  6801              LDR      r1,[r0,#0]
000022  1c49              ADDS     r1,r1,#1
000024  6001              STR      r1,[r0,#0]
000026  bd70              POP      {r4-r6,pc}
                  |L444.40|
000028  f8516c04          LDR      r6,[r1,#-4]
00002c  4620              MOV      r0,r4
00002e  4632              MOV      r2,r6
000030  4631              MOV      r1,r6
000032  f7fffffe          BL       _ZNSs9_C_getRepEjj ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_getRep(unsigned, unsigned)
000036  300c              ADDS     r0,r0,#0xc
000038  6020              STR      r0,[r4,#0]
00003a  4632              MOV      r2,r6
00003c  69a9              LDR      r1,[r5,#0x18]
00003e  e8bd4070          POP      {r4-r6,lr}
000042  f7ffbffe          B.W      __aeabi_memcpy
;;;524    
                          ENDP

000046  0000              DCW      0x0000
                  |L444.72|
                          DCD      _ZNSs9__nullrefE ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::__nullref

                          AREA ||area_number.445||, COMGROUP=_ZNKSt8numpunctIcE11do_truenameEv, LINKORDER=||t._ZNKSt8numpunctIcE11do_truenameEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.445||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt8numpunctIcE11do_truenameEv||
                          DCD      0x00000001

                          AREA ||t._ZNKSt8numpunctIcE12do_falsenameEv||, COMGROUP=_ZNKSt8numpunctIcE12do_falsenameEv, CODE, READONLY, ALIGN=2

                  _ZNKSt8numpunctIcE12do_falsenameEv PROC ; std::numpunct<char>::do_falsename() const
;;;524    
;;;525        virtual string_type do_falsename () const {
000000  b570              PUSH     {r4-r6,lr}
000002  460d              MOV      r5,r1
000004  69c9              LDR      r1,[r1,#0x1c]
000006  4604              MOV      r4,r0
000008  f8510c0c          LDR      r0,[r1,#-0xc]
00000c  f1b03fff          CMP      r0,#0xffffffff
000010  d00a              BEQ      |L451.40|
000012  f1a1000c          SUB      r0,r1,#0xc
000016  6021              STR      r1,[r4,#0]
000018  490b              LDR      r1,|L451.72|
00001a  4288              CMP      r0,r1
;;;526            return this->_C_fn;
;;;527        }
00001c  bf08              IT       EQ
00001e  bd70              POPEQ    {r4-r6,pc}
000020  6801              LDR      r1,[r0,#0]
000022  1c49              ADDS     r1,r1,#1
000024  6001              STR      r1,[r0,#0]
000026  bd70              POP      {r4-r6,pc}
                  |L451.40|
000028  f8516c04          LDR      r6,[r1,#-4]
00002c  4620              MOV      r0,r4
00002e  4632              MOV      r2,r6
000030  4631              MOV      r1,r6
000032  f7fffffe          BL       _ZNSs9_C_getRepEjj ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_getRep(unsigned, unsigned)
000036  300c              ADDS     r0,r0,#0xc
000038  6020              STR      r0,[r4,#0]
00003a  4632              MOV      r2,r6
00003c  69e9              LDR      r1,[r5,#0x1c]
00003e  e8bd4070          POP      {r4-r6,lr}
000042  f7ffbffe          B.W      __aeabi_memcpy
;;;528    
                          ENDP

000046  0000              DCW      0x0000
                  |L451.72|
                          DCD      _ZNSs9__nullrefE ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::__nullref

                          AREA ||area_number.452||, COMGROUP=_ZNKSt8numpunctIcE12do_falsenameEv, LINKORDER=||t._ZNKSt8numpunctIcE12do_falsenameEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.452||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt8numpunctIcE12do_falsenameEv||
                          DCD      0x00000001

                          AREA ||i._ZNSt8numpunctIcED0Ev||, COMGROUP=_ZNSt8numpunctIcED0Ev, CODE, READONLY, ALIGN=1

                  _ZNSt8numpunctIcED0Ev PROC ; std::numpunct<char>::~numpunct__deallocating()
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f1000410          ADD      r4,r0,#0x10
000008  301c              ADDS     r0,r0,#0x1c
00000a  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
00000e  f1040008          ADD      r0,r4,#8
000012  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
000016  1d20              ADDS     r0,r4,#4
000018  f7fffffe          BL       _ZNSs9_C_unlinkEv ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_C_unlink()
00001c  4628              MOV      r0,r5
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      _ZdlPv ; operator delete (void*)
                          ENDP


                          AREA ||area_number.459||, COMGROUP=_ZNSt8numpunctIcED0Ev, LINKORDER=||i._ZNSt8numpunctIcED0Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.459||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNSt8numpunctIcED0Ev||
                          DCD      0x00000001

                          AREA ||i._ZSt4sqrtf||, COMGROUP=_ZSt4sqrtf, CODE, READONLY, ALIGN=1

                  _ZSt4sqrtf PROC ; std::sqrt(float)
;;;880        inline float sinh(float __x)  { return sinhf(__x); }
;;;881        inline float sqrt(float __x)  { return sqrtf(__x); }
000000  eef10ac0          VSQRT.F32 s1,s0
000004  eef40a60          VCMP.F32 s1,s1
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  bf04              ITT      EQ
00000e  eeb00a60          VMOVEQ.F32 s0,s1
000012  4770              BXEQ     lr
000014  f7ffbffe          B.W      __hardfp_sqrtf
;;;882        inline float _sqrt(float __x) { return _sqrtf(__x); }
                          ENDP


                          AREA ||area_number.463||, COMGROUP=_ZSt4sqrtf, LINKORDER=||i._ZSt4sqrtf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.463||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZSt4sqrtf||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded6Point3IfEmiERKS2_||, COMGROUP=_ZNK4Anki8Embedded6Point3IfEmiERKS2_, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded6Point3IfEmiERKS2_ PROC ; Anki::Embedded::Point3<float>::operator -(const Anki::Embedded::Point3<float>&) const
;;;192    
;;;193        template<typename Type> Point3<Type> Point3<Type>::operator- (const Point3<Type> &point2) const
000000  ed910a00          VLDR     s0,[r1,#0]
;;;194        {
;;;195          return Point3<Type>(this->x-point2.x, this->y-point2.y, this->z-point2.z);
000004  edd20a00          VLDR     s1,[r2,#0]
000008  edd21a02          VLDR     s3,[r2,#8]
00000c  ee301a60          VSUB.F32 s2,s0,s1
000010  ed910a01          VLDR     s0,[r1,#4]
000014  edd20a01          VLDR     s1,[r2,#4]
000018  ee700a60          VSUB.F32 s1,s0,s1
00001c  ed910a02          VLDR     s0,[r1,#8]
000020  ed801a00          VSTR     s2,[r0,#0]
000024  edc00a01          VSTR     s1,[r0,#4]
000028  ee300a61          VSUB.F32 s0,s0,s3
00002c  ed800a02          VSTR     s0,[r0,#8]
;;;196        }
000030  4770              BX       lr
;;;197    
                          ENDP


                          AREA ||area_number.470||, COMGROUP=_ZNK4Anki8Embedded6Point3IfEmiERKS2_, LINKORDER=||t._ZNK4Anki8Embedded6Point3IfEmiERKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.470||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded6Point3IfEmiERKS2_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv||, COMGROUP=_ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv PROC ; Anki::Embedded::Point3<float>::MakeUnitLength()
;;;246    
;;;247        template<typename Type> f32 Point3<Type>::MakeUnitLength()
000000  b510              PUSH     {r4,lr}
000002  ed900a00          VLDR     s0,[r0,#0]
000006  edd00a01          VLDR     s1,[r0,#4]
;;;248        {
00000a  4604              MOV      r4,r0
00000c  ee200a00          VMUL.F32 s0,s0,s0
000010  ee000aa0          VMLA.F32 s0,s1,s1
000014  edd00a02          VLDR     s1,[r0,#8]
000018  ee000aa0          VMLA.F32 s0,s1,s1
00001c  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
;;;249          const f32 L = this->Length();
;;;250          if(L != 0) {
000020  eeb50ac0          VCMPE.F32 s0,#0.0
000024  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;251            this->operator*=(1.f / L);
;;;252          }
;;;253          return L;
;;;254        }
000028  bf08              IT       EQ
00002a  bd10              POPEQ    {r4,pc}
00002c  eeb71a00          VMOV.F32 s2,#1.00000000        ;251
000030  eec10a00          VDIV.F32 s1,s2,s0              ;251
000034  ed941a00          VLDR     s2,[r4,#0]            ;251
000038  ee211a20          VMUL.F32 s2,s2,s1              ;251
00003c  ed841a00          VSTR     s2,[r4,#0]            ;251
000040  ed941a01          VLDR     s2,[r4,#4]            ;251
000044  ee211a20          VMUL.F32 s2,s2,s1              ;251
000048  ed841a01          VSTR     s2,[r4,#4]            ;251
00004c  ed941a02          VLDR     s2,[r4,#8]            ;251
000050  ee610a20          VMUL.F32 s1,s2,s1              ;251
000054  edc40a02          VSTR     s1,[r4,#8]            ;251
000058  bd10              POP      {r4,pc}
;;;255    
                          ENDP


                          AREA ||area_number.477||, COMGROUP=_ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv, LINKORDER=||t._ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.477||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Point3IfE14MakeUnitLengthEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded6Point3IdEmiERKS2_||, COMGROUP=_ZNK4Anki8Embedded6Point3IdEmiERKS2_, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded6Point3IdEmiERKS2_ PROC ; Anki::Embedded::Point3<double>::operator -(const Anki::Embedded::Point3<double>&) const
;;;192    
;;;193        template<typename Type> Point3<Type> Point3<Type>::operator- (const Point3<Type> &point2) const
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;194        {
;;;195          return Point3<Type>(this->x-point2.x, this->y-point2.y, this->z-point2.z);
000004  ed921b00          VLDR     d1,[r2,#0]
000008  ed910b00          VLDR     d0,[r1,#0]
00000c  4691              MOV      r9,r2                 ;194
00000e  468a              MOV      r10,r1                ;194
000010  4604              MOV      r4,r0                 ;194
000012  ec532b11          VMOV     r2,r3,d1
000016  ec510b10          VMOV     r0,r1,d0
00001a  f7fffffe          BL       __aeabi_dsub
00001e  ed991b02          VLDR     d1,[r9,#8]
000022  ed9a0b02          VLDR     d0,[r10,#8]
000026  4605              MOV      r5,r0
000028  460e              MOV      r6,r1
00002a  ec532b11          VMOV     r2,r3,d1
00002e  ec510b10          VMOV     r0,r1,d0
000032  f7fffffe          BL       __aeabi_dsub
000036  ed991b04          VLDR     d1,[r9,#0x10]
00003a  ed9a0b04          VLDR     d0,[r10,#0x10]
00003e  4607              MOV      r7,r0
000040  4688              MOV      r8,r1
000042  ec532b11          VMOV     r2,r3,d1
000046  ec510b10          VMOV     r0,r1,d0
00004a  f7fffffe          BL       __aeabi_dsub
00004e  e9c40104          STRD     r0,r1,[r4,#0x10]
000052  e88401e0          STM      r4,{r5-r8}
;;;196        }
000056  e8bd87f0          POP      {r4-r10,pc}
;;;197    
                          ENDP


                          AREA ||area_number.484||, COMGROUP=_ZNK4Anki8Embedded6Point3IdEmiERKS2_, LINKORDER=||t._ZNK4Anki8Embedded6Point3IdEmiERKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.484||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded6Point3IdEmiERKS2_||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded6Point3IdE6LengthEv||, COMGROUP=_ZNK4Anki8Embedded6Point3IdE6LengthEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded6Point3IdE6LengthEv PROC ; Anki::Embedded::Point3<double>::Length() const
;;;241    
;;;242        template<typename Type> f32 Point3<Type>::Length() const
000000  b510              PUSH     {r4,lr}
;;;243        {
000002  4604              MOV      r4,r0
000004  ed2d8b04          VPUSH    {d8-d9}
;;;244          return (f32)sqrt((f32)((this->x*this->x) + (this->y*this->y) + (this->z*this->z)));
000008  ed900b04          VLDR     d0,[r0,#0x10]
00000c  ec532b10          VMOV     r2,r3,d0
000010  ec510b10          VMOV     r0,r1,d0
000014  f7fffffe          BL       __aeabi_dmul
000018  ed940b02          VLDR     d0,[r4,#8]
00001c  ec410b18          VMOV     d8,r0,r1
000020  ec532b10          VMOV     r2,r3,d0
000024  ec510b10          VMOV     r0,r1,d0
000028  f7fffffe          BL       __aeabi_dmul
00002c  ed940b00          VLDR     d0,[r4,#0]
000030  ec410b19          VMOV     d9,r0,r1
000034  ec532b10          VMOV     r2,r3,d0
000038  ec510b10          VMOV     r0,r1,d0
00003c  f7fffffe          BL       __aeabi_dmul
000040  ec532b19          VMOV     r2,r3,d9
000044  f7fffffe          BL       __aeabi_dadd
000048  ec532b18          VMOV     r2,r3,d8
00004c  f7fffffe          BL       __aeabi_dadd
000050  f7fffffe          BL       __aeabi_d2f
000054  ecbd8b04          VPOP     {d8-d9}
000058  ee000a10          VMOV     s0,r0
00005c  e8bd4010          POP      {r4,lr}
000060  f7ffbffe          B.W      _ZSt4sqrtf ; std::sqrt(float)
;;;245        }
;;;246    
                          ENDP


                          AREA ||area_number.491||, COMGROUP=_ZNK4Anki8Embedded6Point3IdE6LengthEv, LINKORDER=||t._ZNK4Anki8Embedded6Point3IdE6LengthEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.491||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded6Point3IdE6LengthEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Point3IdE14MakeUnitLengthEv||, COMGROUP=_ZN4Anki8Embedded6Point3IdE14MakeUnitLengthEv, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded6Point3IdE14MakeUnitLengthEv PROC ; Anki::Embedded::Point3<double>::MakeUnitLength()
;;;246    
;;;247        template<typename Type> f32 Point3<Type>::MakeUnitLength()
000000  b510              PUSH     {r4,lr}
;;;248        {
000002  4604              MOV      r4,r0
000004  ed2d8b04          VPUSH    {d8-d9}
;;;249          const f32 L = this->Length();
000008  f7fffffe          BL       _ZNK4Anki8Embedded6Point3IdE6LengthEv ; Anki::Embedded::Point3<double>::Length() const
;;;250          if(L != 0) {
00000c  eeb50ac0          VCMPE.F32 s0,#0.0
000010  eeb09a40          VMOV.F32 s18,s0                ;249
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  d027              BEQ      |L497.106|
;;;251            this->operator*=(1.f / L);
00001a  eef70a00          VMOV.F32 s1,#1.00000000
00001e  ee800a89          VDIV.F32 s0,s1,s18
000022  ee100a10          VMOV     r0,s0
000026  f7fffffe          BL       __aeabi_f2d
00002a  ec410b18          VMOV     d8,r0,r1
00002e  ed941b00          VLDR     d1,[r4,#0]
000032  ec532b18          VMOV     r2,r3,d8
000036  ec510b11          VMOV     r0,r1,d1
00003a  f7fffffe          BL       __aeabi_dmul
00003e  e9c40100          STRD     r0,r1,[r4,#0]
000042  ed941b02          VLDR     d1,[r4,#8]
000046  ec532b18          VMOV     r2,r3,d8
00004a  ec510b11          VMOV     r0,r1,d1
00004e  f7fffffe          BL       __aeabi_dmul
000052  e9c40102          STRD     r0,r1,[r4,#8]
000056  ed941b04          VLDR     d1,[r4,#0x10]
00005a  ec532b18          VMOV     r2,r3,d8
00005e  ec510b11          VMOV     r0,r1,d1
000062  f7fffffe          BL       __aeabi_dmul
000066  e9c40104          STRD     r0,r1,[r4,#0x10]
                  |L497.106|
;;;252          }
;;;253          return L;
00006a  eeb00a49          VMOV.F32 s0,s18
;;;254        }
00006e  ecbd8b04          VPOP     {d8-d9}
000072  bd10              POP      {r4,pc}
;;;255    
                          ENDP


                          AREA ||area_number.498||, COMGROUP=_ZN4Anki8Embedded6Point3IdE14MakeUnitLengthEv, LINKORDER=||t._ZN4Anki8Embedded6Point3IdE14MakeUnitLengthEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.498||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Point3IdE14MakeUnitLengthEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIfE7IsValidEv PROC ; Anki::Embedded::Array<float>::IsValid() const
;;;590    
;;;591        template<typename Type> bool Array<Type>::IsValid() const
000000  6901              LDR      r1,[r0,#0x10]
;;;592        {
000002  b131              CBZ      r1,|L504.18|
;;;593          if(this->data == NULL) {
;;;594            return false;
;;;595          }
;;;596    
;;;597          if(size[0] < 0 || size[1] < 0) {
000004  6801              LDR      r1,[r0,#0]
000006  2900              CMP      r1,#0
000008  bfa1              ITTTT    GE
00000a  6840              LDRGE    r0,[r0,#4]
00000c  2800              CMPGE    r0,#0
;;;598            return false;
;;;599          }
;;;600    
;;;601          return true;
00000e  2001              MOVGE    r0,#1
;;;602        }
000010  4770              BXGE     lr
                  |L504.18|
000012  2000              MOVS     r0,#0                 ;598
000014  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||area_number.505||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.505||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi PROC ; Anki::Embedded::Array<float>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0d              BGE      |L511.36|
000008  f24021e3          MOV      r1,#0x2e3
00000c  4809              LDR      r0,|L511.52|
00000e  e9cd0100          STRD     r0,r1,[sp,#0]
000012  4b09              LDR      r3,|L511.56|
000014  4a09              LDR      r2,|L511.60|
000016  490a              LDR      r1,|L511.64|
000018  2005              MOVS     r0,#5
00001a  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
00001e  b003              ADD      sp,sp,#0xc
000020  2000              MOVS     r0,#0                 ;739
000022  bd00              POP      {pc}
                  |L511.36|
000024  2902              CMP      r1,#2                 ;742
000026  bf2c              ITE      CS                    ;743
000028  2001              MOVCS    r0,#1                 ;743
00002a  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
00002e  b003              ADD      sp,sp,#0xc
000030  bd00              POP      {pc}
;;;747    
                          ENDP

000032  0000              DCW      0x0000
                  |L511.52|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
                  |L511.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_1 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 3)
                  |L511.60|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs_0 ; Anki::Embedded::Array<float>::get_size(int) const::string (instance 2)
                  |L511.64|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiEs ; Anki::Embedded::Array<float>::get_size(int) const::string

                          AREA ||area_number.512||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.512||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIdE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded5ArrayIdE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIdE7IsValidEv PROC ; Anki::Embedded::Array<double>::IsValid() const
;;;590    
;;;591        template<typename Type> bool Array<Type>::IsValid() const
000000  6901              LDR      r1,[r0,#0x10]
;;;592        {
000002  b131              CBZ      r1,|L518.18|
;;;593          if(this->data == NULL) {
;;;594            return false;
;;;595          }
;;;596    
;;;597          if(size[0] < 0 || size[1] < 0) {
000004  6801              LDR      r1,[r0,#0]
000006  2900              CMP      r1,#0
000008  bfa1              ITTTT    GE
00000a  6840              LDRGE    r0,[r0,#4]
00000c  2800              CMPGE    r0,#0
;;;598            return false;
;;;599          }
;;;600    
;;;601          return true;
00000e  2001              MOVGE    r0,#1
;;;602        }
000010  4770              BXGE     lr
                  |L518.18|
000012  2000              MOVS     r0,#0                 ;598
000014  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||area_number.519||, COMGROUP=_ZNK4Anki8Embedded5ArrayIdE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIdE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.519||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIdE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIdE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIdE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIdE8get_sizeEi PROC ; Anki::Embedded::Array<double>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0d              BGE      |L525.36|
000008  f24021e3          MOV      r1,#0x2e3
00000c  4809              LDR      r0,|L525.52|
00000e  e9cd0100          STRD     r0,r1,[sp,#0]
000012  4b09              LDR      r3,|L525.56|
000014  4a09              LDR      r2,|L525.60|
000016  490a              LDR      r1,|L525.64|
000018  2005              MOVS     r0,#5
00001a  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
00001e  b003              ADD      sp,sp,#0xc
000020  2000              MOVS     r0,#0                 ;739
000022  bd00              POP      {pc}
                  |L525.36|
000024  2902              CMP      r1,#2                 ;742
000026  bf2c              ITE      CS                    ;743
000028  2001              MOVCS    r0,#1                 ;743
00002a  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
00002e  b003              ADD      sp,sp,#0xc
000030  bd00              POP      {pc}
;;;747    
                          ENDP

000032  0000              DCW      0x0000
                  |L525.52|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::get_size(int) const::__PRETTY_FUNCTION__
                  |L525.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs_1 ; Anki::Embedded::Array<double>::get_size(int) const::string (instance 3)
                  |L525.60|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs_0 ; Anki::Embedded::Array<double>::get_size(int) const::string (instance 2)
                  |L525.64|
                          DCD      _ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiEs ; Anki::Embedded::Array<double>::get_size(int) const::string

                          AREA ||area_number.526||, COMGROUP=_ZNK4Anki8Embedded5ArrayIdE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIdE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.526||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIdE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZSt3argIfET_RKSt7complexIS0_E||, COMGROUP=_ZSt3argIfET_RKSt7complexIS0_E, CODE, READONLY, ALIGN=2

                  _ZSt3argIfET_RKSt7complexIS0_E PROC ; std::arg<float>(const std::complex<T1>&)
;;;1026     template <class _TypeT>
;;;1027     inline _TypeT arg (const complex<_TypeT>& __a)
000000  b500              PUSH     {lr}
;;;1028     {
000002  b083              SUB      sp,sp,#0xc
;;;1029       return __a == complex<_TypeT>(0,0) ? _TypeT(0) : _RWSTD_C::atan2(__a.imag(), __a.real());
000004  ed9f0a0e          VLDR     s0,|L532.64|
000008  ed8d0a00          VSTR     s0,[sp,#0]
00000c  ed8d0a01          VSTR     s0,[sp,#4]
000010  edd00a00          VLDR     s1,[r0,#0]
000014  eef40a40          VCMP.F32 s1,s0
000018  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001c  d10a              BNE      |L532.52|
00001e  edd01a01          VLDR     s3,[r0,#4]            ;1028
000022  eeb01a40          VMOV.F32 s2,s0                 ;1028
000026  eef41a41          VCMP.F32 s3,s2                 ;1028
00002a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;1028
;;;1030     }
00002e  bf04              ITT      EQ
000030  b003              ADDEQ    sp,sp,#0xc
000032  bd00              POPEQ    {pc}
                  |L532.52|
000034  ed900a01          VLDR     s0,[r0,#4]
000038  f7fffffe          BL       __hardfp_atan2f
00003c  b003              ADD      sp,sp,#0xc
00003e  bd00              POP      {pc}
;;;1031   
                          ENDP

                  |L532.64|
000040  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.533||, COMGROUP=_ZSt3argIfET_RKSt7complexIS0_E, LINKORDER=||t._ZSt3argIfET_RKSt7complexIS0_E||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.533||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZSt3argIfET_RKSt7complexIS0_E||
                          DCD      0x00000001

                          AREA ||t._ZStmlIfESt7complexIT_ERKS1_RKS2_||, COMGROUP=_ZStmlIfESt7complexIT_ERKS1_RKS2_, CODE, READONLY, ALIGN=1

                  _ZStmlIfESt7complexIT_ERKS1_RKS2_ PROC ; std::operator *<float>(const T1&, const std::complex<T1>&)
;;;932      template <class _TypeT>
;;;933      inline complex<_TypeT> operator* (const _TypeT& __lhs, const complex<_TypeT>& __rhs)
000000  ed910a00          VLDR     s0,[r1,#0]
;;;934      {
;;;935        return complex<_TypeT>(__lhs*__rhs.real(), __lhs*__rhs.imag());
000004  edd00a00          VLDR     s1,[r0,#0]
000008  ed911a01          VLDR     s2,[r1,#4]
00000c  ee200a20          VMUL.F32 s0,s0,s1
000010  ee610a20          VMUL.F32 s1,s2,s1
;;;936      }
000014  4770              BX       lr
;;;937    
                          ENDP


                          AREA ||area_number.540||, COMGROUP=_ZStmlIfESt7complexIT_ERKS1_RKS2_, LINKORDER=||t._ZStmlIfESt7complexIT_ERKS1_RKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.540||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZStmlIfESt7complexIT_ERKS1_RKS2_||
                          DCD      0x00000001

                          AREA ||t._ZStplIfESt7complexIT_ERKS1_RKS2_||, COMGROUP=_ZStplIfESt7complexIT_ERKS1_RKS2_, CODE, READONLY, ALIGN=1

                  _ZStplIfESt7complexIT_ERKS1_RKS2_ PROC ; std::operator +<float>(const T1&, const std::complex<T1>&)
;;;896      template <class _TypeT>
;;;897      inline complex<_TypeT> operator+ (const _TypeT& __lhs, const complex<_TypeT>& __rhs)
000000  ed910a00          VLDR     s0,[r1,#0]
;;;898      {
;;;899        return complex<_TypeT>(__lhs+__rhs.real(), __rhs.imag());
000004  edd00a00          VLDR     s1,[r0,#0]
000008  ee300a20          VADD.F32 s0,s0,s1
00000c  edd10a01          VLDR     s1,[r1,#4]
;;;900      }
000010  4770              BX       lr
;;;901    
                          ENDP


                          AREA ||area_number.547||, COMGROUP=_ZStplIfESt7complexIT_ERKS1_RKS2_, LINKORDER=||t._ZStplIfESt7complexIT_ERKS1_RKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.547||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZStplIfESt7complexIT_ERKS1_RKS2_||
                          DCD      0x00000001

                          AREA ||t._ZStdvIfESt7complexIT_ERKS1_RKS2_||, COMGROUP=_ZStdvIfESt7complexIT_ERKS1_RKS2_, CODE, READONLY, ALIGN=1

                  _ZStdvIfESt7complexIT_ERKS1_RKS2_ PROC ; std::operator /<float>(const T1&, const std::complex<T1>&)
;;;950      template <class _TypeT>
;;;951      inline complex<_TypeT> operator/ (const _TypeT& __lhs, const complex<_TypeT>& __rhs)
000000  ed910a00          VLDR     s0,[r1,#0]
000004  edd10a01          VLDR     s1,[r1,#4]
;;;952      {
;;;953        register _TypeT denom = __rhs.real()*__rhs.real() + __rhs.imag()*__rhs.imag();
;;;954        return complex<_TypeT>(__lhs*__rhs.real()/denom,(-__lhs*__rhs.imag())/denom);
000008  edd01a00          VLDR     s3,[r0,#0]
00000c  ee201a00          VMUL.F32 s2,s0,s0              ;953
000010  ee202a21          VMUL.F32 s4,s0,s3
000014  ee611ae0          VNMUL.F32 s3,s3,s1              ;952
000018  ee001aa0          VMLA.F32 s2,s1,s1              ;953
00001c  ee820a01          VDIV.F32 s0,s4,s2
000020  eec10a81          VDIV.F32 s1,s3,s2
;;;955      }
000024  4770              BX       lr
;;;956    
                          ENDP


                          AREA ||area_number.554||, COMGROUP=_ZStdvIfESt7complexIT_ERKS1_RKS2_, LINKORDER=||t._ZStdvIfESt7complexIT_ERKS1_RKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.554||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZStdvIfESt7complexIT_ERKS1_RKS2_||
                          DCD      0x00000001

                          AREA ||t._ZStmlIdESt7complexIT_ERKS1_RKS2_||, COMGROUP=_ZStmlIdESt7complexIT_ERKS1_RKS2_, CODE, READONLY, ALIGN=1

                  _ZStmlIdESt7complexIT_ERKS1_RKS2_ PROC ; std::operator *<double>(const T1&, const std::complex<T1>&)
;;;932      template <class _TypeT>
;;;933      inline complex<_TypeT> operator* (const _TypeT& __lhs, const complex<_TypeT>& __rhs)
000000  b510              PUSH     {r4,lr}
;;;934      {
000002  460c              MOV      r4,r1
000004  ed2d8b04          VPUSH    {d8-d9}
000008  ed910b00          VLDR     d0,[r1,#0]
;;;935        return complex<_TypeT>(__lhs*__rhs.real(), __lhs*__rhs.imag());
00000c  ed908b00          VLDR     d8,[r0,#0]
000010  ec510b10          VMOV     r0,r1,d0
000014  ec532b18          VMOV     r2,r3,d8
000018  f7fffffe          BL       __aeabi_dmul
00001c  ed940b02          VLDR     d0,[r4,#8]
000020  ec410b19          VMOV     d9,r0,r1
000024  ec532b18          VMOV     r2,r3,d8
000028  ec510b10          VMOV     r0,r1,d0
00002c  f7fffffe          BL       __aeabi_dmul
000030  eeb00a49          VMOV.F32 s0,s18
000034  eef00a69          VMOV.F32 s1,s19
;;;936      }
000038  ecbd8b04          VPOP     {d8-d9}
00003c  ec410b11          VMOV     d1,r0,r1
000040  bd10              POP      {r4,pc}
;;;937    
                          ENDP


                          AREA ||area_number.561||, COMGROUP=_ZStmlIdESt7complexIT_ERKS1_RKS2_, LINKORDER=||t._ZStmlIdESt7complexIT_ERKS1_RKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.561||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZStmlIdESt7complexIT_ERKS1_RKS2_||
                          DCD      0x00000001

                          AREA ||t._ZStplIdESt7complexIT_ERKS2_S4_||, COMGROUP=_ZStplIdESt7complexIT_ERKS2_S4_, CODE, READONLY, ALIGN=1

                  _ZStplIdESt7complexIT_ERKS2_S4_ PROC ; std::operator +<double>(const std::complex<T1>&, const std::complex<T1>&)
;;;884      template <class _TypeT>
;;;885      inline complex<_TypeT> operator+ (const complex<_TypeT>& __lhs, const complex<_TypeT>& __rhs)
000000  b510              PUSH     {r4,lr}
;;;886      {
000002  460c              MOV      r4,r1
000004  ed2d8b02          VPUSH    {d8}
000008  b084              SUB      sp,sp,#0x10
00000a  c80f              LDM      r0,{r0-r3}
00000c  e88d000f          STM      sp,{r0-r3}
000010  ed941b00          VLDR     d1,[r4,#0]
000014  ed9d0b00          VLDR     d0,[sp,#0]
000018  ec510b11          VMOV     r0,r1,d1
00001c  ec532b10          VMOV     r2,r3,d0
000020  f7fffffe          BL       __aeabi_dadd
000024  ec410b18          VMOV     d8,r0,r1
000028  ed8d8b00          VSTR     d8,[sp,#0]
00002c  ed942b02          VLDR     d2,[r4,#8]
000030  ed9d1b02          VLDR     d1,[sp,#8]
000034  ec510b12          VMOV     r0,r1,d2
000038  ec532b11          VMOV     r2,r3,d1
00003c  f7fffffe          BL       __aeabi_dadd
;;;887        complex<_TypeT> __tmp = __lhs; return __tmp += __rhs;
;;;888      }
000040  b004              ADD      sp,sp,#0x10
000042  eeb00a48          VMOV.F32 s0,s16
000046  eef00a68          VMOV.F32 s1,s17
00004a  ecbd8b02          VPOP     {d8}
00004e  ec410b11          VMOV     d1,r0,r1
000052  bd10              POP      {r4,pc}
;;;889    
                          ENDP


                          AREA ||area_number.568||, COMGROUP=_ZStplIdESt7complexIT_ERKS2_S4_, LINKORDER=||t._ZStplIdESt7complexIT_ERKS2_S4_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.568||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZStplIdESt7complexIT_ERKS2_S4_||
                          DCD      0x00000001

                          AREA ||t._ZStdvIdESt7complexIT_ERKS1_RKS2_||, COMGROUP=_ZStdvIdESt7complexIT_ERKS1_RKS2_, CODE, READONLY, ALIGN=1

                  _ZStdvIdESt7complexIT_ERKS1_RKS2_ PROC ; std::operator /<double>(const T1&, const std::complex<T1>&)
;;;950      template <class _TypeT>
;;;951      inline complex<_TypeT> operator/ (const _TypeT& __lhs, const complex<_TypeT>& __rhs)
000000  b570              PUSH     {r4-r6,lr}
;;;952      {
000002  460c              MOV      r4,r1
000004  ed2d8b08          VPUSH    {d8-d11}
000008  4605              MOV      r5,r0
00000a  ed919b02          VLDR     d9,[r1,#8]
;;;953        register _TypeT denom = __rhs.real()*__rhs.real() + __rhs.imag()*__rhs.imag();
00000e  ec532b19          VMOV     r2,r3,d9
000012  ec510b19          VMOV     r0,r1,d9
000016  f7fffffe          BL       __aeabi_dmul
00001a  ed948b00          VLDR     d8,[r4,#0]
00001e  ec410b1a          VMOV     d10,r0,r1
000022  ec532b18          VMOV     r2,r3,d8
000026  ec510b18          VMOV     r0,r1,d8
00002a  f7fffffe          BL       __aeabi_dmul
00002e  ec532b1a          VMOV     r2,r3,d10
000032  f7fffffe          BL       __aeabi_dadd
;;;954        return complex<_TypeT>(__lhs*__rhs.real()/denom,(-__lhs*__rhs.imag())/denom);
000036  ed95bb00          VLDR     d11,[r5,#0]
00003a  ec410b1a          VMOV     d10,r0,r1             ;953
00003e  ec532b1b          VMOV     r2,r3,d11
000042  ec510b18          VMOV     r0,r1,d8
000046  f7fffffe          BL       __aeabi_dmul
00004a  ec532b1a          VMOV     r2,r3,d10
00004e  f7fffffe          BL       __aeabi_ddiv
000052  ec410b18          VMOV     d8,r0,r1
000056  ec510b1b          VMOV     r0,r1,d11
00005a  f7fffffe          BL       __aeabi_dneg
00005e  ec532b19          VMOV     r2,r3,d9
000062  f7fffffe          BL       __aeabi_dmul
000066  ec532b1a          VMOV     r2,r3,d10
00006a  f7fffffe          BL       __aeabi_ddiv
00006e  eeb00a48          VMOV.F32 s0,s16
000072  eef00a68          VMOV.F32 s1,s17
;;;955      }
000076  ecbd8b08          VPOP     {d8-d11}
00007a  ec410b11          VMOV     d1,r0,r1
00007e  bd70              POP      {r4-r6,pc}
;;;956    
                          ENDP


                          AREA ||area_number.575||, COMGROUP=_ZStdvIdESt7complexIT_ERKS1_RKS2_, LINKORDER=||t._ZStdvIdESt7complexIT_ERKS1_RKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.575||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZStdvIdESt7complexIT_ERKS1_RKS2_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_||, COMGROUP=_ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_ PROC ; Anki::Embedded::CrossProduct<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&)
;;;262        template<typename Type>
;;;263        Point3<Type> CrossProduct(const Point3<Type>& point1, const Point3<Type>& point2)
000000  ed910a01          VLDR     s0,[r1,#4]
;;;264        {
;;;265          return Point3<Type>(-point2.y*point1.z + point1.y*point2.z,
000004  edd20a02          VLDR     s1,[r2,#8]
000008  ed912a02          VLDR     s4,[r1,#8]
00000c  ed921a01          VLDR     s2,[r2,#4]
000010  ee602a20          VMUL.F32 s5,s0,s1
000014  edd21a00          VLDR     s3,[r2,#0]
000018  ee412a42          VMLS.F32 s5,s2,s4
00001c  ee213a82          VMUL.F32 s6,s3,s4
000020  ed912a00          VLDR     s4,[r1,#0]
000024  ee023a60          VMLS.F32 s6,s4,s1
000028  ee620a01          VMUL.F32 s1,s4,s2
00002c  edc02a00          VSTR     s5,[r0,#0]
000030  ee410ac0          VMLS.F32 s1,s3,s0
000034  ed803a01          VSTR     s6,[r0,#4]
000038  edc00a02          VSTR     s1,[r0,#8]
;;;266            point2.x*point1.z - point1.x*point2.z,
;;;267            -point2.x*point1.y + point1.x*point2.y);
;;;268        }
00003c  4770              BX       lr
;;;269    
                          ENDP


                          AREA ||area_number.582||, COMGROUP=_ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_, LINKORDER=||t._ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.582||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded12CrossProductIfEENS0_6Point3IT_EERKS4_S6_||
                          DCD      0x00000001

                          AREA ||.constdata__ZTISt8numpunctIcE||, COMGROUP=_ZTISt8numpunctIcE, DATA, READONLY, ALIGN=2

                  _ZTISt8numpunctIcE ; typeinfo for std::numpunct<char>
                          DCD      _ZTVN10__cxxabiv121__vmi_class_type_infoE+0x8 ; vtable for __cxxabiv1::__vmi_class_type_info
                          DCD      _ZTSSt8numpunctIcE ; typeinfo name for std::numpunct<char>
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      _ZTINSt6locale5facetE ; typeinfo for std::locale::facet
                          DCD      0x00000002
                          DCD      _ZTIN4__rw18__rw_numpunct_implIcEE ; typeinfo for __rw::__rw_numpunct_impl<char>
                          DCD      0x00001002

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000054  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  53657443          DCB      0x53,0x65,0x74,0x43
00002c  61737428          DCB      0x61,0x73,0x74,0x28
000030  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000034  7420416e          DCB      0x74,0x20,0x41,0x6e
000038  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00003c  456d6265          DCB      0x45,0x6d,0x62,0x65
000040  64646564          DCB      0x64,0x64,0x65,0x64
000044  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000048  7261793c          DCB      0x72,0x61,0x79,0x3c
00004c  496e5479          DCB      0x49,0x6e,0x54,0x79
000050  70653e20          DCB      0x70,0x65,0x3e,0x20
000054  2629205b          DCB      0x26,0x29,0x20,0x5b
000058  77697468          DCB      0x77,0x69,0x74,0x68
00005c  20496e54          DCB      0x20,0x49,0x6e,0x54
000060  79706520          DCB      0x79,0x70,0x65,0x20
000064  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000068  6f61742c          DCB      0x6f,0x61,0x74,0x2c
00006c  20547970          DCB      0x20,0x54,0x79,0x70
000070  65203d20          DCB      0x65,0x20,0x3d,0x20
000074  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000078  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20646f          DCB      0x3d,0x20,0x64,0x6f
000088  75626c65          DCB      0x75,0x62,0x6c,0x65
00008c  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIdE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  646f7562          DCB      0x64,0x6f,0x75,0x62
000054  6c655d00          DCB      0x6c,0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  646f7562          DCB      0x64,0x6f,0x75,0x62
0000bc  6c655d00          DCB      0x6c,0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2064          DCB      0x20,0x3d,0x20,0x64
000094  6f75626c          DCB      0x6f,0x75,0x62,0x6c
000098  655d00            DCB      0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIdE7SetCastIdEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<double>::SetCast<double>(const Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  53657443          DCB      0x53,0x65,0x74,0x43
00002c  61737428          DCB      0x61,0x73,0x74,0x28
000030  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000034  7420416e          DCB      0x74,0x20,0x41,0x6e
000038  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00003c  456d6265          DCB      0x45,0x6d,0x62,0x65
000040  64646564          DCB      0x64,0x64,0x65,0x64
000044  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000048  7261793c          DCB      0x72,0x61,0x79,0x3c
00004c  496e5479          DCB      0x49,0x6e,0x54,0x79
000050  70653e20          DCB      0x70,0x65,0x3e,0x20
000054  2629205b          DCB      0x26,0x29,0x20,0x5b
000058  77697468          DCB      0x77,0x69,0x74,0x68
00005c  20496e54          DCB      0x20,0x49,0x6e,0x54
000060  79706520          DCB      0x79,0x70,0x65,0x20
000064  3d20646f          DCB      0x3d,0x20,0x64,0x6f
000068  75626c65          DCB      0x75,0x62,0x6c,0x65
00006c  2c205479          DCB      0x2c,0x20,0x54,0x79
000070  7065203d          DCB      0x70,0x65,0x20,0x3d
000074  20646f75          DCB      0x20,0x64,0x6f,0x75
000078  626c655d          DCB      0x62,0x6c,0x65,0x5d
00007c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIffEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Transpose<float, float>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a547261          DCB      0x3a,0x54,0x72,0x61
000028  6e73706f          DCB      0x6e,0x73,0x70,0x6f
00002c  73652863          DCB      0x73,0x65,0x28,0x63
000030  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000034  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000038  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00003c  6d626564          DCB      0x6d,0x62,0x65,0x64
000040  6465643a          DCB      0x64,0x65,0x64,0x3a
000044  3a417272          DCB      0x3a,0x41,0x72,0x72
000048  61793c54          DCB      0x61,0x79,0x3c,0x54
00004c  7970653e          DCB      0x79,0x70,0x65,0x3e
000050  20262c20          DCB      0x20,0x26,0x2c,0x20
000054  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000058  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00005c  62656464          DCB      0x62,0x65,0x64,0x64
000060  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000064  41727261          DCB      0x41,0x72,0x72,0x61
000068  793c4f75          DCB      0x79,0x3c,0x4f,0x75
00006c  74547970          DCB      0x74,0x54,0x79,0x70
000070  653e2026          DCB      0x65,0x3e,0x20,0x26
000074  29205b77          DCB      0x29,0x20,0x5b,0x77
000078  69746820          DCB      0x69,0x74,0x68,0x20
00007c  496e5479          DCB      0x49,0x6e,0x54,0x79
000080  7065203d          DCB      0x70,0x65,0x20,0x3d
000084  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000088  61742c20          DCB      0x61,0x74,0x2c,0x20
00008c  4f757454          DCB      0x4f,0x75,0x74,0x54
000090  79706520          DCB      0x79,0x70,0x65,0x20
000094  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000098  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00009c  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a4d756c          DCB      0x3a,0x4d,0x75,0x6c
000028  7469706c          DCB      0x74,0x69,0x70,0x6c
00002c  7928636f          DCB      0x79,0x28,0x63,0x6f
000030  6e737420          DCB      0x6e,0x73,0x74,0x20
000034  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000038  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00003c  62656464          DCB      0x62,0x65,0x64,0x64
000040  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000044  41727261          DCB      0x41,0x72,0x72,0x61
000048  793c5479          DCB      0x79,0x3c,0x54,0x79
00004c  70653e20          DCB      0x70,0x65,0x3e,0x20
000050  262c2063          DCB      0x26,0x2c,0x20,0x63
000054  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a417272          DCB      0x3a,0x41,0x72,0x72
00006c  61793c54          DCB      0x61,0x79,0x3c,0x54
000070  7970653e          DCB      0x79,0x70,0x65,0x3e
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00007c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000080  62656464          DCB      0x62,0x65,0x64,0x64
000084  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000088  41727261          DCB      0x41,0x72,0x72,0x61
00008c  793c4f75          DCB      0x79,0x3c,0x4f,0x75
000090  74547970          DCB      0x74,0x54,0x79,0x70
000094  653e2026          DCB      0x65,0x3e,0x20,0x26
000098  29205b77          DCB      0x29,0x20,0x5b,0x77
00009c  69746820          DCB      0x69,0x74,0x68,0x20
0000a0  496e5479          DCB      0x49,0x6e,0x54,0x79
0000a4  7065203d          DCB      0x70,0x65,0x20,0x3d
0000a8  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0000ac  61742c20          DCB      0x61,0x74,0x2c,0x20
0000b0  4f757454          DCB      0x4f,0x75,0x74,0x54
0000b4  79706520          DCB      0x79,0x70,0x65,0x20
0000b8  3d20666c          DCB      0x3d,0x20,0x66,0x6c
0000bc  6f61745d          DCB      0x6f,0x61,0x74,0x5d
0000c0  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix9TransposeIddEENS_6ResultERKNS0_5ArrayIT_EERNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Transpose<double, double>(const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a547261          DCB      0x3a,0x54,0x72,0x61
000028  6e73706f          DCB      0x6e,0x73,0x70,0x6f
00002c  73652863          DCB      0x73,0x65,0x28,0x63
000030  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000034  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000038  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00003c  6d626564          DCB      0x6d,0x62,0x65,0x64
000040  6465643a          DCB      0x64,0x65,0x64,0x3a
000044  3a417272          DCB      0x3a,0x41,0x72,0x72
000048  61793c54          DCB      0x61,0x79,0x3c,0x54
00004c  7970653e          DCB      0x79,0x70,0x65,0x3e
000050  20262c20          DCB      0x20,0x26,0x2c,0x20
000054  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000058  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00005c  62656464          DCB      0x62,0x65,0x64,0x64
000060  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000064  41727261          DCB      0x41,0x72,0x72,0x61
000068  793c4f75          DCB      0x79,0x3c,0x4f,0x75
00006c  74547970          DCB      0x74,0x54,0x79,0x70
000070  653e2026          DCB      0x65,0x3e,0x20,0x26
000074  29205b77          DCB      0x29,0x20,0x5b,0x77
000078  69746820          DCB      0x69,0x74,0x68,0x20
00007c  496e5479          DCB      0x49,0x6e,0x54,0x79
000080  7065203d          DCB      0x70,0x65,0x20,0x3d
000084  20646f75          DCB      0x20,0x64,0x6f,0x75
000088  626c652c          DCB      0x62,0x6c,0x65,0x2c
00008c  204f7574          DCB      0x20,0x4f,0x75,0x74
000090  54797065          DCB      0x54,0x79,0x70,0x65
000094  203d2064          DCB      0x20,0x3d,0x20,0x64
000098  6f75626c          DCB      0x6f,0x75,0x62,0x6c
00009c  655d00            DCB      0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIddEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Multiply<double, double>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a4d756c          DCB      0x3a,0x4d,0x75,0x6c
000028  7469706c          DCB      0x74,0x69,0x70,0x6c
00002c  7928636f          DCB      0x79,0x28,0x63,0x6f
000030  6e737420          DCB      0x6e,0x73,0x74,0x20
000034  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000038  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00003c  62656464          DCB      0x62,0x65,0x64,0x64
000040  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000044  41727261          DCB      0x41,0x72,0x72,0x61
000048  793c5479          DCB      0x79,0x3c,0x54,0x79
00004c  70653e20          DCB      0x70,0x65,0x3e,0x20
000050  262c2063          DCB      0x26,0x2c,0x20,0x63
000054  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a417272          DCB      0x3a,0x41,0x72,0x72
00006c  61793c54          DCB      0x61,0x79,0x3c,0x54
000070  7970653e          DCB      0x79,0x70,0x65,0x3e
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00007c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000080  62656464          DCB      0x62,0x65,0x64,0x64
000084  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000088  41727261          DCB      0x41,0x72,0x72,0x61
00008c  793c4f75          DCB      0x79,0x3c,0x4f,0x75
000090  74547970          DCB      0x74,0x54,0x79,0x70
000094  653e2026          DCB      0x65,0x3e,0x20,0x26
000098  29205b77          DCB      0x29,0x20,0x5b,0x77
00009c  69746820          DCB      0x69,0x74,0x68,0x20
0000a0  496e5479          DCB      0x49,0x6e,0x54,0x79
0000a4  7065203d          DCB      0x70,0x65,0x20,0x3d
0000a8  20646f75          DCB      0x20,0x64,0x6f,0x75
0000ac  626c652c          DCB      0x62,0x6c,0x65,0x2c
0000b0  204f7574          DCB      0x20,0x4f,0x75,0x74
0000b4  54797065          DCB      0x54,0x79,0x70,0x65
0000b8  203d2064          DCB      0x20,0x3d,0x20,0x64
0000bc  6f75626c          DCB      0x6f,0x75,0x62,0x6c
0000c0  655d00            DCB      0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIfEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_E19__PRETTY_FUNCTION__ ; Anki::Embedded::P3P::computePossiblePoses<float>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a503350          DCB      0x3a,0x50,0x33,0x50
000020  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000024  6d707574          DCB      0x6d,0x70,0x75,0x74
000028  65506f73          DCB      0x65,0x50,0x6f,0x73
00002c  7369626c          DCB      0x73,0x69,0x62,0x6c
000030  65506f73          DCB      0x65,0x50,0x6f,0x73
000034  65732863          DCB      0x65,0x73,0x28,0x63
000038  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00003c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000040  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000044  6d626564          DCB      0x6d,0x62,0x65,0x64
000048  6465643a          DCB      0x64,0x65,0x64,0x3a
00004c  3a506f69          DCB      0x3a,0x50,0x6f,0x69
000050  6e74333c          DCB      0x6e,0x74,0x33,0x3c
000054  54797065          DCB      0x54,0x79,0x70,0x65
000058  3e20262c          DCB      0x3e,0x20,0x26,0x2c
00005c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000060  73742041          DCB      0x73,0x74,0x20,0x41
000064  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000068  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00006c  65646465          DCB      0x65,0x64,0x64,0x65
000070  643a3a50          DCB      0x64,0x3a,0x3a,0x50
000074  6f696e74          DCB      0x6f,0x69,0x6e,0x74
000078  333c5479          DCB      0x33,0x3c,0x54,0x79
00007c  70653e20          DCB      0x70,0x65,0x3e,0x20
000080  262c2063          DCB      0x26,0x2c,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00008c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000090  6d626564          DCB      0x6d,0x62,0x65,0x64
000094  6465643a          DCB      0x64,0x65,0x64,0x3a
000098  3a506f69          DCB      0x3a,0x50,0x6f,0x69
00009c  6e74333c          DCB      0x6e,0x74,0x33,0x3c
0000a0  54797065          DCB      0x54,0x79,0x70,0x65
0000a4  3e20262c          DCB      0x3e,0x20,0x26,0x2c
0000a8  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0000ac  73742041          DCB      0x73,0x74,0x20,0x41
0000b0  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b4  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000b8  65646465          DCB      0x65,0x64,0x64,0x65
0000bc  643a3a50          DCB      0x64,0x3a,0x3a,0x50
0000c0  6f696e74          DCB      0x6f,0x69,0x6e,0x74
0000c4  333c5479          DCB      0x33,0x3c,0x54,0x79
0000c8  70653e20          DCB      0x70,0x65,0x3e,0x20
0000cc  262c2063          DCB      0x26,0x2c,0x20,0x63
0000d0  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
0000d4  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000d8  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000dc  6d626564          DCB      0x6d,0x62,0x65,0x64
0000e0  6465643a          DCB      0x64,0x65,0x64,0x3a
0000e4  3a506f69          DCB      0x3a,0x50,0x6f,0x69
0000e8  6e74333c          DCB      0x6e,0x74,0x33,0x3c
0000ec  54797065          DCB      0x54,0x79,0x70,0x65
0000f0  3e20262c          DCB      0x3e,0x20,0x26,0x2c
0000f4  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0000f8  73742041          DCB      0x73,0x74,0x20,0x41
0000fc  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000100  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000104  65646465          DCB      0x65,0x64,0x64,0x65
000108  643a3a50          DCB      0x64,0x3a,0x3a,0x50
00010c  6f696e74          DCB      0x6f,0x69,0x6e,0x74
000110  333c5479          DCB      0x33,0x3c,0x54,0x79
000114  70653e20          DCB      0x70,0x65,0x3e,0x20
000118  262c2041          DCB      0x26,0x2c,0x20,0x41
00011c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000120  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000124  65646465          DCB      0x65,0x64,0x64,0x65
000128  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00012c  72726179          DCB      0x72,0x72,0x61,0x79
000130  3c547970          DCB      0x3c,0x54,0x79,0x70
000134  653e2026          DCB      0x65,0x3e,0x20,0x26
000138  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00013c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000140  456d6265          DCB      0x45,0x6d,0x62,0x65
000144  64646564          DCB      0x64,0x64,0x65,0x64
000148  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
00014c  696e7433          DCB      0x69,0x6e,0x74,0x33
000150  3c547970          DCB      0x3c,0x54,0x79,0x70
000154  653e2026          DCB      0x65,0x3e,0x20,0x26
000158  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00015c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000160  456d6265          DCB      0x45,0x6d,0x62,0x65
000164  64646564          DCB      0x64,0x64,0x65,0x64
000168  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
00016c  7261793c          DCB      0x72,0x61,0x79,0x3c
000170  54797065          DCB      0x54,0x79,0x70,0x65
000174  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000178  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00017c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000180  6d626564          DCB      0x6d,0x62,0x65,0x64
000184  6465643a          DCB      0x64,0x65,0x64,0x3a
000188  3a506f69          DCB      0x3a,0x50,0x6f,0x69
00018c  6e74333c          DCB      0x6e,0x74,0x33,0x3c
000190  54797065          DCB      0x54,0x79,0x70,0x65
000194  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000198  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00019c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0001a0  6d626564          DCB      0x6d,0x62,0x65,0x64
0001a4  6465643a          DCB      0x64,0x65,0x64,0x3a
0001a8  3a417272          DCB      0x3a,0x41,0x72,0x72
0001ac  61793c54          DCB      0x61,0x79,0x3c,0x54
0001b0  7970653e          DCB      0x79,0x70,0x65,0x3e
0001b4  20262c20          DCB      0x20,0x26,0x2c,0x20
0001b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0001bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0001c0  62656464          DCB      0x62,0x65,0x64,0x64
0001c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0001c8  506f696e          DCB      0x50,0x6f,0x69,0x6e
0001cc  74333c54          DCB      0x74,0x33,0x3c,0x54
0001d0  7970653e          DCB      0x79,0x70,0x65,0x3e
0001d4  20262c20          DCB      0x20,0x26,0x2c,0x20
0001d8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0001dc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0001e0  62656464          DCB      0x62,0x65,0x64,0x64
0001e4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0001e8  41727261          DCB      0x41,0x72,0x72,0x61
0001ec  793c5479          DCB      0x79,0x3c,0x54,0x79
0001f0  70653e20          DCB      0x70,0x65,0x3e,0x20
0001f4  262c2041          DCB      0x26,0x2c,0x20,0x41
0001f8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0001fc  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000200  65646465          DCB      0x65,0x64,0x64,0x65
000204  643a3a50          DCB      0x64,0x3a,0x3a,0x50
000208  6f696e74          DCB      0x6f,0x69,0x6e,0x74
00020c  333c5479          DCB      0x33,0x3c,0x54,0x79
000210  70653e20          DCB      0x70,0x65,0x3e,0x20
000214  2629205b          DCB      0x26,0x29,0x20,0x5b
000218  77697468          DCB      0x77,0x69,0x74,0x68
00021c  20505245          DCB      0x20,0x50,0x52,0x45
000220  43495349          DCB      0x43,0x49,0x53,0x49
000224  4f4e203d          DCB      0x4f,0x4e,0x20,0x3d
000228  20666c6f          DCB      0x20,0x66,0x6c,0x6f
00022c  61745d00          DCB      0x61,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded3P3P20computePossiblePosesIdEENS_6ResultERKNS0_6Point3IT_EES8_S8_S8_S8_S8_RNS0_5ArrayIS5_EERS6_SB_SC_SB_SC_SB_SC_E19__PRETTY_FUNCTION__ ; Anki::Embedded::P3P::computePossiblePoses<double>(const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a503350          DCB      0x3a,0x50,0x33,0x50
000020  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000024  6d707574          DCB      0x6d,0x70,0x75,0x74
000028  65506f73          DCB      0x65,0x50,0x6f,0x73
00002c  7369626c          DCB      0x73,0x69,0x62,0x6c
000030  65506f73          DCB      0x65,0x50,0x6f,0x73
000034  65732863          DCB      0x65,0x73,0x28,0x63
000038  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00003c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000040  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000044  6d626564          DCB      0x6d,0x62,0x65,0x64
000048  6465643a          DCB      0x64,0x65,0x64,0x3a
00004c  3a506f69          DCB      0x3a,0x50,0x6f,0x69
000050  6e74333c          DCB      0x6e,0x74,0x33,0x3c
000054  54797065          DCB      0x54,0x79,0x70,0x65
000058  3e20262c          DCB      0x3e,0x20,0x26,0x2c
00005c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000060  73742041          DCB      0x73,0x74,0x20,0x41
000064  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000068  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00006c  65646465          DCB      0x65,0x64,0x64,0x65
000070  643a3a50          DCB      0x64,0x3a,0x3a,0x50
000074  6f696e74          DCB      0x6f,0x69,0x6e,0x74
000078  333c5479          DCB      0x33,0x3c,0x54,0x79
00007c  70653e20          DCB      0x70,0x65,0x3e,0x20
000080  262c2063          DCB      0x26,0x2c,0x20,0x63
000084  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000088  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00008c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000090  6d626564          DCB      0x6d,0x62,0x65,0x64
000094  6465643a          DCB      0x64,0x65,0x64,0x3a
000098  3a506f69          DCB      0x3a,0x50,0x6f,0x69
00009c  6e74333c          DCB      0x6e,0x74,0x33,0x3c
0000a0  54797065          DCB      0x54,0x79,0x70,0x65
0000a4  3e20262c          DCB      0x3e,0x20,0x26,0x2c
0000a8  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0000ac  73742041          DCB      0x73,0x74,0x20,0x41
0000b0  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b4  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000b8  65646465          DCB      0x65,0x64,0x64,0x65
0000bc  643a3a50          DCB      0x64,0x3a,0x3a,0x50
0000c0  6f696e74          DCB      0x6f,0x69,0x6e,0x74
0000c4  333c5479          DCB      0x33,0x3c,0x54,0x79
0000c8  70653e20          DCB      0x70,0x65,0x3e,0x20
0000cc  262c2063          DCB      0x26,0x2c,0x20,0x63
0000d0  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
0000d4  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000d8  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000dc  6d626564          DCB      0x6d,0x62,0x65,0x64
0000e0  6465643a          DCB      0x64,0x65,0x64,0x3a
0000e4  3a506f69          DCB      0x3a,0x50,0x6f,0x69
0000e8  6e74333c          DCB      0x6e,0x74,0x33,0x3c
0000ec  54797065          DCB      0x54,0x79,0x70,0x65
0000f0  3e20262c          DCB      0x3e,0x20,0x26,0x2c
0000f4  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0000f8  73742041          DCB      0x73,0x74,0x20,0x41
0000fc  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000100  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000104  65646465          DCB      0x65,0x64,0x64,0x65
000108  643a3a50          DCB      0x64,0x3a,0x3a,0x50
00010c  6f696e74          DCB      0x6f,0x69,0x6e,0x74
000110  333c5479          DCB      0x33,0x3c,0x54,0x79
000114  70653e20          DCB      0x70,0x65,0x3e,0x20
000118  262c2041          DCB      0x26,0x2c,0x20,0x41
00011c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000120  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000124  65646465          DCB      0x65,0x64,0x64,0x65
000128  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00012c  72726179          DCB      0x72,0x72,0x61,0x79
000130  3c547970          DCB      0x3c,0x54,0x79,0x70
000134  653e2026          DCB      0x65,0x3e,0x20,0x26
000138  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00013c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000140  456d6265          DCB      0x45,0x6d,0x62,0x65
000144  64646564          DCB      0x64,0x64,0x65,0x64
000148  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
00014c  696e7433          DCB      0x69,0x6e,0x74,0x33
000150  3c547970          DCB      0x3c,0x54,0x79,0x70
000154  653e2026          DCB      0x65,0x3e,0x20,0x26
000158  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00015c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000160  456d6265          DCB      0x45,0x6d,0x62,0x65
000164  64646564          DCB      0x64,0x64,0x65,0x64
000168  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
00016c  7261793c          DCB      0x72,0x61,0x79,0x3c
000170  54797065          DCB      0x54,0x79,0x70,0x65
000174  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000178  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00017c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000180  6d626564          DCB      0x6d,0x62,0x65,0x64
000184  6465643a          DCB      0x64,0x65,0x64,0x3a
000188  3a506f69          DCB      0x3a,0x50,0x6f,0x69
00018c  6e74333c          DCB      0x6e,0x74,0x33,0x3c
000190  54797065          DCB      0x54,0x79,0x70,0x65
000194  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000198  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00019c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0001a0  6d626564          DCB      0x6d,0x62,0x65,0x64
0001a4  6465643a          DCB      0x64,0x65,0x64,0x3a
0001a8  3a417272          DCB      0x3a,0x41,0x72,0x72
0001ac  61793c54          DCB      0x61,0x79,0x3c,0x54
0001b0  7970653e          DCB      0x79,0x70,0x65,0x3e
0001b4  20262c20          DCB      0x20,0x26,0x2c,0x20
0001b8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0001bc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0001c0  62656464          DCB      0x62,0x65,0x64,0x64
0001c4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0001c8  506f696e          DCB      0x50,0x6f,0x69,0x6e
0001cc  74333c54          DCB      0x74,0x33,0x3c,0x54
0001d0  7970653e          DCB      0x79,0x70,0x65,0x3e
0001d4  20262c20          DCB      0x20,0x26,0x2c,0x20
0001d8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0001dc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0001e0  62656464          DCB      0x62,0x65,0x64,0x64
0001e4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0001e8  41727261          DCB      0x41,0x72,0x72,0x61
0001ec  793c5479          DCB      0x79,0x3c,0x54,0x79
0001f0  70653e20          DCB      0x70,0x65,0x3e,0x20
0001f4  262c2041          DCB      0x26,0x2c,0x20,0x41
0001f8  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0001fc  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000200  65646465          DCB      0x65,0x64,0x64,0x65
000204  643a3a50          DCB      0x64,0x3a,0x3a,0x50
000208  6f696e74          DCB      0x6f,0x69,0x6e,0x74
00020c  333c5479          DCB      0x33,0x3c,0x54,0x79
000210  70653e20          DCB      0x70,0x65,0x3e,0x20
000214  2629205b          DCB      0x26,0x29,0x20,0x5b
000218  77697468          DCB      0x77,0x69,0x74,0x68
00021c  20505245          DCB      0x20,0x50,0x52,0x45
000220  43495349          DCB      0x43,0x49,0x53,0x49
000224  4f4e203d          DCB      0x4f,0x4e,0x20,0x3d
000228  20646f75          DCB      0x20,0x64,0x6f,0x75
00022c  626c655d          DCB      0x62,0x6c,0x65,0x5d
000230  00                DCB      0x00

                          AREA ||.constdata__ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIfEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_E19__PRETTY_FUNCTION__ ; Anki::Embedded::P3P::computePose<float>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a503350          DCB      0x3a,0x50,0x33,0x50
000020  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000024  6d707574          DCB      0x6d,0x70,0x75,0x74
000028  65506f73          DCB      0x65,0x50,0x6f,0x73
00002c  6528636f          DCB      0x65,0x28,0x63,0x6f
000030  6e737420          DCB      0x6e,0x73,0x74,0x20
000034  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000038  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00003c  62656464          DCB      0x62,0x65,0x64,0x64
000040  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000044  51756164          DCB      0x51,0x75,0x61,0x64
000048  72696c61          DCB      0x72,0x69,0x6c,0x61
00004c  74657261          DCB      0x74,0x65,0x72,0x61
000050  6c3c5052          DCB      0x6c,0x3c,0x50,0x52
000054  45434953          DCB      0x45,0x43,0x49,0x53
000058  494f4e3e          DCB      0x49,0x4f,0x4e,0x3e
00005c  20262c20          DCB      0x20,0x26,0x2c,0x20
000060  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000064  7420416e          DCB      0x74,0x20,0x41,0x6e
000068  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00006c  456d6265          DCB      0x45,0x6d,0x62,0x65
000070  64646564          DCB      0x64,0x64,0x65,0x64
000074  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
000078  696e7433          DCB      0x69,0x6e,0x74,0x33
00007c  3c547970          DCB      0x3c,0x54,0x79,0x70
000080  653e2026          DCB      0x65,0x3e,0x20,0x26
000084  2c20636f          DCB      0x2c,0x20,0x63,0x6f
000088  6e737420          DCB      0x6e,0x73,0x74,0x20
00008c  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000090  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000094  62656464          DCB      0x62,0x65,0x64,0x64
000098  65643a3a          DCB      0x65,0x64,0x3a,0x3a
00009c  506f696e          DCB      0x50,0x6f,0x69,0x6e
0000a0  74333c54          DCB      0x74,0x33,0x3c,0x54
0000a4  7970653e          DCB      0x79,0x70,0x65,0x3e
0000a8  20262c20          DCB      0x20,0x26,0x2c,0x20
0000ac  636f6e73          DCB      0x63,0x6f,0x6e,0x73
0000b0  7420416e          DCB      0x74,0x20,0x41,0x6e
0000b4  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000b8  456d6265          DCB      0x45,0x6d,0x62,0x65
0000bc  64646564          DCB      0x64,0x64,0x65,0x64
0000c0  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
0000c4  696e7433          DCB      0x69,0x6e,0x74,0x33
0000c8  3c547970          DCB      0x3c,0x54,0x79,0x70
0000cc  653e2026          DCB      0x65,0x3e,0x20,0x26
0000d0  2c20636f          DCB      0x2c,0x20,0x63,0x6f
0000d4  6e737420          DCB      0x6e,0x73,0x74,0x20
0000d8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000dc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000e0  62656464          DCB      0x62,0x65,0x64,0x64
0000e4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000e8  506f696e          DCB      0x50,0x6f,0x69,0x6e
0000ec  74333c54          DCB      0x74,0x33,0x3c,0x54
0000f0  7970653e          DCB      0x79,0x70,0x65,0x3e
0000f4  20262c20          DCB      0x20,0x26,0x2c,0x20
0000f8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000fc  742c2066          DCB      0x74,0x2c,0x20,0x66
000100  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000104  2c20666c          DCB      0x2c,0x20,0x66,0x6c
000108  6f61742c          DCB      0x6f,0x61,0x74,0x2c
00010c  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000110  61742c20          DCB      0x61,0x74,0x2c,0x20
000114  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000118  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00011c  62656464          DCB      0x62,0x65,0x64,0x64
000120  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000124  41727261          DCB      0x41,0x72,0x72,0x61
000128  793c5479          DCB      0x79,0x3c,0x54,0x79
00012c  70653e20          DCB      0x70,0x65,0x3e,0x20
000130  262c2041          DCB      0x26,0x2c,0x20,0x41
000134  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000138  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00013c  65646465          DCB      0x65,0x64,0x64,0x65
000140  643a3a50          DCB      0x64,0x3a,0x3a,0x50
000144  6f696e74          DCB      0x6f,0x69,0x6e,0x74
000148  333c5479          DCB      0x33,0x3c,0x54,0x79
00014c  70653e20          DCB      0x70,0x65,0x3e,0x20
000150  2629205b          DCB      0x26,0x29,0x20,0x5b
000154  77697468          DCB      0x77,0x69,0x74,0x68
000158  20505245          DCB      0x20,0x50,0x52,0x45
00015c  43495349          DCB      0x43,0x49,0x53,0x49
000160  4f4e203d          DCB      0x4f,0x4e,0x20,0x3d
000164  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000168  61745d00          DCB      0x61,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded3P3P11computePoseIdEENS_6ResultERKNS0_13QuadrilateralIT_EERKNS0_6Point3IS5_EESC_SC_SC_ffffRNS0_5ArrayIS5_EERSA_E19__PRETTY_FUNCTION__ ; Anki::Embedded::P3P::computePose<double>(const Anki::Embedded::Quadrilateral<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, const Anki::Embedded::Point3<T1>&, float, float, float, float, Anki::Embedded::Array<T1>&, Anki::Embedded::Point3<T1>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a503350          DCB      0x3a,0x50,0x33,0x50
000020  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000024  6d707574          DCB      0x6d,0x70,0x75,0x74
000028  65506f73          DCB      0x65,0x50,0x6f,0x73
00002c  6528636f          DCB      0x65,0x28,0x63,0x6f
000030  6e737420          DCB      0x6e,0x73,0x74,0x20
000034  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000038  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00003c  62656464          DCB      0x62,0x65,0x64,0x64
000040  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000044  51756164          DCB      0x51,0x75,0x61,0x64
000048  72696c61          DCB      0x72,0x69,0x6c,0x61
00004c  74657261          DCB      0x74,0x65,0x72,0x61
000050  6c3c5052          DCB      0x6c,0x3c,0x50,0x52
000054  45434953          DCB      0x45,0x43,0x49,0x53
000058  494f4e3e          DCB      0x49,0x4f,0x4e,0x3e
00005c  20262c20          DCB      0x20,0x26,0x2c,0x20
000060  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000064  7420416e          DCB      0x74,0x20,0x41,0x6e
000068  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00006c  456d6265          DCB      0x45,0x6d,0x62,0x65
000070  64646564          DCB      0x64,0x64,0x65,0x64
000074  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
000078  696e7433          DCB      0x69,0x6e,0x74,0x33
00007c  3c547970          DCB      0x3c,0x54,0x79,0x70
000080  653e2026          DCB      0x65,0x3e,0x20,0x26
000084  2c20636f          DCB      0x2c,0x20,0x63,0x6f
000088  6e737420          DCB      0x6e,0x73,0x74,0x20
00008c  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000090  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000094  62656464          DCB      0x62,0x65,0x64,0x64
000098  65643a3a          DCB      0x65,0x64,0x3a,0x3a
00009c  506f696e          DCB      0x50,0x6f,0x69,0x6e
0000a0  74333c54          DCB      0x74,0x33,0x3c,0x54
0000a4  7970653e          DCB      0x79,0x70,0x65,0x3e
0000a8  20262c20          DCB      0x20,0x26,0x2c,0x20
0000ac  636f6e73          DCB      0x63,0x6f,0x6e,0x73
0000b0  7420416e          DCB      0x74,0x20,0x41,0x6e
0000b4  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000b8  456d6265          DCB      0x45,0x6d,0x62,0x65
0000bc  64646564          DCB      0x64,0x64,0x65,0x64
0000c0  3a3a506f          DCB      0x3a,0x3a,0x50,0x6f
0000c4  696e7433          DCB      0x69,0x6e,0x74,0x33
0000c8  3c547970          DCB      0x3c,0x54,0x79,0x70
0000cc  653e2026          DCB      0x65,0x3e,0x20,0x26
0000d0  2c20636f          DCB      0x2c,0x20,0x63,0x6f
0000d4  6e737420          DCB      0x6e,0x73,0x74,0x20
0000d8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000dc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000e0  62656464          DCB      0x62,0x65,0x64,0x64
0000e4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000e8  506f696e          DCB      0x50,0x6f,0x69,0x6e
0000ec  74333c54          DCB      0x74,0x33,0x3c,0x54
0000f0  7970653e          DCB      0x79,0x70,0x65,0x3e
0000f4  20262c20          DCB      0x20,0x26,0x2c,0x20
0000f8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000fc  742c2066          DCB      0x74,0x2c,0x20,0x66
000100  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000104  2c20666c          DCB      0x2c,0x20,0x66,0x6c
000108  6f61742c          DCB      0x6f,0x61,0x74,0x2c
00010c  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000110  61742c20          DCB      0x61,0x74,0x2c,0x20
000114  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000118  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00011c  62656464          DCB      0x62,0x65,0x64,0x64
000120  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000124  41727261          DCB      0x41,0x72,0x72,0x61
000128  793c5479          DCB      0x79,0x3c,0x54,0x79
00012c  70653e20          DCB      0x70,0x65,0x3e,0x20
000130  262c2041          DCB      0x26,0x2c,0x20,0x41
000134  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000138  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00013c  65646465          DCB      0x65,0x64,0x64,0x65
000140  643a3a50          DCB      0x64,0x3a,0x3a,0x50
000144  6f696e74          DCB      0x6f,0x69,0x6e,0x74
000148  333c5479          DCB      0x33,0x3c,0x54,0x79
00014c  70653e20          DCB      0x70,0x65,0x3e,0x20
000150  2629205b          DCB      0x26,0x29,0x20,0x5b
000154  77697468          DCB      0x77,0x69,0x74,0x68
000158  20505245          DCB      0x20,0x50,0x52,0x45
00015c  43495349          DCB      0x43,0x49,0x53,0x49
000160  4f4e203d          DCB      0x4f,0x4e,0x20,0x3d
000164  20646f75          DCB      0x20,0x64,0x6f,0x75
000168  626c655d          DCB      0x62,0x6c,0x65,0x5d
00016c  00                DCB      0x00

                          AREA ||.bss__ZNSs9__nullrefE||, COMGROUP=_ZNSs9__nullrefE, DATA, NOINIT, ALIGN=2

                  _ZNSs9__nullrefE ; std::basic_string<char, std::char_traits<char>, std::allocator<char>>::__nullref
                          %        16

                          AREA ||.constdata__ZTINSt6locale5facetE||, COMGROUP=_ZTINSt6locale5facetE, DATA, READONLY, ALIGN=2

                  _ZTINSt6locale5facetE ; typeinfo for std::locale::facet
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTSNSt6locale5facetE ; typeinfo name for std::locale::facet
                          DCD      _ZTIN4__rw15__rw_facet_baseE ; typeinfo for __rw::__rw_facet_base

                          AREA ||.constdata__ZTIN4__rw18__rw_numpunct_implIcEE||, COMGROUP=_ZTIN4__rw18__rw_numpunct_implIcEE, DATA, READONLY, ALIGN=2

                  _ZTIN4__rw18__rw_numpunct_implIcEE ; typeinfo for __rw::__rw_numpunct_impl<char>
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTSN4__rw18__rw_numpunct_implIcEE ; typeinfo name for __rw::__rw_numpunct_impl<char>
                          DCD      _ZTIN4__rw23__rw_numpunct_impl_dataIcEE ; typeinfo for __rw::__rw_numpunct_impl_data<char>

                          AREA ||.constdata__ZTSSt8numpunctIcE||, COMGROUP=_ZTSSt8numpunctIcE, DATA, READONLY, ALIGN=0

                  _ZTSSt8numpunctIcE ; typeinfo name for std::numpunct<char>
000000  5374386e          DCB      0x53,0x74,0x38,0x6e
000004  756d7075          DCB      0x75,0x6d,0x70,0x75
000008  6e637449          DCB      0x6e,0x63,0x74,0x49
00000c  634500            DCB      0x63,0x45,0x00

                          AREA ||.constdata__ZTIN4__rw15__rw_facet_baseE||, COMGROUP=_ZTIN4__rw15__rw_facet_baseE, DATA, READONLY, ALIGN=2

                  _ZTIN4__rw15__rw_facet_baseE ; typeinfo for __rw::__rw_facet_base
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTSN4__rw15__rw_facet_baseE ; typeinfo name for __rw::__rw_facet_base
                          DCD      _ZTIN4__rw17__rw_synchronizedE ; typeinfo for __rw::__rw_synchronized

                          AREA ||.constdata__ZTSNSt6locale5facetE||, COMGROUP=_ZTSNSt6locale5facetE, DATA, READONLY, ALIGN=0

                  _ZTSNSt6locale5facetE ; typeinfo name for std::locale::facet
000000  4e537436          DCB      0x4e,0x53,0x74,0x36
000004  6c6f6361          DCB      0x6c,0x6f,0x63,0x61
000008  6c653566          DCB      0x6c,0x65,0x35,0x66
00000c  61636574          DCB      0x61,0x63,0x65,0x74
000010  4500              DCB      0x45,0x00

                          AREA ||.constdata__ZTIN4__rw23__rw_numpunct_impl_dataIcEE||, COMGROUP=_ZTIN4__rw23__rw_numpunct_impl_dataIcEE, DATA, READONLY, ALIGN=2

                  _ZTIN4__rw23__rw_numpunct_impl_dataIcEE ; typeinfo for __rw::__rw_numpunct_impl_data<char>
                          DCD      _ZTVN10__cxxabiv121__vmi_class_type_infoE+0x8 ; vtable for __cxxabiv1::__vmi_class_type_info
                          DCD      _ZTSN4__rw23__rw_numpunct_impl_dataIcEE ; typeinfo name for __rw::__rw_numpunct_impl_data<char>
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      _ZTIN4__rw23__rw_numpunct_impl_baseE ; typeinfo for __rw::__rw_numpunct_impl_base
                          DCD      0x00000002
                          DCD      _ZTIN4__rw15__rw_punct_dataIcEE ; typeinfo for __rw::__rw_punct_data<char>
                          DCD      0x00000002

                          AREA ||.constdata__ZTSN4__rw18__rw_numpunct_implIcEE||, COMGROUP=_ZTSN4__rw18__rw_numpunct_implIcEE, DATA, READONLY, ALIGN=0

                  _ZTSN4__rw18__rw_numpunct_implIcEE ; typeinfo name for __rw::__rw_numpunct_impl<char>
000000  4e345f5f          DCB      0x4e,0x34,0x5f,0x5f
000004  72773138          DCB      0x72,0x77,0x31,0x38
000008  5f5f7277          DCB      0x5f,0x5f,0x72,0x77
00000c  5f6e756d          DCB      0x5f,0x6e,0x75,0x6d
000010  70756e63          DCB      0x70,0x75,0x6e,0x63
000014  745f696d          DCB      0x74,0x5f,0x69,0x6d
000018  706c4963          DCB      0x70,0x6c,0x49,0x63
00001c  454500            DCB      0x45,0x45,0x00

                          AREA ||.constdata__ZTIN4__rw17__rw_synchronizedE||, COMGROUP=_ZTIN4__rw17__rw_synchronizedE, DATA, READONLY, ALIGN=2

                  _ZTIN4__rw17__rw_synchronizedE ; typeinfo for __rw::__rw_synchronized
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTSN4__rw17__rw_synchronizedE ; typeinfo name for __rw::__rw_synchronized

                          AREA ||.constdata__ZTSN4__rw15__rw_facet_baseE||, COMGROUP=_ZTSN4__rw15__rw_facet_baseE, DATA, READONLY, ALIGN=0

                  _ZTSN4__rw15__rw_facet_baseE ; typeinfo name for __rw::__rw_facet_base
000000  4e345f5f          DCB      0x4e,0x34,0x5f,0x5f
000004  72773135          DCB      0x72,0x77,0x31,0x35
000008  5f5f7277          DCB      0x5f,0x5f,0x72,0x77
00000c  5f666163          DCB      0x5f,0x66,0x61,0x63
000010  65745f62          DCB      0x65,0x74,0x5f,0x62
000014  61736545          DCB      0x61,0x73,0x65,0x45
000018  00                DCB      0x00

                          AREA ||.constdata__ZTIN4__rw23__rw_numpunct_impl_baseE||, COMGROUP=_ZTIN4__rw23__rw_numpunct_impl_baseE, DATA, READONLY, ALIGN=2

                  _ZTIN4__rw23__rw_numpunct_impl_baseE ; typeinfo for __rw::__rw_numpunct_impl_base
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTSN4__rw23__rw_numpunct_impl_baseE ; typeinfo name for __rw::__rw_numpunct_impl_base

                          AREA ||.constdata__ZTIN4__rw15__rw_punct_dataIcEE||, COMGROUP=_ZTIN4__rw15__rw_punct_dataIcEE, DATA, READONLY, ALIGN=2

                  _ZTIN4__rw15__rw_punct_dataIcEE ; typeinfo for __rw::__rw_punct_data<char>
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTSN4__rw15__rw_punct_dataIcEE ; typeinfo name for __rw::__rw_punct_data<char>

                          AREA ||.constdata__ZTSN4__rw23__rw_numpunct_impl_dataIcEE||, COMGROUP=_ZTSN4__rw23__rw_numpunct_impl_dataIcEE, DATA, READONLY, ALIGN=0

                  _ZTSN4__rw23__rw_numpunct_impl_dataIcEE ; typeinfo name for __rw::__rw_numpunct_impl_data<char>
000000  4e345f5f          DCB      0x4e,0x34,0x5f,0x5f
000004  72773233          DCB      0x72,0x77,0x32,0x33
000008  5f5f7277          DCB      0x5f,0x5f,0x72,0x77
00000c  5f6e756d          DCB      0x5f,0x6e,0x75,0x6d
000010  70756e63          DCB      0x70,0x75,0x6e,0x63
000014  745f696d          DCB      0x74,0x5f,0x69,0x6d
000018  706c5f64          DCB      0x70,0x6c,0x5f,0x64
00001c  61746149          DCB      0x61,0x74,0x61,0x49
000020  63454500          DCB      0x63,0x45,0x45,0x00

                          AREA ||.constdata__ZTSN4__rw17__rw_synchronizedE||, COMGROUP=_ZTSN4__rw17__rw_synchronizedE, DATA, READONLY, ALIGN=0

                  _ZTSN4__rw17__rw_synchronizedE ; typeinfo name for __rw::__rw_synchronized
000000  4e345f5f          DCB      0x4e,0x34,0x5f,0x5f
000004  72773137          DCB      0x72,0x77,0x31,0x37
000008  5f5f7277          DCB      0x5f,0x5f,0x72,0x77
00000c  5f73796e          DCB      0x5f,0x73,0x79,0x6e
000010  6368726f          DCB      0x63,0x68,0x72,0x6f
000014  6e697a65          DCB      0x6e,0x69,0x7a,0x65
000018  644500            DCB      0x64,0x45,0x00

                          AREA ||.constdata__ZTSN4__rw23__rw_numpunct_impl_baseE||, COMGROUP=_ZTSN4__rw23__rw_numpunct_impl_baseE, DATA, READONLY, ALIGN=0

                  _ZTSN4__rw23__rw_numpunct_impl_baseE ; typeinfo name for __rw::__rw_numpunct_impl_base
000000  4e345f5f          DCB      0x4e,0x34,0x5f,0x5f
000004  72773233          DCB      0x72,0x77,0x32,0x33
000008  5f5f7277          DCB      0x5f,0x5f,0x72,0x77
00000c  5f6e756d          DCB      0x5f,0x6e,0x75,0x6d
000010  70756e63          DCB      0x70,0x75,0x6e,0x63
000014  745f696d          DCB      0x74,0x5f,0x69,0x6d
000018  706c5f62          DCB      0x70,0x6c,0x5f,0x62
00001c  61736545          DCB      0x61,0x73,0x65,0x45
000020  00                DCB      0x00

                          AREA ||.constdata__ZTSN4__rw15__rw_punct_dataIcEE||, COMGROUP=_ZTSN4__rw15__rw_punct_dataIcEE, DATA, READONLY, ALIGN=0

                  _ZTSN4__rw15__rw_punct_dataIcEE ; typeinfo name for __rw::__rw_punct_data<char>
000000  4e345f5f          DCB      0x4e,0x34,0x5f,0x5f
000004  72773135          DCB      0x72,0x77,0x31,0x35
000008  5f5f7277          DCB      0x5f,0x5f,0x72,0x77
00000c  5f70756e          DCB      0x5f,0x70,0x75,0x6e
000010  63745f64          DCB      0x63,0x74,0x5f,0x64
000014  61746149          DCB      0x61,0x74,0x61,0x49
000018  63454500          DCB      0x63,0x45,0x45,0x00
