; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\pickandplacecontroller.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\pickandplacecontroller.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\pickandplacecontroller.crf supervisor\src\pickAndPlaceController.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fRKNS_8Embedded5PointIfEEfbNS0_12DockAction_tE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fRKNS_8Embedded5PointIfEEfbNS0_12DockAction_tE PROC ; Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, const Anki::Embedded::Point<float>&, float, bool, Anki::Cozmo::DockAction_t)
;;;827          
;;;828          void DockToBlock(const Vision::MarkerType markerType,
000000  b510              PUSH     {r4,lr}
;;;829                           const Vision::MarkerType markerType2,
;;;830                           const f32 markerWidth_mm,
;;;831                           const Embedded::Point2f& markerCenter,
;;;832                           const f32 pixelSearchRadius,
;;;833                           const bool useManualSpeed,
;;;834                           const DockAction_t action)
;;;835          {
000002  469c              MOV      r12,r3
000004  ed2d8b02          VPUSH    {d8}
000008  4614              MOV      r4,r2
00000a  eeb08a60          VMOV.F32 s16,s1
;;;836            DockToBlock(markerType, markerType2, markerWidth_mm, useManualSpeed, action);
00000e  4662              MOV      r2,r12
000010  9b04              LDR      r3,[sp,#0x10]
000012  f7fffffe          BL       _ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fbNS0_12DockAction_tE ; Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, bool, Anki::Cozmo::DockAction_t)
;;;837            
;;;838            markerCenter_ = markerCenter;
000016  4807              LDR      r0,|L1.52|
000018  ed940a00          VLDR     s0,[r4,#0]
00001c  ed800a00          VSTR     s0,[r0,#0]
000020  ed940a01          VLDR     s0,[r4,#4]
000024  ed800a01          VSTR     s0,[r0,#4]
;;;839            pixelSearchRadius_ = pixelSearchRadius;
000028  3840              SUBS     r0,r0,#0x40
00002a  ed808a0a          VSTR     s16,[r0,#0x28]
;;;840          }
00002e  ecbd8b02          VPOP     {d8}
000032  bd10              POP      {r4,pc}
;;;841          
                          ENDP

                  |L1.52|
                          DCD      ||.data||+0x40

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fbNS0_12DockAction_tE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fbNS0_12DockAction_tE PROC ; Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, bool, Anki::Cozmo::DockAction_t)
;;;793          
;;;794          void DockToBlock(const Vision::MarkerType markerType,
000000  2b03              CMP      r3,#3
;;;795                           const Vision::MarkerType markerType2,
;;;796                           const f32 markerWidth_mm,
;;;797                           const bool useManualSpeed,
;;;798                           const DockAction_t action)
;;;799          {
000002  d024              BEQ      |L2.78|
;;;800    #if(DEBUG_PAP_CONTROLLER)
;;;801            PRINT("PAP: DOCK TO BLOCK %d (action %d)\n", markerType, action);
;;;802    #endif
;;;803    
;;;804            if (action == DA_PLACE_LOW) {
;;;805              PRINT("WARNING: Invalid action %d for DockToBlock(). Ignoring.\n", action);
;;;806              return;
;;;807            }
;;;808            
;;;809            action_ = action;
000004  f8dfc050          LDR      r12,|L2.88|
000008  f88c3001          STRB     r3,[r12,#1]
;;;810            dockToMarker_ = markerType;
00000c  f88c0005          STRB     r0,[r12,#5]
;;;811            dockToMarker2_ = markerType2;
000010  f88c1006          STRB     r1,[r12,#6]
;;;812            markerWidth_  = markerWidth_mm;
000014  ed8c0a02          VSTR     s0,[r12,#8]
;;;813            
;;;814            markerCenter_.x = -1.f;
000018  f10c0040          ADD      r0,r12,#0x40
00001c  eebf0a00          VMOV.F32 s0,#-1.00000000
000020  ed800a00          VSTR     s0,[r0,#0]
;;;815            markerCenter_.y = -1.f;
000024  ed800a01          VSTR     s0,[r0,#4]
;;;816            pixelSearchRadius_ = -1.f;
000028  ed8c0a0a          VSTR     s0,[r12,#0x28]
;;;817            
;;;818            dockOffsetDistX_ = 0;
00002c  ed9f0a0b          VLDR     s0,|L2.92|
;;;819            dockOffsetDistY_ = 0;
;;;820            dockOffsetAng_ = 0;
;;;821            
;;;822            useManualSpeed_ = useManualSpeed;
;;;823            
;;;824            mode_ = SET_LIFT_PREDOCK;
000030  2001              MOVS     r0,#1
000032  ed8c0a03          VSTR     s0,[r12,#0xc]         ;818
000036  ed8c0a04          VSTR     s0,[r12,#0x10]        ;819
00003a  ed8c0a05          VSTR     s0,[r12,#0x14]        ;820
00003e  f88c2004          STRB     r2,[r12,#4]           ;822
000042  f88c0000          STRB     r0,[r12,#0]
;;;825            lastActionSucceeded_ = false;
000046  2000              MOVS     r0,#0
000048  f88c0003          STRB     r0,[r12,#3]
;;;826          }
00004c  4770              BX       lr
                  |L2.78|
00004e  4619              MOV      r1,r3                 ;805
000050  a003              ADR      r0,|L2.96|
000052  f7ffbffe          B.W      _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;827          
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      ||.data||
                  |L2.92|
00005c  00000000          DCFS     0x00000000 ; 0
                  |L2.96|
000060  5741524e          DCB      "WARNING: Invalid action %d for DockToBlock(). Ignoring."
000064  494e473a
000068  20496e76
00006c  616c6964
000070  20616374
000074  696f6e20
000078  25642066
00007c  6f722044
000080  6f636b54
000084  6f426c6f
000088  636b2829
00008c  2e204967
000090  6e6f7269
000094  6e672e  
000097  0a00              DCB      "\n",0
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController13PlaceOnGroundEfffb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController13PlaceOnGroundEfffb PROC ; Anki::Cozmo::PickAndPlaceController::PlaceOnGround(float, float, float, bool)
;;;841          
;;;842          void PlaceOnGround(const f32 rel_x, const f32 rel_y, const f32 rel_angle, const bool useManualSpeed)
000000  4907              LDR      r1,|L3.32|
;;;843          {
;;;844            action_ = DA_PLACE_LOW;
000002  2203              MOVS     r2,#3
000004  704a              STRB     r2,[r1,#1]
;;;845            dockOffsetDistX_ = rel_x;
000006  ed810a03          VSTR     s0,[r1,#0xc]
;;;846            dockOffsetDistY_ = rel_y;
00000a  edc10a04          VSTR     s1,[r1,#0x10]
;;;847            dockOffsetAng_ = rel_angle;
00000e  ed811a05          VSTR     s2,[r1,#0x14]
;;;848            
;;;849            useManualSpeed_ = useManualSpeed;
000012  7108              STRB     r0,[r1,#4]
;;;850            
;;;851            mode_ = SET_LIFT_PREDOCK;
000014  2001              MOVS     r0,#1
000016  7008              STRB     r0,[r1,#0]
;;;852            lastActionSucceeded_ = false;
000018  2000              MOVS     r0,#0
00001a  70c8              STRB     r0,[r1,#3]
;;;853          }
00001c  4770              BX       lr
;;;854          
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController15IsCarryingBlockEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController15IsCarryingBlockEv PROC ; Anki::Cozmo::PickAndPlaceController::IsCarryingBlock()
;;;787    
;;;788          bool IsCarryingBlock()
000000  4801              LDR      r0,|L4.8|
;;;789          {
;;;790            return isCarryingBlock_;
000002  7880              LDRB     r0,[r0,#2]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634216isCarryingBlock_E
;;;791          }
000004  4770              BX       lr
;;;792          
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController18UpdatePoseSnapshotEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController18UpdatePoseSnapshotEv PROC ; Anki::Cozmo::PickAndPlaceController::UpdatePoseSnapshot()
;;;164    
;;;165          void UpdatePoseSnapshot()
000000  4a02              LDR      r2,|L5.12|
;;;166          {
;;;167            Localization::GetCurrentMatPose(ptStamp_.x, ptStamp_.y, angleStamp_);
000002  1f11              SUBS     r1,r2,#4
000004  1f08              SUBS     r0,r1,#4
000006  f7ffbffe          B.W      _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
;;;168          }
;;;169          
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      ||.data||+0x38

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController20DidLastActionSucceedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController20DidLastActionSucceedEv PROC ; Anki::Cozmo::PickAndPlaceController::DidLastActionSucceed()
;;;778    
;;;779          bool DidLastActionSucceed() {
000000  4801              LDR      r0,|L6.8|
;;;780            return lastActionSucceeded_;
000002  78c0              LDRB     r0,[r0,#3]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634220lastActionSucceeded_E
;;;781          }
000004  4770              BX       lr
;;;782    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController22SendBlockPickUpMessageEb||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo22PickAndPlaceController22SendBlockPickUpMessageEb PROC ; Anki::Cozmo::PickAndPlaceController::SendBlockPickUpMessage(bool)
;;;169          
;;;170          Result SendBlockPickUpMessage(const bool success)
000000  b510              PUSH     {r4,lr}
;;;171          {
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
;;;172            Messages::BlockPickedUp msg;
;;;173            msg.timestamp = HAL::GetTimeStamp();
000006  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;174            msg.didSucceed = success;
00000a  9000              STR      r0,[sp,#0]
00000c  f88d4004          STRB     r4,[sp,#4]
;;;175            if(HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::BlockPickedUp), &msg)) {
000010  4669              MOV      r1,sp
000012  203f              MOVS     r0,#0x3f
000014  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000018  2800              CMP      r0,#0
;;;176              return RESULT_OK;
00001a  bf14              ITE      NE
00001c  2000              MOVNE    r0,#0
;;;177            }
;;;178            return RESULT_FAIL;
00001e  2001              MOVEQ    r0,#1
;;;179          }
000020  b002              ADD      sp,sp,#8
000022  bd10              POP      {r4,pc}
;;;180          
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController22SendBlockPlacedMessageEb||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo22PickAndPlaceController22SendBlockPlacedMessageEb PROC ; Anki::Cozmo::PickAndPlaceController::SendBlockPlacedMessage(bool)
;;;180          
;;;181          Result SendBlockPlacedMessage(const bool success)
000000  b510              PUSH     {r4,lr}
;;;182          {
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
;;;183            Messages::BlockPlaced msg;
;;;184            msg.timestamp = HAL::GetTimeStamp();
000006  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
;;;185            msg.didSucceed = success;
00000a  9000              STR      r0,[sp,#0]
00000c  f88d4004          STRB     r4,[sp,#4]
;;;186            if(HAL::RadioSendMessage(GET_MESSAGE_ID(Messages::BlockPlaced), &msg)) {
000010  4669              MOV      r1,sp
000012  2040              MOVS     r0,#0x40
000014  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000018  2800              CMP      r0,#0
;;;187              return RESULT_OK;
00001a  bf14              ITE      NE
00001c  2000              MOVNE    r0,#0
;;;188            }
;;;189            return RESULT_FAIL;
00001e  2001              MOVEQ    r0,#1
;;;190          }
000020  b002              ADD      sp,sp,#8
000022  bd10              POP      {r4,pc}
;;;191    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController4InitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController4InitEv PROC ; Anki::Cozmo::PickAndPlaceController::Init()
;;;133    
;;;134          Result Init() {
000000  4903              LDR      r1,|L9.16|
000002  b510              PUSH     {r4,lr}
000004  2000              MOVS     r0,#0
000006  7008              STRB     r0,[r1,#0]
000008  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController11ResetDockerEv ; Anki::Cozmo::DockingController::ResetDocker()
;;;135            Reset();
;;;136    #if USE_SNAPSHOT_VERIFICATION
;;;137            AnkiConditionalErrorAndReturnValue(snapShotRoiLow_.get_width()  == SNAPSHOT_SIZE*SNAPSHOT_SUBSAMPLE &&
;;;138                                               snapShotRoiLow_.get_height() == SNAPSHOT_SIZE*SNAPSHOT_SUBSAMPLE,
;;;139                                               RESULT_FAIL_INVALID_SIZE, "PAP::Init()",
;;;140                                               "Snapshot ROI Low not the expected size (%dx%d vs. %dx%d).",
;;;141                                               snapShotRoiLow_.get_width(), snapShotRoiLow_.get_height(),
;;;142                                               SNAPSHOT_SIZE, SNAPSHOT_SIZE);
;;;143            
;;;144            AnkiConditionalErrorAndReturnValue(snapShotRoiHigh_.get_width()  == SNAPSHOT_SIZE*SNAPSHOT_SUBSAMPLE &&
;;;145                                               snapShotRoiHigh_.get_height() == SNAPSHOT_SIZE*SNAPSHOT_SUBSAMPLE,
;;;146                                               RESULT_FAIL_INVALID_SIZE, "PAP::Init()",
;;;147                                               "Snapshot ROI High not the expected size (%dx%d vs. %dx%d).",
;;;148                                               snapShotRoiHigh_.get_width(), snapShotRoiHigh_.get_height(),
;;;149                                               SNAPSHOT_SIZE, SNAPSHOT_SIZE);
;;;150            
;;;151            return ResetBuffers();
;;;152    #else 
;;;153            return RESULT_OK;
00000c  2000              MOVS     r0,#0
;;;154    #endif // USE_SNAPSHOT_VERIFICATION
;;;155    
;;;156          }
00000e  bd10              POP      {r4,pc}
;;;157    
                          ENDP

                  |L9.16|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController5ResetEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController5ResetEv PROC ; Anki::Cozmo::PickAndPlaceController::Reset()
;;;158          
;;;159          void Reset()
000000  4902              LDR      r1,|L10.12|
;;;160          {
;;;161            mode_ = IDLE;
000002  2000              MOVS     r0,#0
000004  7008              STRB     r0,[r1,#0]
;;;162            DockingController::ResetDocker();
000006  f7ffbffe          B.W      _ZN4Anki5Cozmo17DockingController11ResetDockerEv ; Anki::Cozmo::DockingController::ResetDocker()
;;;163          }
;;;164    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController6IsBusyEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController6IsBusyEv PROC ; Anki::Cozmo::PickAndPlaceController::IsBusy()
;;;782    
;;;783          bool IsBusy()
000000  4802              LDR      r0,|L11.12|
;;;784          {
;;;785            return mode_ != IDLE;
000002  7800              LDRB     r0,[r0,#0]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063425mode_E
000004  2800              CMP      r0,#0
000006  bf18              IT       NE
000008  2001              MOVNE    r0,#1
;;;786          }
00000a  4770              BX       lr
;;;787    
                          ENDP

                  |L11.12|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController6UpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController6UpdateEv PROC ; Anki::Cozmo::PickAndPlaceController::Update()
;;;319          
;;;320          Result Update()
000000  b570              PUSH     {r4-r6,lr}
;;;321          {
;;;322            Result retVal = RESULT_OK;
;;;323            
;;;324            switch(mode_)
000002  48ff              LDR      r0,|L12.1024|
000004  2500              MOVS     r5,#0                 ;322
000006  b082              SUB      sp,sp,#8              ;321
000008  7800              LDRB     r0,[r0,#0]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063425mode_E
00000a  280d              CMP      r0,#0xd
00000c  f08082a3          BCS.W    |L12.1366|
000010  e8dff000          TBB      [pc,r0]
000014  ef075fa6          DCB      0xef,0x07,0x5f,0xa6
000018  eeedeceb          DCB      0xee,0xed,0xec,0xeb
00001c  eae9e8e7          DCB      0xea,0xe9,0xe8,0xe7
000020  e600              DCB      0xe6,0x00
;;;325            {
;;;326              case IDLE:
;;;327                break;
;;;328                
;;;329              case SET_LIFT_PREDOCK:
;;;330              {
;;;331    #if(DEBUG_PAP_CONTROLLER)
;;;332                PRINT("PAP: SETTING LIFT PREDOCK (action %d)\n", action_);
;;;333    #endif
;;;334                mode_ = MOVING_LIFT_PREDOCK;
000022  4cf7              LDR      r4,|L12.1024|
000024  2002              MOVS     r0,#2
000026  7020              STRB     r0,[r4,#0]
;;;335                switch(action_) {
000028  7861              LDRB     r1,[r4,#1]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063427action_E
00002a  2907              CMP      r1,#7
00002c  f0808107          BCS.W    |L12.574|
000030  e8dff001          TBB      [pc,r1]
000034  040f271d          DCB      0x04,0x0f,0x27,0x1d
000038  323d4800          DCB      0x32,0x3d,0x48,0x00
;;;336                  case DA_PICKUP_LOW:
;;;337                    LiftController::SetDesiredHeight(LIFT_HEIGHT_LOWDOCK);
00003c  eeb30a07          VMOV.F32 s0,#23.00000000
000040  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
;;;338                    HeadController::SetDesiredAngle(LOW_DOCKING_HEAD_ANGLE);
000044  ed9f0aef          VLDR     s0,|L12.1028|
000048  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
;;;339                    dockOffsetDistX_ = ORIGIN_TO_LOW_LIFT_DIST_MM;
00004c  eeb30a08          VMOV.F32 s0,#24.00000000
;;;340                    break;
000050  e009              B        |L12.102|
;;;341                  case DA_PICKUP_HIGH:
;;;342                    // This action starts by lowering the lift and tracking the high block
;;;343                    LiftController::SetDesiredHeight(LIFT_HEIGHT_LOWDOCK);
000052  eeb30a07          VMOV.F32 s0,#23.00000000
000056  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
;;;344                    HeadController::SetDesiredAngle(HIGH_DOCKING_HEAD_ANGLE);
00005a  ed9f0aeb          VLDR     s0,|L12.1032|
00005e  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
;;;345                    dockOffsetDistX_ = ORIGIN_TO_HIGH_LIFT_DIST_MM;
000062  ed9f0aea          VLDR     s0,|L12.1036|
                  |L12.102|
000066  ed840a03          VSTR     s0,[r4,#0xc]
00006a  f000ba7a          B.W      |L12.1378|
;;;346                    break;
;;;347                  case DA_PLACE_LOW:
;;;348                    LiftController::SetDesiredHeight(LIFT_HEIGHT_CARRY);
00006e  ed9f0ae8          VLDR     s0,|L12.1040|
000072  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
;;;349                    HeadController::SetDesiredAngle(LOW_DOCKING_HEAD_ANGLE);
000076  ed9f0ae3          VLDR     s0,|L12.1028|
00007a  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
;;;350                    break;
00007e  f000ba70          B.W      |L12.1378|
;;;351                  case DA_PLACE_HIGH:
;;;352                    LiftController::SetDesiredHeight(LIFT_HEIGHT_CARRY);
000082  ed9f0ae3          VLDR     s0,|L12.1040|
000086  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
;;;353                    HeadController::SetDesiredAngle(LOW_DOCKING_HEAD_ANGLE);
00008a  ed9f0ade          VLDR     s0,|L12.1028|
00008e  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
;;;354                    dockOffsetDistX_ = ORIGIN_TO_HIGH_PLACEMENT_DIST_MM;
000092  eeb30a00          VMOV.F32 s0,#16.00000000
;;;355                    break;
000096  e7e6              B        |L12.102|
;;;356                  case DA_RAMP_ASCEND:
;;;357                    LiftController::SetDesiredHeight(LIFT_HEIGHT_CARRY);
000098  ed9f0add          VLDR     s0,|L12.1040|
00009c  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
;;;358                    HeadController::SetDesiredAngle(LOW_DOCKING_HEAD_ANGLE);
0000a0  ed9f0ad8          VLDR     s0,|L12.1028|
0000a4  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
;;;359                    dockOffsetDistX_ = 0;
0000a8  ed9f0ada          VLDR     s0,|L12.1044|
;;;360                    break;
0000ac  e7db              B        |L12.102|
;;;361                  case DA_RAMP_DESCEND:
;;;362                    LiftController::SetDesiredHeight(LIFT_HEIGHT_CARRY);
0000ae  ed9f0ad8          VLDR     s0,|L12.1040|
0000b2  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
;;;363                    HeadController::SetDesiredAngle(MIN_HEAD_ANGLE);
0000b6  ed9f0ad8          VLDR     s0,|L12.1048|
0000ba  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
;;;364                    dockOffsetDistX_ = 30; // can't wait until we are actually on top of the marker to say we're done!
0000be  eeb30a0e          VMOV.F32 s0,#30.00000000
;;;365                    break;
0000c2  e7d0              B        |L12.102|
;;;366                  case DA_CROSS_BRIDGE:
;;;367                    HeadController::SetDesiredAngle(MIN_HEAD_ANGLE);
0000c4  ed9f0ad4          VLDR     s0,|L12.1048|
0000c8  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
;;;368                    dockOffsetDistX_ = BRIDGE_ALIGNED_MARKER_DISTANCE;
0000cc  ed9f0ad3          VLDR     s0,|L12.1052|
;;;369                    break;
0000d0  e7c9              B        |L12.102|
;;;370                  default:
;;;371                    PRINT("ERROR: Unknown PickAndPlaceAction %d\n", action_);
;;;372                    mode_ = IDLE;
;;;373                    break;
;;;374                }
;;;375                break;
;;;376              }
;;;377    
;;;378              case MOVING_LIFT_PREDOCK:
;;;379    #if(DEBUG_PAP_CONTROLLER)
;;;380                PERIODIC_PRINT(200, "PAP: MLP %d %d\n", LiftController::IsInPosition(), HeadController::IsInPosition());
;;;381    #endif
;;;382                if (LiftController::IsInPosition() && HeadController::IsInPosition()) {
0000d2  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController12IsInPositionEv ; Anki::Cozmo::LiftController::IsInPosition()
0000d6  2800              CMP      r0,#0
0000d8  f0008243          BEQ.W    |L12.1378|
0000dc  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController12IsInPositionEv ; Anki::Cozmo::HeadController::IsInPosition()
0000e0  2800              CMP      r0,#0
0000e2  f000823e          BEQ.W    |L12.1378|
;;;383                  
;;;384                  if (action_ == DA_PLACE_LOW) {
0000e6  4cc6              LDR      r4,|L12.1024|
0000e8  7861              LDRB     r1,[r4,#1]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063427action_E
0000ea  2903              CMP      r1,#3
0000ec  d008              BEQ      |L12.256|
;;;385                    DockingController::StartDockingToRelPose(dockOffsetDistX_,
;;;386                                                             dockOffsetDistY_,
;;;387                                                             dockOffsetAng_,
;;;388                                                             useManualSpeed_);
;;;389                  } else {
;;;390                    // When we are "docking" with a ramp or crossing a bridge, we
;;;391                    // don't want to worry about the X angle being large (since we
;;;392                    // _expect_ it to be large, since the markers are facing upward).
;;;393                    const bool checkAngleX = !(action_ == DA_RAMP_ASCEND || action_ == DA_RAMP_DESCEND || action_ == DA_CROSS_BRIDGE);
0000ee  2904              CMP      r1,#4
0000f0  bf18              IT       NE
0000f2  2905              CMPNE    r1,#5
0000f4  d00e              BEQ      |L12.276|
0000f6  2906              CMP      r1,#6
0000f8  bf18              IT       NE
0000fa  2101              MOVNE    r1,#1
0000fc  d00a              BEQ      |L12.276|
0000fe  e00a              B        |L12.278|
                  |L12.256|
000100  7920              LDRB     r0,[r4,#4]            ;385  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634215useManualSpeed_E
000102  ed941a05          VLDR     s2,[r4,#0x14]         ;385
000106  edd40a04          VLDR     s1,[r4,#0x10]         ;385
00010a  ed940a03          VLDR     s0,[r4,#0xc]          ;385
00010e  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController21StartDockingToRelPoseEfffb ; Anki::Cozmo::DockingController::StartDockingToRelPose(float, float, float, bool)
000112  e021              B        |L12.344|
                  |L12.276|
000114  2100              MOVS     r1,#0
                  |L12.278|
;;;394                    
;;;395                    if (pixelSearchRadius_ < 0) {
000116  ed940a0a          VLDR     s0,[r4,#0x28]
00011a  eeb50ac0          VCMPE.F32 s0,#0.0
00011e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000122  d208              BCS      |L12.310|
;;;396                      DockingController::StartDocking(dockToMarker_,
000124  f1040308          ADD      r3,r4,#8
000128  7922              LDRB     r2,[r4,#4]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634215useManualSpeed_E
00012a  48bd              LDR      r0,|L12.1056|
00012c  ec930a04          VLDM     r3,{s0-s3}
000130  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEffffbb ; Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, float, float, float, bool, bool)
000134  e010              B        |L12.344|
                  |L12.310|
;;;397                                                      markerWidth_,
;;;398                                                      dockOffsetDistX_,
;;;399                                                      dockOffsetDistY_,
;;;400                                                      dockOffsetAng_,
;;;401                                                      checkAngleX,
;;;402                                                      useManualSpeed_);
;;;403                    } else {
;;;404                      DockingController::StartDocking(dockToMarker_,
000136  eebc0ac0          VCVT.U32.F32 s0,s0
00013a  7920              LDRB     r0,[r4,#4]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634215useManualSpeed_E
00013c  9000              STR      r0,[sp,#0]
00013e  ee100a10          VMOV     r0,s0
000142  f1040608          ADD      r6,r4,#8
000146  460b              MOV      r3,r1
000148  49b6              LDR      r1,|L12.1060|
00014a  b2c2              UXTB     r2,r0
00014c  ec960a04          VLDM     r6,{s0-s3}
000150  f1a1003b          SUB      r0,r1,#0x3b
000154  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController12StartDockingERKNS_6Vision10MarkerTypeEfRKNS_8Embedded5PointIfEEhfffbb ; Anki::Cozmo::DockingController::StartDocking(const Anki::Vision::MarkerType&, float, const Anki::Embedded::Point<float>&, unsigned char, float, float, float, bool, bool)
                  |L12.344|
;;;405                                                      markerWidth_,
;;;406                                                      markerCenter_,
;;;407                                                      pixelSearchRadius_,
;;;408                                                      dockOffsetDistX_,
;;;409                                                      dockOffsetDistY_,
;;;410                                                      dockOffsetAng_,
;;;411                                                      checkAngleX,
;;;412                                                      useManualSpeed_);
;;;413                    }
;;;414                  }
;;;415                  mode_ = DOCKING;
000158  2003              MOVS     r0,#3
                  |L12.346|
00015a  7020              STRB     r0,[r4,#0]
00015c  f000ba01          B.W      |L12.1378|
;;;416    #if(DEBUG_PAP_CONTROLLER)
;;;417                  PRINT("PAP: DOCKING\n");
;;;418    #endif
;;;419                  
;;;420                  //if (action_ == DA_PICKUP_HIGH) {
;;;421                  //  DockingController::TrackCamWithLift(true);
;;;422                  //}
;;;423                }
;;;424                break;
;;;425                
;;;426              case DOCKING:
;;;427                 
;;;428                if (!DockingController::IsBusy()) {
000160  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController6IsBusyEv ; Anki::Cozmo::DockingController::IsBusy()
000164  b128              CBZ      r0,|L12.370|
;;;429    
;;;430                  //DockingController::TrackCamWithLift(false);
;;;431                  
;;;432                  if (DockingController::DidLastDockSucceed()) {
;;;433                    
;;;434                    // Docking is complete
;;;435                    
;;;436                    // Take snapshot of pose
;;;437                    UpdatePoseSnapshot();
;;;438                    
;;;439                    if(action_ == DA_RAMP_DESCEND) {
;;;440                      #if(DEBUG_PAP_CONTROLLER)
;;;441                      PRINT("PAP: TRAVERSE_RAMP_DOWN\n");
;;;442                      #endif
;;;443                      // Start driving forward (blindly) -- wheel guides!
;;;444                      SteeringController::ExecuteDirectDrive(RAMP_TRAVERSE_SPEED_MMPS, RAMP_TRAVERSE_SPEED_MMPS);
;;;445                      mode_ = TRAVERSE_RAMP_DOWN;
;;;446                    } else if (action_ == DA_CROSS_BRIDGE) {
;;;447                      #if(DEBUG_PAP_CONTROLLER)
;;;448                      PRINT("PAP: ENTER_BRIDGE\n");
;;;449                      #endif
;;;450                      // Start driving forward (blindly) -- wheel guides!
;;;451                      SteeringController::ExecuteDirectDrive(BRIDGE_TRAVERSE_SPEED_MMPS, BRIDGE_TRAVERSE_SPEED_MMPS);
;;;452                      mode_ = ENTER_BRIDGE;
;;;453                    } else {
;;;454                      #if(DEBUG_PAP_CONTROLLER)
;;;455                      PRINT("PAP: SET_LIFT_POSTDOCK\n");
;;;456                      #endif
;;;457                      mode_ = SET_LIFT_POSTDOCK;
;;;458                    }
;;;459                  } else {
;;;460                    // Block is not being tracked.
;;;461                    // Probably not visible.
;;;462                    #if(DEBUG_PAP_CONTROLLER)
;;;463                    PRINT("WARN (PickAndPlaceController): Could not track block's marker\n");
;;;464                    #endif
;;;465                    // TODO: Send BTLE message notifying failure
;;;466                    mode_ = IDLE;
;;;467                  }
;;;468                }
;;;469                else if (action_ == DA_RAMP_ASCEND && (ABS(IMUFilter::GetPitch()) > ON_RAMP_ANGLE_THRESH) )
000166  4ca6              LDR      r4,|L12.1024|
000168  7860              LDRB     r0,[r4,#1]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063427action_E
00016a  2804              CMP      r0,#4
00016c  d02e              BEQ      |L12.460|
00016e  f000b9f8          B.W      |L12.1378|
                  |L12.370|
000172  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController18DidLastDockSucceedEv ; Anki::Cozmo::DockingController::DidLastDockSucceed()
000176  b320              CBZ      r0,|L12.450|
000178  4aab              LDR      r2,|L12.1064|
00017a  1f11              SUBS     r1,r2,#4              ;432
00017c  1f08              SUBS     r0,r1,#4              ;432
00017e  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
000182  4c9f              LDR      r4,|L12.1024|
000184  7860              LDRB     r0,[r4,#1]            ;439  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063427action_E
000186  2805              CMP      r0,#5                 ;439
000188  d00f              BEQ      |L12.426|
00018a  2806              CMP      r0,#6                 ;446
00018c  bf18              IT       NE                    ;457
00018e  2004              MOVNE    r0,#4                 ;457
000190  d1e3              BNE      |L12.346|
000192  ed9f1aa0          VLDR     s2,|L12.1044|
000196  eef01a41          VMOV.F32 s3,s2                 ;451
00019a  ed9f0aa4          VLDR     s0,|L12.1068|
00019e  eef00a40          VMOV.F32 s1,s0                 ;451
0001a2  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
0001a6  200a              MOVS     r0,#0xa               ;452
0001a8  e7d7              B        |L12.346|
                  |L12.426|
0001aa  ed9f1a9a          VLDR     s2,|L12.1044|
0001ae  eef01a41          VMOV.F32 s3,s2                 ;444
0001b2  ed9f0a9e          VLDR     s0,|L12.1068|
0001b6  eef00a40          VMOV.F32 s1,s0                 ;444
0001ba  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
0001be  2009              MOVS     r0,#9                 ;445
0001c0  e7cb              B        |L12.346|
                  |L12.450|
0001c2  498f              LDR      r1,|L12.1024|
0001c4  2000              MOVS     r0,#0                 ;466
0001c6  7008              STRB     r0,[r1,#0]            ;466
0001c8  f000b9cb          B.W      |L12.1378|
                  |L12.460|
0001cc  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter8GetPitchEv ; Anki::Cozmo::IMUFilter::GetPitch()
0001d0  eeb50ac0          VCMPE.F32 s0,#0.0
0001d4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001d8  db0c              BLT      |L12.500|
0001da  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter8GetPitchEv ; Anki::Cozmo::IMUFilter::GetPitch()
0001de  e00d              B        |L12.508|
0001e0  e194              B        |L12.1292|
0001e2  e176              B        |L12.1234|
0001e4  e0fa              B        |L12.988|
0001e6  e0c5              B        |L12.884|
0001e8  e0d2              B        |L12.912|
0001ea  e0b8              B        |L12.862|
0001ec  e08a              B        |L12.772|
0001ee  e03d              B        |L12.620|
0001f0  e01b              B        |L12.554|
0001f2  e0f2              B        |L12.986|
                  |L12.500|
0001f4  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter8GetPitchEv ; Anki::Cozmo::IMUFilter::GetPitch()
0001f8  eeb10a40          VNEG.F32 s0,s0
                  |L12.508|
0001fc  ee100a10          VMOV     r0,s0
000200  498b              LDR      r1,|L12.1072|
000202  4288              CMP      r0,r1
000204  f34081ad          BLE.W    |L12.1378|
;;;470                {
;;;471                  DockingController::ResetDocker();
000208  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController11ResetDockerEv ; Anki::Cozmo::DockingController::ResetDocker()
;;;472                  SteeringController::ExecuteDirectDrive(RAMP_TRAVERSE_SPEED_MMPS, RAMP_TRAVERSE_SPEED_MMPS);
00020c  ed9f1a81          VLDR     s2,|L12.1044|
000210  eef01a41          VMOV.F32 s3,s2
000214  ed9f0a85          VLDR     s0,|L12.1068|
000218  eef00a40          VMOV.F32 s1,s0
00021c  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
;;;473                  mode_ = TRAVERSE_RAMP;
000220  2008              MOVS     r0,#8
000222  7020              STRB     r0,[r4,#0]
;;;474                  Localization::SetOnRamp(true);
000224  2001              MOVS     r0,#1
000226  f000b8d6          B.W      |L12.982|
                  |L12.554|
;;;475                }
;;;476                break;
;;;477    
;;;478              case SET_LIFT_POSTDOCK:
;;;479              {
;;;480    #if(DEBUG_PAP_CONTROLLER)
;;;481                PRINT("PAP: SETTING LIFT POSTDOCK\n");
;;;482    #endif
;;;483                switch(action_) {
00022a  4c75              LDR      r4,|L12.1024|
00022c  7861              LDRB     r1,[r4,#1]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063427action_E
00022e  2900              CMP      r1,#0
000230  bf18              IT       NE
000232  2901              CMPNE    r1,#1
000234  d00e              BEQ      |L12.596|
000236  2902              CMP      r1,#2
000238  d012              BEQ      |L12.608|
00023a  2903              CMP      r1,#3
00023c  d004              BEQ      |L12.584|
                  |L12.574|
;;;484                  case DA_PLACE_LOW:
;;;485                  {
;;;486                    LiftController::SetDesiredHeight(LIFT_HEIGHT_LOWDOCK);
;;;487                    mode_ = MOVING_LIFT_POSTDOCK;
;;;488                    break;
;;;489                  }
;;;490                  case DA_PICKUP_LOW:
;;;491                  case DA_PICKUP_HIGH:
;;;492                  {
;;;493    #if USE_SNAPSHOT_VERIFICATION
;;;494                    // Take a snapshot before we try to pick up. We will compare a
;;;495                    // post-pick up snapshot to this one to verify whether we
;;;496                    // actually picked up the block
;;;497                    if(isSnapshotReady_) {
;;;498                      LiftController::SetDesiredHeight(LIFT_HEIGHT_CARRY);
;;;499                      isSnapshotReady_ = false;
;;;500                      mode_ = MOVING_LIFT_POSTDOCK;
;;;501                    } else {
;;;502                      const Embedded::Rectangle<s32>* roi = &snapShotRoiLow_;
;;;503                      if(action_ == DA_PICKUP_HIGH) {
;;;504                        roi = &snapShotRoiHigh_;
;;;505                      }
;;;506                      Result lastResult = VisionSystem::TakeSnapshot(*roi, SNAPSHOT_SUBSAMPLE, pickupSnapshotBefore_, isSnapshotReady_);
;;;507                      if(lastResult != RESULT_OK) {
;;;508                        PRINT("ERROR: PickAndPlaceController: TakeSnapshot() failed in SET_LIFT_POSTDOCK:DA_PICKUP_LOW/HIGH!\n");
;;;509                        mode_ = IDLE;
;;;510                        return lastResult;
;;;511                      }
;;;512                    }
;;;513    #else
;;;514                    LiftController::SetDesiredHeight(LIFT_HEIGHT_CARRY);
;;;515                    mode_ = MOVING_LIFT_POSTDOCK;
;;;516    #endif // USE_SNAPSHOT_VERIFICATION
;;;517                    break;
;;;518                  }
;;;519                    
;;;520                  case DA_PLACE_HIGH:
;;;521                  {
;;;522                    LiftController::SetDesiredHeight(LIFT_HEIGHT_HIGHDOCK);
;;;523                    mode_ = MOVING_LIFT_POSTDOCK;
;;;524                    break;
;;;525                  }
;;;526                  default:
;;;527                    PRINT("ERROR: Unknown PickAndPlaceAction %d\n", action_);
00023e  a07d              ADR      r0,|L12.1076|
000240  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;528                    mode_ = IDLE;
000244  2000              MOVS     r0,#0
;;;529                    break;
000246  e788              B        |L12.346|
                  |L12.584|
000248  eeb30a07          VMOV.F32 s0,#23.00000000       ;486
00024c  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
000250  2005              MOVS     r0,#5                 ;487
000252  e782              B        |L12.346|
                  |L12.596|
000254  ed9f0a6e          VLDR     s0,|L12.1040|
000258  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
00025c  2005              MOVS     r0,#5                 ;515
00025e  e77c              B        |L12.346|
                  |L12.608|
000260  ed9f0a7e          VLDR     s0,|L12.1116|
000264  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
000268  2005              MOVS     r0,#5                 ;523
00026a  e776              B        |L12.346|
                  |L12.620|
;;;530                }
;;;531                break;
;;;532              }
;;;533                
;;;534              case MOVING_LIFT_POSTDOCK:
;;;535                if (LiftController::IsInPosition()) {
00026c  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController12IsInPositionEv ; Anki::Cozmo::LiftController::IsInPosition()
000270  2800              CMP      r0,#0
000272  f0008176          BEQ.W    |L12.1378|
;;;536    #if USE_SNAPSHOT_VERIFICATION
;;;537                  switch(action_) {
;;;538                    case DA_PICKUP_LOW:
;;;539                      // Wait for visual verification
;;;540                      // TODO: add timeout?
;;;541                      if(isSnapshotReady_) {
;;;542                        mode_ = IDLE;
;;;543                        lastActionSucceeded_ = true;
;;;544                        
;;;545                        // Snapshots should differ if we actually lifted the block
;;;546                        const s32 SSD = CompareSnapshots();
;;;547                        PRINT("PickAndPlaceController: snapshot difference SSD = %d\n", SSD);
;;;548                        if(SSD > SNAPSHOT_COMPARE_THRESHOLD) {
;;;549                          isCarryingBlock_ = true;
;;;550                        } else {
;;;551                          isCarryingBlock_ = false;
;;;552                        }
;;;553                        isSnapshotReady_ = false;
;;;554                        SendBlockPickUpMessage(isCarryingBlock_);
;;;555                      } else {
;;;556                        Result lastResult = VisionSystem::TakeSnapshot(snapShotRoiLow_, SNAPSHOT_SUBSAMPLE, pickupSnapshotAfter_, isSnapshotReady_);
;;;557                        if(lastResult != RESULT_OK) {
;;;558                          PRINT("ERROR: PickAndPlaceController: TakeSnapshot() failed in MOVING_LIFT_POSTDOCK:DA_PICKUP_LOW!\n");
;;;559                          mode_ = IDLE;
;;;560                          return lastResult;
;;;561                        }
;;;562                      }
;;;563                      
;;;564                      break;
;;;565                      
;;;566                    case DA_PICKUP_HIGH:
;;;567                      if(isSnapshotReady_) {
;;;568                        // Snapshots should differ if we actually lifted the block
;;;569                        const s32 SSD = CompareSnapshots();
;;;570                        if(SSD > SNAPSHOT_COMPARE_THRESHOLD) {
;;;571                          isCarryingBlock_ = true;
;;;572                        } else {
;;;573                          isCarryingBlock_ = false;
;;;574                        }
;;;575                        isSnapshotReady_ = false;
;;;576                        SendBlockPickUpMessage(isCarryingBlock_);
;;;577                        
;;;578                        // For now we backout even if the pickup failed, but maybe
;;;579                        // we wanna do something different
;;;580                        SteeringController::ExecuteDirectDrive(BACKOUT_SPEED_MMPS, BACKOUT_SPEED_MMPS);
;;;581                        transitionTime_ = HAL::GetMicroCounter() + BACKOUT_TIME;
;;;582                        mode_ = BACKOUT;
;;;583                      } else {
;;;584                        Result lastResult = VisionSystem::TakeSnapshot(snapShotRoiHigh_, SNAPSHOT_SUBSAMPLE, pickupSnapshotAfter_, isSnapshotReady_);
;;;585                        if(lastResult != RESULT_OK) {
;;;586                          PRINT("ERROR: PickAndPlaceController: TakeSnapshot() failed in MOVING_LIFT_POSTDOCK:DA_PICKUP_HIGH!\n");
;;;587                          mode_ = IDLE;
;;;588                          return lastResult;
;;;589                        }
;;;590                        
;;;591                      }
;;;592                      break;
;;;593                      
;;;594                    case DA_PLACE_LOW:
;;;595                    case DA_PLACE_HIGH:
;;;596                      // TODO: Add visual verfication of placement here?
;;;597                      isCarryingBlock_ = false;
;;;598                      SendBlockPlacedMessage(true);
;;;599                      SteeringController::ExecuteDirectDrive(BACKOUT_SPEED_MMPS, BACKOUT_SPEED_MMPS);
;;;600                      transitionTime_ = HAL::GetMicroCounter() + BACKOUT_TIME;
;;;601                      mode_ = BACKOUT;
;;;602    #if(DEBUG_PAP_CONTROLLER)
;;;603                      PRINT("PAP: BACKING OUT\n");
;;;604    #endif
;;;605                      break;
;;;606                      
;;;607                    default:
;;;608                      PRINT("ERROR: Reached default switch statement in MOVING_LIFT_POSTDOCK case.\n");
;;;609                  }
;;;610    #else 
;;;611                  // If not using snapshots, just backup after picking or placing,
;;;612                  // and move the head to a position to admire our work
;;;613                  
;;;614                  // Set head angle
;;;615                  switch(action_)
000276  4e62              LDR      r6,|L12.1024|
000278  7871              LDRB     r1,[r6,#1]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063427action_E
00027a  b351              CBZ      r1,|L12.722|
00027c  2901              CMP      r1,#1
00027e  bf14              ITE      NE
000280  2902              CMPNE    r1,#2
;;;616                  {
;;;617                    case DA_PICKUP_HIGH:
;;;618                    case DA_PLACE_HIGH:
;;;619                    {
;;;620                      HeadController::SetDesiredAngle(DEG_TO_RAD(20));
000282  ed9f0a77          VLDREQ   s0,|L12.1120|
000286  d026              BEQ      |L12.726|
000288  2903              CMP      r1,#3                 ;615
00028a  d022              BEQ      |L12.722|
;;;621                      break;
;;;622                    } // HIGH
;;;623                    case DA_PICKUP_LOW:
;;;624                    case DA_PLACE_LOW:
;;;625                    {
;;;626                      HeadController::SetDesiredAngle(DEG_TO_RAD(-5));
;;;627                      break;
;;;628                    } // LOW
;;;629                    default:
;;;630                      PRINT("ERROR: Reached default switch statement in MOVING_LIFT_POSTDOCK case.\n");
00028c  4875              LDR      r0,|L12.1124|
00028e  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
                  |L12.658|
;;;631                  } // switch(action_)
;;;632                  
;;;633                  // Send pickup or place message.  Assume success, let BaseStation
;;;634                  // verify once we've backed out.
;;;635                  switch(action_)
000292  7871              LDRB     r1,[r6,#1]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063427action_E
000294  2900              CMP      r1,#0
000296  bf18              IT       NE
000298  2901              CMPNE    r1,#1
00029a  d01f              BEQ      |L12.732|
00029c  2902              CMP      r1,#2
00029e  bf18              IT       NE
0002a0  2903              CMPNE    r1,#3
0002a2  d024              BEQ      |L12.750|
;;;636                  {
;;;637                    case DA_PICKUP_LOW:
;;;638                    case DA_PICKUP_HIGH:
;;;639                    {
;;;640                      SendBlockPickUpMessage(true);
;;;641                      break;
;;;642                    } // PICKUP
;;;643    
;;;644                    case DA_PLACE_LOW:
;;;645                    case DA_PLACE_HIGH:
;;;646                    {
;;;647                      SendBlockPlacedMessage(true);
;;;648                      break;
;;;649                    } // PLACE
;;;650                    default:
;;;651                      PRINT("ERROR: Reached default switch statement in MOVING_LIFT_POSTDOCK case.\n");
0002a4  486f              LDR      r0,|L12.1124|
0002a6  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
                  |L12.682|
;;;652                  } // switch(action_)
;;;653                  
;;;654                  SteeringController::ExecuteDirectDrive(BACKOUT_SPEED_MMPS, BACKOUT_SPEED_MMPS);
0002aa  ed9f1a5a          VLDR     s2,|L12.1044|
0002ae  eef01a41          VMOV.F32 s3,s2
0002b2  ed9f0a6d          VLDR     s0,|L12.1128|
0002b6  eef00a40          VMOV.F32 s1,s0
0002ba  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
;;;655                  transitionTime_ = HAL::GetMicroCounter() + BACKOUT_TIME;
0002be  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
0002c2  f50010b7          ADD      r0,r0,#0x16e000
0002c6  f5007058          ADD      r0,r0,#0x360
;;;656                  mode_ = BACKOUT;
0002ca  61b0              STR      r0,[r6,#0x18]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634215transitionTime_E
0002cc  2006              MOVS     r0,#6
0002ce  7030              STRB     r0,[r6,#0]
0002d0  e147              B        |L12.1378|
                  |L12.722|
0002d2  ed9f0a66          VLDR     s0,|L12.1132|
                  |L12.726|
0002d6  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf ; Anki::Cozmo::HeadController::SetDesiredAngle(float)
0002da  e7da              B        |L12.658|
                  |L12.732|
0002dc  2401              MOVS     r4,#1                 ;640
0002de  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
0002e2  9000              STR      r0,[sp,#0]            ;640
0002e4  f88d4004          STRB     r4,[sp,#4]            ;640
0002e8  4669              MOV      r1,sp                 ;640
0002ea  203f              MOVS     r0,#0x3f              ;640
0002ec  e007              B        |L12.766|
                  |L12.750|
0002ee  2401              MOVS     r4,#1                 ;647
0002f0  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
0002f4  9000              STR      r0,[sp,#0]            ;647
0002f6  f88d4004          STRB     r4,[sp,#4]            ;647
0002fa  4669              MOV      r1,sp                 ;647
0002fc  2040              MOVS     r0,#0x40              ;647
                  |L12.766|
0002fe  f7fffffe          BL       _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
000302  e7d2              B        |L12.682|
                  |L12.772|
;;;657                  
;;;658    #endif // USE_SNAPSHOT_VERIFICATION
;;;659                } // if (LiftController::IsInPosition())
;;;660                break;
;;;661                
;;;662              case BACKOUT:
;;;663                if (HAL::GetMicroCounter() > transitionTime_)
000304  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000308  4c3d              LDR      r4,|L12.1024|
00030a  69a1              LDR      r1,[r4,#0x18]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634215transitionTime_E
00030c  4288              CMP      r0,r1
00030e  d964              BLS      |L12.986|
;;;664                {
;;;665                  SteeringController::ExecuteDirectDrive(0,0);
000310  ed9f0a40          VLDR     s0,|L12.1044|
000314  eef01a40          VMOV.F32 s3,s0
000318  eeb01a40          VMOV.F32 s2,s0
00031c  eef00a40          VMOV.F32 s1,s0
000320  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
;;;666                  
;;;667                  if (HeadController::IsInPosition()) {
000324  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController12IsInPositionEv ; Anki::Cozmo::HeadController::IsInPosition()
000328  2800              CMP      r0,#0
00032a  d056              BEQ      |L12.986|
;;;668                    switch(action_) {
00032c  7861              LDRB     r1,[r4,#1]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063427action_E
00032e  2900              CMP      r1,#0
000330  bf18              IT       NE
000332  2901              CMPNE    r1,#1
000334  d008              BEQ      |L12.840|
000336  2902              CMP      r1,#2
000338  d00b              BEQ      |L12.850|
00033a  2903              CMP      r1,#3
00033c  d004              BEQ      |L12.840|
;;;669                      case DA_PLACE_LOW:
;;;670                      case DA_PICKUP_LOW:
;;;671                      case DA_PICKUP_HIGH:
;;;672                        mode_ = IDLE;
;;;673                        lastActionSucceeded_ = true;
;;;674                        //isCarryingBlock_ = true;
;;;675                        break;
;;;676                      case DA_PLACE_HIGH:
;;;677                        LiftController::SetDesiredHeight(LIFT_HEIGHT_LOWDOCK);
;;;678                        mode_ = LOWER_LIFT;
;;;679                        #if(DEBUG_PAP_CONTROLLER)
;;;680                        PRINT("PAP: LOWERING LIFT\n");
;;;681                        #endif
;;;682                        break;
;;;683                      default:
;;;684                        PRINT("ERROR: Reached BACKUP unexpectedly (action = %d)\n", action_);
00033e  a04c              ADR      r0,|L12.1136|
000340  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;685                        mode_ = IDLE;
000344  2000              MOVS     r0,#0
;;;686                        break;
000346  e708              B        |L12.346|
                  |L12.840|
000348  2000              MOVS     r0,#0                 ;672
00034a  7020              STRB     r0,[r4,#0]            ;672
00034c  2001              MOVS     r0,#1                 ;673
00034e  70e0              STRB     r0,[r4,#3]            ;673
000350  e107              B        |L12.1378|
                  |L12.850|
000352  eeb30a07          VMOV.F32 s0,#23.00000000       ;677
000356  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf ; Anki::Cozmo::LiftController::SetDesiredHeight(float)
00035a  2007              MOVS     r0,#7                 ;678
00035c  e6fd              B        |L12.346|
                  |L12.862|
;;;687                    }
;;;688                  }
;;;689                }
;;;690                break;
;;;691              case LOWER_LIFT:
;;;692                if (LiftController::IsInPosition()) {
00035e  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController12IsInPositionEv ; Anki::Cozmo::LiftController::IsInPosition()
000362  2800              CMP      r0,#0
000364  d039              BEQ      |L12.986|
;;;693    #if(DEBUG_PAP_CONTROLLER)
;;;694                  PRINT("PAP: IDLE\n");
;;;695    #endif
;;;696                  mode_ = IDLE;
000366  4826              LDR      r0,|L12.1024|
000368  2100              MOVS     r1,#0
;;;697                  lastActionSucceeded_ = true;
00036a  2201              MOVS     r2,#1
00036c  7001              STRB     r1,[r0,#0]            ;696
00036e  70c2              STRB     r2,[r0,#3]
;;;698                  isCarryingBlock_ = false;
000370  7081              STRB     r1,[r0,#2]
000372  e0f6              B        |L12.1378|
                  |L12.884|
;;;699                }
;;;700                break;
;;;701                
;;;702              case TRAVERSE_RAMP_DOWN:
;;;703                if(IMUFilter::GetPitch() < -ON_RAMP_ANGLE_THRESH) {
000374  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter8GetPitchEv ; Anki::Cozmo::IMUFilter::GetPitch()
000378  ee100a10          VMOV     r0,s0
00037c  4949              LDR      r1,|L12.1188|
00037e  4288              CMP      r0,r1
000380  d92b              BLS      |L12.986|
;;;704    #if(DEBUG_PAP_CONTROLLER)
;;;705                  PRINT("PAP: Switching out of TRAVERSE_RAMP_DOWN to TRAVERSE_RAMP (angle = %f)\n", IMUFilter::GetPitch());
;;;706    #endif
;;;707                  Localization::SetOnRamp(true);
000382  2001              MOVS     r0,#1
000384  f7fffffe          BL       _ZN4Anki5Cozmo12Localization9SetOnRampEb ; Anki::Cozmo::Localization::SetOnRamp(bool)
;;;708                  mode_ = TRAVERSE_RAMP;
000388  491d              LDR      r1,|L12.1024|
00038a  2008              MOVS     r0,#8
00038c  7008              STRB     r0,[r1,#0]
00038e  e0e8              B        |L12.1378|
                  |L12.912|
;;;709                }
;;;710                break;
;;;711                
;;;712              case TRAVERSE_RAMP:
;;;713                if ( ABS(IMUFilter::GetPitch()) < OFF_RAMP_ANGLE_THRESH ) {
000390  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter8GetPitchEv ; Anki::Cozmo::IMUFilter::GetPitch()
000394  eeb50ac0          VCMPE.F32 s0,#0.0
000398  eef1fa10          VMRS     APSR_nzcv,FPSCR
00039c  db02              BLT      |L12.932|
00039e  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter8GetPitchEv ; Anki::Cozmo::IMUFilter::GetPitch()
0003a2  e003              B        |L12.940|
                  |L12.932|
0003a4  f7fffffe          BL       _ZN4Anki5Cozmo9IMUFilter8GetPitchEv ; Anki::Cozmo::IMUFilter::GetPitch()
0003a8  eeb10a40          VNEG.F32 s0,s0
                  |L12.940|
0003ac  ee100a10          VMOV     r0,s0
0003b0  493d              LDR      r1,|L12.1192|
0003b2  4288              CMP      r0,r1
0003b4  da11              BGE      |L12.986|
;;;714                  SteeringController::ExecuteDirectDrive(0, 0);
0003b6  ed9f0a17          VLDR     s0,|L12.1044|
0003ba  eef01a40          VMOV.F32 s3,s0
0003be  eeb01a40          VMOV.F32 s2,s0
0003c2  eef00a40          VMOV.F32 s1,s0
0003c6  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
;;;715                  #if(DEBUG_PAP_CONTROLLER)
;;;716                  PRINT("PAP: IDLE (from TRAVERSE_RAMP)\n");
;;;717                  #endif
;;;718                  mode_ = IDLE;
0003ca  480d              LDR      r0,|L12.1024|
0003cc  2100              MOVS     r1,#0
0003ce  7001              STRB     r1,[r0,#0]
;;;719                  lastActionSucceeded_ = true;
0003d0  2101              MOVS     r1,#1
0003d2  70c1              STRB     r1,[r0,#3]
;;;720                  Localization::SetOnRamp(false);
0003d4  2000              MOVS     r0,#0
                  |L12.982|
0003d6  f7fffffe          BL       _ZN4Anki5Cozmo12Localization9SetOnRampEb ; Anki::Cozmo::Localization::SetOnRamp(bool)
                  |L12.986|
0003da  e0c2              B        |L12.1378|
                  |L12.988|
;;;721                }
;;;722                break;
;;;723                
;;;724              case ENTER_BRIDGE:
;;;725                // Keep driving until the marker on the other side of the bridge is seen.
;;;726                if ( Localization::GetDistTo(ptStamp_.x, ptStamp_.y) > BRIDGE_ALIGNED_MARKER_DISTANCE) {
0003dc  4c33              LDR      r4,|L12.1196|
0003de  edd40a01          VLDR     s1,[r4,#4]
0003e2  ed940a00          VLDR     s0,[r4,#0]
0003e6  f7fffffe          BL       _ZN4Anki5Cozmo12Localization9GetDistToEff ; Anki::Cozmo::Localization::GetDistTo(float, float)
0003ea  ee100a10          VMOV     r0,s0
0003ee  4930              LDR      r1,|L12.1200|
0003f0  4288              CMP      r0,r1
0003f2  dd04              BLE      |L12.1022|
;;;727                  // Set vision marker to look for marker
;;;728                  DockingController::StartTrackingOnly(dockToMarker2_, markerWidth_);
0003f4  f1a40630          SUB      r6,r4,#0x30
0003f8  ed960a02          VLDR     s0,[r6,#8]
0003fc  e05a              B        |L12.1204|
                  |L12.1022|
0003fe  e0a9              B        |L12.1364|
                  |L12.1024|
                          DCD      ||.data||
                  |L12.1028|
000404  bea0d97c          DCFS     0xbea0d97c ; -0.31415927410125732
                  |L12.1032|
000408  3ea0d97c          DCFS     0x3ea0d97c ; 0.31415927410125732
                  |L12.1036|
00040c  41840000          DCFS     0x41840000 ; 16.5
                  |L12.1040|
000410  42be0000          DCFS     0x42be0000 ; 95
                  |L12.1044|
000414  00000000          DCFS     0x00000000 ; 0
                  |L12.1048|
000418  bedf66f3          DCFS     0xbedf66f3 ; -0.43633231520652771
                  |L12.1052|
00041c  42700000          DCFS     0x42700000 ; 60
                  |L12.1056|
                          DCD      ||.data||+0x5
                  |L12.1060|
                          DCD      ||.data||+0x40
                  |L12.1064|
                          DCD      ||.data||+0x38
                  |L12.1068|
00042c  42200000          DCFS     0x42200000 ; 40
                  |L12.1072|
                          DCD      0x3e19999a
                  |L12.1076|
000434  4552524f          DCB      "ERROR: Unknown PickAndPlaceAction %d\n",0
000438  523a2055
00043c  6e6b6e6f
000440  776e2050
000444  69636b41
000448  6e64506c
00044c  61636541
000450  6374696f
000454  6e202564
000458  0a00    
00045a  00                DCB      0
00045b  00                DCB      0
                  |L12.1116|
00045c  42960000          DCFS     0x42960000 ; 75
                  |L12.1120|
000460  3eb2b8c2          DCFS     0x3eb2b8c2 ; 0.34906584024429321
                  |L12.1124|
                          DCD      ||.conststring||
                  |L12.1128|
000468  c2200000          DCFS     0xc2200000 ; -40
                  |L12.1132|
00046c  bdb2b8c2          DCFS     0xbdb2b8c2 ; -0.087266460061073303
                  |L12.1136|
000470  4552524f          DCB      "ERROR: Reached BACKUP unexpectedly (action = %d)\n",0
000474  523a2052
000478  65616368
00047c  65642042
000480  41434b55
000484  5020756e
000488  65787065
00048c  63746564
000490  6c792028
000494  61637469
000498  6f6e203d
00049c  20256429
0004a0  0a00    
0004a2  00                DCB      0
0004a3  00                DCB      0
                  |L12.1188|
                          DCD      0xbe19999a
                  |L12.1192|
                          DCD      0x3d4ccccd
                  |L12.1196|
                          DCD      ||.data||+0x30
                  |L12.1200|
                          DCD      0x42700000
                  |L12.1204|
0004b4  f1a4002a          SUB      r0,r4,#0x2a
0004b8  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController17StartTrackingOnlyERKNS_6Vision10MarkerTypeEf ; Anki::Cozmo::DockingController::StartTrackingOnly(const Anki::Vision::MarkerType&, float)
0004bc  f1040208          ADD      r2,r4,#8
0004c0  1d21              ADDS     r1,r4,#4
0004c2  f1a20008          SUB      r0,r2,#8
0004c6  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
;;;729                  UpdatePoseSnapshot();
;;;730                  mode_ = TRAVERSE_BRIDGE;
0004ca  200b              MOVS     r0,#0xb
0004cc  7030              STRB     r0,[r6,#0]
;;;731                  #if(DEBUG_PAP_CONTROLLER)
;;;732                  PRINT("TRAVERSE_BRIDGE\n");
;;;733                  #endif
;;;734                  Localization::SetOnBridge(true);
0004ce  2001              MOVS     r0,#1
0004d0  e03e              B        |L12.1360|
                  |L12.1234|
;;;735                }
;;;736                break;
;;;737              case TRAVERSE_BRIDGE:
;;;738                if (DockingController::IsBusy()) {
0004d2  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController6IsBusyEv ; Anki::Cozmo::DockingController::IsBusy()
0004d6  b190              CBZ      r0,|L12.1278|
;;;739                  if (DockingController::GetLastMarkerPose(relMarkerX_, relMarkerY_, relMarkerAng_) && relMarkerX_ < 100.f) {
0004d8  4a23              LDR      r2,|L12.1384|
0004da  1f11              SUBS     r1,r2,#4
0004dc  1f08              SUBS     r0,r1,#4
0004de  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController17GetLastMarkerPoseERfS2_S2_ ; Anki::Cozmo::DockingController::GetLastMarkerPose(float&, float&, float&)
0004e2  b3b8              CBZ      r0,|L12.1364|
0004e4  4c21              LDR      r4,|L12.1388|
0004e6  4922              LDR      r1,|L12.1392|
0004e8  69e0              LDR      r0,[r4,#0x1c]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634211relMarkerX_E
0004ea  4288              CMP      r0,r1
0004ec  da39              BGE      |L12.1378|
0004ee  f1040238          ADD      r2,r4,#0x38
0004f2  1f11              SUBS     r1,r2,#4
0004f4  1f08              SUBS     r0,r1,#4
0004f6  f7fffffe          BL       _ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE ; Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
;;;740                    // We're tracking the end marker.
;;;741                    // Keep driving until we're off.
;;;742                    UpdatePoseSnapshot();
;;;743                    mode_ = LEAVE_BRIDGE;
0004fa  200c              MOVS     r0,#0xc
0004fc  e62d              B        |L12.346|
                  |L12.1278|
;;;744                    #if(DEBUG_PAP_CONTROLLER)
;;;745                    PRINT("LEAVING_BRIDGE: relMarkerX = %f\n", relMarkerX_);
;;;746                    #endif
;;;747                  }
;;;748                } else {
;;;749                  // Marker tracking timedout. Start it again.
;;;750                  DockingController::StartTrackingOnly(dockToMarker2_, markerWidth_);
0004fe  481b              LDR      r0,|L12.1388|
000500  ed900a02          VLDR     s0,[r0,#8]
000504  1d80              ADDS     r0,r0,#6
000506  f7fffffe          BL       _ZN4Anki5Cozmo17DockingController17StartTrackingOnlyERKNS_6Vision10MarkerTypeEf ; Anki::Cozmo::DockingController::StartTrackingOnly(const Anki::Vision::MarkerType&, float)
00050a  e02a              B        |L12.1378|
                  |L12.1292|
;;;751                  #if(DEBUG_PAP_CONTROLLER)
;;;752                  PRINT("TRAVERSE_BRIDGE: Restarting tracking\n");
;;;753                  #endif
;;;754                }
;;;755                break;
;;;756              case LEAVE_BRIDGE:
;;;757                if ( Localization::GetDistTo(ptStamp_.x, ptStamp_.y) > relMarkerX_ + MARKER_TO_OFF_BRIDGE_POSE_DIST) {
00050c  4819              LDR      r0,|L12.1396|
00050e  edd00a01          VLDR     s1,[r0,#4]
000512  ed900a00          VLDR     s0,[r0,#0]
000516  f7fffffe          BL       _ZN4Anki5Cozmo12Localization9GetDistToEff ; Anki::Cozmo::Localization::GetDistTo(float, float)
00051a  4c14              LDR      r4,|L12.1388|
00051c  ed9f1a16          VLDR     s2,|L12.1400|
000520  edd40a07          VLDR     s1,[r4,#0x1c]
000524  ee700a81          VADD.F32 s1,s1,s2
000528  eeb40ae0          VCMPE.F32 s0,s1
00052c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000530  dd17              BLE      |L12.1378|
;;;758                  SteeringController::ExecuteDirectDrive(0, 0);
000532  ed1f0a48          VLDR     s0,|L12.1044|
000536  eef01a40          VMOV.F32 s3,s0
00053a  eeb01a40          VMOV.F32 s2,s0
00053e  eef00a40          VMOV.F32 s1,s0
000542  f7fffffe          BL       _ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff ; Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
;;;759                  #if(DEBUG_PAP_CONTROLLER)
;;;760                  PRINT("PAP: IDLE (from TRAVERSE_BRIDGE)\n");
;;;761                  #endif
;;;762                  mode_ = IDLE;
000546  2000              MOVS     r0,#0
000548  7020              STRB     r0,[r4,#0]
;;;763                  lastActionSucceeded_ = true;
00054a  2001              MOVS     r0,#1
00054c  70e0              STRB     r0,[r4,#3]
;;;764                  Localization::SetOnBridge(false);
00054e  2000              MOVS     r0,#0
                  |L12.1360|
000550  f7fffffe          BL       _ZN4Anki5Cozmo12Localization11SetOnBridgeEb ; Anki::Cozmo::Localization::SetOnBridge(bool)
                  |L12.1364|
000554  e005              B        |L12.1378|
                  |L12.1366|
;;;765                }
;;;766                break;
;;;767                
;;;768              default:
;;;769                mode_ = IDLE;
000556  4905              LDR      r1,|L12.1388|
000558  2000              MOVS     r0,#0
00055a  7008              STRB     r0,[r1,#0]
;;;770                PRINT("Reached default case in DockingController "
00055c  4807              LDR      r0,|L12.1404|
00055e  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
                  |L12.1378|
;;;771                      "mode switch statement.(1)\n");
;;;772                break;
;;;773            }
;;;774            
;;;775            return retVal;
;;;776            
;;;777          } // Update()
000562  b002              ADD      sp,sp,#8
000564  4628              MOV      r0,r5                 ;775
000566  bd70              POP      {r4-r6,pc}
;;;778    
                          ENDP

                  |L12.1384|
                          DCD      ||.data||+0x24
                  |L12.1388|
                          DCD      ||.data||
                  |L12.1392|
                          DCD      0x42c80000
                  |L12.1396|
                          DCD      ||.data||+0x30
                  |L12.1400|
000578  42a00000          DCFS     0x42a00000 ; 80
                  |L12.1404|
                          DCD      ||.conststring||+0x48

                          AREA ||i._ZN4Anki5Cozmo22PickAndPlaceController7GetModeEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController7GetModeEv PROC ; Anki::Cozmo::PickAndPlaceController::GetMode()
;;;129          
;;;130          Mode GetMode() {
000000  4801              LDR      r0,|L13.8|
;;;131            return mode_;
000002  7800              LDRB     r0,[r0,#0]  ; _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063425mode_E
;;;132          }
000004  4770              BX       lr
;;;133    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      ||.data||

                          AREA ||i.__sti___26_pickAndPlaceController_cpp_cf406342||, CODE, READONLY, ALIGN=2

                  __sti___26_pickAndPlaceController_cpp_cf406342 PROC
000000  b510              PUSH     {r4,lr}
000002  480d              LDR      r0,|L14.56|
000004  ed9f0a0b          VLDR     s0,|L14.52|
000008  ed2d8b02          VPUSH    {d8}
00000c  ed800a0b          VSTR     s0,[r0,#0x2c]
000010  3030              ADDS     r0,r0,#0x30
000012  ed9f8a0a          VLDR     s16,|L14.60|
000016  ed808a00          VSTR     s16,[r0,#0]
00001a  ed808a01          VSTR     s16,[r0,#4]
00001e  3008              ADDS     r0,r0,#8
000020  f7fffffe          BL       _ZN4Anki7RadiansC1Ev ; Anki::Radians::Radians()
000024  4806              LDR      r0,|L14.64|
000026  ed808a00          VSTR     s16,[r0,#0]
00002a  ed808a01          VSTR     s16,[r0,#4]
00002e  ecbd8b02          VPOP     {d8}
000032  bd10              POP      {r4,pc}
                          ENDP

                  |L14.52|
000034  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L14.56|
                          DCD      ||.data||
                  |L14.60|
00003c  00000000          DCFS     0x00000000 ; 0
                  |L14.64|
                          DCD      ||.data||+0x40

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController7GetModeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController7GetModeEv||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController5ResetEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController5ResetEv||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController4InitEv||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController18UpdatePoseSnapshotEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController18UpdatePoseSnapshotEv||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController22SendBlockPickUpMessageEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController22SendBlockPickUpMessageEb||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController22SendBlockPlacedMessageEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController22SendBlockPlacedMessageEb||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController6UpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController6UpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController20DidLastActionSucceedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController20DidLastActionSucceedEv||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController6IsBusyEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController6IsBusyEv||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController15IsCarryingBlockEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController15IsCarryingBlockEv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fbNS0_12DockAction_tE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fbNS0_12DockAction_tE||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fRKNS_8Embedded5PointIfEEfbNS0_12DockAction_tE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fRKNS_8Embedded5PointIfEEfbNS0_12DockAction_tE||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN4Anki5Cozmo22PickAndPlaceController13PlaceOnGroundEfffb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo22PickAndPlaceController13PlaceOnGroundEfffb||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i.__sti___26_pickAndPlaceController_cpp_cf406342||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___26_pickAndPlaceController_cpp_cf406342||
                          DCD      0x00000001

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4552524f          DCB      "ERROR: Reached default switch statement in MOVING_LIFT_"
000004  523a2052
000008  65616368
00000c  65642064
000010  65666175
000014  6c742073
000018  77697463
00001c  68207374
000020  6174656d
000024  656e7420
000028  696e204d
00002c  4f56494e
000030  475f4c49
000034  46545f  
000037  504f5354          DCB      "POSTDOCK case.\n",0
00003b  444f434b
00003f  20636173
000043  652e0a00
000047  00                DCB      0
000048  52656163          DCB      "Reached default case in DockingController mode switch s"
00004c  68656420
000050  64656661
000054  756c7420
000058  63617365
00005c  20696e20
000060  446f636b
000064  696e6743
000068  6f6e7472
00006c  6f6c6c65
000070  72206d6f
000074  64652073
000078  77697463
00007c  682073  
00007f  74617465          DCB      "tatement.(1)\n",0
000083  6d656e74
000087  2e283129
00008b  0a00    

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063425mode_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::mode_
000000  00                DCB      0x00
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063427action_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::action_
000001  00                DCB      0x00
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634216isCarryingBlock_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::isCarryingBlock_
000002  00                DCB      0x00
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634220lastActionSucceeded_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::lastActionSucceeded_
000003  00                DCB      0x00
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634215useManualSpeed_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::useManualSpeed_
000004  00                DCB      0x00
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634213dockToMarker_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::dockToMarker_
000005  00                DCB      0x00
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634214dockToMarker2_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::dockToMarker2_
000006  0000              DCB      0x00,0x00
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634212markerWidth_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::markerWidth_
000008  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634216dockOffsetDistX_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::dockOffsetDistX_
00000c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634216dockOffsetDistY_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::dockOffsetDistY_
000010  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634214dockOffsetAng_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::dockOffsetAng_
000014  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634215transitionTime_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::transitionTime_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634211relMarkerX_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::relMarkerX_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634211relMarkerY_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::relMarkerY_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634213relMarkerAng_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::relMarkerAng_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634218pixelSearchRadius_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::pixelSearchRadius_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf4063428ptStamp_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::ptStamp_
                          %        8
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634211angleStamp_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::angleStamp_
                          %        8
                  _ZN4Anki5Cozmo22PickAndPlaceController50_GLOBAL__N__26_pickAndPlaceController_cpp_cf40634213markerCenter_E ; Anki::Cozmo::PickAndPlaceController::<unnamed>::markerCenter_
                          %        8

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___26_pickAndPlaceController_cpp_cf406342
