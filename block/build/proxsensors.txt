; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\proxsensors.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\proxsensors.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\proxsensors.crf supervisor\src\proxSensors.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo11ProxSensors13IsSideBlockedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo11ProxSensors13IsSideBlockedEv PROC ; Anki::Cozmo::ProxSensors::IsSideBlocked()
;;;156    
;;;157          bool IsSideBlocked() {return _blockedSides;}
000000  4801              LDR      r0,|L1.8|
000002  7880              LDRB     r0,[r0,#2]  ; _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b313_blockedSidesE
000004  4770              BX       lr
;;;158          bool IsForwardBlocked() {return _blockedFwd;}
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo11ProxSensors16IsForwardBlockedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo11ProxSensors16IsForwardBlockedEv PROC ; Anki::Cozmo::ProxSensors::IsForwardBlocked()
;;;157          bool IsSideBlocked() {return _blockedSides;}
;;;158          bool IsForwardBlocked() {return _blockedFwd;}
000000  4801              LDR      r0,|L2.8|
000002  78c0              LDRB     r0,[r0,#3]  ; _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b311_blockedFwdE
000004  4770              BX       lr
;;;159          
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo11ProxSensors6UpdateEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo11ProxSensors6UpdateEv PROC ; Anki::Cozmo::ProxSensors::Update()
;;;30           
;;;31           Result Update()
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;32           {
000004  b085              SUB      sp,sp,#0x14
;;;33             Result retVal = RESULT_OK;
000006  f04f0900          MOV      r9,#0
;;;34             
;;;35             // Get current readings and filter
;;;36             HAL::ProximityValues currProxVals;
;;;37             HAL::GetProximity(&currProxVals);
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetProximityEPNS1_15ProximityValuesE ; Anki::Cozmo::HAL::GetProximity(Anki::Cozmo::HAL::ProximityValues*)
;;;38     
;;;39             switch(currProxVals.latest)
000010  f89d000e          LDRB     r0,[sp,#0xe]
;;;40             {
;;;41               case HAL::IRleft:
;;;42                 _proxLeft = (FILT_COEFF * currProxVals.left) + ((1.f - FILT_COEFF) * _proxLeft);
000014  eddf0a50          VLDR     s1,|L3.344|
000018  ed9f0a50          VLDR     s0,|L3.348|
00001c  f8df8140          LDR      r8,|L3.352|
000020  2800              CMP      r0,#0                 ;39
000022  d011              BEQ      |L3.72|
000024  2801              CMP      r0,#1                 ;39
000026  d02d              BEQ      |L3.132|
000028  2802              CMP      r0,#2                 ;39
00002a  d01c              BEQ      |L3.102|
;;;43                 break;
;;;44                 
;;;45               case HAL::IRright:
;;;46                 _proxRight = (FILT_COEFF * currProxVals.right) + ((1.f - FILT_COEFF) * _proxRight);
;;;47                 break;
;;;48                 
;;;49               case HAL::IRforward:
;;;50                 _proxFwd = (FILT_COEFF * currProxVals.forward) + ((1.f - FILT_COEFF) * _proxFwd);
;;;51                 break;
;;;52                 
;;;53               default:
;;;54                 AnkiError("ProxSensors.Update.BadLatestValue",
00002c  2136              MOVS     r1,#0x36
00002e  484d              LDR      r0,|L3.356|
000030  e9cd0100          STRD     r0,r1,[sp,#0]
000034  a34c              ADR      r3,|L3.360|
000036  a254              ADR      r2,|L3.392|
000038  a162              ADR      r1,|L3.452|
00003a  2005              MOVS     r0,#5
00003c  f7fffffe          BL       _Anki_Log
;;;55                           "Got invalid/unhandled value for ProximityValues.latest.\n");
;;;56                 return RESULT_FAIL;
;;;57                 
;;;58             } // switch(currProxVals.latest)
;;;59     
;;;60             
;;;61             // TODO: Logic for when proximity sensors are blocked by the lift.
;;;62             //       Eventually, this should be computed from actual geometry,
;;;63             //       but for now just have a few very conservative cases.
;;;64             
;;;65             // If lift is in low carry position all readings always valid since
;;;66             // nothing can block the sensors.
;;;67             // If lift is in carry position, assume readings below a certain
;;;68             // head angle are valid.
;;;69             // If lift is any other position, assume all readings are invalid.
;;;70     
;;;71             f32 headAngle = HeadController::GetAngleRad();
;;;72             TimeStamp_t currTime = HAL::GetTimeStamp();
;;;73             bool currBlockedFwd = false, currBlockedSides = false;
;;;74             
;;;75             
;;;76             
;;;77             if (LiftController::IsMoving()) {
;;;78               currBlockedSides = currBlockedFwd = true;
;;;79               
;;;80             } else if (LiftController::GetDesiredHeight() == LIFT_HEIGHT_LOWDOCK) {
;;;81               
;;;82               if (headAngle > -0.3f) {
;;;83                 currBlockedSides = false;
;;;84               } else {
;;;85                 currBlockedSides = true;
;;;86               }
;;;87               currBlockedFwd = false;
;;;88               
;;;89             } else if (LiftController::GetDesiredHeight() == LIFT_HEIGHT_CARRY) {
;;;90               
;;;91               if (headAngle < 0.1f) {
;;;92                 currBlockedFwd = false;
;;;93                 currBlockedSides = false;
;;;94               } else if (headAngle > 0.65f) {
;;;95                 currBlockedFwd = false;
;;;96                 currBlockedSides = true;
;;;97               } else {
;;;98                 currBlockedFwd = true;
;;;99                 currBlockedSides = true;
;;;100              }
;;;101              
;;;102            } else {
;;;103              currBlockedSides = currBlockedFwd = true;
;;;104            }
;;;105            
;;;106            
;;;107            // Update blocked state transition time
;;;108            if (currBlockedFwd != _prevBlockedFwd) {
;;;109              _fwdBlockedTransitionTime = currTime;
;;;110            }
;;;111            if (currBlockedSides != _prevBlockedSides) {
;;;112              _sidesBlockedTransitionTime = currTime;
;;;113            }
;;;114            
;;;115            // Transitions to blocked state is immediate. (Sensors can be occluded as the lift is moving)
;;;116            // Transitions to unblocked state is subject to a delay. (We don't want to immediately validate sensors readings off the lift as it just starts to move out of view.)
;;;117            if (currBlockedFwd) {
;;;118              _blockedFwd = true;
;;;119            }
;;;120            if (currBlockedSides) {
;;;121              _blockedSides = true;
;;;122            }
;;;123            
;;;124            // Set blocked state based on timeout
;;;125            if (currTime - _fwdBlockedTransitionTime > BLOCKED_TIMEOUT) {
;;;126              _blockedFwd = currBlockedFwd;
;;;127            }
;;;128            if (currTime - _sidesBlockedTransitionTime > BLOCKED_TIMEOUT) {
;;;129              _blockedSides = currBlockedSides;
;;;130            }
;;;131    
;;;132            // Update prevBlocked state
;;;133            _prevBlockedFwd = currBlockedFwd;
;;;134            _prevBlockedSides = currBlockedSides;
;;;135    
;;;136            
;;;137            return retVal;
;;;138            
;;;139          } // Update()
000040  b005              ADD      sp,sp,#0x14
000042  2001              MOVS     r0,#1                 ;56
000044  e8bd83f0          POP      {r4-r9,pc}
                  |L3.72|
000048  f8bd0008          LDRH     r0,[sp,#8]            ;42
00004c  ee010a10          VMOV     s2,r0                 ;42
000050  eeb81a41          VCVT.F32.U32 s2,s2                 ;42
000054  ee610a20          VMUL.F32 s1,s2,s1              ;42
000058  ed981a03          VLDR     s2,[r8,#0xc]          ;42
00005c  ee410a00          VMLA.F32 s1,s2,s0              ;42
000060  edc80a03          VSTR     s1,[r8,#0xc]          ;42
000064  e01c              B        |L3.160|
                  |L3.102|
000066  f8bd000a          LDRH     r0,[sp,#0xa]          ;46
00006a  ee010a10          VMOV     s2,r0                 ;46
00006e  eeb81a41          VCVT.F32.U32 s2,s2                 ;46
000072  ee610a20          VMUL.F32 s1,s2,s1              ;46
000076  ed981a05          VLDR     s2,[r8,#0x14]         ;46
00007a  ee410a00          VMLA.F32 s1,s2,s0              ;46
00007e  edc80a05          VSTR     s1,[r8,#0x14]         ;46
000082  e00d              B        |L3.160|
                  |L3.132|
000084  f8bd000c          LDRH     r0,[sp,#0xc]          ;50
000088  ee010a10          VMOV     s2,r0                 ;50
00008c  eeb81a41          VCVT.F32.U32 s2,s2                 ;50
000090  ee610a20          VMUL.F32 s1,s2,s1              ;50
000094  ed981a04          VLDR     s2,[r8,#0x10]         ;50
000098  ee410a00          VMLA.F32 s1,s2,s0              ;50
00009c  edc80a04          VSTR     s1,[r8,#0x10]         ;50
                  |L3.160|
0000a0  f7fffffe          BL       _ZN4Anki5Cozmo14HeadController11GetAngleRadEv ; Anki::Cozmo::HeadController::GetAngleRad()
0000a4  ee106a10          VMOV     r6,s0                 ;71
0000a8  f7fffffe          BL       _ZN4Anki5Cozmo3HAL12GetTimeStampEv ; Anki::Cozmo::HAL::GetTimeStamp()
0000ac  2500              MOVS     r5,#0                 ;73
0000ae  4607              MOV      r7,r0                 ;72
0000b0  462c              MOV      r4,r5                 ;73
0000b2  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController8IsMovingEv ; Anki::Cozmo::LiftController::IsMoving()
0000b6  b988              CBNZ     r0,|L3.220|
0000b8  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16GetDesiredHeightEv ; Anki::Cozmo::LiftController::GetDesiredHeight()
0000bc  ee100a10          VMOV     r0,s0                 ;80
0000c0  f1a04180          SUB      r1,r0,#0x40000000     ;80
0000c4  f1b171dc          SUBS     r1,r1,#0x1b80000      ;80
0000c8  d037              BEQ      |L3.314|
0000ca  f7fffffe          BL       _ZN4Anki5Cozmo14LiftController16GetDesiredHeightEv ; Anki::Cozmo::LiftController::GetDesiredHeight()
0000ce  ee100a10          VMOV     r0,s0                 ;89
0000d2  f1a04184          SUB      r1,r0,#0x42000000     ;89
0000d6  f5b1013e          SUBS     r1,r1,#0xbe0000       ;89
0000da  d033              BEQ      |L3.324|
                  |L3.220|
0000dc  2401              MOVS     r4,#1                 ;103
0000de  4625              MOV      r5,r4                 ;103
                  |L3.224|
0000e0  f8980001          LDRB     r0,[r8,#1]            ;108  ; _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b315_prevBlockedFwdE
0000e4  4285              CMP      r5,r0                 ;108
0000e6  bf18              IT       NE                    ;109
0000e8  f8c87004          STRNE    r7,[r8,#4]            ;109  ; _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b325_fwdBlockedTransitionTimeE
0000ec  f8980000          LDRB     r0,[r8,#0]            ;111  ; _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b317_prevBlockedSidesE
0000f0  4284              CMP      r4,r0                 ;111
0000f2  bf18              IT       NE                    ;112
0000f4  f8c87008          STRNE    r7,[r8,#8]            ;112  ; _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b327_sidesBlockedTransitionTimeE
0000f8  2001              MOVS     r0,#1                 ;39
0000fa  2d00              CMP      r5,#0                 ;117
0000fc  bf18              IT       NE                    ;118
0000fe  f8880003          STRBNE   r0,[r8,#3]            ;118
000102  2c00              CMP      r4,#0                 ;120
000104  bf18              IT       NE                    ;121
000106  f8880002          STRBNE   r0,[r8,#2]            ;121
00010a  f8d80004          LDR      r0,[r8,#4]            ;125  ; _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b325_fwdBlockedTransitionTimeE
00010e  1a38              SUBS     r0,r7,r0              ;125
000110  f5b07f7a          CMP      r0,#0x3e8             ;125
000114  bf88              IT       HI                    ;126
000116  f8885003          STRBHI   r5,[r8,#3]            ;126
00011a  f8d80008          LDR      r0,[r8,#8]            ;128  ; _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b327_sidesBlockedTransitionTimeE
00011e  1a38              SUBS     r0,r7,r0              ;128
000120  f5b07f7a          CMP      r0,#0x3e8             ;128
000124  bf88              IT       HI                    ;129
000126  f8884002          STRBHI   r4,[r8,#2]            ;129
00012a  f8885001          STRB     r5,[r8,#1]            ;133
00012e  f8884000          STRB     r4,[r8,#0]            ;134
000132  b005              ADD      sp,sp,#0x14
000134  4648              MOV      r0,r9                 ;137
000136  e8bd83f0          POP      {r4-r9,pc}
                  |L3.314|
00013a  482b              LDR      r0,|L3.488|
00013c  4286              CMP      r6,r0                 ;82
00013e  d3cf              BCC      |L3.224|
                  |L3.320|
000140  2401              MOVS     r4,#1                 ;85
000142  e7cd              B        |L3.224|
                  |L3.324|
000144  4829              LDR      r0,|L3.492|
000146  4286              CMP      r6,r0                 ;91
000148  dbca              BLT      |L3.224|
00014a  4829              LDR      r0,|L3.496|
00014c  4286              CMP      r6,r0                 ;94
00014e  bfdc              ITT      LE                    ;98
000150  2501              MOVLE    r5,#1                 ;98
000152  462c              MOVLE    r4,r5                 ;99
000154  ddc4              BLE      |L3.224|
000156  e7f3              B        |L3.320|
;;;140          
                          ENDP

                  |L3.344|
000158  3d4ccccd          DCFS     0x3d4ccccd ; 0.05000000074505806
                  |L3.348|
00015c  3f733333          DCFS     0x3f733333 ; 0.94999998807907104
                  |L3.352|
                          DCD      ||.data||
                  |L3.356|
                          DCD      ||.constdata||
                  |L3.360|
000168  73757065          DCB      "supervisor\\src\\proxSensors.cpp",0
00016c  72766973
000170  6f725c73
000174  72635c70
000178  726f7853
00017c  656e736f
000180  72732e63
000184  707000  
000187  00                DCB      0
                  |L3.392|
000188  476f7420          DCB      "Got invalid/unhandled value for ProximityValues.latest."
00018c  696e7661
000190  6c69642f
000194  756e6861
000198  6e646c65
00019c  64207661
0001a0  6c756520
0001a4  666f7220
0001a8  50726f78
0001ac  696d6974
0001b0  7956616c
0001b4  7565732e
0001b8  6c617465
0001bc  73742e  
0001bf  0a00              DCB      "\n",0
0001c1  00                DCB      0
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L3.452|
0001c4  50726f78          DCB      "ProxSensors.Update.BadLatestValue",0
0001c8  53656e73
0001cc  6f72732e
0001d0  55706461
0001d4  74652e42
0001d8  61644c61
0001dc  74657374
0001e0  56616c75
0001e4  6500    
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L3.488|
                          DCD      0xbe99999a
                  |L3.492|
                          DCD      0x3dcccccd
                  |L3.496|
                          DCD      0x3f266666

                          AREA ||i._ZN4Anki5Cozmo11ProxSensors9GetValuesERhS2_S2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo11ProxSensors9GetValuesERhS2_S2_ PROC ; Anki::Cozmo::ProxSensors::GetValues(unsigned char&, unsigned char&, unsigned char&)
;;;143          // Returns the proximity sensor values
;;;144          void GetValues(u8 &left, u8 &forward, u8 &right)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;145          {
;;;146            left = MIN(static_cast<u8>(FLT_ROUND(_proxLeft)), u8_MAX);
000004  4c51              LDR      r4,|L4.332|
000006  eeb60a00          VMOV.F32 s0,#0.50000000
00000a  ed2d8b04          VPUSH    {d8-d9}               ;145
00000e  4616              MOV      r6,r2                 ;145
000010  460d              MOV      r5,r1                 ;145
000012  ed948a03          VLDR     s16,[r4,#0xc]
000016  4607              MOV      r7,r0                 ;145
000018  ee788a00          VADD.F32 s17,s16,s0
00001c  ee389a40          VSUB.F32 s18,s16,s0
000020  eeb58ac0          VCMPE.F32 s16,#0.0
000024  eef1fa10          VMRS     APSR_nzcv,FPSCR
000028  dd04              BLE      |L4.52|
00002a  eeb00a68          VMOV.F32 s0,s17
00002e  f7fffffe          BL       __hardfp_floorf
000032  e003              B        |L4.60|
                  |L4.52|
000034  eeb00a49          VMOV.F32 s0,s18
000038  f7fffffe          BL       __hardfp_ceilf
                  |L4.60|
00003c  eebc0ac0          VCVT.U32.F32 s0,s0
000040  ee101a10          VMOV     r1,s0
000044  b2c8              UXTB     r0,r1
000046  28ff              CMP      r0,#0xff
000048  bf28              IT       CS
00004a  23ff              MOVCS    r3,#0xff
00004c  d212              BCS      |L4.116|
00004e  eeb58ac0          VCMPE.F32 s16,#0.0
000052  eef1fa10          VMRS     APSR_nzcv,FPSCR
000056  dd04              BLE      |L4.98|
000058  eeb00a68          VMOV.F32 s0,s17
00005c  f7fffffe          BL       __hardfp_floorf
000060  e003              B        |L4.106|
                  |L4.98|
000062  eeb00a49          VMOV.F32 s0,s18
000066  f7fffffe          BL       __hardfp_ceilf
                  |L4.106|
00006a  eebc0ac0          VCVT.U32.F32 s0,s0
00006e  ee101a10          VMOV     r1,s0
000072  b2cb              UXTB     r3,r1
                  |L4.116|
000074  703b              STRB     r3,[r7,#0]
;;;147            forward = MIN(static_cast<u8>(FLT_ROUND(_proxFwd)), u8_MAX);
000076  ed948a04          VLDR     s16,[r4,#0x10]
00007a  eeb60a00          VMOV.F32 s0,#0.50000000        ;146
00007e  ee389a00          VADD.F32 s18,s16,s0
000082  ee788a40          VSUB.F32 s17,s16,s0
000086  eeb58ac0          VCMPE.F32 s16,#0.0
00008a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00008e  dd04              BLE      |L4.154|
000090  eeb00a49          VMOV.F32 s0,s18
000094  f7fffffe          BL       __hardfp_floorf
000098  e003              B        |L4.162|
                  |L4.154|
00009a  eeb00a68          VMOV.F32 s0,s17
00009e  f7fffffe          BL       __hardfp_ceilf
                  |L4.162|
0000a2  eebc0ac0          VCVT.U32.F32 s0,s0
0000a6  ee100a10          VMOV     r0,s0
0000aa  b2c0              UXTB     r0,r0
0000ac  28ff              CMP      r0,#0xff
0000ae  bf28              IT       CS
0000b0  20ff              MOVCS    r0,#0xff
0000b2  d212              BCS      |L4.218|
0000b4  eeb58ac0          VCMPE.F32 s16,#0.0
0000b8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000bc  dd04              BLE      |L4.200|
0000be  eeb00a49          VMOV.F32 s0,s18
0000c2  f7fffffe          BL       __hardfp_floorf
0000c6  e003              B        |L4.208|
                  |L4.200|
0000c8  eeb00a68          VMOV.F32 s0,s17
0000cc  f7fffffe          BL       __hardfp_ceilf
                  |L4.208|
0000d0  eebc0ac0          VCVT.U32.F32 s0,s0
0000d4  ee100a10          VMOV     r0,s0
0000d8  b2c0              UXTB     r0,r0
                  |L4.218|
0000da  7028              STRB     r0,[r5,#0]
;;;148            right = MIN(static_cast<u8>(FLT_ROUND(_proxRight)), u8_MAX);
0000dc  ed948a05          VLDR     s16,[r4,#0x14]
0000e0  eeb60a00          VMOV.F32 s0,#0.50000000        ;146
0000e4  ee389a00          VADD.F32 s18,s16,s0
0000e8  ee788a40          VSUB.F32 s17,s16,s0
0000ec  eeb58ac0          VCMPE.F32 s16,#0.0
0000f0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000f4  dd04              BLE      |L4.256|
0000f6  eeb00a49          VMOV.F32 s0,s18
0000fa  f7fffffe          BL       __hardfp_floorf
0000fe  e003              B        |L4.264|
                  |L4.256|
000100  eeb00a68          VMOV.F32 s0,s17
000104  f7fffffe          BL       __hardfp_ceilf
                  |L4.264|
000108  eebc0ac0          VCVT.U32.F32 s0,s0
00010c  ee100a10          VMOV     r0,s0
000110  b2c0              UXTB     r0,r0
000112  28ff              CMP      r0,#0xff
000114  bf28              IT       CS
000116  20ff              MOVCS    r0,#0xff
000118  d212              BCS      |L4.320|
00011a  eeb58ac0          VCMPE.F32 s16,#0.0
00011e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000122  dd04              BLE      |L4.302|
000124  eeb00a49          VMOV.F32 s0,s18
000128  f7fffffe          BL       __hardfp_floorf
00012c  e003              B        |L4.310|
                  |L4.302|
00012e  eeb00a68          VMOV.F32 s0,s17
000132  f7fffffe          BL       __hardfp_ceilf
                  |L4.310|
000136  eebc0ac0          VCVT.U32.F32 s0,s0
00013a  ee100a10          VMOV     r0,s0
00013e  b2c0              UXTB     r0,r0
                  |L4.320|
000140  7030              STRB     r0,[r6,#0]
;;;149            
;;;150            //PERIODIC_PRINT(200, "PROX: %f  %f  %f (%d %d %d) (%d %d %d)\n",
;;;151            //               _proxLeft, _proxFwd, _proxRight,
;;;152            //               left, forward, right,
;;;153            //               _blockedSides, _blockedFwd, _blockedSides);
;;;154          }
000142  ecbd8b04          VPOP     {d8-d9}
000146  e8bd81f0          POP      {r4-r8,pc}
;;;155    
                          ENDP

00014a  0000              DCW      0x0000
                  |L4.332|
                          DCD      ||.data||

                          AREA ||i.__sti___15_proxSensors_cpp_d6c7b5b3||, CODE, READONLY, ALIGN=2

                  __sti___15_proxSensors_cpp_d6c7b5b3 PROC
000000  4803              LDR      r0,|L5.16|
000002  ed9f0a02          VLDR     s0,|L5.12|
000006  ed800a06          VSTR     s0,[r0,#0x18]
00000a  4770              BX       lr
                          ENDP

                  |L5.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L5.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo11ProxSensors6UpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo11ProxSensors6UpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.7||, LINKORDER=||i._ZN4Anki5Cozmo11ProxSensors9GetValuesERhS2_S2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo11ProxSensors9GetValuesERhS2_S2_||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4Anki5Cozmo11ProxSensors13IsSideBlockedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo11ProxSensors13IsSideBlockedEv||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN4Anki5Cozmo11ProxSensors16IsForwardBlockedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo11ProxSensors16IsForwardBlockedEv||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i.__sti___15_proxSensors_cpp_d6c7b5b3||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___15_proxSensors_cpp_d6c7b5b3||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a43          DCB      0x69,0x3a,0x3a,0x43
000014  6f7a6d6f          DCB      0x6f,0x7a,0x6d,0x6f
000018  3a3a5072          DCB      0x3a,0x3a,0x50,0x72
00001c  6f785365          DCB      0x6f,0x78,0x53,0x65
000020  6e736f72          DCB      0x6e,0x73,0x6f,0x72
000024  733a3a55          DCB      0x73,0x3a,0x3a,0x55
000028  70646174          DCB      0x70,0x64,0x61,0x74
00002c  65282900          DCB      0x65,0x28,0x29,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b317_prevBlockedSidesE ; Anki::Cozmo::ProxSensors::<unnamed>::_prevBlockedSides
000000  01                DCB      0x01
                  _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b315_prevBlockedFwdE ; Anki::Cozmo::ProxSensors::<unnamed>::_prevBlockedFwd
000001  00                DCB      0x00
                  _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b313_blockedSidesE ; Anki::Cozmo::ProxSensors::<unnamed>::_blockedSides
000002  00                DCB      0x00
                  _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b311_blockedFwdE ; Anki::Cozmo::ProxSensors::<unnamed>::_blockedFwd
000003  00                DCB      0x00
                  _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b325_fwdBlockedTransitionTimeE ; Anki::Cozmo::ProxSensors::<unnamed>::_fwdBlockedTransitionTime
                          DCD      0x00000000
                  _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b327_sidesBlockedTransitionTimeE ; Anki::Cozmo::ProxSensors::<unnamed>::_sidesBlockedTransitionTime
                          DCD      0x00000000
                  _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b39_proxLeftE ; Anki::Cozmo::ProxSensors::<unnamed>::_proxLeft
                          DCD      0x00000000
                  _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b38_proxFwdE ; Anki::Cozmo::ProxSensors::<unnamed>::_proxFwd
                          DCD      0x00000000
                  _ZN4Anki5Cozmo11ProxSensors39_GLOBAL__N__15_proxSensors_cpp_d6c7b5b310_proxRightE ; Anki::Cozmo::ProxSensors::<unnamed>::_proxRight
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___15_proxSensors_cpp_d6c7b5b3
