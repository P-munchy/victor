; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\quadrefinement.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\quadrefinement.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\quadrefinement.crf ..\coretech\vision\robot\src\quadRefinement.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded15MaxCornerChangeERKNS0_5ArrayIfEERNS0_13QuadrilateralIfEE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15MaxCornerChangeERKNS0_5ArrayIfEERNS0_13QuadrilateralIfEE PROC ; Anki::Embedded::MaxCornerChange(const Anki::Embedded::Array<float>&, Anki::Embedded::Quadrilateral<float>&)
;;;34       namespace Embedded {
;;;35         static f32 MaxCornerChange(const Array<f32>& currentHomography,
000000  b530              PUSH     {r4,r5,lr}
;;;36           Quadrilateral<f32>& currentQuad)
;;;37         {
000002  460d              MOV      r5,r1
000004  ed2d8b0a          VPUSH    {d8-d12}
;;;38           // Compute the current refined corners
;;;39           const f32 h00 = currentHomography[0][0];
000008  2300              MOVS     r3,#0
00000a  b08b              SUB      sp,sp,#0x2c           ;37
00000c  6882              LDR      r2,[r0,#8]            ;37
00000e  6901              LDR      r1,[r0,#0x10]         ;37
000010  fb031002          MLA      r0,r3,r2,r1           ;37
000014  2304              MOVS     r3,#4                 ;37
000016  ed90ba00          VLDR     s22,[r0,#0]
;;;40           const f32 h01 = currentHomography[0][1];
00001a  edd09a01          VLDR     s19,[r0,#4]
;;;41           const f32 h02 = currentHomography[0][2];
00001e  ed909a02          VLDR     s18,[r0,#8]
;;;42     
;;;43           const f32 h10 = currentHomography[1][0];
000022  2001              MOVS     r0,#1
000024  fb001002          MLA      r0,r0,r2,r1
000028  ed90ca00          VLDR     s24,[r0,#0]
;;;44           const f32 h11 = currentHomography[1][1];
00002c  edd0aa01          VLDR     s21,[r0,#4]
;;;45           const f32 h12 = currentHomography[1][2];
000030  edd08a02          VLDR     s17,[r0,#8]
;;;46     
;;;47           const f32 h20 = currentHomography[2][0];
000034  2002              MOVS     r0,#2
000036  fb001002          MLA      r0,r0,r2,r1
00003a  2208              MOVS     r2,#8
00003c  edd0ba00          VLDR     s23,[r0,#0]
;;;48           const f32 h21 = currentHomography[2][1];
000040  ed90aa01          VLDR     s20,[r0,#4]
;;;49           const f32 h22 = currentHomography[2][2];
000044  ed908a02          VLDR     s16,[r0,#8]
;;;50     
;;;51           // Make a copy of the current position before we overwrite it, so we can
;;;52           // compare to it to see how much we changed
;;;53           Quadrilateral<f32> prevQuad = currentQuad;
000048  4668              MOV      r0,sp
00004a  4947              LDR      r1,|L1.360|
00004c  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000050  2200              MOVS     r2,#0
                  |L1.82|
000052  eb0501c2          ADD      r1,r5,r2,LSL #3
000056  eb0003c2          ADD      r3,r0,r2,LSL #3
00005a  ed910a00          VLDR     s0,[r1,#0]
00005e  1c52              ADDS     r2,r2,#1
000060  ed830a00          VSTR     s0,[r3,#0]
000064  ed910a01          VLDR     s0,[r1,#4]
000068  2a04              CMP      r2,#4
00006a  ed830a01          VSTR     s0,[r3,#4]
00006e  dbf0              BLT      |L1.82|
;;;54     
;;;55           // Homography is always mapping from canonical quad (0,0), (0,1), (1,0), (1,1)
;;;56           f32 normalization = 1.f / h22;
000070  eef70a00          VMOV.F32 s1,#1.00000000
;;;57           currentQuad[0].x = h02 * normalization;
;;;58           currentQuad[0].y = h12 * normalization;
;;;59     
;;;60           normalization = 1.f / (h21 + h22);
;;;61           currentQuad[1].x = (h01 + h02) * normalization;
;;;62           currentQuad[1].y = (h11 + h12) * normalization;
;;;63     
;;;64           normalization = 1.f / (h20 + h22);
;;;65           currentQuad[2].x = (h00 + h02) * normalization;
;;;66           currentQuad[2].y = (h10 + h12) * normalization;
;;;67     
;;;68           normalization = 1.f / (h20 + h21 + h22);
;;;69           currentQuad[3].x = (h00 + h01 + h02) * normalization;
;;;70           currentQuad[3].y = (h10 + h11 + h12) * normalization;
;;;71     
;;;72           // See how different the new corner locations are from the originals we
;;;73           // stored above
;;;74           f32 maxChange = 0.f;
;;;75           for(s32 i=0; i<4; ++i) {
000074  2400              MOVS     r4,#0
000076  ee800a88          VDIV.F32 s0,s1,s16             ;56
00007a  ee291a00          VMUL.F32 s2,s18,s0             ;57
00007e  ee280a80          VMUL.F32 s0,s17,s0             ;58
000082  ed851a00          VSTR     s2,[r5,#0]            ;57
000086  ee3a1a08          VADD.F32 s2,s20,s16            ;60
00008a  ed850a01          VSTR     s0,[r5,#4]            ;58
00008e  ee800a81          VDIV.F32 s0,s1,s2              ;60
000092  ee391a89          VADD.F32 s2,s19,s18            ;61
000096  ee211a00          VMUL.F32 s2,s2,s0              ;61
00009a  ed851a02          VSTR     s2,[r5,#8]            ;61
00009e  ee3a1aa8          VADD.F32 s2,s21,s17            ;62
0000a2  ee210a00          VMUL.F32 s0,s2,s0              ;62
0000a6  ee3b1a88          VADD.F32 s2,s23,s16            ;64
0000aa  ed850a03          VSTR     s0,[r5,#0xc]          ;62
0000ae  ee800a81          VDIV.F32 s0,s1,s2              ;64
0000b2  ee3b1a09          VADD.F32 s2,s22,s18            ;65
0000b6  ee211a00          VMUL.F32 s2,s2,s0              ;65
0000ba  ed851a04          VSTR     s2,[r5,#0x10]         ;65
0000be  ee3c1a28          VADD.F32 s2,s24,s17            ;66
0000c2  ee210a00          VMUL.F32 s0,s2,s0              ;66
0000c6  ed850a05          VSTR     s0,[r5,#0x14]         ;66
0000ca  ee3b0a8a          VADD.F32 s0,s23,s20            ;68
0000ce  ee301a08          VADD.F32 s2,s0,s16             ;68
0000d2  ed9f8a26          VLDR     s16,|L1.364|
0000d6  ee800a81          VDIV.F32 s0,s1,s2              ;68
0000da  ee7b0a29          VADD.F32 s1,s22,s19            ;69
0000de  ee700a89          VADD.F32 s1,s1,s18             ;69
0000e2  ee600a80          VMUL.F32 s1,s1,s0              ;69
0000e6  edc50a06          VSTR     s1,[r5,#0x18]         ;69
0000ea  ee7c0a2a          VADD.F32 s1,s24,s21            ;70
0000ee  ee700aa8          VADD.F32 s1,s1,s17             ;70
0000f2  ee200a80          VMUL.F32 s0,s1,s0              ;70
0000f6  ed850a07          VSTR     s0,[r5,#0x1c]         ;70
                  |L1.250|
;;;76             const f32 cornerChange = (currentQuad[i] - prevQuad[i]).Length();
0000fa  4668              MOV      r0,sp
0000fc  eb0501c4          ADD      r1,r5,r4,LSL #3
000100  eb0000c4          ADD      r0,r0,r4,LSL #3
000104  ed910a00          VLDR     s0,[r1,#0]
000108  edd00a00          VLDR     s1,[r0,#0]
00010c  ed901a01          VLDR     s2,[r0,#4]
000110  ee700a60          VSUB.F32 s1,s0,s1
000114  ed910a01          VLDR     s0,[r1,#4]
000118  edcd0a08          VSTR     s1,[sp,#0x20]
00011c  ee300a41          VSUB.F32 s0,s0,s2
000120  ee600aa0          VMUL.F32 s1,s1,s1
000124  ed8d0a09          VSTR     s0,[sp,#0x24]
000128  ed9d0a09          VLDR     s0,[sp,#0x24]
00012c  ee400a00          VMLA.F32 s1,s0,s0
000130  eeb10ae0          VSQRT.F32 s0,s1
000134  eeb40a40          VCMP.F32 s0,s0
000138  eef1fa10          VMRS     APSR_nzcv,FPSCR
00013c  bf1c              ITT      NE
00013e  eeb00a60          VMOVNE.F32 s0,s1
000142  f7fffffe          BLNE     __hardfp_sqrtf
;;;77             if(cornerChange > maxChange) {
000146  eeb40ac8          VCMPE.F32 s0,s16
00014a  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;78               maxChange = cornerChange;
00014e  bfc8              IT       GT
000150  eeb08a40          VMOVGT.F32 s16,s0
000154  1c64              ADDS     r4,r4,#1              ;75
000156  2c04              CMP      r4,#4                 ;75
000158  dbcf              BLT      |L1.250|
;;;79             }
;;;80           }
;;;81     
;;;82           return maxChange;
;;;83         } // MaxCornerChange()
00015a  b00b              ADD      sp,sp,#0x2c
00015c  eeb00a48          VMOV.F32 s0,s16                ;82
000160  ecbd8b0a          VPOP     {d8-d12}
000164  bd30              POP      {r4,r5,pc}
;;;84     
                          ENDP

000166  0000              DCW      0x0000
                  |L1.360|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()
                  |L1.364|
00016c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki8Embedded19RefineQuadrilateralERKNS0_13QuadrilateralIfEERKNS0_5ArrayIfEERKNS5_IhEEfiffiffRS2_RS6_NS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded19RefineQuadrilateralERKNS0_13QuadrilateralIfEERKNS0_5ArrayIfEERKNS5_IhEEfiffiffRS2_RS6_NS0_11MemoryStackE PROC ; Anki::Embedded::RefineQuadrilateral(const Anki::Embedded::Quadrilateral<float>&, const Anki::Embedded::Array<float>&, const Anki::Embedded::Array<unsigned char>&, float, int, float, float, int, float, float, Anki::Embedded::Quadrilateral<float>&, Anki::Embedded::Array<float>&, Anki::Embedded::MemoryStack)
;;;84     
;;;85         Result RefineQuadrilateral(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;86           const Quadrilateral<f32>& initialQuad,
;;;87           const Array<f32>& initialHomography,
;;;88           const Array<u8> &image,
;;;89           const f32 squareWidthFraction,
;;;90           const s32 maxIterations,
;;;91           const f32 darkGray,
;;;92           const f32 brightGray,
;;;93           const s32 numSamples,
;;;94           const f32 maxCornerChange,
;;;95           const f32 minCornerChange,
;;;96           Quadrilateral<f32>& refinedQuad,
;;;97           Array<f32>& refinedHomography,
;;;98           MemoryStack scratch)
;;;99         {
000004  ed2d0b06          VPUSH    {d0-d2}
000008  ed2d8b10          VPUSH    {d8-d15}
00000c  f5ad7d3b          SUB      sp,sp,#0x2ec
000010  eef0ba41          VMOV.F32 s23,s2
000014  eeb0ca60          VMOV.F32 s24,s1
000018  eef0ca40          VMOV.F32 s25,s0
00001c  eddd8ade          VLDR     s17,[sp,#0x378]
;;;100          BeginBenchmark("vme_quadrefine_init");
000020  a0fd              ADR      r0,|L2.1048|
000022  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000026  9ee0              LDR      r6,[sp,#0x380]
000028  9cd2              LDR      r4,[sp,#0x348]
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
;;;101    
;;;102          Result lastResult = RESULT_OK;
;;;103    
;;;104          AnkiConditionalErrorAndReturnValue(AreEqualSize(3, 3, refinedHomography, initialHomography),
000030  4dfe              LDR      r5,|L2.1068|
000032  2800              CMP      r0,#0
000034  f000839c          BEQ.W    |L2.1904|
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00003e  2800              CMP      r0,#0
000040  f0008396          BEQ.W    |L2.1904|
000044  2100              MOVS     r1,#0
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00004c  2803              CMP      r0,#3
00004e  f040838f          BNE.W    |L2.1904|
000052  2101              MOVS     r1,#1
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00005a  2803              CMP      r0,#3
00005c  f0408388          BNE.W    |L2.1904|
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000066  b1d8              CBZ      r0,|L2.160|
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00006e  b1b8              CBZ      r0,|L2.160|
000070  2100              MOVS     r1,#0
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000078  4607              MOV      r7,r0
00007a  2100              MOVS     r1,#0
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000082  4287              CMP      r7,r0
000084  d10c              BNE      |L2.160|
000086  2101              MOVS     r1,#1
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00008e  4606              MOV      r6,r0
000090  2101              MOVS     r1,#1
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000098  4286              CMP      r6,r0
00009a  bf08              IT       EQ
00009c  2001              MOVEQ    r0,#1
00009e  d000              BEQ      |L2.162|
                  |L2.160|
0000a0  2000              MOVS     r0,#0
                  |L2.162|
0000a2  2800              CMP      r0,#0
0000a4  f0008364          BEQ.W    |L2.1904|
0000a8  9ed2              LDR      r6,[sp,#0x348]
0000aa  9ce0              LDR      r4,[sp,#0x380]
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0000b2  2800              CMP      r0,#0
;;;105            RESULT_FAIL_INVALID_SIZE,
;;;106            "RefineQuadrilateral",
;;;107            "Input and Output refined homography array must be valid and 3x3.");
;;;108    
;;;109          AnkiConditionalErrorAndReturnValue(NotAliased(initialHomography, refinedHomography),
0000b4  f000836e          BEQ.W    |L2.1940|
0000b8  4620              MOV      r0,r4
0000ba  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0000be  2800              CMP      r0,#0
0000c0  f0008368          BEQ.W    |L2.1940|
0000c4  6930              LDR      r0,[r6,#0x10]
0000c6  9000              STR      r0,[sp,#0]
0000c8  6920              LDR      r0,[r4,#0x10]
0000ca  2100              MOVS     r1,#0
0000cc  466a              MOV      r2,sp
0000ce  9001              STR      r0,[sp,#4]
                  |L2.208|
0000d0  1c48              ADDS     r0,r1,#1
0000d2  2802              CMP      r0,#2
0000d4  bfb8              IT       LT
0000d6  f8523021          LDRLT    r3,[r2,r1,LSL #2]
0000da  da07              BGE      |L2.236|
                  |L2.220|
0000dc  f852c020          LDR      r12,[r2,r0,LSL #2]
0000e0  4563              CMP      r3,r12
0000e2  f0008357          BEQ.W    |L2.1940|
0000e6  1c40              ADDS     r0,r0,#1
0000e8  2802              CMP      r0,#2
0000ea  dbf7              BLT      |L2.220|
                  |L2.236|
0000ec  1c49              ADDS     r1,r1,#1
0000ee  2902              CMP      r1,#2
0000f0  dbee              BLT      |L2.208|
0000f2  99d1              LDR      r1,[sp,#0x344]
;;;110            RESULT_FAIL_ALIASED_MEMORY, "RefineQuadrilateral", "initialHomography and refinedHomography are aliased");
;;;111    
;;;112    #if VISUALIZE_WITH_MATLAB
;;;113          CoreTechPrint("Initial quad: ");
;;;114          initialQuad.Print();
;;;115          CoreTechPrint("\n");
;;;116    
;;;117          matlab.PutArray(image, "img");
;;;118          matlab.PutQuad(initialQuad, "initialQuad");
;;;119          matlab.EvalStringEcho("initialQuad = double(initialQuad); "
;;;120            "imagesc(img), axis image, hold on, colormap(gray), "
;;;121            "plot(initialQuad([1 2 4 3 1],1)+1, "
;;;122            "     initialQuad([1 2 4 3 1],2)+1, "
;;;123            "     'r', 'LineWidth', 2, "
;;;124            "     'Tag', 'initialQuad'); drawnow");
;;;125    
;;;126    #endif
;;;127    
;;;128          // Use the size of the initial quad to establish the resolution and thus
;;;129          // the scale of the derivatives of the implicit template model
;;;130          //
;;;131          //diagonal = sqrt(max( sum((this.corners(1,:)-this.corners(4,:)).^2), ...
;;;132          //    sum((this.corners(2,:)-this.corners(3,:)).^2))) / sqrt(2);
;;;133          const Point<f32> diff03 = initialQuad[0] - initialQuad[3];
;;;134          const Point<f32> diff12 = initialQuad[1] - initialQuad[2];
;;;135          const f32 diagonal = MAX(diff03.Length(), diff12.Length()) / sqrtf(2.f);
0000f4  eeb09a00          VMOV.F32 s18,#2.00000000
0000f8  ed910a00          VLDR     s0,[r1,#0]
0000fc  edd10a06          VLDR     s1,[r1,#0x18]
000100  ed911a07          VLDR     s2,[r1,#0x1c]
000104  ee300a60          VSUB.F32 s0,s0,s1
000108  edd10a01          VLDR     s1,[r1,#4]
00010c  ed8d0a7c          VSTR     s0,[sp,#0x1f0]
000110  ee700ac1          VSUB.F32 s1,s1,s2
000114  edcd0a7d          VSTR     s1,[sp,#0x1f4]
000118  ed910a02          VLDR     s0,[r1,#8]
00011c  edd10a04          VLDR     s1,[r1,#0x10]
000120  ed911a05          VLDR     s2,[r1,#0x14]
000124  ee300a60          VSUB.F32 s0,s0,s1
000128  edd10a03          VLDR     s1,[r1,#0xc]
00012c  ed8d0a7e          VSTR     s0,[sp,#0x1f8]
000130  ee700ac1          VSUB.F32 s1,s1,s2
000134  edcd0a7f          VSTR     s1,[sp,#0x1fc]
000138  ed9f8abd          VLDR     s16,|L2.1072|
00013c  a87c              ADD      r0,sp,#0x1f0
00013e  f7fffffe          BL       _ZNK4Anki8Embedded5PointIfE6LengthEv ; Anki::Embedded::Point<float>::Length() const
000142  eef09a40          VMOV.F32 s19,s0
000146  a87e              ADD      r0,sp,#0x1f8
000148  f7fffffe          BL       _ZNK4Anki8Embedded5PointIfE6LengthEv ; Anki::Embedded::Point<float>::Length() const
00014c  eeb40ae9          VCMPE.F32 s0,s19
000150  eef1fa10          VMRS     APSR_nzcv,FPSCR
000154  bf34              ITE      CC
000156  a87c              ADDCC    r0,sp,#0x1f0
000158  a87e              ADDCS    r0,sp,#0x1f8
00015a  f7fffffe          BL       _ZNK4Anki8Embedded5PointIfE6LengthEv ; Anki::Embedded::Point<float>::Length() const
00015e  eec00a08          VDIV.F32 s1,s0,s16
;;;136    
;;;137          // Set up the coordinate samples for the inner and outer squares:
;;;138          //
;;;139          // xSquareOuter = [linspace(0,1,N) linspace(0,1,N) zeros(1,N)      ones(1,N)];
;;;140          // ySquareOuter = [zeros(1,N)      ones(1,N)       linspace(0,1,N) linspace(0,1,N)];
;;;141          //
;;;142          // xSquareInner = [linspace(this.SquareWidthFraction, 1-this.SquareWidthFraction, N) ...
;;;143          //    linspace(this.SquareWidthFraction, 1-this.SquareWidthFraction, N) ...
;;;144          //    this.SquareWidthFraction*ones(1,N) ...
;;;145          //    (1-this.SquareWidthFraction)*ones(1,N)];
;;;146          //
;;;147          // ySquareInner = [this.SquareWidthFraction*ones(1,N) ...
;;;148          //    (1-this.SquareWidthFraction)*ones(1,N) ...
;;;149          //    linspace(this.SquareWidthFraction, 1-this.SquareWidthFraction, N) ...
;;;150          //    linspace(this.SquareWidthFraction, 1-this.SquareWidthFraction, N)];
;;;151          //
;;;152          // xsquare = [xSquareInner xSquareOuter]';
;;;153          // ysquare = [ySquareInner ySquareOuter]';
;;;154          //
;;;155          // TxOuter = [-1 zeros(1,N-2) 1, -1 zeros(1,N-2) 1, -ones(1,N), ones(1,N)];
;;;156          // TyOuter = [-ones(1,N), ones(1,N), -1 zeros(1,N-2) 1, -1 zeros(1,N-2) 1];
;;;157          // TxInner = -TxOuter;
;;;158          // TyInner = -TyOuter;
;;;159          //
;;;160          // Tx = Contrast/2 * diagonal*[TxInner TxOuter]';
;;;161          // Ty = Contrast/2 * diagonal*[TyInner TyOuter]';
;;;162    
;;;163          const f32 contrast = (brightGray - darkGray)/255.f;
000162  ee3b1acc          VSUB.F32 s2,s23,s24
000166  eddf1ab3          VLDR     s3,|L2.1076|
;;;164          const f32 derivMagnitude = 0.5f * contrast * diagonal;
00016a  eeb6aa00          VMOV.F32 s20,#0.50000000
00016e  ee810a21          VDIV.F32 s0,s2,s3              ;163
000172  ee200a0a          VMUL.F32 s0,s0,s20
000176  ee208a20          VMUL.F32 s16,s0,s1
;;;165    
;;;166          // N = ceil(NumSamples/8);
;;;167          const s32 N = CeilS32(static_cast<f32>(numSamples)/8.f);
00017a  eeb80ae8          VCVT.F32.S32 s0,s17
00017e  eef40a00          VMOV.F32 s1,#0.12500000
000182  ee200a20          VMUL.F32 s0,s0,s1
000186  f7fffffe          BL       __hardfp_ceilf
00018a  eebd0ac0          VCVT.S32.F32 s0,s0
;;;168          const s32 actualNumSamples = 8*N;
;;;169    
;;;170          const f32 outerInc = 1.f / static_cast<f32>(N-1);
00018e  eef7fa00          VMOV.F32 s31,#1.00000000
;;;171          //LinearSequence<f32> OuterOneToN = LinearSequence<f32>(0.f, outerInc, 1.f);
;;;172    
;;;173          const f32 innerInc = (1.f - 2.f*squareWidthFraction) / static_cast<f32>(N-1);
;;;174          //LinearSequence<f32> InnerOneToN = LinearSequence<f32>(squareWidthFraction, innerInc, 1.f-squareWidthFraction);
;;;175    
;;;176          // Template coordinates
;;;177          Array<f32> xSquare(1, actualNumSamples, scratch);
000192  2300              MOVS     r3,#0
000194  ee104a10          VMOV     r4,s0
000198  eef00a6f          VMOV.F32 s1,s31                ;170
00019c  461a              MOV      r2,r3
00019e  00e0              LSLS     r0,r4,#3              ;168
0001a0  907b              STR      r0,[sp,#0x1ec]        ;170
0001a2  1e60              SUBS     r0,r4,#1              ;170
0001a4  ee000a10          VMOV     s0,r0                 ;170
0001a8  ee4c0ac9          VMLS.F32 s1,s25,s18            ;173
0001ac  2101              MOVS     r1,#1
0001ae  eeb80ac0          VCVT.F32.S32 s0,s0                 ;170
0001b2  eecf8a80          VDIV.F32 s17,s31,s0            ;170
0001b6  ee000a10          VMOV     s0,r0                 ;173
0001ba  a8b7              ADD      r0,sp,#0x2dc
0001bc  eeb80ac0          VCVT.F32.S32 s0,s0                 ;173
0001c0  ee80da80          VDIV.F32 s26,s1,s0             ;173
0001c4  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0001c8  6800              LDR      r0,[r0,#0]
0001ca  9000              STR      r0,[sp,#0]
0001cc  2101              MOVS     r1,#1
0001ce  a86c              ADD      r0,sp,#0x1b0
0001d0  9be1              LDR      r3,[sp,#0x384]
0001d2  9a7b              LDR      r2,[sp,#0x1ec]
0001d4  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;178          Array<f32> ySquare(1, actualNumSamples, scratch);
0001d8  2300              MOVS     r3,#0
0001da  461a              MOV      r2,r3
0001dc  2101              MOVS     r1,#1
0001de  a8b8              ADD      r0,sp,#0x2e0
0001e0  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0001e4  6800              LDR      r0,[r0,#0]
0001e6  9000              STR      r0,[sp,#0]
0001e8  2101              MOVS     r1,#1
0001ea  a871              ADD      r0,sp,#0x1c4
0001ec  9be1              LDR      r3,[sp,#0x384]
0001ee  9a7b              LDR      r2,[sp,#0x1ec]
0001f0  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;179    
;;;180          // Template derivatives
;;;181          Array<f32> Tx(1, actualNumSamples, scratch);
0001f4  2300              MOVS     r3,#0
0001f6  461a              MOV      r2,r3
0001f8  2101              MOVS     r1,#1
0001fa  a8b9              ADD      r0,sp,#0x2e4
0001fc  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
000200  6800              LDR      r0,[r0,#0]
000202  9000              STR      r0,[sp,#0]
000204  2101              MOVS     r1,#1
000206  a876              ADD      r0,sp,#0x1d8
000208  9be1              LDR      r3,[sp,#0x384]
00020a  9a7b              LDR      r2,[sp,#0x1ec]
00020c  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;182          Array<f32> Ty(1, actualNumSamples, scratch);
000210  2300              MOVS     r3,#0
000212  461a              MOV      r2,r3
000214  2101              MOVS     r1,#1
000216  a8b5              ADD      r0,sp,#0x2d4
000218  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00021c  6800              LDR      r0,[r0,#0]
00021e  9000              STR      r0,[sp,#0]
000220  2101              MOVS     r1,#1
000222  a880              ADD      r0,sp,#0x200
000224  9be1              LDR      r3,[sp,#0x384]
000226  9a7b              LDR      r2,[sp,#0x1ec]
000228  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;183    
;;;184          AnkiConditionalErrorAndReturnValue(xSquare.IsValid(), RESULT_FAIL_MEMORY,
00022c  a86c              ADD      r0,sp,#0x1b0
00022e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000232  2800              CMP      r0,#0
000234  f00082b9          BEQ.W    |L2.1962|
;;;185            "RefineQuadrilateral",
;;;186            "Failed to allocate xSquare Array.");
;;;187    
;;;188          AnkiConditionalErrorAndReturnValue(ySquare.IsValid(), RESULT_FAIL_MEMORY,
000238  a871              ADD      r0,sp,#0x1c4
00023a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00023e  2800              CMP      r0,#0
000240  f00082bf          BEQ.W    |L2.1986|
;;;189            "RefineQuadrilateral",
;;;190            "Failed to allocate ySquare Array.");
;;;191    
;;;192          AnkiConditionalErrorAndReturnValue(Tx.IsValid(), RESULT_FAIL_MEMORY,
000244  a876              ADD      r0,sp,#0x1d8
000246  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00024a  2800              CMP      r0,#0
00024c  f00082c5          BEQ.W    |L2.2010|
;;;193            "RefineQuadrilateral",
;;;194            "Failed to allocate Tx Array.");
;;;195    
;;;196          AnkiConditionalErrorAndReturnValue(Ty.IsValid(), RESULT_FAIL_MEMORY,
000250  a880              ADD      r0,sp,#0x200
000252  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000256  2800              CMP      r0,#0
000258  f00082cb          BEQ.W    |L2.2034|
00025c  9a6e              LDR      r2,[sp,#0x1b8]
00025e  9970              LDR      r1,[sp,#0x1c0]
;;;197            "RefineQuadrilateral",
;;;198            "Failed to allocate Ty Array.");
;;;199    
;;;200          //
;;;201          // Fill in the top and bottom coordinates and derivatives
;;;202          //
;;;203    
;;;204          // Outer
;;;205          {
;;;206            f32 * restrict pXtop = xSquare.Pointer(0,0);
000260  2000              MOVS     r0,#0
000262  fb001602          MLA      r6,r0,r2,r1
000266  9a73              LDR      r2,[sp,#0x1cc]
000268  9975              LDR      r1,[sp,#0x1d4]
00026a  9b82              LDR      r3,[sp,#0x208]
00026c  fb001c02          MLA      r12,r0,r2,r1
000270  9a78              LDR      r2,[sp,#0x1e0]
000272  997a              LDR      r1,[sp,#0x1e8]
000274  eb060884          ADD      r8,r6,r4,LSL #2
000278  fb001102          MLA      r1,r0,r2,r1
00027c  9a84              LDR      r2,[sp,#0x210]
00027e  eb0c0784          ADD      r7,r12,r4,LSL #2
000282  fb002303          MLA      r3,r0,r3,r2
000286  eb010284          ADD      r2,r1,r4,LSL #2
00028a  eb030984          ADD      r9,r3,r4,LSL #2
;;;207            f32 * restrict pYtop = ySquare.Pointer(0,0);
;;;208    
;;;209            f32 * restrict pTXtop = Tx.Pointer(0,0);
;;;210            f32 * restrict pTYtop = Ty.Pointer(0,0);
;;;211    
;;;212            f32 * restrict pXbtm = xSquare.Pointer(0,N);
;;;213            f32 * restrict pYbtm = ySquare.Pointer(0,N);
;;;214    
;;;215            f32 * restrict pTXbtm = Tx.Pointer(0,N);
;;;216            f32 * restrict pTYbtm = Ty.Pointer(0,N);
;;;217    
;;;218            f32 x=0.f;
00028e  ed9fba6a          VLDR     s22,|L2.1080|
;;;219            for(s32 index = 0; index<N; x += outerInc, ++index)
000292  2c00              CMP      r4,#0
000294  eef0aa4b          VMOV.F32 s21,s22               ;218
;;;220            {
;;;221              pXtop[index] = x;
;;;222              pYtop[index] = 0.f;
;;;223    
;;;224              pXbtm[index] = x;
;;;225              pYbtm[index] = 1.f;
;;;226    
;;;227              pTXtop[index] =  0.f;
;;;228              pTYtop[index] = -derivMagnitude;
000298  bfc8              IT       GT
00029a  eeb10a48          VNEGGT.F32 s0,s16
00029e  dd24              BLE      |L2.746|
                  |L2.672|
0002a0  eb060a80          ADD      r10,r6,r0,LSL #2      ;221
0002a4  edcaaa00          VSTR     s21,[r10,#0]          ;221
0002a8  eb0c0a80          ADD      r10,r12,r0,LSL #2     ;222
0002ac  ed8aba00          VSTR     s22,[r10,#0]          ;222
0002b0  eb080a80          ADD      r10,r8,r0,LSL #2      ;224
0002b4  edcaaa00          VSTR     s21,[r10,#0]          ;224
0002b8  eb070a80          ADD      r10,r7,r0,LSL #2      ;225
0002bc  ee7aaaa8          VADD.F32 s21,s21,s17           ;219
0002c0  edcafa00          VSTR     s31,[r10,#0]          ;225
0002c4  eb010a80          ADD      r10,r1,r0,LSL #2      ;227
0002c8  ed8aba00          VSTR     s22,[r10,#0]          ;227
0002cc  eb030a80          ADD      r10,r3,r0,LSL #2
0002d0  ed8a0a00          VSTR     s0,[r10,#0]
;;;229    
;;;230              pTXbtm[index] = 0.f;
0002d4  eb020a80          ADD      r10,r2,r0,LSL #2
0002d8  ed8aba00          VSTR     s22,[r10,#0]
;;;231              pTYbtm[index] = derivMagnitude;
0002dc  eb090a80          ADD      r10,r9,r0,LSL #2
0002e0  1c40              ADDS     r0,r0,#1              ;219
0002e2  ed8a8a00          VSTR     s16,[r10,#0]
0002e6  4284              CMP      r4,r0                 ;219
0002e8  dcda              BGT      |L2.672|
                  |L2.746|
;;;232            }
;;;233    
;;;234            pTXtop[0]   = -derivMagnitude;
0002ea  eef11a48          VNEG.F32 s3,s16
;;;235            pTXtop[N-1] =  derivMagnitude;
0002ee  eb010084          ADD      r0,r1,r4,LSL #2
0002f2  edc11a00          VSTR     s3,[r1,#0]            ;234
0002f6  ed008a01          VSTR     s16,[r0,#-4]
;;;236    
;;;237            pTXbtm[0]   = -derivMagnitude;
;;;238            pTXbtm[N-1] =  derivMagnitude;
0002fa  eb020084          ADD      r0,r2,r4,LSL #2
0002fe  edc21a00          VSTR     s3,[r2,#0]            ;237
000302  ed008a01          VSTR     s16,[r0,#-4]
000306  9b6e              LDR      r3,[sp,#0x1b8]
000308  9970              LDR      r1,[sp,#0x1c0]
;;;239          } // Outer Top / Bottom
;;;240    
;;;241          // Inner
;;;242          {
;;;243            f32 * restrict pXtop = xSquare.Pointer(0,4*N);
00030a  2000              MOVS     r0,#0
00030c  fb001803          MLA      r8,r0,r3,r1
000310  9b73              LDR      r3,[sp,#0x1cc]
000312  9975              LDR      r1,[sp,#0x1d4]
000314  9e78              LDR      r6,[sp,#0x1e0]
000316  fb001303          MLA      r3,r0,r3,r1
00031a  997a              LDR      r1,[sp,#0x1e8]
00031c  00a2              LSLS     r2,r4,#2
00031e  fb001006          MLA      r0,r0,r6,r1
000322  f8dda208          LDR      r10,[sp,#0x208]
000326  f8dd9210          LDR      r9,[sp,#0x210]
;;;244            f32 * restrict pYtop = ySquare.Pointer(0,4*N);
;;;245    
;;;246            f32 * restrict pTXtop = Tx.Pointer(0,4*N);
;;;247            f32 * restrict pTYtop = Ty.Pointer(0,4*N);
00032a  2600              MOVS     r6,#0
00032c  fb06990a          MLA      r9,r6,r10,r9
000330  eb080782          ADD      r7,r8,r2,LSL #2
000334  eb030c82          ADD      r12,r3,r2,LSL #2
000338  eb000182          ADD      r1,r0,r2,LSL #2
00033c  eb090682          ADD      r6,r9,r2,LSL #2
;;;248    
;;;249            f32 * restrict pXbtm = xSquare.Pointer(0,5*N);
000340  eb040284          ADD      r2,r4,r4,LSL #2
000344  eeb09a6c          VMOV.F32 s18,s25               ;173
000348  eeb70a00          VMOV.F32 s0,#1.00000000        ;170
00034c  eb080882          ADD      r8,r8,r2,LSL #2       ;170
000350  eb030382          ADD      r3,r3,r2,LSL #2       ;170
000354  eb000082          ADD      r0,r0,r2,LSL #2       ;170
000358  eb090982          ADD      r9,r9,r2,LSL #2       ;170
;;;250            f32 * restrict pYbtm = ySquare.Pointer(0,5*N);
;;;251    
;;;252            f32 * restrict pTXbtm = Tx.Pointer(0,5*N);
;;;253            f32 * restrict pTYbtm = Ty.Pointer(0,5*N);
;;;254    
;;;255            f32 x = squareWidthFraction;
;;;256            for(s32 index = 0; index < N; x += innerInc, ++index)
;;;257            {
;;;258              pXtop[index] = x;
;;;259              pYtop[index] = squareWidthFraction;
;;;260    
;;;261              pXbtm[index] = x;
;;;262              pYbtm[index] = 1.f - squareWidthFraction;
00035c  ee300a49          VSUB.F32 s0,s0,s18
000360  2200              MOVS     r2,#0                 ;256
000362  2c00              CMP      r4,#0                 ;256
000364  dd24              BLE      |L2.944|
                  |L2.870|
000366  eb070a82          ADD      r10,r7,r2,LSL #2      ;258
00036a  ed8a9a00          VSTR     s18,[r10,#0]          ;258
00036e  eb0c0a82          ADD      r10,r12,r2,LSL #2     ;259
000372  edcaca00          VSTR     s25,[r10,#0]          ;259
000376  eb080a82          ADD      r10,r8,r2,LSL #2      ;261
00037a  ed8a9a00          VSTR     s18,[r10,#0]          ;261
00037e  eb030a82          ADD      r10,r3,r2,LSL #2
000382  ee399a0d          VADD.F32 s18,s18,s26           ;256
000386  ed8a0a00          VSTR     s0,[r10,#0]
;;;263    
;;;264              pTXtop[index] = 0.f;
00038a  eb010a82          ADD      r10,r1,r2,LSL #2
00038e  ed8aba00          VSTR     s22,[r10,#0]
;;;265              pTYtop[index] = derivMagnitude;
000392  eb060a82          ADD      r10,r6,r2,LSL #2
000396  ed8a8a00          VSTR     s16,[r10,#0]
;;;266    
;;;267              pTXbtm[index] =  0.f;
00039a  eb000a82          ADD      r10,r0,r2,LSL #2
00039e  ed8aba00          VSTR     s22,[r10,#0]
;;;268              pTYbtm[index] = -derivMagnitude;
0003a2  eb090a82          ADD      r10,r9,r2,LSL #2
0003a6  1c52              ADDS     r2,r2,#1              ;256
0003a8  edca1a00          VSTR     s3,[r10,#0]
0003ac  4294              CMP      r4,r2                 ;256
0003ae  dcda              BGT      |L2.870|
                  |L2.944|
;;;269            }
;;;270    
;;;271            pTXtop[0]   =  derivMagnitude;
0003b0  ed818a00          VSTR     s16,[r1,#0]
;;;272            pTXtop[N-1] = -derivMagnitude;
0003b4  eb010184          ADD      r1,r1,r4,LSL #2
0003b8  ed411a01          VSTR     s3,[r1,#-4]
;;;273    
;;;274            pTXbtm[0]   =  derivMagnitude;
0003bc  ed808a00          VSTR     s16,[r0,#0]
;;;275            pTXbtm[N-1] = -derivMagnitude;
0003c0  eb000084          ADD      r0,r0,r4,LSL #2
;;;276          } // Inner Top / Bottom
;;;277    
;;;278          //
;;;279          // Fill in the left and right coordinates and derivatives
;;;280          //
;;;281    
;;;282          // Outer
;;;283          {
;;;284            f32 * restrict pXleft = xSquare.Pointer(0,2*N);
0003c4  2100              MOVS     r1,#0
0003c6  ed401a01          VSTR     s3,[r0,#-4]           ;275
0003ca  9b6e              LDR      r3,[sp,#0x1b8]        ;275
0003cc  9a70              LDR      r2,[sp,#0x1c0]        ;275
0003ce  f8ddc1e0          LDR      r12,[sp,#0x1e0]       ;275
0003d2  fb012803          MLA      r8,r1,r3,r2           ;275
0003d6  9b73              LDR      r3,[sp,#0x1cc]        ;275
0003d8  9a75              LDR      r2,[sp,#0x1d4]        ;275
0003da  f8dda208          LDR      r10,[sp,#0x208]       ;275
0003de  fb012303          MLA      r3,r1,r3,r2           ;275
0003e2  9a7a              LDR      r2,[sp,#0x1e8]        ;275
0003e4  f8dd9210          LDR      r9,[sp,#0x210]        ;275
0003e8  0060              LSLS     r0,r4,#1
0003ea  fb01220c          MLA      r2,r1,r12,r2
0003ee  fb01990a          MLA      r9,r1,r10,r9
;;;285            f32 * restrict pYleft = ySquare.Pointer(0,2*N);
;;;286    
;;;287            f32 * restrict pTXleft = Tx.Pointer(0,2*N);
;;;288            f32 * restrict pTYleft = Ty.Pointer(0,2*N);
;;;289    
;;;290            f32 * restrict pXright = xSquare.Pointer(0,3*N);
0003f2  eb040144          ADD      r1,r4,r4,LSL #1
0003f6  eb080780          ADD      r7,r8,r0,LSL #2
0003fa  eb030680          ADD      r6,r3,r0,LSL #2
0003fe  eb020c80          ADD      r12,r2,r0,LSL #2
000402  eb090080          ADD      r0,r9,r0,LSL #2
000406  eb080881          ADD      r8,r8,r1,LSL #2
00040a  eb030381          ADD      r3,r3,r1,LSL #2
00040e  eb020281          ADD      r2,r2,r1,LSL #2
000412  eb090981          ADD      r9,r9,r1,LSL #2
;;;291            f32 * restrict pYright = ySquare.Pointer(0,3*N);
;;;292    
;;;293            f32 * restrict pTXright = Tx.Pointer(0,3*N);
;;;294            f32 * restrict pTYright = Ty.Pointer(0,3*N);
;;;295    
;;;296            f32 y = 0.f;
000416  e011              B        |L2.1084|
                  |L2.1048|
000418  766d655f          DCB      "vme_quadrefine_init",0
00041c  71756164
000420  72656669
000424  6e655f69
000428  6e697400
                  |L2.1068|
                          DCD      ||.constdata||
                  |L2.1072|
000430  3fb504f3          DCFS     0x3fb504f3 ; 1.4142135381698608
                  |L2.1076|
000434  437f0000          DCFS     0x437f0000 ; 255
                  |L2.1080|
000438  00000000          DCFS     0x00000000 ; 0
                  |L2.1084|
;;;297            for(s32 index = 0; index < N; y += outerInc, ++index)
00043c  2100              MOVS     r1,#0
00043e  eef09a4b          VMOV.F32 s19,s22
000442  2c00              CMP      r4,#0
000444  dd24              BLE      |L2.1168|
                  |L2.1094|
;;;298            {
;;;299              pXleft[index] = 0.f;
000446  eb070a81          ADD      r10,r7,r1,LSL #2
00044a  ed8aba00          VSTR     s22,[r10,#0]
;;;300              pYleft[index] = y;
00044e  eb060a81          ADD      r10,r6,r1,LSL #2
000452  edca9a00          VSTR     s19,[r10,#0]
;;;301    
;;;302              pXright[index] = 1.f;
000456  eb080a81          ADD      r10,r8,r1,LSL #2
00045a  edcafa00          VSTR     s31,[r10,#0]
;;;303              pYright[index] = y;
00045e  eb030a81          ADD      r10,r3,r1,LSL #2
000462  edca9a00          VSTR     s19,[r10,#0]
;;;304    
;;;305              pTXleft[index] = -derivMagnitude;
000466  eb0c0a81          ADD      r10,r12,r1,LSL #2
00046a  ee799aa8          VADD.F32 s19,s19,s17           ;297
00046e  edca1a00          VSTR     s3,[r10,#0]
;;;306              pTYleft[index] =  0.f;
000472  eb000a81          ADD      r10,r0,r1,LSL #2
000476  ed8aba00          VSTR     s22,[r10,#0]
;;;307    
;;;308              pTXright[index] = derivMagnitude;
00047a  eb020a81          ADD      r10,r2,r1,LSL #2
00047e  ed8a8a00          VSTR     s16,[r10,#0]
;;;309              pTYright[index] = 0.f;
000482  eb090a81          ADD      r10,r9,r1,LSL #2
000486  1c49              ADDS     r1,r1,#1              ;297
000488  ed8aba00          VSTR     s22,[r10,#0]
00048c  428c              CMP      r4,r1                 ;297
00048e  dcda              BGT      |L2.1094|
                  |L2.1168|
;;;310            }
;;;311    
;;;312            pTYleft[0]   = -derivMagnitude;
000490  edc01a00          VSTR     s3,[r0,#0]
;;;313            pTYleft[N-1] =  derivMagnitude;
000494  eb000084          ADD      r0,r0,r4,LSL #2
;;;314    
;;;315            pTYright[0]   = -derivMagnitude;
;;;316            pTYright[N-1] =  derivMagnitude;
;;;317          } // Outer Left / Right
;;;318    
;;;319          // Inner
;;;320          {
;;;321            f32 * restrict pXleft = xSquare.Pointer(0,6*N);
000498  2100              MOVS     r1,#0
00049a  ed008a01          VSTR     s16,[r0,#-4]          ;313
00049e  eb090084          ADD      r0,r9,r4,LSL #2       ;316
0004a2  edc91a00          VSTR     s3,[r9,#0]            ;315
0004a6  ed008a01          VSTR     s16,[r0,#-4]          ;316
0004aa  9b6e              LDR      r3,[sp,#0x1b8]        ;316
0004ac  9a70              LDR      r2,[sp,#0x1c0]        ;316
0004ae  f8ddc1e0          LDR      r12,[sp,#0x1e0]       ;316
0004b2  fb012803          MLA      r8,r1,r3,r2           ;316
0004b6  9b73              LDR      r3,[sp,#0x1cc]        ;316
0004b8  9a75              LDR      r2,[sp,#0x1d4]        ;316
0004ba  eb040044          ADD      r0,r4,r4,LSL #1
0004be  fb012303          MLA      r3,r1,r3,r2
0004c2  9a7a              LDR      r2,[sp,#0x1e8]
0004c4  f8dda208          LDR      r10,[sp,#0x208]
0004c8  f8dd9210          LDR      r9,[sp,#0x210]
0004cc  0040              LSLS     r0,r0,#1
0004ce  fb01220c          MLA      r2,r1,r12,r2
0004d2  fb01990a          MLA      r9,r1,r10,r9
;;;322            f32 * restrict pYleft = ySquare.Pointer(0,6*N);
;;;323    
;;;324            f32 * restrict pTXleft = Tx.Pointer(0,6*N);
;;;325            f32 * restrict pTYleft = Ty.Pointer(0,6*N);
;;;326    
;;;327            f32 * restrict pXright = xSquare.Pointer(0,7*N);
0004d6  ebc401c4          RSB      r1,r4,r4,LSL #3
0004da  eb080780          ADD      r7,r8,r0,LSL #2
0004de  eb030680          ADD      r6,r3,r0,LSL #2
0004e2  eb020c80          ADD      r12,r2,r0,LSL #2
0004e6  eb090080          ADD      r0,r9,r0,LSL #2
0004ea  eb080881          ADD      r8,r8,r1,LSL #2
0004ee  eb030381          ADD      r3,r3,r1,LSL #2
0004f2  eb020281          ADD      r2,r2,r1,LSL #2
0004f6  eb090981          ADD      r9,r9,r1,LSL #2
;;;328            f32 * restrict pYright = ySquare.Pointer(0,7*N);
;;;329    
;;;330            f32 * restrict pTXright = Tx.Pointer(0,7*N);
;;;331            f32 * restrict pTYright = Ty.Pointer(0,7*N);
;;;332    
;;;333            f32 y = squareWidthFraction;
;;;334            for(s32 index = 0; index < N; y += innerInc, ++index)
0004fa  2100              MOVS     r1,#0
0004fc  eef08a6c          VMOV.F32 s17,s25               ;333
000500  2c00              CMP      r4,#0
000502  dd24              BLE      |L2.1358|
                  |L2.1284|
;;;335            {
;;;336              pXleft[index] = squareWidthFraction;
000504  eb070a81          ADD      r10,r7,r1,LSL #2
000508  edcaca00          VSTR     s25,[r10,#0]
;;;337              pYleft[index] = y;
00050c  eb060a81          ADD      r10,r6,r1,LSL #2
000510  edca8a00          VSTR     s17,[r10,#0]
;;;338    
;;;339              pXright[index] = 1.f - squareWidthFraction;
000514  eb080a81          ADD      r10,r8,r1,LSL #2
000518  ed8a0a00          VSTR     s0,[r10,#0]
;;;340              pYright[index] = y;
00051c  eb030a81          ADD      r10,r3,r1,LSL #2
000520  edca8a00          VSTR     s17,[r10,#0]
;;;341    
;;;342              pTXleft[index] = derivMagnitude;
000524  eb0c0a81          ADD      r10,r12,r1,LSL #2
000528  ee788a8d          VADD.F32 s17,s17,s26           ;334
00052c  ed8a8a00          VSTR     s16,[r10,#0]
;;;343              pTYleft[index] = 0.f;
000530  eb000a81          ADD      r10,r0,r1,LSL #2
000534  ed8aba00          VSTR     s22,[r10,#0]
;;;344    
;;;345              pTXright[index] = -derivMagnitude;
000538  eb020a81          ADD      r10,r2,r1,LSL #2
00053c  edca1a00          VSTR     s3,[r10,#0]
;;;346              pTYright[index] =  0.f;
000540  eb090a81          ADD      r10,r9,r1,LSL #2
000544  1c49              ADDS     r1,r1,#1              ;334
000546  ed8aba00          VSTR     s22,[r10,#0]
00054a  428c              CMP      r4,r1                 ;334
00054c  dcda              BGT      |L2.1284|
                  |L2.1358|
;;;347            }
;;;348    
;;;349            pTYleft[0]   =  derivMagnitude;
00054e  ed808a00          VSTR     s16,[r0,#0]
;;;350            pTYleft[N-1] = -derivMagnitude;
000552  eb000084          ADD      r0,r0,r4,LSL #2
000556  ed401a01          VSTR     s3,[r0,#-4]
;;;351    
;;;352            pTYright[0]   =  derivMagnitude;
;;;353            pTYright[N-1] = -derivMagnitude;
00055a  eb090084          ADD      r0,r9,r4,LSL #2
00055e  ed898a00          VSTR     s16,[r9,#0]           ;352
000562  ed401a01          VSTR     s3,[r0,#-4]
000566  9a6e              LDR      r2,[sp,#0x1b8]
000568  9970              LDR      r1,[sp,#0x1c0]
;;;354          } // Inner Left / Right
;;;355    
;;;356          /* Less efficient?
;;;357    
;;;358          // Outer Square, Top Side:
;;;359          ArraySlice<f32> xSide = xSquare(0,0,0,N-1);
;;;360          ArraySlice<f32> ySide = ySquare(0,0,0,N-1);
;;;361          OuterOneToN.Evaluate(xSide);
;;;362          ySide.Set(0.f);
;;;363    
;;;364          // Outer Square, Bottom Side:
;;;365          xSide = xSquare(0,0,N,2*N-1);
;;;366          ySide = ySquare(0,0,N,2*N-1);
;;;367          OuterOneToN.Evaluate(xSide);
;;;368          ySide.Set(1.f);
;;;369    
;;;370          // Outer Square, Left Side:
;;;371          xSide = xSquare(0,0,2*N,3*N-1);
;;;372          ySide = ySquare(0,0,2*N,3*N-1);
;;;373          xSide.Set(0.f);
;;;374          OuterOneToN.Evaluate(ySide);
;;;375    
;;;376          // Outer Square, Right Side:
;;;377          xSide = xSquare(0,0,3*N,4*N-1);
;;;378          ySide = ySquare(0,0,3*N,4*N-1);
;;;379          xSide.Set(1.f);
;;;380          OuterOneToN.Evaluate(ySide);
;;;381    
;;;382          // Inner Square, Top Side:
;;;383          xSide = xSquare(0,0,4*N,5*N-1);
;;;384          ySide = ySquare(0,0,4*N,5*N-1);
;;;385          InnerOneToN.Evaluate(xSide);
;;;386          ySide.Set(0.f);
;;;387    
;;;388          // Inner Square, Bottom Side:
;;;389          xSide = xSquare(0,0,5*N,6*N-1);
;;;390          ySide = ySquare(0,0,5*N,6*N-1);
;;;391          InnerOneToN.Evaluate(xSide);
;;;392          ySide.Set(1.f);
;;;393    
;;;394          // Inner Square, Left Side:
;;;395          xSide = xSquare(0,0,6*N,7*N-1);
;;;396          ySide = ySquare(0,0,6*N,7*N-1);
;;;397          xSide.Set(0.f);
;;;398          InnerOneToN.Evaluate(ySide);
;;;399    
;;;400          // Inner Square, Right Side:
;;;401          xSide = xSquare(0,0,7*N,8*N-1);
;;;402          ySide = ySquare(0,0,7*N,8*N-1);
;;;403          xSide.Set(1.f);
;;;404          InnerOneToN.Evaluate(ySide);
;;;405    
;;;406          // Outer Square, Top Side:
;;;407          ArraySlice<f32> xSide = xSquare(0,0,0,N-1);
;;;408          ArraySlice<f32> ySide = ySquare(0,0,0,N-1);
;;;409          OuterOneToN.Evaluate(xSide);
;;;410          ySide.Set(0.f);
;;;411    
;;;412          // Outer Square, Bottom Side:
;;;413          xSide = xSquare(0,0,N,2*N-1);
;;;414          ySide = ySquare(0,0,N,2*N-1);
;;;415          OuterOneToN.Evaluate(xSide);
;;;416          ySide.Set(1.f);
;;;417    
;;;418          // Outer Square, Left Side:
;;;419          xSide = xSquare(0,0,2*N,3*N-1);
;;;420          ySide = ySquare(0,0,2*N,3*N-1);
;;;421          xSide.Set(0.f);
;;;422          OuterOneToN.Evaluate(ySide);
;;;423    
;;;424          // Outer Square, Right Side:
;;;425          xSide = xSquare(0,0,3*N,4*N-1);
;;;426          ySide = ySquare(0,0,3*N,4*N-1);
;;;427          xSide.Set(1.f);
;;;428          OuterOneToN.Evaluate(ySide);
;;;429    
;;;430          // Inner Square, Top Side:
;;;431          xSide = xSquare(0,0,4*N,5*N-1);
;;;432          ySide = ySquare(0,0,4*N,5*N-1);
;;;433          InnerOneToN.Evaluate(xSide);
;;;434          ySide.Set(0.f);
;;;435    
;;;436          // Inner Square, Bottom Side:
;;;437          xSide = xSquare(0,0,5*N,6*N-1);
;;;438          ySide = ySquare(0,0,5*N,6*N-1);
;;;439          InnerOneToN.Evaluate(xSide);
;;;440          ySide.Set(1.f);
;;;441    
;;;442          // Inner Square, Left Side:
;;;443          xSide = xSquare(0,0,6*N,7*N-1);
;;;444          ySide = ySquare(0,0,6*N,7*N-1);
;;;445          xSide.Set(0.f);
;;;446          InnerOneToN.Evaluate(ySide);
;;;447    
;;;448          // Inner Square, Right Side:
;;;449          xSide = xSquare(0,0,7*N,8*N-1);
;;;450          ySide = ySquare(0,0,7*N,8*N-1);
;;;451          xSide.Set(1.f);
;;;452          InnerOneToN.Evaluate(ySide);
;;;453          */
;;;454    
;;;455          // A = [ xsquare.*Tx  ysquare.*Tx  Tx  ...
;;;456          //       xsquare.*Ty  ysquare.*Ty  Ty ...
;;;457          //       (-xsquare.^2.*Tx-xsquare.*ysquare.*Ty) ...
;;;458          //       (-xsquare.*ysquare.*Tx-ysquare.^2.*Ty)];
;;;459    
;;;460          const f32 * restrict pX = xSquare.Pointer(0,0);
00056a  2000              MOVS     r0,#0
00056c  fb001002          MLA      r0,r0,r2,r1
;;;461          const f32 * restrict pY = ySquare.Pointer(0,0);
000570  90b2              STR      r0,[sp,#0x2c8]
000572  9a73              LDR      r2,[sp,#0x1cc]
000574  9975              LDR      r1,[sp,#0x1d4]
000576  2000              MOVS     r0,#0
000578  fb001002          MLA      r0,r0,r2,r1
;;;462    
;;;463          const f32 * restrict pTX = Tx.Pointer(0,0);
00057c  90b3              STR      r0,[sp,#0x2cc]
00057e  2000              MOVS     r0,#0
000580  9a78              LDR      r2,[sp,#0x1e0]
000582  997a              LDR      r1,[sp,#0x1e8]
;;;464          const f32 * restrict pTY = Ty.Pointer(0,0);
;;;465    
;;;466          Array<f32> A(8, actualNumSamples, scratch);
000584  4603              MOV      r3,r0
000586  fb001602          MLA      r6,r0,r2,r1
00058a  9a82              LDR      r2,[sp,#0x208]
00058c  9984              LDR      r1,[sp,#0x210]
00058e  fb001402          MLA      r4,r0,r2,r1
000592  4602              MOV      r2,r0
000594  2101              MOVS     r1,#1
000596  a8b5              ADD      r0,sp,#0x2d4
000598  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00059c  6800              LDR      r0,[r0,#0]
00059e  9000              STR      r0,[sp,#0]
0005a0  2108              MOVS     r1,#8
0005a2  a88f              ADD      r0,sp,#0x23c
0005a4  9be1              LDR      r3,[sp,#0x384]
0005a6  9a7b              LDR      r2,[sp,#0x1ec]
0005a8  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;467          AnkiConditionalErrorAndReturnValue(A.IsValid(), RESULT_FAIL_MEMORY,
0005ac  a88f              ADD      r0,sp,#0x23c
0005ae  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
0005b2  2800              CMP      r0,#0
;;;468            "RefineQuadrilateral",
;;;469            "Failed to allocate A matrix.");
;;;470    
;;;471          // Get a pointer to each row of A:
;;;472          f32 * restrict Arow[8];
;;;473          for(s32 i=0; i<8; ++i) {
0005b4  bf1c              ITT      NE
0005b6  2000              MOVNE    r0,#0
0005b8  aa5c              ADDNE    r2,sp,#0x170          ;472
0005ba  f0008126          BEQ.W    |L2.2058|
                  |L2.1470|
0005be  9b91              LDR      r3,[sp,#0x244]        ;467
0005c0  9993              LDR      r1,[sp,#0x24c]        ;467
0005c2  fb001103          MLA      r1,r0,r3,r1           ;467
;;;474            Arow[i] = A.Pointer(i,0); // TODO: do i need "restrict" here?
0005c6  f8421020          STR      r1,[r2,r0,LSL #2]
0005ca  1c40              ADDS     r0,r0,#1              ;473
0005cc  2808              CMP      r0,#8                 ;473
0005ce  dbf6              BLT      |L2.1470|
;;;475          }
;;;476    
;;;477          // Create A matrix of Jacobians
;;;478          for(s32 iSample=0; iSample<actualNumSamples; iSample++) {
0005d0  997b              LDR      r1,[sp,#0x1ec]
0005d2  2000              MOVS     r0,#0
0005d4  2900              CMP      r1,#0
0005d6  dd55              BLE      |L2.1668|
                  |L2.1496|
;;;479            const f32 x = pX[iSample];
0005d8  99b2              LDR      r1,[sp,#0x2c8]
0005da  eb010180          ADD      r1,r1,r0,LSL #2
0005de  ed910a00          VLDR     s0,[r1,#0]
;;;480            const f32 y = pY[iSample];
0005e2  99b3              LDR      r1,[sp,#0x2cc]
0005e4  eb010180          ADD      r1,r1,r0,LSL #2
0005e8  edd11a00          VLDR     s3,[r1,#0]
;;;481    
;;;482            const f32 tx = pTX[iSample];
0005ec  eb060180          ADD      r1,r6,r0,LSL #2
0005f0  edd12a00          VLDR     s5,[r1,#0]
;;;483            const f32 ty = pTY[iSample];
0005f4  eb040180          ADD      r1,r4,r0,LSL #2
;;;484    
;;;485            Arow[0][iSample] = x*tx;
;;;486            Arow[1][iSample] = y*tx;
;;;487            Arow[2][iSample] = tx;
;;;488    
;;;489            Arow[3][iSample] = x*ty;
;;;490            Arow[4][iSample] = y*ty;
;;;491            Arow[5][iSample] = ty;
;;;492    
;;;493            Arow[6][iSample] = -x*x*tx - x*y*ty;
0005f8  ee201a21          VMUL.F32 s2,s0,s3
0005fc  ed912a00          VLDR     s4,[r1,#0]            ;483
000600  995c              LDR      r1,[sp,#0x170]        ;485
000602  ee600a22          VMUL.F32 s1,s0,s5              ;485
000606  eb010180          ADD      r1,r1,r0,LSL #2       ;485
00060a  edc10a00          VSTR     s1,[r1,#0]            ;485
00060e  995d              LDR      r1,[sp,#0x174]        ;486
000610  ee610aa2          VMUL.F32 s1,s3,s5              ;486
000614  eb010180          ADD      r1,r1,r0,LSL #2       ;486
000618  edc10a00          VSTR     s1,[r1,#0]            ;486
00061c  995e              LDR      r1,[sp,#0x178]        ;487
00061e  ee600a02          VMUL.F32 s1,s0,s4              ;489
000622  eb010180          ADD      r1,r1,r0,LSL #2       ;487
000626  edc12a00          VSTR     s5,[r1,#0]            ;487
00062a  995f              LDR      r1,[sp,#0x17c]        ;489
00062c  eb010180          ADD      r1,r1,r0,LSL #2       ;489
000630  edc10a00          VSTR     s1,[r1,#0]            ;489
000634  9960              LDR      r1,[sp,#0x180]        ;490
000636  ee610a82          VMUL.F32 s1,s3,s4              ;490
00063a  eb010180          ADD      r1,r1,r0,LSL #2       ;490
00063e  edc10a00          VSTR     s1,[r1,#0]            ;490
000642  ee600a40          VNMUL.F32 s1,s0,s0
000646  9961              LDR      r1,[sp,#0x184]        ;491
;;;494            Arow[7][iSample] = -x*y*tx - y*y*ty;
000648  ee200a61          VNMUL.F32 s0,s0,s3
00064c  eb010180          ADD      r1,r1,r0,LSL #2       ;491
000650  ee600aa2          VMUL.F32 s1,s1,s5              ;493
000654  ed812a00          VSTR     s4,[r1,#0]            ;491
000658  9962              LDR      r1,[sp,#0x188]        ;493
00065a  ee200a22          VMUL.F32 s0,s0,s5
00065e  ee410a42          VMLS.F32 s1,s2,s4              ;493
000662  eb010180          ADD      r1,r1,r0,LSL #2       ;493
000666  edc10a00          VSTR     s1,[r1,#0]            ;493
00066a  ee610aa1          VMUL.F32 s1,s3,s3
00066e  9963              LDR      r1,[sp,#0x18c]
000670  eb010180          ADD      r1,r1,r0,LSL #2
000674  ee000ac2          VMLS.F32 s0,s1,s4
000678  1c40              ADDS     r0,r0,#1              ;478
00067a  ed810a00          VSTR     s0,[r1,#0]
00067e  997b              LDR      r1,[sp,#0x1ec]        ;478
000680  4281              CMP      r1,r0                 ;478
000682  dca9              BGT      |L2.1496|
                  |L2.1668|
;;;495          } // for each sample
;;;496    
;;;497          // NOTE: We don't need Tx or Ty from here on.  Can we pop them somehow?
;;;498    
;;;499          // template = (Contrast/2)*ones(size(xsquare));
;;;500          const f32 templatePixelValue = 0.5f*(darkGray + brightGray);
000684  ee3c0a2b          VADD.F32 s0,s24,s23
000688  ee200a0a          VMUL.F32 s0,s0,s20
00068c  ed8d0a96          VSTR     s0,[sp,#0x258]
000690  98d3              LDR      r0,[sp,#0x34c]
000692  edd00a01          VLDR     s1,[r0,#4]
000696  ed900a00          VLDR     s0,[r0,#0]
;;;501    
;;;502          const s32 imageHeight = image.get_size(0);
;;;503          const s32 imageWidth = image.get_size(1);
;;;504    
;;;505          const f32 xyReferenceMin = 0.0f;
;;;506          const f32 xReferenceMax = static_cast<f32>(imageWidth) - 1.0f;
00069a  eef80ae0          VCVT.F32.S32 s1,s1
;;;507          const f32 yReferenceMax = static_cast<f32>(imageHeight) - 1.0f;
00069e  eeb80ac0          VCVT.F32.S32 s0,s0
0006a2  ee700aef          VSUB.F32 s1,s1,s31             ;506
0006a6  ee300a6f          VSUB.F32 s0,s0,s31
0006aa  edcd0a95          VSTR     s1,[sp,#0x254]        ;506
0006ae  ed8d0a94          VSTR     s0,[sp,#0x250]
;;;508    
;;;509          const f32 oneOverTwoFiftyFive = 1.0f / 255.0f;
;;;510    
;;;511          refinedHomography.Set(initialHomography);
0006b2  99d2              LDR      r1,[sp,#0x348]
0006b4  98e0              LDR      r0,[sp,#0x380]
0006b6  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfE3SetERKS2_ ; Anki::Embedded::Array<float>::Set(const Anki::Embedded::Array<float>&)
;;;512    
;;;513          Array<f32> AWAt(8, 8, scratch);
0006ba  2300              MOVS     r3,#0
0006bc  461a              MOV      r2,r3
0006be  2101              MOVS     r1,#1
0006c0  a8b5              ADD      r0,sp,#0x2d4
0006c2  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0006c6  6800              LDR      r0,[r0,#0]
0006c8  9000              STR      r0,[sp,#0]
0006ca  2208              MOVS     r2,#8
0006cc  4611              MOV      r1,r2
0006ce  a885              ADD      r0,sp,#0x214
0006d0  9be1              LDR      r3,[sp,#0x384]
0006d2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;514          Array<f32> b(1, 8, scratch);
0006d6  2300              MOVS     r3,#0
0006d8  461a              MOV      r2,r3
0006da  2101              MOVS     r1,#1
0006dc  a8b9              ADD      r0,sp,#0x2e4
0006de  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0006e2  6800              LDR      r0,[r0,#0]
0006e4  9000              STR      r0,[sp,#0]
0006e6  2208              MOVS     r2,#8
0006e8  2101              MOVS     r1,#1
0006ea  a88a              ADD      r0,sp,#0x228
0006ec  9be1              LDR      r3,[sp,#0x384]
0006ee  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;515    
;;;516          Array<f32> homographyUpdate(3,3,scratch);
0006f2  2300              MOVS     r3,#0
0006f4  461a              MOV      r2,r3
0006f6  2101              MOVS     r1,#1
0006f8  a8b8              ADD      r0,sp,#0x2e0
0006fa  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
0006fe  6800              LDR      r0,[r0,#0]
000700  9000              STR      r0,[sp,#0]
000702  2203              MOVS     r2,#3
000704  4611              MOV      r1,r2
000706  a84a              ADD      r0,sp,#0x128
000708  9be1              LDR      r3,[sp,#0x384]
00070a  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;517          Array<f32> newHomography(3,3,scratch);
00070e  2300              MOVS     r3,#0
000710  461a              MOV      r2,r3
000712  2101              MOVS     r1,#1
000714  a8b7              ADD      r0,sp,#0x2dc
000716  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ebbb ; Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
00071a  6800              LDR      r0,[r0,#0]
00071c  9000              STR      r0,[sp,#0]
00071e  2203              MOVS     r2,#3
000720  4611              MOV      r1,r2
000722  a84f              ADD      r0,sp,#0x13c
000724  9be1              LDR      r3,[sp,#0x384]
000726  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;518    
;;;519          AnkiConditionalErrorAndReturnValue(AWAt.IsValid(), RESULT_FAIL_MEMORY,
00072a  a885              ADD      r0,sp,#0x214
00072c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000730  2800              CMP      r0,#0
000732  f0008077          BEQ.W    |L2.2084|
;;;520            "RefineQuadrilateral",
;;;521            "Failed to allocate AWAt matrix.");
;;;522    
;;;523          AnkiConditionalErrorAndReturnValue(b.IsValid(), RESULT_FAIL_MEMORY,
000736  a88a              ADD      r0,sp,#0x228
000738  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00073c  2800              CMP      r0,#0
00073e  f000807e          BEQ.W    |L2.2110|
;;;524            "RefineQuadrilateral",
;;;525            "Failed to allocate b vector.");
;;;526    
;;;527          AnkiConditionalErrorAndReturnValue(homographyUpdate.IsValid(), RESULT_FAIL_MEMORY,
000742  a84a              ADD      r0,sp,#0x128
000744  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000748  2800              CMP      r0,#0
00074a  f0008085          BEQ.W    |L2.2136|
;;;528            "RefineQuadrilateral",
;;;529            "Failed to allocate homographyUpdate matrix.");
;;;530    
;;;531          AnkiConditionalErrorAndReturnValue(newHomography.IsValid(), RESULT_FAIL_MEMORY,
00074e  a84f              ADD      r0,sp,#0x13c
000750  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000754  2800              CMP      r0,#0
000756  f000808c          BEQ.W    |L2.2162|
;;;532            "RefineQuadrilateral",
;;;533            "Failed to allocate newHomography matrix.");
;;;534    
;;;535          // These addresses should be known at compile time, so should be faster
;;;536          f32 AWAt_raw[8][8];
;;;537          f32 b_raw[8];
;;;538    
;;;539          EndBenchmark("vme_quadrefine_init");
00075a  f2af3044          ADR      r0,|L2.1048|
00075e  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
;;;540    
;;;541          BeginBenchmark("vme_quadrefine_mainLoop");
000762  a0d3              ADR      r0,|L2.2736|
000764  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
;;;542          bool restoreOriginal = false;
000768  2000              MOVS     r0,#0
;;;543    
;;;544          for(s32 iteration=0; iteration<maxIterations && !restoreOriginal; iteration++) {
00076a  90b1              STR      r0,[sp,#0x2c4]
00076c  f000bfe7          B.W      |L2.5950|
                  |L2.1904|
000770  2068              MOVS     r0,#0x68              ;104
000772  e9cd5000          STRD     r5,r0,[sp,#0]         ;104
000776  a3d4              ADR      r3,|L2.2760|
000778  4adf              LDR      r2,|L2.2808|
00077a  a1e0              ADR      r1,|L2.2812|
00077c  2005              MOVS     r0,#5                 ;104
00077e  f7fffffe          BL       _Anki_Log
000782  f04f60a0          MOV      r0,#0x5000000         ;104
                  |L2.1926|
;;;545            BeginBenchmark("vme_quadrefine_mainLoop_init");
;;;546    
;;;547            const f32 h00 = refinedHomography[0][0]; const f32 h01 = refinedHomography[0][1]; const f32 h02 = refinedHomography[0][2];
;;;548            const f32 h10 = refinedHomography[1][0]; const f32 h11 = refinedHomography[1][1]; const f32 h12 = refinedHomography[1][2];
;;;549            const f32 h20 = refinedHomography[2][0]; const f32 h21 = refinedHomography[2][1]; const f32 h22 = refinedHomography[2][2];
;;;550    
;;;551            //AWAt.SetZero();
;;;552            //b.SetZero();
;;;553    
;;;554            for(s32 ia=0; ia<8; ia++) {
;;;555              for(s32 ja=0; ja<8; ja++) {
;;;556                AWAt_raw[ia][ja] = 0;
;;;557              }
;;;558              b_raw[ia] = 0;
;;;559            }
;;;560    
;;;561            s32 numInBounds = 0;
;;;562    
;;;563            EndBenchmark("vme_quadrefine_mainLoop_init");
;;;564    
;;;565            BeginBenchmark("vme_quadrefine_mainLoop_samples");
;;;566            for(s32 iSample=0; iSample<actualNumSamples && !restoreOriginal; iSample++) {
;;;567              //BeginBenchmark("vme_quadrefine_mainLoop_samples1");
;;;568    
;;;569              const f32 xOriginal = pX[iSample];
;;;570              const f32 yOriginal = pY[iSample];
;;;571    
;;;572              // TODO: These two could be strength reduced
;;;573              const f32 xTransformedRaw = h00*xOriginal + h01*yOriginal + h02;
;;;574              const f32 yTransformedRaw = h10*xOriginal + h11*yOriginal + h12;
;;;575    
;;;576              const f32 normalization = 1.f / (h20*xOriginal + h21*yOriginal + h22);
;;;577    
;;;578              const f32 xTransformed = (xTransformedRaw * normalization);
;;;579              const f32 yTransformed = (yTransformedRaw * normalization);
;;;580    
;;;581              // DEBUG!
;;;582              //xTransformedArray[0][iSample] = xTransformed;
;;;583              //yTransformedArray[0][iSample] = yTransformed;
;;;584    
;;;585              const f32 x0 = FLT_FLOOR(xTransformed);
;;;586              const f32 x1 = ceilf(xTransformed); // x0 + 1.0f;
;;;587    
;;;588              const f32 y0 = FLT_FLOOR(yTransformed);
;;;589              const f32 y1 = ceilf(yTransformed); // y0 + 1.0f;
;;;590    
;;;591              // If out of bounds, continue
;;;592              if(x0 < xyReferenceMin || x1 > xReferenceMax || y0 < xyReferenceMin || y1 > yReferenceMax) {
;;;593                //EndBenchmark("vme_quadrefine_mainLoop_samples1");
;;;594                continue;
;;;595              }
;;;596    
;;;597              //EndBenchmark("vme_quadrefine_mainLoop_samples1");
;;;598    
;;;599              //BeginBenchmark("vme_quadrefine_mainLoop_samples2");
;;;600    
;;;601              numInBounds++;
;;;602    
;;;603              const f32 alphaX = xTransformed - x0;
;;;604              const f32 alphaXinverse = 1.0f - alphaX;
;;;605    
;;;606              const f32 alphaY = yTransformed - y0;
;;;607              const f32 alphaYinverse = 1.0f - alphaY;
;;;608    
;;;609              const s32 y0S32 = Round<s32>(y0);
;;;610              const s32 y1S32 = Round<s32>(y1);
;;;611              const s32 x0S32 = Round<s32>(x0);
;;;612    
;;;613              const u8 * restrict pReference_y0 = image.Pointer(y0S32, x0S32);
;;;614              const u8 * restrict pReference_y1 = image.Pointer(y1S32, x0S32);
;;;615    
;;;616              const f32 pixelTL = *pReference_y0;
;;;617              const f32 pixelTR = *(pReference_y0+1);
;;;618              const f32 pixelBL = *pReference_y1;
;;;619              const f32 pixelBR = *(pReference_y1+1);
;;;620    
;;;621              const f32 interpolatedPixelF32 = InterpolateBilinear2d<f32>(pixelTL, pixelTR, pixelBL, pixelBR,
;;;622                alphaY, alphaYinverse, alphaX, alphaXinverse);
;;;623    
;;;624              const f32 tGradientValue = oneOverTwoFiftyFive * (interpolatedPixelF32 - templatePixelValue);
;;;625    
;;;626              //EndBenchmark("vme_quadrefine_mainLoop_samples2");
;;;627    
;;;628              //BeginBenchmark("vme_quadrefine_mainLoop_samples3");
;;;629    
;;;630    #if ACCELERATION_TYPE == ACCELERATION_NONE
;;;631              for(s32 ia=0; ia<8; ia++) {
;;;632                for(s32 ja=ia; ja<8; ja++) {
;;;633                  AWAt_raw[ia][ja] += Arow[ia][iSample] * Arow[ja][iSample];
;;;634                }
;;;635                b_raw[ia] += Arow[ia][iSample] * tGradientValue;
;;;636              }
;;;637    #else // #if ACCELERATION_TYPE == ACCELERATION_NONE
;;;638              const f32 a0 = Arow[0][iSample];
;;;639              const f32 a1 = Arow[1][iSample];
;;;640              const f32 a2 = Arow[2][iSample];
;;;641              const f32 a3 = Arow[3][iSample];
;;;642              const f32 a4 = Arow[4][iSample];
;;;643              const f32 a5 = Arow[5][iSample];
;;;644              const f32 a6 = Arow[6][iSample];
;;;645              const f32 a7 = Arow[7][iSample];
;;;646    
;;;647              AWAt_raw[0][0] += a0 * a0;
;;;648              AWAt_raw[0][1] += a0 * a1;
;;;649              AWAt_raw[0][2] += a0 * a2;
;;;650              AWAt_raw[0][3] += a0 * a3;
;;;651              AWAt_raw[0][4] += a0 * a4;
;;;652              AWAt_raw[0][5] += a0 * a5;
;;;653              AWAt_raw[0][6] += a0 * a6;
;;;654              AWAt_raw[0][7] += a0 * a7;
;;;655              b_raw[0] += a0 * tGradientValue;
;;;656    
;;;657              AWAt_raw[1][1] += a1 * a1;
;;;658              AWAt_raw[1][2] += a1 * a2;
;;;659              AWAt_raw[1][3] += a1 * a3;
;;;660              AWAt_raw[1][4] += a1 * a4;
;;;661              AWAt_raw[1][5] += a1 * a5;
;;;662              AWAt_raw[1][6] += a1 * a6;
;;;663              AWAt_raw[1][7] += a1 * a7;
;;;664              b_raw[1] += a1 * tGradientValue;
;;;665    
;;;666              AWAt_raw[2][2] += a2 * a2;
;;;667              AWAt_raw[2][3] += a2 * a3;
;;;668              AWAt_raw[2][4] += a2 * a4;
;;;669              AWAt_raw[2][5] += a2 * a5;
;;;670              AWAt_raw[2][6] += a2 * a6;
;;;671              AWAt_raw[2][7] += a2 * a7;
;;;672              b_raw[2] += a2 * tGradientValue;
;;;673    
;;;674              AWAt_raw[3][3] += a3 * a3;
;;;675              AWAt_raw[3][4] += a3 * a4;
;;;676              AWAt_raw[3][5] += a3 * a5;
;;;677              AWAt_raw[3][6] += a3 * a6;
;;;678              AWAt_raw[3][7] += a3 * a7;
;;;679              b_raw[3] += a3 * tGradientValue;
;;;680    
;;;681              AWAt_raw[4][4] += a4 * a4;
;;;682              AWAt_raw[4][5] += a4 * a5;
;;;683              AWAt_raw[4][6] += a4 * a6;
;;;684              AWAt_raw[4][7] += a4 * a7;
;;;685              b_raw[4] += a4 * tGradientValue;
;;;686    
;;;687              AWAt_raw[5][5] += a5 * a5;
;;;688              AWAt_raw[5][6] += a5 * a6;
;;;689              AWAt_raw[5][7] += a5 * a7;
;;;690              b_raw[5] += a5 * tGradientValue;
;;;691    
;;;692              AWAt_raw[6][6] += a6 * a6;
;;;693              AWAt_raw[6][7] += a6 * a7;
;;;694              b_raw[6] += a6 * tGradientValue;
;;;695    
;;;696              AWAt_raw[7][7] += a7 * a7;
;;;697              b_raw[7] += a7 * tGradientValue;
;;;698    #endif // #if ACCELERATION_TYPE == ACCELERATION_NONE ... #else
;;;699    
;;;700              //EndBenchmark("vme_quadrefine_mainLoop_samples3");
;;;701            } // for each sample
;;;702    
;;;703            EndBenchmark("vme_quadrefine_mainLoop_samples");
;;;704    
;;;705            BeginBenchmark("vme_quadrefine_mainLoop_finalize");
;;;706    
;;;707            // Put the raw A and b matrices into the Array containers
;;;708            for(s32 ia=0; ia<8; ia++) {
;;;709              for(s32 ja=ia; ja<8; ja++) {
;;;710                AWAt[ia][ja] = AWAt_raw[ia][ja];
;;;711              }
;;;712              b[0][ia] = b_raw[ia];
;;;713            }
;;;714    
;;;715            Matrix::MakeSymmetric(AWAt, false);
;;;716    
;;;717            // Solve for the update
;;;718            bool numericalFailure = false;
;;;719            if((lastResult = Matrix::SolveLeastSquaresWithCholesky(AWAt, b, false, numericalFailure)) != RESULT_OK) {
;;;720              return lastResult;
;;;721            }
;;;722    
;;;723            if(numericalFailure){
;;;724              AnkiWarn("RefineQuadrilateral", "numericalFailure\n");
;;;725              restoreOriginal = true;
;;;726            }
;;;727    
;;;728            // Update the homography
;;;729            // tformUpdate = eye(3) + [update(1:3)'; update(4:6)'; update(7:8)' 0];
;;;730            const f32 * restrict pUpdate = b.Pointer(0,0);
;;;731            homographyUpdate[0][0] = 1.0f + pUpdate[0]; homographyUpdate[0][1] = pUpdate[1];        homographyUpdate[0][2] = pUpdate[2];
;;;732            homographyUpdate[1][0] = pUpdate[3];        homographyUpdate[1][1] = 1.0f + pUpdate[4]; homographyUpdate[1][2] = pUpdate[5];
;;;733            homographyUpdate[2][0] = pUpdate[6];        homographyUpdate[2][1] = pUpdate[7];        homographyUpdate[2][2] = 1.0f;
;;;734    
;;;735            // this.tform = this.tform*inv(tformUpdate);
;;;736            Invert3x3(homographyUpdate[0][0], homographyUpdate[0][1], homographyUpdate[0][2],
;;;737              homographyUpdate[1][0], homographyUpdate[1][1], homographyUpdate[1][2],
;;;738              homographyUpdate[2][0], homographyUpdate[2][1], homographyUpdate[2][2]);
;;;739    
;;;740            Matrix::Multiply(refinedHomography, homographyUpdate, newHomography);
;;;741    
;;;742            if(!FLT_NEAR(newHomography[2][2], 1.0f)) {
;;;743              Matrix::DotDivide<f32,f32,f32>(newHomography, newHomography[2][2], newHomography);
;;;744            }
;;;745    
;;;746            refinedHomography.Set(newHomography);
;;;747    
;;;748            const f32 currentCornerChange = MaxCornerChange(refinedHomography, refinedQuad);
;;;749            if(currentCornerChange < minCornerChange) {
;;;750              // Converged!  Stop iterating.
;;;751              //AnkiWarn("QuadRefinement.CornersConverged",
;;;752              //printf("Corner change at iteration %d = %f which is less than "
;;;753              //         "convergence tolerance of %f. Stopping iterations.\n",
;;;754              //         iteration, currentCornerChange, CornerConvergenceTolerance);
;;;755    
;;;756              EndBenchmark("vme_quadrefine_mainLoop_finalize");
;;;757              break;
;;;758            }
;;;759    
;;;760    #if VISUALIZE_WITH_MATLAB
;;;761            {
;;;762              matlab.PutQuad(refinedQuad, "refinedQuad");
;;;763              matlab.EvalStringEcho("delete(findobj(gcf, 'Tag', 'refinedQuad')); "
;;;764                "refinedQuad = double(refinedQuad); "
;;;765                "plot(refinedQuad([1 2 4 3 1],1)+1, "
;;;766                "     refinedQuad([1 2 4 3 1],2)+1, "
;;;767                "     'b', 'LineWidth', 1, "
;;;768                "     'Tag', 'refinedQuad'); drawnow");
;;;769            }
;;;770    #endif
;;;771    
;;;772            EndBenchmark("vme_quadrefine_mainLoop_finalize");
;;;773          } // for each iteration
;;;774    
;;;775          EndBenchmark("vme_quadrefine_mainLoop");
;;;776    
;;;777          BeginBenchmark("vme_quadrefine_finalize");
;;;778    
;;;779    #if VISUALIZE_WITH_MATLAB
;;;780          CoreTechPrint("Final quad: ");
;;;781          refinedQuad.Print();
;;;782          CoreTechPrint("\n");
;;;783          {
;;;784            matlab.PutQuad(refinedQuad, "refinedQuad");
;;;785            matlab.EvalStringEcho("refinedQuad = double(refinedQuad); "
;;;786              "plot(refinedQuad([1 2 4 3 1],1)+1, "
;;;787              "     refinedQuad([1 2 4 3 1],2)+1, "
;;;788              "     'g', 'LineWidth', 1, "
;;;789              "     'Tag', 'refinedQuad'); drawnow");
;;;790          }
;;;791    #endif
;;;792    
;;;793          Quadrilateral<f32> initialQuadF32;
;;;794          initialQuadF32.SetCast(initialQuad);
;;;795    
;;;796          // Check to make sure the refined quad isn't too different from the intitial one.
;;;797          // If it is, restore the original.
;;;798          if(!restoreOriginal) {
;;;799            const f32 finalCornerChange = MaxCornerChange(refinedHomography, initialQuadF32);
;;;800            if(finalCornerChange > maxCornerChange) {
;;;801              AnkiWarn("RefineQuadrilateral", "Quad changed too much.\n");
;;;802              restoreOriginal = true;
;;;803            }
;;;804          }
;;;805    
;;;806          // If corner change check or numerical failure triggered a restoreOriginal
;;;807          // do so now.
;;;808          if(restoreOriginal) {
;;;809            AnkiWarn("RefineQuadrilateral", "Restoring original quad.\n");
;;;810            refinedQuad = initialQuadF32;
;;;811            refinedHomography.Set(initialHomography);
;;;812          }
;;;813    
;;;814          EndBenchmark("vme_quadrefine_finalize");
;;;815    
;;;816          return RESULT_OK;
;;;817        } // RefineQuadrilateral
000786  f50d7d3b          ADD      sp,sp,#0x2ec
00078a  ecbd8b10          VPOP     {d8-d15}
00078e  b00a              ADD      sp,sp,#0x28
000790  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.1940|
000794  206d              MOVS     r0,#0x6d              ;109
000796  e9cd5000          STRD     r5,r0,[sp,#0]         ;109
00079a  a3cb              ADR      r3,|L2.2760|
00079c  a2dc              ADR      r2,|L2.2832|
00079e  a1d7              ADR      r1,|L2.2812|
0007a0  2005              MOVS     r0,#5                 ;109
0007a2  f7fffffe          BL       _Anki_Log
0007a6  48e7              LDR      r0,|L2.2884|
0007a8  e7ed              B        |L2.1926|
                  |L2.1962|
0007aa  20b8              MOVS     r0,#0xb8              ;184
0007ac  e9cd5000          STRD     r5,r0,[sp,#0]         ;184
0007b0  a3c5              ADR      r3,|L2.2760|
0007b2  a2e5              ADR      r2,|L2.2888|
0007b4  a1d1              ADR      r1,|L2.2812|
0007b6  2005              MOVS     r0,#5                 ;184
0007b8  f7fffffe          BL       _Anki_Log
0007bc  f04f7080          MOV      r0,#0x1000000         ;184
0007c0  e7e1              B        |L2.1926|
                  |L2.1986|
0007c2  20bc              MOVS     r0,#0xbc              ;188
0007c4  e9cd5000          STRD     r5,r0,[sp,#0]         ;188
0007c8  a3bf              ADR      r3,|L2.2760|
0007ca  a2e8              ADR      r2,|L2.2924|
0007cc  a1cb              ADR      r1,|L2.2812|
0007ce  2005              MOVS     r0,#5                 ;188
0007d0  f7fffffe          BL       _Anki_Log
0007d4  f04f7080          MOV      r0,#0x1000000         ;188
0007d8  e7d5              B        |L2.1926|
                  |L2.2010|
0007da  20c0              MOVS     r0,#0xc0              ;192
0007dc  e9cd5000          STRD     r5,r0,[sp,#0]         ;192
0007e0  a3b9              ADR      r3,|L2.2760|
0007e2  a2eb              ADR      r2,|L2.2960|
0007e4  a1c5              ADR      r1,|L2.2812|
0007e6  2005              MOVS     r0,#5                 ;192
0007e8  f7fffffe          BL       _Anki_Log
0007ec  f04f7080          MOV      r0,#0x1000000         ;192
0007f0  e7c9              B        |L2.1926|
                  |L2.2034|
0007f2  20c4              MOVS     r0,#0xc4              ;196
0007f4  e9cd5000          STRD     r5,r0,[sp,#0]         ;196
0007f8  a3b3              ADR      r3,|L2.2760|
0007fa  a2ed              ADR      r2,|L2.2992|
0007fc  a1bf              ADR      r1,|L2.2812|
0007fe  2005              MOVS     r0,#5                 ;196
000800  f7fffffe          BL       _Anki_Log
000804  f04f7080          MOV      r0,#0x1000000         ;196
000808  e7bd              B        |L2.1926|
                  |L2.2058|
00080a  f24010d3          MOV      r0,#0x1d3             ;467
00080e  e9cd5000          STRD     r5,r0,[sp,#0]         ;467
000812  a3ad              ADR      r3,|L2.2760|
000814  a2ee              ADR      r2,|L2.3024|
000816  a1b9              ADR      r1,|L2.2812|
000818  2005              MOVS     r0,#5                 ;467
00081a  f7fffffe          BL       _Anki_Log
00081e  f04f7080          MOV      r0,#0x1000000         ;467
000822  e7b0              B        |L2.1926|
                  |L2.2084|
000824  f2402007          MOV      r0,#0x207             ;519
000828  e9cd5000          STRD     r5,r0,[sp,#0]         ;519
00082c  a3a6              ADR      r3,|L2.2760|
00082e  a2f0              ADR      r2,|L2.3056|
000830  a1b2              ADR      r1,|L2.2812|
000832  2005              MOVS     r0,#5                 ;519
000834  f7fffffe          BL       _Anki_Log
000838  f04f7080          MOV      r0,#0x1000000         ;519
00083c  e7a3              B        |L2.1926|
                  |L2.2110|
00083e  f240200b          MOV      r0,#0x20b             ;523
000842  e9cd5000          STRD     r5,r0,[sp,#0]         ;523
000846  a3a0              ADR      r3,|L2.2760|
000848  a2f1              ADR      r2,|L2.3088|
00084a  a1ac              ADR      r1,|L2.2812|
00084c  2005              MOVS     r0,#5                 ;523
00084e  f7fffffe          BL       _Anki_Log
000852  f04f7080          MOV      r0,#0x1000000         ;523
000856  e796              B        |L2.1926|
                  |L2.2136|
000858  f240200f          MOV      r0,#0x20f             ;527
00085c  e9cd5000          STRD     r5,r0,[sp,#0]         ;527
000860  a399              ADR      r3,|L2.2760|
000862  a2f3              ADR      r2,|L2.3120|
000864  a1a5              ADR      r1,|L2.2812|
000866  2005              MOVS     r0,#5                 ;527
000868  f7fffffe          BL       _Anki_Log
00086c  f04f7080          MOV      r0,#0x1000000         ;527
000870  e789              B        |L2.1926|
                  |L2.2162|
000872  f2402013          MOV      r0,#0x213             ;531
000876  e9cd5000          STRD     r5,r0,[sp,#0]         ;531
00087a  a393              ADR      r3,|L2.2760|
00087c  a2f7              ADR      r2,|L2.3164|
00087e  a19f              ADR      r1,|L2.2812|
000880  2005              MOVS     r0,#5                 ;531
000882  f7fffffe          BL       _Anki_Log
000886  f04f7080          MOV      r0,#0x1000000         ;531
00088a  e77c              B        |L2.1926|
                  |L2.2188|
00088c  a0fe              ADR      r0,|L2.3208|
00088e  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000892  99e0              LDR      r1,[sp,#0x380]        ;545
000894  2000              MOVS     r0,#0                 ;547
000896  ad0a              ADD      r5,sp,#0x28           ;536
000898  690a              LDR      r2,[r1,#0x10]         ;536
00089a  6889              LDR      r1,[r1,#8]            ;536
00089c  ae54              ADD      r6,sp,#0x150          ;537
00089e  fb002001          MLA      r0,r0,r1,r2           ;537
0008a2  ed900a00          VLDR     s0,[r0,#0]            ;547
0008a6  ed8d0a00          VSTR     s0,[sp,#0]            ;547
0008aa  ed90fa01          VLDR     s30,[r0,#4]           ;547
0008ae  edd0ea02          VLDR     s29,[r0,#8]           ;547
0008b2  2001              MOVS     r0,#1                 ;548
0008b4  fb002001          MLA      r0,r0,r1,r2           ;548
0008b8  ed90ea00          VLDR     s28,[r0,#0]           ;548
0008bc  edd0da01          VLDR     s27,[r0,#4]           ;548
0008c0  ed90da02          VLDR     s26,[r0,#8]           ;548
0008c4  2002              MOVS     r0,#2                 ;549
0008c6  fb002001          MLA      r0,r0,r1,r2           ;549
0008ca  2100              MOVS     r1,#0                 ;554
0008cc  edd0ca00          VLDR     s25,[r0,#0]           ;549
0008d0  ed90ca01          VLDR     s24,[r0,#4]           ;549
0008d4  edd0ba02          VLDR     s23,[r0,#8]           ;549
                  |L2.2264|
0008d8  2000              MOVS     r0,#0                 ;555
0008da  eb051241          ADD      r2,r5,r1,LSL #5       ;556
                  |L2.2270|
0008de  eb020380          ADD      r3,r2,r0,LSL #2       ;556
0008e2  1c40              ADDS     r0,r0,#1              ;555
0008e4  ed83ba00          VSTR     s22,[r3,#0]           ;556
0008e8  2808              CMP      r0,#8                 ;555
0008ea  dbf8              BLT      |L2.2270|
0008ec  eb060081          ADD      r0,r6,r1,LSL #2       ;558
0008f0  1c49              ADDS     r1,r1,#1              ;554
0008f2  ed80ba00          VSTR     s22,[r0,#0]           ;558
0008f6  2908              CMP      r1,#8                 ;554
0008f8  dbee              BLT      |L2.2264|
0008fa  a0e3              ADR      r0,|L2.3208|
0008fc  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000900  a0e9              ADR      r0,|L2.3240|
000902  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000906  2400              MOVS     r4,#0                 ;566
000908  f000bafc          B.W      |L2.3844|
                  |L2.2316|
00090c  98b2              LDR      r0,[sp,#0x2c8]        ;569
00090e  ed9d1a00          VLDR     s2,[sp,#0]            ;573
000912  eb000084          ADD      r0,r0,r4,LSL #2       ;569
000916  edd00a00          VLDR     s1,[r0,#0]            ;569
00091a  98b3              LDR      r0,[sp,#0x2cc]        ;570
00091c  eb000084          ADD      r0,r0,r4,LSL #2       ;570
000920  ee211a20          VMUL.F32 s2,s2,s1              ;573
000924  ed900a00          VLDR     s0,[r0,#0]            ;570
000928  ee0f1a00          VMLA.F32 s2,s30,s0             ;573
00092c  ee711a2e          VADD.F32 s3,s2,s29             ;573
000930  ee2e1a20          VMUL.F32 s2,s28,s1             ;574
000934  ee6c0aa0          VMUL.F32 s1,s25,s1             ;576
000938  ee0d1a80          VMLA.F32 s2,s27,s0             ;574
00093c  ee4c0a00          VMLA.F32 s1,s24,s0             ;576
000940  ee311a0d          VADD.F32 s2,s2,s26             ;574
000944  ee700aab          VADD.F32 s1,s1,s23             ;576
000948  ee8f0aa0          VDIV.F32 s0,s31,s1             ;576
00094c  ee619a80          VMUL.F32 s19,s3,s0             ;578
000950  ee219a00          VMUL.F32 s18,s2,s0             ;579
000954  ed9f8adc          VLDR     s16,|L2.3272|
000958  ee390a88          VADD.F32 s0,s19,s16            ;585
00095c  f7fffffe          BL       __hardfp_floorf
000960  eef08a40          VMOV.F32 s17,s0                ;585
000964  eeb00a69          VMOV.F32 s0,s19                ;586
000968  f7fffffe          BL       __hardfp_ceilf
00096c  eef0aa40          VMOV.F32 s21,s0                ;586
000970  ee390a08          VADD.F32 s0,s18,s16            ;588
000974  f7fffffe          BL       __hardfp_floorf
000978  eeb08a40          VMOV.F32 s16,s0                ;588
00097c  eeb00a49          VMOV.F32 s0,s18                ;589
000980  f7fffffe          BL       __hardfp_ceilf
000984  eef58ac0          VCMPE.F32 s17,#0.0              ;592
000988  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;592
00098c  f0c082b9          BCC.W    |L2.3842|
000990  eddd0a95          VLDR     s1,[sp,#0x254]        ;592
000994  eef4aae0          VCMPE.F32 s21,s1                ;592
000998  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;592
00099c  f30082b1          BGT.W    |L2.3842|
0009a0  eeb58ac0          VCMPE.F32 s16,#0.0              ;592
0009a4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;592
0009a8  f0c082ab          BCC.W    |L2.3842|
0009ac  eddd0a94          VLDR     s1,[sp,#0x250]        ;592
0009b0  eeb40ae0          VCMPE.F32 s0,s1                 ;592
0009b4  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;592
0009b8  f30082a3          BGT.W    |L2.3842|
0009bc  ee790ae8          VSUB.F32 s1,s19,s17            ;603
0009c0  ee791a48          VSUB.F32 s3,s18,s16            ;606
0009c4  eeb58ac0          VCMPE.F32 s16,#0.0              ;606
0009c8  ee3f1ae0          VSUB.F32 s2,s31,s1             ;604
0009cc  ee7f2ae1          VSUB.F32 s5,s31,s3             ;607
0009d0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;607
0009d4  bfcc              ITE      GT                    ;607
0009d6  ee382a0a          VADDGT.F32 s4,s16,s20            ;607
0009da  ee382a4a          VSUBLE.F32 s4,s16,s20            ;607
0009de  eebd2ac2          VCVT.S32.F32 s4,s4                 ;607
0009e2  eeb50ac0          VCMPE.F32 s0,#0.0               ;607
0009e6  ee121a10          VMOV     r1,s4                 ;607
0009ea  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;607
0009ee  bfcc              ITE      GT                    ;607
0009f0  ee300a0a          VADDGT.F32 s0,s0,s20             ;607
0009f4  ee300a4a          VSUBLE.F32 s0,s0,s20             ;607
0009f8  eebd0ac0          VCVT.S32.F32 s0,s0                 ;607
0009fc  eef58ac0          VCMPE.F32 s17,#0.0              ;607
000a00  ee10ca10          VMOV     r12,s0                ;607
000a04  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;607
000a08  bfcc              ITE      GT                    ;607
000a0a  ee380a8a          VADDGT.F32 s0,s17,s20            ;607
000a0e  ee380aca          VSUBLE.F32 s0,s17,s20            ;607
000a12  eebd0ac0          VCVT.S32.F32 s0,s0                 ;607
000a16  9ad3              LDR      r2,[sp,#0x34c]        ;607
000a18  9bd3              LDR      r3,[sp,#0x34c]        ;607
000a1a  ee100a10          VMOV     r0,s0                 ;607
000a1e  6912              LDR      r2,[r2,#0x10]         ;607
000a20  689b              LDR      r3,[r3,#8]            ;607
000a22  fb012103          MLA      r1,r1,r3,r2           ;607
000a26  fb0c2203          MLA      r2,r12,r3,r2          ;607
000a2a  4401              ADD      r1,r1,r0              ;607
000a2c  4410              ADD      r0,r0,r2              ;607
000a2e  780a              LDRB     r2,[r1,#0]            ;616
000a30  7849              LDRB     r1,[r1,#1]            ;617
000a32  ee002a10          VMOV     s0,r2                 ;616
000a36  eef83a40          VCVT.F32.U32 s7,s0                 ;616
000a3a  ee001a10          VMOV     s0,r1                 ;617
000a3e  7801              LDRB     r1,[r0,#0]            ;618
000a40  7840              LDRB     r0,[r0,#1]            ;619
000a42  eeb83a40          VCVT.F32.U32 s6,s0                 ;617
000a46  ee001a10          VMOV     s0,r1                 ;618
000a4a  ee613a23          VMUL.F32 s7,s2,s7              ;618
000a4e  eeb82a40          VCVT.F32.U32 s4,s0                 ;618
000a52  ee000a10          VMOV     s0,r0                 ;619
000a56  ee403a83          VMLA.F32 s7,s1,s6              ;619
000a5a  eeb80a40          VCVT.F32.U32 s0,s0                 ;619
000a5e  ee211a02          VMUL.F32 s2,s2,s4              ;619
000a62  ee001a80          VMLA.F32 s2,s1,s0              ;619
000a66  ee220aa3          VMUL.F32 s0,s5,s7              ;619
000a6a  eddd0a96          VLDR     s1,[sp,#0x258]        ;624
000a6e  ee010a81          VMLA.F32 s0,s3,s2              ;624
000a72  ee700a60          VSUB.F32 s1,s0,s1              ;624
000a76  ed9f0a95          VLDR     s0,|L2.3276|
000a7a  985c              LDR      r0,[sp,#0x170]        ;638
000a7c  eb000084          ADD      r0,r0,r4,LSL #2       ;638
000a80  ee204a80          VMUL.F32 s8,s1,s0              ;624
000a84  edd03a00          VLDR     s7,[r0,#0]            ;638
000a88  985d              LDR      r0,[sp,#0x174]        ;639
000a8a  eb000084          ADD      r0,r0,r4,LSL #2       ;639
000a8e  ed903a00          VLDR     s6,[r0,#0]            ;639
000a92  985e              LDR      r0,[sp,#0x178]        ;640
000a94  eb000084          ADD      r0,r0,r4,LSL #2       ;640
000a98  edd02a00          VLDR     s5,[r0,#0]            ;640
000a9c  985f              LDR      r0,[sp,#0x17c]        ;641
000a9e  eb000084          ADD      r0,r0,r4,LSL #2       ;641
000aa2  ed902a00          VLDR     s4,[r0,#0]            ;641
000aa6  9860              LDR      r0,[sp,#0x180]        ;642
000aa8  eb000084          ADD      r0,r0,r4,LSL #2       ;642
000aac  e110              B        |L2.3280|
000aae  0000              DCW      0x0000
                  |L2.2736|
000ab0  766d655f          DCB      "vme_quadrefine_mainLoop",0
000ab4  71756164
000ab8  72656669
000abc  6e655f6d
000ac0  61696e4c
000ac4  6f6f7000
                  |L2.2760|
000ac8  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\quadRefinement.cpp",0
000acc  6f726574
000ad0  6563685c
000ad4  76697369
000ad8  6f6e5c72
000adc  6f626f74
000ae0  5c737263
000ae4  5c717561
000ae8  64526566
000aec  696e656d
000af0  656e742e
000af4  63707000
                  |L2.2808|
                          DCD      ||.constdata||+0x264
                  |L2.2812|
000afc  52656669          DCB      "RefineQuadrilateral",0
000b00  6e655175
000b04  61647269
000b08  6c617465
000b0c  72616c00
                  |L2.2832|
000b10  696e6974          DCB      "initialHomography and refinedHomography are aliased",0
000b14  69616c48
000b18  6f6d6f67
000b1c  72617068
000b20  7920616e
000b24  64207265
000b28  66696e65
000b2c  64486f6d
000b30  6f677261
000b34  70687920
000b38  61726520
000b3c  616c6961
000b40  73656400
                  |L2.2884|
                          DCD      0x01000003
                  |L2.2888|
000b48  4661696c          DCB      "Failed to allocate xSquare Array.",0
000b4c  65642074
000b50  6f20616c
000b54  6c6f6361
000b58  74652078
000b5c  53717561
000b60  72652041
000b64  72726179
000b68  2e00    
000b6a  00                DCB      0
000b6b  00                DCB      0
                  |L2.2924|
000b6c  4661696c          DCB      "Failed to allocate ySquare Array.",0
000b70  65642074
000b74  6f20616c
000b78  6c6f6361
000b7c  74652079
000b80  53717561
000b84  72652041
000b88  72726179
000b8c  2e00    
000b8e  00                DCB      0
000b8f  00                DCB      0
                  |L2.2960|
000b90  4661696c          DCB      "Failed to allocate Tx Array.",0
000b94  65642074
000b98  6f20616c
000b9c  6c6f6361
000ba0  74652054
000ba4  78204172
000ba8  7261792e
000bac  00      
000bad  00                DCB      0
000bae  00                DCB      0
000baf  00                DCB      0
                  |L2.2992|
000bb0  4661696c          DCB      "Failed to allocate Ty Array.",0
000bb4  65642074
000bb8  6f20616c
000bbc  6c6f6361
000bc0  74652054
000bc4  79204172
000bc8  7261792e
000bcc  00      
000bcd  00                DCB      0
000bce  00                DCB      0
000bcf  00                DCB      0
                  |L2.3024|
000bd0  4661696c          DCB      "Failed to allocate A matrix.",0
000bd4  65642074
000bd8  6f20616c
000bdc  6c6f6361
000be0  74652041
000be4  206d6174
000be8  7269782e
000bec  00      
000bed  00                DCB      0
000bee  00                DCB      0
000bef  00                DCB      0
                  |L2.3056|
000bf0  4661696c          DCB      "Failed to allocate AWAt matrix.",0
000bf4  65642074
000bf8  6f20616c
000bfc  6c6f6361
000c00  74652041
000c04  57417420
000c08  6d617472
000c0c  69782e00
                  |L2.3088|
000c10  4661696c          DCB      "Failed to allocate b vector.",0
000c14  65642074
000c18  6f20616c
000c1c  6c6f6361
000c20  74652062
000c24  20766563
000c28  746f722e
000c2c  00      
000c2d  00                DCB      0
000c2e  00                DCB      0
000c2f  00                DCB      0
                  |L2.3120|
000c30  4661696c          DCB      "Failed to allocate homographyUpdate matrix.",0
000c34  65642074
000c38  6f20616c
000c3c  6c6f6361
000c40  74652068
000c44  6f6d6f67
000c48  72617068
000c4c  79557064
000c50  61746520
000c54  6d617472
000c58  69782e00
                  |L2.3164|
000c5c  4661696c          DCB      "Failed to allocate newHomography matrix.",0
000c60  65642074
000c64  6f20616c
000c68  6c6f6361
000c6c  7465206e
000c70  6577486f
000c74  6d6f6772
000c78  61706879
000c7c  206d6174
000c80  7269782e
000c84  00      
000c85  00                DCB      0
000c86  00                DCB      0
000c87  00                DCB      0
                  |L2.3208|
000c88  766d655f          DCB      "vme_quadrefine_mainLoop_init",0
000c8c  71756164
000c90  72656669
000c94  6e655f6d
000c98  61696e4c
000c9c  6f6f705f
000ca0  696e6974
000ca4  00      
000ca5  00                DCB      0
000ca6  00                DCB      0
000ca7  00                DCB      0
                  |L2.3240|
000ca8  766d655f          DCB      "vme_quadrefine_mainLoop_samples",0
000cac  71756164
000cb0  72656669
000cb4  6e655f6d
000cb8  61696e4c
000cbc  6f6f705f
000cc0  73616d70
000cc4  6c657300
                  |L2.3272|
000cc8  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L2.3276|
000ccc  3b808081          DCFS     0x3b808081 ; 0.0039215688593685627
                  |L2.3280|
000cd0  edd01a00          VLDR     s3,[r0,#0]            ;642
000cd4  9861              LDR      r0,[sp,#0x184]        ;643
000cd6  eddd4a0a          VLDR     s9,[sp,#0x28]         ;647
000cda  eb000084          ADD      r0,r0,r4,LSL #2       ;643
000cde  ed901a00          VLDR     s2,[r0,#0]            ;643
000ce2  9862              LDR      r0,[sp,#0x188]        ;644
000ce4  ee434aa3          VMLA.F32 s9,s7,s7              ;647
000ce8  eb000084          ADD      r0,r0,r4,LSL #2       ;644
000cec  edd00a00          VLDR     s1,[r0,#0]            ;644
000cf0  9863              LDR      r0,[sp,#0x18c]        ;645
000cf2  eb000084          ADD      r0,r0,r4,LSL #2       ;645
000cf6  ed900a00          VLDR     s0,[r0,#0]            ;645
000cfa  edcd4a0a          VSTR     s9,[sp,#0x28]         ;647
000cfe  eddd4a0b          VLDR     s9,[sp,#0x2c]         ;648
000d02  ee434a83          VMLA.F32 s9,s7,s6              ;648
000d06  edcd4a0b          VSTR     s9,[sp,#0x2c]         ;648
000d0a  eddd4a0c          VLDR     s9,[sp,#0x30]         ;649
000d0e  ee434aa2          VMLA.F32 s9,s7,s5              ;649
000d12  edcd4a0c          VSTR     s9,[sp,#0x30]         ;649
000d16  eddd4a0d          VLDR     s9,[sp,#0x34]         ;650
000d1a  ee434a82          VMLA.F32 s9,s7,s4              ;650
000d1e  edcd4a0d          VSTR     s9,[sp,#0x34]         ;650
000d22  eddd4a0e          VLDR     s9,[sp,#0x38]         ;651
000d26  ee434aa1          VMLA.F32 s9,s7,s3              ;651
000d2a  edcd4a0e          VSTR     s9,[sp,#0x38]         ;651
000d2e  eddd4a0f          VLDR     s9,[sp,#0x3c]         ;652
000d32  ee434a81          VMLA.F32 s9,s7,s2              ;652
000d36  edcd4a0f          VSTR     s9,[sp,#0x3c]         ;652
000d3a  eddd4a10          VLDR     s9,[sp,#0x40]         ;653
000d3e  ee434aa0          VMLA.F32 s9,s7,s1              ;653
000d42  edcd4a10          VSTR     s9,[sp,#0x40]         ;653
000d46  eddd4a11          VLDR     s9,[sp,#0x44]         ;654
000d4a  ee434a80          VMLA.F32 s9,s7,s0              ;654
000d4e  edcd4a11          VSTR     s9,[sp,#0x44]         ;654
000d52  eddd4a54          VLDR     s9,[sp,#0x150]        ;655
000d56  ee434a84          VMLA.F32 s9,s7,s8              ;655
000d5a  edcd4a54          VSTR     s9,[sp,#0x150]        ;655
000d5e  eddd3a13          VLDR     s7,[sp,#0x4c]         ;657
000d62  ee433a03          VMLA.F32 s7,s6,s6              ;657
000d66  edcd3a13          VSTR     s7,[sp,#0x4c]         ;657
000d6a  eddd3a14          VLDR     s7,[sp,#0x50]         ;658
000d6e  ee433a22          VMLA.F32 s7,s6,s5              ;658
000d72  edcd3a14          VSTR     s7,[sp,#0x50]         ;658
000d76  eddd3a15          VLDR     s7,[sp,#0x54]         ;659
000d7a  ee433a02          VMLA.F32 s7,s6,s4              ;659
000d7e  edcd3a15          VSTR     s7,[sp,#0x54]         ;659
000d82  eddd3a16          VLDR     s7,[sp,#0x58]         ;660
000d86  ee433a21          VMLA.F32 s7,s6,s3              ;660
000d8a  edcd3a16          VSTR     s7,[sp,#0x58]         ;660
000d8e  eddd3a17          VLDR     s7,[sp,#0x5c]         ;661
000d92  ee433a01          VMLA.F32 s7,s6,s2              ;661
000d96  edcd3a17          VSTR     s7,[sp,#0x5c]         ;661
000d9a  eddd3a18          VLDR     s7,[sp,#0x60]         ;662
000d9e  ee433a20          VMLA.F32 s7,s6,s1              ;662
000da2  edcd3a18          VSTR     s7,[sp,#0x60]         ;662
000da6  eddd3a19          VLDR     s7,[sp,#0x64]         ;663
000daa  ee433a00          VMLA.F32 s7,s6,s0              ;663
000dae  edcd3a19          VSTR     s7,[sp,#0x64]         ;663
000db2  eddd3a55          VLDR     s7,[sp,#0x154]        ;664
000db6  ee433a04          VMLA.F32 s7,s6,s8              ;664
000dba  edcd3a55          VSTR     s7,[sp,#0x154]        ;664
000dbe  ed9d3a1c          VLDR     s6,[sp,#0x70]         ;666
000dc2  ee023aa2          VMLA.F32 s6,s5,s5              ;666
000dc6  ed8d3a1c          VSTR     s6,[sp,#0x70]         ;666
000dca  ed9d3a1d          VLDR     s6,[sp,#0x74]         ;667
000dce  ee023a82          VMLA.F32 s6,s5,s4              ;667
000dd2  ed8d3a1d          VSTR     s6,[sp,#0x74]         ;667
000dd6  ed9d3a1e          VLDR     s6,[sp,#0x78]         ;668
000dda  ee023aa1          VMLA.F32 s6,s5,s3              ;668
000dde  ed8d3a1e          VSTR     s6,[sp,#0x78]         ;668
000de2  ed9d3a1f          VLDR     s6,[sp,#0x7c]         ;669
000de6  ee023a81          VMLA.F32 s6,s5,s2              ;669
000dea  ed8d3a1f          VSTR     s6,[sp,#0x7c]         ;669
000dee  ed9d3a20          VLDR     s6,[sp,#0x80]         ;670
000df2  ee023aa0          VMLA.F32 s6,s5,s1              ;670
000df6  ed8d3a20          VSTR     s6,[sp,#0x80]         ;670
000dfa  ed9d3a21          VLDR     s6,[sp,#0x84]         ;671
000dfe  ee023a80          VMLA.F32 s6,s5,s0              ;671
000e02  ed8d3a21          VSTR     s6,[sp,#0x84]         ;671
000e06  ed9d3a56          VLDR     s6,[sp,#0x158]        ;672
000e0a  ee023a84          VMLA.F32 s6,s5,s8              ;672
000e0e  ed8d3a56          VSTR     s6,[sp,#0x158]        ;672
000e12  eddd2a25          VLDR     s5,[sp,#0x94]         ;674
000e16  ee422a02          VMLA.F32 s5,s4,s4              ;674
000e1a  edcd2a25          VSTR     s5,[sp,#0x94]         ;674
000e1e  eddd2a26          VLDR     s5,[sp,#0x98]         ;675
000e22  ee422a21          VMLA.F32 s5,s4,s3              ;675
000e26  edcd2a26          VSTR     s5,[sp,#0x98]         ;675
000e2a  eddd2a27          VLDR     s5,[sp,#0x9c]         ;676
000e2e  ee422a01          VMLA.F32 s5,s4,s2              ;676
000e32  edcd2a27          VSTR     s5,[sp,#0x9c]         ;676
000e36  eddd2a28          VLDR     s5,[sp,#0xa0]         ;677
000e3a  ee422a20          VMLA.F32 s5,s4,s1              ;677
000e3e  edcd2a28          VSTR     s5,[sp,#0xa0]         ;677
000e42  eddd2a29          VLDR     s5,[sp,#0xa4]         ;678
000e46  ee422a00          VMLA.F32 s5,s4,s0              ;678
000e4a  edcd2a29          VSTR     s5,[sp,#0xa4]         ;678
000e4e  eddd2a57          VLDR     s5,[sp,#0x15c]        ;679
000e52  ee422a04          VMLA.F32 s5,s4,s8              ;679
000e56  edcd2a57          VSTR     s5,[sp,#0x15c]        ;679
000e5a  ed9d2a2e          VLDR     s4,[sp,#0xb8]         ;681
000e5e  ee012aa1          VMLA.F32 s4,s3,s3              ;681
000e62  ed8d2a2e          VSTR     s4,[sp,#0xb8]         ;681
000e66  ed9d2a2f          VLDR     s4,[sp,#0xbc]         ;682
000e6a  ee012a81          VMLA.F32 s4,s3,s2              ;682
000e6e  ed8d2a2f          VSTR     s4,[sp,#0xbc]         ;682
000e72  ed9d2a30          VLDR     s4,[sp,#0xc0]         ;683
000e76  ee012aa0          VMLA.F32 s4,s3,s1              ;683
000e7a  ed8d2a30          VSTR     s4,[sp,#0xc0]         ;683
000e7e  ed9d2a31          VLDR     s4,[sp,#0xc4]         ;684
000e82  ee012a80          VMLA.F32 s4,s3,s0              ;684
000e86  ed8d2a31          VSTR     s4,[sp,#0xc4]         ;684
000e8a  ed9d2a58          VLDR     s4,[sp,#0x160]        ;685
000e8e  ee012a84          VMLA.F32 s4,s3,s8              ;685
000e92  ed8d2a58          VSTR     s4,[sp,#0x160]        ;685
000e96  eddd1a37          VLDR     s3,[sp,#0xdc]         ;687
000e9a  ee411a01          VMLA.F32 s3,s2,s2              ;687
000e9e  edcd1a37          VSTR     s3,[sp,#0xdc]         ;687
000ea2  eddd1a38          VLDR     s3,[sp,#0xe0]         ;688
000ea6  ee411a20          VMLA.F32 s3,s2,s1              ;688
000eaa  edcd1a38          VSTR     s3,[sp,#0xe0]         ;688
000eae  eddd1a39          VLDR     s3,[sp,#0xe4]         ;689
000eb2  ee411a00          VMLA.F32 s3,s2,s0              ;689
000eb6  edcd1a39          VSTR     s3,[sp,#0xe4]         ;689
000eba  eddd1a59          VLDR     s3,[sp,#0x164]        ;690
000ebe  ee411a04          VMLA.F32 s3,s2,s8              ;690
000ec2  edcd1a59          VSTR     s3,[sp,#0x164]        ;690
000ec6  ed9d1a40          VLDR     s2,[sp,#0x100]        ;692
000eca  ee001aa0          VMLA.F32 s2,s1,s1              ;692
000ece  ed8d1a40          VSTR     s2,[sp,#0x100]        ;692
000ed2  ed9d1a41          VLDR     s2,[sp,#0x104]        ;693
000ed6  ee001a80          VMLA.F32 s2,s1,s0              ;693
000eda  ed8d1a41          VSTR     s2,[sp,#0x104]        ;693
000ede  ed9d1a5a          VLDR     s2,[sp,#0x168]        ;694
000ee2  ee001a84          VMLA.F32 s2,s1,s8              ;694
000ee6  ed8d1a5a          VSTR     s2,[sp,#0x168]        ;694
000eea  eddd0a49          VLDR     s1,[sp,#0x124]        ;696
000eee  ee400a00          VMLA.F32 s1,s0,s0              ;696
000ef2  edcd0a49          VSTR     s1,[sp,#0x124]        ;696
000ef6  eddd0a5b          VLDR     s1,[sp,#0x16c]        ;697
000efa  ee400a04          VMLA.F32 s1,s0,s8              ;697
000efe  edcd0a5b          VSTR     s1,[sp,#0x16c]        ;697
                  |L2.3842|
000f02  1c64              ADDS     r4,r4,#1              ;566
                  |L2.3844|
000f04  987b              LDR      r0,[sp,#0x1ec]        ;566
000f06  4284              CMP      r4,r0                 ;566
000f08  da03              BGE      |L2.3858|
000f0a  98b1              LDR      r0,[sp,#0x2c4]        ;566
000f0c  2800              CMP      r0,#0                 ;566
000f0e  f43facfd          BEQ      |L2.2316|
                  |L2.3858|
000f12  f2af206c          ADR      r0,|L2.3240|
000f16  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
000f1a  a0fe              ADR      r0,|L2.4884|
000f1c  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
000f20  2100              MOVS     r1,#0                 ;708
                  |L2.3874|
000f22  4608              MOV      r0,r1                 ;709
000f24  2908              CMP      r1,#8                 ;709
000f26  bfb8              IT       LT                    ;710
000f28  eb051241          ADDLT    r2,r5,r1,LSL #5       ;710
000f2c  da0f              BGE      |L2.3918|
                  |L2.3886|
000f2e  f8ddc21c          LDR      r12,[sp,#0x21c]       ;709
000f32  9b89              LDR      r3,[sp,#0x224]        ;709
000f34  fb01330c          MLA      r3,r1,r12,r3          ;709
000f38  eb020c80          ADD      r12,r2,r0,LSL #2      ;710
000f3c  eb030380          ADD      r3,r3,r0,LSL #2       ;710
000f40  ed9c0a00          VLDR     s0,[r12,#0]           ;710
000f44  1c40              ADDS     r0,r0,#1              ;709
000f46  ed830a00          VSTR     s0,[r3,#0]            ;710
000f4a  2808              CMP      r0,#8                 ;709
000f4c  dbef              BLT      |L2.3886|
                  |L2.3918|
000f4e  9b8c              LDR      r3,[sp,#0x230]        ;709
000f50  9a8e              LDR      r2,[sp,#0x238]        ;709
000f52  2000              MOVS     r0,#0                 ;712
000f54  fb002003          MLA      r0,r0,r3,r2           ;712
000f58  eb060281          ADD      r2,r6,r1,LSL #2       ;712
000f5c  eb000081          ADD      r0,r0,r1,LSL #2       ;712
000f60  ed920a00          VLDR     s0,[r2,#0]            ;712
000f64  1c49              ADDS     r1,r1,#1              ;708
000f66  ed800a00          VSTR     s0,[r0,#0]            ;712
000f6a  2908              CMP      r1,#8                 ;708
000f6c  dbd9              BLT      |L2.3874|
000f6e  ac85              ADD      r4,sp,#0x214          ;715
000f70  2500              MOVS     r5,#0                 ;715
000f72  4629              MOV      r1,r5                 ;715
000f74  4620              MOV      r0,r4                 ;715
000f76  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000f7a  4606              MOV      r6,r0                 ;715
000f7c  2101              MOVS     r1,#1                 ;715
000f7e  4620              MOV      r0,r4                 ;715
000f80  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000f84  4286              CMP      r6,r0                 ;715
000f86  d00b              BEQ      |L2.4000|
000f88  f2407109          MOV      r1,#0x709             ;715
000f8c  48ea              LDR      r0,|L2.4920|
000f8e  e9cd0100          STRD     r0,r1,[sp,#0]         ;715
000f92  a3ea              ADR      r3,|L2.4924|
000f94  a2f7              ADR      r2,|L2.4980|
000f96  a1fe              ADR      r1,|L2.5008|
000f98  2005              MOVS     r0,#5                 ;715
000f9a  f7fffffe          BL       _Anki_Log
000f9e  e024              B        |L2.4074|
                  |L2.4000|
000fa0  2100              MOVS     r1,#0                 ;715
000fa2  4620              MOV      r0,r4                 ;715
000fa4  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000fa8  1e06              SUBS     r6,r0,#0              ;715
000faa  f04f0200          MOV      r2,#0                 ;715
000fae  dd1c              BLE      |L2.4074|
                  |L2.4016|
000fb0  2d00              CMP      r5,#0                 ;715
000fb2  bf15              ITETE    NE                    ;715
000fb4  1c51              ADDNE    r1,r2,#1              ;715
000fb6  2100              MOVEQ    r1,#0                 ;715
000fb8  4630              MOVNE    r0,r6                 ;715
000fba  4610              MOVEQ    r0,r2                 ;715
000fbc  4281              CMP      r1,r0                 ;715
000fbe  da11              BGE      |L2.4068|
                  |L2.4032|
000fc0  f8d4c008          LDR      r12,[r4,#8]           ;715
000fc4  6923              LDR      r3,[r4,#0x10]         ;715
000fc6  fb01370c          MLA      r7,r1,r12,r3          ;715
000fca  fb02330c          MLA      r3,r2,r12,r3          ;715
000fce  eb070782          ADD      r7,r7,r2,LSL #2       ;715
000fd2  eb030381          ADD      r3,r3,r1,LSL #2       ;715
000fd6  ed970a00          VLDR     s0,[r7,#0]            ;715
000fda  1c49              ADDS     r1,r1,#1              ;715
000fdc  ed830a00          VSTR     s0,[r3,#0]            ;715
000fe0  4281              CMP      r1,r0                 ;715
000fe2  dbed              BLT      |L2.4032|
                  |L2.4068|
000fe4  1c52              ADDS     r2,r2,#1              ;715
000fe6  42b2              CMP      r2,r6                 ;715
000fe8  dbe2              BLT      |L2.4016|
                  |L2.4074|
000fea  2000              MOVS     r0,#0                 ;718
000fec  ac85              ADD      r4,sp,#0x214          ;719
000fee  9002              STR      r0,[sp,#8]            ;719
000ff0  4601              MOV      r1,r0                 ;719
000ff2  9000              STR      r0,[sp,#0]            ;719
000ff4  ae8a              ADD      r6,sp,#0x228          ;719
000ff6  4620              MOV      r0,r4                 ;719
000ff8  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000ffc  4605              MOV      r5,r0                 ;719
000ffe  2100              MOVS     r1,#0                 ;719
001000  4630              MOV      r0,r6                 ;719
001002  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
001006  4607              MOV      r7,r0                 ;719
001008  4620              MOV      r0,r4                 ;719
00100a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00100e  b1c0              CBZ      r0,|L2.4162|
001010  4630              MOV      r0,r6                 ;719
001012  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
001016  b1a0              CBZ      r0,|L2.4162|
001018  2101              MOVS     r1,#1                 ;719
00101a  4620              MOV      r0,r4                 ;719
00101c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
001020  42a8              CMP      r0,r5                 ;719
001022  d01c              BEQ      |L2.4190|
001024  f44f71b8          MOV      r1,#0x170             ;719
001028  48dd              LDR      r0,|L2.5024|
00102a  e9cd0100          STRD     r0,r1,[sp,#0]         ;719
00102e  a3c3              ADR      r3,|L2.4924|
001030  a2dc              ADR      r2,|L2.5028|
001032  a1e1              ADR      r1,|L2.5048|
001034  2005              MOVS     r0,#5                 ;719
001036  f7fffffe          BL       _Anki_Log
00103a  f04f60a0          MOV      r0,#0x5000000         ;719
00103e  f000b907          B.W      |L2.4688|
                  |L2.4162|
001042  f240116d          MOV      r1,#0x16d             ;719
001046  48d6              LDR      r0,|L2.5024|
001048  e9cd0100          STRD     r0,r1,[sp,#0]         ;719
00104c  a3bb              ADR      r3,|L2.4924|
00104e  a2e0              ADR      r2,|L2.5072|
001050  a1d9              ADR      r1,|L2.5048|
001052  2005              MOVS     r0,#5                 ;719
001054  f7fffffe          BL       _Anki_Log
001058  f04f6080          MOV      r0,#0x4000000         ;719
00105c  e0f8              B        |L2.4688|
                  |L2.4190|
00105e  2101              MOVS     r1,#1                 ;719
001060  4630              MOV      r0,r6                 ;719
001062  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
001066  42a8              CMP      r0,r5                 ;719
001068  d00d              BEQ      |L2.4230|
00106a  f2401173          MOV      r1,#0x173             ;719
00106e  48cc              LDR      r0,|L2.5024|
001070  e9cd0100          STRD     r0,r1,[sp,#0]         ;719
001074  a3b1              ADR      r3,|L2.4924|
001076  a2da              ADR      r2,|L2.5088|
001078  a1cf              ADR      r1,|L2.5048|
00107a  2005              MOVS     r0,#5                 ;719
00107c  f7fffffe          BL       _Anki_Log
001080  f04f60a0          MOV      r0,#0x5000000         ;719
001084  e0e4              B        |L2.4688|
                  |L2.4230|
001086  ed9f8ade          VLDR     s16,|L2.5120|
00108a  f04f0800          MOV      r8,#0                 ;719
00108e  2d00              CMP      r5,#0                 ;719
001090  dd57              BLE      |L2.4418|
                  |L2.4242|
001092  68a1              LDR      r1,[r4,#8]            ;719
001094  6920              LDR      r0,[r4,#0x10]         ;719
001096  fb080201          MLA      r2,r8,r1,r0           ;719
00109a  2000              MOVS     r0,#0                 ;719
00109c  f1b80f00          CMP      r8,#0                 ;719
0010a0  dd22              BLE      |L2.4328|
                  |L2.4258|
0010a2  68a3              LDR      r3,[r4,#8]            ;719
0010a4  6921              LDR      r1,[r4,#0x10]         ;719
0010a6  eb020c80          ADD      r12,r2,r0,LSL #2      ;719
0010aa  fb001303          MLA      r3,r0,r3,r1           ;719
0010ae  ed9c0a00          VLDR     s0,[r12,#0]           ;719
0010b2  2100              MOVS     r1,#0                 ;719
0010b4  2800              CMP      r0,#0                 ;719
0010b6  dd0c              BLE      |L2.4306|
                  |L2.4280|
0010b8  eb020981          ADD      r9,r2,r1,LSL #2       ;719
0010bc  edd90a00          VLDR     s1,[r9,#0]            ;719
0010c0  eb030981          ADD      r9,r3,r1,LSL #2       ;719
0010c4  1c49              ADDS     r1,r1,#1              ;719
0010c6  ed991a00          VLDR     s2,[r9,#0]            ;719
0010ca  4288              CMP      r0,r1                 ;719
0010cc  ee000ac1          VMLS.F32 s0,s1,s2              ;719
0010d0  dcf2              BGT      |L2.4280|
                  |L2.4306|
0010d2  eb030180          ADD      r1,r3,r0,LSL #2       ;719
0010d6  1c40              ADDS     r0,r0,#1              ;719
0010d8  edd10a00          VLDR     s1,[r1,#0]            ;719
0010dc  4540              CMP      r0,r8                 ;719
0010de  ee200a80          VMUL.F32 s0,s1,s0              ;719
0010e2  ed8c0a00          VSTR     s0,[r12,#0]           ;719
0010e6  dbdc              BLT      |L2.4258|
                  |L2.4328|
0010e8  eb020988          ADD      r9,r2,r8,LSL #2       ;719
0010ec  2000              MOVS     r0,#0                 ;719
0010ee  ed990a00          VLDR     s0,[r9,#0]            ;719
0010f2  f1b80f00          CMP      r8,#0                 ;719
0010f6  dd08              BLE      |L2.4362|
                  |L2.4344|
0010f8  eb020180          ADD      r1,r2,r0,LSL #2       ;719
0010fc  1c40              ADDS     r0,r0,#1              ;719
0010fe  edd10a00          VLDR     s1,[r1,#0]            ;719
001102  4580              CMP      r8,r0                 ;719
001104  ee000ae0          VMLS.F32 s0,s1,s1              ;719
001108  dcf6              BGT      |L2.4344|
                  |L2.4362|
00110a  eeb48ac0          VCMPE.F32 s16,s0                ;719
00110e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;719
001112  dd03              BLE      |L2.4380|
001114  2001              MOVS     r0,#1                 ;719
001116  9002              STR      r0,[sp,#8]            ;719
001118  2000              MOVS     r0,#0                 ;719
00111a  e099              B        |L2.4688|
                  |L2.4380|
00111c  eef10ac0          VSQRT.F32 s1,s0                 ;719
001120  eef40a60          VCMP.F32 s1,s1                 ;719
001124  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;719
001128  d003              BEQ      |L2.4402|
00112a  f7fffffe          BL       __hardfp_sqrtf
00112e  eef00a40          VMOV.F32 s1,s0                 ;719
                  |L2.4402|
001132  f1080801          ADD      r8,r8,#1              ;719
001136  ee8f0aa0          VDIV.F32 s0,s31,s1             ;719
00113a  45a8              CMP      r8,r5                 ;719
00113c  ed890a00          VSTR     s0,[r9,#0]            ;719
001140  dba7              BLT      |L2.4242|
                  |L2.4418|
001142  2000              MOVS     r0,#0                 ;719
001144  2d00              CMP      r5,#0                 ;719
001146  dd2d              BLE      |L2.4516|
                  |L2.4424|
001148  68a2              LDR      r2,[r4,#8]            ;719
00114a  6921              LDR      r1,[r4,#0x10]         ;719
00114c  fb001c02          MLA      r12,r0,r2,r1          ;719
001150  2200              MOVS     r2,#0                 ;719
001152  2f00              CMP      r7,#0                 ;719
001154  bfc8              IT       GT                    ;719
001156  eb0c0880          ADDGT    r8,r12,r0,LSL #2      ;719
00115a  dd20              BLE      |L2.4510|
                  |L2.4444|
00115c  68b3              LDR      r3,[r6,#8]            ;719
00115e  6931              LDR      r1,[r6,#0x10]         ;719
001160  fb021303          MLA      r3,r2,r3,r1           ;719
001164  eb030980          ADD      r9,r3,r0,LSL #2       ;719
001168  2100              MOVS     r1,#0                 ;719
00116a  ed990a00          VLDR     s0,[r9,#0]            ;719
00116e  2800              CMP      r0,#0                 ;719
001170  dd0c              BLE      |L2.4492|
                  |L2.4466|
001172  eb0c0a81          ADD      r10,r12,r1,LSL #2     ;719
001176  ed9a1a00          VLDR     s2,[r10,#0]           ;719
00117a  eb030a81          ADD      r10,r3,r1,LSL #2      ;719
00117e  1c49              ADDS     r1,r1,#1              ;719
001180  edda0a00          VLDR     s1,[r10,#0]           ;719
001184  4288              CMP      r0,r1                 ;719
001186  ee010a60          VMLS.F32 s0,s2,s1              ;719
00118a  dcf2              BGT      |L2.4466|
                  |L2.4492|
00118c  edd80a00          VLDR     s1,[r8,#0]            ;719
001190  1c52              ADDS     r2,r2,#1              ;719
001192  42ba              CMP      r2,r7                 ;719
001194  ee200a80          VMUL.F32 s0,s1,s0              ;719
001198  ed890a00          VSTR     s0,[r9,#0]            ;719
00119c  dbde              BLT      |L2.4444|
                  |L2.4510|
00119e  1c40              ADDS     r0,r0,#1              ;719
0011a0  42a8              CMP      r0,r5                 ;719
0011a2  dbd1              BLT      |L2.4424|
                  |L2.4516|
0011a4  1e68              SUBS     r0,r5,#1              ;719
0011a6  d433              BMI      |L2.4624|
                  |L2.4520|
0011a8  68a2              LDR      r2,[r4,#8]            ;719
0011aa  6921              LDR      r1,[r4,#0x10]         ;719
0011ac  fb001102          MLA      r1,r0,r2,r1           ;719
0011b0  2200              MOVS     r2,#0                 ;719
0011b2  2f00              CMP      r7,#0                 ;719
0011b4  bfc8              IT       GT                    ;719
0011b6  eb010a80          ADDGT    r10,r1,r0,LSL #2      ;719
0011ba  dd27              BLE      |L2.4620|
                  |L2.4540|
0011bc  68b3              LDR      r3,[r6,#8]            ;719
0011be  6931              LDR      r1,[r6,#0x10]         ;719
0011c0  fb021303          MLA      r3,r2,r3,r1           ;719
0011c4  eb030980          ADD      r9,r3,r0,LSL #2       ;719
0011c8  1e69              SUBS     r1,r5,#1              ;719
0011ca  ed990a00          VLDR     s0,[r9,#0]            ;719
0011ce  4281              CMP      r1,r0                 ;719
0011d0  bfc4              ITT      GT                    ;719
0011d2  f8d4c010          LDRGT    r12,[r4,#0x10]        ;719
0011d6  f8d48008          LDRGT    r8,[r4,#8]            ;719
0011da  dd0e              BLE      |L2.4602|
                  |L2.4572|
0011dc  fb01cb08          MLA      r11,r1,r8,r12         ;719
0011e0  eb0b0b80          ADD      r11,r11,r0,LSL #2     ;719
0011e4  ed9b1a00          VLDR     s2,[r11,#0]           ;719
0011e8  eb030b81          ADD      r11,r3,r1,LSL #2      ;719
0011ec  1e49              SUBS     r1,r1,#1              ;719
0011ee  eddb0a00          VLDR     s1,[r11,#0]           ;719
0011f2  4281              CMP      r1,r0                 ;719
0011f4  ee010a60          VMLS.F32 s0,s2,s1              ;719
0011f8  dcf0              BGT      |L2.4572|
                  |L2.4602|
0011fa  edda0a00          VLDR     s1,[r10,#0]           ;719
0011fe  1c52              ADDS     r2,r2,#1              ;719
001200  4297              CMP      r7,r2                 ;719
001202  ee200a80          VMUL.F32 s0,s1,s0              ;719
001206  ed890a00          VSTR     s0,[r9,#0]            ;719
00120a  dcd7              BGT      |L2.4540|
                  |L2.4620|
00120c  1e40              SUBS     r0,r0,#1              ;719
00120e  d5cb              BPL      |L2.4520|
                  |L2.4624|
001210  9800              LDR      r0,[sp,#0]            ;719
001212  2800              CMP      r0,#0                 ;719
001214  bf1c              ITT      NE                    ;719
001216  2100              MOVNE    r1,#0                 ;719
001218  2d00              CMPNE    r5,#0                 ;719
00121a  dd18              BLE      |L2.4686|
                  |L2.4636|
00121c  68a2              LDR      r2,[r4,#8]            ;719
00121e  6920              LDR      r0,[r4,#0x10]         ;719
001220  fb010202          MLA      r2,r1,r2,r0           ;719
001224  eb020081          ADD      r0,r2,r1,LSL #2       ;719
001228  ed900a00          VLDR     s0,[r0,#0]            ;719
00122c  eecf0a80          VDIV.F32 s1,s31,s0             ;719
001230  edc00a00          VSTR     s1,[r0,#0]            ;719
001234  1c48              ADDS     r0,r1,#1              ;719
001236  4285              CMP      r5,r0                 ;719
001238  dd06              BLE      |L2.4680|
                  |L2.4666|
00123a  eb020380          ADD      r3,r2,r0,LSL #2       ;719
00123e  1c40              ADDS     r0,r0,#1              ;719
001240  ed83ba00          VSTR     s22,[r3,#0]           ;719
001244  4285              CMP      r5,r0                 ;719
001246  dcf8              BGT      |L2.4666|
                  |L2.4680|
001248  1c49              ADDS     r1,r1,#1              ;719
00124a  42a9              CMP      r1,r5                 ;719
00124c  dbe6              BLT      |L2.4636|
                  |L2.4686|
00124e  2000              MOVS     r0,#0                 ;719
                  |L2.4688|
001250  2800              CMP      r0,#0                 ;719
001252  f47faa98          BNE      |L2.1926|
001256  9802              LDR      r0,[sp,#8]            ;723
001258  2800              CMP      r0,#0                 ;723
00125a  bf1c              ITT      NE                    ;725
00125c  2001              MOVNE    r0,#1                 ;725
00125e  90b1              STRNE    r0,[sp,#0x2c4]        ;725
001260  2000              MOVS     r0,#0                 ;730
001262  9a8c              LDR      r2,[sp,#0x230]        ;730
001264  998e              LDR      r1,[sp,#0x238]        ;730
001266  9b4c              LDR      r3,[sp,#0x130]        ;730
001268  fb001002          MLA      r0,r0,r2,r1           ;730
00126c  9a4e              LDR      r2,[sp,#0x138]        ;730
00126e  ed900a00          VLDR     s0,[r0,#0]            ;731
001272  eef00a6f          VMOV.F32 s1,s31                ;731
001276  2100              MOVS     r1,#0                 ;731
001278  fb012103          MLA      r1,r1,r3,r2           ;731
00127c  ee300a20          VADD.F32 s0,s0,s1              ;731
001280  ed810a00          VSTR     s0,[r1,#0]            ;731
001284  9b4c              LDR      r3,[sp,#0x130]        ;731
001286  9a4e              LDR      r2,[sp,#0x138]        ;731
001288  2100              MOVS     r1,#0                 ;731
00128a  fb012103          MLA      r1,r1,r3,r2           ;731
00128e  ed900a01          VLDR     s0,[r0,#4]            ;731
001292  ed810a01          VSTR     s0,[r1,#4]            ;731
001296  9b4c              LDR      r3,[sp,#0x130]        ;731
001298  9a4e              LDR      r2,[sp,#0x138]        ;731
00129a  2100              MOVS     r1,#0                 ;731
00129c  fb012103          MLA      r1,r1,r3,r2           ;731
0012a0  ed900a02          VLDR     s0,[r0,#8]            ;731
0012a4  ed810a02          VSTR     s0,[r1,#8]            ;731
0012a8  9b4c              LDR      r3,[sp,#0x130]        ;731
0012aa  9a4e              LDR      r2,[sp,#0x138]        ;731
0012ac  2101              MOVS     r1,#1                 ;732
0012ae  fb012103          MLA      r1,r1,r3,r2           ;732
0012b2  ed900a03          VLDR     s0,[r0,#0xc]          ;732
0012b6  ed810a00          VSTR     s0,[r1,#0]            ;732
0012ba  ed900a04          VLDR     s0,[r0,#0x10]         ;732
0012be  9b4c              LDR      r3,[sp,#0x130]        ;732
0012c0  9a4e              LDR      r2,[sp,#0x138]        ;732
0012c2  2101              MOVS     r1,#1                 ;732
0012c4  fb012103          MLA      r1,r1,r3,r2           ;732
0012c8  ee300a20          VADD.F32 s0,s0,s1              ;732
0012cc  ed810a01          VSTR     s0,[r1,#4]            ;732
0012d0  9b4c              LDR      r3,[sp,#0x130]        ;732
0012d2  9a4e              LDR      r2,[sp,#0x138]        ;732
0012d4  2101              MOVS     r1,#1                 ;732
0012d6  fb012103          MLA      r1,r1,r3,r2           ;732
0012da  ed900a05          VLDR     s0,[r0,#0x14]         ;732
0012de  ed810a02          VSTR     s0,[r1,#8]            ;732
0012e2  9b4c              LDR      r3,[sp,#0x130]        ;732
0012e4  9a4e              LDR      r2,[sp,#0x138]        ;732
0012e6  2102              MOVS     r1,#2                 ;733
0012e8  fb012103          MLA      r1,r1,r3,r2           ;733
0012ec  ed900a06          VLDR     s0,[r0,#0x18]         ;733
0012f0  ed810a00          VSTR     s0,[r1,#0]            ;733
0012f4  9b4c              LDR      r3,[sp,#0x130]        ;733
0012f6  9a4e              LDR      r2,[sp,#0x138]        ;733
0012f8  2102              MOVS     r1,#2                 ;733
0012fa  fb012103          MLA      r1,r1,r3,r2           ;733
0012fe  ed900a07          VLDR     s0,[r0,#0x1c]         ;733
001302  2002              MOVS     r0,#2                 ;733
001304  ed810a01          VSTR     s0,[r1,#4]            ;733
001308  9a4c              LDR      r2,[sp,#0x130]        ;733
00130a  994e              LDR      r1,[sp,#0x138]        ;733
00130c  fb001002          MLA      r0,r0,r2,r1           ;733
001310  e078              B        |L2.5124|
001312  0000              DCW      0x0000
                  |L2.4884|
001314  766d655f          DCB      "vme_quadrefine_mainLoop_finalize",0
001318  71756164
00131c  72656669
001320  6e655f6d
001324  61696e4c
001328  6f6f705f
00132c  66696e61
001330  6c697a65
001334  00      
001335  00                DCB      0
001336  00                DCB      0
001337  00                DCB      0
                  |L2.4920|
                          DCD      _ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)::__PRETTY_FUNCTION__
                  |L2.4924|
00133c  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
001340  6f726574
001344  6563685c
001348  636f6d6d
00134c  6f6e5c69
001350  6e636c75
001354  64655c61
001358  6e6b692f
00135c  636f6d6d
001360  6f6e2f72
001364  6f626f74
001368  2f6d6174
00136c  726978  
00136f  2e6800            DCB      ".h",0
001372  00                DCB      0
001373  00                DCB      0
                  |L2.4980|
001374  496e7075          DCB      "Input array must be square",0
001378  74206172
00137c  72617920
001380  6d757374
001384  20626520
001388  73717561
00138c  726500  
00138f  00                DCB      0
                  |L2.5008|
001390  4d616b65          DCB      "MakeSymmetric",0
001394  53796d6d
001398  65747269
00139c  6300    
00139e  00                DCB      0
00139f  00                DCB      0
                  |L2.5024|
                          DCD      _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
                  |L2.5028|
0013a4  415f4c20          DCB      "A_L is not square",0
0013a8  6973206e
0013ac  6f742073
0013b0  71756172
0013b4  6500    
0013b6  00                DCB      0
0013b7  00                DCB      0
                  |L2.5048|
0013b8  43686f6c          DCB      "CholeskyDecomposition",0
0013bc  65736b79
0013c0  4465636f
0013c4  6d706f73
0013c8  6974696f
0013cc  6e00    
0013ce  00                DCB      0
0013cf  00                DCB      0
                  |L2.5072|
0013d0  496e7661          DCB      "Invalid objects",0
0013d4  6c696420
0013d8  6f626a65
0013dc  63747300
                  |L2.5088|
0013e0  58742061          DCB      "Xt and Bt are the wrong sizes",0
0013e4  6e642042
0013e8  74206172
0013ec  65207468
0013f0  65207772
0013f4  6f6e6720
0013f8  73697a65
0013fc  7300    
0013fe  00                DCB      0
0013ff  00                DCB      0
                  |L2.5120|
001400  34000000          DCFS     0x34000000 ; 1.1920928955078125e-07
                  |L2.5124|
001404  edc00a02          VSTR     s1,[r0,#8]            ;733
001408  f8ddc138          LDR      r12,[sp,#0x138]       ;733
00140c  9c4c              LDR      r4,[sp,#0x130]        ;733
00140e  2301              MOVS     r3,#1                 ;736
001410  fb03c404          MLA      r4,r3,r4,r12          ;736
001414  9f4c              LDR      r7,[sp,#0x130]        ;736
001416  9e4e              LDR      r6,[sp,#0x138]        ;736
001418  ed944a01          VLDR     s8,[r4,#4]            ;736
00141c  2502              MOVS     r5,#2                 ;736
00141e  fb056607          MLA      r6,r5,r7,r6           ;736
001422  ee245a20          VMUL.F32 s10,s8,s1             ;736
001426  edd63a01          VLDR     s7,[r6,#4]            ;736
00142a  9a4c              LDR      r2,[sp,#0x130]        ;736
00142c  994e              LDR      r1,[sp,#0x138]        ;736
00142e  edd41a02          VLDR     s3,[r4,#8]            ;736
001432  2000              MOVS     r0,#0                 ;736
001434  eeb00a45          VMOV.F32 s0,s10                ;736
001438  fb001202          MLA      r2,r0,r2,r1           ;736
00143c  ee010ae3          VMLS.F32 s0,s3,s7              ;736
001440  ed923a00          VLDR     s6,[r2,#0]            ;736
001444  edd44a00          VLDR     s9,[r4,#0]            ;736
001448  ed961a00          VLDR     s2,[r6,#0]            ;736
00144c  edd22a01          VLDR     s5,[r2,#4]            ;736
001450  ee645aa3          VMUL.F32 s11,s9,s7             ;736
001454  ee206a03          VMUL.F32 s12,s0,s6             ;736
001458  ee240aa0          VMUL.F32 s0,s9,s1              ;736
00145c  ed922a02          VLDR     s4,[r2,#8]            ;736
001460  ee015ae3          VMLS.F32 s10,s3,s7             ;736
001464  1d11              ADDS     r1,r2,#4              ;736
001466  ee010ac1          VMLS.F32 s0,s3,s2              ;736
00146a  ee626a23          VMUL.F32 s13,s4,s7             ;736
00146e  1d08              ADDS     r0,r1,#4              ;736
001470  1d23              ADDS     r3,r4,#4              ;736
001472  f1040c08          ADD      r12,r4,#8             ;736
001476  ee426ae0          VMLS.F32 s13,s5,s1             ;736
00147a  ee026ac0          VMLS.F32 s12,s5,s0             ;736
00147e  eeb00a65          VMOV.F32 s0,s11                ;736
001482  ee445a41          VMLS.F32 s11,s8,s2             ;736
001486  ee040a41          VMLS.F32 s0,s8,s2              ;736
00148a  1d35              ADDS     r5,r6,#4              ;736
00148c  1d2f              ADDS     r7,r5,#4              ;736
00148e  ee026a00          VMLA.F32 s12,s4,s0             ;736
001492  ee800a86          VDIV.F32 s0,s1,s12             ;736
001496  ee216a81          VMUL.F32 s12,s3,s2             ;736
00149a  ee046ae0          VMLS.F32 s12,s9,s1             ;736
00149e  ee630a20          VMUL.F32 s1,s6,s1              ;736
0014a2  ee420a41          VMLS.F32 s1,s4,s2              ;736
0014a6  ee221a81          VMUL.F32 s2,s5,s2              ;736
0014aa  ee031a63          VMLS.F32 s2,s6,s7              ;736
0014ae  ee623aa1          VMUL.F32 s7,s5,s3              ;736
0014b2  ee600a80          VMUL.F32 s1,s1,s0              ;736
0014b6  ee423a44          VMLS.F32 s7,s4,s8              ;736
0014ba  ee222a24          VMUL.F32 s4,s4,s9              ;736
0014be  ee032a61          VMLS.F32 s4,s6,s3              ;736
0014c2  ee631a04          VMUL.F32 s3,s6,s8              ;736
0014c6  ee421ae4          VMLS.F32 s3,s5,s9              ;736
0014ca  ee652a00          VMUL.F32 s5,s10,s0             ;736
0014ce  edc22a00          VSTR     s5,[r2,#0]            ;736
0014d2  ee662a80          VMUL.F32 s5,s13,s0             ;736
0014d6  edc12a00          VSTR     s5,[r1,#0]            ;736
0014da  ee632a80          VMUL.F32 s5,s7,s0              ;736
0014de  edc02a00          VSTR     s5,[r0,#0]            ;736
0014e2  ee662a00          VMUL.F32 s5,s12,s0             ;736
0014e6  edc42a00          VSTR     s5,[r4,#0]            ;736
0014ea  edc30a00          VSTR     s1,[r3,#0]            ;736
0014ee  ee620a00          VMUL.F32 s1,s4,s0              ;736
0014f2  edcc0a00          VSTR     s1,[r12,#0]           ;736
0014f6  ee650a80          VMUL.F32 s1,s11,s0             ;736
0014fa  edc60a00          VSTR     s1,[r6,#0]            ;736
0014fe  ee610a00          VMUL.F32 s1,s2,s0              ;736
001502  ee210a80          VMUL.F32 s0,s3,s0              ;736
001506  ae4a              ADD      r6,sp,#0x128          ;740
001508  edc50a00          VSTR     s1,[r5,#0]            ;740
00150c  ed870a00          VSTR     s0,[r7,#0]            ;740
001510  98e0              LDR      r0,[sp,#0x380]        ;740
001512  f50d789e          ADD      r8,sp,#0x13c          ;740
001516  2100              MOVS     r1,#0                 ;740
001518  9000              STR      r0,[sp,#0]            ;740
00151a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00151e  9001              STR      r0,[sp,#4]            ;740
001520  2101              MOVS     r1,#1                 ;740
001522  9800              LDR      r0,[sp,#0]            ;740
001524  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
001528  4682              MOV      r10,r0                ;740
00152a  2100              MOVS     r1,#0                 ;740
00152c  4630              MOV      r0,r6                 ;740
00152e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
001532  4605              MOV      r5,r0                 ;740
001534  2101              MOVS     r1,#1                 ;740
001536  4630              MOV      r0,r6                 ;740
001538  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00153c  9c4c              LDR      r4,[sp,#0x130]        ;740
00153e  4607              MOV      r7,r0                 ;740
001540  45aa              CMP      r10,r5                ;740
001542  d00b              BEQ      |L2.5468|
001544  48b0              LDR      r0,|L2.6152|
001546  21fb              MOVS     r1,#0xfb              ;740
001548  f2af2310          ADR      r3,|L2.4924|
00154c  e9cd0100          STRD     r0,r1,[sp,#0]         ;740
001550  a2ae              ADR      r2,|L2.6156|
001552  a1b8              ADR      r1,|L2.6196|
001554  2005              MOVS     r0,#5                 ;740
001556  f7fffffe          BL       _Anki_Log
00155a  e079              B        |L2.5712|
                  |L2.5468|
00155c  4640              MOV      r0,r8                 ;740
00155e  f8dd9004          LDR      r9,[sp,#4]            ;740
001562  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
001566  2800              CMP      r0,#0                 ;740
001568  d07e              BEQ      |L2.5736|
00156a  2100              MOVS     r1,#0                 ;740
00156c  4640              MOV      r0,r8                 ;740
00156e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
001572  4548              CMP      r0,r9                 ;740
001574  d178              BNE      |L2.5736|
001576  2101              MOVS     r1,#1                 ;740
001578  4640              MOV      r0,r8                 ;740
00157a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00157e  42b8              CMP      r0,r7                 ;740
001580  d172              BNE      |L2.5736|
001582  9801              LDR      r0,[sp,#4]            ;740
001584  f04f0a00          MOV      r10,#0                ;740
001588  2800              CMP      r0,#0                 ;740
00158a  bfc4              ITT      GT                    ;740
00158c  f1a50903          SUBGT    r9,r5,#3              ;740
001590  eb040b44          ADDGT    r11,r4,r4,LSL #1      ;740
001594  dd5c              BLE      |L2.5712|
                  |L2.5526|
001596  9800              LDR      r0,[sp,#0]            ;740
001598  2300              MOVS     r3,#0                 ;740
00159a  2f00              CMP      r7,#0                 ;740
00159c  6901              LDR      r1,[r0,#0x10]         ;740
00159e  6880              LDR      r0,[r0,#8]            ;740
0015a0  fb0a1c00          MLA      r12,r10,r0,r1         ;740
0015a4  f8d81008          LDR      r1,[r8,#8]            ;740
0015a8  f8d80010          LDR      r0,[r8,#0x10]         ;740
0015ac  fb0a0001          MLA      r0,r10,r1,r0          ;740
0015b0  9002              STR      r0,[sp,#8]            ;740
0015b2  dd48              BLE      |L2.5702|
                  |L2.5556|
0015b4  68b2              LDR      r2,[r6,#8]            ;740
0015b6  6931              LDR      r1,[r6,#0x10]         ;740
0015b8  2000              MOVS     r0,#0                 ;740
0015ba  fb001002          MLA      r0,r0,r2,r1           ;740
0015be  2200              MOVS     r2,#0                 ;740
0015c0  eb000183          ADD      r1,r0,r3,LSL #2       ;740
0015c4  eeb00a4b          VMOV.F32 s0,s22                ;740
0015c8  f1b90f00          CMP      r9,#0                 ;740
0015cc  dd25              BLE      |L2.5658|
                  |L2.5582|
0015ce  eb0c0082          ADD      r0,r12,r2,LSL #2      ;740
0015d2  ed913a00          VLDR     s6,[r1,#0]            ;740
0015d6  ed904a00          VLDR     s8,[r0,#0]            ;740
0015da  edd03a01          VLDR     s7,[r0,#4]            ;740
0015de  edd02a02          VLDR     s5,[r0,#8]            ;740
0015e2  edd01a03          VLDR     s3,[r0,#0xc]          ;740
0015e6  1908              ADDS     r0,r1,r4              ;740
0015e8  ee243a03          VMUL.F32 s6,s8,s6              ;740
0015ec  ed902a00          VLDR     s4,[r0,#0]            ;740
0015f0  eb010044          ADD      r0,r1,r4,LSL #1       ;740
0015f4  1d12              ADDS     r2,r2,#4              ;740
0015f6  ee033a82          VMLA.F32 s6,s7,s4              ;740
0015fa  ed901a00          VLDR     s2,[r0,#0]            ;740
0015fe  eb0b0001          ADD      r0,r11,r1             ;740
001602  eb010184          ADD      r1,r1,r4,LSL #2       ;740
001606  edd00a00          VLDR     s1,[r0,#0]            ;740
00160a  4591              CMP      r9,r2                 ;740
00160c  ee023a81          VMLA.F32 s6,s5,s2              ;740
001610  ee013aa0          VMLA.F32 s6,s3,s1              ;740
001614  ee330a00          VADD.F32 s0,s6,s0              ;740
001618  dcd9              BGT      |L2.5582|
                  |L2.5658|
00161a  42aa              CMP      r2,r5                 ;740
00161c  da0b              BGE      |L2.5686|
                  |L2.5662|
00161e  eb0c0082          ADD      r0,r12,r2,LSL #2      ;740
001622  ed911a00          VLDR     s2,[r1,#0]            ;740
001626  edd00a00          VLDR     s1,[r0,#0]            ;740
00162a  1c52              ADDS     r2,r2,#1              ;740
00162c  4421              ADD      r1,r1,r4              ;740
00162e  ee000a81          VMLA.F32 s0,s1,s2              ;740
001632  42aa              CMP      r2,r5                 ;740
001634  dbf3              BLT      |L2.5662|
                  |L2.5686|
001636  9802              LDR      r0,[sp,#8]            ;740
001638  eb000083          ADD      r0,r0,r3,LSL #2       ;740
00163c  1c5b              ADDS     r3,r3,#1              ;740
00163e  ed800a00          VSTR     s0,[r0,#0]            ;740
001642  42bb              CMP      r3,r7                 ;740
001644  dbb6              BLT      |L2.5556|
                  |L2.5702|
001646  9801              LDR      r0,[sp,#4]            ;740
001648  f10a0a01          ADD      r10,r10,#1            ;740
00164c  4582              CMP      r10,r0                ;740
00164e  dba2              BLT      |L2.5526|
                  |L2.5712|
001650  9a51              LDR      r2,[sp,#0x144]        ;740
001652  9953              LDR      r1,[sp,#0x14c]        ;740
001654  2002              MOVS     r0,#2                 ;742
001656  fb001002          MLA      r0,r0,r2,r1           ;742
00165a  4979              LDR      r1,|L2.6208|
00165c  6880              LDR      r0,[r0,#8]            ;742
00165e  4288              CMP      r0,r1                 ;742
001660  bfc4              ITT      GT                    ;742
001662  4978              LDRGT    r1,|L2.6212|
001664  4281              CMPGT    r1,r0                 ;742
001666  e000              B        |L2.5738|
                  |L2.5736|
001668  e055              B        |L2.5910|
                  |L2.5738|
00166a  dc40              BGT      |L2.5870|
00166c  ad4f              ADD      r5,sp,#0x13c          ;743
00166e  a897              ADD      r0,sp,#0x25c          ;743
001670  e8b5101e          LDM      r5!,{r1-r4,r12}       ;743
001674  e88d101e          STM      sp,{r1-r4,r12}        ;743
001678  2400              MOVS     r4,#0                 ;743
00167a  4669              MOV      r1,sp                 ;743
00167c  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
001680  f8804030          STRB     r4,[r0,#0x30]         ;743
001684  90b6              STR      r0,[sp,#0x2d8]        ;743
001686  9a51              LDR      r2,[sp,#0x144]        ;743
001688  9953              LDR      r1,[sp,#0x14c]        ;743
00168a  2002              MOVS     r0,#2                 ;743
00168c  fb001002          MLA      r0,r0,r2,r1           ;743
001690  ad4f              ADD      r5,sp,#0x13c          ;743
001692  ed908a02          VLDR     s16,[r0,#8]           ;743
001696  e8b5101e          LDM      r5!,{r1-r4,r12}       ;743
00169a  e88d101e          STM      sp,{r1-r4,r12}        ;743
00169e  a8a4              ADD      r0,sp,#0x290          ;743
0016a0  4669              MOV      r1,sp                 ;743
0016a2  f7fffffe          BL       _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
0016a6  9900              LDR      r1,[sp,#0]            ;743
0016a8  2900              CMP      r1,#0                 ;743
0016aa  bfc4              ITT      GT                    ;743
0016ac  9901              LDRGT    r1,[sp,#4]            ;743
0016ae  2900              CMPGT    r1,#0                 ;743
0016b0  dd3f              BLE      |L2.5938|
0016b2  e9dd1200          LDRD     r1,r2,[sp,#0]         ;743
0016b6  4351              MULS     r1,r2,r1              ;743
0016b8  b391              CBZ      r1,|L2.5920|
0016ba  9b02              LDR      r3,[sp,#8]            ;743
0016bc  9a04              LDR      r2,[sp,#0x10]         ;743
0016be  2100              MOVS     r1,#0                 ;743
0016c0  fb012103          MLA      r1,r1,r3,r2           ;743
                  |L2.5828|
0016c4  6301              STR      r1,[r0,#0x30]         ;743
0016c6  f1000410          ADD      r4,r0,#0x10           ;743
0016ca  e890100e          LDM      r0,{r1-r3,r12}        ;743
0016ce  e8940ff0          LDM      r4,{r4-r11}           ;743
0016d2  6b00              LDR      r0,[r0,#0x30]         ;743
0016d4  f8cdc000          STR      r12,[sp,#0]           ;743
0016d8  e9cdb008          STRD     r11,r0,[sp,#0x20]     ;743
0016dc  f10d0b04          ADD      r11,sp,#4             ;743
0016e0  eeb00a48          VMOV.F32 s0,s16                ;743
0016e4  e8ab07f0          STM      r11!,{r4-r10}         ;743
0016e8  98b6              LDR      r0,[sp,#0x2d8]        ;743
0016ea  f7fffffe          BL       _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotDivide<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)
                  |L2.5870|
0016ee  a94f              ADD      r1,sp,#0x13c          ;746
0016f0  98e0              LDR      r0,[sp,#0x380]        ;746
0016f2  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfE3SetERKS2_ ; Anki::Embedded::Array<float>::Set(const Anki::Embedded::Array<float>&)
0016f6  e9dd10df          LDRD     r1,r0,[sp,#0x37c]     ;746
0016fa  f7fffffe          BL       _ZN4Anki8Embedded15MaxCornerChangeERKNS0_5ArrayIfEERNS0_13QuadrilateralIfEE ; Anki::Embedded::MaxCornerChange(const Anki::Embedded::Array<float>&, Anki::Embedded::Quadrilateral<float>&)
0016fe  eddd0acf          VLDR     s1,[sp,#0x33c]        ;749
001702  eeb40ae0          VCMPE.F32 s0,s1                 ;749
001706  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;749
00170a  f2af30f8          ADR      r0,|L2.4884|
00170e  d212              BCS      |L2.5942|
001710  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
001714  e01b              B        |L2.5966|
                  |L2.5910|
001716  483c              LDR      r0,|L2.6152|
001718  21fe              MOVS     r1,#0xfe              ;757
00171a  f2af33e0          ADR      r3,|L2.4924|
00171e  e000              B        |L2.5922|
                  |L2.5920|
001720  e007              B        |L2.5938|
                  |L2.5922|
001722  e9cd0100          STRD     r0,r1,[sp,#0]         ;757
001726  a248              ADR      r2,|L2.6216|
001728  a142              ADR      r1,|L2.6196|
00172a  2005              MOVS     r0,#5                 ;757
00172c  f7fffffe          BL       _Anki_Log
001730  e78e              B        |L2.5712|
                  |L2.5938|
001732  2100              MOVS     r1,#0                 ;757
001734  e7c6              B        |L2.5828|
                  |L2.5942|
001736  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
00173a  98b4              LDR      r0,[sp,#0x2d0]        ;544
00173c  1c40              ADDS     r0,r0,#1              ;544
                  |L2.5950|
00173e  99d4              LDR      r1,[sp,#0x350]        ;544
001740  90b4              STR      r0,[sp,#0x2d0]        ;544
001742  4288              CMP      r0,r1                 ;544
001744  da03              BGE      |L2.5966|
001746  98b1              LDR      r0,[sp,#0x2c4]        ;544
001748  2800              CMP      r0,#0                 ;544
00174a  f43fa89f          BEQ      |L2.2188|
                  |L2.5966|
00174e  f6af40a0          ADR      r0,|L2.2736|
001752  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
001756  a049              ADR      r0,|L2.6268|
001758  f7fffffe          BL       _ZN4Anki8Embedded14BeginBenchmarkEPKc ; Anki::Embedded::BeginBenchmark(const char*)
00175c  a864              ADD      r0,sp,#0x190          ;793
00175e  2304              MOVS     r3,#4                 ;793
001760  2208              MOVS     r2,#8                 ;793
001762  494c              LDR      r1,|L2.6292|
001764  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
001768  2100              MOVS     r1,#0                 ;793
                  |L2.5994|
00176a  ed8dba00          VSTR     s22,[sp,#0]           ;793
00176e  ed8dba01          VSTR     s22,[sp,#4]           ;793
001772  eb0002c1          ADD      r2,r0,r1,LSL #3       ;793
001776  ed9d0a00          VLDR     s0,[sp,#0]            ;793
00177a  1c49              ADDS     r1,r1,#1              ;793
00177c  ed820a00          VSTR     s0,[r2,#0]            ;793
001780  ed9d0a01          VLDR     s0,[sp,#4]            ;793
001784  2904              CMP      r1,#4                 ;793
001786  ed820a01          VSTR     s0,[r2,#4]            ;793
00178a  dbee              BLT      |L2.5994|
00178c  9bd1              LDR      r3,[sp,#0x344]        ;793
00178e  f50d7cc8          ADD      r12,sp,#0x190         ;794
001792  2000              MOVS     r0,#0                 ;794
                  |L2.6036|
001794  eb0301c0          ADD      r1,r3,r0,LSL #3       ;794
001798  eb0c02c0          ADD      r2,r12,r0,LSL #3      ;794
00179c  ed910a00          VLDR     s0,[r1,#0]            ;794
0017a0  1c40              ADDS     r0,r0,#1              ;794
0017a2  ed820a00          VSTR     s0,[r2,#0]            ;794
0017a6  ed910a01          VLDR     s0,[r1,#4]            ;794
0017aa  2804              CMP      r0,#4                 ;794
0017ac  ed820a01          VSTR     s0,[r2,#4]            ;794
0017b0  dbf0              BLT      |L2.6036|
0017b2  98b1              LDR      r0,[sp,#0x2c4]        ;798
0017b4  b950              CBNZ     r0,|L2.6092|
0017b6  4661              MOV      r1,r12                ;799
0017b8  98e0              LDR      r0,[sp,#0x380]        ;799
0017ba  f7fffffe          BL       _ZN4Anki8Embedded15MaxCornerChangeERKNS0_5ArrayIfEERNS0_13QuadrilateralIfEE ; Anki::Embedded::MaxCornerChange(const Anki::Embedded::Array<float>&, Anki::Embedded::Quadrilateral<float>&)
0017be  eddd0ace          VLDR     s1,[sp,#0x338]        ;800
0017c2  eeb40ae0          VCMPE.F32 s0,s1                 ;800
0017c6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;800
0017ca  dd16              BLE      |L2.6138|
                  |L2.6092|
0017cc  9bdf              LDR      r3,[sp,#0x37c]        ;800
0017ce  f50d7cc8          ADD      r12,sp,#0x190         ;810
0017d2  2000              MOVS     r0,#0                 ;810
                  |L2.6100|
0017d4  eb0c01c0          ADD      r1,r12,r0,LSL #3      ;810
0017d8  eb0302c0          ADD      r2,r3,r0,LSL #3       ;810
0017dc  ed910a00          VLDR     s0,[r1,#0]            ;810
0017e0  1c40              ADDS     r0,r0,#1              ;810
0017e2  ed820a00          VSTR     s0,[r2,#0]            ;810
0017e6  ed910a01          VLDR     s0,[r1,#4]            ;810
0017ea  2804              CMP      r0,#4                 ;810
0017ec  ed820a01          VSTR     s0,[r2,#4]            ;810
0017f0  dbf0              BLT      |L2.6100|
0017f2  99d2              LDR      r1,[sp,#0x348]        ;811
0017f4  98e0              LDR      r0,[sp,#0x380]        ;811
0017f6  f7fffffe          BL       _ZN4Anki8Embedded5ArrayIfE3SetERKS2_ ; Anki::Embedded::Array<float>::Set(const Anki::Embedded::Array<float>&)
                  |L2.6138|
0017fa  a020              ADR      r0,|L2.6268|
0017fc  f7fffffe          BL       _ZN4Anki8Embedded12EndBenchmarkEPKc ; Anki::Embedded::EndBenchmark(const char*)
001800  2000              MOVS     r0,#0                 ;816
001802  f7febfc0          B        |L2.1926|
;;;818      }
                          ENDP

001806  0000              DCW      0x0000
                  |L2.6152|
                          DCD      _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
                  |L2.6156|
00180c  496e7075          DCB      "Input matrices are incompatible sizes",0
001810  74206d61
001814  74726963
001818  65732061
00181c  72652069
001820  6e636f6d
001824  70617469
001828  626c6520
00182c  73697a65
001830  7300    
001832  00                DCB      0
001833  00                DCB      0
                  |L2.6196|
001834  4d756c74          DCB      "Multiply",0
001838  69706c79
00183c  00      
00183d  00                DCB      0
00183e  00                DCB      0
00183f  00                DCB      0
                  |L2.6208|
                          DCD      0x3f7fff58
                  |L2.6212|
                          DCD      0x3f800054
                  |L2.6216|
001848  496e7075          DCB      "Input and Output matrices are incompatible sizes",0
00184c  7420616e
001850  64204f75
001854  74707574
001858  206d6174
00185c  72696365
001860  73206172
001864  6520696e
001868  636f6d70
00186c  61746962
001870  6c652073
001874  697a6573
001878  00      
001879  00                DCB      0
00187a  00                DCB      0
00187b  00                DCB      0
                  |L2.6268|
00187c  766d655f          DCB      "vme_quadrefine_finalize",0
001880  71756164
001884  72656669
001888  6e655f66
00188c  696e616c
001890  697a6500
                  |L2.6292|
                          DCD      _ZN4Anki8Embedded5PointIfEC1Ev ; Anki::Embedded::Point<float>::Point()

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded15MaxCornerChangeERKNS0_5ArrayIfEERNS0_13QuadrilateralIfEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded15MaxCornerChangeERKNS0_5ArrayIfEERNS0_13QuadrilateralIfEE||
                          DCD      0x00000001

                          AREA ||area_number.4||, LINKORDER=||i._ZN4Anki8Embedded19RefineQuadrilateralERKNS0_13QuadrilateralIfEERKNS0_5ArrayIfEERKNS5_IhEEfiffiffRS2_RS6_NS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded19RefineQuadrilateralERKNS0_13QuadrilateralIfEERKNS0_5ArrayIfEERKNS5_IhEEfiffiffRS2_RS6_NS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a526566          DCB      0x3a,0x52,0x65,0x66
000020  696e6551          DCB      0x69,0x6e,0x65,0x51
000024  75616472          DCB      0x75,0x61,0x64,0x72
000028  696c6174          DCB      0x69,0x6c,0x61,0x74
00002c  6572616c          DCB      0x65,0x72,0x61,0x6c
000030  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000034  73742041          DCB      0x73,0x74,0x20,0x41
000038  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00003c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000040  65646465          DCB      0x65,0x64,0x64,0x65
000044  643a3a51          DCB      0x64,0x3a,0x3a,0x51
000048  75616472          DCB      0x75,0x61,0x64,0x72
00004c  696c6174          DCB      0x69,0x6c,0x61,0x74
000050  6572616c          DCB      0x65,0x72,0x61,0x6c
000054  3c666c6f          DCB      0x3c,0x66,0x6c,0x6f
000058  61743e20          DCB      0x61,0x74,0x3e,0x20
00005c  262c2063          DCB      0x26,0x2c,0x20,0x63
000060  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000064  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000068  693a3a45          DCB      0x69,0x3a,0x3a,0x45
00006c  6d626564          DCB      0x6d,0x62,0x65,0x64
000070  6465643a          DCB      0x64,0x65,0x64,0x3a
000074  3a417272          DCB      0x3a,0x41,0x72,0x72
000078  61793c66          DCB      0x61,0x79,0x3c,0x66
00007c  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000080  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000084  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000088  73742041          DCB      0x73,0x74,0x20,0x41
00008c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000090  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000094  65646465          DCB      0x65,0x64,0x64,0x65
000098  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00009c  72726179          DCB      0x72,0x72,0x61,0x79
0000a0  3c756e73          DCB      0x3c,0x75,0x6e,0x73
0000a4  69676e65          DCB      0x69,0x67,0x6e,0x65
0000a8  64206368          DCB      0x64,0x20,0x63,0x68
0000ac  61723e20          DCB      0x61,0x72,0x3e,0x20
0000b0  262c2066          DCB      0x26,0x2c,0x20,0x66
0000b4  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000b8  2c207369          DCB      0x2c,0x20,0x73,0x69
0000bc  676e6564          DCB      0x67,0x6e,0x65,0x64
0000c0  20696e74          DCB      0x20,0x69,0x6e,0x74
0000c4  2c20666c          DCB      0x2c,0x20,0x66,0x6c
0000c8  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000cc  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0000d0  61742c20          DCB      0x61,0x74,0x2c,0x20
0000d4  7369676e          DCB      0x73,0x69,0x67,0x6e
0000d8  65642069          DCB      0x65,0x64,0x20,0x69
0000dc  6e742c20          DCB      0x6e,0x74,0x2c,0x20
0000e0  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000e4  742c2066          DCB      0x74,0x2c,0x20,0x66
0000e8  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000ec  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0000f0  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000f4  456d6265          DCB      0x45,0x6d,0x62,0x65
0000f8  64646564          DCB      0x64,0x64,0x65,0x64
0000fc  3a3a5175          DCB      0x3a,0x3a,0x51,0x75
000100  61647269          DCB      0x61,0x64,0x72,0x69
000104  6c617465          DCB      0x6c,0x61,0x74,0x65
000108  72616c3c          DCB      0x72,0x61,0x6c,0x3c
00010c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000110  743e2026          DCB      0x74,0x3e,0x20,0x26
000114  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000118  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00011c  456d6265          DCB      0x45,0x6d,0x62,0x65
000120  64646564          DCB      0x64,0x64,0x65,0x64
000124  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000128  7261793c          DCB      0x72,0x61,0x79,0x3c
00012c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000130  743e2026          DCB      0x74,0x3e,0x20,0x26
000134  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000138  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00013c  456d6265          DCB      0x45,0x6d,0x62,0x65
000140  64646564          DCB      0x64,0x64,0x65,0x64
000144  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
000148  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
00014c  53746163          DCB      0x53,0x74,0x61,0x63
000150  6b290000          DCB      0x6b,0x29,0x00,0x00
000154  4c696e65          DCB      0x4c,0x69,0x6e,0x65
000158  61725365          DCB      0x61,0x72,0x53,0x65
00015c  7175656e          DCB      0x71,0x75,0x65,0x6e
000160  63653c54          DCB      0x63,0x65,0x3c,0x54
000164  7970653e          DCB      0x79,0x70,0x65,0x3e
000168  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
00016c  6d707574          DCB      0x6d,0x70,0x75,0x74
000170  6553697a          DCB      0x65,0x53,0x69,0x7a
000174  65000000          DCB      0x65,0x00,0x00,0x00
000178  73697a65          DCB      0x73,0x69,0x7a,0x65
00017c  20657374          DCB      0x20,0x65,0x73,0x74
000180  696d6174          DCB      0x69,0x6d,0x61,0x74
000184  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000188  6661696c          DCB      0x66,0x61,0x69,0x6c
00018c  65640000          DCB      0x65,0x64,0x00,0x00
000190  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000194  6f726574          DCB      0x6f,0x72,0x65,0x74
000198  6563685c          DCB      0x65,0x63,0x68,0x5c
00019c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001a0  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
0001a4  6e636c75          DCB      0x6e,0x63,0x6c,0x75
0001a8  64655c61          DCB      0x64,0x65,0x5c,0x61
0001ac  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
0001b0  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0001b4  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
0001b8  6f626f74          DCB      0x6f,0x62,0x6f,0x74
0001bc  2f736571          DCB      0x2f,0x73,0x65,0x71
0001c0  75656e63          DCB      0x75,0x65,0x6e,0x63
0001c4  65732e68          DCB      0x65,0x73,0x2e,0x68
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
0001cc  41727261          DCB      0x41,0x72,0x72,0x61
0001d0  793c5479          DCB      0x79,0x3c,0x54,0x79
0001d4  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0001d8  3a676574          DCB      0x3a,0x67,0x65,0x74
0001dc  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0001e0  65000000          DCB      0x65,0x00,0x00,0x00
0001e4  4e656761          DCB      0x4e,0x65,0x67,0x61
0001e8  74697665          DCB      0x74,0x69,0x76,0x65
0001ec  2064696d          DCB      0x20,0x64,0x69,0x6d
0001f0  656e7369          DCB      0x65,0x6e,0x73,0x69
0001f4  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
0001f8  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
0001fc  6f726574          DCB      0x6f,0x72,0x65,0x74
000200  6563685c          DCB      0x65,0x63,0x68,0x5c
000204  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000208  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
00020c  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000210  64655c61          DCB      0x64,0x65,0x5c,0x61
000214  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000218  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
00021c  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000220  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000224  2f617272          DCB      0x2f,0x61,0x72,0x72
000228  61793264          DCB      0x61,0x79,0x32,0x64
00022c  2e680000          DCB      0x2e,0x68,0x00,0x00
000230  41727261          DCB      0x41,0x72,0x72,0x61
000234  793c5479          DCB      0x79,0x3c,0x54,0x79
000238  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00023c  3a436f6d          DCB      0x3a,0x43,0x6f,0x6d
000240  70757465          DCB      0x70,0x75,0x74,0x65
000244  52657175          DCB      0x52,0x65,0x71,0x75
000248  69726564          DCB      0x69,0x72,0x65,0x64
00024c  53747269          DCB      0x53,0x74,0x72,0x69
000250  64650000          DCB      0x64,0x65,0x00,0x00
000254  496e7661          DCB      0x49,0x6e,0x76,0x61
000258  6c696420          DCB      0x6c,0x69,0x64,0x20
00025c  73697a65          DCB      0x73,0x69,0x7a,0x65
000260  00000000          DCB      0x00,0x00,0x00,0x00
000264  496e7075          DCB      0x49,0x6e,0x70,0x75
000268  7420616e          DCB      0x74,0x20,0x61,0x6e
00026c  64204f75          DCB      0x64,0x20,0x4f,0x75
000270  74707574          DCB      0x74,0x70,0x75,0x74
000274  20726566          DCB      0x20,0x72,0x65,0x66
000278  696e6564          DCB      0x69,0x6e,0x65,0x64
00027c  20686f6d          DCB      0x20,0x68,0x6f,0x6d
000280  6f677261          DCB      0x6f,0x67,0x72,0x61
000284  70687920          DCB      0x70,0x68,0x79,0x20
000288  61727261          DCB      0x61,0x72,0x72,0x61
00028c  79206d75          DCB      0x79,0x20,0x6d,0x75
000290  73742062          DCB      0x73,0x74,0x20,0x62
000294  65207661          DCB      0x65,0x20,0x76,0x61
000298  6c696420          DCB      0x6c,0x69,0x64,0x20
00029c  616e6420          DCB      0x61,0x6e,0x64,0x20
0002a0  3378332e          DCB      0x33,0x78,0x33,0x2e
0002a4  00                DCB      0x00

                          AREA ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfEC2EiiRNS0_11MemoryStackENS0_5Flags6BufferE                  ; Alternate entry point ; Anki::Embedded::Array<float>::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
                  _ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE PROC ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
;;;120    
;;;121        template<typename Type> Array<Type>::Array(const s32 numRows, const s32 numCols, MemoryStack &memory, const Flags::Buffer flags)
;;;122        {
;;;123          InvalidateArray();
;;;124    
;;;125          AnkiConditionalErrorAndReturn(numCols >= 0 && numRows >= 0,
;;;126            "Array<Type>::Array", "Invalid size");
;;;127    
;;;128          s32 numBytesAllocated = 0;
;;;129    
;;;130          void * allocatedBuffer = AllocateBufferFromMemoryStack(numRows, ComputeRequiredStride(numCols, flags), memory, numBytesAllocated, flags, false);
;;;131    
;;;132          InitializeBuffer(numRows,
;;;133            numCols,
;;;134            reinterpret_cast<Type*>(allocatedBuffer),
;;;135            numBytesAllocated,
;;;136            flags);
;;;137        }
;;;138    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4698              MOV      r8,r3
000008  4616              MOV      r6,r2
00000a  460f              MOV      r7,r1
00000c  300c              ADDS     r0,r0,#0xc
00000e  f8dd9038          LDR      r9,[sp,#0x38]
000012  f7fffffe          BL       _ZN4Anki8Embedded5Flags6BufferC1Ev ; Anki::Embedded::Flags::Buffer::Buffer()
000016  f04f3bff          MOV      r11,#0xffffffff
00001a  f840bc0c          STR      r11,[r0,#-0xc]
00001e  f840bc08          STR      r11,[r0,#-8]
000022  f840bc04          STR      r11,[r0,#-4]
000026  f04f0a00          MOV      r10,#0
00002a  f1a0040c          SUB      r4,r0,#0xc
00002e  f8c0a004          STR      r10,[r0,#4]
000032  2e00              CMP      r6,#0
000034  bfa8              IT       GE
000036  2f00              CMPGE    r7,#0
000038  da0d              BGE      |L20.86|
00003a  217d              MOVS     r1,#0x7d
00003c  484f              LDR      r0,|L20.380|
00003e  e9cd0100          STRD     r0,r1,[sp,#0]
000042  a34f              ADR      r3,|L20.384|
000044  a25c              ADR      r2,|L20.440|
000046  a160              ADR      r1,|L20.456|
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       _Anki_Log
00004e  b005              ADD      sp,sp,#0x14
000050  4620              MOV      r0,r4
000052  e8bd8ff0          POP      {r4-r11,pc}
                  |L20.86|
000056  f8cda010          STR      r10,[sp,#0x10]
00005a  2e01              CMP      r6,#1
00005c  bfcc              ITE      GT
00005e  4630              MOVGT    r0,r6
000060  2001              MOVLE    r0,#1
000062  0080              LSLS     r0,r0,#2
000064  300f              ADDS     r0,r0,#0xf
000066  f020050f          BIC      r5,r0,#0xf
00006a  a804              ADD      r0,sp,#0x10
00006c  e9cd0902          STRD     r0,r9,[sp,#8]
000070  2d00              CMP      r5,#0
000072  dc0a              BGT      |L20.138|
000074  f240310b          MOV      r1,#0x30b
000078  4858              LDR      r0,|L20.476|
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  a340              ADR      r3,|L20.384|
000080  a24d              ADR      r2,|L20.440|
000082  a157              ADR      r1,|L20.480|
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       _Anki_Log
                  |L20.138|
00008a  4638              MOV      r0,r7
00008c  2f01              CMP      r7,#1
00008e  bfd8              IT       LE
000090  2001              MOVLE    r0,#1
000092  60a5              STR      r5,[r4,#8]
000094  4345              MULS     r5,r0,r5
000096  a803              ADD      r0,sp,#0xc
000098  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv ; Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
00009c  4602              MOV      r2,r0
00009e  4629              MOV      r1,r5
0000a0  4640              MOV      r0,r8
0000a2  9b02              LDR      r3,[sp,#8]
0000a4  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEibRi ; Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
0000a8  f8cd900c          STR      r9,[sp,#0xc]
0000ac  f8dd8010          LDR      r8,[sp,#0x10]
0000b0  f8df9158          LDR      r9,|L20.524|
0000b4  0005              MOVS     r5,r0
0000b6  d00e              BEQ      |L20.214|
0000b8  f1b80f10          CMP      r8,#0x10
0000bc  d21e              BCS      |L20.252|
0000be  f2403023          MOV      r0,#0x323
0000c2  e9cd9000          STRD     r9,r0,[sp,#0]
0000c6  a32e              ADR      r3,|L20.384|
0000c8  a251              ADR      r2,|L20.528|
0000ca  a156              ADR      r1,|L20.548|
0000cc  2005              MOVS     r0,#5
0000ce  f7fffffe          BL       _Anki_Log
0000d2  f000b84f          B.W      |L20.372|
                  |L20.214|
0000d6  f240301e          MOV      r0,#0x31e
0000da  e9cd9000          STRD     r9,r0,[sp,#0]
0000de  a328              ADR      r3,|L20.384|
0000e0  a258              ADR      r2,|L20.580|
0000e2  a15f              ADR      r1,|L20.608|
0000e4  2005              MOVS     r0,#5
0000e6  f7fffffe          BL       _Anki_Log
0000ea  f8c4b000          STR      r11,[r4,#0]
0000ee  f8c4b004          STR      r11,[r4,#4]
0000f2  f8c4b008          STR      r11,[r4,#8]
0000f6  f8c4a010          STR      r10,[r4,#0x10]
0000fa  e03b              B        |L20.372|
                  |L20.252|
0000fc  a803              ADD      r0,sp,#0xc
0000fe  f7fffffe          BL       _ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv ; Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
000102  2800              CMP      r0,#0
000104  d00a              BEQ      |L20.284|
000106  f2403026          MOV      r0,#0x326
00010a  e9cd9000          STRD     r9,r0,[sp,#0]
00010e  a31c              ADR      r3,|L20.384|
000110  a259              ADR      r2,|L20.632|
000112  a144              ADR      r1,|L20.548|
000114  2005              MOVS     r0,#5
000116  f7fffffe          BL       _Anki_Log
00011a  e02b              B        |L20.372|
                  |L20.284|
00011c  9903              LDR      r1,[sp,#0xc]
00011e  e9c41503          STRD     r1,r5,[r4,#0xc]
000122  f105000f          ADD      r0,r5,#0xf
000126  f020000f          BIC      r0,r0,#0xf
00012a  e9c47600          STRD     r7,r6,[r4,#0]
00012e  1b40              SUBS     r0,r0,r5
000130  2e01              CMP      r6,#1
000132  bfd8              IT       LE
000134  2601              MOVLE    r6,#1
000136  00b1              LSLS     r1,r6,#2
000138  310f              ADDS     r1,r1,#0xf
00013a  f021010f          BIC      r1,r1,#0xf
00013e  fb010107          MLA      r1,r1,r7,r0
000142  4541              CMP      r1,r8
000144  bfdc              ITT      LE
000146  1829              ADDLE    r1,r5,r0
000148  6121              STRLE    r1,[r4,#0x10]
00014a  dd13              BLE      |L20.372|
00014c  f2403035          MOV      r0,#0x335
000150  f8cd9000          STR      r9,[sp,#0]
000154  e9cd0101          STRD     r0,r1,[sp,#4]
000158  a309              ADR      r3,|L20.384|
00015a  a251              ADR      r2,|L20.672|
00015c  a140              ADR      r1,|L20.608|
00015e  2005              MOVS     r0,#5
000160  f7fffffe          BL       _Anki_Log
000164  f8c4b000          STR      r11,[r4,#0]
000168  f8c4b004          STR      r11,[r4,#4]
00016c  f8c4b008          STR      r11,[r4,#8]
000170  f8c4a010          STR      r10,[r4,#0x10]
                  |L20.372|
000174  b005              ADD      sp,sp,#0x14
000176  4620              MOV      r0,r4
000178  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L20.380|
                          DCD      _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L20.384|
000180  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
000184  6f726574
000188  6563685c
00018c  636f6d6d
000190  6f6e5c69
000194  6e636c75
000198  64655c61
00019c  6e6b692f
0001a0  636f6d6d
0001a4  6f6e2f72
0001a8  6f626f74
0001ac  2f617272
0001b0  617932  
0001b3  642e6800          DCB      "d.h",0
0001b7  00                DCB      0
                  |L20.440|
0001b8  496e7661          DCB      "Invalid size",0
0001bc  6c696420
0001c0  73697a65
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L20.456|
0001c8  41727261          DCB      "Array<Type>::Array",0
0001cc  793c5479
0001d0  70653e3a
0001d4  3a417272
0001d8  617900  
0001db  00                DCB      0
                  |L20.476|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
                  |L20.480|
0001e0  41727261          DCB      "Array<Type>::AllocateBufferFromMemoryStack",0
0001e4  793c5479
0001e8  70653e3a
0001ec  3a416c6c
0001f0  6f636174
0001f4  65427566
0001f8  66657246
0001fc  726f6d4d
000200  656d6f72
000204  79537461
000208  636b00  
00020b  00                DCB      0
                  |L20.524|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
                  |L20.528|
000210  4e656761          DCB      "Negative dimension",0
000214  74697665
000218  2064696d
00021c  656e7369
000220  6f6e00  
000223  00                DCB      0
                  |L20.548|
000224  41727261          DCB      "Array<Type>::InitializeBuffer",0
000228  793c5479
00022c  70653e3a
000230  3a496e69
000234  7469616c
000238  697a6542
00023c  75666665
000240  7200    
000242  00                DCB      0
000243  00                DCB      0
                  |L20.580|
000244  696e7075          DCB      "input data buffer is NULL",0
000248  74206461
00024c  74612062
000250  75666665
000254  72206973
000258  204e554c
00025c  4c00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L20.608|
000260  416e6b69          DCB      "Anki.Array2d.initialize",0
000264  2e417272
000268  61793264
00026c  2e696e69
000270  7469616c
000274  697a6500
                  |L20.632|
000278  46696c6c          DCB      "Fill patterns not supported for Array",0
00027c  20706174
000280  7465726e
000284  73206e6f
000288  74207375
00028c  70706f72
000290  74656420
000294  666f7220
000298  41727261
00029c  7900    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L20.672|
0002a0  496e7075          DCB      "Input data buffer is not large enough. %d bytes is requ"
0002a4  74206461
0002a8  74612062
0002ac  75666665
0002b0  72206973
0002b4  206e6f74
0002b8  206c6172
0002bc  67652065
0002c0  6e6f7567
0002c4  682e2025
0002c8  64206279
0002cc  74657320
0002d0  69732072
0002d4  657175  
0002d7  69726564          DCB      "ired.",0
0002db  2e00    
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0

                          AREA ||area_number.21||, COMGROUP=_ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5ArrayIfE3SetERKS2_||, COMGROUP=_ZN4Anki8Embedded5ArrayIfE3SetERKS2_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5ArrayIfE3SetERKS2_ PROC ; Anki::Embedded::Array<float>::Set(const Anki::Embedded::Array<float>&)
;;;654    
;;;655        template<typename Type> s32 Array<Type>::Set(const Array<Type> &in)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;656        {
000004  460d              MOV      r5,r1
000006  4604              MOV      r4,r0
000008  b083              SUB      sp,sp,#0xc
00000a  2100              MOVS     r1,#0
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000012  4607              MOV      r7,r0
000014  2101              MOVS     r1,#1
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00001c  4606              MOV      r6,r0
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000024  f8df80a4          LDR      r8,|L27.204|
000028  f04f0900          MOV      r9,#0
00002c  2800              CMP      r0,#0
;;;657          return this->SetCast<Type>(in);
00002e  d018              BEQ      |L27.98|
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
000036  2800              CMP      r0,#0
000038  d013              BEQ      |L27.98|
00003a  6820              LDR      r0,[r4,#0]
00003c  42b8              CMP      r0,r7
00003e  bf04              ITT      EQ
000040  6861              LDREQ    r1,[r4,#4]
000042  42b1              CMPEQ    r1,r6
000044  d01b              BEQ      |L27.126|
000046  f44f7027          MOV      r0,#0x29c
00004a  e9cd8000          STRD     r8,r0,[sp,#0]
00004e  a320              ADR      r3,|L27.208|
000050  a22d              ADR      r2,|L27.264|
000052  a133              ADR      r1,|L27.288|
000054  2005              MOVS     r0,#5
000056  f7fffffe          BL       _Anki_Log
;;;658        }
00005a  b003              ADD      sp,sp,#0xc
00005c  4648              MOV      r0,r9
00005e  e8bd83f0          POP      {r4-r9,pc}
                  |L27.98|
000062  f2402099          MOV      r0,#0x299
000066  e9cd8000          STRD     r8,r0,[sp,#0]
00006a  a319              ADR      r3,|L27.208|
00006c  a231              ADR      r2,|L27.308|
00006e  a12c              ADR      r1,|L27.288|
000070  2005              MOVS     r0,#5
000072  f7fffffe          BL       _Anki_Log
000076  b003              ADD      sp,sp,#0xc
000078  4648              MOV      r0,r9
00007a  e8bd83f0          POP      {r4-r9,pc}
                  |L27.126|
00007e  2100              MOVS     r1,#0
000080  2800              CMP      r0,#0
000082  dd1e              BLE      |L27.194|
                  |L27.132|
000084  68aa              LDR      r2,[r5,#8]
000086  6928              LDR      r0,[r5,#0x10]
000088  68a3              LDR      r3,[r4,#8]
00008a  fb010202          MLA      r2,r1,r2,r0
00008e  6920              LDR      r0,[r4,#0x10]
000090  f8d4c004          LDR      r12,[r4,#4]
000094  fb010303          MLA      r3,r1,r3,r0
000098  2000              MOVS     r0,#0
00009a  f1bc0f00          CMP      r12,#0
00009e  dd0c              BLE      |L27.186|
                  |L27.160|
0000a0  eb020c80          ADD      r12,r2,r0,LSL #2
0000a4  ed9c0a00          VLDR     s0,[r12,#0]
0000a8  eb030c80          ADD      r12,r3,r0,LSL #2
0000ac  1c40              ADDS     r0,r0,#1
0000ae  ed8c0a00          VSTR     s0,[r12,#0]
0000b2  f8d4c004          LDR      r12,[r4,#4]
0000b6  4584              CMP      r12,r0
0000b8  dcf2              BGT      |L27.160|
                  |L27.186|
0000ba  6820              LDR      r0,[r4,#0]
0000bc  1c49              ADDS     r1,r1,#1
0000be  4288              CMP      r0,r1
0000c0  dce0              BGT      |L27.132|
                  |L27.194|
0000c2  6861              LDR      r1,[r4,#4]
0000c4  b003              ADD      sp,sp,#0xc
0000c6  4348              MULS     r0,r1,r0
0000c8  e8bd83f0          POP      {r4-r9,pc}
;;;659    
                          ENDP

                  |L27.204|
                          DCD      _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
                  |L27.208|
0000d0  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/array2"
0000d4  6f726574
0000d8  6563685c
0000dc  636f6d6d
0000e0  6f6e5c69
0000e4  6e636c75
0000e8  64655c61
0000ec  6e6b692f
0000f0  636f6d6d
0000f4  6f6e2f72
0000f8  6f626f74
0000fc  2f617272
000100  617932  
000103  642e6800          DCB      "d.h",0
000107  00                DCB      0
                  |L27.264|
000108  41727261          DCB      "Array sizes don't match",0
00010c  79207369
000110  7a657320
000114  646f6e27
000118  74206d61
00011c  74636800
                  |L27.288|
000120  41727261          DCB      "Array<Type>::Set",0
000124  793c5479
000128  70653e3a
00012c  3a536574
000130  00      
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
                  |L27.308|
000134  496e7661          DCB      "Invalid objects",0
000138  6c696420
00013c  6f626a65
000140  63747300

                          AREA ||area_number.28||, COMGROUP=_ZN4Anki8Embedded5ArrayIfE3SetERKS2_, LINKORDER=||t._ZN4Anki8Embedded5ArrayIfE3SetERKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5ArrayIfE3SetERKS2_||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded5PointIfEC1Ev||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded5PointIfEC2Ev                  ; Alternate entry point ; Anki::Embedded::Point<float>::Point__sub_object()
                  _ZN4Anki8Embedded5PointIfEC1Ev PROC ; Anki::Embedded::Point<float>::Point()
;;;28     #endif
;;;29         template<typename Type> Point<Type>::Point()
;;;30           : x(static_cast<Type>(0)), y(static_cast<Type>(0))
;;;31         {
;;;32         }
;;;33     
000000  ed9f0a03          VLDR     s0,|L34.16|
000004  ed800a00          VSTR     s0,[r0,#0]
000008  ed800a01          VSTR     s0,[r0,#4]
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L34.16|
000010  00000000          DCFS     0x00000000 ; 0

                          AREA ||area_number.35||, COMGROUP=_ZN4Anki8Embedded5PointIfEC1Ev, LINKORDER=||t._ZN4Anki8Embedded5PointIfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded5PointIfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5PointIfE6LengthEv||, COMGROUP=_ZNK4Anki8Embedded5PointIfE6LengthEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5PointIfE6LengthEv PROC ; Anki::Embedded::Point<float>::Length() const
;;;132    
;;;133        template<typename Type> f32 Point<Type>::Length() const
000000  b510              PUSH     {r4,lr}
;;;134        {
;;;135          return (f32)sqrt((f32)((this->x*this->x) + (this->y*this->y)));
000002  ed900a00          VLDR     s0,[r0,#0]
000006  edd00a01          VLDR     s1,[r0,#4]
00000a  ee200a00          VMUL.F32 s0,s0,s0
00000e  ee000aa0          VMLA.F32 s0,s1,s1
000012  eef10ac0          VSQRT.F32 s1,s0
000016  eef40a60          VCMP.F32 s1,s1
00001a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001e  d003              BEQ      |L41.40|
000020  f7fffffe          BL       __hardfp_sqrtf
000024  eef00a40          VMOV.F32 s1,s0                 ;134
                  |L41.40|
000028  eeb00a60          VMOV.F32 s0,s1                 ;134
;;;136        }
00002c  bd10              POP      {r4,pc}
;;;137    
                          ENDP


                          AREA ||area_number.42||, COMGROUP=_ZNK4Anki8Embedded5PointIfE6LengthEv, LINKORDER=||t._ZNK4Anki8Embedded5PointIfE6LengthEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5PointIfE6LengthEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE7IsValidEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded5ArrayIfE7IsValidEv PROC ; Anki::Embedded::Array<float>::IsValid() const
;;;590    
;;;591        template<typename Type> bool Array<Type>::IsValid() const
000000  6901              LDR      r1,[r0,#0x10]
;;;592        {
000002  b131              CBZ      r1,|L48.18|
;;;593          if(this->data == NULL) {
;;;594            return false;
;;;595          }
;;;596    
;;;597          if(size[0] < 0 || size[1] < 0) {
000004  6801              LDR      r1,[r0,#0]
000006  2900              CMP      r1,#0
000008  bfa1              ITTTT    GE
00000a  6840              LDRGE    r0,[r0,#4]
00000c  2800              CMPGE    r0,#0
;;;598            return false;
;;;599          }
;;;600    
;;;601          return true;
00000e  2001              MOVGE    r0,#1
;;;602        }
000010  4770              BXGE     lr
                  |L48.18|
000012  2000              MOVS     r0,#0                 ;598
000014  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||area_number.49||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE7IsValidEv, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv||
                          DCD      0x00000001

                          AREA ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, CODE, READONLY, ALIGN=2

                  _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi PROC ; Anki::Embedded::Array<float>::get_size(int) const
;;;736    
;;;737        template<typename Type> s32 Array<Type>::get_size(s32 dimension) const
000000  b500              PUSH     {lr}
;;;738        {
000002  b083              SUB      sp,sp,#0xc
;;;739          AnkiConditionalErrorAndReturnValue(dimension >= 0,
000004  2900              CMP      r1,#0
000006  da0f              BGE      |L55.40|
000008  f24021e3          MOV      r1,#0x2e3
00000c  480a              LDR      r0,|L55.56|
00000e  4b0b              LDR      r3,|L55.60|
000010  e9cd0100          STRD     r0,r1,[sp,#0]
000014  f1a30214          SUB      r2,r3,#0x14
000018  f1a20118          SUB      r1,r2,#0x18
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       _Anki_Log
;;;740            0, "Array<Type>::get_size", "Negative dimension");
;;;741    
;;;742          if(dimension > 1 || dimension < 0)
;;;743            return 1;
;;;744    
;;;745          return size[dimension];
;;;746        }
000022  b003              ADD      sp,sp,#0xc
000024  2000              MOVS     r0,#0                 ;739
000026  bd00              POP      {pc}
                  |L55.40|
000028  2902              CMP      r1,#2                 ;742
00002a  bf2c              ITE      CS                    ;743
00002c  2001              MOVCS    r0,#1                 ;743
00002e  f8500021          LDRCC    r0,[r0,r1,LSL #2]     ;745
000032  b003              ADD      sp,sp,#0xc
000034  bd00              POP      {pc}
;;;747    
                          ENDP

000036  0000              DCW      0x0000
                  |L55.56|
                          DCD      _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
                  |L55.60|
                          DCD      ||.constdata||+0x1f8

                          AREA ||area_number.56||, COMGROUP=_ZNK4Anki8Embedded5ArrayIfE8get_sizeEi, LINKORDER=||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE||, COMGROUP=_ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded15ConstArraySliceIfEC2ERKNS0_5ArrayIfEE                  ; Alternate entry point ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice__sub_object(const Anki::Embedded::Array<float>&)
                  _ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE PROC ; Anki::Embedded::ConstArraySlice<float>::ConstArraySlice(const Anki::Embedded::Array<float>&)
;;;26     
;;;27         template<typename Type> ConstArraySlice<Type>::ConstArraySlice(const Array<Type> &array)
;;;28           : ySlice(LinearSequence<s32>(0,array.get_size(0)-1)), xSlice(LinearSequence<s32>(0,array.get_size(1)-1)), array(array)
;;;29         {
;;;30           if(array.get_numElements() == 0) {
;;;31             this->constArrayData = NULL;
;;;32           } else {
;;;33             this->constArrayData = array.Pointer(0,0);
;;;34           }
;;;35         }
;;;36     
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
00000e  1e42              SUBS     r2,r0,#1
000010  2100              MOVS     r1,#0
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
000018  4605              MOV      r5,r0
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE8get_sizeEi ; Anki::Embedded::Array<float>::get_size(int) const
000022  1e42              SUBS     r2,r0,#1
000024  2100              MOVS     r1,#0
000026  f105000c          ADD      r0,r5,#0xc
00002a  f7fffffe          BL       _ZN4Anki8Embedded14LinearSequenceIiEC1Eii ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
00002e  e894102e          LDM      r4,{r1-r3,r5,r12}
000032  380c              SUBS     r0,r0,#0xc
000034  f1000618          ADD      r6,r0,#0x18
000038  e8a6102e          STM      r6!,{r1-r3,r5,r12}
00003c  6821              LDR      r1,[r4,#0]
00003e  2900              CMP      r1,#0
000040  bfc4              ITT      GT
000042  6862              LDRGT    r2,[r4,#4]
000044  2a00              CMPGT    r2,#0
000046  dd08              BLE      |L62.90|
000048  4351              MULS     r1,r2,r1
00004a  b131              CBZ      r1,|L62.90|
00004c  68a3              LDR      r3,[r4,#8]
00004e  6922              LDR      r2,[r4,#0x10]
000050  2100              MOVS     r1,#0
000052  fb012103          MLA      r1,r1,r3,r2
                  |L62.86|
000056  62c1              STR      r1,[r0,#0x2c]
000058  bd70              POP      {r4-r6,pc}
                  |L62.90|
00005a  2100              MOVS     r1,#0
00005c  e7fb              B        |L62.86|
                          ENDP


                          AREA ||area_number.63||, COMGROUP=_ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE, LINKORDER=||t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15ConstArraySliceIfEC1ERKNS0_5ArrayIfEE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE PROC ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotDivide<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)
;;;1884   
;;;1885           template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const InType value2, ArraySlice<OutType> out)
000000  b40f              PUSH     {r0-r3}
;;;1886           {
000002  ed2d0b02          VPUSH    {d0}
000006  b5f0              PUSH     {r4-r7,lr}
000008  4606              MOV      r6,r0
00000a  ed2d8b02          VPUSH    {d8}
00000e  b099              SUB      sp,sp,#0x64
000010  f1000418          ADD      r4,r0,#0x18
000014  eeb08a40          VMOV.F32 s16,s0
000018  ad29              ADD      r5,sp,#0xa4
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
;;;1887             const Array<InType> &in1Array = in1.get_array();
;;;1888             Array<OutType> &out1Array = out.get_array();
;;;1889   
;;;1890             AnkiConditionalErrorAndReturnValue(AreValid(in1Array, out1Array),
000020  4f96              LDR      r7,|L69.636|
000022  2800              CMP      r0,#0
000024  d043              BEQ      |L69.174|
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       _ZNK4Anki8Embedded5ArrayIfE7IsValidEv ; Anki::Embedded::Array<float>::IsValid() const
00002c  2800              CMP      r0,#0
00002e  d03e              BEQ      |L69.174|
000030  f8961030          LDRB     r1,[r6,#0x30]
000034  9a23              LDR      r2,[sp,#0x8c]
000036  9207              STR      r2,[sp,#0x1c]
000038  9a26              LDR      r2,[sp,#0x98]
00003a  9208              STR      r2,[sp,#0x20]
00003c  9a27              LDR      r2,[sp,#0x9c]
00003e  920c              STR      r2,[sp,#0x30]
000040  9a28              LDR      r2,[sp,#0xa0]
000042  920d              STR      r2,[sp,#0x34]
000044  9a26              LDR      r2,[sp,#0x98]
000046  920e              STR      r2,[sp,#0x38]
000048  9a24              LDR      r2,[sp,#0x90]
00004a  920f              STR      r2,[sp,#0x3c]
00004c  9a25              LDR      r2,[sp,#0x94]
00004e  9210              STR      r2,[sp,#0x40]
000050  9a23              LDR      r2,[sp,#0x8c]
000052  f106000c          ADD      r0,r6,#0xc
000056  9211              STR      r2,[sp,#0x44]         ;1886
000058  6843              LDR      r3,[r0,#4]            ;1886
00005a  9312              STR      r3,[sp,#0x48]         ;1886
00005c  6883              LDR      r3,[r0,#8]            ;1886
00005e  9313              STR      r3,[sp,#0x4c]         ;1886
000060  6800              LDR      r0,[r0,#0]            ;1886
000062  9014              STR      r0,[sp,#0x50]         ;1886
000064  6870              LDR      r0,[r6,#4]            ;1886
000066  9015              STR      r0,[sp,#0x54]         ;1886
000068  68b0              LDR      r0,[r6,#8]            ;1886
00006a  9016              STR      r0,[sp,#0x58]         ;1886
00006c  6830              LDR      r0,[r6,#0]            ;1886
00006e  9017              STR      r0,[sp,#0x5c]         ;1886
000070  f88d1060          STRB     r1,[sp,#0x60]         ;1886
000074  980d              LDR      r0,[sp,#0x34]         ;1886
000076  9009              STR      r0,[sp,#0x24]         ;1886
000078  2200              MOVS     r2,#0                 ;1886
00007a  2001              MOVS     r0,#1                 ;1886
00007c  2900              CMP      r1,#0                 ;1886
00007e  990e              LDR      r1,[sp,#0x38]         ;1886
000080  f88d2008          STRB     r2,[sp,#8]            ;1886
000084  d025              BEQ      |L69.210|
000086  9b17              LDR      r3,[sp,#0x5c]         ;1886
000088  4299              CMP      r1,r3                 ;1886
00008a  d135              BNE      |L69.248|
00008c  9b14              LDR      r3,[sp,#0x50]         ;1886
00008e  9911              LDR      r1,[sp,#0x44]         ;1886
000090  4299              CMP      r1,r3                 ;1886
000092  d131              BNE      |L69.248|
000094  f88d0008          STRB     r0,[sp,#8]            ;1886
000098  9812              LDR      r0,[sp,#0x48]         ;1886
00009a  9006              STR      r0,[sp,#0x18]         ;1886
00009c  980f              LDR      r0,[sp,#0x3c]         ;1886
00009e  f88d2009          STRB     r2,[sp,#9]            ;1886
0000a2  9003              STR      r0,[sp,#0xc]          ;1886
0000a4  9816              LDR      r0,[sp,#0x58]         ;1886
0000a6  920a              STR      r2,[sp,#0x28]         ;1886
0000a8  900b              STR      r0,[sp,#0x2c]         ;1886
0000aa  f000b895          B.W      |L69.472|
                  |L69.174|
0000ae  f2407062          MOV      r0,#0x762
0000b2  e9cd7000          STRD     r7,r0,[sp,#0]
0000b6  a372              ADR      r3,|L69.640|
0000b8  a27f              ADR      r2,|L69.696|
0000ba  a183              ADR      r1,|L69.712|
0000bc  2005              MOVS     r0,#5
0000be  f7fffffe          BL       _Anki_Log
0000c2  f04f6080          MOV      r0,#0x4000000
                  |L69.198|
;;;1891               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Invalid objects");
;;;1892   
;;;1893             ArraySliceLimits_in1_out1<s32> limits(
;;;1894               in1.get_ySlice(), in1.get_xSlice(), in1.get_isTransposed(),
;;;1895               out.get_ySlice(), out.get_xSlice());
;;;1896   
;;;1897             AnkiConditionalErrorAndReturnValue(limits.isValid,
;;;1898               RESULT_FAIL_INVALID_OBJECT, "Matrix::Elementwise::ApplyOperation", "Limits is not valid");
;;;1899   
;;;1900             if(limits.isSimpleIteration) {
;;;1901               // If the input isn't transposed, we will do the maximally efficient loop iteration
;;;1902   
;;;1903               for(s32 y=0; y<limits.ySize; y++) {
;;;1904                 const InType * const pIn1 = in1Array.Pointer(limits.in1Y, 0);
;;;1905                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1906   
;;;1907                 limits.OuterIncrementTop();
;;;1908   
;;;1909                 for(s32 x=0; x<limits.xSize; x++) {
;;;1910                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(pIn1[limits.in1X], value2);
;;;1911   
;;;1912                   limits.in1X += limits.in1_xInnerIncrement;
;;;1913                   limits.out1X += limits.out1_xInnerIncrement;
;;;1914                 }
;;;1915   
;;;1916                 limits.OuterIncrementBottom();
;;;1917               }
;;;1918             } else { // if(limits.isSimpleIteration)
;;;1919               // If either input is transposed is allowed, then we will do an inefficent loop iteration
;;;1920   
;;;1921               for(s32 y=0; y<limits.ySize; y++) {
;;;1922                 OutType * const pOut1 = out1Array.Pointer(limits.out1Y, 0);
;;;1923   
;;;1924                 limits.OuterIncrementTop();
;;;1925   
;;;1926                 for(s32 x=0; x<limits.xSize; x++) {
;;;1927                   const InType valIn1 = *in1Array.Pointer(limits.in1Y, limits.in1X);
;;;1928   
;;;1929                   pOut1[limits.out1X] = Operator::BinaryElementwiseOperation(valIn1, value2);
;;;1930   
;;;1931                   limits.in1X += limits.in1_xInnerIncrement;
;;;1932                   limits.in1Y += limits.in1_yInnerIncrement;
;;;1933                   limits.out1X += limits.out1_xInnerIncrement;
;;;1934                 }
;;;1935   
;;;1936                 limits.OuterIncrementBottom();
;;;1937               }
;;;1938             } //   if(limits.isSimpleIteration)  ... else
;;;1939   
;;;1940             return RESULT_OK;
;;;1941           } // template<typename InType, typename Operator, typename OutType> Result ApplyOperation(const ConstArraySliceExpression<InType> &in1, const InType value2, ArraySlice<OutType> out)
0000c6  b019              ADD      sp,sp,#0x64
0000c8  ecbd8b02          VPOP     {d8}
0000cc  bcf0              POP      {r4-r7}
0000ce  f85dfb1c          LDR      pc,[sp],#0x1c
                  |L69.210|
0000d2  9b14              LDR      r3,[sp,#0x50]
0000d4  4299              CMP      r1,r3
0000d6  d10f              BNE      |L69.248|
0000d8  9b17              LDR      r3,[sp,#0x5c]
0000da  9911              LDR      r1,[sp,#0x44]
0000dc  4299              CMP      r1,r3
0000de  d10b              BNE      |L69.248|
0000e0  f88d0008          STRB     r0,[sp,#8]
0000e4  f88d0009          STRB     r0,[sp,#9]
0000e8  9815              LDR      r0,[sp,#0x54]
0000ea  9005              STR      r0,[sp,#0x14]
0000ec  980f              LDR      r0,[sp,#0x3c]
0000ee  9003              STR      r0,[sp,#0xc]
0000f0  9813              LDR      r0,[sp,#0x4c]
0000f2  e9cd020a          STRD     r0,r2,[sp,#0x28]
0000f6  e012              B        |L69.286|
                  |L69.248|
0000f8  f240113f          MOV      r1,#0x13f
0000fc  487b              LDR      r0,|L69.748|
0000fe  e9cd0100          STRD     r0,r1,[sp,#0]
000102  a37b              ADR      r3,|L69.752|
000104  a289              ADR      r2,|L69.812|
000106  a194              ADR      r1,|L69.856|
000108  2005              MOVS     r0,#5
00010a  f7fffffe          BL       _Anki_Log
00010e  f89d0008          LDRB     r0,[sp,#8]            ;1897
000112  2800              CMP      r0,#0                 ;1897
000114  d046              BEQ      |L69.420|
000116  f89d0009          LDRB     r0,[sp,#9]            ;1900
00011a  2800              CMP      r0,#0                 ;1900
00011c  d05c              BEQ      |L69.472|
                  |L69.286|
00011e  9807              LDR      r0,[sp,#0x1c]         ;1903
000120  2600              MOVS     r6,#0                 ;1903
000122  2800              CMP      r0,#0                 ;1903
000124  f34080a8          BLE.W    |L69.632|
                  |L69.296|
000128  9805              LDR      r0,[sp,#0x14]         ;1903
00012a  68a2              LDR      r2,[r4,#8]            ;1903
00012c  6921              LDR      r1,[r4,#0x10]         ;1903
00012e  68ab              LDR      r3,[r5,#8]            ;1903
000130  fb001102          MLA      r1,r0,r2,r1           ;1903
000134  9803              LDR      r0,[sp,#0xc]          ;1903
000136  692a              LDR      r2,[r5,#0x10]         ;1903
000138  fb002203          MLA      r2,r0,r3,r2           ;1903
00013c  f89d0009          LDRB     r0,[sp,#9]            ;1903
000140  2800              CMP      r0,#0                 ;1903
000142  bf19              ITTEE    NE                    ;1903
000144  9812              LDRNE    r0,[sp,#0x48]         ;1903
000146  9006              STRNE    r0,[sp,#0x18]         ;1903
000148  9815              LDREQ    r0,[sp,#0x54]         ;1903
00014a  9005              STREQ    r0,[sp,#0x14]         ;1903
00014c  980c              LDR      r0,[sp,#0x30]         ;1903
00014e  9004              STR      r0,[sp,#0x10]         ;1909
000150  9b08              LDR      r3,[sp,#0x20]         ;1909
000152  2000              MOVS     r0,#0                 ;1909
000154  2b00              CMP      r3,#0                 ;1909
000156  dd19              BLE      |L69.396|
                  |L69.344|
000158  9b06              LDR      r3,[sp,#0x18]         ;1910
00015a  1c40              ADDS     r0,r0,#1              ;1909
00015c  eb010383          ADD      r3,r1,r3,LSL #2       ;1910
000160  ed930a00          VLDR     s0,[r3,#0]            ;1910
000164  9b04              LDR      r3,[sp,#0x10]         ;1910
000166  eec00a08          VDIV.F32 s1,s0,s16             ;1910
00016a  eb020383          ADD      r3,r2,r3,LSL #2       ;1910
00016e  edc30a00          VSTR     s1,[r3,#0]            ;1910
000172  f8ddc028          LDR      r12,[sp,#0x28]        ;1912
000176  9b06              LDR      r3,[sp,#0x18]         ;1912
000178  4463              ADD      r3,r3,r12             ;1912
00017a  9306              STR      r3,[sp,#0x18]         ;1913
00017c  f8ddc024          LDR      r12,[sp,#0x24]        ;1913
000180  9b04              LDR      r3,[sp,#0x10]         ;1913
000182  4463              ADD      r3,r3,r12             ;1913
000184  9304              STR      r3,[sp,#0x10]         ;1909
000186  9b08              LDR      r3,[sp,#0x20]         ;1909
000188  4283              CMP      r3,r0                 ;1909
00018a  dce5              BGT      |L69.344|
                  |L69.396|
00018c  f89d0009          LDRB     r0,[sp,#9]            ;1909
000190  b1a8              CBZ      r0,|L69.446|
000192  9916              LDR      r1,[sp,#0x58]         ;1909
000194  9805              LDR      r0,[sp,#0x14]         ;1909
000196  4408              ADD      r0,r0,r1              ;1909
000198  9005              STR      r0,[sp,#0x14]         ;1909
00019a  9910              LDR      r1,[sp,#0x40]         ;1909
00019c  9803              LDR      r0,[sp,#0xc]          ;1909
00019e  4408              ADD      r0,r0,r1              ;1909
0001a0  9003              STR      r0,[sp,#0xc]          ;1909
0001a2  e014              B        |L69.462|
                  |L69.420|
0001a4  f2407069          MOV      r0,#0x769             ;1897
0001a8  e9cd7000          STRD     r7,r0,[sp,#0]         ;1897
0001ac  a334              ADR      r3,|L69.640|
0001ae  a271              ADR      r2,|L69.884|
0001b0  a145              ADR      r1,|L69.712|
0001b2  2005              MOVS     r0,#5                 ;1897
0001b4  f7fffffe          BL       _Anki_Log
0001b8  f04f6080          MOV      r0,#0x4000000         ;1897
0001bc  e783              B        |L69.198|
                  |L69.446|
0001be  9913              LDR      r1,[sp,#0x4c]         ;1897
0001c0  9806              LDR      r0,[sp,#0x18]         ;1897
0001c2  4408              ADD      r0,r0,r1              ;1897
0001c4  9006              STR      r0,[sp,#0x18]         ;1897
0001c6  9910              LDR      r1,[sp,#0x40]         ;1897
0001c8  9803              LDR      r0,[sp,#0xc]          ;1897
0001ca  4408              ADD      r0,r0,r1              ;1897
0001cc  9003              STR      r0,[sp,#0xc]          ;1897
                  |L69.462|
0001ce  9807              LDR      r0,[sp,#0x1c]         ;1903
0001d0  1c76              ADDS     r6,r6,#1              ;1903
0001d2  42b0              CMP      r0,r6                 ;1903
0001d4  dca8              BGT      |L69.296|
0001d6  e04f              B        |L69.632|
                  |L69.472|
0001d8  9807              LDR      r0,[sp,#0x1c]         ;1921
0001da  2300              MOVS     r3,#0                 ;1921
0001dc  2800              CMP      r0,#0                 ;1921
0001de  dd4b              BLE      |L69.632|
                  |L69.480|
0001e0  9803              LDR      r0,[sp,#0xc]          ;1921
0001e2  68aa              LDR      r2,[r5,#8]            ;1921
0001e4  6929              LDR      r1,[r5,#0x10]         ;1921
0001e6  fb001c02          MLA      r12,r0,r2,r1          ;1921
0001ea  f89d0009          LDRB     r0,[sp,#9]            ;1921
0001ee  2800              CMP      r0,#0                 ;1921
0001f0  bf19              ITTEE    NE                    ;1921
0001f2  9812              LDRNE    r0,[sp,#0x48]         ;1921
0001f4  9006              STRNE    r0,[sp,#0x18]         ;1921
0001f6  9815              LDREQ    r0,[sp,#0x54]         ;1921
0001f8  9005              STREQ    r0,[sp,#0x14]         ;1921
0001fa  980c              LDR      r0,[sp,#0x30]         ;1921
0001fc  9004              STR      r0,[sp,#0x10]         ;1926
0001fe  9908              LDR      r1,[sp,#0x20]         ;1926
000200  2000              MOVS     r0,#0                 ;1926
000202  2900              CMP      r1,#0                 ;1926
000204  dd20              BLE      |L69.584|
                  |L69.518|
000206  e9dd2105          LDRD     r2,r1,[sp,#0x14]      ;1926
00020a  68a7              LDR      r7,[r4,#8]            ;1926
00020c  6926              LDR      r6,[r4,#0x10]         ;1926
00020e  1c40              ADDS     r0,r0,#1              ;1926
000210  fb026207          MLA      r2,r2,r7,r6           ;1926
000214  eb020181          ADD      r1,r2,r1,LSL #2       ;1926
000218  ed910a00          VLDR     s0,[r1,#0]            ;1927
00021c  9904              LDR      r1,[sp,#0x10]         ;1929
00021e  eec00a08          VDIV.F32 s1,s0,s16             ;1929
000222  eb0c0181          ADD      r1,r12,r1,LSL #2      ;1929
000226  edc10a00          VSTR     s1,[r1,#0]            ;1929
00022a  9a0a              LDR      r2,[sp,#0x28]         ;1931
00022c  9906              LDR      r1,[sp,#0x18]         ;1931
00022e  4411              ADD      r1,r1,r2              ;1931
000230  9106              STR      r1,[sp,#0x18]         ;1932
000232  9a0b              LDR      r2,[sp,#0x2c]         ;1932
000234  9905              LDR      r1,[sp,#0x14]         ;1932
000236  4411              ADD      r1,r1,r2              ;1932
000238  9105              STR      r1,[sp,#0x14]         ;1933
00023a  9a09              LDR      r2,[sp,#0x24]         ;1933
00023c  9904              LDR      r1,[sp,#0x10]         ;1933
00023e  4411              ADD      r1,r1,r2              ;1933
000240  9104              STR      r1,[sp,#0x10]         ;1926
000242  9908              LDR      r1,[sp,#0x20]         ;1926
000244  4281              CMP      r1,r0                 ;1926
000246  dcde              BGT      |L69.518|
                  |L69.584|
000248  f89d0009          LDRB     r0,[sp,#9]            ;1926
00024c  b140              CBZ      r0,|L69.608|
00024e  9916              LDR      r1,[sp,#0x58]         ;1926
000250  9805              LDR      r0,[sp,#0x14]         ;1926
000252  4408              ADD      r0,r0,r1              ;1926
000254  9005              STR      r0,[sp,#0x14]         ;1926
000256  9910              LDR      r1,[sp,#0x40]         ;1926
000258  9803              LDR      r0,[sp,#0xc]          ;1926
00025a  4408              ADD      r0,r0,r1              ;1926
00025c  9003              STR      r0,[sp,#0xc]          ;1926
00025e  e007              B        |L69.624|
                  |L69.608|
000260  9913              LDR      r1,[sp,#0x4c]         ;1926
000262  9806              LDR      r0,[sp,#0x18]         ;1926
000264  4408              ADD      r0,r0,r1              ;1926
000266  9006              STR      r0,[sp,#0x18]         ;1926
000268  9910              LDR      r1,[sp,#0x40]         ;1926
00026a  9803              LDR      r0,[sp,#0xc]          ;1926
00026c  4408              ADD      r0,r0,r1              ;1926
00026e  9003              STR      r0,[sp,#0xc]          ;1926
                  |L69.624|
000270  9807              LDR      r0,[sp,#0x1c]         ;1921
000272  1c5b              ADDS     r3,r3,#1              ;1921
000274  4298              CMP      r0,r3                 ;1921
000276  dcb3              BGT      |L69.480|
                  |L69.632|
000278  2000              MOVS     r0,#0                 ;1940
00027a  e724              B        |L69.198|
;;;1942   
                          ENDP

                  |L69.636|
                          DCD      _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotDivide<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
                  |L69.640|
000280  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/matrix"
000284  6f726574
000288  6563685c
00028c  636f6d6d
000290  6f6e5c69
000294  6e636c75
000298  64655c61
00029c  6e6b692f
0002a0  636f6d6d
0002a4  6f6e2f72
0002a8  6f626f74
0002ac  2f6d6174
0002b0  726978  
0002b3  2e6800            DCB      ".h",0
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L69.696|
0002b8  496e7661          DCB      "Invalid objects",0
0002bc  6c696420
0002c0  6f626a65
0002c4  63747300
                  |L69.712|
0002c8  4d617472          DCB      "Matrix::Elementwise::ApplyOperation",0
0002cc  69783a3a
0002d0  456c656d
0002d4  656e7477
0002d8  6973653a
0002dc  3a417070
0002e0  6c794f70
0002e4  65726174
0002e8  696f6e00
                  |L69.748|
                          DCD      _ZZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)::__PRETTY_FUNCTION__
                  |L69.752|
0002f0  2e2e5c63          DCB      "..\\coretech\\common\\include\\anki/common/robot/arrayS"
0002f4  6f726574
0002f8  6563685c
0002fc  636f6d6d
000300  6f6e5c69
000304  6e636c75
000308  64655c61
00030c  6e6b692f
000310  636f6d6d
000314  6f6e2f72
000318  6f626f74
00031c  2f617272
000320  617953  
000323  6c696365          DCB      "lices.h",0
000327  732e6800
00032b  00                DCB      0
                  |L69.812|
00032c  53756273          DCB      "Subscripted assignment dimension mismatch",0
000330  63726970
000334  74656420
000338  61737369
00033c  676e6d65
000340  6e742064
000344  696d656e
000348  73696f6e
00034c  206d6973
000350  6d617463
000354  6800    
000356  00                DCB      0
000357  00                DCB      0
                  |L69.856|
000358  41727261          DCB      "ArraySliceLimits_in1_out1",0
00035c  79536c69
000360  63654c69
000364  6d697473
000368  5f696e31
00036c  5f6f7574
000370  3100    
000372  00                DCB      0
000373  00                DCB      0
                  |L69.884|
000374  4c696d69          DCB      "Limits is not valid",0
000378  74732069
00037c  73206e6f
000380  74207661
000384  6c696400

                          AREA ||area_number.70||, COMGROUP=_ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE, LINKORDER=||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.70||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EE||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIiEC2Eii                  ; Alternate entry point ; Anki::Embedded::LinearSequence<int>::LinearSequence__sub_object(int, int)
                  _ZN4Anki8Embedded14LinearSequenceIiEC1Eii PROC ; Anki::Embedded::LinearSequence<int>::LinearSequence(int, int)
;;;30     
;;;31         template<typename Type> LinearSequence<Type>::LinearSequence(const Type start, const Type end)
;;;32           : start(start), increment(1)
;;;33         {
;;;34           this->size = computeSize(this->start, this->increment, end);
;;;35         }
;;;36     
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  2301              MOVS     r3,#1
000006  b083              SUB      sp,sp,#0xc
000008  e9c41301          STRD     r1,r3,[r4,#4]
00000c  4291              CMP      r1,r2
00000e  d019              BEQ      |L76.68|
000010  2500              MOVS     r5,#0
000012  429d              CMP      r5,r3
000014  da01              BGE      |L76.26|
000016  4291              CMP      r1,r2
000018  dd01              BLE      |L76.30|
                  |L76.26|
00001a  462b              MOV      r3,r5
00001c  e012              B        |L76.68|
                  |L76.30|
00001e  1a50              SUBS     r0,r2,r1
000020  1c40              ADDS     r0,r0,#1
000022  fb90f3f3          SDIV     r3,r0,r3
000026  2b00              CMP      r3,#0
000028  da0c              BGE      |L76.68|
00002a  2185              MOVS     r1,#0x85
00002c  4807              LDR      r0,|L76.76|
00002e  4b08              LDR      r3,|L76.80|
000030  e9cd0100          STRD     r0,r1,[sp,#0]
000034  f1a30218          SUB      r2,r3,#0x18
000038  f1a20124          SUB      r1,r2,#0x24
00003c  2005              MOVS     r0,#5
00003e  f7fffffe          BL       _Anki_Log
000042  462b              MOV      r3,r5
                  |L76.68|
000044  6023              STR      r3,[r4,#0]
000046  b003              ADD      sp,sp,#0xc
000048  4620              MOV      r0,r4
00004a  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L76.76|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L76.80|
                          DCD      ||.constdata||+0x190

                          AREA ||area_number.77||, COMGROUP=_ZN4Anki8Embedded14LinearSequenceIiEC1Eii, LINKORDER=||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.77||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii||
                          DCD      0x00000001

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded25ArraySliceLimits_in1_out1IiEC1ERKNS0_14LinearSequenceIiEES6_bS6_S6_E19__PRETTY_FUNCTION__ ; Anki::Embedded::ArraySliceLimits_in1_out1<int>::ArraySliceLimits_in1_out1(const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&, bool, const Anki::Embedded::LinearSequence<int>&, const Anki::Embedded::LinearSequence<int>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  79536c69          DCB      0x79,0x53,0x6c,0x69
000018  63654c69          DCB      0x63,0x65,0x4c,0x69
00001c  6d697473          DCB      0x6d,0x69,0x74,0x73
000020  5f696e31          DCB      0x5f,0x69,0x6e,0x31
000024  5f6f7574          DCB      0x5f,0x6f,0x75,0x74
000028  313c5479          DCB      0x31,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a417272          DCB      0x3a,0x41,0x72,0x72
000034  6179536c          DCB      0x61,0x79,0x53,0x6c
000038  6963654c          DCB      0x69,0x63,0x65,0x4c
00003c  696d6974          DCB      0x69,0x6d,0x69,0x74
000040  735f696e          DCB      0x73,0x5f,0x69,0x6e
000044  315f6f75          DCB      0x31,0x5f,0x6f,0x75
000048  74312863          DCB      0x74,0x31,0x28,0x63
00004c  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000050  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000054  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000058  6d626564          DCB      0x6d,0x62,0x65,0x64
00005c  6465643a          DCB      0x64,0x65,0x64,0x3a
000060  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
000064  65617253          DCB      0x65,0x61,0x72,0x53
000068  65717565          DCB      0x65,0x71,0x75,0x65
00006c  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000070  54797065          DCB      0x54,0x79,0x70,0x65
000074  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000078  20636f6e          DCB      0x20,0x63,0x6f,0x6e
00007c  73742041          DCB      0x73,0x74,0x20,0x41
000080  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000084  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000088  65646465          DCB      0x65,0x64,0x64,0x65
00008c  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
000090  696e6561          DCB      0x69,0x6e,0x65,0x61
000094  72536571          DCB      0x72,0x53,0x65,0x71
000098  75656e63          DCB      0x75,0x65,0x6e,0x63
00009c  653c5479          DCB      0x65,0x3c,0x54,0x79
0000a0  70653e20          DCB      0x70,0x65,0x3e,0x20
0000a4  262c2062          DCB      0x26,0x2c,0x20,0x62
0000a8  6f6f6c2c          DCB      0x6f,0x6f,0x6c,0x2c
0000ac  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0000b0  73742041          DCB      0x73,0x74,0x20,0x41
0000b4  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
0000b8  3a456d62          DCB      0x3a,0x45,0x6d,0x62
0000bc  65646465          DCB      0x65,0x64,0x64,0x65
0000c0  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
0000c4  696e6561          DCB      0x69,0x6e,0x65,0x61
0000c8  72536571          DCB      0x72,0x53,0x65,0x71
0000cc  75656e63          DCB      0x75,0x65,0x6e,0x63
0000d0  653c5479          DCB      0x65,0x3c,0x54,0x79
0000d4  70653e20          DCB      0x70,0x65,0x3e,0x20
0000d8  262c2063          DCB      0x26,0x2c,0x20,0x63
0000dc  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
0000e0  20416e6b          DCB      0x20,0x41,0x6e,0x6b
0000e4  693a3a45          DCB      0x69,0x3a,0x3a,0x45
0000e8  6d626564          DCB      0x6d,0x62,0x65,0x64
0000ec  6465643a          DCB      0x64,0x65,0x64,0x3a
0000f0  3a4c696e          DCB      0x3a,0x4c,0x69,0x6e
0000f4  65617253          DCB      0x65,0x61,0x72,0x53
0000f8  65717565          DCB      0x65,0x71,0x75,0x65
0000fc  6e63653c          DCB      0x6e,0x63,0x65,0x3c
000100  54797065          DCB      0x54,0x79,0x70,0x65
000104  3e202629          DCB      0x3e,0x20,0x26,0x29
000108  205b7769          DCB      0x20,0x5b,0x77,0x69
00010c  74682054          DCB      0x74,0x68,0x20,0x54
000110  79706520          DCB      0x79,0x70,0x65,0x20
000114  3d207369          DCB      0x3d,0x20,0x73,0x69
000118  676e6564          DCB      0x67,0x6e,0x65,0x64
00011c  20696e74          DCB      0x20,0x69,0x6e,0x74
000120  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000008  62656464          DCB      0x62,0x65,0x64,0x64
00000c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000010  41727261          DCB      0x41,0x72,0x72,0x61
000014  793c5479          DCB      0x79,0x3c,0x54,0x79
000018  70653e3a          DCB      0x70,0x65,0x3e,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61792873          DCB      0x61,0x79,0x28,0x73
000024  69676e65          DCB      0x69,0x67,0x6e,0x65
000028  6420696e          DCB      0x64,0x20,0x69,0x6e
00002c  742c2073          DCB      0x74,0x2c,0x20,0x73
000030  69676e65          DCB      0x69,0x67,0x6e,0x65
000034  6420696e          DCB      0x64,0x20,0x69,0x6e
000038  742c2041          DCB      0x74,0x2c,0x20,0x41
00003c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000040  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000044  65646465          DCB      0x65,0x64,0x64,0x65
000048  643a3a4d          DCB      0x64,0x3a,0x3a,0x4d
00004c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000050  79537461          DCB      0x79,0x53,0x74,0x61
000054  636b2026          DCB      0x63,0x6b,0x20,0x26
000058  2c20416e          DCB      0x2c,0x20,0x41,0x6e
00005c  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000060  456d6265          DCB      0x45,0x6d,0x62,0x65
000064  64646564          DCB      0x64,0x64,0x65,0x64
000068  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
00006c  6167733a          DCB      0x61,0x67,0x73,0x3a
000070  3a427566          DCB      0x3a,0x42,0x75,0x66
000074  66657229          DCB      0x66,0x65,0x72,0x29
000078  205b7769          DCB      0x20,0x5b,0x77,0x69
00007c  74682054          DCB      0x74,0x68,0x20,0x54
000080  79706520          DCB      0x79,0x70,0x65,0x20
000084  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000088  6f61745d          DCB      0x6f,0x61,0x74,0x5d
00008c  00                DCB      0x00

                          AREA ||.constdata__ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZNK4Anki8Embedded5ArrayIfE8get_sizeEiE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::get_size(int) const::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  6765745f          DCB      0x67,0x65,0x74,0x5f
00002c  73697a65          DCB      0x73,0x69,0x7a,0x65
000030  28736967          DCB      0x28,0x73,0x69,0x67
000034  6e656420          DCB      0x6e,0x65,0x64,0x20
000038  696e7429          DCB      0x69,0x6e,0x74,0x29
00003c  20636f6e          DCB      0x20,0x63,0x6f,0x6e
000040  7374205b          DCB      0x73,0x74,0x20,0x5b
000044  77697468          DCB      0x77,0x69,0x74,0x68
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  65203d20          DCB      0x65,0x20,0x3d,0x20
000050  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000054  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE29AllocateBufferFromMemoryStackEiiRNS0_11MemoryStackERiNS0_5Flags6BufferEbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::AllocateBufferFromMemoryStack(int, int, Anki::Embedded::MemoryStack&, int&, Anki::Embedded::Flags::Buffer, bool)::__PRETTY_FUNCTION__
000000  766f6964          DCB      0x76,0x6f,0x69,0x64
000004  202a416e          DCB      0x20,0x2a,0x41,0x6e
000008  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00000c  456d6265          DCB      0x45,0x6d,0x62,0x65
000010  64646564          DCB      0x64,0x64,0x65,0x64
000014  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000018  7261793c          DCB      0x72,0x61,0x79,0x3c
00001c  54797065          DCB      0x54,0x79,0x70,0x65
000020  3e3a3a41          DCB      0x3e,0x3a,0x3a,0x41
000024  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
000028  61746542          DCB      0x61,0x74,0x65,0x42
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  7246726f          DCB      0x72,0x46,0x72,0x6f
000034  6d4d656d          DCB      0x6d,0x4d,0x65,0x6d
000038  6f727953          DCB      0x6f,0x72,0x79,0x53
00003c  7461636b          DCB      0x74,0x61,0x63,0x6b
000040  28736967          DCB      0x28,0x73,0x69,0x67
000044  6e656420          DCB      0x6e,0x65,0x64,0x20
000048  696e742c          DCB      0x69,0x6e,0x74,0x2c
00004c  20736967          DCB      0x20,0x73,0x69,0x67
000050  6e656420          DCB      0x6e,0x65,0x64,0x20
000054  696e742c          DCB      0x69,0x6e,0x74,0x2c
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a4d656d          DCB      0x3a,0x4d,0x65,0x6d
00006c  6f727953          DCB      0x6f,0x72,0x79,0x53
000070  7461636b          DCB      0x74,0x61,0x63,0x6b
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  7369676e          DCB      0x73,0x69,0x67,0x6e
00007c  65642069          DCB      0x65,0x64,0x20,0x69
000080  6e742026          DCB      0x6e,0x74,0x20,0x26
000084  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000088  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00008c  456d6265          DCB      0x45,0x6d,0x62,0x65
000090  64646564          DCB      0x64,0x64,0x65,0x64
000094  3a3a466c          DCB      0x3a,0x3a,0x46,0x6c
000098  6167733a          DCB      0x61,0x67,0x73,0x3a
00009c  3a427566          DCB      0x3a,0x42,0x75,0x66
0000a0  6665722c          DCB      0x66,0x65,0x72,0x2c
0000a4  20626f6f          DCB      0x20,0x62,0x6f,0x6f
0000a8  6c29205b          DCB      0x6c,0x29,0x20,0x5b
0000ac  77697468          DCB      0x77,0x69,0x74,0x68
0000b0  20547970          DCB      0x20,0x54,0x79,0x70
0000b4  65203d20          DCB      0x65,0x20,0x3d,0x20
0000b8  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000bc  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE16InitializeBufferEiiPviNS0_5Flags6BufferEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::InitializeBuffer(int, int, void*, int, Anki::Embedded::Flags::Buffer)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a417272          DCB      0x3a,0x41,0x72,0x72
000020  61793c54          DCB      0x61,0x79,0x3c,0x54
000024  7970653e          DCB      0x79,0x70,0x65,0x3e
000028  3a3a496e          DCB      0x3a,0x3a,0x49,0x6e
00002c  69746961          DCB      0x69,0x74,0x69,0x61
000030  6c697a65          DCB      0x6c,0x69,0x7a,0x65
000034  42756666          DCB      0x42,0x75,0x66,0x66
000038  65722873          DCB      0x65,0x72,0x28,0x73
00003c  69676e65          DCB      0x69,0x67,0x6e,0x65
000040  6420696e          DCB      0x64,0x20,0x69,0x6e
000044  742c2073          DCB      0x74,0x2c,0x20,0x73
000048  69676e65          DCB      0x69,0x67,0x6e,0x65
00004c  6420696e          DCB      0x64,0x20,0x69,0x6e
000050  742c2076          DCB      0x74,0x2c,0x20,0x76
000054  6f696420          DCB      0x6f,0x69,0x64,0x20
000058  2a2c2073          DCB      0x2a,0x2c,0x20,0x73
00005c  69676e65          DCB      0x69,0x67,0x6e,0x65
000060  6420696e          DCB      0x64,0x20,0x69,0x6e
000064  742c2041          DCB      0x74,0x2c,0x20,0x41
000068  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00006c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000070  65646465          DCB      0x65,0x64,0x64,0x65
000074  643a3a46          DCB      0x64,0x3a,0x3a,0x46
000078  6c616773          DCB      0x6c,0x61,0x67,0x73
00007c  3a3a4275          DCB      0x3a,0x3a,0x42,0x75
000080  66666572          DCB      0x66,0x66,0x65,0x72
000084  29205b77          DCB      0x29,0x20,0x5b,0x77
000088  69746820          DCB      0x69,0x74,0x68,0x20
00008c  54797065          DCB      0x54,0x79,0x70,0x65
000090  203d2066          DCB      0x20,0x3d,0x20,0x66
000094  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
000098  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded5ArrayIfE7SetCastIfEEiRKNS1_IT_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Array<float>::SetCast<float>(const Anki::Embedded::Array<T1>&)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a41          DCB      0x64,0x3a,0x3a,0x41
00001c  72726179          DCB      0x72,0x72,0x61,0x79
000020  3c547970          DCB      0x3c,0x54,0x79,0x70
000024  653e3a3a          DCB      0x65,0x3e,0x3a,0x3a
000028  53657443          DCB      0x53,0x65,0x74,0x43
00002c  61737428          DCB      0x61,0x73,0x74,0x28
000030  636f6e73          DCB      0x63,0x6f,0x6e,0x73
000034  7420416e          DCB      0x74,0x20,0x41,0x6e
000038  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
00003c  456d6265          DCB      0x45,0x6d,0x62,0x65
000040  64646564          DCB      0x64,0x64,0x65,0x64
000044  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000048  7261793c          DCB      0x72,0x61,0x79,0x3c
00004c  496e5479          DCB      0x49,0x6e,0x54,0x79
000050  70653e20          DCB      0x70,0x65,0x3e,0x20
000054  2629205b          DCB      0x26,0x29,0x20,0x5b
000058  77697468          DCB      0x77,0x69,0x74,0x68
00005c  20496e54          DCB      0x20,0x49,0x6e,0x54
000060  79706520          DCB      0x79,0x70,0x65,0x20
000064  3d20666c          DCB      0x3d,0x20,0x66,0x6c
000068  6f61742c          DCB      0x6f,0x61,0x74,0x2c
00006c  20547970          DCB      0x20,0x54,0x79,0x70
000070  65203d20          DCB      0x65,0x20,0x3d,0x20
000074  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000078  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix11Elementwise14ApplyOperationIfNS2_9DotDivideIfffEEfEENS_6ResultERKNS0_25ConstArraySliceExpressionIT_EES8_NS0_10ArraySliceIT1_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Elementwise::ApplyOperation<float, Anki::Embedded::Matrix::Elementwise::DotDivide<float, float, float>, float>(const Anki::Embedded::ConstArraySliceExpression<T1>&, T1, Anki::Embedded::ArraySlice<T3>)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a456c65          DCB      0x3a,0x45,0x6c,0x65
000028  6d656e74          DCB      0x6d,0x65,0x6e,0x74
00002c  77697365          DCB      0x77,0x69,0x73,0x65
000030  3a3a4170          DCB      0x3a,0x3a,0x41,0x70
000034  706c794f          DCB      0x70,0x6c,0x79,0x4f
000038  70657261          DCB      0x70,0x65,0x72,0x61
00003c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000040  28636f6e          DCB      0x28,0x63,0x6f,0x6e
000044  73742041          DCB      0x73,0x74,0x20,0x41
000048  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
00004c  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000050  65646465          DCB      0x65,0x64,0x64,0x65
000054  643a3a43          DCB      0x64,0x3a,0x3a,0x43
000058  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00005c  41727261          DCB      0x41,0x72,0x72,0x61
000060  79536c69          DCB      0x79,0x53,0x6c,0x69
000064  63654578          DCB      0x63,0x65,0x45,0x78
000068  70726573          DCB      0x70,0x72,0x65,0x73
00006c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000070  3c547970          DCB      0x3c,0x54,0x79,0x70
000074  653e2026          DCB      0x65,0x3e,0x20,0x26
000078  2c20496e          DCB      0x2c,0x20,0x49,0x6e
00007c  54797065          DCB      0x54,0x79,0x70,0x65
000080  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000084  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000088  456d6265          DCB      0x45,0x6d,0x62,0x65
00008c  64646564          DCB      0x64,0x64,0x65,0x64
000090  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000094  72617953          DCB      0x72,0x61,0x79,0x53
000098  6c696365          DCB      0x6c,0x69,0x63,0x65
00009c  3c4f7574          DCB      0x3c,0x4f,0x75,0x74
0000a0  54797065          DCB      0x54,0x79,0x70,0x65
0000a4  3e29205b          DCB      0x3e,0x29,0x20,0x5b
0000a8  77697468          DCB      0x77,0x69,0x74,0x68
0000ac  20496e54          DCB      0x20,0x49,0x6e,0x54
0000b0  79706520          DCB      0x79,0x70,0x65,0x20
0000b4  3d20666c          DCB      0x3d,0x20,0x66,0x6c
0000b8  6f61742c          DCB      0x6f,0x61,0x74,0x2c
0000bc  204f7065          DCB      0x20,0x4f,0x70,0x65
0000c0  7261746f          DCB      0x72,0x61,0x74,0x6f
0000c4  72203d20          DCB      0x72,0x20,0x3d,0x20
0000c8  416e6b69          DCB      0x41,0x6e,0x6b,0x69
0000cc  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
0000d0  62656464          DCB      0x62,0x65,0x64,0x64
0000d4  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000d8  4d617472          DCB      0x4d,0x61,0x74,0x72
0000dc  69783a3a          DCB      0x69,0x78,0x3a,0x3a
0000e0  456c656d          DCB      0x45,0x6c,0x65,0x6d
0000e4  656e7477          DCB      0x65,0x6e,0x74,0x77
0000e8  6973653a          DCB      0x69,0x73,0x65,0x3a
0000ec  3a446f74          DCB      0x3a,0x44,0x6f,0x74
0000f0  44697669          DCB      0x44,0x69,0x76,0x69
0000f4  64653c66          DCB      0x64,0x65,0x3c,0x66
0000f8  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
0000fc  2c20666c          DCB      0x2c,0x20,0x66,0x6c
000100  6f61742c          DCB      0x6f,0x61,0x74,0x2c
000104  20666c6f          DCB      0x20,0x66,0x6c,0x6f
000108  61743e2c          DCB      0x61,0x74,0x3e,0x2c
00010c  204f7574          DCB      0x20,0x4f,0x75,0x74
000110  54797065          DCB      0x54,0x79,0x70,0x65
000114  203d2066          DCB      0x20,0x3d,0x20,0x66
000118  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00011c  5d00              DCB      0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix13MakeSymmetricINS0_5ArrayIfEEEENS_6ResultERT_bE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::MakeSymmetric<Anki::Embedded::Array<float>>(T1&, bool)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a4d616b          DCB      0x3a,0x4d,0x61,0x6b
000028  6553796d          DCB      0x65,0x53,0x79,0x6d
00002c  6d657472          DCB      0x6d,0x65,0x74,0x72
000030  69632854          DCB      0x69,0x63,0x28,0x54
000034  79706520          DCB      0x79,0x70,0x65,0x20
000038  262c2062          DCB      0x26,0x2c,0x20,0x62
00003c  6f6f6c29          DCB      0x6f,0x6f,0x6c,0x29
000040  205b7769          DCB      0x20,0x5b,0x77,0x69
000044  74682054          DCB      0x74,0x68,0x20,0x54
000048  79706520          DCB      0x79,0x70,0x65,0x20
00004c  3d20416e          DCB      0x3d,0x20,0x41,0x6e
000050  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000054  456d6265          DCB      0x45,0x6d,0x62,0x65
000058  64646564          DCB      0x64,0x64,0x65,0x64
00005c  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000060  7261793c          DCB      0x72,0x61,0x79,0x3c
000064  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000068  743e5d00          DCB      0x74,0x3e,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix29SolveLeastSquaresWithCholeskyIfEENS_6ResultERNS0_5ArrayIT_EES7_bRbE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::SolveLeastSquaresWithCholesky<float>(Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T1>&, bool, bool&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a536f6c          DCB      0x3a,0x53,0x6f,0x6c
000028  76654c65          DCB      0x76,0x65,0x4c,0x65
00002c  61737453          DCB      0x61,0x73,0x74,0x53
000030  71756172          DCB      0x71,0x75,0x61,0x72
000034  65735769          DCB      0x65,0x73,0x57,0x69
000038  74684368          DCB      0x74,0x68,0x43,0x68
00003c  6f6c6573          DCB      0x6f,0x6c,0x65,0x73
000040  6b792841          DCB      0x6b,0x79,0x28,0x41
000044  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000048  3a456d62          DCB      0x3a,0x45,0x6d,0x62
00004c  65646465          DCB      0x65,0x64,0x64,0x65
000050  643a3a41          DCB      0x64,0x3a,0x3a,0x41
000054  72726179          DCB      0x72,0x72,0x61,0x79
000058  3c547970          DCB      0x3c,0x54,0x79,0x70
00005c  653e2026          DCB      0x65,0x3e,0x20,0x26
000060  2c20416e          DCB      0x2c,0x20,0x41,0x6e
000064  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
000068  456d6265          DCB      0x45,0x6d,0x62,0x65
00006c  64646564          DCB      0x64,0x64,0x65,0x64
000070  3a3a4172          DCB      0x3a,0x3a,0x41,0x72
000074  7261793c          DCB      0x72,0x61,0x79,0x3c
000078  54797065          DCB      0x54,0x79,0x70,0x65
00007c  3e20262c          DCB      0x3e,0x20,0x26,0x2c
000080  20626f6f          DCB      0x20,0x62,0x6f,0x6f
000084  6c2c2062          DCB      0x6c,0x2c,0x20,0x62
000088  6f6f6c20          DCB      0x6f,0x6f,0x6c,0x20
00008c  2629205b          DCB      0x26,0x29,0x20,0x5b
000090  77697468          DCB      0x77,0x69,0x74,0x68
000094  20547970          DCB      0x20,0x54,0x79,0x70
000098  65203d20          DCB      0x65,0x20,0x3d,0x20
00009c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
0000a0  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EEE19__PRETTY_FUNCTION__ ; Anki::Embedded::Matrix::Multiply<float, float>(const Anki::Embedded::Array<T1>&, const Anki::Embedded::Array<T1>&, Anki::Embedded::Array<T2>&)::__PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a4d6174          DCB      0x3a,0x4d,0x61,0x74
000020  7269783a          DCB      0x72,0x69,0x78,0x3a
000024  3a4d756c          DCB      0x3a,0x4d,0x75,0x6c
000028  7469706c          DCB      0x74,0x69,0x70,0x6c
00002c  7928636f          DCB      0x79,0x28,0x63,0x6f
000030  6e737420          DCB      0x6e,0x73,0x74,0x20
000034  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000038  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
00003c  62656464          DCB      0x62,0x65,0x64,0x64
000040  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000044  41727261          DCB      0x41,0x72,0x72,0x61
000048  793c5479          DCB      0x79,0x3c,0x54,0x79
00004c  70653e20          DCB      0x70,0x65,0x3e,0x20
000050  262c2063          DCB      0x26,0x2c,0x20,0x63
000054  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
000058  20416e6b          DCB      0x20,0x41,0x6e,0x6b
00005c  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000060  6d626564          DCB      0x6d,0x62,0x65,0x64
000064  6465643a          DCB      0x64,0x65,0x64,0x3a
000068  3a417272          DCB      0x3a,0x41,0x72,0x72
00006c  61793c54          DCB      0x61,0x79,0x3c,0x54
000070  7970653e          DCB      0x79,0x70,0x65,0x3e
000074  20262c20          DCB      0x20,0x26,0x2c,0x20
000078  416e6b69          DCB      0x41,0x6e,0x6b,0x69
00007c  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000080  62656464          DCB      0x62,0x65,0x64,0x64
000084  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000088  41727261          DCB      0x41,0x72,0x72,0x61
00008c  793c4f75          DCB      0x79,0x3c,0x4f,0x75
000090  74547970          DCB      0x74,0x54,0x79,0x70
000094  653e2026          DCB      0x65,0x3e,0x20,0x26
000098  29205b77          DCB      0x29,0x20,0x5b,0x77
00009c  69746820          DCB      0x69,0x74,0x68,0x20
0000a0  496e5479          DCB      0x49,0x6e,0x54,0x79
0000a4  7065203d          DCB      0x70,0x65,0x20,0x3d
0000a8  20666c6f          DCB      0x20,0x66,0x6c,0x6f
0000ac  61742c20          DCB      0x61,0x74,0x2c,0x20
0000b0  4f757454          DCB      0x4f,0x75,0x74,0x54
0000b4  79706520          DCB      0x79,0x70,0x65,0x20
0000b8  3d20666c          DCB      0x3d,0x20,0x66,0x6c
0000bc  6f61745d          DCB      0x6f,0x61,0x74,0x5d
0000c0  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\coretech\\vision\\robot\\src\\quadRefinement.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_quadRefinement_cpp_51427c15___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___18_quadRefinement_cpp_51427c15___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_quadRefinement_cpp_51427c15___Z7__REVSHi|
#line 144
|__asm___18_quadRefinement_cpp_51427c15___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
