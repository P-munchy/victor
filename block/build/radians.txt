; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\radians.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\radians.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\radians.crf ..\coretech\common\shared\src\radians.cpp]
                          THUMB

                          AREA ||i._ZN4Anki17Radians_noRescale12makeNegativeEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki17Radians_noRescale12makeNegativeEv PROC ; Anki::Radians_noRescale::makeNegative()
;;;284    
;;;285      void Radians_noRescale::makeNegative()
000000  ed900a00          VLDR     s0,[r0,#0]
;;;286      {
;;;287        // Increase radians_ until it's negative
;;;288        while(radians_ > 0.0f) {
000004  eeb50ac0          VCMPE.F32 s0,#0.0
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;289          radians_ -= 2.0f * PI_F;
00000c  bfcc              ITE      GT
00000e  eddf0a06          VLDRGT   s1,|L1.40|
;;;290        }
;;;291      }
000012  4770              BXLE     lr
                  |L1.20|
000014  ee300a60          VSUB.F32 s0,s0,s1              ;289
000018  ed800a00          VSTR     s0,[r0,#0]            ;289
00001c  eeb50ac0          VCMPE.F32 s0,#0.0               ;288
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;288
000024  dcf6              BGT      |L1.20|
000026  4770              BX       lr
;;;292    } // namespace Anki
                          ENDP

                  |L1.40|
000028  40c90fdb          DCFS     0x40c90fdb ; 6.2831854820251465

                          AREA ||i._ZN4Anki17Radians_noRescale12makePositiveEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki17Radians_noRescale12makePositiveEv PROC ; Anki::Radians_noRescale::makePositive()
;;;276    
;;;277      void Radians_noRescale::makePositive()
000000  ed900a00          VLDR     s0,[r0,#0]
;;;278      {
;;;279        // Increase radians_ until it's positive
;;;280        while(radians_ < 0.0f) {
000004  eeb50ac0          VCMPE.F32 s0,#0.0
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;281          radians_ += 2.0f * PI_F;
00000c  bf34              ITE      CC
00000e  eddf0a06          VLDRCC   s1,|L2.40|
;;;282        }
;;;283      }
000012  4770              BXCS     lr
                  |L2.20|
000014  ee300a20          VADD.F32 s0,s0,s1              ;281
000018  ed800a00          VSTR     s0,[r0,#0]            ;281
00001c  eeb50ac0          VCMPE.F32 s0,#0.0               ;280
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;280
000024  d3f6              BCC      |L2.20|
000026  4770              BX       lr
;;;284    
                          ENDP

                  |L2.40|
000028  40c90fdb          DCFS     0x40c90fdb ; 6.2831854820251465

                          AREA ||i._ZN4Anki7Radians10setDegreesEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7Radians10setDegreesEf PROC ; Anki::Radians::setDegrees(float)
;;;217      // value to the result
;;;218      void Radians::setDegrees(float degrees)
000000  eddf0a03          VLDR     s1,|L3.16|
;;;219      {
;;;220        radians_ = DEG_TO_RAD_F32(degrees);
000004  ee200a20          VMUL.F32 s0,s0,s1
000008  ed800a00          VSTR     s0,[r0,#0]
;;;221        rescale();
00000c  f7ffbffe          B.W      _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;222      }
;;;223    
                          ENDP

                  |L3.16|
000010  3c8efa35          DCFS     0x3c8efa35 ; 0.01745329238474369

                          AREA ||i._ZN4Anki7Radians14getAbsoluteValEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki7Radians14getAbsoluteValEv PROC ; Anki::Radians::getAbsoluteVal()
;;;204      // Returns a radians object that's the absolute value of this one
;;;205      Radians Radians::getAbsoluteVal()
000000  ed910a00          VLDR     s0,[r1,#0]
;;;206      {
;;;207        return Radians(ABS(radians_));
000004  eeb50ac0          VCMPE.F32 s0,#0.0
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  bfb8              IT       LT
00000e  eeb10a40          VNEGLT.F32 s0,s0
000012  2101              MOVS     r1,#1
000014  7101              STRB     r1,[r0,#4]
000016  ed800a00          VSTR     s0,[r0,#0]
00001a  f7ffbffe          B.W      _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;208      }
;;;209    
                          ENDP


                          AREA ||i._ZN4Anki7Radians15angularDistanceERKS0_b||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7Radians15angularDistanceERKS0_b PROC ; Anki::Radians::angularDistance(const Anki::Radians&, bool)
;;;228    
;;;229      float Radians::angularDistance(const Radians& destAngle, bool clockwise) {
000000  ed910a00          VLDR     s0,[r1,#0]
;;;230        // Get absolute difference
;;;231        float diff = destAngle.ToFloat() - radians_;
000004  edd00a00          VLDR     s1,[r0,#0]
000008  ee300a60          VSUB.F32 s0,s0,s1
;;;232    
;;;233        // If clockwise then difference should be -ve, and vice versa.
;;;234        if(!clockwise && diff < 0.0f) {
;;;235          diff += 2.0f*PI_F;
00000c  eddf0a09          VLDR     s1,|L5.52|
000010  b13a              CBZ      r2,|L5.34|
;;;236        } else if(clockwise && diff > 0.0f) {
000012  eeb50ac0          VCMPE.F32 s0,#0.0
000016  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;237          diff -= 2.0f*PI_F;
00001a  bfc8              IT       GT
00001c  ee300a60          VSUBGT.F32 s0,s0,s1
;;;238        }
;;;239    
;;;240        return diff;
;;;241      }
000020  4770              BX       lr
                  |L5.34|
000022  eeb50ac0          VCMPE.F32 s0,#0.0               ;234
000026  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;234
00002a  bf38              IT       CC                    ;235
00002c  ee300a20          VADDCC.F32 s0,s0,s1              ;235
000030  4770              BX       lr
;;;242    
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
000034  40c90fdb          DCFS     0x40c90fdb ; 6.2831854820251465

                          AREA ||i._ZN4Anki7Radians16performRescalingEb||, CODE, READONLY, ALIGN=1

                  _ZN4Anki7Radians16performRescalingEb PROC ; Anki::Radians::performRescaling(bool)
;;;223    
;;;224      void Radians::performRescaling(bool doRescaling)
000000  7101              STRB     r1,[r0,#4]
;;;225      {
;;;226        doRescaling_ = doRescaling;
;;;227      }
000002  4770              BX       lr
;;;228    
                          ENDP


                          AREA ||i._ZN4Anki7Radians7rescaleEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7Radians7rescaleEv PROC ; Anki::Radians::rescale()
;;;243      // Rescales the radians value of the object to be within (-PI, PI] range.
;;;244      void Radians::rescale()
000000  b510              PUSH     {r4,lr}
;;;245      {
000002  4604              MOV      r4,r0
000004  ed2d8b02          VPUSH    {d8}
;;;246        int shiftAmt;
;;;247    
;;;248        if(!doRescaling_) {
000008  7900              LDRB     r0,[r0,#4]
00000a  2800              CMP      r0,#0                 ;245
;;;249          return;
;;;250        }
;;;251    
;;;252        // Check if already within range
;;;253        if(radians_ > -PI_F  && radians_ <= PI_F) {
;;;254          return;
;;;255        }
;;;256    
;;;257        if(ABS(radians_) < 10.0f) {
;;;258          // For small values of radians, rescale manually to avoid doing division
;;;259          while(radians_ <= -PI_F) {
;;;260            radians_ += 2.0f*PI_F;
;;;261          }
;;;262          while(radians_ > PI_F) {
;;;263            radians_ -= 2.0f*PI_F;
;;;264          }
;;;265        } else {
;;;266          // Otherwise compute and adjust at once (more expensive due to divide)
;;;267    
;;;268          // If not, compute amount to shift by.  Divide by 2*PI_F but subtract .5 since
;;;269          // we're going to be in the (-PI, PI] range.
;;;270          shiftAmt = (int)ceilf((radians_ / (2.0f * PI_F)) - 0.5f);
;;;271          radians_ -= (2.0f * PI_F * (float)shiftAmt);
;;;272        }
;;;273      }
00000c  bf04              ITT      EQ
00000e  ecbd8b02          VPOPEQ   {d8}
000012  bd10              POPEQ    {r4,pc}
000014  ed948a00          VLDR     s16,[r4,#0]           ;253
000018  4828              LDR      r0,|L7.188|
00001a  ee182a10          VMOV     r2,s16                ;253
00001e  4928              LDR      r1,|L7.192|
000020  4282              CMP      r2,r0                 ;253
000022  d206              BCS      |L7.50|
000024  ee182a10          VMOV     r2,s16                ;253
000028  428a              CMP      r2,r1                 ;253
00002a  bfdc              ITT      LE
00002c  ecbd8b02          VPOPLE   {d8}
000030  bd10              POPLE    {r4,pc}
                  |L7.50|
000032  eeb58ac0          VCMPE.F32 s16,#0.0              ;257
000036  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;257
00003a  bfac              ITE      GE                    ;257
00003c  eeb00a48          VMOVGE.F32 s0,s16                ;257
000040  eeb10a48          VNEGLT.F32 s0,s16                ;257
000044  ee102a10          VMOV     r2,s0                 ;257
000048  4b1e              LDR      r3,|L7.196|
00004a  eddf8a1f          VLDR     s17,|L7.200|
00004e  429a              CMP      r2,r3                 ;257
000050  da20              BGE      |L7.148|
000052  ee182a10          VMOV     r2,s16                ;259
000056  4282              CMP      r2,r0                 ;259
000058  d309              BCC      |L7.110|
                  |L7.90|
00005a  ed940a00          VLDR     s0,[r4,#0]            ;260
00005e  ee300a28          VADD.F32 s0,s0,s17             ;260
000062  ee102a10          VMOV     r2,s0                 ;259
000066  ed840a00          VSTR     s0,[r4,#0]            ;260
00006a  4282              CMP      r2,r0                 ;259
00006c  d2f5              BCS      |L7.90|
                  |L7.110|
00006e  6820              LDR      r0,[r4,#0]            ;262
000070  4288              CMP      r0,r1                 ;262
000072  bfdc              ITT      LE
000074  ecbd8b02          VPOPLE   {d8}
000078  bd10              POPLE    {r4,pc}
                  |L7.122|
00007a  ed940a00          VLDR     s0,[r4,#0]            ;263
00007e  ee300a68          VSUB.F32 s0,s0,s17             ;263
000082  ee100a10          VMOV     r0,s0                 ;262
000086  ed840a00          VSTR     s0,[r4,#0]            ;263
00008a  4288              CMP      r0,r1                 ;262
00008c  dcf5              BGT      |L7.122|
00008e  ecbd8b02          VPOP     {d8}
000092  bd10              POP      {r4,pc}
                  |L7.148|
000094  ee880a28          VDIV.F32 s0,s16,s17            ;270
000098  eef60a00          VMOV.F32 s1,#0.50000000        ;270
00009c  ee300a60          VSUB.F32 s0,s0,s1              ;270
0000a0  f7fffffe          BL       __hardfp_ceilf
0000a4  eebd0ac0          VCVT.S32.F32 s0,s0                 ;270
0000a8  eeb80ac0          VCVT.F32.S32 s0,s0                 ;271
0000ac  ee008a68          VMLS.F32 s16,s0,s17            ;271
0000b0  ed848a00          VSTR     s16,[r4,#0]           ;271
0000b4  ecbd8b02          VPOP     {d8}
0000b8  bd10              POP      {r4,pc}
;;;274    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L7.188|
                          DCD      0xc0490fdb
                  |L7.192|
                          DCD      0x40490fdb
                  |L7.196|
                          DCD      0x41200000
                  |L7.200|
0000c8  40c90fdb          DCFS     0x40c90fdb ; 6.2831854820251465

                          AREA ||i._ZN4Anki7RadiansC1ERKS0_||, CODE, READONLY, ALIGN=1

                  _ZN4Anki7RadiansC2ERKS0_                  ; Alternate entry point ; Anki::Radians::Radians__sub_object(const Anki::Radians&)
                  _ZN4Anki7RadiansC1ERKS0_ PROC ; Anki::Radians::Radians(const Anki::Radians&)
;;;37       // Copy constructor (duplicates another Radians object)
;;;38       Radians::Radians(const Radians& initRad)
;;;39       {
;;;40         (*this) = initRad;
;;;41       }
;;;42     
000000  ed910a00          VLDR     s0,[r1,#0]
000004  ed800a00          VSTR     s0,[r0,#0]
000008  7909              LDRB     r1,[r1,#4]
00000a  7101              STRB     r1,[r0,#4]
00000c  4770              BX       lr
                          ENDP


                          AREA ||i._ZN4Anki7RadiansC1Ef||, CODE, READONLY, ALIGN=1

                  _ZN4Anki7RadiansC2Ef                  ; Alternate entry point ; Anki::Radians::Radians__sub_object(float)
                  _ZN4Anki7RadiansC1Ef PROC ; Anki::Radians::Radians(float)
;;;30       // Constructs Radians object from input double (rescales accordingly)
;;;31       Radians::Radians(float initRad)
;;;32       {
;;;33         doRescaling_ = true;
;;;34         (*this) = initRad;
;;;35       }
;;;36     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2001              MOVS     r0,#1
000006  7120              STRB     r0,[r4,#4]
000008  4620              MOV      r0,r4
00000a  ed840a00          VSTR     s0,[r4,#0]
00000e  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
000012  4620              MOV      r0,r4
000014  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZN4Anki7RadiansC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7RadiansC2Ev                  ; Alternate entry point ; Anki::Radians::Radians__sub_object()
                  _ZN4Anki7RadiansC1Ev PROC ; Anki::Radians::Radians()
;;;23       // Default constructor -- sets radian value to zero
;;;24       Radians::Radians()
;;;25       {
;;;26         radians_ = 0.0f;
;;;27         doRescaling_ = true;
;;;28       }
;;;29     
000000  ed9f0a03          VLDR     s0,|L10.16|
000004  2101              MOVS     r1,#1
000006  ed800a00          VSTR     s0,[r0,#0]
00000a  7101              STRB     r1,[r0,#4]
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
000010  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki7RadiansaSERKS0_||, CODE, READONLY, ALIGN=1

                  _ZN4Anki7RadiansaSERKS0_ PROC ; Anki::Radians::operator =(const Anki::Radians&)
;;;192      // Assignment operators
;;;193      void Radians::operator=(const Radians& b)
000000  ed910a00          VLDR     s0,[r1,#0]
;;;194      {
;;;195        radians_ = b.radians_;
000004  ed800a00          VSTR     s0,[r0,#0]
;;;196        doRescaling_ = b.doRescaling_;
000008  7909              LDRB     r1,[r1,#4]
00000a  7101              STRB     r1,[r0,#4]
;;;197      }
00000c  4770              BX       lr
;;;198      void Radians::operator=(float b)
                          ENDP


                          AREA ||i._ZN4Anki7RadiansaSEf||, CODE, READONLY, ALIGN=1

                  _ZN4Anki7RadiansaSEf PROC ; Anki::Radians::operator =(float)
;;;197      }
;;;198      void Radians::operator=(float b)
000000  ed800a00          VSTR     s0,[r0,#0]
;;;199      {
;;;200        radians_ = b;
;;;201        rescale();
000004  f7ffbffe          B.W      _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;202      }
;;;203    
                          ENDP


                          AREA ||i._ZN4Anki7RadiansdVEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7RadiansdVEf PROC ; Anki::Radians::operator /=(float)
;;;148      }
;;;149      void Radians::operator/=(float b)
000000  b510              PUSH     {r4,lr}
000002  eeb50ac0          VCMPE.F32 s0,#0.0
;;;150      {
000006  b082              SUB      sp,sp,#8
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  4604              MOV      r4,r0
;;;151        (*this) = (*this) / b;
00000e  4668              MOV      r0,sp
000010  d009              BEQ      |L13.38|
000012  ee101a10          VMOV     r1,s0                 ;150
000016  4a11              LDR      r2,|L13.92|
000018  428a              CMP      r2,r1                 ;150
00001a  d906              BLS      |L13.42|
00001c  ee101a10          VMOV     r1,s0                 ;150
000020  4a0f              LDR      r2,|L13.96|
000022  4291              CMP      r1,r2                 ;150
000024  da01              BGE      |L13.42|
                  |L13.38|
000026  f7fffffe          BL       abort
                  |L13.42|
00002a  eddf0a0e          VLDR     s1,|L13.100|
00002e  2101              MOVS     r1,#1                 ;150
000030  edcd0a00          VSTR     s1,[sp,#0]            ;150
000034  f88d1004          STRB     r1,[sp,#4]            ;150
000038  edd40a00          VLDR     s1,[r4,#0]            ;150
00003c  ee801a80          VDIV.F32 s2,s1,s0              ;150
000040  ed8d1a00          VSTR     s2,[sp,#0]            ;150
000044  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
000048  ed9d0a00          VLDR     s0,[sp,#0]            ;150
00004c  ed840a00          VSTR     s0,[r4,#0]            ;150
000050  f89d0004          LDRB     r0,[sp,#4]            ;150
000054  7120              STRB     r0,[r4,#4]            ;150
;;;152      }
000056  b002              ADD      sp,sp,#8
000058  bd10              POP      {r4,pc}
;;;153    
                          ENDP

00005a  0000              DCW      0x0000
                  |L13.92|
                          DCD      0xb727c5ac
                  |L13.96|
                          DCD      0x3727c5ac
                  |L13.100|
000064  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki7RadiansmIERKS0_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7RadiansmIERKS0_ PROC ; Anki::Radians::operator -=(const Anki::Radians&)
;;;95       }
;;;96       void Radians::operator-=(const Radians& b)
000000  b510              PUSH     {r4,lr}
;;;97       {
000002  b082              SUB      sp,sp,#8
000004  ed9f0a0d          VLDR     s0,|L14.60|
000008  2201              MOVS     r2,#1
00000a  ed8d0a00          VSTR     s0,[sp,#0]
00000e  4604              MOV      r4,r0
000010  f88d2004          STRB     r2,[sp,#4]
000014  ed940a00          VLDR     s0,[r4,#0]
000018  edd10a00          VLDR     s1,[r1,#0]
;;;98         (*this) = (*this) - b;
00001c  4668              MOV      r0,sp
00001e  ee300a60          VSUB.F32 s0,s0,s1
000022  ed8d0a00          VSTR     s0,[sp,#0]
000026  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
00002a  ed9d0a00          VLDR     s0,[sp,#0]
00002e  ed840a00          VSTR     s0,[r4,#0]
000032  f89d0004          LDRB     r0,[sp,#4]
000036  7120              STRB     r0,[r4,#4]
;;;99       }
000038  b002              ADD      sp,sp,#8
00003a  bd10              POP      {r4,pc}
;;;100    
                          ENDP

                  |L14.60|
00003c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki7RadiansmIEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7RadiansmIEf PROC ; Anki::Radians::operator -=(float)
;;;91       }
;;;92       void Radians::operator-=(float b)
000000  b570              PUSH     {r4-r6,lr}
;;;93       {
000002  b084              SUB      sp,sp,#0x10
000004  2601              MOVS     r6,#1
000006  4604              MOV      r4,r0
000008  f88d600c          STRB     r6,[sp,#0xc]
;;;94         (*this) = (*this) - b;
00000c  466d              MOV      r5,sp
00000e  a802              ADD      r0,sp,#8
000010  ed8d0a02          VSTR     s0,[sp,#8]
000014  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
000018  ed9f0a0c          VLDR     s0,|L15.76|
00001c  4628              MOV      r0,r5
00001e  ed8d0a00          VSTR     s0,[sp,#0]
000022  f88d6004          STRB     r6,[sp,#4]
000026  ed940a00          VLDR     s0,[r4,#0]
00002a  eddd0a02          VLDR     s1,[sp,#8]
00002e  ee300a60          VSUB.F32 s0,s0,s1
000032  ed8d0a00          VSTR     s0,[sp,#0]
000036  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
00003a  ed9d0a00          VLDR     s0,[sp,#0]
00003e  ed840a00          VSTR     s0,[r4,#0]
000042  f89d0004          LDRB     r0,[sp,#4]
000046  7120              STRB     r0,[r4,#4]
;;;95       }
000048  b004              ADD      sp,sp,#0x10
00004a  bd70              POP      {r4-r6,pc}
;;;96       void Radians::operator-=(const Radians& b)
                          ENDP

                  |L15.76|
00004c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki7RadiansmLEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7RadiansmLEf PROC ; Anki::Radians::operator *=(float)
;;;131      }
;;;132      void Radians::operator*=(float b)
000000  b510              PUSH     {r4,lr}
;;;133      {
000002  b082              SUB      sp,sp,#8
000004  eddf0a0c          VLDR     s1,|L16.56|
000008  4604              MOV      r4,r0
00000a  edcd0a00          VSTR     s1,[sp,#0]
00000e  2101              MOVS     r1,#1
000010  f88d1004          STRB     r1,[sp,#4]
000014  edd40a00          VLDR     s1,[r4,#0]
;;;134        (*this) = (*this) * b;
000018  4668              MOV      r0,sp
00001a  ee200a80          VMUL.F32 s0,s1,s0
00001e  ed8d0a00          VSTR     s0,[sp,#0]
000022  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
000026  ed9d0a00          VLDR     s0,[sp,#0]
00002a  ed840a00          VSTR     s0,[r4,#0]
00002e  f89d0004          LDRB     r0,[sp,#4]
000032  7120              STRB     r0,[r4,#4]
;;;135      }
000034  b002              ADD      sp,sp,#8
000036  bd10              POP      {r4,pc}
;;;136    
                          ENDP

                  |L16.56|
000038  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki7RadianspLERKS0_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7RadianspLERKS0_ PROC ; Anki::Radians::operator +=(const Anki::Radians&)
;;;68       }
;;;69       void Radians::operator+=(const Radians& b)
000000  b510              PUSH     {r4,lr}
;;;70       {
000002  b082              SUB      sp,sp,#8
000004  ed9f0a0d          VLDR     s0,|L17.60|
000008  2201              MOVS     r2,#1
00000a  ed8d0a00          VSTR     s0,[sp,#0]
00000e  4604              MOV      r4,r0
000010  f88d2004          STRB     r2,[sp,#4]
000014  ed940a00          VLDR     s0,[r4,#0]
000018  edd10a00          VLDR     s1,[r1,#0]
;;;71         (*this) = (*this) + b;
00001c  4668              MOV      r0,sp
00001e  ee300a20          VADD.F32 s0,s0,s1
000022  ed8d0a00          VSTR     s0,[sp,#0]
000026  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
00002a  ed9d0a00          VLDR     s0,[sp,#0]
00002e  ed840a00          VSTR     s0,[r4,#0]
000032  f89d0004          LDRB     r0,[sp,#4]
000036  7120              STRB     r0,[r4,#4]
;;;72       }
000038  b002              ADD      sp,sp,#8
00003a  bd10              POP      {r4,pc}
;;;73     
                          ENDP

                  |L17.60|
00003c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki7RadianspLEf||, CODE, READONLY, ALIGN=2

                  _ZN4Anki7RadianspLEf PROC ; Anki::Radians::operator +=(float)
;;;64       }
;;;65       void Radians::operator+=(float b)
000000  b570              PUSH     {r4-r6,lr}
;;;66       {
000002  b084              SUB      sp,sp,#0x10
000004  2601              MOVS     r6,#1
000006  4604              MOV      r4,r0
000008  f88d600c          STRB     r6,[sp,#0xc]
;;;67         (*this) = (*this) + b;
00000c  466d              MOV      r5,sp
00000e  a802              ADD      r0,sp,#8
000010  ed8d0a02          VSTR     s0,[sp,#8]
000014  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
000018  ed9f0a0c          VLDR     s0,|L18.76|
00001c  4628              MOV      r0,r5
00001e  ed8d0a00          VSTR     s0,[sp,#0]
000022  f88d6004          STRB     r6,[sp,#4]
000026  ed940a00          VLDR     s0,[r4,#0]
00002a  eddd0a02          VLDR     s1,[sp,#8]
00002e  ee300a20          VADD.F32 s0,s0,s1
000032  ed8d0a00          VSTR     s0,[sp,#0]
000036  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
00003a  ed9d0a00          VLDR     s0,[sp,#0]
00003e  ed840a00          VSTR     s0,[r4,#0]
000042  f89d0004          LDRB     r0,[sp,#4]
000046  7120              STRB     r0,[r4,#4]
;;;68       }
000048  b004              ADD      sp,sp,#0x10
00004a  bd70              POP      {r4-r6,pc}
;;;69       void Radians::operator+=(const Radians& b)
                          ENDP

                  |L18.76|
00004c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4AnkidvERKNS_7RadiansEf||, CODE, READONLY, ALIGN=2

                  _ZN4AnkidvERKNS_7RadiansEf PROC ; Anki::operator /(const Anki::Radians&, float)
;;;137      // Angle division operator
;;;138      Radians operator/(const Radians& a, float b)
000000  eeb50ac0          VCMPE.F32 s0,#0.0
;;;139      {
000004  b510              PUSH     {r4,lr}
;;;140        // Check for divide by 0
;;;141        assert(!NEAR_ZERO(b));  // Check for divide by 0
000006  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000a  d009              BEQ      |L19.32|
00000c  ee102a10          VMOV     r2,s0
000010  4b0c              LDR      r3,|L19.68|
000012  4293              CMP      r3,r2
000014  d906              BLS      |L19.36|
000016  ee102a10          VMOV     r2,s0
00001a  4b0b              LDR      r3,|L19.72|
00001c  429a              CMP      r2,r3
00001e  da01              BGE      |L19.36|
                  |L19.32|
000020  f7fffffe          BL       abort
                  |L19.36|
000024  eddf0a09          VLDR     s1,|L19.76|
000028  2201              MOVS     r2,#1
00002a  edc00a00          VSTR     s1,[r0,#0]
00002e  7102              STRB     r2,[r0,#4]
;;;142    
;;;143        Radians newRadians;
;;;144        newRadians.radians_ = a.radians_ / b;
000030  edd10a00          VLDR     s1,[r1,#0]
000034  ee801a80          VDIV.F32 s2,s1,s0
000038  ed801a00          VSTR     s2,[r0,#0]
;;;145        newRadians.rescale();
00003c  e8bd4010          POP      {r4,lr}
000040  f7ffbffe          B.W      _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;146    
;;;147        return newRadians;
;;;148      }
;;;149      void Radians::operator/=(float b)
                          ENDP

                  |L19.68|
                          DCD      0xb727c5ac
                  |L19.72|
                          DCD      0x3727c5ac
                  |L19.76|
00004c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4AnkieqERKNS_7RadiansES2_||, CODE, READONLY, ALIGN=2

                  _ZN4AnkieqERKNS_7RadiansES2_ PROC ; Anki::operator ==(const Anki::Radians&, const Anki::Radians&)
;;;155      // two radian values is within tolerance.
;;;156      bool operator==(const Radians& a, const Radians& b)
000000  edd00a00          VLDR     s1,[r0,#0]
;;;157      {
;;;158        return NEAR(a.radians_, b.radians_, FLOATING_POINT_COMPARISON_TOLERANCE);
000004  ed910a00          VLDR     s0,[r1,#0]
000008  eef40a40          VCMP.F32 s1,s0
00000c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000010  d00f              BEQ      |L20.50|
000012  ed9f1a0a          VLDR     s2,|L20.60|
000016  ee701a41          VSUB.F32 s3,s0,s2
00001a  eef40ae1          VCMPE.F32 s1,s3
00001e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000022  dd08              BLE      |L20.54|
000024  ee300a01          VADD.F32 s0,s0,s2
000028  eef40ac0          VCMPE.F32 s1,s0
00002c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000030  d201              BCS      |L20.54|
                  |L20.50|
000032  2001              MOVS     r0,#1
;;;159      }
000034  4770              BX       lr
                  |L20.54|
000036  2000              MOVS     r0,#0                 ;158
000038  4770              BX       lr
;;;160    
                          ENDP

00003a  0000              DCW      0x0000
                  |L20.60|
00003c  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||i._ZN4AnkigeERKNS_7RadiansES2_||, CODE, READONLY, ALIGN=2

                  _ZN4AnkigeERKNS_7RadiansES2_ PROC ; Anki::operator >=(const Anki::Radians&, const Anki::Radians&)
;;;174      // Returns true if a >= b
;;;175      bool operator>=(const Radians& a, const Radians& b)
000000  ed900a00          VLDR     s0,[r0,#0]
000004  edd10a00          VLDR     s1,[r1,#0]
000008  ed9f1a1c          VLDR     s2,|L21.124|
00000c  ee701a60          VSUB.F32 s3,s0,s1
000010  eef51ac0          VCMPE.F32 s3,#0.0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;176      {
000018  dd18              BLE      |L21.76|
00001a  eeb40a60          VCMP.F32 s0,s1
00001e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000022  d00d              BEQ      |L21.64|
000024  ee701ac1          VSUB.F32 s3,s1,s2
000028  eeb40ae1          VCMPE.F32 s0,s3
00002c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000030  dd08              BLE      |L21.68|
000032  ee701a81          VADD.F32 s3,s1,s2
000036  eeb40ae1          VCMPE.F32 s0,s3
00003a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003e  d201              BCS      |L21.68|
                  |L21.64|
000040  2001              MOVS     r0,#1
000042  e000              B        |L21.70|
                  |L21.68|
000044  2000              MOVS     r0,#0
                  |L21.70|
000046  f0900f01          TEQ      r0,#1
00004a  d114              BNE      |L21.118|
                  |L21.76|
00004c  eeb40a60          VCMP.F32 s0,s1
000050  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;177        return(a > b) || (a == b);
000054  d00f              BEQ      |L21.118|
000056  ee701ac1          VSUB.F32 s3,s1,s2
00005a  eeb40ae1          VCMPE.F32 s0,s3
00005e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000062  dd06              BLE      |L21.114|
000064  ee700a81          VADD.F32 s1,s1,s2
000068  eeb40ae0          VCMPE.F32 s0,s1
00006c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000070  d301              BCC      |L21.118|
                  |L21.114|
000072  2000              MOVS     r0,#0
;;;178      }
000074  4770              BX       lr
                  |L21.118|
000076  2001              MOVS     r0,#1                 ;177
000078  4770              BX       lr
;;;179    
                          ENDP

00007a  0000              DCW      0x0000
                  |L21.124|
00007c  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||i._ZN4AnkigtERKNS_7RadiansES2_||, CODE, READONLY, ALIGN=2

                  _ZN4AnkigtERKNS_7RadiansES2_ PROC ; Anki::operator >(const Anki::Radians&, const Anki::Radians&)
;;;168      // Returns true if a > b
;;;169      bool operator>(const Radians& a, const Radians& b)
000000  ed900a00          VLDR     s0,[r0,#0]
000004  edd10a00          VLDR     s1,[r1,#0]
;;;170      {
;;;171        return((a.ToFloat() - b.ToFloat()) > 0) && (a != b);
000008  ee301a60          VSUB.F32 s2,s0,s1
00000c  eeb51ac0          VCMPE.F32 s2,#0.0
000010  eef1fa10          VMRS     APSR_nzcv,FPSCR
000014  dd1c              BLE      |L22.80|
000016  eeb40a60          VCMP.F32 s0,s1                 ;170
00001a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;170
00001e  d00f              BEQ      |L22.64|
000020  ed9f1a0c          VLDR     s2,|L22.84|
000024  ee701ac1          VSUB.F32 s3,s1,s2
000028  eeb40ae1          VCMPE.F32 s0,s3
00002c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000030  dd08              BLE      |L22.68|
000032  ee700a81          VADD.F32 s1,s1,s2
000036  eeb40ae0          VCMPE.F32 s0,s1
00003a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003e  d201              BCS      |L22.68|
                  |L22.64|
000040  2001              MOVS     r0,#1
000042  e000              B        |L22.70|
                  |L22.68|
000044  2000              MOVS     r0,#0
                  |L22.70|
000046  f0900f01          TEQ      r0,#1
00004a  bf1c              ITT      NE
00004c  2001              MOVNE    r0,#1
;;;172      }
00004e  4770              BXNE     lr
                  |L22.80|
000050  2000              MOVS     r0,#0                 ;171
000052  4770              BX       lr
;;;173    
                          ENDP

                  |L22.84|
000054  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||i._ZN4AnkileERKNS_7RadiansES2_||, CODE, READONLY, ALIGN=1

                  _ZN4AnkileERKNS_7RadiansES2_ PROC ; Anki::operator <=(const Anki::Radians&, const Anki::Radians&)
;;;186      // Returns true if a <= b
;;;187      bool operator<=(const Radians& a, const Radians& b)
000000  460a              MOV      r2,r1
;;;188      {
;;;189        return(b >= a);
000002  4601              MOV      r1,r0
000004  4610              MOV      r0,r2
000006  f7ffbffe          B.W      _ZN4AnkigeERKNS_7RadiansES2_ ; Anki::operator >=(const Anki::Radians&, const Anki::Radians&)
;;;190      }
;;;191    
                          ENDP


                          AREA ||i._ZN4AnkiltERKNS_7RadiansES2_||, CODE, READONLY, ALIGN=2

                  _ZN4AnkiltERKNS_7RadiansES2_ PROC ; Anki::operator <(const Anki::Radians&, const Anki::Radians&)
;;;180      // Returns true if a < b
;;;181      bool operator<(const Radians& a, const Radians& b)
000000  ed910a00          VLDR     s0,[r1,#0]
000004  edd00a00          VLDR     s1,[r0,#0]
000008  ee301a60          VSUB.F32 s2,s0,s1
00000c  eeb51ac0          VCMPE.F32 s2,#0.0
000010  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;182      {
000014  dd1c              BLE      |L24.80|
000016  eeb40a60          VCMP.F32 s0,s1
00001a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001e  d00f              BEQ      |L24.64|
000020  ed9f1a0c          VLDR     s2,|L24.84|
000024  ee701ac1          VSUB.F32 s3,s1,s2
000028  eeb40ae1          VCMPE.F32 s0,s3
00002c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000030  dd08              BLE      |L24.68|
000032  ee700a81          VADD.F32 s1,s1,s2
000036  eeb40ae0          VCMPE.F32 s0,s1
00003a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003e  d201              BCS      |L24.68|
                  |L24.64|
000040  2001              MOVS     r0,#1
000042  e000              B        |L24.70|
                  |L24.68|
000044  2000              MOVS     r0,#0
                  |L24.70|
000046  f0900f01          TEQ      r0,#1
00004a  bf1c              ITT      NE
00004c  2001              MOVNE    r0,#1
;;;183        return(b > a);
;;;184      }
00004e  4770              BXNE     lr
                  |L24.80|
000050  2000              MOVS     r0,#0
000052  4770              BX       lr
;;;185    
                          ENDP

                  |L24.84|
000054  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||i._ZN4AnkimiERKNS_7RadiansES2_||, CODE, READONLY, ALIGN=2

                  _ZN4AnkimiERKNS_7RadiansES2_ PROC ; Anki::operator -(const Anki::Radians&, const Anki::Radians&)
;;;74       // Angle subtraction operators
;;;75       Radians operator-(const Radians& a, const Radians& b)
000000  ed9f0a07          VLDR     s0,|L25.32|
000004  2301              MOVS     r3,#1
000006  ed800a00          VSTR     s0,[r0,#0]
00000a  7103              STRB     r3,[r0,#4]
;;;76       {
;;;77         Radians newRadians;
;;;78     
;;;79         newRadians.radians_ = a.radians_ - b.radians_;
00000c  ed910a00          VLDR     s0,[r1,#0]
000010  edd20a00          VLDR     s1,[r2,#0]
000014  ee300a60          VSUB.F32 s0,s0,s1
000018  ed800a00          VSTR     s0,[r0,#0]
;;;80         newRadians.rescale();
00001c  f7ffbffe          B.W      _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;81     
;;;82         return newRadians;
;;;83       }
;;;84       Radians operator-(const Radians& a, float b)
                          ENDP

                  |L25.32|
000020  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4AnkimiERKNS_7RadiansEf||, CODE, READONLY, ALIGN=2

                  _ZN4AnkimiERKNS_7RadiansEf PROC ; Anki::operator -(const Anki::Radians&, float)
;;;83       }
;;;84       Radians operator-(const Radians& a, float b)
000000  b570              PUSH     {r4-r6,lr}
;;;85       {
000002  b082              SUB      sp,sp,#8
000004  2601              MOVS     r6,#1
;;;86         return a - Radians(b);
000006  4604              MOV      r4,r0
000008  f88d6004          STRB     r6,[sp,#4]
00000c  460d              MOV      r5,r1                 ;85
00000e  4668              MOV      r0,sp
000010  ed8d0a00          VSTR     s0,[sp,#0]
000014  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
000018  ed9f0a08          VLDR     s0,|L26.60|
00001c  4620              MOV      r0,r4
00001e  ed840a00          VSTR     s0,[r4,#0]
000022  7126              STRB     r6,[r4,#4]
000024  ed950a00          VLDR     s0,[r5,#0]
000028  eddd0a00          VLDR     s1,[sp,#0]
00002c  ee300a60          VSUB.F32 s0,s0,s1
000030  ed840a00          VSTR     s0,[r4,#0]
000034  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;87       }
000038  b002              ADD      sp,sp,#8
00003a  bd70              POP      {r4-r6,pc}
;;;88       Radians operator-(float a, const Radians& b)
                          ENDP

                  |L26.60|
00003c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4AnkimiEfRKNS_7RadiansE||, CODE, READONLY, ALIGN=2

                  _ZN4AnkimiEfRKNS_7RadiansE PROC ; Anki::operator -(float, const Anki::Radians&)
;;;87       }
;;;88       Radians operator-(float a, const Radians& b)
000000  b570              PUSH     {r4-r6,lr}
;;;89       {
000002  b082              SUB      sp,sp,#8
000004  2601              MOVS     r6,#1
;;;90         return Radians(a) - b;
000006  4604              MOV      r4,r0
000008  f88d6004          STRB     r6,[sp,#4]
00000c  460d              MOV      r5,r1                 ;89
00000e  4668              MOV      r0,sp
000010  ed8d0a00          VSTR     s0,[sp,#0]
000014  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
000018  ed9f0a08          VLDR     s0,|L27.60|
00001c  4620              MOV      r0,r4
00001e  ed840a00          VSTR     s0,[r4,#0]
000022  7126              STRB     r6,[r4,#4]
000024  ed9d0a00          VLDR     s0,[sp,#0]
000028  edd50a00          VLDR     s1,[r5,#0]
00002c  ee300a60          VSUB.F32 s0,s0,s1
000030  ed840a00          VSTR     s0,[r4,#0]
000034  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;91       }
000038  b002              ADD      sp,sp,#8
00003a  bd70              POP      {r4-r6,pc}
;;;92       void Radians::operator-=(float b)
                          ENDP

                  |L27.60|
00003c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4AnkimlERKNS_7RadiansEf||, CODE, READONLY, ALIGN=2

                  _ZN4AnkimlERKNS_7RadiansEf PROC ; Anki::operator *(const Anki::Radians&, float)
;;;118      // Angle multiplication operators
;;;119      Radians operator*(const Radians& a, float b)
000000  eddf0a06          VLDR     s1,|L28.28|
000004  2201              MOVS     r2,#1
000006  edc00a00          VSTR     s1,[r0,#0]
00000a  7102              STRB     r2,[r0,#4]
;;;120      {
;;;121        Radians newRadians;
;;;122    
;;;123        newRadians.radians_ = a.radians_ * b;
00000c  edd10a00          VLDR     s1,[r1,#0]
000010  ee200a80          VMUL.F32 s0,s1,s0
000014  ed800a00          VSTR     s0,[r0,#0]
;;;124        newRadians.rescale();
000018  f7ffbffe          B.W      _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;125    
;;;126        return newRadians;
;;;127      }
;;;128      Radians operator*(float a, const Radians& b)
                          ENDP

                  |L28.28|
00001c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4AnkimlEfRKNS_7RadiansE||, CODE, READONLY, ALIGN=2

                  _ZN4AnkimlEfRKNS_7RadiansE PROC ; Anki::operator *(float, const Anki::Radians&)
;;;127      }
;;;128      Radians operator*(float a, const Radians& b)
000000  eddf0a06          VLDR     s1,|L29.28|
000004  2201              MOVS     r2,#1
000006  edc00a00          VSTR     s1,[r0,#0]
00000a  7102              STRB     r2,[r0,#4]
00000c  edd10a00          VLDR     s1,[r1,#0]
000010  ee200a80          VMUL.F32 s0,s1,s0
000014  ed800a00          VSTR     s0,[r0,#0]
000018  f7ffbffe          B.W      _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;129      {
;;;130        return b * a;
;;;131      }
;;;132      void Radians::operator*=(float b)
                          ENDP

                  |L29.28|
00001c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4AnkineERKNS_7RadiansES2_||, CODE, READONLY, ALIGN=2

                  _ZN4AnkineERKNS_7RadiansES2_ PROC ; Anki::operator !=(const Anki::Radians&, const Anki::Radians&)
;;;162      // the two radian values is outside tolerance.
;;;163      bool operator!=(const Radians& a, const Radians& b)
000000  edd00a00          VLDR     s1,[r0,#0]
000004  ed910a00          VLDR     s0,[r1,#0]
000008  eef40a40          VCMP.F32 s1,s0
00000c  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;164      {
000010  d00f              BEQ      |L30.50|
000012  ed9f1a0b          VLDR     s2,|L30.64|
000016  ee701a41          VSUB.F32 s3,s0,s2
00001a  eef40ae1          VCMPE.F32 s1,s3
00001e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000022  dd08              BLE      |L30.54|
000024  ee300a01          VADD.F32 s0,s0,s2
000028  eef40ac0          VCMPE.F32 s1,s0
00002c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000030  d201              BCS      |L30.54|
                  |L30.50|
000032  2001              MOVS     r0,#1
000034  e000              B        |L30.56|
                  |L30.54|
000036  2000              MOVS     r0,#0
                  |L30.56|
;;;165        return !(a == b);
000038  f0800001          EOR      r0,r0,#1
;;;166      }
00003c  4770              BX       lr
;;;167    
                          ENDP

00003e  0000              DCW      0x0000
                  |L30.64|
000040  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||i._ZN4AnkiplERKNS_7RadiansES2_||, CODE, READONLY, ALIGN=2

                  _ZN4AnkiplERKNS_7RadiansES2_ PROC ; Anki::operator +(const Anki::Radians&, const Anki::Radians&)
;;;47       // Angle addition operators
;;;48       Radians operator+(const Radians& a, const Radians& b)
000000  ed9f0a07          VLDR     s0,|L31.32|
000004  2301              MOVS     r3,#1
000006  ed800a00          VSTR     s0,[r0,#0]
00000a  7103              STRB     r3,[r0,#4]
;;;49       {
;;;50         Radians newRadians;
;;;51     
;;;52         newRadians.radians_ = a.radians_ + b.radians_;
00000c  ed910a00          VLDR     s0,[r1,#0]
000010  edd20a00          VLDR     s1,[r2,#0]
000014  ee300a20          VADD.F32 s0,s0,s1
000018  ed800a00          VSTR     s0,[r0,#0]
;;;53         newRadians.rescale();
00001c  f7ffbffe          B.W      _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;54     
;;;55         return newRadians;
;;;56       }
;;;57       Radians operator+(const Radians& a, float b)
                          ENDP

                  |L31.32|
000020  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4AnkiplERKNS_7RadiansEf||, CODE, READONLY, ALIGN=2

                  _ZN4AnkiplERKNS_7RadiansEf PROC ; Anki::operator +(const Anki::Radians&, float)
;;;56       }
;;;57       Radians operator+(const Radians& a, float b)
000000  b570              PUSH     {r4-r6,lr}
;;;58       {
000002  b082              SUB      sp,sp,#8
000004  2601              MOVS     r6,#1
;;;59         return a + Radians(b);
000006  4604              MOV      r4,r0
000008  f88d6004          STRB     r6,[sp,#4]
00000c  460d              MOV      r5,r1                 ;58
00000e  4668              MOV      r0,sp
000010  ed8d0a00          VSTR     s0,[sp,#0]
000014  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
000018  ed9f0a08          VLDR     s0,|L32.60|
00001c  4620              MOV      r0,r4
00001e  ed840a00          VSTR     s0,[r4,#0]
000022  7126              STRB     r6,[r4,#4]
000024  ed950a00          VLDR     s0,[r5,#0]
000028  eddd0a00          VLDR     s1,[sp,#0]
00002c  ee300a20          VADD.F32 s0,s0,s1
000030  ed840a00          VSTR     s0,[r4,#0]
000034  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;60       }
000038  b002              ADD      sp,sp,#8
00003a  bd70              POP      {r4-r6,pc}
;;;61       Radians operator+(float a, const Radians& b)
                          ENDP

                  |L32.60|
00003c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4AnkiplEfRKNS_7RadiansE||, CODE, READONLY, ALIGN=2

                  _ZN4AnkiplEfRKNS_7RadiansE PROC ; Anki::operator +(float, const Anki::Radians&)
;;;60       }
;;;61       Radians operator+(float a, const Radians& b)
000000  b570              PUSH     {r4-r6,lr}
;;;62       {
000002  b082              SUB      sp,sp,#8
000004  2601              MOVS     r6,#1
;;;63         return Radians(a) + b;
000006  4604              MOV      r4,r0
000008  f88d6004          STRB     r6,[sp,#4]
00000c  460d              MOV      r5,r1                 ;62
00000e  4668              MOV      r0,sp
000010  ed8d0a00          VSTR     s0,[sp,#0]
000014  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
000018  ed9f0a08          VLDR     s0,|L33.60|
00001c  4620              MOV      r0,r4
00001e  ed840a00          VSTR     s0,[r4,#0]
000022  7126              STRB     r6,[r4,#4]
000024  ed9d0a00          VLDR     s0,[sp,#0]
000028  edd50a00          VLDR     s1,[r5,#0]
00002c  ee300a20          VADD.F32 s0,s0,s1
000030  ed840a00          VSTR     s0,[r4,#0]
000034  f7fffffe          BL       _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;64       }
000038  b002              ADD      sp,sp,#8
00003a  bd70              POP      {r4-r6,pc}
;;;65       void Radians::operator+=(float b)
                          ENDP

                  |L33.60|
00003c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZNK4Anki7Radians10getDegreesEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki7Radians10getDegreesEv PROC ; Anki::Radians::getDegrees() const
;;;210      // Returns the object's radians value in degrees
;;;211      float Radians::getDegrees() const
000000  ed900a00          VLDR     s0,[r0,#0]
;;;212      {
;;;213        return RAD_TO_DEG_F32(radians_);
000004  eddf0a02          VLDR     s1,|L34.16|
000008  ee200a20          VMUL.F32 s0,s0,s1
;;;214      }
00000c  4770              BX       lr
;;;215    
                          ENDP

00000e  0000              DCW      0x0000
                  |L34.16|
000010  42652ee1          DCFS     0x42652ee1 ; 57.295780181884766

                          AREA ||i._ZNK4Anki7RadiansngEv||, CODE, READONLY, ALIGN=2

                  _ZNK4Anki7RadiansngEv PROC ; Anki::Radians::operator -() const
;;;101      // Negation operator
;;;102      Radians Radians::operator-() const
000000  ed9f0a09          VLDR     s0,|L35.40|
000004  2201              MOVS     r2,#1
000006  ed800a00          VSTR     s0,[r0,#0]
00000a  7102              STRB     r2,[r0,#4]
;;;103      {
;;;104        Radians newRadians;
;;;105    
;;;106        newRadians.radians_ = -radians_;
00000c  ed910a00          VLDR     s0,[r1,#0]
000010  eeb10a40          VNEG.F32 s0,s0
000014  ed800a00          VSTR     s0,[r0,#0]
;;;107        if(doRescaling_) {
000018  7909              LDRB     r1,[r1,#4]
00001a  2900              CMP      r1,#0
;;;108          newRadians.doRescaling_ = true;
;;;109          newRadians.rescale();
;;;110        }
;;;111        else {
;;;112          newRadians.doRescaling_ = false;
00001c  bf04              ITT      EQ
00001e  7101              STRBEQ   r1,[r0,#4]
;;;113        }
;;;114    
;;;115        return newRadians;
;;;116      }
000020  4770              BXEQ     lr
000022  f7ffbffe          B.W      _ZN4Anki7Radians7rescaleEv ; Anki::Radians::rescale()
;;;117    
                          ENDP

000026  0000              DCW      0x0000
                  |L35.40|
000028  00000000          DCFS     0x00000000 ; 0

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki7RadiansC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadiansC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN4Anki7Radians7rescaleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7Radians7rescaleEv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._ZN4Anki7RadiansaSEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadiansaSEf||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._ZN4Anki7RadiansC1Ef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadiansC1Ef||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN4Anki7RadiansaSERKS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadiansaSERKS0_||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN4Anki7RadiansC1ERKS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadiansC1ERKS0_||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._ZN4AnkiplERKNS_7RadiansES2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkiplERKNS_7RadiansES2_||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._ZN4AnkiplERKNS_7RadiansEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkiplERKNS_7RadiansEf||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._ZN4Anki7RadianspLEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadianspLEf||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._ZN4Anki7RadianspLERKS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadianspLERKS0_||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._ZN4AnkimiERKNS_7RadiansES2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkimiERKNS_7RadiansES2_||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._ZN4AnkimiERKNS_7RadiansEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkimiERKNS_7RadiansEf||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._ZN4Anki7RadiansmIEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadiansmIEf||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i._ZN4Anki7RadiansmIERKS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadiansmIERKS0_||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i._ZN4AnkimlERKNS_7RadiansEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkimlERKNS_7RadiansEf||
                          DCD      0x00000001

                          AREA ||area_number.51||, LINKORDER=||i._ZN4Anki7RadiansmLEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadiansmLEf||
                          DCD      0x00000001

                          AREA ||area_number.52||, LINKORDER=||i._ZN4AnkidvERKNS_7RadiansEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkidvERKNS_7RadiansEf||
                          DCD      0x00000001

                          AREA ||area_number.53||, LINKORDER=||i._ZN4Anki7RadiansdVEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7RadiansdVEf||
                          DCD      0x00000001

                          AREA ||area_number.54||, LINKORDER=||i._ZNK4Anki7RadiansngEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki7RadiansngEv||
                          DCD      0x00000001

                          AREA ||area_number.55||, LINKORDER=||i._ZN4Anki7Radians14getAbsoluteValEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7Radians14getAbsoluteValEv||
                          DCD      0x00000001

                          AREA ||area_number.56||, LINKORDER=||i._ZNK4Anki7Radians10getDegreesEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK4Anki7Radians10getDegreesEv||
                          DCD      0x00000001

                          AREA ||area_number.57||, LINKORDER=||i._ZN4Anki7Radians10setDegreesEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7Radians10setDegreesEf||
                          DCD      0x00000001

                          AREA ||area_number.58||, LINKORDER=||i._ZN4Anki7Radians16performRescalingEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7Radians16performRescalingEb||
                          DCD      0x00000001

                          AREA ||area_number.59||, LINKORDER=||i._ZN4Anki7Radians15angularDistanceERKS0_b||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki7Radians15angularDistanceERKS0_b||
                          DCD      0x00000001

                          AREA ||area_number.60||, LINKORDER=||i._ZN4Anki17Radians_noRescale12makePositiveEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki17Radians_noRescale12makePositiveEv||
                          DCD      0x00000001

                          AREA ||area_number.61||, LINKORDER=||i._ZN4Anki17Radians_noRescale12makeNegativeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.61||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki17Radians_noRescale12makeNegativeEv||
                          DCD      0x00000001

                          AREA ||area_number.62||, LINKORDER=||i._ZN4AnkiplEfRKNS_7RadiansE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.62||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkiplEfRKNS_7RadiansE||
                          DCD      0x00000001

                          AREA ||area_number.63||, LINKORDER=||i._ZN4AnkimiEfRKNS_7RadiansE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkimiEfRKNS_7RadiansE||
                          DCD      0x00000001

                          AREA ||area_number.64||, LINKORDER=||i._ZN4AnkimlEfRKNS_7RadiansE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkimlEfRKNS_7RadiansE||
                          DCD      0x00000001

                          AREA ||area_number.65||, LINKORDER=||i._ZN4AnkieqERKNS_7RadiansES2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkieqERKNS_7RadiansES2_||
                          DCD      0x00000001

                          AREA ||area_number.66||, LINKORDER=||i._ZN4AnkineERKNS_7RadiansES2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkineERKNS_7RadiansES2_||
                          DCD      0x00000001

                          AREA ||area_number.67||, LINKORDER=||i._ZN4AnkigtERKNS_7RadiansES2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkigtERKNS_7RadiansES2_||
                          DCD      0x00000001

                          AREA ||area_number.68||, LINKORDER=||i._ZN4AnkigeERKNS_7RadiansES2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.68||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkigeERKNS_7RadiansES2_||
                          DCD      0x00000001

                          AREA ||area_number.69||, LINKORDER=||i._ZN4AnkiltERKNS_7RadiansES2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.69||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkiltERKNS_7RadiansES2_||
                          DCD      0x00000001

                          AREA ||area_number.70||, LINKORDER=||i._ZN4AnkileERKNS_7RadiansES2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.70||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4AnkileERKNS_7RadiansES2_||
                          DCD      0x00000001
